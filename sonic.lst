00000000                            ;  =========================================================================
00000000                            ; |           Sonic the Hedgehog Disassembly for Sega Mega Drive            |
00000000                            ;  =========================================================================
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx, Stealth and Esrael L.G. Neto
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            	include	"_s1smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000001                  SourceDriver = 1 ; Please don't modify the value.
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000 =0000000C                  psgdelta	EQU 12
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =00000088                  smpsPitch10lo	EQU $88
00000000 =00000094                  smpsPitch09lo	EQU $94
00000000 =000000A0                  smpsPitch08lo	EQU $A0
00000000 =000000AC                  smpsPitch07lo	EQU $AC
00000000 =000000B8                  smpsPitch06lo	EQU $B8
00000000 =000000C4                  smpsPitch05lo	EQU $C4
00000000 =000000D0                  smpsPitch04lo	EQU $D0
00000000 =000000DC                  smpsPitch03lo	EQU $DC
00000000 =000000E8                  smpsPitch02lo	EQU $E8
00000000 =000000F4                  smpsPitch01lo	EQU $F4
00000000 =00000000                  smpsPitch00		EQU $00
00000000 =0000000C                  smpsPitch01hi	EQU $0C
00000000 =00000018                  smpsPitch02hi	EQU $18
00000000 =00000024                  smpsPitch03hi	EQU $24
00000000 =00000030                  smpsPitch04hi	EQU $30
00000000 =0000003C                  smpsPitch05hi	EQU $3C
00000000 =00000048                  smpsPitch06hi	EQU $48
00000000 =00000054                  smpsPitch07hi	EQU $54
00000000 =00000060                  smpsPitch08hi	EQU $60
00000000 =0000006C                  smpsPitch09hi	EQU $6C
00000000 =00000078                  smpsPitch10hi	EQU $78
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst		EQU	$80
00000000 =00000081                  nC0			EQU	$81
00000000 =00000082                  nCs0		EQU	$82
00000000 =00000083                  nD0			EQU	$83
00000000 =00000084                  nEb0		EQU	$84
00000000 =00000085                  nE0			EQU	$85
00000000 =00000086                  nF0			EQU	$86
00000000 =00000087                  nFs0		EQU	$87
00000000 =00000088                  nG0			EQU	$88
00000000 =00000089                  nAb0		EQU	$89
00000000 =0000008A                  nA0			EQU	$8A
00000000 =0000008B                  nBb0		EQU	$8B
00000000 =0000008C                  nB0			EQU	$8C
00000000 =0000008D                  nC1			EQU	$8D
00000000 =0000008E                  nCs1		EQU	$8E
00000000 =0000008F                  nD1			EQU	$8F
00000000 =00000090                  nEb1		EQU	$90
00000000 =00000091                  nE1			EQU	$91
00000000 =00000092                  nF1			EQU	$92
00000000 =00000093                  nFs1		EQU	$93
00000000 =00000094                  nG1			EQU	$94
00000000 =00000095                  nAb1		EQU	$95
00000000 =00000096                  nA1			EQU	$96
00000000 =00000097                  nBb1		EQU	$97
00000000 =00000098                  nB1			EQU	$98
00000000 =00000099                  nC2			EQU	$99
00000000 =0000009A                  nCs2		EQU	$9A
00000000 =0000009B                  nD2			EQU	$9B
00000000 =0000009C                  nEb2		EQU	$9C
00000000 =0000009D                  nE2			EQU	$9D
00000000 =0000009E                  nF2			EQU	$9E
00000000 =0000009F                  nFs2		EQU	$9F
00000000 =000000A0                  nG2			EQU	$A0
00000000 =000000A1                  nAb2		EQU	$A1
00000000 =000000A2                  nA2			EQU	$A2
00000000 =000000A3                  nBb2		EQU	$A3
00000000 =000000A4                  nB2			EQU	$A4
00000000 =000000A5                  nC3			EQU	$A5
00000000 =000000A6                  nCs3		EQU	$A6
00000000 =000000A7                  nD3			EQU	$A7
00000000 =000000A8                  nEb3		EQU	$A8
00000000 =000000A9                  nE3			EQU	$A9
00000000 =000000AA                  nF3			EQU	$AA
00000000 =000000AB                  nFs3		EQU	$AB
00000000 =000000AC                  nG3			EQU	$AC
00000000 =000000AD                  nAb3		EQU	$AD
00000000 =000000AE                  nA3			EQU	$AE
00000000 =000000AF                  nBb3		EQU	$AF
00000000 =000000B0                  nB3			EQU	$B0
00000000 =000000B1                  nC4			EQU	$B1
00000000 =000000B2                  nCs4		EQU	$B2
00000000 =000000B3                  nD4			EQU	$B3
00000000 =000000B4                  nEb4		EQU	$B4
00000000 =000000B5                  nE4			EQU	$B5
00000000 =000000B6                  nF4			EQU	$B6
00000000 =000000B7                  nFs4		EQU	$B7
00000000 =000000B8                  nG4			EQU	$B8
00000000 =000000B9                  nAb4		EQU	$B9
00000000 =000000BA                  nA4			EQU	$BA
00000000 =000000BB                  nBb4		EQU	$BB
00000000 =000000BC                  nB4			EQU	$BC
00000000 =000000BD                  nC5			EQU	$BD
00000000 =000000BE                  nCs5		EQU	$BE
00000000 =000000BF                  nD5			EQU	$BF
00000000 =000000C0                  nEb5		EQU	$C0
00000000 =000000C1                  nE5			EQU	$C1
00000000 =000000C2                  nF5			EQU	$C2
00000000 =000000C3                  nFs5		EQU	$C3
00000000 =000000C4                  nG5			EQU	$C4
00000000 =000000C5                  nAb5		EQU	$C5
00000000 =000000C6                  nA5			EQU	$C6
00000000 =000000C7                  nBb5		EQU	$C7
00000000 =000000C8                  nB5			EQU	$C8
00000000 =000000C9                  nC6			EQU	$C9
00000000 =000000CA                  nCs6		EQU	$CA
00000000 =000000CB                  nD6			EQU	$CB
00000000 =000000CC                  nEb6		EQU	$CC
00000000 =000000CD                  nE6			EQU	$CD
00000000 =000000CE                  nF6			EQU	$CE
00000000 =000000CF                  nFs6		EQU	$CF
00000000 =000000D0                  nG6			EQU	$D0
00000000 =000000D1                  nAb6		EQU	$D1
00000000 =000000D2                  nA6			EQU	$D2
00000000 =000000D3                  nBb6		EQU	$D3
00000000 =000000D4                  nB6			EQU	$D4
00000000 =000000D5                  nC7			EQU	$D5
00000000 =000000D6                  nCs7		EQU	$D6
00000000 =000000D7                  nD7			EQU	$D7
00000000 =000000D8                  nEb7		EQU	$D8
00000000 =000000D9                  nE7			EQU	$D9
00000000 =000000DA                  nF7			EQU	$DA
00000000 =000000DB                  nFs7		EQU	$DB
00000000 =000000DC                  nG7			EQU	$DC
00000000 =000000DD                  nAb7		EQU	$DD
00000000 =000000DE                  nA7			EQU	$DE
00000000 =000000DF                  nBb7		EQU	$DF
00000000                            ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
00000000                            ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
00000000                            ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
00000000                            ; and ensure that the ending note is indeed the maximum PSG frequency.
00000000 =000000C6                  nMaxPSG				EQU nA5
00000000 =000000D2                  nMaxPSG1			EQU nA5+psgdelta
00000000 =000000D2                  nMaxPSG2			EQU nA5+psgdelta
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG Flutter Equates
00000000 =00000000                  fTone_00	EQU	$00
00000000 =00000001                  fTone_01	EQU	$01
00000000 =00000002                  fTone_02	EQU	$02
00000000 =00000003                  fTone_03	EQU	$03
00000000 =00000004                  fTone_04	EQU	$04
00000000 =00000005                  fTone_05	EQU	$05
00000000 =00000006                  fTone_06	EQU	$06
00000000 =00000007                  fTone_07	EQU	$07
00000000 =00000008                  fTone_08	EQU	$08
00000000 =00000009                  fTone_09	EQU	$09
00000000 =00000007                  fTone_0A	EQU	$07
00000000 =00000005                  fTone_0B	EQU	$05
00000000 =00000000                  fTone_0C	EQU	$00
00000000                            ;fTone_0D	EQU	$00
00000000 =00000002                  sTone_01	EQU	$02
00000000 =00000002                  sTone_02	EQU	$02
00000000 =00000005                  sTone_03	EQU	$05
00000000 =00000003                  sTone_04	EQU	$03
00000000 =00000001                  sTone_05	EQU	$01
00000000 =00000003                  sTone_06	EQU	$03
00000000 =00000000                  sTone_07	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_08	EQU	$09
00000000 =00000005                  sTone_09	EQU	$05
00000000 =00000007                  sTone_0A	EQU	$07
00000000 =00000000                  sTone_0B	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_0C	EQU	$09
00000000 =00000000                  sTone_0D	EQU	$00	; This time it matches 100%
00000000 =00000002                  sTone_0E	EQU	$02	; Duplicate of 01
00000000 =00000002                  sTone_0F	EQU	$02	; Duplicate of 02
00000000 =00000000                  sTone_10	EQU	$00
00000000 =00000006                  sTone_11	EQU	$06
00000000 =00000001                  sTone_12	EQU	$01	; Duplicate of 05
00000000 =00000003                  sTone_13	EQU	$03	; Duplicate of 06
00000000 =00000000                  sTone_14	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_15	EQU	$09	; Duplicate of 08
00000000 =00000005                  sTone_16	EQU	$05	; Duplicate of 09
00000000 =00000007                  sTone_17	EQU	$07	; Duplicate of 0A
00000000 =00000000                  sTone_18	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_19	EQU	$09	; Duplicate of 0C
00000000 =00000002                  sTone_1A	EQU	$02
00000000 =00000009                  sTone_1B	EQU	$09	; Duplicate of 0C
00000000 =00000006                  sTone_1C	EQU	$06
00000000 =00000007                  sTone_1D	EQU	$07
00000000 =00000002                  sTone_1E	EQU	$02
00000000 =00000004                  sTone_1F	EQU	$04
00000000 =00000000                  sTone_20	EQU	$00	; This time it matches 100%
00000000 =00000009                  sTone_21	EQU	$09
00000000 =00000004                  sTone_22	EQU	$04
00000000 =00000007                  sTone_23	EQU	$07
00000000 =00000002                  sTone_24	EQU	$02
00000000 =00000009                  sTone_25	EQU	$09
00000000 =00000007                  sTone_26	EQU	$07
00000000 =00000003                  sTone_27	EQU	$03
00000000                            ;sTone_28	EQU	$09
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick equ $81
00000000 =00000082                  dSnare equ $82
00000000 =00000085                  dCrashCymbal equ $85
00000000 =00000088                  dHiTimpani equ $88
00000000 =00000089                  dMidTimpani equ $89
00000000 =0000008A                  dLowTimpani equ $8A
00000000 =0000008B                  dFloorTimpani equ $8B
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Conversion macros and functions
00000000                            
00000000                            ;conv0To256  macro val 
00000000                            	;if val<$01
00000000                            		;dc.b (256-val+$FF)&$FF
00000000                            	;else	
00000000                            		;dc.b (256-val)&$FF	
00000000                            	;endc
00000000                            	;endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000                            smpsHeaderStartSong macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderStartSongConvert macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro div,mod
00000000                            	dc.b	div
00000000                            tempoDivider set div
00000000                            	dc.b    mod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if (narg=2)
00000000                            		dc.b	pitch
00000000                            		if (narg=3)
00000000                            			dc.b	vol
00000000                            		else
00000000                            			dc.b	$00
00000000                            		endif
00000000                            	else
00000000                            		dc.w	$00
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
00000000                            	endif
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	if (chanid&$80)<>0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            smpsDetune macro val
00000000                            	dc.b		$E1, val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000 =000000E6                  sVol	EQU $E6
00000000                            
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000 =000000E7                  smpsNA	EQU smpsNoAttack
00000000 =000000E7                  sNA	EQU smpsNoAttack
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            	dc.b	$E8,val
00000000                            	endm
00000000                            
00000000                            ; Add xx to channel pitch
00000000                            smpsAlterPitch macro val
00000000                            	dc.b	$E9,val
00000000                            	endm
00000000                            
00000000                            smpsChangeTransposition macro val
00000000                            	if SourceDriver>=3
00000000                            		dc.b	$FF,val
00000000                            	else
00000000                            		dc.b	$E9,val
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro val
00000000                            	dc.b	$EA
00000000                            	dc.b    val
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000 =000000EC                  spVol	EQU $EC
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            	dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; EFxx - Set Voice of FM channel to xx
00000000                            smpsFMvoice macro voice
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	wait+1,speed,change,(step*speed-1)&$FF
00000000                            	else
00000000                            		dc.b	wait,speed,change,step
00000000                            	endif
00000000                            	;dc.b	speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	dc.b	$E6,val1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; S1/S2 only coordination flag
00000000                            ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
00000000                            smpsWeirdD1LRR macro
00000000                            	dc.b	$F9
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set op1
00000000                            vcDT2 set op2
00000000                            vcDT3 set op3
00000000                            vcDT4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set op1
00000000                            vcCF2 set op2
00000000                            vcCF3 set op3
00000000                            vcCF4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set op1
00000000                            vcRS2 set op2
00000000                            vcRS3 set op3
00000000                            vcRS4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set op1
00000000                            vcAR2 set op2
00000000                            vcAR3 set op3
00000000                            vcAR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set op1
00000000                            vcAM2 set op2
00000000                            vcAM3 set op3
00000000                            vcAM4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set op1
00000000                            vcD1R2 set op2
00000000                            vcD1R3 set op3
00000000                            vcD1R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set op1
00000000                            vcD2R2 set op2
00000000                            vcD2R3 set op3
00000000                            vcD2R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set op1
00000000                            vcDL2 set op2
00000000                            vcDL3 set op3
00000000                            vcDL4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set op1
00000000                            vcRR2 set op2
00000000                            vcRR3 set op3
00000000                            vcRR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set op1
00000000                            vcTL2 set op2
00000000                            vcTL3 set op3
00000000                            vcTL4 set op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            	dc.b	(vcDT4<<4)+vcCF4, (vcDT3<<4)+vcCF3, (vcDT2<<4)+vcCF2, (vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4, (vcRS3<<6)+vcAR3, (vcRS2<<6)+vcAR2, (vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4, (vcAM3<<5)+vcD1R3, (vcAM2<<5)+vcD1R2, (vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4, vcD2R3, vcD2R2, vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4, (vcDL3<<4)+vcRR3, (vcDL2<<4)+vcRR2, (vcDL1<<4)+vcRR1
00000000                            	;dc.b	vcTL4|vcTLMask4, vcTL3|vcTLMask3, vcTL2|vcTLMask2, vcTL1|vcTLMask1
00000000                            	if vcAlgorithm=7
00000000                            		dc.b	op4|$80
00000000                            	else
00000000                            		dc.b	op4
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=4
00000000                            		dc.b    op3|$80
00000000                            	else
00000000                            		dc.b    op3
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=5
00000000                            		dc.b    op2|$80
00000000                            	else
00000000                            		dc.b    op2
00000000                            	endif
00000000                            		dc.b    op1|$80
00000000                            	endm
00000000                            
00000000                            
00000000                            	include	"Constants.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00006978                  Size_of_SegaPCM:		equ $6978
00000000                            
00000000                            ; VDP addressses
00000000 =00C00000                  vdp_data_port:		equ $C00000
00000000 =00C00004                  vdp_control_port:	equ $C00004
00000000 =00C00008                  vdp_counter:		equ $C00008
00000000                            
00000000 =00C00011                  psg_input:		equ $C00011
00000000                            
00000000                            ; Z80 addresses
00000000 =00A00000                  z80_ram:		equ $A00000	; start of Z80 RAM
00000000 =00A000EA                  z80_dac3_pitch:		equ $A000EA
00000000 =00A01FFD                  z80_dac_status:		equ $A01FFD
00000000 =00A01FFF                  z80_dac_sample:		equ $A01FFF
00000000 =00A02000                  z80_ram_end:		equ $A02000	; end of non-reserved Z80 RAM
00000000 =00A10001                  z80_version:		equ $A10001
00000000 =00A10002                  z80_port_1_data:	equ $A10002
00000000 =00A10008                  z80_port_1_control:	equ $A10008
00000000 =00A1000A                  z80_port_2_control:	equ $A1000A
00000000 =00A1000C                  z80_expansion_control:	equ $A1000C
00000000 =00A11100                  z80_bus_request:	equ $A11100
00000000 =00A11200                  z80_reset:		equ $A11200
00000000 =00A04000                  ym2612_a0:		equ $A04000
00000000 =00A04001                  ym2612_d0:		equ $A04001
00000000 =00A04002                  ym2612_a1:		equ $A04002
00000000 =00A04003                  ym2612_d1:		equ $A04003
00000000                            
00000000 =00A14000                  security_addr:		equ $A14000
00000000                            
00000000                            ; Sound driver constants
00000000 =00000000                  TrackPlaybackControl:	equ 0		; All tracks
00000000 =00000001                  TrackVoiceControl:	equ 1		; All tracks
00000000 =00000002                  TrackTempoDivider:	equ 2		; All tracks
00000000 =00000004                  TrackDataPointer:	equ 4		; All tracks (4 bytes)
00000000 =00000008                  TrackTranspose:		equ 8		; FM/PSG only (sometimes written to as a word, to include TrackVolume)
00000000 =00000009                  TrackVolume:		equ 9		; FM/PSG only
00000000 =0000000A                  TrackAMSFMSPan:		equ $A		; FM/DAC only
00000000 =0000000B                  TrackVoiceIndex:	equ $B		; FM/PSG only
00000000 =0000000C                  TrackVolEnvIndex:	equ $C		; PSG only
00000000 =0000000D                  TrackStackPointer:	equ $D		; All tracks
00000000 =0000000E                  TrackDurationTimeout:	equ $E		; All tracks
00000000 =0000000F                  TrackSavedDuration:	equ $F		; All tracks
00000000 =00000010                  TrackSavedDAC:		equ $10		; DAC only
00000000 =00000010                  TrackFreq:		equ $10		; FM/PSG only (2 bytes)
00000000 =00000012                  TrackNoteTimeout:	equ $12		; FM/PSG only
00000000 =00000013                  TrackNoteTimeoutMaster:equ $13		; FM/PSG only
00000000 =00000014                  TrackModulationPtr:	equ $14		; FM/PSG only (4 bytes)
00000000 =00000018                  TrackModulationWait:	equ $18		; FM/PSG only
00000000 =00000019                  TrackModulationSpeed:	equ $19		; FM/PSG only
00000000 =0000001A                  TrackModulationDelta:	equ $1A		; FM/PSG only
00000000 =0000001B                  TrackModulationSteps:	equ $1B		; FM/PSG only
00000000 =0000001C                  TrackModulationVal:	equ $1C		; FM/PSG only (2 bytes)
00000000 =0000001E                  TrackDetune:		equ $1E		; FM/PSG only
00000000 =0000001F                  TrackPSGNoise:		equ $1F		; PSG only
00000000 =0000001F                  TrackFeedbackAlgo:	equ $1F		; FM only
00000000 =00000020                  TrackVoicePtr:		equ $20		; FM SFX only (4 bytes)
00000000 =00000024                  TrackLoopCounters:	equ $24		; All tracks (multiple bytes)
00000000                            TrackGoSubStack:	equ TrackSz	; All tracks (multiple bytes. This constant won't get to be used because of an optimisation that just uses zTrackSz)
00000000                            
00000000 =00000030                  TrackSz:	equ $30
00000000                            
00000000                            ; VRAM data
00000000 =0000C000                  vram_fg:	equ $C000	; foreground namespace
00000000 =0000E000                  vram_bg:	equ $E000	; background namespace
00000000 =0000F000                  vram_sonic:	equ $F000	; Sonic graphics
00000000 =0000F800                  vram_sprites:	equ $F800	; sprite table
00000000 =0000FC00                  vram_hscroll:	equ $FC00	; horizontal scroll table
00000000                            
00000000                            ; Game modes
00000000                            id_Sega:	equ ptr_GM_Sega-GameModeArray	; $00
00000000                            id_Title:	equ ptr_GM_Title-GameModeArray	; $04
00000000                            id_Demo:	equ ptr_GM_Demo-GameModeArray	; $08
00000000                            id_Level:	equ ptr_GM_Level-GameModeArray	; $0C
00000000                            id_Special:	equ ptr_GM_Special-GameModeArray; $10
00000000                            id_Continue:	equ ptr_GM_Cont-GameModeArray	; $14
00000000                            id_Ending:	equ ptr_GM_Ending-GameModeArray	; $18
00000000                            id_Credits:	equ ptr_GM_Credits-GameModeArray; $1C
00000000                            
00000000                            ; Levels
00000000 =00000000                  id_GHZ:		equ 0
00000000 =00000001                  id_LZ:		equ 1
00000000 =00000002                  id_MZ:		equ 2
00000000 =00000003                  id_SLZ:		equ 3
00000000 =00000004                  id_SYZ:		equ 4
00000000 =00000005                  id_SBZ:		equ 5
00000000 =00000006                  id_EndZ:	equ 6
00000000 =00000007                  id_SS:		equ 7
00000000                            
00000000                            ; colors
00000000 =00000000                  cBlack:		equ $000		; color black
00000000 =00000EEE                  cWhite:		equ $EEE		; color white
00000000 =00000E00                  cBlue:		equ $E00		; color blue
00000000 =000000E0                  cGreen:		equ $0E0		; color green
00000000 =0000000E                  cRed:		equ $00E		; color red
00000000 =000000EE                  cYellow:	equ cGreen+cRed		; color yellow
00000000 =00000EE0                  cAqua:		equ cGreen+cBlue	; color aqua
00000000 =00000E0E                  cMagenta:	equ cBlue+cRed		; color magenta
00000000                            
00000000                            ; Joypad input
00000000 =00000080                  btnStart:	equ %10000000 ; Start button	($80)
00000000 =00000040                  btnA:		equ %01000000 ; A		($40)
00000000 =00000020                  btnC:		equ %00100000 ; C		($20)
00000000 =00000010                  btnB:		equ %00010000 ; B		($10)
00000000 =00000008                  btnR:		equ %00001000 ; Right		($08)
00000000 =00000004                  btnL:		equ %00000100 ; Left		($04)
00000000 =00000002                  btnDn:		equ %00000010 ; Down		($02)
00000000 =00000001                  btnUp:		equ %00000001 ; Up		($01)
00000000 =0000000F                  btnDir:		equ %00001111 ; Any direction	($0F)
00000000 =00000070                  btnABC:		equ %01110000 ; A, B or C	($70)
00000000 =00000007                  bitStart:	equ 7
00000000 =00000006                  bitA:		equ 6
00000000 =00000005                  bitC:		equ 5
00000000 =00000004                  bitB:		equ 4
00000000 =00000003                  bitR:		equ 3
00000000 =00000002                  bitL:		equ 2
00000000 =00000001                  bitDn:		equ 1
00000000 =00000000                  bitUp:		equ 0
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000020                  obInertia:	equ $20	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000017                  obWidth:	equ $17	; width/2
00000000 =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  obActWid:	equ $14	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000023                  obRespawnNo:	equ $23	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            
00000000                            ; Object variables used by Sonic
00000000 =00000030                  flashtime:	equ $30	; time between flashes after getting hit
00000000 =00000032                  invtime:	equ $32	; time left for invincibility
00000000 =00000034                  shoetime:	equ $34	; time left for speed shoes
00000000                            
00000000                            ; Shield variables
00000000 =00000033                  shield_LastLoadedDPLC:    equ $33
00000000 =0000003C                  shield_DPLC_Address:    equ $3C
00000000 =00000038                  shield_Art_Address:    equ $38
00000000 =00000036                  shield_vram_art:    equ $36
00000000                            
00000000                            ; Object variables (Sonic 2 disassembly nomenclature)
00000000 =00000001                  render_flags:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  art_tile:	equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  mappings:	equ 4	; mappings address (4 bytes)
00000000 =00000008                  x_pos:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000C                  y_pos:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  x_vel:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  y_vel:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000016                  y_radius:	equ $16	; height/2
00000000 =00000017                  x_radius:	equ $17	; width/2
00000000 =00000018                  priority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  width_pixels:	equ $14	; action width
00000000 =0000001A                  mapping_frame:	equ $1A	; current frame displayed
00000000 =0000001B                  anim_frame:	equ $1B	; current frame in animation script
00000000 =0000001C                  anim:		equ $1C	; current animation
00000000 =0000001D                  next_anim:	equ $1D	; next animation
00000000 =0000001E                  anim_frame_duration: equ $1E ; time to next frame
00000000 =00000020                  collision_flags: equ $20 ; collision response type
00000000 =00000021                  collision_property: equ $21 ; collision extra property
00000000 =00000022                  status:		equ $22	; orientation or mode
00000000 =00000023                  respawn_index:	equ $23	; respawn list index number
00000000 =00000024                  routine:	equ $24	; routine number
00000000 =00000025                  routine_secondary: equ $25 ; secondary routine number
00000000 =00000026                  angle:		equ $26	; angle
00000000 =00000028                  subtype:	equ $28	; object subtype
00000000                            
00000000                            ; Animation flags
00000000 =000000FF                  afEnd:		equ $FF	; return to beginning of animation
00000000 =000000FE                  afBack:		equ $FE	; go back (specified number) bytes
00000000 =000000FD                  afChange:	equ $FD	; run specified animation
00000000 =000000FC                  afRoutine:	equ $FC	; increment routine counter
00000000 =000000FB                  afReset:	equ $FB	; reset animation and 2nd object routine counter
00000000 =000000FA                  af2ndRoutine:	equ $FA	; increment 2nd routine counter
00000000                            
00000000                            
00000000 =0000000B                  mainspr_mapframe    = $B
00000000 =0000000E                  mainspr_width        = $E
00000000 =0000000F                  mainspr_childsprites     = $F    ; amount of child sprites
00000000 =00000014                  mainspr_height        = $14
00000000 =00000010                  sub2_x_pos        = $10    ;x_vel
00000000 =00000012                  sub2_y_pos        = $12    ;y_vel
00000000 =00000015                  sub2_mapframe        = $15
00000000 =00000016                  sub3_x_pos        = $16    ;y_radius
00000000 =00000018                  sub3_y_pos        = $18    ;priority
00000000 =0000001B                  sub3_mapframe        = $1B    ;anim_frame
00000000 =0000001C                  sub4_x_pos        = $1C    ;anim
00000000 =0000001E                  sub4_y_pos        = $1E    ;anim_frame_duration
00000000 =00000021                  sub4_mapframe        = $21    ;collision_property
00000000 =00000022                  sub5_x_pos        = $22    ;status
00000000 =00000024                  sub5_y_pos        = $24    ;routine
00000000 =00000027                  sub5_mapframe        = $27
00000000 =00000028                  sub6_x_pos        = $28    ;subtype
00000000 =0000002A                  sub6_y_pos        = $2A
00000000 =0000002D                  sub6_mapframe        = $2D
00000000 =0000002E                  sub7_x_pos        = $2E
00000000 =00000030                  sub7_y_pos        = $30
00000000 =00000033                  sub7_mapframe        = $33
00000000 =00000034                  sub8_x_pos        = $34
00000000 =00000036                  sub8_y_pos        = $36
00000000 =00000039                  sub8_mapframe        = $39
00000000 =0000003A                  sub9_x_pos        = $3A
00000000 =0000003C                  sub9_y_pos        = $3C
00000000 =0000003F                  sub9_mapframe        = $3F
00000000 =00000006                  next_subspr       = $6
00000000                            
00000000                            ; Background music
00000000 =00000081                  bgm__First:	equ $81
00000000                            bgm_GHZ:	equ ((ptr_mus81-MusicIndex)/4)+bgm__First
00000000                            bgm_LZ:		equ ((ptr_mus82-MusicIndex)/4)+bgm__First
00000000                            bgm_MZ:		equ ((ptr_mus83-MusicIndex)/4)+bgm__First
00000000                            bgm_SLZ:	equ ((ptr_mus84-MusicIndex)/4)+bgm__First
00000000                            bgm_SYZ:	equ ((ptr_mus85-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ:	equ ((ptr_mus86-MusicIndex)/4)+bgm__First
00000000                            bgm_Invincible:	equ ((ptr_mus87-MusicIndex)/4)+bgm__First
00000000                            bgm_ExtraLife:	equ ((ptr_mus88-MusicIndex)/4)+bgm__First
00000000                            bgm_SS:		equ ((ptr_mus89-MusicIndex)/4)+bgm__First
00000000                            bgm_Title:	equ ((ptr_mus8A-MusicIndex)/4)+bgm__First
00000000                            bgm_Ending:	equ ((ptr_mus8B-MusicIndex)/4)+bgm__First
00000000                            bgm_Boss:	equ ((ptr_mus8C-MusicIndex)/4)+bgm__First
00000000                            bgm_FZ:		equ ((ptr_mus8D-MusicIndex)/4)+bgm__First
00000000                            bgm_GotThrough:	equ ((ptr_mus8E-MusicIndex)/4)+bgm__First
00000000                            bgm_GameOver:	equ ((ptr_mus8F-MusicIndex)/4)+bgm__First
00000000                            bgm_Continue:	equ ((ptr_mus90-MusicIndex)/4)+bgm__First
00000000                            bgm_Credits:	equ ((ptr_mus91-MusicIndex)/4)+bgm__First
00000000                            bgm_Drowning:	equ ((ptr_mus92-MusicIndex)/4)+bgm__First
00000000                            bgm_Emerald:	equ ((ptr_mus93-MusicIndex)/4)+bgm__First
00000000                            bgm_Pinch:		equ ((ptr_mus94-MusicIndex)/4)+bgm__First
00000000                            bgm_Seaside:	equ ((ptr_mus95-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ3:		equ ((ptr_mus96-MusicIndex)/4)+bgm__First
00000000                            bgm_Granada:	equ ((ptr_mus97-MusicIndex)/4)+bgm__First
00000000                            bgm_Options:	equ ((ptr_mus98-MusicIndex)/4)+bgm__First
00000000                            bgm_ToxicLandfill:	equ ((ptr_mus99-MusicIndex)/4)+bgm__First
00000000                            bgm_RRZ2:	equ ((ptr_mus9A-MusicIndex)/4)+bgm__First
00000000                            bgm_TTZBF:	equ ((ptr_mus9B-MusicIndex)/4)+bgm__First
00000000                            bgm_Tribute:	equ ((ptr_mus9C-MusicIndex)/4)+bgm__First
00000000                            bgm__Last:	equ ((ptr_musend-MusicIndex-4)/4)+bgm__First
00000000                            
00000000                            ; Sound effects
00000000 =000000A0                  sfx__First:	equ $A0
00000000                            sfx_Jump:	equ ((ptr_sndA0-SoundIndex)/4)+sfx__First
00000000                            sfx_Lamppost:	equ ((ptr_sndA1-SoundIndex)/4)+sfx__First
00000000                            sfx_A2:		equ ((ptr_sndA2-SoundIndex)/4)+sfx__First
00000000                            sfx_Death:	equ ((ptr_sndA3-SoundIndex)/4)+sfx__First
00000000                            sfx_Skid:	equ ((ptr_sndA4-SoundIndex)/4)+sfx__First
00000000                            sfx_LRingBox:	equ ((ptr_sndA5-SoundIndex)/4)+sfx__First
00000000                            sfx_HitSpikes:	equ ((ptr_sndA6-SoundIndex)/4)+sfx__First
00000000                            sfx_Push:	equ ((ptr_sndA7-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGoal:	equ ((ptr_sndA8-SoundIndex)/4)+sfx__First
00000000                            sfx_SSItem:	equ ((ptr_sndA9-SoundIndex)/4)+sfx__First
00000000                            sfx_Splash:	equ ((ptr_sndAA-SoundIndex)/4)+sfx__First
00000000                            sfx_FireShield:	equ ((ptr_FireShield-SoundIndex)/4)+sfx__First
00000000                            sfx_HitBoss:	equ ((ptr_sndAC-SoundIndex)/4)+sfx__First
00000000                            sfx_Bubble:	equ ((ptr_sndAD-SoundIndex)/4)+sfx__First
00000000                            sfx_Fireball:	equ ((ptr_sndAE-SoundIndex)/4)+sfx__First
00000000                            sfx_Shield:	equ ((ptr_sndAF-SoundIndex)/4)+sfx__First
00000000                            sfx_Saw:	equ ((ptr_sndB0-SoundIndex)/4)+sfx__First
00000000                            sfx_Electric:	equ ((ptr_sndB1-SoundIndex)/4)+sfx__First
00000000                            sfx_Drown:	equ ((ptr_sndB2-SoundIndex)/4)+sfx__First
00000000                            sfx_Flamethrower:equ ((ptr_sndB3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bumper:	equ ((ptr_sndB4-SoundIndex)/4)+sfx__First
00000000                            sfx_Ring:	equ ((ptr_sndB5-SoundIndex)/4)+sfx__First
00000000                            sfx_SpikesMove:	equ ((ptr_sndB6-SoundIndex)/4)+sfx__First
00000000                            sfx_Rumbling:	equ ((ptr_sndB7-SoundIndex)/4)+sfx__First
00000000                            sfx_B8:		equ ((ptr_sndB8-SoundIndex)/4)+sfx__First
00000000                            sfx_Collapse:	equ ((ptr_sndB9-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGlass:	equ ((ptr_sndBA-SoundIndex)/4)+sfx__First
00000000                            sfx_Door:	equ ((ptr_sndBB-SoundIndex)/4)+sfx__First
00000000                            sfx_Teleport:	equ ((ptr_sndBC-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainStomp:	equ ((ptr_sndBD-SoundIndex)/4)+sfx__First
00000000                            sfx_Roll:	equ ((ptr_sndBE-SoundIndex)/4)+sfx__First
00000000                            sfx_Continue:	equ ((ptr_sndBF-SoundIndex)/4)+sfx__First
00000000                            sfx_Basaran:	equ ((ptr_sndC0-SoundIndex)/4)+sfx__First
00000000                            sfx_BreakItem:	equ ((ptr_sndC1-SoundIndex)/4)+sfx__First
00000000                            sfx_Warning:	equ ((ptr_sndC2-SoundIndex)/4)+sfx__First
00000000                            sfx_GiantRing:	equ ((ptr_sndC3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bomb:	equ ((ptr_sndC4-SoundIndex)/4)+sfx__First
00000000                            sfx_Cash:	equ ((ptr_sndC5-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLoss:	equ ((ptr_sndC6-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainRise:	equ ((ptr_sndC7-SoundIndex)/4)+sfx__First
00000000                            sfx_Burning:	equ ((ptr_sndC8-SoundIndex)/4)+sfx__First
00000000                            sfx_Bonus:	equ ((ptr_sndC9-SoundIndex)/4)+sfx__First
00000000                            sfx_EnterSS:	equ ((ptr_sndCA-SoundIndex)/4)+sfx__First
00000000                            sfx_WallSmash:	equ ((ptr_sndCB-SoundIndex)/4)+sfx__First
00000000                            sfx_Spring:	equ ((ptr_sndCC-SoundIndex)/4)+sfx__First
00000000                            sfx_Switch:	equ ((ptr_sndCD-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLeft:	equ ((ptr_sndCE-SoundIndex)/4)+sfx__First
00000000                            sfx_Signpost:	equ ((ptr_sndCF-SoundIndex)/4)+sfx__First
00000000                            sfx__Last:	equ ((ptr_sndend-SoundIndex-4)/4)+sfx__First
00000000                            
00000000                            ; Special sound effects
00000000 =000000D0                  spec__First:	equ $D0
00000000                            sfx_Waterfall:	equ ((ptr_sndD0-SpecSoundIndex)/4)+spec__First
00000000                            sfx_LightningShield:	equ ((ptr_sndD1-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Peelout:	equ ((ptr_sndD2-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutRelease:	equ ((ptr_sndD3-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutStop:	equ ((ptr_sndD4-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Spindash:	equ ((ptr_sndD5-SpecSoundIndex)/4)+spec__First
00000000                            spec__Last:	equ ((ptr_specend-SpecSoundIndex-4)/4)+spec__First
00000000                            
00000000 =000000E0                  flg__First:	equ $E0
00000000                            bgm_Fade:	equ ((ptr_flgE0-Sound_ExIndex)/4)+flg__First
00000000                            sfx_Sega:	equ ((ptr_flgE1-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Speedup:	equ ((ptr_flgE2-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Slowdown:	equ ((ptr_flgE3-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Stop:	equ ((ptr_flgE4-Sound_ExIndex)/4)+flg__First
00000000                            flg__Last:	equ ((ptr_flgend-Sound_ExIndex-4)/4)+flg__First
00000000                            
00000000                            ; Sonic frame IDs
00000000 =00000000                  fr_Null:	equ 0
00000000 =00000001                  fr_Stand:	equ 1
00000000 =00000002                  fr_Blink:	equ 2
00000000 =00000003                  fr_Wait1:	equ 3
00000000 =00000004                  fr_Wait2:	equ 4
00000000 =00000005                  fr_Wait3:	equ 5
00000000 =00000006                  fr_Wait4:	equ 6
00000000 =00000007                  fr_Wait5:	equ 7
00000000 =00000008                  fr_Wait6:	equ 8
00000000 =00000009                  fr_Wait7:	equ 9
00000000 =0000000A                  fr_Wait8:	equ $A
00000000 =0000000B                  fr_Wait9:	equ $B
00000000 =0000000C                  fr_LookUp1:	equ $C
00000000 =0000000D                  fr_LookUp2:	equ $D
00000000 =0000000E                  fr_Walk11:	equ $E
00000000 =0000000F                  fr_Walk12:	equ $F
00000000 =00000010                  fr_Walk13:	equ $10
00000000 =00000011                  fr_Walk14:	equ $11
00000000 =00000012                  fr_Walk15:	equ $12
00000000 =00000013                  fr_Walk16:	equ $13
00000000 =00000014                  fr_Walk17:	equ $14
00000000 =00000015                  fr_Walk18:	equ $15
00000000 =00000016                  fr_Walk21:	equ $16
00000000 =00000017                  fr_Walk22:	equ $17
00000000 =00000018                  fr_Walk23:	equ $18
00000000 =00000019                  fr_Walk24:	equ $19
00000000 =0000001A                  fr_Walk25:	equ $1A
00000000 =0000001B                  fr_Walk26:	equ $1B
00000000 =0000001C                  fr_Walk27:	equ $1C
00000000 =0000001D                  fr_Walk28:	equ $1D
00000000 =0000001E                  fr_Walk31:	equ $1E
00000000 =0000001F                  fr_Walk32:	equ $1F
00000000 =00000020                  fr_Walk33:	equ $20
00000000 =00000021                  fr_Walk34:	equ $21
00000000 =00000022                  fr_Walk35:	equ $22
00000000 =00000023                  fr_Walk36:	equ $23
00000000 =00000024                  fr_Walk37:	equ $24
00000000 =00000025                  fr_Walk38:	equ $25
00000000 =00000026                  fr_Walk41:	equ $26
00000000 =00000027                  fr_Walk42:	equ $27
00000000 =00000028                  fr_Walk43:	equ $28
00000000 =00000029                  fr_Walk44:	equ $29
00000000 =0000002A                  fr_Walk45:	equ $2A
00000000 =0000002B                  fr_Walk46:	equ $2B
00000000 =0000002C                  fr_Walk47:	equ $2C
00000000 =0000002D                  fr_Walk48:	equ $2D
00000000 =0000002E                  fr_Run11:	equ $2E
00000000 =0000002F                  fr_Run12:	equ $2F
00000000 =00000030                  fr_Run13:	equ $30
00000000 =00000031                  fr_Run14:	equ $31
00000000 =00000032                  fr_Run15:	equ $32
00000000 =00000033                  fr_Run16:	equ $33
00000000 =00000034                  fr_Run17:	equ $34
00000000 =00000035                  fr_Run18:	equ $35
00000000 =00000036                  fr_Run21:	equ $36
00000000 =00000037                  fr_Run22:	equ $37
00000000 =00000038                  fr_Run23:	equ $38
00000000 =00000039                  fr_Run24:	equ $39
00000000 =0000003A                  fr_Run25:	equ $3A
00000000 =0000003B                  fr_Run26:	equ $3B
00000000 =0000003C                  fr_Run27:	equ $3C
00000000 =0000003D                  fr_Run28:	equ $3D
00000000 =0000003E                  fr_Run31:	equ $3E
00000000 =0000003F                  fr_Run32:	equ $3F
00000000 =00000040                  fr_Run33:	equ $40
00000000 =00000041                  fr_Run34:	equ $41
00000000 =00000042                  fr_Run35:	equ $42
00000000 =00000043                  fr_Run36:	equ $43
00000000 =00000044                  fr_Run37:	equ $44
00000000 =00000045                  fr_Run38:	equ $45
00000000 =00000046                  fr_Run41:	equ $46
00000000 =00000047                  fr_Run42:	equ $47
00000000 =00000048                  fr_Run43:	equ $48
00000000 =00000049                  fr_Run44:	equ $49
00000000 =0000004A                  fr_Run45:	equ $4A
00000000 =0000004B                  fr_Run46:	equ $4B
00000000 =0000004C                  fr_Run47:	equ $4C
00000000 =0000004D                  fr_Run48:	equ $4D
00000000 =0000004E                  fr_peelout11:	equ $4E
00000000 =0000004F                  fr_peelout12:	equ $4F
00000000 =00000050                  fr_peelout13:	equ $50
00000000 =00000051                  fr_peelout14:	equ $51
00000000 =00000052                  fr_peelout21:	equ $52
00000000 =00000053                  fr_peelout22:	equ $53
00000000 =00000054                  fr_peelout23:	equ $54
00000000 =00000055                  fr_peelout24:	equ $55
00000000 =00000056                  fr_peelout31:	equ $56
00000000 =00000057                  fr_peelout32:	equ $57
00000000 =00000058                  fr_peelout33:	equ $58
00000000 =00000059                  fr_peelout34:	equ $59
00000000 =0000005A                  fr_peelout41:	equ $5A
00000000 =0000005B                  fr_peelout42:	equ $5B
00000000 =0000005C                  fr_peelout43:	equ $5C
00000000 =0000005D                  fr_peelout44:	equ $5D
00000000 =0000005E                  fr_Roll1:	equ $5E
00000000 =00000060                  fr_Roll2:	equ $60
00000000 =00000062                  fr_Roll3:	equ $62
00000000 =00000064                  fr_Roll4:	equ $64
00000000 =00000066                  fr_Roll5:	equ $66
00000000 =0000005F                  fr_Roll6:	equ $5F
00000000 =00000061                  fr_Roll7:	equ $61
00000000 =00000063                  fr_Roll8:	equ $63
00000000 =00000065                  fr_Roll9:	equ $65
00000000 =00000067                  fr_Warp1:	equ $67
00000000 =00000068                  fr_Warp2:	equ $68
00000000 =00000069                  fr_Warp3:	equ $69
00000000 =0000006A                  fr_Warp4:	equ $6A
00000000 =0000006B                  fr_Stop1:	equ $6B
00000000 =0000006C                  fr_Stop2:	equ $6C
00000000 =0000006D                  fr_Stop3:	equ $6D
00000000 =0000006E                  fr_Stop4:	equ $6E
00000000 =0000006F                  fr_Leap3:	equ $6F
00000000 =00000070                  fr_Duck2:	equ $70
00000000 =00000071                  fr_Duck:	equ $71
00000000 =00000072                  fr_Balance1:	equ $72
00000000 =00000073                  fr_Balance2:	equ $73
00000000 =00000074                  fr_Balance3:	equ $74
00000000 =00000075                  fr_Balance4:	equ $75
00000000 =00000076                  fr_GetAir2:		equ $76
00000000 =00000077                  fr_Blank:		equ $77
00000000 =00000078                  fr_VHang1:		equ $78
00000000 =00000079                  fr_VHang2:		equ $79
00000000 =0000007A                  fr_VHang3:		equ $7A
00000000                            
00000000 =0000007C                  fr_Float1:	equ $7C
00000000 =0000007E                  fr_Float2:	equ $7E
00000000 =00000081                  fr_Float3:	equ $81
00000000 =00000082                  fr_Float4:	equ $82
00000000 =00000080                  fr_Float5:	equ $80
00000000 =0000007B                  fr_Float6:	equ $7B
00000000 =0000007D                  fr_float7:	equ $7D
00000000 =0000007F                  fr_float8:	equ $7F
00000000 =00000083                  fr_Spring:	equ $83
00000000 =00000084                  fr_Spring2:	equ $84
00000000 =00000085                  fr_Hang1:	equ $85
00000000 =00000086                  fr_Hang2:	equ $86
00000000 =00000087                  fr_Leap1:	equ $87
00000000 =00000088                  fr_Leap2:	equ $88
00000000 =00000089                  fr_Push1:	equ $89
00000000 =0000008A                  fr_Push2:	equ $8A
00000000 =0000008B                  fr_Push3:	equ $8B
00000000 =0000008C                  fr_Push4:	equ $8C
00000000 =0000008D                  fr_Push5:	equ $8D
00000000 =0000008E                  fr_Push6:	equ $8E
00000000 =0000008F                  fr_Push7:	equ $8F
00000000 =00000090                  fr_Push8:	equ $90
00000000 =00000091                  fr_Surf:	equ $91
00000000 =00000092                  fr_Burnt:	equ $92
00000000 =00000093                  fr_Drown:	equ $93
00000000 =00000094                  fr_Death:	equ $94
00000000 =00000095                  fr_GetAir:	equ $95
00000000 =00000096                  fr_Injury:	equ $96
00000000 =00000097                  fr_WaterSlide:	equ $97
00000000 =00000098                  fr_skele1:	equ $98
00000000 =00000099                  fr_skele2:	equ $99
00000000 =0000009A                  fr_hurtblue:	equ $9A
00000000 =0000009B                  fr_Spindash1	equ $9B
00000000 =0000009C                  fr_Spindash2	equ $9C
00000000 =0000009D                  fr_Spindash3	equ $9D
00000000 =0000009E                  fr_Spindash4	equ $9E
00000000 =0000009F                  fr_Spindash5	equ $9F
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000 =000000A1                  fr_Transform1	equ	$A1
00000000 =000000A2                  fr_Transform2	equ	$A2
00000000 =000000A3                  fr_Transform3	equ	$A3
00000000 =000000A4                  fr_Transform4	equ	$A4
00000000 =000000A5                  fr_Transform5	equ	$A5
00000000 =000000A6                  fr_Transform6	equ	$A6
00000000 =000000A7                  fr_Transform7	equ	$A7
00000000 =000000A8                  fr_Transform8	equ	$A8
00000000 =000000A9                  fr_Transform9	equ	$A9
00000000 =000000A9                  fr_Transform9	equ	$A9
00000000                            	include	"Variables.asm"
00000000                            ; Variables (v) and Flags (f)
00000000                            
00000000 =FFFFFC00                  v_regbuffer:	equ $FFFFFC00	; stores registers d0-a7 during an error event ($40 bytes)
00000000 =FFFFFC40                  v_spbuffer:	equ $FFFFFC40	; stores most recent sp address (4 bytes)
00000000 =FFFFFC44                  v_errortype:	equ $FFFFFC44	; error type
00000000                            
00000000 =00FF0000                  v_256x256:	equ   $FF0000	; 256x256 tile mappings ($A400 bytes)
00000000 =FFFFA400                  v_lvllayout:	equ $FFFFA400	; level and background layouts ($400 bytes)
00000000 =FFFFA800                  v_bgscroll_buffer:	equ	$FFFFA800	; background scroll buffer ($200 bytes)
00000000 =FFFFAA00                  v_ngfx_buffer:	equ $FFFFAA00	; Nemesis graphics decompression buffer ($200 bytes)
00000000 =FFFFAC00                  v_spritequeue:	equ $FFFFAC00	; sprite display queue, in order of priority ($400 bytes)
00000000 =FFFFB000                  v_16x16:		equ $FFFFB000	; 16x16 tile mappings
00000000 =FFFFC800                  VDP_Command_Buffer:	equ $FFFFC800
00000000                            
00000000 =FFFFC8FC                  VDP_Command_Buffer_Slot:equ VDP_Command_Buffer+7*$12*2
00000000 =FFFFC800                  v_sgfx_buffer:	equ $FFFFC800	; buffered Sonic graphics ($17 cells) ($2E0 bytes)
00000000 =FFFFCB00                  v_tracksonic:	equ $FFFFCB00	; position tracking data for Sonic ($100 bytes)
00000000 =FFFFCC00                  v_hscrolltablebuffer:	equ $FFFFCC00 ; scrolling table data (actually $380 bytes, but $400 is reserved for it)
00000000 =FFFFD000                  v_objspace:	equ $FFFFD000	; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	equ v_objspace	; object variable space for Sonic ($40 bytes)
00000000 =FFFFD800                  v_lvlobjspace:	equ $FFFFD800	; level object variable space ($1800 bytes)
00000000 =FFFFF015                  v_palmuscounter:	equ $FFFFF015
00000000 =FFFFF000                  v_snddriver_ram:	equ $FFFFF000 ; start of RAM for the sound driver data ($5C0 bytes)
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, until otherwise stated, all offsets are relative to v_snddriver_ram
00000000                            ; =================================================================================
00000000 =00000000                  v_startofvariables:	equ $000
00000000 =00000000                  v_sndprio:		equ $000	; sound priority (priority of new music/SFX must be higher or equal to this value or it won't play; bit 7 of priority being set prevents this value from changing)
00000000 =00000001                  v_main_tempo_timeout:	equ $001	; Counts down to zero; when zero, resets to next value and delays song by 1 frame
00000000 =00000002                  v_main_tempo:		equ $002	; Used for music only
00000000 =00000003                  f_pausemusic:		equ $003	; flag set to stop music when paused
00000000 =00000004                  v_fadeout_counter:	equ $004
00000000                            
00000000 =00000006                  v_fadeout_delay:	equ $006
00000000 =00000007                  v_communication_byte:	equ $007	; used in Ristar to sync with a boss' attacks; unused here
00000000 =00000008                  f_updating_dac:		equ $008	; $80 if updating DAC, $00 otherwise
00000000 =00000009                  v_sound_id:		equ $009	; sound or music copied from below
00000000 =0000000A                  v_soundqueue0:		equ $00A	; sound or music to play
00000000 =0000000B                  v_soundqueue1:		equ $00B	; special sound to play
00000000 =0000000C                  v_soundqueue2:		equ $00C	; unused sound to play
00000000                            
00000000 =0000000E                  f_voice_selector:	equ $00E	; $00 = use music voice pointer; $40 = use special voice pointer; $80 = use track voice pointer
00000000                            
00000000 =00000018                  v_voice_ptr:		equ $018	; voice data pointer (4 bytes)
00000000                            
00000000 =00000020                  v_special_voice_ptr:	equ $020	; voice data pointer for special SFX ($D0-$DF) (4 bytes)
00000000                            
00000000 =00000024                  f_fadein_flag:		equ $024	; Flag for fade in
00000000 =00000025                  v_fadein_delay:		equ $025
00000000 =00000026                  v_fadein_counter:	equ $026	; Timer for fade in/out
00000000 =00000027                  f_1up_playing:		equ $027	; flag indicating 1-up song is playing
00000000 =00000028                  v_tempo_mod:		equ $028	; music - tempo modifier
00000000 =00000029                  v_speeduptempo:		equ $029	; music - tempo modifier with speed shoes
00000000 =0000002A                  f_speedup:		equ $02A	; flag indicating whether speed shoes tempo is on ($80) or off ($00)
00000000 =0000002B                  v_ring_speaker:		equ $02B	; which speaker the "ring" sound is played in (00 = right; 01 = left)
00000000 =0000002C                  f_push_playing:		equ $02C	; if set, prevents further push sounds from playing
00000000                            
00000000 =00000040                  v_music_track_ram:	equ $040	; Start of music RAM
00000000                            
00000000 =00000040                  v_music_fmdac_tracks:	equ v_music_track_ram+TrackSz*0
00000000 =00000040                  v_music_dac_track:	equ v_music_fmdac_tracks+TrackSz*0
00000000 =00000070                  v_music_fm_tracks:	equ v_music_fmdac_tracks+TrackSz*1
00000000 =00000070                  v_music_fm1_track:	equ v_music_fm_tracks+TrackSz*0
00000000 =000000A0                  v_music_fm2_track:	equ v_music_fm_tracks+TrackSz*1
00000000 =000000D0                  v_music_fm3_track:	equ v_music_fm_tracks+TrackSz*2
00000000 =00000100                  v_music_fm4_track:	equ v_music_fm_tracks+TrackSz*3
00000000 =00000130                  v_music_fm5_track:	equ v_music_fm_tracks+TrackSz*4
00000000 =00000160                  v_music_fm6_track:	equ v_music_fm_tracks+TrackSz*5
00000000 =00000190                  v_music_fm_tracks_end:	equ v_music_fm_tracks+TrackSz*6
00000000 =00000190                  v_music_fmdac_tracks_end:	equ v_music_fm_tracks_end
00000000 =00000190                  v_music_psg_tracks:	equ v_music_fmdac_tracks_end
00000000 =00000190                  v_music_psg1_track:	equ v_music_psg_tracks+TrackSz*0
00000000 =000001C0                  v_music_psg2_track:	equ v_music_psg_tracks+TrackSz*1
00000000 =000001F0                  v_music_psg3_track:	equ v_music_psg_tracks+TrackSz*2
00000000 =00000220                  v_music_psg_tracks_end:	equ v_music_psg_tracks+TrackSz*3
00000000 =00000220                  v_music_track_ram_end:	equ v_music_psg_tracks_end
00000000                            
00000000 =00000220                  v_sfx_track_ram:	equ v_music_track_ram_end	; Start of SFX RAM, straight after the end of music RAM
00000000                            
00000000 =00000220                  v_sfx_fm_tracks:	equ v_sfx_track_ram+TrackSz*0
00000000 =00000220                  v_sfx_fm3_track:	equ v_sfx_fm_tracks+TrackSz*0
00000000 =00000250                  v_sfx_fm4_track:	equ v_sfx_fm_tracks+TrackSz*1
00000000 =00000280                  v_sfx_fm5_track:	equ v_sfx_fm_tracks+TrackSz*2
00000000 =000002B0                  v_sfx_fm_tracks_end:	equ v_sfx_fm_tracks+TrackSz*3
00000000 =000002B0                  v_sfx_psg_tracks:	equ v_sfx_fm_tracks_end
00000000 =000002B0                  v_sfx_psg1_track:	equ v_sfx_psg_tracks+TrackSz*0
00000000 =000002E0                  v_sfx_psg2_track:	equ v_sfx_psg_tracks+TrackSz*1
00000000 =00000310                  v_sfx_psg3_track:	equ v_sfx_psg_tracks+TrackSz*2
00000000 =00000340                  v_sfx_psg_tracks_end:	equ v_sfx_psg_tracks+TrackSz*3
00000000 =00000340                  v_sfx_track_ram_end:	equ v_sfx_psg_tracks_end
00000000                            
00000000 =00000340                  v_spcsfx_track_ram:	equ v_sfx_track_ram_end	; Start of special SFX RAM, straight after the end of SFX RAM
00000000                            
00000000 =00000340                  v_spcsfx_fm4_track:	equ v_spcsfx_track_ram+TrackSz*0
00000000 =00000370                  v_spcsfx_psg3_track:	equ v_spcsfx_track_ram+TrackSz*1
00000000 =000003A0                  v_spcsfx_track_ram_end:	equ v_spcsfx_track_ram+TrackSz*2
00000000                            
00000000 =000003A0                  v_1up_ram_copy:		equ v_spcsfx_track_ram_end
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, no longer relative to sound driver RAM
00000000                            ; =================================================================================
00000000                            
00000000 =FFFFF600                  v_gamemode:	equ $FFFFF600	; game mode (00=Sega; 04=Title; 08=Demo; 0C=Level; 10=SS; 14=Cont; 18=End; 1C=Credit; +8C=PreLevel)
00000000 =FFFFF602                  v_jpadhold2:	equ $FFFFF602	; joypad input - held, duplicate
00000000 =FFFFF603                  v_jpadpress2:	equ $FFFFF603	; joypad input - pressed, duplicate
00000000 =FFFFF604                  v_jpadhold1:	equ $FFFFF604	; joypad input - held
00000000 =FFFFF605                  v_jpadpress1:	equ $FFFFF605	; joypad input - pressed
00000000 =FFFFF608                  v_loadhud:		equ	$FFFFF608
00000000 =FFFFF60C                  v_vdp_buffer1:	equ $FFFFF60C	; VDP instruction buffer (2 bytes)
00000000                            
00000000 =FFFFF614                  v_demolength:	equ $FFFFF614	; the length of a demo in frames (2 bytes)
00000000 =FFFFF616                  v_scrposy_dup:	equ $FFFFF616	; screen position y (duplicate) (2 bytes)
00000000 =FFFFF618                  v_bgscrposy_dup:	equ $FFFFF618	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFF61A                  v_scrposx_dup:	equ $FFFFF61A	; screen position x (duplicate) (2 bytes)
00000000 =FFFFF61C                  v_bgscreenposx_dup_unused:	equ $FFFFF61C	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFF61E                  v_bg3screenposy_dup_unused:	equ $FFFFF61E	; (2 bytes)
00000000 =FFFFF620                  v_bg3screenposx_dup_unused:	equ $FFFFF620	; (2 bytes)
00000000                            
00000000 =FFFFF624                  v_hbla_hreg:	equ $FFFFF624	; VDP H.interrupt register buffer (8Axx) (2 bytes)
00000000 =FFFFF625                  v_hbla_line:	equ $FFFFF625	; screen line where water starts and palette is changed by HBlank
00000000 =FFFFF626                  v_pfade_start:	equ $FFFFF626	; palette fading - start position in bytes
00000000 =FFFFF627                  v_pfade_size:	equ $FFFFF627	; palette fading - number of colors
00000000 =FFFFF62A                  v_vbla_routine:	equ $FFFFF62A	; VBlank - routine counter
00000000 =FFFFF62C                  v_spritecount:	equ $FFFFF62C	; number of sprites on-screen
00000000 =FFFFF632                  v_pcyc_num:	equ $FFFFF632	; palette cycling - current reference number (2 bytes)
00000000 =FFFFF634                  v_pcyc_time:	equ $FFFFF634	; palette cycling - time until the next change (2 bytes)
00000000 =FFFFF636                  v_random:	equ $FFFFF636	; pseudo random number buffer (4 bytes)
00000000 =FFFFF63A                  f_pause:		equ $FFFFF63A	; flag set to pause the game (2 bytes)
00000000 =FFFFF640                  v_vdp_buffer2:	equ $FFFFF640	; VDP instruction buffer (2 bytes)
00000000 =FFFFF644                  f_hbla_pal:	equ $FFFFF644	; flag set to change palette during HBlank (0000 = no; 0001 = change) (2 bytes)
00000000 =FFFFF646                  v_waterpos1:	equ $FFFFF646	; water height, actual (2 bytes)
00000000 =FFFFF648                  v_waterpos2:	equ $FFFFF648	; water height, ignoring sway (2 bytes)
00000000 =FFFFF64A                  v_waterpos3:	equ $FFFFF64A	; water height, next target (2 bytes)
00000000 =FFFFF64C                  f_water:		equ $FFFFF64C	; flag set for water
00000000 =FFFFF64D                  v_wtr_routine:	equ $FFFFF64D	; water event - routine counter
00000000 =FFFFF64E                  f_wtr_state:	equ $FFFFF64E	; water palette state when water is above/below the screen (00 = partly/all dry; 01 = all underwater)
00000000                            
00000000 =FFFFF650                  v_pal_buffer:	equ $FFFFF650	; palette data buffer (used for palette cycling) ($30 bytes)
00000000 =FFFFF680                  v_plc_buffer:	equ $FFFFF680	; pattern load cues buffer (maximum $10 PLCs) ($60 bytes)
00000000 =FFFFF6E0                  v_ptrnemcode:	equ $FFFFF6E0	; pointer for nemesis decompression code ($1502 or $150C) (4 bytes)
00000000                            
00000000 =FFFFF6F8                  f_plc_execute:	equ $FFFFF6F8	; flag set for pattern load cue execution (2 bytes)
00000000                            
00000000 =FFFFF700                  v_screenposx:	equ $FFFFF700	; screen position x (2 bytes)
00000000 =FFFFF704                  v_screenposy:	equ $FFFFF704	; screen position y (2 bytes)
00000000 =FFFFF708                  v_bgscreenposx:	equ $FFFFF708	; background screen position x (2 bytes)
00000000 =FFFFF70C                  v_bgscreenposy:	equ $FFFFF70C	; background screen position y (2 bytes)
00000000 =FFFFF710                  v_bg2screenposx:	equ $FFFFF710	; 2 bytes
00000000 =FFFFF714                  v_bg2screenposy:	equ $FFFFF714	; 2 bytes
00000000 =FFFFF718                  v_bg3screenposx:	equ $FFFFF718	; 2 bytes
00000000 =FFFFF71C                  v_bg3screenposy:	equ $FFFFF71C	; 2 bytes
00000000                            
00000000 =FFFFF720                  v_limitleft1:	equ $FFFFF720	; left level boundary (2 bytes)
00000000 =FFFFF722                  v_limitright1:	equ $FFFFF722	; right level boundary (2 bytes)
00000000 =FFFFF724                  v_limittop1:	equ $FFFFF724	; top level boundary (2 bytes)
00000000 =FFFFF726                  v_limitbtm1:	equ $FFFFF726	; bottom level boundary (2 bytes)
00000000 =FFFFF728                  v_limitleft2:	equ $FFFFF728	; left level boundary (2 bytes)
00000000 =FFFFF72A                  v_limitright2:	equ $FFFFF72A	; right level boundary (2 bytes)
00000000 =FFFFF72C                  v_limittop2:	equ $FFFFF72C	; top level boundary (2 bytes)
00000000 =FFFFF72E                  v_limitbtm2:	equ $FFFFF72E	; bottom level boundary (2 bytes)
00000000                            
00000000 =FFFFF732                  v_limitleft3:	equ $FFFFF732	; left level boundary, at the end of an act (2 bytes)
00000000                            
00000000 =FFFFF73A                  v_scrshiftx:	equ $FFFFF73A	; x-screen shift (new - last) * $100
00000000 =FFFFF73C                  v_scrshifty:	equ $FFFFF73C	; y-screen shift (new - last) * $100
00000000                            
00000000 =FFFFF73E                  v_lookshift:	equ $FFFFF73E	; screen shift when Sonic looks up/down (2 bytes)
00000000 =FFFFF742                  v_dle_routine:	equ $FFFFF742	; dynamic level event - routine counter
00000000 =FFFFF744                  f_nobgscroll:	equ $FFFFF744	; flag set to cancel background scrolling
00000000                            
00000000 =FFFFF74A                  v_fg_xblock:	equ	$FFFFF74A	; foreground x-block parity (for redraw)
00000000 =FFFFF74B                  v_fg_yblock:	equ	$FFFFF74B	; foreground y-block parity (for redraw)
00000000 =FFFFF74C                  v_bg1_xblock:	equ	$FFFFF74C	; background x-block parity (for redraw)
00000000 =FFFFF74D                  v_bg1_yblock:	equ	$FFFFF74D	; background y-block parity (for redraw)
00000000 =FFFFF74E                  v_bg2_xblock:	equ	$FFFFF74E	; secondary background x-block parity (for redraw)
00000000 =FFFFF74F                  v_bg2_yblock:	equ	$FFFFF74F	; secondary background y-block parity (unused)
00000000 =FFFFF750                  v_bg3_xblock:	equ	$FFFFF750	; teritary background x-block parity (for redraw)
00000000 =FFFFF751                  v_bg3_yblock:	equ	$FFFFF751	; teritary background y-block parity (unused)
00000000                            
00000000 =FFFFF754                  v_fg_scroll_flags:	equ $FFFFF754	; screen redraw flags for foreground
00000000 =FFFFF756                  v_bg1_scroll_flags:	equ $FFFFF756	; screen redraw flags for background 1
00000000 =FFFFF758                  v_bg2_scroll_flags:	equ $FFFFF758	; screen redraw flags for background 2
00000000 =FFFFF75A                  v_bg3_scroll_flags:	equ $FFFFF75A	; screen redraw flags for background 3
00000000 =FFFFF75C                  f_bgscrollvert:	equ $FFFFF75C	; flag for vertical background scrolling
00000000 =FFFFF760                  v_sonspeedmax:	equ $FFFFF760	; Sonic's maximum speed (2 bytes)
00000000 =FFFFF762                  v_sonspeedacc:	equ $FFFFF762	; Sonic's acceleration (2 bytes)
00000000 =FFFFF764                  v_sonspeeddec:	equ $FFFFF764	; Sonic's deceleration (2 bytes)
00000000 =FFFFF766                  v_sonframenum:	equ $FFFFF766	; frame to display for Sonic
00000000 =FFFFF767                  f_sonframechg:	equ $FFFFF767	; flag set to update Sonic's sprite frame
00000000 =FFFFF768                  v_anglebuffer:	equ $FFFFF768	; angle of collision block that Sonic or object is standing on
00000000                            
00000000 =FFFFF76C                  v_opl_routine:	equ $FFFFF76C	; ObjPosLoad - routine counter
00000000 =FFFFF76E                  v_opl_screen:	equ $FFFFF76E	; ObjPosLoad - screen variable
00000000 =FFFFF770                  v_opl_data:	equ $FFFFF770	; ObjPosLoad - data buffer ($10 bytes)
00000000                            
00000000 =FFFFF780                  v_ssangle:	equ $FFFFF780	; Special Stage angle (2 bytes)
00000000 =FFFFF782                  v_ssrotate:	equ $FFFFF782	; Special Stage rotation speed (2 bytes)
00000000 =FFFFF790                  v_btnpushtime1:	equ $FFFFF790	; button push duration - in level (2 bytes)
00000000 =FFFFF792                  v_btnpushtime2:	equ $FFFFF792	; button push duration - in demo (2 bytes)
00000000 =FFFFF794                  v_palchgspeed:	equ $FFFFF794	; palette fade/transition speed (0 is fastest) (2 bytes)
00000000 =FFFFF796                  v_collindex:	equ $FFFFF796	; ROM address for collision index of current level (4 bytes)
00000000 =FFFFF79A                  v_palss_num:	equ $FFFFF79A	; palette cycling in Special Stage - reference number (2 bytes)
00000000 =FFFFF79C                  v_palss_time:	equ $FFFFF79C	; palette cycling in Special Stage - time until next change (2 bytes)
00000000                            
00000000 =FFFFF7A0                  v_camera_pan:	equ $FFFFF7A0    ; Extended Camera - how far the camera/view is panned to the left or right of Sonic (2 bytes)
00000000                            
00000000 =FFFFF7A4                  v_obj31ypos:	equ $FFFFF7A4	; y-position of object 31 (MZ stomper) (2 bytes)
00000000 =FFFFF7A7                  v_bossstatus:	equ $FFFFF7A7	; status of boss and prison capsule (01 = boss defeated; 02 = prison opened)
00000000 =FFFFF7A8                  v_trackpos:	equ $FFFFF7A8	; position tracking reference number (2 bytes)
00000000 =FFFFF7A9                  v_trackbyte:	equ $FFFFF7A9	; low byte for position tracking
00000000 =FFFFF7AA                  f_lockscreen:	equ $FFFFF7AA	; flag set to lock screen during bosses
00000000 =FFFFF7AC                  v_256loop1:	equ $FFFFF7AC	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AD                  v_256loop2:	equ $FFFFF7AD	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AE                  v_256roll1:	equ $FFFFF7AE	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7AF                  v_256roll2:	equ $FFFFF7AF	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7B0                  v_lani0_frame:	equ $FFFFF7B0	; level graphics animation 0 - current frame
00000000 =FFFFF7B1                  v_lani0_time:	equ $FFFFF7B1	; level graphics animation 0 - time until next frame
00000000 =FFFFF7B2                  v_lani1_frame:	equ $FFFFF7B2	; level graphics animation 1 - current frame
00000000 =FFFFF7B3                  v_lani1_time:	equ $FFFFF7B3	; level graphics animation 1 - time until next frame
00000000 =FFFFF7B4                  v_lani2_frame:	equ $FFFFF7B4	; level graphics animation 2 - current frame
00000000 =FFFFF7B5                  v_lani2_time:	equ $FFFFF7B5	; level graphics animation 2 - time until next frame
00000000 =FFFFF7B6                  v_lani3_frame:	equ $FFFFF7B6	; level graphics animation 3 - current frame
00000000 =FFFFF7B7                  v_lani3_time:	equ $FFFFF7B7	; level graphics animation 3 - time until next frame
00000000 =FFFFF7B8                  v_lani4_frame:	equ $FFFFF7B8	; level graphics animation 4 - current frame
00000000 =FFFFF7B9                  v_lani4_time:	equ $FFFFF7B9	; level graphics animation 4 - time until next frame
00000000 =FFFFF7BA                  v_lani5_frame:	equ $FFFFF7BA	; level graphics animation 5 - current frame
00000000 =FFFFF7BB                  v_lani5_time:	equ $FFFFF7BB	; level graphics animation 5 - time until next frame
00000000 =FFFFF7BE                  v_gfxbigring:	equ $FFFFF7BE	; settings for giant ring graphics loading (2 bytes)
00000000 =FFFFF7C0                  f_conveyrev:	equ $FFFFF7C0	; flag set to reverse conveyor belts in LZ/SBZ
00000000 =FFFFF7C1                  v_obj63:		equ $FFFFF7C1	; object 63 (LZ/SBZ platforms) variables (6 bytes)
00000000 =FFFFF7C7                  f_wtunnelmode:	equ $FFFFF7C7	; LZ water tunnel mode
00000000 =FFFFF7C8                  f_lockmulti:	equ $FFFFF7C8	; flag set to lock controls, lock Sonic's position & animation
00000000 =FFFFF7C9                  f_wtunnelallow:	equ $FFFFF7C9	; LZ water tunnels (00 = enabled; 01 = disabled)
00000000 =FFFFF7CA                  f_jumponly:	equ $FFFFF7CA	; flag set to lock controls apart from jumping
00000000 =FFFFF7CB                  v_obj6B:		equ $FFFFF7CB	; object 6B (SBZ stomper) variable
00000000 =FFFFF7CC                  f_lockctrl:	equ $FFFFF7CC	; flag set to lock controls during ending sequence
00000000 =FFFFF7CD                  f_bigring:	equ $FFFFF7CD	; flag set when Sonic collects the giant ring
00000000 =FFFFF7D0                  v_itembonus:	equ $FFFFF7D0	; item bonus from broken enemies, blocks etc. (2 bytes)
00000000 =FFFFF7D2                  v_timebonus:	equ $FFFFF7D2	; time bonus at the end of an act (2 bytes)
00000000 =FFFFF7D4                  v_ringbonus:	equ $FFFFF7D4	; ring bonus at the end of an act (2 bytes)
00000000 =FFFFF7D6                  f_endactbonus:	equ $FFFFF7D6	; time/ring bonus update flag at the end of an act
00000000 =FFFFF7D7                  v_sonicend:	equ $FFFFF7D7	; routine counter for Sonic in the ending sequence
00000000 =FFFFF7D8                  v_lz_deform:	equ	$FFFFF7D8	; LZ deformtaion offset, in units of $80 (2 bytes)
00000000 =FFFFF7E0                  f_switch:	equ $FFFFF7E0	; flags set when Sonic stands on a switch ($10 bytes)
00000000 =FFFFF7F0                  v_scroll_block_1_size:	equ $FFFFF7F0	; (2 bytes)
00000000 =FFFFF7F2                  v_scroll_block_2_size:	equ $FFFFF7F2	; unused (2 bytes)
00000000 =FFFFF7F4                  v_scroll_block_3_size:	equ $FFFFF7F4	; unused (2 bytes)
00000000 =FFFFF7F6                  v_scroll_block_4_size:	equ $FFFFF7F6	; unused (2 bytes)
00000000                            
00000000 =FFFFF800                  v_spritetablebuffer:	equ $FFFFF800 ; sprite table ($280 bytes, last $80 bytes are overwritten by v_pal_water_dup)
00000000 =FFFFFA00                  v_pal_water_dup:	equ $FFFFFA00 ; duplicate underwater palette, used for transitions ($80 bytes)
00000000 =FFFFFA80                  v_pal_water:	equ $FFFFFA80	; main underwater palette ($80 bytes)
00000000 =FFFFFB00                  v_pal_dry:	equ $FFFFFB00	; main palette ($80 bytes)
00000000 =FFFFFB80                  v_pal_dry_dup:	equ $FFFFFB80	; duplicate palette, used for transitions ($80 bytes)
00000000 =FFFFFC00                  v_objstate:	equ $FFFFFC00	; object state list ($200 bytes)
00000000                            
00000000                            
00000000 =FFFFFE00                  v_systemstack:	equ $FFFFFE00
00000000 =FFFFFE02                  f_restart:	equ $FFFFFE02	; restart level flag (2 bytes)
00000000 =FFFFFE04                  v_framecount:	equ $FFFFFE04	; frame counter (adds 1 every frame) (2 bytes)
00000000 =FFFFFE05                  v_framebyte:	equ v_framecount+1; low byte for frame counter
00000000 =FFFFFE06                  v_debugitem:	equ $FFFFFE06	; debug item currently selected (NOT the object number of the item)
00000000 =FFFFFE08                  v_debuguse:	equ $FFFFFE08	; debug mode use & routine counter (when Sonic is a ring/item) (2 bytes)
00000000 =FFFFFE0A                  v_debugxspeed:	equ $FFFFFE0A	; debug mode - horizontal speed
00000000 =FFFFFE0B                  v_debugyspeed:	equ $FFFFFE0B	; debug mode - vertical speed
00000000 =FFFFFE0C                  v_vbla_count:	equ $FFFFFE0C	; vertical interrupt counter (adds 1 every VBlank) (4 bytes)
00000000 =FFFFFE0E                  v_vbla_word:	equ v_vbla_count+2 ; low word for vertical interrupt counter (2 bytes)
00000000 =FFFFFE0F                  v_vbla_byte:	equ v_vbla_word+1	; low byte for vertical interrupt counter
00000000 =FFFFFE10                  v_zone:		equ $FFFFFE10	; current zone number
00000000 =FFFFFE11                  v_act:		equ $FFFFFE11	; current act number
00000000 =FFFFFE12                  v_lives:		equ $FFFFFE12	; number of lives
00000000 =FFFFFE14                  v_air:		equ $FFFFFE14	; air remaining while underwater (2 bytes)
00000000 =FFFFFE15                  v_airbyte:	equ v_air+1	; low byte for air
00000000 =FFFFFE16                  v_lastspecial:	equ $FFFFFE16	; last special stage number
00000000 =FFFFFE18                  v_continues:	equ $FFFFFE18	; number of continues
00000000 =FFFFFE1A                  f_timeover:	equ $FFFFFE1A	; time over flag
00000000 =FFFFFE1B                  v_lifecount:	equ $FFFFFE1B	; lives counter value (for actual number, see "v_lives")
00000000 =FFFFFE1C                  f_lifecount:	equ $FFFFFE1C	; lives counter update flag
00000000 =FFFFFE1D                  f_ringcount:	equ $FFFFFE1D	; ring counter update flag
00000000 =FFFFFE1E                  f_timecount:	equ $FFFFFE1E	; time counter update flag
00000000 =FFFFFE1F                  f_scorecount:	equ $FFFFFE1F	; score counter update flag
00000000 =FFFFFE20                  v_rings:		equ $FFFFFE20	; rings (2 bytes)
00000000 =FFFFFE21                  v_ringbyte:	equ v_rings+1	; low byte for rings
00000000 =FFFFFE22                  v_time:		equ $FFFFFE22	; time (4 bytes)
00000000 =FFFFFE23                  v_timemin:	equ $FFFFFE23	; time - minutes
00000000 =FFFFFE24                  v_timesec:	equ $FFFFFE24	; time - seconds
00000000 =FFFFFE25                  v_timecent:	equ $FFFFFE25	; time - centiseconds
00000000 =FFFFFE26                  v_score:		equ $FFFFFE26	; score (4 bytes)
00000000 =FFFFFE2C                  v_shield:	equ $FFFFFE2C	; shield status (00 = no; 01 = yes)
00000000 =FFFFFE2D                  v_invinc:	equ $FFFFFE2D	; invinciblity status (00 = no; 01 = yes)
00000000 =FFFFFE2E                  v_shoes:		equ $FFFFFE2E	; speed shoes status (00 = no; 01 = yes)
00000000 =FFFFFE30                  v_lastlamp:	equ $FFFFFE30	; number of the last lamppost you hit
00000000 =FFFFFE32                  v_lamp_xpos:	equ v_lastlamp+2	; x-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE34                  v_lamp_ypos:	equ v_lastlamp+4	; y-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE36                  v_lamp_rings:	equ v_lastlamp+6	; rings stored at lamppost (2 bytes)
00000000 =FFFFFE38                  v_lamp_time:	equ v_lastlamp+8	; time stored at lamppost (2 bytes)
00000000 =FFFFFE3C                  v_lamp_dle:	equ v_lastlamp+$C	; dynamic level event routine counter at lamppost
00000000 =FFFFFE3E                  v_lamp_limitbtm:	equ v_lastlamp+$E	; level bottom boundary at lamppost (2 bytes)
00000000 =FFFFFE40                  v_lamp_scrx:	equ v_lastlamp+$10 ; x-axis screen at lamppost (2 bytes)
00000000 =FFFFFE42                  v_lamp_scry:	equ v_lastlamp+$12 ; y-axis screen at lamppost (2 bytes)
00000000                            
00000000 =FFFFFE50                  v_lamp_wtrpos:	equ v_lastlamp+$20 ; water position at lamppost (2 bytes)
00000000 =FFFFFE52                  v_lamp_wtrrout:	equ v_lastlamp+$22 ; water routine at lamppost
00000000 =FFFFFE53                  v_lamp_wtrstat:	equ v_lastlamp+$23 ; water state at lamppost
00000000 =FFFFFE54                  v_lamp_lives:	equ v_lastlamp+$24 ; lives counter at lamppost
00000000 =FFFFFE57                  v_emeralds:	equ $FFFFFE57	; number of chaos emeralds
00000000 =FFFFFE58                  v_emldlist:	equ $FFFFFE58	; which individual emeralds you have (00 = no; 01 = yes) (6 bytes)
00000000 =FFFFFE5E                  v_oscillate:	equ $FFFFFE5E	; values which oscillate - for swinging platforms, et al ($42 bytes)
00000000 =FFFFFEC0                  v_ani0_time:	equ $FFFFFEC0	; synchronised sprite animation 0 - time until next frame (used for synchronised animations)
00000000 =FFFFFEC1                  v_ani0_frame:	equ $FFFFFEC1	; synchronised sprite animation 0 - current frame
00000000 =FFFFFEC2                  v_ani1_time:	equ $FFFFFEC2	; synchronised sprite animation 1 - time until next frame
00000000 =FFFFFEC3                  v_ani1_frame:	equ $FFFFFEC3	; synchronised sprite animation 1 - current frame
00000000 =FFFFFEC4                  v_ani2_time:	equ $FFFFFEC4	; synchronised sprite animation 2 - time until next frame
00000000 =FFFFFEC5                  v_ani2_frame:	equ $FFFFFEC5	; synchronised sprite animation 2 - current frame
00000000 =FFFFFEC6                  v_ani3_time:	equ $FFFFFEC6	; synchronised sprite animation 3 - time until next frame
00000000 =FFFFFEC7                  v_ani3_frame:	equ $FFFFFEC7	; synchronised sprite animation 3 - current frame
00000000 =FFFFFEC8                  v_ani3_buf:	equ $FFFFFEC8	; synchronised sprite animation 3 - info buffer (2 bytes)
00000000 =FFFFFEC9                  v_ani4_frame:	equ $FFFFFEC9	; synchronised sprite animation 4 - current frame
00000000 =FFFFFEF0                  v_limittopdb:	equ $FFFFFEF0	; level upper boundary, buffered for debug mode (2 bytes)
00000000 =FFFFFEF2                  v_limitbtmdb:	equ $FFFFFEF2	; level bottom boundary, buffered for debug mode (2 bytes)
00000000                            
00000000 =FFFFFF10                  v_screenposx_dup:	equ $FFFFFF10	; screen position x (duplicate) (2 bytes)
00000000 =FFFFFF14                  v_screenposy_dup:	equ $FFFFFF14	; screen position y (duplicate) (2 bytes)
00000000 =FFFFFF18                  v_bgscreenposx_dup:	equ $FFFFFF18	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFFF1C                  v_bgscreenposy_dup:	equ $FFFFFF1C	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFFF20                  v_bg2screenposx_dup:	equ $FFFFFF20	; 2 bytes
00000000 =FFFFFF24                  v_bg2screenposy_dup:	equ $FFFFFF24	; 2 bytes
00000000 =FFFFFF28                  v_bg3screenposx_dup:	equ $FFFFFF28	; 2 bytes
00000000 =FFFFFF2C                  v_bg3screenposy_dup:	equ $FFFFFF2C	; 2 bytes
00000000 =FFFFFF30                  v_fg_scroll_flags_dup:	equ $FFFFFF30
00000000 =FFFFFF32                  v_bg1_scroll_flags_dup:	equ $FFFFFF32
00000000 =FFFFFF34                  v_bg2_scroll_flags_dup:	equ $FFFFFF34
00000000 =FFFFFF36                  v_bg3_scroll_flags_dup:	equ $FFFFFF36
00000000                            
00000000 =FFFFFF80                  v_levseldelay:	equ $FFFFFF80	; level select - time until change when up/down is held (2 bytes)
00000000 =FFFFFF82                  v_levselitem:	equ $FFFFFF82	; level select - item selected (2 bytes)
00000000 =FFFFFF84                  v_levselsound:	equ $FFFFFF84	; level select - sound selected (2 bytes)
00000000 =FFFFFFB0                  Title_screen_option:	equ $FFFFFFB0
00000000 =FFFFFFC0                  v_scorecopy:	equ $FFFFFFC0	; score, duplicate (4 bytes)
00000000 =FFFFFFC0                  v_scorelife:	equ $FFFFFFC0	; points required for an extra life (4 bytes) (JP1 only)
00000000 =FFFFFFE0                  f_levselcheat:	equ $FFFFFFE0	; level select cheat flag
00000000 =FFFFFFE1                  f_slomocheat:	equ $FFFFFFE1	; slow motion & frame advance cheat flag
00000000 =FFFFFFE2                  f_debugcheat:	equ $FFFFFFE2	; debug mode cheat flag
00000000 =FFFFFFE3                  f_creditscheat:	equ $FFFFFFE3	; hidden credits & press start cheat flag
00000000 =FFFFFFE4                  v_title_dcount:	equ $FFFFFFE4	; number of times the d-pad is pressed on title screen (2 bytes)
00000000 =FFFFFFE6                  v_title_ccount:	equ $FFFFFFE6	; number of times C is pressed on title screen (2 bytes)
00000000                            
00000000 =FFFFFFF0                  f_demo:		equ $FFFFFFF0	; demo mode flag (0 = no; 1 = yes; $8001 = ending) (2 bytes)
00000000 =FFFFFFF2                  v_demonum:	equ $FFFFFFF2	; demo level number (not the same as the level number) (2 bytes)
00000000 =FFFFFFF4                  v_creditsnum:	equ $FFFFFFF4	; credits index number (2 bytes)
00000000 =FFFFFFF8                  v_megadrive:	equ $FFFFFFF8	; Megadrive machine type
00000000 =FFFFFFFA                  f_debugmode:	equ $FFFFFFFA	; debug mode flag (sometimes 2 bytes)
00000000 =FFFFFFFC                  v_init:		equ $FFFFFFFC	; 'init' text string (4 bytes)
00000000                            
00000000 =FFFFF5C3                  f_emeraldm:	equ $FFFFF5C3
00000000 =FFFFF5C4                  v_tagwater:    	equ $FFFFF5C4   ; TIS  
00000000 =FFFFFF92                  v_watersplashpos:    equ $FFFFFF92    ; TIS  
00000000 =00000039                  f_spindash	= $39
00000000 =FFFFF5C6                  v_Saved_music:	equ $FFFFF5C6
00000000 =FFFFF5C8                  v_rshield:	equ $FFFFF5C8	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5C9                  v_gshield:	equ $FFFFF5C9	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5CA                  v_spshield:	equ $FFFFF5CA	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5CD                  v_homingattack:	equ $FFFFF5CD
00000000                            
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000                            
00000000 =FFFFF5D8                  Super_Sonic_palette =        $FFFFF5D8
00000000 =FFFFF5DC                  Palette_frame =        $FFFFF5DC
00000000 =FFFFF5DE                  Palette_timer =        $FFFFF5DE
00000000 =FFFFF5CD                  Palette_Frame_Count =        $FFFFF5CD
00000000 =FFFFF670                  Super_Sonic_frame_count =    $FFFFF670
00000000 =FFFFFE19                  Super_Sonic_flag =        $FFFFFE19
00000000 =FFFFFE19                  Super_Sonic_flag =        $FFFFFE19
00000000                            	include	"Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reads ASCII strings and passes them to character generator
00000000                            ; ---------------------------------------------------------------------------
00000000                            asc        macro str
00000000                            ct =    0                            ; accumulates the total num of characters
00000000                                rept narg                        ; repeat for every argumeny
00000000                            lc =        0                        ; the position in the string
00000000                            
00000000                                dc.b strlen(\str)-1                    ; put the string length before the string itself
00000000                                rept strlen(\str)                    ; repeat for each character in string
00000000                            cc         substr lc+1,lc+1,\str                ; get a single character into cc
00000000                            arg =        '\cc'                        ; convert it to a character
00000000                                        char.b arg                ; put the character into the ROM (as byte)
00000000                            
00000000                            lc =        lc+1                        ; go to the next character
00000000                            ct =        ct+1                        ; increment character count
00000000                                    endr
00000000                                shift
00000000                                endr
00000000                                endm
00000000                            
00000000                            ; translates ASCII character to proper hex value
00000000                            char        macro c
00000000                                if c=' '
00000000                                    dc.\0 0                        ; example 1: single letters
00000000                            
00000000                                elseif c='*'
00000000                                    dc.\0 $1A                        ; example 1: single letters
00000000                            
00000000                                elseif (c>='0')&(c<='9')
00000000                                    dc.\0 \c-'0'+$20                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                elseif (c>='A')&(c<='Z')
00000000                                    dc.\0 \c-$41+$1E                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                else
00000000                                    dc.\0 \c                    ; example 3: any other character
00000000                                endif
00000000                                endm	
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            align:	macro
00000000                            	if (narg=1)
00000000                            	dcb.b \1-(*%\1),0
00000000                            	else
00000000                            	dcb.b \1-(*%\1),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),(vdp_control_port).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the VRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeVRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$4000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the CRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeCRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$C000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA fill VRAM with a value
00000000                            ; input: value, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            fillVRAM:	macro value,length,loc
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.w	#$8F01,(a5)
00000000                            		move.l	#$94000000+((length&$FF00)<<8)+$9300+(length&$FF),(a5)
00000000                            		move.w	#$9780,(a5)
00000000                            		move.l	#$40000080+((loc&$3FFF)<<16)+((loc&$C000)>>14),(a5)
00000000                            		move.w	#value,(vdp_data_port).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Copy a tilemap from 68K (ROM/RAM) to the VRAM without using DMA
00000000                            ; input: source, destination, width [cells], height [cells]
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            copyTilemap:	macro source,loc,width,height
00000000                            		lea	(source).l,a1
00000000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00000000                            		moveq	#width,d1
00000000                            		moveq	#height,d2
00000000                            		jsr	TilemapToVRAM
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; stop the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            stopZ80:	macro
00000000                            		move.w	#$100,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; wait for Z80 to stop
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            waitZ80:	macro
00000000                            	@wait:	btst	#0,(z80_bus_request).l
00000000                            		bne.s	@wait
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reset the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            resetZ80:	macro
00000000                            		move.w	#$100,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            resetZ80a:	macro
00000000                            		move.w	#0,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; start the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            startZ80:	macro
00000000                            		move.w	#0,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; disable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            disable_ints:	macro
00000000                            		move	#$2700,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; enable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            enable_ints:	macro
00000000                            		move	#$2300,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; long conditional jumps
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            jhi:		macro loc
00000000                            		bls.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcc:		macro loc
00000000                            		bcs.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jhs:		macro loc
00000000                            		jcc	loc
00000000                            		endm
00000000                            
00000000                            jls:		macro loc
00000000                            		bhi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcs:		macro loc
00000000                            		bcc.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlo:		macro loc
00000000                            		jcs	loc
00000000                            		endm
00000000                            
00000000                            jeq:		macro loc
00000000                            		bne.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jne:		macro loc
00000000                            		beq.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jgt:		macro loc
00000000                            		ble.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jge:		macro loc
00000000                            		blt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jle:		macro loc
00000000                            		bgt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlt:		macro loc
00000000                            		bge.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jpl:		macro loc
00000000                            		bmi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jmi:		macro loc
00000000                            		bpl.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; check if object moves out of range
00000000                            ; input: location to jump to if out of range, x-axis pos (obX(a0) by default)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            out_of_range:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0		; approx distance between object and screen
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.\0	exit
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; play a sound effect or music
00000000                            ; input: track, terminate routine, branch or jump, move operand size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            music:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd1).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound
00000000                            		      else
00000000                            			bra.w	PlaySound
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound).l
00000000                            		      else
00000000                            			jmp	(PlaySound).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            sfx:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd2).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound_Special
00000000                            		      else
00000000                            			bra.w	PlaySound_Special
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound_Special).l
00000000                            		      else
00000000                            			jmp	(PlaySound_Special).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; bankswitch between SRAM and ROM
00000000                            ; (remember to enable SRAM in the header first!)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            gotoSRAM:	macro
00000000                            		move.b  #1,($A130F1).l
00000000                            		endm
00000000                            
00000000                            gotoROM:	macro
00000000                            		move.b  #0,($A130F1).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; compare the size of an index with ZoneCount constant
00000000                            ; (should be used immediately after the index)
00000000                            ; input: index address, element size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            zonewarning:	macro loc,elementsize
00000000                            	@end:
00000000                            		if (@end-loc)-(ZoneCount*elementsize)<>0
00000000                            		inform 1,"Size of \loc ($%h) does not match ZoneCount ($\#ZoneCount).",(@end-loc)/elementsize
00000000                            		endc
00000000                            		endm
00000000                            		endm
00000000                                include   "Debugger.asm"
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Error handling and debugging modules
00000000                            ; 2016-2017, Vladikcomper
00000000                            ; 2020 mod - AURORA FIELDS
00000000                            ; ---------------------------------------------------------------
00000000                            ; Debugging macros definitions file
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ----------------------------
00000000                            ; Arguments formatting flags
00000000                            ; ----------------------------
00000000                            
00000000                            ; General arguments format flags
00000000 =00000080                  hex		equ		$80				; flag to display as hexadecimal number
00000000 =00000090                  dec		equ		$90				; flag to display as decimal number
00000000 =000000A0                  bin		equ		$A0				; flag to display as binary number
00000000 =000000B0                  sym		equ		$B0				; flag to display as symbol (treat as offset, decode into symbol +displacement, if present)
00000000 =000000C0                  symdisp		equ		$C0				; flag to display as symbol's displacement alone (DO NOT USE, unless complex formatting is required, see notes below)
00000000 =000000DF                  str		equ		$DF				; flag to display as string (treat as offset, insert string from that offset)
00000000 =000000D0                  asm		equ		$D0				; flag to display as code (treat as offset, decode from that offset)
00000000                            
00000000                            ; NOTES:
00000000                            ;	* By default, the "sym" flag displays both symbol and displacement (e.g.: "Map_Sonic+$2E")
00000000                            ;		In case, you need a different formatting for the displacement part (different text color and such),
00000000                            ;		use "sym|split", so the displacement won't be displayed until symdisp is met
00000000                            ;	* The "symdisp" can only be used after the "sym|split" instance, which decodes offset, otherwise, it'll
00000000                            ;		display a garbage offset.
00000000                            ;	* No other argument format flags (hex, dec, bin, str) are allowed between "sym|split" and "symdisp",
00000000                            ;		otherwise, the "symdisp" results are undefined.
00000000                            ;	* When using "str" flag, the argument should point to string offset that will be inserted.
00000000                            ;		Arguments format flags CAN NOT be used in the string (as no arguments are meant to be here),
00000000                            ;		only console control flags (see below).
00000000                            ;	* The "asm" flag will use "setpat" flag to switch text color, and will reset pattern to normal again.
00000000                            ;		you must reapply any pattern you used before yourself.
00000000                            ;	* The "asm" flag will overwrite $FF0000-$FF0080, so be careful when viewing RAM.
00000000                            
00000000                            
00000000                            ; Additional flags ...
00000000                            ; ... for number formatters (hex, dec, bin)
00000000 =00000008                  signed	equ		8				; treat number as signed (display + or - before the number depending on sign)
00000000                            
00000000                            ; ... for symbol formatter (sym)
00000000 =00000008                  split	equ		8				; DO NOT write displacement (if present), skip and wait for "symdisp" flag to write it later (optional)
00000000 =00000004                  forced	equ		4				; display "<unknown>" if symbol was not found, otherwise, plain offset is displayed by the displacement formatter
00000000                            
00000000                            ; ... for symbol displacement formatter (symdisp)
00000000 =00000008                  weak	equ		8				; DO NOT write plain offset if symbol is displayed as "<unknown>"
00000000                            
00000000                            ; Argument type flags:
00000000                            ; - DO NOT USE in formatted strings processed by macros, as these are included automatically
00000000                            ; - ONLY USE when writting down strings manually with DC.B
00000000 =00000000                  byte	equ		0
00000000 =00000001                  word	equ		1
00000000 =00000003                  long	equ		3
00000000                            
00000000                            ; -----------------------
00000000                            ; Console control flags
00000000                            ; -----------------------
00000000                            
00000000                            ; Plain control flags: no arguments following
00000000 =000000E0                  endl	equ		$E0				; "End of line": flag for line break
00000000 =000000E6                  cr	equ		$E6				; "Carriage return": jump to the beginning of the line
00000000 =000000E8                  pal0	equ		$E8				; use palette line #0
00000000 =000000EA                  pal1	equ		$EA				; use palette line #1
00000000 =000000EC                  pal2	equ		$EC				; use palette line #2
00000000 =000000EE                  pal3	equ		$EE				; use palette line #3
00000000                            
00000000                            ; Parametrized control flags: followed by 1-byte argument
00000000 =000000F0                  setw	equ		$F0				; set line width: number of characters before automatic line break
00000000 =000000F4                  setoff	equ		$F4				; set tile offset: lower byte of base pattern, which points to tile index of ASCII character 00
00000000 =000000F8                  setpat	equ		$F8				; set tile pattern: high byte of base pattern, which determines palette flags and $100-tile section id
00000000 =000000FA                  setx	equ		$FA				; set x-position
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            RaiseError &
00000000                            
00000000                            	pea	*(pc)
00000000                            	move.w	sr, -(sp)
00000000                            	__FSTRING_GenerateArgumentsCode \string
00000000                            	jsr		ErrorHandler
00000000                            	__FSTRING_GenerateDecodedString \string
00000000                            	if strlen("\console_program")						; if console program offset is specified ...
00000000                            		dc.b	\opts+_eh_enter_console|(((*&1)^1)*_eh_align_offset)	; add flag "_eh_align_offset" if the next byte is at odd offset ...
00000000                            		even								; ... to tell Error handler to skip this byte, so it'll jump to ...
00000000                            		jmp	\console_program					; ... an aligned "jmp" instruction that calls console program itself
00000000                            	else
00000000                            		dc.b	\opts+0							; otherwise, just specify \opts for error handler, +0 will generate dc.b 0 ...
00000000                            		even								; ... in case \opts argument is empty or skipped
00000000                            	endc
00000000                            	even
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            Console &
00000000                            
00000000                            	if strcmp("\0","write")|strcmp("\0","writeline")
00000000                            		move.w	sr, -(sp)
00000000                            		__FSTRING_GenerateArgumentsCode \1
00000000                            		movem.l	a0-a2/d7, -(sp)
00000000                            		if (__sp>0)
00000000                            			lea	4*4(sp), a2
00000000                            		endc
00000000                            		lea	@str\@(pc), a1
00000000                            		jsr	ErrorHandler.__global__console_\0\_formatted
00000000                            		movem.l	(sp)+, a0-a2/d7
00000000                            		if (__sp>8)
00000000                            			lea	__sp(sp), sp
00000000                            		elseif (__sp>0)
00000000                            			addq.w	#__sp, sp
00000000                            		endc
00000000                            		move.w	(sp)+, sr
00000000                            		bra.w	@instr_end\@
00000000                            	@str\@:
00000000                            		__FSTRING_GenerateDecodedString \1
00000000                            		even
00000000                            	@instr_end\@:
00000000                            
00000000                            	elseif strcmp("\0","run")
00000000                            		jsr	ErrorHandler.__extern__console_only
00000000                            		jsr	\1
00000000                            		bra.s	*
00000000                            
00000000                            	elseif strcmp("\0","setxy")
00000000                            		move.w	sr, -(sp)
00000000                            		movem.l	d0-d1, -(sp)
00000000                            		move.w	\2, -(sp)
00000000                            		move.w	\1, -(sp)
00000000                            		jsr	ErrorHandler.__global__console_setposasxy_stack
00000000                            		addq.w	#4, sp
00000000                            		movem.l	(sp)+, d0-d1
00000000                            		move.w	(sp)+, sr
00000000                            
00000000                            	elseif strcmp("\0","breakline")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr	ErrorHandler.__global__console_startnewline
00000000                            		move.w	(sp)+, sr
00000000                            
00000000                            	else
00000000                            		inform	2,"""\0"" isn't a member of ""Console"""
00000000                            
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __ErrorMessage &
00000000                            		__FSTRING_GenerateArgumentsCode \string
00000000                            		jsr		ErrorHandler
00000000                            		__FSTRING_GenerateDecodedString \string
00000000                            		dc.b	\opts+0
00000000                            		even
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateArgumentsCode &
00000000                            
00000000                            	__pos:	set 	instr(\string,'%<')				; token position
00000000                            	__stack:set	0						; size of actual stack
00000000                            	__sp:	set	0						; stack displacement
00000000                            
00000000                            	; Parse string itself
00000000                            	while (__pos)
00000000                            
00000000                            		; Retrive expression in brackets following % char
00000000                                	__endpos:	set	instr(__pos+1,\string,'>')
00000000                                	__midpos:	set	instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__substr:	substr	__pos+1+1,__endpos-1,\string		; .type ea param
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string		; .type
00000000                            
00000000                            		; Expression is an effective address (e.g. %(.w d0 hex) )
00000000                            		if "\__type">>8="."
00000000                            			__operand:	substr	__pos+1+1,__midpos-1,\string	; .type ea
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string	; param
00000000                            
00000000                            			if "\__type"=".b"
00000000                            				pushp	"move\__operand\,1(sp)"
00000000                            				pushp	"subq.w	#2, sp"
00000000                            				__stack: = __stack+2
00000000                            				__sp: = __sp+2
00000000                            
00000000                            			elseif "\__type"=".w"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+2
00000000                            
00000000                            			elseif "\__type"=".l"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+4
00000000                            
00000000                            			else
00000000                            				fatal 'Unrecognized type in string operand: %<\__substr>'
00000000                            			endc
00000000                            		endc
00000000                            
00000000                            		__pos:	set	instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            
00000000                            	; Generate stack code
00000000                            	rept __stack
00000000                            		popp	__command
00000000                            		\__command
00000000                            	endr
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateDecodedString &
00000000                            
00000000                            	__lpos:	set	1						; start position
00000000                            	__pos:	set 	instr(\string,'%<')				; token position
00000000                            
00000000                            	while (__pos)
00000000                            
00000000                            		; Write part of string before % token
00000000                            		__substr:	substr	__lpos,__pos-1,\string
00000000                            		dc.b	"\__substr"
00000000                            
00000000                            		; Retrive expression in brakets following % char
00000000                                	__endpos:	set		instr(__pos+1,\string,'>')
00000000                                	__midpos:	set		instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string		; .type
00000000                            
00000000                            		; Expression is an effective address (e.g. %<.w d0 hex> )
00000000                            		if "\__type">>8="."
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string	; param
00000000                            			if strlen("\__param")<1
00000000                            				__param: substr ,,"hex"			; if param is ommited, set it to "hex"
00000000                            			endc
00000000                            			if "\__type"=".b"
00000000                            				dc.b	\__param
00000000                            			elseif "\__type"=".w"
00000000                            				dc.b	\__param|1
00000000                            			else
00000000                            				dc.b	\__param|3
00000000                            			endc
00000000                            
00000000                            		; Expression is an inline constant (e.g. %<endl> )
00000000                            		else
00000000                            			__substr:	substr	__pos+1+1,__endpos-1,\string
00000000                            			dc.b	\__substr
00000000                            		endc
00000000                            
00000000                            		__lpos:	set	__endpos+1
00000000                            		__pos:	set	instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            
00000000                            	; Write part of string before the end
00000000                            	__substr:	substr	__lpos,,\string
00000000                            	dc.b	"\__substr"
00000000                            	dc.b	0
00000000                            	endm
00000000                            	endm
00000000                            	
00000000 =00000000                  EnableSRAM:	equ 0	; change to 1 to enable SRAM
00000000 =00000001                  BackupSRAM:	equ 1
00000000 =00000003                  AddressSRAM:	equ 3	; 0 = odd+even; 2 = even only; 3 = odd only
00000000                            
00000000                            ; Change to 0 to build the original version of the game, dubbed REV00
00000000                            ; Change to 1 to build the later vesion, dubbed REV01, which includes various bugfixes and enhancements
00000000                            ; Change to 2 to build the version from Sonic Mega Collection, dubbed REVXB, which fixes the infamous "spike bug"
00000000 =00000002                  Revision:	equ 2
00000000                            
00000000 =00000006                  ZoneCount:	equ 6	; discrete zones are: GHZ, MZ, SYZ, LZ, SLZ, and SBZ
00000000                            
00000000 =00000000                  OptimiseSound:	equ 0	; change to 1 to optimise sound queuing
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00                  Vectors:	dc.l v_systemstack&$FFFFFF	; Initial stack pointer value
00000004 0000 0000                  		dc.l EntryPoint			; Start of program
00000008 0000 0000                  		dc.l BusError			; Bus error
0000000C 0000 0000                  		dc.l AddressError		; Address error (4)
00000010 0000 0000                  		dc.l IllegalInstr		; Illegal instruction
00000014 0000 0000                  		dc.l ZeroDivide			; Division by zero
00000018 0000 0000                  		dc.l ChkInstr			; CHK exception
0000001C 0000 0000                  		dc.l TrapvInstr			; TRAPV exception (8)
00000020 0000 0000                  		dc.l PrivilegeViol		; Privilege violation
00000024 0000 0000                  		dc.l Trace				; TRACE exception
00000028 0000 0000                  		dc.l Line1010Emu		; Line-A emulator
0000002C 0000 0000                  		dc.l Line1111Emu		; Line-F emulator (12)
00000030 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000034 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000038 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000003C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (16)
00000040 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000044 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000048 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000004C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (20)
00000050 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000054 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000058 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000005C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (24)
00000060 0000 0000                  		dc.l ErrorExcept		; Spurious exception
00000064 0000 0000                  		dc.l ErrorTrap			; IRQ level 1
00000068 0000 0000                  		dc.l ErrorTrap			; IRQ level 2
0000006C 0000 0000                  		dc.l ErrorTrap			; IRQ level 3 (28)
00000070 0000 0000                  		dc.l HBlank				; IRQ level 4 (horizontal retrace interrupt)
00000074 0000 0000                  		dc.l ErrorTrap			; IRQ level 5
00000078 0000 0000                  		dc.l VBlank				; IRQ level 6 (vertical retrace interrupt)
0000007C 0000 0000                  		dc.l ErrorTrap			; IRQ level 7 (32)
00000080 0000 0000                  		dc.l ErrorTrap			; TRAP #00 exception
00000084 0000 0000                  		dc.l ErrorTrap			; TRAP #01 exception
00000088 0000 0000                  		dc.l ErrorTrap			; TRAP #02 exception
0000008C 0000 0000                  		dc.l ErrorTrap			; TRAP #03 exception (36)
00000090 0000 0000                  		dc.l ErrorTrap			; TRAP #04 exception
00000094 0000 0000                  		dc.l ErrorTrap			; TRAP #05 exception
00000098 0000 0000                  		dc.l ErrorTrap			; TRAP #06 exception
0000009C 0000 0000                  		dc.l ErrorTrap			; TRAP #07 exception (40)
000000A0 0000 0000                  		dc.l ErrorTrap			; TRAP #08 exception
000000A4 0000 0000                  		dc.l ErrorTrap			; TRAP #09 exception
000000A8 0000 0000                  		dc.l ErrorTrap			; TRAP #10 exception
000000AC 0000 0000                  		dc.l ErrorTrap			; TRAP #11 exception (44)
000000B0 0000 0000                  		dc.l ErrorTrap			; TRAP #12 exception
000000B4 0000 0000                  		dc.l ErrorTrap			; TRAP #13 exception
000000B8 0000 0000                  		dc.l ErrorTrap			; TRAP #14 exception
000000BC 0000 0000                  		dc.l ErrorTrap			; TRAP #15 exception (48)
000000C0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000CC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000DC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000E0                            loc_E0:
000000E0                            		; Relocated code from Spik_Hurt. REVXB was a nasty hex-edit.
000000E0 2628 000C                  		move.l	obY(a0),d3
000000E4 3028 0012                  		move.w	obVelY(a0),d0
000000E8 48C0                       		ext.l	d0
000000EA E180                       		asl.l	#8,d0
000000EC 4EF9 0000 0000             		jmp	(loc_D5A2).l
000000F2                            
000000F2 0000                       		dc.w ErrorTrap
000000F4 0000 0000                  		dc.l ErrorTrap
000000F8 0000 0000                  		dc.l ErrorTrap
000000FC 0000 0000                  		dc.l ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console1:	dc.b "SEGA MEGA DRIVE " ; Hardware system ID (Console name)
00000110 2843 2953 4547 4120 3139+  Date:		dc.b "(C)SEGA 1991.APR" ; Copyright holder and release date (generally year)
00000120 534F 4E49 4320 5355 4E56+  Title_Local:	dc.b "SONIC SUNVENTURE                                " ; Domestic name
00000150 534F 4E49 4320 5355 4E56+  Title_Int:	dc.b "SONIC SUNVENTURE                                " ; International name
00000180 474D 2030 3030 3034 3034+  			dc.b "GM 00004049-01" ; Serial/version number (Rev non-0)
0000018E 0000                       Checksum: dc.w $0
00000190 4A20 2020 2020 2020 2020+  		dc.b "J               " ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; Start address of ROM
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; End address of ROM
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; Start address of RAM
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; End address of RAM
000001B0 2020 2020                  		dc.l $20202020
000001B4 2020 2020                  		dc.l $20202020		; SRAM start ($200001)
000001B8 2020 2020                  		dc.l $20202020		; SRAM end ($20xxxx)
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b "                                                    " ; Notes (unused, anything can be put in this space, but it has to be 52 bytes.)
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b "JUE             " ; Region (Country code)
00000200                            EndOfHeader:
00000200                            
00000200                            ; ===========================================================================
00000200                            ; Crash/Freeze the 68000. Unlike Sonic 2, Sonic 1 uses the 68000 for playing music, so it stops too
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	(z80_port_1_control).l ; test port A & B control registers
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	(z80_expansion_control).l ; test port C control register
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	SkipSetup ; Skip the VDP and Z80 setup code if port A, B or C is ok...?
00000216 4BFA 0000                  		lea	SetupValues(pc),a5	; Load setup values array address.
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version (from $A10001)
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity	; If the console has no TMSS, skip the security stuff.
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1) ; move "SEGA" to TMSS register ($A14000)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0	; clear write-pending flag in VDP to prevent issues if the 68k has been reset in the middle of writing a command long word to the VDP.
00000236 7000                       		moveq	#0,d0	; clear d0
00000238 2C40                       		movea.l	d0,a6	; clear a6
0000023A 4E66                       		move.l	a6,usp	; set usp to $0
0000023C                            
0000023C 7217                       		moveq	#$17,d1
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248                            		
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the VRAM
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254                            
00000254 7425                       		moveq	#$25,d2
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C                            		
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)	; clear 4 bytes of RAM
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; repeat until the entire RAM is clear
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment mode
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C                            
0000026C 761F                       		moveq	#$1F,d3	; set repeat times
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)	; clear 2 palettes
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; repeat until the entire CRAM is clear
00000274 289D                       		move.l	(a5)+,(a4)	; set VDP to VSRAM write
00000276                            
00000276 7813                       		moveq	#$13,d4
00000278                            ClrVSRAMLoop:
00000278 2680                       		move.l	d0,(a3)	; clear 4 bytes of VSRAM.
0000027A 51CC FFFC                  		dbf	d4,ClrVSRAMLoop	; repeat until the entire VSRAM is clear
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop	; repeat for other channels
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear all registers
0000028E 46FC 2700                  		disable_ints
00000292                            
00000292                            SkipSetup:
00000292 6000                       		bra.s	GameProgram	; begin game
00000294                            
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; VDP register start number
00000296 3FFF                       		dc.w $3FFF		; size of RAM/4
00000298 0100                       		dc.w $100		; VDP register diff
0000029A                            
0000029A 00A0 0000                  		dc.l z80_ram		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l z80_bus_request	; Z80 bus request
000002A2 00A1 1200                  		dc.l z80_reset		; Z80 reset
000002A6 00C0 0000                  		dc.l vdp_data_port	; VDP data
000002AA 00C0 0004                  		dc.l vdp_control_port	; VDP control
000002AE                            
000002AE 04                         		dc.b 4			; VDP $80 - 8-colour mode
000002AF 14                         		dc.b $14		; VDP $81 - Megadrive mode, DMA enable
000002B0 30                         		dc.b ($C000>>10)	; VDP $82 - foreground nametable address
000002B1 3C                         		dc.b ($F000>>10)	; VDP $83 - window nametable address
000002B2 07                         		dc.b ($E000>>13)	; VDP $84 - background nametable address
000002B3 6C                         		dc.b ($D800>>9)		; VDP $85 - sprite table address
000002B4 00                         		dc.b 0			; VDP $86 - unused
000002B5 00                         		dc.b 0			; VDP $87 - background colour
000002B6 00                         		dc.b 0			; VDP $88 - unused
000002B7 00                         		dc.b 0			; VDP $89 - unused
000002B8 FF                         		dc.b 255		; VDP $8A - HBlank register
000002B9 00                         		dc.b 0			; VDP $8B - full screen scroll
000002BA 81                         		dc.b $81		; VDP $8C - 40 cell display
000002BB 37                         		dc.b ($DC00>>10)	; VDP $8D - hscroll table address
000002BC 00                         		dc.b 0			; VDP $8E - unused
000002BD 01                         		dc.b 1			; VDP $8F - VDP increment
000002BE 01                         		dc.b 1			; VDP $90 - 64 cell hscroll size
000002BF 00                         		dc.b 0			; VDP $91 - window h position
000002C0 00                         		dc.b 0			; VDP $92 - window v position
000002C1 FFFF                       		dc.w $FFFF		; VDP $93/94 - DMA length
000002C3 0000                       		dc.w 0			; VDP $95/96 - DMA source
000002C5 80                         		dc.b $80		; VDP $97 - DMA fill VRAM
000002C6 4000 0080                  		dc.l $40000080		; VRAM address 0
000002CA                            
000002CA AF                         		dc.b $AF		; xor	a
000002CB 01D9 1F                    		dc.b $01, $D9, $1F	; ld	bc,1fd9h
000002CE 1127 00                    		dc.b $11, $27, $00	; ld	de,0027h
000002D1 2126 00                    		dc.b $21, $26, $00	; ld	hl,0026h
000002D4 F9                         		dc.b $F9		; ld	sp,hl
000002D5 77                         		dc.b $77		; ld	(hl),a
000002D6 EDB0                       		dc.b $ED, $B0		; ldir
000002D8 DDE1                       		dc.b $DD, $E1		; pop	ix
000002DA FDE1                       		dc.b $FD, $E1		; pop	iy
000002DC ED47                       		dc.b $ED, $47		; ld	i,a
000002DE ED4F                       		dc.b $ED, $4F		; ld	r,a
000002E0 D1                         		dc.b $D1		; pop	de
000002E1 E1                         		dc.b $E1		; pop	hl
000002E2 F1                         		dc.b $F1		; pop	af
000002E3 08                         		dc.b $08		; ex	af,af'
000002E4 D9                         		dc.b $D9		; exx
000002E5 C1                         		dc.b $C1		; pop	bc
000002E6 D1                         		dc.b $D1		; pop	de
000002E7 E1                         		dc.b $E1		; pop	hl
000002E8 F1                         		dc.b $F1		; pop	af
000002E9 F9                         		dc.b $F9		; ld	sp,hl
000002EA F3                         		dc.b $F3		; di
000002EB ED56                       		dc.b $ED, $56		; im1
000002ED 36E9                       		dc.b $36, $E9		; ld	(hl),e9h
000002EF E9                         		dc.b $E9		; jp	(hl)
000002F0                            
000002F0 8104                       		dc.w $8104		; VDP display mode
000002F2 8F02                       		dc.w $8F02		; VDP increment
000002F4 C000 0000                  		dc.l $C0000000		; CRAM write mode
000002F8 4000 0010                  		dc.l $40000010		; VSRAM address 0
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	(vdp_control_port).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',(v_init).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#EndOfHeader,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            	@loop:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bhs.s	@loop
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare checksum in header to ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E                            
0000033E                            	CheckSumOk:
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            	@clearRAM:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($FE00-$FFFF)
0000034E                            
0000034E 1039 00A1 0001             		move.b	(z80_version).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,(v_megadrive).w ; get region setting
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',(v_init).w ; set flag so checksum won't run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            	@clearRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($0000-$FDFF)
00000376 4EB9 0000 0000                     jsr	(InitDMAQueue).l	
0000037C 6100 0000                  		bsr.w	VDPSetupGame
00000380 6100 0000                  		bsr.w	SoundDriverLoad
00000384 6100 0000                  		bsr.w	JoypadInit
00000388 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set Game Mode to Sega Screen
0000038E                            
0000038E                            MainGameLoop:
0000038E 4EB9 0000 0000             		jsr		ReadJoypads
00000394 1038 F600                  		move.b	(v_gamemode).w,d0 ; load Game Mode
00000398 0240 007C                  		andi.w	#$7C,d0	; limit Game Mode value to $1C max (change to a maximum of 7C to add more game modes)
0000039C 207B 0000                  		movea.l	GameModeArray(pc,d0.w),a0 ; jump to apt location in ROM
000003A0 4E90                       		jsr		(a0)
000003A2 60EA                       		bra.s	MainGameLoop	; loop indefinitely
000003A4                            ; ===========================================================================
000003A4                            ; ---------------------------------------------------------------------------
000003A4                            ; Main game mode array
000003A4                            ; ---------------------------------------------------------------------------
000003A4                            
000003A4                            GameModeArray:
000003A4 0000 0000                  ptr_GM_Sega:		dc.l	GM_Sega		; Sega Screen ($00)
000003A8 0000 0000                  ptr_GM_Title:		dc.l	GM_Title	; Title	Screen ($04)
000003AC 0000 0000                  ptr_GM_Demo:		dc.l	GM_Level	; Demo Mode ($08)
000003B0 0000 0000                  ptr_GM_Level:		dc.l	GM_Level	; Normal Level ($0C)
000003B4 0000 0000                  ptr_GM_Special:		dc.l	GM_Special	; Special Stage	($10)
000003B8 0000 0000                  ptr_GM_Cont:		dc.l	GM_Continue	; Continue Screen ($14)
000003BC 0000 0000                  ptr_GM_Ending:		dc.l	GM_Ending	; End of game sequence ($18)
000003C0 0000 0000                  ptr_GM_Credits:		dc.l	GM_Credits	; Credits ($1C)
000003C4 0000 0000                  ptr_GM_MenuScreen:	dc.l	MenuScreen	; Credits ($20)
000003C8 4E75                       		rts	
000003CA                            ; ===========================================================================
000003CA                            
000003CA                            CheckSumError:
000003CA 6100 0000                  		bsr.w	VDPSetupGame
000003CE 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
000003D8 7E3F                       		moveq	#$3F,d7
000003DA                            
000003DA                            	@fillred:
000003DA 33FC 000E 00C0 0000        		move.w	#cRed,(vdp_data_port).l ; fill palette with red
000003E2 51CF FFF6                  		dbf	d7,@fillred	; repeat $3F more times
000003E6                            
000003E6                            	@endlessloop:
000003E6 60FE                       		bra.s	@endlessloop
000003E8                            ; ===========================================================================
000003E8                            
000003E8                            
000003E8                            ; ===========================================================================
000003E8                            
000003E8                            loc_43A:
000003E8 46FC 2700                  		disable_ints
000003EC 544F                       		addq.w	#2,sp
000003EE 21DF FC40                  		move.l	(sp)+,(v_spbuffer).w
000003F2 544F                       		addq.w	#2,sp
000003F4 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
000003FA 6100 0000                  		bsr.w	ShowErrorMessage
000003FE 202F 0002                  		move.l	2(sp),d0
00000402 6100 0000                  		bsr.w	ShowErrorValue
00000406 2038 FC40                  		move.l	(v_spbuffer).w,d0
0000040A 6100 0000                  		bsr.w	ShowErrorValue
0000040E 6000                       		bra.s	loc_478
00000410                            ; ===========================================================================
00000410                            
00000410                            loc_462:
00000410 46FC 2700                  		disable_ints
00000414 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
0000041A 6100 0000                  		bsr.w	ShowErrorMessage
0000041E 202F 0002                  		move.l	2(sp),d0
00000422 6100 0000                  		bsr.w	ShowErrorValue
00000426                            
00000426                            loc_478:
00000426 6100 0000                  		bsr.w	ErrorWaitForC
0000042A 4CF8 FFFF FC00             		movem.l	(v_regbuffer).w,d0-a7
00000430 46FC 2300                  		enable_ints
00000434 4E73                       		rte	
00000436                            
00000436                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000436                            
00000436                            
00000436                            ShowErrorMessage:
00000436 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00000446 41F9 0000 0000             		lea	(Art_Text).l,a0
0000044C 323C 027F                  		move.w	#$27F,d1
00000450                            	@loadgfx:
00000450 3C98                       		move.w	(a0)+,(a6)
00000452 51C9 FFFC                  		dbf	d1,@loadgfx
00000456                            
00000456 7000                       		moveq	#0,d0		; clear	d0
00000458 1038 FC44                  		move.b	(v_errortype).w,d0 ; load error code
0000045C 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000460 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
0000046E 7212                       		moveq	#$12,d1		; number of characters (minus 1)
00000470                            
00000470                            	@showchars:
00000470 7000                       		moveq	#0,d0
00000472 1018                       		move.b	(a0)+,d0
00000474 0640 0790                  		addi.w	#$790,d0
00000478 3C80                       		move.w	d0,(a6)
0000047A 51C9 FFF4                  		dbf	d1,@showchars	; repeat for number of characters
0000047E 4E75                       		rts	
00000480                            ; End of function ShowErrorMessage
00000480                            
00000480                            ; ===========================================================================
00000480 0000 0000                  ErrorText:	dc.w @exception-ErrorText, @bus-ErrorText
00000484 0000 0000                  		dc.w @address-ErrorText, @illinstruct-ErrorText
00000488 0000 0000                  		dc.w @zerodivide-ErrorText, @chkinstruct-ErrorText
0000048C 0000 0000                  		dc.w @trapv-ErrorText, @privilege-ErrorText
00000490 0000 0000                  		dc.w @trace-ErrorText, @line1010-ErrorText
00000494 0000                       		dc.w @line1111-ErrorText
00000496 4552 524F 5220 4558 4345+  @exception:	dc.b "ERROR EXCEPTION    "
000004A9 4255 5320 4552 524F 5220+  @bus:		dc.b "BUS ERROR          "
000004BC 4144 4452 4553 5320 4552+  @address:	dc.b "ADDRESS ERROR      "
000004CF 494C 4C45 4741 4C20 494E+  @illinstruct:	dc.b "ILLEGAL INSTRUCTION"
000004E2 4045 524F 2044 4956 4944+  @zerodivide:	dc.b "@ERO DIVIDE        "
000004F5 4348 4B20 494E 5354 5255+  @chkinstruct:	dc.b "CHK INSTRUCTION    "
00000508 5452 4150 5620 494E 5354+  @trapv:		dc.b "TRAPV INSTRUCTION  "
0000051B 5052 4956 494C 4547 4520+  @privilege:	dc.b "PRIVILEGE VIOLATION"
0000052E 5452 4143 4520 2020 2020+  @trace:		dc.b "TRACE              "
00000541 4C49 4E45 2031 3031 3020+  @line1010:	dc.b "LINE 1010 EMULATOR "
00000554 4C49 4E45 2031 3131 3120+  @line1111:	dc.b "LINE 1111 EMULATOR "
00000568 00                         		even
00000568                            
00000568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000568                            
00000568                            
00000568                            ShowErrorValue:
00000568 3CBC 07CA                  		move.w	#$7CA,(a6)	; display "$" symbol
0000056C 7407                       		moveq	#7,d2
0000056E                            
0000056E                            	@loop:
0000056E E998                       		rol.l	#4,d0
00000570 6100                       		bsr.s	@shownumber	; display 8 numbers
00000572 51CA FFFA                  		dbf	d2,@loop
00000576 4E75                       		rts	
00000578                            ; End of function ShowErrorValue
00000578                            
00000578                            
00000578                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000578                            
00000578                            
00000578                            @shownumber:
00000578 3200                       		move.w	d0,d1
0000057A 0241 000F                  		andi.w	#$F,d1
0000057E 0C41 000A                  		cmpi.w	#$A,d1
00000582 6500                       		blo.s	@chars0to9
00000584 5E41                       		addq.w	#7,d1		; add 7 for characters A-F
00000586                            
00000586                            	@chars0to9:
00000586 0641 07C0                  		addi.w	#$7C0,d1
0000058A 3C81                       		move.w	d1,(a6)
0000058C 4E75                       		rts	
0000058E                            ; End of function sub_5CA
0000058E                            
0000058E                            
0000058E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000058E                            
0000058E                            
0000058E                            ErrorWaitForC:
0000058E 6100 0000                  		bsr.w	ReadJoypads
00000592 0C38 0020 F605             		cmpi.b	#btnC,(v_jpadpress1).w ; is button C pressed?
00000598 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000059C 4E75                       		rts	
0000059E                            ; End of function ErrorWaitForC
0000059E                            
0000059E                            ; ===========================================================================
0000059E                            
0000059E                            Art_Text:	incbin	"artunc\menutext.bin" ; text used in level select and debug mode
00000ABE                            		even
00000ABE                            
00000ABE                            ; ---------------------------------------------------------------------------
00000ABE                            ; Vertical interrupt
00000ABE                            ; ---------------------------------------------------------------------------
00000ABE                            
00000ABE                            VBlank:
00000ABE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AC2 4A38 F62A                  		tst.b	(v_vbla_routine).w
00000AC6 6700                       		beq.s	VBla_00
00000AC8 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000ACE 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00000AD8 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l ; send screen y-axis pos. to VSRAM
00000AE0 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000AE6 6700                       		beq.s	@notPAL		; if not, branch
00000AE8                            
00000AE8 303C 0700                  		move.w	#$700,d0
00000AEC                            	@waitPAL:
00000AEC 51C8 FFFE                  		dbf	d0,@waitPAL ; wait here in a loop doing nothing for a while...
00000AF0                            
00000AF0                            	@notPAL:
00000AF0 1038 F62A                  		move.b	(v_vbla_routine).w,d0
00000AF4 11FC 0000 F62A             		move.b	#0,(v_vbla_routine).w
00000AFA 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w
00000B00 0240 003E                  		andi.w	#$3E,d0
00000B04 303B 0000                  		move.w	VBla_Index(pc,d0.w),d0
00000B08 4EBB 0000                  		jsr	VBla_Index(pc,d0.w)
00000B0C                            
00000B0C                            VBla_Music:
00000B0C 4EB9 0000 0000             		jsr	(UpdateMusic).l
00000B12                            
00000B12                            VBla_Exit:
00000B12 52B8 FE0C                  		addq.l	#1,(v_vbla_count).w
00000B16 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B1A 4E73                       		rte	
00000B1C                            ; ===========================================================================
00000B1C 0000 0000                  VBla_Index:	dc.w VBla_00-VBla_Index, VBla_02-VBla_Index
00000B20 0000 0000                  		dc.w VBla_04-VBla_Index, VBla_06-VBla_Index
00000B24 0000 0000                  		dc.w VBla_08-VBla_Index, VBla_0A-VBla_Index
00000B28 0000 0000                  		dc.w VBla_0C-VBla_Index, VBla_0E-VBla_Index
00000B2C 0000 0000                  		dc.w VBla_10-VBla_Index, VBla_12-VBla_Index
00000B30 0000 0000                  		dc.w VBla_14-VBla_Index, VBla_16-VBla_Index
00000B34 0000                       		dc.w VBla_0C-VBla_Index
00000B36                            ; ===========================================================================
00000B36                            
00000B36                            VBla_00:
00000B36 0C38 0000 F600             		cmpi.b	#$80+id_Level,(v_gamemode).w
00000B3C 6700                       		beq.s	@islevel
00000B3E 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w ; is game on a level?
00000B44 6600 FFC6                  		bne.w	VBla_Music	; if not, branch
00000B48                            
00000B48                            	@islevel:
00000B48 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ ?
00000B4E 6600 FFBC                  		bne.w	VBla_Music	; if not, branch
00000B52                            
00000B52 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000B58 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000B5E 6700                       		beq.s	@notPAL		; if not, branch
00000B60                            
00000B60 303C 0700                  		move.w	#$700,d0
00000B64                            	@waitPAL:
00000B64 51C8 FFFE                  		dbf	d0,@waitPAL
00000B68                            
00000B68                            	@notPAL:
00000B68 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w ; set HBlank flag
00000B6E 33FC 0100 00A1 1100        		stopZ80
00000B76 0839 0000 00A1 1100 66F6   		waitZ80
00000B80 4A38 F64E                  		tst.b	(f_wtr_state).w	; is water above top of screen?
00000B84 6600                       		bne.s	@waterabove 	; if yes, branch
00000B86                            
00000B86 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000BAA 6000                       		bra.s	@waterbelow
00000BAC                            
00000BAC                            @waterabove:
00000BAC 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000BD0                            
00000BD0                            	@waterbelow:
00000BD0 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000BD4 33FC 0000 00A1 1100        		startZ80
00000BDC 6000 FF2E                  		bra.w	VBla_Music
00000BE0                            ; ===========================================================================
00000BE0                            
00000BE0                            VBla_02:
00000BE0 6100 0000                  		bsr.w	sub_106E
00000BE4                            
00000BE4                            VBla_14:
00000BE4 4A78 F614                  		tst.w	(v_demolength).w
00000BE8 6700 0000                  		beq.w	@end
00000BEC 5378 F614                  		subq.w	#1,(v_demolength).w
00000BF0                            
00000BF0                            	@end:
00000BF0 4E75                       		rts	
00000BF2                            ; ===========================================================================
00000BF2                            
00000BF2                            VBla_04:
00000BF2 6100 0000                  		bsr.w	sub_106E
00000BF6 6100 0000                  		bsr.w	LoadTilesAsYouMove_BGOnly
00000BFA 4EB9 0000 0000             		jsr 	ProcessDMAQueue		
00000C00 6100 0000                  		bsr.w	sub_1642
00000C04 4A78 F614                  		tst.w	(v_demolength).w
00000C08 6700 0000                  		beq.w	@end
00000C0C 5378 F614                  		subq.w	#1,(v_demolength).w
00000C10                            
00000C10                            	@end:
00000C10 4E75                       		rts	
00000C12                            ; ===========================================================================
00000C12                            
00000C12                            VBla_06:
00000C12 6100 0000                  		bsr.w	sub_106E
00000C16 4E75                       		rts	
00000C18                            ; ===========================================================================
00000C18                            
00000C18                            VBla_10:
00000C18 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game on special stage?
00000C1E 6700 0000                  		beq.w	VBla_0A		; if yes, branch
00000C22                            
00000C22                            VBla_08:
00000C22 33FC 0100 00A1 1100        		stopZ80
00000C2A 0839 0000 00A1 1100 66F6   		waitZ80
00000C34 6100 0000                  		bsr.w	ReadJoypads
00000C38 4A38 F64E                  		tst.b	(f_wtr_state).w
00000C3C 6600                       		bne.s	@waterabove
00000C3E                            
00000C3E 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000C62 6000                       		bra.s	@waterbelow
00000C64                            
00000C64                            @waterabove:
00000C64 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000C88                            
00000C88                            	@waterbelow:
00000C88 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000C8C                            
00000C8C 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000CB0 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000CD4 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000CDA                            
00000CDA                            	@nochg:
00000CDA 33FC 0000 00A1 1100        		startZ80
00000CE2 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000CE8 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000CEE 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000CF4 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000CFA 0C38 0060 F625             		cmpi.b	#96,(v_hbla_line).w
00000D00 6400                       		bhs.s	Demo_Time
00000D02 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D08 588F                       		addq.l	#4,sp
00000D0A 6000 FE06                  		bra.w	VBla_Exit
00000D0E                            
00000D0E                            ; ---------------------------------------------------------------------------
00000D0E                            ; Subroutine to	run a demo for an amount of time
00000D0E                            ; ---------------------------------------------------------------------------
00000D0E                            
00000D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D0E                            
00000D0E                            
00000D0E                            Demo_Time:
00000D0E 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D12 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000D18 4EB9 0000 0000             		jsr	(HUD_Update).l
00000D1E 6100 0000                  		bsr.w	ProcessDPLC2
00000D22 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00000D26 6700 0000                  		beq.w	@end		; if not, branch
00000D2A 5378 F614                  		subq.w	#1,(v_demolength).w ; subtract 1 from time left
00000D2E                            
00000D2E                            	@end:
00000D2E 4E75                       		rts	
00000D30                            ; End of function Demo_Time
00000D30                            
00000D30                            ; ===========================================================================
00000D30                            
00000D30                            VBla_0A:
00000D30 33FC 0100 00A1 1100        		stopZ80
00000D38 0839 0000 00A1 1100 66F6   		waitZ80
00000D42 6100 0000                  		bsr.w	ReadJoypads
00000D46 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000D6A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000D8E 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000DB2 33FC 0000 00A1 1100        		startZ80
00000DBA 6100 0000                  		bsr.w	PalCycle_SS
00000DBE 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000DC4                            
00000DC4                            	@nochg:
00000DC4 4A78 F614                  		tst.w	(v_demolength).w	; is there time left on the demo?
00000DC8 6700 0000                  		beq.w	@end	; if not, return
00000DCC 5378 F614                  		subq.w	#1,(v_demolength).w	; subtract 1 from time left in demo
00000DD0                            
00000DD0                            	@end:
00000DD0 4E75                       		rts	
00000DD2                            ; ===========================================================================
00000DD2                            
00000DD2                            VBla_0C:
00000DD2 33FC 0100 00A1 1100        		stopZ80
00000DDA 0839 0000 00A1 1100 66F6   		waitZ80
00000DE4 6100 0000                  		bsr.w	ReadJoypads
00000DE8 4A38 F64E                  		tst.b	(f_wtr_state).w
00000DEC 6600                       		bne.s	@waterabove
00000DEE                            
00000DEE 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000E12 6000                       		bra.s	@waterbelow
00000E14                            
00000E14                            @waterabove:
00000E14 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000E38                            
00000E38                            	@waterbelow:
00000E38 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000E3C 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000E60 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000E84 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000E8A                            
00000E8A                            	@nochg:
00000E8A 33FC 0000 00A1 1100        		startZ80
00000E92 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000E98 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000E9E 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000EA4 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000EAA 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000EAE 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000EB4 4EB9 0000 0000             		jsr	(HUD_Update).l
00000EBA 6100 0000                  		bsr.w	sub_1642
00000EBE 4E75                       		rts	
00000EC0                            ; ===========================================================================
00000EC0                            
00000EC0                            VBla_0E:
00000EC0 6100 0000                  		bsr.w	sub_106E
00000EC4 5238 F628                  		addq.b	#1,($FFFFF628).w
00000EC8 11FC 000E F62A             		move.b	#$E,(v_vbla_routine).w
00000ECE 4E75                       		rts	
00000ED0                            ; ===========================================================================
00000ED0                            
00000ED0                            VBla_12:
00000ED0 6100 0000                  		bsr.w	sub_106E
00000ED4 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000ED8 6000 0000                  		bra.w	sub_1642
00000EDC                            ; ===========================================================================
00000EDC                            
00000EDC                            VBla_16:
00000EDC 33FC 0100 00A1 1100        		stopZ80
00000EE4 0839 0000 00A1 1100 66F6   		waitZ80
00000EEE 6100 0000                  		bsr.w	ReadJoypads
00000EF2 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000F16 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000F3A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000F5E 33FC 0000 00A1 1100        		startZ80
00000F66 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000F6C                            	@nochg:
00000F6C 4A78 F614                  		tst.w	(v_demolength).w
00000F70 6700 0000                  		beq.w	@end
00000F74 5378 F614                  		subq.w	#1,(v_demolength).w
00000F78                            
00000F78                            	@end:
00000F78 4E75                       		rts	
00000F7A                            
00000F7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F7A                            
00000F7A                            
00000F7A                            sub_106E:
00000F7A 33FC 0100 00A1 1100        		stopZ80
00000F82 0839 0000 00A1 1100 66F6   		waitZ80
00000F8C 6100 0000                  		bsr.w	ReadJoypads
00000F90 4A38 F64E                  		tst.b	(f_wtr_state).w ; is water above top of screen?
00000F94 6600                       		bne.s	@waterabove	; if yes, branch
00000F96 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000FBA 6000                       		bra.s	@waterbelow
00000FBC                            
00000FBC                            	@waterabove:
00000FBC 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000FE0                            
00000FE0                            	@waterbelow:
00000FE0 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00001004 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00001028 33FC 0000 00A1 1100        		startZ80
00001030 4E75                       		rts	
00001032                            ; End of function sub_106E
00001032                            
00001032                            ; ---------------------------------------------------------------------------
00001032                            ; Horizontal interrupt
00001032                            ; ---------------------------------------------------------------------------
00001032                            
00001032                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001032                            
00001032                            
00001032                            HBlank:
00001032 46FC 2700                  		disable_ints
00001036 4A78 F644                  		tst.w	(f_hbla_pal).w	; is palette set to change?
0000103A 6700                       		beq.s	@nochg		; if not, branch
0000103C 31FC 0000 F644             		move.w	#0,(f_hbla_pal).w
00001042 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001046 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
0000104C 41F8 FA80                  		lea	(v_pal_water).w,a0 ; get palette from RAM
00001050 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001058 2298                       		move.l	(a0)+,(a1)	; move palette to CRAM
0000105A 2298                       		move.l	(a0)+,(a1)
0000105C 2298                       		move.l	(a0)+,(a1)
0000105E 2298                       		move.l	(a0)+,(a1)
00001060 2298                       		move.l	(a0)+,(a1)
00001062 2298                       		move.l	(a0)+,(a1)
00001064 2298                       		move.l	(a0)+,(a1)
00001066 2298                       		move.l	(a0)+,(a1)
00001068 2298                       		move.l	(a0)+,(a1)
0000106A 2298                       		move.l	(a0)+,(a1)
0000106C 2298                       		move.l	(a0)+,(a1)
0000106E 2298                       		move.l	(a0)+,(a1)
00001070 2298                       		move.l	(a0)+,(a1)
00001072 2298                       		move.l	(a0)+,(a1)
00001074 2298                       		move.l	(a0)+,(a1)
00001076 2298                       		move.l	(a0)+,(a1)
00001078 2298                       		move.l	(a0)+,(a1)
0000107A 2298                       		move.l	(a0)+,(a1)
0000107C 2298                       		move.l	(a0)+,(a1)
0000107E 2298                       		move.l	(a0)+,(a1)
00001080 2298                       		move.l	(a0)+,(a1)
00001082 2298                       		move.l	(a0)+,(a1)
00001084 2298                       		move.l	(a0)+,(a1)
00001086 2298                       		move.l	(a0)+,(a1)
00001088 2298                       		move.l	(a0)+,(a1)
0000108A 2298                       		move.l	(a0)+,(a1)
0000108C 2298                       		move.l	(a0)+,(a1)
0000108E 2298                       		move.l	(a0)+,(a1)
00001090 2298                       		move.l	(a0)+,(a1)
00001092 2298                       		move.l	(a0)+,(a1)
00001094 2298                       		move.l	(a0)+,(a1)
00001096 2298                       		move.l	(a0)+,(a1)
00001098 337C 8ADF 0004             		move.w	#$8A00+223,4(a1) ; reset HBlank register
0000109E 4CDF 0300                  		movem.l	(sp)+,a0-a1
000010A2 4A38 F64F                  		tst.b	($FFFFF64F).w
000010A6 6600                       		bne.s	loc_119E
000010A8                            
000010A8                            	@nochg:
000010A8 4E73                       		rte	
000010AA                            ; ===========================================================================
000010AA                            
000010AA                            loc_119E:
000010AA 4238 F64F                  		clr.b	($FFFFF64F).w
000010AE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000010B2 6100 FC5A                  		bsr.w	Demo_Time
000010B6 4EB9 0000 0000             		jsr	(UpdateMusic).l
000010BC 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000010C0 4E73                       		rte	
000010C2                            ; End of function HBlank
000010C2                            
000010C2                            ; ---------------------------------------------------------------------------
000010C2                            ; Subroutine to	initialise joypads
000010C2                            ; ---------------------------------------------------------------------------
000010C2                            
000010C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010C2                            
000010C2                            
000010C2                            JoypadInit:
000010C2 33FC 0100 00A1 1100        		stopZ80
000010CA 0839 0000 00A1 1100 66F6   		waitZ80
000010D4 7040                       		moveq	#$40,d0
000010D6 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000010DC 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000010E2 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (expansion/extra)
000010E8 33FC 0000 00A1 1100        		startZ80
000010F0 4E75                       		rts	
000010F2                            ; End of function JoypadInit
000010F2                            
000010F2                            ; ---------------------------------------------------------------------------
000010F2                            ; Subroutine to	read joypad input, and send it to the RAM
000010F2                            ; ---------------------------------------------------------------------------
000010F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010F2                            
000010F2                            
000010F2                            ReadJoypads:
000010F2 41F8 F604                  		lea	(v_jpadhold1).w,a0 ; address where joypad states are written
000010F6 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000010FC 6100                       		bsr.s	@read		; do the first joypad
000010FE 5449                       		addq.w	#2,a1		; do the second	joypad
00001100                            
00001100                            	@read:
00001100 12BC 0000                  		move.b	#0,(a1)
00001104 4E71                       		nop	
00001106 4E71                       		nop	
00001108 1011                       		move.b	(a1),d0
0000110A E508                       		lsl.b	#2,d0
0000110C 0200 00C0                  		andi.b	#$C0,d0
00001110 12BC 0040                  		move.b	#$40,(a1)
00001114 4E71                       		nop	
00001116 4E71                       		nop	
00001118 1211                       		move.b	(a1),d1
0000111A 0201 003F                  		andi.b	#$3F,d1
0000111E 8001                       		or.b	d1,d0
00001120 4600                       		not.b	d0
00001122 1210                       		move.b	(a0),d1
00001124 B101                       		eor.b	d0,d1
00001126 10C0                       		move.b	d0,(a0)+
00001128 C200                       		and.b	d0,d1
0000112A 10C1                       		move.b	d1,(a0)+
0000112C 4E75                       		rts	
0000112E                            ; End of function ReadJoypads
0000112E                            
0000112E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000112E                            
0000112E                            
0000112E                            VDPSetupGame:
0000112E 41F9 00C0 0004             		lea	(vdp_control_port).l,a0
00001134 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
0000113A 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001140 7E12                       		moveq	#$12,d7
00001142                            
00001142                            	@setreg:
00001142 309A                       		move.w	(a2)+,(a0)
00001144 51CF FFFC                  		dbf	d7,@setreg	; set the VDP registers
00001148                            
00001148 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
0000114E 31C0 F60C                  		move.w	d0,(v_vdp_buffer1).w
00001152 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w	; H-INT every 224th scanline
00001158 7000                       		moveq	#0,d0
0000115A 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
00001164 3E3C 003F                  		move.w	#$3F,d7
00001168                            
00001168                            	@clrCRAM:
00001168 3280                       		move.w	d0,(a1)
0000116A 51CF FFFC                  		dbf	d7,@clrCRAM	; clear	the CRAM
0000116E                            
0000116E 42B8 F616                  		clr.l	(v_scrposy_dup).w
00001172 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00001176 2F01                       		move.l	d1,-(sp)
00001178 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFFF,0
0000119A                            
0000119A                            	@waitforDMA:
0000119A 3215                       		move.w	(a5),d1
0000119C 0801 0001                  		btst	#1,d1		; is DMA (fillVRAM) still running?
000011A0 66F8                       		bne.s	@waitforDMA	; if yes, branch
000011A2                            
000011A2 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment size
000011A6 221F                       		move.l	(sp)+,d1
000011A8 4E75                       		rts	
000011AA                            ; End of function VDPSetupGame
000011AA                            
000011AA                            ; ===========================================================================
000011AA 8004                       VDPSetupArray:	dc.w $8004		; 8-colour mode
000011AC 8134                       		dc.w $8134		; enable V.interrupts, enable DMA
000011AE 8230                       		dc.w $8200+(vram_fg>>10) ; set foreground nametable address
000011B0 8328                       		dc.w $8300+($A000>>10)	; set window nametable address
000011B2 8407                       		dc.w $8400+(vram_bg>>13) ; set background nametable address
000011B4 857C                       		dc.w $8500+(vram_sprites>>9) ; set sprite table address
000011B6 8600                       		dc.w $8600		; unused
000011B8 8700                       		dc.w $8700		; set background colour (palette entry 0)
000011BA 8800                       		dc.w $8800		; unused
000011BC 8900                       		dc.w $8900		; unused
000011BE 8A00                       		dc.w $8A00		; default H.interrupt register
000011C0 8B00                       		dc.w $8B00		; full-screen vertical scrolling
000011C2 8C81                       		dc.w $8C81		; 40-cell display mode
000011C4 8D3F                       		dc.w $8D00+(vram_hscroll>>10) ; set background hscroll address
000011C6 8E00                       		dc.w $8E00		; unused
000011C8 8F02                       		dc.w $8F02		; set VDP increment size
000011CA 9001                       		dc.w $9001		; 64-cell hscroll size
000011CC 9100                       		dc.w $9100		; window horizontal position
000011CE 9200                       		dc.w $9200		; window vertical position
000011D0                            
000011D0                            ; ---------------------------------------------------------------------------
000011D0                            ; Subroutine to	clear the screen
000011D0                            ; ---------------------------------------------------------------------------
000011D0                            
000011D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011D0                            
000011D0                            
000011D0                            ClearScreen:
000011D0 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_fg ; clear foreground namespace
000011F2                            
000011F2                            	@wait1:
000011F2 3215                       		move.w	(a5),d1
000011F4 0801 0001                  		btst	#1,d1
000011F8 66F8                       		bne.s	@wait1
000011FA                            
000011FA 3ABC 8F02                  		move.w	#$8F02,(a5)
000011FE 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_bg ; clear background namespace
00001220                            
00001220                            	@wait2:
00001220 3215                       		move.w	(a5),d1
00001222 0801 0001                  		btst	#1,d1
00001226 66F8                       		bne.s	@wait2
00001228                            
00001228 3ABC 8F02                  		move.w	#$8F02,(a5)
0000122C 42B8 F616                  		clr.l	(v_scrposy_dup).w
00001230 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00001234                            
00001234 43F8 F800                  		lea	(v_spritetablebuffer).w,a1
00001238 7000                       		moveq	#0,d0
0000123A 323C 00A0                  		move.w	#($280/4),d1	; This should be ($280/4)-1, leading to a slight bug (first bit of v_pal_water is cleared)
0000123E                            
0000123E                            	@clearsprites:
0000123E 22C0                       		move.l	d0,(a1)+
00001240 51C9 FFFC                  		dbf	d1,@clearsprites ; clear sprite table (in RAM)
00001244                            
00001244 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00001248 7000                       		moveq	#0,d0
0000124A 323C 0100                  		move.w	#($400/4),d1	; This should be ($400/4)-1, leading to a slight bug (first bit of the Sonic object's RAM is cleared)
0000124E                            
0000124E                            	@clearhscroll:
0000124E 22C0                       		move.l	d0,(a1)+
00001250 51C9 FFFC                  		dbf	d1,@clearhscroll ; clear hscroll table (in RAM)
00001254 4E75                       		rts	
00001256                            ; End of function ClearScreen
00001256                            
00001256                            ; ---------------------------------------------------------------------------
00001256                            ; Subroutine to	load the sound driver
00001256                            ; ---------------------------------------------------------------------------
00001256                            
00001256                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001256                            
00001256                            
00001256                            SoundDriverLoad:
00001256 4E71                       		nop	
00001258 33FC 0100 00A1 1100        		stopZ80
00001260 33FC 0100 00A1 1200        		resetZ80
00001268 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000126E 43F9 00A0 0000             		lea	(z80_ram).l,a1	; target Z80 RAM
00001274 6100 0000                  		bsr.w	KosDec		; decompress
00001278 33FC 0000 00A1 1200        		resetZ80a
00001280 4E71                       		nop	
00001282 4E71                       		nop	
00001284 4E71                       		nop	
00001286 4E71                       		nop	
00001288 33FC 0100 00A1 1200        		resetZ80
00001290 33FC 0000 00A1 1100        		startZ80
00001298 4E75                       		rts	
0000129A                            ; End of function SoundDriverLoad
0000129A                            
0000129A                            		include	"_incObj\sub PlaySound.asm"
0000129A                            ; ---------------------------------------------------------------------------
0000129A                            ; Subroutine to	play a music track
0000129A                            
0000129A                            ; input:
0000129A                            ;	d0 = track to play
0000129A                            ; ---------------------------------------------------------------------------
0000129A                            
0000129A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000129A                            
0000129A                            
0000129A                            PlaySound:
0000129A 11C0 F00A                  		move.b	d0,(v_snddriver_ram+v_soundqueue0).w
0000129E 4E75                       		rts	
000012A0                            ; End of function PlaySound
000012A0                            
000012A0                            ; ---------------------------------------------------------------------------
000012A0                            ; Subroutine to	play a sound effect
000012A0                            ; ---------------------------------------------------------------------------
000012A0                            
000012A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012A0                            
000012A0                            
000012A0                            PlaySound_Special:
000012A0 11C0 F00B                  		move.b	d0,(v_snddriver_ram+v_soundqueue1).w
000012A4 4E75                       		rts	
000012A6                            ; End of function PlaySound_Special
000012A6                            
000012A6                            ; ===========================================================================
000012A6                            ; ---------------------------------------------------------------------------
000012A6                            ; Unused sound/music subroutine
000012A6                            ; ---------------------------------------------------------------------------
000012A6                            
000012A6                            PlaySound_Unused:
000012A6 11C0 F00C                  		move.b	d0,(v_snddriver_ram+v_soundqueue2).w
000012AA 4E75                       		rts	
000012AA 4E75                       		rts	
000012AC                            		include	"_inc\PauseGame.asm"
000012AC                            ; ---------------------------------------------------------------------------
000012AC                            ; Subroutine to	pause the game
000012AC                            ; ---------------------------------------------------------------------------
000012AC                            
000012AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012AC                            
000012AC                            
000012AC                            PauseGame:
000012AC 4E71                       		nop	
000012AE 4A38 FE12                  		tst.b	(v_lives).w	; do you have any lives	left?
000012B2 6700                       		beq.s	Unpause		; if not, branch
000012B4 4A78 F63A                  		tst.w	(f_pause).w	; is game already paused?
000012B8 6600                       		bne.s	Pause_StopGame	; if yes, branch
000012BA 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
000012C0 6700                       		beq.s	Pause_DoNothing	; if not, branch
000012C2                            
000012C2                            Pause_StopGame:
000012C2 31FC 0001 F63A             		move.w	#1,(f_pause).w	; freeze time
000012C8 11FC 0001 F003             		move.b	#1,(v_snddriver_ram+f_pausemusic).w ; pause music
000012CE                            
000012CE                            Pause_Loop:
000012CE 11FC 0010 F62A             		move.b	#$10,(v_vbla_routine).w
000012D4 6100 0000                  		bsr.w	WaitForVBla
000012D8 4A38 FFE1                  		tst.b	(f_slomocheat).w ; is slow-motion cheat on?
000012DC 6700                       		beq.s	Pause_ChkStart	; if not, branch
000012DE 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
000012E4 6700                       		beq.s	Pause_ChkBC	; if not, branch
000012E6 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; set game mode to 4 (title screen)
000012EC 4E71                       		nop	
000012EE 6000                       		bra.s	Pause_EndMusic
000012F0                            ; ===========================================================================
000012F0                            
000012F0                            Pause_ChkBC:
000012F0 0838 0004 F604             		btst	#bitB,(v_jpadhold1).w ; is button B pressed?
000012F6 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000012F8 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000012FE 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001300                            
00001300                            Pause_ChkStart:
00001300 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00001306 67C6                       		beq.s	Pause_Loop	; if not, branch
00001308                            
00001308                            Pause_EndMusic:
00001308 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; unpause the music
0000130E                            
0000130E                            Unpause:
0000130E 31FC 0000 F63A             		move.w	#0,(f_pause).w	; unpause the game
00001314                            
00001314                            Pause_DoNothing:
00001314 4E75                       		rts	
00001316                            ; ===========================================================================
00001316                            
00001316                            Pause_SlowMo:
00001316 31FC 0001 F63A             		move.w	#1,(f_pause).w
0000131C 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; Unpause the music
00001322 4E75                       		rts	
00001324                            ; End of function PauseGame
00001324                            ; End of function PauseGame
00001324                            
00001324                            ; ---------------------------------------------------------------------------
00001324                            ; Subroutine to	copy a tile map from RAM to VRAM namespace
00001324                            
00001324                            ; input:
00001324                            ;	a1 = tile map address
00001324                            ;	d0 = VRAM address
00001324                            ;	d1 = width (cells)
00001324                            ;	d2 = height (cells)
00001324                            ; ---------------------------------------------------------------------------
00001324                            
00001324                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001324                            
00001324                            
00001324                            TilemapToVRAM:
00001324 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000132A 283C 0080 0000             		move.l	#$800000,d4
00001330                            
00001330                            	Tilemap_Line:
00001330 2D40 0004                  		move.l	d0,4(a6)	; move d0 to VDP_control_port
00001334 3601                       		move.w	d1,d3
00001336                            
00001336                            	Tilemap_Cell:
00001336 3C99                       		move.w	(a1)+,(a6)	; write value to namespace
00001338 51CB FFFC                  		dbf	d3,Tilemap_Cell	; next tile
0000133C D084                       		add.l	d4,d0		; goto next line
0000133E 51CA FFF0                  		dbf	d2,Tilemap_Line	; next line
00001342 4E75                       		rts	
00001344                            ; End of function TilemapToVRAM
00001344                            
00001344                            		include	"_inc\Nemesis Decompression.asm"
00001344                            ; ==============================================================================
00001344                            ; ------------------------------------------------------------------------------
00001344                            ; Nemesis decompression routine
00001344                            ; ------------------------------------------------------------------------------
00001344                            ; Optimized by vladikcomper
00001344                            ; ------------------------------------------------------------------------------
00001344                             
00001344                            NemDec_RAM:
00001344 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001348 47FA 0000                      lea NemDec_WriteRowToRAM(pc),a3
0000134C 6000                           bra.s   NemDec_Main
0000134E                             
0000134E                            ; ------------------------------------------------------------------------------
0000134E                            NemDec:
0000134E 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001352 49F9 00C0 0000                 lea $C00000,a4      ; load VDP Data Port     
00001358 47FA 0000                      lea NemPCD_WriteRowToVDP(pc),a3
0000135C                             
0000135C                            NemDec_Main:
0000135C 43F8 AA00                      lea $FFFFAA00,a1        ; load Nemesis decompression buffer
00001360 3418                           move.w  (a0)+,d2        ; get number of patterns
00001362 6A00                           bpl.s   @0          ; are we in Mode 0?
00001364 47EB 000A                      lea $A(a3),a3       ; if not, use Mode 1
00001368 E74A                       @0  lsl.w   #3,d2
0000136A 3A42                           movea.w d2,a5
0000136C 7607                           moveq   #7,d3
0000136E 7400                           moveq   #0,d2
00001370 7800                           moveq   #0,d4
00001372 6100 0000                      bsr.w   NemDec_BuildCodeTable
00001376 1A18                           move.b  (a0)+,d5        ; get first byte of compressed data
00001378 E145                           asl.w   #8,d5           ; shift up by a byte
0000137A 1A18                           move.b  (a0)+,d5        ; get second byte of compressed data
0000137C 3C3C 0010                      move.w  #$10,d6         ; set initial shift value
00001380 6100                           bsr.s   NemDec2
00001382 4CDF 7BFF                      movem.l (sp)+,d0-a1/a3-a6
00001386 4E75                           rts
00001388                             
00001388                            ; ---------------------------------------------------------------------------
00001388                            ; Part of the Nemesis decompressor, processes the actual compressed data
00001388                            ; ---------------------------------------------------------------------------
00001388                             
00001388                            NemDec2:
00001388 3E06                           move.w  d6,d7
0000138A 5147                           subq.w  #8,d7           ; get shift value
0000138C 3205                           move.w  d5,d1
0000138E EE69                           lsr.w   d7,d1           ; shift so that high bit of the code is in bit position 7
00001390 0C01 00FC                      cmpi.b  #%11111100,d1       ; are the high 6 bits set?
00001394 6400                           bcc.s   NemDec_InlineData   ; if they are, it signifies inline data
00001396 0241 00FF                      andi.w  #$FF,d1
0000139A D241                           add.w   d1,d1
0000139C 9C31 1000                      sub.b   (a1,d1.w),d6        ; ~~ subtract from shift value so that the next code is read next time around
000013A0 0C46 0009                      cmpi.w  #9,d6           ; does a new byte need to be read?
000013A4 6400                           bcc.s   @0          ; if not, branch
000013A6 5046                           addq.w  #8,d6
000013A8 E145                           asl.w   #8,d5
000013AA 1A18                           move.b  (a0)+,d5        ; read next byte
000013AC 1231 1001                  @0  move.b  1(a1,d1.w),d1
000013B0 3001                           move.w  d1,d0
000013B2 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
000013B6 0240 00F0                      andi.w  #$F0,d0
000013BA                             
000013BA                            NemDec_GetRepeatCount:
000013BA E848                           lsr.w   #4,d0           ; get repeat count
000013BC                             
000013BC                            NemDec_WritePixel:
000013BC E98C                           lsl.l   #4,d4           ; shift up by a nybble
000013BE 8801                           or.b    d1,d4           ; write pixel
000013C0 51CB 0000                      dbf d3,NemDec_WritePixelLoop; ~~
000013C4 4ED3                           jmp (a3)            ; otherwise, write the row to its destination
000013C6                            ; ---------------------------------------------------------------------------
000013C6                             
000013C6                            NemPCD_NewRow:
000013C6 7800                           moveq   #0,d4           ; reset row
000013C8 7607                           moveq   #7,d3           ; reset nybble counter
000013CA                             
000013CA                            NemDec_WritePixelLoop:
000013CA 51C8 FFF0                      dbf d0,NemDec_WritePixel
000013CE 60B8                           bra.s   NemDec2
000013D0                            ; ---------------------------------------------------------------------------
000013D0                             
000013D0                            NemDec_InlineData:
000013D0 5D46                           subq.w  #6,d6           ; 6 bits needed to signal inline data
000013D2 0C46 0009                      cmpi.w  #9,d6
000013D6 6400                           bcc.s   @0
000013D8 5046                           addq.w  #8,d6
000013DA E145                           asl.w   #8,d5
000013DC 1A18                           move.b  (a0)+,d5
000013DE 5F46                       @0  subq.w  #7,d6           ; and 7 bits needed for the inline data itself
000013E0 3205                           move.w  d5,d1
000013E2 EC69                           lsr.w   d6,d1           ; shift so that low bit of the code is in bit position 0
000013E4 3001                           move.w  d1,d0
000013E6 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
000013EA 0240 0070                      andi.w  #$70,d0         ; high nybble is repeat count for pixel
000013EE 0C46 0009                      cmpi.w  #9,d6
000013F2 64C6                           bcc.s   NemDec_GetRepeatCount
000013F4 5046                           addq.w  #8,d6
000013F6 E145                           asl.w   #8,d5
000013F8 1A18                           move.b  (a0)+,d5
000013FA 60BE                           bra.s   NemDec_GetRepeatCount
000013FC                             
000013FC                            ; ---------------------------------------------------------------------------
000013FC                            ; Subroutines to output decompressed entry
000013FC                            ; Selected depending on current decompression mode
000013FC                            ; ---------------------------------------------------------------------------
000013FC                             
000013FC                            NemPCD_WriteRowToVDP:
000013FC                            loc_1502:
000013FC 2884                           move.l  d4,(a4)         ; write 8-pixel row
000013FE 534D                           subq.w  #1,a5
00001400 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
00001402 66C2                           bne.s   NemPCD_NewRow         ; if not, branch
00001404 4E75                           rts
00001406                            ; ---------------------------------------------------------------------------
00001406                             
00001406                            NemPCD_WriteRowToVDP_XOR:
00001406 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
00001408 2882                           move.l  d2,(a4)         ; and write the result
0000140A 534D                           subq.w  #1,a5
0000140C 380D                           move.w  a5,d4
0000140E 66B6                           bne.s   NemPCD_NewRow
00001410 4E75                           rts
00001412                            ; ---------------------------------------------------------------------------
00001412                             
00001412                            NemDec_WriteRowToRAM:
00001412 28C4                           move.l  d4,(a4)+        ; write 8-pixel row
00001414 534D                           subq.w  #1,a5
00001416 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
00001418 66AC                           bne.s   NemPCD_NewRow         ; if not, branch
0000141A 4E75                           rts
0000141C                            ; ---------------------------------------------------------------------------
0000141C                             
0000141C                            NemDec_WriteRowToRAM_XOR:
0000141C B982                           eor.l   d4,d2           ; XOR the previous row by the current row
0000141E 28C2                           move.l  d2,(a4)+        ; and write the result
00001420 534D                           subq.w  #1,a5
00001422 380D                           move.w  a5,d4
00001424 66A0                           bne.s   NemPCD_NewRow
00001426 4E75                           rts
00001428                             
00001428                            ; ---------------------------------------------------------------------------
00001428                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
00001428                            ; ---------------------------------------------------------------------------
00001428                             
00001428                            NemDec_BuildCodeTable:
00001428 1018                           move.b  (a0)+,d0        ; read first byte
0000142A                             
0000142A                            @ChkEnd:
0000142A 0C00 00FF                      cmpi.b  #$FF,d0         ; has the end of the code table description been reached?
0000142E 6600                           bne.s   @NewPalIndex        ; if not, branch
00001430 4E75                           rts
00001432                            ; ---------------------------------------------------------------------------
00001432                             
00001432                            @NewPalIndex:
00001432 3E00                           move.w  d0,d7
00001434                             
00001434                            @ItemLoop:
00001434 1018                           move.b  (a0)+,d0        ; read next byte
00001436 6BF2                           bmi.s   @ChkEnd         ; ~~
00001438 1200                           move.b  d0,d1
0000143A 0247 000F                      andi.w  #$F,d7          ; get palette index
0000143E 0241 0070                      andi.w  #$70,d1         ; get repeat count for palette index
00001442 8E41                           or.w    d1,d7           ; combine the two
00001444 0240 000F                      andi.w  #$F,d0          ; get the length of the code in bits
00001448 1200                           move.b  d0,d1
0000144A E149                           lsl.w   #8,d1
0000144C 8E41                           or.w    d1,d7           ; combine with palette index and repeat count to form code table entry
0000144E 7208                           moveq   #8,d1
00001450 9240                           sub.w   d0,d1           ; is the code 8 bits long?
00001452 6600                           bne.s   @ItemShortCode      ; if not, a bit of extra processing is needed
00001454 1018                           move.b  (a0)+,d0        ; get code
00001456 D040                           add.w   d0,d0           ; each code gets a word-sized entry in the table
00001458 3387 0000                      move.w  d7,(a1,d0.w)        ; store the entry for the code
0000145C 60D6                           bra.s   @ItemLoop       ; repeat
0000145E                            ; ---------------------------------------------------------------------------
0000145E                             
0000145E                            @ItemShortCode:
0000145E 1018                           move.b  (a0)+,d0        ; get code
00001460 E368                           lsl.w   d1,d0           ; shift so that high bit is in bit position 7
00001462 D040                           add.w   d0,d0           ; get index into code table
00001464 7A01                           moveq   #1,d5
00001466 E36D                           lsl.w   d1,d5
00001468 5345                           subq.w  #1,d5           ; d5 = 2^d1 - 1
0000146A 4DF1 0000                      lea (a1,d0.w),a6        ; ~~
0000146E                             
0000146E                            @ItemShortCodeLoop:
0000146E 3CC7                           move.w  d7,(a6)+        ; ~~ store entry
00001470 51CD FFFC                      dbf d5,@ItemShortCodeLoop   ; repeat for required number of entries
00001474 60BE                           bra.s   @ItemLoop
00001474 60BE                           bra.s   @ItemLoop
00001476                            
00001476                              
00001476                                pusho	; buffer local label symbol config
00001476                                opt ws+  ; change local label symbol to '.'
00001476                            
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; MACRO ResetDMAQueue
00001476                            ; Clears the DMA queue, discarding all previously-queued DMAs.
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; ROUTINE Process_DMA_Queue / ProcessDMAQueue
00001476                            ; Performs all queued DMA transfers and clears the DMA queue.
00001476                            ;
00001476                            ; Output:
00001476                            ; 	a1,a5	trashed
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; ROUTINE InitDMAQueue
00001476                            ; Pre-initializes the DMA queue with VDP register numbers in alternating bytes.
00001476                            ; Must be called before the queue is used, and the queue expects that only it
00001476                            ; write to this region of RAM.
00001476                            ;
00001476                            ; Output:
00001476                            ; 	a0,d0,d1	trashed
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; ROUTINE Add_To_DMA_Queue / QueueDMATransfer
00001476                            ; Queues a DMA with parameters given in registers.
00001476                            ;
00001476                            ; Options:
00001476                            ; 	AssumeSourceAddressInBytes (default 1)
00001476                            ; 	AssumeSourceAddressIsRAMSafe (default 0)
00001476                            ; 	UseRAMSourceSafeDMA (default 1&(AssumeSourceAddressIsRAMSafe=0))
00001476                            ; 	Use128kbSafeDMA (default 0)
00001476                            ; 	UseVIntSafeDMA (default 0)
00001476                            ; Input:
00001476                            ; 	d1	Source address (in bytes, or in words if AssumeSourceAddressInBytes is
00001476                            ; 		set to 0)
00001476                            ; 	d2	Destination address
00001476                            ; 	d3	Transfer length (in words)
00001476                            ; Output:
00001476                            ; 	d0,d1,d2,d3,a1	trashed
00001476                            ;
00001476                            ; With the default settings, runs in:
00001476                            ; * 48(11/0) cycles if queue is full (DMA discarded)
00001476                            ; * 184(29/9) cycles otherwise (DMA queued)
00001476                            ;
00001476                            ; With Use128kbSafeDMA = 1, runs in:
00001476                            ; * 48(11/0) cycles if queue is full at the start (DMA discarded)
00001476                            ; * 200(32/9) cycles if the DMA does not cross a 128kB boundary (DMA queued)
00001476                            ; * 226(38/9) cycles if the DMA crosses a 128kB boundary, and the first piece
00001476                            ;   fills the queue (second piece is discarded)
00001476                            ; * 338(56/17) cycles if the DMA crosses a 128kB boundary, and the queue has
00001476                            ;   space for both pieces (both pieces queued)
00001476                            ;
00001476                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to all times.
00001476                            ;
00001476                            ; Setting AssumeSourceAddressInBytes to 0 reduces all times by 10(1/0) cycles,
00001476                            ; but only if the DMA is not entirely discarded. However, all callers must be
00001476                            ; edited to make sure the adresss given is correct.
00001476                            ;
00001476                            ; Setting AssumeSourceAddressIsRAMSafe to 1, or UseRAMSourceSafeDMA to 0,
00001476                            ; reduces all times by 14(2/0) cycles, but only if the DMA is not entirely
00001476                            ; discarded. However, all callers must be edited to make sure the adresss given
00001476                            ; in the correct form. You can use the dmaSource function for that.
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; MACRO QueueStaticDMA
00001476                            ; Directly queues a DMA on the spot. Requires all parameters to be known at
00001476                            ; assembly time; that is, no registers. Gives assembly errors when the DMA
00001476                            ; crosses a 128kB boundary, is at an odd ROM location, or is zero length.
00001476                            ;
00001476                            ; Options:
00001476                            ; 	UseVIntSafeDMA (default 0)
00001476                            ; Input:
00001476                            ; 	Source address (in bytes), transfer length (in bytes), destination address
00001476                            ; Output:
00001476                            ; 	d0,a1	trashed
00001476                            ;
00001476                            ; With the default settings, runs in:
00001476                            ; * 32(7/0) cycles if queue is full (DMA discarded)
00001476                            ; * 122(21/8) cycles otherwise (DMA queued)
00001476                            ;
00001476                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to both cases.
00001476                            ; ===========================================================================
00001476                            ; option: AssumeSourceAddressInBytes
00001476                            ;
00001476                            ; This option makes the function work as a drop-in replacement of the original
00001476                            ; functions. If you modify all callers to supply a position in words instead of
00001476                            ; bytes (i.e., divide source address by 2) you can set this to 0 to gain 10(1/0)
00001476 =00000001                  AssumeSourceAddressInBytes = 1
00001476                            ; ===========================================================================
00001476                            ; option: AssumeSourceAddressIsRAMSafe
00001476                            ;
00001476                            ; This option (which is disabled by default) makes the DMA queue assume that the
00001476                            ; source address is given to the function in a way that makes them safe to use
00001476                            ; with RAM sources. You need to edit all callers to ensure this.
00001476                            ; Enabling this option turns off UseRAMSourceSafeDMA, and saves 14(2/0).
00001476 =00000000                  AssumeSourceAddressIsRAMSafe = 0
00001476                            ; ===========================================================================
00001476                            ; option: UseRAMSourceSafeDMA
00001476                            ;
00001476                            ; This option (which is enabled by default) makes source addresses in RAM safe
00001476                            ; at the cost of 14(2/0). If you modify all callers so as to clear the top byte
00001476                            ; of source addresses (i.e., by ANDing them with $FFFFFF).
00001476 =00000001                  UseRAMSourceSafeDMA = 1&(AssumeSourceAddressIsRAMSafe=0)
00001476                            ; ===========================================================================
00001476                            ; option: Use128kbSafeDMA
00001476                            ;
00001476                            ; This option breaks DMA transfers that crosses a 128kB block into two. It is
00001476                            ; disabled by default because you can simply align the art in ROM and avoid the
00001476                            ; issue altogether. It is here so that you have a high-performance routine to do
00001476                            ; the job in situations where you can't align it in ROM.
00001476 =00000001                  Use128kbSafeDMA = 1
00001476                            ; ===========================================================================
00001476                            ; option UseVIntSafeDMA
00001476                            ;
00001476                            ; Option to mask interrupts while updating the DMA queue. This fixes many race
00001476                            ; conditions in the DMA funcion, but it costs 46(6/1) cycles. The better way to
00001476                            ; handle these race conditions would be to make unsafe callers (such as S3&K's
00001476                            ; KosM decoder) prevent these by masking off interrupts before calling and then
00001476                            ; restore interrupts after.
00001476 =00000000                  UseVIntSafeDMA = 0
00001476                            ; ===========================================================================
00001476                            
00001476                            
00001476                            ; Convenience macros, for increased maintainability of the code.
00001476 =00000027                  DMA = %100111
00001476 =00000021                  VRAM = %100001
00001476                            ; Like vdpComm, but starting from an address contained in a register
00001476 =00000001                  vdpCommReg_defined = 1
00001476                            vdpCommReg macro reg,type,rwd,clr
00001476                            	lsl.l	#2,\reg							; Move high bits into (word-swapped) position, accidentally moving everything else
00001476                            	if ((\type&\rwd)&3)<>0
00001476                            		addq.w	#((\type&\rwd)&3),\reg			; Add upper access type bits
00001476                            	endif
00001476                            	ror.w	#2,\reg							; Put upper access type bits into place, also moving all other bits into their correct (word-swapped) places
00001476                            	swap	\reg								; Put all bits in proper places
00001476                            	if \clr <> 0
00001476                            		andi.w	#3,\reg						; Strip whatever junk was in upper word of reg
00001476                            	endif
00001476                            	if ((\type&\rwd)&$FC)=$20
00001476                            		tas.b	\reg							; Add in the DMA flag -- tas fails on memory, but works on registers
00001476                            	elseif ((\type&\rwd)&$FC)<>0
00001476                            		ori.w	#(((\type&\rwd)&$FC)<<2),\reg	; Add in missing access type bits
00001476                            	endif
00001476                            	endm
00001476                            ; ---------------------------------------------------------------------------
00001476 =00000001                  intMacros_defined = 1
00001476                            enableInts macro
00001476                            	move	#$2300,sr
00001476                            	endm
00001476                            
00001476                            disableInts macro
00001476                            	move	#$2700,sr
00001476                            	endm
00001476                            ; ---------------------------------------------------------------------------
00001476 =00000001                  DMAEntry_defined = 1
00001476                                    rsreset
00001476 =00000000                  DMAEntry.Reg94:		rs.b	1
00001476                            			  
00001476 =00000001                  DMAEntry.Size:      rs.b    0
00001476 =00000001                  DMAEntry.SizeH:		rs.b	1
00001476 =00000002                  DMAEntry.Reg93:		rs.b	1
00001476 =00000003                  DMAEntry.Source:    rs.b    0
00001476 =00000003                  DMAEntry.SizeL:		rs.b	1
00001476 =00000004                  DMAEntry.Reg97:		rs.b	1
00001476 =00000005                  DMAEntry.SrcH:		rs.b	1
00001476 =00000006                  DMAEntry.Reg96:		rs.b	1
00001476 =00000007                  DMAEntry.SrcM:		rs.b	1
00001476 =00000008                  DMAEntry.Reg95:		rs.b	1
00001476 =00000009                  DMAEntry.SrcL:		rs.b	1
00001476 =0000000A                  DMAEntry.Command:	rs.l	1
00001476 =0000000E                  DMAEntry.len:   rs.w    0
00001476                            ; ---------------------------------------------------------------------------
00001476 =00000012                  QueueSlotCount = (VDP_Command_Buffer_Slot-VDP_Command_Buffer)/DMAEntry.len
00001476                            ; ---------------------------------------------------------------------------
00001476                            						
00001476                            										   
00001476                            									   
00001476                            	  
00001476                            																			 
00001476                            							  
00001476 =00000001                  QueueStaticDMA_defined = 1
00001476                            ; Expects source address and DMA length in bytes. Also, expects source, size, and dest to be known
00001476                            ; at assembly time. Gives errors if DMA starts at an odd address, transfers
00001476                            ; crosses a 128kB boundary, or has size 0.
00001476                            QueueStaticDMA macro src,length,dest
00001476                                local   len
00001476                            		if ((\src)&1)<>0
00001476                            			inform 3,"DMA queued from odd source \1!"
00001476                            		endif
00001476                            		if ((\length)&1)<>0
00001476                            			inform 3,"DMA an odd number of bytes \2!"
00001476                            		endif
00001476                            		if (\length)=0
00001476                            			inform 3,"DMA transferring 0 bytes (becomes a 128kB transfer). If you really mean it, pass 128kB instead."
00001476                            		endif
00001476                            		if (((\src)+(\length)-1)>>17)<>((\src)>>17)
00001476                            			inform 3,"DMA crosses a 128kB boundary. You should either split the DMA manually or align the source adequately."
00001476                            		endif
00001476                            	  
00001476                            	if UseVIntSafeDMA=1
00001476                            		move.w	sr,-(sp)										; Save current interrupt mask
00001476                            		disableInts												; Mask off interrupts
00001476                            	endif ; UseVIntSafeDMA=1
00001476                            	movea.w	(VDP_Command_Buffer_Slot).w,a1
00001476                            	cmpa.w	#VDP_Command_Buffer_Slot,a1
00001476                            	beq.s	.done												; Return if there's no more room in the buffer
00001476                            	len: = ((length>>1)&$7FFF)
00001476                                move.b	#(len>>8)&$FF,DMAEntry.SizeH(a1)		; Write top byte of size/2
00001476                            	move.l	#((len&$FF)<<24)|((src>>1)&$7FFFFF),d0	; Set d0 to bottom byte of size/2 and the low 3 bytes of source/2
00001476                            	movep.l	d0,DMAEntry.SizeL(a1)								; Write it all to the queue
00001476                            	lea	DMAEntry.Command(a1),a1									; Seek to correct RAM address to store VDP DMA command
00001476                            	move.l	#$40000080,(a1)+						; Write VDP DMA command for destination address
00001476                            	move.w	a1,(VDP_Command_Buffer_Slot).w						; Write next queue slot
00001476                            .done:
00001476                            	if UseVIntSafeDMA=1
00001476                            		move.w	(sp)+,sr										; Restore interrupts to previous state
00001476                            	endif ;UseVIntSafeDMA=1
00001476                            	endm
00001476                            
00001476                                
00001476                            
00001476                            ; ---------------------------------------------------------------------------
00001476                            ResetDMAQueue: macro
00001476                            	move.w	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
00001476                            	endm
00001476                            ; ===========================================================================
00001476                            
00001476                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001476                            
00001476                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand:
00001476                            Add_To_DMA_Queue:
00001476                            QueueDMATransfer:
00001476 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
0000147A B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
0000147E 6700                       	beq.s	.done											; Return if there's no more room in the buffer
00001480                            
00001480 E289                       		lsr.l	#1,d1										; Source address is in words for the VDP registers
00001482 0881 0017                  		bclr.l	#23,d1										; Make sure bit 23 is clear (68k->VDP DMA flag)
00001486 03C9 0003                  	movep.l	d1,DMAEntry.Source(a1)							; Write source address; the useless top byte will be overwritten later
0000148A 7000                       	moveq	#0,d0											; We need a zero on d0
0000148C                            
0000148C                            		; Detect if transfer crosses 128KB boundary
0000148C                            		; Using sub+sub instead of move+add handles the following edge cases:
0000148C                            		; (1) d3.w = 0 => 128kB transfer
0000148C                            		;   (a) d1.w = 0 => no carry, don't split the DMA
0000148C                            		;   (b) d1.w != 0 => carry, need to split the DMA
0000148C                            		; (2) d3.w != 0
0000148C                            		;   (a) if there is carry on d1.w + d3.w
0000148C                            		;     (* ) if d1.w + d3.w = 0 => transfer comes entirely from current 128kB block, don't split the DMA
0000148C                            		;     (**) if d1.w + d3.w != 0 => need to split the DMA
0000148C                            		;   (b) if there is no carry on d1.w + d3.w => don't split the DMA
0000148C                            		; The reason this works is that carry on d1.w + d3.w means that
0000148C                            		; d1.w + d3.w >= $10000, whereas carry on (-d3.w) - (d1.w) means that
0000148C                            		; d1.w + d3.w > $10000.
0000148C 9043                       		sub.w	d3,d0										; Using sub instead of move and add allows checking edge cases
0000148E 9041                       		sub.w	d1,d0										; Does the transfer cross over to the next 128kB block?
00001490 6500                       		bcs.s	.doubletransfer								; Branch if yes
00001492                            	; It does not cross a 128kB boundary. So just finish writing it.
00001492 0789 0001                  	movep.w	d3,DMAEntry.Size(a1)							; Write DMA length, overwriting useless top byte of source address
00001496                            
00001496                            .finishxfer:
00001496                            	; Command to specify destination address and begin DMA
00001496 3002                       	move.w	d2,d0											; Use the fact that top word of d0 is zero to avoid clearing on vdpCommReg
000014A2 43E9 000A                  	lea	DMAEntry.Command(a1),a1								; Seek to correct RAM address to store VDP DMA command
000014A6 22C0                       	move.l	d0,(a1)+										; Write VDP DMA command for destination address
000014A8 31C9 C8FC                  	move.w	a1,(VDP_Command_Buffer_Slot).w					; Write next queue slot
000014AC                            
000014AC                            .done:
000014AC 4E75                       	rts
000014AE                            ; ---------------------------------------------------------------------------
000014AE                            .doubletransfer:
000014AE                            		; We need to split the DMA into two parts, since it crosses a 128kB block
000014AE D043                       		add.w	d3,d0										; Set d0 to the number of words until end of current 128kB block
000014B0 0189 0001                  		movep.w	d0,DMAEntry.Size(a1)						; Write DMA length of first part, overwriting useless top byte of source addres
000014B4                            
000014B4 B2FC C8EE                  		cmpa.w	#VDP_Command_Buffer_Slot-DMAEntry.len,a1	; Does the queue have enough space for both parts?
000014B8 67DC                       		beq.s	.finishxfer									; Branch if not
000014BA                            
000014BA                            		; Get second transfer's source, destination, and length
000014BA 9640                       		sub.w	d0,d3										; Set d3 to the number of words remaining
000014BC D280                       		add.l	d0,d1										; Offset the source address of the second part by the length of the first part
000014BE D040                       		add.w	d0,d0										; Convert to number of bytes
000014C0 D042                       		add.w	d2,d0										; Set d0 to the VRAM destination of the second part
000014C2                            
000014C2                            		; If we know top word of d2 is clear, the following vdpCommReg can be set to not
000014C2                            		; clear it. There is, unfortunately, no faster way to clear it than this.
000014D0 2342 000A                  		move.l	d2,DMAEntry.Command(a1)						; Write VDP DMA command for destination address of first part
000014D4                            
000014D4                            		; Do second transfer
000014D4 03C9 0011                  		movep.l	d1,DMAEntry.len+DMAEntry.Source(a1)			; Write source address of second part; useless top byte will be overwritten later
000014D8 0789 000F                  		movep.w	d3,DMAEntry.len+DMAEntry.Size(a1)			; Write DMA length of second part, overwriting useless top byte of source addres
000014DC                            
000014DC                            		; Command to specify destination address and begin DMA
000014E6 43E9 0018                  		lea	DMAEntry.len+DMAEntry.Command(a1),a1			; Seek to correct RAM address to store VDP DMA command of second part
000014EA 22C0                       		move.l	d0,(a1)+									; Write VDP DMA command for destination address of second part
000014EC                            
000014EC 31C9 C8FC                  		move.w	a1,(VDP_Command_Buffer_Slot).w				; Write next queue slot
000014F0 4E75                       		rts
000014F2                            ; End of function QueueDMATransfer
000014F2                            ; ===========================================================================
000014F2                            
000014F2                            ; ---------------------------------------------------------------------------
000014F2                            ; Subroutine for issuing all VDP commands that were queued
000014F2                            ; (by earlier calls to QueueDMATransfer)
000014F2                            ; Resets the queue when it's done
000014F2                            ; ---------------------------------------------------------------------------
000014F2                            
000014F2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000014F2                            
000014F2                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA:
000014F2                            Process_DMA_Queue:
000014F2                            ProcessDMAQueue:
000014F2 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
000014F6 4EE9 0000                  	jmp	.jump_table-VDP_Command_Buffer(a1)
000014FA                            ; ---------------------------------------------------------------------------
000014FA                            .jump_table:
000014FA 4E75                       	rts
000014FC                            	rept 6
000014FC                            		trap	#0											; Just in case
000014FC 4E40 4E40 4E40 4E40 4E40+  	endr
00001508                            ; ---------------------------------------------------------------------------
00001508 =00000001                      c: = 1
00001508                            	rept QueueSlotCount
00001508                            		lea	(vdp_control_port).l,a5
00001508                            		lea	(VDP_Command_Buffer).w,a1
00001508                            		if c<>QueueSlotCount
00001508                            			bra.w	.jump0 - c*8
00001508                            		endif
00001508                                c: = c + 1
00001600                            ; ---------------------------------------------------------------------------
00001600                            	rept QueueSlotCount
00001600                            		move.l	(a1)+,(a5)									; Transfer length
00001600                            		move.l	(a1)+,(a5)									; Source address high
00001600                            		move.l	(a1)+,(a5)									; Source address low + destination high
00001600                            		move.w	(a1)+,(a5)									; Destination low, trigger DMA
00001600 2A99 2A99 2A99 3A99 2A99+  	endr
00001690                            
00001690                            .jump0:
00001690 31FC C800 C8FC             	ResetDMAQueue
00001696 4E75                       	rts
00001698                            ; End of function ProcessDMAQueue
00001698                            ; ===========================================================================
00001698                            
00001698                            ; ---------------------------------------------------------------------------
00001698                            ; Subroutine for initializing the DMA queue.
00001698                            ; ---------------------------------------------------------------------------
00001698                            
00001698                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001698                            
00001698                            InitDMAQueue:
00001698 41F8 C800                  	lea	(VDP_Command_Buffer).w,a0
0000169C 7094                       	moveq	#-$6C,d0				; fast-store $94 (sign-extended) in d0
0000169E 223C 9397 9695             	move.l	#$93979695,d1
000016A4 =00000000                      c: = 0
000016A4                            	rept QueueSlotCount
000016A4                            		move.b	d0,c + DMAEntry.Reg94(a0)
000016A4                            		movep.l	d1,c + DMAEntry.Reg93(a0)
000016A4                                c: = c + DMAEntry.len
000016A4 1080 03C8 0002 1140 000E+  	endr
00001732                            
00001732 31FC C800 C8FC             	ResetDMAQueue
00001738 4E75                       	rts
0000173A                            ; End of function ProcessDMAQueue
0000173A                            ; ===========================================================================
0000173A                            
0000173A                            
0000173A                                popo	; buffer local label symbol config
0000173A                            
0000173A                            
0000173A                            ; ---------------------------------------------------------------------------
0000173A                            ; Subroutine to load pattern load cues (aka to queue pattern load requests)
0000173A                            ; ---------------------------------------------------------------------------
0000173A                            
0000173A                            ; ARGUMENTS
0000173A                            ; d0 = index of PLC list
0000173A                            ; ---------------------------------------------------------------------------
0000173A                            
0000173A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000173A                            
0000173A                            ; LoadPLC:
0000173A                            AddPLC:
0000173A 48E7 0060                  		movem.l	a1-a2,-(sp)
0000173E 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001744 D040                       		add.w	d0,d0
00001746 3031 0000                  		move.w	(a1,d0.w),d0
0000174A 43F1 0000                  		lea	(a1,d0.w),a1		; jump to relevant PLC
0000174E 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space
00001752                            
00001752                            	@findspace:
00001752 4A92                       		tst.l	(a2)		; is space available in RAM?
00001754 6700                       		beq.s	@copytoRAM	; if yes, branch
00001756 5C4A                       		addq.w	#6,a2		; if not, try next space
00001758 60F8                       		bra.s	@findspace
0000175A                            ; ===========================================================================
0000175A                            
0000175A                            @copytoRAM:
0000175A 3019                       		move.w	(a1)+,d0	; get length of PLC
0000175C 6B00                       		bmi.s	@skip
0000175E                            
0000175E                            	@loop:
0000175E 24D9                       		move.l	(a1)+,(a2)+
00001760 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
00001762 51C8 FFFA                  		dbf	d0,@loop	; repeat for length of PLC
00001766                            
00001766                            	@skip:
00001766 4CDF 0600                  		movem.l	(sp)+,a1-a2 ; a1=object
0000176A 4E75                       		rts	
0000176C                            ; End of function AddPLC
0000176C                            
0000176C                            
0000176C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000176C                            ; Queue pattern load requests, but clear the PLQ first
0000176C                            
0000176C                            ; ARGUMENTS
0000176C                            ; d0 = index of PLC list (see ArtLoadCues)
0000176C                            
0000176C                            ; NOTICE: This subroutine does not check for buffer overruns. The programmer
0000176C                            ;	  (or hacker) is responsible for making sure that no more than
0000176C                            ;	  16 load requests are copied into the buffer.
0000176C                            ;	  _________DO NOT PUT MORE THAN 16 LOAD REQUESTS IN A LIST!__________
0000176C                            ;         (or if you change the size of Plc_Buffer, the limit becomes (Plc_Buffer_Only_End-Plc_Buffer)/6)
0000176C                            
0000176C                            ; LoadPLC2:
0000176C                            NewPLC:
0000176C 48E7 0060                  		movem.l	a1-a2,-(sp)
00001770 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001776 D040                       		add.w	d0,d0
00001778 3031 0000                  		move.w	(a1,d0.w),d0
0000177C 43F1 0000                  		lea	(a1,d0.w),a1	; jump to relevant PLC
00001780 6100                       		bsr.s	ClearPLC	; erase any data in PLC buffer space
00001782 45F8 F680                  		lea	(v_plc_buffer).w,a2
00001786 3019                       		move.w	(a1)+,d0	; get length of PLC
00001788 6B00                       		bmi.s	@skip		; if it's negative, skip the next loop
0000178A                            
0000178A                            	@loop:
0000178A 24D9                       		move.l	(a1)+,(a2)+
0000178C 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
0000178E 51C8 FFFA                  		dbf	d0,@loop		; repeat for length of PLC
00001792                            
00001792                            	@skip:
00001792 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001796 4E75                       		rts	
00001798                            ; End of function NewPLC
00001798                            
00001798                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001798                            
00001798                            ; ---------------------------------------------------------------------------
00001798                            ; Subroutine to	clear the pattern load cues
00001798                            ; ---------------------------------------------------------------------------
00001798                            
00001798                            ; Clear the pattern load queue ($FFF680 - $FFF700)
00001798                            
00001798                            
00001798                            ClearPLC:
00001798 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space in RAM
0000179C 701F                       		moveq	#$1F,d0	; bytesToLcnt(v_plc_buffer_end-v_plc_buffer)
0000179E                            
0000179E                            	@loop:
0000179E 429A                       		clr.l	(a2)+
000017A0 51C8 FFFC                  		dbf	d0,@loop
000017A4 4E75                       		rts	
000017A6                            ; End of function ClearPLC
000017A6                            
000017A6                            ; ---------------------------------------------------------------------------
000017A6                            ; Subroutine to	use graphics listed in a pattern load cue
000017A6                            ; ---------------------------------------------------------------------------
000017A6                            
000017A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A6                            
000017A6                            
000017A6                            RunPLC:
000017A6 4AB8 F680                  		tst.l	(v_plc_buffer).w
000017AA 6700                       		beq.s	Rplc_Exit
000017AC 4A78 F6F8                  		tst.w	(f_plc_execute).w
000017B0 6600                       		bne.s	Rplc_Exit
000017B2 2078 F680                  		movea.l	(v_plc_buffer).w,a0
000017B6 47F9 0000 13FC             		lea	(NemPCD_WriteRowToVDP).l,a3
000017BC 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
000017C0 3418                       		move.w	(a0)+,d2
000017C2 6A00                       		bpl.s	loc_160E
000017C4 D6FC 000A                  		adda.w	#$A,a3
000017C8                            
000017C8                            loc_160E:
000017C8 0242 7FFF                  		andi.w	#$7FFF,d2
000017CC 31C2 F6F8                  		move.w	d2,(f_plc_execute).w
000017D0 6100 FC56                  		bsr.w	NemDec_BuildCodeTable
000017D4 1A18                       		move.b	(a0)+,d5
000017D6 E145                       		asl.w	#8,d5
000017D8 1A18                       		move.b	(a0)+,d5
000017DA 7C10                       		moveq	#$10,d6
000017DC 7000                       		moveq	#0,d0
000017DE 21C8 F680                  		move.l	a0,(v_plc_buffer).w
000017E2 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
000017E6 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000017EA 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
000017EE 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000017F2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000017F6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000017FA                            
000017FA                            Rplc_Exit:
000017FA 4E75                       		rts	
000017FC                            ; End of function RunPLC
000017FC                            
000017FC                            
000017FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017FC                            
000017FC                            
000017FC                            sub_1642:
000017FC 4A78 F6F8                  		tst.w	(f_plc_execute).w
00001800 6700 0000                  		beq.w	locret_16DA
00001804 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
0000180A 7000                       		moveq	#0,d0
0000180C 3038 F684                  		move.w	($FFFFF684).w,d0
00001810 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001816 6000                       		bra.s	loc_1676
00001818                            ; End of function sub_1642
00001818                            
00001818                            
00001818                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001818                            
00001818                            
00001818                            ; sub_165E:
00001818                            ProcessDPLC2:
00001818 4A78 F6F8                  		tst.w	(f_plc_execute).w
0000181C 6700                       		beq.s	locret_16DA
0000181E 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001824 7000                       		moveq	#0,d0
00001826 3038 F684                  		move.w	($FFFFF684).w,d0
0000182A 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001830                            
00001830                            loc_1676:
00001830 49F9 00C0 0004             		lea	(vdp_control_port).l,a4
00001836 E588                       		lsl.l	#2,d0
00001838 E448                       		lsr.w	#2,d0
0000183A 0040 4000                  		ori.w	#$4000,d0
0000183E 4840                       		swap	d0
00001840 2880                       		move.l	d0,(a4)
00001842 594C                       		subq.w	#4,a4
00001844 2078 F680                  		movea.l	(v_plc_buffer).w,a0
00001848 2678 F6E0                  		movea.l	(v_ptrnemcode).w,a3
0000184C 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001850 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001854 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001858 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
0000185C 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001860 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00001864                            
00001864                            loc_16AA:
00001864 3A7C 0008                  		movea.w	#8,a5
00001868 6100 FB5C                  		bsr.w	NemPCD_NewRow
0000186C 5378 F6F8                  		subq.w	#1,(f_plc_execute).w
00001870 6700                       		beq.s	loc_16DC
00001872 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00001876 66EC                       		bne.s	loc_16AA
00001878 21C8 F680                  		move.l	a0,(v_plc_buffer).w
0000187C 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
00001880 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001884 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001888 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
0000188C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001890 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001894                            
00001894                            locret_16DA:
00001894 4E75                       		rts	
00001896                            ; ===========================================================================
00001896                            
00001896                            loc_16DC:
00001896 41F8 F680                  		lea	(v_plc_buffer).w,a0
0000189A 7015                       		moveq	#$15,d0
0000189C                            
0000189C                            loc_16E2:
0000189C 20E8 0006                  		move.l	6(a0),(a0)+
000018A0 51C8 FFFA                  		dbf	d0,loc_16E2
000018A4 4E75                       		rts	
000018A6                            ; End of function ProcessDPLC2
000018A6                            
000018A6                            ; ---------------------------------------------------------------------------
000018A6                            ; Subroutine to	execute	the pattern load cue
000018A6                            ; ---------------------------------------------------------------------------
000018A6                            
000018A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018A6                            
000018A6                            
000018A6                            QuickPLC:
000018A6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000018AC D040                       		add.w	d0,d0
000018AE 3031 0000                  		move.w	(a1,d0.w),d0
000018B2 43F1 0000                  		lea	(a1,d0.w),a1
000018B6 3219                       		move.w	(a1)+,d1	; get length of PLC
000018B8                            
000018B8                            	Qplc_Loop:
000018B8 2059                       		movea.l	(a1)+,a0	; get art pointer
000018BA 7000                       		moveq	#0,d0
000018BC 3019                       		move.w	(a1)+,d0	; get VRAM address
000018BE E588                       		lsl.l	#2,d0
000018C0 E448                       		lsr.w	#2,d0
000018C2 0040 4000                  		ori.w	#$4000,d0
000018C6 4840                       		swap	d0
000018C8 23C0 00C0 0004             		move.l	d0,(vdp_control_port).l ; converted VRAM address to VDP format
000018CE 6100 FA7E                  		bsr.w	NemDec		; decompress
000018D2 51C9 FFE4                  		dbf	d1,Qplc_Loop	; repeat for length of PLC
000018D6 4E75                       		rts	
000018D8                            ; End of function QuickPLC
000018D8                            
000018D8                            		include	"_inc\Enigma Decompression.asm"
000018D8                            ; ---------------------------------------------------------------------------
000018D8                            ; Enigma decompression algorithm
000018D8                            
000018D8                            ; input:
000018D8                            ;	d0 = starting art tile (added to each 8x8 before writing to destination)
000018D8                            ;	a0 = source address
000018D8                            ;	a1 = destination address
000018D8                            
000018D8                            ; usage:
000018D8                            ;	lea	(source).l,a0
000018D8                            ;	lea	(destination).l,a1
000018D8                            ;	move.w	#arttile,d0
000018D8                            ;	bsr.w	EniDec
000018D8                            
000018D8                            ; See http://www.segaretro.org/Enigma_compression for format description
000018D8                            ; ---------------------------------------------------------------------------
000018D8                            
000018D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018D8                            
000018D8                            
000018D8                            EniDec:
000018D8 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
000018DC 3640                       		movea.w	d0,a3		; store starting art tile
000018DE 1018                       		move.b	(a0)+,d0
000018E0 4880                       		ext.w	d0
000018E2 3A40                       		movea.w	d0,a5		; store number of bits in inline copy value
000018E4 1818                       		move.b	(a0)+,d4
000018E6 E70C                       		lsl.b	#3,d4		; store PCCVH flags bitfield
000018E8 3458                       		movea.w	(a0)+,a2
000018EA D4CB                       		adda.w	a3,a2		; store incremental copy word
000018EC 3858                       		movea.w	(a0)+,a4
000018EE D8CB                       		adda.w	a3,a4		; store literal copy word
000018F0 1A18                       		move.b	(a0)+,d5
000018F2 E145                       		asl.w	#8,d5
000018F4 1A18                       		move.b	(a0)+,d5	; get first word in format list
000018F6 7C10                       		moveq	#16,d6		; initial shift value
000018F8                            ; loc_173E:
000018F8                            Eni_Loop:
000018F8 7007                       		moveq	#7,d0		; assume a format list entry is 7 bits
000018FA 3E06                       		move.w	d6,d7
000018FC 9E40                       		sub.w	d0,d7
000018FE 3205                       		move.w	d5,d1
00001900 EE69                       		lsr.w	d7,d1
00001902 0241 007F                  		andi.w	#$7F,d1		; get format list entry
00001906 3401                       		move.w	d1,d2		; and copy it
00001908 0C41 0040                  		cmpi.w	#$40,d1		; is the high bit of the entry set?
0000190C 6400                       		bhs.s	@sevenbitentry
0000190E 7006                       		moveq	#6,d0		; if it isn't, the entry is actually 6 bits
00001910 E24A                       		lsr.w	#1,d2
00001912                            ; loc_1758:
00001912                            @sevenbitentry:
00001912 6100 0000                  		bsr.w	EniDec_FetchByte
00001916 0242 000F                  		andi.w	#$F,d2		; get repeat count
0000191A E849                       		lsr.w	#4,d1
0000191C D241                       		add.w	d1,d1
0000191E 4EFB 1000                  		jmp	EniDec_Index(pc,d1.w)
00001922                            ; End of function EniDec
00001922                            
00001922                            ; ===========================================================================
00001922                            ; loc_1768:
00001922                            EniDec_00:
00001922 32CA                       @loop:		move.w	a2,(a1)+	; copy incremental copy word
00001924 524A                       		addq.w	#1,a2		; increment it
00001926 51CA FFFA                  		dbf	d2,@loop	; repeat
0000192A 60CC                       		bra.s	Eni_Loop
0000192C                            ; ===========================================================================
0000192C                            ; loc_1772:
0000192C                            EniDec_01:
0000192C 32CC                       @loop:		move.w	a4,(a1)+	; copy literal copy word
0000192E 51CA FFFC                  		dbf	d2,@loop	; repeat
00001932 60C4                       		bra.s	Eni_Loop
00001934                            ; ===========================================================================
00001934                            ; loc_177A:
00001934                            EniDec_100:
00001934 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001938                            ; loc_177E:
00001938 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
0000193A 51CA FFFC                  		dbf	d2,@loop	; repeat
0000193E                            
0000193E 60B8                       		bra.s	Eni_Loop
00001940                            ; ===========================================================================
00001940                            ; loc_1786:
00001940                            EniDec_101:
00001940 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001944                            ; loc_178A:
00001944 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001946 5241                       		addq.w	#1,d1		; increment
00001948 51CA FFFA                  		dbf	d2,@loop	; repeat
0000194C                            
0000194C 60AA                       		bra.s	Eni_Loop
0000194E                            ; ===========================================================================
0000194E                            ; loc_1794:
0000194E                            EniDec_110:
0000194E 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001952                            ; loc_1798:
00001952 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001954 5341                       		subq.w	#1,d1		; decrement
00001956 51CA FFFA                  		dbf	d2,@loop	; repeat
0000195A                            
0000195A 609C                       		bra.s	Eni_Loop
0000195C                            ; ===========================================================================
0000195C                            ; loc_17A2:
0000195C                            EniDec_111:
0000195C 0C42 000F                  		cmpi.w	#$F,d2
00001960 6700                       		beq.s	EniDec_Done
00001962                            ; loc_17A8:
00001962 6100 0000                  @loop:		bsr.w	EniDec_FetchInlineValue	; fetch new inline value
00001966 32C1                       		move.w	d1,(a1)+	; copy it
00001968 51CA FFF8                  		dbf	d2,@loop	; and repeat
0000196C                            
0000196C 608A                       		bra.s	Eni_Loop
0000196E                            ; ===========================================================================
0000196E                            ; loc_17B4:
0000196E                            EniDec_Index:
0000196E 60B2                       		bra.s	EniDec_00
00001970 60B0                       		bra.s	EniDec_00
00001972 60B8                       		bra.s	EniDec_01
00001974 60B6                       		bra.s	EniDec_01
00001976 60BC                       		bra.s	EniDec_100
00001978 60C6                       		bra.s	EniDec_101
0000197A 60D2                       		bra.s	EniDec_110
0000197C 60DE                       		bra.s	EniDec_111
0000197E                            ; ===========================================================================
0000197E                            ; loc_17C4:
0000197E                            EniDec_Done:
0000197E 5348                       		subq.w	#1,a0		; go back by one byte
00001980 0C46 0010                  		cmpi.w	#16,d6		; were we going to start on a completely new byte?
00001984 6600                       		bne.s	@notnewbyte	; if not, branch
00001986 5348                       		subq.w	#1,a0		; and another one if needed
00001988                            ; loc_17CE:
00001988                            @notnewbyte:
00001988 3008                       		move.w	a0,d0
0000198A E248                       		lsr.w	#1,d0		; are we on an odd byte?
0000198C 6400                       		bcc.s	@evenbyte	; if not, branch
0000198E 5248                       		addq.w	#1,a0		; ensure we're on an even byte
00001990                            ; loc_17D6:
00001990                            @evenbyte:
00001990 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001994 4E75                       		rts	
00001996                            
00001996                            ; ---------------------------------------------------------------------------
00001996                            ; Part of the Enigma decompressor
00001996                            ; Fetches an inline copy value and stores it in d1
00001996                            ; ---------------------------------------------------------------------------
00001996                            
00001996                            ; =============== S U B R O U T I N E =======================================
00001996                            
00001996                            ; loc_17DC:
00001996                            EniDec_FetchInlineValue:
00001996 360B                       		move.w	a3,d3		; copy starting art tile
00001998 1204                       		move.b	d4,d1		; copy PCCVH bitfield
0000199A D201                       		add.b	d1,d1		; is the priority bit set?
0000199C 6400                       		bcc.s	@skippriority	; if not, branch
0000199E 5346                       		subq.w	#1,d6
000019A0 0D05                       		btst	d6,d5		; is the priority bit set in the inline render flags?
000019A2 6700                       		beq.s	@skippriority	; if not, branch
000019A4 0043 8000                  		ori.w	#$8000,d3	; otherwise set priority bit in art tile
000019A8                            ; loc_17EE:
000019A8                            @skippriority:
000019A8 D201                       		add.b	d1,d1		; is the high palette line bit set?
000019AA 6400                       		bcc.s	@skiphighpal	; if not, branch
000019AC 5346                       		subq.w	#1,d6
000019AE 0D05                       		btst	d6,d5
000019B0 6700                       		beq.s	@skiphighpal
000019B2 0643 4000                  		addi.w	#$4000,d3	; set second palette line bit
000019B6                            ; loc_17FC:
000019B6                            @skiphighpal:
000019B6 D201                       		add.b	d1,d1		; is the low palette line bit set?
000019B8 6400                       		bcc.s	@skiplowpal	; if not, branch
000019BA 5346                       		subq.w	#1,d6
000019BC 0D05                       		btst	d6,d5
000019BE 6700                       		beq.s	@skiplowpal
000019C0 0643 2000                  		addi.w	#$2000,d3	; set first palette line bit
000019C4                            ; loc_180A:
000019C4                            @skiplowpal:
000019C4 D201                       		add.b	d1,d1		; is the vertical flip flag set?
000019C6 6400                       		bcc.s	@skipyflip	; if not, branch
000019C8 5346                       		subq.w	#1,d6
000019CA 0D05                       		btst	d6,d5
000019CC 6700                       		beq.s	@skipyflip
000019CE 0043 1000                  		ori.w	#$1000,d3	; set Y-flip bit
000019D2                            ; loc_1818:
000019D2                            @skipyflip:
000019D2 D201                       		add.b	d1,d1		; is the horizontal flip flag set?
000019D4 6400                       		bcc.s	@skipxflip	; if not, branch
000019D6 5346                       		subq.w	#1,d6
000019D8 0D05                       		btst	d6,d5
000019DA 6700                       		beq.s	@skipxflip
000019DC 0043 0800                  		ori.w	#$800,d3	; set X-flip bit
000019E0                            ; loc_1826:
000019E0                            @skipxflip:
000019E0 3205                       		move.w	d5,d1
000019E2 3E06                       		move.w	d6,d7
000019E4 9E4D                       		sub.w	a5,d7		; subtract length in bits of inline copy value
000019E6 6400                       		bcc.s	@enoughbits	; branch if a new word doesn't need to be read
000019E8 3C07                       		move.w	d7,d6
000019EA 0646 0010                  		addi.w	#16,d6
000019EE 4447                       		neg.w	d7		; calculate bit deficit
000019F0 EF69                       		lsl.w	d7,d1		; and make space for that many bits
000019F2 1A10                       		move.b	(a0),d5		; get next byte
000019F4 EF3D                       		rol.b	d7,d5		; and rotate the required bits into the lowest positions
000019F6 DE47                       		add.w	d7,d7
000019F8 CA7B 7000                  		and.w	EniDec_Masks-2(pc,d7.w),d5
000019FC D245                       		add.w	d5,d1		; combine upper bits with lower bits
000019FE                            ; loc_1844:
000019FE                            @maskvalue:
000019FE 300D                       		move.w	a5,d0		; get length in bits of inline copy value
00001A00 D040                       		add.w	d0,d0
00001A02 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; mask value appropriately
00001A06 D243                       		add.w	d3,d1		; add starting art tile
00001A08 1A18                       		move.b	(a0)+,d5
00001A0A E14D                       		lsl.w	#8,d5
00001A0C 1A18                       		move.b	(a0)+,d5	; get next word
00001A0E 4E75                       		rts	
00001A10                            ; ===========================================================================
00001A10                            ; loc_1856:
00001A10                            @enoughbits:
00001A10 6700                       		beq.s	@justenough	; if the word has been exactly exhausted, branch
00001A12 EE69                       		lsr.w	d7,d1	; get inline copy value
00001A14 300D                       		move.w	a5,d0
00001A16 D040                       		add.w	d0,d0
00001A18 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; and mask it appropriately
00001A1C D243                       		add.w	d3,d1	; add starting art tile
00001A1E 300D                       		move.w	a5,d0
00001A20 6000                       		bra.s	EniDec_FetchByte
00001A22                            ; ===========================================================================
00001A22                            ; loc_1868:
00001A22                            @justenough:
00001A22 7C10                       		moveq	#16,d6	; reset shift value
00001A24 60D8                       		bra.s	@maskvalue
00001A26                            ; ===========================================================================
00001A26                            ; word_186C:
00001A26                            EniDec_Masks:
00001A26 0001 0003 0007 000F        		dc.w	 1,    3,    7,   $F
00001A2E 001F 003F 007F 00FF        		dc.w   $1F,  $3F,  $7F,  $FF
00001A36 01FF 03FF 07FF 0FFF        		dc.w  $1FF, $3FF, $7FF, $FFF
00001A3E 1FFF 3FFF 7FFF FFFF        		dc.w $1FFF,$3FFF,$7FFF,$FFFF
00001A46                            
00001A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A46                            
00001A46                            ; sub_188C:
00001A46                            EniDec_FetchByte:
00001A46 9C40                       		sub.w	d0,d6	; subtract length of current entry from shift value so that next entry is read next time around
00001A48 0C46 0009                  		cmpi.w	#9,d6	; does a new byte need to be read?
00001A4C 6400                       		bhs.s	@locret	; if not, branch
00001A4E 5046                       		addq.w	#8,d6
00001A50 E145                       		asl.w	#8,d5
00001A52 1A18                       		move.b	(a0)+,d5
00001A54                            @locret:
00001A54 4E75                       		rts	
00001A56                            ; End of function EniDec_FetchByte
00001A56                            ; End of function EniDec_FetchByte
00001A56                            		include	"_inc\Kosinski Decompression.asm"
00001A56                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001A56                            ; ---------------------------------------------------------------------------
00001A56                            ; KOSINSKI DECOMPRESSION PROCEDURE
00001A56                            ; (sometimes called KOZINSKI decompression)
00001A56                            ;
00001A56                            ; ARGUMENTS:
00001A56                            ; a0 = source address
00001A56                            ; a1 = destination address
00001A56                            ;
00001A56                            ; For format explanation see http://info.sonicretro.org/Kosinski@compression
00001A56                            ; New faster version by written by vladikcomper, with additional improvements by
00001A56                            ; MarkeyJester and Flamewing
00001A56                            ; Converted to ASM68K by Beta Filter.
00001A56                            ; ---------------------------------------------------------------------------
00001A56 =00000001                  Kos_UseLUT: equ 1
00001A56 =00000003                  Kos_LoopUnroll: equ 3
00001A56 =00000001                  Kos_ExtremeUnrolling: equ 1
00001A56                            
00001A56                            Kos_RunBitStream macro
00001A56                                dbra    d2,@skip\@
00001A56                                moveq   #7,d2                   ; Set repeat count to 8.
00001A56                                move.b  d1,d0                   ; Use the remaining 8 bits.
00001A56                                not.w   d3                      ; Have all 16 bits been used up?
00001A56                                bne.s   @skip\@                   ; Branch if not.
00001A56                                move.b  (a0)+,d0                ; Get desc field low-byte.
00001A56                                move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A56                                if Kos_UseLUT=1
00001A56                                move.b  (a4,d0.w),d0            ; Invert bit order...
00001A56                                move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A56                                endif
00001A56                            @skip\@
00001A56                                endm
00001A56                            
00001A56                            Kos_ReadBit macro
00001A56                                if Kos_UseLUT=1
00001A56                                add.b   d0,d0                   ; Get a bit from the bitstream.
00001A56                                else
00001A56                                lsr.b   #1,d0                   ; Get a bit from the bitstream.
00001A56                                endif
00001A56                                endm
00001A56                            ; ===========================================================================
00001A56                            ; KozDec@193A:
00001A56                            KosDec:
00001A56 7E07                           moveq   #(1<<Kos_LoopUnroll)-1,d7
00001A58 7000                           moveq   #0,d0
00001A5A 7200                           moveq   #0,d1
00001A5C 49FA 0000                      lea KosDec_ByteMap(pc),a4       ; Load LUT pointer.
00001A60 1018                           move.b  (a0)+,d0                ; Get desc field low-byte.
00001A62 1218                           move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A64 1034 0000                      move.b  (a4,d0.w),d0            ; Invert bit order...
00001A68 1234 1000                      move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A6C 7407                           moveq   #7,d2                   ; Set repeat count to 8.
00001A6E 7600                           moveq   #0,d3                   ; d3 will be desc field switcher.
00001A70 6000                           bra.s   @FetchNewCode
00001A72                            ; ---------------------------------------------------------------------------
00001A72                            @FetchCodeLoop:
00001A72                                ; Code 1 (Uncompressed byte).
00001A8A 12D8                           move.b  (a0)+,(a1)+
00001A8C                            
00001A8C                            @FetchNewCode:
00001A8E 65E2                           bcs.s   @FetchCodeLoop          ; If code = 1, branch.
00001A90                            
00001A90                                ; Codes 00 and 01.
00001A90 7AFF                           moveq   #-1,d5
00001A92 4BD1                           lea (a1),a5
00001AAE 6500 0000                      bcs.w   @Code_01
00001AB2                            
00001AB2                                ; Code 00 (Dictionary ref. short).
00001ACC 6500                           bcs.s   @Copy45
00001AE8 6500                           bcs.s   @Copy3
00001B02 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B04 DAC5                           adda.w  d5,a5
00001B06 12DD                           move.b  (a5)+,(a1)+
00001B08 12DD                           move.b  (a5)+,(a1)+
00001B0A 6080                           bra.s   @FetchNewCode
00001B0C                            ; ---------------------------------------------------------------------------
00001B0C                            @Copy3:
00001B24 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B26 DAC5                           adda.w  d5,a5
00001B28 12DD                           move.b  (a5)+,(a1)+
00001B2A 12DD                           move.b  (a5)+,(a1)+
00001B2C 12DD                           move.b  (a5)+,(a1)+
00001B2E 6000 FF5C                      bra.w   @FetchNewCode
00001B32                            ; ---------------------------------------------------------------------------
00001B32                            @Copy45:
00001B4C 6500                           bcs.s   @Copy5
00001B66 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B68 DAC5                           adda.w  d5,a5
00001B6A 12DD                           move.b  (a5)+,(a1)+
00001B6C 12DD                           move.b  (a5)+,(a1)+
00001B6E 12DD                           move.b  (a5)+,(a1)+
00001B70 12DD                           move.b  (a5)+,(a1)+
00001B72 6000 FF18                      bra.w   @FetchNewCode
00001B76                            ; ---------------------------------------------------------------------------
00001B76                            @Copy5:
00001B8E 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B90 DAC5                           adda.w  d5,a5
00001B92 12DD                           move.b  (a5)+,(a1)+
00001B94 12DD                           move.b  (a5)+,(a1)+
00001B96 12DD                           move.b  (a5)+,(a1)+
00001B98 12DD                           move.b  (a5)+,(a1)+
00001B9A 12DD                           move.b  (a5)+,(a1)+
00001B9C 6000 FEEE                      bra.w   @FetchNewCode
00001BA0                            ; ---------------------------------------------------------------------------
00001BA0                            ; ---------------------------------------------------------------------------
00001BA0                            @Code_01:
00001BA0 7800                           moveq   #0,d4                   ; d4 will contain copy count.
00001BA2                                ; Code 01 (Dictionary ref. long / special).
00001BBA 1C18                           move.b  (a0)+,d6                ; d6 = %LLLLLLLL.
00001BBC 1818                           move.b  (a0)+,d4                ; d4 = %HHHHHCCC.
00001BBE 1A04                           move.b  d4,d5                   ; d5 = %11111111 HHHHHCCC.
00001BC0 EB4D                           lsl.w   #5,d5                   ; d5 = %111HHHHH CCC00000.
00001BC2 1A06                           move.b  d6,d5                   ; d5 = %111HHHHH LLLLLLLL.
00001BC4 C847                           and.w   d7,d4                   ; d4 = %00000CCC.
00001BC6 6600                           bne.s   @StreamCopy             ; if CCC=0, branch.
00001BC8                            
00001BC8                                ; special mode (extended counter)
00001BC8 1818                           move.b  (a0)+,d4                ; Read cnt
00001BCA 6700                           beq.s   @Quit                   ; If cnt=0, quit decompression.
00001BCC 5304                           subq.b  #1,d4
00001BCE 6700 FEBC                      beq.w   @FetchNewCode           ; If cnt=1, fetch a new code.
00001BD2                            
00001BD2 DAC5                           adda.w  d5,a5
00001BD4 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001BD6 3C04                           move.w  d4,d6
00001BD8 4646                           not.w   d6
00001BDA CC47                           and.w   d7,d6
00001BDC DC46                           add.w   d6,d6
00001BDE E64C                           lsr.w   #Kos_LoopUnroll,d4
00001BE0 4EFB 6000                      jmp @largecopy(pc,d6.w)
00001BE4                            ; ---------------------------------------------------------------------------
00001BE4                            @largecopy:
00001BE4                                rept (1<<Kos_LoopUnroll)
00001BE4                                move.b  (a5)+,(a1)+
00001BE4 12DD 12DD 12DD 12DD 12DD+      endr
00001BF4 51CC FFEE                      dbra    d4,@largecopy
00001BF8 6000 FE92                      bra.w   @FetchNewCode
00001BFC                            ; ---------------------------------------------------------------------------
00001BFC                            @StreamCopy:
00001BFC DAC5                           adda.w  d5,a5
00001BFE 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001C00 BF44                           eor.w   d7,d4
00001C02 D844                           add.w   d4,d4
00001C04 4EFB 4000                      jmp @mediumcopy(pc,d4.w)
00001C08                            ; ---------------------------------------------------------------------------
00001C08                            @mediumcopy:
00001C08                                rept 8
00001C08                                move.b  (a5)+,(a1)+
00001C08 12DD 12DD 12DD 12DD 12DD+      endr
00001C18 6000 FE72                      bra.w   @FetchNewCode
00001C1C                            ; ---------------------------------------------------------------------------
00001C1C                            @Quit:
00001C1C 4E75                           rts                             ; End of function KosDec.
00001C1E                            ; ===========================================================================
00001C1E                            KosDec_ByteMap:
00001C1E 0080 40C0 20A0 60E0 1090+      dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
00001C2E 0888 48C8 28A8 68E8 1898+      dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
00001C3E 0484 44C4 24A4 64E4 1494+      dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
00001C4E 0C8C 4CCC 2CAC 6CEC 1C9C+      dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
00001C5E 0282 42C2 22A2 62E2 1292+      dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
00001C6E 0A8A 4ACA 2AAA 6AEA 1A9A+      dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
00001C7E 0686 46C6 26A6 66E6 1696+      dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
00001C8E 0E8E 4ECE 2EAE 6EEE 1E9E+      dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
00001C9E 0181 41C1 21A1 61E1 1191+      dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
00001CAE 0989 49C9 29A9 69E9 1999+      dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00001CBE 0585 45C5 25A5 65E5 1595+      dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00001CCE 0D8D 4DCD 2DAD 6DED 1D9D+      dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00001CDE 0383 43C3 23A3 63E3 1393+      dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00001CEE 0B8B 4BCB 2BAB 6BEB 1B9B+      dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00001CFE 0787 47C7 27A7 67E7 1797+      dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00001D0E 0F8F 4FCF 2FAF 6FEF 1F9F+      dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00001D1E                            ; ===========================================================================
00001D1E                            ; ===========================================================================
00001D1E                            
00001D1E                            		include	"_inc\PaletteCycle.asm"
00001D1E                            ; ---------------------------------------------------------------------------
00001D1E                            ; Palette cycling routine loading subroutine
00001D1E                            ; ---------------------------------------------------------------------------
00001D1E                            
00001D1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D1E                            
00001D1E                            
00001D1E                            PaletteCycle:
00001D1E 6100 0000                  		bsr.w	PalCycle_SuperSonic	
00001D22 7400                       		moveq	#0,d2
00001D24 7000                       		moveq	#0,d0
00001D26 1038 FE10                  		move.b	(v_zone).w,d0	; get level number
00001D2A D040                       		add.w	d0,d0
00001D2C 303B 0000                  		move.w	PCycle_Index(pc,d0.w),d0
00001D30 4EFB 0000                  		jmp	PCycle_Index(pc,d0.w) ; jump to relevant palette routine
00001D34                            ; End of function PaletteCycle
00001D34                            
00001D34                            ; ===========================================================================
00001D34                            ; ---------------------------------------------------------------------------
00001D34                            ; Palette cycling routines
00001D34                            ; ---------------------------------------------------------------------------
00001D34 0000                       PCycle_Index:	dc.w PCycle_GHZ-PCycle_Index
00001D36 0000                       		dc.w PCycle_LZ-PCycle_Index
00001D38 0000                       		dc.w PCycle_MZ-PCycle_Index
00001D3A 0000                       		dc.w PalCycle_SLZ-PCycle_Index
00001D3C 0000                       		dc.w PalCycle_SYZ-PCycle_Index
00001D3E 0000                       		dc.w PalCycle_SBZ-PCycle_Index
00001D40 0000                       		dc.w PCycle_GHZ-PCycle_Index	; Ending
00001D42                            
00001D42                            
00001D42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D42                            
00001D42                            
00001D42                            PCycle_Title:
00001D42 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001D48 6000                       		bra.s	PCycGHZ_Go
00001D4A                            ; ===========================================================================
00001D4A                            
00001D4A                            PCycle_GHZ:
00001D4A 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001D50                            
00001D50                            PCycGHZ_Go:
00001D50 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D54 6A00                       		bpl.s	PCycGHZ_Skip	; if time remains, branch
00001D56                            
00001D56 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 5 frames
00001D5C 3038 F632                  		move.w	(v_pcyc_num).w,d0 ; get cycle number
00001D60 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D64 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D68 E748                       		lsl.w	#3,d0
00001D6A 43F8 FB50                  		lea	(v_pal_dry+$50).w,a1
00001D6E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D72 22B0 0004                  		move.l	4(a0,d0.w),(a1)	; copy palette data to RAM
00001D76                            
00001D76                            PCycGHZ_Skip:
00001D76 4E75                       		rts	
00001D78                            ; End of function PCycle_GHZ
00001D78                            
00001D78                            
00001D78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D78                            
00001D78                            
00001D78                            PCycle_LZ:
00001D78                            ; Waterfalls
00001D78 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D7C 6A00                       		bpl.s	PCycLZ_Skip1	; if time remains, branch
00001D7E                            
00001D7E 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 2 frames
00001D84 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001D88 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D8C 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D90 E748                       		lsl.w	#3,d0
00001D92 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001D98 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; check if level is SBZ3
00001D9E 6600                       		bne.s	PCycLZ_NotSBZ3
00001DA0 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	palette instead
00001DA6                            
00001DA6                            	PCycLZ_NotSBZ3:
00001DA6 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001DAA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001DAE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001DB2 43F8 FAD6                  		lea	(v_pal_water+$56).w,a1
00001DB6 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001DBA 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001DBE                            
00001DBE                            PCycLZ_Skip1:
00001DBE                            ; Conveyor belts
00001DBE                            		;move.w	(v_framecount).w,d0
00001DBE                            		;andi.w	#7,d0
00001DBE                            		;move.b	PCycLZ_Seq(pc,d0.w),d0 ; get byte from palette sequence
00001DBE                            		;beq.s	PCycLZ_Skip2	; if byte is 0, branch
00001DBE                            		;moveq	#1,d1
00001DBE                            		;tst.b	(f_conveyrev).w	; have conveyor belts been reversed?
00001DBE                            		;beq.s	PCycLZ_NoRev	; if not, branch
00001DBE                            		;neg.w	d1
00001DBE                            
00001DBE                            	;PCycLZ_NoRev:
00001DBE                            		;move.w	(v_pal_buffer).w,d0
00001DBE                            		;andi.w	#3,d0
00001DBE                            		;add.w	d1,d0
00001DBE                            		;cmpi.w	#3,d0
00001DBE                            		;bcs.s	loc_1A0A
00001DBE                            		;move.w	d0,d1
00001DBE                            		;moveq	#0,d0
00001DBE                            		;tst.w	d1
00001DBE                            		;bpl.s	loc_1A0A
00001DBE                            		;moveq	#2,d0
00001DBE                            
00001DBE                            ;loc_1A0A:
00001DBE                            		;move.w	d0,(v_pal_buffer).w
00001DBE                            		;add.w	d0,d0
00001DBE                            		;move.w	d0,d1
00001DBE                            		;add.w	d0,d0
00001DBE                            		;add.w	d1,d0
00001DBE                            		;lea	(Pal_LZCyc2).l,a0
00001DBE                            		;lea	(v_pal_dry+$76).w,a1
00001DBE                            		;move.l	(a0,d0.w),(a1)+
00001DBE                            		;move.w	4(a0,d0.w),(a1)
00001DBE                            		;lea	(Pal_LZCyc3).l,a0
00001DBE                            		;lea	(v_pal_water+$76).w,a1
00001DBE                            		;move.l	(a0,d0.w),(a1)+
00001DBE                            		;move.w	4(a0,d0.w),(a1)
00001DBE                            
00001DBE                            ;PCycLZ_Skip2:
00001DBE 4E75                       		rts	
00001DC0                            ; End of function PCycle_LZ
00001DC0                            
00001DC0                            ; ===========================================================================
00001DC0 0100 0001 0000 0100        PCycLZ_Seq:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001DC8                            ; ===========================================================================
00001DC8                            
00001DC8                            PCycle_MZ:
00001DC8 4E75                       		rts	
00001DCA                            
00001DCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DCA                            
00001DCA                            
00001DCA                            PalCycle_SLZ:
00001DCA 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001DCE 6A00                       		bpl.s	locret_1A80
00001DD0 31FC 0007 F634             		move.w	#7,(v_pcyc_time).w
00001DD6 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001DDA 5240                       		addq.w	#1,d0
00001DDC 0C40 0006                  		cmpi.w	#6,d0
00001DE0 6500                       		bcs.s	loc_1A60
00001DE2 7000                       		moveq	#0,d0
00001DE4                            
00001DE4                            loc_1A60:
00001DE4 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001DE8 3200                       		move.w	d0,d1
00001DEA D241                       		add.w	d1,d1
00001DEC D041                       		add.w	d1,d0
00001DEE D040                       		add.w	d0,d0
00001DF0 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001DF6 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001DFA 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001DFE 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001E04                            
00001E04                            locret_1A80:
00001E04 4E75                       		rts	
00001E06                            ; End of function PalCycle_SLZ
00001E06                            
00001E06                            
00001E06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E06                            
00001E06                            
00001E06                            PalCycle_SYZ:
00001E06 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E0A 6A00                       		bpl.s	locret_1AC6
00001E0C 31FC 0005 F634             		move.w	#5,(v_pcyc_time).w
00001E12 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001E16 5278 F632                  		addq.w	#1,(v_pcyc_num).w
00001E1A 0240 0003                  		andi.w	#3,d0
00001E1E E548                       		lsl.w	#2,d0
00001E20 3200                       		move.w	d0,d1
00001E22 D040                       		add.w	d0,d0
00001E24 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001E2A 43F8 FB6E                  		lea	(v_pal_dry+$6E).w,a1
00001E2E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001E32 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001E36 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001E3C 43F8 FB76                  		lea	(v_pal_dry+$76).w,a1
00001E40 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001E44 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001E4A                            
00001E4A                            locret_1AC6:
00001E4A 4E75                       		rts	
00001E4C                            ; End of function PalCycle_SYZ
00001E4C                            
00001E4C                            
00001E4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E4C                            
00001E4C                            
00001E4C                            PalCycle_SBZ:
00001E4C 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001E52 4A38 FE11                  		tst.b	(v_act).w
00001E56 6700                       		beq.s	loc_1ADA
00001E58 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001E5E                            
00001E5E                            loc_1ADA:
00001E5E 43F8 F650                  		lea	(v_pal_buffer).w,a1
00001E62 321A                       		move.w	(a2)+,d1
00001E64                            
00001E64                            loc_1AE0:
00001E64 5311                       		subq.b	#1,(a1)
00001E66 6B00                       		bmi.s	loc_1AEA
00001E68 5489                       		addq.l	#2,a1
00001E6A 5C8A                       		addq.l	#6,a2
00001E6C 6000                       		bra.s	loc_1B06
00001E6E                            ; ===========================================================================
00001E6E                            
00001E6E                            loc_1AEA:
00001E6E 12DA                       		move.b	(a2)+,(a1)+
00001E70 1011                       		move.b	(a1),d0
00001E72 5200                       		addq.b	#1,d0
00001E74 B01A                       		cmp.b	(a2)+,d0
00001E76 6500                       		bcs.s	loc_1AF6
00001E78 7000                       		moveq	#0,d0
00001E7A                            
00001E7A                            loc_1AF6:
00001E7A 12C0                       		move.b	d0,(a1)+
00001E7C 0240 000F                  		andi.w	#$F,d0
00001E80 D040                       		add.w	d0,d0
00001E82 305A                       		movea.w	(a2)+,a0
00001E84 365A                       		movea.w	(a2)+,a3
00001E86 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001E8A                            
00001E8A                            loc_1B06:
00001E8A 51C9 FFD8                  		dbf	d1,loc_1AE0
00001E8E 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E92 6A00                       		bpl.s	locret_1B64
00001E94 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001E9A 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w
00001EA0 4A38 FE11                  		tst.b	(v_act).w
00001EA4 6700                       		beq.s	loc_1B2E
00001EA6 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001EAC 31FC 0002 F634             		move.w	#2,(v_pcyc_time).w
00001EB2                            
00001EB2                            loc_1B2E:
00001EB2 72FF                       		moveq	#-1,d1
00001EB4 4A38 F7C0                  		tst.b	(f_conveyrev).w
00001EB8 6700                       		beq.s	loc_1B38
00001EBA 4441                       		neg.w	d1
00001EBC                            
00001EBC                            loc_1B38:
00001EBC 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001EC0 0240 0003                  		andi.w	#3,d0
00001EC4 D041                       		add.w	d1,d0
00001EC6 0C40 0003                  		cmpi.w	#3,d0
00001ECA 6500                       		bcs.s	loc_1B52
00001ECC 3200                       		move.w	d0,d1
00001ECE 7000                       		moveq	#0,d0
00001ED0 4A41                       		tst.w	d1
00001ED2 6A00                       		bpl.s	loc_1B52
00001ED4 7002                       		moveq	#2,d0
00001ED6                            
00001ED6                            loc_1B52:
00001ED6 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001EDA D040                       		add.w	d0,d0
00001EDC 43F8 FB58                  		lea	(v_pal_dry+$58).w,a1
00001EE0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001EE4 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001EE8                            
00001EE8                            locret_1B64:
00001EE8 4E75                       		rts	
00001EEA                            ; End of function PalCycle_SBZ
00001EEA                            
00001EEA                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001EEA                            
00001EEA                            ; sub_213E:
00001EEA                            PalCycle_SuperSonic:
00001EEA 7000                       		moveq	#0,d0
00001EEC 1038 F5D8                  		move.b	(Super_Sonic_palette).w,d0
00001EF0 6700                       		beq.s	PalCycle_SuperSonic_return	; rts	; return, if Sonic isn't super
00001EF2 6B00 0000                  		bmi.w	PalCycle_SuperSonic_normal	; branch, if fade-in is done
00001EF6 5300                       		subq.b	#1,d0
00001EF8 6600                       		bne.s	PalCycle_SuperSonic_revert	; branch for values greater than 1
00001EFA                            
00001EFA                            		; fade from Sonic's to Super Sonic's palette
00001EFA                            		; run frame timer
00001EFA 5338 F5DE                  		subq.b	#1,(Palette_timer).w
00001EFE 6A00                       		bpl.s	PalCycle_SuperSonic_return	; rts
00001F00 11FC 0003 F5DE             		move.b	#3,(Palette_timer).w
00001F06                            
00001F06                            		; increment palette frame and update Sonic's palette
00001F06 41F9 0000 0000             		lea	(CyclingPal_SSTransformation).l,a0
00001F0C 3038 F5DC                  		move.w	(Palette_frame).w,d0
00001F10 5078 F5DC                  		addq.w	#8,(Palette_frame).w	; 1 palette entry = 1 word, Sonic uses 4 shades of blue
00001F14 0C78 0030 F5DC             		cmpi.w	#$30,(Palette_frame).w	; has palette cycle reached the 6th frame?
00001F1A 6500                       		blo.s	PalCycle_SuperSonic_palettes			; if not, branch
00001F1C 11FC 00FF F5D8             		move.b	#-1,(Super_Sonic_palette).w	; mark fade-in as done
00001F22 11FC 0000 F7C8             		move.b	#0,($FFFFF7C8).w ; unfreeze Sonic	
00001F28 6000                       		bra.s		PalCycle_SuperSonic_palettes
00001F2A                            
00001F2A                            PalCycle_SuperSonic_return:
00001F2A 4E75                       		rts
00001F2C                            ; ===========================================================================
00001F2C                            ; loc_2188:
00001F2C                            PalCycle_SuperSonic_revert:	; runs the fade in transition backwards
00001F2C                            		; run frame timer
00001F2C 5338 F5DE                  		subq.b	#1,(Palette_timer).w
00001F30 6AF8                       		bpl.s	PalCycle_SuperSonic_return	; rts
00001F32 11FC 0003 F5DE             		move.b	#3,(Palette_timer).w
00001F38                            
00001F38                            		; decrement palette frame and update Sonic's palette
00001F38 41F9 0000 0000             		lea	(CyclingPal_SSTransformation).l,a0
00001F3E 3038 F5DC                  		move.w	(Palette_frame).w,d0
00001F42 5178 F5DC                  		subq.w	#8,(Palette_frame).w	; previous frame
00001F46 6400                       		bcc.s	PalCycle_SuperSonic_palettes			; branch, if it isn't the first frame
00001F48 31FC 0000 F5DC             		move.w	#0,(Palette_frame).w
00001F4E 11FC 0000 F5D8             		move.b	#0,(Super_Sonic_palette).w	; stop palette cycle
00001F54                            
00001F54                            PalCycle_SuperSonic_palettes:
00001F54 43F8 FB04                  		lea	(v_pal_dry+4).w,a1
00001F58 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001F5C 22B0 0004                  		move.l	4(a0,d0.w),(a1)	
00001F60 4E75                       		rts
00001F62                            ; ===========================================================================
00001F62                            ; loc_21E6:
00001F62                            PalCycle_SuperSonic_normal:
00001F62                            		; run frame timer
00001F62 5338 F5DE                  		subq.b	#1,(Palette_timer).w
00001F66 6AC2                       		bpl.s	PalCycle_SuperSonic_return	; rts
00001F68 11FC 0007 F5DE             		move.b	#7,(Palette_timer).w
00001F6E                            
00001F6E                            		; increment palette frame and update Sonic's palette
00001F6E 41F9 0000 0000             		lea	(CyclingPal_SSTransformation).l,a0
00001F74 3038 F5DC                  		move.w	(Palette_frame).w,d0
00001F78 5078 F5DC                  		addq.w	#8,(Palette_frame).w	; next frame
00001F7C 0C78 0078 F5DC             		cmpi.w	#$78,(Palette_frame).w	; is it the last frame?
00001F82 63D0                       		bls.s	PalCycle_SuperSonic_palettes			; if not, branch
00001F84 31FC 0030 F5DC             		move.w	#$30,(Palette_frame).w	; reset frame counter (Super Sonic's normal palette cycle starts at $30. Everything before that is for the palette fade)
00001F8A 60C8                       		bra.s	PalCycle_SuperSonic_palettes
00001F8C 4E75                       		rts
00001F8E                            ; End of function PalCycle_SuperSonic
00001F8E                            
00001F8E                            
00001F8E                            CyclingPal_SSTransformation:	incbin	"palette/Super.bin"
00001F8E                            CyclingPal_SSTransformation:	incbin	"palette/Super.bin"
0000200E                            
0000200E                            Pal_TitleCyc:	incbin	"palette\Cycle - Title Screen Water.bin"
0000202E                            Pal_GHZCyc:	incbin	"palette\Cycle - GHZ.bin"
0000204E                            Pal_LZCyc1:	incbin	"palette\Cycle - LZ Waterfall.bin"
0000206E                            Pal_LZCyc2:	incbin	"palette\Cycle - LZ Conveyor Belt.bin"
00002080                            Pal_LZCyc3:	incbin	"palette\Cycle - LZ Conveyor Belt Underwater.bin"
00002092                            Pal_SBZ3Cyc1:	incbin	"palette\Cycle - SBZ3 Waterfall.bin"
000020FA                            Pal_SLZCyc:	incbin	"palette\Cycle - SLZ.bin"
0000211E                            Pal_SYZCyc1:	incbin	"palette\Cycle - SYZ1.bin"
0000213E                            Pal_SYZCyc2:	incbin	"palette\Cycle - SYZ2.bin"
0000214E                            Pal_SYZCyc1_2:	incbin	"palette\Cycle - SYZ1 Act 2.bin"
0000216E                            Pal_SYZCyc2_2:	incbin	"palette\Cycle - SYZ2 Act 2.bin"
0000217E                            Pal_SYZCyc1_3:	incbin	"palette\Cycle - SYZ1 Act 3.bin"
0000219E                            Pal_SYZCyc2_3:	incbin	"palette\Cycle - SYZ2 Act 3.bin"
000021AE                            
000021AE                            		include	"_inc\SBZ Palette Scripts.asm"
000021AE                            ; ---------------------------------------------------------------------------
000021AE                            ; Scrap Brain Zone palette cycling script
000021AE                            ; ---------------------------------------------------------------------------
000021AE                            
000021AE                            mSBZp:	macro duration,colors,paladdress,ramaddress
000021AE                            	dc.b duration, colors
000021AE                            	dc.w paladdress, ramaddress
000021AE                            	endm
000021AE                            
000021AE                            ; duration in frames, number of colors, palette address, RAM address
000021AE                            
000021AE                            Pal_SBZCycList1:
000021AE 0000                       	dc.w ((end_SBZCycList1-Pal_SBZCycList1-2)/6)-1
000021B0 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
000021B6 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
000021BC 0E08 0000 FB6E             	mSBZp	$E,8,Pal_SBZCyc3,v_pal_dry+$6E
000021C2 0B08 0000 FB70             	mSBZp	$B,8,Pal_SBZCyc5,v_pal_dry+$70
000021C8 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
000021CE 1C10 0000 FB7E             	mSBZp	$1C,$10,Pal_SBZCyc7,v_pal_dry+$7E
000021D4 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
000021DA 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
000021E0 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
000021E6                            end_SBZCycList1:
000021E6                            	even
000021E6                            
000021E6                            Pal_SBZCycList2:
000021E6 0000                       	dc.w ((end_SBZCycList2-Pal_SBZCycList2-2)/6)-1
000021E8 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
000021EE 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
000021F4 0908 0000 FB70             	mSBZp	9,8,Pal_SBZCyc9,v_pal_dry+$70
000021FA 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00002200 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
00002206 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
0000220C 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
00002212                            end_SBZCycList2:
00002212                            	even
00002212                            	even
00002212                            
00002212                            Pal_SBZCyc1:	incbin	"palette\Cycle - SBZ 1.bin"
00002222                            Pal_SBZCyc2:	incbin	"palette\Cycle - SBZ 2.bin"
00002232                            Pal_SBZCyc3:	incbin	"palette\Cycle - SBZ 3.bin"
00002242                            Pal_SBZCyc4:	incbin	"palette\Cycle - SBZ 4.bin"
0000224E                            Pal_SBZCyc5:	incbin	"palette\Cycle - SBZ 5.bin"
0000225E                            Pal_SBZCyc6:	incbin	"palette\Cycle - SBZ 6.bin"
0000226E                            Pal_SBZCyc7:	incbin	"palette\Cycle - SBZ 7.bin"
0000228E                            Pal_SBZCyc8:	incbin	"palette\Cycle - SBZ 8.bin"
00002298                            Pal_SBZCyc9:	incbin	"palette\Cycle - SBZ 9.bin"
000022A8                            Pal_SBZCyc10:	incbin	"palette\Cycle - SBZ 10.bin"
000022B4                            ; ---------------------------------------------------------------------------
000022B4                            ; Subroutine to	fade in from black
000022B4                            ; ---------------------------------------------------------------------------
000022B4                            
000022B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022B4                            
000022B4                            
000022B4                            PaletteFadeIn:
000022B4 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; set start position = 0; size = $40
000022BA                            
000022BA                            PalFadeIn_Alt:				; start position and size are already set
000022BA 7000                       		moveq	#0,d0
000022BC 41F8 FB00                  		lea	(v_pal_dry).w,a0
000022C0 1038 F626                  		move.b	(v_pfade_start).w,d0
000022C4 D0C0                       		adda.w	d0,a0
000022C6 7200                       		moveq	#cBlack,d1
000022C8 1038 F627                  		move.b	(v_pfade_size).w,d0
000022CC                            
000022CC                            	@fill:
000022CC 30C1                       		move.w	d1,(a0)+
000022CE 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with black
000022D2                            
000022D2 383C 0015                  		move.w	#$15,d4
000022D6                            
000022D6                            	@mainloop:
000022D6 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
000022DC 6100 0000                  		bsr.w	WaitForVBla
000022E0 6100                       		bsr.s	FadeIn_FromBlack
000022E2 6100 F4C2                  		bsr.w	RunPLC
000022E6 51CC FFEE                  		dbf	d4,@mainloop
000022EA 4E75                       		rts	
000022EC                            ; End of function PaletteFadeIn
000022EC                            
000022EC                            
000022EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022EC                            
000022EC                            
000022EC                            FadeIn_FromBlack:
000022EC 7000                       		moveq	#0,d0
000022EE 41F8 FB00                  		lea	(v_pal_dry).w,a0
000022F2 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
000022F6 1038 F626                  		move.b	(v_pfade_start).w,d0
000022FA D0C0                       		adda.w	d0,a0
000022FC D2C0                       		adda.w	d0,a1
000022FE 1038 F627                  		move.b	(v_pfade_size).w,d0
00002302                            
00002302                            	@addcolour:
00002302 6100                       		bsr.s	FadeIn_AddColour ; increase colour
00002304 51C8 FFFC                  		dbf	d0,@addcolour	; repeat for size of palette
00002308                            
00002308 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
0000230E 6600                       		bne.s	@exit		; if not, branch
00002310                            
00002310 7000                       		moveq	#0,d0
00002312 41F8 FA80                  		lea	(v_pal_water).w,a0
00002316 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
0000231A 1038 F626                  		move.b	(v_pfade_start).w,d0
0000231E D0C0                       		adda.w	d0,a0
00002320 D2C0                       		adda.w	d0,a1
00002322 1038 F627                  		move.b	(v_pfade_size).w,d0
00002326                            
00002326                            	@addcolour2:
00002326 6100                       		bsr.s	FadeIn_AddColour ; increase colour again
00002328 51C8 FFFC                  		dbf	d0,@addcolour2 ; repeat
0000232C                            
0000232C                            @exit:
0000232C 4E75                       		rts	
0000232E                            ; End of function FadeIn_FromBlack
0000232E                            
0000232E                            
0000232E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000232E                            
0000232E                            
0000232E                            FadeIn_AddColour:
0000232E                            @addblue:
0000232E 3419                       		move.w	(a1)+,d2
00002330 3610                       		move.w	(a0),d3
00002332 B642                       		cmp.w	d2,d3		; is colour already at threshold level?
00002334 6700                       		beq.s	@next		; if yes, branch
00002336 3203                       		move.w	d3,d1
00002338 0641 0200                  		addi.w	#$200,d1	; increase blue	value
0000233C B242                       		cmp.w	d2,d1		; has blue reached threshold level?
0000233E 6200                       		bhi.s	@addgreen	; if yes, branch
00002340 30C1                       		move.w	d1,(a0)+	; update palette
00002342 4E75                       		rts	
00002344                            ; ===========================================================================
00002344                            
00002344                            @addgreen:
00002344 3203                       		move.w	d3,d1
00002346 0641 0020                  		addi.w	#$20,d1		; increase green value
0000234A B242                       		cmp.w	d2,d1
0000234C 6200                       		bhi.s	@addred
0000234E 30C1                       		move.w	d1,(a0)+	; update palette
00002350 4E75                       		rts	
00002352                            ; ===========================================================================
00002352                            
00002352                            @addred:
00002352 5458                       		addq.w	#2,(a0)+	; increase red value
00002354 4E75                       		rts	
00002356                            ; ===========================================================================
00002356                            
00002356                            @next:
00002356 5448                       		addq.w	#2,a0		; next colour
00002358 4E75                       		rts	
0000235A                            ; End of function FadeIn_AddColour
0000235A                            
0000235A                            
0000235A                            ; ---------------------------------------------------------------------------
0000235A                            ; Subroutine to fade out to black
0000235A                            ; ---------------------------------------------------------------------------
0000235A                            
0000235A                            
0000235A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000235A                            
0000235A                            
0000235A                            PaletteFadeOut:
0000235A 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00002360 383C 0015                  		move.w	#$15,d4
00002364                            
00002364                            	@mainloop:
00002364 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
0000236A 6100 0000                  		bsr.w	WaitForVBla
0000236E 6100                       		bsr.s	FadeOut_ToBlack
00002370 6100 F434                  		bsr.w	RunPLC
00002374 51CC FFEE                  		dbf	d4,@mainloop
00002378 4E75                       		rts	
0000237A                            ; End of function PaletteFadeOut
0000237A                            
0000237A                            
0000237A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000237A                            
0000237A                            
0000237A                            FadeOut_ToBlack:
0000237A 7000                       		moveq	#0,d0
0000237C 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002380 1038 F626                  		move.b	(v_pfade_start).w,d0
00002384 D0C0                       		adda.w	d0,a0
00002386 1038 F627                  		move.b	(v_pfade_size).w,d0
0000238A                            
0000238A                            	@decolour:
0000238A 6100                       		bsr.s	FadeOut_DecColour ; decrease colour
0000238C 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
00002390                            
00002390 7000                       		moveq	#0,d0
00002392 41F8 FA80                  		lea	(v_pal_water).w,a0
00002396 1038 F626                  		move.b	(v_pfade_start).w,d0
0000239A D0C0                       		adda.w	d0,a0
0000239C 1038 F627                  		move.b	(v_pfade_size).w,d0
000023A0                            
000023A0                            	@decolour2:
000023A0 6100                       		bsr.s	FadeOut_DecColour
000023A2 51C8 FFFC                  		dbf	d0,@decolour2
000023A6 4E75                       		rts	
000023A8                            ; End of function FadeOut_ToBlack
000023A8                            
000023A8                            
000023A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000023A8                            
000023A8                            
000023A8                            FadeOut_DecColour:
000023A8                            @dered:
000023A8 3410                       		move.w	(a0),d2
000023AA 6700                       		beq.s	@next
000023AC 3202                       		move.w	d2,d1
000023AE 0241 000E                  		andi.w	#$E,d1
000023B2 6700                       		beq.s	@degreen
000023B4 5558                       		subq.w	#2,(a0)+	; decrease red value
000023B6 4E75                       		rts	
000023B8                            ; ===========================================================================
000023B8                            
000023B8                            @degreen:
000023B8 3202                       		move.w	d2,d1
000023BA 0241 00E0                  		andi.w	#$E0,d1
000023BE 6700                       		beq.s	@deblue
000023C0 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000023C4 4E75                       		rts	
000023C6                            ; ===========================================================================
000023C6                            
000023C6                            @deblue:
000023C6 3202                       		move.w	d2,d1
000023C8 0241 0E00                  		andi.w	#$E00,d1
000023CC 6700                       		beq.s	@next
000023CE 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000023D2 4E75                       		rts	
000023D4                            ; ===========================================================================
000023D4                            
000023D4                            @next:
000023D4 5448                       		addq.w	#2,a0
000023D6 4E75                       		rts	
000023D8                            ; End of function FadeOut_DecColour
000023D8                            
000023D8                            ; ---------------------------------------------------------------------------
000023D8                            ; Subroutine to	fade in from white (Special Stage)
000023D8                            ; ---------------------------------------------------------------------------
000023D8                            
000023D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000023D8                            
000023D8                            
000023D8                            PaletteWhiteIn:
000023D8 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
000023DE 7000                       		moveq	#0,d0
000023E0 41F8 FB00                  		lea	(v_pal_dry).w,a0
000023E4 1038 F626                  		move.b	(v_pfade_start).w,d0
000023E8 D0C0                       		adda.w	d0,a0
000023EA 323C 0EEE                  		move.w	#cWhite,d1
000023EE 1038 F627                  		move.b	(v_pfade_size).w,d0
000023F2                            
000023F2                            	@fill:
000023F2 30C1                       		move.w	d1,(a0)+
000023F4 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with white
000023F8                            
000023F8 383C 0015                  		move.w	#$15,d4
000023FC                            
000023FC                            	@mainloop:
000023FC 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002402 6100 0000                  		bsr.w	WaitForVBla
00002406 6100                       		bsr.s	WhiteIn_FromWhite
00002408 6100 F39C                  		bsr.w	RunPLC
0000240C 51CC FFEE                  		dbf	d4,@mainloop
00002410 4E75                       		rts	
00002412                            ; End of function PaletteWhiteIn
00002412                            
00002412                            
00002412                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002412                            
00002412                            
00002412                            WhiteIn_FromWhite:
00002412 7000                       		moveq	#0,d0
00002414 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002418 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
0000241C 1038 F626                  		move.b	(v_pfade_start).w,d0
00002420 D0C0                       		adda.w	d0,a0
00002422 D2C0                       		adda.w	d0,a1
00002424 1038 F627                  		move.b	(v_pfade_size).w,d0
00002428                            
00002428                            	@decolour:
00002428 6100                       		bsr.s	WhiteIn_DecColour ; decrease colour
0000242A 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
0000242E                            
0000242E 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
00002434 6600                       		bne.s	@exit		; if not, branch
00002436 7000                       		moveq	#0,d0
00002438 41F8 FA80                  		lea	(v_pal_water).w,a0
0000243C 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00002440 1038 F626                  		move.b	(v_pfade_start).w,d0
00002444 D0C0                       		adda.w	d0,a0
00002446 D2C0                       		adda.w	d0,a1
00002448 1038 F627                  		move.b	(v_pfade_size).w,d0
0000244C                            
0000244C                            	@decolour2:
0000244C 6100                       		bsr.s	WhiteIn_DecColour
0000244E 51C8 FFFC                  		dbf	d0,@decolour2
00002452                            
00002452                            	@exit:
00002452 4E75                       		rts	
00002454                            ; End of function WhiteIn_FromWhite
00002454                            
00002454                            
00002454                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002454                            
00002454                            
00002454                            WhiteIn_DecColour:
00002454                            @deblue:
00002454 3419                       		move.w	(a1)+,d2
00002456 3610                       		move.w	(a0),d3
00002458 B642                       		cmp.w	d2,d3
0000245A 6700                       		beq.s	@next
0000245C 3203                       		move.w	d3,d1
0000245E 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002462 6500                       		blo.s	@degreen
00002464 B242                       		cmp.w	d2,d1
00002466 6500                       		blo.s	@degreen
00002468 30C1                       		move.w	d1,(a0)+
0000246A 4E75                       		rts	
0000246C                            ; ===========================================================================
0000246C                            
0000246C                            @degreen:
0000246C 3203                       		move.w	d3,d1
0000246E 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002472 6500                       		blo.s	@dered
00002474 B242                       		cmp.w	d2,d1
00002476 6500                       		blo.s	@dered
00002478 30C1                       		move.w	d1,(a0)+
0000247A 4E75                       		rts	
0000247C                            ; ===========================================================================
0000247C                            
0000247C                            @dered:
0000247C 5558                       		subq.w	#2,(a0)+	; decrease red value
0000247E 4E75                       		rts	
00002480                            ; ===========================================================================
00002480                            
00002480                            @next:
00002480 5448                       		addq.w	#2,a0
00002482 4E75                       		rts	
00002484                            ; End of function WhiteIn_DecColour
00002484                            
00002484                            ; ---------------------------------------------------------------------------
00002484                            ; Subroutine to fade to white (Special Stage)
00002484                            ; ---------------------------------------------------------------------------
00002484                            
00002484                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002484                            
00002484                            
00002484                            PaletteWhiteOut:
00002484 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
0000248A 383C 0015                  		move.w	#$15,d4
0000248E                            
0000248E                            	@mainloop:
0000248E 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002494 6100 0000                  		bsr.w	WaitForVBla
00002498 6100                       		bsr.s	WhiteOut_ToWhite
0000249A 6100 F30A                  		bsr.w	RunPLC
0000249E 51CC FFEE                  		dbf	d4,@mainloop
000024A2 4E75                       		rts	
000024A4                            ; End of function PaletteWhiteOut
000024A4                            
000024A4                            
000024A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000024A4                            
000024A4                            
000024A4                            WhiteOut_ToWhite:
000024A4 7000                       		moveq	#0,d0
000024A6 41F8 FB00                  		lea	(v_pal_dry).w,a0
000024AA 1038 F626                  		move.b	(v_pfade_start).w,d0
000024AE D0C0                       		adda.w	d0,a0
000024B0 1038 F627                  		move.b	(v_pfade_size).w,d0
000024B4                            
000024B4                            	@addcolour:
000024B4 6100                       		bsr.s	WhiteOut_AddColour
000024B6 51C8 FFFC                  		dbf	d0,@addcolour
000024BA                            
000024BA 7000                       		moveq	#0,d0
000024BC 41F8 FA80                  		lea	(v_pal_water).w,a0
000024C0 1038 F626                  		move.b	(v_pfade_start).w,d0
000024C4 D0C0                       		adda.w	d0,a0
000024C6 1038 F627                  		move.b	(v_pfade_size).w,d0
000024CA                            
000024CA                            	@addcolour2:
000024CA 6100                       		bsr.s	WhiteOut_AddColour
000024CC 51C8 FFFC                  		dbf	d0,@addcolour2
000024D0 4E75                       		rts	
000024D2                            ; End of function WhiteOut_ToWhite
000024D2                            
000024D2                            
000024D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000024D2                            
000024D2                            
000024D2                            WhiteOut_AddColour:
000024D2                            @addred:
000024D2 3410                       		move.w	(a0),d2
000024D4 0C42 0EEE                  		cmpi.w	#cWhite,d2
000024D8 6700                       		beq.s	@next
000024DA 3202                       		move.w	d2,d1
000024DC 0241 000E                  		andi.w	#$E,d1
000024E0 0C41 000E                  		cmpi.w	#cRed,d1
000024E4 6700                       		beq.s	@addgreen
000024E6 5458                       		addq.w	#2,(a0)+	; increase red value
000024E8 4E75                       		rts	
000024EA                            ; ===========================================================================
000024EA                            
000024EA                            @addgreen:
000024EA 3202                       		move.w	d2,d1
000024EC 0241 00E0                  		andi.w	#$E0,d1
000024F0 0C41 00E0                  		cmpi.w	#cGreen,d1
000024F4 6700                       		beq.s	@addblue
000024F6 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000024FA 4E75                       		rts	
000024FC                            ; ===========================================================================
000024FC                            
000024FC                            @addblue:
000024FC 3202                       		move.w	d2,d1
000024FE 0241 0E00                  		andi.w	#$E00,d1
00002502 0C41 0E00                  		cmpi.w	#cBlue,d1
00002506 6700                       		beq.s	@next
00002508 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
0000250C 4E75                       		rts	
0000250E                            ; ===========================================================================
0000250E                            
0000250E                            @next:
0000250E 5448                       		addq.w	#2,a0
00002510 4E75                       		rts	
00002512                            ; End of function WhiteOut_AddColour
00002512                            
00002512                            ; ---------------------------------------------------------------------------
00002512                            ; Palette cycling routine - Sega logo
00002512                            ; ---------------------------------------------------------------------------
00002512                            
00002512                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002512                            
00002512                            
00002512                            PalCycle_Sega:
00002512 4A38 F635                  		tst.b	(v_pcyc_time+1).w
00002516 6600                       		bne.s	loc_206A
00002518 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
0000251C 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002522 7205                       		moveq	#5,d1
00002524 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002528                            
00002528                            loc_2020:
00002528 6A00                       		bpl.s	loc_202A
0000252A 5448                       		addq.w	#2,a0
0000252C 5341                       		subq.w	#1,d1
0000252E 5440                       		addq.w	#2,d0
00002530 60F6                       		bra.s	loc_2020
00002532                            ; ===========================================================================
00002532                            
00002532                            loc_202A:
00002532 3400                       		move.w	d0,d2
00002534 0242 001E                  		andi.w	#$1E,d2
00002538 6600                       		bne.s	loc_2034
0000253A 5440                       		addq.w	#2,d0
0000253C                            
0000253C                            loc_2034:
0000253C 0C40 0060                  		cmpi.w	#$60,d0
00002540 6400                       		bhs.s	loc_203E
00002542 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002546                            
00002546                            loc_203E:
00002546 5440                       		addq.w	#2,d0
00002548 51C9 FFE8                  		dbf	d1,loc_202A
0000254C                            
0000254C 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002550 5440                       		addq.w	#2,d0
00002552 3400                       		move.w	d0,d2
00002554 0242 001E                  		andi.w	#$1E,d2
00002558 6600                       		bne.s	loc_2054
0000255A 5440                       		addq.w	#2,d0
0000255C                            
0000255C                            loc_2054:
0000255C 0C40 0064                  		cmpi.w	#$64,d0
00002560 6D00                       		blt.s	loc_2062
00002562 31FC 0401 F634             		move.w	#$401,(v_pcyc_time).w
00002568 70F4                       		moveq	#-$C,d0
0000256A                            
0000256A                            loc_2062:
0000256A 31C0 F632                  		move.w	d0,(v_pcyc_num).w
0000256E 7001                       		moveq	#1,d0
00002570 4E75                       		rts	
00002572                            ; ===========================================================================
00002572                            
00002572                            loc_206A:
00002572 5338 F634                  		subq.b	#1,(v_pcyc_time).w
00002576 6A00                       		bpl.s	loc_20BC
00002578 11FC 0004 F634             		move.b	#4,(v_pcyc_time).w
0000257E 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002582 0640 000C                  		addi.w	#$C,d0
00002586 0C40 0030                  		cmpi.w	#$30,d0
0000258A 6500                       		blo.s	loc_2088
0000258C 7000                       		moveq	#0,d0
0000258E 4E75                       		rts	
00002590                            ; ===========================================================================
00002590                            
00002590                            loc_2088:
00002590 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00002594 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000259A 41F0 0000                  		lea	(a0,d0.w),a0
0000259E 43F8 FB04                  		lea	(v_pal_dry+$04).w,a1
000025A2 22D8                       		move.l	(a0)+,(a1)+
000025A4 22D8                       		move.l	(a0)+,(a1)+
000025A6 3298                       		move.w	(a0)+,(a1)
000025A8 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
000025AC 7000                       		moveq	#0,d0
000025AE 722C                       		moveq	#$2C,d1
000025B0                            
000025B0                            loc_20A8:
000025B0 3400                       		move.w	d0,d2
000025B2 0242 001E                  		andi.w	#$1E,d2
000025B6 6600                       		bne.s	loc_20B2
000025B8 5440                       		addq.w	#2,d0
000025BA                            
000025BA                            loc_20B2:
000025BA 3390 0000                  		move.w	(a0),(a1,d0.w)
000025BE 5440                       		addq.w	#2,d0
000025C0 51C9 FFEE                  		dbf	d1,loc_20A8
000025C4                            
000025C4                            loc_20BC:
000025C4 7001                       		moveq	#1,d0
000025C6 4E75                       		rts	
000025C8                            ; End of function PalCycle_Sega
000025C8                            
000025C8                            ; ===========================================================================
000025C8                            
000025C8                            Pal_Sega1:	incbin	"palette\Sega1.bin"
000025D4                            Pal_Sega2:	incbin	"palette\Sega2.bin"
00002604                            
00002604                            ; ---------------------------------------------------------------------------
00002604                            ; Subroutines to load palettes
00002604                            
00002604                            ; input:
00002604                            ;	d0 = index number for palette
00002604                            ; ---------------------------------------------------------------------------
00002604                            
00002604                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002604                            
00002604                            
00002604                            ; ---------------------------------------------------------------------------
00002604                            ; Subroutines to load pallets
00002604                            ; ---------------------------------------------------------------------------
00002604                            
00002604                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002604                            
00002604                            PalLoad1:
00002604 1238 FE11                  		move.b ($FFFFFE11),d1
00002608 43F9 0000 0000             		lea (PalPointers).l,a1
0000260E 0C01 0000                  		cmp.b #0,d1
00002612 6700 0000                  		beq.w PalLoad1_Continue
00002616 43F9 0000 0000             		lea (PalPointers2).l,a1
0000261C 0C01 0001                  		cmp.b #1,d1
00002620 6700 0000                  		beq.w PalLoad1_Continue
00002624 43F9 0000 0000             		lea (PalPointers3).l,a1
0000262A                            
0000262A                            PalLoad1_Continue:
0000262A E748                       		lsl.w #3,d0
0000262C D2C0                       		adda.w d0,a1
0000262E 2459                       		movea.l (a1)+,a2
00002630 3659                       		movea.w (a1)+,a3
00002632 D6FC 0080                  		adda.w #$80,a3
00002636 3E19                       		move.w (a1)+,d7
00002638                            
00002638                            loc_2110:
00002638 26DA                       		move.l (a2)+,(a3)+
0000263A 51CF FFFC                  		dbf d7,loc_2110
0000263E 4E75                       		rts
00002640                             ; End of function PalLoad1
00002640                            
00002640                            
00002640                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002640                            
00002640                            PalLoad2:
00002640 1238 FE11                  		move.b ($FFFFFE11),d1
00002644 43F9 0000 0000             		lea (PalPointers).l,a1
0000264A 0C01 0000                  		cmp.b #0,d1
0000264E 6700 0000                  		beq.w PalLoad2_Continue
00002652 43F9 0000 0000             		lea (PalPointers2).l,a1
00002658 0C01 0001                  		cmp.b #1,d1
0000265C 6700 0000                  		beq.w PalLoad2_Continue
00002660 43F9 0000 0000             		lea (PalPointers3).l,a1
00002666                            
00002666                            
00002666                            PalLoad2_Continue:
00002666 E748                       		lsl.w #3,d0
00002668 D2C0                       		adda.w d0,a1
0000266A 2459                       		movea.l (a1)+,a2
0000266C 3659                       		movea.w (a1)+,a3
0000266E 3E19                       		move.w (a1)+,d7
00002670                            
00002670                            loc_2128:
00002670 26DA                       		move.l (a2)+,(a3)+
00002672 51CF FFFC                  		dbf d7,loc_2128
00002676 4E75                       		rts
00002678                            ; End of function PalLoad2
00002678                            
00002678                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00002678                            
00002678                            
00002678                            PalLoad_Loop: ;Quick load - TIS
00002678                                    
00002678 34D9                               move.w    (a1)+,(a2)+              ;Copy pallete data to RAM
0000267A 51C8 FFFC                          dbf    d0,PalLoad_Loop               ;Loop d0 (length)
0000267E 4E75                               rts
00002680                            
00002680                            ; ---------------------------------------------------------------------------
00002680                            ; Underwater pallet loading subroutine
00002680                            ; ---------------------------------------------------------------------------
00002680                            
00002680                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002680                            
00002680                            PalLoad3_Water:
00002680 1238 FE11                  		move.b ($FFFFFE11),d1
00002684 43F9 0000 0000             		lea (PalPointers).l,a1
0000268A 0C01 0000                  		cmp.b #0,d1
0000268E 6700 0000                  		beq.w PalLoad3_Continue
00002692 43F9 0000 0000             		lea (PalPointers2).l,a1
00002698 0C01 0001                  		cmp.b #1,d1
0000269C 6700 0000                  		beq.w PalLoad3_Continue
000026A0 43F9 0000 0000             		lea (PalPointers3).l,a1
000026A6                            
000026A6                            PalLoad3_Continue:
000026A6 E748                       		lsl.w #3,d0
000026A8 D2C0                       		adda.w d0,a1
000026AA 2459                       		movea.l (a1)+,a2
000026AC 3659                       		movea.w (a1)+,a3
000026AE 96FC 0080                  		suba.w #$80,a3
000026B2 3E19                       		move.w (a1)+,d7
000026B4                            
000026B4                            loc_2144:
000026B4 26DA                       		move.l (a2)+,(a3)+
000026B6 51CF FFFC                  		dbf d7,loc_2144
000026BA 4E75                       		rts
000026BC                            ; End of function PalLoad3_Water
000026BC                            
000026BC                            
000026BC                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000026BC                            
000026BC                            
000026BC                            PalLoad4_Water:
000026BC 1238 FE11                  		move.b ($FFFFFE11),d1
000026C0 43F9 0000 0000             		lea (PalPointers).l,a1
000026C6 0C01 0000                  		cmp.b #0,d1
000026CA 6700 0000                  		beq.w PalLoad4_Continue
000026CE 43F9 0000 0000             		lea (PalPointers2).l,a1
000026D4 0C01 0001                  		cmp.b #1,d1
000026D8 6700 0000                  		beq.w PalLoad4_Continue
000026DC 43F9 0000 0000             		lea (PalPointers3).l,a1
000026E2                            
000026E2                            PalLoad4_Continue:
000026E2 E748                       		lsl.w #3,d0
000026E4 D2C0                       		adda.w d0,a1
000026E6 2459                       		movea.l (a1)+,a2
000026E8 3659                       		movea.w (a1)+,a3
000026EA 96FC 0100                  		suba.w #$100,a3
000026EE 3E19                       		move.w (a1)+,d7
000026F0                            loc_2160:
000026F0 26DA                       		move.l (a2)+,(a3)+
000026F2 51CF FFFC                  		dbf d7,loc_2160
000026F6 4E75                       		rts
000026F8                             ; End of function PalLoad4_Water
000026F8                            
000026F8                            ; ===========================================================================
000026F8                            
000026F8                            		include	"_inc\Palette Pointers.asm"
000026F8                            ; ---------------------------------------------------------------------------
000026F8                            ; Palette pointers
000026F8                            ; ---------------------------------------------------------------------------
000026F8                            
000026F8                            palp:	macro paladdress,ramaddress,colors
000026F8                            	dc.l paladdress
000026F8                            	dc.w ramaddress, (colors>>1)-1
000026F8                            	endm
000026F8                            
000026F8                            PalPointers:
000026F8                            
000026F8                            ; palette address, RAM address, colors
000026F8                            
000026F8 0000 0000 FB00 001F        ptr_Pal_SegaBG:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002700 0000 0000 FB00 001F        ptr_Pal_Title:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002708 0000 0000 FB00 001F        ptr_Pal_LevelSel:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002710 0000 0000 FB00 0007        ptr_Pal_Sonic:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002718                            Pal_Levels:
00002718 0000 0000 FB20 0017        ptr_Pal_GHZ:		palp	Pal_GHZ,v_pal_dry+$20, $30		; 4 - GHZ
00002720 0000 0000 FB20 0017        ptr_Pal_LZ:		palp	Pal_LZ,v_pal_dry+$20,$30		; 5 - LZ
00002728 0000 0000 FB20 0017        ptr_Pal_MZ:		palp	Pal_MZ,v_pal_dry+$20,$30		; 6 - MZ
00002730 0000 0000 FB20 0017        ptr_Pal_SLZ:		palp	Pal_SLZ,v_pal_dry+$20,$30		; 7 - SLZ
00002738 0000 0000 FB20 0017        ptr_Pal_SYZ:		palp	Pal_SYZ,v_pal_dry+$20,$30		; 8 - SYZ
00002740 0000 0000 FB20 0017        ptr_Pal_SBZ1:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002748 0000 0000 FB00 001F        ptr_Pal_Special:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002750 0000 0000 FB00 001F        ptr_Pal_LZWater:	palp	Pal_LZWater,v_pal_dry,$40		; $B (11) - LZ underwater
00002758 0000 0000 FB20 0017        ptr_Pal_SBZ3:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002760 0000 0000 FB00 001F        ptr_Pal_SBZ3Water:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002768 0000 0000 FB20 0017        ptr_Pal_SBZ2:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002770 0000 0000 FB00 0007        ptr_Pal_LZSonWater:	palp	Pal_LZSonWater,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002778 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002780 0000 0000 FB00 001F        ptr_Pal_SSResult:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002788 0000 0000 FB00 000F        ptr_Pal_Continue:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002790 0000 0000 FB00 001F        ptr_Pal_Options:		palp	Pal_Options,v_pal_dry,$40		; $14 (20) - options screen
00002798 0000 0000 FB00 001F        ptr_Pal_Ending2:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
000027A0 0000 0000 FB00 001F        ptr_Pal_Ending:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
000027A8 0000 0000 FB00 0007        ptr_Pal_Sonic2:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (20) - Sonic (Sonic 1)
000027B0 0000 0000 FB00 0007        ptr_Pal_Sonic3:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (21) - Sonic (Beta)
000027B8 0000 0000 FB00 0007        ptr_Pal_Sonic4:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (22) - Sonic (Midnight)
000027C0 0000 0000 FB00 0007        ptr_Pal_Sonic5:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (23) - Sonic (C2)
000027C8 0000 0000 FB00 0007        ptr_Pal_Sonic6:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (24) - Sonic (Crackers)
000027D0 0000 0000 FB00 0007        ptr_Pal_Sonic7:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (25) - Sonic (RHS)
000027D8 0000 0000 FB00 0007        ptr_Pal_Sonic8:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (26) - Sonic (Socket)
000027E0 0000 0000 FB00 0007        ptr_Pal_Sonic9:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (27) - Sonic (Cringe)
000027E8 0000 0000 FB00 0007        ptr_Pal_Sonic10:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
000027F0 0000 0000 FB00 0007        ptr_Pal_Sonic11:		palp	Pal_Sonic11,v_pal_dry,$10		; $1E (29) - Sonic (DeltaWooloo)
000027F8 0000 0000 FB00 0007        ptr_Pal_SonWater2:		palp	Pal_SonWater2,v_pal_dry,$10		; $1F (30) - Sonic Underwater (Sonic 1)
00002800 0000 0000 FB00 0007        ptr_Pal_SonWater3:		palp	Pal_SonWater3,v_pal_dry,$10		; $20 (31) - Sonic Underwater (Beta)
00002808 0000 0000 FB00 0007        ptr_Pal_SonWater4:		palp	Pal_SonWater4,v_pal_dry,$10		; $21 (32) - Sonic Underwater (Midnight)
00002810 0000 0000 FB00 0007        ptr_Pal_SonWater5:		palp	Pal_SonWater5,v_pal_dry,$10		; $22 (33) - Sonic Underwater (C2)
00002818 0000 0000 FB00 0007        ptr_Pal_SonWater6:		palp	Pal_SonWater6,v_pal_dry,$10		; $23 (34) - Sonic Underwater (Crackers)
00002820 0000 0000 FB00 0007        ptr_Pal_SonWater7:		palp	Pal_SonWater7,v_pal_dry,$10		; $24 (35) - Sonic Underwater (RHS)
00002828 0000 0000 FB00 0007        ptr_Pal_SonWater8:		palp	Pal_SonWater8,v_pal_dry,$10		; $25 (36) - Sonic Underwater (Socket)
00002830 0000 0000 FB00 0007        ptr_Pal_SonWater9:		palp	Pal_SonWater9,v_pal_dry,$10		; $26 (37) - Sonic Underwater (Cringe)
00002838 0000 0000 FB00 0007        ptr_Pal_SonWater10:		palp	Pal_SonWater10,v_pal_dry,$10		; $27 (38) - Sonic Underwater (Darker)
00002840 0000 0000 FB00 0007        ptr_Pal_SonWater11:		palp	Pal_SonWater11,v_pal_dry,$10		; $28 (39) - Sonic Underwater (Darker)
00002848 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $28 (40) - Sonic Underwater (Sonic 1)
00002850 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $29 (41) - Sonic Underwater (Beta)
00002858 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $2A (42) - Sonic Underwater (Midnight)
00002860 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $2B (43) - Sonic Underwater (C2)
00002868 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $2C (44) - Sonic Underwater (Crackers)
00002870 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $2D (45) - Sonic Underwater (RHS)
00002878 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $2E (46) - Sonic Underwater (Socket)
00002880 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $2F (47) - Sonic Underwater (Cringe)
00002888 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $30 (48) - Sonic Underwater (Darker)
00002890 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat11:	palp	Pal_SBZ3SonWat11,v_pal_dry,$10	; $31 (49) - Sonic Underwater (DeltaWooloo)
00002898                            			even
00002898                            
00002898                            PalPointers2:
00002898                            
00002898                            ; palette address, RAM address, colors
00002898                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
00002898 0000 0000 FB00 001F        ptr_Pal_SegaBG_D:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
000028A0 0000 0000 FB00 001F        ptr_Pal_Title_D:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
000028A8 0000 0000 FB00 001F        ptr_Pal_LevelSel_D:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
000028B0 0000 0000 FB00 0007        ptr_Pal_SonicD:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
000028B8                            Pal_Levels_2:
000028B8 0000 0000 FB20 0017        ptr_Pal_GHZ2:		palp	Pal_GHZ2,v_pal_dry+$20, $30		; 4 - GHZ
000028C0 0000 0000 FB20 0017        ptr_Pal_LZ2:		palp	Pal_LZ2,v_pal_dry+$20,$30		; 5 - LZ
000028C8 0000 0000 FB20 0017        ptr_Pal_MZ2:		palp	Pal_MZ2,v_pal_dry+$20,$30		; 6 - MZ
000028D0 0000 0000 FB20 0017        ptr_Pal_SLZ2:		palp	Pal_SLZ2,v_pal_dry+$20,$30		; 7 - SLZ
000028D8 0000 0000 FB20 0017        ptr_Pal_SYZ2:		palp	Pal_SYZ2,v_pal_dry+$20,$30		; 8 - SYZ
000028E0 0000 0000 FB20 0017        ptr_Pal_SBZ1_D:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
000028E8 0000 0000 FB00 001F        ptr_Pal_Special_D:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
000028F0 0000 0000 FB00 001F        ptr_Pal_LZWatr2:	palp	Pal_LZWatr2,v_pal_dry,$40		; $B (11) - LZ underwater
000028F8 0000 0000 FB20 0017        ptr_Pal_SBZ3_D:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002900 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_D:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002908 0000 0000 FB20 0017        ptr_Pal_SBZ2_D:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002910 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002918 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_D:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002920 0000 0000 FB00 001F        ptr_Pal_SSResult_D:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002928 0000 0000 FB00 000F        ptr_Pal_Continue_D:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002930 0000 0000 FB00 001F        ptr_Pal_Options_D:		palp	Pal_Options,v_pal_dry,$40		; $13 (20) - options screen
00002938 0000 0000 FB00 001F        ptr_Pal_Ending2_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
00002940 0000 0000 FB00 001F        ptr_Pal_Ending_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
00002948 0000 0000 FB00 0007        ptr_Pal_Sonic2_D:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
00002950 0000 0000 FB00 0007        ptr_Pal_Sonic3_D:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
00002958 0000 0000 FB00 0007        ptr_Pal_Sonic4_D:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
00002960 0000 0000 FB00 0007        ptr_Pal_Sonic5_D:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
00002968 0000 0000 FB00 0007        ptr_Pal_Sonic6_D:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
00002970 0000 0000 FB00 0007        ptr_Pal_Sonic7_D:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
00002978 0000 0000 FB00 0007        ptr_Pal_Sonic8_D:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002980 0000 0000 FB00 0007        ptr_Pal_Sonic9_D:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002988 0000 0000 FB00 0007        ptr_Pal_Sonic10_D:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
00002990 0000 0000 FB00 0007        ptr_Pal_Sonic11_D:		palp	Pal_Sonic11,v_pal_dry,$10		; $1E (29) - Sonic (DeltaWooloo)
00002998 0000 0000 FB00 0007        ptr_Pal_SonWater2_D:		palp	Pal_SonWater2,v_pal_dry,$10		; $1F (30) - Sonic Underwater (Sonic 1)
000029A0 0000 0000 FB00 0007        ptr_Pal_SonWater3_D:		palp	Pal_SonWater3,v_pal_dry,$10		; $20 (31) - Sonic Underwater (Beta)
000029A8 0000 0000 FB00 0007        ptr_Pal_SonWater4_D:		palp	Pal_SonWater4,v_pal_dry,$10		; $21 (32) - Sonic Underwater (Midnight)
000029B0 0000 0000 FB00 0007        ptr_Pal_SonWater5_D:		palp	Pal_SonWater5,v_pal_dry,$10		; $22 (33) - Sonic Underwater (C2)
000029B8 0000 0000 FB00 0007        ptr_Pal_SonWater6_D:		palp	Pal_SonWater6,v_pal_dry,$10		; $23 (34) - Sonic Underwater (Crackers)
000029C0 0000 0000 FB00 0007        ptr_Pal_SonWater7_D:		palp	Pal_SonWater7,v_pal_dry,$10		; $24 (35) - Sonic Underwater (RHS)
000029C8 0000 0000 FB00 0007        ptr_Pal_SonWater8_D:		palp	Pal_SonWater8,v_pal_dry,$10		; $25 (36) - Sonic Underwater (Socket)
000029D0 0000 0000 FB00 0007        ptr_Pal_SonWater9_D:		palp	Pal_SonWater9,v_pal_dry,$10		; $26 (37) - Sonic Underwater (Cringe)
000029D8 0000 0000 FB00 0007        ptr_Pal_SonWater10_D:		palp	Pal_SonWater10,v_pal_dry,$10		; $27 (38) - Sonic Underwater (Darker)
000029E0 0000 0000 FB00 0007        ptr_Pal_SonWater11_D:		palp	Pal_SonWater11,v_pal_dry,$10		; $28 (39) - Sonic Underwater (Darker)
000029E8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2_D:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $28 (40) - Sonic Underwater (Sonic 1)
000029F0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3_D:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $29 (41) - Sonic Underwater (Beta)
000029F8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4_D:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $2A (42) - Sonic Underwater (Midnight)
00002A00 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5_D:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $2B (43) - Sonic Underwater (C2)
00002A08 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6_D:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $2C (44) - Sonic Underwater (Crackers)
00002A10 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7_D:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $2D (45) - Sonic Underwater (RHS)
00002A18 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8_D:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $2E (46) - Sonic Underwater (Socket)
00002A20 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9_D:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $2F (47) - Sonic Underwater (Cringe)
00002A28 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10_D:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $30 (48) - Sonic Underwater (Darker)
00002A30 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat11_D:	palp	Pal_SBZ3SonWat11,v_pal_dry,$10	; $31 (49) - Sonic Underwater (DeltaWooloo)
00002A38                            			even
00002A38                            			
00002A38                            PalPointers3:
00002A38                            			
00002A38                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
00002A38 0000 0000 FB00 001F        ptr_Pal_SegaBG_E:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002A40 0000 0000 FB00 001F        ptr_Pal_Title_E:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002A48 0000 0000 FB00 001F        ptr_Pal_LevelSel_E:		palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002A50 0000 0000 FB00 0007        ptr_Pal_SonicE:			palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002A58                            Pal_Levels_3:
00002A58 0000 0000 FB20 0017        ptr_Pal_GHZ3:		palp	Pal_GHZ3,v_pal_dry+$20, $30		; 4 - GHZ
00002A60 0000 0000 FB20 0017        ptr_Pal_LZ3:		palp	Pal_LZ3,v_pal_dry+$20,$30		; 5 - LZ
00002A68 0000 0000 FB20 0017        ptr_Pal_MZ3:		palp	Pal_MZ3,v_pal_dry+$20,$30		; 6 - MZ
00002A70 0000 0000 FB20 0017        ptr_Pal_SLZ3:		palp	Pal_SLZ3,v_pal_dry+$20,$30		; 7 - SLZ
00002A78 0000 0000 FB20 0017        ptr_Pal_SYZ3:		palp	Pal_SYZ3,v_pal_dry+$20,$30		; 8 - SYZ
00002A80 0000 0000 FB20 0017        ptr_Pal_SBZ1_E:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002A88 0000 0000 FB00 001F        ptr_Pal_Special_E:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002A90 0000 0000 FB00 001F        ptr_Pal_LZWatr3:	palp	Pal_LZWatr3,v_pal_dry,$40		; $B (11) - LZ underwater
00002A98 0000 0000 FB20 0017        ptr_Pal_SBZ3_E:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002AA0 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_E:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002AA8 0000 0000 FB20 0017        ptr_Pal_SBZ2_E:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002AB0 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2E:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002AB8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_E:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002AC0 0000 0000 FB00 001F        ptr_Pal_SSResult_E:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002AC8 0000 0000 FB00 000F        ptr_Pal_Continue_E:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002AD0 0000 0000 FB00 001F        ptr_Pal_Options_E:		palp	Pal_Options,v_pal_dry,$40		; $14 (21) - options screen
00002AD8 0000 0000 FB00 001F        ptr_Pal_Ending2_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
00002AE0 0000 0000 FB00 001F        ptr_Pal_Ending_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
00002AE8 0000 0000 FB00 0007        ptr_Pal_Sonic2_E:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
00002AF0 0000 0000 FB00 0007        ptr_Pal_Sonic3_E:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
00002AF8 0000 0000 FB00 0007        ptr_Pal_Sonic4_E:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
00002B00 0000 0000 FB00 0007        ptr_Pal_Sonic5_E:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
00002B08 0000 0000 FB00 0007        ptr_Pal_Sonic6_E:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
00002B10 0000 0000 FB00 0007        ptr_Pal_Sonic7_E:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
00002B18 0000 0000 FB00 0007        ptr_Pal_Sonic8_E:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002B20 0000 0000 FB00 0007        ptr_Pal_Sonic9_E:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002B28 0000 0000 FB00 0007        ptr_Pal_Sonic10_E:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
00002B30 0000 0000 FB00 0007        ptr_Pal_Sonic11_E:		palp	Pal_Sonic11,v_pal_dry,$10		; $1E (29) - Sonic (DeltaWooloo)
00002B38 0000 0000 FB00 0007        ptr_Pal_SonWater2_E:		palp	Pal_SonWater2,v_pal_dry,$10		; $1F (30) - Sonic Underwater (Sonic 1)
00002B40 0000 0000 FB00 0007        ptr_Pal_SonWater3_E:		palp	Pal_SonWater3,v_pal_dry,$10		; $20 (31) - Sonic Underwater (Beta)
00002B48 0000 0000 FB00 0007        ptr_Pal_SonWater4_E:		palp	Pal_SonWater4,v_pal_dry,$10		; $21 (32) - Sonic Underwater (Midnight)
00002B50 0000 0000 FB00 0007        ptr_Pal_SonWater5_E:		palp	Pal_SonWater5,v_pal_dry,$10		; $22 (33) - Sonic Underwater (C2)
00002B58 0000 0000 FB00 0007        ptr_Pal_SonWater6_E:		palp	Pal_SonWater6,v_pal_dry,$10		; $23 (34) - Sonic Underwater (Crackers)
00002B60 0000 0000 FB00 0007        ptr_Pal_SonWater7_E:		palp	Pal_SonWater7,v_pal_dry,$10		; $24 (35) - Sonic Underwater (RHS)
00002B68 0000 0000 FB00 0007        ptr_Pal_SonWater8_E:		palp	Pal_SonWater8,v_pal_dry,$10		; $25 (36) - Sonic Underwater (Socket)
00002B70 0000 0000 FB00 0007        ptr_Pal_SonWater9_E:		palp	Pal_SonWater9,v_pal_dry,$10		; $26 (37) - Sonic Underwater (Cringe)
00002B78 0000 0000 FB00 0007        ptr_Pal_SonWater10_E:		palp	Pal_SonWater10,v_pal_dry,$10		; $27 (38) - Sonic Underwater (Darker)
00002B80 0000 0000 FB00 0007        ptr_Pal_SonWater11_E:		palp	Pal_SonWater11,v_pal_dry,$10		; $28 (39) - Sonic Underwater (Darker)
00002B88 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2_E:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $28 (40) - Sonic Underwater (Sonic 1)
00002B90 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3_E:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $29 (41) - Sonic Underwater (Beta)
00002B98 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4_E:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $2A (42) - Sonic Underwater (Midnight)
00002BA0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5_E:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $2B (43) - Sonic Underwater (C2)
00002BA8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6_E:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $2C (44) - Sonic Underwater (Crackers)
00002BB0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7_E:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $2D (45) - Sonic Underwater (RHS)
00002BB8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8_E:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $2E (46) - Sonic Underwater (Socket)
00002BC0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9_E:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $2F (47) - Sonic Underwater (Cringe)
00002BC8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10_E:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $30 (48) - Sonic Underwater (Darker)
00002BD0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat11_E:	palp	Pal_SBZ3SonWat11,v_pal_dry,$10	; $31 (49) - Sonic Underwater (DeltaWooloo)
00002BD8                            			even
00002BD8                            
00002BD8                            
00002BD8 =00000000                  palid_SegaBG:		equ (ptr_Pal_SegaBG-PalPointers)/8
00002BD8 =00000001                  palid_Title:		equ (ptr_Pal_Title-PalPointers)/8
00002BD8 =00000002                  palid_LevelSel:		equ (ptr_Pal_LevelSel-PalPointers)/8
00002BD8 =00000003                  palid_Sonic:		equ (ptr_Pal_Sonic-PalPointers)/8
00002BD8 =00000004                  palid_GHZ:		equ (ptr_Pal_GHZ-PalPointers)/8
00002BD8 =00000005                  palid_LZ:		equ (ptr_Pal_LZ-PalPointers)/8
00002BD8 =00000006                  palid_MZ:		equ (ptr_Pal_MZ-PalPointers)/8
00002BD8 =00000007                  palid_SLZ:		equ (ptr_Pal_SLZ-PalPointers)/8
00002BD8 =00000008                  palid_SYZ:		equ (ptr_Pal_SYZ-PalPointers)/8
00002BD8 =00000009                  palid_SBZ1:		equ (ptr_Pal_SBZ1-PalPointers)/8
00002BD8 =0000000A                  palid_Special:		equ (ptr_Pal_Special-PalPointers)/8
00002BD8 =0000000B                  palid_LZWater:		equ (ptr_Pal_LZWater-PalPointers)/8
00002BD8 =0000000C                  palid_SBZ3:		equ (ptr_Pal_SBZ3-PalPointers)/8
00002BD8 =0000000D                  palid_SBZ3Water:	equ (ptr_Pal_SBZ3Water-PalPointers)/8
00002BD8 =0000000E                  palid_SBZ2:		equ (ptr_Pal_SBZ2-PalPointers)/8
00002BD8 =0000000F                  palid_LZSonWater:	equ (ptr_Pal_LZSonWater-PalPointers)/8
00002BD8 =00000010                  palid_SBZ3SonWat:	equ (ptr_Pal_SBZ3SonWat-PalPointers)/8
00002BD8 =00000011                  palid_SSResult:		equ (ptr_Pal_SSResult-PalPointers)/8
00002BD8 =00000012                  palid_Continue:		equ (ptr_Pal_Continue-PalPointers)/8
00002BD8 =00000013                  palid_Options:		equ (ptr_Pal_Options-PalPointers)/8
00002BD8 =00000015                  palid_Ending2:		equ (ptr_Pal_Ending-PalPointers)/8
00002BD8 =00000015                  palid_Ending:		equ (ptr_Pal_Ending-PalPointers)/8
00002BD8 =00000004                  palid_GHZ2:		equ (ptr_Pal_GHZ-PalPointers)/8
00002BD8 =00000005                  palid_LZ2:		equ (ptr_Pal_LZ-PalPointers)/8
00002BD8 =00000006                  palid_MZ2:		equ (ptr_Pal_MZ-PalPointers)/8
00002BD8 =00000007                  palid_SLZ2:		equ (ptr_Pal_SLZ-PalPointers)/8
00002BD8 =00000008                  palid_SYZ2:		equ (ptr_Pal_SYZ-PalPointers)/8
00002BD8 =0000003F                  palid_LZWatr2:		equ (ptr_Pal_LZWatr2-PalPointers)/8
00002BD8 =0000000F                  palid_LZSonWatr2:	equ (ptr_Pal_LZSonWater-PalPointers)/8
00002BD8 =0000006C                  palid_GHZ3:		equ (ptr_Pal_GHZ3-PalPointers)/8
00002BD8 =0000006D                  palid_LZ3:		equ (ptr_Pal_LZ3-PalPointers)/8
00002BD8 =0000006E                  palid_MZ3:		equ (ptr_Pal_MZ3-PalPointers)/8
00002BD8 =0000006F                  palid_SLZ3:		equ (ptr_Pal_SLZ3-PalPointers)/8
00002BD8 =00000070                  palid_SYZ3:		equ (ptr_Pal_SYZ3-PalPointers)/8
00002BD8 =00000073                  palid_LZWatr3:		equ (ptr_Pal_LZWatr3-PalPointers)/8
00002BD8 =0000000F                  palid_LZSonWatr3:	equ (ptr_Pal_LZSonWater-PalPointers)/8
00002BD8 =00000016                  palid_Sonic2:		equ (ptr_Pal_Sonic2-PalPointers)/8
00002BD8 =00000017                  palid_Sonic3:		equ (ptr_Pal_Sonic3-PalPointers)/8
00002BD8 =00000018                  palid_Sonic4:		equ (ptr_Pal_Sonic4-PalPointers)/8
00002BD8 =00000019                  palid_Sonic5:		equ (ptr_Pal_Sonic5-PalPointers)/8
00002BD8 =0000001A                  palid_Sonic6:		equ (ptr_Pal_Sonic6-PalPointers)/8
00002BD8 =0000001B                  palid_Sonic7:		equ (ptr_Pal_Sonic7-PalPointers)/8
00002BD8 =0000001C                  palid_Sonic8:		equ (ptr_Pal_Sonic8-PalPointers)/8
00002BD8 =0000001D                  palid_Sonic9:		equ (ptr_Pal_Sonic9-PalPointers)/8
00002BD8 =0000001E                  palid_Sonic10:		equ (ptr_Pal_Sonic10-PalPointers)/8
00002BD8 =0000001F                  palid_Sonic11:		equ (ptr_Pal_Sonic11-PalPointers)/8
00002BD8 =00000020                  palid_SonWater2:		equ (ptr_Pal_SonWater2-PalPointers)/8
00002BD8 =00000021                  palid_SonWater3:		equ (ptr_Pal_SonWater3-PalPointers)/8
00002BD8 =00000022                  palid_SonWater4:		equ (ptr_Pal_SonWater4-PalPointers)/8
00002BD8 =00000023                  palid_SonWater5:		equ (ptr_Pal_SonWater5-PalPointers)/8
00002BD8 =00000024                  palid_SonWater6:		equ (ptr_Pal_SonWater6-PalPointers)/8
00002BD8 =00000025                  palid_SonWater7:		equ (ptr_Pal_SonWater7-PalPointers)/8
00002BD8 =00000026                  palid_SonWater8:		equ (ptr_Pal_SonWater8-PalPointers)/8
00002BD8 =00000027                  palid_SonWater9:		equ (ptr_Pal_SonWater9-PalPointers)/8
00002BD8 =00000028                  palid_SonWater10:		equ (ptr_Pal_SonWater10-PalPointers)/8
00002BD8 =00000029                  palid_SonWater11:		equ (ptr_Pal_SonWater11-PalPointers)/8
00002BD8 =0000002A                  palid_SBZ3SonWat2:		equ (ptr_Pal_SBZ3SonWat2-PalPointers)/8
00002BD8 =0000002B                  palid_SBZ3SonWat3:		equ (ptr_Pal_SBZ3SonWat3-PalPointers)/8
00002BD8 =0000002C                  palid_SBZ3SonWat4:		equ (ptr_Pal_SBZ3SonWat4-PalPointers)/8
00002BD8 =0000002D                  palid_SBZ3SonWat5:		equ (ptr_Pal_SBZ3SonWat5-PalPointers)/8
00002BD8 =0000002E                  palid_SBZ3SonWat6:		equ (ptr_Pal_SBZ3SonWat6-PalPointers)/8
00002BD8 =0000002F                  palid_SBZ3SonWat7:		equ (ptr_Pal_SBZ3SonWat7-PalPointers)/8
00002BD8 =00000030                  palid_SBZ3SonWat8:		equ (ptr_Pal_SBZ3SonWat8-PalPointers)/8
00002BD8 =00000031                  palid_SBZ3SonWat9:		equ (ptr_Pal_SBZ3SonWat9-PalPointers)/8
00002BD8 =00000032                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
00002BD8 =00000033                  palid_SBZ3SonWat11:		equ (ptr_Pal_SBZ3SonWat11-PalPointers)/8
00002BD8 =00000033                  palid_SBZ3SonWat11:		equ (ptr_Pal_SBZ3SonWat11-PalPointers)/8
00002BD8                            		
00002BD8                            		;include	"_inc\Palette Pointers2.asm"
00002BD8                            		
00002BD8                            		;include	"_inc\Palette Pointers3.asm"
00002BD8                            		
00002BD8                            
00002BD8                            ; ---------------------------------------------------------------------------
00002BD8                            ; Palette data
00002BD8                            ; ---------------------------------------------------------------------------
00002BD8                            Pal_SegaBG:	incbin	"palette\Sega Background.bin"
00002C58                            Pal_Title:	incbin	"palette\Title Screen.bin"
00002CD8                            Pal_LevelSel:	incbin	"palette\Level Select.bin"
00002D58                            Pal_Sonic:	incbin	"palette\Sonic Pal\01 Default.bin"
00002D78                            Pal_GHZ:	incbin	"palette\Green Hill Zone.bin"
00002DD8                            Pal_GHZ2:	incbin	"palette\Green Hill Zone2.bin"
00002E38                            Pal_GHZ3:	incbin	"palette\Green Hill Zone3.bin"
00002E98                            Pal_LZ:		incbin	"palette\Labyrinth Zone.bin"
00002EF8                            Pal_LZ2:	incbin	"palette\Labyrinth Zone2.bin"
00002F58                            Pal_LZ3:	incbin	"palette\Labyrinth Zone3.bin"
00002FB8                            Pal_LZWater:	incbin	"palette\Labyrinth Zone Underwater.bin"
00003038                            Pal_LZWatr2:	incbin	"palette\Labyrinth Zone Underwater2.bin"
000030B8                            Pal_LZWatr3:	incbin	"palette\Labyrinth Zone Underwater3.bin"
00003138                            Pal_MZ:		incbin	"palette\Marble Zone.bin"
00003198                            Pal_MZ2:	incbin	"palette\Marble Zone2.bin"
000031F8                            Pal_MZ3:	incbin	"palette\Marble Zone3.bin"
00003258                            Pal_SLZ:	incbin	"palette\Star Light Zone.bin"
000032B8                            Pal_SLZ2:	incbin	"palette\Star Light Zone2.bin"
00003318                            Pal_SLZ3:	incbin	"palette\Star Light Zone3.bin"
00003378                            Pal_SYZ:	incbin	"palette\Spring Yard Zone.bin"
000033D8                            Pal_SYZ2:	incbin	"palette\Spring Yard Zone2.bin"
00003438                            Pal_SYZ3:	incbin	"palette\Spring Yard Zone3.bin"
00003498                            Pal_SBZ1:	incbin	"palette\SBZ Act 1.bin"
000034F8                            Pal_SBZ2:	incbin	"palette\SBZ Act 2.bin"
00003558                            Pal_Special:	incbin	"palette\Special Stage.bin"
000035D8                            Pal_SBZ3:	incbin	"palette\SBZ Act 3.bin"
00003638                            Pal_SBZ3Water:	incbin	"palette\SBZ Act 3 Underwater.bin"
000036B8                            Pal_LZSonWater:	incbin	"palette\Sonic - LZ Underwater.bin"
000036D8                            Pal_LZSonWatr2:	incbin	"palette\Sonic - LZ2 Underwater.bin"
000036F8                            Pal_SBZ3SonWat:	incbin	"palette\Sonic - SBZ3 Underwater.bin"
00003718                            Pal_SSResult:	incbin	"palette\Special Stage Results.bin"
00003798                            Pal_Continue:	incbin	"palette\Special Stage Continue Bonus.bin"
000037D8                            Pal_Ending:	incbin	"palette\Ending.bin"
00003858                            Pal_Options:	incbin	"palette\Options.bin"
000038D8                            Pal_Sonic2:	incbin	"palette\Sonic Pal\02 Sonic 1.bin"
000038F8                            Pal_Sonic3:	incbin	"palette\Sonic Pal\03 Beta.bin"
00003918                            Pal_Sonic4:	incbin	"palette\Sonic Pal\04 Midnight.bin"
00003938                            Pal_Sonic5:	incbin	"palette\Sonic Pal\05 C2.bin"
00003958                            Pal_Sonic6:	incbin	"palette\Sonic Pal\06 Clacker.bin"
00003978                            Pal_Sonic7:	incbin	"palette\Sonic Pal\07 Red Hot.bin"
00003998                            Pal_Sonic8:	incbin	"palette\Sonic Pal\08 Socket.bin"
000039B8                            Pal_Sonic9:	incbin	"palette\Sonic Pal\09 Cringe.bin"
000039D8                            Pal_Sonic10:	incbin	"palette\Sonic Pal\10 Dark.bin"
000039F8                            Pal_Sonic11:	incbin	"palette\Sonic Pal\11 DeltaWooloo.bin"
00003A18                            Pal_SonWater2:	incbin	"palette\Sonic Pal\02 Sonic 1 Underwater.bin"
00003A38                            Pal_SonWater3:	incbin	"palette\Sonic Pal\03 Beta Underwater.bin"
00003A58                            Pal_SonWater4:	incbin	"palette\Sonic Pal\04 Midnight Underwater.bin"
00003A78                            Pal_SonWater5:	incbin	"palette\Sonic Pal\05 C2 Underwater.bin"
00003A98                            Pal_SonWater6:	incbin	"palette\Sonic Pal\06 Clacker Underwater.bin"
00003AB8                            Pal_SonWater7:	incbin	"palette\Sonic Pal\07 Red Hot Underwater.bin"
00003AD8                            Pal_SonWater8:	incbin	"palette\Sonic Pal\08 Socket Underwater.bin"
00003AF8                            Pal_SonWater9:	incbin	"palette\Sonic Pal\09 Cringe Underwater.bin"
00003B18                            Pal_SonWater10:	incbin	"palette\Sonic Pal\10 Dark Underwater.bin"
00003B38                            Pal_SonWater11:	incbin	"palette\Sonic Pal\11 DeltaWooloo Underwater.bin"
00003B58                            Pal_SBZ3SonWat2:	incbin	"palette\Sonic Pal\02 Sonic 1 SBZ3.bin"
00003B78                            Pal_SBZ3SonWat3:	incbin	"palette\Sonic Pal\03 Beta SBZ3.bin"
00003B98                            Pal_SBZ3SonWat4:	incbin	"palette\Sonic Pal\04 Midnight SBZ3.bin"
00003BB8                            Pal_SBZ3SonWat5:	incbin	"palette\Sonic Pal\05 C2 SBZ3.bin"
00003BD8                            Pal_SBZ3SonWat6:	incbin	"palette\Sonic Pal\06 Clacker SBZ3.bin"
00003BF8                            Pal_SBZ3SonWat7:	incbin	"palette\Sonic Pal\07 Red Hot SBZ3.bin"
00003C18                            Pal_SBZ3SonWat8:	incbin	"palette\Sonic Pal\08 Socket SBZ3.bin"
00003C38                            Pal_SBZ3SonWat9:	incbin	"palette\Sonic Pal\09 Cringe SBZ3.bin"
00003C58                            Pal_SBZ3SonWat10:	incbin	"palette\Sonic Pal\10 Dark SBZ3.bin"
00003C78                            Pal_SBZ3SonWat11:	incbin	"palette\Sonic Pal\11 DeltaWooloo SBZ3.bin"
00003C98                            ; ---------------------------------------------------------------------------
00003C98                            ; Subroutine to	wait for VBlank routines to complete
00003C98                            ; ---------------------------------------------------------------------------
00003C98                            
00003C98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003C98                            
00003C98                            
00003C98                            WaitForVBla:
00003C98 46FC 2300                  		enable_ints
00003C9C                            
00003C9C                            	@wait:
00003C9C 4A38 F62A                  		tst.b	(v_vbla_routine).w ; has VBlank routine finished?
00003CA0 66FA                       		bne.s	@wait		; if not, branch
00003CA2 4E75                       		rts	
00003CA4                            ; End of function WaitForVBla
00003CA4                            
00003CA4                            		include	"_incObj\sub RandomNumber.asm"
00003CA4                            ; ---------------------------------------------------------------------------
00003CA4                            ; Subroutine to	generate a pseudo-random number	in d0
00003CA4                            ; ---------------------------------------------------------------------------
00003CA4                            
00003CA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003CA4                            
00003CA4                            
00003CA4                            RandomNumber:
00003CA4 2238 F636                  		move.l	(v_random).w,d1
00003CA8 6600                       		bne.s	@scramble	; if d1 is not 0, branch
00003CAA 223C 2A6D 365A             		move.l	#$2A6D365A,d1	; if d1 is 0, use seed number
00003CB0                            
00003CB0                            	@scramble:
00003CB0 2001                       		move.l	d1,d0
00003CB2 E581                       		asl.l	#2,d1
00003CB4 D280                       		add.l	d0,d1
00003CB6 E781                       		asl.l	#3,d1
00003CB8 D280                       		add.l	d0,d1
00003CBA 3001                       		move.w	d1,d0
00003CBC 4841                       		swap	d1
00003CBE D041                       		add.w	d1,d0
00003CC0 3200                       		move.w	d0,d1
00003CC2 4841                       		swap	d1
00003CC4 21C1 F636                  		move.l	d1,(v_random).w
00003CC8 4E75                       		rts	
00003CC8 4E75                       		rts	
00003CCA                            		include	"_incObj\sub CalcSine.asm"
00003CCA                            ; ---------------------------------------------------------------------------
00003CCA                            ; Subroutine calculate a sine
00003CCA                            
00003CCA                            ; input:
00003CCA                            ;	d0 = angle
00003CCA                            
00003CCA                            ; output:
00003CCA                            ;	d0 = sine
00003CCA                            ;	d1 = cosine
00003CCA                            ; ---------------------------------------------------------------------------
00003CCA                            
00003CCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003CCA                            
00003CCA                            
00003CCA                            CalcSine:
00003CCA 0240 00FF                          andi.w  #$FF,d0
00003CCE 5040                               addq.w  #8,d0
00003CD0 D040                               add.w   d0,d0
00003CD2 323B 0000                          move.w  Sine_Data+($40*2)-16(pc,d0.w),d1
00003CD6 303B 0000                          move.w  Sine_Data-16(pc,d0.w),d0
00003CDA 4E75                               rts
00003CDC                            ; End of function CalcSine
00003CDC                            
00003CDC                            ; ===========================================================================
00003CDC                            
00003CDC                            Sine_Data:	incbin	"misc\sinewave.bin"	; values for a 360° sine wave
00003F5C                            
00003F5C                            ; ===========================================================================
00003F5C                            ; ===========================================================================
00003F5C                            		include	"_incObj\sub CalcAngle.asm"
00003F5C                            ; ---------------------------------------------------------------------------
00003F5C                            ; Subroutine calculate an angle
00003F5C                            
00003F5C                            ; input:
00003F5C                            ;	d1 = x-axis distance
00003F5C                            ;	d2 = y-axis distance
00003F5C                            
00003F5C                            ; output:
00003F5C                            ;	d0 = angle
00003F5C                            ; ---------------------------------------------------------------------------
00003F5C                            
00003F5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F5C                            
00003F5C                            
00003F5C                            CalcAngle:
00003F5C 48E7 1800                  		movem.l	d3-d4,-(sp)
00003F60 7600                       		moveq	#0,d3
00003F62 7800                       		moveq	#0,d4
00003F64 3601                       		move.w	d1,d3
00003F66 3802                       		move.w	d2,d4
00003F68 8843                       		or.w	d3,d4
00003F6A 6700                       		beq.s	loc_2D04
00003F6C 3802                       		move.w	d2,d4
00003F6E 4A43                       		tst.w	d3
00003F70 6A00 0000                  		bpl.w	loc_2CC2
00003F74 4443                       		neg.w	d3
00003F76                            
00003F76                            loc_2CC2:
00003F76 4A44                       		tst.w	d4
00003F78 6A00 0000                  		bpl.w	loc_2CCA
00003F7C 4444                       		neg.w	d4
00003F7E                            
00003F7E                            loc_2CCA:
00003F7E B843                       		cmp.w	d3,d4
00003F80 6400 0000                  		bcc.w	loc_2CDC
00003F84 E18C                       		lsl.l	#8,d4
00003F86 88C3                       		divu.w	d3,d4
00003F88 7000                       		moveq	#0,d0
00003F8A 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003F8E 6000                       		bra.s	loc_2CE6
00003F90                            ; ===========================================================================
00003F90                            
00003F90                            loc_2CDC:
00003F90 E18B                       		lsl.l	#8,d3
00003F92 86C4                       		divu.w	d4,d3
00003F94 7040                       		moveq	#$40,d0
00003F96 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003F9A                            
00003F9A                            loc_2CE6:
00003F9A 4A41                       		tst.w	d1
00003F9C 6A00 0000                  		bpl.w	loc_2CF2
00003FA0 4440                       		neg.w	d0
00003FA2 0640 0080                  		addi.w	#$80,d0
00003FA6                            
00003FA6                            loc_2CF2:
00003FA6 4A42                       		tst.w	d2
00003FA8 6A00 0000                  		bpl.w	loc_2CFE
00003FAC 4440                       		neg.w	d0
00003FAE 0640 0100                  		addi.w	#$100,d0
00003FB2                            
00003FB2                            loc_2CFE:
00003FB2 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003FB6 4E75                       		rts	
00003FB8                            ; ===========================================================================
00003FB8                            
00003FB8                            loc_2D04:
00003FB8 303C 0040                  		move.w	#$40,d0
00003FBC 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003FC0 4E75                       		rts	
00003FC2                            ; End of function CalcAngle
00003FC2                            
00003FC2                            ; ===========================================================================
00003FC2                            
00003FC2                            Angle_Data:	incbin	"misc\angles.bin"
000040C4                            
000040C4                            ; ===========================================================================
000040C4                            ; ===========================================================================
000040C4                            
000040C4                            ; ---------------------------------------------------------------------------
000040C4                            ; Sega screen
000040C4                            ; ---------------------------------------------------------------------------
000040C4                            
000040C4                            GM_Sega:
000040CC 6100 D6CA                  		bsr.w	ClearPLC
000040D0 6100 E288                  		bsr.w	PaletteFadeOut
000040D4 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000040DA 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
000040DE 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000040E2 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000040E6 3CBC 8700                  		move.w	#$8700,(a6)	; set background colour (palette entry 0)
000040EA 3CBC 8B00                  		move.w	#$8B00,(a6)	; full-screen vertical scrolling
000040EE 4238 F64E                  		clr.b	(f_wtr_state).w
000040F2 46FC 2700                  		disable_ints
000040F6 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000040FA 0200 00BF                  		andi.b	#$BF,d0
000040FE 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00004104 6100 D0CA                  		bsr.w	ClearScreen
00004112 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00004118 6100 D234                  		bsr.w	NemDec
0000411C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004122 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00004128 303C 0000                  		move.w	#0,d0
0000412C 6100 D7AA                  		bsr.w	EniDec
00004130                            
00004130 43F9 00FF 0000 203C 6510+  		copyTilemap	$FF0000,$E510,$17,7
00004144 43F9 00FF 0180 203C 4000+  		copyTilemap	$FF0180,$C000,$27,$1B
00004158                            
00004158 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
0000415C 6B00                       			bmi.s   @loadpal
0000415E 43F9 00FF 0A40 203C 453A+  			copyTilemap	$FF0A40,$C53A,2,1 ; hide "TM" with a white rectangle
00004172                            
00004172                            	@loadpal:
00004172 7000                       		moveq	#palid_SegaBG,d0
00004174 6100 E4CA                  		bsr.w	PalLoad2	; load Sega logo palette
00004178 47F9 FFFF FB80                     lea        ($FFFFFB80).l,a3
0000417E 7E3F                               moveq    #$3F,d7
00004180                             
00004180                                .loop:
00004180 36FC 0000                          move.w    #cBlack,(a3)+    ; move data to RAM
00004184 51CF FFFA                          dbf        d7,.loop
00004188 6100 E12A                          bsr.w     PaletteFadeIn ; added to allow fade in			
0000418C 31FC FFF6 F632             		move.w	#-$A,(v_pcyc_num).w
00004192 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w
00004198 31FC 0000 F662             		move.w	#0,(v_pal_buffer+$12).w
0000419E 31FC 0000 F660             		move.w	#0,(v_pal_buffer+$10).w
000041A4 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000041A8 0000 0040                  		ori.b	#$40,d0
000041AC 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000041B2                            
000041B2                            Sega_WaitPal:
000041B2 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
000041B8 6100 FADE                  		bsr.w	WaitForVBla
000041BC 6100 E354                  		bsr.w	PalCycle_Sega
000041C0 66F0                       		bne.s	Sega_WaitPal
000041C2                            
000041CA 11FC 0014 F62A             		move.b	#$14,(v_vbla_routine).w
000041D0 6100 FAC6                  		bsr.w	WaitForVBla
000041D4 31FC 001E F614             		move.w	#$1E,(v_demolength).w
000041DA                            
000041DA                            Sega_WaitEnd:
000041DA 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
000041E0 6100 FAB6                  		bsr.w	WaitForVBla
000041E4 4A78 F614                  		tst.w	(v_demolength).w
000041E8 6700                       		beq.s	Sega_GotoTitle
000041EA 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
000041F0 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
000041F2                            
000041F2                            Sega_GotoTitle:
000041F2 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
000041F8 4E75                       		rts	
000041FA                            ; ===========================================================================
000041FA                            
000041FA                            ; ---------------------------------------------------------------------------
000041FA                            ; Title	screen
000041FA                            ; ---------------------------------------------------------------------------
000041FA                            
000041FA                            GM_Title:
00004202 6100 D594                  		bsr.w	ClearPLC
00004206 6100 E152                  		bsr.w	PaletteFadeOut
0000420A 46FC 2700                  		disable_ints
0000420E 6100 D046                  		bsr.w	SoundDriverLoad
00004212 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00004218 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
0000421C 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00004220 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00004224 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00004228 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
0000422C 3CBC 8B03                  		move.w	#$8B03,(a6)
00004230 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (palette line 2, entry 0)
00004234 4238 F64E                  		clr.b	(f_wtr_state).w
00004238 6100 CF96                  		bsr.w	ClearScreen
0000423C                            		;jsr		SHC2022 
0000423C                            
0000423C 43F8 D000                  		lea	(v_objspace).w,a1
00004240 7000                       		moveq	#0,d0
00004242 323C 07FF                  		move.w	#$7FF,d1
00004246                            
00004246                            	Tit_ClrObj1:
00004246 22C0                       		move.l	d0,(a1)+
00004248 51C9 FFFC                  		dbf	d1,Tit_ClrObj1	; fill object space ($D000-$EFFF) with 0
0000424C                            
0000424C 6100 E066                  		bsr.w	PaletteFadeIn
00004250 46FC 2700                  		disable_ints
0000425E 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00004264 6100 D0E8                  		bsr.w	NemDec
00004272 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00004278 6100 D0D4                  		bsr.w	NemDec
00004286 41F9 0000 0000             		lea (Nem_TitleMenu).l,a0 ; Load Menu Text/Characters pattern
0000428C 6100 D0C0                  		bsr.w 	NemDec
00004290 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000429E 4BF9 0000 059E             		lea	(Art_Text).l,a5	; load level select font
000042A4 323C 028F                  		move.w	#$28F,d1
000042A8                            
000042A8                            	Tit_LoadText:
000042A8 3C9D                       		move.w	(a5)+,(a6)
000042AA 51C9 FFFC                  		dbf	d1,Tit_LoadText	; load level select font
000042AE                            
000042AE 11FC 0000 FE30             		move.b	#0,(v_lastlamp).w ; clear lamppost counter
000042B4 31FC 0000 FE08             		move.w	#0,(v_debuguse).w ; disable debug item placement mode
000042BA 31FC 0000 FFF0             		move.w	#0,(f_demo).w	; disable debug mode
000042C0 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w ; unused variable
000042C6 31FC 0000 FE10             		move.w	#(id_GHZ<<8),(v_zone).w	; set level to GHZ (00)
000042CC 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w ; disable palette cycling
000042D2 6100 0000                  		bsr.w	LevelSizeLoad
000042D6 6100 0000                  		bsr.w	DeformLayers
000042DA 43F8 B000                  		lea	(v_16x16).w,a1
000042DE 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load	GHZ 16x16 mappings
000042E4 303C 0000                  		move.w	#0,d0
000042E8 6100 D5EE                  		bsr.w	EniDec
000042EC 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load GHZ 256x256 mappings
000042F2 43F9 00FF 0000             		lea	(v_256x256).l,a1
000042F8 6100 D75C                  		bsr.w	KosDec
000042FC 6100 0000                  		bsr.w	LevelLayoutLoad
00004300 6100 E058                  		bsr.w	PaletteFadeOut
00004304 46FC 2700                  		disable_ints
00004308 6100 CEC6                  		bsr.w	ClearScreen
0000430C 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00004312 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004318 47F8 F708                  		lea	(v_bgscreenposx).w,a3
0000431C 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00004320 343C 6000                  		move.w	#$6000,d2
00004324 6100 0000                  		bsr.w	DrawChunks
00004328 43F9 00FF 0000             		lea	($FF0000).l,a1
0000432E 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00004334 303C 0000                  		move.w	#0,d0
00004338 6100 D59E                  		bsr.w	EniDec
0000433C                            
0000433C 43F9 00FF 0000 203C 4206+  		copyTilemap	$FF0000,$C206,$21,$15
00004350                            
0000435A 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0 ; load title screen patterns
00004360 6100 CFEC                  		bsr.w	NemDec
00004364 7001                       		moveq	#palid_Title,d0	; load title screen palette
00004366 6100 E29C                  		bsr.w	PalLoad1
00004372 11FC 0000 FFFA             		move.b	#0,(f_debugmode).w ; disable debug mode
00004378 31FC 0900 F614             		move.w	#$900,(v_demolength).w ; run title screen for $178 frames
0000437E 43F8 D080                  		lea	(v_objspace+$80).w,a1
00004382 7000                       		moveq	#0,d0
00004384 323C 0007                  		move.w	#7,d1
00004388                            
00004388                            	Tit_ClrObj2:
00004388 22C0                       		move.l	d0,(a1)+
0000438A 51C9 FFFC                  		dbf	d1,Tit_ClrObj2
0000438E                            
0000438E 11FC 0000 D040             		move.b	#id_TitleSonic,(v_objspace+$40).w ; load big Sonic object
00004394 11FC 0000 D080             		move.b	#id_PSBTM,(v_objspace+$80).w ; load "PRESS START BUTTON" object
0000439A 4238 D0A4                  		clr.b	(v_objspace+$80+obRoutine).w ; The 'Mega Games 10' version of Sonic 1 added this line, to fix the 'PRESS START BUTTON' object not appearing
0000439E                            
0000439E 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
000043A2 6A00                       			bpl.s   @isjap		; if yes, branch
000043A4                            
000043A4 11FC 0000 D0C0             		move.b	#id_PSBTM,(v_objspace+$C0).w ; load "TM" object
000043AA 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
000043B0                            	@isjap:
000043B0 11FC 0000 D100             		move.b	#id_PSBTM,(v_objspace+$100).w ; load object which hides part of Sonic
000043B6 11FC 0002 D11A             		move.b	#2,(v_objspace+$100+obFrame).w
000043BC 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000043C2 6100 0000                  		bsr.w	DeformLayers
000043C6 4EB9 0000 0000             		jsr	(BuildSprites).l
000043CC 7000                       		moveq	#plcid_Main,d0
000043CE 6100 D39C                  		bsr.w	NewPLC
000043D2 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w
000043D8 31FC 0000 FFE6             		move.w	#0,(v_title_ccount).w
000043DE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000043E2 0000 0040                  		ori.b	#$40,d0
000043E6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000043EC 6100 DEC6                  		bsr.w	PaletteFadeIn
000043F0                            
000043F0                            Tit_MainLoop:
000043F0 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000043F6 6100 F8A0                  		bsr.w	WaitForVBla
000043FA 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004400 6100 0000                  		bsr.w	DeformLayers
00004404 4EB9 0000 0000             		jsr	(BuildSprites).l
0000440A 6100 D936                  		bsr.w	PCycle_Title
0000440E 6100 D396                  		bsr.w	RunPLC
00004412 3038 D008                  		move.w	(v_objspace+obX).w,d0
00004416 5440                       		addq.w	#2,d0
00004418 31C0 D008                  		move.w	d0,(v_objspace+obX).w ; move Sonic to the right
0000441C 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed $1C00 on x-axis?
00004420 6500                       		blo.s	Tit_ChkRegion	; if not, branch
00004422                            
00004422 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004428 4E75                       		rts	
0000442A                            ; ===========================================================================
0000442A                            
0000442A                            Tit_ChkRegion:
0000442A 4A38 FFF8                  		tst.b	(v_megadrive).w	; check	if the machine is US or	Japanese
0000442E 6A00                       		bpl.s	Tit_RegionJap	; if Japanese, branch
00004430                            
00004430 41F9 0000 0000             		lea	(LevSelCode_US).l,a0 ; load US code
00004436 6000                       		bra.s	Tit_EnterCheat
00004438                            
00004438                            	Tit_RegionJap:
00004438 41F9 0000 0000             		lea	(LevSelCode_J).l,a0 ; load J code
0000443E                            
0000443E                            Tit_EnterCheat:
0000443E 3038 FFE4                  		move.w	(v_title_dcount).w,d0
00004442 D0C0                       		adda.w	d0,a0
00004444 1038 F605                  		move.b	(v_jpadpress1).w,d0 ; get button press
00004448 0200 000F                  		andi.b	#btnDir,d0	; read only UDLR buttons
0000444C B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
0000444E 6600                       		bne.s	Tit_ResetCheat	; if not, branch
00004450 5278 FFE4                  		addq.w	#1,(v_title_dcount).w ; next button press
00004454 4A00                       		tst.b	d0
00004456 6600                       		bne.s	Tit_CountC
00004458 41F8 FFE0                  		lea	(f_levselcheat).w,a0
0000445C 3238 FFE6                  		move.w	(v_title_ccount).w,d1
00004460 E249                       		lsr.w	#1,d1
00004462 0241 0003                  		andi.w	#3,d1
00004466 6700                       		beq.s	Tit_PlayRing
00004468 4A38 FFF8                  		tst.b	(v_megadrive).w
0000446C 6A00                       		bpl.s	Tit_PlayRing
0000446E 7201                       		moveq	#1,d1
00004470 1181 1001                  		move.b	d1,1(a0,d1.w)	; cheat depends on how many times C is pressed
00004474                            
00004474                            	Tit_PlayRing:
00004474 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00004482 6000                       		bra.s	Tit_CountC
00004484                            ; ===========================================================================
00004484                            
00004484                            Tit_ResetCheat:
00004484 4A00                       		tst.b	d0
00004486 6700                       		beq.s	Tit_CountC
00004488 0C78 0009 FFE4             		cmpi.w	#9,(v_title_dcount).w
0000448E 6700                       		beq.s	Tit_CountC
00004490 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w ; reset UDLR counter
00004496                            
00004496                            Tit_CountC:
00004496 1038 F605                  		move.b	(v_jpadpress1).w,d0
0000449A 0200 0020                  		andi.b	#btnC,d0	; is C button pressed?
0000449E 6700                       		beq.s	loc_3230	; if not, branch
000044A0 5278 FFE6                  		addq.w	#1,(v_title_ccount).w ; increment C counter
000044A4                            		
000044A4                            loc_3230:
000044A4 4A78 F614                  		tst.w	(v_demolength).w
000044A8 6700 0000                  		beq.w	GotoDemo
000044AC 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
000044B2 6700 FF3C                  		beq.w	Tit_MainLoop	; if not, branch
000044B6                            
000044B6                            Tit_ChkLevSel:
000044B6 4A38 FFE0                  		tst.b	(f_levselcheat).w ; check if level select code is on
000044BA 6700 0000                  		beq.w	@cont	; if not, play level
000044BE 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; check if A is pressed
000044C4 6700 0000                  		beq.w	@cont	; if not, play level
000044C8 6000 0000                  		bra.w	Tit_LevelSelect
000044CC                            
000044CC                            	@cont:		
000044CC 0C38 0006 D0A4             		cmp.b	#6,($FFFFD0A4).w   ; is Title Menu on
000044D2 6700 FF1C                  		beq.w	Tit_MainLoop         ; if it not was deleted, branch  	
000044D6 7400                       		moveq	#0,d2
000044D8 1438 FFB0                  		move.b	(Title_screen_option).w,d2   ; load the choice
000044DC D442                       		add.w	d2,d2            ; multiply by 2
000044DE 343B 2000                  		move.w	Tit_Menu_Choice(pc,d2.w),d2
000044E2 4EFB 2000                  		jmp   Tit_Menu_Choice(pc,d2.w)   ; jump to the choice code
000044E6                            
000044E6                            ; ===========================================================================
000044E6                            Tit_Menu_Choice:
000044E6 0000                       		dc.w PlayLevel-Tit_Menu_Choice   ; 0
000044E8 0000                       		dc.w Menu_Options-Tit_Menu_Choice  ; 2
000044EA                            ; ===========================================================================
000044EA                            
000044EA                            Menu_Options:
000044EA 11FC 0020 F600             		move.b	#$20,(v_gamemode).w
000044F0 4E75                       		rts
000044F2                            
000044F2                            Tit_LevelSelect:	
000044F2 7002                       		moveq	#palid_LevelSel,d0
000044F4 6100 E14A                  		bsr.w	PalLoad2	; load level select palette
000044F8 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000044FC 7000                       		moveq	#0,d0
000044FE 323C 00DF                  		move.w	#$DF,d1
00004502                            
00004502                            	Tit_ClrScroll1:
00004502 22C0                       		move.l	d0,(a1)+
00004504 51C9 FFFC                  		dbf	d1,Tit_ClrScroll1 ; clear scroll data (in RAM)
00004508                            
00004508 21C0 F616                  		move.l	d0,(v_scrposy_dup).w
0000450C 46FC 2700                  		disable_ints
00004510 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004520 323C 03FF                  		move.w	#$3FF,d1
00004524                            
00004524                            	Tit_ClrScroll2:
00004524 2C80                       		move.l	d0,(a6)
00004526 51C9 FFFC                  		dbf	d1,Tit_ClrScroll2 ; clear scroll data (in VRAM)
0000452A                            
0000452A 6100 0000                  		bsr.w	LevSelTextLoad
0000452E                            
0000452E                            ; ---------------------------------------------------------------------------
0000452E                            ; Level	Select
0000452E                            ; ---------------------------------------------------------------------------
0000452E                            
0000452E                            LevelSelect:
0000452E 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00004534 6100 F762                  		bsr.w	WaitForVBla
00004538 6100 0000                  		bsr.w	LevSelControls
0000453C 6100 D268                  		bsr.w	RunPLC
00004540 4AB8 F680                  		tst.l	(v_plc_buffer).w
00004544 66E8                       		bne.s	LevelSelect
00004546 0238 00F0 F605             		andi.b	#btnABC+btnStart,(v_jpadpress1).w ; is A, B, C, or Start pressed?
0000454C 67E0                       		beq.s	LevelSelect	; if not, branch
0000454E 3038 FF82                  		move.w	(v_levselitem).w,d0
00004552 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00004556 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00004558 3038 FF84                  		move.w	(v_levselsound).w,d0
0000455C 0640 0080                  		addi.w	#$80,d0
00004560                            		;cmpi.w	#$9F,d0		; is sound $9F being played?
00004560                            		;beq.s	LevSel_Ending	; if yes, branch
00004560                            		;cmpi.w	#$9E,d0		; is sound $9E being played?
00004560                            		;beq.s	LevSel_Credits	; if yes, branch
00004560                            
00004560                            LevSel_PlaySnd:
00004560 6100 CD3E                  		bsr.w	PlaySound_Special
00004564 60C8                       		bra.s	LevelSelect
00004566                            ; ===========================================================================
00004566                            
00004566                            LevSel_Ending:
00004566 11FC 0000 F600             		move.b	#id_Ending,(v_gamemode).w ; set screen mode to $18 (Ending)
0000456C 31FC 0600 FE10             		move.w	#(id_EndZ<<8),(v_zone).w ; set level to 0600 (Ending)
00004572 4E75                       		rts	
00004574                            ; ===========================================================================
00004574                            
00004574                            LevSel_Credits:
00004574 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; set screen mode to $1C (Credits)
00004582 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w
00004588 4E75                       		rts	
0000458A                            ; ===========================================================================
0000458A                            
0000458A                            LevSel_Level_SS:
0000458A D040                       		add.w	d0,d0
0000458C 303B 0000                  		move.w	LevSel_Ptrs(pc,d0.w),d0 ; load level number
00004590 6B00 FF9C                  		bmi.w	LevelSelect
00004594 0C40 0700                  		cmpi.w	#id_SS*$100,d0	; check	if level is 0700 (Special Stage)
00004598 6600                       		bne.s	LevSel_Level	; if not, branch
0000459A 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
000045A0 4278 FE10                  		clr.w	(v_zone).w	; clear	level
000045A4 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000045AA 7000                       		moveq	#0,d0
000045AC 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000045B0 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000045B4 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000045B8 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000045C0 4E75                       		rts	
000045C2                            ; ===========================================================================
000045C2                            
000045C2                            LevSel_Level:
000045C2 0240 3FFF                  		andi.w	#$3FFF,d0
000045C6 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
000045CA                            
000045CA                            PlayLevel:
000045CA 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
000045D0 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000045D6 7000                       		moveq	#0,d0
000045D8 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000045DC 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000045E0 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000045E4 11C0 FE16                  		move.b	d0,(v_lastspecial).w ; clear special stage number
000045E8 11C0 FE57                  		move.b	d0,(v_emeralds).w ; clear emeralds
000045EC 21C0 FE58                  		move.l	d0,(v_emldlist).w ; clear emeralds
000045F0 21C0 FE5C                  		move.l	d0,(v_emldlist+4).w ; clear emeralds
000045F4 11FC 0001 FE18             		move.b	#1,(v_continues).w ; set continues to 1
000045FA 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
0000460A 4E75                       		rts	
0000460C                            ; ===========================================================================
0000460C                            ; ---------------------------------------------------------------------------
0000460C                            ; Level	select - level pointers
0000460C                            ; ---------------------------------------------------------------------------
0000460C                            		; correct level order
0000460C 0000                       		dc.b id_GHZ, 0
0000460E 0001                       		dc.b id_GHZ, 1
00004610 0002                       		dc.b id_GHZ, 2
00004612 0200                       		dc.b id_MZ, 0
00004614 0201                       		dc.b id_MZ, 1
00004616 0202                       		dc.b id_MZ, 2
00004618 0400                       		dc.b id_SYZ, 0
0000461A 0401                       		dc.b id_SYZ, 1
0000461C 0402                       		dc.b id_SYZ, 2
0000461E 0100                       		dc.b id_LZ, 0
00004620 0101                       		dc.b id_LZ, 1
00004622 0102                       		dc.b id_LZ, 2
00004624 0300                       		dc.b id_SLZ, 0
00004626 0301                       		dc.b id_SLZ, 1
00004628 0302                       		dc.b id_SLZ, 2
0000462A 0500                       		dc.b id_SBZ, 0
0000462C 0501                       		dc.b id_SBZ, 1
0000462E 0103                       		dc.b id_LZ, 3
00004630 0502                       		dc.b id_SBZ, 2
00004632 0700                       		dc.b id_SS, 0		; Special Stage
00004634 8000                       		dc.w $8000		; Sound Test
00004636                            		even
00004636                            ; ---------------------------------------------------------------------------
00004636                            ; Level	select codes
00004636                            ; ---------------------------------------------------------------------------
00004636 0102 0202 0408 00FF        		dc.b btnUp,btnDn,btnDn,btnDn,btnL,btnR,0,$FF
0000463E                            		even
0000463E                            
0000463E 0102 0408 00FF             LevSelCode_US:	dc.b btnUp,btnDn,btnL,btnR,0,$FF
00004644                            		even
00004644                            ; ===========================================================================
00004644                            
00004644                            ; ---------------------------------------------------------------------------
00004644                            ; Demo mode
00004644                            ; ---------------------------------------------------------------------------
00004644                            
00004644                            GotoDemo:
00004644 31FC 001E F614             		move.w	#$1E,(v_demolength).w
0000464A                            
0000464A                            loc_33B6:
0000464A 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00004650 6100 F646                  		bsr.w	WaitForVBla
00004654 6100 0000                  		bsr.w	DeformLayers
00004658 6100 D6C4                  		bsr.w	PaletteCycle
0000465C 6100 D148                  		bsr.w	RunPLC
00004660 3038 D008                  		move.w	(v_objspace+obX).w,d0
00004664 5440                       		addq.w	#2,d0
00004666 31C0 D008                  		move.w	d0,(v_objspace+obX).w
0000466A 0C40 1C00                  		cmpi.w	#$1C00,d0
0000466E 6500                       		blo.s	loc_33E4
00004670 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
00004676 4E75                       		rts	
00004678                            ; ===========================================================================
00004678                            
00004678                            loc_33E4:
00004678 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
0000467E 6600 FE36                  		bne.w	Tit_ChkLevSel	; if yes, branch
00004682 4A78 F614                  		tst.w	(v_demolength).w
00004686 6600 FFC2                  		bne.w	loc_33B6
00004692 3038 FFF2                  		move.w	(v_demonum).w,d0 ; load	demo number
00004696 0240 0007                  		andi.w	#7,d0
0000469A D040                       		add.w	d0,d0
0000469C 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000046A0 31C0 FE10                  		move.w	d0,(v_zone).w
000046A4 5278 FFF2                  		addq.w	#1,(v_demonum).w ; add 1 to demo number
000046A8 0C78 0004 FFF2             		cmpi.w	#4,(v_demonum).w ; is demo number less than 4?
000046AE 6500                       		blo.s	loc_3422	; if yes, branch
000046B0 31FC 0000 FFF2             		move.w	#0,(v_demonum).w ; reset demo number to	0
000046B6                            
000046B6                            loc_3422:
000046B6 31FC 0001 FFF0             		move.w	#1,(f_demo).w	; turn demo mode on
000046BC 11FC 0000 F600             		move.b	#id_Demo,(v_gamemode).w ; set screen mode to 08 (demo)
000046C2 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000046C6 6600                       		bne.s	Demo_Level	; if not, branch
000046C8 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
000046CE 4278 FE10                  		clr.w	(v_zone).w	; clear	level number
000046D2 4238 FE16                  		clr.b	(v_lastspecial).w ; clear special stage number
000046D6                            
000046D6                            Demo_Level:
000046D6 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000046DC 7000                       		moveq	#0,d0
000046DE 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000046E2 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000046E6 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000046EA 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000046F2 4E75                       		rts	
000046F4                            ; ===========================================================================
000046F4                            ; ---------------------------------------------------------------------------
000046F4                            ; Levels used in demos
000046F4                            ; ---------------------------------------------------------------------------
000046F4                            Demo_Levels:	incbin	"misc\Demo Level Order - Intro.bin"
000046FC                            		even
000046FC                            
000046FC                            ; ---------------------------------------------------------------------------
000046FC                            ; Subroutine to	change what you're selecting in the level select
000046FC                            ; ---------------------------------------------------------------------------
000046FC                            
000046FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000046FC                            
000046FC                            
000046FC                            LevSelControls:
000046FC 1238 F605                  		move.b	(v_jpadpress1).w,d1
00004700 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed and held?
00004704 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00004706 5378 FF80                  		subq.w	#1,(v_levseldelay).w ; subtract 1 from time to next move
0000470A 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
0000470C                            
0000470C                            LevSel_UpDown:
0000470C 31FC 000B FF80             		move.w	#$B,(v_levseldelay).w ; reset time delay
00004712 1238 F604                  		move.b	(v_jpadhold1).w,d1
00004716 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed?
0000471A 6700                       		beq.s	LevSel_SndTest	; if not, branch
0000471C 3038 FF82                  		move.w	(v_levselitem).w,d0
00004720 0801 0000                  		btst	#bitUp,d1	; is up	pressed?
00004724 6700                       		beq.s	LevSel_Down	; if not, branch
00004726 5340                       		subq.w	#1,d0		; move up 1 selection
00004728 6400                       		bhs.s	LevSel_Down
0000472A 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
0000472C                            
0000472C                            LevSel_Down:
0000472C 0801 0001                  		btst	#bitDn,d1	; is down pressed?
00004730 6700                       		beq.s	LevSel_Refresh	; if not, branch
00004732 5240                       		addq.w	#1,d0		; move down 1 selection
00004734 0C40 0015                  		cmpi.w	#$15,d0
00004738 6500                       		blo.s	LevSel_Refresh
0000473A 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
0000473C                            
0000473C                            LevSel_Refresh:
0000473C 31C0 FF82                  		move.w	d0,(v_levselitem).w ; set new selection
00004740 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00004744 4E75                       		rts	
00004746                            ; ===========================================================================
00004746                            
00004746                            LevSel_SndTest:
00004746 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w ; is item $14 selected?
0000474C 6600                       		bne.s	LevSel_NoMove	; if not, branch
0000474E 1238 F605                  		move.b	(v_jpadpress1).w,d1
00004752 0201 000C                  		andi.b	#btnR+btnL,d1	; is left/right	pressed?
00004756 6700                       		beq.s	LevSel_NoMove	; if not, branch
00004758 3038 FF84                  		move.w	(v_levselsound).w,d0
0000475C 0801 0002                  		btst	#bitL,d1	; is left pressed?
00004760 6700                       		beq.s	LevSel_Right	; if not, branch
00004762 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00004764 6400                       		bhs.s	LevSel_Right
00004766 7055                       		moveq	#$55,d0		; if sound test	moves below 0, set to $55
00004768                            
00004768                            LevSel_Right:
00004768 0801 0003                  		btst	#bitR,d1	; is right pressed?
0000476C 6700                       		beq.s	LevSel_Refresh2	; if not, branch
0000476E 5240                       		addq.w	#1,d0		; add 1	to sound test
00004770 0C40 0056                  		cmpi.w	#$56,d0
00004774 6500                       		blo.s	LevSel_Refresh2
00004776 7000                       		moveq	#0,d0		; if sound test	moves above $55, set to	0
00004778                            
00004778                            LevSel_Refresh2:
00004778 31C0 FF84                  		move.w	d0,(v_levselsound).w ; set sound test number
0000477C 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00004780                            
00004780                            LevSel_NoMove:
00004780 4E75                       		rts	
00004782                            ; End of function LevSelControls
00004782                            
00004782                            ; ---------------------------------------------------------------------------
00004782                            ; Subroutine to load level select text
00004782                            ; ---------------------------------------------------------------------------
00004782                            
00004782                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004782                            
00004782                            
00004782                            LevSelTextLoad:
00004782                            
00004782 =62100003                  	textpos:	= ($40000000+(($E210&$3FFF)<<16)+(($E210&$C000)>>14))
00004782                            					; $E210 is a VRAM address
00004782                            
00004782 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004788 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000478E 283C 6210 0003             		move.l	#textpos,d4	; text position on screen
00004794 363C E680                  		move.w	#$E680,d3	; VRAM setting (4th palette, $680th tile)
00004798 7214                       		moveq	#$14,d1		; number of lines of text
0000479A                            
0000479A                            	LevSel_DrawAll:
0000479A 2D44 0004                  		move.l	d4,4(a6)
0000479E 6100 0000                  		bsr.w	LevSel_ChgLine	; draw line of text
000047A2 0684 0080 0000             		addi.l	#$800000,d4	; jump to next line
000047A8 51C9 FFF0                  		dbf	d1,LevSel_DrawAll
000047AC                            
000047AC 7000                       		moveq	#0,d0
000047AE 3038 FF82                  		move.w	(v_levselitem).w,d0
000047B2 3200                       		move.w	d0,d1
000047B4 283C 6210 0003             		move.l	#textpos,d4
000047BA EF48                       		lsl.w	#7,d0
000047BC 4840                       		swap	d0
000047BE D880                       		add.l	d0,d4
000047C0 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000047C6 E749                       		lsl.w	#3,d1
000047C8 3001                       		move.w	d1,d0
000047CA D241                       		add.w	d1,d1
000047CC D240                       		add.w	d0,d1
000047CE D2C1                       		adda.w	d1,a1
000047D0 363C C680                  		move.w	#$C680,d3	; VRAM setting (3rd palette, $680th tile)
000047D4 2D44 0004                  		move.l	d4,4(a6)
000047D8 6100 0000                  		bsr.w	LevSel_ChgLine	; recolour selected line
000047DC 363C E680                  		move.w	#$E680,d3
000047E0 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w
000047E6 6600                       		bne.s	LevSel_DrawSnd
000047E8 363C C680                  		move.w	#$C680,d3
000047EC                            
000047EC                            LevSel_DrawSnd:
000047F6 3038 FF84                  		move.w	(v_levselsound).w,d0
000047FA 0640 0080                  		addi.w	#$80,d0
000047FE 1400                       		move.b	d0,d2
00004800 E808                       		lsr.b	#4,d0
00004802 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 1st digit
00004806 1002                       		move.b	d2,d0
00004808 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 2nd digit
0000480C 4E75                       		rts	
0000480E                            ; End of function LevSelTextLoad
0000480E                            
0000480E                            
0000480E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000480E                            
0000480E                            
0000480E                            LevSel_ChgSnd:
0000480E 0240 000F                  		andi.w	#$F,d0
00004812 0C00 000A                  		cmpi.b	#$A,d0		; is digit $A-$F?
00004816 6500                       		blo.s	LevSel_Numb	; if not, branch
00004818 5E00                       		addi.b	#7,d0		; use alpha characters
0000481A                            
0000481A                            	LevSel_Numb:
0000481A D043                       		add.w	d3,d0
0000481C 3C80                       		move.w	d0,(a6)
0000481E 4E75                       		rts	
00004820                            ; End of function LevSel_ChgSnd
00004820                            
00004820                            
00004820                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004820                            
00004820                            
00004820                            LevSel_ChgLine:
00004820 7417                       		moveq	#$17,d2		; number of characters per line
00004822                            
00004822                            	LevSel_LineLoop:
00004822 7000                       		moveq	#0,d0
00004824 1019                       		move.b	(a1)+,d0	; get character
00004826 6A00                       		bpl.s	LevSel_CharOk	; branch if valid
00004828 3CBC 0000                  		move.w	#0,(a6)		; use blank character
0000482C 51CA FFF4                  		dbf	d2,LevSel_LineLoop
00004830 4E75                       		rts	
00004832                            
00004832                            
00004832                            	LevSel_CharOk:
00004832 D043                       		add.w	d3,d0		; combine char with VRAM setting
00004834 3C80                       		move.w	d0,(a6)		; send to VRAM
00004836 51CA FFEA                  		dbf	d2,LevSel_LineLoop
0000483A 4E75                       		rts	
0000483C                            ; End of function LevSel_ChgLine
0000483C                            
0000483C                            ; ===========================================================================
0000483C                            ; ---------------------------------------------------------------------------
0000483C                            ; Level	select menu text
0000483C                            ; ---------------------------------------------------------------------------
0000483C                            		incbin	"misc\Level Select Text (JP1).bin"
00004A34                            		even
00004A34                            ; ---------------------------------------------------------------------------
00004A34                            ; Music	playlist
00004A34                            ; ---------------------------------------------------------------------------
00004A34                            MusicList:
00004A34 00                         			dc.b bgm_GHZ    ; GHZ1
00004A35 00                                 	dc.b bgm_LZ    ; GHZ2
00004A36 00                                 	dc.b bgm_Seaside   ; GHZ3
00004A37 00                                 	dc.b bgm_LZ    ; GHZ4
00004A38 00                                 	dc.b bgm_Stop    ; LZ1
00004A39 00                                 	dc.b bgm_Stop   ; LZ2
00004A3A 00                                 	dc.b bgm_Stop    ; LZ3
00004A3B 00                                 	dc.b bgm_SBZ3    ; LZ4
00004A3C 00                                 	dc.b bgm_MZ    ; MZ1
00004A3D 00                                 	dc.b bgm_SBZ    ; MZ2
00004A3E 00                                 	dc.b bgm_RRZ2   ; MZ3
00004A3F 00                                 	dc.b bgm_SBZ    ; MZ4
00004A40 00                                 	dc.b bgm_LZ    ; SLZ1
00004A41 00                                 	dc.b bgm_LZ    ; SLZ2
00004A42 00                                 	dc.b bgm_LZ    ; SLZ3
00004A43 00                                 	dc.b bgm_LZ    ; SLZ4
00004A44 00                                 	dc.b bgm_SYZ    ; SYZ1
00004A45 00                                 	dc.b bgm_SLZ    ; SYZ2
00004A46 00                                 	dc.b bgm_SLZ    ; SYZ3
00004A47 00                                 	dc.b bgm_SLZ    ; SYZ4
00004A48 00                                 	dc.b bgm_SBZ    ; SBZ1
00004A49 00                                 	dc.b bgm_SBZ    ; SBZ2
00004A4A 00                                 	dc.b bgm_FZ		; SBZ3
00004A4B 00                                 	dc.b bgm_SBZ    ; SBZ4
00004A4C 00                                 	dc.b bgm_GHZ    ; GHZ1
00004A4D 00                                 	dc.b bgm_GHZ    ; GHZ1
00004A4E 00                                 	dc.b bgm_GHZ    ; GHZ1
00004A4F 00                                 	dc.b bgm_GHZ    ; GHZ1
00004A50                                    	even
00004A50                            ; ===========================================================================
00004A50                            
00004A50                            ; ---------------------------------------------------------------------------
00004A50                            ; Level
00004A50                            ; ---------------------------------------------------------------------------
00004A50                            
00004A50                            GM_Level:
00004A50 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS - reset water state
00004A56                            
00004A56 08F8 0007 F600             		bset	#7,(v_gamemode).w ; add $80 to screen mode (for pre level sequence)
00004A5C 4A78 FFF0                  		tst.w	(f_demo).w
00004A60 6B00                       		bmi.s	Level_NoMusicFade
00004A6A                            
00004A6A                            	Level_NoMusicFade:
00004A6A 6100 CD2C                  		bsr.w	ClearPLC
00004A6E 6100 D8EA                  		bsr.w	PaletteFadeOut
00004A72 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
00004A76 6B00                       		bmi.s	Level_ClrRam	; if yes, branch
00004A78 46FC 2700                  		disable_ints
00004A86 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004A8C 6100 C8C0                  		bsr.w	NemDec
00004A90 46FC 2300                  		enable_ints
00004A94 7000                       		moveq	#0,d0
00004A96 1038 FE10                  		move.b	(v_zone).w,d0
00004A9A E948                       		lsl.w	#4,d0
00004A9C 45F9 0000 0000             		lea	(LevelHeaders).l,a2
00004AA2 45F2 0000                  		lea	(a2,d0.w),a2
00004AA6 7000                       		moveq	#0,d0
00004AA8 1012                       		move.b	(a2),d0
00004AAA 6700                       		beq.s	loc_37FC
00004AAC 6100 CC8C                  		bsr.w	AddPLC		; load level patterns
00004AB0                            
00004AB0                            loc_37FC:
00004AB0 7000                       		moveq	#plcid_Main2,d0
00004AB2 6100 CC86                  		bsr.w	AddPLC		; load standard	patterns
00004AB6 4EB9 0000 0000             		jsr		LoadLifeIcon
00004ABC                            		
00004ABC                            Level_ClrRam:
00004ABC 43F8 D000                  		lea	(v_objspace).w,a1
00004AC0 7000                       		moveq	#0,d0
00004AC2 323C 07FF                  		move.w	#$7FF,d1
00004AC6                            
00004AC6                            	Level_ClrObjRam:
00004AC6 22C0                       		move.l	d0,(a1)+
00004AC8 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00004ACC                            
00004ACC 43F8 F628                  		lea	($FFFFF628).w,a1
00004AD0 7000                       		moveq	#0,d0
00004AD2 323C 0015                  		move.w	#$15,d1
00004AD6                            
00004AD6                            	Level_ClrVars1:
00004AD6 22C0                       		move.l	d0,(a1)+
00004AD8 51C9 FFFC                  		dbf	d1,Level_ClrVars1 ; clear misc variables
00004ADC                            
00004ADC 43F8 F700                  		lea	(v_screenposx).w,a1
00004AE0 7000                       		moveq	#0,d0
00004AE2 323C 003F                  		move.w	#$3F,d1
00004AE6                            
00004AE6                            	Level_ClrVars2:
00004AE6 22C0                       		move.l	d0,(a1)+
00004AE8 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00004AEC                            
00004AEC 43F8 FE60                  		lea	(v_oscillate+2).w,a1
00004AF0 7000                       		moveq	#0,d0
00004AF2 323C 0047                  		move.w	#$47,d1
00004AF6                            
00004AF6                            	Level_ClrVars3:
00004AF6 22C0                       		move.l	d0,(a1)+
00004AF8 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00004AFC                            
00004AFC 46FC 2700                  		disable_ints
00004B00 6100 C6CE                  		bsr.w	ClearScreen
00004B04 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00004B0A 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00004B0E 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00004B12 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00004B16 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
00004B1A 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00004B1E 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
00004B22 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00004B26 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
00004B2C 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
00004B30 31FC C800 C8FC             		ResetDMAQueue	
00004B36 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004B3C 6600                       		bne.s	Level_LoadPal	; if not, branch
00004B3E                            
00004B3E 3CBC 8014                  		move.w	#$8014,(a6)	; enable H-interrupts
00004B42 7000                       		moveq	#0,d0
00004B44 1038 FE11                  		move.b	(v_act).w,d0
00004B48 D040                       		add.w	d0,d0
00004B4A 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00004B50 3031 0000                  		move.w	(a1,d0.w),d0
00004B54 31C0 F646                  		move.w	d0,(v_waterpos1).w ; set water heights
00004B58 31C0 F648                  		move.w	d0,(v_waterpos2).w
00004B5C 31C0 F64A                  		move.w	d0,(v_waterpos3).w
00004B60 4238 F64D                  		clr.b	(v_wtr_routine).w ; clear water routine counter
00004B64 4238 F64E                  		clr.b	(f_wtr_state).w	; clear	water state
00004B68 11FC 0001 F64C             		move.b	#1,(f_water).w	; enable water
00004B6E                            
00004B6E                            Level_LoadPal:
00004B6E 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00004B74 46FC 2300                  		move	#$2300,sr
00004B78 4EB9 0000 0000             		jsr		LoadPlayerPal
00004B7E 6100 DAC0                  		bsr.w	PalLoad2	; load Sonic's pallet line
00004B82 0C38 0001 F64C             		cmp.b	#1,(f_water).w ; Is water enabled?
00004B88 6600                       		bne.s	Level_GetBgm	; if not, branch
00004B8A 4EB9 0000 0000             		jsr		LoadPlayerWaterPal
00004B90 6100 DAEE                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00004B94 4A38 FE30                  		tst.b	($FFFFFE30).w
00004B98 6700                       		beq.s	Level_GetBgm
00004B9A 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00004BA0                            
00004BA0                            	Level_GetBgm:
00004BA0 4A78 FFF0                  		tst.w	(f_demo).w
00004BA4 6B00                               	bmi.s	Level_SkipTtlCard
00004BA6 7000                               	moveq	#0,d0
00004BA8 3038 FE10                  		move.w	(v_zone).w,d0
00004BAC E418                       		ror.b	#2,d0
00004BAE EC48                       		lsr.w   #6,d0
00004BB0 43F9 0000 4A34                     	lea	(MusicList).l,a1 ; load    music playlist
00004BB6 1031 0000                          	move.b	(a1,d0.w),d0
00004BBA 11C0 F5C6                  		move.b	d0,((v_Saved_music)).w
00004BBE 6100 C6DA                          	bsr.w	PlaySound    ; play music
00004BC2 11FC 0000 D080                     	move.b	#id_TitleCard,(v_objspace+$80).w ; load title card object
00004BC8                            
00004BC8                            
00004BC8                            Level_TtlCardLoop:
00004BC8 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00004BCE 6100 F0C8                  		bsr.w	WaitForVBla
00004BD2 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004BD8 4EB9 0000 0000             		jsr	(BuildSprites).l
00004BDE 6100 CBC6                  		bsr.w	RunPLC
00004BE2 3038 D108                  		move.w	(v_objspace+$108).w,d0
00004BE6 B078 D130                  		cmp.w	(v_objspace+$130).w,d0 ; has title card sequence finished?
00004BEA 66DC                       		bne.s	Level_TtlCardLoop ; if not, branch
00004BEC 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are there any items in the pattern load cue?
00004BF0 66D6                       		bne.s	Level_TtlCardLoop ; if yes, branch
00004BF2 4EB9 0000 0000             		jsr	(Hud_Base).l	; load basic HUD gfx
00004BF8                            
00004BF8                            	Level_SkipTtlCard:
00004BF8 4EB9 0000 0000             		jsr		LoadPlayerPal
00004BFE 6100 DA04                  		bsr.w	PalLoad1	; load Sonic's palette
00004C02 6100 0000                  		bsr.w	LevelSizeLoad
00004C06 6100 0000                  		bsr.w	DeformLayers
00004C0A 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
00004C10 6100 0000                  		bsr.w	LevelDataLoad ; load block mappings and palettes
00004C14 6100 0000                  		bsr.w	LoadTilesFromStart
00004C18 4EB9 0000 0000             		jsr	(FloorLog_Unk).l
00004C1E 6100 0000                  		bsr.w	ColIndexLoad
00004C22 6100 0000                  		bsr.w	LZWaterFeatures
00004C26 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00004C2C 4A78 FFF0                  		tst.w	(f_demo).w
00004C30 6B00                       		bmi.s	Level_ChkDebug
00004C32 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
00004C38                            
00004C38                            Level_ChkDebug:
00004C38 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
00004C3C 6700                       		beq.s	Level_ChkWater	; if not, branch
00004C3E 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button held?
00004C44 6700                       		beq.s	Level_ChkWater	; if not, branch
00004C46 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00004C4C                            
00004C4C                            Level_ChkWater:
00004C4C 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
00004C52 31FC 0000 F604             		move.w	#0,(v_jpadhold1).w
00004C58 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004C5E 6600                       		bne.s	Level_LoadObj	; if not, branch
00004C60 11FC 0000 D780             		move.b	#id_WaterSurface,(v_objspace+$780).w ; load water surface object
00004C66 31FC 0060 D788             		move.w	#$60,(v_objspace+$780+obX).w
00004C6C 11FC 0000 D7C0             		move.b	#id_WaterSurface,(v_objspace+$7C0).w
00004C72 31FC 0120 D7C8             		move.w	#$120,(v_objspace+$7C0+obX).w
00004C78                            
00004C78                            Level_LoadObj:
00004C78 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004C7E 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004C84 4EB9 0000 0000             		jsr	(BuildSprites).l
00004C8A 7000                       		moveq	#0,d0
00004C8C 4A38 FE30                  		tst.b	(v_lastlamp).w	; are you starting from	a lamppost?
00004C90 6600                       		bne.s	Level_SkipClr	; if yes, branch
00004C92 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004C96 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004C9A 11C0 FE1B                  		move.b	d0,(v_lifecount).w ; clear lives counter
00004C9E                            
00004C9E                            	Level_SkipClr:
00004C9E 11C0 FE1A                  		move.b	d0,(f_timeover).w
00004CA2 11C0 FE2C                  		move.b	d0,(v_shield).w	; clear shield
00004CA6 11C0 F5C8                  		move.b	d0,(v_rshield).w; clear red shield
00004CAA 11C0 F5C9                  		move.b	d0,(v_gshield).w; clear gold shield
00004CAE 11C0 F5CA                  		move.b	d0,(v_spshield).w; clear gold shield
00004CB2 11C0 FE2D                  		move.b	d0,(v_invinc).w	; clear invincibility
00004CB6 11C0 FE2E                  		move.b	d0,(v_shoes).w	; clear speed shoes
00004CBA 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00004CBE 31C0 FE08                  		move.w	d0,(v_debuguse).w
00004CC2 31C0 FE02                  		move.w	d0,(f_restart).w
00004CC6 31C0 FE04                  		move.w	d0,(v_framecount).w
00004CCA 6100 0000                  		bsr.w	OscillateNumInit
00004CCE 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00004CD4 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00004CDA 11FC 0001 FE1E             		move.b	#1,(f_timecount).w ; update time counter
00004CE0 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
00004CE6 43F9 0000 0000             		lea	(DemoDataPtr).l,a1 ; load demo data
00004CEC 7000                       		moveq	#0,d0
00004CEE 1038 FE10                  		move.b	(v_zone).w,d0
00004CF2 E548                       		lsl.w	#2,d0
00004CF4 2271 0000                  		movea.l	(a1,d0.w),a1
00004CF8 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004CFC 6A00                       		bpl.s	Level_Demo	; if yes, branch
00004CFE 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1 ; load ending demo data
00004D04 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00004D08 5340                       		subq.w	#1,d0
00004D0A E548                       		lsl.w	#2,d0
00004D0C 2271 0000                  		movea.l	(a1,d0.w),a1
00004D10                            
00004D10                            Level_Demo:
00004D10 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w ; load key press duration
00004D16 5338 F792                  		subq.b	#1,(v_btnpushtime2).w ; subtract 1 from duration
00004D1A 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00004D20 4A78 FFF0                  		tst.w	(f_demo).w
00004D24 6A00                       		bpl.s	Level_ChkWaterPal
00004D26 31FC 021C F614             		move.w	#540,(v_demolength).w
00004D2C 0C78 0004 FFF4             		cmpi.w	#4,(v_creditsnum).w
00004D32 6600                       		bne.s	Level_ChkWaterPal
00004D34 31FC 01FE F614             		move.w	#510,(v_demolength).w
00004D3A                            
00004D3A                            Level_ChkWaterPal:
00004D3A 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ/SBZ3?
00004D40 6600                       		bne.s	Level_Delay	; if not, branch
00004D42 700B                       		moveq	#palid_LZWater,d0 ; palette $B (LZ underwater)
00004D44 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; is level SBZ3?
00004D4A 6600                       		bne.s	Level_WtrNotSbz	; if not, branch
00004D4C 700D                       		moveq	#palid_SBZ3Water,d0 ; palette $D (SBZ3 underwater)
00004D4E                            
00004D4E                            	Level_WtrNotSbz:
00004D4E 6100 D96C                  		bsr.w	PalLoad4_Water
00004D52                            
00004D52                            Level_Delay:
00004D52 323C 0003                  		move.w	#3,d1
00004D56                            
00004D56                            	Level_DelayLoop:
00004D56 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004D5C 6100 EF3A                  		bsr.w	WaitForVBla
00004D60 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004D64                            
00004D64 31FC 202F F626             		move.w	#$202F,(v_pfade_start).w ; fade in 2nd, 3rd & 4th palette lines
00004D6A 6100 D54E                  		bsr.w	PalFadeIn_Alt
00004D6E 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
00004D72 6B00                       		bmi.s	Level_ClrCardArt ; if yes, branch
00004D74 5438 D0A4                  		addq.b	#2,(v_objspace+$80+obRoutine).w ; make title card move
00004D78 5838 D0E4                  		addq.b	#4,(v_objspace+$C0+obRoutine).w
00004D7C 5838 D124                  		addq.b	#4,(v_objspace+$100+obRoutine).w
00004D80 5838 D164                  		addq.b	#4,(v_objspace+$140+obRoutine).w
00004D84 6000                       		bra.s	Level_StartGame
00004D86                            ; ===========================================================================
00004D86                            
00004D86                            Level_ClrCardArt:
00004D86 7000                       		moveq	#plcid_Explode,d0
00004D88 4EB9 0000 173A             		jsr	(AddPLC).l	; load explosion gfx
00004D8E 7000                       		moveq	#0,d0
00004D90 1038 FE10                  		move.b	(v_zone).w,d0
00004D94 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
00004D98 4EB9 0000 173A             		jsr	(AddPLC).l	; load animal gfx (level no. + $15)
00004D9E                            
00004D9E                            Level_StartGame:
00004D9E 08B8 0007 F600             		bclr	#7,(v_gamemode).w ; subtract $80 from mode to end pre-level stuff
00004DA4                            
00004DA4                            ; ---------------------------------------------------------------------------
00004DA4                            ; Main level loop (when	all title card and loading sequences are finished)
00004DA4                            ; ---------------------------------------------------------------------------
00004DA4                            
00004DA4                            Level_MainLoop:
00004DA4 6100 C506                  		bsr.w	PauseGame
00004DA8 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004DAE 6100 EEE8                  		bsr.w	WaitForVBla
00004DB2 5278 FE04                  		addq.w	#1,(v_framecount).w ; add 1 to level timer
00004DB6 6100 0000                  		bsr.w	MoveSonicInDemo
00004DBA 6100 0000                  		bsr.w	LZWaterFeatures
00004DBE 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004DC4 4A78 FE02                  			tst.w   (f_restart).w
00004DC8 6600 FC86                  			bne     GM_Level
00004DCC 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00004DD0 6600                       		bne.s	Level_DoScroll	; if yes, branch
00004DD2 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004DD8 6400                       		bhs.s	Level_SkipScroll ; if yes, branch
00004DDA                            
00004DDA                            	Level_DoScroll:
00004DDA 6100 0000                  		bsr.w	DeformLayers
00004DDE                            
00004DDE                            	Level_SkipScroll:
00004DDE 4EB9 0000 0000             		jsr	(BuildSprites).l
00004DE4 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004DEA 6100 CF32                  		bsr.w	PaletteCycle
00004DEE 6100 C9B6                  		bsr.w	RunPLC
00004DF2 6100 0000                  		bsr.w	OscillateNumDo
00004DF6 6100 0000                  		bsr.w	SynchroAnimate
00004DFA 6100 0000                  		bsr.w	SignpostArtLoad
00004DFE                            
00004DFE 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004E04 6700                       		beq.s	Level_ChkDemo	; if mode is 8 (demo), branch
00004E06 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w
00004E0C 6700 FF96                  		beq.w	Level_MainLoop	; if mode is $C (level), branch
00004E10 4E75                       		rts	
00004E12                            ; ===========================================================================
00004E12                            
00004E12                            Level_ChkDemo:
00004E12 4A78 FE02                  		tst.w	(f_restart).w	; is level set to restart?
00004E16 6600                       		bne.s	Level_EndDemo	; if yes, branch
00004E18 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00004E1C 6700                       		beq.s	Level_EndDemo	; if not, branch
00004E1E 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004E24 6700 FF7E                  		beq.w	Level_MainLoop	; if mode is 8 (demo), branch
00004E28 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004E2E 4E75                       		rts	
00004E30                            ; ===========================================================================
00004E30                            
00004E30                            Level_EndDemo:
00004E30 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004E36 6600                       		bne.s	Level_FadeDemo	; if mode is 8 (demo), branch
00004E38 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004E3E 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on & not ending sequence?
00004E42 6A00                       		bpl.s	Level_FadeDemo	; if yes, branch
00004E44 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; go to credits
00004E4A                            
00004E4A                            Level_FadeDemo:
00004E4A 31FC 003C F614             		move.w	#$3C,(v_demolength).w
00004E50 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00004E56 4278 F794                  		clr.w	(v_palchgspeed).w
00004E5A                            
00004E5A                            	Level_FDLoop:
00004E5A 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004E60 6100 EE36                  		bsr.w	WaitForVBla
00004E64 6100 0000                  		bsr.w	MoveSonicInDemo
00004E68 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004E6E 4EB9 0000 0000             		jsr	(BuildSprites).l
00004E74 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004E7A 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00004E7E 6A00                       		bpl.s	loc_3BC8
00004E80 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00004E86 6100 D4F2                  		bsr.w	FadeOut_ToBlack
00004E8A                            
00004E8A                            loc_3BC8:
00004E8A 4A78 F614                  		tst.w	(v_demolength).w
00004E8E 66CA                       		bne.s	Level_FDLoop
00004E90 4E75                       		rts	
00004E92                            ; ===========================================================================
00004E92                            
00004E92                            		include	"_inc\LZWaterFeatures.asm"
00004E92                            ; ---------------------------------------------------------------------------
00004E92                            ; Subroutine to	do special water effects in Labyrinth Zone
00004E92                            ; ---------------------------------------------------------------------------
00004E92                            
00004E92                            LZWaterFeatures:
00004E92 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00004E98 6600                       		bne.s	@notlabyrinth	; if not, branch
00004E9A 4A38 F744                  			tst.b   (f_nobgscroll).w
00004E9E 6600                       			bne.s	@setheight
00004EA0 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004EA6 6400                       		bcc.s	@setheight	; if yes, skip other effects
00004EA8                            
00004EA8 6100 0000                  		bsr.w	LZWindTunnels
00004EAC 6100 0000                  		bsr.w	LZWaterSlides
00004EB0 6100 0000                  		bsr.w	LZDynamicWater
00004EB4                            
00004EB4                            @setheight:
00004EB4 4238 F64E                  		clr.b	(f_wtr_state).w
00004EB8 7000                       		moveq	#0,d0
00004EBA 1038 FE60                  		move.b	(v_oscillate+2).w,d0
00004EBE E248                       		lsr.w	#1,d0
00004EC0 D078 F648                  		add.w	(v_waterpos2).w,d0
00004EC4 31C0 F646                  		move.w	d0,(v_waterpos1).w
00004EC8 3038 F646                  		move.w	(v_waterpos1).w,d0
00004ECC 9078 F704                  		sub.w	(v_screenposy).w,d0
00004ED0 6400                       		bcc.s	@isbelow
00004ED2 4A40                       		tst.w	d0
00004ED4 6A00                       		bpl.s	@isbelow	; if water is below top of screen, branch
00004ED6                            
00004ED6 11FC 00DF F625             		move.b	#223,(v_hbla_line).w
00004EDC 11FC 0001 F64E             		move.b	#1,(f_wtr_state).w ; screen is all underwater
00004EE2                            
00004EE2                            	@isbelow:
00004EE2 0C40 00DF                  		cmpi.w	#223,d0		; is water within 223 pixels of top of screen?
00004EE6 6500                       		bcs.s	@isvisible	; if yes, branch
00004EE8 303C 00DF                  		move.w	#223,d0
00004EEC                            
00004EEC                            	@isvisible:
00004EEC 11C0 F625                  		move.b	d0,(v_hbla_line).w ; set water surface as on-screen
00004EF0                            
00004EF0                            @notlabyrinth:
00004EF0 4E75                       		rts	
00004EF2                            ; ===========================================================================
00004EF2                            ; ---------------------------------------------------------------------------
00004EF2                            ; Initial water heights
00004EF2                            ; ---------------------------------------------------------------------------
00004EF2 0420                       WaterHeight:	dc.w $420	; Labyrinth 1
00004EF4 0328                       		dc.w $328	; Labyrinth 2
00004EF6 0900                       		dc.w $900	; Labyrinth 3
00004EF8 0228                       		dc.w $228	; Scrap Brain 3
00004EFA                            		even
00004EFA                            ; ===========================================================================
00004EFA                            
00004EFA                            ; ---------------------------------------------------------------------------
00004EFA                            ; Labyrinth dynamic water routines
00004EFA                            ; ---------------------------------------------------------------------------
00004EFA                            
00004EFA                            LZDynamicWater:
00004EFA 7000                       		moveq	#0,d0
00004EFC 1038 FE11                  		move.b	(v_act).w,d0
00004F00 D040                       		add.w	d0,d0
00004F02 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004F06 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004F0A 7200                       		moveq	#0,d1
00004F0C 1238 F64C                  		move.b	(f_water).w,d1
00004F10 3038 F64A                  		move.w	(v_waterpos3).w,d0
00004F14 9078 F648                  		sub.w	(v_waterpos2).w,d0
00004F18 6700                       		beq.s	@exit		; if water level is correct, branch
00004F1A 6400                       		bcc.s	@movewater	; if water level is too high, branch
00004F1C 4441                       		neg.w	d1		; set water to move up instead
00004F1E                            
00004F1E                            	@movewater:
00004F1E D378 F648                  		add.w	d1,(v_waterpos2).w ; move water up/down
00004F22                            
00004F22                            	@exit:
00004F22 4E75                       		rts	
00004F24                            ; ===========================================================================
00004F24 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004F26 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004F28 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004F2A 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004F2C                            ; ===========================================================================
00004F2C                            
00004F2C                            DynWater_LZ1:
00004F2C 4E75                       		rts	
00004F2E                            ; ===========================================================================
00004F2E                            
00004F2E                            DynWater_LZ2:
00004F2E 3038 F700                  		move.w	(v_screenposx).w,d0
00004F32 323C 0328                  		move.w	#$328,d1
00004F36 0C40 0500                  		cmpi.w	#$500,d0
00004F3A 6500                       		bcs.s	@setwater
00004F3C 323C 03C8                  		move.w	#$3C8,d1
00004F40 0C40 0B00                  		cmpi.w	#$B00,d0
00004F44 6500                       		bcs.s	@setwater
00004F46 323C 0428                  		move.w	#$428,d1
00004F4A                            
00004F4A                            	@setwater:
00004F4A 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004F4E 4E75                       		rts	
00004F50                            ; ===========================================================================
00004F50                            
00004F50                            DynWater_LZ3:
00004F50 3038 F700                  		move.w	(v_screenposx).w,d0
00004F54 1438 F64D                  		move.b	(v_wtr_routine).w,d2
00004F58 6600                       		bne.s	@routine2
00004F5A                            
00004F5A 323C 0900                  		move.w	#$900,d1
00004F5E 0C40 0600                  		cmpi.w	#$600,d0	; has screen reached position?
00004F62 6500                       		bcs.s	@setwaterlz3	; if not, branch
00004F64 0C78 03C0 D00C             		cmpi.w	#$3C0,(v_player+obY).w
00004F6A 6500                       		bcs.s	@setwaterlz3
00004F6C 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic in a y-axis range?
00004F72 6400                       		bcc.s	@setwaterlz3	; if not, branch
00004F74                            
00004F74 323C 04C8                  		move.w	#$4C8,d1	; set new water height
00004F78 11FC 004B A506             		move.b	#$4B,(v_lvllayout+$106).w ; update level layout
00004F7E 11FC 0001 F64D             		move.b	#1,(v_wtr_routine).w ; use second routine next
00004F8C                            
00004F8C                            	@setwaterlz3:
00004F8C 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004F90 31C1 F648                  		move.w	d1,(v_waterpos2).w ; change water height instantly
00004F94 4E75                       		rts	
00004F96                            ; ===========================================================================
00004F96                            
00004F96                            @routine2:
00004F96 5302                       		subq.b	#1,d2
00004F98 6600                       		bne.s	@routine3
00004F9A 323C 04C8                  		move.w	#$4C8,d1
00004F9E 0C40 0770                  		cmpi.w	#$770,d0
00004FA2 6500                       		bcs.s	@setwater2
00004FA4 323C 0308                  		move.w	#$308,d1
00004FA8 0C40 1400                  		cmpi.w	#$1400,d0
00004FAC 6500                       		bcs.s	@setwater2
00004FAE 0C78 0508 F64A             		cmpi.w	#$508,(v_waterpos3).w
00004FB4 6700                       		beq.s	@sonicislow
00004FB6 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic below $600 y-axis?
00004FBC 6400                       		bcc.s	@sonicislow	; if yes, branch
00004FBE 0C78 0280 D00C             		cmpi.w	#$280,(v_player+obY).w
00004FC4 6400                       		bcc.s	@setwater2
00004FC6                            
00004FC6                            @sonicislow:
00004FC6 323C 0508                  		move.w	#$508,d1
00004FCA 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004FCE 0C40 1770                  		cmpi.w	#$1770,d0
00004FD2 6500                       		bcs.s	@setwater2
00004FD4 11FC 0002 F64D             		move.b	#2,(v_wtr_routine).w
00004FDA                            
00004FDA                            	@setwater2:
00004FDA 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004FDE 4E75                       		rts	
00004FE0                            ; ===========================================================================
00004FE0                            
00004FE0                            @routine3:
00004FE0 5302                       		subq.b	#1,d2
00004FE2 6600                       		bne.s	@routine4
00004FE4 323C 0508                  		move.w	#$508,d1
00004FE8 0C40 1860                  		cmpi.w	#$1860,d0
00004FEC 6500                       		bcs.s	@setwater3
00004FEE 323C 0188                  		move.w	#$188,d1
00004FF2 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004FF6 6400                       		bcc.s	@loc_3DC6
00004FF8 B278 F648                  		cmp.w	(v_waterpos2).w,d1
00004FFC 6600                       		bne.s	@setwater3
00004FFE                            
00004FFE                            	@loc_3DC6:
00004FFE 11FC 0003 F64D             		move.b	#3,(v_wtr_routine).w
00005004                            
00005004                            	@setwater3:
00005004 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00005008 4E75                       		rts	
0000500A                            ; ===========================================================================
0000500A                            
0000500A                            @routine4:
0000500A 5302                       		subq.b	#1,d2
0000500C 6600                       		bne.s	@routine5
0000500E 323C 0188                  		move.w	#$188,d1
00005012 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00005016 6500                       		bcs.s	@setwater4
00005018 323C 0900                  		move.w	#$900,d1
0000501C 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00005020 6500                       		bcs.s	@setwater4
00005022 11FC 0004 F64D             		move.b	#4,(v_wtr_routine).w
00005028 31FC 0608 F64A             		move.w	#$608,(v_waterpos3).w
0000502E 31FC 07C0 F648             		move.w	#$7C0,(v_waterpos2).w
00005034 11FC 0001 F7E8             		move.b	#1,(f_switch+8).w
0000503A 4E75                       		rts	
0000503C                            ; ===========================================================================
0000503C                            
0000503C                            @setwater4:
0000503C 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00005040 31C1 F648                  		move.w	d1,(v_waterpos2).w
00005044 4E75                       		rts	
00005046                            ; ===========================================================================
00005046                            
00005046                            @routine5:
00005046 0C40 1E00                  		cmpi.w	#$1E00,d0	; has screen passed final position?
0000504A 6500                       		bcs.s	@dontset	; if not, branch
0000504C 31FC 0128 F64A             		move.w	#$128,(v_waterpos3).w
00005052                            
00005052                            	@dontset:
00005052 4E75                       		rts	
00005054                            ; ===========================================================================
00005054                            
00005054                            DynWater_SBZ3:
00005054                            	;	move.w	#$228,d1
00005054                            	;	cmpi.w	#$F00,(v_screenposx).w
00005054                            	;	bcs.s	@setwater
00005054                            	;	move.w	#$4C8,d1
00005054                            
00005054                            	;@setwater:
00005054                            		;move.w	d1,(v_waterpos3).w
00005054 4E75                       		rts
00005056                            
00005056                            ; ---------------------------------------------------------------------------
00005056                            ; Labyrinth Zone "wind tunnels"	subroutine
00005056                            ; ---------------------------------------------------------------------------
00005056                            
00005056                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005056                            
00005056                            
00005056                            LZWindTunnels:
00005056 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0000505A 6600 0000                  		bne.w	@quit	; if yes, branch
0000505E 45F9 0000 0000             		lea	(LZWind_Data+8).l,a2
00005064 7000                       		moveq	#0,d0
00005066 1038 FE11                  		move.b	(v_act).w,d0	; get act number
0000506A E748                       		lsl.w	#3,d0		; multiply by 8
0000506C D4C0                       		adda.w	d0,a2		; add to address for data
0000506E 7200                       		moveq	#0,d1
00005070 4A38 FE11                  		tst.b	(v_act).w	; is act number 1?
00005074 6600                       		bne.s	@notact1	; if not, branch
00005076 7201                       		moveq	#1,d1
00005078 514A                       		subq.w	#8,a2		; use different data for act 1
0000507A                            
0000507A                            	@notact1:
0000507A 43F8 D000                  		lea	(v_player).w,a1
0000507E                            
0000507E                            @chksonic:
0000507E 3029 0008                  		move.w	obX(a1),d0
00005082 B052                       		cmp.w	(a2),d0
00005084 6500 0000                  		bcs.w	@chknext
00005088 B06A 0004                  		cmp.w	4(a2),d0
0000508C 6400 0000                  		bcc.w	@chknext
00005090 3429 000C                  		move.w	obY(a1),d2
00005094 B46A 0002                  		cmp.w	2(a2),d2
00005098 6500                       		bcs.s	@chknext
0000509A B46A 0006                  		cmp.w	6(a2),d2
0000509E 6400                       		bcc.s	@chknext	; branch if Sonic is outside a range
000050A0 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000050A4 0200 003F                  		andi.b	#$3F,d0		; does VInt counter fall on 0, $40, $80 or $C0?
000050A8 6600                       		bne.s	@skipsound	; if not, branch
000050B4                            
000050B4                            	@skipsound:
000050B4 4A38 F7C9                  		tst.b	(f_wtunnelallow).w ; are wind tunnels disabled?
000050B8 6600 0000                  		bne.w	@quit	; if yes, branch
000050BC 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1) ; is Sonic hurt/dying?
000050C2 6400                       		bcc.s	@clrquit	; if yes, branch
000050C4 11FC 0001 F7C7             		move.b	#1,(f_wtunnelmode).w
000050CA 0440 0080                  		subi.w	#$80,d0
000050CE B052                       		cmp.w	(a2),d0
000050D0 6400                       		bcc.s	@movesonic
000050D2 7002                       		moveq	#2,d0
000050D4 0C38 0001 FE11             		cmpi.b	#1,(v_act).w	; is act number 2?
000050DA 6600                       		bne.s	@notact2	; if not, branch
000050DC 4440                       		neg.w	d0
000050DE                            
000050DE                            	@notact2:
000050DE D169 000C                  		add.w	d0,obY(a1)	; adjust Sonic's y-axis for curve of tunnel
000050E2                            
000050E2                            @movesonic:
000050E2 5869 0008                  		addq.w	#4,obX(a1)
000050E6 337C 0400 0010             		move.w	#$400,obVelX(a1) ; move Sonic horizontally
000050EC 337C 0000 0012             		move.w	#0,obVelY(a1)
000050F2 137C 0000 001C             		move.b	#id_Float2,obAnim(a1)	; use floating animation
000050F8 08E9 0001 0022             		bset	#1,obStatus(a1)
000050FE 0838 0000 F602             		btst	#0,(v_jpadhold2).w ; is up pressed?
00005104 6700                       		beq.s	@down		; if not, branch
00005106 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up on pole
0000510A                            
0000510A                            	@down:
0000510A 0838 0001 F602             		btst	#1,(v_jpadhold2).w ; is down being pressed?
00005110 6700                       		beq.s	@end		; if not, branch
00005112 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down on pole
00005116                            
00005116                            	@end:
00005116 4E75                       		rts	
00005118                            ; ===========================================================================
00005118                            
00005118                            @chknext:
00005118 504A                       		addq.w	#8,a2		; use second set of values (act 1 only)
0000511A 51C9 FF62                  		dbf	d1,@chksonic	; on act 1, repeat for a second tunnel
0000511E 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic still in a tunnel?
00005122 6700                       		beq.s	@quit		; if yes, branch
00005124 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
0000512A                            
0000512A                            @clrquit:
0000512A 4238 F7C7                  		clr.b	(f_wtunnelmode).w ; finish tunnel
0000512E                            
0000512E                            @quit:
0000512E 4E75                       		rts	
00005130                            ; End of function LZWindTunnels
00005130                            
00005130                            ; ===========================================================================
00005130                            
00005130                            		;    left, top,  right, bottom boundaries
00005130 0A80 0300 0C10 0380        LZWind_Data:	dc.w $A80, $300, $C10,  $380 ; act 1 values (set 1)
00005138 0F80 0100 1410 0180        		dc.w $F80, $100, $1410,	$180 ; act 1 values (set 2)
00005140 0460 0400 0710 0480        		dc.w $460, $400, $710,  $480 ; act 2 values
00005148 0A20 0600 1610 06E0        		dc.w $A20, $600, $1610, $6E0 ; act 3 values
00005150 0C80 0600 13D0 0780        		dc.w $C80, $600, $13D0, $780 ; SBZ act 3 values
00005158                            		even
00005158                            
00005158                            ; ---------------------------------------------------------------------------
00005158                            ; Labyrinth Zone water slide subroutine
00005158                            ; ---------------------------------------------------------------------------
00005158                            
00005158                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005158                            
00005158                            
00005158                            LZWaterSlides:
00005158 43F8 D000                  		lea	(v_player).w,a1
0000515C 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic jumping?
00005162 6600                       		bne.s	loc_3F6A	; if not, branch
00005164 3029 000C                  		move.w	obY(a1),d0
00005168 E248                       		lsr.w	#1,d0
0000516A 0240 0380                  		andi.w	#$380,d0
0000516E 1229 0008                  		move.b	obX(a1),d1
00005172 0241 007F                  		andi.w	#$7F,d1
00005176 D041                       		add.w	d1,d0
00005178 45F8 A400                  		lea	(v_lvllayout).w,a2
0000517C 1032 0000                  		move.b	(a2,d0.w),d0
00005180 45FA 0000                  		lea	Slide_Chunks_End(pc),a2
00005184 7200                       		moveq	#Slide_Chunks_End-Slide_Chunks-1,d1
00005186                            
00005186                            loc_3F62:
00005186 B022                       		cmp.b	-(a2),d0
00005188 57C9 FFFC                  		dbeq	d1,loc_3F62
0000518C 6700                       		beq.s	LZSlide_Move
0000518E                            
0000518E                            loc_3F6A:
0000518E 4A38 F7CA                  		tst.b	(f_jumponly).w
00005192 6700                       		beq.s	locret_3F7A
00005194 337C 0005 003E             		move.w	#5,$3E(a1)
0000519A 4238 F7CA                  		clr.b	(f_jumponly).w
0000519E                            
0000519E                            locret_3F7A:
0000519E 4E75                       		rts	
000051A0                            ; ===========================================================================
000051A0                            
000051A0                            LZSlide_Move:
000051A0 0C41 0003                  		cmpi.w	#3,d1
000051A4 6400                       		bcc.s	loc_3F84
000051A6 4E71                       		nop	
000051A8                            
000051A8                            loc_3F84:
000051A8 08A9 0000 0022             		bclr	#0,obStatus(a1)
000051AE 103B 1000                  		move.b	Slide_Speeds(pc,d1.w),d0
000051B2 1340 0020                  		move.b	d0,obInertia(a1)
000051B6 6A00                       		bpl.s	loc_3F9A
000051B8 08E9 0000 0022             		bset	#0,obStatus(a1)
000051BE                            
000051BE                            loc_3F9A:
000051BE 4229 0021                  		clr.b	obInertia+1(a1)
000051C2 137C 0000 001C             		move.b	#id_WaterSlide,obAnim(a1) ; use Sonic's "sliding" animation
000051C8 11FC 0001 F7CA             		move.b	#1,(f_jumponly).w ; lock controls (except jumping)
000051CE 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000051D2 0200 001F                  		andi.b	#$1F,d0
000051D6 6600                       		bne.s	locret_3FBE
000051E2                            
000051E2                            locret_3FBE:
000051E2 4E75                       		rts	
000051E4                            ; End of function LZWaterSlides
000051E4                            
000051E4                            ; ===========================================================================
000051E4                            ; byte_3FC0:
000051E4                            Slide_Speeds:
000051E4 0AF5 0AF6 F5F4 0B          		dc.b $A, $F5, $A, $F6, $F5, $F4, $B
000051EC 00                         		even
000051EC                            
000051EC                            Slide_Chunks:
000051EC 54                         		dc.b $54 ;2, 7, 3, $4C, $4B, 8, 4
000051ED                            ; byte_3FCF
000051ED                            Slide_Chunks_End
000051EE 00                         		even
000051EE 00                         		even
000051EE                            		include	"_inc\MoveSonicInDemo.asm"
000051EE                            ; ---------------------------------------------------------------------------
000051EE                            ; Subroutine to	move Sonic in demo mode
000051EE                            ; ---------------------------------------------------------------------------
000051EE                            
000051EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000051EE                            
000051EE                            
000051EE                            MoveSonicInDemo:
000051EE 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
000051F2 6600                       		bne.s	MDemo_On	; if yes, branch
000051F4 4E75                       		rts	
000051F6                            ; ===========================================================================
000051F6                            
000051F6                            ; This is an unused subroutine for recording a demo
000051F6                            
000051F6                            DemoRecorder:
000051F6 43F9 0008 0000             		lea	($80000).l,a1
000051FC 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00005200 D2C0                       		adda.w	d0,a1
00005202 1038 F604                  		move.b	(v_jpadhold1).w,d0
00005206 B011                       		cmp.b	(a1),d0
00005208 6600                       		bne.s	@next
0000520A 5229 0001                  		addq.b	#1,1(a1)
0000520E 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00005214 6700                       		beq.s	@next
00005216 4E75                       		rts	
00005218                            
00005218                            	@next:
00005218 1340 0002                  		move.b	d0,2(a1)
0000521C 137C 0000 0003             		move.b	#0,3(a1)
00005222 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
00005226 0278 03FF F790             		andi.w	#$3FF,(v_btnpushtime1).w
0000522C 4E75                       		rts	
0000522E                            ; ===========================================================================
0000522E                            
0000522E                            MDemo_On:
0000522E 4A38 F604                  		tst.b	(v_jpadhold1).w	; is start button pressed?
00005232 6A00                       		bpl.s	@dontquit	; if not, branch
00005234 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
00005238 6B00                       		bmi.s	@dontquit	; if yes, branch
0000523A 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00005240                            
00005240                            	@dontquit:
00005240 43F9 0000 0000             		lea	(DemoDataPtr).l,a1
00005246 7000                       		moveq	#0,d0
00005248 1038 FE10                  		move.b	(v_zone).w,d0
0000524C 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is this a special stage?
00005252 6600                       		bne.s	@notspecial	; if not, branch
00005254 7006                       		moveq	#6,d0		; use demo #6
00005256                            
00005256                            	@notspecial:
00005256 E548                       		lsl.w	#2,d0
00005258 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for demo data
0000525C 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
00005260 6A00                       		bpl.s	@notcredits	; if not, branch
00005262 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1
00005268 3038 FFF4                  		move.w	(v_creditsnum).w,d0
0000526C 5340                       		subq.w	#1,d0
0000526E E548                       		lsl.w	#2,d0
00005270 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for credits demo
00005274                            
00005274                            	@notcredits:
00005274 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00005278 D2C0                       		adda.w	d0,a1
0000527A 1011                       		move.b	(a1),d0
0000527C 41F8 F604                  		lea	(v_jpadhold1).w,a0
00005280 1200                       		move.b	d0,d1
00005282 7400                       			moveq	#0,d2
00005284 B500                       		eor.b	d2,d0
00005286 10C1                       		move.b	d1,(a0)+
00005288 C001                       		and.b	d1,d0
0000528A 10C0                       		move.b	d0,(a0)+
0000528C 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
00005290 6400                       		bcc.s	@end
00005292 11E9 0003 F792             		move.b	3(a1),(v_btnpushtime2).w
00005298 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
0000529C                            
0000529C                            	@end:
0000529C 4E75                       		rts	
0000529E                            ; End of function MoveSonicInDemo
0000529E                            
0000529E                            ; ===========================================================================
0000529E                            ; ---------------------------------------------------------------------------
0000529E                            ; Demo sequence	pointers
0000529E                            ; ---------------------------------------------------------------------------
0000529E 0000 0000                  DemoDataPtr:	dc.l Demo_GHZ		; demos run after the title screen
000052A2 0000 0000                  		dc.l Demo_GHZ
000052A6 0000 0000                  		dc.l Demo_MZ
000052AA 0000 0000                  		dc.l Demo_MZ
000052AE 0000 0000                  		dc.l Demo_SYZ
000052B2 0000 0000                  		dc.l Demo_SYZ
000052B6 0000 0000                  		dc.l Demo_SS
000052BA 0000 0000                  		dc.l Demo_SS
000052BE                            
000052BE 0000 0000                  DemoEndDataPtr:	dc.l Demo_EndGHZ1	; demos run during the credits
000052C2 0000 0000                  		dc.l Demo_EndMZ
000052C6 0000 0000                  		dc.l Demo_EndSYZ
000052CA 0000 0000                  		dc.l Demo_EndLZ
000052CE 0000 0000                  		dc.l Demo_EndSLZ
000052D2 0000 0000                  		dc.l Demo_EndSBZ1
000052D6 0000 0000                  		dc.l Demo_EndSBZ2
000052DA 0000 0000                  		dc.l Demo_EndGHZ2
000052DE                            
000052DE 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000052EE 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000052FE 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
0000530E                            		even
0000530E                            		even
0000530E                            
0000530E                            ; ---------------------------------------------------------------------------
0000530E                            ; Collision index pointer loading subroutine
0000530E                            ; ---------------------------------------------------------------------------
0000530E                            
0000530E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000530E                            
0000530E                            
0000530E                            ColIndexLoad:
0000530E 7000                       		moveq	#0,d0
00005310 1038 FE10                  		move.b	(v_zone).w,d0
00005314 E548                       		lsl.w	#2,d0
00005316 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),(v_collindex).w
0000531C 4E75                       		rts	
0000531E                            ; End of function ColIndexLoad
0000531E                            
0000531E                            ; ===========================================================================
0000531E                            ; ---------------------------------------------------------------------------
0000531E                            ; Collision index pointers
0000531E                            ; ---------------------------------------------------------------------------
0000531E 0000 0000                  ColPointers:	dc.l Col_GHZ
00005322 0000 0000                  		dc.l Col_LZ
00005326 0000 0000                  		dc.l Col_MZ
0000532A 0000 0000                  		dc.l Col_SLZ
0000532E 0000 0000                  		dc.l Col_SYZ
00005332 0000 0000                  		dc.l Col_SBZ
00005336                            ;		dc.l Col_GHZ ; Pointer for Ending is missing by default.
00005336                            
00005336                            		include	"_inc\Oscillatory Routines.asm"
00005336                            ; ---------------------------------------------------------------------------
00005336                            ; Oscillating number subroutines
00005336                            ; ---------------------------------------------------------------------------
00005336                            
00005336                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005336                            
00005336                            ; Initialise the values
00005336                            
00005336                            OscillateNumInit:
00005336 43F8 FE5E                  		lea	(v_oscillate).w,a1
0000533A 45F9 0000 0000             		lea	(@baselines).l,a2
00005340 7220                       		moveq	#$20,d1
00005342                            
00005342                            	@loop:
00005342 32DA                       		move.w	(a2)+,(a1)+	; copy baseline values to RAM
00005344 51C9 FFFC                  		dbf	d1,@loop
00005348 4E75                       		rts	
0000534A                            
0000534A                            
0000534A                            ; ===========================================================================
0000534A 007C                       @baselines:	dc.w %0000000001111100	; oscillation direction bitfield
0000534C 0080 0000                  		dc.w $80, 0
00005350 0080 0000                  		dc.w $80, 0
00005354 0080 0000                  		dc.w $80, 0
00005358 0080 0000                  		dc.w $80, 0
0000535C 0080 0000                  		dc.w $80, 0
00005360 0080 0000                  		dc.w $80, 0
00005364 0080 0000                  		dc.w $80, 0
00005368 0080 0000                  		dc.w $80, 0
0000536C 0080 0000                  		dc.w $80, 0
00005370 50F0 011E                  		dc.w $50F0, $11E
00005374 2080 00B4                  		dc.w $2080, $B4
00005378 3080 010E                  		dc.w $3080, $10E
0000537C 5080 01C2                  		dc.w $5080, $1C2
00005380 7080 0276                  		dc.w $7080, $276
00005384 0080 0000                  		dc.w $80, 0
00005388 0080 0000                  		dc.w $80, 0
0000538C                            		even
0000538C                            
0000538C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000538C                            
0000538C                            ; Oscillate values
0000538C                            
0000538C                            OscillateNumDo:
0000538C 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00005392 6400                       		bcc.s	@end		; if yes, branch
00005394 43F8 FE5E                  		lea	(v_oscillate).w,a1
00005398 45F9 0000 0000             		lea	(@settings).l,a2
0000539E 3619                       		move.w	(a1)+,d3	; get oscillation direction bitfield
000053A0 720F                       		moveq	#$F,d1
000053A2                            
000053A2                            @loop:
000053A2 341A                       		move.w	(a2)+,d2	; get frequency
000053A4 381A                       		move.w	(a2)+,d4	; get amplitude
000053A6 0303                       		btst	d1,d3		; check oscillation direction
000053A8 6600                       		bne.s	@down		; branch if 1
000053AA                            
000053AA                            	@up:
000053AA 3029 0002                  		move.w	2(a1),d0	; get current rate
000053AE D042                       		add.w	d2,d0		; add frequency
000053B0 3340 0002                  		move.w	d0,2(a1)
000053B4 D151                       		add.w	d0,0(a1)	; add rate to value
000053B6 B811                       		cmp.b	0(a1),d4
000053B8 6200                       		bhi.s	@next
000053BA 03C3                       		bset	d1,d3
000053BC 6000                       		bra.s	@next
000053BE                            
000053BE                            	@down:
000053BE 3029 0002                  		move.w	2(a1),d0
000053C2 9042                       		sub.w	d2,d0
000053C4 3340 0002                  		move.w	d0,2(a1)
000053C8 D151                       		add.w	d0,0(a1)
000053CA B811                       		cmp.b	0(a1),d4
000053CC 6300                       		bls.s	@next
000053CE 0383                       		bclr	d1,d3
000053D0                            
000053D0                            	@next:
000053D0 5849                       		addq.w	#4,a1
000053D2 51C9 FFCE                  		dbf	d1,@loop
000053D6 31C3 FE5E                  		move.w	d3,(v_oscillate).w
000053DA                            
000053DA                            @end:
000053DA 4E75                       		rts	
000053DC                            ; End of function OscillateNumDo
000053DC                            
000053DC                            ; ===========================================================================
000053DC 0002 0010                  @settings:	dc.w 2,	$10	; frequency, amplitude
000053E0 0002 0018                  		dc.w 2,	$18
000053E4 0002 0020                  		dc.w 2,	$20
000053E8 0002 0030                  		dc.w 2,	$30
000053EC 0004 0020                  		dc.w 4,	$20
000053F0 0008 0008                  		dc.w 8,	8
000053F4 0008 0040                  		dc.w 8,	$40
000053F8 0004 0040                  		dc.w 4,	$40
000053FC 0002 0050                  		dc.w 2,	$50
00005400 0002 0050                  		dc.w 2,	$50
00005404 0002 0020                  		dc.w 2,	$20
00005408 0003 0030                  		dc.w 3,	$30
0000540C 0005 0050                  		dc.w 5,	$50
00005410 0007 0070                  		dc.w 7,	$70
00005414 0002 0010                  		dc.w 2,	$10
00005418 0002 0010                  		dc.w 2,	$10
0000541C                            		even
0000541C                            		even
0000541C                            
0000541C                            ; ---------------------------------------------------------------------------
0000541C                            ; Subroutine to	change synchronised animation variables (rings, giant rings)
0000541C                            ; ---------------------------------------------------------------------------
0000541C                            
0000541C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000541C                            
0000541C                            
0000541C                            SynchroAnimate:
0000541C                            
0000541C                            ; Used for GHZ spiked log
0000541C                            Sync1:
0000541C 5338 FEC0                  		subq.b	#1,(v_ani0_time).w ; has timer reached 0?
00005420 6A00                       		bpl.s	Sync2		; if not, branch
00005422 11FC 000B FEC0             		move.b	#$B,(v_ani0_time).w ; reset timer
00005428 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w ; next frame
0000542C 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w ; max frame is 7
00005432                            
00005432                            ; Used for rings and giant rings
00005432                            Sync2:
00005432 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
00005436 6A00                       		bpl.s	Sync3
00005438 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0000543E 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
00005442 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
00005448                            
00005448                            ; Used for nothing
00005448                            Sync3:
00005448 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0000544C 6A00                       		bpl.s	Sync4
0000544E 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
00005454 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
00005458 0C38 0006 FEC5             		cmpi.b	#6,(v_ani2_frame).w
0000545E 6500                       		blo.s	Sync4
00005460 11FC 0000 FEC5             		move.b	#0,(v_ani2_frame).w
00005466                            
00005466                            ; Used for bouncing rings
00005466                            Sync4:
00005466 4A38 FEC6                  		tst.b	(v_ani3_time).w
0000546A 6700                       		beq.s	SyncEnd
0000546C 7000                       		moveq	#0,d0
0000546E 1038 FEC6                  		move.b	(v_ani3_time).w,d0
00005472 D078 FEC8                  		add.w	(v_ani3_buf).w,d0
00005476 31C0 FEC8                  		move.w	d0,(v_ani3_buf).w
0000547A EF58                       		rol.w	#7,d0
0000547C 0240 0003                  		andi.w	#3,d0
00005480 11C0 FEC7                  		move.b	d0,(v_ani3_frame).w
00005484 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
00005488                            
00005488                            SyncEnd:
00005488 4E75                       		rts	
0000548A                            ; End of function SynchroAnimate
0000548A                            
0000548A                            ; ---------------------------------------------------------------------------
0000548A                            ; End-of-act signpost pattern loading subroutine
0000548A                            ; ---------------------------------------------------------------------------
0000548A                            
0000548A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000548A                            
0000548A                            
0000548A                            SignpostArtLoad:
0000548A 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0000548E 6600 0000                  		bne.w	@exit		; if yes, branch
00005492 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; is act number 02 (act 3)?
00005498 6700                       		beq.s	@exit		; if yes, branch
0000549A                            
0000549A 3038 F700                  		move.w	(v_screenposx).w,d0
0000549E 3238 F72A                  		move.w	(v_limitright2).w,d1
000054A2 0441 0100                  		subi.w	#$100,d1
000054A6 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000054A8 6D00                       		blt.s	@exit		; if not, branch
000054AA 4A38 FE1E                  		tst.b	(f_timecount).w
000054AE 6700                       		beq.s	@exit
000054B0 B278 F728                  		cmp.w	(v_limitleft2).w,d1
000054B4 6700                       		beq.s	@exit
000054B6 31C1 F728                  		move.w	d1,(v_limitleft2).w ; move left boundary to current screen position
000054BA 7000                       		moveq	#plcid_Signpost,d0
000054BC 6000 C2AE                  		bra.w	NewPLC		; load signpost	patterns
000054C0                            
000054C0                            	@exit:
000054C0 4E75                       		rts	
000054C2                            ; End of function SignpostArtLoad
000054C2                            
000054C2                            ; ===========================================================================
000054C2                            Demo_GHZ:	incbin	"demodata\Intro - GHZ.bin"
00005542                            Demo_MZ:	incbin	"demodata\Intro - MZ.bin"
00005672                            Demo_SYZ:	incbin	"demodata\Intro - SYZ.bin"
000056F2                            Demo_SS:	incbin	"demodata\Intro - Special Stage.bin"
000057F2                            ; ===========================================================================
000057F2                            
000057F2                            ; ---------------------------------------------------------------------------
000057F2                            ; Special Stage
000057F2                            ; ---------------------------------------------------------------------------
000057F2                            
000057F2                            GM_Special:
000057FA 6100 CC88                  		bsr.w	PaletteWhiteOut
000057FE 46FC 2700                  		disable_ints
00005802 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005808 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
0000580C 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
00005810 31FC 8AAF F624             		move.w	#$8A00+175,(v_hbla_hreg).w
00005816 3CBC 9011                  		move.w	#$9011,(a6)	; 128-cell hscroll size
0000581A 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
0000581E 0200 00BF                  		andi.b	#$BF,d0
00005822 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005828 6100 B9A6                  		bsr.w	ClearScreen
0000582C 46FC 2300                  		enable_ints
00005830 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$6FFF,$5000
00005852                            
00005852                            	SS_WaitForDMA:
00005852 3215                       		move.w	(a5),d1		; read control port ($C00004)
00005854 0801 0001                  		btst	#1,d1		; is DMA running?
00005858 66F8                       		bne.s	SS_WaitForDMA	; if yes, branch
0000585A 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment to 2 bytes
0000585E 6100 0000                  		bsr.w	SS_BGLoad
00005862 7000                       		moveq	#plcid_SpecialStage,d0
00005864 6100 C040                  		bsr.w	QuickPLC	; load special stage patterns
00005868                            
00005868 43F8 D000                  		lea	(v_objspace).w,a1
0000586C 7000                       		moveq	#0,d0
0000586E 323C 07FF                  		move.w	#$7FF,d1
00005872                            	SS_ClrObjRam:
00005872 22C0                       		move.l	d0,(a1)+
00005874 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00005878                            
00005878 43F8 F700                  		lea	(v_screenposx).w,a1
0000587C 7000                       		moveq	#0,d0
0000587E 323C 003F                  		move.w	#$3F,d1
00005882                            	SS_ClrRam1:
00005882 22C0                       		move.l	d0,(a1)+
00005884 51C9 FFFC                  		dbf	d1,SS_ClrRam1	; clear	variables
00005888                            
00005888 43F8 FE60                  		lea	(v_oscillate+2).w,a1
0000588C 7000                       		moveq	#0,d0
0000588E 323C 0027                  		move.w	#$27,d1
00005892                            	SS_ClrRam2:
00005892 22C0                       		move.l	d0,(a1)+
00005894 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00005898                            
00005898 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
0000589C 7000                       		moveq	#0,d0
0000589E 323C 007F                  		move.w	#$7F,d1
000058A2                            	SS_ClrNemRam:
000058A2 22C0                       		move.l	d0,(a1)+
000058A4 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
000058A8                            
000058A8 4238 F64E                  		clr.b	(f_wtr_state).w
000058AC 4278 FE02                  		clr.w	(f_restart).w
000058B0 700A                       		moveq	#palid_Special,d0
000058B2 6100 CD50                  		bsr.w	PalLoad1	; load special stage palette
000058B6 4EB9 0000 0000             		jsr	(SS_Load).l		; load SS layout data
000058BC 21FC 0000 0000 F700        		move.l	#0,(v_screenposx).w
000058C4 21FC 0000 0000 F704        		move.l	#0,(v_screenposy).w
000058CC 11FC 0000 D000             		move.b	#id_SonicSpecial,(v_player).w ; load special stage Sonic object
000058D2 6100 0000                  		bsr.w	PalCycle_SS
000058D6 4278 F780                  		clr.w	(v_ssangle).w	; set stage angle to "upright"
000058DA 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set stage rotation speed
000058E8 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
000058EE 43F9 0000 529E             		lea	(DemoDataPtr).l,a1
000058F4 7006                       		moveq	#6,d0
000058F6 E548                       		lsl.w	#2,d0
000058F8 2271 0000                  		movea.l	(a1,d0.w),a1
000058FC 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w
00005902 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
00005906 4278 FE20                  		clr.w	(v_rings).w
0000590A 4238 FE1B                  		clr.b	(v_lifecount).w
0000590E 31FC 0000 FE08             		move.w	#0,(v_debuguse).w
00005914 31FC 0708 F614             		move.w	#1800,(v_demolength).w
0000591A 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
0000591E 6700                       		beq.s	SS_NoDebug	; if not, branch
00005920 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button pressed?
00005926 6700                       		beq.s	SS_NoDebug	; if not, branch
00005928 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
0000592E                            
0000592E                            	SS_NoDebug:
0000592E 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005932 0000 0040                  		ori.b	#$40,d0
00005936 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000593C 6100 CA9A                  		bsr.w	PaletteWhiteIn
00005940                            
00005940                            ; ---------------------------------------------------------------------------
00005940                            ; Main Special Stage loop
00005940                            ; ---------------------------------------------------------------------------
00005940                            
00005940                            SS_MainLoop:
00005940 6100 B96A                  		bsr.w	PauseGame
00005944 11FC 000A F62A             		move.b	#$A,(v_vbla_routine).w
0000594A 6100 E34C                  		bsr.w	WaitForVBla
0000594E 6100 F89E                  		bsr.w	MoveSonicInDemo
00005952 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
00005958 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000595E 4EB9 0000 0000             		jsr	(BuildSprites).l
00005964 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
0000596A 6100 0000                  		bsr.w	SS_BGAnimate
0000596E 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00005972 6700                       		beq.s	SS_ChkEnd	; if not, branch
00005974 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00005978 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
0000597C                            
0000597C                            	SS_ChkEnd:
0000597C 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
00005982 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00005986                            
00005986 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
0000598A 6600 0000                  		bne.w	SS_ToLevel
0000598E 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005994 0C78 0503 FE10             		cmpi.w	#(id_SBZ<<8)+3,(v_zone).w ; is level number higher than FZ?
0000599A 6500                       		blo.s	SS_Finish	; if not, branch
0000599C 4278 FE10                  		clr.w	(v_zone).w	; set to GHZ1
000059A0                            
000059A0                            SS_Finish:
000059A0 31FC 003C F614             		move.w	#60,(v_demolength).w ; set delay time to 1 second
000059A6 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
000059AC 4278 F794                  		clr.w	(v_palchgspeed).w
000059B0                            
000059B0                            	SS_FinLoop:
000059B0 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000059B6 6100 E2E0                  		bsr.w	WaitForVBla
000059BA 6100 F832                  		bsr.w	MoveSonicInDemo
000059BE 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
000059C4 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000059CA 4EB9 0000 0000             		jsr	(BuildSprites).l
000059D0 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
000059D6 6100 0000                  		bsr.w	SS_BGAnimate
000059DA 5378 F794                  		subq.w	#1,(v_palchgspeed).w
000059DE 6A00                       		bpl.s	loc_47D4
000059E0 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
000059E6 6100 CABC                  		bsr.w	WhiteOut_ToWhite
000059EA                            
000059EA                            loc_47D4:
000059EA 4A78 F614                  		tst.w	(v_demolength).w
000059EE 66C0                       		bne.s	SS_FinLoop
000059F0                            
000059F0 46FC 2700                  		disable_ints
000059F4 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000059FA 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000059FE 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00005A02 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00005A06 6100 B7C8                  		bsr.w	ClearScreen
00005A14 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005A1A 6100 B932                  		bsr.w	NemDec
00005A1E 4EB9 0000 0000             		jsr	(Hud_Base).l
00005A24 31FC C800 C8FC             		ResetDMAQueue	
00005A2A 46FC 2300                  		enable_ints
00005A2E 7011                       		moveq	#palid_SSResult,d0
00005A30 6100 CC0E                  		bsr.w	PalLoad2	; load results screen palette
00005A34 7000                       		moveq	#plcid_Main,d0
00005A36 6100 BD34                  		bsr.w	NewPLC
00005A3A 7000                       		moveq	#plcid_SSResult,d0
00005A3C 6100 BCFC                  		bsr.w	AddPLC		; load results screen patterns
00005A40 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00005A46 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; update ring bonus counter
00005A4C 3038 FE20                  		move.w	(v_rings).w,d0
00005A50 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00005A54 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set rings bonus
00005A62                            
00005A62 43F8 D000                  		lea	(v_objspace).w,a1
00005A66 7000                       		moveq	#0,d0
00005A68 323C 07FF                  		move.w	#$7FF,d1
00005A6C                            	SS_EndClrObjRam:
00005A6C 22C0                       		move.l	d0,(a1)+
00005A6E 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00005A72                            
00005A72 11FC 0000 D5C0             		move.b	#id_SSResult,(v_objspace+$5C0).w ; load results screen object
00005A78                            
00005A78                            SS_NormalExit:
00005A78 6100 B832                  		bsr.w	PauseGame
00005A7C 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00005A82 6100 E214                  		bsr.w	WaitForVBla
00005A86 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005A8C 4EB9 0000 0000             		jsr	(BuildSprites).l
00005A92 6100 BD12                  		bsr.w	RunPLC
00005A96 4A78 FE02                  		tst.w	(f_restart).w
00005A9A 67DC                       		beq.s	SS_NormalExit
00005A9C 4AB8 F680                  		tst.l	(v_plc_buffer).w
00005AA0 66D6                       		bne.s	SS_NormalExit
00005AAA 6100 C9D8                  		bsr.w	PaletteWhiteOut
00005AAE 4E75                       		rts	
00005AB0                            ; ===========================================================================
00005AB0                            
00005AB0                            SS_ToSegaScreen:
00005AB0 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00005AB6 4E75                       		rts
00005AB8                            
00005AB8 0C38 0000 F600             SS_ToLevel:	cmpi.b	#id_Level,(v_gamemode).w
00005ABE 67F0                       		beq.s	SS_ToSegaScreen
00005AC0 4E75                       		rts
00005AC2                            
00005AC2                            ; ---------------------------------------------------------------------------
00005AC2                            ; Special stage	background loading subroutine
00005AC2                            ; ---------------------------------------------------------------------------
00005AC2                            
00005AC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005AC2                            
00005AC2                            
00005AC2                            SS_BGLoad:
00005AC2 43F9 00FF 0000             		lea	($FF0000).l,a1
00005AC8 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00005ACE 303C 4051                  		move.w	#$4051,d0
00005AD2 6100 BE04                  		bsr.w	EniDec
00005AD6 263C 5000 0001             		move.l	#$50000001,d3
00005ADC 45F9 00FF 0080             		lea	($FF0080).l,a2
00005AE2 7E06                       		moveq	#6,d7
00005AE4                            
00005AE4                            loc_48BE:
00005AE4 2003                       		move.l	d3,d0
00005AE6 7C03                       		moveq	#3,d6
00005AE8 7800                       		moveq	#0,d4
00005AEA 0C47 0003                  		cmpi.w	#3,d7
00005AEE 6400                       		bhs.s	loc_48CC
00005AF0 7801                       		moveq	#1,d4
00005AF2                            
00005AF2                            loc_48CC:
00005AF2 7A07                       		moveq	#7,d5
00005AF4                            
00005AF4                            loc_48CE:
00005AF4 224A                       		movea.l	a2,a1
00005AF6 0A04 0001                  		eori.b	#1,d4
00005AFA 6600                       		bne.s	loc_48E2
00005AFC 0C47 0006                  		cmpi.w	#6,d7
00005B00 6600                       		bne.s	loc_48F2
00005B02 43F9 00FF 0000             		lea	($FF0000).l,a1
00005B08                            
00005B08                            loc_48E2:
00005B08 48E7 F800                  		movem.l	d0-d4,-(sp)
00005B0C 7207                       		moveq	#7,d1
00005B0E 7407                       		moveq	#7,d2
00005B10 6100 B812                  		bsr.w	TilemapToVRAM
00005B14 4CDF 001F                  		movem.l	(sp)+,d0-d4
00005B18                            
00005B18                            loc_48F2:
00005B18 0680 0010 0000             		addi.l	#$100000,d0
00005B1E 51CD FFD4                  		dbf	d5,loc_48CE
00005B22 0680 0380 0000             		addi.l	#$3800000,d0
00005B28 0A04 0001                  		eori.b	#1,d4
00005B2C 51CE FFC4                  		dbf	d6,loc_48CC
00005B30 0683 1000 0000             		addi.l	#$10000000,d3
00005B36 6A00                       		bpl.s	loc_491C
00005B38 4843                       		swap	d3
00005B3A 0683 0000 C000             		addi.l	#$C000,d3
00005B40 4843                       		swap	d3
00005B42                            
00005B42                            loc_491C:
00005B42 D4FC 0080                  		adda.w	#$80,a2
00005B46 51CF FF9C                  		dbf	d7,loc_48BE
00005B4A 43F9 00FF 0000             		lea	($FF0000).l,a1
00005B50 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00005B56 303C 4000                  		move.w	#$4000,d0
00005B5A 6100 BD7C                  		bsr.w	EniDec
00005B5E 43F9 00FF 0000             		lea	($FF0000).l,a1
00005B64 203C 4000 0003             		move.l	#$40000003,d0
00005B6A 723F                       		moveq	#$3F,d1
00005B6C 741F                       		moveq	#$1F,d2
00005B6E 6100 B7B4                  		bsr.w	TilemapToVRAM
00005B72 43F9 00FF 0000             		lea	($FF0000).l,a1
00005B78 203C 5000 0003             		move.l	#$50000003,d0
00005B7E 723F                       		moveq	#$3F,d1
00005B80 743F                       		moveq	#$3F,d2
00005B82 6100 B7A0                  		bsr.w	TilemapToVRAM
00005B86 4E75                       		rts	
00005B88                            ; End of function SS_BGLoad
00005B88                            
00005B88                            ; ---------------------------------------------------------------------------
00005B88                            ; Palette cycling routine - special stage
00005B88                            ; ---------------------------------------------------------------------------
00005B88                            
00005B88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005B88                            
00005B88                            
00005B88                            PalCycle_SS:
00005B88 4A78 F63A                  		tst.w	(f_pause).w
00005B8C 6600                       		bne.s	locret_49E6
00005B8E 5378 F79C                  		subq.w	#1,(v_palss_time).w
00005B92 6A00                       		bpl.s	locret_49E6
00005B94 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005B9A 3038 F79A                  		move.w	(v_palss_num).w,d0
00005B9E 5278 F79A                  		addq.w	#1,(v_palss_num).w
00005BA2 0240 001F                  		andi.w	#$1F,d0
00005BA6 E548                       		lsl.w	#2,d0
00005BA8 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00005BAE D0C0                       		adda.w	d0,a0
00005BB0 1018                       		move.b	(a0)+,d0
00005BB2 6A00                       		bpl.s	loc_4992
00005BB4 303C 01FF                  		move.w	#$1FF,d0
00005BB8                            
00005BB8                            loc_4992:
00005BB8 31C0 F79C                  		move.w	d0,(v_palss_time).w
00005BBC 7000                       		moveq	#0,d0
00005BBE 1018                       		move.b	(a0)+,d0
00005BC0 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00005BC4 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00005BCA 43F1 0000                  		lea	(a1,d0.w),a1
00005BCE 303C 8200                  		move.w	#-$7E00,d0
00005BD2 1019                       		move.b	(a1)+,d0
00005BD4 3C80                       		move.w	d0,(a6)
00005BD6 11D1 F616                  		move.b	(a1),(v_scrposy_dup).w
00005BDA 303C 8400                  		move.w	#-$7C00,d0
00005BDE 1018                       		move.b	(a0)+,d0
00005BE0 3C80                       		move.w	d0,(a6)
00005BE2 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00005BEC 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l
00005BF4 7000                       		moveq	#0,d0
00005BF6 1018                       		move.b	(a0)+,d0
00005BF8 6B00                       		bmi.s	loc_49E8
00005BFA 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00005C00 D2C0                       		adda.w	d0,a1
00005C02 45F8 FB4E                  		lea	(v_pal_dry+$4E).w,a2
00005C06 24D9                       		move.l	(a1)+,(a2)+
00005C08 24D9                       		move.l	(a1)+,(a2)+
00005C0A 24D9                       		move.l	(a1)+,(a2)+
00005C0C                            
00005C0C                            locret_49E6:
00005C0C 4E75                       		rts	
00005C0E                            ; ===========================================================================
00005C0E                            
00005C0E                            loc_49E8:
00005C0E 3238 F79E                  		move.w	($FFFFF79E).w,d1
00005C12 0C40 008A                  		cmpi.w	#$8A,d0
00005C16 6500                       		blo.s	loc_49F4
00005C18 5241                       		addq.w	#1,d1
00005C1A                            
00005C1A                            loc_49F4:
00005C1A C2FC 002A                  		mulu.w	#$2A,d1
00005C1E 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00005C24 D2C1                       		adda.w	d1,a1
00005C26 0240 007F                  		andi.w	#$7F,d0
00005C2A 0880 0000                  		bclr	#0,d0
00005C2E 6700                       		beq.s	loc_4A18
00005C30 45F8 FB6E                  		lea	(v_pal_dry+$6E).w,a2
00005C34 24D1                       		move.l	(a1),(a2)+
00005C36 24E9 0004                  		move.l	4(a1),(a2)+
00005C3A 24E9 0008                  		move.l	8(a1),(a2)+
00005C3E                            
00005C3E                            loc_4A18:
00005C3E D2FC 000C                  		adda.w	#$C,a1
00005C42 45F8 FB5A                  		lea	(v_pal_dry+$5A).w,a2
00005C46 0C40 000A                  		cmpi.w	#$A,d0
00005C4A 6500                       		blo.s	loc_4A2E
00005C4C 0440 000A                  		subi.w	#$A,d0
00005C50 45F8 FB7A                  		lea	(v_pal_dry+$7A).w,a2
00005C54                            
00005C54                            loc_4A2E:
00005C54 3200                       		move.w	d0,d1
00005C56 D040                       		add.w	d0,d0
00005C58 D041                       		add.w	d1,d0
00005C5A D2C0                       		adda.w	d0,a1
00005C5C 24D9                       		move.l	(a1)+,(a2)+
00005C5E 34D9                       		move.w	(a1)+,(a2)+
00005C60 4E75                       		rts	
00005C62                            ; End of function PalCycle_SS
00005C62                            
00005C62                            ; ===========================================================================
00005C62 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00005C72                            
00005C72 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00005C82 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00005C92 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00005CA2 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00005CB2 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00005CC2 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00005CD2 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005CE2                            		even
00005CE2 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005CF0                            		even
00005CF0                            
00005CF0                            Pal_SSCyc1:	incbin	"palette\Cycle - Special Stage 1.bin"
00005D38                            		even
00005D38                            Pal_SSCyc2:	incbin	"palette\Cycle - Special Stage 2.bin"
00005E0A                            		even
00005E0A                            
00005E0A                            ; ---------------------------------------------------------------------------
00005E0A                            ; Subroutine to	make the special stage background animated
00005E0A                            ; ---------------------------------------------------------------------------
00005E0A                            
00005E0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005E0A                            
00005E0A                            
00005E0A                            SS_BGAnimate:
00005E0A 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005E0E 6600                       		bne.s	loc_4BF6
00005E10 31FC 0000 F70C             		move.w	#0,(v_bgscreenposy).w
00005E16 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005E1C                            
00005E1C                            loc_4BF6:
00005E1C 0C40 0008                  		cmpi.w	#8,d0
00005E20 6400                       		bhs.s	loc_4C4E
00005E22 0C40 0006                  		cmpi.w	#6,d0
00005E26 6600                       		bne.s	loc_4C10
00005E28 5278 F718                  		addq.w	#1,(v_bg3screenposx).w
00005E2C 5278 F70C                  		addq.w	#1,(v_bgscreenposy).w
00005E30 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005E36                            
00005E36                            loc_4C10:
00005E36 7000                       		moveq	#0,d0
00005E38 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00005E3C 4440                       		neg.w	d0
00005E3E 4840                       		swap	d0
00005E40 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005E46 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005E4A 7609                       		moveq	#9,d3
00005E4C                            
00005E4C                            loc_4C26:
00005E4C 302B 0002                  		move.w	2(a3),d0
00005E50 6100 DE78                  		bsr.w	CalcSine
00005E54 7400                       		moveq	#0,d2
00005E56 1419                       		move.b	(a1)+,d2
00005E58 C1C2                       		muls.w	d2,d0
00005E5A E080                       		asr.l	#8,d0
00005E5C 36C0                       		move.w	d0,(a3)+
00005E5E 1419                       		move.b	(a1)+,d2
00005E60 4882                       		ext.w	d2
00005E62 D55B                       		add.w	d2,(a3)+
00005E64 51CB FFE6                  		dbf	d3,loc_4C26
00005E68 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005E6C 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005E72 6000                       		bra.s	loc_4C7E
00005E74                            ; ===========================================================================
00005E74                            
00005E74                            loc_4C4E:
00005E74 0C40 000C                  		cmpi.w	#$C,d0
00005E78 6600                       		bne.s	loc_4C74
00005E7A 5378 F718                  		subq.w	#1,(v_bg3screenposx).w
00005E7E 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005E82 243C 0001 8000             		move.l	#$18000,d2
00005E88 7206                       		moveq	#6,d1
00005E8A                            
00005E8A                            loc_4C64:
00005E8A 2013                       		move.l	(a3),d0
00005E8C 9082                       		sub.l	d2,d0
00005E8E 26C0                       		move.l	d0,(a3)+
00005E90 0482 0000 2000             		subi.l	#$2000,d2
00005E96 51C9 FFF2                  		dbf	d1,loc_4C64
00005E9A                            
00005E9A                            loc_4C74:
00005E9A 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005E9E 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005EA4                            
00005EA4                            loc_4C7E:
00005EA4 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00005EA8 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00005EAC 4440                       		neg.w	d0
00005EAE 4840                       		swap	d0
00005EB0 7600                       		moveq	#0,d3
00005EB2 161A                       		move.b	(a2)+,d3
00005EB4 3438 F70C                  		move.w	(v_bgscreenposy).w,d2
00005EB8 4442                       		neg.w	d2
00005EBA 0242 00FF                  		andi.w	#$FF,d2
00005EBE E54A                       		lsl.w	#2,d2
00005EC0                            
00005EC0                            loc_4C9A:
00005EC0 301B                       		move.w	(a3)+,d0
00005EC2 544B                       		addq.w	#2,a3
00005EC4 7200                       		moveq	#0,d1
00005EC6 121A                       		move.b	(a2)+,d1
00005EC8 5341                       		subq.w	#1,d1
00005ECA                            
00005ECA                            loc_4CA4:
00005ECA 2380 2000                  		move.l	d0,(a1,d2.w)
00005ECE 5842                       		addq.w	#4,d2
00005ED0 0242 03FC                  		andi.w	#$3FC,d2
00005ED4 51C9 FFF4                  		dbf	d1,loc_4CA4
00005ED8 51CB FFE6                  		dbf	d3,loc_4C9A
00005EDC 4E75                       		rts	
00005EDE                            ; End of function SS_BGAnimate
00005EDE                            
00005EDE                            ; ===========================================================================
00005EDE 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005EEA                            		even
00005EEA 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005EF2                            		even
00005EF2 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005F06                            		even
00005F06                            
00005F06                            ; ===========================================================================
00005F06                            
00005F06                            ; ---------------------------------------------------------------------------
00005F06                            ; Continue screen
00005F06                            ; ---------------------------------------------------------------------------
00005F06                            
00005F06                            GM_Continue:
00005F06 6100 C452                  		bsr.w	PaletteFadeOut
00005F0A 46FC 2700                  		disable_ints
00005F0E 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005F12 0200 00BF                  		andi.b	#$BF,d0
00005F16 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005F1C 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005F22 3CBC 8004                  		move.w	#$8004,(a6)	; 8 colour mode
00005F26 3CBC 8700                  		move.w	#$8700,(a6)	; background colour
00005F2A 6100 B2A4                  		bsr.w	ClearScreen
00005F2E 31FC C800 C8FC             		ResetDMAQueue
00005F34 43F8 D000                  		lea	(v_objspace).w,a1
00005F38 7000                       		moveq	#0,d0
00005F3A 323C 07FF                  		move.w	#$7FF,d1
00005F3E                            	Cont_ClrObjRam:
00005F3E 22C0                       		move.l	d0,(a1)+
00005F40 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005F44                            
00005F4E 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005F54 6100 B3F8                  		bsr.w	NemDec
00005F62 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005F68 6100 B3E4                  		bsr.w	NemDec
00005F76 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005F7C 6100 B3D0                  		bsr.w	NemDec
00005F80 720A                       		moveq	#10,d1
00005F82 4EB9 0000 0000             		jsr	(ContScrCounter).l	; run countdown	(start from 10)
00005F88 7012                       		moveq	#palid_Continue,d0
00005F8A 6100 C678                  		bsr.w	PalLoad1	; load continue	screen palette
00005F96 31FC 0293 F614             		move.w	#659,(v_demolength).w ; set time delay to 11 seconds
00005F9C 42B8 F700                  		clr.l	(v_screenposx).w
00005FA0 21FC 0100 0000 F704        		move.l	#$1000000,(v_screenposy).w
00005FA8 11FC 0000 D000             		move.b	#id_ContSonic,(v_player).w ; load Sonic object
00005FAE 11FC 0000 D040             		move.b	#id_ContScrItem,(v_objspace+$40).w ; load continue screen objects
00005FB4 11FC 0000 D080             		move.b	#id_ContScrItem,(v_objspace+$80).w
00005FBA 11FC 0003 D098             		move.b	#3,(v_objspace+$80+obPriority).w
00005FC0 11FC 0004 D09A             		move.b	#4,(v_objspace+$80+obFrame).w
00005FC6 11FC 0000 D0C0             		move.b	#id_ContScrItem,(v_objspace+$C0).w
00005FCC 11FC 0004 D0E4             		move.b	#4,(v_objspace+$C0+obRoutine).w
00005FD2 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005FD8 4EB9 0000 0000             		jsr	(BuildSprites).l
00005FDE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005FE2 0000 0040                  		ori.b	#$40,d0
00005FE6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005FEC 6100 C2C6                  		bsr.w	PaletteFadeIn
00005FF0                            
00005FF0                            ; ---------------------------------------------------------------------------
00005FF0                            ; Continue screen main loop
00005FF0                            ; ---------------------------------------------------------------------------
00005FF0                            
00005FF0                            Cont_MainLoop:
00005FF0 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00005FF6 6100 DCA0                  		bsr.w	WaitForVBla
00005FFA 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00006000 6400                       		bhs.s	loc_4DF2
00006002 46FC 2700                  		disable_ints
00006006 3238 F614                  		move.w	(v_demolength).w,d1
0000600A 82FC 003C                  		divu.w	#$3C,d1
0000600E 0281 0000 000F             		andi.l	#$F,d1
00006014 4EB9 0000 0000             		jsr	(ContScrCounter).l
0000601A 46FC 2300                  		enable_ints
0000601E                            
0000601E                            loc_4DF2:
0000601E 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006024 4EB9 0000 0000             		jsr	(BuildSprites).l
0000602A 0C78 0180 D008             		cmpi.w	#$180,(v_player+obX).w ; has Sonic run off screen?
00006030 6400                       		bhs.s	Cont_GotoLevel	; if yes, branch
00006032 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00006038 64B6                       		bhs.s	Cont_MainLoop
0000603A 4A78 F614                  		tst.w	(v_demolength).w
0000603E 6600 FFB0                  		bne.w	Cont_MainLoop
00006042 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00006048 4E75                       		rts	
0000604A                            ; ===========================================================================
0000604A                            
0000604A                            Cont_GotoLevel:
0000604A 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00006050 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00006056 7000                       		moveq	#0,d0
00006058 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
0000605C 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00006060 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00006064 11C0 FE30                  		move.b	d0,(v_lastlamp).w ; clear lamppost count
00006068 5338 FE18                  		subq.b	#1,(v_continues).w ; subtract 1 from continues
0000606C 4E75                       		rts	
0000606E                            ; ===========================================================================
0000606E                            
0000606E                            		include	"_incObj\80 Continue Screen Elements.asm"
0000606E                            ; ---------------------------------------------------------------------------
0000606E                            ; Object 80 - Continue screen elements
0000606E                            ; ---------------------------------------------------------------------------
0000606E                            
0000606E                            ContScrItem:
0000606E 7000                       		moveq	#0,d0
00006070 1028 0024                  		move.b	$24(a0),d0
00006074 323B 0000                  		move.w	CSI_Index(pc,d0.w),d1
00006078 4EFB 1000                  		jmp	CSI_Index(pc,d1.w)
0000607C                            ; ===========================================================================
0000607C 0000                       CSI_Index:	dc.w CSI_Main-CSI_Index
0000607E 0000                       		dc.w CSI_Display-CSI_Index
00006080 0000                       		dc.w CSI_MakeMiniSonic-CSI_Index
00006082 0000                       		dc.w CSI_ChkDel-CSI_Index
00006084                            ; ===========================================================================
00006084                            
00006084                            CSI_Main:	; Routine 0
00006084 5428 0024                  		addq.b	#2,obRoutine(a0)
00006088 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00006090 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00006096 117C 0000 0001             		move.b	#0,obRender(a0)
0000609C 117C 003C 0014             		move.b	#$3C,obActWid(a0)
000060A2 317C 0120 0008             		move.w	#$120,obX(a0)
000060A8 317C 00C0 000A             		move.w	#$C0,obScreenY(a0)
000060AE 31FC 0000 FE20             		move.w	#0,(v_rings).w	; clear rings
000060B4                            
000060B4                            CSI_Display:	; Routine 2
000060B4 4EF9 0000 0000             		jmp	(DisplaySprite).l
000060BA                            ; ===========================================================================
000060BA                            
000060BA                            	CSI_MiniSonicPos:
000060BA 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000060CC 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000060D8                            
000060D8                            CSI_MakeMiniSonic:
000060D8                            		; Routine 4
000060D8 2248                       		movea.l	a0,a1
000060DA 45F9 0000 60BA             		lea	(CSI_MiniSonicPos).l,a2
000060E0 7200                       		moveq	#0,d1
000060E2 1238 FE18                  		move.b	(v_continues).w,d1
000060E6 5501                       		subq.b	#2,d1
000060E8 6400                       		bcc.s	CSI_MoreThan1
000060EA 4EF9 0000 0000             		jmp	(DeleteObject).l	; cancel if you have 0-1 continues
000060F0                            
000060F0                            	CSI_MoreThan1:
000060F0 7601                       		moveq	#1,d3
000060F2 0C01 000E                  		cmpi.b	#14,d1		; do you have fewer than 16 continues
000060F6 6500                       		bcs.s	CSI_FewerThan16	; if yes, branch
000060F8                            
000060F8 7600                       		moveq	#0,d3
000060FA 720E                       		moveq	#14,d1		; cap at 15 mini-Sonics
000060FC                            
000060FC                            	CSI_FewerThan16:
000060FC 1401                       		move.b	d1,d2
000060FE 0202 0001                  		andi.b	#1,d2
00006102                            
00006102                            CSI_MiniSonicLoop:
00006102 12BC 0000                  		move.b	#id_ContScrItem,0(a1) ; load mini-Sonic object
00006106 335A 0008                  		move.w	(a2)+,obX(a1)	; use above data for x-axis position
0000610A 4A02                       		tst.b	d2		; do you have an even number of continues?
0000610C 6700                       		beq.s	CSI_Even	; if yes, branch
0000610E 0469 000A 0008             		subi.w	#$A,obX(a1)	; shift mini-Sonics slightly to the right
00006114                            
00006114                            	CSI_Even:
00006114 337C 00D0 000A             		move.w	#$D0,obScreenY(a1)
0000611A 137C 0006 001A             		move.b	#6,obFrame(a1)
00006120 137C 0006 0024             		move.b	#6,obRoutine(a1)
00006126 237C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a1)
0000612E 337C 8551 0002             		move.w	#$8551,obGfx(a1)
00006134 137C 0000 0001             		move.b	#0,obRender(a1)
0000613A 43E9 0040                  		lea	$40(a1),a1
0000613E 51C9 FFC2                  		dbf	d1,CSI_MiniSonicLoop ; repeat for number of continues
00006142                            
00006142 43E9 FFC0                  		lea	-$40(a1),a1
00006146 1343 0028                  		move.b	d3,obSubtype(a1)
0000614A                            
0000614A                            CSI_ChkDel:	; Routine 6
0000614A 4A28 0028                  		tst.b	obSubtype(a0)	; do you have 16 or more continues?
0000614E 6700                       		beq.s	CSI_Animate	; if yes, branch
00006150 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic running?
00006156 6500                       		bcs.s	CSI_Animate	; if not, branch
00006158 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000615C 0200 0001                  		andi.b	#1,d0
00006160 6600                       		bne.s	CSI_Animate
00006162 4A78 D010                  		tst.w	(v_player+obVelX).w ; is Sonic running?
00006166 6600                       		bne.s	CSI_Delete	; if yes, goto delete
00006168 4E75                       		rts	
0000616A                            
0000616A                            CSI_Animate:
0000616A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000616E 0200 000F                  		andi.b	#$F,d0
00006172 6600                       		bne.s	CSI_Display2
00006174 0868 0000 001A             		bchg	#0,obFrame(a0)
0000617A                            
0000617A                            	CSI_Display2:
0000617A 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006180                            ; ===========================================================================
00006180                            
00006180                            CSI_Delete:
00006180 4EF9 0000 0000             		jmp	(DeleteObject).l
00006180 4EF9 0000 0000             		jmp	(DeleteObject).l
00006186                            		include	"_incObj\81 Continue Screen Sonic.asm"
00006186                            ; ---------------------------------------------------------------------------
00006186                            ; Object 81 - Sonic on the continue screen
00006186                            ; ---------------------------------------------------------------------------
00006186                            
00006186                            ContSonic:
00006186 7000                       		moveq	#0,d0
00006188 1028 0024                  		move.b	obRoutine(a0),d0
0000618C 323B 0000                  		move.w	CSon_Index(pc,d0.w),d1
00006190 4EBB 1000                  		jsr	CSon_Index(pc,d1.w)
00006194 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000619A                            ; ===========================================================================
0000619A 0000                       CSon_Index:	dc.w CSon_Main-CSon_Index
0000619C 0000                       		dc.w CSon_ChkLand-CSon_Index
0000619E 0000                       		dc.w CSon_Animate-CSon_Index
000061A0 0000                       		dc.w CSon_Run-CSon_Index
000061A2                            ; ===========================================================================
000061A2                            
000061A2                            CSon_Main:	; Routine 0
000061A2 5428 0024                  		addq.b	#2,obRoutine(a0)
000061A6 317C 00A0 0008             		move.w	#$A0,obX(a0)
000061AC 317C 00C0 000C             		move.w	#$C0,obY(a0)
000061B2 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
000061BA 317C 0780 0002             		move.w	#$780,obGfx(a0)
000061C0 117C 0004 0001             		move.b	#4,obRender(a0)
000061C6 317C 0100 0018             		move.w	#$100,obPriority(a0)
000061CC 117C 0000 001C             		move.b	#id_Float3,obAnim(a0) ; use "floating" animation
000061D2 317C 0400 0012             		move.w	#$400,obVelY(a0) ; make Sonic fall from above
000061D8                            
000061D8                            CSon_ChkLand:	; Routine 2
000061D8 0C68 01A0 000C             		cmpi.w	#$1A0,obY(a0)	; has Sonic landed yet?
000061DE 6600                       		bne.s	CSon_ShowFall	; if not, branch
000061E0                            
000061E0 5428 0024                  		addq.b	#2,obRoutine(a0)
000061E4 4268 0012                  		clr.w	obVelY(a0)	; stop Sonic falling
000061E8 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
000061F0 317C 8500 0002             		move.w	#$8500,obGfx(a0)
000061F6 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000061FC 6000                       		bra.s	CSon_Animate
000061FE                            
000061FE                            CSon_ShowFall:
000061FE 4EB9 0000 0000             		jsr	(SpeedToPos).l
00006204 4EB9 0000 0000             		jsr	(Sonic_Animate).l
0000620A 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00006210                            ; ===========================================================================
00006210                            
00006210                            CSon_Animate:	; Routine 4
00006210 4A38 F605                  		tst.b	(v_jpadpress1).w ; is Start button pressed?
00006214 6B00                       		bmi.s	CSon_GetUp	; if yes, branch
00006216 43F9 0000 0000             		lea	(AniScript_CSon).l,a1
0000621C 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006222                            
00006222                            CSon_GetUp:
00006222 5428 0024                  		addq.b	#2,obRoutine(a0)
00006226 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0000622E 317C 0780 0002             		move.w	#$780,obGfx(a0)
00006234 117C 0000 001C             		move.b	#id_Float4,obAnim(a0) ; use "getting up" animation
0000623A 4268 0020                  		clr.w	obInertia(a0)
0000623E 5168 000C                  		subq.w	#8,obY(a0)
0000624A                            
0000624A                            CSon_Run:	; Routine 6
0000624A 0C68 0800 0020             		cmpi.w	#$800,obInertia(a0) ; check Sonic's inertia
00006250 6600                       		bne.s	CSon_AddInertia	; if too low, branch
00006252 317C 1000 0010             		move.w	#$1000,obVelX(a0) ; move Sonic to the right
00006258 6000                       		bra.s	CSon_ShowRun
0000625A                            
0000625A                            CSon_AddInertia:
0000625A 0668 0020 0020             		addi.w	#$20,obInertia(a0) ; increase inertia
00006260                            
00006260                            CSon_ShowRun:
00006260 4EB9 0000 0000             		jsr	(SpeedToPos).l
00006266 4EB9 0000 0000             		jsr	(Sonic_Animate).l
0000626C 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
0000626C 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00006272                            		include	"_anim\Continue Screen Sonic.asm"
00006272                            ; ---------------------------------------------------------------------------
00006272                            ; Animation script - Sonic on the continue screen
00006272                            ; ---------------------------------------------------------------------------
00006272 0000                       AniScript_CSon:	dc.w A_CSon_1-AniScript_CSon
00006274 0401 0101 0302 0203 03FF   A_CSon_1:	dc.b 4,	1, 1, 1, 3, 2, 2, 3, 3, afEnd
0000627E                            		even
0000627E                            		even
0000627E                            Map_ContScr:	include	"_maps\Continue Screen.asm"
0000627E                            ; --------------------------------------------------------------------------------
0000627E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000627E                            ; --------------------------------------------------------------------------------
0000627E                            
0000627E                            SME_phED7:	
0000627E 0000 0000                  		dc.w SME_phED7_10-SME_phED7, SME_phED7_48-SME_phED7	
00006282 0000 0000                  		dc.w SME_phED7_58-SME_phED7, SME_phED7_68-SME_phED7	
00006286 0000 0000                  		dc.w SME_phED7_78-SME_phED7, SME_phED7_83-SME_phED7	
0000628A 0000 0000                  		dc.w SME_phED7_89-SME_phED7, SME_phED7_8F-SME_phED7	
0000628E 0B                         SME_phED7_10:	dc.b $B	
0000628F F805 0088 C4               		dc.b $F8, 5, 0, $88, $C4	
00006294 F805 00B2 D4               		dc.b $F8, 5, 0, $B2, $D4	
00006299 F805 00AE E4               		dc.b $F8, 5, 0, $AE, $E4	
0000629E F805 00C2 F4               		dc.b $F8, 5, 0, $C2, $F4	
000062A3 F801 00A0 04               		dc.b $F8, 1, 0, $A0, 4	
000062A8 F805 00AE 0C               		dc.b $F8, 5, 0, $AE, $C	
000062AD F805 00C6 1C               		dc.b $F8, 5, 0, $C6, $1C	
000062B2 F805 0090 2C               		dc.b $F8, 5, 0, $90, $2C	
000062B7 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8	
000062BC 3805 2021 08               		dc.b $38, 5, $20, $21, 8	
000062C1 3605 01FC F8               		dc.b $36, 5, 1, $FC, $F8	
000062C6 03                         SME_phED7_48:	dc.b 3	
000062C7 0405 0015 FB               		dc.b 4, 5, 0, $15, $FB	
000062CC F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
000062D1 F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
000062D6 03                         SME_phED7_58:	dc.b 3	
000062D7 0405 0019 FB               		dc.b 4, 5, 0, $19, $FB	
000062DC F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
000062E1 F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
000062E6 03                         SME_phED7_68:	dc.b 3	
000062E7 0405 001D FB               		dc.b 4, 5, 0, $1D, $FB	
000062EC F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
000062F1 F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
000062F6 02                         SME_phED7_78:	dc.b 2	
000062F7 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8	
000062FC 6009 2800 00               		dc.b $60, 9, $28, 0, 0	
00006301 01                         SME_phED7_83:	dc.b 1	
00006302 0006 0012 00               		dc.b 0, 6, 0, $12, 0	
00006307 01                         SME_phED7_89:	dc.b 1	
00006308 0006 0012 00               		dc.b 0, 6, 0, $12, 0	
0000630D 01                         SME_phED7_8F:	dc.b 1	
0000630E 0006 0018 00               		dc.b 0, 6, 0, $18, 0	
00006314 00                         		even
00006314 00                         		even
00006314                            
00006314                            ; ===========================================================================
00006314                            ; ---------------------------------------------------------------------------
00006314                            ; Ending sequence in Green Hill	Zone
00006314                            ; ---------------------------------------------------------------------------
00006314                            
00006314                            GM_Ending:
0000631C 6100 C03C                  		bsr.w	PaletteFadeOut
00006320                            
00006320 43F8 D000                  		lea	(v_objspace).w,a1
00006324 7000                       		moveq	#0,d0
00006326 323C 07FF                  		move.w	#$7FF,d1
0000632A                            	End_ClrObjRam:
0000632A 22C0                       		move.l	d0,(a1)+
0000632C 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00006330                            
00006330 43F8 F628                  		lea	($FFFFF628).w,a1
00006334 7000                       		moveq	#0,d0
00006336 323C 0015                  		move.w	#$15,d1
0000633A                            	End_ClrRam1:
0000633A 22C0                       		move.l	d0,(a1)+
0000633C 51C9 FFFC                  		dbf	d1,End_ClrRam1	; clear	variables
00006340                            
00006340 43F8 F700                  		lea	(v_screenposx).w,a1
00006344 7000                       		moveq	#0,d0
00006346 323C 003F                  		move.w	#$3F,d1
0000634A                            	End_ClrRam2:
0000634A 22C0                       		move.l	d0,(a1)+
0000634C 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00006350                            
00006350 43F8 FE60                  		lea	(v_oscillate+2).w,a1
00006354 7000                       		moveq	#0,d0
00006356 323C 0047                  		move.w	#$47,d1
0000635A                            	End_ClrRam3:
0000635A 22C0                       		move.l	d0,(a1)+
0000635C 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00006360                            
00006360 46FC 2700                  		disable_ints
00006364 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00006368 0200 00BF                  		andi.b	#$BF,d0
0000636C 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00006372 6100 AE5C                  		bsr.w	ClearScreen
00006376 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
0000637C 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00006380 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00006384 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00006388 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
0000638C 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00006390 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
00006394 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00006398 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
0000639E 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
000063A2 31FC 001E FE14             		move.w	#30,(v_air).w
000063A8 31FC 0600 FE10             		move.w	#id_EndZ<<8,(v_zone).w ; set level number to 0600 (extra flowers)
000063AE 0C38 0000 FE57             		cmpi.b	#0,(v_emeralds).w ; do you have all 6 emeralds?
000063B4 6700                       		beq.s	End_LoadData	; if yes, branch
000063B6 31FC 0601 FE10             		move.w	#(id_EndZ<<8)+1,(v_zone).w ; set level number to 0601 (no flowers)
000063BC                            
000063BC                            End_LoadData:
000063BC 7000                       		moveq	#plcid_Ending,d0
000063BE 6100 B4E6                  		bsr.w	QuickPLC	; load ending sequence patterns
000063C2 4EB9 0000 0000             		jsr	(Hud_Base).l
000063C8 6100 0000                  		bsr.w	LevelSizeLoad
000063CC 6100 0000                  		bsr.w	DeformLayers
000063D0 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
000063D6 6100 0000                  		bsr.w	LevelDataLoad
000063DA 6100 0000                  		bsr.w	LoadTilesFromStart
000063DE 21FC 0000 0000 F796        		move.l	#Col_GHZ,(v_collindex).w ; load collision index
000063E6 46FC 2300                  		enable_ints
000063EA 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000063F0 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000063F4 6100 B660                  		bsr.w	KosDec
000063F8 4EB9 0000 0000             		jsr		LoadPlayerPal
000063FE 6100 C204                  		bsr.w	PalLoad1	; load Sonic's palette
0000640A 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
00006410 6700                       		beq.s	End_LoadSonic	; if not, branch
00006412 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00006418                            
00006418                            End_LoadSonic:
00006418 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
0000641E 08F8 0000 D022             		bset	#0,(v_player+obStatus).w ; make Sonic face left
00006424 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0000642A 31FC 0400 F602             		move.w	#(btnL<<8),(v_jpadhold2).w ; move Sonic to the left
00006430 31FC F600 D020             		move.w	#$F600,(v_player+obInertia).w ; set Sonic's speed
00006436 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
0000643C 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006442 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006448 4EB9 0000 0000             		jsr	(BuildSprites).l
0000644E 7000                       		moveq	#0,d0
00006450 31C0 FE20                  		move.w	d0,(v_rings).w
00006454 21C0 FE22                  		move.l	d0,(v_time).w
00006458 11C0 FE1B                  		move.b	d0,(v_lifecount).w
0000645C 11C0 FE2C                  		move.b	d0,(v_shield).w
00006460 11C0 FE2D                  		move.b	d0,(v_invinc).w
00006464 11C0 FE2E                  		move.b	d0,(v_shoes).w
00006468 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000646C 31C0 FE08                  		move.w	d0,(v_debuguse).w
00006470 31C0 FE02                  		move.w	d0,(f_restart).w
00006474 31C0 FE04                  		move.w	d0,(v_framecount).w
00006478 6100 EEBC                  		bsr.w	OscillateNumInit
0000647C 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w
00006482 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w
00006488 11FC 0000 FE1E             		move.b	#0,(f_timecount).w
0000648E 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00006494 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
0000649A 6100 D7FC                  		bsr.w	WaitForVBla
0000649E 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000064A2 0000 0040                  		ori.b	#$40,d0
000064A6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000064AC 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
000064B2 6100 BE00                  		bsr.w	PaletteFadeIn
000064B6                            
000064B6                            ; ---------------------------------------------------------------------------
000064B6                            ; Main ending sequence loop
000064B6                            ; ---------------------------------------------------------------------------
000064B6                            
000064B6                            End_MainLoop:
000064B6 6100 ADF4                  		bsr.w	PauseGame
000064BA 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
000064C0 6100 D7D6                  		bsr.w	WaitForVBla
000064C4 5278 FE04                  		addq.w	#1,(v_framecount).w
000064C8 6100 0000                  		bsr.w	End_MoveSonic
000064CC 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000064D2 6100 0000                  		bsr.w	DeformLayers
000064D6 4EB9 0000 0000             		jsr	(BuildSprites).l
000064DC 4EB9 0000 0000             		jsr	(ObjPosLoad).l
000064E2 6100 B83A                  		bsr.w	PaletteCycle
000064E6 6100 EEA4                  		bsr.w	OscillateNumDo
000064EA 6100 EF30                  		bsr.w	SynchroAnimate
000064EE 0C38 0000 F600             		cmpi.b	#id_Ending,(v_gamemode).w ; is game mode $18 (ending)?
000064F4 6700                       		beq.s	End_ChkEmerald	; if yes, branch
000064F6                            
000064F6 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; goto credits
000064FC 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w ; set credits index number to 0
00006502 4E75                       		rts	
00006504                            ; ===========================================================================
00006504                            
00006504                            End_ChkEmerald:
00006504 4A78 FE02                  		tst.w	(f_restart).w	; has Sonic released the emeralds?
00006508 6700 FFAC                  		beq.w	End_MainLoop	; if not, branch
0000650C                            
0000650C 4278 FE02                  		clr.w	(f_restart).w
00006510 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00006516 4278 F794                  		clr.w	(v_palchgspeed).w
0000651A                            
0000651A                            	End_AllEmlds:
0000651A 6100 AD90                  		bsr.w	PauseGame
0000651E 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006524 6100 D772                  		bsr.w	WaitForVBla
00006528 5278 FE04                  		addq.w	#1,(v_framecount).w
0000652C 6100 0000                  		bsr.w	End_MoveSonic
00006530 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006536 6100 0000                  		bsr.w	DeformLayers
0000653A 4EB9 0000 0000             		jsr	(BuildSprites).l
00006540 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006546 6100 EE44                  		bsr.w	OscillateNumDo
0000654A 6100 EED0                  		bsr.w	SynchroAnimate
0000654E 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00006552 6A00                       		bpl.s	End_SlowFade
00006554 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
0000655A 6100 BF48                  		bsr.w	WhiteOut_ToWhite
0000655E                            
0000655E                            	End_SlowFade:
0000655E 4A78 FE02                  		tst.w	(f_restart).w
00006562 6700 FFB6                  		beq.w	End_AllEmlds
00006566 4278 FE02                  		clr.w	(f_restart).w
0000656A 31FC 2829 A480             		move.w	#$2829,(v_lvllayout+$80).w ; modify level layout
00006570 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00006576 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000657C 47F8 F700                  		lea	(v_screenposx).w,a3
00006580 49F8 A400                  		lea	(v_lvllayout).w,a4
00006584 343C 4000                  		move.w	#$4000,d2
00006588 6100 0000                  		bsr.w	DrawChunks
0000658C 7015                       		moveq	#palid_Ending,d0
0000658E 6100 C074                  		bsr.w	PalLoad1	; load ending palette
00006592 6100 BE44                  		bsr.w	PaletteWhiteIn
00006596 6000 FF1E                  		bra.w	End_MainLoop
0000659A                            
0000659A                            ; ---------------------------------------------------------------------------
0000659A                            ; Subroutine controlling Sonic on the ending sequence
0000659A                            ; ---------------------------------------------------------------------------
0000659A                            
0000659A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000659A                            
0000659A                            
0000659A                            End_MoveSonic:
0000659A 1038 F7D7                  		move.b	(v_sonicend).w,d0
0000659E 6600                       		bne.s	End_MoveSon2
000065A0 0C78 0090 D008             		cmpi.w	#$90,(v_player+obX).w ; has Sonic passed $90 on x-axis?
000065A6 6400                       		bhs.s	End_MoveSonExit	; if not, branch
000065A8                            
000065A8 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000065AC 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock player's controls
000065B2 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; move Sonic to the right
000065B8 4E75                       		rts	
000065BA                            ; ===========================================================================
000065BA                            
000065BA                            End_MoveSon2:
000065BA 5500                       		subq.b	#2,d0
000065BC 6600                       		bne.s	End_MoveSon3
000065BE 0C78 00A0 D008             		cmpi.w	#$A0,(v_player+obX).w ; has Sonic passed $A0 on x-axis?
000065C4 6500                       		blo.s	End_MoveSonExit	; if not, branch
000065C6                            
000065C6 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000065CA 7000                       		moveq	#0,d0
000065CC 11C0 F7CC                  		move.b	d0,(f_lockctrl).w
000065D0 31C0 F602                  		move.w	d0,(v_jpadhold2).w ; stop Sonic moving
000065D4 31C0 D020                  		move.w	d0,(v_player+obInertia).w
000065D8 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls & position
000065DE 11FC 0003 D01A             		move.b	#3,(v_player+obFrame).w
000065E4 31FC 0000 D01C             		move.w	#(id_Wait<<8)+id_Wait,(v_player+obAnim).w ; use "standing" animation
000065EA 11FC 0003 D01E             		move.b	#3,(v_player+obTimeFrame).w
000065F0 4E75                       		rts	
000065F2                            ; ===========================================================================
000065F2                            
000065F2                            End_MoveSon3:
000065F2 5500                       		subq.b	#2,d0
000065F4 6600                       		bne.s	End_MoveSonExit
000065F6 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000065FA 31FC 00A0 D008             		move.w	#$A0,(v_player+obX).w
00006600 11FC 0000 D000             		move.b	#id_EndSonic,(v_player).w ; load Sonic ending sequence object
00006606 4278 D024                  		clr.w	(v_player+obRoutine).w
0000660A                            
0000660A                            End_MoveSonExit:
0000660A 4E75                       		rts	
0000660C                            ; End of function End_MoveSonic
0000660C                            
0000660C                            ; ===========================================================================
0000660C                            
0000660C                            		include	"_incObj\87 Ending Sequence Sonic.asm"
0000660C                            ; ---------------------------------------------------------------------------
0000660C                            ; Object 87 - Sonic on ending sequence
0000660C                            ; ---------------------------------------------------------------------------
0000660C                            
0000660C                            EndSonic:
0000660C 7000                       		moveq	#0,d0
0000660E 1028 0025                  		move.b	ob2ndRout(a0),d0
00006612 323B 0000                  		move.w	ESon_Index(pc,d0.w),d1
00006616 4EBB 1000                  		jsr	ESon_Index(pc,d1.w)
0000661A 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006620                            ; ===========================================================================
00006620 0000 0000                  ESon_Index:	dc.w ESon_Main-ESon_Index, ESon_MakeEmeralds-ESon_Index
00006624 0000 0000                  		dc.w Obj87_Animate-ESon_Index,	Obj87_LookUp-ESon_Index
00006628 0000 0000                  		dc.w Obj87_ClrObjRam-ESon_Index, Obj87_Animate-ESon_Index
0000662C 0000 0000                  		dc.w Obj87_MakeLogo-ESon_Index, Obj87_Animate-ESon_Index
00006630 0000 0000                  		dc.w Obj87_Leap-ESon_Index, Obj87_Animate-ESon_Index
00006634                            
00006634 =00000030                  eson_time:	equ $30	; time to wait between events
00006634                            ; ===========================================================================
00006634                            
00006634                            ESon_Main:	; Routine 0
00006634 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
0000663A 6700                       		beq.s	ESon_Main2	; if yes, branch
0000663C 0628 0010 0025             		addi.b	#$10,ob2ndRout(a0) ; else, skip emerald sequence
00006642 317C 00D8 0030             		move.w	#216,eson_time(a0)
00006648 4E75                       		rts	
0000664A                            ; ===========================================================================
0000664A                            
0000664A                            ESon_Main2:
0000664A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000664E 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
00006656 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
0000665C 117C 0004 0001             		move.b	#4,obRender(a0)
00006662 4228 0022                  		clr.b	obStatus(a0)
00006666 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000666C 117C 0000 001A             		move.b	#0,obFrame(a0)
00006672 317C 0050 0030             		move.w	#80,eson_time(a0) ; set duration for Sonic to pause
00006678                            
00006678                            ESon_MakeEmeralds:
00006678                            		; Routine 2
00006678 5368 0030                  		subq.w	#1,eson_time(a0) ; subtract 1 from duration
0000667C 6600                       		bne.s	ESon_Wait
0000667E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006682 317C 0001 001C             		move.w	#1,obAnim(a0)
00006688 11FC 0000 D400             		move.b	#id_EndChaos,(v_objspace+$400).w ; load chaos emeralds objects
0000668E                            
0000668E                            	ESon_Wait:
0000668E 4E75                       		rts	
00006690                            ; ===========================================================================
00006690                            
00006690                            Obj87_LookUp:	; Routine 6
00006690 0C79 2000 00FF D43C        		cmpi.w	#$2000,((v_objspace&$FFFFFF)+$400+$3C).l
00006698 6600                       		bne.s	locret_5480
0000669A 31FC 0001 FE02             		move.w	#1,(f_restart).w ; set level to	restart	(causes	flash)
000066A0 317C 005A 0030             		move.w	#90,eson_time(a0)
000066A6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000066AA                            
000066AA                            locret_5480:
000066AA 4E75                       		rts	
000066AC                            ; ===========================================================================
000066AC                            
000066AC                            Obj87_ClrObjRam:
000066AC                            		; Routine 8
000066AC 5368 0030                  		subq.w	#1,eson_time(a0)
000066B0 6600                       		bne.s	ESon_Wait2
000066B2 43F8 D400                  		lea	(v_objspace+$400).w,a1
000066B6 323C 00FF                  		move.w	#$FF,d1
000066BA                            
000066BA                            Obj87_ClrLoop:
000066BA 4299                       		clr.l	(a1)+
000066BC 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000066C0 31FC 0001 FE02             		move.w	#1,(f_restart).w
000066C6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000066CA 117C 0001 001C             		move.b	#1,obAnim(a0)
000066D0 317C 003C 0030             		move.w	#60,eson_time(a0)
000066D6                            
000066D6                            ESon_Wait2:
000066D6 4E75                       		rts	
000066D8                            ; ===========================================================================
000066D8                            
000066D8                            Obj87_MakeLogo:	; Routine $C
000066D8 5368 0030                  		subq.w	#1,eson_time(a0)
000066DC 6600                       		bne.s	ESon_Wait3
000066DE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000066E2 317C 00B4 0030             		move.w	#180,eson_time(a0)
000066E8 117C 0002 001C             		move.b	#2,obAnim(a0)
000066EE 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
000066F4                            
000066F4                            ESon_Wait3:
000066F4 4E75                       		rts	
000066F6                            ; ===========================================================================
000066F6                            
000066F6                            Obj87_Animate:	; Rountine 4, $A, $E, $12
000066F6 43F9 0000 0000             		lea	(AniScript_ESon).l,a1
000066FC 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006702                            ; ===========================================================================
00006702                            
00006702                            Obj87_Leap:	; Routine $10
00006702 5368 0030                  		subq.w	#1,eson_time(a0)
00006706 6600                       		bne.s	ESon_Wait4
00006708 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000670C 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
00006714 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
0000671A 117C 0004 0001             		move.b	#4,obRender(a0)
00006720 4228 0022                  		clr.b	obStatus(a0)
00006724 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000672A 117C 0005 001A             		move.b	#5,obFrame(a0)
00006730 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "leaping"	animation
00006736 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
0000673C 60B8                       		bra.s	Obj87_Animate
0000673E                            ; ===========================================================================
0000673E                            
0000673E                            ESon_Wait4:
0000673E 4E75                       		rts	
0000673E 4E75                       		rts	
00006740                            		include "_anim\Ending Sequence Sonic.asm"
00006740                            ; ---------------------------------------------------------------------------
00006740                            ; Animation script - Sonic on the ending sequence
00006740                            ; ---------------------------------------------------------------------------
00006740 0000                       AniScript_ESon:	dc.w byte_551C-AniScript_ESon
00006742 0000                       		dc.w byte_552A-AniScript_ESon
00006744 0000                       		dc.w byte_5534-AniScript_ESon
00006746 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00006754 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
0000675E 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00006766                            		even
00006766                            		even
00006766                            		include	"_incObj\88 Ending Sequence Emeralds.asm"
00006766                            ; ---------------------------------------------------------------------------
00006766                            ; Object 88 - chaos emeralds on	the ending sequence
00006766                            ; ---------------------------------------------------------------------------
00006766                            
00006766                            EndChaos:
00006766 7000                       		moveq	#0,d0
00006768 1028 0024                  		move.b	obRoutine(a0),d0
0000676C 323B 0000                  		move.w	ECha_Index(pc,d0.w),d1
00006770 4EBB 1000                  		jsr	ECha_Index(pc,d1.w)
00006774 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000677A                            ; ===========================================================================
0000677A 0000                       ECha_Index:	dc.w ECha_Main-ECha_Index
0000677C 0000                       		dc.w ECha_Move-ECha_Index
0000677E                            
0000677E =00000038                  echa_origX:	equ $38	; x-axis centre of emerald circle (2 bytes)
0000677E =0000003A                  echa_origY:	equ $3A	; y-axis centre of emerald circle (2 bytes)
0000677E =0000003C                  echa_radius:	equ $3C	; radius (2 bytes)
0000677E =0000003E                  echa_angle:	equ $3E	; angle for rotation (2 bytes)
0000677E                            ; ===========================================================================
0000677E                            
0000677E                            ECha_Main:	; Routine 0
0000677E 0C38 0002 D01A             		cmpi.b	#2,(v_player+obFrame).w
00006784 6700                       		beq.s	ECha_CreateEms
00006786 588F                       		addq.l	#4,sp
00006788 4E75                       		rts	
0000678A                            ; ===========================================================================
0000678A                            
0000678A                            ECha_CreateEms:
0000678A 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0) ; match X position with Sonic
00006790 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0) ; match Y position with Sonic
00006796 2248                       		movea.l	a0,a1
00006798 7600                       		moveq	#0,d3
0000679A 7401                       		moveq	#1,d2
0000679C 7205                       		moveq	#5,d1
0000679E                            
0000679E                            	ECha_LoadLoop:
0000679E 12BC 0000                  		move.b	#id_EndChaos,(a1) ; load chaos emerald object
000067A2 5429 0024                  		addq.b	#2,obRoutine(a1)
000067A6 237C 0000 0000 0004        		move.l	#Map_ECha,obMap(a1)
000067AE 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
000067B4 137C 0004 0001             		move.b	#4,obRender(a1)
000067BA 337C 0080 0018             		move.w	#$80,obPriority(a1)
000067C0 3368 0008 0038             		move.w	obX(a0),echa_origX(a1)
000067C6 3368 000C 003A             		move.w	obY(a0),echa_origY(a1)
000067CC 1342 001C                  		move.b	d2,obAnim(a1)
000067D0 1342 001A                  		move.b	d2,obFrame(a1)
000067D4 5202                       		addq.b	#1,d2
000067D6 1343 0026                  		move.b	d3,obAngle(a1)
000067DA 0603 002A                  		addi.b	#$100/6,d3	; angle between each emerald
000067DE 43E9 0040                  		lea	$40(a1),a1
000067E2 51C9 FFBA                  		dbf	d1,ECha_LoadLoop ; repeat 5 more times
000067E6                            
000067E6                            ECha_Move:	; Routine 2
000067E6 3028 003E                  		move.w	echa_angle(a0),d0
000067EA D168 0026                  		add.w	d0,obAngle(a0)
000067EE 1028 0026                  		move.b	obAngle(a0),d0
000067F2 4EB9 0000 3CCA             		jsr	(CalcSine).l
000067F8 7800                       		moveq	#0,d4
000067FA 1828 003C                  		move.b	echa_radius(a0),d4
000067FE C3C4                       		muls.w	d4,d1
00006800 E081                       		asr.l	#8,d1
00006802 C1C4                       		muls.w	d4,d0
00006804 E080                       		asr.l	#8,d0
00006806 D268 0038                  		add.w	echa_origX(a0),d1
0000680A D068 003A                  		add.w	echa_origY(a0),d0
0000680E 3141 0008                  		move.w	d1,obX(a0)
00006812 3140 000C                  		move.w	d0,obY(a0)
00006816                            
00006816                            	ECha_Expand:
00006816 0C68 2000 003C             		cmpi.w	#$2000,echa_radius(a0)
0000681C 6700                       		beq.s	ECha_Rotate
0000681E 0668 0020 003C             		addi.w	#$20,echa_radius(a0) ; expand circle of emeralds
00006824                            
00006824                            	ECha_Rotate:
00006824 0C68 2000 003E             		cmpi.w	#$2000,echa_angle(a0)
0000682A 6700                       		beq.s	ECha_Rise
0000682C 0668 0020 003E             		addi.w	#$20,echa_angle(a0) ; move emeralds around the centre
00006832                            
00006832                            	ECha_Rise:
00006832 0C68 0140 003A             		cmpi.w	#$140,echa_origY(a0)
00006838 6700                       		beq.s	ECha_End
0000683A 5368 003A                  		subq.w	#1,echa_origY(a0) ; make circle rise
0000683E                            
0000683E                            ECha_End:
0000683E 4E75                       		rts	
0000683E 4E75                       		rts	
00006840                            		include	"_incObj\89 Ending Sequence STH.asm"
00006840                            ; ---------------------------------------------------------------------------
00006840                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00006840                            ; ---------------------------------------------------------------------------
00006840                            
00006840                            EndSTH:
00006840 7000                       		moveq	#0,d0
00006842 1028 0024                  		move.b	$24(a0),d0
00006846 323B 0000                  		move.w	ESth_Index(pc,d0.w),d1
0000684A 4EBB 1000                  		jsr	ESth_Index(pc,d1.w)
0000684E 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006854                            ; ===========================================================================
00006854 0000                       ESth_Index:	dc.w ESth_Main-ESth_Index
00006856 0000                       		dc.w ESth_Move-ESth_Index
00006858 0000                       		dc.w ESth_GotoCredits-ESth_Index
0000685A                            
0000685A =00000030                  esth_time:	equ $30		; time until exit
0000685A                            ; ===========================================================================
0000685A                            
0000685A                            ESth_Main:	; Routine 0
0000685A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000685E 317C FFE0 0008             		move.w	#-$20,obX(a0)	; object starts	outside	the level boundary
00006864 317C 00D8 000A             		move.w	#$D8,obScreenY(a0)
0000686A 217C 0000 0000 0004        		move.l	#Map_ESTH,obMap(a0)
00006872 317C 05C5 0002             		move.w	#$5C5,obGfx(a0)
00006878 117C 0000 0001             		move.b	#0,obRender(a0)
0000687E 317C 0000 0018             		move.w	#0,obPriority(a0)
00006884                            
00006884                            ESth_Move:	; Routine 2
00006884 0C68 00C0 0008             		cmpi.w	#$C0,obX(a0)	; has object reached $C0?
0000688A 6700                       		beq.s	ESth_Delay	; if yes, branch
0000688C 0668 0010 0008             		addi.w	#$10,obX(a0)	; move object to the right
00006892 4E75                       		rts
00006894                            
00006894                            ESth_Delay:
00006894 5428 0024                  		addq.b	#2,obRoutine(a0)
00006898 317C 012C 0030             		move.w	#300,esth_time(a0) ; set duration for delay (5 seconds)
0000689E                            
0000689E                            ESth_GotoCredits:
0000689E                            		; Routine 4
0000689E 5368 0030                  		subq.w	#1,esth_time(a0) ; subtract 1 from duration
000068A2 6A00                       		bpl.s	ESth_Wait
000068A4 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; exit to credits
000068AA                            
000068AA                            	ESth_Wait:
000068AA 4E75                       		rts
000068AC                            Map_ESon:	include	"_maps\Ending Sequence Sonic.asm"
000068AC                            ; --------------------------------------------------------------------------------
000068AC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000068AC                            ; --------------------------------------------------------------------------------
000068AC                            
000068AC                            SME_6jV7R:	
000068AC 0000 0000                  		dc.w SME_6jV7R_10-SME_6jV7R, SME_6jV7R_1B-SME_6jV7R	
000068B0 0000 0000                  		dc.w SME_6jV7R_2B-SME_6jV7R, SME_6jV7R_36-SME_6jV7R	
000068B4 0000 0000                  		dc.w SME_6jV7R_4B-SME_6jV7R, SME_6jV7R_60-SME_6jV7R	
000068B8 0000 0000                  		dc.w SME_6jV7R_70-SME_6jV7R, SME_6jV7R_94-SME_6jV7R	
000068BC 02                         SME_6jV7R_10:	dc.b 2	
000068BD EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	
000068C2 0C0C 000C F0               		dc.b $C, $C, 0, $C, $F0	
000068C7 03                         SME_6jV7R_1B:	dc.b 3	
000068C8 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0	
000068CD EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	
000068D2 0C0C 000C F0               		dc.b $C, $C, 0, $C, $F0	
000068D7 02                         SME_6jV7R_2B:	dc.b 2	
000068D8 EC09 0018 F8               		dc.b $EC, 9, 0, $18, $F8	
000068DD FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0	
000068E2 04                         SME_6jV7R_36:	dc.b 4	
000068E3 F40B 002A F8               		dc.b $F4, $B, 0, $2A, $F8	
000068E8 EC08 0036 F8               		dc.b $EC, 8, 0, $36, $F8	
000068ED E404 0039 00               		dc.b $E4, 4, 0, $39, 0	
000068F2 EC02 003B 10               		dc.b $EC, 2, 0, $3B, $10	
000068F7 04                         SME_6jV7R_4B:	dc.b 4	
000068F8 F40B 002A F8               		dc.b $F4, $B, 0, $2A, $F8	
000068FD EC08 0036 F8               		dc.b $EC, 8, 0, $36, $F8	
00006902 E404 0039 00               		dc.b $E4, 4, 0, $39, 0	
00006907 EC02 003B 10               		dc.b $EC, 2, 0, $3B, $10	
0000690C 03                         SME_6jV7R_60:	dc.b 3	
0000690D EC06 004C F0               		dc.b $EC, 6, 0, $4C, $F0	
00006912 EC06 084C 00               		dc.b $EC, 6, 8, $4C, 0	
00006917 040D 0052 F0               		dc.b 4, $D, 0, $52, $F0	
0000691C 07                         SME_6jV7R_70:	dc.b 7	
0000691D B20C 005A F8               		dc.b $B2, $C, 0, $5A, $F8	
00006922 BA0F 005E F0               		dc.b $BA, $F, 0, $5E, $F0	
00006927 BA05 006E 10               		dc.b $BA, 5, 0, $6E, $10	
0000692C CA02 0072 10               		dc.b $CA, 2, 0, $72, $10	
00006931 DA0C 0075 F0               		dc.b $DA, $C, 0, $75, $F0	
00006936 E208 0079 F8               		dc.b $E2, 8, 0, $79, $F8	
0000693B EA05 007C F8               		dc.b $EA, 5, 0, $7C, $F8	
00006940 18                         SME_6jV7R_94:	dc.b $18	
00006941 800F 0080 F8               		dc.b $80, $F, 0, $80, $F8	
00006946 900B 0090 E0               		dc.b $90, $B, 0, $90, $E0	
0000694B 900B 009C 18               		dc.b $90, $B, 0, $9C, $18	
00006950 980B 00A8 30               		dc.b $98, $B, 0, $A8, $30	
00006955 A00F 00B4 58               		dc.b $A0, $F, 0, $B4, $58	
0000695A 8800 00C4 F0               		dc.b $88, 0, 0, $C4, $F0	
0000695F 8005 00C5 18               		dc.b $80, 5, 0, $C5, $18	
00006964 A00F 00C9 F8               		dc.b $A0, $F, 0, $C9, $F8	
00006969 B00B 00D9 E0               		dc.b $B0, $B, 0, $D9, $E0	
0000696E B80F 00E5 38               		dc.b $B8, $F, 0, $E5, $38	
00006973 A805 00F5 48               		dc.b $A8, 5, 0, $F5, $48	
00006978 C002 00F9 58               		dc.b $C0, 2, 0, $F9, $58	
0000697D C00F 00FC F8               		dc.b $C0, $F, 0, $FC, $F8	
00006982 B80F 010C 18               		dc.b $B8, $F, 1, $C, $18	
00006987 B008 011C 18               		dc.b $B0, 8, 1, $1C, $18	
0000698C D80D 011F 30               		dc.b $D8, $D, 1, $1F, $30	
00006991 D808 0127 18               		dc.b $D8, 8, 1, $27, $18	
00006996 D80F 012A D8               		dc.b $D8, $F, 1, $2A, $D8	
0000699B E00D 013A F8               		dc.b $E0, $D, 1, $3A, $F8	
000069A0 E000 0142 28               		dc.b $E0, 0, 1, $42, $28	
000069A5 D004 0143 E0               		dc.b $D0, 4, 1, $43, $E0	
000069AA E805 0145 C8               		dc.b $E8, 5, 1, $45, $C8	
000069AF F80C 0149 C8               		dc.b $F8, $C, 1, $49, $C8	
000069B4 F006 014D F8               		dc.b $F0, 6, 1, $4D, $F8	
000069BA 00                         		even
000069BA 00                         		even
000069BA                            Map_ECha:	include	"_maps\Ending Sequence Emeralds.asm"
000069BA                            ; --------------------------------------------------------------------------------
000069BA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000069BA                            ; --------------------------------------------------------------------------------
000069BA                            
000069BA                            SME_0ZTmS:	
000069BA 0000 0000                  		dc.w SME_0ZTmS_E-SME_0ZTmS, SME_0ZTmS_14-SME_0ZTmS	
000069BE 0000 0000                  		dc.w SME_0ZTmS_1A-SME_0ZTmS, SME_0ZTmS_20-SME_0ZTmS	
000069C2 0000 0000                  		dc.w SME_0ZTmS_26-SME_0ZTmS, SME_0ZTmS_2C-SME_0ZTmS	
000069C6 0000                       		dc.w SME_0ZTmS_32-SME_0ZTmS	
000069C8 01                         SME_0ZTmS_E:	dc.b 1	
000069C9 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
000069CE 01                         SME_0ZTmS_14:	dc.b 1	
000069CF F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
000069D4 01                         SME_0ZTmS_1A:	dc.b 1	
000069D5 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
000069DA 01                         SME_0ZTmS_20:	dc.b 1	
000069DB F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8	
000069E0 01                         SME_0ZTmS_26:	dc.b 1	
000069E1 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8	
000069E6 01                         SME_0ZTmS_2C:	dc.b 1	
000069E7 F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
000069EC 01                         SME_0ZTmS_32:	dc.b 1	
000069ED F805 000C F8               		dc.b $F8, 5, 0, $C, $F8	
000069F2                            		even
000069F2                            		even
000069F2                            Map_ESth:	include	"_maps\Ending Sequence STH.asm"
000069F2                            ; --------------------------------------------------------------------------------
000069F2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000069F2                            ; --------------------------------------------------------------------------------
000069F2                            
000069F2                            SME_WuUDZ:	
000069F2 0000                       		dc.w SME_WuUDZ_2-SME_WuUDZ	
000069F4 03                         SME_WuUDZ_2:	dc.b 3	
000069F5 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0	
000069FA F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0	
000069FF F00F 0020 10               		dc.b $F0, $F, 0, $20, $10	
00006A04                            		even
00006A04                            		even
00006A04                            
00006A04                            ; ===========================================================================
00006A04                            ; ---------------------------------------------------------------------------
00006A04                            ; Credits ending sequence
00006A04                            ; ---------------------------------------------------------------------------
00006A04                            
00006A04                            GM_Credits:
00006A04                            		
00006A04 6100 AD92                  		bsr.w	ClearPLC
00006A08 6100 B950                  		bsr.w	PaletteFadeOut
00006A0C 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00006A12 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
00006A16 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00006A1A 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00006A1E 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00006A22 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
00006A26 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00006A2A 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (line 3; colour 0)
00006A2E 4238 F64E                  		clr.b	(f_wtr_state).w
00006A32 6100 A79C                  		bsr.w	ClearScreen
00006A36                            
00006A36 43F8 D000                  		lea	(v_objspace).w,a1
00006A3A 7000                       		moveq	#0,d0
00006A3C 323C 07FF                  		move.w	#$7FF,d1
00006A40                            	TryAg_ClrObjRam:
00006A40 22C0                       		move.l	d0,(a1)+
00006A42 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00006A46                            
00006A46 7000                       		moveq	#plcid_TryAgain,d0
00006A48 6100 AE5C                  		bsr.w	QuickPLC	; load "TRY AGAIN" or "END" patterns
00006A4C                            
00006A4C 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00006A50 7000                       		moveq	#0,d0
00006A52 323C 001F                  		move.w	#$1F,d1
00006A56                            	TryAg_ClrPal:
00006A56 22C0                       		move.l	d0,(a1)+
00006A58 51C9 FFFC                  		dbf	d1,TryAg_ClrPal ; fill palette with black
00006A5C                            
00006A5C 7015                       		moveq	#palid_Ending,d0
00006A5E 6100 BBA4                  		bsr.w	PalLoad1	; load ending palette
00006A62 4278 FBC0                  		clr.w	(v_pal_dry_dup+$40).w
00006A66 11FC 0000 D080             		move.b	#id_EndEggman,(v_objspace+$80).w ; load Eggman object
00006A6C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006A72 4EB9 0000 0000             		jsr	(BuildSprites).l
00006A78 31FC 0B40 F614             		move.w	#2880,(v_demolength).w ; show screen for 48 seconds
00006A7E 6100 B834                  		bsr.w	PaletteFadeIn
00006A82                            
00006A82                            ; ---------------------------------------------------------------------------
00006A82                            ; "TRY AGAIN" and "END"	screen main loop
00006A82                            ; ---------------------------------------------------------------------------
00006A82                            TryAg_MainLoop:
00006A82 6100 A828                  		bsr.w	PauseGame
00006A86 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00006A8C 6100 D20A                  		bsr.w	WaitForVBla
00006A90 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006A96 4EB9 0000 0000             		jsr	(BuildSprites).l
00006A9C 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00006AA2 6600                       		bne.s	TryAg_Exit	; if yes, branch
00006AA4 4A78 F614                  		tst.w	(v_demolength).w ; has 30 seconds elapsed?
00006AA8 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006AAA 0C38 0000 F600             		cmpi.b	#id_Credits,(v_gamemode).w
00006AB0 67D0                       		beq.s	TryAg_MainLoop
00006AB2                            
00006AB2                            TryAg_Exit:
00006AB2 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00006AB8 4E75                       		rts	
00006ABA                            
00006ABA                            ; ===========================================================================
00006ABA                            
00006ABA                            		include	"_incObj\8B Try Again & End Eggman.asm"
00006ABA                            ; ---------------------------------------------------------------------------
00006ABA                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006ABA                            ; ---------------------------------------------------------------------------
00006ABA                            
00006ABA                            EndEggman:
00006ABA 7000                       		moveq	#0,d0
00006ABC 1028 0024                  		move.b	obRoutine(a0),d0
00006AC0 323B 0000                  		move.w	EEgg_Index(pc,d0.w),d1
00006AC4 4EBB 1000                  		jsr	EEgg_Index(pc,d1.w)
00006AC8 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006ACE                            ; ===========================================================================
00006ACE 0000                       EEgg_Index:	dc.w EEgg_Main-EEgg_Index
00006AD0 0000                       		dc.w EEgg_Animate-EEgg_Index
00006AD2 0000                       		dc.w EEgg_Juggle-EEgg_Index
00006AD4 0000                       		dc.w EEgg_Wait-EEgg_Index
00006AD6                            
00006AD6 =00000030                  eegg_time:	equ $30		; time between juggle motions
00006AD6                            ; ===========================================================================
00006AD6                            
00006AD6                            EEgg_Main:	; Routine 0
00006AD6 5428 0024                  		addq.b	#2,obRoutine(a0)
00006ADA 317C 0120 0008             		move.w	#$120,obX(a0)
00006AE0 317C 00F4 000A             		move.w	#$F4,obScreenY(a0)
00006AE6 217C 0000 0000 0004        		move.l	#Map_EEgg,obMap(a0)
00006AEE 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
00006AF4 117C 0000 0001             		move.b	#0,obRender(a0)
00006AFA 317C 0100 0018             		move.w	#$100,obPriority(a0)
00006B00 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "END" animation
00006B06 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
00006B0C 6700                       		beq.s	EEgg_Animate	; if yes, branch
00006B0E                            
00006B0E 11FC 0000 D0C0             		move.b	#id_CreditsText,(v_objspace+$C0).w ; load credits object
00006B14 31FC 0009 FFF4             		move.w	#9,(v_creditsnum).w ; use "TRY AGAIN" text
00006B1A 11FC 0000 D800             		move.b	#id_TryChaos,(v_objspace+$800).w ; load emeralds object on "TRY AGAIN" screen
00006B20 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "TRY AGAIN" animation
00006B26                            
00006B26                            EEgg_Animate:	; Routine 2
00006B26 43F9 0000 0000             		lea	(Ani_EEgg).l,a1
00006B2C 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006B32                            ; ===========================================================================
00006B32                            
00006B32                            EEgg_Juggle:	; Routine 4
00006B32 5428 0024                  		addq.b	#2,obRoutine(a0)
00006B36 7002                       		moveq	#2,d0
00006B38 0828 0000 001C             		btst	#0,obAnim(a0)
00006B3E 6700                       		beq.s	@noflip
00006B40 4440                       		neg.w	d0
00006B42                            
00006B42                            	@noflip:
00006B42 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; get RAM address for emeralds
00006B46 7205                       		moveq	#5,d1
00006B48                            
00006B48                            @emeraldloop:
00006B48 1340 003E                  		move.b	d0,$3E(a1)
00006B4C 3400                       		move.w	d0,d2
00006B4E E742                       		asl.w	#3,d2
00006B50 D529 0026                  		add.b	d2,obAngle(a1)
00006B54 43E9 0040                  		lea	$40(a1),a1
00006B58 51C9 FFEE                  		dbf	d1,@emeraldloop
00006B5C 5228 001A                  		addq.b	#1,obFrame(a0)
00006B60 317C 0070 0030             		move.w	#112,eegg_time(a0)
00006B66                            
00006B66                            EEgg_Wait:	; Routine 6
00006B66 5368 0030                  		subq.w	#1,eegg_time(a0) ; decrement timer
00006B6A 6A00                       		bpl.s	@nochg		; branch if time remains
00006B6C 0868 0000 001C             		bchg	#0,obAnim(a0)
00006B72 117C 0002 0024             		move.b	#2,obRoutine(a0) ; goto EEgg_Animate next
00006B78                            
00006B78                            	@nochg:
00006B78 4E75                       		rts	
00006B78 4E75                       		rts	
00006B7A                            		include "_anim\Try Again & End Eggman.asm"
00006B7A                            ; ---------------------------------------------------------------------------
00006B7A                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00006B7A                            ; ---------------------------------------------------------------------------
00006B7A 0000                       Ani_EEgg:	dc.w @tryagain1-Ani_EEgg
00006B7C 0000                       		dc.w @tryagain2-Ani_EEgg
00006B7E 0000                       		dc.w @end-Ani_EEgg
00006B80 0500 FC01                  @tryagain1:	dc.b 5,	0, afRoutine, 1
00006B84 0502 FC03                  @tryagain2:	dc.b 5,	2, afRoutine, 3
00006B88 0704 0506 0504 0506 0504+  @end:		dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	afEnd
00006B9A                            		even
00006B9A                            		even
00006B9A                            		include	"_incObj\8C Try Again Emeralds.asm"
00006B9A                            ; ---------------------------------------------------------------------------
00006B9A                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006B9A                            ; ---------------------------------------------------------------------------
00006B9A                            
00006B9A                            TryChaos:
00006B9A 7000                       		moveq	#0,d0
00006B9C 1028 0024                  		move.b	obRoutine(a0),d0
00006BA0 323B 0000                  		move.w	TCha_Index(pc,d0.w),d1
00006BA4 4EBB 1000                  		jsr	TCha_Index(pc,d1.w)
00006BA8 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006BAE                            ; ===========================================================================
00006BAE 0000                       TCha_Index:	dc.w TCha_Main-TCha_Index
00006BB0 0000                       		dc.w TCha_Move-TCha_Index
00006BB2                            ; ===========================================================================
00006BB2                            
00006BB2                            TCha_Main:	; Routine 0
00006BB2 2248                       		movea.l	a0,a1
00006BB4 7400                       		moveq	#0,d2
00006BB6 7600                       		moveq	#0,d3
00006BB8 7205                       		moveq	#5,d1
00006BBA 9238 FE57                  		sub.b	(v_emeralds).w,d1
00006BBE                            
00006BBE                            @makeemerald:
00006BBE 12BC 0000                  		move.b	#id_TryChaos,(a1) ; load emerald object
00006BC2 5429 0024                  		addq.b	#2,obRoutine(a1)
00006BC6 237C 0000 69BA 0004        		move.l	#Map_ECha,obMap(a1)
00006BCE 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
00006BD4 137C 0000 0001             		move.b	#0,obRender(a1)
00006BDA 337C 0080 0018             		move.w	#$80,obPriority(a1)
00006BE0 337C 0104 0008             		move.w	#$104,obX(a1)
00006BE6 337C 0120 0038             		move.w	#$120,$38(a1)
00006BEC 337C 00EC 000A             		move.w	#$EC,obScreenY(a1)
00006BF2 3369 000A 003A             		move.w	obScreenY(a1),$3A(a1)
00006BF8 137C 001C 003C             		move.b	#$1C,$3C(a1)
00006BFE 47F8 FE58                  		lea	(v_emldlist).w,a3
00006C02                            
00006C02                            	@chkemerald:
00006C02 7000                       		moveq	#0,d0
00006C04 1038 FE57                  		move.b	(v_emeralds).w,d0
00006C08 5340                       		subq.w	#1,d0
00006C0A 6500                       		bcs.s	@loc_5B42
00006C0C                            
00006C0C                            	@chkloop:
00006C0C B433 0000                  		cmp.b	(a3,d0.w),d2
00006C10 6600                       		bne.s	@notgot
00006C12 5202                       		addq.b	#1,d2
00006C14 60EC                       		bra.s	@chkemerald
00006C16                            ; ===========================================================================
00006C16                            
00006C16                            	@notgot:
00006C16 51C8 FFF4                  		dbf	d0,@chkloop
00006C1A                            
00006C1A                            @loc_5B42:
00006C1A 1342 001A                  		move.b	d2,obFrame(a1)
00006C1E 5229 001A                  		addq.b	#1,obFrame(a1)
00006C22 5202                       		addq.b	#1,d2
00006C24 137C 0080 0026             		move.b	#$80,obAngle(a1)
00006C2A 1343 001E                  		move.b	d3,obTimeFrame(a1)
00006C2E 1343 001F                  		move.b	d3,obDelayAni(a1)
00006C32 0643 000A                  		addi.w	#10,d3
00006C36 43E9 0040                  		lea	$40(a1),a1
00006C3A 51C9 FF82                  		dbf	d1,@makeemerald	; repeat 5 times
00006C3E                            
00006C3E                            TCha_Move:	; Routine 2
00006C3E 4A68 003E                  		tst.w	$3E(a0)
00006C42 6700                       		beq.s	locret_5BBA
00006C44 4A28 001E                  		tst.b	obTimeFrame(a0)
00006C48 6700                       		beq.s	loc_5B78
00006C4A 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00006C4E 6600                       		bne.s	loc_5B80
00006C50                            
00006C50                            loc_5B78:
00006C50 3028 003E                  		move.w	$3E(a0),d0
00006C54 D168 0026                  		add.w	d0,obAngle(a0)
00006C58                            
00006C58                            loc_5B80:
00006C58 1028 0026                  		move.b	obAngle(a0),d0
00006C5C 6700                       		beq.s	loc_5B8C
00006C5E 0C00 0080                  		cmpi.b	#$80,d0
00006C62 6600                       		bne.s	loc_5B96
00006C64                            
00006C64                            loc_5B8C:
00006C64 4268 003E                  		clr.w	$3E(a0)
00006C68 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00006C6E                            
00006C6E                            loc_5B96:
00006C6E 4EB9 0000 3CCA             		jsr	(CalcSine).l
00006C74 7800                       		moveq	#0,d4
00006C76 1828 003C                  		move.b	$3C(a0),d4
00006C7A C3C4                       		muls.w	d4,d1
00006C7C E081                       		asr.l	#8,d1
00006C7E C1C4                       		muls.w	d4,d0
00006C80 E080                       		asr.l	#8,d0
00006C82 D268 0038                  		add.w	$38(a0),d1
00006C86 D068 003A                  		add.w	$3A(a0),d0
00006C8A 3141 0008                  		move.w	d1,obX(a0)
00006C8E 3140 000A                  		move.w	d0,obScreenY(a0)
00006C92                            
00006C92                            locret_5BBA:
00006C92 4E75                       		rts	
00006C92 4E75                       		rts	
00006C94                            Map_EEgg:	include	"_maps\Try Again & End Eggman.asm"
00006C94                            ; ---------------------------------------------------------------------------
00006C94                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006C94                            ; ---------------------------------------------------------------------------
00006C94                            Map_EEgg_internal:
00006C94 0000                       		dc.w M_EEgg_Try1-Map_EEgg_internal
00006C96 0000                       		dc.w M_EEgg_Try2-Map_EEgg_internal
00006C98 0000                       		dc.w M_EEgg_Try3-Map_EEgg_internal
00006C9A 0000                       		dc.w M_EEgg_Try4-Map_EEgg_internal
00006C9C 0000                       		dc.w M_EEgg_End1-Map_EEgg_internal
00006C9E 0000                       		dc.w M_EEgg_End2-Map_EEgg_internal
00006CA0 0000                       		dc.w M_EEgg_End3-Map_EEgg_internal
00006CA2 0000                       		dc.w M_EEgg_End4-Map_EEgg_internal
00006CA4 08                         M_EEgg_Try1:	dc.b 8
00006CA5 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006CAA F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006CAF E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006CB4 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006CB9 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006CBE 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006CC3 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006CC8 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006CCD 08                         M_EEgg_Try2:	dc.b 8
00006CCE E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006CD3 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006CD8 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006CDD F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006CE2 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006CE7 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006CEC 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006CF1 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006CF6 08                         M_EEgg_Try3:	dc.b 8
00006CF7 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006CFC F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006D01 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006D06 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006D0B 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006D10 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006D15 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006D1A 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006D1F 08                         M_EEgg_Try4:	dc.b 8
00006D20 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006D25 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006D2A E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006D2F F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006D34 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006D39 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006D3E 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006D43 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006D48 0C                         M_EEgg_End1:	dc.b $C
00006D49 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006D4E F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006D53 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006D58 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006D5D ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00006D62 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006D67 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006D6C 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006D71 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006D76 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006D7B 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006D80 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006D85 0A                         M_EEgg_End2:	dc.b $A
00006D86 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006D8B DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006D90 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006D95 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006D9A DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006D9F F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006DA4 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006DA9 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006DAE 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006DB3 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006DB8 0A                         M_EEgg_End3:	dc.b $A
00006DB9 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006DBE E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006DC3 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006DC8 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006DCD E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006DD2 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006DD7 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006DDC 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006DE1 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006DE6 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006DEB 0C                         M_EEgg_End4:	dc.b $C
00006DEC F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006DF1 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006DF6 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006DFB 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006E00 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006E05 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006E0A 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006E0F 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006E14 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006E19 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006E1E 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006E23 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006E28                            		even
00006E28                            		even
00006E28                            
00006E28                            ; ---------------------------------------------------------------------------
00006E28                            ; Ending sequence demos
00006E28                            ; ---------------------------------------------------------------------------
00006E28                            Demo_EndGHZ1:	incbin	"demodata\Ending - GHZ1.bin"
00006E56                            		even
00006E56                            Demo_EndMZ:	incbin	"demodata\Ending - MZ.bin"
00006E96                            		even
00006E96                            Demo_EndSYZ:	incbin	"demodata\Ending - SYZ.bin"
00006EC6                            		even
00006EC6                            Demo_EndLZ:	incbin	"demodata\Ending - LZ.bin"
00006EF6                            		even
00006EF6                            Demo_EndSLZ:	incbin	"demodata\Ending - SLZ.bin"
00006F16                            		even
00006F16                            Demo_EndSBZ1:	incbin	"demodata\Ending - SBZ1.bin"
00006F36                            		even
00006F36                            Demo_EndSBZ2:	incbin	"demodata\Ending - SBZ2.bin"
00006F66                            		even
00006F66                            Demo_EndGHZ2:	incbin	"demodata\Ending - GHZ2.bin"
00006F96                            		even
00006F96                            
00006F96                            		include	"_inc\LevelSizeLoad & BgScrollSpeed (JP1).asm"
00006F96                            ; ---------------------------------------------------------------------------
00006F96                            ; Subroutine to	load level boundaries and start	locations
00006F96                            ; ---------------------------------------------------------------------------
00006F96                            
00006F96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F96                            
00006F96                            
00006F96                            LevelSizeLoad:
00006F96 7000                       		moveq	#0,d0
00006F98 11C0 F740                  		move.b	d0,($FFFFF740).w
00006F9C 11C0 F741                  		move.b	d0,($FFFFF741).w
00006FA0 11C0 F746                  		move.b	d0,($FFFFF746).w
00006FA4 11C0 F748                  		move.b	d0,($FFFFF748).w
00006FA8 11C0 F742                  		move.b	d0,(v_dle_routine).w
00006FAC 3038 FE10                  		move.w	(v_zone).w,d0
00006FB0 ED08                       		lsl.b	#6,d0
00006FB2 E848                       		lsr.w	#4,d0
00006FB4 3200                       		move.w	d0,d1
00006FB6 D040                       		add.w	d0,d0
00006FB8 D041                       		add.w	d1,d0
00006FBA 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006FBE 3018                       		move.w	(a0)+,d0
00006FC0 31C0 F730                  		move.w	d0,($FFFFF730).w
00006FC4 2018                       		move.l	(a0)+,d0
00006FC6 21C0 F728                  		move.l	d0,(v_limitleft2).w
00006FCA 21C0 F720                  		move.l	d0,(v_limitleft1).w
00006FCE 2018                       		move.l	(a0)+,d0
00006FD0 21C0 F72C                  		move.l	d0,(v_limittop2).w
00006FD4 21C0 F724                  		move.l	d0,(v_limittop1).w
00006FD8 3038 F728                  		move.w	(v_limitleft2).w,d0
00006FDC 0640 0240                  		addi.w	#$240,d0
00006FE0 31C0 F732                  		move.w	d0,(v_limitleft3).w
00006FE4 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006FEA 3018                       		move.w	(a0)+,d0
00006FEC 31C0 F73E                  		move.w	d0,(v_lookshift).w
00006FF0 31FC 00A0 F7A0             		move.w    #160,(v_camera_pan).w    ; reset the horizontal camera pan value to 160 pixels
00006FF6 6000 0000                  		bra.w	LevSz_ChkLamp
00006FFA                            
00006FFA                            ; ===========================================================================
00006FFA                            ; ---------------------------------------------------------------------------
00006FFA                            ; Level size array
00006FFA                            ; ---------------------------------------------------------------------------
00006FFA                            LevelSizeArray:
00006FFA                            		; GHZ
00006FFA 0004 0000 4470 0000 0400+  		dc.w $0004, $0000, $4470, $0000, $0400, $0060
00007006 0004 0000 2E60 0000 0300+  		dc.w $0004, $0000, $2E60, $0000, $0300, $0060
00007012 0004 0000 2960 0000 0300+  		dc.w $0004, $0000, $2960, $0000, $0300, $0060
0000701E 0004 0000 7EC0 0000 0400+  		dc.w $0004, $0000, $7EC0, $0000, $0400, $0060
0000702A                            		; LZ
0000702A 0004 0000 19AF 0000 0530+  		dc.w $0004, $0000, $19AF, $0000, $0530, $0060
00007036 0004 0000 10AF 0000 0720+  		dc.w $0004, $0000, $10AF, $0000, $0720, $0060
00007042 0004 0000 202F FF00 0800+  		dc.w $0004, $0000, $202F, $FF00, $0800, $0060
0000704E 0004 0000 20BF 0000 0720+  		dc.w $0004, $0000, $20BF, $0000, $0720, $0060
0000705A                            		; MZ
0000705A 0004 0000 21C0 0000 0520+  		dc.w $0004, $0000, $21C0, $0000, $0520, $0060
00007066 0004 0000 2DE0 0000 0520+  		dc.w $0004, $0000, $2DE0, $0000, $0520, $0060
00007072 0004 0000 1800 0000 0720+  		dc.w $0004, $0000, $1800, $0000, $0720, $0060
0000707E 0004 0000 16BF 0000 0720+  		dc.w $0004, $0000, $16BF, $0000, $0720, $0060
0000708A                            		; SLZ
0000708A 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00007096 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
000070A2 0004 0000 2000 0000 0640+  		dc.w $0004, $0000, $2000, $0000, $0640, $0060
000070AE 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
000070BA                            		; SYZ
000070BA 0004 0000 1B00 0000 0520+  		dc.w $0004, $0000, $1B00, $0000, $0520, $0060
000070C6 0004 0000 1B60 0000 0520+  		dc.w $0004, $0000, $1B60, $0000, $0520, $0060
000070D2 0004 0000 2C00 0000 0620+  		dc.w $0004, $0000, $2C00, $0000, $0620, $0060
000070DE 0004 0000 2EC0 0000 0620+  		dc.w $0004, $0000, $2EC0, $0000, $0620, $0060
000070EA                            		; SBZ
000070EA 0004 0000 21C0 0000 0720+  		dc.w $0004, $0000, $21C0, $0000, $0720, $0060
000070F6 0004 0000 1E40 0000 0800+  		dc.w $0004, $0000, $1E40, $0000, $0800, $0060
00007102 0004 2080 2460 0510 0510+  		dc.w $0004, $2080, $2460, $0510, $0510, $0060
0000710E 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
0000711A                            		; Ending
0000711A 0004 0000 0500 0110 0110+  		dc.w $0004, $0000, $0500, $0110, $0110, $0060
00007126 0004 0000 0DC0 0110 0110+  		dc.w $0004, $0000, $0DC0, $0110, $0110, $0060
00007132 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
0000713E 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
0000714A                            
0000714A                            ; ---------------------------------------------------------------------------
0000714A                            ; Ending start location array
0000714A                            ; ---------------------------------------------------------------------------
0000714A                            EndingStLocArray:
0000714A                            		include	"_inc\Start Location Array - Ending.asm"
0000714A                            ; ---------------------------------------------------------------------------
0000714A                            ; Ending start location array
0000714A                            ; ---------------------------------------------------------------------------
0000714A                            
0000714A                            		incbin	"startpos\ghz1 (Credits demo 1).bin"
0000714E                            		incbin	"startpos\mz2 (Credits demo).bin"
00007152                            		incbin	"startpos\syz3 (Credits demo).bin"
00007156                            		incbin	"startpos\lz3 (Credits demo).bin"
0000715A                            		incbin	"startpos\slz3 (Credits demo).bin"
0000715E                            		incbin	"startpos\sbz1 (Credits demo).bin"
00007162                            		incbin	"startpos\sbz2 (Credits demo).bin"
00007166                            		incbin	"startpos\ghz1 (Credits demo 2).bin"
0000716A                            		even
0000716A                            		even
0000716A                            
0000716A                            ; ===========================================================================
0000716A                            
0000716A                            LevSz_ChkLamp:
0000716A 4A38 FE30                  		tst.b	(v_lastlamp).w	; have any lampposts been hit?
0000716E 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00007170                            
00007170 4EB9 0000 0000             		jsr	(Lamp_LoadInfo).l
00007176 3238 D008                  		move.w	(v_player+obX).w,d1
0000717A 3038 D00C                  		move.w	(v_player+obY).w,d0
0000717E 6000                       		bra.s	LevSz_SkipStartPos
00007180                            ; ===========================================================================
00007180                            
00007180                            LevSz_StartLoc:
00007180 3038 FE10                  		move.w	(v_zone).w,d0
00007184 ED08                       		lsl.b	#6,d0
00007186 E848                       		lsr.w	#4,d0
00007188 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
0000718C 4A78 FFF0                  		tst.w	(f_demo).w	; is ending demo mode on?
00007190 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00007192                            
00007192 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00007196 5340                       		subq.w	#1,d0
00007198 E548                       		lsl.w	#2,d0
0000719A 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
0000719E                            
0000719E                            LevSz_SonicPos:
0000719E 7200                       		moveq	#0,d1
000071A0 3219                       		move.w	(a1)+,d1
000071A2 31C1 D008                  		move.w	d1,(v_player+obX).w ; set Sonic's position on x-axis
000071A6 7000                       		moveq	#0,d0
000071A8 3011                       		move.w	(a1),d0
000071AA 31C0 D00C                  		move.w	d0,(v_player+obY).w ; set Sonic's position on y-axis
000071AE                            
000071AE                            SetScreen:
000071AE                            	LevSz_SkipStartPos:
000071AE 4278 F7A8                  		clr.w (v_trackpos).w ; reset Sonic's position tracking index 
000071B2 45F8 CB00                  		lea (v_tracksonic).w,a2 ; load the tracking array into a2 
000071B6 743F                       		moveq #63,d2 ; begin a 64-step loop 
000071B8                            @looppoint: 
000071B8 34C1                       		move.w d1,(a2)+ ; fill in X 
000071BA 34C0                       		move.w d0,(a2)+ ; fill in Y 
000071BC 51CA FFFA                  		dbf d2,@looppoint ; loop	
000071C0 0441 00A0                  		subi.w	#160,d1		; is Sonic more than 160px from left edge?
000071C4 6400                       		bcc.s	SetScr_WithinLeft ; if yes, branch
000071C6 7200                       		moveq	#0,d1
000071C8                            
000071C8                            	SetScr_WithinLeft:
000071C8 3438 F72A                  		move.w	(v_limitright2).w,d2
000071CC B242                       		cmp.w	d2,d1		; is Sonic inside the right edge?
000071CE 6500                       		bcs.s	SetScr_WithinRight ; if yes, branch
000071D0 3202                       		move.w	d2,d1
000071D2                            
000071D2                            	SetScr_WithinRight:
000071D2 31C1 F700                  		move.w	d1,(v_screenposx).w ; set horizontal screen position
000071D6                            
000071D6 0440 0060                  		subi.w	#96,d0		; is Sonic within 96px of upper edge?
000071DA 6400                       		bcc.s	SetScr_WithinTop ; if yes, branch
000071DC 7000                       		moveq	#0,d0
000071DE                            
000071DE                            	SetScr_WithinTop:
000071DE B078 F72E                  		cmp.w	(v_limitbtm2).w,d0 ; is Sonic above the bottom edge?
000071E2 6D00                       		blt.s	SetScr_WithinBottom ; if yes, branch
000071E4 3038 F72E                  		move.w	(v_limitbtm2).w,d0
000071E8                            
000071E8                            	SetScr_WithinBottom:
000071E8 31C0 F704                  		move.w	d0,(v_screenposy).w ; set vertical screen position
000071EC 6100 0000                  		bsr.w	BgScrollSpeed
000071F0 7000                       		moveq	#0,d0
000071F2 1038 FE10                  		move.b	(v_zone).w,d0
000071F6 E508                       		lsl.b	#2,d0
000071F8 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),(v_256loop1).w
000071FE 4E75                       		rts
00007200                            ; ===========================================================================
00007200                            ; ---------------------------------------------------------------------------
00007200                            ; Sonic start location array
00007200                            ; ---------------------------------------------------------------------------
00007200                            StartLocArray:	include	"_inc\Start Location Array - Levels.asm"
00007200                            ; ---------------------------------------------------------------------------
00007200                            ; Sonic start location array
00007200                            ; ---------------------------------------------------------------------------
00007200                            
00007200                            		incbin	"startpos\ghz1.bin"
00007204                            		incbin	"startpos\ghz2.bin"
00007208                            		incbin	"startpos\ghz3.bin"
0000720C 0080 00A8                  		dc.w	$80,$A8
00007210                            
00007210                            		incbin	"startpos\lz1.bin"
00007214                            		incbin	"startpos\lz2.bin"
00007218                            		incbin	"startpos\lz3.bin"
0000721C                            		incbin	"startpos\sbz3.bin"
00007220                            
00007220                            		incbin	"startpos\mz1.bin"
00007224                            		incbin	"startpos\mz2.bin"
00007228                            		incbin	"startpos\mz3.bin"
0000722C 0080 00A8                  		dc.w	$80,$A8
00007230                            
00007230                            		incbin	"startpos\slz1.bin"
00007234                            		incbin	"startpos\slz2.bin"
00007238                            		incbin	"startpos\slz3.bin"
0000723C 0080 00A8                  		dc.w	$80,$A8
00007240                            
00007240                            		incbin	"startpos\syz1.bin"
00007244                            		incbin	"startpos\syz2.bin"
00007248                            		incbin	"startpos\syz3.bin"
0000724C 0080 00A8                  		dc.w	$80,$A8
00007250                            
00007250                            		incbin	"startpos\sbz1.bin"
00007254                            		incbin	"startpos\sbz2.bin"
00007258                            		incbin	"startpos\fz.bin"
0000725C 0080 00A8                  		dc.w	$80,$A8
00007260                            
00007260                            
00007260                            		incbin	"startpos\end1.bin"
00007264                            		incbin	"startpos\end2.bin"
00007268 0080 00A8                  		dc.w	$80,$A8
0000726C 0080 00A8                  		dc.w	$80,$A8
00007270                            
00007270                            		even
00007270                            		even
00007270                            
00007270                            ; ---------------------------------------------------------------------------
00007270                            ; Which	256x256	tiles contain loops or roll-tunnels
00007270                            ; ---------------------------------------------------------------------------
00007270                            
00007270                            LoopTileNums:
00007270                            
00007270                            ; 		loop	loop	tunnel	tunnel
00007270                            
00007270 B5C0 1F20                  	dc.b	$B5,	$C0,	$1F,	$20	; Green Hill
00007274 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Labyrinth
00007278 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Marble
0000727C AAB4 7F7F                  	dc.b	$AA,	$B4,	$7F,	$7F	; Star Light
00007280 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Spring Yard
00007284 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Scrap Brain
00007288 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Ending (Green Hill)
0000728C                            
0000728C                            		even
0000728C                            
0000728C                            ; ---------------------------------------------------------------------------
0000728C                            ; Subroutine to	set scroll speed of some backgrounds
0000728C                            ; ---------------------------------------------------------------------------
0000728C                            
0000728C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000728C                            
0000728C                            
0000728C                            BgScrollSpeed:
0000728C 4A38 FE30                  		tst.b	(v_lastlamp).w
00007290 6600                       		bne.s	loc_6206
00007292 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007296 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
0000729A 31C1 F708                  		move.w	d1,(v_bgscreenposx).w
0000729E 31C1 F710                  		move.w	d1,(v_bg2screenposx).w
000072A2 31C1 F718                  		move.w	d1,(v_bg3screenposx).w
000072A6                            
000072A6                            loc_6206:
000072A6 7400                       		moveq	#0,d2
000072A8 1438 FE10                  		move.b	(v_zone).w,d2
000072AC D442                       		add.w	d2,d2
000072AE 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000072B2 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000072B6                            ; End of function BgScrollSpeed
000072B6                            
000072B6                            ; ===========================================================================
000072B6 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000072BA 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
000072BE 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
000072C2 0000                       		dc.w BgScroll_End-BgScroll_Index
000072C4                            ; ===========================================================================
000072C4                            
000072C4                            BgScroll_GHZ:
000072C4 42B8 F708                  		clr.l	(v_bgscreenposx).w
000072C8 42B8 F70C                  		clr.l	(v_bgscreenposy).w
000072CC 42B8 F714                  		clr.l	(v_bg2screenposy).w
000072D0 42B8 F71C                  		clr.l	(v_bg3screenposy).w
000072D4 45F8 A800                  		lea	($FFFFA800).w,a2
000072D8 429A                       		clr.l	(a2)+
000072DA 429A                       		clr.l	(a2)+
000072DC 429A                       		clr.l	(a2)+
000072DE 4E75                       		rts
000072E0                            ; ===========================================================================
000072E0                            
000072E0                            BgScroll_LZ:
000072E0 E280                       		asr.l	#1,d0
000072E2 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000072E6 4E75                       		rts	
000072E8                            ; ===========================================================================
000072E8                            
000072E8                            BgScroll_MZ:
000072E8 4E75                       		rts	
000072EA                            ; ===========================================================================
000072EA                            
000072EA                            BgScroll_SLZ:
000072EA E280                       		asr.l	#1,d0
000072EC 0640 00C0                  		addi.w	#$C0,d0
000072F0 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000072F4 42B8 F708                  		clr.l	(v_bgscreenposx).w
000072F8 4E75                       		rts	
000072FA                            ; ===========================================================================
000072FA                            
000072FA                            BgScroll_SYZ:
000072FA E980                       		asl.l	#4,d0
000072FC 2400                       		move.l	d0,d2
000072FE E380                       		asl.l	#1,d0
00007300 D082                       		add.l	d2,d0
00007302 E080                       		asr.l	#8,d0
00007304 5240                       		addq.w	#1,d0
00007306 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
0000730A 42B8 F708                  		clr.l	(v_bgscreenposx).w
0000730E 4E75                       		rts	
00007310                            ; ===========================================================================
00007310                            
00007310                            BgScroll_SBZ:
00007310 0240 07F8                  		andi.w	#$7F8,d0
00007314 E640                       		asr.w	#3,d0
00007316 5240                       		addq.w	#1,d0
00007318 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
0000731C 4E75                       		rts	
0000731E                            ; ===========================================================================
0000731E                            
0000731E                            BgScroll_End:
0000731E 3038 F700                  		move.w	(v_screenposx).w,d0
00007322 E240                       		asr.w	#1,d0
00007324 31C0 F708                  		move.w	d0,(v_bgscreenposx).w
00007328 31C0 F710                  		move.w	d0,(v_bg2screenposx).w
0000732C E440                       		asr.w	#2,d0
0000732E 3200                       		move.w	d0,d1
00007330 D040                       		add.w	d0,d0
00007332 D041                       		add.w	d1,d0
00007334 31C0 F718                  		move.w	d0,(v_bg3screenposx).w
00007338 42B8 F70C                  		clr.l	(v_bgscreenposy).w
0000733C 42B8 F714                  		clr.l	(v_bg2screenposy).w
00007340 42B8 F71C                  		clr.l	(v_bg3screenposy).w
00007344 45F8 A800                  		lea	($FFFFA800).w,a2
00007348 429A                       		clr.l	(a2)+
0000734A 429A                       		clr.l	(a2)+
0000734C 429A                       		clr.l	(a2)+
0000734E 4E75                       		rts
0000734E 4E75                       		rts
00007350                            		include	"_inc\DeformLayers (JP1).asm"
00007350                            ; ---------------------------------------------------------------------------
00007350                            ; Background layer deformation subroutines
00007350                            ; ---------------------------------------------------------------------------
00007350                            
00007350                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007350                            
00007350                            
00007350                            DeformLayers:
00007350 4A38 F744                  		tst.b	(f_nobgscroll).w
00007354 6700                       		beq.s	@bgscroll
00007356 4E75                       		rts	
00007358                            ; ===========================================================================
00007358                            
00007358                            	@bgscroll:
00007358 4278 F754                  		clr.w	(v_fg_scroll_flags).w
0000735C 4278 F756                  		clr.w	(v_bg1_scroll_flags).w
00007360 4278 F758                  		clr.w	(v_bg2_scroll_flags).w
00007364 4278 F75A                  		clr.w	(v_bg3_scroll_flags).w
00007368 6100 0000                  		bsr.w	ScrollHoriz
0000736C 6100 0000                  		bsr.w	ScrollVertical
00007370 6100 0000                  		bsr.w	DynamicLevelEvents
00007374 31F8 F704 F616             		move.w	(v_screenposy).w,(v_scrposy_dup).w
0000737A 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007380 7000                       		moveq	#0,d0
00007382 1038 FE10                  		move.b	(v_zone).w,d0
00007386 D040                       		add.w	d0,d0
00007388 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
0000738C 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00007390                            ; End of function DeformLayers
00007390                            
00007390                            ; ===========================================================================
00007390                            ; ---------------------------------------------------------------------------
00007390                            ; Offset index for background layer deformation	code
00007390                            ; ---------------------------------------------------------------------------
00007390 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00007394 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00007398 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
0000739C 0000                       		dc.w Deform_GHZ-Deform_Index
0000739E                            ; ---------------------------------------------------------------------------
0000739E                            ; Green	Hill Zone background layer deformation code
0000739E                            ; ---------------------------------------------------------------------------
0000739E                            
0000739E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000739E                            
0000739E                            
0000739E                            Deform_GHZ:
0000739E                            	;cmpi.b    #id_Title,(v_gamemode).w
0000739E                            	;beq.w    Deform_Title
0000739E                            
0000739E                            ;Deform_GHZ_Stage:
0000739E                            	; block 3 - distant mountains
0000739E 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000073A2 48C4                       		ext.l	d4
000073A4 EB84                       		asl.l	#5,d4
000073A6 2204                       		move.l	d4,d1
000073A8 E384                       		asl.l	#1,d4
000073AA D881                       		add.l	d1,d4
000073AC 7C00                       		moveq	#0,d6
000073AE 6100 0000                  		bsr.w	BGScroll_Block3
000073B2                            	; block 2 - hills & waterfalls
000073B2 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000073B6 48C4                       		ext.l	d4
000073B8 EF84                       		asl.l	#7,d4
000073BA 7C00                       		moveq	#0,d6
000073BC 6100 0000                  		bsr.w	BGScroll_Block2
000073C0                            	; calculate Y position
000073C0 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000073C4 3038 F704                  		move.w	(v_screenposy).w,d0
000073C8 0240 07FF                  		andi.w	#$7FF,d0
000073CC EA48                       		lsr.w	#5,d0
000073CE 4440                       		neg.w	d0
000073D0 0640 0020                  		addi.w	#$20,d0
000073D4 6A00                       		bpl.s	@limitY
000073D6 7000                       		moveq	#0,d0
000073D8                            	@limitY:
000073D8 3800                       		move.w	d0,d4
000073DA 31C0 F618                  		move.w	d0,(v_bgscrposy_dup).w
000073DE 3038 F700                  		move.w	(v_screenposx).w,d0
000073E2 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
000073E8 6600                       		bne.s	@notTitle
000073EA 7000                       		moveq	#0,d0	; reset foreground position in title screen
000073EC                            	@notTitle:
000073EC 4440                       		neg.w	d0
000073EE 4840                       		swap	d0
000073F0                            	; auto-scroll clouds
000073F0 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
000073F4 069A 0001 0000             		addi.l	#$10000,(a2)+
000073FA 069A 0000 C000             		addi.l	#$C000,(a2)+
00007400 069A 0000 8000             		addi.l	#$8000,(a2)+
00007406                            	; calculate background scroll	
00007406 3038 A800                  		move.w	(v_bgscroll_buffer).w,d0
0000740A D078 F718                  		add.w	(v_bg3screenposx).w,d0
0000740E 4440                       		neg.w	d0
00007410 323C 001F                  		move.w	#$1F,d1
00007414 9244                       		sub.w	d4,d1
00007416 6500                       		bcs.s	@gotoCloud2
00007418                            	@cloudLoop1:		; upper cloud (32px)
00007418 22C0                       		move.l	d0,(a1)+
0000741A 51C9 FFFC                  		dbf	d1,@cloudLoop1
0000741E                            
0000741E                            	@gotoCloud2:
0000741E 3038 A804                  		move.w	(v_bgscroll_buffer+4).w,d0
00007422 D078 F718                  		add.w	(v_bg3screenposx).w,d0
00007426 4440                       		neg.w	d0
00007428 323C 000F                  		move.w	#$F,d1
0000742C                            	@cloudLoop2:		; middle cloud (16px)
0000742C 22C0                       		move.l	d0,(a1)+
0000742E 51C9 FFFC                  		dbf	d1,@cloudLoop2
00007432                            
00007432 3038 A808                  		move.w	(v_bgscroll_buffer+8).w,d0
00007436 D078 F718                  		add.w	(v_bg3screenposx).w,d0
0000743A 4440                       		neg.w	d0
0000743C 323C 000F                  		move.w	#$F,d1
00007440                            	@cloudLoop3:		; lower cloud (16px)
00007440 22C0                       		move.l	d0,(a1)+
00007442 51C9 FFFC                  		dbf	d1,@cloudLoop3
00007446                            
00007446 323C 002F                  		move.w	#$2F,d1
0000744A 3038 F718                  		move.w	(v_bg3screenposx).w,d0
0000744E 4440                       		neg.w	d0
00007450                            	@mountainLoop:		; distant mountains (48px)
00007450 22C0                       		move.l	d0,(a1)+
00007452 51C9 FFFC                  		dbf	d1,@mountainLoop
00007456                            
00007456 323C 0027                  		move.w	#$27,d1
0000745A 3038 F710                  		move.w	(v_bg2screenposx).w,d0
0000745E 4440                       		neg.w	d0
00007460                            	@hillLoop:			; hills & waterfalls (40px)
00007460 22C0                       		move.l	d0,(a1)+
00007462 51C9 FFFC                  		dbf	d1,@hillLoop
00007466                            
00007466 3038 F710                  		move.w	(v_bg2screenposx).w,d0
0000746A 3438 F700                  		move.w	(v_screenposx).w,d2
0000746E 9440                       		sub.w	d0,d2
00007470 48C2                       		ext.l	d2
00007472 E182                       		asl.l	#8,d2
00007474 85FC 0068                  		divs.w	#$68,d2
00007478 48C2                       		ext.l	d2
0000747A E182                       		asl.l	#8,d2
0000747C 7600                       		moveq	#0,d3
0000747E 3600                       		move.w	d0,d3
00007480 323C 0047                  		move.w	#$47,d1
00007484 D244                       		add.w	d4,d1
00007486                            	@waterLoop:			; water deformation
00007486 3003                       		move.w	d3,d0
00007488 4440                       		neg.w	d0
0000748A 22C0                       		move.l	d0,(a1)+
0000748C 4843                       		swap	d3
0000748E D682                       		add.l	d2,d3
00007490 4843                       		swap	d3
00007492 51C9 FFF2                  		dbf	d1,@waterLoop
00007496 4E75                       		rts
00007498                            ; End of function Deform_GHZ
00007498                            
00007498                            Deform_Title:
00007498 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000749C 48C4                       		ext.l	d4
0000749E EB84                       		asl.l	#5,d4
000074A0 2204                       		move.l	d4,d1
000074A2 E384                       		asl.l	#1,d4
000074A4 D881                       		add.l	d1,d4
000074A6 7A00                       		moveq	#0,d5
000074A8 6100 0000                  		bsr.w	BGScroll_Block1
000074AC 6100 0000                  		bsr.w	BGScroll_Block3
000074B0 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000074B4 3038 F704                  		move.w	(v_screenposy).w,d0
000074B8 0240 07FF                  		andi.w	#$7FF,d0
000074BC EA48                       		lsr.w	#5,d0
000074BE 4440                       		neg.w	d0
000074C0 0640 0026                  		addi.w	#$26,d0
000074C4 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
000074C8 3800                       		move.w	d0,d4
000074CA 6100 0000                  		bsr.w	BGScroll_Block3
000074CE 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000074D4 323C 006F                  		move.w	#$6F,d1
000074D8 9244                       		sub.w	d4,d1
000074DA 3038 F700                  		move.w	(v_screenposx).w,d0
000074DE 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
000074E4 6600                       		bne.s	loc_633C
000074E6 7000                       		moveq	#0,d0
000074E8                            
000074E8                            loc_633C:
000074E8 4440                       		neg.w	d0
000074EA 4840                       		swap	d0
000074EC 3038 F708                  		move.w	(v_bgscreenposx).w,d0
000074F0 4440                       		neg.w	d0
000074F2                            
000074F2                            loc_6346:
000074F2 22C0                       		move.l	d0,(a1)+
000074F4 51C9 FFFC                  		dbf	d1,loc_6346
000074F8 323C 0027                  		move.w	#$27,d1
000074FC 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007500 4440                       		neg.w	d0
00007502                            
00007502                            loc_6356:
00007502 22C0                       		move.l	d0,(a1)+
00007504 51C9 FFFC                  		dbf	d1,loc_6356
00007508 3038 F710                  		move.w	(v_bg2screenposx).w,d0
0000750C 0640 0000                  		addi.w	#0,d0
00007510 3438 F700                  		move.w	(v_screenposx).w,d2
00007514 0642 FE00                  		addi.w	#-$200,d2
00007518 9440                       		sub.w	d0,d2
0000751A 48C2                       		ext.l	d2
0000751C E182                       		asl.l	#8,d2
0000751E 85FC 0068                  		divs.w	#$68,d2
00007522 48C2                       		ext.l	d2
00007524 E182                       		asl.l	#8,d2
00007526 7600                       		moveq	#0,d3
00007528 3600                       		move.w	d0,d3
0000752A 323C 0047                  		move.w	#$47,d1
0000752E D244                       		add.w	d4,d1
00007530                            
00007530                            loc_6384:
00007530 3003                       		move.w	d3,d0
00007532 4440                       		neg.w	d0
00007534 22C0                       		move.l	d0,(a1)+
00007536 4843                       		swap	d3
00007538 D682                       		add.l	d2,d3
0000753A 4843                       		swap	d3
0000753C 51C9 FFF2                  		dbf	d1,loc_6384
00007540 4E75                       		rts	
00007542                            
00007542                            ; ===========================================================================
00007542                            ; ---------------------------------------------------------------------------
00007542                            ; Labyrinth Zone background layer deformation code
00007542                            ; ---------------------------------------------------------------------------
00007542                            
00007542                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007542                            
00007542                            
00007542                            Deform_LZ:
00007542                            	; plain background scroll
00007542 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007546 48C4                       		ext.l	d4
00007548 EF84                       		asl.l	#7,d4
0000754A 3A38 F73C                  		move.w	(v_scrshifty).w,d5
0000754E 48C5                       		ext.l	d5
00007550 EF85                       		asl.l	#7,d5
00007552 6100 0000                  		bsr.w	BGScroll_XY
00007556                            
00007556 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000755C 47F9 0000 0000             		lea	(Lz_Scroll_Data).l,a3
00007562 45F9 0000 0000             		lea	(Drown_WobbleData).l,a2
00007568 1438 F7D8                  		move.b	(v_lz_deform).w,d2
0000756C 1602                       		move.b	d2,d3
0000756E 0678 0080 F7D8             		addi.w	#$80,(v_lz_deform).w
00007574                            
00007574 D478 F70C                  		add.w	(v_bgscreenposy).w,d2
00007578 0242 00FF                  		andi.w	#$FF,d2
0000757C D678 F704                  		add.w	(v_screenposy).w,d3
00007580 0243 00FF                  		andi.w	#$FF,d3
00007584 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007588 323C 00DF                  		move.w	#$DF,d1
0000758C 3038 F700                  		move.w	(v_screenposx).w,d0
00007590 4440                       		neg.w	d0
00007592 3C00                       		move.w	d0,d6
00007594 4840                       		swap	d0
00007596 3038 F708                  		move.w	(v_bgscreenposx).w,d0
0000759A 4440                       		neg.w	d0
0000759C 3838 F646                  		move.w	(v_waterpos1).w,d4
000075A0 3A38 F704                  		move.w	(v_screenposy).w,d5
000075A4                            	; write normal scroll before meeting water position
000075A4                            	@normalLoop:		
000075A4 BA44                       		cmp.w	d4,d5	; is current y >= water y?
000075A6 6C00                       		bge.s	@underwaterLoop	; if yes, branch
000075A8 22C0                       		move.l	d0,(a1)+
000075AA 5245                       		addq.w	#1,d5
000075AC 5202                       		addq.b	#1,d2
000075AE 5203                       		addq.b	#1,d3
000075B0 51C9 FFF2                  		dbf	d1,@normalLoop
000075B4 4E75                       		rts
000075B6                            	; apply water deformation when underwater
000075B6                            	@underwaterLoop:
000075B6 1833 3000                  		move.b	(a3,d3),d4
000075BA 4884                       		ext.w	d4
000075BC D846                       		add.w	d6,d4
000075BE 32C4                       		move.w	d4,(a1)+
000075C0 1832 2000                  		move.b	(a2,d2),d4
000075C4 4884                       		ext.w	d4
000075C6 D840                       		add.w	d0,d4
000075C8 32C4                       		move.w	d4,(a1)+
000075CA 5202                       		addq.b	#1,d2
000075CC 5203                       		addq.b	#1,d3
000075CE 51C9 FFE6                  		dbf	d1,@underwaterLoop
000075D2 4E75                       		rts
000075D4                            
000075D4                            Lz_Scroll_Data:
000075D4 0101 0202 0303 0303 0202+  		dc.b $01,$01,$02,$02,$03,$03,$03,$03,$02,$02,$01,$01,$00,$00,$00,$00
000075E4 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000075F4 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007604 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007614 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007624 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007634 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007644 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007654 FFFF FEFE FDFD FDFD FEFE+  		dc.b $FF,$FF,$FE,$FE,$FD,$FD,$FD,$FD,$FE,$FE,$FF,$FF,$00,$00,$00,$00
00007664 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007674 0101 0202 0303 0303 0202+  		dc.b $01,$01,$02,$02,$03,$03,$03,$03,$02,$02,$01,$01,$00,$00,$00,$00
00007684 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007694 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000076A4 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000076B4 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000076C4 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000076D4                            ; End of function Deform_LZ
000076D4                            
000076D4                            ; ---------------------------------------------------------------------------
000076D4                            ; Marble Zone background layer deformation code
000076D4                            ; ---------------------------------------------------------------------------
000076D4                            
000076D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076D4                            
000076D4                            
000076D4                            Deform_MZ:
000076D4                            	; block 1 - dungeon interior
000076D4 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000076D8 48C4                       		ext.l	d4
000076DA ED84                       		asl.l	#6,d4
000076DC 2204                       		move.l	d4,d1
000076DE E384                       		asl.l	#1,d4
000076E0 D881                       		add.l	d1,d4
000076E2 7C02                       		moveq	#2,d6
000076E4 6100 0000                  		bsr.w	BGScroll_Block1
000076E8                            	; block 3 - mountains
000076E8 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000076EC 48C4                       		ext.l	d4
000076EE ED84                       		asl.l	#6,d4
000076F0 7C06                       		moveq	#6,d6
000076F2 6100 0000                  		bsr.w	BGScroll_Block3
000076F6                            	; block 2 - bushes & antique buildings
000076F6 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000076FA 48C4                       		ext.l	d4
000076FC EF84                       		asl.l	#7,d4
000076FE 7C04                       		moveq	#4,d6
00007700 6100 0000                  		bsr.w	BGScroll_Block2
00007704                            	; calculate y-position of background
00007704 303C 0200                  		move.w	#$200,d0	; start with 512px, ignoring 2 chunks
00007708 3238 F704                  		move.w	(v_screenposy).w,d1
0000770C 0441 01C8                  		subi.w	#$1C8,d1	; 0% scrolling when y <= 56px 
00007710 6500                       		bcs.s	@noYscroll
00007712 3401                       		move.w	d1,d2
00007714 D241                       		add.w	d1,d1
00007716 D242                       		add.w	d2,d1
00007718 E441                       		asr.w	#2,d1
0000771A D041                       		add.w	d1,d0
0000771C                            	@noYscroll:
0000771C 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007720 31C0 F71C                  		move.w	d0,(v_bg3screenposy).w
00007724 6100 0000                  		bsr.w	BGScroll_YAbsolute
00007728 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000772E                            	; do something with redraw flags
0000772E 1038 F756                  		move.b	(v_bg1_scroll_flags).w,d0
00007732 8038 F758                  		or.b	(v_bg2_scroll_flags).w,d0
00007736 8138 F75A                  		or.b	d0,(v_bg3_scroll_flags).w
0000773A 4238 F756                  		clr.b	(v_bg1_scroll_flags).w
0000773E 4238 F758                  		clr.b	(v_bg2_scroll_flags).w
00007742                            	; calculate background scroll buffer
00007742 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007746 3438 F700                  		move.w	(v_screenposx).w,d2
0000774A 4442                       		neg.w	d2
0000774C 3002                       		move.w	d2,d0
0000774E E440                       		asr.w	#2,d0
00007750 9042                       		sub.w	d2,d0
00007752 48C0                       		ext.l	d0
00007754 E780                       		asl.l	#3,d0
00007756 81FC 0005                  		divs.w	#5,d0
0000775A 48C0                       		ext.l	d0
0000775C E980                       		asl.l	#4,d0
0000775E E180                       		asl.l	#8,d0
00007760 7600                       		moveq	#0,d3
00007762 3602                       		move.w	d2,d3
00007764 E243                       		asr.w	#1,d3
00007766 323C 0004                  		move.w	#4,d1
0000776A                            	@cloudLoop:		
0000776A 32C3                       		move.w	d3,(a1)+
0000776C 4843                       		swap	d3
0000776E D680                       		add.l	d0,d3
00007770 4843                       		swap	d3
00007772 51C9 FFF6                  		dbf	d1,@cloudLoop
00007776                            
00007776 3038 F718                  		move.w	(v_bg3screenposx).w,d0
0000777A 4440                       		neg.w	d0
0000777C 323C 0001                  		move.w	#1,d1
00007780                            	@mountainLoop:		
00007780 32C0                       		move.w	d0,(a1)+
00007782 51C9 FFFC                  		dbf	d1,@mountainLoop
00007786                            
00007786 3038 F710                  		move.w	(v_bg2screenposx).w,d0
0000778A 4440                       		neg.w	d0
0000778C 323C 0008                  		move.w	#8,d1
00007790                            	@bushLoop:		
00007790 32C0                       		move.w	d0,(a1)+
00007792 51C9 FFFC                  		dbf	d1,@bushLoop
00007796                            
00007796 3038 F708                  		move.w	(v_bgscreenposx).w,d0
0000779A 4440                       		neg.w	d0
0000779C 323C 000F                  		move.w	#$F,d1
000077A0                            	@interiorLoop:		
000077A0 32C0                       		move.w	d0,(a1)+
000077A2 51C9 FFFC                  		dbf	d1,@interiorLoop
000077A6                            
000077A6 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
000077AA 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
000077AE 0440 0200                  		subi.w	#$200,d0	; subtract 512px (unused 2 chunks)
000077B2 3400                       		move.w	d0,d2
000077B4 0C40 0100                  		cmpi.w	#$100,d0
000077B8 6500                       		bcs.s	@limitY
000077BA 303C 0100                  		move.w	#$100,d0
000077BE                            	@limitY:
000077BE 0240 01F0                  		andi.w	#$1F0,d0
000077C2 E648                       		lsr.w	#3,d0
000077C4 45F2 0000                  		lea	(a2,d0),a2
000077C8 6000 0000                  		bra.w	Bg_Scroll_X
000077CC                            ; End of function Deform_MZ
000077CC                            
000077CC                            ; ---------------------------------------------------------------------------
000077CC                            ; Star Light Zone background layer deformation code
000077CC                            ; ---------------------------------------------------------------------------
000077CC                            
000077CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000077CC                            
000077CC                            
000077CC                            Deform_SLZ:
000077CC                            	; vertical scrolling
000077CC 3A38 F73C                  		move.w	(v_scrshifty).w,d5
000077D0 48C5                       		ext.l	d5
000077D2 EF85                       		asl.l	#7,d5
000077D4 6100 0000                  		bsr.w	Bg_Scroll_Y
000077D8 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000077DE                            	; calculate background scroll buffer
000077DE 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
000077E2 3438 F700                  		move.w	(v_screenposx).w,d2
000077E6 4442                       		neg.w	d2
000077E8 3002                       		move.w	d2,d0
000077EA E640                       		asr.w	#3,d0
000077EC 9042                       		sub.w	d2,d0
000077EE 48C0                       		ext.l	d0
000077F0 E980                       		asl.l	#4,d0
000077F2 81FC 001C                  		divs.w	#$1C,d0
000077F6 48C0                       		ext.l	d0
000077F8 E980                       		asl.l	#4,d0
000077FA E180                       		asl.l	#8,d0
000077FC 7600                       		moveq	#0,d3
000077FE 3602                       		move.w	d2,d3
00007800 323C 001B                  		move.w	#$1B,d1
00007804                            	@starLoop:		
00007804 32C3                       		move.w	d3,(a1)+
00007806 4843                       		swap	d3
00007808 D680                       		add.l	d0,d3
0000780A 4843                       		swap	d3
0000780C 51C9 FFF6                  		dbf	d1,@starLoop
00007810                            
00007810 3002                       		move.w	d2,d0
00007812 E640                       		asr.w	#3,d0
00007814 3200                       		move.w	d0,d1
00007816 E241                       		asr.w	#1,d1
00007818 D041                       		add.w	d1,d0
0000781A 323C 0004                  		move.w	#4,d1
0000781E                            	@buildingLoop1:		; distant black buildings
0000781E 32C0                       		move.w	d0,(a1)+
00007820 51C9 FFFC                  		dbf	d1,@buildingLoop1
00007824                            
00007824 3002                       		move.w	d2,d0
00007826 E440                       		asr.w	#2,d0
00007828 323C 0004                  		move.w	#4,d1
0000782C                            	@buildingLoop2:		; closer buildings
0000782C 32C0                       		move.w	d0,(a1)+
0000782E 51C9 FFFC                  		dbf	d1,@buildingLoop2
00007832                            
00007832 3002                       		move.w	d2,d0
00007834 E240                       		asr.w	#1,d0
00007836 323C 001D                  		move.w	#$1D,d1
0000783A                            	@bottomLoop:		; bottom part of background
0000783A 32C0                       		move.w	d0,(a1)+
0000783C 51C9 FFFC                  		dbf	d1,@bottomLoop
00007840                            
00007840 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007844 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007848 3400                       		move.w	d0,d2
0000784A 0440 00C0                  		subi.w	#$C0,d0
0000784E 0240 03F0                  		andi.w	#$3F0,d0
00007852 E648                       		lsr.w	#3,d0
00007854 45F2 0000                  		lea	(a2,d0),a2
00007858                            ;-------------------------------------------------------------------------------
00007858                            ;-------------------------------------------------------------------------------
00007858                            Bg_Scroll_X:
00007858 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
0000785C 323C 000E                  		move.w	#$E,d1
00007860 3038 F700                  		move.w	(v_screenposx).w,d0
00007864 4440                       		neg.w	d0
00007866 4840                       		swap	d0
00007868 0242 000F                  		andi.w	#$F,d2
0000786C D442                       		add.w	d2,d2
0000786E 301A                       		move.w	(a2)+,d0
00007870 4EFB 2000                  		jmp	@pixelJump(pc,d2.w)		; skip pixels for first row
00007874                            	@blockLoop:
00007874 301A                       		move.w	(a2)+,d0
00007876                            	@pixelJump:		
00007876 22C0                       		move.l	d0,(a1)+
00007878 22C0                       		move.l	d0,(a1)+
0000787A 22C0                       		move.l	d0,(a1)+
0000787C 22C0                       		move.l	d0,(a1)+
0000787E 22C0                       		move.l	d0,(a1)+
00007880 22C0                       		move.l	d0,(a1)+
00007882 22C0                       		move.l	d0,(a1)+
00007884 22C0                       		move.l	d0,(a1)+
00007886 22C0                       		move.l	d0,(a1)+
00007888 22C0                       		move.l	d0,(a1)+
0000788A 22C0                       		move.l	d0,(a1)+
0000788C 22C0                       		move.l	d0,(a1)+
0000788E 22C0                       		move.l	d0,(a1)+
00007890 22C0                       		move.l	d0,(a1)+
00007892 22C0                       		move.l	d0,(a1)+
00007894 22C0                       		move.l	d0,(a1)+
00007896 51C9 FFDC                  		dbf	d1,@blockLoop
0000789A 4E75                       		rts
0000789C                            
0000789C                            ; ---------------------------------------------------------------------------
0000789C                            ; Spring Yard Zone background layer deformation	code
0000789C                            ; ---------------------------------------------------------------------------
0000789C                            
0000789C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000789C                            
0000789C                            
0000789C                            Deform_SYZ:
0000789C                            	; vertical scrolling
0000789C 3A38 F73C                  		move.w	(v_scrshifty).w,d5
000078A0 48C5                       		ext.l	d5
000078A2 E985                       		asl.l	#4,d5
000078A4 2205                       		move.l	d5,d1
000078A6 E385                       		asl.l	#1,d5
000078A8 DA81                       		add.l	d1,d5
000078AA 6100 0000                  		bsr.w	Bg_Scroll_Y
000078AE 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000078B4                            	; calculate background scroll buffer
000078B4 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
000078B8 3438 F700                  		move.w	(v_screenposx).w,d2
000078BC 4442                       		neg.w	d2
000078BE 3002                       		move.w	d2,d0
000078C0 E640                       		asr.w	#3,d0
000078C2 9042                       		sub.w	d2,d0
000078C4 48C0                       		ext.l	d0
000078C6 E780                       		asl.l	#3,d0
000078C8 81FC 0008                  		divs.w	#8,d0
000078CC 48C0                       		ext.l	d0
000078CE E980                       		asl.l	#4,d0
000078D0 E180                       		asl.l	#8,d0
000078D2 7600                       		moveq	#0,d3
000078D4 3602                       		move.w	d2,d3
000078D6 E243                       		asr.w	#1,d3
000078D8 323C 0007                  		move.w	#7,d1
000078DC                            	@cloudLoop:		
000078DC 32C3                       		move.w	d3,(a1)+
000078DE 4843                       		swap	d3
000078E0 D680                       		add.l	d0,d3
000078E2 4843                       		swap	d3
000078E4 51C9 FFF6                  		dbf	d1,@cloudLoop
000078E8                            
000078E8 3002                       		move.w	d2,d0
000078EA E640                       		asr.w	#3,d0
000078EC 323C 0004                  		move.w	#4,d1
000078F0                            	@mountainLoop:		
000078F0 32C0                       		move.w	d0,(a1)+
000078F2 51C9 FFFC                  		dbf	d1,@mountainLoop
000078F6                            
000078F6 3002                       		move.w	d2,d0
000078F8 E440                       		asr.w	#2,d0
000078FA 323C 0005                  		move.w	#5,d1
000078FE                            	@buildingLoop:		
000078FE 32C0                       		move.w	d0,(a1)+
00007900 51C9 FFFC                  		dbf	d1,@buildingLoop
00007904                            
00007904 3002                       		move.w	d2,d0
00007906 3202                       		move.w	d2,d1
00007908 E241                       		asr.w	#1,d1
0000790A 9041                       		sub.w	d1,d0
0000790C 48C0                       		ext.l	d0
0000790E E980                       		asl.l	#4,d0
00007910 81FC 000E                  		divs.w	#$E,d0
00007914 48C0                       		ext.l	d0
00007916 E980                       		asl.l	#4,d0
00007918 E180                       		asl.l	#8,d0
0000791A 7600                       		moveq	#0,d3
0000791C 3602                       		move.w	d2,d3
0000791E E243                       		asr.w	#1,d3
00007920 323C 000D                  		move.w	#$D,d1
00007924                            	@bushLoop:		
00007924 32C3                       		move.w	d3,(a1)+
00007926 4843                       		swap	d3
00007928 D680                       		add.l	d0,d3
0000792A 4843                       		swap	d3
0000792C 51C9 FFF6                  		dbf	d1,@bushLoop
00007930                            
00007930 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007934 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007938 3400                       		move.w	d0,d2
0000793A 0240 01F0                  		andi.w	#$1F0,d0
0000793E E648                       		lsr.w	#3,d0
00007940 45F2 0000                  		lea	(a2,d0),a2
00007944 6000 FF12                  		bra.w	Bg_Scroll_X
00007948                            ; End of function Deform_SYZ
00007948                            
00007948                            ; ---------------------------------------------------------------------------
00007948                            ; Scrap	Brain Zone background layer deformation	code
00007948                            ; ---------------------------------------------------------------------------
00007948                            
00007948                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007948                            
00007948                            
00007948                            Deform_SBZ:
00007948 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000794C 48C4                       		ext.l	d4
0000794E ED84                       		asl.l	#6,d4
00007950 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007954 48C5                       		ext.l	d5
00007956 E985                       		asl.l	#4,d5
00007958 E385                       		asl.l	#1,d5
0000795A 6100 0000                  		bsr.w	BGScroll_XY
0000795E 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007964 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007968 323C 00DF                  		move.w	#223,d1
0000796C 3038 F700                  		move.w	(v_screenposx).w,d0
00007970 4440                       		neg.w	d0
00007972 4840                       		swap	d0
00007974 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007978 4440                       		neg.w	d0
0000797A                            
0000797A                            loc_6576:
0000797A 22C0                       		move.l	d0,(a1)+
0000797C 51C9 FFFC                  		dbf	d1,loc_6576
00007980 4E75                       		rts	
00007982                            ;-------------------------------------------------------------------------------
00007982                            Deform_SBZ2:;loc_68A2:
00007982 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007986 48C4                       		ext.l	d4
00007988 ED84                       		asl.l	#6,d4
0000798A 3A38 F73C                  		move.w	(v_scrshifty).w,d5
0000798E 48C5                       		ext.l	d5
00007990 E985                       		asl.l	#4,d5
00007992 E385                       		asl.l	#1,d5
00007994 6100 0000                  		bsr.w	BGScroll_XY
00007998 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000799E 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000079A2 323C 00DF                  		move.w	#223,d1
000079A6 3038 F700                  		move.w	(v_screenposx).w,d0
000079AA 4440                       		neg.w	d0
000079AC 4840                       		swap	d0
000079AE 3038 F708                  		move.w	(v_bgscreenposx).w,d0
000079B2 4440                       		neg.w	d0
000079B4                            
000079B4                            loc_6577:
000079B4 22C0                       		move.l	d0,(a1)+
000079B6 51C9 FFFC                  		dbf	d1,loc_6577
000079BA 4E75                       		rts	
000079BC                            
000079BC                            ; ---------------------------------------------------------------------------
000079BC                            ; Subroutine to	scroll the level horizontally as Sonic moves
000079BC                            ; ---------------------------------------------------------------------------
000079BC                            
000079BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079BC                            
000079BC                            
000079BC                            ScrollHoriz:
000079BC 3838 F700                  		move.w	(v_screenposx).w,d4 ; save old screen position
000079C0 6100                       		bsr.s	MoveScreenHoriz
000079C2 3038 F700                  		move.w	(v_screenposx).w,d0
000079C6 0240 0010                  		andi.w	#$10,d0
000079CA 1238 F74A                  		move.b	(v_fg_xblock).w,d1
000079CE B300                       		eor.b	d1,d0
000079D0 6600                       		bne.s	@return
000079D2 0A38 0010 F74A             		eori.b	#$10,(v_fg_xblock).w
000079D8 3038 F700                  		move.w	(v_screenposx).w,d0
000079DC 9044                       		sub.w	d4,d0		; compare new with old screen position
000079DE 6A00                       		bpl.s	@scrollRight
000079E0                            
000079E0 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w ; screen moves backward
000079E6 4E75                       		rts	
000079E8                            
000079E8                            	@scrollRight:
000079E8 08F8 0003 F754             		bset	#3,(v_fg_scroll_flags).w ; screen moves forward
000079EE                            
000079EE                            	@return:
000079EE 4E75                       		rts	
000079F0                            ; End of function ScrollHoriz
000079F0                            
000079F0                            
000079F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079F0                            
000079F0                            MoveScreenHoriz:
000079F0 4A38 FF8B                  		tst.b	($FFFFFF8B).w
000079F4 6700 0000                  		beq.w	@cont		
000079F8 4EF9 0000 0000             		jmp	MoveScreenHorizEXT
000079FE                            		
000079FE                            	@cont:		
000079FE 3238 C904                  		move.w	($FFFFC904).w,d1
00007A02 6700                       		beq.s	@cont1
00007A04 0441 0100                  		sub.w	#$100,d1
00007A08 31C1 C904                  		move.w	d1,($FFFFC904).w
00007A0C 7200                       		moveq	#0,d1
00007A0E 1238 C904                  		move.b	($FFFFC904).w,d1
00007A12 E509                       		lsl.b	#2,d1
00007A14 5801                       		addq.b	#4,d1
00007A16 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007A1A 9001                       		sub.b	d1,d0
00007A1C 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007A20 3031 0000                  		move.w	(a1,d0.w),d0
00007A24 0240 3FFF                  		and.w	#$3FFF,d0
00007A28 6000                       		bra.s	@cont2
00007A2A                            		
00007A2A                            @cont1:
00007A2A 3038 D008                  		move.w	($FFFFD008).w,d0
00007A2E                            		
00007A2E                            @cont2:
00007A2E 9078 F700                  		sub.w	($FFFFF700).w,d0
00007A32 0440 0090                          subi.w    #144,d0        ; is distance less than 144px?
00007A36 6500                               bcs.s    SH_BehindMid    ; if yes, branch
00007A38 0440 0010                          subi.w    #16,d0        ; is distance more than 160px?
00007A3C 6400                               bcc.s    SH_AheadOfMid    ; if yes, branch
00007A3E 4278 F73A                          clr.w    (v_scrshiftx).w
00007A42 4E75                               rts 
00007A44                            ; ===========================================================================
00007A44                            
00007A44                            SH_AheadOfMid:
00007A44 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007A48 6500                               bcs.s    SH_Ahead16    ; if yes, branch
00007A4A 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007A4E                            
00007A4E                                SH_Ahead16:
00007A4E D078 F700                          add.w    (v_screenposx).w,d0
00007A52 B078 F72A                          cmp.w    (v_limitright2).w,d0
00007A56 6D00                               blt.s    SH_SetScreen
00007A58 3038 F72A                          move.w    (v_limitright2).w,d0
00007A5C                            
00007A5C                            SH_SetScreen:
00007A5C 3200                               move.w    d0,d1
00007A5E 9278 F700                          sub.w    (v_screenposx).w,d1
00007A62 E141                               asl.w    #8,d1
00007A64 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007A68 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007A6C 4E75                               rts 
00007A6E                            ; ===========================================================================
00007A6E                            
00007A6E                            SH_BehindMid:
00007A6E 0C40 FFF0                  		cmpi.w	#-$10,d0
00007A72 6400                       		bcc.s	@cont
00007A74 303C FFF0                  		move.w	#-$10,d0	
00007A78                            
00007A78                            @cont:
00007A78 D078 F700                  		add.w	(v_screenposx).w,d0
00007A7C B078 F728                  		cmp.w	(v_limitleft2).w,d0
00007A80 6EDA                       		bgt.s	SH_SetScreen
00007A82 3038 F728                  		move.w	(v_limitleft2).w,d0
00007A86 60D4                       		bra.s	SH_SetScreen
00007A88                            ; End of function MoveScreenHoriz
00007A88                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00007A88                            
00007A88                            MoveScreenHorizEXT:
00007A88 3238 C904                  		move.w	($FFFFC904).w,d1
00007A8C 6700                       		beq.s	@cont1
00007A8E 0441 0100                  		sub.w	#$100,d1
00007A92 31C1 C904                  		move.w	d1,($FFFFC904).w
00007A96 7200                       		moveq	#0,d1
00007A98 1238 C904                  		move.b	($FFFFC904).w,d1
00007A9C E509                       		lsl.b	#2,d1
00007A9E 5801                       		addq.b	#4,d1
00007AA0 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007AA4 9001                       		sub.b	d1,d0
00007AA6 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007AAA 3031 0000                  		move.w	(a1,d0.w),d0
00007AAE 0240 3FFF                  		and.w	#$3FFF,d0
00007AB2 6000                       		bra.s	@cont2
00007AB4                            		
00007AB4                            @cont1:
00007AB4 3038 D008                  		move.w	($FFFFD008).w,d0
00007AB8                            		
00007AB8                            @cont2:
00007AB8 9078 F700                  		sub.w	($FFFFF700).w,d0
00007ABC 9078 F7A0                          sub.w    (v_camera_pan).w,d0    ; Horizontal camera pan value
00007AC0 6700                               beq.s    SHEXT_ProperlyFramed    ; if zero, branch
00007AC2 6500                               bcs.s    SHEXT_BehindMid    ; if less than, branch
00007AC4 6000                               bra.s    SHEXT_AheadOfMid    ; branch
00007AC6                            ; ===========================================================================
00007AC6                            
00007AC6                            SHEXT_ProperlyFramed:
00007AC6 4278 F73A                          clr.w    (v_scrshiftx).w
00007ACA 4E75                               rts 
00007ACC                            ; ===========================================================================
00007ACC                            
00007ACC                            SHEXT_AheadOfMid:
00007ACC 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007AD0 6D00                               blt.s    SHEXT_Ahead16    ; if yes, branch
00007AD2 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007AD6                            
00007AD6                            SHEXT_Ahead16:
00007AD6 D078 F700                          add.w    (v_screenposx).w,d0
00007ADA B078 F72A                          cmp.w    (v_limitright2).w,d0
00007ADE 6D00                               blt.s    SHEXT_SetScreen
00007AE0 3038 F72A                          move.w    (v_limitright2).w,d0
00007AE4                            
00007AE4                            SHEXT_SetScreen:
00007AE4 3200                               move.w    d0,d1
00007AE6 9278 F700                          sub.w    (v_screenposx).w,d1
00007AEA E141                               asl.w    #8,d1
00007AEC 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007AF0 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007AF4 4E75                               rts
00007AF6                            
00007AF6                            ; ===========================================================================
00007AF6                            
00007AF6                            SHEXT_BehindMid:
00007AF6 0C40 FFF0                          cmpi.w    #-16,d0        ; is Sonic within 16px of middle area?
00007AFA 6C00                               bge.s    SHEXT_Behind16    ; if no, branch
00007AFC 303C FFF0                          move.w    #-16,d0        ; set to -16 if less
00007B00                            
00007B00                            SHEXT_Behind16:
00007B00 D078 F700                          add.w    (v_screenposx).w,d0
00007B04 B078 F728                          cmp.w    (v_limitleft2).w,d0
00007B08 6EDA                               bgt.s    SHEXT_SetScreen
00007B0A 3038 F728                          move.w    (v_limitleft2).w,d0
00007B0E 60D4                               bra.s    SHEXT_SetScreen
00007B10                                  
00007B10                            ; End of function MoveScreenHoriz
00007B10                            
00007B10                            
00007B10                            ; ---------------------------------------------------------------------------
00007B10                            ; Subroutine to	scroll the level vertically as Sonic moves
00007B10                            ; ---------------------------------------------------------------------------
00007B10                            
00007B10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B10                            
00007B10                            
00007B10                            ScrollVertical:
00007B10 7200                       		moveq	#0,d1
00007B12 3038 D00C                  		move.w	(v_player+obY).w,d0
00007B16 9078 F704                  		sub.w	(v_screenposy).w,d0 ; Sonic's distance from top of screen
00007B1A 0838 0002 D022             		btst	#2,(v_player+obStatus).w ; is Sonic rolling?
00007B20 6700                       		beq.s	SV_NotRolling	; if not, branch
00007B22 5B40                       		subq.w	#5,d0
00007B24                            
00007B24                            	SV_NotRolling:
00007B24 0838 0001 D022             		btst	#1,(v_player+obStatus).w ; is Sonic jumping?
00007B2A 6700                       		beq.s	loc_664A	; if not, branch
00007B2C                            
00007B2C 0640 0020                  		addi.w	#32,d0
00007B30 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007B34 6500                       		bcs.s	loc_6696
00007B36 0440 0040                  		subi.w	#64,d0
00007B3A 6400                       		bcc.s	loc_6696
00007B3C 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007B40 6600                       		bne.s	loc_66A8
00007B42 6000                       		bra.s	loc_6656
00007B44                            ; ===========================================================================
00007B44                            
00007B44                            loc_664A:
00007B44 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007B48 6600                       		bne.s	loc_665C
00007B4A 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007B4E 6600                       		bne.s	loc_66A8
00007B50                            
00007B50                            loc_6656:
00007B50 4278 F73C                  		clr.w	(v_scrshifty).w
00007B54 4E75                       		rts	
00007B56                            ; ===========================================================================
00007B56                            
00007B56                            loc_665C:
00007B56 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w
00007B5C 6600                       		bne.s	loc_6684
00007B5E 3238 D020                  		move.w	(v_player+obInertia).w,d1
00007B62 6A00                       		bpl.s	loc_666C
00007B64 4441                       		neg.w	d1
00007B66                            
00007B66                            loc_666C:
00007B66 0C41 0800                  		cmpi.w	#$800,d1
00007B6A 6400                       		bcc.s	loc_6696
00007B6C 323C 0600                  		move.w	#$600,d1
00007B70 0C40 0006                  		cmpi.w	#6,d0
00007B74 6E00                       		bgt.s	loc_66F6
00007B76 0C40 FFFA                  		cmpi.w	#-6,d0
00007B7A 6D00                       		blt.s	loc_66C0
00007B7C 6000                       		bra.s	loc_66AE
00007B7E                            ; ===========================================================================
00007B7E                            
00007B7E                            loc_6684:
00007B7E 323C 0200                  		move.w	#$200,d1
00007B82 0C40 0002                  		cmpi.w	#2,d0
00007B86 6E00                       		bgt.s	loc_66F6
00007B88 0C40 FFFE                  		cmpi.w	#-2,d0
00007B8C 6D00                       		blt.s	loc_66C0
00007B8E 6000                       		bra.s	loc_66AE
00007B90                            ; ===========================================================================
00007B90                            
00007B90                            loc_6696:
00007B90 323C 1000                  		move.w	#$1000,d1
00007B94 0C40 0010                  		cmpi.w	#$10,d0
00007B98 6E00                       		bgt.s	loc_66F6
00007B9A 0C40 FFF0                  		cmpi.w	#-$10,d0
00007B9E 6D00                       		blt.s	loc_66C0
00007BA0 6000                       		bra.s	loc_66AE
00007BA2                            ; ===========================================================================
00007BA2                            
00007BA2                            loc_66A8:
00007BA2 7000                       		moveq	#0,d0
00007BA4 11C0 F75C                  		move.b	d0,(f_bgscrollvert).w
00007BA8                            
00007BA8                            loc_66AE:
00007BA8 7200                       		moveq	#0,d1
00007BAA 3200                       		move.w	d0,d1
00007BAC D278 F704                  		add.w	(v_screenposy).w,d1
00007BB0 4A40                       		tst.w	d0
00007BB2 6A00 0000                  		bpl.w	loc_6700
00007BB6 6000 0000                  		bra.w	loc_66CC
00007BBA                            ; ===========================================================================
00007BBA                            
00007BBA                            loc_66C0:
00007BBA 4441                       		neg.w	d1
00007BBC 48C1                       		ext.l	d1
00007BBE E181                       		asl.l	#8,d1
00007BC0 D2B8 F704                  		add.l	(v_screenposy).w,d1
00007BC4 4841                       		swap	d1
00007BC6                            
00007BC6                            loc_66CC:
00007BC6 B278 F72C                  		cmp.w	(v_limittop2).w,d1
00007BCA 6E00                       		bgt.s	loc_6724
00007BCC 0C41 FF00                  		cmpi.w	#-$100,d1
00007BD0 6E00                       		bgt.s	loc_66F0
00007BD2 0241 07FF                  		andi.w	#$7FF,d1
00007BD6 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00007BDC 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
00007BE2 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00007BE8 6000                       		bra.s	loc_6724
00007BEA                            ; ===========================================================================
00007BEA                            
00007BEA                            loc_66F0:
00007BEA 3238 F72C                  		move.w	(v_limittop2).w,d1
00007BEE 6000                       		bra.s	loc_6724
00007BF0                            ; ===========================================================================
00007BF0                            
00007BF0                            loc_66F6:
00007BF0 48C1                       		ext.l	d1
00007BF2 E181                       		asl.l	#8,d1
00007BF4 D2B8 F704                  		add.l	(v_screenposy).w,d1
00007BF8 4841                       		swap	d1
00007BFA                            
00007BFA                            loc_6700:
00007BFA B278 F72E                  		cmp.w	(v_limitbtm2).w,d1
00007BFE 6D00                       		blt.s	loc_6724
00007C00 0441 0800                  		subi.w	#$800,d1
00007C04 6500                       		bcs.s	loc_6720
00007C06 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00007C0C 0478 0800 F704             		subi.w	#$800,(v_screenposy).w
00007C12 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00007C18 6000                       		bra.s	loc_6724
00007C1A                            ; ===========================================================================
00007C1A                            
00007C1A                            loc_6720:
00007C1A 3238 F72E                  		move.w	(v_limitbtm2).w,d1
00007C1E                            
00007C1E                            loc_6724:
00007C1E 3838 F704                  		move.w	(v_screenposy).w,d4
00007C22 4841                       		swap	d1
00007C24 2601                       		move.l	d1,d3
00007C26 96B8 F704                  		sub.l	(v_screenposy).w,d3
00007C2A E09B                       		ror.l	#8,d3
00007C2C 31C3 F73C                  		move.w	d3,(v_scrshifty).w
00007C30 21C1 F704                  		move.l	d1,(v_screenposy).w
00007C34 3038 F704                  		move.w	(v_screenposy).w,d0
00007C38 0240 0010                  		andi.w	#$10,d0
00007C3C 1238 F74B                  		move.b	(v_fg_yblock).w,d1
00007C40 B300                       		eor.b	d1,d0
00007C42 6600                       		bne.s	@return
00007C44 0A38 0010 F74B             		eori.b	#$10,(v_fg_yblock).w
00007C4A 3038 F704                  		move.w	(v_screenposy).w,d0
00007C4E 9044                       		sub.w	d4,d0
00007C50 6A00                       		bpl.s	@scrollBottom
00007C52 08F8 0000 F754             		bset	#0,(v_fg_scroll_flags).w
00007C58 4E75                       		rts	
00007C5A                            ; ===========================================================================
00007C5A                            
00007C5A                            	@scrollBottom:
00007C5A 08F8 0001 F754             		bset	#1,(v_fg_scroll_flags).w
00007C60                            
00007C60                            	@return:
00007C60 4E75                       		rts	
00007C62                            ; End of function ScrollVertical
00007C62                            
00007C62                            
00007C62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C62                            ; Scrolls background and sets redraw flags.
00007C62                            ; d4 - background x offset * $10000
00007C62                            ; d5 - background y offset * $10000
00007C62                            
00007C62                            BGScroll_XY:
00007C62 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00007C66 2002                       		move.l	d2,d0
00007C68 D084                       		add.l	d4,d0
00007C6A 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00007C6E 2200                       		move.l	d0,d1
00007C70 4841                       		swap	d1
00007C72 0241 0010                  		andi.w	#$10,d1
00007C76 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00007C7A B701                       		eor.b	d3,d1
00007C7C 6600                       		bne.s	BGScroll_YRelative	; no change in Y
00007C7E 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00007C84 9082                       		sub.l	d2,d0	; new - old
00007C86 6A00                       		bpl.s	@scrollRight
00007C88 08F8 0002 F756             		bset	#2,(v_bg1_scroll_flags).w
00007C8E 6000                       		bra.s	BGScroll_YRelative
00007C90                            	@scrollRight:
00007C90 08F8 0003 F756             		bset	#3,(v_bg1_scroll_flags).w
00007C96                            BGScroll_YRelative:
00007C96 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00007C9A 2003                       		move.l	d3,d0
00007C9C D085                       		add.l	d5,d0
00007C9E 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00007CA2 2200                       		move.l	d0,d1
00007CA4 4841                       		swap	d1
00007CA6 0241 0010                  		andi.w	#$10,d1
00007CAA 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007CAE B501                       		eor.b	d2,d1
00007CB0 6600                       		bne.s	@return
00007CB2 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007CB8 9083                       		sub.l	d3,d0
00007CBA 6A00                       		bpl.s	@scrollBottom
00007CBC 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00007CC2 4E75                       		rts
00007CC4                            	@scrollBottom:
00007CC4 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00007CCA                            	@return:
00007CCA 4E75                       		rts
00007CCC                            ; End of function BGScroll_XY
00007CCC                            
00007CCC                            Bg_Scroll_Y:
00007CCC 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00007CD0 2003                       		move.l	d3,d0
00007CD2 D085                       		add.l	d5,d0
00007CD4 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00007CD8 2200                       		move.l	d0,d1
00007CDA 4841                       		swap	d1
00007CDC 0241 0010                  		andi.w	#$10,d1
00007CE0 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007CE4 B501                       		eor.b	d2,d1
00007CE6 6600                       		bne.s	@return
00007CE8 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007CEE 9083                       		sub.l	d3,d0
00007CF0 6A00                       		bpl.s	@scrollBottom
00007CF2 08F8 0004 F756             		bset	#4,(v_bg1_scroll_flags).w
00007CF8 4E75                       		rts
00007CFA                            	@scrollBottom:
00007CFA 08F8 0005 F756             		bset	#5,(v_bg1_scroll_flags).w
00007D00                            	@return:
00007D00 4E75                       		rts
00007D02                            
00007D02                            
00007D02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D02                            
00007D02                            
00007D02                            BGScroll_YAbsolute:
00007D02 3638 F70C                  		move.w	(v_bgscreenposy).w,d3
00007D06 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007D0A 3200                       		move.w	d0,d1
00007D0C 0241 0010                  		andi.w	#$10,d1
00007D10 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007D14 B501                       		eor.b	d2,d1
00007D16 6600                       		bne.s	@return
00007D18 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007D1E 9043                       		sub.w	d3,d0
00007D20 6A00                       		bpl.s	@scrollBottom
00007D22 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00007D28 4E75                       		rts
00007D2A                            	@scrollBottom:
00007D2A 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00007D30                            	@return:
00007D30 4E75                       		rts
00007D32                            ; End of function BGScroll_YAbsolute
00007D32                            
00007D32                            
00007D32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D32                            ; d6 - bit to set for redraw
00007D32                            
00007D32                            BGScroll_Block1:
00007D32 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00007D36 2002                       		move.l	d2,d0
00007D38 D084                       		add.l	d4,d0
00007D3A 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00007D3E 2200                       		move.l	d0,d1
00007D40 4841                       		swap	d1
00007D42 0241 0010                  		andi.w	#$10,d1
00007D46 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00007D4A B701                       		eor.b	d3,d1
00007D4C 6600                       		bne.s	@return
00007D4E 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00007D54 9082                       		sub.l	d2,d0
00007D56 6A00                       		bpl.s	@scrollRight
00007D58 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00007D5C 6000                       		bra.s	@return
00007D5E                            	@scrollRight:
00007D5E 5206                       		addq.b	#1,d6
00007D60 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00007D64                            	@return:
00007D64 4E75                       		rts
00007D66                            ; End of function BGScroll_Block1
00007D66                            
00007D66                            
00007D66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D66                            
00007D66                            
00007D66                            BGScroll_Block2:
00007D66 2438 F710                  		move.l	(v_bg2screenposx).w,d2
00007D6A 2002                       		move.l	d2,d0
00007D6C D084                       		add.l	d4,d0
00007D6E 21C0 F710                  		move.l	d0,(v_bg2screenposx).w
00007D72 2200                       		move.l	d0,d1
00007D74 4841                       		swap	d1
00007D76 0241 0010                  		andi.w	#$10,d1
00007D7A 1638 F74E                  		move.b	(v_bg2_xblock).w,d3
00007D7E B701                       		eor.b	d3,d1
00007D80 6600                       		bne.s	@return
00007D82 0A38 0010 F74E             		eori.b	#$10,(v_bg2_xblock).w
00007D88 9082                       		sub.l	d2,d0
00007D8A 6A00                       		bpl.s	@scrollRight
00007D8C 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00007D90 6000                       		bra.s	@return
00007D92                            	@scrollRight:
00007D92 5206                       		addq.b	#1,d6
00007D94 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00007D98                            	@return:
00007D98 4E75                       		rts
00007D9A                            ;-------------------------------------------------------------------------------
00007D9A                            BGScroll_Block3:
00007D9A 2438 F718                  		move.l	(v_bg3screenposx).w,d2
00007D9E 2002                       		move.l	d2,d0
00007DA0 D084                       		add.l	d4,d0
00007DA2 21C0 F718                  		move.l	d0,(v_bg3screenposx).w
00007DA6 2200                       		move.l	d0,d1
00007DA8 4841                       		swap	d1
00007DAA 0241 0010                  		andi.w	#$10,d1
00007DAE 1638 F750                  		move.b	(v_bg3_xblock).w,d3
00007DB2 B701                       		eor.b	d3,d1
00007DB4 6600                       		bne.s	@return
00007DB6 0A38 0010 F750             		eori.b	#$10,(v_bg3_xblock).w
00007DBC 9082                       		sub.l	d2,d0
00007DBE 6A00                       		bpl.s	@scrollRight
00007DC0 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00007DC4 6000                       		bra.s	@return
00007DC6                            	@scrollRight:
00007DC6 5206                       		addq.b	#1,d6
00007DC8 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00007DCC                            	@return:
00007DCC 4E75                       		rts
00007DCC 4E75                       		rts
00007DCE                            
00007DCE                            
00007DCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DCE                            
00007DCE                            ; sub_6886:
00007DCE                            LoadTilesAsYouMove_BGOnly:
00007DCE 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00007DD4 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00007DDA 45F8 F756                  		lea	(v_bg1_scroll_flags).w,a2
00007DDE 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00007DE2 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00007DE6 343C 6000                  		move.w	#$6000,d2
00007DEA 6100 0000                  		bsr.w	DrawBGScrollBlock1
00007DEE 45F8 F758                  		lea	(v_bg2_scroll_flags).w,a2
00007DF2 47F8 F710                  		lea	(v_bg2screenposx).w,a3
00007DF6 6000 0000                  		bra.w	DrawBGScrollBlock2
00007DFA                            ; End of function sub_6886
00007DFA                            
00007DFA                            ; ---------------------------------------------------------------------------
00007DFA                            ; Subroutine to	display	correct	tiles as you move
00007DFA                            ; ---------------------------------------------------------------------------
00007DFA                            
00007DFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DFA                            
00007DFA                            
00007DFA                            LoadTilesAsYouMove:
00007DFA 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00007E00 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00007E06                            		; First, update the background
00007E06 45F8 FF32                  		lea	(v_bg1_scroll_flags_dup).w,a2	; Scroll block 1 scroll flags
00007E0A 47F8 FF18                  		lea	(v_bgscreenposx_dup).w,a3	; Scroll block 1 X coordinate
00007E0E 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00007E12 343C 6000                  		move.w	#$6000,d2			; VRAM thing for selecting Plane B
00007E16 6100 0000                  		bsr.w	DrawBGScrollBlock1
00007E1A 45F8 FF34                  		lea	(v_bg2_scroll_flags_dup).w,a2	; Scroll block 2 scroll flags
00007E1E 47F8 FF20                  		lea	(v_bg2screenposx_dup).w,a3	; Scroll block 2 X coordinate
00007E22 6100 0000                  		bsr.w	DrawBGScrollBlock2
00007E26                            		; REV01 added a third scroll block, though, technically,
00007E26                            		; the RAM for it was already there in REV00
00007E26 45F8 FF36                  		lea	(v_bg3_scroll_flags_dup).w,a2	; Scroll block 3 scroll flags
00007E2A 47F8 FF28                  		lea	(v_bg3screenposx_dup).w,a3	; Scroll block 3 X coordinate
00007E2E 6100 0000                  		bsr.w	DrawBGScrollBlock3
00007E32                            		; Then, update the foreground
00007E32 45F8 FF30                  		lea	(v_fg_scroll_flags_dup).w,a2	; Foreground scroll flags
00007E36 47F8 FF10                  		lea	(v_screenposx_dup).w,a3		; Foreground X coordinate
00007E3A 49F8 A400                  		lea	(v_lvllayout).w,a4
00007E3E 343C 4000                  		move.w	#$4000,d2			; VRAM thing for selecting Plane A
00007E42                            		; The FG's update function is inlined here
00007E42 4A12                       		tst.b	(a2)
00007E44 6700                       		beq.s	locret_6952	; If there are no flags set, nothing needs updating
00007E46 0892 0000                  		bclr	#0,(a2)
00007E4A 6700                       		beq.s	loc_6908
00007E4C                            		; Draw new tiles at the top
00007E4C 78F0                       		moveq	#-16,d4	; Y coordinate. Note that 16 is the size of a block in pixels
00007E4E 7AF0                       		moveq	#-16,d5 ; X coordinate
00007E50 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007E54 78F0                       		moveq	#-16,d4 ; Y coordinate
00007E56 7AF0                       		moveq	#-16,d5 ; X coordinate
00007E58 6100 0000                  		bsr.w	DrawBlocks_LR
00007E5C                            
00007E5C                            loc_6908:
00007E5C 0892 0001                  		bclr	#1,(a2)
00007E60 6700                       		beq.s	loc_6922
00007E62                            		; Draw new tiles at the bottom
00007E62 383C 00E0                  		move.w	#224,d4	; Start at bottom of the screen. Since this draws from top to bottom, we don't need 224+16
00007E66 7AF0                       		moveq	#-16,d5
00007E68 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007E6C 383C 00E0                  		move.w	#224,d4
00007E70 7AF0                       		moveq	#-16,d5
00007E72 6100 0000                  		bsr.w	DrawBlocks_LR
00007E76                            
00007E76                            loc_6922:
00007E76 0892 0002                  		bclr	#2,(a2)
00007E7A 6700                       		beq.s	loc_6938
00007E7C                            		; Draw new tiles on the left
00007E7C 78F0                       		moveq	#-16,d4
00007E7E 7AF0                       		moveq	#-16,d5
00007E80 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007E84 78F0                       		moveq	#-16,d4
00007E86 7AF0                       		moveq	#-16,d5
00007E88 6100 0000                  		bsr.w	DrawBlocks_TB
00007E8C                            
00007E8C                            loc_6938:
00007E8C 0892 0003                  		bclr	#3,(a2)
00007E90 6700                       		beq.s	locret_6952
00007E92                            		; Draw new tiles on the right
00007E92 78F0                       		moveq	#-16,d4
00007E94 3A3C 0140                  		move.w	#320,d5
00007E98 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007E9C 78F0                       		moveq	#-16,d4
00007E9E 3A3C 0140                  		move.w	#320,d5
00007EA2 6100 0000                  		bsr.w	DrawBlocks_TB
00007EA6                            
00007EA6                            locret_6952:
00007EA6 4E75                       		rts	
00007EA8                            ; End of function LoadTilesAsYouMove
00007EA8                            
00007EA8                            
00007EA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007EA8                            
00007EA8                            ; sub_6954:
00007EA8                            DrawBGScrollBlock1:
00007EA8 4A12                       		tst.b	(a2)
00007EAA 6700 0000                  		beq.w	locret_69F2
00007EAE 0892 0000                  		bclr	#0,(a2)
00007EB2 6700                       		beq.s	loc_6972
00007EB4                            		; Draw new tiles at the top
00007EB4 78F0                       		moveq	#-16,d4
00007EB6 7AF0                       		moveq	#-16,d5
00007EB8 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007EBC 78F0                       		moveq	#-16,d4
00007EBE 7AF0                       		moveq	#-16,d5
00007EC0 6100 0000                  			bsr.w	DrawBlocks_LR
00007EC4                            
00007EC4                            loc_6972:
00007EC4 0892 0001                  		bclr	#1,(a2)
00007EC8 6700                       		beq.s	loc_698E
00007ECA                            		; Draw new tiles at the top
00007ECA 383C 00E0                  		move.w	#224,d4
00007ECE 7AF0                       		moveq	#-16,d5
00007ED0 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007ED4 383C 00E0                  		move.w	#224,d4
00007ED8 7AF0                       		moveq	#-16,d5
00007EDA 6100 0000                  			bsr.w	DrawBlocks_LR
00007EDE                            
00007EDE                            loc_698E:
00007EDE 0892 0002                  		bclr	#2,(a2)
00007EE2                            
00007EE2                            
00007EE2 6700                       			beq.s	locj_6D56
00007EE4                            			; Draw new tiles on the left
00007EE4 78F0                       			moveq	#-16,d4
00007EE6 7AF0                       			moveq	#-16,d5
00007EE8 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007EEC 78F0                       			moveq	#-16,d4
00007EEE 7AF0                       			moveq	#-16,d5
00007EF0 6100 0000                  			bsr.w	DrawBlocks_TB
00007EF4                            	locj_6D56:
00007EF4                            
00007EF4 0892 0003                  			bclr	#3,(a2)
00007EF8 6700                       			beq.s	locj_6D70
00007EFA                            			; Draw new tiles on the right
00007EFA 78F0                       			moveq	#-16,d4
00007EFC 3A3C 0140                  			move.w	#320,d5
00007F00 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007F04 78F0                       			moveq	#-16,d4
00007F06 3A3C 0140                  			move.w	#320,d5
00007F0A 6100 0000                  			bsr.w	DrawBlocks_TB
00007F0E                            	locj_6D70:
00007F0E                            
00007F0E 0892 0004                  			bclr	#4,(a2)
00007F12 6700                       			beq.s	locj_6D88
00007F14                            			; Draw entire row at the top
00007F14 78F0                       			moveq	#-16,d4
00007F16 7A00                       			moveq	#0,d5
00007F18 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00007F1C 78F0                       			moveq	#-16,d4
00007F1E 7A00                       			moveq	#0,d5
00007F20 7C1F                       			moveq	#(512/16)-1,d6
00007F22 6100 0000                  			bsr.w	DrawBlocks_LR_3
00007F26                            	locj_6D88:
00007F26                            
00007F26 0892 0005                  			bclr	#5,(a2)
00007F2A 6700                       			beq.s	locret_69F2
00007F2C                            			; Draw entire row at the bottom
00007F2C 383C 00E0                  			move.w	#224,d4
00007F30 7A00                       			moveq	#0,d5
00007F32 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00007F36 383C 00E0                  			move.w	#224,d4
00007F3A 7A00                       			moveq	#0,d5
00007F3C 7C1F                       			moveq	#(512/16)-1,d6
00007F3E 6100 0000                  			bsr.w	DrawBlocks_LR_3
00007F42                            
00007F42                            locret_69F2:
00007F42 4E75                       		rts	
00007F44                            ; End of function DrawBGScrollBlock1
00007F44                            
00007F44                            
00007F44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F44                            
00007F44                            ; Essentially, this draws everything that isn't scroll block 1
00007F44                            ; sub_69F4:
00007F44                            DrawBGScrollBlock2:
00007F44                            
00007F44 4A12                       			tst.b	(a2)
00007F46 6700 0000                  			beq.w	locj_6DF2
00007F4A 0C38 0005 FE10             			cmpi.b	#id_SBZ,(v_zone).w
00007F50 6700 0000                  			beq.w	Draw_SBz
00007F54 0892 0000                  			bclr	#0,(a2)
00007F58 6700                       			beq.s	locj_6DD2
00007F5A                            			; Draw new tiles on the left
00007F5A 383C 0070                  			move.w	#224/2,d4	; Draw the bottom half of the screen
00007F5E 7AF0                       			moveq	#-16,d5
00007F60 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007F64 383C 0070                  			move.w	#224/2,d4
00007F68 7AF0                       			moveq	#-16,d5
00007F6A 7C02                       			moveq	#3-1,d6		; Draw three rows... could this be a repurposed version of the above unused code?
00007F6C 6100 0000                  			bsr.w	DrawBlocks_TB_2
00007F70                            	locj_6DD2:
00007F70 0892 0001                  			bclr	#1,(a2)
00007F74 6700                       			beq.s	locj_6DF2
00007F76                            			; Draw new tiles on the right
00007F76 383C 0070                  			move.w	#224/2,d4
00007F7A 3A3C 0140                  			move.w	#320,d5
00007F7E 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007F82 383C 0070                  			move.w	#224/2,d4
00007F86 3A3C 0140                  			move.w	#320,d5
00007F8A 7C02                       			moveq	#3-1,d6
00007F8C 6100 0000                  			bsr.w	DrawBlocks_TB_2
00007F90                            	locj_6DF2:
00007F90 4E75                       			rts
00007F92                            ;===============================================================================
00007F92                            	locj_6DF4:
00007F92 0000 0000 0006 0606 0606+  			dc.b $00,$00,$00,$00,$00,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$04
00007FA2 0404 0404 0404 0202 0202+  			dc.b $04,$04,$04,$04,$04,$04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00007FB2 0200                       			dc.b $02,$00						
00007FB4                            ;===============================================================================
00007FB4                            	Draw_SBz:
00007FB4 78F0                       			moveq	#-16,d4
00007FB6 0892 0000                  			bclr	#0,(a2)
00007FBA 6600                       			bne.s	locj_6E28
00007FBC 0892 0001                  			bclr	#1,(a2)
00007FC0 6700                       			beq.s	locj_6E72
00007FC2 383C 00E0                  			move.w	#224,d4
00007FC6                            	locj_6E28:
00007FC6 41F9 0000 7F93             			lea	(locj_6DF4+1).l,a0
00007FCC 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00007FD0 D044                       			add.w	d4,d0
00007FD2 0240 01F0                  			andi.w	#$1F0,d0
00007FD6 E848                       			lsr.w	#4,d0
00007FD8 1030 0000                  			move.b	(a0,d0.w),d0
00007FDC 47F9 0000 0000             			lea	(locj_6FE4).l,a3
00007FE2 3673 0000                  			movea.w	(a3,d0.w),a3
00007FE6 6700                       			beq.s	locj_6E5E
00007FE8 7AF0                       			moveq	#-16,d5
00007FEA 48E7 0C00                  			movem.l	d4/d5,-(sp)
00007FEE 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007FF2 4CDF 0030                  			movem.l	(sp)+,d4/d5
00007FF6 6100 0000                  			bsr.w	DrawBlocks_LR
00007FFA 6000                       			bra.s	locj_6E72
00007FFC                            ;===============================================================================
00007FFC                            	locj_6E5E:
00007FFC 7A00                       			moveq	#0,d5
00007FFE 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008002 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008006 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000800A 7C1F                       			moveq	#(512/16)-1,d6
0000800C 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008010                            	locj_6E72:
00008010 4A12                       			tst.b	(a2)
00008012 6600                       			bne.s	locj_6E78
00008014 4E75                       			rts
00008016                            ;===============================================================================			
00008016                            	locj_6E78:
00008016 78F0                       			moveq	#-16,d4
00008018 7AF0                       			moveq	#-16,d5
0000801A 1012                       			move.b	(a2),d0
0000801C 0200 00A8                  			andi.b	#$A8,d0
00008020 6700                       			beq.s	locj_6E8C
00008022 E208                       			lsr.b	#1,d0
00008024 1480                       			move.b	d0,(a2)
00008026 3A3C 0140                  			move.w	#320,d5
0000802A                            	locj_6E8C:
0000802A 41F9 0000 7F92             			lea	(locj_6DF4).l,a0
00008030 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008034 0240 01F0                  			andi.w	#$1F0,d0
00008038 E848                       			lsr.w	#4,d0
0000803A 41F0 0000                  			lea	(a0,d0.w),a0
0000803E 6000 0000                  			bra.w	locj_6FEC						
00008042                            ;===============================================================================
00008042                            
00008042                            
00008042                            	; locj_6EA4:
00008042                            	DrawBGScrollBlock3:
00008042 4A12                       			tst.b	(a2)
00008044 6700 0000                  			beq.w	locj_6EF0
00008048 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
0000804E 6700 0000                  			beq.w	Draw_Mz
00008052 0892 0000                  			bclr	#0,(a2)
00008056 6700                       			beq.s	locj_6ED0
00008058                            			; Draw new tiles on the left
00008058 383C 0040                  			move.w	#$40,d4
0000805C 7AF0                       			moveq	#-16,d5
0000805E 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008062 383C 0040                  			move.w	#$40,d4
00008066 7AF0                       			moveq	#-16,d5
00008068 7C02                       			moveq	#3-1,d6
0000806A 6100 0000                  			bsr.w	DrawBlocks_TB_2
0000806E                            	locj_6ED0:
0000806E 0892 0001                  			bclr	#1,(a2)
00008072 6700                       			beq.s	locj_6EF0
00008074                            			; Draw new tiles on the right
00008074 383C 0040                  			move.w	#$40,d4
00008078 3A3C 0140                  			move.w	#320,d5
0000807C 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008080 383C 0040                  			move.w	#$40,d4
00008084 3A3C 0140                  			move.w	#320,d5
00008088 7C02                       			moveq	#3-1,d6
0000808A 6100 0000                  			bsr.w	DrawBlocks_TB_2
0000808E                            	locj_6EF0:
0000808E 4E75                       			rts
00008090                            	locj_6EF2:
00008090 0000 0000 0000 0606 0404+  			dc.b $00,$00,$00,$00,$00,$00,$06,$06,$04,$04,$04,$04,$04,$04,$04,$04
000080A0 0402 0202 0202 0202 0202+  			dc.b $04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000080B0 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000080C0 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000080D0 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000080E0 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000080F0 0200                       			dc.b $02,$00
000080F2                            ;===============================================================================
000080F2                            	Draw_Mz:
000080F2 78F0                       			moveq	#-16,d4
000080F4 0892 0000                  			bclr	#0,(a2)
000080F8 6600                       			bne.s	locj_6F66
000080FA 0892 0001                  			bclr	#1,(a2)
000080FE 6700                       			beq.s	locj_6FAE
00008100 383C 00E0                  			move.w	#224,d4
00008104                            	locj_6F66:
00008104 41F9 0000 8091             			lea	(locj_6EF2+1).l,a0
0000810A 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
0000810E 0440 0200                  			subi.w	#$200,d0
00008112 D044                       			add.w	d4,d0
00008114 0240 07F0                  			andi.w	#$7F0,d0
00008118 E848                       			lsr.w	#4,d0
0000811A 1030 0000                  			move.b	(a0,d0.w),d0
0000811E 367B 0000                  			movea.w	locj_6FE4(pc,d0.w),a3
00008122 6700                       			beq.s	locj_6F9A
00008124 7AF0                       			moveq	#-16,d5
00008126 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000812A 6100 0000                  			bsr.w	Calc_VRAM_Pos
0000812E 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008132 6100 0000                  			bsr.w	DrawBlocks_LR
00008136 6000                       			bra.s	locj_6FAE
00008138                            ;===============================================================================
00008138                            	locj_6F9A:
00008138 7A00                       			moveq	#0,d5
0000813A 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000813E 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008142 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008146 7C1F                       			moveq	#(512/16)-1,d6
00008148 6100 0000                  			bsr.w	DrawBlocks_LR_3
0000814C                            	locj_6FAE:
0000814C 4A12                       			tst.b	(a2)
0000814E 6600                       			bne.s	locj_6FB4
00008150 4E75                       			rts
00008152                            ;===============================================================================			
00008152                            	locj_6FB4:
00008152 78F0                       			moveq	#-16,d4
00008154 7AF0                       			moveq	#-16,d5
00008156 1012                       			move.b	(a2),d0
00008158 0200 00A8                  			andi.b	#$A8,d0
0000815C 6700                       			beq.s	locj_6FC8
0000815E E208                       			lsr.b	#1,d0
00008160 1480                       			move.b	d0,(a2)
00008162 3A3C 0140                  			move.w	#320,d5
00008166                            	locj_6FC8:
00008166 41F9 0000 8090             			lea	(locj_6EF2).l,a0
0000816C 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008170 0440 0200                  			subi.w	#$200,d0
00008174 0240 07F0                  			andi.w	#$7F0,d0
00008178 E848                       			lsr.w	#4,d0
0000817A 41F0 0000                  			lea	(a0,d0.w),a0
0000817E 6000 0000                  			bra.w	locj_6FEC
00008182                            ;===============================================================================			
00008182                            	locj_6FE4:
00008182 FF18 FF18 FF20 FF28        			dc.w v_bgscreenposx_dup, v_bgscreenposx_dup, v_bg2screenposx_dup, v_bg3screenposx_dup
0000818A                            	locj_6FEC:
0000818A 7C0F                       			moveq	#((224+16+16)/16)-1,d6
0000818C 2E3C 0080 0000             			move.l	#$800000,d7
00008192                            	locj_6FF4:			
00008192 7000                       			moveq	#0,d0
00008194 1018                       			move.b	(a0)+,d0
00008196 0112                       			btst	d0,(a2)
00008198 6700                       			beq.s	locj_701C
0000819A 367B 00E6                  			move.w	locj_6FE4(pc,d0.w),a3
0000819E 48E7 0C80                  			movem.l	d4/d5/a0,-(sp)
000081A2 48E7 0C00                  			movem.l	d4/d5,-(sp)
000081A6 6100 0000                  			bsr.w	GetBlockData
000081AA 4CDF 0030                  			movem.l	(sp)+,d4/d5
000081AE 6100 0000                  			bsr.w	Calc_VRAM_Pos
000081B2 6100 0000                  			bsr.w	DrawBlock
000081B6 4CDF 0130                  			movem.l	(sp)+,d4/d5/a0
000081BA                            	locj_701C:
000081BA 0644 0010                  			addi.w	#16,d4
000081BE 51CE FFD2                  			dbf	d6,locj_6FF4
000081C2 4212                       			clr.b	(a2)
000081C4 4E75                       			rts			
000081C6                            
000081C6                            
000081C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081C6                            
000081C6                            ; Don't be fooled by the name: this function's for drawing from left to right
000081C6                            ; when the camera's moving up or down
000081C6                            ; DrawTiles_LR:
000081C6                            DrawBlocks_LR:
000081C6 7C15                       		moveq	#((320+16+16)/16)-1,d6	; Draw the entire width of the screen + two extra columns
000081C8                            ; DrawTiles_LR_2:
000081C8                            DrawBlocks_LR_2:
000081C8 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
000081CE 2200                       		move.l	d0,d1
000081D0                            
000081D0                            	@loop:
000081D0 48E7 0C00                  		movem.l	d4-d5,-(sp)
000081D4 6100 0000                  		bsr.w	GetBlockData
000081D8 2001                       		move.l	d1,d0
000081DA 6100 0000                  		bsr.w	DrawBlock
000081DE 5801                       		addq.b	#4,d1		; Two tiles ahead
000081E0 0201 007F                  		andi.b	#$7F,d1		; Wrap around row
000081E4 4CDF 0030                  		movem.l	(sp)+,d4-d5
000081E8 0645 0010                  		addi.w	#16,d5		; Move X coordinate one block ahead
000081EC 51CE FFE2                  		dbf	d6,@loop
000081F0 4E75                       		rts
000081F2                            ; End of function DrawBlocks_LR
000081F2                            
000081F2                            ; DrawTiles_LR_3:
000081F2                            DrawBlocks_LR_3:
000081F2 2E3C 0080 0000             		move.l	#$800000,d7
000081F8 2200                       		move.l	d0,d1
000081FA                            
000081FA                            	@loop:
000081FA 48E7 0C00                  		movem.l	d4-d5,-(sp)
000081FE 6100 0000                  		bsr.w	GetBlockData_2
00008202 2001                       		move.l	d1,d0
00008204 6100 0000                  		bsr.w	DrawBlock
00008208 5801                       		addq.b	#4,d1
0000820A 0201 007F                  		andi.b	#$7F,d1
0000820E 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008212 0645 0010                  		addi.w	#16,d5
00008216 51CE FFE2                  		dbf	d6,@loop
0000821A 4E75                       		rts	
0000821C                            ; End of function DrawBlocks_LR_3
0000821C                            
0000821C                            
0000821C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000821C                            
0000821C                            ; Don't be fooled by the name: this function's for drawing from top to bottom
0000821C                            ; when the camera's moving left or right
0000821C                            ; DrawTiles_TB:
0000821C                            DrawBlocks_TB:
0000821C 7C0F                       		moveq	#((224+16+16)/16)-1,d6	; Draw the entire height of the screen + two extra rows
0000821E                            ; DrawTiles_TB_2:
0000821E                            DrawBlocks_TB_2:
0000821E 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
00008224 2200                       		move.l	d0,d1
00008226                            
00008226                            	@loop:
00008226 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000822A 6100 0000                  		bsr.w	GetBlockData
0000822E 2001                       		move.l	d1,d0
00008230 6100 0000                  		bsr.w	DrawBlock
00008234 0641 0100                  		addi.w	#$100,d1	; Two rows ahead
00008238 0241 0FFF                  		andi.w	#$FFF,d1	; Wrap around plane
0000823C 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008240 0644 0010                  		addi.w	#16,d4		; Move X coordinate one block ahead
00008244 51CE FFE0                  		dbf	d6,@loop
00008248 4E75                       		rts	
0000824A                            ; End of function DrawBlocks_TB_2
0000824A                            
0000824A                            
0000824A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000824A                            
0000824A                            ; Draws a block's worth of tiles
0000824A                            ; Parameters:
0000824A                            ; a0 = Pointer to block metadata (block index and X/Y flip)
0000824A                            ; a1 = Pointer to block
0000824A                            ; a5 = Pointer to VDP command port
0000824A                            ; a6 = Pointer to VDP data port
0000824A                            ; d0 = VRAM command to access plane
0000824A                            ; d2 = VRAM plane A/B specifier
0000824A                            ; d7 = Plane row delta
0000824A                            ; DrawTiles:
0000824A                            DrawBlock:
0000824A 8042                       		or.w	d2,d0	; OR in that plane A/B specifier to the VRAM command
0000824C 4840                       		swap	d0
0000824E 0810 0004                  		btst	#4,(a0)	; Check Y-flip bit
00008252 6600                       		bne.s	DrawFlipY
00008254 0810 0003                  		btst	#3,(a0)	; Check X-flip bit
00008258 6600                       		bne.s	DrawFlipX
0000825A 2A80                       		move.l	d0,(a5)
0000825C 2C99                       		move.l	(a1)+,(a6)	; Write top two tiles
0000825E D087                       		add.l	d7,d0		; Next row
00008260 2A80                       		move.l	d0,(a5)
00008262 2C99                       		move.l	(a1)+,(a6)	; Write bottom two tiles
00008264 4E75                       		rts	
00008266                            ; ===========================================================================
00008266                            
00008266                            DrawFlipX:
00008266 2A80                       		move.l	d0,(a5)
00008268 2819                       		move.l	(a1)+,d4
0000826A 0A84 0800 0800             		eori.l	#$8000800,d4	; Invert X-flip bits of each tile
00008270 4844                       		swap	d4		; Swap the tiles around
00008272 2C84                       		move.l	d4,(a6)		; Write top two tiles
00008274 D087                       		add.l	d7,d0		; Next row
00008276 2A80                       		move.l	d0,(a5)
00008278 2819                       		move.l	(a1)+,d4
0000827A 0A84 0800 0800             		eori.l	#$8000800,d4
00008280 4844                       		swap	d4
00008282 2C84                       		move.l	d4,(a6)		; Write bottom two tiles
00008284 4E75                       		rts	
00008286                            ; ===========================================================================
00008286                            
00008286                            DrawFlipY:
00008286 0810 0003                  		btst	#3,(a0)
0000828A 6600                       		bne.s	DrawFlipXY
0000828C 2A80                       		move.l	d0,(a5)
0000828E 2A19                       		move.l	(a1)+,d5
00008290 2819                       		move.l	(a1)+,d4
00008292 0A84 1000 1000             		eori.l	#$10001000,d4
00008298 2C84                       		move.l	d4,(a6)
0000829A D087                       		add.l	d7,d0
0000829C 2A80                       		move.l	d0,(a5)
0000829E 0A85 1000 1000             		eori.l	#$10001000,d5
000082A4 2C85                       		move.l	d5,(a6)
000082A6 4E75                       		rts	
000082A8                            ; ===========================================================================
000082A8                            
000082A8                            DrawFlipXY:
000082A8 2A80                       		move.l	d0,(a5)
000082AA 2A19                       		move.l	(a1)+,d5
000082AC 2819                       		move.l	(a1)+,d4
000082AE 0A84 1800 1800             		eori.l	#$18001800,d4
000082B4 4844                       		swap	d4
000082B6 2C84                       		move.l	d4,(a6)
000082B8 D087                       		add.l	d7,d0
000082BA 2A80                       		move.l	d0,(a5)
000082BC 0A85 1800 1800             		eori.l	#$18001800,d5
000082C2 4845                       		swap	d5
000082C4 2C85                       		move.l	d5,(a6)
000082C6 4E75                       		rts	
000082C8                            ; End of function DrawBlocks
000082C8                            
000082C8                            ; ===========================================================================
000082C8                            ; unused garbage
000082C8                            
000082C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082C8                            
000082C8                            ; Gets address of block at a certain coordinate
000082C8                            ; Parameters:
000082C8                            ; a4 = Pointer to level layout
000082C8                            ; d4 = Relative Y coordinate
000082C8                            ; d5 = Relative X coordinate
000082C8                            ; Returns:
000082C8                            ; a0 = Address of block metadata
000082C8                            ; a1 = Address of block
000082C8                            ; DrawBlocks:
000082C8                            GetBlockData:
000082C8 DA53                       			add.w	(a3),d5
000082CA                            	GetBlockData_2:
000082CA D86B 0004                  			add.w	4(a3),d4
000082CE 43F8 B000                  			lea	(v_16x16).w,a1
000082D2                            		; Turn Y coordinate into index into level layout
000082D2 3604                       		move.w	d4,d3
000082D4 E24B                       		lsr.w	#1,d3
000082D6 0243 0380                  		andi.w	#$380,d3
000082DA                            		; Turn X coordinate into index into level layout
000082DA E64D                       		lsr.w	#3,d5
000082DC 3005                       		move.w	d5,d0
000082DE EA48                       		lsr.w	#5,d0
000082E0 0240 007F                  		andi.w	#$7F,d0
000082E4                            		; Get chunk from level layout
000082E4 D043                       		add.w	d3,d0
000082E6 76FF                       		moveq	#-1,d3
000082E8 1634 0000                  		move.b	(a4,d0.w),d3
000082EC 6700                       		beq.s	locret_6C1E	; If chunk 00, just return a pointer to the first block (expected to be empty)
000082EE                            		; Turn chunk ID into index into chunk table
000082EE 5303                       		subq.b	#1,d3
000082F0 0243 007F                  		andi.w	#$7F,d3
000082F4 EE5B                       		ror.w	#7,d3
000082F6                            		; Turn Y coordinate into index into chunk
000082F6 D844                       		add.w	d4,d4
000082F8 0244 01E0                  		andi.w	#$1E0,d4
000082FC                            		; Turn X coordinate into index into chunk
000082FC 0245 001E                  		andi.w	#$1E,d5
00008300                            		; Get block metadata from chunk
00008300 D644                       		add.w	d4,d3
00008302 D645                       		add.w	d5,d3
00008304 2043                       		movea.l	d3,a0
00008306 3610                       		move.w	(a0),d3
00008308                            		; Turn block ID into address
00008308 0243 03FF                  		andi.w	#$3FF,d3
0000830C E74B                       		lsl.w	#3,d3
0000830E D2C3                       		adda.w	d3,a1
00008310                            
00008310                            locret_6C1E:
00008310 4E75                       		rts	
00008312                            ; End of function GetBlockData
00008312                            
00008312                            
00008312                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008312                            
00008312                            ; Produces a VRAM plane access command from coordinates
00008312                            ; Parameters:
00008312                            ; d4 = Relative Y coordinate
00008312                            ; d5 = Relative X coordinate
00008312                            ; Returns VDP command in d0
00008312                            Calc_VRAM_Pos:
00008312 DA53                       			add.w	(a3),d5
00008314                            	Calc_VRAM_Pos_2:
00008314 D86B 0004                  			add.w	4(a3),d4
00008318                            		; Floor the coordinates to the nearest pair of tiles (the size of a block).
00008318                            		; Also note that this wraps the value to the size of the plane:
00008318                            		; The plane is 64*8 wide, so wrap at $100, and it's 32*8 tall, so wrap at $200
00008318 0244 00F0                  		andi.w	#$F0,d4
0000831C 0245 01F0                  		andi.w	#$1F0,d5
00008320                            		; Transform the adjusted coordinates into a VDP command
00008320 E94C                       		lsl.w	#4,d4
00008322 E44D                       		lsr.w	#2,d5
00008324 D845                       		add.w	d5,d4
00008326 7003                       		moveq	#3,d0	; Highest bits of plane VRAM address
00008328 4840                       		swap	d0
0000832A 3004                       		move.w	d4,d0
0000832C 4E75                       		rts	
0000832E                            ; End of function Calc_VRAM_Pos
0000832E                            
0000832E                            
0000832E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000832E                            ; not used
0000832E                            
0000832E                            ; This is just like Calc_VRAM_Pos, but seemingly for an earlier
0000832E                            ; VRAM layout: the only difference is the high bits of the
0000832E                            ; plane's VRAM address, which are 10 instead of 11.
0000832E                            ; Both the foreground and background are at $C000 and $E000
0000832E                            ; respectively, so this one starting at $8000 makes no sense.
0000832E                            ; sub_6C3C:
0000832E                            Calc_VRAM_Pos_Unknown:
0000832E D86B 0004                  		add.w	4(a3),d4
00008332 DA53                       		add.w	(a3),d5
00008334 0244 00F0                  		andi.w	#$F0,d4
00008338 0245 01F0                  		andi.w	#$1F0,d5
0000833C E94C                       		lsl.w	#4,d4
0000833E E44D                       		lsr.w	#2,d5
00008340 D845                       		add.w	d5,d4
00008342 7002                       		moveq	#2,d0
00008344 4840                       		swap	d0
00008346 3004                       		move.w	d4,d0
00008348 4E75                       		rts	
0000834A                            ; End of function Calc_VRAM_Pos_Unknown
0000834A                            
0000834A                            ; ---------------------------------------------------------------------------
0000834A                            ; Subroutine to	load tiles as soon as the level	appears
0000834A                            ; ---------------------------------------------------------------------------
0000834A                            
0000834A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000834A                            
0000834A                            
0000834A                            LoadTilesFromStart:
0000834A 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00008350 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00008356 47F8 F700                  		lea	(v_screenposx).w,a3
0000835A 49F8 A400                  		lea	(v_lvllayout).w,a4
0000835E 343C 4000                  		move.w	#$4000,d2
00008362 6100                       		bsr.s	DrawChunks
00008364 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00008368 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
0000836C 343C 6000                  		move.w	#$6000,d2
00008370 4A38 FE10                  			tst.b	(v_zone).w
00008374 6700 0000                  			beq.w	Draw_GHz_Bg
00008378 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
0000837E 6700 0000                  			beq.w	Draw_Mz_Bg
00008382 0C78 0500 FE10             			cmpi.w	#(id_SBZ<<8)+0,(v_zone).w
00008388 6700 0000                  			beq.w	Draw_SBz_Bg
0000838C 0C38 0006 FE10             			cmpi.b	#id_EndZ,(v_zone).w
00008392 6700 0000                  			beq.w	Draw_GHz_Bg
00008396                            ; End of function LoadTilesFromStart
00008396                            
00008396                            
00008396                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008396                            
00008396                            
00008396                            DrawChunks:
00008396 78F0                       		moveq	#-16,d4
00008398 7C0F                       		moveq	#((224+16+16)/16)-1,d6
0000839A                            
0000839A                            	@loop:
0000839A 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000839E 7A00                       		moveq	#0,d5
000083A0 3204                       		move.w	d4,d1
000083A2 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
000083A6 3801                       		move.w	d1,d4
000083A8 7A00                       		moveq	#0,d5
000083AA 7C1F                       		moveq	#(512/16)-1,d6
000083AC 6100 FE1A                  		bsr.w	DrawBlocks_LR_2
000083B0 4CDF 0070                  		movem.l	(sp)+,d4-d6
000083B4 0644 0010                  		addi.w	#16,d4
000083B8 51CE FFE0                  		dbf	d6,@loop
000083BC 4E75                       		rts	
000083BE                            ; End of function DrawChunks
000083BE                            
000083BE                            	Draw_GHz_Bg:
000083BE 7800                       			moveq	#0,d4
000083C0 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000083C2                            	locj_7224:			
000083C2 48E7 0E00                  			movem.l	d4-d6,-(sp)
000083C6 41F9 0000 0000             			lea	(locj_724a),a0
000083CC 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000083D0 D044                       			add.w	d4,d0
000083D2 0240 00F0                  			andi.w	#$F0,d0
000083D6 6100 0000                  			bsr.w	locj_72Ba
000083DA 4CDF 0070                  			movem.l	(sp)+,d4-d6
000083DE 0644 0010                  			addi.w	#16,d4
000083E2 51CE FFDE                  			dbf	d6,locj_7224
000083E6 4E75                       			rts
000083E8                            	locj_724a:
000083E8 0000 0000 0606 0604 0404+  			dc.b $00,$00,$00,$00,$06,$06,$06,$04,$04,$04,$00,$00,$00,$00,$00,$00
000083F8                            ;-------------------------------------------------------------------------------
000083F8                            	Draw_Mz_Bg:;locj_725a:
000083F8 78F0                       			moveq	#-16,d4
000083FA 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000083FC                            	locj_725E:			
000083FC 48E7 0E00                  			movem.l	d4-d6,-(sp)
00008400 41FA FC8F                  			lea	(locj_6EF2+1),a0
00008404 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008408 0440 0200                  			subi.w	#$200,d0
0000840C D044                       			add.w	d4,d0
0000840E 0240 07F0                  			andi.w	#$7F0,d0
00008412 6100 0000                  			bsr.w	locj_72Ba
00008416 4CDF 0070                  			movem.l	(sp)+,d4-d6
0000841A 0644 0010                  			addi.w	#16,d4
0000841E 51CE FFDC                  			dbf	d6,locj_725E
00008422 4E75                       			rts
00008424                            ;-------------------------------------------------------------------------------
00008424                            	Draw_SBz_Bg:;locj_7288:
00008424 78F0                       			moveq	#-16,d4
00008426 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008428                            	locj_728C:			
00008428 48E7 0E00                  			movem.l	d4-d6,-(sp)
0000842C 41F8 7F93                  			lea	(locj_6DF4+1),a0
00008430 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008434 D044                       			add.w	d4,d0
00008436 0240 01F0                  			andi.w	#$1F0,d0
0000843A 6100 0000                  			bsr.w	locj_72Ba
0000843E 4CDF 0070                  			movem.l	(sp)+,d4-d6
00008442 0644 0010                  			addi.w	#16,d4
00008446 51CE FFE0                  			dbf	d6,locj_728C
0000844A 4E75                       			rts
0000844C                            ;-------------------------------------------------------------------------------
0000844C                            	locj_72B2:
0000844C F708 F708 F710 F718        			dc.w v_bgscreenposx, v_bgscreenposx, v_bg2screenposx, v_bg3screenposx
00008454                            	locj_72Ba:
00008454 E848                       			lsr.w	#4,d0
00008456 1030 0000                  			move.b	(a0,d0.w),d0
0000845A 367B 00F0                  			movea.w	locj_72B2(pc,d0.w),a3
0000845E 6700                       			beq.s	locj_72da
00008460 7AF0                       			moveq	#-16,d5
00008462 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008466 6100 FEAA                  			bsr.w	Calc_VRAM_Pos
0000846A 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000846E 6100 FD56                  			bsr.w	DrawBlocks_LR
00008472 6000                       			bra.s	locj_72EE
00008474                            	locj_72da:
00008474 7A00                       			moveq	#0,d5
00008476 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000847A 6100 FE98                  			bsr.w	Calc_VRAM_Pos_2
0000847E 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008482 7C1F                       			moveq	#(512/16)-1,d6
00008484 6100 FD6C                  			bsr.w	DrawBlocks_LR_3
00008488                            	locj_72EE:
00008488 4E75                       			rts
0000848A                            
0000848A                            ; ---------------------------------------------------------------------------
0000848A                            ; Subroutine to load basic level data
0000848A                            ; ---------------------------------------------------------------------------
0000848A                            
0000848A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000848A                            
0000848A                            
0000848A                            LevelDataLoad:
0000848A 7000                       		moveq	#0,d0
0000848C 1038 FE10                  		move.b	(v_zone).w,d0
00008490 E948                       		lsl.w	#4,d0
00008492 45F9 0000 0000             		lea	(LevelHeaders).l,a2
00008498 45F2 0000                  		lea	(a2,d0.w),a2
0000849C 2F0A                       		move.l	a2,-(sp)
0000849E 588A                       		addq.l	#4,a2
000084A0 205A                       		movea.l	(a2)+,a0
000084A2 43F8 B000                  		lea	(v_16x16).w,a1	; RAM address for 16x16 mappings
000084A6 303C 0000                  		move.w	#0,d0
000084AA 6100 942C                  		bsr.w	EniDec
000084AE 205A                       		movea.l	(a2)+,a0
000084B0 43F9 00FF 0000             		lea	(v_256x256).l,a1 ; RAM address for 256x256 mappings
000084B6 6100 959E                  		bsr.w	KosDec
000084BA 6100 0000                  		bsr.w	LevelLayoutLoad
000084BE 301A                       		move.w	(a2)+,d0
000084C0 3012                       		move.w	(a2),d0
000084C2 0240 00FF                  		andi.w	#$FF,d0
000084C6 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; is level SBZ3 (LZ4) ?
000084CC 6600                       		bne.s	@notSBZ3	; if not, branch
000084CE 700C                       		moveq	#palid_SBZ3,d0	; use SB3 palette
000084D0                            
000084D0                            	@notSBZ3:
000084D0 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2?
000084D6 6700                       		beq.s	@isSBZorFZ	; if yes, branch
000084D8 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; is level FZ?
000084DE 6600                       		bne.s	@normalpal	; if not, branch
000084E0                            
000084E0                            	@isSBZorFZ:
000084E0 700E                       		moveq	#palid_SBZ2,d0	; use SBZ2/FZ palette
000084E2                            
000084E2                            	@normalpal:
000084E2 6100 A120                  		bsr.w	PalLoad1	; load palette (based on d0)
000084E6 245F                       		movea.l	(sp)+,a2
000084E8 584A                       		addq.w	#4,a2		; read number for 2nd PLC
000084EA 7000                       		moveq	#0,d0
000084EC 1012                       		move.b	(a2),d0
000084EE 6700                       		beq.s	@skipPLC	; if 2nd PLC is 0 (i.e. the ending sequence), branch
000084F0 6100 9248                  		bsr.w	AddPLC		; load pattern load cues
000084F4                            
000084F4                            	@skipPLC:
000084F4 4E75                       		rts	
000084F6                            ; End of function LevelDataLoad
000084F6                            
000084F6                            ; ---------------------------------------------------------------------------
000084F6                            ; Level	layout loading subroutine
000084F6                            ; ---------------------------------------------------------------------------
000084F6                            
000084F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084F6                            
000084F6                            
000084F6                            LevelLayoutLoad:
000084F6 47F8 A400                  		lea	(v_lvllayout).w,a3
000084FA 323C 01FF                  		move.w	#$1FF,d1
000084FE 7000                       		moveq	#0,d0
00008500                            
00008500                            LevLoad_ClrRam:
00008500 26C0                       		move.l	d0,(a3)+
00008502 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($A400-A7FF)
00008506                            
00008506 47F8 A400                  		lea	(v_lvllayout).w,a3 ; RAM address for level layout
0000850A 7200                       		moveq	#0,d1
0000850C 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00008510 47F8 A440                  		lea	(v_lvllayout+$40).w,a3 ; RAM address for background layout
00008514 7202                       		moveq	#2,d1
00008516                            ; End of function LevelLayoutLoad
00008516                            
00008516                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00008516                            
00008516                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008516                            
00008516                            
00008516                            LevelLayoutLoad2:
00008516 3038 FE10                  		move.w	(v_zone).w,d0
0000851A ED08                       		lsl.b	#6,d0
0000851C EA48                       		lsr.w	#5,d0
0000851E 3400                       		move.w	d0,d2
00008520 D040                       		add.w	d0,d0
00008522 D042                       		add.w	d2,d0
00008524 D041                       		add.w	d1,d0
00008526 43F9 0000 0000             		lea	(Level_Index).l,a1
0000852C 3031 0000                  		move.w	(a1,d0.w),d0
00008530 43F1 0000                  		lea	(a1,d0.w),a1
00008534 7200                       		moveq	#0,d1
00008536 3401                       		move.w	d1,d2
00008538 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
0000853A 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
0000853C                            
0000853C                            LevLoad_NumRows:
0000853C 3001                       		move.w	d1,d0
0000853E 204B                       		movea.l	a3,a0
00008540                            
00008540                            LevLoad_Row:
00008540 10D9                       		move.b	(a1)+,(a0)+
00008542 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00008546 47EB 0080                  		lea	$80(a3),a3	; do next row
0000854A 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
0000854E 4E75                       		rts	
00008550                            ; End of function LevelLayoutLoad2
00008550                            
00008550                            		include	"_inc\DynamicLevelEvents.asm"
00008550                            ; ---------------------------------------------------------------------------
00008550                            ; Dynamic level events
00008550                            ; ---------------------------------------------------------------------------
00008550                            
00008550                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008550                            
00008550                            
00008550                            DynamicLevelEvents:
00008550 7000                       		moveq	#0,d0
00008552 1038 FE10                  		move.b	(v_zone).w,d0
00008556 D040                       		add.w	d0,d0
00008558 303B 0000                  		move.w	DLE_Index(pc,d0.w),d0
0000855C 4EBB 0000                  		jsr	DLE_Index(pc,d0.w) ; run level-specific events
00008560 7202                       		moveq	#2,d1
00008562 3038 F726                  		move.w	(v_limitbtm1).w,d0
00008566 9078 F72E                  		sub.w	(v_limitbtm2).w,d0 ; has lower level boundary changed recently?
0000856A 6700                       		beq.s	DLE_NoChg	; if not, branch
0000856C 6400                       		bcc.s	loc_6DAC
0000856E                            
0000856E 4441                       		neg.w	d1
00008570 3038 F704                  		move.w	(v_screenposy).w,d0
00008574 B078 F726                  		cmp.w	(v_limitbtm1).w,d0
00008578 6300                       		bls.s	loc_6DA0
0000857A 31C0 F72E                  		move.w	d0,(v_limitbtm2).w
0000857E 0278 FFFE F72E             		andi.w	#$FFFE,(v_limitbtm2).w
00008584                            
00008584                            loc_6DA0:
00008584 D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008588 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
0000858E                            
0000858E                            DLE_NoChg:
0000858E 4E75                       		rts	
00008590                            ; ===========================================================================
00008590                            
00008590                            loc_6DAC:
00008590 3038 F704                  		move.w	(v_screenposy).w,d0
00008594 5040                       		addq.w	#8,d0
00008596 B078 F72E                  		cmp.w	(v_limitbtm2).w,d0
0000859A 6500                       		bcs.s	loc_6DC4
0000859C 0838 0001 D022             		btst	#1,(v_player+obStatus).w
000085A2 6700                       		beq.s	loc_6DC4
000085A4 D241                       		add.w	d1,d1
000085A6 D241                       		add.w	d1,d1
000085A8                            
000085A8                            loc_6DC4:
000085A8 D378 F72E                  		add.w	d1,(v_limitbtm2).w
000085AC 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
000085B2 4E75                       		rts	
000085B4                            ; End of function DynamicLevelEvents
000085B4                            
000085B4                            ; ===========================================================================
000085B4                            ; ---------------------------------------------------------------------------
000085B4                            ; Offset index for dynamic level events
000085B4                            ; ---------------------------------------------------------------------------
000085B4 0000 0000                  DLE_Index:	dc.w DLE_GHZ-DLE_Index, DLE_LZ-DLE_Index
000085B8 0000 0000                  		dc.w DLE_MZ-DLE_Index, DLE_SLZ-DLE_Index
000085BC 0000 0000                  		dc.w DLE_SYZ-DLE_Index, DLE_SBZ-DLE_Index
000085C0 0000                       		dc.w DLE_Ending-DLE_Index
000085C2                            ; ===========================================================================
000085C2                            ; ---------------------------------------------------------------------------
000085C2                            ; Green	Hill Zone dynamic level events
000085C2                            ; ---------------------------------------------------------------------------
000085C2                            
000085C2                            DLE_GHZ:
000085C2 7000                       		moveq	#0,d0
000085C4 1038 FE11                  		move.b	(v_act).w,d0
000085C8 D040                       		add.w	d0,d0
000085CA 303B 0000                  		move.w	DLE_GHZx(pc,d0.w),d0
000085CE 4EFB 0000                  		jmp	DLE_GHZx(pc,d0.w)
000085D2                            ; ===========================================================================
000085D2 0000                       DLE_GHZx:	dc.w DLE_GHZ1-DLE_GHZx
000085D4 0000                       		dc.w DLE_GHZ2-DLE_GHZx
000085D6 0000                       		dc.w DLE_GHZ3-DLE_GHZx
000085D8                            ; ===========================================================================
000085D8                            
000085D8                            DLE_GHZ1:
000085D8 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
000085DE 6600                       		bne.s	gohere
000085E0 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
000085E6 4E75                       		rts
000085E8                            gohere:
000085E8 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
000085EE 0C78 1680 F700             		cmpi.w	#$1680,(v_screenposx).w ; has the camera reached $1780 on x-axis?
000085F4 6500                       		bcs.s	locret_6E08	; if not, branch
000085F6 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w ; set lower y-boundary
000085FC                            
000085FC                            locret_6E08:
000085FC 4E75                       		rts	
000085FE                            ; ===========================================================================
000085FE                            
000085FE                            DLE_GHZ2:
000085FE 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008604 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
0000860A 6500                       		bcs.s	locret_6E3A
0000860C 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
00008612 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008618 6500                       		bcs.s	locret_6E3A
0000861A 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008620 6500                       		bcs.s	loc_6E9A
00008622 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
00008628 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
0000862E 6400                       		bcc.s	loc_6E8F
00008630 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
00008636 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
0000863C                            
0000863C                            loc_6E8F:
0000863C 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008642 6400                       		bcc.s	loc_6E9A
00008644                            
00008644                            locret_6E3A:
00008644 4E75                       		rts	
00008646                            ; ===========================================================================
00008646                            
00008646                            loc_6E9A:
00008646 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
0000864C 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008650 4E75                       		rts		
00008652                            ; ===========================================================================
00008652                            
00008652                            DLE_GHZ3:
00008652 7000                       		moveq	#0,d0
00008654 1038 F742                  		move.b	(v_dle_routine).w,d0
00008658 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
0000865C 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00008660                            ; ===========================================================================
00008660 0000                       off_6E4A:	dc.w DLE_GHZ3main-off_6E4A
00008662 0000                       		dc.w DLE_GHZ3boss-off_6E4A
00008664 0000                       		dc.w DLE_GHZ3end-off_6E4A
00008666                            ; ===========================================================================
00008666                            
00008666                            DLE_GHZ3main:
00008666 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
0000866C 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
00008672 6500                       		bcs.s	locret_6E96
00008674 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
0000867A 0C78 0860 F700             		cmpi.w	#$860,(v_screenposx).w
00008680 6500                       		bcs.s	locret_6E96
00008682 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008688 6500                       		bcs.s	loc_6E98
0000868A 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
00008690 0C78 1380 F700             		cmpi.w	#$1380,(v_screenposx).w
00008696 6400                       		bcc.s	loc_6E8E
00008698 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
0000869E 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
000086A4                            
000086A4                            loc_6E8E:
000086A4 0C78 1300 F700             		cmpi.w	#$1300,(v_screenposx).w
000086AA 6400                       		bcc.s	loc_6E98
000086AC                            
000086AC                            locret_6E96:
000086AC 4E75                       		rts	
000086AE                            ; ===========================================================================
000086AE                            
000086AE                            loc_6E98:
000086AE 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
000086B4 5438 F742                  		addq.b	#2,(v_dle_routine).w
000086B8 4E75                       		rts	
000086BA                            ; ===========================================================================
000086BA                            
000086BA                            DLE_GHZ3boss:
000086BA 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
000086C0 6400                       		bcc.s	loc_6EB0
000086C2 5538 F742                  		subq.b	#2,(v_dle_routine).w
000086C6                            
000086C6                            loc_6EB0:
000086C6 0C78 2960 F700             		cmpi.w	#$2960,(v_screenposx).w
000086CC 6500                       		bcs.s	locret_6EE8
000086CE 6100 0000                  		bsr.w	FindFreeObj
000086D2 6600                       		bne.s	loc_6ED0
000086D4 12BC 0000                  		move.b	#id_BossGreenHill,0(a1) ; load GHZ boss	object
000086D8 337C 2A60 0008             		move.w	#$2A60,obX(a1)
000086DE 337C 0280 000C             		move.w	#$280,obY(a1)
000086E4                            
000086E4                            loc_6ED0:
000086EC 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000086F2 5438 F742                  		addq.b	#2,(v_dle_routine).w
000086F6 7000                       		moveq	#plcid_Boss,d0
000086F8 6000 9040                  		bra.w	AddPLC		; load boss patterns
000086FC                            ; ===========================================================================
000086FC                            
000086FC                            locret_6EE8:
000086FC 4E75                       		rts	
000086FE                            ; ===========================================================================
000086FE                            
000086FE                            DLE_GHZ3end:
000086FE 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008704 4E75                       		rts	
00008706                            ; ===========================================================================
00008706                            ; ---------------------------------------------------------------------------
00008706                            ; Labyrinth Zone dynamic level events
00008706                            ; ---------------------------------------------------------------------------
00008706                            
00008706                            DLE_LZ:
00008706 7000                       		moveq	#0,d0
00008708 1038 FE11                  		move.b	(v_act).w,d0
0000870C D040                       		add.w	d0,d0
0000870E 303B 0000                  		move.w	DLE_LZx(pc,d0.w),d0
00008712 4EFB 0000                  		jmp	DLE_LZx(pc,d0.w)
00008716                            ; ===========================================================================
00008716 0000                       DLE_LZx:	dc.w DLE_LZ12-DLE_LZx
00008718 0000                       		dc.w DLE_LZ12-DLE_LZx
0000871A 0000                       		dc.w DLE_LZ3-DLE_LZx
0000871C 0000                       		dc.w DLE_SBZ3-DLE_LZx
0000871E                            ; ===========================================================================
0000871E                            
0000871E                            DLE_LZ12:
0000871E 4E75                       		rts	
00008720                            ; ===========================================================================
00008720                            
00008720                            DLE_LZ3:
00008720 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch $F	been pressed?
00008724 6700                       		beq.s	loc_6F28	; if not, branch
00008726 43F8 A506                  		lea	(v_lvllayout+$106).w,a1
0000872A 0C11 0007                  		cmpi.b	#7,(a1)
0000872E 6700                       		beq.s	loc_6F28
00008730 12BC 0007                  		move.b	#7,(a1)		; modify level layout
0000873C                            
0000873C                            loc_6F28:
0000873C 4A38 F742                  		tst.b	(v_dle_routine).w
00008740 6600                       		bne.s	locret_6F64
00008742 0C78 1CA0 F700             		cmpi.w	#$1CA0,(v_screenposx).w
00008748 6500                       		bcs.s	locret_6F62
0000874A 0C78 0600 F704             		cmpi.w	#$600,(v_screenposy).w
00008750 6400                       		bcc.s	locret_6F62
00008752 6100 0000                  		bsr.w	FindFreeObj
00008756 6600                       		bne.s	loc_6F4A
00008758 12BC 0000                  		move.b	#id_BossLabyrinth,0(a1) ; load LZ boss object
0000875C                            
0000875C                            loc_6F4A:
00008764 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
0000876A 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000876E 7000                       		moveq	#plcid_Boss,d0
00008770 6000 8FC8                  		bra.w	AddPLC		; load boss patterns
00008774                            ; ===========================================================================
00008774                            
00008774                            locret_6F62:
00008774 4E75                       		rts	
00008776                            ; ===========================================================================
00008776                            
00008776                            locret_6F64:
00008776 4E75                       		rts	
00008778                            ; ===========================================================================
00008778                            
00008778                            DLE_SBZ3:
00008778 4A38 F742                          tst.b	(v_dle_routine).w
0000877C 6600                               bne.s   loc_6C28
0000877E 4A38 F7E1                  		tst.b	(f_switch+$1).w	; has switch $F	been pressed?
00008782 6700                       		beq.s	loc_6C28	; if not, branch
0000878C 11FC 0001 F742             		move.b	#1, (v_dle_routine).w
00008792                            loc_6C28:
00008792 0C78 0D00 F700             		cmpi.w	#$D00,(v_screenposx).w
00008798 6500                       		bcs.s	locret_6F8C
0000879A 0C78 0018 D00C             		cmpi.w	#$18,(v_player+obY).w ; has Sonic reached the top of the level?
000087A0 6400                       		bcc.s	locret_6F8C	; if not, branch
000087A2 4238 FE30                  		clr.b	(v_lastlamp).w
000087A6 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
000087AC 31FC 0502 FE10             		move.w	#(id_SBZ<<8)+2,(v_zone).w ; set level number to 0502 (FZ)
000087B2 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; freeze Sonic
000087B8                            
000087B8                            locret_6F8C:
000087B8 4E75                       		rts	
000087BA                            ; ===========================================================================
000087BA                            ; ---------------------------------------------------------------------------
000087BA                            ; Marble Zone dynamic level events
000087BA                            ; ---------------------------------------------------------------------------
000087BA                            
000087BA                            DLE_MZ:
000087BA 7000                       		moveq	#0,d0
000087BC 1038 FE11                  		move.b	(v_act).w,d0
000087C0 D040                       		add.w	d0,d0
000087C2 303B 0000                  		move.w	DLE_MZx(pc,d0.w),d0
000087C6 4EFB 0000                  		jmp	DLE_MZx(pc,d0.w)
000087CA                            ; ===========================================================================
000087CA 0000                       DLE_MZx:	dc.w DLE_MZ1-DLE_MZx
000087CC 0000                       		dc.w DLE_MZ2-DLE_MZx
000087CE 0000                       		dc.w DLE_MZ3-DLE_MZx
000087D0                            ; ===========================================================================
000087D0                            
000087D0                            DLE_MZ1:
000087D0 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
000087D6 0C78 1F40 F700             		cmpi.w	#$1F40,(v_screenposx).w
000087DC 6500                       		bcs.s	locret_6FE8
000087DE 31FC 0220 F726             		move.w	#$220,(v_limitbtm1).w
000087E4                            
000087E4                            locret_6FE8:
000087E4 4E75                       		rts	
000087E6                            
000087E6                            ; ===========================================================================
000087E6                            
000087E6                            DLE_MZ2:
000087E6 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
000087EC 0C78 2110 F700             		cmpi.w	#$2110,(v_screenposx).w
000087F2 6500                       		bcs.s	locret_6FE9
000087F4 31FC 0110 F726             		move.w	#$110,(v_limitbtm1).w
000087FA                            		
000087FA                            locret_6FE9:
000087FA 4E75                       		rts	
000087FC                            ; ===========================================================================
000087FC                            
000087FC                            DLE_MZ3:
000087FC 7000                       		moveq	#0,d0
000087FE 1038 F742                  		move.b	(v_dle_routine).w,d0
00008802 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00008806 4EFB 0000                  		jmp	off_7098(pc,d0.w)
0000880A                            ; ===========================================================================
0000880A 0000                       off_7098:	dc.w DLE_MZ3boss-off_7098
0000880C 0000                       		dc.w DLE_MZ3cutscene-off_7098
0000880E 0000                       		dc.w DLE_MZ3boss2-off_7098
00008810 0000                       		dc.w DLE_MZ3end-off_7098
00008812                            ; ===========================================================================
00008812                            
00008812                            DLE_MZ3boss:
00008812 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008818 0C78 0E00 F700             		cmpi.w	#$0E00,(v_screenposx).w
0000881E 6500                       		bcs.s	locret_70E8
00008820 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008826 0C78 17F0 F700             		cmpi.w	#$17F0,(v_screenposx).w
0000882C 6500                       		bcs.s	locret_70E8
0000882E 6100 0000                  		bsr.w	FindFreeObj
00008832 6600                       		bne.s	loc_70D0
00008834 12BC 0000                  		move.b	#id_BossMarble,0(a1) ; load MZ boss object
00008838 337C 19F0 0008             		move.w	#$19F0,obX(a1)
0000883E 337C 022C 000C             		move.w	#$22C,obY(a1)
00008844                            
00008844                            loc_70D0:
0000884C 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008852 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008856 7000                       		moveq	#plcid_Boss,d0
00008858 6000 8EE0                  		bra.w	AddPLC		; load boss patterns
0000885C                            ; ===========================================================================
0000885C                            
0000885C                            locret_70E8:
0000885C 4E75                       		rts	
0000885E                            		
0000885E                            DLE_MZ3cutscene:
0000885E 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008864 0C78 19B0 F700             		cmpi.w	#$19B0,(v_screenposx).w
0000886A 6500                       		bcs.s	locret_8298
0000886C 6100 0000                  		bsr.w	FindFreeObj
00008870 6600                       		bne.s	locret_8298
00008872 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
00008876 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000887A 7000                       		moveq	#plcid_EggmanSBZ2,d0
0000887C 6000 8EBC                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008880                            ; ===========================================================================
00008880                            
00008880                            locret_8298:
00008880 4E75                       		rts	
00008882                            ; ===========================================================================
00008882                            
00008882                            DLE_MZ3boss2:
00008882 0C78 1A60 F700             		cmpi.w	#$1A60,(v_screenposx).w
00008888 6500                       		bcs.s	loc_72C6
0000888A 6100 0000                  		bsr.w	FindFreeObj
0000888E 6600                       		bne.s	loc_72C0
00008890 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
00008894 5438 F742                  		addq.b	#2,(v_dle_routine).w
000088A0                            
000088A0                            loc_72C0:
000088A0 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000088A6                            
000088A6                            loc_72C6:
000088A6 6000                       		bra.s	loc_72D2
000088A8                            ; ===========================================================================
000088A8                            
000088A8                            DLE_MZ3end:
000088A8 0C78 1B50 F700             		cmpi.w	#$1B50,(v_screenposx).w
000088AE 6500                       		bcs.s	loc_72D2
000088B0 4E75                       		rts	
000088B2                            ; ===========================================================================
000088B2                            
000088B2                            loc_72D2:
000088B2 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
000088B8 4E75                       		rts
000088BA                            
000088BA                            
000088BA                            ; ===========================================================================
000088BA                            ; ---------------------------------------------------------------------------
000088BA                            ; Star Light Zone dynamic level events
000088BA                            ; ---------------------------------------------------------------------------
000088BA                            
000088BA                            DLE_SLZ:
000088BA 7000                       		moveq	#0,d0
000088BC 1038 FE11                  		move.b	(v_act).w,d0
000088C0 D040                       		add.w	d0,d0
000088C2 303B 0000                  		move.w	DLE_SLZx(pc,d0.w),d0
000088C6 4EFB 0000                  		jmp	DLE_SLZx(pc,d0.w)
000088CA                            ; ===========================================================================
000088CA 0000                       DLE_SLZx:	dc.w DLE_SLZ12-DLE_SLZx
000088CC 0000                       		dc.w DLE_SLZ12-DLE_SLZx
000088CE 0000                       		dc.w DLE_SLZ3-DLE_SLZx
000088D0                            ; ===========================================================================
000088D0                            
000088D0                            DLE_SLZ12:
000088D0 4E75                       		rts	
000088D2                            ; ===========================================================================
000088D2                            
000088D2                            DLE_SLZ3:
000088D2 7000                       		moveq	#0,d0
000088D4 1038 F742                  		move.b	(v_dle_routine).w,d0
000088D8 303B 0000                  		move.w	off_7118(pc,d0.w),d0
000088DC 4EFB 0000                  		jmp	off_7118(pc,d0.w)
000088E0                            ; ===========================================================================
000088E0 0000                       off_7118:	dc.w DLE_SLZ3main-off_7118
000088E2 0000                       		dc.w DLE_SLZ3boss-off_7118
000088E4 0000                       		dc.w DLE_SLZ3end-off_7118
000088E6                            ; ===========================================================================
000088E6                            
000088E6                            DLE_SLZ3main:
000088E6 0C78 1E70 F700             		cmpi.w	#$1E70,(v_screenposx).w
000088EC 6500                       		bcs.s	locret_7130
000088EE 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
000088F4 5438 F742                  		addq.b	#2,(v_dle_routine).w
000088F8                            
000088F8                            locret_7130:
000088F8 4E75                       		rts	
000088FA                            ; ===========================================================================
000088FA                            
000088FA                            DLE_SLZ3boss:
000088FA 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008900 6500                       		bcs.s	locret_715C
00008902 6100 0000                  		bsr.w	FindFreeObj
00008906 6600                       		bne.s	loc_7144
00008908 12BC 0000                  		move.b	#id_BossStarLight,(a1) ; load SLZ boss object
0000890C                            
0000890C                            loc_7144:
00008914 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
0000891A 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000891E 7000                       		moveq	#plcid_Boss,d0
00008920 6000 8E18                  		bra.w	AddPLC		; load boss patterns
00008924                            ; ===========================================================================
00008924                            
00008924                            locret_715C:
00008924 4E75                       		rts	
00008926                            ; ===========================================================================
00008926                            
00008926                            DLE_SLZ3end:
00008926 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
0000892C 4E75                       		rts
0000892E 4E75                       		rts
00008930                            ; ===========================================================================
00008930                            ; ---------------------------------------------------------------------------
00008930                            ; Spring Yard Zone dynamic level events
00008930                            ; ---------------------------------------------------------------------------
00008930                            
00008930                            DLE_SYZ:
00008930 7000                       		moveq	#0,d0
00008932 1038 FE11                  		move.b	(v_act).w,d0
00008936 D040                       		add.w	d0,d0
00008938 303B 0000                  		move.w	DLE_SYZx(pc,d0.w),d0
0000893C 4EFB 0000                  		jmp	DLE_SYZx(pc,d0.w)
00008940                            ; ===========================================================================
00008940 0000                       DLE_SYZx:	dc.w DLE_SYZ1-DLE_SYZx
00008942 0000                       		dc.w DLE_SYZ2-DLE_SYZx
00008944 0000                       		dc.w DLE_SYZ3-DLE_SYZx
00008946                            ; ===========================================================================
00008946                            
00008946                            DLE_SYZ1:
00008946 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
0000894C 0C78 1600 F700             		cmpi.w	#$1600,(v_screenposx).w
00008952 6500                       		bcs.s	locret_71A2
00008954 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
0000895A 4E75                       		rts	
0000895C                            ; ===========================================================================
0000895C                            
0000895C                            DLE_SYZ2:
0000895C 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008962 0C78 25A0 F700             		cmpi.w	#$25A0,(v_screenposx).w
00008968 6500                       		bcs.s	locret_71A2
0000896A 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
00008970 0C78 04D0 D00C             		cmpi.w	#$4D0,(v_player+obY).w
00008976 6500                       		bcs.s	locret_71A2
00008978 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
0000897E                            
0000897E                            locret_71A2:
0000897E 4E75                       		rts	
00008980                            ; ===========================================================================
00008980                            
00008980                            DLE_SYZ3:
00008980 7000                       		moveq	#0,d0
00008982 1038 F742                  		move.b	(v_dle_routine).w,d0
00008986 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
0000898A 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
0000898E                            ; ===========================================================================
0000898E 0000                       off_71B2:	dc.w DLE_SYZ3main-off_71B2
00008990 0000                       		dc.w DLE_SYZ3boss-off_71B2
00008992 0000                       		dc.w DLE_SYZ3end-off_71B2
00008994                            ; ===========================================================================
00008994                            
00008994                            DLE_SYZ3main:
00008994 0C78 2AC0 F700             		cmpi.w	#$2AC0,(v_screenposx).w
0000899A 6500                       		bcs.s	locret_71CE
0000899C 6100 0000                  		bsr.w	FindFreeObj
000089A0 6600                       		bne.s	locret_71CE
000089A2 12BC 0000                  		move.b	#id_BossBlock,(a1) ; load blocks that boss picks up
000089A6 5438 F742                  		addq.b	#2,(v_dle_routine).w
000089AA                            
000089AA                            locret_71CE:
000089AA 4E75                       		rts	
000089AC                            ; ===========================================================================
000089AC                            
000089AC                            DLE_SYZ3boss:
000089AC 0C78 2C00 F700             		cmpi.w	#$2C00,(v_screenposx).w
000089B2 6500                       		bcs.s	locret_7200
000089B4 31FC 04CC F726             		move.w	#$4CC,(v_limitbtm1).w
000089BA 6100 0000                  		bsr.w	FindFreeObj
000089BE 6600                       		bne.s	loc_71EC
000089C0 12BC 0000                  		move.b	#id_BossSpringYard,(a1) ; load SYZ boss	object
000089C4 5438 F742                  		addq.b	#2,(v_dle_routine).w
000089C8                            
000089C8                            loc_71EC:
000089D0 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000089D6 7000                       		moveq	#plcid_Boss,d0
000089D8 6000 8D60                  		bra.w	AddPLC		; load boss patterns
000089DC                            ; ===========================================================================
000089DC                            
000089DC                            locret_7200:
000089DC 4E75                       		rts	
000089DE                            ; ===========================================================================
000089DE                            
000089DE                            DLE_SYZ3end:
000089DE 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
000089E4 4E75                       		rts	
000089E6                            ; ===========================================================================
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            ; Scrap	Brain Zone dynamic level events
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            
000089E6                            DLE_SBZ:
000089E6 7000                       		moveq	#0,d0
000089E8 1038 FE11                  		move.b	(v_act).w,d0
000089EC D040                       		add.w	d0,d0
000089EE 303B 0000                  		move.w	DLE_SBZx(pc,d0.w),d0
000089F2 4EFB 0000                  		jmp	DLE_SBZx(pc,d0.w)
000089F6                            ; ===========================================================================
000089F6 0000                       DLE_SBZx:	dc.w DLE_SBZ1-DLE_SBZx
000089F8 0000                       		dc.w DLE_SBZ2-DLE_SBZx
000089FA 0000                       		dc.w DLE_FZ-DLE_SBZx
000089FC                            ; ===========================================================================
000089FC                            
000089FC                            DLE_SBZ1:
000089FC 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00008A02 0C78 1880 F700             		cmpi.w	#$1880,(v_screenposx).w
00008A08 6500                       		bcs.s	locret_7242
00008A0A 31FC 0620 F726             		move.w	#$620,(v_limitbtm1).w
00008A10 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008A16 6500                       		bcs.s	locret_7242
00008A18 31FC 02A0 F726             		move.w	#$2A0,(v_limitbtm1).w
00008A1E                            
00008A1E                            locret_7242:
00008A1E 4E75                       		rts	
00008A20                            ; ===========================================================================
00008A20                            
00008A20                            DLE_SBZ2:
00008A20 7000                       		moveq	#0,d0
00008A22 1038 F742                  		move.b	(v_dle_routine).w,d0
00008A26 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008A2A 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008A2E                            ; ===========================================================================
00008A2E 0000                       off_7252:	dc.w DLE_SBZ2main-off_7252
00008A30 0000                       		dc.w DLE_SBZ2boss-off_7252
00008A32 0000                       		dc.w DLE_SBZ2boss2-off_7252
00008A34 0000                       		dc.w DLE_SBZ2end-off_7252
00008A36                            ; ===========================================================================
00008A36                            
00008A36                            DLE_SBZ2main:
00008A36 31FC 0800 F726             		move.w	#$800,(v_limitbtm1).w
00008A3C 0C78 1800 F700             		cmpi.w	#$1800,(v_screenposx).w
00008A42 6500                       		bcs.s	locret_727A
00008A44 31FC 0510 F726             		move.w	#$510,(v_limitbtm1).w
00008A4A 0C78 1E00 F700             		cmpi.w	#$1E00,(v_screenposx).w
00008A50 6500                       		bcs.s	locret_727A
00008A52 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008A56                            
00008A56                            locret_727A:
00008A56 4E75                       		rts	
00008A58                            ; ===========================================================================
00008A58                            
00008A58                            DLE_SBZ2boss:
00008A58 0C78 1EB0 F700             		cmpi.w	#$1EB0,(v_screenposx).w
00008A5E 6500                       		bcs.s	locret_7298
00008A60 6100 0000                  		bsr.w	FindFreeObj
00008A64 6600                       		bne.s	locret_7298
00008A66 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
00008A6A 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008A6E 7000                       		moveq	#plcid_EggmanSBZ2,d0
00008A70 6000 8CC8                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008A74                            ; ===========================================================================
00008A74                            
00008A74                            locret_7298:
00008A74 4E75                       		rts	
00008A76                            ; ===========================================================================
00008A76                            
00008A76                            DLE_SBZ2boss2:
00008A76 0C78 1F60 F700             		cmpi.w	#$1F60,(v_screenposx).w
00008A7C 6500                       		bcs.s	loc_72B6
00008A7E 6100 0000                  		bsr.w	FindFreeObj
00008A82 6600                       		bne.s	loc_72B0
00008A84 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
00008A88 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008A8C                            
00008A8C                            loc_72B0:
00008A8C 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008A92                            
00008A92                            loc_72B6:
00008A92 6000                       		bra.s	loc_72C2
00008A94                            ; ===========================================================================
00008A94                            
00008A94                            DLE_SBZ2end:
00008A94 0C78 2050 F700             		cmpi.w	#$2050,(v_screenposx).w
00008A9A 6500                       		bcs.s	loc_72C2
00008A9C 4E75                       		rts	
00008A9E                            ; ===========================================================================
00008A9E                            
00008A9E                            loc_72C2:
00008A9E 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008AA4 4E75                       		rts	
00008AA6                            ; ===========================================================================
00008AA6                            
00008AA6                            DLE_FZ:
00008AA6 7000                       		moveq	#0,d0
00008AA8 1038 F742                  		move.b	(v_dle_routine).w,d0
00008AAC 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00008AB0 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00008AB4                            ; ===========================================================================
00008AB4 0000 0000                  off_72D8:	dc.w DLE_FZmain-off_72D8, DLE_FZboss-off_72D8
00008AB8 0000 0000                  		dc.w DLE_FZend-off_72D8, locret_7322-off_72D8
00008ABC 0000                       		dc.w DLE_FZend2-off_72D8
00008ABE                            ; ===========================================================================
00008ABE                            
00008ABE                            DLE_FZmain:
00008ABE 0C78 2148 F700             		cmpi.w	#$2148,(v_screenposx).w
00008AC4 6500                       		bcs.s	loc_72F4
00008AC6 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008ACA 7000                       		moveq	#plcid_FZBoss,d0
00008ACC 6100 8C6C                  		bsr.w	AddPLC		; load FZ boss patterns
00008AD0                            
00008AD0                            loc_72F4:
00008AD0 60CC                       		bra.s	loc_72C2
00008AD2                            ; ===========================================================================
00008AD2                            
00008AD2                            DLE_FZboss:
00008AD2 0C78 2300 F700             		cmpi.w	#$2300,(v_screenposx).w
00008AD8 6500                       		bcs.s	loc_7312
00008ADA 6100 0000                  		bsr.w	FindFreeObj
00008ADE 6600                       		bne.s	loc_7312
00008AE0 12BC 0000                  		move.b	#id_BossFinal,(a1) ; load FZ boss object
00008AE4 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008AE8 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008AEE                            
00008AEE                            loc_7312:
00008AEE 60AE                       		bra.s	loc_72C2
00008AF0                            ; ===========================================================================
00008AF0                            
00008AF0                            DLE_FZend:
00008AF0 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
00008AF6 6500                       		bcs.s	loc_7320
00008AF8 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008AFC                            
00008AFC                            loc_7320:
00008AFC 60A0                       		bra.s	loc_72C2
00008AFE                            ; ===========================================================================
00008AFE                            
00008AFE                            locret_7322:
00008AFE 4E75                       		rts	
00008B00                            ; ===========================================================================
00008B00                            
00008B00                            DLE_FZend2:
00008B00 609C                       		bra.s	loc_72C2
00008B02                            ; ===========================================================================
00008B02                            ; ---------------------------------------------------------------------------
00008B02                            ; Ending sequence dynamic level events (empty)
00008B02                            ; ---------------------------------------------------------------------------
00008B02                            
00008B02                            DLE_Ending:
00008B02 4E75                       		rts	
00008B02 4E75                       		rts	
00008B04                            
00008B04                            		include	"_incObj\11 Bridge (part 1).asm"
00008B04                            ; ---------------------------------------------------------------------------
00008B04                            ; Object 11 - GHZ bridge
00008B04                            ; ---------------------------------------------------------------------------
00008B04                            
00008B04                            Bridge:
00008B04 7000                       		moveq	#0,d0
00008B06 1028 0024                  		move.b	obRoutine(a0),d0
00008B0A 323B 0000                  		move.w	Bri_Index(pc,d0.w),d1
00008B0E 4EFB 1000                  		jmp	Bri_Index(pc,d1.w)
00008B12                            ; ===========================================================================
00008B12 0000 0000                  Bri_Index:	dc.w Bri_Main-Bri_Index, Bri_Action-Bri_Index
00008B16 0000 0000                  		dc.w Bri_Platform-Bri_Index, Bri_Delete-Bri_Index
00008B1A 0000 0000                  		dc.w Bri_Delete-Bri_Index, Bri_Display-Bri_Index
00008B1E                            ; ===========================================================================
00008B1E                            
00008B1E                            Bri_Main:	; Routine 0
00008B1E 5428 0024                  		addq.b	#2,obRoutine(a0)
00008B22 217C 0000 0000 0004        		move.l	#Map_Bri,obMap(a0)
00008B2A 317C 438E 0002             		move.w	#$438E,obGfx(a0)
00008B30 117C 0004 0001             		move.b	#4,obRender(a0)
00008B36 317C 0180 0018             		move.w	#$180,obPriority(a0)
00008B3C 117C 0080 0014             		move.b	#$80,obActWid(a0)
00008B42 3428 000C                  		move.w	obY(a0),d2
00008B46 3628 0008                  		move.w	obX(a0),d3
00008B4A 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008B4C 45E8 0028                  		lea	obSubtype(a0),a2
00008B50 7200                       		moveq	#0,d1
00008B52 1212                       		move.b	(a2),d1		; copy bridge length to d1
00008B54 14FC 0000                  		move.b	#0,(a2)+	; clear bridge length
00008B58 3001                       		move.w	d1,d0
00008B5A E248                       		lsr.w	#1,d0
00008B5C E948                       		lsl.w	#4,d0
00008B5E 9640                       		sub.w	d0,d3		; d3 is position of leftmost log
00008B60 5501                       		subq.b	#2,d1
00008B62 6500                       		bcs.s	Bri_Action	; don't make more if bridge has only 1 log
00008B64                            
00008B64                            @buildloop:
00008B64 6100 0000                  		bsr.w	FindFreeObj
00008B68 6600                       		bne.s	Bri_Action
00008B6A 5228 0028                  		addq.b	#1,obSubtype(a0)
00008B6E B668 0008                  		cmp.w	obX(a0),d3	; is this log the leftmost one?
00008B72 6600                       		bne.s	@notleftmost	; if not, branch
00008B74                            
00008B74 0643 0010                  		addi.w	#$10,d3
00008B78 3142 000C                  		move.w	d2,obY(a0)
00008B7C 3142 003C                  		move.w	d2,$3C(a0)
00008B80 3A08                       		move.w	a0,d5
00008B82 0445 D000                  		subi.w	#$D000,d5
00008B86 EC4D                       		lsr.w	#6,d5
00008B88 0245 007F                  		andi.w	#$7F,d5
00008B8C 14C5                       		move.b	d5,(a2)+
00008B8E 5228 0028                  		addq.b	#1,obSubtype(a0)
00008B92                            
00008B92                            	@notleftmost:
00008B92 3A09                       		move.w	a1,d5
00008B94 0445 D000                  		subi.w	#$D000,d5
00008B98 EC4D                       		lsr.w	#6,d5
00008B9A 0245 007F                  		andi.w	#$7F,d5
00008B9E 14C5                       		move.b	d5,(a2)+
00008BA0 137C 000A 0024             		move.b	#$A,obRoutine(a1)
00008BA6 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00008BA8 3342 000C                  		move.w	d2,obY(a1)
00008BAC 3342 003C                  		move.w	d2,$3C(a1)
00008BB0 3343 0008                  		move.w	d3,obX(a1)
00008BB4 237C 0000 0000 0004        		move.l	#Map_Bri,obMap(a1)
00008BBC 337C 438E 0002             		move.w	#$438E,obGfx(a1)
00008BC2 137C 0004 0001             		move.b	#4,obRender(a1)
00008BC8 337C 0180 0018             		move.w	#$180,obPriority(a1)
00008BCE 137C 0008 0014             		move.b	#8,obActWid(a1)
00008BD4 0643 0010                  		addi.w	#$10,d3
00008BD8 51C9 FF8A                  		dbf	d1,@buildloop ; repeat d1 times (length of bridge)
00008BDC                            
00008BDC                            Bri_Action:	; Routine 2
00008BDC 6100                       		bsr.s	Bri_Solid
00008BDE 4A28 003E                  		tst.b	$3E(a0)
00008BE2 6700                       		beq.s	@display
00008BE4 5928 003E                  		subq.b	#4,$3E(a0)
00008BE8 6100 0000                  		bsr.w	Bri_Bend
00008BEC                            
00008BEC                            	@display:
00008BEC 6100 0000                  		bsr.w	DisplaySprite
00008BF0 6000 0000                  		bra.w	Bri_ChkDel
00008BF4                            
00008BF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008BF4                            
00008BF4                            
00008BF4                            Bri_Solid:
00008BF4 7200                       		moveq	#0,d1
00008BF6 1228 0028                  		move.b	obSubtype(a0),d1
00008BFA E749                       		lsl.w	#3,d1
00008BFC 3401                       		move.w	d1,d2
00008BFE 5041                       		addq.w	#8,d1
00008C00 D442                       		add.w	d2,d2
00008C02 43F8 D000                  		lea	(v_player).w,a1
00008C06 4A69 0012                  		tst.w	obVelY(a1)
00008C0A 6B00 0000                  		bmi.w	Plat_Exit
00008C0E 3029 0008                  		move.w	obX(a1),d0
00008C12 9068 0008                  		sub.w	obX(a0),d0
00008C16 D041                       		add.w	d1,d0
00008C18 6B00 0000                  		bmi.w	Plat_Exit
00008C1C B042                       		cmp.w	d2,d0
00008C1E 6400 0000                  		bcc.w	Plat_Exit
00008C22 6000                       		bra.s	Plat_NoXCheck
00008C24                            ; End of function Bri_Solid
00008C24                            ; End of function Bri_Solid
00008C24                            
00008C24                            ; ---------------------------------------------------------------------------
00008C24                            ; Platform subroutine
00008C24                            ; ---------------------------------------------------------------------------
00008C24                            
00008C24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C24                            
00008C24                            PlatformObject:
00008C24 43F8 D000                  		lea	(v_player).w,a1
00008C28 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving up/jumping?
00008C2C 6B00 0000                  		bmi.w	Plat_Exit	; if yes, branch
00008C30                            
00008C30                            ;		perform x-axis range check
00008C30 3029 0008                  		move.w	obX(a1),d0
00008C34 9068 0008                  		sub.w	obX(a0),d0
00008C38 D041                       		add.w	d1,d0
00008C3A 6B00 0000                  		bmi.w	Plat_Exit
00008C3E D241                       		add.w	d1,d1
00008C40 B041                       		cmp.w	d1,d0
00008C42 6400 0000                  		bhs.w	Plat_Exit
00008C46                            
00008C46                            	Plat_NoXCheck:
00008C46 3028 000C                  		move.w	obY(a0),d0
00008C4A 5140                       		subq.w	#8,d0
00008C4C                            
00008C4C                            Platform3:
00008C4C                            ;		perform y-axis range check
00008C4C 3429 000C                  		move.w	obY(a1),d2
00008C50 1229 0016                  		move.b	obHeight(a1),d1
00008C54 4881                       		ext.w	d1
00008C56 D242                       		add.w	d2,d1
00008C58 5841                       		addq.w	#4,d1
00008C5A 9041                       		sub.w	d1,d0
00008C5C 6200 0000                  		bhi.w	Plat_Exit
00008C60 0C40 FFF0                  		cmpi.w	#-$10,d0
00008C64 6500 0000                  		blo.w	Plat_Exit
00008C68                            
00008C68 4A38 F7C8                  		tst.b	(f_lockmulti).w
00008C6C 6B00 0000                  		bmi.w	Plat_Exit
00008C70 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00008C76 6400 0000                  		bhs.w	Plat_Exit
00008C7A D440                       		add.w	d0,d2
00008C7C 5642                       		addq.w	#3,d2
00008C7E 3342 000C                  		move.w	d2,obY(a1)
00008C82 5428 0024                  		addq.b	#2,obRoutine(a0)
00008C86                            
00008C86                            loc_74AE:
00008C86 0829 0003 0022             		btst	#3,obStatus(a1)
00008C8C 6700                       		beq.s	loc_74DC
00008C8E 7000                       		moveq	#0,d0
00008C90 1029 003D                  		move.b	$3D(a1),d0
00008C94 ED48                       		lsl.w	#6,d0
00008C96 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008C9C 2440                       		movea.l	d0,a2
00008C9E 08AA 0003 0022             		bclr	#3,obStatus(a2)
00008CA4 422A 0025                  		clr.b	ob2ndRout(a2)
00008CA8 0C2A 0004 0024             		cmpi.b	#4,obRoutine(a2)
00008CAE 6600                       		bne.s	loc_74DC
00008CB0 552A 0024                  		subq.b	#2,obRoutine(a2)
00008CB4                            
00008CB4                            loc_74DC:
00008CB4 3008                       		move.w	a0,d0
00008CB6 0440 D000                  		subi.w	#-$3000,d0
00008CBA EC48                       		lsr.w	#6,d0
00008CBC 0240 007F                  		andi.w	#$7F,d0
00008CC0 1340 003D                  		move.b	d0,$3D(a1)
00008CC4 137C 0000 0026             		move.b	#0,obAngle(a1)
00008CCA 337C 0000 0012             		move.w	#0,obVelY(a1)
00008CD0 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00008CD6 0829 0001 0022             		btst	#1,obStatus(a1)
00008CDC 6700                       		beq.s	loc_7512
00008CDE 2F08                       		move.l	a0,-(sp)
00008CE0 2049                       		movea.l	a1,a0
00008CE2 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l
00008CE8 205F                       		movea.l	(sp)+,a0
00008CEA                            
00008CEA                            loc_7512:
00008CEA 08E9 0003 0022             		bset	#3,obStatus(a1)
00008CF0 08E8 0003 0022             		bset	#3,obStatus(a0)
00008CF6                            
00008CF6                            Plat_Exit:
00008CF6 4E75                       		rts	
00008CF8                            ; End of function PlatformObject
00008CF8                            
00008CF8                            ; ---------------------------------------------------------------------------
00008CF8                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00008CF8                            ; ---------------------------------------------------------------------------
00008CF8                            
00008CF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008CF8                            
00008CF8                            
00008CF8                            SlopeObject:
00008CF8 43F8 D000                  		lea	(v_player).w,a1
00008CFC 4A69 0012                  		tst.w	obVelY(a1)
00008D00 6B00 FFF4                  		bmi.w	Plat_Exit
00008D04 3029 0008                  		move.w	obX(a1),d0
00008D08 9068 0008                  		sub.w	obX(a0),d0
00008D0C D041                       		add.w	d1,d0
00008D0E 6BE6                       		bmi.s	Plat_Exit
00008D10 D241                       		add.w	d1,d1
00008D12 B041                       		cmp.w	d1,d0
00008D14 64E0                       		bhs.s	Plat_Exit
00008D16 0828 0000 0001             		btst	#0,obRender(a0)
00008D1C 6700                       		beq.s	loc_754A
00008D1E 4640                       		not.w	d0
00008D20 D041                       		add.w	d1,d0
00008D22                            
00008D22                            loc_754A:
00008D22 E248                       		lsr.w	#1,d0
00008D24 7600                       		moveq	#0,d3
00008D26 1632 0000                  		move.b	(a2,d0.w),d3
00008D2A 3028 000C                  		move.w	obY(a0),d0
00008D2E 9043                       		sub.w	d3,d0
00008D30 6000 FF1A                  		bra.w	Platform3
00008D34                            ; End of function SlopeObject
00008D34                            
00008D34                            
00008D34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D34                            
00008D34                            
00008D34                            Swing_Solid:
00008D34 43F8 D000                  		lea	(v_player).w,a1
00008D38 4A69 0012                  		tst.w	obVelY(a1)
00008D3C 6B00 FFB8                  		bmi.w	Plat_Exit
00008D40 3029 0008                  		move.w	obX(a1),d0
00008D44 9068 0008                  		sub.w	obX(a0),d0
00008D48 D041                       		add.w	d1,d0
00008D4A 6B00 FFAA                  		bmi.w	Plat_Exit
00008D4E D241                       		add.w	d1,d1
00008D50 B041                       		cmp.w	d1,d0
00008D52 6400 FFA2                  		bhs.w	Plat_Exit
00008D56 3028 000C                  		move.w	obY(a0),d0
00008D5A 9043                       		sub.w	d3,d0
00008D5C 6000 FEEE                  		bra.w	Platform3
00008D60                            ; End of function Obj15_Solid
00008D60                            
00008D60                            ; ===========================================================================
00008D60                            
00008D60                            		include	"_incObj\11 Bridge (part 2).asm"
00008D60                            
00008D60                            Bri_Platform:	; Routine 4
00008D60 6100                       		bsr.s	Bri_WalkOff
00008D62 6100 0000                  		bsr.w	DisplaySprite
00008D66 6000 0000                  		bra.w	Bri_ChkDel
00008D6A                            
00008D6A                            ; ---------------------------------------------------------------------------
00008D6A                            ; Subroutine allowing Sonic to walk off a bridge
00008D6A                            ; ---------------------------------------------------------------------------
00008D6A                            
00008D6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D6A                            
00008D6A                            
00008D6A                            Bri_WalkOff:
00008D6A 7200                       		moveq	#0,d1
00008D6C 1228 0028                  		move.b	obSubtype(a0),d1
00008D70 E749                       		lsl.w	#3,d1
00008D72 3401                       		move.w	d1,d2
00008D74 5041                       		addq.w	#8,d1
00008D76 6100                       		bsr.s	ExitPlatform2
00008D78 6400                       		bcc.s	locret_75BE
00008D7A E848                       		lsr.w	#4,d0
00008D7C 1140 003F                  		move.b	d0,$3F(a0)
00008D80 1028 003E                  		move.b	$3E(a0),d0
00008D84 0C00 0040                  		cmpi.b	#$40,d0
00008D88 6700                       		beq.s	loc_75B6
00008D8A 5828 003E                  		addq.b	#4,$3E(a0)
00008D8E                            
00008D8E                            loc_75B6:
00008D8E 6100 0000                  		bsr.w	Bri_Bend
00008D92 6100 0000                  		bsr.w	Bri_MoveSonic
00008D96                            
00008D96                            locret_75BE:
00008D96 4E75                       		rts	
00008D98                            ; End of function Bri_WalkOff
00008D98                            ; End of function Bri_WalkOff
00008D98                            
00008D98                            ; ---------------------------------------------------------------------------
00008D98                            ; Subroutine allowing Sonic to walk or jump off	a platform
00008D98                            ; ---------------------------------------------------------------------------
00008D98                            
00008D98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D98                            
00008D98                            
00008D98                            ExitPlatform:
00008D98 3401                       		move.w	d1,d2
00008D9A                            
00008D9A                            ExitPlatform2:
00008D9A D442                       		add.w	d2,d2
00008D9C 43F8 D000                  		lea	(v_player).w,a1
00008DA0 0829 0001 0022             		btst	#1,obStatus(a1)
00008DA6 6600                       		bne.s	loc_75E0
00008DA8 3029 0008                  		move.w	obX(a1),d0
00008DAC 9068 0008                  		sub.w	obX(a0),d0
00008DB0 D041                       		add.w	d1,d0
00008DB2 6B00                       		bmi.s	loc_75E0
00008DB4 B042                       		cmp.w	d2,d0
00008DB6 6500                       		blo.s	locret_75F2
00008DB8                            
00008DB8                            loc_75E0:
00008DB8 08A9 0003 0022             		bclr	#3,obStatus(a1)
00008DBE 117C 0002 0024             		move.b	#2,obRoutine(a0)
00008DC4 08A8 0003 0022             		bclr	#3,obStatus(a0)
00008DCA                            
00008DCA                            locret_75F2:
00008DCA 4E75                       		rts	
00008DCC                            ; End of function ExitPlatform
00008DCC                            
00008DCC                            		include	"_incObj\11 Bridge (part 3).asm"
00008DCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008DCC                            
00008DCC                            
00008DCC                            Bri_MoveSonic:
00008DCC 7000                       		moveq	#0,d0
00008DCE 1028 003F                  		move.b	$3F(a0),d0
00008DD2 1030 0029                  		move.b	$29(a0,d0.w),d0
00008DD6 ED48                       		lsl.w	#6,d0
00008DD8 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008DDE 2440                       		movea.l	d0,a2
00008DE0 43F8 D000                  		lea	(v_player).w,a1
00008DE4 302A 000C                  		move.w	obY(a2),d0
00008DE8 5140                       		subq.w	#8,d0
00008DEA 7200                       		moveq	#0,d1
00008DEC 1229 0016                  		move.b	obHeight(a1),d1
00008DF0 9041                       		sub.w	d1,d0
00008DF2 3340 000C                  		move.w	d0,obY(a1)	; change Sonic's position on y-axis
00008DF6 4E75                       		rts	
00008DF8                            ; End of function Bri_MoveSonic
00008DF8                            
00008DF8                            
00008DF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008DF8                            
00008DF8                            
00008DF8                            Bri_Bend:
00008DF8 1028 003E                  		move.b	$3E(a0),d0
00008DFC 6100 AECC                  		bsr.w	CalcSine
00008E00 3800                       		move.w	d0,d4
00008E02 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00008E08 7000                       		moveq	#0,d0
00008E0A 1028 0028                  		move.b	obSubtype(a0),d0
00008E0E E948                       		lsl.w	#4,d0
00008E10 7600                       		moveq	#0,d3
00008E12 1628 003F                  		move.b	$3F(a0),d3
00008E16 3403                       		move.w	d3,d2
00008E18 D640                       		add.w	d0,d3
00008E1A 7A00                       		moveq	#0,d5
00008E1C 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00008E22 1A35 3000                  		move.b	(a5,d3.w),d5
00008E26 0243 000F                  		andi.w	#$F,d3
00008E2A E94B                       		lsl.w	#4,d3
00008E2C 47F4 3000                  		lea	(a4,d3.w),a3
00008E30 45E8 0029                  		lea	$29(a0),a2
00008E34                            
00008E34                            loc_765C:
00008E34 7000                       		moveq	#0,d0
00008E36 101A                       		move.b	(a2)+,d0
00008E38 ED48                       		lsl.w	#6,d0
00008E3A 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008E40 2240                       		movea.l	d0,a1
00008E42 7000                       		moveq	#0,d0
00008E44 101B                       		move.b	(a3)+,d0
00008E46 5240                       		addq.w	#1,d0
00008E48 C0C5                       		mulu.w	d5,d0
00008E4A C0C4                       		mulu.w	d4,d0
00008E4C 4840                       		swap	d0
00008E4E D069 003C                  		add.w	$3C(a1),d0
00008E52 3340 000C                  		move.w	d0,obY(a1)
00008E56 51CA FFDC                  		dbf	d2,loc_765C
00008E5A 7000                       		moveq	#0,d0
00008E5C 1028 0028                  		move.b	obSubtype(a0),d0
00008E60 7600                       		moveq	#0,d3
00008E62 1628 003F                  		move.b	$3F(a0),d3
00008E66 5203                       		addq.b	#1,d3
00008E68 9600                       		sub.b	d0,d3
00008E6A 4403                       		neg.b	d3
00008E6C 6B00                       		bmi.s	locret_76CA
00008E6E 3403                       		move.w	d3,d2
00008E70 E94B                       		lsl.w	#4,d3
00008E72 47F4 3000                  		lea	(a4,d3.w),a3
00008E76 D6C2                       		adda.w	d2,a3
00008E78 5342                       		subq.w	#1,d2
00008E7A 6500                       		bcs.s	locret_76CA
00008E7C                            
00008E7C                            loc_76A4:
00008E7C 7000                       		moveq	#0,d0
00008E7E 101A                       		move.b	(a2)+,d0
00008E80 ED48                       		lsl.w	#6,d0
00008E82 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008E88 2240                       		movea.l	d0,a1
00008E8A 7000                       		moveq	#0,d0
00008E8C 1023                       		move.b	-(a3),d0
00008E8E 5240                       		addq.w	#1,d0
00008E90 C0C5                       		mulu.w	d5,d0
00008E92 C0C4                       		mulu.w	d4,d0
00008E94 4840                       		swap	d0
00008E96 D069 003C                  		add.w	$3C(a1),d0
00008E9A 3340 000C                  		move.w	d0,obY(a1)
00008E9E 51CA FFDC                  		dbf	d2,loc_76A4
00008EA2                            
00008EA2                            locret_76CA:
00008EA2 4E75                       		rts	
00008EA4                            ; End of function Bri_Bend
00008EA4                            
00008EA4                            ; ===========================================================================
00008EA4                            ; ---------------------------------------------------------------------------
00008EA4                            ; GHZ bridge-bending data
00008EA4                            ; (Defines how the bridge bends	when Sonic walks across	it)
00008EA4                            ; ---------------------------------------------------------------------------
00008EA4                            Obj11_BendData:	incbin	"misc\ghzbend1.bin"
00008FB4                            		even
00008FB4                            Obj11_BendData2:incbin	"misc\ghzbend2.bin"
000090B4                            		even
000090B4                            
000090B4                            ; ===========================================================================
000090B4                            
000090B4                            Bri_ChkDel:
000090D2 4E75                       		rts	
000090D4                            ; ===========================================================================
000090D4                            
000090D4                            @deletebridge:
000090D4 7400                       		moveq	#0,d2
000090D6 45E8 0028                  		lea	obSubtype(a0),a2 ; load bridge length
000090DA 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
000090DC 5302                       		subq.b	#1,d2		; subtract 1
000090DE 6500                       		bcs.s	@delparent
000090E0                            
000090E0                            	@loop:
000090E0 7000                       		moveq	#0,d0
000090E2 101A                       		move.b	(a2)+,d0
000090E4 ED48                       		lsl.w	#6,d0
000090E6 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000090EC 2240                       		movea.l	d0,a1
000090EE B048                       		cmp.w	a0,d0
000090F0 6700                       		beq.s	@skipdel
000090F2 6100 0000                  		bsr.w	DeleteChild
000090F6                            
000090F6                            	@skipdel:
000090F6 51CA FFE8                  		dbf	d2,@loop ; repeat d2 times (bridge length)
000090FA                            
000090FA                            @delparent:
000090FA 6100 0000                  		bsr.w	DeleteObject
000090FE 4E75                       		rts	
00009100                            ; ===========================================================================
00009100                            
00009100                            Bri_Delete:	; Routine 6, 8
00009100 6100 0000                  		bsr.w	DeleteObject
00009104 4E75                       		rts	
00009106                            ; ===========================================================================
00009106                            
00009106                            Bri_Display:	; Routine $A
00009106 6100 0000                  		bsr.w	DisplaySprite
0000910A 4E75                       		rts	
0000910A 4E75                       		rts	
0000910C                            Map_Bri:	include	"_maps\Bridge.asm"
0000910C                            ; ---------------------------------------------------------------------------
0000910C                            ; Sprite mappings - GHZ	bridge
0000910C                            ; ---------------------------------------------------------------------------
0000910C                            Map_Bri_internal:
0000910C 0000                       		dc.w M_Bri_Log-Map_Bri_internal
0000910E 0000                       		dc.w M_Bri_Stump-Map_Bri_internal
00009110 0000                       		dc.w M_Bri_Rope-Map_Bri_internal
00009112 01                         M_Bri_Log:	dc.b 1
00009113 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; log
00009118 02                         M_Bri_Stump:	dc.b 2
00009119 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0	; stump & rope
0000911E 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00009123 01                         M_Bri_Rope:	dc.b 1
00009124 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8	; rope only
0000912A 00                         		even
0000912A 00                         		even
0000912A                            
0000912A                            		include	"_incObj\15 Swinging Platforms (part 1).asm"
0000912A                            ; ---------------------------------------------------------------------------
0000912A                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
0000912A                            ;	    - spiked ball on a chain (SBZ)
0000912A                            ; ---------------------------------------------------------------------------
0000912A                            
0000912A                            SwingingPlatform:
0000912A 7000                       		moveq	#0,d0
0000912C 1028 0024                  		move.b	obRoutine(a0),d0
00009130 323B 0000                  		move.w	Swing_Index(pc,d0.w),d1
00009134 4EFB 1000                  		jmp	Swing_Index(pc,d1.w)
00009138                            ; ===========================================================================
00009138 0000 0000                  Swing_Index:	dc.w Swing_Main-Swing_Index, Swing_SetSolid-Swing_Index
0000913C 0000 0000                  		dc.w Swing_Action2-Swing_Index,	Swing_Delete-Swing_Index
00009140 0000 0000                  		dc.w Swing_Delete-Swing_Index, Swing_Display-Swing_Index
00009144 0000                       		dc.w Swing_Action-Swing_Index
00009146                            
00009146 =0000003A                  swing_origX:	equ $3A		; original x-axis position
00009146 =00000038                  swing_origY:	equ $38		; original y-axis position
00009146                            ; ===========================================================================
00009146                            
00009146                            Swing_Main:	; Routine 0
00009146 5428 0024                  		addq.b	#2,obRoutine(a0)
0000914A 217C 0000 0000 0004        		move.l	#Map_Swing_GHZ,obMap(a0) ; GHZ and MZ specific code
00009152 317C 4380 0002             		move.w	#$4380,obGfx(a0)
00009158 117C 0004 0001             		move.b	#4,obRender(a0)
0000915E 317C 0180 0018             		move.w	#$180,obPriority(a0)
00009164 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000916A 117C 0008 0016             		move.b	#8,obHeight(a0)
00009170 3168 000C 0038             		move.w	obY(a0),swing_origY(a0)
00009176 3168 0008 003A             		move.w	obX(a0),swing_origX(a0)
0000917C 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009182 6600                       		bne.s	@notSLZ
00009184                            
00009184 217C 0000 0000 0004        		move.l	#Map_Swing_SLZ,obMap(a0) ; SLZ specific code
0000918C 317C 43DC 0002             		move.w	#$43DC,obGfx(a0)
00009192 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009198 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000919E 117C 0099 0020             		move.b	#$99,obColType(a0)
000091A4                            
000091A4                            	@notSLZ:
000091A4 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
000091AA 6600                       		bne.s	@length
000091AC                            
000091AC 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0) ; SBZ specific code
000091B4 317C 0391 0002             		move.w	#$391,obGfx(a0)
000091BA 117C 0018 0014             		move.b	#$18,obActWid(a0)
000091C0 117C 0018 0016             		move.b	#$18,obHeight(a0)
000091C6 117C 0086 0020             		move.b	#$86,obColType(a0)
000091CC 117C 000C 0024             		move.b	#$C,obRoutine(a0) ; goto Swing_Action next
000091D2                            
000091D2                            @length:
000091D2 1810                       		move.b	0(a0),d4
000091D4 7200                       		moveq	#0,d1
000091D6 45E8 0028                  		lea	obSubtype(a0),a2 ; move chain length to a2
000091DA 1212                       		move.b	(a2),d1		; move a2 to d1
000091DC 3F01                       		move.w	d1,-(sp)
000091DE 0241 000F                  		andi.w	#$F,d1
000091E2 14FC 0000                  		move.b	#0,(a2)+
000091E6 3601                       		move.w	d1,d3
000091E8 E94B                       		lsl.w	#4,d3
000091EA 5003                       		addq.b	#8,d3
000091EC 1143 003C                  		move.b	d3,$3C(a0)
000091F0 5103                       		subq.b	#8,d3
000091F2 4A28 001A                  		tst.b	obFrame(a0)
000091F6 6700                       		beq.s	@makechain
000091F8 5003                       		addq.b	#8,d3
000091FA 5341                       		subq.w	#1,d1
000091FC                            
000091FC                            @makechain:
000091FC 6100 0000                  		bsr.w	FindFreeObj
00009200 6600                       		bne.s	@fail
00009202 5228 0028                  		addq.b	#1,obSubtype(a0)
00009206 3A09                       		move.w	a1,d5
00009208 0445 D000                  		subi.w	#$D000,d5
0000920C EC4D                       		lsr.w	#6,d5
0000920E 0245 007F                  		andi.w	#$7F,d5
00009212 14C5                       		move.b	d5,(a2)+
00009214 137C 000A 0024             		move.b	#$A,obRoutine(a1) ; goto Swing_Display next
0000921A 1284                       		move.b	d4,0(a1)	; load swinging	object
0000921C 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00009222 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009228 08A9 0006 0002             		bclr	#6,obGfx(a1)
0000922E 137C 0004 0001             		move.b	#4,obRender(a1)
00009234 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000923A 137C 0008 0014             		move.b	#8,obActWid(a1)
00009240 137C 0001 001A             		move.b	#1,obFrame(a1)
00009246 1343 003C                  		move.b	d3,$3C(a1)
0000924A 0403 0010                  		subi.b	#$10,d3
0000924E 6400                       		bcc.s	@notanchor
00009250 137C 0002 001A             		move.b	#2,obFrame(a1)
00009256 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000925C 08E9 0006 0002             		bset	#6,obGfx(a1)
00009262                            
00009262                            	@notanchor:
00009262 51C9 FF98                  		dbf	d1,@makechain ; repeat d1 times (chain length)
00009266                            
00009266                            	@fail:
00009266 3A08                       		move.w	a0,d5
00009268 0445 D000                  		subi.w	#$D000,d5
0000926C EC4D                       		lsr.w	#6,d5
0000926E 0245 007F                  		andi.w	#$7F,d5
00009272 14C5                       		move.b	d5,(a2)+
00009274 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0000927A 317C FE00 003E             		move.w	#-$200,$3E(a0)
00009280 321F                       		move.w	(sp)+,d1
00009282 0801 0004                  		btst	#4,d1		; is object type $1X ?
00009286 6700                       		beq.s	@not1X	; if not, branch
00009288 217C 0000 0000 0004        		move.l	#Map_GBall,obMap(a0) ; use GHZ ball mappings
00009290 317C 43AA 0002             		move.w	#$43AA,obGfx(a0)
00009296 117C 0001 001A             		move.b	#1,obFrame(a0)
0000929C 317C 0100 0018             		move.w	#$100,obPriority(a0)
000092A2 117C 0081 0020             		move.b	#$81,obColType(a0) ; make object hurt when touched
000092A8                            
000092A8                            	@not1X:
000092A8 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; is zone SBZ?
000092AE 6700                       		beq.s	Swing_Action	; if yes, branch
000092B0                            
000092B0                            Swing_SetSolid:	; Routine 2
000092B0 7200                       		moveq	#0,d1
000092B2 1228 0014                  		move.b	obActWid(a0),d1
000092B6 7600                       		moveq	#0,d3
000092B8 1628 0016                  		move.b	obHeight(a0),d3
000092BC 6100 FA76                  		bsr.w	Swing_Solid
000092C0                            
000092C0                            Swing_Action:	; Routine $C
000092C0 6100 0000                  		bsr.w	Swing_Move
000092C4 6100 0000                  		bsr.w	DisplaySprite
000092C8 6000 0000                  		bra.w	Swing_ChkDel
000092CC                            ; ===========================================================================
000092CC                            
000092CC                            Swing_Action2:	; Routine 4
000092CC 7200                       		moveq	#0,d1
000092CE 1228 0014                  		move.b	obActWid(a0),d1
000092D2 6100 FAC4                  		bsr.w	ExitPlatform
000092D6 3F28 0008                  		move.w	obX(a0),-(sp)
000092DA 6100 0000                  		bsr.w	Swing_Move
000092DE 341F                       		move.w	(sp)+,d2
000092E0 7600                       		moveq	#0,d3
000092E2 1628 0016                  		move.b	obHeight(a0),d3
000092E6 5203                       		addq.b	#1,d3
000092E8 6100 0000                  		bsr.w	MvSonicOnPtfm
000092EC 6100 0000                  		bsr.w	DisplaySprite
000092F0 6000 0000                  		bra.w	Swing_ChkDel
000092F4                            
000092F4 4E75                       		rts
000092F4 4E75                       		rts
000092F6                            
000092F6                            ; ---------------------------------------------------------------------------
000092F6                            ; Subroutine to	change Sonic's position with a platform
000092F6                            ; ---------------------------------------------------------------------------
000092F6                            
000092F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000092F6                            
000092F6                            
000092F6                            MvSonicOnPtfm:
000092F6 43F8 D000                  		lea	(v_player).w,a1
000092FA 3028 000C                  		move.w	obY(a0),d0
000092FE 9043                       		sub.w	d3,d0
00009300 6000                       		bra.s	MvSonic2
00009302                            ; End of function MvSonicOnPtfm
00009302                            
00009302                            ; ---------------------------------------------------------------------------
00009302                            ; Subroutine to	change Sonic's position with a platform
00009302                            ; ---------------------------------------------------------------------------
00009302                            
00009302                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009302                            
00009302                            
00009302                            MvSonicOnPtfm2:
00009302 43F8 D000                  		lea	(v_player).w,a1
00009306 3028 000C                  		move.w	obY(a0),d0
0000930A 0440 0009                  		subi.w	#9,d0
0000930E                            
0000930E                            MvSonic2:
0000930E 4A38 F7C8                  		tst.b	(f_lockmulti).w
00009312 6B00                       		bmi.s	locret_7B62
00009314 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000931A 6400                       		bhs.s	locret_7B62
0000931C 4A78 FE08                  		tst.w	(v_debuguse).w
00009320 6600                       		bne.s	locret_7B62
00009322 7200                       		moveq	#0,d1
00009324 1229 0016                  		move.b	obHeight(a1),d1
00009328 9041                       		sub.w	d1,d0
0000932A 3340 000C                  		move.w	d0,obY(a1)
0000932E 9468 0008                  		sub.w	obX(a0),d2
00009332 9569 0008                  		sub.w	d2,obX(a1)
00009336                            
00009336                            locret_7B62:
00009336 4E75                       		rts	
00009338                            ; End of function MvSonicOnPtfm2
00009338                            
00009338                            		include	"_incObj\15 Swinging Platforms (part 2).asm"
00009338                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009338                            
00009338                            
00009338                            Swing_Move:
00009338 1038 FE78                  		move.b	(v_oscillate+$1A).w,d0
0000933C 323C 0080                  		move.w	#$80,d1
00009340 0828 0000 0022             		btst	#0,obStatus(a0)
00009346 6700                       		beq.s	loc_7B78
00009348 4440                       		neg.w	d0
0000934A D041                       		add.w	d1,d0
0000934C                            
0000934C                            loc_7B78:
0000934C 6000                       		bra.s	Swing_Move2
0000934E                            ; End of function Swing_Move
0000934E                            
0000934E                            
0000934E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000934E                            
0000934E                            
0000934E                            Obj48_Move:
0000934E 4A28 003D                  		tst.b	$3D(a0)
00009352 6600                       		bne.s	loc_7B9C
00009354 3028 003E                  		move.w	$3E(a0),d0
00009358 5040                       		addq.w	#8,d0
0000935A 3140 003E                  		move.w	d0,$3E(a0)
0000935E D168 0026                  		add.w	d0,obAngle(a0)
00009362 0C40 0200                  		cmpi.w	#$200,d0
00009366 6600                       		bne.s	loc_7BB6
00009368 117C 0001 003D             		move.b	#1,$3D(a0)
0000936E 6000                       		bra.s	loc_7BB6
00009370                            ; ===========================================================================
00009370                            
00009370                            loc_7B9C:
00009370 3028 003E                  		move.w	$3E(a0),d0
00009374 5140                       		subq.w	#8,d0
00009376 3140 003E                  		move.w	d0,$3E(a0)
0000937A D168 0026                  		add.w	d0,obAngle(a0)
0000937E 0C40 FE00                  		cmpi.w	#-$200,d0
00009382 6600                       		bne.s	loc_7BB6
00009384 117C 0000 003D             		move.b	#0,$3D(a0)
0000938A                            
0000938A                            loc_7BB6:
0000938A 1028 0026                  		move.b	obAngle(a0),d0
0000938E                            ; End of function Obj48_Move
0000938E                            
0000938E                            
0000938E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000938E                            
0000938E                            
0000938E                            Swing_Move2:
0000938E 6100 A93A                  		bsr.w	CalcSine
00009392 3428 0038                  		move.w	$38(a0),d2
00009396 3628 003A                  		move.w	$3A(a0),d3
0000939A 45E8 0028                  		lea	obSubtype(a0),a2
0000939E 7C00                       		moveq	#0,d6
000093A0 1C1A                       		move.b	(a2)+,d6
000093A2                            
000093A2                            loc_7BCE:
000093A2 7800                       		moveq	#0,d4
000093A4 181A                       		move.b	(a2)+,d4
000093A6 ED4C                       		lsl.w	#6,d4
000093A8 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
000093AE 2244                       		movea.l	d4,a1
000093B0 7800                       		moveq	#0,d4
000093B2 1829 003C                  		move.b	$3C(a1),d4
000093B6 2A04                       		move.l	d4,d5
000093B8 C9C0                       		muls.w	d0,d4
000093BA E084                       		asr.l	#8,d4
000093BC CBC1                       		muls.w	d1,d5
000093BE E085                       		asr.l	#8,d5
000093C0 D842                       		add.w	d2,d4
000093C2 DA43                       		add.w	d3,d5
000093C4 3344 000C                  		move.w	d4,obY(a1)
000093C8 3345 0008                  		move.w	d5,obX(a1)
000093CC 51CE FFD4                  		dbf	d6,loc_7BCE
000093D0 4E75                       		rts	
000093D2                            ; End of function Swing_Move2
000093D2                            
000093D2                            ; ===========================================================================
000093D2                            
000093D2                            Swing_ChkDel:
000093F0 4E75                       		rts	
000093F2                            ; ===========================================================================
000093F2                            
000093F2                            Swing_DelAll:
000093F2 7400                       		moveq	#0,d2
000093F4 45E8 0028                  		lea	obSubtype(a0),a2
000093F8 141A                       		move.b	(a2)+,d2
000093FA                            
000093FA                            Swing_DelLoop:
000093FA 7000                       		moveq	#0,d0
000093FC 101A                       		move.b	(a2)+,d0
000093FE ED48                       		lsl.w	#6,d0
00009400 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009406 2240                       		movea.l	d0,a1
00009408 6100 0000                  		bsr.w	DeleteChild
0000940C 51CA FFEC                  		dbf	d2,Swing_DelLoop ; repeat for length of	chain
00009410 4E75                       		rts	
00009412                            ; ===========================================================================
00009412                            
00009412                            Swing_Delete:	; Routine 6, 8
00009412 6100 0000                  		bsr.w	DeleteObject
00009416 4E75                       		rts	
00009418                            ; ===========================================================================
00009418                            
00009418                            Swing_Display:	; Routine $A
00009418 6000 0000                  		bra.w	DisplaySprite
00009418 6000 0000                  		bra.w	DisplaySprite
0000941C                            Map_Swing_GHZ:	include	"_maps\Swinging Platforms (GHZ).asm"
0000941C                            ; ---------------------------------------------------------------------------
0000941C                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000941C                            ; ---------------------------------------------------------------------------
0000941C                            Map_Swing_GHZ_internal:
0000941C 0000                       		dc.w @block-Map_Swing_GHZ_internal
0000941E 0000                       		dc.w @chain-Map_Swing_GHZ_internal
00009420 0000                       		dc.w @anchor-Map_Swing_GHZ_internal
00009422 02                         @block:		dc.b 2
00009423 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00009428 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
0000942D 01                         @chain:		dc.b 1
0000942E F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00009433 01                         @anchor:	dc.b 1
00009434 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000943A 00                         		even
0000943A 00                         		even
0000943A                            Map_Swing_SLZ:	include	"_maps\Swinging Platforms (SLZ).asm"
0000943A                            ; ---------------------------------------------------------------------------
0000943A                            ; Sprite mappings - SLZ	swinging platforms
0000943A                            ; ---------------------------------------------------------------------------
0000943A                            Map_Swing_SLZ_internal:
0000943A 0000                       		dc.w @block-Map_Swing_SLZ_internal
0000943C 0000                       		dc.w @chain-Map_Swing_SLZ_internal
0000943E 0000                       		dc.w @anchor-Map_Swing_SLZ_internal
00009440 08                         @block:		dc.b 8
00009441 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00009446 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000944B F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00009450 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00009455 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
0000945A 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
0000945F 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00009464 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00009469 01                         @chain:		dc.b 1
0000946A F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
0000946F 01                         @anchor:	dc.b 1
00009470 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00009476 00                         		even
00009476 00                         		even
00009476                            		include	"_incObj\17 Spiked Pole Helix.asm"
00009476                            ; ---------------------------------------------------------------------------
00009476                            ; Object 17 - helix of spikes on a pole	(GHZ)
00009476                            ; ---------------------------------------------------------------------------
00009476                            
00009476                            Helix:
00009476 7000                       		moveq	#0,d0
00009478 1028 0024                  		move.b	obRoutine(a0),d0
0000947C 323B 0000                  		move.w	Hel_Index(pc,d0.w),d1
00009480 4EFB 1000                  		jmp	Hel_Index(pc,d1.w)
00009484                            ; ===========================================================================
00009484 0000                       Hel_Index:	dc.w Hel_Main-Hel_Index
00009486 0000                       		dc.w Hel_Action-Hel_Index
00009488 0000                       		dc.w Hel_Action-Hel_Index
0000948A 0000                       		dc.w Hel_Delete-Hel_Index
0000948C 0000                       		dc.w Hel_Display-Hel_Index
0000948E                            
0000948E =0000003E                  hel_frame:	equ $3E		; start frame (different for each spike)
0000948E                            
0000948E                            ;		$29-38 are used for child object addresses
0000948E                            ; ===========================================================================
0000948E                            
0000948E                            Hel_Main:	; Routine 0
0000948E 5428 0024                  		addq.b	#2,obRoutine(a0)
00009492 217C 0000 0000 0004        		move.l	#Map_Hel,obMap(a0)
0000949A 317C 4398 0002             		move.w	#$4398,obGfx(a0)
000094A0 117C 0007 0022             		move.b	#7,obStatus(a0)
000094A6 117C 0004 0001             		move.b	#4,obRender(a0)
000094AC 317C 0180 0018             		move.w	#$180,obPriority(a0)
000094B2 117C 0008 0014             		move.b	#8,obActWid(a0)
000094B8 3428 000C                  		move.w	obY(a0),d2
000094BC 3628 0008                  		move.w	obX(a0),d3
000094C0 1810                       		move.b	0(a0),d4
000094C2 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
000094C6 7200                       		moveq	#0,d1
000094C8 1212                       		move.b	(a2),d1		; move helix length to d1
000094CA 14FC 0000                  		move.b	#0,(a2)+	; clear subtype
000094CE 3001                       		move.w	d1,d0
000094D0 E248                       		lsr.w	#1,d0
000094D2 E948                       		lsl.w	#4,d0
000094D4 9640                       		sub.w	d0,d3		; d3 is x-axis position of leftmost spike
000094D6 5501                       		subq.b	#2,d1
000094D8 6500                       		bcs.s	Hel_Action	; skip to action if length is only 1
000094DA 7C00                       		moveq	#0,d6
000094DC                            
000094DC                            Hel_Build:
000094DC 6100 0000                  		bsr.w	FindFreeObj
000094E0 6600                       		bne.s	Hel_Action
000094E2 5228 0028                  		addq.b	#1,obSubtype(a0)
000094E6 3A09                       		move.w	a1,d5
000094E8 0445 D000                  		subi.w	#$D000,d5
000094EC EC4D                       		lsr.w	#6,d5
000094EE 0245 007F                  		andi.w	#$7F,d5
000094F2 14C5                       		move.b	d5,(a2)+	; copy child address to parent RAM
000094F4 137C 0008 0024             		move.b	#8,obRoutine(a1)
000094FA 1284                       		move.b	d4,0(a1)
000094FC 3342 000C                  		move.w	d2,ObY(a1)
00009500 3343 0008                  		move.w	d3,obX(a1)
00009504 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
0000950A 337C 4398 0002             		move.w	#$4398,obGfx(a1)
00009510 137C 0004 0001             		move.b	#4,obRender(a1)
00009516 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000951C 137C 0008 0014             		move.b	#8,obActWid(a1)
00009522 1346 003E                  		move.b	d6,hel_frame(a1)
00009526 5206                       		addq.b	#1,d6
00009528 0206 0007                  		andi.b	#7,d6
0000952C 0643 0010                  		addi.w	#$10,d3
00009530 B668 0008                  		cmp.w	obX(a0),d3	; is this spike in the centre?
00009534 6600                       		bne.s	Hel_NotCentre	; if not, branch
00009536                            
00009536 1146 003E                  		move.b	d6,hel_frame(a0) ; set parent spike frame
0000953A 5206                       		addq.b	#1,d6
0000953C 0206 0007                  		andi.b	#7,d6
00009540 0643 0010                  		addi.w	#$10,d3		; skip to next spike
00009544 5228 0028                  		addq.b	#1,obSubtype(a0)
00009548                            
00009548                            	Hel_NotCentre:
00009548 51C9 FF92                  		dbf	d1,Hel_Build ; repeat d1 times (helix length)
0000954C                            
0000954C                            Hel_Action:	; Routine 2, 4
0000954C 6100 0000                  		bsr.w	Hel_RotateSpikes
00009550 6100 0000                  		bsr.w	DisplaySprite
00009554 6000 0000                  		bra.w	Hel_ChkDel
00009558                            
00009558                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009558                            
00009558                            
00009558                            Hel_RotateSpikes:
00009558 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0000955C 117C 0000 0020             		move.b	#0,obColType(a0) ; make object harmless
00009562 D028 003E                  		add.b	hel_frame(a0),d0
00009566 0200 0007                  		andi.b	#7,d0
0000956A 1140 001A                  		move.b	d0,obFrame(a0)	; change current frame
0000956E 6600                       		bne.s	locret_7DA6
00009570 117C 0084 0020             		move.b	#$84,obColType(a0) ; make object harmful
00009576                            
00009576                            locret_7DA6:
00009576 4E75                       		rts	
00009578                            ; End of function Hel_RotateSpikes
00009578                            
00009578                            ; ===========================================================================
00009578                            
00009578                            Hel_ChkDel:
00009596 4E75                       		rts	
00009598                            ; ===========================================================================
00009598                            
00009598                            Hel_DelAll:
00009598 7400                       		moveq	#0,d2
0000959A 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
0000959E 141A                       		move.b	(a2)+,d2	; move helix length to d2
000095A0 5502                       		subq.b	#2,d2
000095A2 6500                       		bcs.s	Hel_Delete
000095A4                            
000095A4                            	Hel_DelLoop:
000095A4 7000                       		moveq	#0,d0
000095A6 101A                       		move.b	(a2)+,d0
000095A8 ED48                       		lsl.w	#6,d0
000095AA 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000095B0 2240                       		movea.l	d0,a1		; get child address
000095B2 6100 0000                  		bsr.w	DeleteChild	; delete object
000095B6 51CA FFEC                  		dbf	d2,Hel_DelLoop ; repeat d2 times (helix length)
000095BA                            
000095BA                            Hel_Delete:	; Routine 6
000095BA 6100 0000                  		bsr.w	DeleteObject
000095BE 4E75                       		rts	
000095C0                            ; ===========================================================================
000095C0                            
000095C0                            Hel_Display:	; Routine 8
000095C0 6100 FF96                  		bsr.w	Hel_RotateSpikes
000095C4 6000 0000                  		bra.w	DisplaySprite
000095C4 6000 0000                  		bra.w	DisplaySprite
000095C8                            Map_Hel:	include	"_maps\Spiked Pole Helix.asm"
000095C8                            ; ---------------------------------------------------------------------------
000095C8                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000095C8                            ; ---------------------------------------------------------------------------
000095C8                            Map_Hel_internal:
000095C8 0000                       		dc.w byte_7E08-Map_Hel_internal
000095CA 0000                       		dc.w byte_7E0E-Map_Hel_internal
000095CC 0000                       		dc.w byte_7E14-Map_Hel_internal
000095CE 0000                       		dc.w byte_7E1A-Map_Hel_internal
000095D0 0000                       		dc.w byte_7E20-Map_Hel_internal
000095D2 0000                       		dc.w byte_7E26-Map_Hel_internal
000095D4 0000                       		dc.w byte_7E2E-Map_Hel_internal
000095D6 0000                       		dc.w byte_7E2C-Map_Hel_internal
000095D8 01                         byte_7E08:	dc.b 1
000095D9 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC	; points straight up (harmful)
000095DE 01                         byte_7E0E:	dc.b 1
000095DF F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8	; 45 degree
000095E4 01                         byte_7E14:	dc.b 1
000095E5 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8	; 90 degree
000095EA 01                         byte_7E1A:	dc.b 1
000095EB FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8	; 45 degree
000095F0 01                         byte_7E20:	dc.b 1
000095F1 0001 000E FC               		dc.b 0,	1, 0, $E, $FC	; straight down
000095F6 01                         byte_7E26:	dc.b 1
000095F7 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD	; 45 degree
000095FC 01                         byte_7E2C:	dc.b 1
000095FD F4                         		dc.b $F4
000095FE                            byte_7E2E:	; reads the 0 below	; not visible
000095FE 0000 11FD                  		dc.b 0, 0,	$11, $FD ; 45 degree
00009602                            		even
00009602                            		even
00009602                            		include	"_incObj\18 Platforms.asm"
00009602                            ; ---------------------------------------------------------------------------
00009602                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00009602                            ; ---------------------------------------------------------------------------
00009602                            
00009602                            BasicPlatform:
00009602 7000                       		moveq	#0,d0
00009604 1028 0024                  		move.b	obRoutine(a0),d0
00009608 323B 0000                  		move.w	Plat_Index(pc,d0.w),d1
0000960C 4EFB 1000                  		jmp	Plat_Index(pc,d1.w)
00009610                            ; ===========================================================================
00009610 0000                       Plat_Index:	dc.w Plat_Main-Plat_Index
00009612 0000                       		dc.w Plat_Solid-Plat_Index
00009614 0000                       		dc.w Plat_Action2-Plat_Index
00009616 0000                       		dc.w Plat_Delete-Plat_Index
00009618 0000                       		dc.w Plat_Action-Plat_Index
0000961A                            ; ===========================================================================
0000961A                            
0000961A                            Plat_Main:	; Routine 0
0000961A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000961E 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009624 217C 0000 0000 0004        		move.l	#Map_Plat_GHZ,obMap(a0)
0000962C 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009632 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SYZ
00009638 6600                       		bne.s	@notSYZ
0000963A                            
0000963A 217C 0000 0000 0004        		move.l	#Map_Plat_SYZ,obMap(a0) ; SYZ specific code
00009642 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009648                            
00009648                            	@notSYZ:
00009648 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
0000964E 6600                       		bne.s	@notSLZ
00009650 217C 0000 0000 0004        		move.l	#Map_Plat_SLZ,obMap(a0) ; SLZ specific code
00009658 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000965E 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009664 117C 0003 0028             		move.b	#3,obSubtype(a0)
0000966A                            
0000966A                            	@notSLZ:
0000966A 117C 0004 0001             		move.b	#4,obRender(a0)
00009670 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009676 3168 000C 002C             		move.w	obY(a0),$2C(a0)
0000967C 3168 000C 0034             		move.w	obY(a0),$34(a0)
00009682 3168 0008 0032             		move.w	obX(a0),$32(a0)
00009688 317C 0080 0026             		move.w	#$80,obAngle(a0)
0000968E 7200                       		moveq	#0,d1
00009690 1028 0028                  		move.b	obSubtype(a0),d0
00009694 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00009698 6600                       		bne.s	@setframe	; if not, branch
0000969A 5201                       		addq.b	#1,d1		; use frame #1
0000969C 117C 0020 0014             		move.b	#$20,obActWid(a0) ; set width
000096A2                            
000096A2                            	@setframe:
000096A2 1141 001A                  		move.b	d1,obFrame(a0)	; set frame to d1
000096A6                            
000096A6                            Plat_Solid:	; Routine 2
000096A6 4A28 0038                  		tst.b	$38(a0)
000096AA 6700                       		beq.s	loc_7EE0
000096AC 5928 0038                  		subq.b	#4,$38(a0)
000096B0                            
000096B0                            	loc_7EE0:
000096B0 7200                       		moveq	#0,d1
000096B2 1228 0014                  		move.b	obActWid(a0),d1
000096B6 6100 F56C                  		bsr.w	PlatformObject
000096BA                            
000096BA                            Plat_Action:	; Routine 8
000096BA 6100 0000                  		bsr.w	Plat_Move
000096BE 6100 0000                  		bsr.w	Plat_Nudge
000096C2 6100 0000                  		bsr.w	DisplaySprite
000096C6 6000 0000                  		bra.w	Plat_ChkDel
000096CA                            ; ===========================================================================
000096CA                            
000096CA                            Plat_Action2:	; Routine 4
000096CA 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
000096D0 6700                       		beq.s	loc_7F06
000096D2 5828 0038                  		addq.b	#4,$38(a0)
000096D6                            
000096D6                            	loc_7F06:
000096D6 7200                       		moveq	#0,d1
000096D8 1228 0014                  		move.b	obActWid(a0),d1
000096DC 6100 F6BA                  		bsr.w	ExitPlatform
000096E0 3F28 0008                  		move.w	obX(a0),-(sp)
000096E4 6100 0000                  		bsr.w	Plat_Move
000096E8 6100 0000                  		bsr.w	Plat_Nudge
000096EC 341F                       		move.w	(sp)+,d2
000096EE 6100 FC12                  		bsr.w	MvSonicOnPtfm2
000096F2 6100 0000                  		bsr.w	DisplaySprite
000096F6 6000 0000                  		bra.w	Plat_ChkDel
000096FA                            
000096FA 4E75                       		rts
000096FC                            
000096FC                            ; ---------------------------------------------------------------------------
000096FC                            ; Subroutine to	move platform slightly when you	stand on it
000096FC                            ; ---------------------------------------------------------------------------
000096FC                            
000096FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000096FC                            
000096FC                            
000096FC                            Plat_Nudge:
000096FC 1028 0038                  		move.b	$38(a0),d0
00009700 6100 A5C8                  		bsr.w	CalcSine
00009704 323C 0400                  		move.w	#$400,d1
00009708 C1C1                       		muls.w	d1,d0
0000970A 4840                       		swap	d0
0000970C D068 002C                  		add.w	$2C(a0),d0
00009710 3140 000C                  		move.w	d0,obY(a0)
00009714 4E75                       		rts	
00009716                            ; End of function Plat_Nudge
00009716                            
00009716                            ; ---------------------------------------------------------------------------
00009716                            ; Subroutine to	move platforms
00009716                            ; ---------------------------------------------------------------------------
00009716                            
00009716                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009716                            
00009716                            
00009716                            Plat_Move:
00009716 7000                       		moveq	#0,d0
00009718 1028 0028                  		move.b	obSubtype(a0),d0
0000971C 0240 000F                  		andi.w	#$F,d0
00009720 D040                       		add.w	d0,d0
00009722 323B 0000                  		move.w	@index(pc,d0.w),d1
00009726 4EFB 1000                  		jmp	@index(pc,d1.w)
0000972A                            ; End of function Plat_Move
0000972A                            
0000972A                            ; ===========================================================================
0000972A 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
0000972E 0000 0000                  		dc.w @type02-@index, @type03-@index
00009732 0000 0000                  		dc.w @type04-@index, @type05-@index
00009736 0000 0000                  		dc.w @type06-@index, @type07-@index
0000973A 0000 0000                  		dc.w @type08-@index, @type00-@index
0000973E 0000 0000                  		dc.w @type0A-@index, @type0B-@index
00009742 0000                       		dc.w @type0C-@index
00009744                            ; ===========================================================================
00009744                            
00009744                            @type00:
00009744 4E75                       		rts			; platform 00 doesn't move
00009746                            ; ===========================================================================
00009746                            
00009746                            @type05:
00009746 3028 0032                  		move.w	$32(a0),d0
0000974A 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
0000974E 4401                       		neg.b	d1		; reverse platform-motion
00009750 0601 0040                  		addi.b	#$40,d1
00009754 6000                       		bra.s	@type01_move
00009756                            ; ===========================================================================
00009756                            
00009756                            @type01:
00009756 3028 0032                  		move.w	$32(a0),d0
0000975A 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
0000975E 0401 0040                  		subi.b	#$40,d1
00009762                            
00009762                            	@type01_move:
00009762 4881                       		ext.w	d1
00009764 D041                       		add.w	d1,d0
00009766 3140 0008                  		move.w	d0,obX(a0)	; change position on x-axis
0000976A 6000 0000                  		bra.w	@chgmotion
0000976E                            ; ===========================================================================
0000976E                            
0000976E                            @type0C:
0000976E 3028 0034                  		move.w	$34(a0),d0
00009772 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00009776 4401                       		neg.b	d1		; reverse platform-motion
00009778 0601 0030                  		addi.b	#$30,d1
0000977C 6000                       		bra.s	@type02_move
0000977E                            ; ===========================================================================
0000977E                            
0000977E                            @type0B:
0000977E 3028 0034                  		move.w	$34(a0),d0
00009782 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00009786 0401 0030                  		subi.b	#$30,d1
0000978A 6000                       		bra.s	@type02_move
0000978C                            ; ===========================================================================
0000978C                            
0000978C                            @type06:
0000978C 3028 0034                  		move.w	$34(a0),d0
00009790 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009794 4401                       		neg.b	d1		; reverse platform-motion
00009796 0601 0040                  		addi.b	#$40,d1
0000979A 6000                       		bra.s	@type02_move
0000979C                            ; ===========================================================================
0000979C                            
0000979C                            @type02:
0000979C 3028 0034                  		move.w	$34(a0),d0
000097A0 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
000097A4 0401 0040                  		subi.b	#$40,d1
000097A8                            
000097A8                            	@type02_move:
000097A8 4881                       		ext.w	d1
000097AA D041                       		add.w	d1,d0
000097AC 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000097B0 6000 0000                  		bra.w	@chgmotion
000097B4                            ; ===========================================================================
000097B4                            
000097B4                            @type03:
000097B4 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000097B8 6600                       		bne.s	@type03_wait	; if yes, branch
000097BA 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the platform?
000097C0 6700                       		beq.s	@type03_nomove	; if not, branch
000097C2 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
000097C8                            
000097C8                            	@type03_nomove:
000097C8 4E75                       		rts	
000097CA                            
000097CA                            	@type03_wait:
000097CA 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000097CE 66F8                       		bne.s	@type03_nomove	; if time is > 0, branch
000097D0 317C 0020 003A             		move.w	#32,$3A(a0)
000097D6 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 04 (falling)
000097DA 4E75                       		rts	
000097DC                            ; ===========================================================================
000097DC                            
000097DC                            @type04:
000097DC 4A68 003A                  		tst.w	$3A(a0)
000097E0 6700                       		beq.s	@loc_8048
000097E2 5368 003A                  		subq.w	#1,$3A(a0)
000097E6 6600                       		bne.s	@loc_8048
000097E8 0828 0003 0022             		btst	#3,obStatus(a0)
000097EE 6700                       		beq.s	@loc_8042
000097F0 08E9 0001 0022             		bset	#1,obStatus(a1)
000097F6 08A9 0003 0022             		bclr	#3,obStatus(a1)
000097FC 137C 0002 0024             		move.b	#2,obRoutine(a1)
00009802 08A8 0003 0022             		bclr	#3,obStatus(a0)
00009808 4228 0025                  		clr.b	$25(a0)
0000980C 3368 0012 0012             		move.w	obVelY(a0),obVelY(a1)
00009812                            
00009812                            	@loc_8042:
00009812 117C 0008 0024             		move.b	#8,obRoutine(a0)
00009818                            
00009818                            	@loc_8048:
00009818 2628 002C                  		move.l	$2C(a0),d3
0000981C 3028 0012                  		move.w	obVelY(a0),d0
00009820 48C0                       		ext.l	d0
00009822 E180                       		asl.l	#8,d0
00009824 D680                       		add.l	d0,d3
00009826 2143 002C                  		move.l	d3,$2C(a0)
0000982A 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00009830 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00009834 0640 00E0                  		addi.w	#$E0,d0
00009838 B068 002C                  		cmp.w	$2C(a0),d0
0000983C 6400                       		bcc.s	@locret_8074
0000983E 117C 0006 0024             		move.b	#6,obRoutine(a0)
00009844                            
00009844                            	@locret_8074:
00009844 4E75                       		rts	
00009846                            ; ===========================================================================
00009846                            
00009846                            @type07:
00009846 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000984A 6600                       		bne.s	@type07_wait	; if yes, branch
0000984C 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
00009850 7000                       		moveq	#0,d0
00009852 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type ($x7) to d0
00009856 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00009858 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
0000985C 6700                       		beq.s	@type07_nomove	; if not, branch
0000985E 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00009864                            
00009864                            	@type07_nomove:
00009864 4E75                       		rts	
00009866                            
00009866                            	@type07_wait:
00009866 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0000986A 66F8                       		bne.s	@type07_nomove	; if time is > 0, branch
0000986C 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 08
00009870 4E75                       		rts	
00009872                            ; ===========================================================================
00009872                            
00009872                            @type08:
00009872 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00009876 3028 0034                  		move.w	$34(a0),d0
0000987A 0440 0200                  		subi.w	#$200,d0
0000987E B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00009882 6600                       		bne.s	@type08_nostop	; if not, branch
00009884 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (stop moving)
00009888                            
00009888                            	@type08_nostop:
00009888 4E75                       		rts	
0000988A                            ; ===========================================================================
0000988A                            
0000988A                            @type0A:
0000988A 3028 0034                  		move.w	$34(a0),d0
0000988E 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009892 0401 0040                  		subi.b	#$40,d1
00009896 4881                       		ext.w	d1
00009898 E241                       		asr.w	#1,d1
0000989A D041                       		add.w	d1,d0
0000989C 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000098A0                            
000098A0                            @chgmotion:
000098A0 1178 FE78 0026             		move.b	(v_oscillate+$1A).w,$26(a0) ; update platform-movement variable
000098A6 4E75                       		rts	
000098A8                            ; ===========================================================================
000098A8                            
000098A8                            Plat_ChkDel:
000098C4 4E75                       		rts	
000098C6                            ; ===========================================================================
000098C6                            
000098C6                            Plat_Delete:	; Routine 6
000098C6 6000 0000                  		bra.w	DeleteObject
000098C6 6000 0000                  		bra.w	DeleteObject
000098CA                            Map_Plat_Unused:include	"_maps\Platforms (unused).asm"
000098CA                            ; ---------------------------------------------------------------------------
000098CA                            ; Sprite mappings - unused
000098CA                            ; ---------------------------------------------------------------------------
000098CA                            Map_Plat_Unused_internal:
000098CA 0000                       		dc.w @small-Map_Plat_Unused_internal
000098CC 0000                       		dc.w @large-Map_Plat_Unused_internal
000098CE 02                         @small:		dc.b 2
000098CF F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
000098D4 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
000098D9 0A                         @large:		dc.b $A
000098DA F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
000098DF 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
000098E4 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
000098E9 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
000098EE 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
000098F3 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
000098F8 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
000098FD 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00009902 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00009907 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
0000990C                            		even
0000990C                            		even
0000990C                            Map_Plat_GHZ:	include	"_maps\Platforms (GHZ).asm"
0000990C                            ; ---------------------------------------------------------------------------
0000990C                            ; Sprite mappings - GHZ	platforms
0000990C                            ; ---------------------------------------------------------------------------
0000990C                            Map_Plat_GHZ_internal:
0000990C 0000                       		dc.w @small-Map_Plat_GHZ_internal
0000990E 0000                       		dc.w @large-Map_Plat_GHZ_internal
00009910 04                         @small:		dc.b 4
00009911 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00009916 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
0000991B F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00009920 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00009925 0A                         @large:		dc.b $A
00009926 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
0000992B 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009930 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00009935 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
0000993A 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
0000993F F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00009944 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00009949 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
0000994E 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00009953 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00009958                            		even
00009958                            		even
00009958                            Map_Plat_SYZ:	include	"_maps\Platforms (SYZ).asm"
00009958                            ; ---------------------------------------------------------------------------
00009958                            ; Sprite mappings - SYZ	platforms
00009958                            ; ---------------------------------------------------------------------------
00009958                            Map_Plat_SYZ_internal:
00009958 0000                       		dc.w @platform-Map_Plat_SYZ_internal
0000995A 03                         @platform:	dc.b 3
0000995B F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00009960 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00009965 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
0000996A                            		even
0000996A                            		even
0000996A                            Map_Plat_SLZ:	include	"_maps\Platforms (SLZ).asm"
0000996A                            ; ---------------------------------------------------------------------------
0000996A                            ; Sprite mappings - SLZ	platforms
0000996A                            ; ---------------------------------------------------------------------------
0000996A                            Map_Plat_SLZ_internal:
0000996A 0000                       		dc.w @platform-Map_Plat_SLZ_internal
0000996C 02                         @platform:	dc.b 2
0000996D F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00009972 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00009978 00                         		even
00009978 00                         		even
00009978                            Map_GBall:	include	"_maps\GHZ Ball.asm"
00009978                            ; ---------------------------------------------------------------------------
00009978                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009978                            ; ---------------------------------------------------------------------------
00009978                            Map_GBall_internal:
00009978 0000                       		dc.w @shiny-Map_GBall_internal
0000997A 0000                       		dc.w @check1-Map_GBall_internal
0000997C 0000                       		dc.w @check2-Map_GBall_internal
0000997E 0000                       		dc.w @check3-Map_GBall_internal
00009980 06                         @shiny:		dc.b 6
00009981 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009986 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
0000998B E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00009990 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00009995 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
0000999A 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0000999F 04                         @check1:	dc.b 4
000099A0 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
000099A5 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
000099AA 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
000099AF 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
000099B4 04                         @check2:	dc.b 4
000099B5 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000099BA E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000099BF 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000099C4 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000099C9 04                         @check3:	dc.b 4
000099CA E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000099CF E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000099D4 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000099D9 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000099DE                            		even
000099DE                            		even
000099DE                            		include	"_incObj\1A Collapsing Ledge (part 1).asm"
000099DE                            ; ---------------------------------------------------------------------------
000099DE                            ; Object 1A - GHZ collapsing ledge
000099DE                            ; ---------------------------------------------------------------------------
000099DE                            
000099DE                            CollapseLedge:
000099DE 7000                       		moveq	#0,d0
000099E0 1028 0024                  		move.b	obRoutine(a0),d0
000099E4 323B 0000                  		move.w	Ledge_Index(pc,d0.w),d1
000099E8 4EFB 1000                  		jmp	Ledge_Index(pc,d1.w)
000099EC                            ; ===========================================================================
000099EC 0000 0000                  Ledge_Index:	dc.w Ledge_Main-Ledge_Index, Ledge_Touch-Ledge_Index
000099F0 0000 0000                  		dc.w Ledge_Collapse-Ledge_Index, Ledge_Display-Ledge_Index
000099F4 0000 0000                  		dc.w Ledge_Delete-Ledge_Index, Ledge_WalkOff-Ledge_Index
000099F8                            
000099F8 =00000038                  ledge_timedelay:	equ $38		; time between touching the ledge and it collapsing
000099F8 =0000003A                  ledge_collapse_flag:	equ $3A		; collapse flag
000099F8                            ; ===========================================================================
000099F8                            
000099F8                            Ledge_Main:	; Routine 0
000099F8 5428 0024                  		addq.b	#2,obRoutine(a0)
000099FC 217C 0000 0000 0004        		move.l	#Map_Ledge,obMap(a0)
00009A04 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009A0A 0028 0004 0001             		ori.b	#4,obRender(a0)
00009A10 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009A16 117C 0007 0038             		move.b	#7,ledge_timedelay(a0) ; set time delay for collapse
00009A1C 117C 0064 0014             		move.b	#$64,obActWid(a0)
00009A22 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00009A28 117C 0038 0016             		move.b	#$38,obHeight(a0)
00009A2E 08E8 0004 0001             		bset	#4,obRender(a0)
00009A34                            
00009A34                            Ledge_Touch:	; Routine 2
00009A34 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009A38 6700                       		beq.s	@slope		; if not, branch
00009A3A 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time reached zero?
00009A3E 6700 0000                  		beq.w	Ledge_Fragment	; if yes, branch
00009A42 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009A46                            
00009A46                            	@slope:
00009A46 323C 0030                  		move.w	#$30,d1
00009A4A 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009A50 6100 F2A6                  		bsr.w	SlopeObject
00009A54 6000 0000                  		bra.w	RememberState
00009A58                            ; ===========================================================================
00009A58                            
00009A58                            Ledge_Collapse:	; Routine 4
00009A58 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009A5C 6700 0000                  		beq.w	loc_847A
00009A60 117C 0001 003A             		move.b	#1,ledge_collapse_flag(a0)	; set collapse flag
00009A66 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009A6A                            
00009A6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009A6A                            
00009A6A                            
00009A6A                            Ledge_WalkOff:	; Routine $A
00009A6A 323C 0030                  		move.w	#$30,d1
00009A6E 6100 F328                  		bsr.w	ExitPlatform
00009A72 323C 0030                  		move.w	#$30,d1
00009A76 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009A7C 3428 0008                  		move.w	obX(a0),d2
00009A80 6100 0000                  		bsr.w	SlopeObject2
00009A84 6000 0000                  		bra.w	RememberState
00009A88                            ; End of function Ledge_WalkOff
00009A88                            
00009A88                            ; ===========================================================================
00009A88                            
00009A88                            Ledge_Display:	; Routine 6
00009A88 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time delay reached zero?
00009A8C 6700                       		beq.s	Ledge_TimeZero	; if yes, branch
00009A8E 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009A92 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009A96 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009A9A 6000 0000                  		bra.w	DisplaySprite
00009A9E                            ; ===========================================================================
00009A9E                            
00009A9E                            loc_82D0:
00009A9E 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009AA2 6100 FFC6                  		bsr.w	Ledge_WalkOff
00009AA6 43F8 D000                  		lea	(v_player).w,a1
00009AAA 0829 0003 0022             		btst	#3,obStatus(a1)
00009AB0 6700                       		beq.s	loc_82FC
00009AB2 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009AB6 6600                       		bne.s	locret_8308
00009AB8 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009ABE 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009AC4 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009ACA                            
00009ACA                            loc_82FC:
00009ACA 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009AD0 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "Ledge_Display" routine
00009AD6                            
00009AD6                            locret_8308:
00009AD6 4E75                       		rts	
00009AD8                            ; ===========================================================================
00009AD8                            
00009AD8                            Ledge_TimeZero:
00009AD8 6100 0000                  		bsr.w	ObjectFall
00009ADC 6100 0000                  		bsr.w	DisplaySprite
00009AE0 4A28 0001                  		tst.b	obRender(a0)
00009AE4 6A00                       		bpl.s	Ledge_Delete
00009AE6 4E75                       		rts	
00009AE8                            ; ===========================================================================
00009AE8                            
00009AE8                            Ledge_Delete:	; Routine 8
00009AE8 6100 0000                  		bsr.w	DeleteObject
00009AEC 4E75                       		rts	
00009AEC 4E75                       		rts	
00009AEE                            		include	"_incObj\53 Collapsing Floors.asm"
00009AEE                            ; ---------------------------------------------------------------------------
00009AEE                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00009AEE                            ; ---------------------------------------------------------------------------
00009AEE                            
00009AEE                            CollapseFloor:
00009AEE 7000                       		moveq	#0,d0
00009AF0 1028 0024                  		move.b	obRoutine(a0),d0
00009AF4 323B 0000                  		move.w	CFlo_Index(pc,d0.w),d1
00009AF8 4EFB 1000                  		jmp	CFlo_Index(pc,d1.w)
00009AFC                            ; ===========================================================================
00009AFC 0000 0000                  CFlo_Index:	dc.w CFlo_Main-CFlo_Index, CFlo_Touch-CFlo_Index
00009B00 0000 0000                  		dc.w CFlo_Collapse-CFlo_Index, CFlo_Display-CFlo_Index
00009B04 0000 0000                  		dc.w CFlo_Delete-CFlo_Index, CFlo_WalkOff-CFlo_Index
00009B08                            
00009B08 =00000038                  cflo_timedelay:		equ $38
00009B08 =0000003A                  cflo_collapse_flag:	equ $3A
00009B08                            ; ===========================================================================
00009B08                            
00009B08                            CFlo_Main:	; Routine 0
00009B08 5428 0024                  		addq.b	#2,obRoutine(a0)
00009B0C 217C 0000 0000 0004        		move.l	#Map_CFlo,obMap(a0)
00009B14 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00009B1A 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009B20 6600                       		bne.s	@notSLZ
00009B22                            
00009B22 317C 44E0 0002             		move.w	#$44E0,obGfx(a0) ; SLZ specific code
00009B28 5428 001A                  		addq.b	#2,obFrame(a0)
00009B2C                            
00009B2C                            	@notSLZ:
00009B2C 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SBZ
00009B32 6600                       		bne.s	@notSBZ
00009B34 317C 43C2 0002             		move.w	#$43C2,obGfx(a0) ; SBZ specific code
00009B3A                            
00009B3A                            	@notSBZ:
00009B3A 0028 0004 0001             		ori.b	#4,obRender(a0)
00009B40 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009B46 117C 0007 0038             		move.b	#7,cflo_timedelay(a0)
00009B4C 117C 0044 0014             		move.b	#$44,obActWid(a0)
00009B52                            
00009B52                            CFlo_Touch:	; Routine 2
00009B52 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009B56 6700                       		beq.s	@solid		; if not, branch
00009B58 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009B5C 6700 0000                  		beq.w	CFlo_Fragment	; if yes, branch
00009B60 5328 0038                  		subq.b	#1,cflo_timedelay(a0) ; subtract 1 from time
00009B64                            
00009B64                            	@solid:
00009B64 323C 0020                  		move.w	#$20,d1
00009B68 6100 F0BA                  		bsr.w	PlatformObject
00009B6C 4A28 0028                  		tst.b	obSubtype(a0)
00009B70 6A00                       		bpl.s	@remstate
00009B72 0829 0003 0022             		btst	#3,obStatus(a1)
00009B78 6700                       		beq.s	@remstate
00009B7A 08A8 0000 0001             		bclr	#0,obRender(a0)
00009B80 3029 0008                  		move.w	obX(a1),d0
00009B84 9068 0008                  		sub.w	obX(a0),d0
00009B88 6400                       		bcc.s	@remstate
00009B8A 08E8 0000 0001             		bset	#0,obRender(a0)
00009B90                            
00009B90                            	@remstate:
00009B90 6000 0000                  		bra.w	RememberState
00009B94                            ; ===========================================================================
00009B94                            
00009B94                            CFlo_Collapse:	; Routine 4
00009B94 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009B98 6700 0000                  		beq.w	loc_8458
00009B9C 117C 0001 003A             		move.b	#1,cflo_collapse_flag(a0)	; set object as	"touched"
00009BA2 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009BA6                            
00009BA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009BA6                            
00009BA6                            
00009BA6                            CFlo_WalkOff:	; Routine $A
00009BA6 323C 0020                  		move.w	#$20,d1
00009BAA 6100 F1EC                  		bsr.w	ExitPlatform
00009BAE 3428 0008                  		move.w	obX(a0),d2
00009BB2 6100 F74E                  		bsr.w	MvSonicOnPtfm2
00009BB6 6000 0000                  		bra.w	RememberState
00009BBA                            ; End of function CFlo_WalkOff
00009BBA                            
00009BBA                            ; ===========================================================================
00009BBA                            
00009BBA                            CFlo_Display:	; Routine 6
00009BBA 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009BBE 6700                       		beq.s	CFlo_TimeZero	; if yes, branch
00009BC0 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009BC4 6600 0000                  		bne.w	loc_8402	; if yes, branch
00009BC8 5328 0038                  		subq.b	#1,cflo_timedelay(a0); subtract 1 from time
00009BCC 6000 0000                  		bra.w	DisplaySprite
00009BD0                            ; ===========================================================================
00009BD0                            
00009BD0                            loc_8402:
00009BD0 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009BD4 6100 FFD0                  		bsr.w	CFlo_WalkOff
00009BD8 43F8 D000                  		lea	(v_player).w,a1
00009BDC 0829 0003 0022             		btst	#3,obStatus(a1)
00009BE2 6700                       		beq.s	loc_842E
00009BE4 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009BE8 6600                       		bne.s	locret_843A
00009BEA 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009BF0 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009BF6 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009BFC                            
00009BFC                            loc_842E:
00009BFC 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00009C02 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "CFlo_Display" routine
00009C08                            
00009C08                            locret_843A:
00009C08 4E75                       		rts	
00009C0A                            ; ===========================================================================
00009C0A                            
00009C0A                            CFlo_TimeZero:
00009C0A 6100 0000                  		bsr.w	ObjectFall
00009C0E 6100 0000                  		bsr.w	DisplaySprite
00009C12 4A28 0001                  		tst.b	obRender(a0)
00009C16 6A00                       		bpl.s	CFlo_Delete
00009C18 4E75                       		rts	
00009C1A                            ; ===========================================================================
00009C1A                            
00009C1A                            CFlo_Delete:	; Routine 8
00009C1A 6100 0000                  		bsr.w	DeleteObject
00009C1E 4E75                       		rts	
00009C20                            ; ===========================================================================
00009C20                            
00009C20                            CFlo_Fragment:
00009C20 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00009C26                            
00009C26                            loc_8458:
00009C26 49F9 0000 0000             		lea	(CFlo_Data2).l,a4
00009C2C 0828 0000 0028             		btst	#0,obSubtype(a0)
00009C32 6700                       		beq.s	loc_846C
00009C34 49F9 0000 0000             		lea	(CFlo_Data3).l,a4
00009C3A                            
00009C3A                            loc_846C:
00009C3A 7207                       		moveq	#7,d1
00009C3C 5228 001A                  		addq.b	#1,obFrame(a0)
00009C40 6000                       		bra.s	loc_8486
00009C40 6000                       		bra.s	loc_8486
00009C42                            
00009C42                            ; ===========================================================================
00009C42                            
00009C42                            Ledge_Fragment:
00009C42 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009C48                            
00009C48                            loc_847A:
00009C48 49F9 0000 0000             		lea	(CFlo_Data1).l,a4
00009C4E 7218                       		moveq	#$18,d1
00009C50 5428 001A                  		addq.b	#2,obFrame(a0)
00009C54                            
00009C54                            loc_8486:
00009C54 7000                       		moveq	#0,d0
00009C56 1028 001A                  		move.b	obFrame(a0),d0
00009C5A D040                       		add.w	d0,d0
00009C5C 2668 0004                  		movea.l	obMap(a0),a3
00009C60 D6F3 0000                  		adda.w	(a3,d0.w),a3
00009C64 524B                       		addq.w	#1,a3
00009C66 08E8 0005 0001             		bset	#5,obRender(a0)
00009C6C 1810                       		move.b	0(a0),d4
00009C6E 1A28 0001                  		move.b	obRender(a0),d5
00009C72 2248                       		movea.l	a0,a1
00009C74 137C 0006 0024             		move.b	#6,obRoutine(a1)
00009C7A 1284                       		move.b	d4,0(a1)
00009C7C 234B 0004                  		move.l	a3,obMap(a1)
00009C80 1345 0001                  		move.b	d5,obRender(a1)
00009C84 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009C8A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00009C90 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009C96 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00009C9C 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00009CA2 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
00009CA6 5341                       		subq.w	#1,d1
00009CA8 43F8 D800                  		lea		(v_lvlobjspace).w,a1
00009CAC 303C 005F                  		move.w	#$5F,d0
00009CB0                            ; ===========================================================================
00009CB0                            
00009CB0                            loc_84AA:
00009CB0 4A11                       		tst.b	(a1)
00009CB2 6700                       		beq.s	@cont		
00009CB4 43E9 0040                  		lea		$40(a1),a1
00009CB8 51C8 FFF6                  		dbf		d0,loc_84AA	
00009CBC 6600                       		bne.s	loc_84F2	
00009CBE                            	@cont:
00009CBE 5A4B                       		addq.w	#5,a3
00009CC0                            
00009CC0                            loc_84B2:
00009CC0 137C 0006 0024             		move.b	#6,obRoutine(a1)
00009CC6 1284                       		move.b	d4,0(a1)
00009CC8 234B 0004                  		move.l	a3,obMap(a1)
00009CCC 1345 0001                  		move.b	d5,obRender(a1)
00009CD0 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009CD6 3368 000C 000C             		move.w	obY(a0),obY(a1)
00009CDC 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009CE2 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00009CE8 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00009CEE 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
00009CF2 6100 0000                  		bsr.w	DisplaySprite1
00009CF6                            
00009CF6                            loc_84EE:
00009CF6 51C9 FFB8                  		dbf	d1,loc_84AA
00009CFA                            
00009CFA                            loc_84F2:
00009CFA 6100 0000                  		bsr.w	DisplaySprite
00009D08                            ; ===========================================================================
00009D08                            ; ---------------------------------------------------------------------------
00009D08                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00009D08                            ; ---------------------------------------------------------------------------
00009D08 1C18 1410 1A16 120E 0A06+  CFlo_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00009D18 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00009D22 1E16 0E06 1A12 0A02        CFlo_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00009D2A 161E 1A12 060E 0A02        CFlo_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00009D32                            
00009D32                            ; ---------------------------------------------------------------------------
00009D32                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00009D32                            ; ---------------------------------------------------------------------------
00009D32                            
00009D32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009D32                            
00009D32                            
00009D32                            SlopeObject2:
00009D32 43F8 D000                  		lea	(v_player).w,a1
00009D36 0829 0003 0022             		btst	#3,obStatus(a1)
00009D3C 6700                       		beq.s	locret_856E
00009D3E 3029 0008                  		move.w	obX(a1),d0
00009D42 9068 0008                  		sub.w	obX(a0),d0
00009D46 D041                       		add.w	d1,d0
00009D48 E248                       		lsr.w	#1,d0
00009D4A 0828 0000 0001             		btst	#0,obRender(a0)
00009D50 6700                       		beq.s	loc_854E
00009D52 4640                       		not.w	d0
00009D54 D041                       		add.w	d1,d0
00009D56                            
00009D56                            loc_854E:
00009D56 7200                       		moveq	#0,d1
00009D58 1232 0000                  		move.b	(a2,d0.w),d1
00009D5C 3028 000C                  		move.w	obY(a0),d0
00009D60 9041                       		sub.w	d1,d0
00009D62 7200                       		moveq	#0,d1
00009D64 1229 0016                  		move.b	obHeight(a1),d1
00009D68 9041                       		sub.w	d1,d0
00009D6A 3340 000C                  		move.w	d0,obY(a1)
00009D6E 9468 0008                  		sub.w	obX(a0),d2
00009D72 9569 0008                  		sub.w	d2,obX(a1)
00009D76                            
00009D76                            locret_856E:
00009D76 4E75                       		rts	
00009D78                            ; End of function SlopeObject2
00009D78                            
00009D78                            ; ===========================================================================
00009D78                            ; ---------------------------------------------------------------------------
00009D78                            ; Collision data for GHZ collapsing ledge
00009D78                            ; ---------------------------------------------------------------------------
00009D78                            Ledge_SlopeData:
00009D78                            		incbin	"misc\GHZ Collapsing Ledge Heightmap.bin"
00009DA8                            		even
00009DA8                            
00009DA8                            Map_Ledge:	include	"_maps\Collapsing Ledge.asm"
00009DA8                            ; ---------------------------------------------------------------------------
00009DA8                            ; Sprite mappings - GHZ	collapsing ledge
00009DA8                            ; ---------------------------------------------------------------------------
00009DA8                            Map_Ledge_internal:
00009DA8 0000                       		dc.w @left-Map_Ledge_internal
00009DAA 0000                       		dc.w @right-Map_Ledge_internal
00009DAC 0000                       		dc.w @leftsmash-Map_Ledge_internal
00009DAE 0000                       		dc.w @rightsmash-Map_Ledge_internal
00009DB0 10                         @left:		dc.b $10
00009DB1 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00009DB6 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009DBB E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009DC0 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009DC5 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009DCA D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009DCF F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009DD4 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009DD9 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009DDE F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009DE3 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009DE8 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009DED 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009DF2 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009DF7 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009DFC 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009E01 10                         @right:		dc.b $10
00009E02 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00009E07 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009E0C E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009E11 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009E16 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009E1B D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009E20 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009E25 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009E2A F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009E2F F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009E34 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009E39 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009E3E 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009E43 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009E48 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009E4D 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009E52 19                         @leftsmash:	dc.b $19
00009E53 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00009E58 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009E5D D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009E62 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009E67 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009E6C E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009E71 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009E76 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009E7B D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009E80 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009E85 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009E8A F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009E8F F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009E94 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009E99 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009E9E F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009EA3 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009EA8 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009EAD 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009EB2 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009EB7 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009EBC 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009EC1 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009EC6 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009ECB 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009ED0 19                         @rightsmash:	dc.b $19
00009ED1 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00009ED6 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009EDB D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009EE0 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009EE5 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009EEA E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009EEF E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009EF4 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009EF9 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009EFE D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009F03 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009F08 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009F0D F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009F12 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009F17 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009F1C F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009F21 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009F26 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009F2B 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009F30 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009F35 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009F3A 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009F3F 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009F44 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009F49 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009F4E                            		even
00009F4E                            		even
00009F4E                            Map_CFlo:	include	"_maps\Collapsing Floors.asm"
00009F4E                            ; --------------------------------------------------------------------------------
00009F4E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00009F4E                            ; --------------------------------------------------------------------------------
00009F4E                            
00009F4E                            SME_WNa9T:	
00009F4E 0000 0000                  		dc.w SME_WNa9T_8-SME_WNa9T, SME_WNa9T_31-SME_WNa9T	
00009F52 0000 0000                  		dc.w SME_WNa9T_5A-SME_WNa9T, SME_WNa9T_6F-SME_WNa9T	
00009F56 08                         SME_WNa9T_8:	dc.b 8	
00009F57 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
00009F5C 0805 0004 E0               		dc.b 8, 5, 0, 4, $E0	
00009F61 F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
00009F66 0805 0004 F0               		dc.b 8, 5, 0, 4, $F0	
00009F6B F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
00009F70 0805 0004 00               		dc.b 8, 5, 0, 4, 0	
00009F75 F805 0000 10               		dc.b $F8, 5, 0, 0, $10	
00009F7A 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
00009F7F 08                         SME_WNa9T_31:	dc.b 8	
00009F80 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
00009F85 0805 0004 E0               		dc.b 8, 5, 0, 4, $E0	
00009F8A F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
00009F8F 0805 0004 F0               		dc.b 8, 5, 0, 4, $F0	
00009F94 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
00009F99 0805 0004 00               		dc.b 8, 5, 0, 4, 0	
00009F9E F805 0000 10               		dc.b $F8, 5, 0, 0, $10	
00009FA3 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
00009FA8 04                         SME_WNa9T_5A:	dc.b 4	
00009FA9 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
00009FAE 080D 0008 E0               		dc.b 8, $D, 0, 8, $E0	
00009FB3 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
00009FB8 080D 0008 00               		dc.b 8, $D, 0, 8, 0	
00009FBD 08                         SME_WNa9T_6F:	dc.b 8	
00009FBE F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
00009FC3 F805 0004 F0               		dc.b $F8, 5, 0, 4, $F0	
00009FC8 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
00009FCD F805 0004 10               		dc.b $F8, 5, 0, 4, $10	
00009FD2 0805 0008 E0               		dc.b 8, 5, 0, 8, $E0	
00009FD7 0805 000C F0               		dc.b 8, 5, 0, $C, $F0	
00009FDC 0805 0008 00               		dc.b 8, 5, 0, 8, 0	
00009FE1 0805 000C 10               		dc.b 8, 5, 0, $C, $10	
00009FE6                            		even
00009FE6                            		even
00009FE6                            
00009FE6                            		include	"_incObj\1C Scenery.asm"
00009FE6                            ; ---------------------------------------------------------------------------
00009FE6                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00009FE6                            ; ---------------------------------------------------------------------------
00009FE6                            
00009FE6                            Scenery:
00009FE6 7000                       		moveq	#0,d0
00009FE8 1028 0024                  		move.b	obRoutine(a0),d0
00009FEC 323B 0000                  		move.w	Scen_Index(pc,d0.w),d1
00009FF0 4EFB 1000                  		jmp	Scen_Index(pc,d1.w)
00009FF4                            ; ===========================================================================
00009FF4 0000                       Scen_Index:	dc.w Scen_Main-Scen_Index
00009FF6 0000                       		dc.w Scen_ChkDel-Scen_Index
00009FF8                            ; ===========================================================================
00009FF8                            
00009FF8                            Scen_Main:	; Routine 0
00009FF8 5428 0024                  		addq.b	#2,obRoutine(a0)
00009FFC 7000                       		moveq	#0,d0
00009FFE 1028 0028                  		move.b	obSubtype(a0),d0 ; copy object subtype to d0
0000A002 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000A006 43FB 0000                  		lea	Scen_Values(pc,d0.w),a1
0000A00A 2159 0004                  		move.l	(a1)+,obMap(a0)
0000A00E 3159 0002                  		move.w	(a1)+,obGfx(a0)
0000A012 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A018 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000A01C 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000A020 1159 0018                  		move.b	(a1)+,obPriority(a0)
0000A024 3028 0018                  		move.w obPriority(a0),d0 
0000A028 E248                       		lsr.w #1,d0 
0000A02A 0240 0380                  		andi.w #$380,d0 
0000A02E 3140 0018                  		move.w d0,obPriority(a0)		
0000A032 1159 0020                  		move.b	(a1)+,obColType(a0)
0000A036                            
0000A036                            Scen_ChkDel:	; Routine 2
0000A054 6000 0000                  		bra.w	DisplaySprite
0000A058                            ; ===========================================================================
0000A058                            ; ---------------------------------------------------------------------------
0000A058                            ; Variables for	object $1C are stored in an array
0000A058                            ; ---------------------------------------------------------------------------
0000A058 0000 0000                  Scen_Values:	dc.l Map_Scen		; mappings address
0000A05C 44D8                       		dc.w $44D8		; VRAM setting
0000A05E 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0000A062 0000 0000                  		dc.l Map_Scen
0000A066 44D8                       		dc.w $44D8
0000A068 0008 0200                  		dc.b 0,	8, 2, 0
0000A06C 0000 0000                  		dc.l Map_Scen
0000A070 44D8                       		dc.w $44D8
0000A072 0008 0200                  		dc.b 0,	8, 2, 0
0000A076 0000 910C                  		dc.l Map_Bri
0000A07A 438E                       		dc.w $438E
0000A07C 0110 0100                  		dc.b 1,	$10, 1,	0
0000A080                            		even
0000A080                            		even
0000A080                            Map_Scen:	include	"_maps\Scenery.asm"
0000A080                            ; ---------------------------------------------------------------------------
0000A080                            ; Sprite mappings - SLZ	lava thrower
0000A080                            ; ---------------------------------------------------------------------------
0000A080                            Map_Scen_internal:
0000A080 0000                       		dc.w byte_8858-Map_Scen_internal
0000A082 01                         byte_8858:	dc.b 1
0000A083 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000A088                            		even
0000A088                            		even
0000A088                            
0000A088                            		include	"_incObj\1D Unused Switch.asm"
0000A088                            ; ---------------------------------------------------------------------------
0000A088                            ; Object 1D - switch that activates when Sonic touches it
0000A088                            ; (this	is not used anywhere in	the game)
0000A088                            ; ---------------------------------------------------------------------------
0000A088                            
0000A088                            MagicSwitch:
0000A088 7000                       		moveq	#0,d0
0000A08A 1028 0024                  		move.b	obRoutine(a0),d0
0000A08E 323B 0000                  		move.w	Swi_Index(pc,d0.w),d1
0000A092 4EFB 1000                  		jmp	Swi_Index(pc,d1.w)
0000A096                            ; ===========================================================================
0000A096 0000                       Swi_Index:	dc.w Swi_Main-Swi_Index
0000A098 0000                       		dc.w Swi_Action-Swi_Index
0000A09A 0000                       		dc.w Swi_Delete-Swi_Index
0000A09C                            
0000A09C =00000030                  swi_origY:	equ $30		; original y-axis position
0000A09C                            ; ===========================================================================
0000A09C                            
0000A09C                            Swi_Main:	; Routine 0
0000A09C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A0A0 217C 0000 0000 0004        		move.l	#Map_Swi,obMap(a0)
0000A0A8 317C 4000 0002             		move.w	#$4000,obGfx(a0)
0000A0AE 117C 0004 0001             		move.b	#4,obRender(a0)
0000A0B4 3168 000C 0030             		move.w	obY(a0),swi_origY(a0) ; save position on y-axis
0000A0BA 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000A0C0 317C 0280 0018             		move.w	#$280,obPriority(a0)
0000A0C6                            
0000A0C6                            Swi_Action:	; Routine 2
0000A0C6 3168 0030 000C             		move.w	swi_origY(a0),obY(a0) ; restore position on y-axis
0000A0CC 323C 0010                  		move.w	#$10,d1
0000A0D0 6100 0000                  		bsr.w	Swi_ChkTouch	; check if Sonic touches the switch
0000A0D4 6700                       		beq.s	Swi_ChkDel	; if not, branch
0000A0D6                            
0000A0D6 5468 000C                  		addq.w	#2,obY(a0)	; move object 2	pixels
0000A0DA 7001                       		moveq	#1,d0
0000A0DC 31C0 F7E0                  		move.w	d0,(f_switch).w	; set switch 0 as "pressed"
0000A0E0                            
0000A0E0                            Swi_ChkDel:
0000A0E0 6100 0000                  		bsr.w	DisplaySprite
0000A102 4E75                       		rts	
0000A104                            ; ===========================================================================
0000A104                            
0000A104                            Swi_Delete:	; Routine 4
0000A104 6100 0000                  		bsr.w	DeleteObject
0000A108 4E75                       		rts	
0000A10A                            
0000A10A                            ; ---------------------------------------------------------------------------
0000A10A                            ; Subroutine to	check if Sonic touches the object
0000A10A                            ; ---------------------------------------------------------------------------
0000A10A                            
0000A10A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A10A                            
0000A10A                            
0000A10A                            Swi_ChkTouch:
0000A10A 43F8 D000                  		lea	(v_player).w,a1
0000A10E 3029 0008                  		move.w	obX(a1),d0
0000A112 9068 0008                  		sub.w	obX(a0),d0
0000A116 D041                       		add.w	d1,d0
0000A118 6B00                       		bmi.s	Swi_NoTouch
0000A11A D241                       		add.w	d1,d1
0000A11C B041                       		cmp.w	d1,d0
0000A11E 6400                       		bcc.s	Swi_NoTouch
0000A120 3429 000C                  		move.w	obY(a1),d2
0000A124 1229 0016                  		move.b	obHeight(a1),d1
0000A128 4881                       		ext.w	d1
0000A12A D242                       		add.w	d2,d1
0000A12C 3028 000C                  		move.w	obY(a0),d0
0000A130 0440 0010                  		subi.w	#$10,d0
0000A134 9041                       		sub.w	d1,d0
0000A136 6200                       		bhi.s	Swi_NoTouch
0000A138 0C40 FFF0                  		cmpi.w	#-$10,d0
0000A13C 6500                       		bcs.s	Swi_NoTouch
0000A13E 70FF                       		moveq	#-1,d0		; Sonic has touched it
0000A140 4E75                       		rts	
0000A142                            ; ===========================================================================
0000A142                            
0000A142                            Swi_NoTouch:
0000A142 7000                       		moveq	#0,d0		; Sonic hasn't touched it
0000A144 4E75                       		rts	
0000A146                            ; End of function Swi_ChkTouch
0000A146                            ; End of function Swi_ChkTouch
0000A146                            Map_Swi:	include	"_maps\Unused Switch.asm"
0000A146                            ; ---------------------------------------------------------------------------
0000A146                            ; Sprite mappings - Unused switch thingy
0000A146                            ; ---------------------------------------------------------------------------
0000A146                            Map_Swi_internal:
0000A146 0000                       		dc.w byte_891E-Map_Swi_internal
0000A148 04                         byte_891E:	dc.b 4
0000A149 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000A14E 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000A153 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000A158 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000A15E 00                         		even
0000A15E 00                         		even
0000A15E                            
0000A15E                            		include	"_incObj\2A SBZ Small Door.asm"
0000A15E                            ; ---------------------------------------------------------------------------
0000A15E                            ; Object 2A - small vertical door (SBZ)
0000A15E                            ; ---------------------------------------------------------------------------
0000A15E                            
0000A15E                            AutoDoor:
0000A15E 7000                       		moveq	#0,d0
0000A160 1028 0024                  		move.b	obRoutine(a0),d0
0000A164 323B 0000                  		move.w	ADoor_Index(pc,d0.w),d1
0000A168 4EFB 1000                  		jmp	ADoor_Index(pc,d1.w)
0000A16C                            ; ===========================================================================
0000A16C 0000                       ADoor_Index:	dc.w ADoor_Main-ADoor_Index
0000A16E 0000                       		dc.w ADoor_OpenShut-ADoor_Index
0000A170                            ; ===========================================================================
0000A170                            
0000A170                            ADoor_Main:	; Routine 0
0000A170 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A174 217C 0000 0000 0004        		move.l	#Map_ADoor,obMap(a0)
0000A17C 317C 42EA 0002             		move.w	#$42EA,obGfx(a0)
0000A182 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A188 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A18E                            		;move.b	#4,obPriority(a0)
0000A18E                            
0000A18E                            ADoor_OpenShut:	; Routine 2
0000A18E 323C 0040                  		move.w	#$40,d1		; set range for door detection
0000A192 4228 001C                  		clr.b	obAnim(a0)	; use "closing"	animation
0000A196 3038 D008                  		move.w	(v_player+obX).w,d0
0000A19A D041                       		add.w	d1,d0
0000A19C B068 0008                  		cmp.w	obX(a0),d0
0000A1A0 6500                       		bcs.s	ADoor_Animate
0000A1A2 9041                       		sub.w	d1,d0
0000A1A4 9041                       		sub.w	d1,d0
0000A1A6 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic > $40 pixels from door?
0000A1AA 6400                       		bcc.s	ADoor_Animate	; close door
0000A1AC D041                       		add.w	d1,d0
0000A1AE B068 0008                  		cmp.w	obX(a0),d0	; is Sonic left of the door?
0000A1B2 6400                       		bcc.s	loc_899A	; if yes, branch
0000A1B4 0828 0000 0022             		btst	#0,obStatus(a0)
0000A1BA 6600                       		bne.s	ADoor_Animate
0000A1BC 6000                       		bra.s	ADoor_Open
0000A1BE                            ; ===========================================================================
0000A1BE                            
0000A1BE                            loc_899A:
0000A1BE 0828 0000 0022             		btst	#0,obStatus(a0)
0000A1C4 6700                       		beq.s	ADoor_Animate
0000A1C6                            
0000A1C6                            ADoor_Open:
0000A1C6 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "opening"	animation
0000A1CC                            
0000A1CC                            ADoor_Animate:
0000A1CC 43F9 0000 0000             		lea	(Ani_ADoor).l,a1
0000A1D2 6100 0000                  		bsr.w	AnimateSprite
0000A1D6 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
0000A1DA 6600                       		bne.s	@remember	; if yes, branch
0000A1DC 323C 0011                  		move.w	#$11,d1
0000A1E0 343C 0020                  		move.w	#$20,d2
0000A1E4 3602                       		move.w	d2,d3
0000A1E6 5243                       		addq.w	#1,d3
0000A1E8 3828 0008                  		move.w	obX(a0),d4
0000A1EC 6100 0000                  		bsr.w	SolidObject
0000A1F0                            
0000A1F0                            	@remember:
0000A1F0 6000 0000                  		bra.w	RememberState
0000A1F0 6000 0000                  		bra.w	RememberState
0000A1F4                            		include	"_anim\SBZ Small Door.asm"
0000A1F4                            ; ---------------------------------------------------------------------------
0000A1F4                            ; Animation script - doors (SBZ)
0000A1F4                            ; ---------------------------------------------------------------------------
0000A1F4 0000                       Ani_ADoor:	dc.w @close-Ani_ADoor
0000A1F6 0000                       		dc.w @open-Ani_ADoor
0000A1F8 0008 0706 0504 0302 0100+  @close:		dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, afBack, 1
0000A204 0000 0102 0304 0506 0708+  @open:		dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, afBack, 1
0000A210                            		even
0000A210                            		even
0000A210                            Map_ADoor:	include	"_maps\SBZ Small Door.asm"
0000A210                            ; --------------------------------------------------------------------------------
0000A210                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A210                            ; --------------------------------------------------------------------------------
0000A210                            
0000A210                            SME_YnmwF:	
0000A210 0000 0000                  		dc.w SME_YnmwF_12-SME_YnmwF, SME_YnmwF_1D-SME_YnmwF	
0000A214 0000 0000                  		dc.w SME_YnmwF_28-SME_YnmwF, SME_YnmwF_33-SME_YnmwF	
0000A218 0000 0000                  		dc.w SME_YnmwF_3E-SME_YnmwF, SME_YnmwF_49-SME_YnmwF	
0000A21C 0000 0000                  		dc.w SME_YnmwF_54-SME_YnmwF, SME_YnmwF_5F-SME_YnmwF	
0000A220 0000                       		dc.w SME_YnmwF_6A-SME_YnmwF	
0000A222 02                         SME_YnmwF_12:	dc.b 2	
0000A223 E007 0800 F8               		dc.b $E0, 7, 8, 0, $F8	
0000A228 0007 0800 F8               		dc.b 0, 7, 8, 0, $F8	
0000A22D 02                         SME_YnmwF_1D:	dc.b 2	
0000A22E DC07 0800 F8               		dc.b $DC, 7, 8, 0, $F8	
0000A233 0407 0800 F8               		dc.b 4, 7, 8, 0, $F8	
0000A238 02                         SME_YnmwF_28:	dc.b 2	
0000A239 D807 0800 F8               		dc.b $D8, 7, 8, 0, $F8	
0000A23E 0807 0800 F8               		dc.b 8, 7, 8, 0, $F8	
0000A243 02                         SME_YnmwF_33:	dc.b 2	
0000A244 D407 0800 F8               		dc.b $D4, 7, 8, 0, $F8	
0000A249 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8	
0000A24E 02                         SME_YnmwF_3E:	dc.b 2	
0000A24F D007 0800 F8               		dc.b $D0, 7, 8, 0, $F8	
0000A254 1007 0800 F8               		dc.b $10, 7, 8, 0, $F8	
0000A259 02                         SME_YnmwF_49:	dc.b 2	
0000A25A CC07 0800 F8               		dc.b $CC, 7, 8, 0, $F8	
0000A25F 1407 0800 F8               		dc.b $14, 7, 8, 0, $F8	
0000A264 02                         SME_YnmwF_54:	dc.b 2	
0000A265 C807 0800 F8               		dc.b $C8, 7, 8, 0, $F8	
0000A26A 1807 0800 F8               		dc.b $18, 7, 8, 0, $F8	
0000A26F 02                         SME_YnmwF_5F:	dc.b 2	
0000A270 C407 0800 F8               		dc.b $C4, 7, 8, 0, $F8	
0000A275 1C07 0800 F8               		dc.b $1C, 7, 8, 0, $F8	
0000A27A 02                         SME_YnmwF_6A:	dc.b 2	
0000A27B C007 0800 F8               		dc.b $C0, 7, 8, 0, $F8	
0000A280 2007 0800 F8               		dc.b $20, 7, 8, 0, $F8	
0000A286 00                         		even
0000A286 00                         		even
0000A286                            
0000A286                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A286                            
0000A286                            
0000A286                            Obj44_SolidWall:
0000A286 6100 0000                  		bsr.w	Obj44_SolidWall2
0000A28A 6700                       		beq.s	loc_8AA8
0000A28C 6B00 0000                  		bmi.w	loc_8AC4
0000A290 4A40                       		tst.w	d0
0000A292 6700 0000                  		beq.w	loc_8A92
0000A296 6B00                       		bmi.s	loc_8A7C
0000A298 4A69 0010                  		tst.w	obVelX(a1)
0000A29C 6B00                       		bmi.s	loc_8A92
0000A29E 6000                       		bra.s	loc_8A82
0000A2A0                            ; ===========================================================================
0000A2A0                            
0000A2A0                            loc_8A7C:
0000A2A0 4A69 0010                  		tst.w	obVelX(a1)
0000A2A4 6A00                       		bpl.s	loc_8A92
0000A2A6                            
0000A2A6                            loc_8A82:
0000A2A6 9169 0008                  		sub.w	d0,obX(a1)
0000A2AA 337C 0000 0020             		move.w	#0,obInertia(a1)
0000A2B0 337C 0000 0010             		move.w	#0,obVelX(a1)
0000A2B6                            
0000A2B6                            loc_8A92:
0000A2B6 0829 0001 0022             		btst	#1,obStatus(a1)
0000A2BC 6600                       		bne.s	loc_8AB6
0000A2BE 08E9 0005 0022             		bset	#5,obStatus(a1)
0000A2C4 08E8 0005 0022             		bset	#5,obStatus(a0)
0000A2CA 4E75                       		rts	
0000A2CC                            ; ===========================================================================
0000A2CC                            
0000A2CC                            loc_8AA8:
0000A2CC 0828 0005 0022             		btst	#5,obStatus(a0)
0000A2D2 6700                       		beq.s	locret_8AC2
0000A2D4 337C 0000 001C             		move.w	#id_Run,obAnim(a1)
0000A2DA                            
0000A2DA                            loc_8AB6:
0000A2DA 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000A2E0 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A2E6                            
0000A2E6                            locret_8AC2:
0000A2E6 4E75                       		rts	
0000A2E8                            ; ===========================================================================
0000A2E8                            
0000A2E8                            loc_8AC4:
0000A2E8 4A69 0012                  		tst.w	obVelY(a1)
0000A2EC 6A00                       		bpl.s	locret_8AD8
0000A2EE 4A43                       		tst.w	d3
0000A2F0 6A00                       		bpl.s	locret_8AD8
0000A2F2 9769 000C                  		sub.w	d3,obY(a1)
0000A2F6 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A2FC                            
0000A2FC                            locret_8AD8:
0000A2FC 4E75                       		rts	
0000A2FE                            ; End of function Obj44_SolidWall
0000A2FE                            
0000A2FE                            
0000A2FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A2FE                            
0000A2FE                            
0000A2FE                            Obj44_SolidWall2:
0000A2FE 43F8 D000                  		lea	(v_player).w,a1
0000A302 3029 0008                  		move.w	obX(a1),d0
0000A306 9068 0008                  		sub.w	obX(a0),d0
0000A30A D041                       		add.w	d1,d0
0000A30C 6B00                       		bmi.s	loc_8B48
0000A30E 3601                       		move.w	d1,d3
0000A310 D643                       		add.w	d3,d3
0000A312 B043                       		cmp.w	d3,d0
0000A314 6200                       		bhi.s	loc_8B48
0000A316 1629 0016                  		move.b	obHeight(a1),d3
0000A31A 4883                       		ext.w	d3
0000A31C D443                       		add.w	d3,d2
0000A31E 3629 000C                  		move.w	obY(a1),d3
0000A322 9668 000C                  		sub.w	obY(a0),d3
0000A326 D642                       		add.w	d2,d3
0000A328 6B00                       		bmi.s	loc_8B48
0000A32A 3802                       		move.w	d2,d4
0000A32C D844                       		add.w	d4,d4
0000A32E B644                       		cmp.w	d4,d3
0000A330 6400                       		bhs.s	loc_8B48
0000A332 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000A336 6B00                       		bmi.s	loc_8B48
0000A338 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000A33E 6400                       		bhs.s	loc_8B48
0000A340 4A78 FE08                  		tst.w	(v_debuguse).w
0000A344 6600                       		bne.s	loc_8B48
0000A346 3A00                       		move.w	d0,d5
0000A348 B240                       		cmp.w	d0,d1
0000A34A 6400                       		bhs.s	loc_8B30
0000A34C D241                       		add.w	d1,d1
0000A34E 9041                       		sub.w	d1,d0
0000A350 3A00                       		move.w	d0,d5
0000A352 4445                       		neg.w	d5
0000A354                            
0000A354                            loc_8B30:
0000A354 3203                       		move.w	d3,d1
0000A356 B443                       		cmp.w	d3,d2
0000A358 6400                       		bhs.s	loc_8B3C
0000A35A 9644                       		sub.w	d4,d3
0000A35C 3203                       		move.w	d3,d1
0000A35E 4441                       		neg.w	d1
0000A360                            
0000A360                            loc_8B3C:
0000A360 BA41                       		cmp.w	d1,d5
0000A362 6200                       		bhi.s	loc_8B44
0000A364 7801                       		moveq	#1,d4
0000A366 4E75                       		rts	
0000A368                            ; ===========================================================================
0000A368                            
0000A368                            loc_8B44:
0000A368 78FF                       		moveq	#-1,d4
0000A36A 4E75                       		rts	
0000A36C                            ; ===========================================================================
0000A36C                            
0000A36C                            loc_8B48:
0000A36C 7800                       		moveq	#0,d4
0000A36E 4E75                       		rts	
0000A370                            ; End of function Obj44_SolidWall2
0000A370                            
0000A370                            ; ===========================================================================
0000A370                            
0000A370                            		include	"_incObj\1E Ball Hog.asm"
0000A370                            ; ---------------------------------------------------------------------------
0000A370                            ; Object 1E - Ball Hog enemy (SBZ)
0000A370                            ; ---------------------------------------------------------------------------
0000A370                            
0000A370                            BallHog:
0000A370 7000                       		moveq	#0,d0
0000A372 1028 0024                  		move.b	obRoutine(a0),d0
0000A376 323B 0000                  		move.w	Hog_Index(pc,d0.w),d1
0000A37A 4EFB 1000                  		jmp	Hog_Index(pc,d1.w)
0000A37E                            ; ===========================================================================
0000A37E 0000                       Hog_Index:	dc.w Hog_Main-Hog_Index
0000A380 0000                       		dc.w Hog_Action-Hog_Index
0000A382                            
0000A382 =00000032                  hog_launchflag:	equ $32		; 0 to launch a cannonball
0000A382                            ; ===========================================================================
0000A382                            
0000A382                            Hog_Main:	; Routine 0
0000A382 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000A388 117C 0008 0017             		move.b	#8,obWidth(a0)
0000A38E 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A396 317C 0302 0002             		move.w	#$302,obGfx(a0)
0000A39C 117C 0004 0001             		move.b	#4,obRender(a0)
0000A3A2 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000A3A8 117C 0005 0020             		move.b	#5,obColType(a0)
0000A3AE 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A3B4 6100 0000                  		bsr.w	ObjectFall
0000A3B8 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000A3BE 4A41                       		tst.w	d1
0000A3C0 6A00                       		bpl.s	@floornotfound
0000A3C2 D368 000C                  		add.w	d1,obY(a0)
0000A3C6 317C 0000 0012             		move.w	#0,obVelY(a0)
0000A3CC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A3D0                            
0000A3D0                            	@floornotfound:
0000A3D0 4E75                       		rts	
0000A3D2                            ; ===========================================================================
0000A3D2                            
0000A3D2                            Hog_Action:	; Routine 2
0000A3D2 43F9 0000 0000             		lea	(Ani_Hog).l,a1
0000A3D8 6100 0000                  		bsr.w	AnimateSprite
0000A3DC 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is final frame (01) displayed?
0000A3E2 6600                       		bne.s	@setlaunchflag	; if not, branch
0000A3E4 4A28 0032                  		tst.b	hog_launchflag(a0)	; is it	set to launch cannonball?
0000A3E8 6700                       		beq.s	@makeball	; if yes, branch
0000A3EA 6000                       		bra.s	@remember
0000A3EC                            ; ===========================================================================
0000A3EC                            
0000A3EC                            @setlaunchflag:
0000A3EC 4228 0032                  		clr.b	hog_launchflag(a0)	; set to launch	cannonball
0000A3F0                            
0000A3F0                            @remember:
0000A3F0 6000 0000                  		bra.w	RememberState
0000A3F4                            ; ===========================================================================
0000A3F4                            
0000A3F4                            @makeball:
0000A3F4 117C 0001 0032             		move.b	#1,hog_launchflag(a0)
0000A3FA 6100 0000                  		bsr.w	FindFreeObj
0000A3FE 6600                       		bne.s	@fail
0000A400 12BC 0000                  		move.b	#id_Cannonball,0(a1) ; load cannonball object ($20)
0000A404 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A40A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A410 337C FF00 0010             		move.w	#-$100,obVelX(a1) ; cannonball bounces to the left
0000A416 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A41C 70FC                       		moveq	#-4,d0
0000A41E 0828 0000 0022             		btst	#0,obStatus(a0)	; is Ball Hog facing right?
0000A424 6700                       		beq.s	@noflip		; if not, branch
0000A426 4440                       		neg.w	d0
0000A428 4469 0010                  		neg.w	obVelX(a1)	; cannonball bounces to	the right
0000A42C                            
0000A42C                            	@noflip:
0000A42C D169 0008                  		add.w	d0,obX(a1)
0000A430 0669 000C 000C             		addi.w	#$C,obY(a1)
0000A436 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1) ; copy object type from Ball Hog
0000A43C                            
0000A43C                            	@fail:
0000A43C 60B2                       		bra.s	@remember
0000A43C 60B2                       		bra.s	@remember
0000A43E                            		include	"_incObj\20 Cannonball.asm"
0000A43E                            ; ---------------------------------------------------------------------------
0000A43E                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000A43E                            ; ---------------------------------------------------------------------------
0000A43E                            
0000A43E                            Cannonball:
0000A43E 7000                       		moveq	#0,d0
0000A440 1028 0024                  		move.b	obRoutine(a0),d0
0000A444 323B 0000                  		move.w	Cbal_Index(pc,d0.w),d1
0000A448 4EFB 1000                  		jmp	Cbal_Index(pc,d1.w)
0000A44C                            ; ===========================================================================
0000A44C 0000                       Cbal_Index:	dc.w Cbal_Main-Cbal_Index
0000A44E 0000                       		dc.w Cbal_Bounce-Cbal_Index
0000A450                            
0000A450 =00000030                  cbal_time:	equ $30		; time until the cannonball explodes (2 bytes)
0000A450                            ; ===========================================================================
0000A450                            
0000A450                            Cbal_Main:	; Routine 0
0000A450 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A454 117C 0007 0016             		move.b	#7,obHeight(a0)
0000A45A 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A462 317C 2302 0002             		move.w	#$2302,obGfx(a0)
0000A468 117C 0004 0001             		move.b	#4,obRender(a0)
0000A46E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000A474 117C 0087 0020             		move.b	#$87,obColType(a0)
0000A47A 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A480 7000                       		moveq	#0,d0
0000A482 1028 0028                  		move.b	obSubtype(a0),d0 ; move subtype to d0
0000A486 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000A48A 3140 0030                  		move.w	d0,cbal_time(a0) ; set explosion time
0000A48E 117C 0004 001A             		move.b	#4,obFrame(a0)
0000A494                            
0000A494                            Cbal_Bounce:	; Routine 2
0000A494 4EB9 0000 0000             		jsr	(ObjectFall).l
0000A49A 4A68 0012                  		tst.w	obVelY(a0)
0000A49E 6B00                       		bmi.s	Cbal_ChkExplode
0000A4A0 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A4A6 4A41                       		tst.w	d1		; has ball hit the floor?
0000A4A8 6A00                       		bpl.s	Cbal_ChkExplode	; if not, branch
0000A4AA                            
0000A4AA D368 000C                  		add.w	d1,obY(a0)
0000A4AE 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; bounce
0000A4B4 4A03                       		tst.b	d3
0000A4B6 6700                       		beq.s	Cbal_ChkExplode
0000A4B8 6B00                       		bmi.s	loc_8CA4
0000A4BA 4A68 0010                  		tst.w	obVelX(a0)
0000A4BE 6A00                       		bpl.s	Cbal_ChkExplode
0000A4C0 4468 0010                  		neg.w	obVelX(a0)
0000A4C4 6000                       		bra.s	Cbal_ChkExplode
0000A4C6                            ; ===========================================================================
0000A4C6                            
0000A4C6                            loc_8CA4:
0000A4C6 4A68 0010                  		tst.w	obVelX(a0)
0000A4CA 6B00                       		bmi.s	Cbal_ChkExplode
0000A4CC 4468 0010                  		neg.w	obVelX(a0)
0000A4D0                            
0000A4D0                            Cbal_ChkExplode:
0000A4D0 5368 0030                  		subq.w	#1,cbal_time(a0) ; subtract 1 from explosion time
0000A4D4 6A00                       		bpl.s	Cbal_Animate	; if time is > 0, branch
0000A4D6                            
0000A4D6                            	Cbal_Explode:
0000A4D6 10BC 0000                  		move.b	#id_MissileDissolve,0(a0)
0000A4DA 10BC 0000                  		move.b	#id_ExplosionBomb,0(a0)	; change object	to an explosion	($3F)
0000A4DE 117C 0000 0024             		move.b	#0,obRoutine(a0) ; reset routine counter
0000A4E4 6000 0000                  		bra.w	ExplosionBomb	; jump to explosion code
0000A4E8                            ; ===========================================================================
0000A4E8                            
0000A4E8                            Cbal_Animate:
0000A4E8 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A4EC 6A00                       		bpl.s	Cbal_Display
0000A4EE 117C 0005 001E             		move.b	#5,obTimeFrame(a0) ; set frame duration to 5 frames
0000A4F4 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
0000A4FA                            
0000A4FA                            Cbal_Display:
0000A4FA 6100 0000                  		bsr.w	DisplaySprite
0000A4FE 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000A502 0640 00E0                  		addi.w	#$E0,d0
0000A506 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen off	the level?
0000A50A 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A50E 4E75                       		rts	
0000A50E 4E75                       		rts	
0000A510                            		include	"_incObj\24, 27 & 3F Explosions.asm"
0000A510                            ; ---------------------------------------------------------------------------
0000A510                            ; Object 24 - buzz bomber missile vanishing (unused?)
0000A510                            ; ---------------------------------------------------------------------------
0000A510                            
0000A510                            MissileDissolve:
0000A510 7000                       		moveq	#0,d0
0000A512 1028 0024                  		move.b	obRoutine(a0),d0
0000A516 323B 0000                  		move.w	MDis_Index(pc,d0.w),d1
0000A51A 4EFB 1000                  		jmp	MDis_Index(pc,d1.w)
0000A51E                            ; ===========================================================================
0000A51E 0000                       MDis_Index:	dc.w MDis_Main-MDis_Index
0000A520 0000                       		dc.w MDis_Animate-MDis_Index
0000A522                            ; ===========================================================================
0000A522                            
0000A522                            MDis_Main:	; Routine 0
0000A522 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A526 217C 0000 0000 0004        		move.l	#Map_MisDissolve,obMap(a0)
0000A52E 317C 041C 0002             		move.w	#$41C,obGfx(a0)
0000A534 117C 0004 0001             		move.b	#4,obRender(a0)
0000A53A 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A540 117C 0000 0020             		move.b	#0,obColType(a0)
0000A546 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A54C 117C 0009 001E             		move.b	#9,obTimeFrame(a0)
0000A552 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A562                            
0000A562                            MDis_Animate:	; Routine 2
0000A562 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A566 6A00                       		bpl.s	@display
0000A568 117C 0009 001E             		move.b	#9,obTimeFrame(a0) ; set frame duration to 9 frames
0000A56E 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A572 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has animation completed?
0000A578 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A57C                            
0000A57C                            	@display:
0000A57C 6000 0000                  		bra.w	DisplaySprite
0000A580                            ; ===========================================================================
0000A580                            
0000A580                            ; ---------------------------------------------------------------------------
0000A580                            ; Object 27 - explosion	from a destroyed enemy or monitor
0000A580                            ; ---------------------------------------------------------------------------
0000A580                            
0000A580                            ExplosionItem:
0000A580 7000                       		moveq	#0,d0
0000A582 1028 0024                  		move.b	obRoutine(a0),d0
0000A586 323B 0000                  		move.w	ExItem_Index(pc,d0.w),d1
0000A58A 4EFB 1000                  		jmp	ExItem_Index(pc,d1.w)
0000A58E                            ; ===========================================================================
0000A58E 0000                       ExItem_Index:	dc.w ExItem_Animal-ExItem_Index
0000A590 0000                       		dc.w ExItem_Main-ExItem_Index
0000A592 0000                       		dc.w ExItem_Animate-ExItem_Index
0000A594                            ; ===========================================================================
0000A594                            
0000A594                            ExItem_Animal:	; Routine 0
0000A594 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A598 6100 0000                  		bsr.w	FindFreeObj
0000A59C 6600                       		bne.s	ExItem_Main
0000A59E 12BC 0000                  		move.b	#id_Animals,0(a1) ; load animal object
0000A5A2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A5A8 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A5AE 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000A5B4                            
0000A5B4                            ExItem_Main:	; Routine 2
0000A5B4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A5B8 217C 0000 0000 0004        		move.l	#Map_ExplodeItem,obMap(a0)
0000A5C0 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A5C6 117C 0004 0001             		move.b	#4,obRender(a0)
0000A5CC 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A5D2 117C 0000 0020             		move.b	#0,obColType(a0)
0000A5D8 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A5DE 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000A5E4 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A5F4                            
0000A5F4                            ExItem_Animate:	; Routine 4 (2 for ExplosionBomb)
0000A5F4 5528 001E                  		subq.b	#2,obTimeFrame(a0) ; subtract 1 from frame duration
0000A5F8 6A00                       		bpl.s	@display
0000A5FA 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000A600 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A604 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is the final frame (05) displayed?
0000A60A 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A60E                            
0000A60E                            	@display:
0000A60E 6000 0000                  		bra.w	DisplaySprite
0000A612                            ; ===========================================================================
0000A612                            ; ---------------------------------------------------------------------------
0000A612                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000A612                            ; ---------------------------------------------------------------------------
0000A612                            
0000A612                            ExplosionBomb:
0000A612 7000                       		moveq	#0,d0
0000A614 1028 0024                  		move.b	obRoutine(a0),d0
0000A618 323B 0000                  		move.w	ExBom_Index(pc,d0.w),d1
0000A61C 4EFB 1000                  		jmp	ExBom_Index(pc,d1.w)
0000A620                            ; ===========================================================================
0000A620 0000                       ExBom_Index:	dc.w ExBom_Main-ExBom_Index
0000A622 FFD4                       		dc.w ExItem_Animate-ExBom_Index
0000A624                            ; ===========================================================================
0000A624                            
0000A624                            ExBom_Main:	; Routine 0
0000A624 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A628 217C 0000 0000 0004        		move.l	#Map_ExplodeBomb,obMap(a0)
0000A630 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A636 117C 0004 0001             		move.b	#4,obRender(a0)
0000A63C 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A642 117C 0000 0020             		move.b	#0,obColType(a0)
0000A648 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A64E 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000A654 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A664                            		include	"_anim\Ball Hog.asm"
0000A664                            ; ---------------------------------------------------------------------------
0000A664                            ; Animation script - doors (SBZ)
0000A664                            ; ---------------------------------------------------------------------------
0000A664 0000                       Ani_Hog:	dc.w @hog-Ani_Hog
0000A666 0900 0002 0203 0200 0002+  @hog:		dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, afEnd
0000A67E 00                         		even
0000A67E 00                         		even
0000A67E                            Map_Hog:	include	"_maps\Ball Hog.asm"
0000A67E                            ; --------------------------------------------------------------------------------
0000A67E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A67E                            ; --------------------------------------------------------------------------------
0000A67E                            
0000A67E                            SME_ZER01:	
0000A67E 0000 0000                  		dc.w SME_ZER01_C-SME_ZER01, SME_ZER01_17-SME_ZER01	
0000A682 0000 0000                  		dc.w SME_ZER01_22-SME_ZER01, SME_ZER01_2D-SME_ZER01	
0000A686 0000 0000                  		dc.w SME_ZER01_38-SME_ZER01, SME_ZER01_3E-SME_ZER01	
0000A68A 02                         SME_ZER01_C:	dc.b 2	
0000A68B EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000A690 FF0A 2006 F4               		dc.b $FF, $A, $20, 6, $F4	
0000A695 02                         SME_ZER01_17:	dc.b 2	
0000A696 EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000A69B FF0A 200F F4               		dc.b $FF, $A, $20, $F, $F4	
0000A6A0 02                         SME_ZER01_22:	dc.b 2	
0000A6A1 F409 2000 F4               		dc.b $F4, 9, $20, 0, $F4	
0000A6A6 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000A6AB 02                         SME_ZER01_2D:	dc.b 2	
0000A6AC E409 2000 F4               		dc.b $E4, 9, $20, 0, $F4	
0000A6B1 F40A 201E F4               		dc.b $F4, $A, $20, $1E, $F4	
0000A6B6 01                         SME_ZER01_38:	dc.b 1	
0000A6B7 F805 0027 F8               		dc.b $F8, 5, 0, $27, $F8	
0000A6BC 01                         SME_ZER01_3E:	dc.b 1	
0000A6BD F805 602B F8               		dc.b $F8, 5, $60, $2B, $F8	
0000A6C2                            		even
0000A6C2                            		even
0000A6C2                            Map_MisDissolve:include	"_maps\Buzz Bomber Missile Dissolve.asm"
0000A6C2                            ; ---------------------------------------------------------------------------
0000A6C2                            ; Sprite mappings - buzz bomber missile vanishing
0000A6C2                            ; ---------------------------------------------------------------------------
0000A6C2                            Map_MisDissolve_internal:
0000A6C2 0000                       		dc.w byte_8EAE-Map_MisDissolve_internal
0000A6C4 0000                       		dc.w byte_8EB4-Map_MisDissolve_internal
0000A6C6 0000                       		dc.w byte_8EBA-Map_MisDissolve_internal
0000A6C8 0000                       		dc.w byte_8EC0-Map_MisDissolve_internal
0000A6CA 01                         byte_8EAE:	dc.b 1
0000A6CB F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000A6D0 01                         byte_8EB4:	dc.b 1
0000A6D1 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000A6D6 01                         byte_8EBA:	dc.b 1
0000A6D7 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000A6DC 01                         byte_8EC0:	dc.b 1
0000A6DD F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000A6E2                            		even
0000A6E2                            		even
0000A6E2                            		include	"_maps\Explosions.asm"
0000A6E2                            ; ---------------------------------------------------------------------------
0000A6E2                            ; Sprite mappings - explosion from a badnik or monitor
0000A6E2                            ; ---------------------------------------------------------------------------
0000A6E2 0000 0000                  Map_ExplodeItem:dc.w byte_8ED0-Map_ExplodeItem, byte_8ED6-Map_ExplodeItem
0000A6E6 0000 0000                  		dc.w byte_8EDC-Map_ExplodeItem, byte_8EE2-Map_ExplodeItem
0000A6EA 0000                       		dc.w byte_8EF7-Map_ExplodeItem
0000A6EC 01                         byte_8ED0:	dc.b 1
0000A6ED F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000A6F2 01                         byte_8ED6:	dc.b 1
0000A6F3 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000A6F8 01                         byte_8EDC:	dc.b 1
0000A6F9 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000A6FE 04                         byte_8EE2:	dc.b 4
0000A6FF EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000A704 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000A709 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000A70E FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000A713 04                         byte_8EF7:	dc.b 4
0000A714 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000A719 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000A71E 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000A723 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000A728                            		even
0000A728                            ; ---------------------------------------------------------------------------
0000A728                            ; Sprite mappings - explosion from when	a boss is destroyed
0000A728                            ; ---------------------------------------------------------------------------
0000A728 FFC4                       Map_ExplodeBomb:dc.w byte_8ED0-Map_ExplodeBomb
0000A72A 0000                       		dc.w byte_8F16-Map_ExplodeBomb
0000A72C 0000                       		dc.w byte_8F1C-Map_ExplodeBomb
0000A72E FFD6                       		dc.w byte_8EE2-Map_ExplodeBomb
0000A730 FFEB                       		dc.w byte_8EF7-Map_ExplodeBomb
0000A732 01                         byte_8F16:	dc.b 1
0000A733 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000A738 01                         byte_8F1C:	dc.b 1
0000A739 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000A73E                            		even
0000A73E                            		even
0000A73E                            
0000A73E                            		include	"_incObj\28 Animals.asm"
0000A73E                            ; ---------------------------------------------------------------------------
0000A73E                            ; Object 28 - animals
0000A73E                            ; ---------------------------------------------------------------------------
0000A73E                            
0000A73E                            Animals:
0000A73E 7000                       		moveq	#0,d0
0000A740 1028 0024                  		move.b	obRoutine(a0),d0
0000A744 323B 0000                  		move.w	Anml_Index(pc,d0.w),d1
0000A748 4EFB 1000                  		jmp	Anml_Index(pc,d1.w)
0000A74C                            ; ===========================================================================
0000A74C 0000 0000                  Anml_Index:	dc.w Anml_Ending-Anml_Index, loc_912A-Anml_Index
0000A750 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000A754 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9184-Anml_Index
0000A758 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000A75C 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9240-Anml_Index
0000A760 0000 0000                  		dc.w loc_9260-Anml_Index, loc_9260-Anml_Index
0000A764 0000 0000                  		dc.w loc_9280-Anml_Index, loc_92BA-Anml_Index
0000A768 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000A76C 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000A770 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9370-Anml_Index
0000A774 0000                       		dc.w loc_92D6-Anml_Index
0000A776                            
0000A776 0005 0203 0603 0405 0401+  Anml_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000A782                            
0000A782 FE00 FC00                  Anml_Variables:	dc.w $FE00, $FC00
0000A786 0000 0000                  		dc.l Map_Animal1
0000A78A FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000A78E 0000 0000                  		dc.l Map_Animal2	; mappings address
0000A792 FE80 FD00                  		dc.w $FE80, $FD00
0000A796 0000 0000                  		dc.l Map_Animal1
0000A79A FEC0 FE80                  		dc.w $FEC0, $FE80
0000A79E 0000 0000                  		dc.l Map_Animal2
0000A7A2 FE40 FD00                  		dc.w $FE40, $FD00
0000A7A6 0000 0000                  		dc.l Map_Animal3
0000A7AA FD00 FC00                  		dc.w $FD00, $FC00
0000A7AE 0000 0000                  		dc.l Map_Animal2
0000A7B2 FD80 FC80                  		dc.w $FD80, $FC80
0000A7B6 0000 0000                  		dc.l Map_Animal3
0000A7BA                            
0000A7BA FBC0 FC00 FBC0 FC00 FBC0+  Anml_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000A7CA FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000A7DA FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000A7E6                            
0000A7E6 0000 0000 0000 0000 0000+  Anml_EndMap:	dc.l Map_Animal2, Map_Animal2, Map_Animal2, Map_Animal1, Map_Animal1
0000A7FA 0000 0000 0000 0000 0000+  		dc.l Map_Animal1, Map_Animal1, Map_Animal2, Map_Animal3, Map_Animal2
0000A80E 0000 0000                  		dc.l Map_Animal3
0000A812                            
0000A812 05A5 05A5 05A5 0553 0553+  Anml_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000A824 0565 05B3                  		dc.w $565, $5B3
0000A828                            ; ===========================================================================
0000A828                            
0000A828                            Anml_Ending:	; Routine 0
0000A828 4A28 0028                  		tst.b	obSubtype(a0)	; did animal come from a destroyed enemy?
0000A82C 6700 0000                  		beq.w	Anml_FromEnemy	; if yes, branch
0000A830 7000                       		moveq	#0,d0
0000A832 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type to d0
0000A836 D040                       		add.w	d0,d0		; multiply d0 by 2
0000A838 1140 0024                  		move.b	d0,obRoutine(a0) ; move d0 to routine counter
0000A83C 0440 0014                  		subi.w	#$14,d0
0000A840 317B 00D0 0002             		move.w	Anml_EndVram(pc,d0.w),obGfx(a0)
0000A846 D040                       		add.w	d0,d0
0000A848 217B 009C 0004             		move.l	Anml_EndMap(pc,d0.w),obMap(a0)
0000A84E 43FA FF6A                  		lea	Anml_EndSpeed(pc),a1
0000A852 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000A858 3171 0000 0010             		move.w	(a1,d0.w),obVelX(a0)
0000A85E 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000A864 3171 0002 0012             		move.w	2(a1,d0.w),obVelY(a0)
0000A86A 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000A870 117C 0004 0001             		move.b	#4,obRender(a0)
0000A876 08E8 0000 0001             		bset	#0,obRender(a0)
0000A87C 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000A882 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A888 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000A88E 6000 0000                  		bra.w	DisplaySprite
0000A892                            ; ===========================================================================
0000A892                            
0000A892                            Anml_FromEnemy:
0000A892 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A896 6100 940C                  		bsr.w	RandomNumber
0000A89A 0240 0001                  		andi.w	#1,d0
0000A89E 7200                       		moveq	#0,d1
0000A8A0 1238 FE10                  		move.b	(v_zone).w,d1
0000A8A4 D241                       		add.w	d1,d1
0000A8A6 D240                       		add.w	d0,d1
0000A8A8 43FA FECC                  		lea	Anml_VarIndex(pc),a1
0000A8AC 1031 1000                  		move.b	(a1,d1.w),d0
0000A8B0 1140 0030                  		move.b	d0,$30(a0)
0000A8B4 E748                       		lsl.w	#3,d0
0000A8B6 43FA FECA                  		lea	Anml_Variables(pc),a1
0000A8BA D2C0                       		adda.w	d0,a1
0000A8BC 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000A8C0 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000A8C4 2159 0004                  		move.l	(a1)+,obMap(a0)	; load mappings
0000A8C8 317C 0580 0002             		move.w	#$580,obGfx(a0)	; VRAM setting for 1st animal
0000A8CE 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000A8D4 6700                       		beq.s	loc_90C0	; if yes, branch
0000A8D6 317C 0592 0002             		move.w	#$592,obGfx(a0)	; VRAM setting for 2nd animal
0000A8DC                            
0000A8DC                            loc_90C0:
0000A8DC 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000A8E2 117C 0004 0001             		move.b	#4,obRender(a0)
0000A8E8 08E8 0000 0001             		bset	#0,obRender(a0)
0000A8EE 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000A8F4 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A8FA 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000A900 117C 0002 001A             		move.b	#2,obFrame(a0)
0000A906 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000A90C 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000A910 6600                       		bne.s	loc_911C
0000A912 6100 0000                  		bsr.w	FindFreeObj
0000A916 6600                       		bne.s	Anml_Display
0000A918 12BC 0000                  		move.b	#id_Points,0(a1) ; load points object
0000A91C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A922 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A928 3028 003E                  		move.w	$3E(a0),d0
0000A92C E248                       		lsr.w	#1,d0
0000A92E 1340 001A                  		move.b	d0,obFrame(a1)
0000A932                            
0000A932                            Anml_Display:
0000A932 6000 0000                  		bra.w	DisplaySprite
0000A936                            ; ===========================================================================
0000A936                            
0000A936                            loc_911C:
0000A936 117C 0012 0024             		move.b	#$12,obRoutine(a0)
0000A93C 4268 0010                  		clr.w	obVelX(a0)
0000A940 6000 0000                  		bra.w	DisplaySprite
0000A944                            ; ===========================================================================
0000A944                            
0000A944                            loc_912A:
0000A944 4A28 0001                  		tst.b	obRender(a0)
0000A948 6A00 0000                  		bpl.w	DeleteObject
0000A94C 6100 0000                  		bsr.w	ObjectFall
0000A950 4A68 0012                  		tst.w	obVelY(a0)
0000A954 6B00                       		bmi.s	loc_9180
0000A956 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A95C 4A41                       		tst.w	d1
0000A95E 6A00                       		bpl.s	loc_9180
0000A960 D368 000C                  		add.w	d1,obY(a0)
0000A964 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000A96A 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000A970 117C 0001 001A             		move.b	#1,obFrame(a0)
0000A976 1028 0030                  		move.b	$30(a0),d0
0000A97A D000                       		add.b	d0,d0
0000A97C 5800                       		addq.b	#4,d0
0000A97E 1140 0024                  		move.b	d0,obRoutine(a0)
0000A982 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000A986 6700                       		beq.s	loc_9180
0000A988 0838 0004 FE0F             		btst	#4,(v_vbla_byte).w
0000A98E 6700                       		beq.s	loc_9180
0000A990 4468 0010                  		neg.w	obVelX(a0)
0000A994 0868 0000 0001             		bchg	#0,obRender(a0)
0000A99A                            
0000A99A                            loc_9180:
0000A99A 6000 0000                  		bra.w	DisplaySprite
0000A99E                            ; ===========================================================================
0000A99E                            
0000A99E                            loc_9184:
0000A99E 6100 0000                  		bsr.w	ObjectFall
0000A9A2 117C 0001 001A             		move.b	#1,obFrame(a0)
0000A9A8 4A68 0012                  		tst.w	obVelY(a0)
0000A9AC 6B00                       		bmi.s	loc_91AE
0000A9AE 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A9B4 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A9BA 4A41                       		tst.w	d1
0000A9BC 6A00                       		bpl.s	loc_91AE
0000A9BE D368 000C                  		add.w	d1,obY(a0)
0000A9C2 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000A9C8                            
0000A9C8                            loc_91AE:
0000A9C8 4A28 0028                  		tst.b	obSubtype(a0)
0000A9CC 6600                       		bne.s	loc_9224
0000A9CE 4A28 0001                  		tst.b	obRender(a0)
0000A9D2 6A00 0000                  		bpl.w	DeleteObject
0000A9D6 6000 0000                  		bra.w	DisplaySprite
0000A9DA                            ; ===========================================================================
0000A9DA                            
0000A9DA                            loc_91C0:
0000A9DA 6100 0000                  		bsr.w	SpeedToPos
0000A9DE 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000A9E4 4A68 0012                  		tst.w	obVelY(a0)
0000A9E8 6B00                       		bmi.s	loc_91FC
0000A9EA 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A9F0 4A41                       		tst.w	d1
0000A9F2 6A00                       		bpl.s	loc_91FC
0000A9F4 D368 000C                  		add.w	d1,obY(a0)
0000A9F8 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000A9FE 4A28 0028                  		tst.b	obSubtype(a0)
0000AA02 6700                       		beq.s	loc_91FC
0000AA04 0C28 000A 0028             		cmpi.b	#$A,obSubtype(a0)
0000AA0A 6700                       		beq.s	loc_91FC
0000AA0C 4468 0010                  		neg.w	obVelX(a0)
0000AA10 0868 0000 0001             		bchg	#0,obRender(a0)
0000AA16                            
0000AA16                            loc_91FC:
0000AA16 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AA1A 6A00                       		bpl.s	loc_9212
0000AA1C 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AA22 5228 001A                  		addq.b	#1,obFrame(a0)
0000AA26 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AA2C                            
0000AA2C                            loc_9212:
0000AA2C 4A28 0028                  		tst.b	obSubtype(a0)
0000AA30 6600                       		bne.s	loc_9224
0000AA32 4A28 0001                  		tst.b	obRender(a0)
0000AA36 6A00 0000                  		bpl.w	DeleteObject
0000AA3A 6000 0000                  		bra.w	DisplaySprite
0000AA3E                            ; ===========================================================================
0000AA3E                            
0000AA3E                            loc_9224:
0000AA3E 3028 0008                  		move.w	obX(a0),d0
0000AA42 9078 D008                  		sub.w	(v_player+obX).w,d0
0000AA46 6500                       		bcs.s	loc_923C
0000AA48 0440 0180                  		subi.w	#$180,d0
0000AA4C 6A00                       		bpl.s	loc_923C
0000AA4E 4A28 0001                  		tst.b	obRender(a0)
0000AA52 6A00 0000                  		bpl.w	DeleteObject
0000AA56                            
0000AA56                            loc_923C:
0000AA56 6000 0000                  		bra.w	DisplaySprite
0000AA5A                            ; ===========================================================================
0000AA5A                            
0000AA5A                            loc_9240:
0000AA5A 4A28 0001                  		tst.b	obRender(a0)
0000AA5E 6A00 0000                  		bpl.w	DeleteObject
0000AA62 5368 0036                  		subq.w	#1,$36(a0)
0000AA66 6600 0000                  		bne.w	loc_925C
0000AA6A 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000AA70 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000AA76                            
0000AA76                            loc_925C:
0000AA76 6000 0000                  		bra.w	DisplaySprite
0000AA7A                            ; ===========================================================================
0000AA7A                            
0000AA7A                            loc_9260:
0000AA7A 6100 0000                  		bsr.w	sub_9404
0000AA7E 6400                       		bcc.s	loc_927C
0000AA80 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AA86 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AA8C 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000AA92 6000 FF46                  		bra.w	loc_91C0
0000AA96                            ; ===========================================================================
0000AA96                            
0000AA96                            loc_927C:
0000AA96 6000 FFA6                  		bra.w	loc_9224
0000AA9A                            ; ===========================================================================
0000AA9A                            
0000AA9A                            loc_9280:
0000AA9A 6100 0000                  		bsr.w	sub_9404
0000AA9E 6A00                       		bpl.s	loc_92B6
0000AAA0 4268 0010                  		clr.w	obVelX(a0)
0000AAA4 4268 0032                  		clr.w	$32(a0)
0000AAA8 6100 0000                  		bsr.w	SpeedToPos
0000AAAC 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AAB2 6100 0000                  		bsr.w	loc_93C4
0000AAB6 6100 0000                  		bsr.w	loc_93EC
0000AABA 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AABE 6A00                       		bpl.s	loc_92B6
0000AAC0 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AAC6 5228 001A                  		addq.b	#1,obFrame(a0)
0000AACA 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AAD0                            
0000AAD0                            loc_92B6:
0000AAD0 6000 FF6C                  		bra.w	loc_9224
0000AAD4                            ; ===========================================================================
0000AAD4                            
0000AAD4                            loc_92BA:
0000AAD4 6100 0000                  		bsr.w	sub_9404
0000AAD8 6A00                       		bpl.s	loc_9310
0000AADA 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AAE0 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AAE6 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000AAEC 6000 FEB0                  		bra.w	loc_9184
0000AAF0                            ; ===========================================================================
0000AAF0                            
0000AAF0                            loc_92D6:
0000AAF0 6100 0000                  		bsr.w	ObjectFall
0000AAF4 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AAFA 4A68 0012                  		tst.w	obVelY(a0)
0000AAFE 6B00                       		bmi.s	loc_9310
0000AB00 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AB06 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AB0C 4A41                       		tst.w	d1
0000AB0E 6A00                       		bpl.s	loc_9310
0000AB10 4628 0029                  		not.b	$29(a0)
0000AB14 6600                       		bne.s	loc_9306
0000AB16 4468 0010                  		neg.w	obVelX(a0)
0000AB1A 0868 0000 0001             		bchg	#0,obRender(a0)
0000AB20                            
0000AB20                            loc_9306:
0000AB20 D368 000C                  		add.w	d1,obY(a0)
0000AB24 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AB2A                            
0000AB2A                            loc_9310:
0000AB2A 6000 FF12                  		bra.w	loc_9224
0000AB2E                            ; ===========================================================================
0000AB2E                            
0000AB2E                            loc_9314:
0000AB2E 6100 0000                  		bsr.w	sub_9404
0000AB32 6A00                       		bpl.s	loc_932E
0000AB34 4268 0010                  		clr.w	obVelX(a0)
0000AB38 4268 0032                  		clr.w	$32(a0)
0000AB3C 6100 0000                  		bsr.w	ObjectFall
0000AB40 6100 0000                  		bsr.w	loc_93C4
0000AB44 6100 0000                  		bsr.w	loc_93EC
0000AB48                            
0000AB48                            loc_932E:
0000AB48 6000 FEF4                  		bra.w	loc_9224
0000AB4C                            ; ===========================================================================
0000AB4C                            
0000AB4C                            loc_9332:
0000AB4C 6100 0000                  		bsr.w	sub_9404
0000AB50 6A00                       		bpl.s	loc_936C
0000AB52 6100 0000                  		bsr.w	ObjectFall
0000AB56 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AB5C 4A68 0012                  		tst.w	obVelY(a0)
0000AB60 6B00                       		bmi.s	loc_936C
0000AB62 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AB68 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AB6E 4A41                       		tst.w	d1
0000AB70 6A00                       		bpl.s	loc_936C
0000AB72 4468 0010                  		neg.w	obVelX(a0)
0000AB76 0868 0000 0001             		bchg	#0,obRender(a0)
0000AB7C D368 000C                  		add.w	d1,obY(a0)
0000AB80 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AB86                            
0000AB86                            loc_936C:
0000AB86 6000 FEB6                  		bra.w	loc_9224
0000AB8A                            ; ===========================================================================
0000AB8A                            
0000AB8A                            loc_9370:
0000AB8A 6100 0000                  		bsr.w	sub_9404
0000AB8E 6A00                       		bpl.s	loc_93C0
0000AB90 6100 0000                  		bsr.w	SpeedToPos
0000AB94 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AB9A 4A68 0012                  		tst.w	obVelY(a0)
0000AB9E 6B00                       		bmi.s	loc_93AA
0000ABA0 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000ABA6 4A41                       		tst.w	d1
0000ABA8 6A00                       		bpl.s	loc_93AA
0000ABAA 4628 0029                  		not.b	$29(a0)
0000ABAE 6600                       		bne.s	loc_93A0
0000ABB0 4468 0010                  		neg.w	obVelX(a0)
0000ABB4 0868 0000 0001             		bchg	#0,obRender(a0)
0000ABBA                            
0000ABBA                            loc_93A0:
0000ABBA D368 000C                  		add.w	d1,obY(a0)
0000ABBE 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ABC4                            
0000ABC4                            loc_93AA:
0000ABC4 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000ABC8 6A00                       		bpl.s	loc_93C0
0000ABCA 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000ABD0 5228 001A                  		addq.b	#1,obFrame(a0)
0000ABD4 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000ABDA                            
0000ABDA                            loc_93C0:
0000ABDA 6000 FE62                  		bra.w	loc_9224
0000ABDE                            ; ===========================================================================
0000ABDE                            
0000ABDE                            loc_93C4:
0000ABDE 117C 0001 001A             		move.b	#1,obFrame(a0)
0000ABE4 4A68 0012                  		tst.w	obVelY(a0)
0000ABE8 6B00                       		bmi.s	locret_93EA
0000ABEA 117C 0000 001A             		move.b	#0,obFrame(a0)
0000ABF0 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000ABF6 4A41                       		tst.w	d1
0000ABF8 6A00                       		bpl.s	locret_93EA
0000ABFA D368 000C                  		add.w	d1,obY(a0)
0000ABFE 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AC04                            
0000AC04                            locret_93EA:
0000AC04 4E75                       		rts	
0000AC06                            ; ===========================================================================
0000AC06                            
0000AC06                            loc_93EC:
0000AC06 08E8 0000 0001             		bset	#0,obRender(a0)
0000AC0C 3028 0008                  		move.w	obX(a0),d0
0000AC10 9078 D008                  		sub.w	(v_player+obX).w,d0
0000AC14 6400                       		bcc.s	locret_9402
0000AC16 08A8 0000 0001             		bclr	#0,obRender(a0)
0000AC1C                            
0000AC1C                            locret_9402:
0000AC1C 4E75                       		rts	
0000AC1E                            
0000AC1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AC1E                            
0000AC1E                            
0000AC1E                            sub_9404:
0000AC1E 3038 D008                  		move.w	(v_player+obX).w,d0
0000AC22 9068 0008                  		sub.w	obX(a0),d0
0000AC26 0440 00B8                  		subi.w	#$B8,d0
0000AC2A 4E75                       		rts	
0000AC2C                            ; End of function sub_9404
0000AC2C                            ; End of function sub_9404
0000AC2C                            		include	"_incObj\29 Points.asm"
0000AC2C                            ; ---------------------------------------------------------------------------
0000AC2C                            ; Object 29 - points that appear when you destroy something
0000AC2C                            ; ---------------------------------------------------------------------------
0000AC2C                            
0000AC2C                            Points:
0000AC2C 7000                       		moveq	#0,d0
0000AC2E 1028 0024                  		move.b	obRoutine(a0),d0
0000AC32 323B 0000                  		move.w	Poi_Index(pc,d0.w),d1
0000AC36 4EBB 1000                  		jsr	Poi_Index(pc,d1.w)
0000AC3A 6000 0000                  		bra.w	DisplaySprite
0000AC3E                            ; ===========================================================================
0000AC3E 0000                       Poi_Index:	dc.w Poi_Main-Poi_Index
0000AC40 0000                       		dc.w Poi_Slower-Poi_Index
0000AC42                            ; ===========================================================================
0000AC42                            
0000AC42                            Poi_Main:	; Routine 0
0000AC42 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AC46 217C 0000 0000 0004        		move.l	#Map_Poi,obMap(a0)
0000AC4E 317C 256D 0002             		move.w	#$256D,obGfx(a0)
0000AC54 117C 0004 0001             		move.b	#4,obRender(a0)
0000AC5A 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000AC60 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AC66 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; move object upwards
0000AC6C                            
0000AC6C                            Poi_Slower:	; Routine 2
0000AC6C 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000AC70 6A00 0000                  		bpl.w	DeleteObject	; if not, delete
0000AC74 6100 0000                  		bsr.w	SpeedToPos
0000AC78 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000AC7E 4E75                       		rts	
0000AC7E 4E75                       		rts	
0000AC80                            Map_Animal1:	include	"_maps\Animals 1.asm"
0000AC80                            ; ---------------------------------------------------------------------------
0000AC80                            ; Sprite mappings - animals
0000AC80                            ; ---------------------------------------------------------------------------
0000AC80                            Map_Animal1_internal:
0000AC80 0000                       		dc.w byte_9472-Map_Animal1_internal
0000AC82 0000                       		dc.w byte_9478-Map_Animal1_internal
0000AC84 0000                       		dc.w byte_946C-Map_Animal1_internal
0000AC86 01                         byte_946C:	dc.b 1
0000AC87 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AC8C 01                         byte_9472:	dc.b 1
0000AC8D F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000AC92 01                         byte_9478:	dc.b 1
0000AC93 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000AC98                            		even
0000AC98                            		even
0000AC98                            Map_Animal2:	include	"_maps\Animals 2.asm"
0000AC98                            ; ---------------------------------------------------------------------------
0000AC98                            ; Sprite mappings - animals
0000AC98                            ; ---------------------------------------------------------------------------
0000AC98                            Map_Animal2_internal:
0000AC98 0000                       		dc.w byte_948A-Map_Animal2_internal
0000AC9A 0000                       		dc.w byte_9490-Map_Animal2_internal
0000AC9C 0000                       		dc.w byte_9484-Map_Animal2_internal
0000AC9E 01                         byte_9484:	dc.b 1
0000AC9F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000ACA4 01                         byte_948A:	dc.b 1
0000ACA5 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000ACAA 01                         byte_9490:	dc.b 1
0000ACAB FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000ACB0                            		even
0000ACB0                            		even
0000ACB0                            Map_Animal3:	include	"_maps\Animals 3.asm"
0000ACB0                            ; ---------------------------------------------------------------------------
0000ACB0                            ; Sprite mappings - animals
0000ACB0                            ; ---------------------------------------------------------------------------
0000ACB0                            Map_Animal3_internal:
0000ACB0 0000                       		dc.w byte_94A2-Map_Animal3_internal
0000ACB2 0000                       		dc.w byte_94A8-Map_Animal3_internal
0000ACB4 0000                       		dc.w byte_949C-Map_Animal3_internal
0000ACB6 01                         byte_949C:	dc.b 1
0000ACB7 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000ACBC 01                         byte_94A2:	dc.b 1
0000ACBD FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000ACC2 01                         byte_94A8:	dc.b 1
0000ACC3 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000ACC8                            		even
0000ACC8                            		even
0000ACC8                            Map_Poi:	include	"_maps\Points.asm"
0000ACC8                            ; --------------------------------------------------------------------------------
0000ACC8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000ACC8                            ; --------------------------------------------------------------------------------
0000ACC8                            
0000ACC8                            SME_qLvsg:	
0000ACC8 0000 0000                  		dc.w SME_qLvsg_E-SME_qLvsg, SME_qLvsg_14-SME_qLvsg	
0000ACCC 0000 0000                  		dc.w SME_qLvsg_1A-SME_qLvsg, SME_qLvsg_20-SME_qLvsg	
0000ACD0 0000 0000                  		dc.w SME_qLvsg_26-SME_qLvsg, SME_qLvsg_2C-SME_qLvsg	
0000ACD4 0000                       		dc.w SME_qLvsg_37-SME_qLvsg	
0000ACD6 01                         SME_qLvsg_E:	dc.b 1	
0000ACD7 FC04 0000 F8               		dc.b $FC, 4, 0, 0, $F8	
0000ACDC 01                         SME_qLvsg_14:	dc.b 1	
0000ACDD FC04 0002 F8               		dc.b $FC, 4, 0, 2, $F8	
0000ACE2 01                         SME_qLvsg_1A:	dc.b 1	
0000ACE3 FC04 0004 F8               		dc.b $FC, 4, 0, 4, $F8	
0000ACE8 01                         SME_qLvsg_20:	dc.b 1	
0000ACE9 FC04 0006 F8               		dc.b $FC, 4, 0, 6, $F8	
0000ACEE 01                         SME_qLvsg_26:	dc.b 1	
0000ACEF FC00 0006 FC               		dc.b $FC, 0, 0, 6, $FC	
0000ACF4 02                         SME_qLvsg_2C:	dc.b 2	
0000ACF5 FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000ACFA FC04 0007 01               		dc.b $FC, 4, 0, 7, 1	
0000ACFF 02                         SME_qLvsg_37:	dc.b 2	
0000AD00 FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000AD05 FC04 0007 06               		dc.b $FC, 4, 0, 7, 6	
0000AD0A                            		even
0000AD0A                            		even
0000AD0A                            
0000AD0A                            		include	"_incObj\1F Crabmeat.asm"
0000AD0A                            ; ---------------------------------------------------------------------------
0000AD0A                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000AD0A                            ; ---------------------------------------------------------------------------
0000AD0A                            
0000AD0A                            Crabmeat:
0000AD0A 7000                       		moveq	#0,d0
0000AD0C 1028 0024                  		move.b	obRoutine(a0),d0
0000AD10 323B 0000                  		move.w	Crab_Index(pc,d0.w),d1
0000AD14 4EFB 1000                  		jmp	Crab_Index(pc,d1.w)
0000AD18                            ; ===========================================================================
0000AD18                            Crab_Index:
0000AD18 0000                       ptr_Crab_Main:		dc.w Crab_Main-Crab_Index
0000AD1A 0000                       ptr_Crab_Action:	dc.w Crab_Action-Crab_Index
0000AD1C 0000                       ptr_Crab_Delete:	dc.w Crab_Delete-Crab_Index
0000AD1E 0000                       ptr_Crab_BallMain:	dc.w Crab_BallMain-Crab_Index
0000AD20 0000                       ptr_Crab_BallMove:	dc.w Crab_BallMove-Crab_Index
0000AD22                            
0000AD22 =00000000                  id_Crab_Main:		equ ptr_Crab_Main-Crab_Index	; 0
0000AD22 =00000002                  id_Crab_Action:		equ ptr_Crab_Action-Crab_Index	; 2
0000AD22 =00000004                  id_Crab_Delete:		equ ptr_Crab_Delete-Crab_Index	; 4
0000AD22 =00000006                  id_Crab_BallMain:	equ ptr_Crab_BallMain-Crab_Index	; 6
0000AD22 =00000008                  id_Crab_BallMove:	equ ptr_Crab_BallMove-Crab_Index	; 8
0000AD22                            
0000AD22 =00000030                  crab_timedelay:	equ $30
0000AD22 =00000032                  crab_mode:	equ $32
0000AD22                            ; ===========================================================================
0000AD22                            
0000AD22                            Crab_Main:	; Routine 0
0000AD22 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000AD28 117C 0008 0017             		move.b	#8,obWidth(a0)
0000AD2E 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000AD36 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000AD3C 117C 0004 0001             		move.b	#4,obRender(a0)
0000AD42 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000AD48 117C 0006 0020             		move.b	#6,obColType(a0)
0000AD4E 117C 0015 0014             		move.b	#$15,obActWid(a0)
0000AD54 6100 0000                  		bsr.w	ObjectFall
0000AD58 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000AD5E 4A41                       		tst.w	d1
0000AD60 6A00                       		bpl.s	@floornotfound
0000AD62 D368 000C                  		add.w	d1,obY(a0)
0000AD66 1143 0026                  		move.b	d3,obAngle(a0)
0000AD6A 317C 0000 0012             		move.w	#0,obVelY(a0)
0000AD70 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AD74                            
0000AD74                            	@floornotfound:
0000AD74 4E75                       		rts	
0000AD76                            ; ===========================================================================
0000AD76                            
0000AD76                            Crab_Action:	; Routine 2
0000AD76 7000                       		moveq	#0,d0
0000AD78 1028 0025                  		move.b	ob2ndRout(a0),d0
0000AD7C 323B 0000                  		move.w	@index(pc,d0.w),d1
0000AD80 4EBB 1000                  		jsr	@index(pc,d1.w)
0000AD84 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000AD8A 6100 0000                  		bsr.w	AnimateSprite
0000AD8E 6000 0000                  		bra.w	RememberState
0000AD92                            ; ===========================================================================
0000AD92 0000                       @index:		dc.w @waittofire-@index
0000AD94 0000                       		dc.w @walkonfloor-@index
0000AD96                            ; ===========================================================================
0000AD96                            
0000AD96                            @waittofire:
0000AD96 5368 0030                  		subq.w	#1,crab_timedelay(a0) ; subtract 1 from time delay
0000AD9A 6A00                       		bpl.s	@dontmove
0000AD9C 4A28 0001                  		tst.b	obRender(a0)
0000ADA0 6A00                       		bpl.s	@movecrab
0000ADA2 0868 0001 0032             		bchg	#1,crab_mode(a0)
0000ADA8 6600                       		bne.s	@fire
0000ADAA                            
0000ADAA                            	@movecrab:
0000ADAA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000ADAE 317C 007F 0030             		move.w	#127,crab_timedelay(a0) ; set time delay to approx 2 seconds
0000ADB4 317C 0080 0010             		move.w	#$80,obVelX(a0)	; move Crabmeat	to the right
0000ADBA 6100 0000                  		bsr.w	Crab_SetAni
0000ADBE 5600                       		addq.b	#3,d0
0000ADC0 1140 001C                  		move.b	d0,obAnim(a0)
0000ADC4 0868 0000 0022             		bchg	#0,obStatus(a0)
0000ADCA 6600                       		bne.s	@noflip
0000ADCC 4468 0010                  		neg.w	obVelX(a0)	; change direction
0000ADD0                            
0000ADD0                            	@dontmove:
0000ADD0                            	@noflip:
0000ADD0 4E75                       		rts	
0000ADD2                            ; ===========================================================================
0000ADD2                            
0000ADD2                            @fire:
0000ADD2 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000ADD8 117C 0006 001C             		move.b	#6,obAnim(a0)	; use firing animation
0000ADDE 6100 0000                  		bsr.w	FindFreeObj
0000ADE2 6600                       		bne.s	@failleft
0000ADE4 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load left fireball
0000ADE8 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000ADEE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000ADF4 0469 0010 0008             		subi.w	#$10,obX(a1)
0000ADFA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000AE00 337C FF00 0010             		move.w	#-$100,obVelX(a1)
0000AE06                            
0000AE06                            	@failleft:
0000AE06 6100 0000                  		bsr.w	FindFreeObj
0000AE0A 6600                       		bne.s	@failright
0000AE0C 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load right fireball
0000AE10 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000AE16 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000AE1C 0669 0010 0008             		addi.w	#$10,obX(a1)
0000AE22 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000AE28 337C 0100 0010             		move.w	#$100,obVelX(a1)
0000AE2E                            
0000AE2E                            	@failright:
0000AE2E 4E75                       		rts	
0000AE30                            ; ===========================================================================
0000AE30                            
0000AE30                            @walkonfloor:
0000AE30 5368 0030                  		subq.w	#1,crab_timedelay(a0)
0000AE34 6B00                       		bmi.s	loc_966E
0000AE36 6100 0000                  		bsr.w	SpeedToPos
0000AE3A 0868 0000 0032             		bchg	#0,crab_mode(a0)
0000AE40 6600                       		bne.s	loc_9654
0000AE42 3628 0008                  		move.w	obX(a0),d3
0000AE46 0643 0010                  		addi.w	#$10,d3
0000AE4A 0828 0000 0022             		btst	#0,obStatus(a0)
0000AE50 6700                       		beq.s	loc_9640
0000AE52 0443 0020                  		subi.w	#$20,d3
0000AE56                            
0000AE56                            loc_9640:
0000AE56 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000AE5C 0C41 FFF8                  		cmpi.w	#-8,d1
0000AE60 6D00                       		blt.s	loc_966E
0000AE62 0C41 000C                  		cmpi.w	#$C,d1
0000AE66 6C00                       		bge.s	loc_966E
0000AE68 4E75                       		rts	
0000AE6A                            ; ===========================================================================
0000AE6A                            
0000AE6A                            loc_9654:
0000AE6A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AE70 D368 000C                  		add.w	d1,obY(a0)
0000AE74 1143 0026                  		move.b	d3,obAngle(a0)
0000AE78 6100 0000                  		bsr.w	Crab_SetAni
0000AE7C 5600                       		addq.b	#3,d0
0000AE7E 1140 001C                  		move.b	d0,obAnim(a0)
0000AE82 4E75                       		rts	
0000AE84                            ; ===========================================================================
0000AE84                            
0000AE84                            loc_966E:
0000AE84 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000AE88 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000AE8E 317C 0000 0010             		move.w	#0,obVelX(a0)
0000AE94 6100 0000                  		bsr.w	Crab_SetAni
0000AE98 1140 001C                  		move.b	d0,obAnim(a0)
0000AE9C 4E75                       		rts	
0000AE9E                            ; ---------------------------------------------------------------------------
0000AE9E                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000AE9E                            ; ---------------------------------------------------------------------------
0000AE9E                            
0000AE9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AE9E                            
0000AE9E                            
0000AE9E                            Crab_SetAni:
0000AE9E 7000                       		moveq	#0,d0
0000AEA0 1628 0026                  		move.b	obAngle(a0),d3
0000AEA4 6B00                       		bmi.s	loc_96A4
0000AEA6 0C03 0006                  		cmpi.b	#6,d3
0000AEAA 6500                       		bcs.s	locret_96A2
0000AEAC 7001                       		moveq	#1,d0
0000AEAE 0828 0000 0022             		btst	#0,obStatus(a0)
0000AEB4 6600                       		bne.s	locret_96A2
0000AEB6 7002                       		moveq	#2,d0
0000AEB8                            
0000AEB8                            locret_96A2:
0000AEB8 4E75                       		rts	
0000AEBA                            ; ===========================================================================
0000AEBA                            
0000AEBA                            loc_96A4:
0000AEBA 0C03 00FA                  		cmpi.b	#-6,d3
0000AEBE 6200                       		bhi.s	locret_96B6
0000AEC0 7002                       		moveq	#2,d0
0000AEC2 0828 0000 0022             		btst	#0,obStatus(a0)
0000AEC8 6600                       		bne.s	locret_96B6
0000AECA 7001                       		moveq	#1,d0
0000AECC                            
0000AECC                            locret_96B6:
0000AECC 4E75                       		rts	
0000AECE                            ; End of function Crab_SetAni
0000AECE                            
0000AECE                            ; ===========================================================================
0000AECE                            
0000AECE                            Crab_Delete:	; Routine 4
0000AECE 6100 0000                  		bsr.w	DeleteObject
0000AED2 4E75                       		rts	
0000AED4                            ; ===========================================================================
0000AED4                            ; ---------------------------------------------------------------------------
0000AED4                            ; Sub-object - missile that the	Crabmeat throws
0000AED4                            ; ---------------------------------------------------------------------------
0000AED4                            
0000AED4                            Crab_BallMain:	; Routine 6
0000AED4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AED8 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000AEE0 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000AEE6 117C 0004 0001             		move.b	#4,obRender(a0)
0000AEEC 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000AEF2 117C 0087 0020             		move.b	#$87,obColType(a0)
0000AEF8 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AEFE 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000AF04 117C 0007 001C             		move.b	#7,obAnim(a0)
0000AF0A                            
0000AF0A                            Crab_BallMove:	; Routine 8
0000AF0A 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000AF10 6100 0000                  		bsr.w	AnimateSprite
0000AF14 6100 0000                  		bsr.w	ObjectFall
0000AF18 6100 0000                  		bsr.w	DisplaySprite
0000AF1C 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000AF20 0640 00E0                  		addi.w	#$E0,d0
0000AF24 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000AF28 6500                       		bcs.s	@delete		; if yes, branch
0000AF2A 4E75                       		rts	
0000AF2C                            
0000AF2C                            	@delete:
0000AF2C 6000 0000                  		bra.w	DeleteObject
0000AF2C 6000 0000                  		bra.w	DeleteObject
0000AF30                            		include	"_anim\Crabmeat.asm"
0000AF30                            ; ---------------------------------------------------------------------------
0000AF30                            ; Animation script - Crabmeat enemy
0000AF30                            ; ---------------------------------------------------------------------------
0000AF30 0000 0000 0000             Ani_Crab:	dc.w @stand-Ani_Crab, @standslope-Ani_Crab, @standsloperev-Ani_Crab
0000AF36 0000 0000 0000             		dc.w @walk-Ani_Crab, @walkslope-Ani_Crab, @walksloperev-Ani_Crab
0000AF3C 0000 0000                  		dc.w @firing-Ani_Crab, @ball-Ani_Crab
0000AF40 0F00 FF                    @stand:		dc.b $F, 0, afEnd
0000AF44 00                         		even
0000AF44 0F02 FF                    @standslope:	dc.b $F, 2, afEnd
0000AF48 00                         		even
0000AF48 0F22 FF                    @standsloperev:	dc.b $F, $22, afEnd
0000AF4C 00                         		even
0000AF4C 0F01 2100 FF               @walk:		dc.b $F, 1, $21, 0, afEnd
0000AF52 00                         		even
0000AF52 0F21 0302 FF               @walkslope:	dc.b $F, $21, 3, 2, afEnd
0000AF58 00                         		even
0000AF58 0F01 2322 FF               @walksloperev:	dc.b $F, 1, $23, $22, afEnd
0000AF5E 00                         		even
0000AF5E 0F04 FF                    @firing:	dc.b $F, 4, afEnd
0000AF62 00                         		even
0000AF62 0105 06FF                  @ball:		dc.b 1,	5, 6, afEnd
0000AF66                            		even
0000AF66                            		even
0000AF66                            Map_Crab:	include	"_maps\Crabmeat.asm"
0000AF66                            ; ---------------------------------------------------------------------------
0000AF66                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000AF66                            ; ---------------------------------------------------------------------------
0000AF66                            Map_Crab_internal:
0000AF66 0000                       		dc.w @stand-Map_Crab_internal
0000AF68 0000                       		dc.w @walk-Map_Crab_internal
0000AF6A 0000                       		dc.w @slope1-Map_Crab_internal
0000AF6C 0000                       		dc.w @slope2-Map_Crab_internal
0000AF6E 0000                       		dc.w @firing-Map_Crab_internal
0000AF70 0000                       		dc.w @ball1-Map_Crab_internal
0000AF72 0000                       		dc.w @ball2-Map_Crab_internal
0000AF74 04                         @stand:		dc.b 4
0000AF75 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8	; standing/middle walking frame
0000AF7A F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000AF7F 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000AF84 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000AF89 04                         @walk:		dc.b 4
0000AF8A F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8	; walking
0000AF8F F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000AF94 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000AF99 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000AF9E 04                         @slope1:	dc.b 4
0000AF9F EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8	; walking on slope
0000AFA4 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000AFA9 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000AFAE FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000AFB3 04                         @slope2:	dc.b 4
0000AFB4 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8	; walking on slope
0000AFB9 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000AFBE FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000AFC3 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000AFC8 06                         @firing:	dc.b 6
0000AFC9 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0 ; firing projectiles
0000AFCE F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000AFD3 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000AFD8 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000AFDD 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000AFE2 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000AFE7 01                         @ball1:		dc.b 1
0000AFE8 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8 ; projectile
0000AFED 01                         @ball2:		dc.b 1
0000AFEE F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8 ; projectile
0000AFF4 00                         		even
0000AFF4 00                         		even
0000AFF4                            		include	"_incObj\06 Mozzietron.asm"
0000AFF4                            ; ===========================================================================
0000AFF4                            ; ---------------------------------------------------------------------------
0000AFF4                            ; Object 06 - Mozzietron enemy	(GHZ)
0000AFF4                            ; ---------------------------------------------------------------------------
0000AFF4                            
0000AFF4                            Mozzietron:					; XREF: Obj_Index
0000AFF4 7000                       		moveq	#0,d0
0000AFF6 1028 0024                  		move.b	$24(a0),d0
0000AFFA 323B 0000                  		move.w	MozIndex(pc,d0.w),d1
0000AFFE 4EFB 1000                  		jmp	MozIndex(pc,d1.w)
0000B002                            ; ===========================================================================
0000B002 0000                       MozIndex:	dc.w MozMain-MozIndex
0000B004 0000                       		dc.w MozAction-MozIndex
0000B006 0000                       		dc.w MozDelete-MozIndex
0000B008                            ; ===========================================================================
0000B008                            
0000B008                            MozMain:				; XREF: MozIndex
0000B008 5428 0024                  		addq.b	#2,$24(a0)
0000B00C 217C 0000 0000 0004        		move.l	#Map_Mozzietron,4(a0)
0000B014 317C 0444 0002             		move.w	#$444,2(a0)
0000B01A 117C 0004 0001             		move.b	#4,1(a0)
0000B020 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B026 117C 0005 0020             		move.b	#5,$20(a0) ; hit box
0000B02C 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B032                            MozAction:				; XREF: MozIndex
0000B032 7000                       		moveq	#0,d0
0000B034 1028 0025                  		move.b	$25(a0),d0
0000B038 323B 0000                  		move.w	MozIndex2(pc,d0.w),d1
0000B03C 4EBB 1000                  		jsr	MozIndex2(pc,d1.w)
0000B040 43F9 0000 0000             		lea	(Ani_Mozzietron).l,a1
0000B046 6100 0000                  		bsr.w	AnimateSprite
0000B04A 6000 0000                  		bra.w	RememberState
0000B04E                            ; ===========================================================================
0000B04E 0000                       MozIndex2:	dc.w MozMove-MozIndex2
0000B050 0000                       		dc.w MozChkNrSonic-MozIndex2
0000B052 0000                       		dc.w MozPinned-MozIndex2
0000B054                            ; ===========================================================================
0000B054                            
0000B054                            MozMove:				; XREF: MozIndex2
0000B054 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B058 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000B05A 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000B060 6600                       		bne.s	MozFire	; if yes, branch
0000B062 5428 0025                  		addq.b	#2,$25(a0)
0000B066 317C 0064 0032             		move.w	#100,$32(a0)	; set time delay to just over 2	seconds
0000B06C 317C 0100 0010             		move.w	#$100,$10(a0)	; move Buzz Bomber to the right
0000B072 117C 0000 001C             		move.b	#0,$1C(a0)	; use "flying" animation
0000B078 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000B07E 6600                       		bne.s	locret_986C	; if not, branch
0000B080 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000B084                            
0000B084                            locret_986C:
0000B084 4E75                       		rts	
0000B086                            ; ===========================================================================
0000B086                            
0000B086                            MozFire:				; XREF: MozMove
0000B086 117C 0002 001C             		move.b	#2,$1C(a0)	; use "diving" animation
0000B08C 6100 0000                  		bsr.w	ObjectFall
0000B090 4EB9 0000 0000             		jsr     ObjFloorDist ; check distance between object and floor
0000B096 4A41                       		tst.w	d1 ; is floor distance positive? 
0000B098 6A00                       		bpl.s   @return ; if yes, branch 
0000B09A 303C 00B6                  		move.w    #$B6,d0
0000B09E 4EB9 0000 12A0             		jsr    (PlaySound_Special).l ;    play "spikes moving" sound
0000B0A4 117C 0004 0025             		move.b #4,$25(a0) ; set 2nd state to pinned
0000B0AA D368 000C                  		add.w	d1,$C(a0) ; snap to the ground
0000B0AE 4268 0012                  		clr.w	$12(a0) ; clear Y Velocity 
0000B0B2 4228 0015                  		clr.b	$15(a0) ; $15(a0) is unused in this object, except this line
0000B0B6                            		@return:
0000B0B6 4E75                       	    		rts
0000B0B8                            		
0000B0B8                            
0000B0B8                            ; ===========================================================================
0000B0B8                            
0000B0B8                            MozPinned:
0000B0B8 4E75                               rts
0000B0BA                                    
0000B0BA                            ; ===========================================================================
0000B0BA                            
0000B0BA                            MozChkDel:				; XREF: Obj55_DropFly
0000B0BA 4A28 0001                  		tst.b	1(a0)
0000B0BE 6A00 0000                  		bpl.w	DeleteObject
0000B0C2 4E75                       		rts	
0000B0C4                            ; ===========================================================================
0000B0C4                            
0000B0C4                            MozChkNrSonic:			; XREF: MozIndex2
0000B0C4                            ;		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B0C4 6B00                       		bmi.s	MozChgDir
0000B0C6 6100 0000                  		bsr.w	SpeedToPos
0000B0CA 4A28 0034                  		tst.b	$34(a0)
0000B0CE 6600                       		bne.s	locret_992A
0000B0D0 3038 D008                  		move.w	($FFFFD008).w,d0
0000B0D4 9068 0008                  		sub.w	8(a0),d0
0000B0D8 6A00                       		bpl.s	MozSetNrSonic
0000B0DA 4440                       		neg.w	d0
0000B0DC                            
0000B0DC                            MozSetNrSonic:
0000B0DC 0C40 0005                  		cmpi.w	#$05,d0		; is Buzz Bomber within	$05 pixels of Sonic?
0000B0E0 6400                       		bcc.s	locret_992A	; if not, branch
0000B0E2 4A28 0001                  		tst.b	1(a0)
0000B0E6 6A00                       		bpl.s	locret_992A
0000B0E8 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000B0EE 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000B0F4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000B0FA 6000                       		bra.s	MozStop
0000B0FC                            ; ===========================================================================
0000B0FC                            
0000B0FC                            MozChgDir:				; XREF: MozChkNrSonic
0000B0FC 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000B102 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000B108 317C 003B 0032             		move.w	#59,$32(a0)
0000B10E                            
0000B10E                            MozStop:				; XREF: MozSetNrSonic
0000B10E 5528 0025                  		subq.b	#2,$25(a0)	; run "MozFire" routine
0000B112 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000B118 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000B11E                            
0000B11E                            locret_992A:
0000B11E 4E75                       		rts	
0000B120                            ; ===========================================================================
0000B120                            
0000B120                            MozDelete:				; XREF: MozIndex
0000B120 6100 0000                  		bsr.w	DeleteObject
0000B124 4E75                       		rts	
0000B124 4E75                       		rts	
0000B126                            		include	"_incObj\22 Buzz Bomber.asm"
0000B126                            ; ===========================================================================
0000B126                            ; ---------------------------------------------------------------------------
0000B126                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000B126                            ; ---------------------------------------------------------------------------
0000B126                            
0000B126                            BuzzBomber:
0000B126 7000                       		moveq	#0,d0
0000B128 1028 0024                  		move.b	obRoutine(a0),d0
0000B12C 323B 0000                  		move.w	Buzz_Index(pc,d0.w),d1
0000B130 4EFB 1000                  		jmp	Buzz_Index(pc,d1.w)
0000B134                            ; ===========================================================================
0000B134 0000                       Buzz_Index:	dc.w Buzz_Main-Buzz_Index
0000B136 0000                       		dc.w Buzz_Action-Buzz_Index
0000B138 0000                       		dc.w Buzz_Delete-Buzz_Index
0000B13A                            
0000B13A =00000032                  buzz_timedelay:	equ $32
0000B13A =00000034                  buzz_buzzstatus:	equ $34
0000B13A =0000003C                  buzz_parent:	equ $3C
0000B13A                            ; ===========================================================================
0000B13A                            
0000B13A                            Buzz_Main:	; Routine 0
0000B13A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B13E 217C 0000 0000 0004        		move.l	#Map_Buzz,obMap(a0)
0000B146 317C 0444 0002             		move.w	#$444,obGfx(a0)
0000B14C 117C 0004 0001             		move.b	#4,obRender(a0)
0000B152 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B158 117C 0008 0020             		move.b	#8,obColType(a0)
0000B15E 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B164                            
0000B164                            Buzz_Action:	; Routine 2
0000B164 7000                       		moveq	#0,d0
0000B166 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B16A 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B16E 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B172 43F9 0000 0000             		lea	(Ani_Buzz).l,a1
0000B178 6100 0000                  		bsr.w	AnimateSprite
0000B17C 6000 0000                  		bra.w	RememberState
0000B180                            ; ===========================================================================
0000B180 0000                       @index:		dc.w @move-@index
0000B182 0000                       		dc.w @chknearsonic-@index
0000B184                            ; ===========================================================================
0000B184                            
0000B184                            @move:
0000B184 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B188 6A00                       		bpl.s	@noflip		; if time remains, branch
0000B18A 0828 0001 0034             		btst	#1,buzz_buzzstatus(a0) ; is Buzz Bomber near Sonic?
0000B190 6600                       		bne.s	@fire		; if yes, branch
0000B192 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B196 317C 007F 0032             		move.w	#127,buzz_timedelay(a0) ; set time delay to just over 2 seconds
0000B19C 317C 0400 0010             		move.w	#$400,obVelX(a0) ; move Buzz Bomber to the right
0000B1A2 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "flying" animation
0000B1A8 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B1AE 6600                       		bne.s	@noflip		; if not, branch
0000B1B0 4468 0010                  		neg.w	obVelX(a0)	; move Buzz Bomber to the left
0000B1B4                            
0000B1B4                            	@noflip:
0000B1B4 4E75                       		rts	
0000B1B6                            ; ===========================================================================
0000B1B6                            
0000B1B6                            	@fire:
0000B1B6 6100 0000                  		bsr.w	FindFreeObj
0000B1BA 6600                       		bne.s	@fail
0000B1BC 12BC 0000                  		move.b	#id_Missile,0(a1) ; load missile object
0000B1C0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B1C6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B1CC 0669 001C 000C             		addi.w	#$1C,obY(a1)
0000B1D2 337C 0200 0012             		move.w	#$200,obVelY(a1) ; move missile downwards
0000B1D8 337C 0200 0010             		move.w	#$200,obVelX(a1) ; move missile to the right
0000B1DE 303C 0018                  		move.w	#$18,d0
0000B1E2 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B1E8 6600                       		bne.s	@noflip2	; if not, branch
0000B1EA 4440                       		neg.w	d0
0000B1EC 4469 0010                  		neg.w	obVelX(a1)	; move missile to the left
0000B1F0                            
0000B1F0                            	@noflip2:
0000B1F0 D169 0008                  		add.w	d0,obX(a1)
0000B1F4 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0000B1FA 337C 000E 0032             		move.w	#$E,buzz_timedelay(a1)
0000B200 2348 003C                  		move.l	a0,buzz_parent(a1)
0000B204 117C 0001 0034             		move.b	#1,buzz_buzzstatus(a0) ; set to "already fired" to prevent refiring
0000B20A 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B210 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "firing" animation
0000B216                            
0000B216                            	@fail:
0000B216 4E75                       		rts	
0000B218                            ; ===========================================================================
0000B218                            
0000B218                            @chknearsonic:
0000B218 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B21C 6B00                       		bmi.s	@chgdirection
0000B21E 6100 0000                  		bsr.w	SpeedToPos
0000B222 4A28 0034                  		tst.b	buzz_buzzstatus(a0)
0000B226 6600                       		bne.s	@keepgoing
0000B228 3038 D008                  		move.w	(v_player+obX).w,d0
0000B22C 9068 0008                  		sub.w	obX(a0),d0
0000B230 6A00                       		bpl.s	@isleft
0000B232 4440                       		neg.w	d0
0000B234                            
0000B234                            	@isleft:
0000B234 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000B238 6400                       		bcc.s	@keepgoing	; if not, branch
0000B23A 4A28 0001                  		tst.b	obRender(a0)
0000B23E 6A00                       		bpl.s	@keepgoing
0000B240 117C 0002 0034             		move.b	#2,buzz_buzzstatus(a0) ; set Buzz Bomber to "near Sonic"
0000B246 317C 001D 0032             		move.w	#29,buzz_timedelay(a0) ; set time delay to half a second
0000B24C 6000                       		bra.s	@stop
0000B24E                            ; ===========================================================================
0000B24E                            
0000B24E                            	@chgdirection:
0000B24E 117C 0000 0034             		move.b	#0,buzz_buzzstatus(a0) ; set Buzz Bomber to "normal"
0000B254 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction
0000B25A 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B260                            
0000B260                            	@stop:
0000B260 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B264 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Buzz Bomber moving
0000B26A 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "hovering" animation
0000B270                            
0000B270                            @keepgoing:
0000B270 4E75                       		rts	
0000B272                            ; ===========================================================================
0000B272                            
0000B272                            Buzz_Delete:	; Routine 4
0000B272 6100 0000                  		bsr.w	DeleteObject
0000B276 4E75                       		rts	
0000B276 4E75                       		rts	
0000B278                            		include	"_incObj\23 Buzz Bomber Missile.asm"
0000B278                            ; ---------------------------------------------------------------------------
0000B278                            ; Object 23 - missile that Buzz	Bomber throws
0000B278                            ; ---------------------------------------------------------------------------
0000B278                            
0000B278                            Missile:
0000B278 7000                       		moveq	#0,d0
0000B27A 1028 0024                  		move.b	obRoutine(a0),d0
0000B27E 323B 0000                  		move.w	Msl_Index(pc,d0.w),d1
0000B282 4EFB 1000                  		jmp	Msl_Index(pc,d1.w)
0000B286                            ; ===========================================================================
0000B286 0000                       Msl_Index:	dc.w Msl_Main-Msl_Index
0000B288 0000                       		dc.w Msl_Animate-Msl_Index
0000B28A 0000                       		dc.w Msl_FromBuzz-Msl_Index
0000B28C 0000                       		dc.w Msl_Delete-Msl_Index
0000B28E 0000                       		dc.w Msl_FromNewt-Msl_Index
0000B290                            
0000B290 =0000003C                  msl_parent:	equ $3C
0000B290                            ; ===========================================================================
0000B290                            
0000B290                            Msl_Main:	; Routine 0
0000B290 5368 0032                  		subq.w	#1,$32(a0)
0000B294 6A00                       		bpl.s	Msl_ChkCancel
0000B296 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B29A 217C 0000 0000 0004        		move.l	#Map_Missile,obMap(a0)
0000B2A2 317C 2444 0002             		move.w	#$2444,obGfx(a0)
0000B2A8 117C 0004 0001             		move.b	#4,obRender(a0)
0000B2AE 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B2B4 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B2BA 0228 0003 0022             		andi.b	#3,obStatus(a0)
0000B2C0 4A28 0028                  		tst.b	obSubtype(a0)	; was object created by	a Newtron?
0000B2C4 6700                       		beq.s	Msl_Animate	; if not, branch
0000B2C6                            
0000B2C6 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Msl_FromNewt" routine
0000B2CC 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B2D2 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B2D8 6000                       		bra.s	Msl_Animate2
0000B2DA                            ; ===========================================================================
0000B2DA                            
0000B2DA                            Msl_Animate:	; Routine 2
0000B2DA 6100                       		bsr.s	Msl_ChkCancel
0000B2DC 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B2E2 6100 0000                  		bsr.w	AnimateSprite
0000B2E6 6000 0000                  		bra.w	DisplaySprite
0000B2EA                            
0000B2EA                            ; ---------------------------------------------------------------------------
0000B2EA                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000B2EA                            ; destroyed, and if it has, then cancel	the missile
0000B2EA                            ; ---------------------------------------------------------------------------
0000B2EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B2EA                            
0000B2EA                            
0000B2EA                            Msl_ChkCancel:
0000B2EA 2268 003C                  		movea.l	msl_parent(a0),a1
0000B2EE 0C11 0000                  		cmpi.b	#id_ExplosionItem,0(a1) ; has Buzz Bomber been destroyed?
0000B2F2 6700                       		beq.s	Msl_Delete	; if yes, branch
0000B2F4 4E75                       		rts	
0000B2F6                            ; End of function Msl_ChkCancel
0000B2F6                            
0000B2F6                            ; ===========================================================================
0000B2F6                            
0000B2F6                            Msl_FromBuzz:	; Routine 4
0000B2F6 0828 0007 0022             		btst	#7,obStatus(a0)
0000B2FC 6600                       		bne.s	@explode
0000B2FE 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B304 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B30A 6100 0000                  		bsr.w	SpeedToPos
0000B30E 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B314 6100 0000                  		bsr.w	AnimateSprite
0000B318 6100 0000                  		bsr.w	DisplaySprite
0000B31C 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B320 0640 00E0                  		addi.w	#$E0,d0
0000B324 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B328 6500                       		bcs.s	Msl_Delete	; if yes, branch
0000B32A 4E75                       		rts	
0000B32C                            ; ===========================================================================
0000B32C                            
0000B32C                            	@explode:
0000B32C 10BC 0000                  		move.b	#id_MissileDissolve,0(a0) ; change object to an explosion (Obj24)
0000B330 117C 0000 0024             		move.b	#0,obRoutine(a0)
0000B336 6000 F1D8                  		bra.w	MissileDissolve
0000B33A                            ; ===========================================================================
0000B33A                            
0000B33A                            Msl_Delete:	; Routine 6
0000B33A 6100 0000                  		bsr.w	DeleteObject
0000B33E 4E75                       		rts	
0000B340                            ; ===========================================================================
0000B340                            
0000B340                            Msl_FromNewt:	; Routine 8
0000B340 4A28 0001                  		tst.b	obRender(a0)
0000B344 6AF4                       		bpl.s	Msl_Delete
0000B346 6100 0000                  		bsr.w	SpeedToPos
0000B34A                            
0000B34A                            Msl_Animate2:
0000B34A 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B350 6100 0000                  		bsr.w	AnimateSprite
0000B354 6100 0000                  		bsr.w	DisplaySprite
0000B358 4E75                       		rts	
0000B358 4E75                       		rts	
0000B35A                            		include	"_anim\Mozzietron.asm"
0000B35A                            ; ---------------------------------------------------------------------------
0000B35A                            ; Animation script - Buzz Bomber enemy
0000B35A                            ; ---------------------------------------------------------------------------
0000B35A 0000                       Ani_Mozzietron:	dc.w byte_9A1E-Ani_Mozzietron;0
0000B35C 0000                       		dc.w byte_9A22-Ani_Mozzietron;1
0000B35E 0000                       		dc.w byte_9A26-Ani_Mozzietron;2
0000B360 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000B364 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000B368 0502 0304 05FE 01          byte_9A26:	dc.b 5, 2, 3, 4, 5, $FE, 1
0000B370 00                         		even
0000B370 00                         		even
0000B370                            		include	"_anim\Buzz Bomber.asm"
0000B370                            ; ---------------------------------------------------------------------------
0000B370                            ; Animation script - Buzz Bomber enemy
0000B370                            ; ---------------------------------------------------------------------------
0000B370 0000                       Ani_Buzz:	dc.w @fly1-Ani_Buzz
0000B372 0000                       		dc.w @fly2-Ani_Buzz
0000B374 0000                       		dc.w @fires-Ani_Buzz
0000B376 0100 01FF                  @fly1:		dc.b 1,	0, 1, afEnd
0000B37A 0102 03FF                  @fly2:		dc.b 1,	2, 3, afEnd
0000B37E 0104 05FF                  @fires:		dc.b 1,	4, 5, afEnd
0000B382                            		even
0000B382                            		even
0000B382                            		include	"_anim\Buzz Bomber Missile.asm"
0000B382                            ; ---------------------------------------------------------------------------
0000B382                            ; Animation script - missile that Buzz Bomber throws
0000B382                            ; ---------------------------------------------------------------------------
0000B382 0000                       Ani_Missile:	dc.w @flare-Ani_Missile
0000B384 0000                       		dc.w @missile-Ani_Missile
0000B386 0700 01FC                  @flare:		dc.b 7,	0, 1, afRoutine
0000B38A 0102 03FF                  @missile:	dc.b 1,	2, 3, afEnd
0000B38E                            		even
0000B38E                            		even
0000B38E                            Map_Mozzietron:	include	"_maps\Mozzietron.asm"
0000B38E                            ; --------------------------------------------------------------------------------
0000B38E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B38E                            ; --------------------------------------------------------------------------------
0000B38E                            
0000B38E                            SME_qvHIs:	
0000B38E 0000 0000                  		dc.w SME_qvHIs_C-SME_qvHIs, SME_qvHIs_17-SME_qvHIs	
0000B392 0000 0000                  		dc.w SME_qvHIs_1D-SME_qvHIs, SME_qvHIs_28-SME_qvHIs	
0000B396 0000 0000                  		dc.w SME_qvHIs_38-SME_qvHIs, SME_qvHIs_4D-SME_qvHIs	
0000B39A 02                         SME_qvHIs_C:	dc.b 2	
0000B39B FD0C 2000 F0               		dc.b $FD, $C, $20, 0, $F0	
0000B3A0 ED09 2004 F8               		dc.b $ED, 9, $20, 4, $F8	
0000B3A5 01                         SME_qvHIs_17:	dc.b 1	
0000B3A6 F80D 200A F0               		dc.b $F8, $D, $20, $A, $F0	
0000B3AB 02                         SME_qvHIs_1D:	dc.b 2	
0000B3AC E90A 2012 F8               		dc.b $E9, $A, $20, $12, $F8	
0000B3B1 F901 201B F0               		dc.b $F9, 1, $20, $1B, $F0	
0000B3B6 03                         SME_qvHIs_28:	dc.b 3	
0000B3B7 DF07 2025 FB               		dc.b $DF, 7, $20, $25, $FB	
0000B3BC E700 2030 0B               		dc.b $E7, 0, $20, $30, $B	
0000B3C1 FF00 002D FB               		dc.b $FF, 0, 0, $2D, $FB	
0000B3C6 04                         SME_qvHIs_38:	dc.b 4	
0000B3C7 E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B3CC F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B3D1 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B3D6 F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B3DB 04                         SME_qvHIs_4D:	dc.b 4	
0000B3DC E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B3E1 F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B3E6 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B3EB F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B3F0                            		even
0000B3F0                            		even
0000B3F0                            Map_Buzz:	include	"_maps\Buzz Bomber.asm"
0000B3F0                            ; --------------------------------------------------------------------------------
0000B3F0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B3F0                            ; --------------------------------------------------------------------------------
0000B3F0                            
0000B3F0                            SME_yccqJ:	
0000B3F0 0000 0000                  		dc.w SME_yccqJ_C-SME_yccqJ, SME_yccqJ_2B-SME_yccqJ	
0000B3F4 0000 0000                  		dc.w SME_yccqJ_4A-SME_yccqJ, SME_yccqJ_69-SME_yccqJ	
0000B3F8 0000 0000                  		dc.w SME_yccqJ_88-SME_yccqJ, SME_yccqJ_AC-SME_yccqJ	
0000B3FC 06                         SME_yccqJ_C:	dc.b 6	
0000B3FD F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B402 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B407 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B40C 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B411 EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B416 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B41B 06                         SME_yccqJ_2B:	dc.b 6	
0000B41C F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B421 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B426 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B42B 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B430 F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B435 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B43A 06                         SME_yccqJ_4A:	dc.b 6	
0000B43B F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B440 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B445 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B44A 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B44F EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B454 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B459 06                         SME_yccqJ_69:	dc.b 6	
0000B45A F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B45F F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B464 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B469 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B46E F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B473 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B478 07                         SME_yccqJ_88:	dc.b 7	
0000B479 F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B47E 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B483 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B488 EE04 201D 04               		dc.b $EE, 4, $20, $1D, 4	
0000B48D 0C00 200E FC               		dc.b $C, 0, $20, $E, $FC	
0000B492 0C00 200D F4               		dc.b $C, 0, $20, $D, $F4	
0000B497 EE08 201A EC               		dc.b $EE, 8, $20, $1A, $EC	
0000B49C 04                         SME_yccqJ_AC:	dc.b 4	
0000B49D F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B4A2 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B4A7 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B4AC 0C04 200D F4               		dc.b $C, 4, $20, $D, $F4	
0000B4B2 00                         		even
0000B4B2 00                         		even
0000B4B2                            Map_Missile:	include	"_maps\Buzz Bomber Missile.asm"
0000B4B2                            ; ---------------------------------------------------------------------------
0000B4B2                            ; Sprite mappings - missile that Buzz Bomber throws
0000B4B2                            ; ---------------------------------------------------------------------------
0000B4B2                            Map_Missile_internal:
0000B4B2 0000                       		dc.w @Flare1-Map_Missile_internal
0000B4B4 0000                       		dc.w @Flare2-Map_Missile_internal
0000B4B6 0000                       		dc.w @Ball1-Map_Missile_internal
0000B4B8 0000                       		dc.w @Ball2-Map_Missile_internal
0000B4BA 01                         @Flare1:	dc.b 1
0000B4BB F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8 ; buzz bomber firing flare
0000B4C0 01                         @Flare2:	dc.b 1
0000B4C1 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000B4C6 01                         @Ball1:		dc.b 1
0000B4C7 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8 ; missile itself
0000B4CC 01                         @Ball2:		dc.b 1
0000B4CD F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000B4D2                            		even
0000B4D2                            		even
0000B4D2                            
0000B4D2                            		include	"_incObj\25 & 37 Rings.asm"
0000B4D2                            ; ---------------------------------------------------------------------------
0000B4D2                            ; Object 25 - rings
0000B4D2                            ; ---------------------------------------------------------------------------
0000B4D2                            
0000B4D2                            Rings:
0000B4D2 7000                       		moveq	#0,d0
0000B4D4 1028 0024                  		move.b	obRoutine(a0),d0
0000B4D8 323B 0000                  		move.w	Ring_Index(pc,d0.w),d1
0000B4DC 4EFB 1000                  		jmp	Ring_Index(pc,d1.w)
0000B4E0                            ; ===========================================================================
0000B4E0                            Ring_Index:
0000B4E0 0000                       ptr_Ring_Main:		dc.w Ring_Main-Ring_Index
0000B4E2 0000                       ptr_Ring_Animate:	dc.w Ring_Animate-Ring_Index
0000B4E4 0000                       ptr_Ring_Collect:	dc.w Ring_Collect-Ring_Index
0000B4E6 0000                       ptr_Ring_Sparkle:	dc.w Ring_Sparkle-Ring_Index
0000B4E8 0000                       ptr_Ring_Delete:	dc.w Ring_Delete-Ring_Index
0000B4EA 0000                       ptr_Ring_Attract:	dc.w Ring_Attract-Ring_Index
0000B4EC 0000                       ptr_Ring_Collect1:	dc.w Ring_Collect-Ring_Index
0000B4EE 0000                       ptr_Ring_Sparkle1:	dc.w Ring_Sparkle-Ring_Index
0000B4F0 0000                       ptr_Ring_Delete1:	dc.w Ring_Delete-Ring_Index
0000B4F2                            
0000B4F2 =00000000                  id_Ring_Main:			equ ptr_Ring_Main-Ring_Index	; 0
0000B4F2 =00000002                  id_Ring_Animate:		equ ptr_Ring_Animate-Ring_Index	; 2
0000B4F2 =00000004                  id_Ring_Collect:		equ ptr_Ring_Collect-Ring_Index	; 4
0000B4F2 =00000006                  id_Ring_Sparkle:		equ ptr_Ring_Sparkle-Ring_Index	; 6
0000B4F2 =00000008                  id_Ring_Delete:			equ ptr_Ring_Delete-Ring_Index	; 8
0000B4F2 =0000000A                  id_Ring_Attract:		equ ptr_Ring_Attract-Ring_Index	; $A
0000B4F2 =00000004                  id_Ring_Collect1:		equ ptr_Ring_Collect-Ring_Index	; $C
0000B4F2 =00000006                  id_Ring_Sparkle1:		equ ptr_Ring_Sparkle-Ring_Index	; $E
0000B4F2 =00000008                  id_Ring_Delete1:		equ ptr_Ring_Delete-Ring_Index	; $10
0000B4F2                            ; ---------------------------------------------------------------------------
0000B4F2                            ; Distances between rings (format: horizontal, vertical)
0000B4F2                            ; ---------------------------------------------------------------------------
0000B4F2 1000                       Ring_PosData:	dc.b $10, 0		; horizontal tight
0000B4F4 1800                       		dc.b $18, 0		; horizontal normal
0000B4F6 2000                       		dc.b $20, 0		; horizontal wide
0000B4F8 0010                       		dc.b 0,	$10		; vertical tight
0000B4FA 0018                       		dc.b 0,	$18		; vertical normal
0000B4FC 0020                       		dc.b 0,	$20		; vertical wide
0000B4FE 1010                       		dc.b $10, $10		; diagonal
0000B500 1818                       		dc.b $18, $18
0000B502 2020                       		dc.b $20, $20
0000B504 F010                       		dc.b $F0, $10
0000B506 E818                       		dc.b $E8, $18
0000B508 E020                       		dc.b $E0, $20
0000B50A 1008                       		dc.b $10, 8
0000B50C 1810                       		dc.b $18, $10
0000B50E F008                       		dc.b $F0, 8
0000B510 E810                       		dc.b $E8, $10
0000B512                            ; ===========================================================================
0000B512                            
0000B512                            Ring_Main:	; Routine 0
0000B512 45F8 FC00                  		lea	(v_objstate).w,a2
0000B516 7000                       		moveq	#0,d0
0000B518 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B51C 45F2 0002                  		lea	2(a2,d0.w),a2
0000B520 1812                       		move.b	(a2),d4
0000B522 1228 0028                  		move.b	obSubtype(a0),d1
0000B526 1001                       		move.b	d1,d0
0000B528 0241 0007                  		andi.w	#7,d1
0000B52C 0C41 0007                  		cmpi.w	#7,d1
0000B530 6600                       		bne.s	loc_9B80
0000B532 7206                       		moveq	#6,d1
0000B534                            
0000B534                            	loc_9B80:
0000B534 4841                       		swap	d1
0000B536 323C 0000                  		move.w	#0,d1
0000B53A E808                       		lsr.b	#4,d0
0000B53C D040                       		add.w	d0,d0
0000B53E 1A3B 00B2                  		move.b	Ring_PosData(pc,d0.w),d5 ; load ring spacing data
0000B542 4885                       		ext.w	d5
0000B544 1C3B 00AD                  		move.b	Ring_PosData+1(pc,d0.w),d6
0000B548 4886                       		ext.w	d6
0000B54A 2248                       		movea.l	a0,a1
0000B54C 3428 0008                  		move.w	obX(a0),d2
0000B550 3628 000C                  		move.w	obY(a0),d3
0000B554 E20C                       		lsr.b	#1,d4
0000B556 6500                       		bcs.s	loc_9C02
0000B558 0892 0007                  		bclr	#7,(a2)
0000B55C 6000                       		bra.s	loc_9BBA
0000B55E                            ; ===========================================================================
0000B55E                            
0000B55E                            Ring_MakeRings:
0000B55E 4841                       		swap	d1
0000B560 E20C                       		lsr.b	#1,d4
0000B562 6500                       		bcs.s	loc_9C02
0000B564 0892 0007                  		bclr	#7,(a2)
0000B568 6100 0000                  		bsr.w	FindFreeObj
0000B56C 6600                       		bne.s	loc_9C0E
0000B56E                            
0000B56E                            loc_9BBA:
0000B56E 12BC 0000                  		move.b	#id_Rings,0(a1)	; load ring object
0000B572 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B576 3342 0008                  		move.w	d2,obX(a1)	; set x-axis position based on d2
0000B57A 3368 0008 0032             		move.w	obX(a0),$32(a1)
0000B580 3343 000C                  		move.w	d3,obY(a1)	; set y-axis position based on d3
0000B584 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B58C 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B592 137C 0004 0001             		move.b	#4,obRender(a1)
0000B598 337C 0100 0018             		move.w	#$100,obPriority(a1)
0000B59E 137C 0047 0020             		move.b	#$47,obColType(a1)
0000B5A4 137C 0008 0014             		move.b	#8,obActWid(a1)
0000B5AA 1368 0023 0023             		move.b	obRespawnNo(a0),obRespawnNo(a1)
0000B5B0 1341 0034                  		move.b	d1,$34(a1)
0000B5B4                            
0000B5B4                            loc_9C02:
0000B5B4 5241                       		addq.w	#1,d1
0000B5B6 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000B5B8 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000B5BA 4841                       		swap	d1
0000B5BC 51C9 FFA0                  		dbf	d1,Ring_MakeRings ; repeat for	number of rings
0000B5C0                            
0000B5C0                            loc_9C0E:
0000B5C0 0812 0000                  		btst	#0,(a2)
0000B5C4 6600 0000                  		bne.w	DeleteObject
0000B5C8                            
0000B5C8                            Ring_Animate:	; Routine 2
0000B5C8 4A38 FE2C                  		tst.b	(v_shield).w
0000B5CC 6700                       		beq.s	@skip
0000B5CE 4A28 0001                  		tst.b	obRender(a0)
0000B5D2 6A00                       		bpl.s	@skip
0000B5D4                            		
0000B5D4 43F8 D000                  		lea (v_player).w,a1
0000B5D8                            		
0000B5D8 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000B5DC 9068 0008                  		sub.w	obX(a0),d0
0000B5E0 6A00                       		bpl.s	@a1
0000B5E2 4440                       		neg.w	d0
0000B5E4                            		
0000B5E4                            	@a1:
0000B5E4 0C40 0040                  		cmpi.w	#$40,d0
0000B5E8 6200                       		bhi.s	@skip
0000B5EA                            		
0000B5EA 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000B5EE 9068 000C                  		sub.w	obY(a0),d0
0000B5F2 6A00                       		bpl.s	@a2
0000B5F4 4440                       		neg.w	d0
0000B5F6                            		
0000B5F6                            	@a2:
0000B5F6 0C40 0040                  		cmpi.w	#$40,d0
0000B5FA 6200                       		bhi.s	@skip
0000B5FC                            		
0000B5FC 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000B602 45F8 FC00                  		lea	(v_objstate).w,a2
0000B606 7000                       		moveq	#0,d0
0000B608 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B60C 1228 0034                  		move.b	$34(a0),d1
0000B610 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B614                            		
0000B614                            	@skip:
0000B614 1178 FEC5 001A             		move.b	(v_ani2_frame).w,obFrame(a0) ; set frame
0000B61A 6100 0000                  		bsr.w	DisplaySprite
0000B63A 4E75                       		rts	
0000B63C                            ; ===========================================================================
0000B63C                            
0000B63C                            Ring_Collect:	; Routine 4
0000B63C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B640 117C 0000 0020             		move.b	#0,obColType(a0)
0000B646 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000B64C 6100 0000                  		bsr.w	CollectRing
0000B650 45F8 FC00                  		lea	(v_objstate).w,a2
0000B654 7000                       		moveq	#0,d0
0000B656 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B65A 1228 0034                  		move.b	$34(a0),d1
0000B65E 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B662                            
0000B662                            Ring_Sparkle:	; Routine 6
0000B662 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000B668 6100 0000                  		bsr.w	AnimateSprite
0000B66C 6000 0000                  		bra.w	DisplaySprite
0000B670                            ; ===========================================================================
0000B670                            
0000B670                            Ring_Delete:	; Routine 8
0000B670 6000 0000                  		bra.w	DeleteObject
0000B674                            
0000B674                            Ring_Attract:	; Routine $A
0000B674 4A38 FE2C                  		tst.b	(v_shield).w
0000B678 6600                       		bne.s	@skip
0000B67A 10BC 0000                  		move.b	#id_RingLoss,0(a0)
0000B67E 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000B684 11FC 00FF FEC6             		move.b	#-1,(v_ani3_time).w
0000B68A 6000                       		bra.s	@display
0000B68C                            		
0000B68C                            	@skip:
0000B68C 323C 0030                  		move.w	#$30,d1	; horizontal
0000B690 3038 D008                  		move.w	(v_player+obX).w,d0
0000B694 B068 0008                  		cmp.w	obX(a0),d0
0000B698 6400                       		bcc.s	@a1
0000B69A 4441                       		neg.w	d1
0000B69C 4A68 0010                  		tst.w	obVelX(a0)
0000B6A0 6B00                       		bmi.s	@a2
0000B6A2 D241                       		add.w	d1,d1
0000B6A4 D241                       		add.w	d1,d1
0000B6A6 6000                       		bra.s	@a2
0000B6A8                            
0000B6A8                            	@a1:
0000B6A8 4A68 0010                  		tst.w	obVelX(a0)
0000B6AC 6A00                       		bpl.s	@a2
0000B6AE D241                       		add.w	d1,d1
0000B6B0 D241                       		add.w	d1,d1
0000B6B2                            
0000B6B2                            	@a2:
0000B6B2 D368 0010                  		add.w	d1,obVelX(a0)
0000B6B6 323C 0030                  		move.w	#$30,d1	; vertical
0000B6BA 3038 D00C                  		move.w	(v_player+obY).w,d0
0000B6BE B068 000C                  		cmp.w	obY(a0),d0
0000B6C2 6400                       		bcc.s	@a3
0000B6C4 4441                       		neg.w	d1
0000B6C6 4A68 0012                  		tst.w	obVelY(a0)
0000B6CA 6B00                       		bmi.s	@a4
0000B6CC D241                       		add.w	d1,d1
0000B6CE D241                       		add.w	d1,d1
0000B6D0 6000                       		bra.s	@a4
0000B6D2                            
0000B6D2                            	@a3:
0000B6D2 4A68 0012                  		tst.w	obVelY(a0)
0000B6D6 6A00                       		bpl.s	@a4
0000B6D8 D241                       		add.w	d1,d1
0000B6DA D241                       		add.w	d1,d1
0000B6DC                            
0000B6DC                            	@a4:
0000B6DC D368 0012                  		add.w	d1,obVelY(a0)
0000B6E0 6100 0000                  		bsr.w	SpeedToPos
0000B6E4                            		
0000B6E4                            	@display:
0000B6E4 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0) ; set frame
0000B6EA 6000 0000                  		bra.w	DisplaySprite
0000B6EE                            
0000B6EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B6EE                            
0000B6EE                            
0000B6EE                            CollectRing:
0000B6EE 5278 FE20                  		addq.w	#1,(v_rings).w	; add 1 to rings
0000B6F2 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the rings counter
0000B6F8 303C 0000                  		move.w	#sfx_Ring,d0	; play ring sound
0000B6FC 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; do you have < 100 rings?
0000B702 6500                       		bcs.s	@playsnd	; if yes, branch
0000B704 08F8 0001 FE1B             		bset	#1,(v_lifecount).w ; update lives counter
0000B70A 6700                       		beq.s	@got100
0000B70C 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; do you have < 200 rings?
0000B712 6500                       		bcs.s	@playsnd	; if yes, branch
0000B714 08F8 0002 FE1B             		bset	#2,(v_lifecount).w ; update lives counter
0000B71A 6600                       		bne.s	@playsnd
0000B71C                            
0000B71C                            	@got100:
0000B71C 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000B720 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000B724 303C 0000                  		move.w	#bgm_ExtraLife,d0 ; play extra life music
0000B728                            		
0000B728                            
0000B728                            	@playsnd:
0000B728 4EF9 0000 12A0             		jmp	(PlaySound_Special).l
0000B72E                            ; End of function CollectRing
0000B72E                            
0000B72E                            ; ===========================================================================
0000B72E                            ; ---------------------------------------------------------------------------
0000B72E                            ; Object 37 - rings flying out of Sonic	when he's hit
0000B72E                            ; ---------------------------------------------------------------------------
0000B72E                            
0000B72E                            RingLoss:
0000B72E 7000                       		moveq	#0,d0
0000B730 1028 0024                  		move.b	obRoutine(a0),d0
0000B734 323B 0000                  		move.w	RLoss_Index(pc,d0.w),d1
0000B738 4EFB 1000                  		jmp	RLoss_Index(pc,d1.w)
0000B73C                            ; ===========================================================================
0000B73C 0000                       RLoss_Index:	dc.w RLoss_Count-RLoss_Index
0000B73E 0000                       		dc.w RLoss_Bounce-RLoss_Index
0000B740 0000                       		dc.w RLoss_Collect-RLoss_Index
0000B742 0000                       		dc.w RLoss_Sparkle-RLoss_Index
0000B744 0000                       		dc.w RLoss_Delete-RLoss_Index
0000B746                            ; ===========================================================================
0000B746                            
0000B746                            RLoss_Count:	; Routine 0
0000B746 2248                       		movea.l	a0,a1
0000B748 7A00                       		moveq	#0,d5
0000B74A 3A38 FE20                  		move.w	(v_rings).w,d5	; check number of rings you have
0000B74E 47F9 0000 0000                     lea     SpillRingData,a3        ; load the address of the array in a3
0000B754 7018                               moveq   #24,d0                  ; lose a max of 24 rings
0000B756 45F8 D000                          lea     (v_player).w,a2    ; a2=character
0000B75A 082A 0006 0022                     btst    #6,obStatus(a2)           ; is Sonic underwater?
0000B760 6700                               beq.s   @cont                       ; if not, branch
0000B762 47F9 0000 0000                     lea    SpillRingData_Water,a3        ; load the UNDERWATER address of the array in a3
0000B768 7010                               moveq   #16,d0                   ; lose a max of 16 rings underwater
0000B76A                            @cont:
0000B76A BA40                               cmp.w   d0,d5
0000B76C 6500                               bcs.s   @belowmax
0000B76E 3A00                               move.w  d0,d5
0000B770                            
0000B770                            @belowmax:
0000B770 5345                               subq.w  #1,d5
0000B772 383C 0288                          move.w  #$288,d4
0000B776 6000                       		bra.s	@makerings
0000B778                            ; ===========================================================================
0000B778                            
0000B778                            	@loop:
0000B778 6100 0000                  		bsr.w	FindFreeObj
0000B77C 6600 0000                  		bne.w	@resetcounter
0000B780                            
0000B780                            @makerings:
0000B780 12BC 0000                  		move.b	#id_RingLoss,0(a1) ; load bouncing ring object
0000B784 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B788 137C 0008 0016             		move.b	#8,obHeight(a1)
0000B78E 137C 0008 0017             		move.b	#8,obWidth(a1)
0000B794 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B79A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B7A0 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B7A8 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B7AE 137C 0004 0001             		move.b	#4,obRender(a1)
0000B7B4 137C 0047 0020             		move.b	#$47,obColType(a1)
0000B7BA 137C 0008 0014             		move.b	#8,obActWid(a1)
0000B7C0 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000B7C4 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000B7C6 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000B7CA BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000B7CE 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000B7D0 E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000B7D2 E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000B7D4                            @skiphalvingvel:
0000B7D4 335B 0010                  		move.w  (a3)+,obVelX(a1)         ; move the data contained in the array to the x velocity and increment the address in a3
0000B7D8 335B 0012                  		move.w  (a3)+,obVelY(a1)         ; move the data contained in the array to the y velocity and increment the address in a3	
0000B7DC 51CD FF9A                  		dbf	d5,@loop	; repeat for number of rings (max 31)
0000B7E0                            
0000B7E0                            @resetcounter:
0000B7E0 31FC 0000 FE20             		move.w	#0,(v_rings).w	; reset number of rings to zero
0000B7E6 11FC 0080 FE1D             		move.b	#$80,(f_ringcount).w ; update ring counter
0000B7EC 11FC 0000 FE1B             		move.b	#0,(v_lifecount).w
0000B7F2 70FF                               moveq   #-1,d0                  ; Move #-1 to d0
0000B7F4 1140 001F                          move.b  d0,obDelayAni(a0)       ; Move d0 to new timer
0000B7F8 11C0 FEC6                          move.b  d0,(v_ani3_time).w      ; Move d0 to old timer (for animated purposes)
0000B806                            
0000B806                            RLoss_Bounce:	; Routine 2
0000B806 1178 FEC7 001A             		move.b	(v_ani3_frame).w,obFrame(a0)
0000B80C 6100 0000                  		bsr.w	SpeedToPos
0000B810 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000B816 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000B81A 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000B81C 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000B820 BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000B824 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000B826 0468 000E 0012             		subi.w	#$E,obVelY(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000B82C                            	@skipbounceslow:
0000B82C 6B00                       		bmi.s	@chkdel
0000B82E 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000B832 D007                       		add.b	d7,d0
0000B834 0200 0003                  		andi.b	#3,d0
0000B838 6600                       		bne.s	@chkdel
0000B83A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B840 4A41                       		tst.w	d1
0000B842 6A00                       		bpl.s	@chkdel
0000B844 D368 000C                  		add.w	d1,obY(a0)
0000B848 3028 0012                  		move.w	obVelY(a0),d0
0000B84C E440                       		asr.w	#2,d0
0000B84E 9168 0012                  		sub.w	d0,obVelY(a0)
0000B852 4468 0012                  		neg.w	obVelY(a0)
0000B856                            
0000B856                            	@chkdel:
0000B856 5328 001F                  		subq.b  #1,obDelayAni(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000B85A 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000B85E 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B862 0640 00E0                  		addi.w	#$E0,d0
0000B866 B068 000C                  		cmp.w	obY(a0),d0	   ; has object moved below level boundary?
0000B86A 6500 0000                  		bcs.w	RLoss_Delete	   ; if yes, branch
0000B86E 4A38 FE2C                  		tst.b	(v_shield).w
0000B872 6700                       		beq.s	@skip
0000B874 4A28 0001                  		tst.b	obRender(a0)
0000B878 6A00                       		bpl.s	@skip
0000B87A                            		
0000B87A 43F8 D000                  		lea (v_player).w,a1
0000B87E                            		
0000B87E 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000B882 9068 0008                  		sub.w	obX(a0),d0
0000B886 6A00                       		bpl.s	@a1
0000B888 4440                       		neg.w	d0
0000B88A                            		
0000B88A                            	@a1:
0000B88A 0C40 00A0                  		cmpi.w	#$A0,d0
0000B88E 6200                       		bhi.s	@skip
0000B890                            		
0000B890 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000B894 9068 000C                  		sub.w	obY(a0),d0
0000B898 6A00                       		bpl.s	@a2
0000B89A 4440                       		neg.w	d0
0000B89C                            		
0000B89C                            	@a2:
0000B89C 0C40 00A0                  		cmpi.w	#$A0,d0
0000B8A0 6200                       		bhi.s	@skip
0000B8A2                            		
0000B8A2 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000B8A8 10BC 0000                  		move.b	#id_Rings,0(a0)
0000B8AC                            		
0000B8AC                            	@skip:		
0000B8AC 43F8 AD80                          lea     v_spritequeue+$180,a1
0000B8B0 D2FC 0080                          adda.w  #$80,a1
0000B8B4 0C51 007E                          cmpi.w  #$7E,(a1)
0000B8B8 6400                               bcc.s   @cont
0000B8BA 5451                               addq.w  #2,(a1)
0000B8BC D2D1                               adda.w  (a1),a1
0000B8BE 3288                               move.w  a0,(a1)
0000B8C0                            		
0000B8C0                            	@cont:
0000B8C0 4E75                               rts		
0000B8C2                            ; ===========================================================================
0000B8C2                            
0000B8C2                            RLoss_Collect:	; Routine 4
0000B8C2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B8C6 117C 0000 0020             		move.b	#0,obColType(a0)
0000B8CC 6100 FE20                  		bsr.w	CollectRing
0000B8D0                            
0000B8D0                            RLoss_Sparkle:	; Routine 6
0000B8D0 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000B8D6 6100 0000                  		bsr.w	AnimateSprite
0000B8DA 43F8 AD80                  		lea     v_spritequeue+$180,a1
0000B8DE 0C51 007E                          cmpi.w  #$7E,(a1)
0000B8E2 6400                               bcc.s   @cont
0000B8E4 5451                               addq.w  #2,(a1)
0000B8E6 D2D1                               adda.w  (a1),a1
0000B8E8 3288                               move.w  a0,(a1)
0000B8EA                            			
0000B8EA                            	@cont:
0000B8EA 4E75                               rts
0000B8EC                            ; ===========================================================================
0000B8EC                            
0000B8EC                            RLoss_Delete:	; Routine 8
0000B8EC 6000 0000                  		bra.w	DeleteObject
0000B8F0                            
0000B8F0                            ; ----------------------------------------------------------------------------------------------
0000B8F0                            ; Ring Spawn Array 
0000B8F0                            ; ----------------------------------------------------------------------------------------------
0000B8F0                            
0000B8F0 FF3C FC14 00C4 FC14 FDC8+  SpillRingData:  dc.w    $FF3C,$FC14, $00C4,$FC14, $FDC8,$FCB0, $0238,$FCB0 ; 4
0000B900 FCB0 FDC8 0350 FDC8 FC14+                  dc.w    $FCB0,$FDC8, $0350,$FDC8, $FC14,$FF3C, $03EC,$FF3C ; 8
0000B910 FC14 00C4 03EC 00C4 FCB0+                  dc.w    $FC14,$00C4, $03EC,$00C4, $FCB0,$0238, $0350,$0238 ; 12
0000B920 FDC8 0350 0238 0350 FF3C+                  dc.w    $FDC8,$0350, $0238,$0350, $FF3C,$03EC, $00C4,$03EC ; 16
0000B930 FF9E FE0A 0062 FE0A FEE4+                  dc.w    $FF9E,$FE0A, $0062,$FE0A, $FEE4,$FE58, $011C,$FE58 ; 20
0000B940 FE58 FEE4 01A8 FEE4 FE0A+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE0A,$FF9E, $01F6,$FF9E ; 24
0000B950 FE0A 0062 01F6 0062 FE58+                  dc.w    $FE0A,$0062, $01F6,$0062, $FE58,$011C, $01A8,$011C ; 28
0000B960 FEE4 01A8 011C 01A8 FF9E+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9E,$0156, $0062,$0156 ; 32
0000B970                                            even
0000B970                            ; ===========================================================================
0000B970                            ; -------------------------------------------------------------------------------------
0000B970                            ; Ring Spawn Array - Underwater - same thing as I said above. Edit at your own risk!!!
0000B970                            ; -------------------------------------------------------------------------------------
0000B970                            
0000B970                            SpillRingData_Water:
0000B970 FF9C FE08 0064 FE08 FEE4+  				dc.w    $FF9C,$FE08, $0064,$FE08, $FEE4,$FE58, $011C,$FE58 ; 4
0000B980 FE58 FEE4 01A8 FEE4 FE08+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE08,$FF9C, $01F8,$FF9C ; 8
0000B990 FE08 0060 01F8 0060 FE58+                  dc.w    $FE08,$0060, $01F8,$0060, $FE58,$011C, $01A8,$011C ; 12
0000B9A0 FEE4 01A8 011C 01A8 FF9C+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9C,$01F4, $0064,$01F4 ; 16
0000B9B0 FFCE FF04 0032 FF04 FF72+                  dc.w    $FFCE,$FF04, $0032,$FF04, $FF72,$FF2C, $008E,$FF2C ; 20
0000B9C0 FF2C FF72 00D4 FF72 FF04+                  dc.w    $FF2C,$FF72, $00D4,$FF72, $FF04,$FFCE, $00FC,$FFCE ; 24
0000B9D0 FF04 0030 00FC 0030 FF2C+                  dc.w    $FF04,$0030, $00FC,$0030, $FF2C,$008E, $00D4,$008E ; 28
0000B9E0 FF72 00D4 008E 00D4 FFCE+                  dc.w    $FF72,$00D4, $008E,$00D4, $FFCE,$00FA, $0032,$00FA ; 32
0000B9F0                                            even
0000B9F0                            ; ===========================================================================				
0000B9F0                            ; ===========================================================================				
0000B9F0                            		include	"_incObj\4B Giant Ring.asm"
0000B9F0                            ; ---------------------------------------------------------------------------
0000B9F0                            ; Object 4B - giant ring for entry to special stage
0000B9F0                            ; ---------------------------------------------------------------------------
0000B9F0                            
0000B9F0                            GiantRing:
0000B9F0 7000                       		moveq	#0,d0
0000B9F2 1028 0024                  		move.b	obRoutine(a0),d0
0000B9F6 323B 0000                  		move.w	GRing_Index(pc,d0.w),d1
0000B9FA 4EFB 1000                  		jmp	GRing_Index(pc,d1.w)
0000B9FE                            ; ===========================================================================
0000B9FE 0000                       GRing_Index:	dc.w GRing_Main-GRing_Index
0000BA00 0000                       		dc.w GRing_Animate-GRing_Index
0000BA02 0000                       		dc.w GRing_Collect-GRing_Index
0000BA04 0000                       		dc.w GRing_Delete-GRing_Index
0000BA06                            ; ===========================================================================
0000BA06                            
0000BA06                            GRing_Main:    ; Routine 0
0000BA06 217C 0000 0000 0004        		move.l	#Map_GRing,obMap(a0)
0000BA0E 317C 2400 0002             		move.w	#$2400,obGfx(a0)
0000BA14 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BA1A 117C 0040 0014             		move.b	#$40,obActWid(a0)
0000BA20 4A28 0001                  		tst.b	obRender(a0)
0000BA24 6A00                       		bpl.s	GRing_Animate
0000BA26 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have 6 emeralds?
0000BA2C 6700 0000                  		beq.w	GRing_Delete    ; if yes, branch
0000BA30 0C38 0002 F5C3             		cmpi.b	#2,(f_emeraldm).w    ;TIS Did you  hit the S-Monitor?
0000BA36 6700                       		beq.s	GRing_Okay    ; if yes, branch
0000BA38                            
0000BA38 4E75                       		rts    
0000BA3A                            ; ===========================================================================
0000BA3A                            
0000BA3A                            GRing_Okay:
0000BA3A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BA3E 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000BA44 117C 0052 0020             		move.b	#$52,obColType(a0)
0000BA4A 31FC 0C40 F7BE             		move.w	#$C40,(v_gfxbigring).w	; Signal that Art_BigRing should be loaded ($C40 is the size of Art_BigRing)
0000BA50                            
0000BA50                            GRing_Animate:	; Routine 2
0000BA50 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0)
0000BA74 6000 0000                  		bra.w	DisplaySprite
0000BA78                            ; ===========================================================================
0000BA78                            
0000BA78                            GRing_Collect:	; Routine 4
0000BA78 5528 0024                  		subq.b	#2,obRoutine(a0)
0000BA7C 117C 0000 0020             		move.b	#0,obColType(a0)
0000BA82 6100 0000                  		bsr.w	FindFreeObj
0000BA86 6600 0000                  		bne.w	GRing_PlaySnd
0000BA8A 12BC 0000                  		move.b	#id_RingFlash,0(a1) ; load giant ring flash object
0000BA8E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BA94 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BA9A 2348 003C                  		move.l	a0,$3C(a1)
0000BA9E 3038 D008                  		move.w	(v_player+obX).w,d0
0000BAA2 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic come from the left?
0000BAA6 6500                       		bcs.s	GRing_PlaySnd	; if yes, branch
0000BAA8 08E9 0000 0001             		bset	#0,obRender(a1)	; reverse flash	object	
0000BAAE 11FC 0001 FE57             		move.b  #1,(v_emeralds).w
0000BAB4 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000BABA                            		
0000BABA                            GRing_PlaySnd:
0000BAC4 608A                       		bra.s	GRing_Animate
0000BAC6                            ; ===========================================================================
0000BAC6                            
0000BAC6                            GRing_Delete:	; Routine 6
0000BAC6 6000 0000                  		bra.w	DeleteObject
0000BAC6 6000 0000                  		bra.w	DeleteObject
0000BACA                            		include	"_incObj\7C Ring Flash.asm"
0000BACA                            ; ---------------------------------------------------------------------------
0000BACA                            ; Object 7C - flash effect when	you collect the	giant ring
0000BACA                            ; ---------------------------------------------------------------------------
0000BACA                            
0000BACA                            RingFlash:
0000BACA 7000                       		moveq	#0,d0
0000BACC 1028 0024                  		move.b	obRoutine(a0),d0
0000BAD0 323B 0000                  		move.w	Flash_Index(pc,d0.w),d1
0000BAD4 4EFB 1000                  		jmp	Flash_Index(pc,d1.w)
0000BAD8                            ; ===========================================================================
0000BAD8 0000                       Flash_Index:	dc.w Flash_Main-Flash_Index
0000BADA 0000                       		dc.w Flash_ChkDel-Flash_Index
0000BADC 0000                       		dc.w Flash_Delete-Flash_Index
0000BADE                            ; ===========================================================================
0000BADE                            
0000BADE                            Flash_Main:	; Routine 0
0000BADE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BAE2 217C 0000 0000 0004        		move.l	#Map_Flash,obMap(a0)
0000BAEA 317C 2462 0002             		move.w	#$2462,obGfx(a0)
0000BAF0 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BAF6 317C 0000 0018             		move.w	#0,obPriority(a0)
0000BAFC 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000BB02 117C 00FF 001A             		move.b	#$FF,obFrame(a0)
0000BB08                            
0000BB08                            Flash_ChkDel:	; Routine 2
0000BB08 6100                       		bsr.s	Flash_Collect
0000BB28 6000 0000                  		bra.w	DisplaySprite
0000BB2C                            
0000BB2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BB2C                            
0000BB2C                            
0000BB2C                            Flash_Collect:
0000BB2C 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000BB30 6A00                       		bpl.s	locret_9F76
0000BB32 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000BB38 5228 001A                  		addq.b	#1,obFrame(a0)
0000BB3C 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)	; has animation	finished?
0000BB42 6400                       		bcc.s	Flash_End	; if yes, branch
0000BB44 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is 3rd frame displayed?
0000BB4A 6600                       		bne.s	locret_9F76	; if not, branch
0000BB4C 2268 003C                  		movea.l	$3C(a0),a1	; get parent object address
0000BB50 137C 0006 0024             		move.b	#6,obRoutine(a1) ; delete parent object
0000BB56 11FC 0000 D01C             		move.b	#id_Null,(v_player+obAnim).w ; make Sonic invisible
0000BB5C 11FC 0001 F7CD             		move.b	#1,(f_bigring).w ; stop	Sonic getting bonuses
0000BB62 4238 FE2D                  		clr.b	(v_invinc).w	; remove invincibility
0000BB66 4238 FE2C                  		clr.b	(v_shield).w	; remove shield
0000BB6A                            
0000BB6A                            locret_9F76:
0000BB6A 4E75                       		rts	
0000BB6C                            ; ===========================================================================
0000BB6C                            
0000BB6C                            Flash_End:
0000BB6C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BB70 31FC 0000 D000             		move.w	#0,(v_player).w ; remove Sonic object
0000BB76 588F                       		addq.l	#4,sp
0000BB78 4E75                       		rts	
0000BB7A                            ; End of function Flash_Collect
0000BB7A                            
0000BB7A                            ; ===========================================================================
0000BB7A                            
0000BB7A                            Flash_Delete:	; Routine 4
0000BB7A 6000 0000                  		bra.w	DeleteObject
0000BB7A 6000 0000                  		bra.w	DeleteObject
0000BB7E                            
0000BB7E                            		include	"_anim\Rings.asm"
0000BB7E                            ; ---------------------------------------------------------------------------
0000BB7E                            ; Animation script - ring
0000BB7E                            ; ---------------------------------------------------------------------------
0000BB7E 0000                       Ani_Ring:	dc.w @ring-Ani_Ring
0000BB80 0706 0708 09FC             @ring:		dc.b 7,	6, 7, 8, 9, afRoutine
0000BB86                            		even
0000BB86                            		even
0000BB86                            Map_Ring:		include	"_maps\Rings (JP1).asm"
0000BB86                            ; --------------------------------------------------------------------------------
0000BB86                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BB86                            ; --------------------------------------------------------------------------------
0000BB86                            
0000BB86                            SME_aSMQh:	
0000BB86 0000 0000                  		dc.w SME_aSMQh_14-SME_aSMQh, SME_aSMQh_1A-SME_aSMQh	
0000BB8A 0000 0000                  		dc.w SME_aSMQh_20-SME_aSMQh, SME_aSMQh_26-SME_aSMQh	
0000BB8E 0000 0000                  		dc.w SME_aSMQh_2C-SME_aSMQh, SME_aSMQh_32-SME_aSMQh	
0000BB92 0000 0000                  		dc.w SME_aSMQh_38-SME_aSMQh, SME_aSMQh_3E-SME_aSMQh	
0000BB96 0000 0000                  		dc.w SME_aSMQh_44-SME_aSMQh, SME_aSMQh_4A-SME_aSMQh	
0000BB9A 01                         SME_aSMQh_14:	dc.b 1	
0000BB9B F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
0000BBA0 01                         SME_aSMQh_1A:	dc.b 1	
0000BBA1 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
0000BBA6 01                         SME_aSMQh_20:	dc.b 1	
0000BBA7 F805 000A F8               		dc.b $F8, 5, 0, $A, $F8	
0000BBAC 01                         SME_aSMQh_26:	dc.b 1	
0000BBAD F801 0008 FC               		dc.b $F8, 1, 0, 8, $FC	
0000BBB2 01                         SME_aSMQh_2C:	dc.b 1	
0000BBB3 F805 080A F8               		dc.b $F8, 5, 8, $A, $F8	
0000BBB8 01                         SME_aSMQh_32:	dc.b 1	
0000BBB9 F805 0804 F8               		dc.b $F8, 5, 8, 4, $F8	
0000BBBE 01                         SME_aSMQh_38:	dc.b 1	
0000BBBF F805 0010 F8               		dc.b $F8, 5, 0, $10, $F8	
0000BBC4 01                         SME_aSMQh_3E:	dc.b 1	
0000BBC5 F805 1810 F8               		dc.b $F8, 5, $18, $10, $F8	
0000BBCA 01                         SME_aSMQh_44:	dc.b 1	
0000BBCB F805 0810 F8               		dc.b $F8, 5, 8, $10, $F8	
0000BBD0 01                         SME_aSMQh_4A:	dc.b 1	
0000BBD1 F805 1010 F8               		dc.b $F8, 5, $10, $10, $F8	
0000BBD6                            		even
0000BBD6                            		even
0000BBD6                            Map_GRing:	include	"_maps\Giant Ring.asm"
0000BBD6                            ; ---------------------------------------------------------------------------
0000BBD6                            ; Sprite mappings - giant ring
0000BBD6                            ; ---------------------------------------------------------------------------
0000BBD6                            Map_GRing_internal:
0000BBD6 0000                       		dc.w byte_9FDA-Map_GRing_internal
0000BBD8 0000                       		dc.w byte_A00D-Map_GRing_internal
0000BBDA 0000                       		dc.w byte_A036-Map_GRing_internal
0000BBDC 0000                       		dc.w byte_A04B-Map_GRing_internal
0000BBDE 0A                         byte_9FDA:	dc.b $A
0000BBDF E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8	; ring front
0000BBE4 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000BBE9 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000BBEE E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000BBF3 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000BBF8 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000BBFD 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000BC02 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000BC07 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000BC0C 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000BC11 08                         byte_A00D:	dc.b 8
0000BC12 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0 ; ring angle
0000BC17 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000BC1C E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000BC21 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000BC26 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000BC2B 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000BC30 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000BC35 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000BC3A 04                         byte_A036:	dc.b 4
0000BC3B E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4 ; ring perpendicular
0000BC40 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000BC45 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000BC4A 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000BC4F 08                         byte_A04B:	dc.b 8
0000BC50 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0 ; ring angle
0000BC55 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000BC5A E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000BC5F F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000BC64 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000BC69 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000BC6E 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000BC73 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000BC78                            		even
0000BC78                            		even
0000BC78                            Map_Flash:	include	"_maps\Ring Flash.asm"
0000BC78                            ; ---------------------------------------------------------------------------
0000BC78                            ; Sprite mappings - flash effect when you collect the giant ring
0000BC78                            ; ---------------------------------------------------------------------------
0000BC78                            Map_Flash_internal:
0000BC78 0000                       		dc.w byte_A084-Map_Flash_internal
0000BC7A 0000                       		dc.w byte_A08F-Map_Flash_internal
0000BC7C 0000                       		dc.w byte_A0A4-Map_Flash_internal
0000BC7E 0000                       		dc.w byte_A0B9-Map_Flash_internal
0000BC80 0000                       		dc.w byte_A0CE-Map_Flash_internal
0000BC82 0000                       		dc.w byte_A0E3-Map_Flash_internal
0000BC84 0000                       		dc.w byte_A0F8-Map_Flash_internal
0000BC86 0000                       		dc.w byte_A103-Map_Flash_internal
0000BC88 02                         byte_A084:	dc.b 2
0000BC89 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000BC8E 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000BC93 04                         byte_A08F:	dc.b 4
0000BC94 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000BC99 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000BC9E 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000BCA3 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000BCA8 04                         byte_A0A4:	dc.b 4
0000BCA9 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000BCAE E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000BCB3 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000BCB8 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000BCBD 04                         byte_A0B9:	dc.b 4
0000BCBE E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000BCC3 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000BCC8 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000BCCD 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000BCD2 04                         byte_A0CE:	dc.b 4
0000BCD3 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000BCD8 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000BCDD 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000BCE2 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000BCE7 04                         byte_A0E3:	dc.b 4
0000BCE8 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000BCED E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000BCF2 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000BCF7 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000BCFC 02                         byte_A0F8:	dc.b 2
0000BCFD E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000BD02 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000BD07 04                         byte_A103:	dc.b 4
0000BD08 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000BD0D E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000BD12 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000BD17 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000BD1C                            		even
0000BD1C                            		even
0000BD1C                            		include	"_incObj\26 Monitor.asm"
0000BD1C                            ; ---------------------------------------------------------------------------
0000BD1C                            ; Object 26 - monitors
0000BD1C                            ; ---------------------------------------------------------------------------
0000BD1C                            
0000BD1C                            Monitor:
0000BD1C 7000                       		moveq	#0,d0
0000BD1E 1028 0024                  		move.b	obRoutine(a0),d0
0000BD22 323B 0000                  		move.w	Mon_Index(pc,d0.w),d1
0000BD26 4EFB 1000                  		jmp	Mon_Index(pc,d1.w)
0000BD2A                            ; ===========================================================================
0000BD2A 0000                       Mon_Index:	dc.w Mon_Main-Mon_Index
0000BD2C 0000                       		dc.w Mon_Solid-Mon_Index
0000BD2E 0000                       		dc.w Mon_BreakOpen-Mon_Index
0000BD30 0000                       		dc.w Mon_Animate-Mon_Index
0000BD32 0000                       		dc.w Mon_Display-Mon_Index
0000BD34                            ; ===========================================================================
0000BD34                            
0000BD34                            Mon_Main:	; Routine 0
0000BD34 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BD38 117C 000E 0016             		move.b	#$E,obHeight(a0)
0000BD3E 117C 000E 0017             		move.b	#$E,obWidth(a0)
0000BD44 217C 0000 0000 0004        		move.l	#Map_Monitor,obMap(a0)
0000BD4C 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000BD52 117C 0004 0001             		move.b	#4,obRender(a0)
0000BD58 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000BD5E 117C 000F 0014             		move.b	#$F,obActWid(a0)
0000BD64 45F8 FC00                  		lea	(v_objstate).w,a2
0000BD68 7000                       		moveq	#0,d0
0000BD6A 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BD6E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000BD74 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000BD7A 6700                       		beq.s	@notbroken	; if not, branch
0000BD7C 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Mon_Display" routine
0000BD82 117C 000B 001A             		move.b	#$B,obFrame(a0)	; use broken monitor frame
0000BD88 4E75                       		rts	
0000BD8A                            ; ===========================================================================
0000BD8A                            
0000BD8A                            	@notbroken:
0000BD8A 117C 0046 0020             		move.b	#$46,obColType(a0)
0000BD90 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0)
0000BD96                            
0000BD96                            Mon_Solid:	; Routine 2
0000BD96 1028 0025                  		move.b	ob2ndRout(a0),d0 ; is monitor set to fall?
0000BD9A 6700                       		beq.s	@normal		; if not, branch
0000BD9C 5500                       		subq.b	#2,d0
0000BD9E 6600                       		bne.s	@fall
0000BDA0                            
0000BDA0                            		; 2nd Routine 2
0000BDA0 7200                       		moveq	#0,d1
0000BDA2 1228 0014                  		move.b	obActWid(a0),d1
0000BDA6 0641 000B                  		addi.w	#$B,d1
0000BDAA 6100 CFEC                  		bsr.w	ExitPlatform
0000BDAE 0829 0003 0022             		btst	#3,obStatus(a1) ; is Sonic on top of the monitor?
0000BDB4 6600 0000                  		bne.w	@ontop		; if yes, branch
0000BDB8 4228 0025                  		clr.b	ob2ndRout(a0)
0000BDBC 6000 0000                  		bra.w	Mon_Animate
0000BDC0                            ; ===========================================================================
0000BDC0                            
0000BDC0                            	@ontop:
0000BDC0 363C 0010                  		move.w	#$10,d3
0000BDC4 3428 0008                  		move.w	obX(a0),d2
0000BDC8 6100 D52C                  		bsr.w	MvSonicOnPtfm
0000BDCC 6000 0000                  		bra.w	Mon_Animate
0000BDD0                            ; ===========================================================================
0000BDD0                            
0000BDD0                            @fall:		; 2nd Routine 4
0000BDD0 6100 0000                  		bsr.w	ObjectFall
0000BDD4 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000BDDA 4A41                       		tst.w	d1
0000BDDC 6A00 0000                  		bpl.w	Mon_Animate
0000BDE0 D368 000C                  		add.w	d1,obY(a0)
0000BDE4 4268 0012                  		clr.w	obVelY(a0)
0000BDE8 4228 0025                  		clr.b	ob2ndRout(a0)
0000BDEC 6000 0000                  		bra.w	Mon_Animate
0000BDF0                            ; ===========================================================================
0000BDF0                            
0000BDF0                            @normal:	; 2nd Routine 0
0000BDF0 323C 001A                  		move.w	#$1A,d1
0000BDF4 343C 000F                  		move.w	#$F,d2
0000BDF8 6100 0000                  		bsr.w	Mon_SolidSides
0000BDFC 6700 0000                  		beq.w	loc_A25C
0000BE00 4A69 0012                  		tst.w	obVelY(a1)
0000BE04 6B00                       		bmi.s	loc_A20A
0000BE06 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000BE0C 6700                       		beq.s	loc_A25C	; if yes, branch
0000BE0E 0C29 0000 001C             		cmpi.b	#id_SpinDash,obAnim(a1) ; is Sonic Spindashing?
0000BE14 6700                       		beq.s	loc_A25C	; if yes, branch
0000BE16 0C29 0000 001C             		cmpi.b	#id_Peelout,obAnim(a1) ; is Sonic Spindashing?
0000BE1C 6700                       		beq.s	loc_A25C	; if yes, branch
0000BE1E                            
0000BE1E                            loc_A20A:
0000BE1E 4A41                       		tst.w	d1
0000BE20 6A00                       		bpl.s	loc_A220
0000BE22 9769 000C                  		sub.w	d3,obY(a1)
0000BE26 6100 CE5E                  		bsr.w	loc_74AE
0000BE2A 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
0000BE30 6000 0000                  		bra.w	Mon_Animate
0000BE34                            ; ===========================================================================
0000BE34                            
0000BE34                            loc_A220:
0000BE34 4A40                       		tst.w	d0
0000BE36 6700 0000                  		beq.w	loc_A246
0000BE3A 6B00                       		bmi.s	loc_A230
0000BE3C 4A69 0010                  		tst.w	obVelX(a1)
0000BE40 6B00                       		bmi.s	loc_A246
0000BE42 6000                       		bra.s	loc_A236
0000BE44                            ; ===========================================================================
0000BE44                            
0000BE44                            loc_A230:
0000BE44 4A69 0010                  		tst.w	obVelX(a1)
0000BE48 6A00                       		bpl.s	loc_A246
0000BE4A                            
0000BE4A                            loc_A236:
0000BE4A 9169 0008                  		sub.w	d0,obX(a1)
0000BE4E 337C 0000 0020             		move.w	#0,obInertia(a1)
0000BE54 337C 0000 0010             		move.w	#0,obVelX(a1)
0000BE5A                            
0000BE5A                            loc_A246:
0000BE5A 0829 0001 0022             		btst	#1,obStatus(a1)
0000BE60 6600                       		bne.s	loc_A26A
0000BE62 08E9 0005 0022             		bset	#5,obStatus(a1)
0000BE68 08E8 0005 0022             		bset	#5,obStatus(a0)
0000BE6E 6000                       		bra.s	Mon_Animate
0000BE70                            ; ===========================================================================
0000BE70                            
0000BE70                            loc_A25C:
0000BE70 0828 0005 0022             		btst	#5,obStatus(a0)
0000BE76 6700                       		beq.s	Mon_Animate
0000BE78 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
0000BE7E 6700                       		beq.s	loc_A26A	; if so, branch
0000BE80 337C 0001 001C             		move.w	#1,obAnim(a1)	; clear obAnim and set obNextAni to 1, putting Sonic in his walking animation
0000BE86                            
0000BE86                            loc_A26A:
0000BE86 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000BE8C 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000BE92                            
0000BE92                            Mon_Animate:	; Routine 6
0000BE92 43F9 0000 0000             		lea	(Ani_Monitor).l,a1
0000BE98 6100 0000                  		bsr.w	AnimateSprite
0000BE9C                            
0000BE9C                            Mon_Display:	; Routine 8
0000BE9C 6100 0000                  		bsr.w	DisplaySprite
0000BEBE 4E75                       		rts	
0000BEC0                            ; ===========================================================================
0000BEC0                            
0000BEC0                            Mon_BreakOpen:	; Routine 4
0000BEC0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BEC4 117C 0000 0020             		move.b	#0,obColType(a0)
0000BECA 6100 0000                  		bsr.w	FindFreeObj
0000BECE 6600                       		bne.s	Mon_Explode
0000BED0 12BC 0000                  		move.b	#id_PowerUp,0(a1) ; load monitor contents object
0000BED4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BEDA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BEE0 1368 001C 001C             		move.b	obAnim(a0),obAnim(a1)
0000BEE6                            
0000BEE6                            Mon_Explode:
0000BEE6 6100 0000                  		bsr.w	FindFreeObj
0000BEEA 6600                       		bne.s	@fail
0000BEEC 12BC 0000                  		move.b	#id_ExplosionItem,0(a1) ; load explosion object
0000BEF0 5429 0024                  		addq.b	#2,obRoutine(a1) ; don't create an animal
0000BEF4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BEFA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BF00                            
0000BF00                            	@fail:
0000BF00 45F8 FC00                  		lea	(v_objstate).w,a2
0000BF04 7000                       		moveq	#0,d0
0000BF06 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BF0A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000BF10 117C 0009 001C             		move.b	#9,obAnim(a0)	; set monitor type to broken
0000BF16 6000 0000                  		bra.w	DisplaySprite
0000BF16 6000 0000                  		bra.w	DisplaySprite
0000BF1A                            		include	"_incObj\2E Monitor Content Power-Up.asm"
0000BF1A                            ; ---------------------------------------------------------------------------
0000BF1A                            ; Object 2E - contents of monitors
0000BF1A                            ; ---------------------------------------------------------------------------
0000BF1A                            
0000BF1A                            PowerUp:
0000BF1A 7000                       		moveq	#0,d0
0000BF1C 1028 0024                  		move.b	obRoutine(a0),d0
0000BF20 323B 0000                  		move.w	Pow_Index(pc,d0.w),d1
0000BF24 4EBB 1000                  		jsr	Pow_Index(pc,d1.w)
0000BF28 6000 0000                  		bra.w	DisplaySprite
0000BF2C                            ; ===========================================================================
0000BF2C 0000                       Pow_Index:	dc.w Pow_Main-Pow_Index
0000BF2E 0000                       		dc.w Pow_Move-Pow_Index
0000BF30 0000                       		dc.w Pow_Delete-Pow_Index
0000BF32                            ; ===========================================================================
0000BF32                            
0000BF32                            Pow_Main:	; Routine 0
0000BF32 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BF36 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000BF3C 117C 0024 0001             		move.b	#$24,obRender(a0)
0000BF42 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000BF48 117C 0008 0014             		move.b	#8,obActWid(a0)
0000BF4E 317C FD00 0012             		move.w	#-$300,obVelY(a0)
0000BF54 7000                       		moveq	#0,d0
0000BF56 1028 001C                  		move.b	obAnim(a0),d0	; get subtype
0000BF5A 5400                       		addq.b	#2,d0
0000BF5C 1140 001A                  		move.b	d0,obFrame(a0)	; use correct frame
0000BF60 227C 0000 0000             		movea.l	#Map_Monitor,a1
0000BF66 D000                       		add.b	d0,d0
0000BF68 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000BF6C 5249                       		addq.w	#1,a1
0000BF6E 2149 0004                  		move.l	a1,obMap(a0)
0000BF72                            
0000BF72                            Pow_Move:	; Routine 2
0000BF72 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000BF76 6A00 0000                  		bpl.w	Pow_Checks	; if not, branch
0000BF7A 6100 0000                  		bsr.w	SpeedToPos
0000BF7E 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000BF84 4E75                       		rts	
0000BF86                            ; ===========================================================================
0000BF86                            
0000BF86                            Pow_Checks:
0000BF86 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BF8A 317C 001D 001E             		move.w	#29,obTimeFrame(a0) ; display icon for half a second
0000BF90                            
0000BF90                            Pow_ChkEggman:
0000BF90 1028 001C                  		move.b	obAnim(a0),d0
0000BF94 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000BF98 6600                       		bne.s	Pow_ChkSonic
0000BF9A                            		
0000BF9A 4EF9 0000 0000             		jmp	Spik_Hurt
0000BFA0                            		
0000BFA0 4E75                       		rts
0000BFA2                            ; ===========================================================================
0000BFA2                            
0000BFA2                            Pow_ChkSonic:
0000BFA2 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000BFA6 6600                       		bne.s	Pow_ChkShoes
0000BFA8                            
0000BFA8                            	ExtraLife:
0000BFA8 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000BFAC 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000BFBA                            
0000BFBA                            ; ===========================================================================
0000BFBA                            
0000BFBA                            Pow_ChkShoes:
0000BFBA 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000BFBE 6600                       		bne.s	Pow_ChkShield
0000BFC0 0C38 0001 FE19             		cmpi.b #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
0000BFC6 6700 0000                  		beq 	Pow_NoMus
0000BFCA 11FC 0001 FE2E             		move.b	#1,(v_shoes).w	; speed up the BG music
0000BFD0 31FC 04B0 D034             		move.w	#$4B0,(v_player+$34).w	; time limit for the power-up
0000BFD6 31FC 0C00 F760             		move.w	#$C00,(v_sonspeedmax).w ; change Sonic's top speed
0000BFDC 31FC 0018 F762             		move.w	#$18,(v_sonspeedacc).w	; change Sonic's acceleration
0000BFE2 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w	; change Sonic's deceleration
0000BFE8 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000BFEC 6600                       		bne.s	Pow_NoMus	; if yes, branch
0000BFEE 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000BFF4 6300                       			bls.s	Pow_NoMus
0000C000                            ; ===========================================================================
0000C000                            
0000C000                            Pow_NoMus:
0000C000 4E75                       		rts	
0000C002                            ; ===========================================================================
0000C002                            
0000C002                            Pow_ChkShield:
0000C002 0C00 0004                          cmpi.b    #4,d0        ; does monitor contain a shield?
0000C006 6600                               bne.s    Pow_ChkInvinc
0000C008                            
0000C008 11FC 0001 FE2C                     move.b    #1,(v_shield).w    ; give Sonic a shield
0000C00E 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove red shield
0000C014 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C01A 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C020 11FC 0000 D180                     move.b    #id_ShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C026 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C02A 303C 0000                          move.w    #sfx_Shield,d0
0000C02E 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000C034                            ; ===========================================================================
0000C034                            
0000C034                            Pow_ChkInvinc:
0000C034 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000C038 6600                       		bne.s	Pow_ChkRings
0000C03A 0C38 0001 FE19             		cmpi.b #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
0000C040 6700 0000                  		beq 	Pow_NoMusic
0000C044 11FC 0001 FE2D             		move.b	#1,(v_invinc).w	; make Sonic invincible
0000C04A 31FC 0560 D032             		move.w	#$560,(v_player+$32).w ; time limit for the power-up
0000C050 11FC 0000 D200             		move.b	#id_InvStars,(v_objspace+$200).w ; load stars object ($3801)
0000C056 11FC 0001 D21C             		move.b	#1,(v_objspace+$200+obAnim).w
0000C05C 11FC 0000 D240             		move.b	#id_InvStars,(v_objspace+$240).w ; load stars object ($3802)
0000C062 11FC 0002 D25C             		move.b	#2,(v_objspace+$240+obAnim).w
0000C068 11FC 0000 D280             		move.b	#id_InvStars,(v_objspace+$280).w ; load stars object ($3803)
0000C06E 11FC 0003 D29C             		move.b	#3,(v_objspace+$280+obAnim).w
0000C074 11FC 0000 D2C0             		move.b	#id_InvStars,(v_objspace+$2C0).w ; load stars object ($3804)
0000C07A 11FC 0004 D2DC             		move.b	#4,(v_objspace+$2C0+obAnim).w
0000C080 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C084 6600                       		bne.s	Pow_NoMusic	; if yes, branch
0000C086 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C08C 6300                       			bls.s	Pow_NoMusic
0000C098                            ; ===========================================================================
0000C098                            
0000C098                            Pow_NoMusic:
0000C098 4E75                       		rts	
0000C09A                            ; ===========================================================================
0000C09A                            
0000C09A                            Pow_ChkRings:
0000C09A 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000C09E 6600                       		bne.s	Pow_ChkS
0000C0A0                            
0000C0A0 0678 000A FE20             		addi.w	#10,(v_rings).w	; add 10 rings to the number of rings you have
0000C0A6 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the ring counter
0000C0AC 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C0B2 6500                       		bcs.s	Pow_RingSound
0000C0B4 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C0BA 6700 FEEC                  		beq.w	ExtraLife
0000C0BE 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C0C4 6500                       		bcs.s	Pow_RingSound
0000C0C6 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C0CC 6700 FEDA                  		beq.w	ExtraLife
0000C0D0                            
0000C0D0                            	Pow_RingSound:
0000C0DA                            ; ===========================================================================
0000C0DA                            
0000C0DA                            Pow_ChkS:
0000C0DA 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'?
0000C0DE 6600                       		bne.s	Pow_ChkSRing
0000C0E0                            		
0000C0E0 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0000C0E6 6700                       		beq.s	PowS2	; if yes, branch
0000C0E8 0404 003B                  		subi.b	#$3B,d4
0000C0EC 7000                       		moveq	#0,d0
0000C0EE 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000C0F4 11FC 0001 F5C3             		move.b	#1,(f_emeraldm).w
0000C0FA 6000                       		bra.s	PowSPlay
0000C0FC                            
0000C0FC                            PowS2:
0000C0FC 0678 0032 FE20             		addi.w	#50,(v_rings).w	; add 50 rings to the number of rings you have
0000C102 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000C108 0038 0005 FE1D             		ori.b	#5,(f_ringcount).w ; update the ring counter
0000C10E 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C114 6500                       		bcs.s	PowSPlay
0000C116 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C11C 6700 FE8A                  		beq.w	ExtraLife
0000C120 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C126 6500                       		bcs.s	PowSPlay
0000C128 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C12E 6700 FE78                  		beq.w	ExtraLife	
0000C132                            
0000C132                            PowSPlay:
0000C13C                            
0000C13C                            		
0000C13C                            
0000C13C                            
0000C13C                            Pow_ChkSRing:
0000C13C 0C00 0008                  		cmpi.b	#8,d0		; does monitor contain 'S'?
0000C140 6600                       		bne.s	Pow_ChkRShield
0000C142                            
0000C142                            		
0000C142 0678 0014 FE20             		addi.w	#20,(v_rings).w	; add 20 rings to the number of rings you have
0000C148 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C14E 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C154 6500                       		bcs.s	Pow_ChkSRingSound
0000C156 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C15C 6700 FE4A                  		beq.w	ExtraLife
0000C160 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C166 6500                       		bcs.s	Pow_ChkSRingSound
0000C168 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C16E 6700 FE38                  		beq.w	ExtraLife	
0000C172                            
0000C172                            Pow_ChkSRingSound:
0000C17C                            
0000C17C                            
0000C17C                            Pow_ChkRShield:
0000C17C 0C00 000A                          cmpi.b    #10,d0        ; does monitor contain a shield?
0000C180 6600                               bne.s    Pow_ChkGShield
0000C182                            
0000C182 11FC 0002 F5C8                     move.b    #2,(v_rshield).w    ; give Sonic a shield
0000C188 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove red shield
0000C18E 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C194 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C19A 11FC 0000 D180                     move.b    #id_RShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C1A0 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C1A4 303C 0000                          move.w    #sfx_FireShield,d0
0000C1A8 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000C1AE                            
0000C1AE                            Pow_ChkGShield:
0000C1AE 0C00 000B                          cmpi.b    #11,d0        ; does monitor contain a shield?
0000C1B2 6600                               bne.s    Pow_ChkSpShield
0000C1B4                            
0000C1B4 11FC 0001 F5C9                     move.b    #1,(v_gshield).w    ; give Sonic a shield
0000C1BA 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove red shield
0000C1C0 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove g shield
0000C1C6 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C1CC 11FC 0000 D180                     move.b    #id_GShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C1D2 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C1D6 303C 0000                          move.w    #sfx_LightningShield,d0
0000C1DA 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000C1E0                            
0000C1E0                            Pow_ChkSpShield:
0000C1E0 0C00 000C                         cmpi.b    #12,d0        ; does monitor contain a shield?
0000C1E4 66FA                               bne.s    Pow_ChkSpShield
0000C1E6                            
0000C1E6 11FC 0001 F5CA                     move.b    #1,(v_spshield).w    ; give Sonic a shield
0000C1EC 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove red shield
0000C1F2 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove g shield
0000C1F8 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove s shield
0000C1FE 11FC 0000 D180                     move.b    #id_SpShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C204 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C208 303C 0000                          move.w    #sfx_SpikesMove,d0
0000C20C 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000C212                            
0000C212                            Pow_ChkEnd:
0000C212 4E75                       		rts
0000C214                            ; ===========================================================================
0000C214                            
0000C214                            Pow_Delete:	; Routine 4
0000C214 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0000C218 6B00 0000                  		bmi.w	DeleteObject	; delete after half a second
0000C21C 4E75                       		rts	
0000C21C 4E75                       		rts	
0000C21E                            		include	"_incObj\26 Monitor (SolidSides subroutine).asm"
0000C21E                            ; ---------------------------------------------------------------------------
0000C21E                            ; Subroutine to	make the sides of a monitor solid
0000C21E                            ; ---------------------------------------------------------------------------
0000C21E                            
0000C21E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C21E                            
0000C21E                            
0000C21E                            Mon_SolidSides:
0000C21E 43F8 D000                  		lea	(v_player).w,a1
0000C222 3029 0008                  		move.w	obX(a1),d0
0000C226 9068 0008                  		sub.w	obX(a0),d0
0000C22A D041                       		add.w	d1,d0
0000C22C 6B00                       		bmi.s	loc_A4E6
0000C22E 3601                       		move.w	d1,d3
0000C230 D643                       		add.w	d3,d3
0000C232 B043                       		cmp.w	d3,d0
0000C234 6200                       		bhi.s	loc_A4E6
0000C236 1629 0016                  		move.b	obHeight(a1),d3
0000C23A 4883                       		ext.w	d3
0000C23C D443                       		add.w	d3,d2
0000C23E 3629 000C                  		move.w	obY(a1),d3
0000C242 9668 000C                  		sub.w	obY(a0),d3
0000C246 D642                       		add.w	d2,d3
0000C248 6B00                       		bmi.s	loc_A4E6
0000C24A D442                       		add.w	d2,d2
0000C24C B642                       		cmp.w	d2,d3
0000C24E 6400                       		bcc.s	loc_A4E6
0000C250 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000C254 6B00                       		bmi.s	loc_A4E6
0000C256 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000C25C 6400                       		bcc.s	loc_A4E6
0000C25E 4A78 FE08                  		tst.w	(v_debuguse).w
0000C262 6600                       		bne.s	loc_A4E6
0000C264 B240                       		cmp.w	d0,d1
0000C266 6400                       		bcc.s	loc_A4DC
0000C268 D241                       		add.w	d1,d1
0000C26A 9041                       		sub.w	d1,d0
0000C26C                            
0000C26C                            loc_A4DC:
0000C26C 0C43 0010                  		cmpi.w	#$10,d3
0000C270 6500                       		bcs.s	loc_A4EA
0000C272                            
0000C272                            loc_A4E2:
0000C272 7201                       		moveq	#1,d1
0000C274 4E75                       		rts	
0000C276                            ; ===========================================================================
0000C276                            
0000C276                            loc_A4E6:
0000C276 7200                       		moveq	#0,d1
0000C278 4E75                       		rts	
0000C27A                            ; ===========================================================================
0000C27A                            
0000C27A                            loc_A4EA:
0000C27A 7200                       		moveq	#0,d1
0000C27C 1228 0014                  		move.b	obActWid(a0),d1
0000C280 5841                       		addq.w	#4,d1
0000C282 3401                       		move.w	d1,d2
0000C284 D442                       		add.w	d2,d2
0000C286 D269 0008                  		add.w	obX(a1),d1
0000C28A 9268 0008                  		sub.w	obX(a0),d1
0000C28E 6BE2                       		bmi.s	loc_A4E2
0000C290 B242                       		cmp.w	d2,d1
0000C292 64DE                       		bcc.s	loc_A4E2
0000C294 72FF                       		moveq	#-1,d1
0000C296 4E75                       		rts	
0000C298                            ; End of function Obj26_SolidSides
0000C298                            ; End of function Obj26_SolidSides
0000C298                            		include	"_anim\Monitor.asm"
0000C298                            ; ---------------------------------------------------------------------------
0000C298                            ; Animation script - monitors
0000C298                            ; ---------------------------------------------------------------------------
0000C298 0000 0000 0000             Ani_Monitor:	dc.w @static-Ani_Monitor, @eggman-Ani_Monitor, @sonic-Ani_Monitor
0000C29E 0000 0000 0000             		dc.w @shoes-Ani_Monitor, @shield-Ani_Monitor, @invincible-Ani_Monitor
0000C2A4 0000 0000 0000             		dc.w @rings-Ani_Monitor, @s-Ani_Monitor, @goggles-Ani_Monitor
0000C2AA 0000 0000 0000             		dc.w @breaking-Ani_Monitor, @rshield-Ani_Monitor, @yshield-Ani_Monitor
0000C2B0 0000                       		dc.w @spshield-Ani_Monitor
0000C2B2                            		
0000C2B2 0100 0102 FF               @static:	dc.b 1,	0, 1, 2, afEnd
0000C2B8 00                         		even
0000C2B8 0100 0303 0103 0302 0303+  @eggman:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, afEnd
0000C2C4 00                         		even
0000C2C4 0100 0404 0104 0402 0404+  @sonic:		dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, afEnd
0000C2D0 00                         		even
0000C2D0 0100 0505 0105 0502 0505+  @shoes:		dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, afEnd
0000C2DC 00                         		even
0000C2DC 0100 0606 0106 0602 0606+  @shield:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, afEnd
0000C2E8 00                         		even
0000C2E8 0100 0707 0107 0702 0707+  @invincible:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, afEnd
0000C2F4 00                         		even
0000C2F4 0100 0808 0108 0802 0808+  @rings:		dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, afEnd
0000C300 00                         		even
0000C300 0100 0909 0109 0902 0909+  @s:		dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, afEnd
0000C30C 00                         		even
0000C30C 0100 0A0A 010A 0A02 0A0A+  @goggles:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, afEnd
0000C318 00                         		even
0000C318 0200 0102 0BFE 01          @breaking:	dc.b 2,	0, 1, 2, $B, afBack, 1
0000C320 00                         		even
0000C320 0100 0C0C 010C 0C02 0C0C+  @rshield:	dc.b 1,	0, $C, $C, 1, $C, $C, 2, $C, $C, afEnd
0000C32C 00                         		even
0000C32C 0100 0D0D 010D 0D02 0D0D+  @yshield:	dc.b 1,	0, $D, $D, 1, $D, $D, 2, $D, $D, afEnd
0000C338 00                         		even
0000C338 0100 0E0E 010E 0E02 0E0E+  @spshield:	dc.b 1,	0, $E, $E, 1, $E, $E, 2, $E, $E, afEnd
0000C344 00                         		even
0000C344 00                         		even
0000C344                            Map_Monitor:	include	"_maps\Monitor.asm"
0000C344                            ; --------------------------------------------------------------------------------
0000C344                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C344                            ; --------------------------------------------------------------------------------
0000C344                            
0000C344                            SME_0IgQe:	
0000C344 0000 0000                  		dc.w SME_0IgQe_1E-SME_0IgQe, SME_0IgQe_24-SME_0IgQe	
0000C348 0000 0000                  		dc.w SME_0IgQe_2F-SME_0IgQe, SME_0IgQe_3A-SME_0IgQe	
0000C34C 0000 0000                  		dc.w SME_0IgQe_45-SME_0IgQe, SME_0IgQe_50-SME_0IgQe	
0000C350 0000 0000                  		dc.w SME_0IgQe_5B-SME_0IgQe, SME_0IgQe_66-SME_0IgQe	
0000C354 0000 0000                  		dc.w SME_0IgQe_71-SME_0IgQe, SME_0IgQe_7C-SME_0IgQe	
0000C358 0000 0000                  		dc.w SME_0IgQe_87-SME_0IgQe, SME_0IgQe_92-SME_0IgQe	
0000C35C 0000 0000                  		dc.w SME_0IgQe_AC-SME_0IgQe, SME_0IgQe_B7-SME_0IgQe	
0000C360 0000                       		dc.w SME_0IgQe_C2-SME_0IgQe	
0000C362 01                         SME_0IgQe_1E:	dc.b 1	
0000C363 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C368 02                         SME_0IgQe_24:	dc.b 2	
0000C369 F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000C36E F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C373 02                         SME_0IgQe_2F:	dc.b 2	
0000C374 F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000C379 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C37E 02                         SME_0IgQe_3A:	dc.b 2	
0000C37F F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000C384 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C389 02                         SME_0IgQe_45:	dc.b 2	
0000C38A F505 0154 F8               		dc.b $F5, 5, 1, $54, $F8	
0000C38F F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C394 02                         SME_0IgQe_50:	dc.b 2	
0000C395 F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000C39A F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C39F 02                         SME_0IgQe_5B:	dc.b 2	
0000C3A0 F505 2028 F8               		dc.b $F5, 5, $20, $28, $F8	
0000C3A5 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C3AA 02                         SME_0IgQe_66:	dc.b 2	
0000C3AB F505 002C F8               		dc.b $F5, 5, 0, $2C, $F8	
0000C3B0 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C3B5 02                         SME_0IgQe_71:	dc.b 2	
0000C3B6 F505 2030 F8               		dc.b $F5, 5, $20, $30, $F8	
0000C3BB F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C3C0 02                         SME_0IgQe_7C:	dc.b 2	
0000C3C1 F505 0034 F8               		dc.b $F5, 5, 0, $34, $F8	
0000C3C6 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C3CB 02                         SME_0IgQe_87:	dc.b 2	
0000C3CC F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000C3D1 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C3D6 05                         SME_0IgQe_92:	dc.b 5	
0000C3D7 010C 0038 F0               		dc.b 1, $C, 0, $38, $F0	
0000C3DC 0900 0003 F0               		dc.b 9, 0, 0, 3, $F0	
0000C3E1 0900 0007 F8               		dc.b 9, 0, 0, 7, $F8	
0000C3E6 0900 000B 00               		dc.b 9, 0, 0, $B, 0	
0000C3EB 0900 000F 08               		dc.b 9, 0, 0, $F, 8	
0000C3F0 02                         SME_0IgQe_AC:	dc.b 2	
0000C3F1 F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000C3F6 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C3FB 02                         SME_0IgQe_B7:	dc.b 2	
0000C3FC F505 201C F8               		dc.b $F5, 5, $20, $1C, $F8	
0000C401 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C406 02                         SME_0IgQe_C2:	dc.b 2	
0000C407 F505 003C F8               		dc.b $F5, 5, 0, $3C, $F8	
0000C40C F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C412 00                         		even
0000C412 00                         		even
0000C412                            
0000C412                            		include	"_incObj\0E Title Screen Sonic.asm"
0000C412                            ; ---------------------------------------------------------------------------
0000C412                            ; Object 0E - Sonic on the title screen
0000C412                            ; ---------------------------------------------------------------------------
0000C412                            
0000C412                            TitleSonic:
0000C412 7000                       		moveq	#0,d0
0000C414 1028 0024                  		move.b	obRoutine(a0),d0
0000C418 323B 0000                  		move.w	TSon_Index(pc,d0.w),d1
0000C41C 4EFB 1000                  		jmp	TSon_Index(pc,d1.w)
0000C420                            ; ===========================================================================
0000C420 0000                       TSon_Index:	dc.w TSon_Main-TSon_Index
0000C422 0000                       		dc.w TSon_Delay-TSon_Index
0000C424 0000                       		dc.w TSon_Move-TSon_Index
0000C426 0000                       		dc.w TSon_Animate-TSon_Index
0000C428                            ; ===========================================================================
0000C428                            
0000C428                            TSon_Main:	; Routine 0
0000C428 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C42C 317C 00F0 0008             		move.w	#$F0,obX(a0)
0000C432 317C 00DE 000A             		move.w	#$DE,obScreenY(a0) ; position is fixed to screen
0000C438 217C 0000 0000 0004        		move.l	#Map_TSon,obMap(a0)
0000C440 317C 2348 0002             		move.w	#$2348,obGfx(a0)
0000C446 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000C44C 117C 001D 001F             		move.b	#29,obDelayAni(a0) ; set time delay to 0.5 seconds
0000C452 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C458 6100 0000                  		bsr.w	AnimateSprite
0000C45C                            
0000C45C                            TSon_Delay:	;Routine 2
0000C45C 5328 001F                  		subq.b	#1,obDelayAni(a0) ; subtract 1 from time delay
0000C460 6A00                       		bpl.s	@wait		; if time remains, branch
0000C462 5428 0024                  		addq.b	#2,obRoutine(a0) ; go to next routine
0000C466 6000 0000                  		bra.w	DisplaySprite
0000C46A                            
0000C46A                            	@wait:
0000C46A 4E75                       		rts	
0000C46C                            ; ===========================================================================
0000C46C                            
0000C46C                            TSon_Move:	; Routine 4
0000C46C 5168 000A                  		subq.w	#8,obScreenY(a0) ; move Sonic up
0000C470 0C68 0096 000A             		cmpi.w	#$96,obScreenY(a0) ; has Sonic reached final position?
0000C476 6600                       		bne.s	@display	; if not, branch
0000C478 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C47C                            
0000C47C                            	@display:
0000C47C 6000 0000                  		bra.w	DisplaySprite
0000C480                            
0000C480 4E75                       		rts	
0000C482                            ; ===========================================================================
0000C482                            
0000C482                            TSon_Animate:	; Routine 6
0000C482 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C488 6100 0000                  		bsr.w	AnimateSprite
0000C48C 6000 0000                  		bra.w	DisplaySprite
0000C490                            
0000C490 4E75                       		rts	
0000C490 4E75                       		rts	
0000C492                            		include	"_incObj\0F Press Start and TM.asm"
0000C492                            ; ---------------------------------------------------------------------------
0000C492                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000C492                            ; ---------------------------------------------------------------------------
0000C492                            
0000C492                            PSBTM:
0000C492 7000                       		moveq	#0,d0
0000C494 1028 0024                  		move.b	obRoutine(a0),d0
0000C498 323B 0000                  		move.w	PSB_Index(pc,d0.w),d1
0000C49C 4EBB 1000                  		jsr	PSB_Index(pc,d1.w)
0000C4A0 6000 0000                  		bra.w	DisplaySprite
0000C4A4                            ; ===========================================================================
0000C4A4 0000                       PSB_Index:	dc.w PSB_Main-PSB_Index
0000C4A6 0000                       		dc.w PSB_PrsStart-PSB_Index
0000C4A8 0000                       		dc.w PSB_Exit-PSB_Index
0000C4AA 0000                       		dc.w PSB_Menu-PSB_Index		
0000C4AC                            ; ===========================================================================
0000C4AC                            
0000C4AC                            PSB_Main:	; Routine 0
0000C4AC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C4B0 317C 00D0 0008             		move.w	#$D0,obX(a0)
0000C4B6 317C 0130 000A             		move.w	#$130,obScreenY(a0)
0000C4BC 217C 0000 0000 0004        		move.l	#Map_PSB,obMap(a0)
0000C4C4 317C 0200 0002             		move.w	#$200,obGfx(a0)
0000C4CA 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)	; is object "PRESS START"?
0000C4D0 6500                       		bcs.s	PSB_PrsStart	; if yes, branch
0000C4D2                            
0000C4D2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C4D6 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is the object	"TM"?
0000C4DC 6600                       		bne.s	PSB_Exit	; if not, branch
0000C4DE                            
0000C4DE 317C 2510 0002             		move.w	#$2510,obGfx(a0) ; "TM" specific code
0000C4E4 317C 0170 0008             		move.w	#$170,obX(a0)
0000C4EA 317C 00F8 000A             		move.w	#$F8,obScreenY(a0)
0000C4F0                            
0000C4F0                            PSB_Exit:	; Routine 4
0000C4F0 4E75                       		rts	
0000C4F2                            ; ===========================================================================
0000C4F2                            
0000C4F2                            PSB_PrsStart:	; Routine 2
0000C4F2 0838 0007 F605             		btst   #7,(v_jpadpress1).w   ; check if Start is pressed
0000C4F8 6700                       		beq.s   PSB_PrsStart_Show   ; if not, branch
0000C4FA 5828 0024                  		addq.b   #4,obRoutine(a0)      ; go to Menu in next frame
0000C4FE 303C 00A1                  		move.w   #$A1,d0 
0000C502 4EB8 12A0                  		jsr   PlaySound_Special
0000C506 317C 056F 0002             		move.w   #$56F,obGfx(a0)
0000C50C 217C 0000 0000 0004        		move.l   #Map_TitleMenu,obMap(a0) 
0000C514 317C 00F8 0008             		move.w	#$F8,obX(a0)
0000C51A 317C 0150 000A             		move.w	#$150,obScreenY(a0)
0000C520 4E75                       		rts
0000C522                            
0000C522                            PSB_PrsStart_Show:
0000C522 43F9 0000 0000             		lea	(Ani_PSBTM).l,a1
0000C528 6000 0000                  		bra.w	AnimateSprite	; "PRESS START" is animated
0000C52C                            
0000C52C                            PSB_Menu:
0000C52C 7400                             moveq   #0,d2
0000C52E 1438 FFB0                        move.b   (Title_screen_option).w,d2
0000C532 1038 F605                        move.b   (v_jpadpress1).w,d0
0000C536 0800 0000                        btst   #0,d0
0000C53A 6700                             beq.s   MAIN2
0000C53C 5302                             subq.b   #1,d2
0000C53E 6400                             bcc.s   MAIN2
0000C540 143C 0001                        move.b   #1,d2
0000C544                            
0000C544                            MAIN2:
0000C544 0800 0001                        btst   #1,d0
0000C548 6700                             beq.s   MAIN3
0000C54A 5202                             addq.b   #1,d2
0000C54C 0C02 0002                        cmpi.b   #2,d2
0000C550 6500                             blo.s   MAIN3
0000C552 7400                             moveq   #0,d2
0000C554                            
0000C554                            MAIN3:
0000C554 1142 001A                        move.b   d2,$1A(a0)
0000C558 11C2 FFB0                        move.b   d2,(Title_screen_option).w
0000C55C 0200 0003                        andi.b   #3,d0
0000C560 6700                             beq.s   MAIN4   
0000C562 303C 00CD                        move.w   #$CD,d0 ; selection blip sound
0000C566 4EB8 12A0                        jsr   PlaySound_Special
0000C56A                            
0000C56A                            MAIN4:
0000C56A 0838 0007 F605                   btst   #7,(v_jpadpress1).w   ; check if Start is pressed
0000C570 6700                             beq.s   MENURTS   ; if not, branch
0000C572 4EF9 0000 0000                   jmp   DeleteObject   ; if yes, delete the Title Screen Menu
0000C578                            
0000C578                            MENURTS:
0000C578 4E75                             rts															 
0000C57A                            ; ===========================================================================
0000C57A                            
0000C57A                            
0000C57A                            Map_TitleMenu:
0000C57A                            		include "_maps\Title Screen Menu.asm"		
0000C57A                            ; --------------------------------------------------------------------------------
0000C57A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C57A                            ; --------------------------------------------------------------------------------
0000C57A                            
0000C57A                            SME_g2Qfx:	
0000C57A 0000 0000                  		dc.w SME_g2Qfx_6-SME_g2Qfx, SME_g2Qfx_6B-SME_g2Qfx	
0000C57E 10                         SME_g2Qfx_6:	dc.b $10	
0000C57F E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C584 E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C589 E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C58E E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C593 E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C598 E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C59D E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C5A2 E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C5A7 F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C5AC F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C5B1 F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C5B6 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000C5BB F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000C5C0 F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000C5C5 F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000C5CA E004 0028 E0               		dc.b $E0, 4, 0, $28, $E0	
0000C5CF 10                         SME_g2Qfx_6B:	dc.b $10	
0000C5D0 E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C5D5 E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C5DA E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C5DF E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C5E4 E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C5E9 E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C5EE E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C5F3 E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C5F8 F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C5FD F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C602 F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C607 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000C60C F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000C611 F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000C616 F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000C61B F004 0028 E0               		dc.b $F0, 4, 0, $28, $E0
0000C620                            		even
0000C620                            		even
0000C620                            		even
0000C620                            
0000C620                            		include	"_anim\Title Screen Sonic.asm"
0000C620                            ; ---------------------------------------------------------------------------
0000C620                            ; Animation script - Sonic on the title screen
0000C620                            ; ---------------------------------------------------------------------------
0000C620 0000                       Ani_TSon:	dc.w byte_A706-Ani_TSon
0000C622 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	afBack, 2
0000C62E 00                         		even
0000C62E 00                         		even
0000C62E                            		include	"_anim\Press Start and TM.asm"
0000C62E                            ; ---------------------------------------------------------------------------
0000C62E                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000C62E                            ; ---------------------------------------------------------------------------
0000C62E 0000                       Ani_PSBTM:	dc.w @flash-Ani_PSBTM
0000C630 1F00 01FF                  @flash:		dc.b $1F, 0, 1,	afEnd
0000C634                            		even
0000C634                            		even
0000C634                            
0000C634                            		include	"_incObj\sub AnimateSprite.asm"
0000C634                            ; ---------------------------------------------------------------------------
0000C634                            ; Subroutine to	animate	a sprite using an animation script
0000C634                            ; ---------------------------------------------------------------------------
0000C634                            
0000C634                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C634                            
0000C634                            
0000C634                            AnimateSprite:
0000C634 7000                       		moveq	#0,d0
0000C636 1028 001C                  		move.b	obAnim(a0),d0	; move animation number	to d0
0000C63A B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
0000C63E 6700                       		beq.s	Anim_Run	; if not, branch
0000C640                            
0000C640 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
0000C644 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C64A 117C 0000 001E             		move.b	#0,obTimeFrame(a0) ; reset frame duration
0000C650                            
0000C650                            Anim_Run:
0000C650 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000C654 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000C656 D040                       		add.w	d0,d0
0000C658 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000C65C 1151 001E                  		move.b	(a1),obTimeFrame(a0) ; load frame duration
0000C660 7200                       		moveq	#0,d1
0000C662 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0000C666 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000C66A 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000C66C                            
0000C66C                            Anim_Next:
0000C66C 1200                       		move.b	d0,d1
0000C66E 0200 001F                  		andi.b	#$1F,d0
0000C672 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0000C676 1028 0022                  		move.b	obStatus(a0),d0
0000C67A E719                       		rol.b	#3,d1
0000C67C B101                       		eor.b	d0,d1
0000C67E 0201 0003                  		andi.b	#3,d1
0000C682 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0000C688 8328 0001                  		or.b	d1,obRender(a0)
0000C68C 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
0000C690                            
0000C690                            Anim_Wait:
0000C690 4E75                       		rts	
0000C692                            ; ===========================================================================
0000C692                            
0000C692                            Anim_End_FF:
0000C692 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000C694 6600                       		bne.s	Anim_End_FE	; if not, branch
0000C696 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; restart the animation
0000C69C 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000C6A0 60CA                       		bra.s	Anim_Next
0000C6A2                            ; ===========================================================================
0000C6A2                            
0000C6A2                            Anim_End_FE:
0000C6A2 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000C6A4 6600                       		bne.s	Anim_End_FD	; if not, branch
0000C6A6 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000C6AA 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0000C6AE 9200                       		sub.b	d0,d1
0000C6B0 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000C6B4 60B6                       		bra.s	Anim_Next
0000C6B6                            ; ===========================================================================
0000C6B6                            
0000C6B6                            Anim_End_FD:
0000C6B6 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000C6B8 6600                       		bne.s	Anim_End_FC	; if not, branch
0000C6BA 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
0000C6C0                            
0000C6C0                            Anim_End_FC:
0000C6C0 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000C6C2 6600                       		bne.s	Anim_End_FB	; if not, branch
0000C6C4 5428 0024                  		addq.b	#2,obRoutine(a0) ; jump to next routine
0000C6C8                            
0000C6C8                            Anim_End_FB:
0000C6C8 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000C6CA 6600                       		bne.s	Anim_End_FA	; if not, branch
0000C6CC 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C6D2 4228 0025                  		clr.b	ob2ndRout(a0)	; reset	2nd routine counter
0000C6D6                            
0000C6D6                            Anim_End_FA:
0000C6D6 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000C6D8 6600                       		bne.s	Anim_End	; if not, branch
0000C6DA 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; jump to next routine
0000C6DE                            
0000C6DE                            Anim_End:
0000C6DE 4E75                       		rts	
0000C6E0                            ; End of function AnimateSprite
0000C6E0                            ; End of function AnimateSprite
0000C6E0                            
0000C6E0                            Map_PSB:	include	"_maps\Press Start and TM.asm"
0000C6E0                            ; ---------------------------------------------------------------------------
0000C6E0                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000C6E0                            ; ---------------------------------------------------------------------------
0000C6E0                            Map_PSB_internal:
0000C6E0 0000                       		dc.w byte_A7CD-Map_PSB_internal
0000C6E2 0000                       		dc.w M_PSB_PSB-Map_PSB_internal
0000C6E4 0000                       		dc.w M_PSB_Limiter-Map_PSB_internal
0000C6E6 0000                       		dc.w M_PSB_TM-Map_PSB_internal
0000C6E8 06                         M_PSB_PSB:	dc.b 6			; "PRESS START BUTTON"
0000C6E9 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000C6EE 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000C6F3 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000C6F8 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000C6FD 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000C702 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000C707 1E                         M_PSB_Limiter:	dc.b $1E		; sprite line limiter
0000C708 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C70D B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C712 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C717 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C71C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C721 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C726 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C72B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C730 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C735 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C73A D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C73F D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C744 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C749 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C74E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C753 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C758 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C75D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C762 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C767 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C76C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C771 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C776 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C77B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C780 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C785 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C78A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C78F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C794 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C799 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C79E 01                         M_PSB_TM:	dc.b 1			; "TM"
0000C79F FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000C7A4                            		even
0000C7A4                            		even
0000C7A4                            Map_TSon:	include	"_maps\Title Screen Sonic.asm"
0000C7A4                            ; ---------------------------------------------------------------------------
0000C7A4                            ; Sprite mappings - Sonic on the title screen
0000C7A4                            ; ---------------------------------------------------------------------------
0000C7A4                            Map_TSon_internal:
0000C7A4 0000                       		dc.w byte_A898-Map_TSon_internal
0000C7A6 0000                       		dc.w byte_A8CB-Map_TSon_internal
0000C7A8 0000                       		dc.w byte_A917-Map_TSon_internal
0000C7AA 0000                       		dc.w byte_A96D-Map_TSon_internal
0000C7AC 0000                       		dc.w byte_A9AF-Map_TSon_internal
0000C7AE 0000                       		dc.w byte_A9E7-Map_TSon_internal
0000C7B0 0000                       		dc.w byte_AA47-Map_TSon_internal
0000C7B2 0000                       		dc.w byte_AAB1-Map_TSon_internal
0000C7B4 0A                         byte_A898:	dc.b $A
0000C7B5 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000C7BA 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000C7BF 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000C7C4 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000C7C9 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000C7CE 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000C7D3 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000C7D8 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000C7DD 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000C7E2 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000C7E7 0F                         byte_A8CB:	dc.b $F
0000C7E8 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000C7ED 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000C7F2 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000C7F7 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000C7FC 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000C801 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000C806 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000C80B 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000C810 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000C815 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000C81A 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000C81F 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000C824 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000C829 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000C82E 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000C833 11                         byte_A917:	dc.b $11
0000C834 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000C839 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000C83E 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000C843 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000C848 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000C84D 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000C852 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000C857 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000C85C 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000C861 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000C866 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000C86B 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000C870 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000C875 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000C87A 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000C87F 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000C884 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000C889 0D                         byte_A96D:	dc.b $D
0000C88A 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000C88F 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000C894 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000C899 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000C89E 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000C8A3 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000C8A8 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000C8AD 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000C8B2 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000C8B7 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000C8BC 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000C8C1 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000C8C6 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000C8CB 0B                         byte_A9AF:	dc.b $B
0000C8CC 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000C8D1 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000C8D6 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000C8DB 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000C8E0 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000C8E5 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000C8EA 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000C8EF 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000C8F4 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000C8F9 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000C8FE 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000C903 13                         byte_A9E7:	dc.b $13
0000C904 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000C909 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000C90E 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000C913 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000C918 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C91D 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C922 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C927 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C92C 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C931 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C936 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C93B 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C940 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C945 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C94A 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C94F 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C954 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C959 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C95E 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C963 15                         byte_AA47:	dc.b $15
0000C964 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000C969 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000C96E 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000C973 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000C978 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000C97D 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000C982 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C987 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C98C 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C991 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C996 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C99B 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C9A0 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C9A5 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C9AA 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C9AF 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C9B4 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C9B9 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C9BE 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C9C3 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C9C8 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C9CD 16                         byte_AAB1:	dc.b $16
0000C9CE 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000C9D3 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000C9D8 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000C9DD 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000C9E2 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000C9E7 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000C9EC 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000C9F1 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C9F6 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C9FB 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CA00 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CA05 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CA0A 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CA0F 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CA14 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CA19 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CA1E 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CA23 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CA28 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CA2D 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CA32 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CA37 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CA3C                            		even
0000CA3C                            		even
0000CA3C                            
0000CA3C                            		include	"_incObj\2B Chopper.asm"
0000CA3C                            ; ---------------------------------------------------------------------------
0000CA3C                            ; Object 2B - Chopper enemy (GHZ)
0000CA3C                            ; ---------------------------------------------------------------------------
0000CA3C                            
0000CA3C                            Chopper:
0000CA3C 7000                       		moveq	#0,d0
0000CA3E 1028 0024                  		move.b	obRoutine(a0),d0
0000CA42 323B 0000                  		move.w	Chop_Index(pc,d0.w),d1
0000CA46 4EBB 1000                  		jsr	Chop_Index(pc,d1.w)
0000CA4A 6000 0000                  		bra.w	RememberState
0000CA4E                            ; ===========================================================================
0000CA4E 0000                       Chop_Index:	dc.w Chop_Main-Chop_Index
0000CA50 0000                       		dc.w Chop_ChgSpeed-Chop_Index
0000CA52                            
0000CA52 =00000030                  chop_origY:	equ $30
0000CA52                            ; ===========================================================================
0000CA52                            
0000CA52                            Chop_Main:	; Routine 0
0000CA52 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CA56 217C 0000 0000 0004        		move.l	#Map_Chop,obMap(a0)
0000CA5E 317C 047B 0002             		move.w	#$47B,obGfx(a0)
0000CA64 117C 0004 0001             		move.b	#4,obRender(a0)
0000CA6A 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CA70 117C 0009 0020             		move.b	#9,obColType(a0)
0000CA76 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CA7C 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CA82 3168 000C 0030             		move.w	obY(a0),chop_origY(a0) ; save original position
0000CA88                            
0000CA88                            Chop_ChgSpeed:	; Routine 2
0000CA88 43F9 0000 0000             		lea	(Ani_Chop).l,a1
0000CA8E 6100 FBA4                  		bsr.w	AnimateSprite
0000CA92 6100 0000                  		bsr.w	SpeedToPos
0000CA96 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce speed
0000CA9C 3028 0030                  		move.w	chop_origY(a0),d0
0000CAA0 B068 000C                  		cmp.w	obY(a0),d0	; has Chopper returned to its original position?
0000CAA4 6400                       		bcc.s	@chganimation	; if not, branch
0000CAA6 3140 000C                  		move.w	d0,obY(a0)
0000CAAA 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CAB0                            
0000CAB0                            	@chganimation:
0000CAB0 117C 0001 001C             		move.b	#1,obAnim(a0)	; use fast animation
0000CAB6 0440 00C0                  		subi.w	#$C0,d0
0000CABA B068 000C                  		cmp.w	obY(a0),d0
0000CABE 6400                       		bcc.s	@nochg
0000CAC0 117C 0000 001C             		move.b	#0,obAnim(a0)	; use slow animation
0000CAC6 4A68 0012                  		tst.w	obVelY(a0)	; is Chopper at	its highest point?
0000CACA 6B00                       		bmi.s	@nochg		; if not, branch
0000CACC 117C 0002 001C             		move.b	#2,obAnim(a0)	; use stationary animation
0000CAD2                            
0000CAD2                            	@nochg:
0000CAD2 4E75                       		rts	
0000CAD2 4E75                       		rts	
0000CAD4                            		include	"_anim\Chopper.asm"
0000CAD4                            ; ---------------------------------------------------------------------------
0000CAD4                            ; Animation script - Chopper enemy
0000CAD4                            ; ---------------------------------------------------------------------------
0000CAD4 0000                       Ani_Chop:	dc.w @slow-Ani_Chop
0000CAD6 0000                       		dc.w @fast-Ani_Chop
0000CAD8 0000                       		dc.w @still-Ani_Chop
0000CADA 0700 01FF                  @slow:		dc.b 7,	0, 1, afEnd
0000CADE 0300 01FF                  @fast:		dc.b 3,	0, 1, afEnd
0000CAE2 0700 FF                    @still:		dc.b 7,	0, afEnd
0000CAE6 00                         		even
0000CAE6 00                         		even
0000CAE6                            Map_Chop:	include	"_maps\Chopper.asm"
0000CAE6                            ; ---------------------------------------------------------------------------
0000CAE6                            ; Sprite mappings - Chopper enemy (GHZ)
0000CAE6                            ; ---------------------------------------------------------------------------
0000CAE6                            Map_Chop_internal:
0000CAE6 0000                       		dc.w @mouthshut-Map_Chop_internal
0000CAE8 0000                       		dc.w @mouthopen-Map_Chop_internal
0000CAEA 01                         @mouthshut:	dc.b 1
0000CAEB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000CAF0 01                         @mouthopen:	dc.b 1
0000CAF1 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000CAF6                            		even
0000CAF6                            		even
0000CAF6                            		include	"_incObj\2C Jaws.asm"
0000CAF6                            ; ---------------------------------------------------------------------------
0000CAF6                            ; Object 2C - Jaws enemy (LZ)
0000CAF6                            ; ---------------------------------------------------------------------------
0000CAF6                            
0000CAF6                            Jaws:
0000CAF6 7000                       		moveq	#0,d0
0000CAF8 1028 0024                  		move.b	obRoutine(a0),d0
0000CAFC 323B 0000                  		move.w	Jaws_Index(pc,d0.w),d1
0000CB00 4EFB 1000                  		jmp	Jaws_Index(pc,d1.w)
0000CB04                            ; ===========================================================================
0000CB04 0000                       Jaws_Index:	dc.w Jaws_Main-Jaws_Index
0000CB06 0000                       		dc.w Jaws_Turn-Jaws_Index
0000CB08                            
0000CB08 =00000030                  jaws_timecount:	equ $30
0000CB08 =00000032                  jaws_timedelay:	equ $32
0000CB08                            ; ===========================================================================
0000CB08                            
0000CB08                            Jaws_Main:	; Routine 0
0000CB08 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CB0C 217C 0000 0000 0004        		move.l	#Map_Jaws,obMap(a0)
0000CB14 317C 2486 0002             		move.w	#$2486,obGfx(a0)
0000CB1A 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CB20 117C 000A 0020             		move.b	#$A,obColType(a0)
0000CB26 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CB2C 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CB32 7000                       		moveq	#0,d0
0000CB34 1028 0028                  		move.b	obSubtype(a0),d0 ; load object subtype number
0000CB38 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000CB3A 5340                       		subq.w	#1,d0
0000CB3C 3140 0030                  		move.w	d0,jaws_timecount(a0) ; set turn delay time
0000CB40 3140 0032                  		move.w	d0,jaws_timedelay(a0)
0000CB44 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move Jaws to the left
0000CB4A 0828 0000 0022             		btst	#0,obStatus(a0)	; is Jaws facing left?
0000CB50 6700                       		beq.s	Jaws_Turn	; if yes, branch
0000CB52 4468 0010                  		neg.w	obVelX(a0)	; move Jaws to the right
0000CB56                            
0000CB56                            Jaws_Turn:	; Routine 2
0000CB56 5368 0030                  		subq.w	#1,jaws_timecount(a0) ; subtract 1 from turn delay time
0000CB5A 6A00                       		bpl.s	@animate	; if time remains, branch
0000CB5C 3168 0032 0030             		move.w	jaws_timedelay(a0),jaws_timecount(a0) ; reset turn delay time
0000CB62 4468 0010                  		neg.w	obVelX(a0)	; change speed direction
0000CB66 0868 0000 0022             		bchg	#0,obStatus(a0)	; change Jaws facing direction
0000CB6C 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000CB72                            
0000CB72                            	@animate:
0000CB72 43F9 0000 0000             		lea	(Ani_Jaws).l,a1
0000CB78 6100 FABA                  		bsr.w	AnimateSprite
0000CB7C 6100 0000                  		bsr.w	SpeedToPos
0000CB80 6000 0000                  		bra.w	RememberState
0000CB80 6000 0000                  		bra.w	RememberState
0000CB84                            		include	"_anim\Jaws.asm"
0000CB84                            ; ---------------------------------------------------------------------------
0000CB84                            ; Animation script - Jaws enemy
0000CB84                            ; ---------------------------------------------------------------------------
0000CB84 0000                       Ani_Jaws:	dc.w @swim-Ani_Jaws
0000CB86 0700 0102 03FF             @swim:		dc.b 7,	0, 1, 2, 3, afEnd
0000CB8C                            		even
0000CB8C                            		even
0000CB8C                            Map_Jaws:	include	"_maps\Jaws.asm"
0000CB8C                            ; --------------------------------------------------------------------------------
0000CB8C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CB8C                            ; --------------------------------------------------------------------------------
0000CB8C                            
0000CB8C                            SME_O5C0c:	
0000CB8C 0000 0000                  		dc.w SME_O5C0c_8-SME_O5C0c, SME_O5C0c_13-SME_O5C0c	
0000CB90 0000 0000                  		dc.w SME_O5C0c_1E-SME_O5C0c, SME_O5C0c_29-SME_O5C0c	
0000CB94 02                         SME_O5C0c_8:	dc.b 2	
0000CB95 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CB9A F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CB9F 02                         SME_O5C0c_13:	dc.b 2	
0000CBA0 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CBA5 F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CBAA 02                         SME_O5C0c_1E:	dc.b 2	
0000CBAB F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CBB0 F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CBB5 02                         SME_O5C0c_29:	dc.b 2	
0000CBB6 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CBBB F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CBC0                            		even
0000CBC0                            		even
0000CBC0                            		include	"_incObj\2D Burrobot.asm"
0000CBC0                            ; ---------------------------------------------------------------------------
0000CBC0                            ; Object 2D - Burrobot enemy (LZ)
0000CBC0                            ; ---------------------------------------------------------------------------
0000CBC0                            
0000CBC0                            Burrobot:
0000CBC0 7000                       		moveq	#0,d0
0000CBC2 1028 0024                  		move.b	obRoutine(a0),d0
0000CBC6 323B 0000                  		move.w	Burro_Index(pc,d0.w),d1
0000CBCA 4EFB 1000                  		jmp	Burro_Index(pc,d1.w)
0000CBCE                            ; ===========================================================================
0000CBCE 0000                       Burro_Index:	dc.w Burro_Main-Burro_Index
0000CBD0 0000                       		dc.w Burro_Action-Burro_Index
0000CBD2                            
0000CBD2 =00000030                  burro_timedelay:	equ $30		; time between direction changes
0000CBD2                            ; ===========================================================================
0000CBD2                            
0000CBD2                            Burro_Main:	; Routine 0
0000CBD2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CBD6 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000CBDC 117C 0008 0017             		move.b	#8,obWidth(a0)
0000CBE2 217C 0000 0000 0004        		move.l	#Map_Burro,obMap(a0)
0000CBEA 317C 04A6 0002             		move.w	#$4A6,obGfx(a0)
0000CBF0 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CBF6 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CBFC 117C 0005 0020             		move.b	#5,obColType(a0)
0000CC02 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000CC08 5C28 0025                  		addq.b	#6,ob2ndRout(a0) ; run "Burro_ChkSonic" routine
0000CC0C 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CC12                            
0000CC12                            Burro_Action:	; Routine 2
0000CC12 7000                       		moveq	#0,d0
0000CC14 1028 0025                  		move.b	ob2ndRout(a0),d0
0000CC18 323B 0000                  		move.w	@index(pc,d0.w),d1
0000CC1C 4EBB 1000                  		jsr	@index(pc,d1.w)
0000CC20 43F9 0000 0000             		lea	(Ani_Burro).l,a1
0000CC26 6100 FA0C                  		bsr.w	AnimateSprite
0000CC2A 6000 0000                  		bra.w	RememberState
0000CC2E                            ; ===========================================================================
0000CC2E 0000                       @index:		dc.w @changedir-@index
0000CC30 0000                       		dc.w Burro_Move-@index
0000CC32 0000                       		dc.w Burro_Jump-@index
0000CC34 0000                       		dc.w Burro_ChkSonic-@index
0000CC36                            ; ===========================================================================
0000CC36                            
0000CC36                            @changedir:
0000CC36 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CC3A 6A00                       		bpl.s	@nochg
0000CC3C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CC40 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CC46 317C 0080 0010             		move.w	#$80,obVelX(a0)
0000CC4C 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CC52 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction the Burrobot	is facing
0000CC58 6700                       		beq.s	@nochg
0000CC5A 4468 0010                  		neg.w	obVelX(a0)	; change direction the Burrobot	is moving
0000CC5E                            
0000CC5E                            	@nochg:
0000CC5E 4E75                       		rts	
0000CC60                            ; ===========================================================================
0000CC60                            
0000CC60                            Burro_Move:
0000CC60 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CC64 6B00                       		bmi.s	loc_AD84
0000CC66 6100 0000                  		bsr.w	SpeedToPos
0000CC6A 0868 0000 0032             		bchg	#0,$32(a0)
0000CC70 6600                       		bne.s	loc_AD78
0000CC72 3628 0008                  		move.w	obX(a0),d3
0000CC76 0643 000C                  		addi.w	#$C,d3
0000CC7A 0828 0000 0022             		btst	#0,obStatus(a0)
0000CC80 6600                       		bne.s	loc_AD6A
0000CC82 0443 0018                  		subi.w	#$18,d3
0000CC86                            
0000CC86                            loc_AD6A:
0000CC86 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000CC8C 0C41 000C                  		cmpi.w	#$C,d1
0000CC90 6C00                       		bge.s	loc_AD84
0000CC92 4E75                       		rts	
0000CC94                            ; ===========================================================================
0000CC94                            
0000CC94                            loc_AD78:
0000CC94 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CC9A D368 000C                  		add.w	d1,obY(a0)
0000CC9E 4E75                       		rts	
0000CCA0                            ; ===========================================================================
0000CCA0                            
0000CCA0                            loc_AD84:
0000CCA0 0838 0002 FE0F             		btst	#2,(v_vbla_byte).w
0000CCA6 6700                       		beq.s	loc_ADA4
0000CCA8 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CCAC 317C 003B 0030             		move.w	#59,burro_timedelay(a0)
0000CCB2 317C 0000 0010             		move.w	#0,obVelX(a0)
0000CCB8 117C 0000 001C             		move.b	#0,obAnim(a0)
0000CCBE 4E75                       		rts	
0000CCC0                            ; ===========================================================================
0000CCC0                            
0000CCC0                            loc_ADA4:
0000CCC0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CCC4 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000CCCA 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CCD0 4E75                       		rts	
0000CCD2                            ; ===========================================================================
0000CCD2                            
0000CCD2                            Burro_Jump:
0000CCD2 6100 0000                  		bsr.w	SpeedToPos
0000CCD6 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000CCDC 6B00                       		bmi.s	locret_ADF0
0000CCDE 117C 0003 001C             		move.b	#3,obAnim(a0)
0000CCE4 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CCEA 4A41                       		tst.w	d1
0000CCEC 6A00                       		bpl.s	locret_ADF0
0000CCEE D368 000C                  		add.w	d1,obY(a0)
0000CCF2 317C 0000 0012             		move.w	#0,obVelY(a0)
0000CCF8 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CCFE 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CD04 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CD08 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CD0C                            
0000CD0C                            locret_ADF0:
0000CD0C 4E75                       		rts	
0000CD0E                            ; ===========================================================================
0000CD0E                            
0000CD0E                            Burro_ChkSonic:
0000CD0E 343C 0060                  		move.w	#$60,d2
0000CD12 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CD16 6400                       		bcc.s	locret_AE20
0000CD18 3038 D00C                  		move.w	(v_player+obY).w,d0
0000CD1C 9068 000C                  		sub.w	obY(a0),d0
0000CD20 6400                       		bcc.s	locret_AE20
0000CD22 0C40 FF80                  		cmpi.w	#-$80,d0
0000CD26 6500                       		bcs.s	locret_AE20
0000CD28 4A78 FE08                  		tst.w	(v_debuguse).w
0000CD2C 6600                       		bne.s	locret_AE20
0000CD2E 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CD32 3141 0010                  		move.w	d1,obVelX(a0)
0000CD36 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000CD3C                            
0000CD3C                            locret_AE20:
0000CD3C 4E75                       		rts	
0000CD3E                            
0000CD3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CD3E                            
0000CD3E                            
0000CD3E                            Burro_ChkSonic2:
0000CD3E 323C 0080                  		move.w	#$80,d1
0000CD42 08E8 0000 0022             		bset	#0,obStatus(a0)
0000CD48 3038 D008                  		move.w	(v_player+obX).w,d0
0000CD4C 9068 0008                  		sub.w	obX(a0),d0
0000CD50 6400                       		bcc.s	loc_AE40
0000CD52 4440                       		neg.w	d0
0000CD54 4441                       		neg.w	d1
0000CD56 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000CD5C                            
0000CD5C                            loc_AE40:
0000CD5C B042                       		cmp.w	d2,d0
0000CD5E 4E75                       		rts	
0000CD60                            ; End of function Burro_ChkSonic2
0000CD60                            ; End of function Burro_ChkSonic2
0000CD60                            		include	"_anim\Burrobot.asm"
0000CD60                            ; ---------------------------------------------------------------------------
0000CD60                            ; Animation script - Burrobot enemy
0000CD60                            ; ---------------------------------------------------------------------------
0000CD60 0000                       Ani_Burro:	dc.w @walk1-Ani_Burro
0000CD62 0000                       		dc.w @walk2-Ani_Burro
0000CD64 0000                       		dc.w @digging-Ani_Burro
0000CD66 0000                       		dc.w @fall-Ani_Burro
0000CD68 0300 06FF                  @walk1:		dc.b 3,	0, 6, afEnd
0000CD6C 0300 01FF                  @walk2:		dc.b 3,	0, 1, afEnd
0000CD70 0302 03FF                  @digging:	dc.b 3,	2, 3, afEnd
0000CD74 0304 FF                    @fall:		dc.b 3,	4, afEnd
0000CD78 00                         		even
0000CD78 00                         		even
0000CD78                            Map_Burro:	include	"_maps\Burrobot.asm"
0000CD78                            ; --------------------------------------------------------------------------------
0000CD78                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CD78                            ; --------------------------------------------------------------------------------
0000CD78                            
0000CD78                            SME_Ag_86:	
0000CD78 0000 0000                  		dc.w SME_Ag_86_E-SME_Ag_86, SME_Ag_86_19-SME_Ag_86	
0000CD7C 0000 0000                  		dc.w SME_Ag_86_24-SME_Ag_86, SME_Ag_86_2F-SME_Ag_86	
0000CD80 0000 0000                  		dc.w SME_Ag_86_3A-SME_Ag_86, SME_Ag_86_45-SME_Ag_86	
0000CD84 0000                       		dc.w SME_Ag_86_50-SME_Ag_86	
0000CD86 02                         SME_Ag_86_E:	dc.b 2	
0000CD87 EC0A 2000 F0               		dc.b $EC, $A, $20, 0, $F0	
0000CD8C 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000CD91 02                         SME_Ag_86_19:	dc.b 2	
0000CD92 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000CD97 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000CD9C 02                         SME_Ag_86_24:	dc.b 2	
0000CD9D E80A 201E F4               		dc.b $E8, $A, $20, $1E, $F4	
0000CDA2 000A 2027 F4               		dc.b 0, $A, $20, $27, $F4	
0000CDA7 02                         SME_Ag_86_2F:	dc.b 2	
0000CDA8 E80A 2030 F4               		dc.b $E8, $A, $20, $30, $F4	
0000CDAD 000A 2039 F4               		dc.b 0, $A, $20, $39, $F4	
0000CDB2 02                         SME_Ag_86_3A:	dc.b 2	
0000CDB3 E80A 200F F0               		dc.b $E8, $A, $20, $F, $F0	
0000CDB8 000A 2042 F4               		dc.b 0, $A, $20, $42, $F4	
0000CDBD 02                         SME_Ag_86_45:	dc.b 2	
0000CDBE F406 204B E8               		dc.b $F4, 6, $20, $4B, $E8	
0000CDC3 F40A 2051 F8               		dc.b $F4, $A, $20, $51, $F8	
0000CDC8 02                         SME_Ag_86_50:	dc.b 2	
0000CDC9 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000CDCE 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000CDD4 00                         		even
0000CDD4 00                         		even
0000CDD4                            
0000CDD4                            		include	"_incObj\2F MZ Large Grassy Platforms.asm"
0000CDD4                            ; ---------------------------------------------------------------------------
0000CDD4                            ; Object 2F - large grass-covered platforms (MZ)
0000CDD4                            ; ---------------------------------------------------------------------------
0000CDD4                            
0000CDD4                            LargeGrass:
0000CDD4 7000                       		moveq	#0,d0
0000CDD6 1028 0024                  		move.b	obRoutine(a0),d0
0000CDDA 323B 0000                  		move.w	LGrass_Index(pc,d0.w),d1
0000CDDE 4EFB 1000                  		jmp	LGrass_Index(pc,d1.w)
0000CDE2                            ; ===========================================================================
0000CDE2 0000                       LGrass_Index:	dc.w LGrass_Main-LGrass_Index
0000CDE4 0000                       		dc.w LGrass_Action-LGrass_Index
0000CDE6                            
0000CDE6 =0000002A                  lgrass_origX:	equ $2A
0000CDE6 =0000002C                  lgrass_origY:	equ $2C
0000CDE6                            
0000CDE6 0000                       LGrass_Data:	dc.w LGrass_Data1-LGrass_Data 	; collision angle data
0000CDE8 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000CDEA 0000                       		dc.w LGrass_Data3-LGrass_Data
0000CDEC 0140                       		dc.b 1,	$40
0000CDEE 0000                       		dc.w LGrass_Data2-LGrass_Data
0000CDF0 0220                       		dc.b 2,	$20
0000CDF2                            ; ===========================================================================
0000CDF2                            
0000CDF2                            LGrass_Main:	; Routine 0
0000CDF2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CDF6 217C 0000 0000 0004        		move.l	#Map_LGrass,obMap(a0)
0000CDFE 317C C000 0002             		move.w	#$C000,obGfx(a0)
0000CE04 117C 0004 0001             		move.b	#4,obRender(a0)
0000CE0A 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CE10 3168 000C 002C             		move.w	obY(a0),lgrass_origY(a0)
0000CE16 3168 0008 002A             		move.w	obX(a0),lgrass_origX(a0)
0000CE1C 7000                       		moveq	#0,d0
0000CE1E 1028 0028                  		move.b	obSubtype(a0),d0
0000CE22 E448                       		lsr.w	#2,d0
0000CE24 0240 001C                  		andi.w	#$1C,d0
0000CE28 43FB 00BC                  		lea	LGrass_Data(pc,d0.w),a1
0000CE2C 3019                       		move.w	(a1)+,d0
0000CE2E 45FB 00B6                  		lea	LGrass_Data(pc,d0.w),a2
0000CE32 214A 0030                  		move.l	a2,$30(a0)
0000CE36 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000CE3A 1151 0014                  		move.b	(a1),obActWid(a0)
0000CE3E 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000CE44 117C 0040 0016             		move.b	#$40,obHeight(a0)
0000CE4A 08E8 0004 0001             		bset	#4,1(a0)
0000CE50                            
0000CE50                            LGrass_Action:	; Routine 2
0000CE50 6100 0000                  		bsr.w	LGrass_Types
0000CE54 4A28 0025                  		tst.b	ob2ndRout(a0)
0000CE58 6700                       		beq.s	LGrass_Solid
0000CE5A 7200                       		moveq	#0,d1
0000CE5C 1228 0014                  		move.b	obActWid(a0),d1
0000CE60 0641 000B                  		addi.w	#$B,d1
0000CE64 6100 BF32                  		bsr.w	ExitPlatform
0000CE68 0829 0003 0022             		btst	#3,obStatus(a1)
0000CE6E 6600 0000                  		bne.w	LGrass_Slope
0000CE72 4228 0025                  		clr.b	ob2ndRout(a0)
0000CE76 6000                       		bra.s	LGrass_Display
0000CE78                            ; ===========================================================================
0000CE78                            
0000CE78                            LGrass_Slope:
0000CE78 7200                       		moveq	#0,d1
0000CE7A 1228 0014                  		move.b	obActWid(a0),d1
0000CE7E 0641 000B                  		addi.w	#$B,d1
0000CE82 2468 0030                  		movea.l	$30(a0),a2
0000CE86 3428 0008                  		move.w	obX(a0),d2
0000CE8A 6100 CEA6                  		bsr.w	SlopeObject2
0000CE8E 6000                       		bra.s	LGrass_Display
0000CE90                            ; ===========================================================================
0000CE90                            
0000CE90                            LGrass_Solid:
0000CE90 7200                       		moveq	#0,d1
0000CE92 1228 0014                  		move.b	obActWid(a0),d1
0000CE96 0641 000B                  		addi.w	#$B,d1
0000CE9A 343C 0020                  		move.w	#$20,d2
0000CE9E 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000CEA4 6600                       		bne.s	loc_AF8E
0000CEA6 343C 0030                  		move.w	#$30,d2
0000CEAA                            
0000CEAA                            loc_AF8E:
0000CEAA 2468 0030                  		movea.l	$30(a0),a2
0000CEAE 6100 0000                  		bsr.w	SolidObject2F
0000CEB2                            
0000CEB2                            LGrass_Display:
0000CEB2 6100 0000                  		bsr.w	DisplaySprite
0000CEB6 6000 0000                  		bra.w	LGrass_ChkDel
0000CEBA                            
0000CEBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CEBA                            
0000CEBA                            
0000CEBA                            LGrass_Types:
0000CEBA 7000                       		moveq	#0,d0
0000CEBC 1028 0028                  		move.b	obSubtype(a0),d0
0000CEC0 0240 0007                  		andi.w	#7,d0
0000CEC4 D040                       		add.w	d0,d0
0000CEC6 323B 0000                  		move.w	LGrass_TypeIndex(pc,d0.w),d1
0000CECA 4EFB 1000                  		jmp	LGrass_TypeIndex(pc,d1.w)
0000CECE                            ; End of function LGrass_Types
0000CECE                            
0000CECE                            ; ===========================================================================
0000CECE 0000                       LGrass_TypeIndex:dc.w LGrass_Type00-LGrass_TypeIndex
0000CED0 0000                       		dc.w LGrass_Type01-LGrass_TypeIndex
0000CED2 0000                       		dc.w LGrass_Type02-LGrass_TypeIndex
0000CED4 0000                       		dc.w LGrass_Type03-LGrass_TypeIndex
0000CED6 0000                       		dc.w LGrass_Type04-LGrass_TypeIndex
0000CED8 0000                       		dc.w LGrass_Type05-LGrass_TypeIndex
0000CEDA                            ; ===========================================================================
0000CEDA                            
0000CEDA                            LGrass_Type00:
0000CEDA 4E75                       		rts			; type 00 platform doesn't move
0000CEDC                            ; ===========================================================================
0000CEDC                            
0000CEDC                            LGrass_Type01:
0000CEDC 1038 FE60                  		move.b	(v_oscillate+2).w,d0
0000CEE0 323C 0020                  		move.w	#$20,d1
0000CEE4 6000                       		bra.s	LGrass_Move
0000CEE6                            ; ===========================================================================
0000CEE6                            
0000CEE6                            LGrass_Type02:
0000CEE6 1038 FE64                  		move.b	(v_oscillate+6).w,d0
0000CEEA 323C 0030                  		move.w	#$30,d1
0000CEEE 6000                       		bra.s	LGrass_Move
0000CEF0                            ; ===========================================================================
0000CEF0                            
0000CEF0                            LGrass_Type03:
0000CEF0 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0000CEF4 323C 0040                  		move.w	#$40,d1
0000CEF8 6000                       		bra.s	LGrass_Move
0000CEFA                            ; ===========================================================================
0000CEFA                            
0000CEFA                            LGrass_Type04:
0000CEFA 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0000CEFE 323C 0060                  		move.w	#$60,d1
0000CF02                            
0000CF02                            LGrass_Move:
0000CF02 0828 0003 0028             		btst	#3,obSubtype(a0)
0000CF08 6700                       		beq.s	loc_AFF2
0000CF0A 4440                       		neg.w	d0
0000CF0C D041                       		add.w	d1,d0
0000CF0E                            
0000CF0E                            loc_AFF2:
0000CF0E 3228 002C                  		move.w	lgrass_origY(a0),d1
0000CF12 9240                       		sub.w	d0,d1
0000CF14 3141 000C                  		move.w	d1,obY(a0)	; update position on y-axis
0000CF18 4E75                       		rts	
0000CF1A                            ; ===========================================================================
0000CF1A                            
0000CF1A                            LGrass_Type05:
0000CF1A 1028 0034                  		move.b	$34(a0),d0
0000CF1E 4A28 0025                  		tst.b	ob2ndRout(a0)
0000CF22 6600                       		bne.s	loc_B010
0000CF24 5500                       		subq.b	#2,d0
0000CF26 6400                       		bcc.s	loc_B01C
0000CF28 7000                       		moveq	#0,d0
0000CF2A 6000                       		bra.s	loc_B01C
0000CF2C                            ; ===========================================================================
0000CF2C                            
0000CF2C                            loc_B010:
0000CF2C 5800                       		addq.b	#4,d0
0000CF2E 0C00 0040                  		cmpi.b	#$40,d0
0000CF32 6500                       		bcs.s	loc_B01C
0000CF34 103C 0040                  		move.b	#$40,d0
0000CF38                            
0000CF38                            loc_B01C:
0000CF38 1140 0034                  		move.b	d0,$34(a0)
0000CF3C 4EB9 0000 3CCA             		jsr	(CalcSine).l
0000CF42 E848                       		lsr.w	#4,d0
0000CF44 3200                       		move.w	d0,d1
0000CF46 D068 002C                  		add.w	lgrass_origY(a0),d0
0000CF4A 3140 000C                  		move.w	d0,obY(a0)
0000CF4E 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000CF54 6600                       		bne.s	loc_B07A
0000CF56 4A28 0035                  		tst.b	$35(a0)
0000CF5A 6600                       		bne.s	loc_B07A
0000CF5C 117C 0001 0035             		move.b	#1,$35(a0)
0000CF62 6100 0000                  		bsr.w	FindNextFreeObj
0000CF66 6600                       		bne.s	loc_B07A
0000CF68 12BC 0000                  		move.b	#id_GrassFire,0(a1) ; load sitting flame object
0000CF6C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000CF72 3368 002C 002C             		move.w	lgrass_origY(a0),lgrass_origY(a1)
0000CF78 5069 002C                  		addq.w	#8,lgrass_origY(a1)
0000CF7C 5769 002C                  		subq.w	#3,lgrass_origY(a1)
0000CF80 0469 0040 0008             		subi.w	#$40,obX(a1)
0000CF86 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000CF8C 2348 0038                  		move.l	a0,$38(a1)
0000CF90 2448                       		movea.l	a0,a2
0000CF92 6100                       		bsr.s	sub_B09C
0000CF94                            
0000CF94                            loc_B07A:
0000CF94 7400                       		moveq	#0,d2
0000CF96 45E8 0036                  		lea	$36(a0),a2
0000CF9A 141A                       		move.b	(a2)+,d2
0000CF9C 5302                       		subq.b	#1,d2
0000CF9E 6500                       		bcs.s	locret_B09A
0000CFA0                            
0000CFA0                            loc_B086:
0000CFA0 7000                       		moveq	#0,d0
0000CFA2 101A                       		move.b	(a2)+,d0
0000CFA4 ED48                       		lsl.w	#6,d0
0000CFA6 0640 D000                  		addi.w	#$D000,d0
0000CFAA 3240                       		movea.w	d0,a1
0000CFAC 3341 003C                  		move.w	d1,$3C(a1)
0000CFB0 51CA FFEE                  		dbf	d2,loc_B086
0000CFB4                            
0000CFB4                            locret_B09A:
0000CFB4 4E75                       		rts	
0000CFB6                            
0000CFB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CFB6                            
0000CFB6                            
0000CFB6                            sub_B09C:
0000CFB6 45EA 0036                  		lea	$36(a2),a2
0000CFBA 7000                       		moveq	#0,d0
0000CFBC 1012                       		move.b	(a2),d0
0000CFBE 5212                       		addq.b	#1,(a2)
0000CFC0 45F2 0001                  		lea	1(a2,d0.w),a2
0000CFC4 3009                       		move.w	a1,d0
0000CFC6 0440 D000                  		subi.w	#$D000,d0
0000CFCA EC48                       		lsr.w	#6,d0
0000CFCC 0240 007F                  		andi.w	#$7F,d0
0000CFD0 1480                       		move.b	d0,(a2)
0000CFD2 4E75                       		rts	
0000CFD4                            ; End of function sub_B09C
0000CFD4                            
0000CFD4                            ; ===========================================================================
0000CFD4                            
0000CFD4                            LGrass_ChkDel:
0000CFD4 4A28 0035                  		tst.b	$35(a0)
0000CFD8 6700                       		beq.s	loc_B0C6
0000CFDA 4A28 0001                  		tst.b	obRender(a0)
0000CFDE 6A00                       		bpl.s	LGrass_DelFlames
0000CFE0                            
0000CFE0                            loc_B0C6:
0000CFFE 4E75                       		rts	
0000D000                            ; ===========================================================================
0000D000                            
0000D000                            LGrass_DelFlames:
0000D000 7400                       		moveq	#0,d2
0000D002                            
0000D002                            loc_B0E8:
0000D002 45E8 0036                  		lea	$36(a0),a2
0000D006 1412                       		move.b	(a2),d2
0000D008 421A                       		clr.b	(a2)+
0000D00A 5302                       		subq.b	#1,d2
0000D00C 6500                       		bcs.s	locret_B116
0000D00E                            
0000D00E                            loc_B0F4:
0000D00E 7000                       		moveq	#0,d0
0000D010 1012                       		move.b	(a2),d0
0000D012 421A                       		clr.b	(a2)+
0000D014 ED48                       		lsl.w	#6,d0
0000D016 0640 D000                  		addi.w	#$D000,d0
0000D01A 3240                       		movea.w	d0,a1
0000D01C 6100 0000                  		bsr.w	DeleteChild
0000D020 51CA FFEC                  		dbf	d2,loc_B0F4
0000D024 117C 0000 0035             		move.b	#0,$35(a0)
0000D02A 117C 0000 0034             		move.b	#0,$34(a0)
0000D030                            
0000D030                            locret_B116:
0000D030 4E75                       		rts	
0000D032                            ; ===========================================================================
0000D032                            ; ---------------------------------------------------------------------------
0000D032                            ; Collision data for large moving platforms (MZ)
0000D032                            ; ---------------------------------------------------------------------------
0000D032                            LGrass_Data1:	incbin	"misc\mz_pfm1.bin"
0000D07E                            		even
0000D07E                            LGrass_Data2:	incbin	"misc\mz_pfm2.bin"
0000D0AA                            		even
0000D0AA                            LGrass_Data3:	incbin	"misc\mz_pfm3.bin"
0000D0F6                            		even
0000D0F6                            		even
0000D0F6                            		include	"_incObj\35 Burning Grass.asm"
0000D0F6                            ; ---------------------------------------------------------------------------
0000D0F6                            ; Object 35 - fireball that sits on the	floor (MZ)
0000D0F6                            ; (appears when	you walk on sinking platforms)
0000D0F6                            ; ---------------------------------------------------------------------------
0000D0F6                            
0000D0F6                            GrassFire:
0000D0F6 7000                       		moveq	#0,d0
0000D0F8 1028 0024                  		move.b	obRoutine(a0),d0
0000D0FC 323B 0000                  		move.w	GFire_Index(pc,d0.w),d1
0000D100 4EFB 1000                  		jmp	GFire_Index(pc,d1.w)
0000D104                            ; ===========================================================================
0000D104 0000                       GFire_Index:	dc.w GFire_Main-GFire_Index
0000D106 0000                       		dc.w loc_B238-GFire_Index
0000D108 0000                       		dc.w GFire_Move-GFire_Index
0000D10A                            
0000D10A =0000002A                  gfire_origX:	equ $2A
0000D10A                            ; ===========================================================================
0000D10A                            
0000D10A                            GFire_Main:	; Routine 0
0000D10A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D10E 217C 0000 0000 0004        		move.l	#Map_Fire,obMap(a0)
0000D116 317C 0345 0002             		move.w	#$345,obGfx(a0)
0000D11C 3168 0008 002A             		move.w	obX(a0),gfire_origX(a0)
0000D122 117C 0004 0001             		move.b	#4,obRender(a0)
0000D128 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000D12E 117C 008B 0020             		move.b	#$8B,obColType(a0)
0000D134 117C 0008 0014             		move.b	#8,obActWid(a0)
0000D144 4A28 0028                  		tst.b	obSubtype(a0)
0000D148 6700                       		beq.s	loc_B238
0000D14A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D14E 6000 0000                  		bra.w	GFire_Move
0000D152                            ; ===========================================================================
0000D152                            
0000D152                            loc_B238:	; Routine 2
0000D152 2268 0030                  		movea.l	$30(a0),a1
0000D156 3228 0008                  		move.w	obX(a0),d1
0000D15A 9268 002A                  		sub.w	gfire_origX(a0),d1
0000D15E 0641 000C                  		addi.w	#$C,d1
0000D162 3001                       		move.w	d1,d0
0000D164 E248                       		lsr.w	#1,d0
0000D166 1031 0000                  		move.b	(a1,d0.w),d0
0000D16A 4440                       		neg.w	d0
0000D16C D068 002C                  		add.w	$2C(a0),d0
0000D170 3400                       		move.w	d0,d2
0000D172 D068 003C                  		add.w	$3C(a0),d0
0000D176 3140 000C                  		move.w	d0,obY(a0)
0000D17A 0C41 0084                  		cmpi.w	#$84,d1
0000D17E 6400                       		bcc.s	loc_B2B0
0000D180 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000D188 0C41 0080                  		cmpi.w	#$80,d1
0000D18C 6400                       		bcc.s	loc_B2B0
0000D18E 2028 0008                  		move.l	obX(a0),d0
0000D192 0680 0008 0000             		addi.l	#$80000,d0
0000D198 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000D19E 6600                       		bne.s	loc_B2B0
0000D1A0 6100 0000                  		bsr.w	FindNextFreeObj
0000D1A4 6600                       		bne.s	loc_B2B0
0000D1A6 12BC 0000                  		move.b	#id_GrassFire,0(a1)
0000D1AA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D1B0 3342 002C                  		move.w	d2,$2C(a1)
0000D1B4 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000D1BA 137C 0001 0028             		move.b	#1,obSubtype(a1)
0000D1C0 2468 0038                  		movea.l	$38(a0),a2
0000D1C4 6100 FDF0                  		bsr.w	sub_B09C
0000D1C8                            
0000D1C8                            loc_B2B0:
0000D1C8 6000                       		bra.s	GFire_Animate
0000D1CA                            ; ===========================================================================
0000D1CA                            
0000D1CA                            GFire_Move:	; Routine 4
0000D1CA 3028 002C                  		move.w	$2C(a0),d0
0000D1CE D068 003C                  		add.w	$3C(a0),d0
0000D1D2 3140 000C                  		move.w	d0,obY(a0)
0000D1D6                            
0000D1D6                            GFire_Animate:
0000D1D6 43F9 0000 0000             		lea	(Ani_GFire).l,a1
0000D1DC 6100 F456                  		bsr.w	AnimateSprite
0000D1E0 6000 0000                  		bra.w	DisplaySprite
0000D1E0 6000 0000                  		bra.w	DisplaySprite
0000D1E4                            		include	"_anim\Burning Grass.asm"
0000D1E4                            ; ---------------------------------------------------------------------------
0000D1E4                            ; Animation script - burning grass that sits on the floor (MZ)
0000D1E4                            ; ---------------------------------------------------------------------------
0000D1E4 0000                       Ani_GFire:	dc.w @burn-Ani_GFire
0000D1E6 0500 2001 21FF             @burn:		dc.b 5,	0, $20,	1, $21,	afEnd
0000D1EC                            		even
0000D1EC                            		even
0000D1EC                            Map_LGrass:	include	"_maps\MZ Large Grassy Platforms.asm"
0000D1EC                            ; ---------------------------------------------------------------------------
0000D1EC                            ; Sprite mappings - large moving grass-covered platforms (MZ)
0000D1EC                            ; ---------------------------------------------------------------------------
0000D1EC                            Map_LGrass_internal:
0000D1EC 0000                       		dc.w @wide-Map_LGrass_internal
0000D1EE 0000                       		dc.w @sloped-Map_LGrass_internal
0000D1F0 0000                       		dc.w @narrow-Map_LGrass_internal
0000D1F2 0D                         @wide:		dc.b $D
0000D1F3 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0 ; wide platform
0000D1F8 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000D1FD 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D202 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000D207 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000D20C F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D211 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000D216 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000D21B F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000D220 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D225 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000D22A D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000D22F F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000D234 0A                         @sloped:	dc.b $A
0000D235 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0 ; sloped platform (catches fire)
0000D23A F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000D23F 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D244 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000D249 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000D24E F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D253 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000D258 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000D25D C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000D262 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000D267 06                         @narrow:	dc.b 6
0000D268 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0 ; narrow platform
0000D26D F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D272 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000D277 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000D27C F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D281 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000D286                            		even
0000D286                            		even
0000D286                            Map_Fire:	include	"_maps\Fireballs.asm"
0000D286                            ; --------------------------------------------------------------------------------
0000D286                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D286                            ; --------------------------------------------------------------------------------
0000D286                            
0000D286                            SME_gyvTV:	
0000D286 0000 0000                  		dc.w SME_gyvTV_C-SME_gyvTV, SME_gyvTV_12-SME_gyvTV	
0000D28A 0000 0000                  		dc.w SME_gyvTV_18-SME_gyvTV, SME_gyvTV_1E-SME_gyvTV	
0000D28E 0000 0000                  		dc.w SME_gyvTV_24-SME_gyvTV, SME_gyvTV_2A-SME_gyvTV	
0000D292 01                         SME_gyvTV_C:	dc.b 1	
0000D293 E807 6000 F8               		dc.b $E8, 7, $60, 0, $F8	
0000D298 01                         SME_gyvTV_12:	dc.b 1	
0000D299 E807 6008 F8               		dc.b $E8, 7, $60, 8, $F8	
0000D29E 01                         SME_gyvTV_18:	dc.b 1	
0000D29F F006 6010 F8               		dc.b $F0, 6, $60, $10, $F8	
0000D2A4 01                         SME_gyvTV_1E:	dc.b 1	
0000D2A5 F80D 6016 E8               		dc.b $F8, $D, $60, $16, $E8	
0000D2AA 01                         SME_gyvTV_24:	dc.b 1	
0000D2AB F80D 601E E8               		dc.b $F8, $D, $60, $1E, $E8	
0000D2B0 01                         SME_gyvTV_2A:	dc.b 1	
0000D2B1 F809 6026 F0               		dc.b $F8, 9, $60, $26, $F0	
0000D2B6                            		even
0000D2B6                            		even
0000D2B6                            		include	"_incObj\30 MZ Large Green Glass Blocks.asm"
0000D2B6                            ; ---------------------------------------------------------------------------
0000D2B6                            ; Object 30 - large green glass blocks (MZ)
0000D2B6                            ; ---------------------------------------------------------------------------
0000D2B6                            
0000D2B6                            GlassBlock:
0000D2B6 7000                       		moveq	#0,d0
0000D2B8 1028 0024                  		move.b	obRoutine(a0),d0
0000D2BC 323B 0000                  		move.w	Glass_Index(pc,d0.w),d1
0000D2C0 4EBB 1000                  		jsr	Glass_Index(pc,d1.w)
0000D2E2 6000 0000                  		bra.w	DisplaySprite
0000D2E6                            ; ===========================================================================
0000D2E6                            
0000D2E6                            Glass_Delete:
0000D2E6 6000 0000                  		bra.w	DeleteObject
0000D2EA                            ; ===========================================================================
0000D2EA 0000                       Glass_Index:	dc.w Glass_Main-Glass_Index
0000D2EC 0000                       		dc.w Glass_Block012-Glass_Index
0000D2EE 0000                       		dc.w Glass_Reflect012-Glass_Index
0000D2F0 0000                       		dc.w Glass_Block34-Glass_Index
0000D2F2 0000                       		dc.w Glass_Reflect34-Glass_Index
0000D2F4                            
0000D2F4 =00000032                  glass_dist:	equ $32		; distance block moves when switch is pressed
0000D2F4 =0000003C                  glass_parent:	equ $3C		; address of parent object
0000D2F4                            
0000D2F4 0200 00                    Glass_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000D2F7 0400 01                    		dc.b 4,	0, 1
0000D2FA 0600 02                    Glass_Vars2:	dc.b 6,	0, 2
0000D2FD 0800 01                    		dc.b 8,	0, 1
0000D300                            ; ===========================================================================
0000D300                            
0000D300                            Glass_Main:	; Routine 0
0000D300 45F9 0000 D2F4             		lea	(Glass_Vars1).l,a2
0000D306 7201                       		moveq	#1,d1
0000D308 117C 0048 0016             		move.b	#$48,obHeight(a0)
0000D30E 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object type 0/1/2 ?
0000D314 6500                       		bcs.s	@IsType012	; if yes, branch
0000D316                            
0000D316 45F9 0000 D2FA             		lea	(Glass_Vars2).l,a2
0000D31C 7201                       		moveq	#1,d1
0000D31E 117C 0038 0016             		move.b	#$38,obHeight(a0)
0000D324                            
0000D324                            	@IsType012:
0000D324 2248                       		movea.l	a0,a1
0000D326 6000                       		bra.s	@Load		; load main object
0000D328                            ; ===========================================================================
0000D328                            
0000D328                            	@Repeat:
0000D328 6100 0000                  		bsr.w	FindNextFreeObj
0000D32C 6600                       		bne.s	@Fail
0000D32E                            
0000D32E                            @Load:
0000D32E 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D332 12BC 0000                  		move.b	#id_GlassBlock,0(a1)
0000D336 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D33C 101A                       		move.b	(a2)+,d0
0000D33E 4880                       		ext.w	d0
0000D340 D068 000C                  		add.w	obY(a0),d0
0000D344 3340 000C                  		move.w	d0,obY(a1)
0000D348 237C 0000 0000 0004        		move.l	#Map_Glass,obMap(a1)
0000D350 337C C38E 0002             		move.w	#$C38E,obGfx(a1)
0000D356 137C 0004 0001             		move.b	#4,obRender(a1)
0000D35C 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D362 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D368 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000D36E 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D374 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D378 2348 003C                  		move.l	a0,glass_parent(a1)
0000D37C 51C9 FFAA                  		dbf	d1,@Repeat	; repeat once to load "reflection object"
0000D380                            
0000D380 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D386 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D38C 5029 0028                  		addq.b	#8,obSubtype(a1)
0000D390 0229 000F 0028             		andi.b	#$F,obSubtype(a1)
0000D396                            
0000D396                            	@Fail:
0000D396 317C 0090 0032             		move.w	#$90,glass_dist(a0)
0000D39C 08E8 0004 0001             		bset	#4,obRender(a0)
0000D3A2                            
0000D3A2                            Glass_Block012:	; Routine 2
0000D3A2 6100 0000                  		bsr.w	Glass_Types
0000D3A6 323C 002B                  		move.w	#$2B,d1
0000D3AA 343C 0048                  		move.w	#$48,d2
0000D3AE 363C 0049                  		move.w	#$49,d3
0000D3B2 3828 0008                  		move.w	obX(a0),d4
0000D3B6 6000 0000                  		bra.w	SolidObject
0000D3BA                            ; ===========================================================================
0000D3BA                            
0000D3BA                            Glass_Reflect012:
0000D3BA                            		; Routine 4
0000D3BA 2268 003C                  		movea.l	$3C(a0),a1
0000D3BE 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D3C4 6000 0000                  		bra.w	Glass_Types
0000D3C8                            ; ===========================================================================
0000D3C8                            
0000D3C8                            Glass_Block34:	; Routine 6
0000D3C8 6100 0000                  		bsr.w	Glass_Types
0000D3CC 323C 002B                  		move.w	#$2B,d1
0000D3D0 343C 0038                  		move.w	#$38,d2
0000D3D4 363C 0039                  		move.w	#$39,d3
0000D3D8 3828 0008                  		move.w	obX(a0),d4
0000D3DC 6000 0000                  		bra.w	SolidObject
0000D3E0                            ; ===========================================================================
0000D3E0                            
0000D3E0                            Glass_Reflect34:
0000D3E0                            		; Routine 8
0000D3E0 2268 003C                  		movea.l	$3C(a0),a1
0000D3E4 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D3EA 3169 000C 0030             		move.w	obY(a1),$30(a0)
0000D3F0 6000 0000                  		bra.w	Glass_Types
0000D3F4                            
0000D3F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D3F4                            
0000D3F4                            
0000D3F4                            Glass_Types:
0000D3F4 7000                       		moveq	#0,d0
0000D3F6 1028 0028                  		move.b	obSubtype(a0),d0
0000D3FA 0240 0007                  		andi.w	#7,d0
0000D3FE D040                       		add.w	d0,d0
0000D400 323B 0000                  		move.w	Glass_TypeIndex(pc,d0.w),d1
0000D404 4EFB 1000                  		jmp	Glass_TypeIndex(pc,d1.w)
0000D408                            ; End of function Glass_Types
0000D408                            
0000D408                            ; ===========================================================================
0000D408 0000                       Glass_TypeIndex:dc.w Glass_Type00-Glass_TypeIndex
0000D40A 0000                       		dc.w Glass_Type01-Glass_TypeIndex
0000D40C 0000                       		dc.w Glass_Type02-Glass_TypeIndex
0000D40E 0000                       		dc.w Glass_Type03-Glass_TypeIndex
0000D410 0000                       		dc.w Glass_Type04-Glass_TypeIndex
0000D412                            ; ===========================================================================
0000D412                            
0000D412                            Glass_Type00:
0000D412 4E75                       		rts	
0000D414                            ; ===========================================================================
0000D414                            
0000D414                            Glass_Type01:
0000D414 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D418 323C 0040                  		move.w	#$40,d1
0000D41C 6000                       		bra.s	loc_B514
0000D41E                            ; ===========================================================================
0000D41E                            
0000D41E                            Glass_Type02:
0000D41E 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D422 323C 0040                  		move.w	#$40,d1
0000D426 4440                       		neg.w	d0
0000D428 D041                       		add.w	d1,d0
0000D42A                            
0000D42A                            loc_B514:
0000D42A 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D430 6700                       		beq.s	loc_B526
0000D432 4440                       		neg.w	d0
0000D434 D041                       		add.w	d1,d0
0000D436 E208                       		lsr.b	#1,d0
0000D438 0640 0020                  		addi.w	#$20,d0
0000D43C                            
0000D43C                            loc_B526:
0000D43C 6000 0000                  		bra.w	loc_B5EE
0000D440                            ; ===========================================================================
0000D440                            
0000D440                            Glass_Type03:
0000D440 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D446 6700                       		beq.s	loc_B53E
0000D448 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D44C 0440 0010                  		subi.w	#$10,d0
0000D450 6000 0000                  		bra.w	loc_B5EE
0000D454                            ; ===========================================================================
0000D454                            
0000D454                            loc_B53E:
0000D454 0828 0003 0022             		btst	#3,obStatus(a0)
0000D45A 6600                       		bne.s	loc_B54E
0000D45C 08A8 0000 0034             		bclr	#0,$34(a0)
0000D462 6000                       		bra.s	loc_B582
0000D464                            ; ===========================================================================
0000D464                            
0000D464                            loc_B54E:
0000D464 4A28 0034                  		tst.b	$34(a0)
0000D468 6600                       		bne.s	loc_B582
0000D46A 117C 0001 0034             		move.b	#1,$34(a0)
0000D470 08E8 0000 0035             		bset	#0,$35(a0)
0000D476 6700                       		beq.s	loc_B582
0000D478 08E8 0007 0034             		bset	#7,$34(a0)
0000D47E 317C 0010 0036             		move.w	#$10,$36(a0)
0000D484 117C 000A 0038             		move.b	#$A,$38(a0)
0000D48A 0C68 0040 0032             		cmpi.w	#$40,glass_dist(a0)
0000D490 6600                       		bne.s	loc_B582
0000D492 317C 0040 0036             		move.w	#$40,$36(a0)
0000D498                            
0000D498                            loc_B582:
0000D498 4A28 0034                  		tst.b	$34(a0)
0000D49C 6A00                       		bpl.s	loc_B5AA
0000D49E 4A28 0038                  		tst.b	$38(a0)
0000D4A2 6700                       		beq.s	loc_B594
0000D4A4 5328 0038                  		subq.b	#1,$38(a0)
0000D4A8 6600                       		bne.s	loc_B5AA
0000D4AA                            
0000D4AA                            loc_B594:
0000D4AA 4A68 0032                  		tst.w	glass_dist(a0)
0000D4AE 6700                       		beq.s	loc_B5A4
0000D4B0 5368 0032                  		subq.w	#1,glass_dist(a0)
0000D4B4 5368 0036                  		subq.w	#1,$36(a0)
0000D4B8 6600                       		bne.s	loc_B5AA
0000D4BA                            
0000D4BA                            loc_B5A4:
0000D4BA 08A8 0007 0034             		bclr	#7,$34(a0)
0000D4C0                            
0000D4C0                            loc_B5AA:
0000D4C0 3028 0032                  		move.w	glass_dist(a0),d0
0000D4C4 6000                       		bra.s	loc_B5EE
0000D4C6                            ; ===========================================================================
0000D4C6                            
0000D4C6                            Glass_Type04:
0000D4C6 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D4CC 6700                       		beq.s	Glass_ChkSwitch
0000D4CE 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D4D2 0440 0010                  		subi.w	#$10,d0
0000D4D6 6000                       		bra.s	loc_B5EE
0000D4D8                            ; ===========================================================================
0000D4D8                            
0000D4D8                            Glass_ChkSwitch:
0000D4D8 4A28 0034                  		tst.b	$34(a0)
0000D4DC 6600                       		bne.s	loc_B5E0
0000D4DE 45F8 F7E0                  		lea	(f_switch).w,a2
0000D4E2 7000                       		moveq	#0,d0
0000D4E4 1028 0028                  		move.b	obSubtype(a0),d0 ; load object type number
0000D4E8 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000D4EA 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000D4EE 6700                       		beq.s	loc_B5EA	; if not, branch
0000D4F0 117C 0001 0034             		move.b	#1,$34(a0)
0000D4F6                            
0000D4F6                            loc_B5E0:
0000D4F6 4A68 0032                  		tst.w	glass_dist(a0)
0000D4FA 6700                       		beq.s	loc_B5EA
0000D4FC 5568 0032                  		subq.w	#2,glass_dist(a0)
0000D500                            
0000D500                            loc_B5EA:
0000D500 3028 0032                  		move.w	glass_dist(a0),d0
0000D504                            
0000D504                            loc_B5EE:
0000D504 3228 0030                  		move.w	$30(a0),d1
0000D508 9240                       		sub.w	d0,d1
0000D50A 3141 000C                  		move.w	d1,obY(a0)
0000D50E 4E75                       		rts	
0000D50E 4E75                       		rts	
0000D510                            Map_Glass:	include	"_maps\MZ Large Green Glass Blocks.asm"
0000D510                            ; --------------------------------------------------------------------------------
0000D510                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D510                            ; --------------------------------------------------------------------------------
0000D510                            
0000D510                            SME_NEyTf:	
0000D510 0000 0000                  		dc.w SME_NEyTf_6-SME_NEyTf, SME_NEyTf_43-SME_NEyTf	
0000D514 0000                       		dc.w SME_NEyTf_4E-SME_NEyTf	
0000D516 0C                         SME_NEyTf_6:	dc.b $C	
0000D517 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0	
0000D51C B80C 0800 00               		dc.b $B8, $C, 8, 0, 0	
0000D521 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0	
0000D526 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0	
0000D52B E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0	
0000D530 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0	
0000D535 000F 0004 E0               		dc.b 0, $F, 0, 4, $E0	
0000D53A 000F 0804 00               		dc.b 0, $F, 8, 4, 0	
0000D53F 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0	
0000D544 200F 0804 00               		dc.b $20, $F, 8, 4, 0	
0000D549 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0	
0000D54E 400C 1800 00               		dc.b $40, $C, $18, 0, 0	
0000D553 02                         SME_NEyTf_43:	dc.b 2	
0000D554 0806 6014 F0               		dc.b 8, 6, $60, $14, $F0	
0000D559 0006 6014 00               		dc.b 0, 6, $60, $14, 0	
0000D55E 0A                         SME_NEyTf_4E:	dc.b $A	
0000D55F C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0	
0000D564 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0	
0000D569 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0	
0000D56E D00F 0804 00               		dc.b $D0, $F, 8, 4, 0	
0000D573 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0	
0000D578 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0	
0000D57D 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0	
0000D582 100F 0804 00               		dc.b $10, $F, 8, 4, 0	
0000D587 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0	
0000D58C 300C 1800 00               		dc.b $30, $C, $18, 0, 0	
0000D592 00                         		even
0000D592 00                         		even
0000D592                            		include	"_incObj\31 Chained Stompers.asm"
0000D592                            ; ---------------------------------------------------------------------------
0000D592                            ; Object 31 - stomping metal blocks on chains (MZ)
0000D592                            ; ---------------------------------------------------------------------------
0000D592                            
0000D592                            ChainStomp:
0000D592 7000                       		moveq	#0,d0
0000D594 1028 0024                  		move.b	obRoutine(a0),d0
0000D598 323B 0000                  		move.w	CStom_Index(pc,d0.w),d1
0000D59C 4EFB 1000                  		jmp	CStom_Index(pc,d1.w)
0000D5A0                            ; ===========================================================================
0000D5A0 0000                       CStom_Index:	dc.w CStom_Main-CStom_Index
0000D5A2 0000                       		dc.w loc_B798-CStom_Index
0000D5A4 0000                       		dc.w loc_B7FE-CStom_Index
0000D5A6 0000                       		dc.w CStom_Display2-CStom_Index
0000D5A8 0000                       		dc.w loc_B7E2-CStom_Index
0000D5AA                            
0000D5AA =0000003A                  CStom_switch:	equ $3A			; switch number for the current stomper
0000D5AA                            
0000D5AA 0000                       CStom_SwchNums:	dc.b 0,	0		; switch number, obj number
0000D5AC 0100                       		dc.b 1,	0
0000D5AE                            
0000D5AE 0200 00                    CStom_Var:	dc.b 2,	0, 0		; routine number, y-position, frame number
0000D5B1 041C 01                    		dc.b 4,	$1C, 1
0000D5B4 08CC 03                    		dc.b 8,	$CC, 3
0000D5B7 06F0 02                    		dc.b 6,	$F0, 2
0000D5BA                            
0000D5BA 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000D5BE 5000 7800                  		dc.w $5000, $7800
0000D5C2 3800 5800                  		dc.w $3800, $5800
0000D5C6 B800                       		dc.w $B800
0000D5C8                            ; ===========================================================================
0000D5C8                            
0000D5C8                            CStom_Main:	; Routine 0
0000D5C8 7000                       		moveq	#0,d0
0000D5CA 1028 0028                  		move.b	obSubtype(a0),d0
0000D5CE 6A00                       		bpl.s	loc_B6CE
0000D5D0 0240 007F                  		andi.w	#$7F,d0
0000D5D4 D040                       		add.w	d0,d0
0000D5D6 45FB 00D2                  		lea	CStom_SwchNums(pc,d0.w),a2
0000D5DA 115A 003A                  		move.b	(a2)+,CStom_switch(a0)
0000D5DE 101A                       		move.b	(a2)+,d0
0000D5E0 1140 0028                  		move.b	d0,obSubtype(a0)
0000D5E4                            
0000D5E4                            loc_B6CE:
0000D5E4 0200 000F                  		andi.b	#$F,d0
0000D5E8 D040                       		add.w	d0,d0
0000D5EA 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000D5EE 4A40                       		tst.w	d0
0000D5F0 6600                       		bne.s	loc_B6E0
0000D5F2 3142 0032                  		move.w	d2,$32(a0)
0000D5F6                            
0000D5F6                            loc_B6E0:
0000D5F6 45F9 0000 D5AE             		lea	(CStom_Var).l,a2
0000D5FC 2248                       		movea.l	a0,a1
0000D5FE 7203                       		moveq	#3,d1
0000D600 6000                       		bra.s	CStom_MakeStomper
0000D602                            ; ===========================================================================
0000D602                            
0000D602                            CStom_Loop:
0000D602 6100 0000                  		bsr.w	FindNextFreeObj
0000D606 6600 0000                  		bne.w	CStom_SetSize
0000D60A                            
0000D60A                            CStom_MakeStomper:
0000D60A 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D60E 12BC 0000                  		move.b	#id_ChainStomp,0(a1)
0000D612 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D618 101A                       		move.b	(a2)+,d0
0000D61A 4880                       		ext.w	d0
0000D61C D068 000C                  		add.w	obY(a0),d0
0000D620 3340 000C                  		move.w	d0,obY(a1)
0000D624 237C 0000 0000 0004        		move.l	#Map_CStom,obMap(a1)
0000D62C 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000D632 137C 0004 0001             		move.b	#4,obRender(a1)
0000D638 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D63E 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D644 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D64A 3342 0034                  		move.w	d2,$34(a1)
0000D64E 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D654 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D658 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0000D65E 6600                       		bne.s	loc_B76A
0000D660 5341                       		subq.w	#1,d1
0000D662 1028 0028                  		move.b	obSubtype(a0),d0
0000D666 0240 00F0                  		andi.w	#$F0,d0
0000D66A 0C40 0020                  		cmpi.w	#$20,d0
0000D66E 679A                       		beq.s	CStom_MakeStomper
0000D670 137C 0038 0014             		move.b	#$38,obActWid(a1)
0000D676 137C 0090 0020             		move.b	#$90,obColType(a1)
0000D67C 5241                       		addq.w	#1,d1
0000D67E                            
0000D67E                            loc_B76A:
0000D67E 2348 003C                  		move.l	a0,$3C(a1)
0000D682 51C9 FF7E                  		dbf	d1,CStom_Loop
0000D686                            
0000D686 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D68C                            
0000D68C                            CStom_SetSize:
0000D68C 7000                       		moveq	#0,d0
0000D68E 1028 0028                  		move.b	obSubtype(a0),d0
0000D692 E648                       		lsr.w	#3,d0
0000D694 0200 000E                  		andi.b	#$E,d0
0000D698 45FB 0000                  		lea	CStom_Var2(pc,d0.w),a2
0000D69C 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000D6A0 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000D6A4 6000                       		bra.s	loc_B798
0000D6A6                            ; ===========================================================================
0000D6A6 3800                       CStom_Var2:	dc.b $38, 0		; width, frame number
0000D6A8 3009                       		dc.b $30, 9
0000D6AA 100A                       		dc.b $10, $A
0000D6AC                            ; ===========================================================================
0000D6AC                            
0000D6AC                            loc_B798:	; Routine 2
0000D6AC 6100 0000                  		bsr.w	CStom_Types
0000D6B0 31E8 000C F7A4             		move.w	obY(a0),(v_obj31ypos).w
0000D6B6 7200                       		moveq	#0,d1
0000D6B8 1228 0014                  		move.b	obActWid(a0),d1
0000D6BC 0641 000B                  		addi.w	#$B,d1
0000D6C0 343C 000C                  		move.w	#$C,d2
0000D6C4 363C 000D                  		move.w	#$D,d3
0000D6C8 3828 0008                  		move.w	obX(a0),d4
0000D6CC 6100 0000                  		bsr.w	SolidObject
0000D6D0 0828 0003 0022             		btst	#3,obStatus(a0)
0000D6D6 6700                       		beq.s	CStom_Display
0000D6D8 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D6DE 6400                       		bcc.s	CStom_Display
0000D6E0 2448                       		movea.l	a0,a2
0000D6E2 41F8 D000                  		lea	(v_player).w,a0
0000D6E6 4EB9 0000 0000             		jsr	(KillSonic).l
0000D6EC 204A                       		movea.l	a2,a0
0000D6EE                            
0000D6EE                            CStom_Display:
0000D6EE 6100 0000                  		bsr.w	DisplaySprite
0000D6F2 6000 0000                  		bra.w	CStom_ChkDel
0000D6F6                            ; ===========================================================================
0000D6F6                            
0000D6F6                            loc_B7E2:	; Routine 8
0000D6F6 117C 0080 0016             		move.b	#$80,obHeight(a0)
0000D6FC 08E8 0004 0001             		bset	#4,obRender(a0)
0000D702 2268 003C                  		movea.l	$3C(a0),a1
0000D706 1029 0032                  		move.b	$32(a1),d0
0000D70A EA08                       		lsr.b	#5,d0
0000D70C 5600                       		addq.b	#3,d0
0000D70E 1140 001A                  		move.b	d0,obFrame(a0)
0000D712                            
0000D712                            loc_B7FE:	; Routine 4
0000D712 2268 003C                  		movea.l	$3C(a0),a1
0000D716 7000                       		moveq	#0,d0
0000D718 1029 0032                  		move.b	$32(a1),d0
0000D71C D068 0030                  		add.w	$30(a0),d0
0000D720 3140 000C                  		move.w	d0,obY(a0)
0000D724                            
0000D724                            CStom_Display2:	; Routine 6
0000D724 6100 0000                  		bsr.w	DisplaySprite
0000D728                            
0000D728                            CStom_ChkDel:
0000D746 4E75                       		rts	
0000D748                            ; ===========================================================================
0000D748                            
0000D748                            CStom_Types:
0000D748 1028 0028                  		move.b	obSubtype(a0),d0
0000D74C 0240 000F                  		andi.w	#$F,d0
0000D750 D040                       		add.w	d0,d0
0000D752 323B 0000                  		move.w	CStom_TypeIndex(pc,d0.w),d1
0000D756 4EFB 1000                  		jmp	CStom_TypeIndex(pc,d1.w)
0000D75A                            ; ===========================================================================
0000D75A 0000                       CStom_TypeIndex:dc.w CStom_Type00-CStom_TypeIndex
0000D75C 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D75E 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D760 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000D762 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D764 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000D766 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D768                            ; ===========================================================================
0000D768                            
0000D768                            CStom_Type00:
0000D768 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
0000D76C 7000                       		moveq	#0,d0
0000D76E 1028 003A                  		move.b	CStom_switch(a0),d0 ; move number 0 or 1 to d0
0000D772 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000D776 6700                       		beq.s	loc_B8A8	; if not, branch
0000D778 4A78 F7A4                  		tst.w	(v_obj31ypos).w
0000D77C 6A00                       		bpl.s	loc_B872
0000D77E 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D784 6700                       		beq.s	loc_B8A0
0000D786                            
0000D786                            loc_B872:
0000D786 4A68 0032                  		tst.w	$32(a0)
0000D78A 6700                       		beq.s	loc_B8A0
0000D78C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000D790 0200 000F                  		andi.b	#$F,d0
0000D794 6600                       		bne.s	loc_B892
0000D796 4A28 0001                  		tst.b	1(a0)
0000D79A 6A00                       		bpl.s	loc_B892
0000D7A6                            
0000D7A6                            loc_B892:
0000D7A6 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D7AC 6400                       		bcc.s	CStom_Restart
0000D7AE 317C 0000 0032             		move.w	#0,$32(a0)
0000D7B4                            
0000D7B4                            loc_B8A0:
0000D7B4 317C 0000 0012             		move.w	#0,obVelY(a0)
0000D7BA 6000                       		bra.s	CStom_Restart
0000D7BC                            ; ===========================================================================
0000D7BC                            
0000D7BC                            loc_B8A8:
0000D7BC 3228 0034                  		move.w	$34(a0),d1
0000D7C0 B268 0032                  		cmp.w	$32(a0),d1
0000D7C4 6700                       		beq.s	CStom_Restart
0000D7C6 3028 0012                  		move.w	obVelY(a0),d0
0000D7CA 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000D7D0 D168 0032                  		add.w	d0,$32(a0)
0000D7D4 B268 0032                  		cmp.w	$32(a0),d1
0000D7D8 6200                       		bhi.s	CStom_Restart
0000D7DA 3141 0032                  		move.w	d1,$32(a0)
0000D7DE 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000D7E4 4A28 0001                  		tst.b	obRender(a0)
0000D7E8 6A00                       		bpl.s	CStom_Restart
0000D7F4                            
0000D7F4                            CStom_Restart:
0000D7F4 7000                       		moveq	#0,d0
0000D7F6 1028 0032                  		move.b	$32(a0),d0
0000D7FA D068 0030                  		add.w	$30(a0),d0
0000D7FE 3140 000C                  		move.w	d0,obY(a0)
0000D802 4E75                       		rts	
0000D804                            ; ===========================================================================
0000D804                            
0000D804                            CStom_Type01:
0000D804 4A68 0036                  		tst.w	$36(a0)
0000D808 6700                       		beq.s	loc_B938
0000D80A 4A68 0038                  		tst.w	$38(a0)
0000D80E 6700                       		beq.s	loc_B902
0000D810 5368 0038                  		subq.w	#1,$38(a0)
0000D814 6000                       		bra.s	loc_B97C
0000D816                            ; ===========================================================================
0000D816                            
0000D816                            loc_B902:
0000D816 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000D81A 0200 000F                  		andi.b	#$F,d0
0000D81E 6600                       		bne.s	loc_B91C
0000D820 4A28 0001                  		tst.b	obRender(a0)
0000D824 6A00                       		bpl.s	loc_B91C
0000D830                            
0000D830                            loc_B91C:
0000D830 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D836 6400                       		bcc.s	loc_B97C
0000D838 317C 0000 0032             		move.w	#0,$32(a0)
0000D83E 317C 0000 0012             		move.w	#0,obVelY(a0)
0000D844 317C 0000 0036             		move.w	#0,$36(a0)
0000D84A 6000                       		bra.s	loc_B97C
0000D84C                            ; ===========================================================================
0000D84C                            
0000D84C                            loc_B938:
0000D84C 3228 0034                  		move.w	$34(a0),d1
0000D850 B268 0032                  		cmp.w	$32(a0),d1
0000D854 6700                       		beq.s	loc_B97C
0000D856 3028 0012                  		move.w	obVelY(a0),d0
0000D85A 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000D860 D168 0032                  		add.w	d0,$32(a0)
0000D864 B268 0032                  		cmp.w	$32(a0),d1
0000D868 6200                       		bhi.s	loc_B97C
0000D86A 3141 0032                  		move.w	d1,$32(a0)
0000D86E 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000D874 317C 0001 0036             		move.w	#1,$36(a0)
0000D87A 317C 003C 0038             		move.w	#$3C,$38(a0)
0000D880 4A28 0001                  		tst.b	obRender(a0)
0000D884 6A00                       		bpl.s	loc_B97C
0000D890                            
0000D890                            loc_B97C:
0000D890 6000 FF62                  		bra.w	CStom_Restart
0000D894                            ; ===========================================================================
0000D894                            
0000D894                            CStom_Type03:
0000D894 3038 D008                  		move.w	(v_player+obX).w,d0
0000D898 9068 0008                  		sub.w	obX(a0),d0
0000D89C 6400                       		bcc.s	loc_B98C
0000D89E 4440                       		neg.w	d0
0000D8A0                            
0000D8A0                            loc_B98C:
0000D8A0 0C40 0090                  		cmpi.w	#$90,d0
0000D8A4 6400                       		bcc.s	loc_B996
0000D8A6 5228 0028                  		addq.b	#1,obSubtype(a0)
0000D8AA                            
0000D8AA                            loc_B996:
0000D8AA 6000 FF48                  		bra.w	CStom_Restart
0000D8AA 6000 FF48                  		bra.w	CStom_Restart
0000D8AE                            		include	"_incObj\45 Sideways Stomper.asm"
0000D8AE                            ; ---------------------------------------------------------------------------
0000D8AE                            ; Object 45 - spiked metal block from beta version (MZ)
0000D8AE                            ; ---------------------------------------------------------------------------
0000D8AE                            
0000D8AE                            SideStomp:
0000D8AE 7000                       		moveq	#0,d0
0000D8B0 1028 0024                  		move.b	obRoutine(a0),d0
0000D8B4 323B 0000                  		move.w	SStom_Index(pc,d0.w),d1
0000D8B8 4EFB 1000                  		jmp	SStom_Index(pc,d1.w)
0000D8BC                            ; ===========================================================================
0000D8BC 0000                       SStom_Index:	dc.w SStom_Main-SStom_Index
0000D8BE 0000                       		dc.w SStom_Solid-SStom_Index
0000D8C0 0000                       		dc.w loc_BA8E-SStom_Index
0000D8C2 0000                       		dc.w SStom_Display-SStom_Index
0000D8C4 0000                       		dc.w SStom_Pole-SStom_Index
0000D8C6                            
0000D8C6                            		;	routine		frame
0000D8C6                            		;		 xpos
0000D8C6 0204 00                    SStom_Var:	dc.b	2,  	 4,	0	; main block
0000D8C9 04E4 01                    		dc.b	4,	-$1C,	1	; spikes
0000D8CC 0834 03                    		dc.b	8,	 $34,	3	; pole
0000D8CF 0628 02                    		dc.b	6,	 $28,	2	; wall bracket
0000D8D2                            
0000D8D2                            ;word_B9BE:	; Note that this indicates three subtypes
0000D8D2 3800                       SStom_Len:	dc.w $3800	; short
0000D8D4 A000                       		dc.w $A000	; long
0000D8D6 5000                       		dc.w $5000	; medium
0000D8D8                            ; ===========================================================================
0000D8D8                            
0000D8D8                            SStom_Main:	; Routine 0
0000D8D8 7000                       		moveq	#0,d0
0000D8DA 1028 0028                  		move.b	obSubtype(a0),d0
0000D8DE D040                       		add.w	d0,d0
0000D8E0 343B 00F0                  		move.w	SStom_Len(pc,d0.w),d2
0000D8E4 45F9 0000 D8C6             		lea	(SStom_Var).l,a2
0000D8EA 2248                       		movea.l	a0,a1
0000D8EC 7203                       		moveq	#3,d1
0000D8EE 6000                       		bra.s	@load
0000D8F0                            
0000D8F0                            	@loop:
0000D8F0 6100 0000                  		bsr.w	FindNextFreeObj
0000D8F4 6600                       		bne.s	@fail
0000D8F6                            
0000D8F6                            	@load:
0000D8F6 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D8FA 12BC 0000                  		move.b	#id_SideStomp,0(a1)
0000D8FE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000D904 101A                       		move.b	(a2)+,d0
0000D906 4880                       		ext.w	d0
0000D908 D068 0008                  		add.w	obX(a0),d0
0000D90C 3340 0008                  		move.w	d0,obX(a1)
0000D910 237C 0000 0000 0004        		move.l	#Map_SStom,obMap(a1)
0000D918 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000D91E 137C 0004 0001             		move.b	#4,obRender(a1)
0000D924 3369 0008 0030             		move.w	obX(a1),$30(a1)
0000D92A 3368 0008 003A             		move.w	obX(a0),$3A(a1)
0000D930 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D936 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000D93C 3342 0034                  		move.w	d2,$34(a1)
0000D940 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D946 0C12 0001                  		cmpi.b	#1,(a2)		; is subobject spikes?
0000D94A 6600                       		bne.s	@notspikes	; if not, branch
0000D94C 137C 0091 0020             		move.b	#$91,obColType(a1) ; use harmful collision type
0000D952                            
0000D952                            	@notspikes:
0000D952 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D956 2348 003C                  		move.l	a0,$3C(a1)
0000D95A 51C9 FF94                  		dbf	d1,@loop	; repeat 3 times
0000D95E                            
0000D95E 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D964                            
0000D964                            	@fail:
0000D964 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000D96A                            
0000D96A                            SStom_Solid:	; Routine 2
0000D96A 3F28 0008                  		move.w	obX(a0),-(sp)
0000D96E 6100 0000                  		bsr.w	SStom_Move
0000D972 323C 0017                  		move.w	#$17,d1
0000D976 343C 0020                  		move.w	#$20,d2
0000D97A 363C 0020                  		move.w	#$20,d3
0000D97E 381F                       		move.w	(sp)+,d4
0000D980 6100 0000                  		bsr.w	SolidObject
0000D984 6100 0000                  		bsr.w	DisplaySprite
0000D988 6000 0000                  		bra.w	SStom_ChkDel
0000D98C                            ; ===========================================================================
0000D98C                            
0000D98C                            SStom_Pole:	; Routine 8
0000D98C 2268 003C                  		movea.l	$3C(a0),a1
0000D990 1029 0032                  		move.b	$32(a1),d0
0000D994 0600 0010                  		addi.b	#$10,d0
0000D998 EA08                       		lsr.b	#5,d0
0000D99A 5600                       		addq.b	#3,d0
0000D99C 1140 001A                  		move.b	d0,obFrame(a0)
0000D9A0                            
0000D9A0                            loc_BA8E:	; Routine 4
0000D9A0 2268 003C                  		movea.l	$3C(a0),a1
0000D9A4 7000                       		moveq	#0,d0
0000D9A6 1029 0032                  		move.b	$32(a1),d0
0000D9AA 4440                       		neg.w	d0
0000D9AC D068 0030                  		add.w	$30(a0),d0
0000D9B0 3140 0008                  		move.w	d0,obX(a0)
0000D9B4                            
0000D9B4                            SStom_Display:	; Routine 6
0000D9B4 6100 0000                  		bsr.w	DisplaySprite
0000D9B8                            
0000D9B8                            SStom_ChkDel:
0000D9D6 4E75                       		rts	
0000D9D8                            
0000D9D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D9D8                            
0000D9D8                            
0000D9D8                            SStom_Move:
0000D9D8 7000                       		moveq	#0,d0
0000D9DA 1028 0028                  		move.b	obSubtype(a0),d0
0000D9DE D040                       		add.w	d0,d0
0000D9E0 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000D9E4 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000D9E8                            ; End of function SStom_Move
0000D9E8                            
0000D9E8                            ; ===========================================================================
0000D9E8                            		; This indicates only two subtypes... that do the same thing
0000D9E8                            		; Compare to SStom_Len. This breaks subtype 02
0000D9E8 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000D9EA 0000                       		dc.w loc_BADA-off_BAD6
0000D9EC                            ; ===========================================================================
0000D9EC                            
0000D9EC                            loc_BADA:
0000D9EC 4A68 0036                  		tst.w	$36(a0)
0000D9F0 6700                       		beq.s	loc_BB08
0000D9F2 4A68 0038                  		tst.w	$38(a0)
0000D9F6 6700                       		beq.s	loc_BAEC
0000D9F8 5368 0038                  		subq.w	#1,$38(a0)
0000D9FC 6000                       		bra.s	loc_BB3C
0000D9FE                            ; ===========================================================================
0000D9FE                            
0000D9FE                            loc_BAEC:
0000D9FE 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DA04 6400                       		bcc.s	loc_BB3C
0000DA06 317C 0000 0032             		move.w	#0,$32(a0)
0000DA0C 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DA12 317C 0000 0036             		move.w	#0,$36(a0)
0000DA18 6000                       		bra.s	loc_BB3C
0000DA1A                            ; ===========================================================================
0000DA1A                            
0000DA1A                            loc_BB08:
0000DA1A 3228 0034                  		move.w	$34(a0),d1
0000DA1E B268 0032                  		cmp.w	$32(a0),d1
0000DA22 6700                       		beq.s	loc_BB3C
0000DA24 3028 0010                  		move.w	obVelX(a0),d0
0000DA28 0668 0070 0010             		addi.w	#$70,obVelX(a0)
0000DA2E D168 0032                  		add.w	d0,$32(a0)
0000DA32 B268 0032                  		cmp.w	$32(a0),d1
0000DA36 6200                       		bhi.s	loc_BB3C
0000DA38 3141 0032                  		move.w	d1,$32(a0)
0000DA3C 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DA42 317C 0001 0036             		move.w	#1,$36(a0)
0000DA48 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DA4E                            
0000DA4E                            loc_BB3C:
0000DA4E 7000                       		moveq	#0,d0
0000DA50 1028 0032                  		move.b	$32(a0),d0
0000DA54 4440                       		neg.w	d0
0000DA56 D068 0030                  		add.w	$30(a0),d0
0000DA5A 3140 0008                  		move.w	d0,obX(a0)
0000DA5E 4E75                       		rts	
0000DA5E 4E75                       		rts	
0000DA60                            Map_CStom:	include	"_maps\Chained Stompers.asm"
0000DA60                            ; ---------------------------------------------------------------------------
0000DA60                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000DA60                            ; ---------------------------------------------------------------------------
0000DA60                            Map_CStom_internal:
0000DA60 0000                       		dc.w @wideblock-Map_CStom_internal
0000DA62 0000                       		dc.w @spikes-Map_CStom_internal
0000DA64 0000                       		dc.w @ceiling-Map_CStom_internal
0000DA66 0000                       		dc.w @chain1-Map_CStom_internal
0000DA68 0000                       		dc.w @chain2-Map_CStom_internal
0000DA6A 0000                       		dc.w @chain3-Map_CStom_internal
0000DA6C 0000                       		dc.w @chain4-Map_CStom_internal
0000DA6E 0000                       		dc.w @chain5-Map_CStom_internal
0000DA70 0000                       		dc.w @chain5-Map_CStom_internal
0000DA72 0000                       		dc.w @mediumblock-Map_CStom_internal
0000DA74 0000                       		dc.w @smallblock-Map_CStom_internal
0000DA76 05                         @wideblock:	dc.b 5
0000DA77 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000DA7C F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000DA81 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DA86 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000DA8B F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000DA90 05                         @spikes:	dc.b 5
0000DA91 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000DA96 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000DA9B F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000DAA0 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000DAA5 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000DAAA 01                         @ceiling:	dc.b 1
0000DAAB DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000DAB0 02                         @chain1:	dc.b 2
0000DAB1 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DAB6 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DABB 04                         @chain2:	dc.b 4
0000DABC E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DAC1 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DAC6 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DACB 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DAD0 06                         @chain3:	dc.b 6
0000DAD1 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DAD6 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DADB E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DAE0 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DAE5 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DAEA 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DAEF 08                         @chain4:	dc.b 8
0000DAF0 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DAF5 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DAFA C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DAFF D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DB04 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DB09 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DB0E 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DB13 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DB18 0A                         @chain5:	dc.b $A
0000DB19 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000DB1E 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000DB23 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DB28 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DB2D C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DB32 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DB37 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DB3C F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DB41 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DB46 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DB4B 05                         @mediumblock:	dc.b 5
0000DB4C F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000DB51 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000DB56 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000DB5B F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000DB60 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DB65 01                         @smallblock:	dc.b 1
0000DB66 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000DB6C 00                         		even
0000DB6C 00                         		even
0000DB6C                            Map_SStom:	include	"_maps\Sideways Stomper.asm"
0000DB6C                            ; ---------------------------------------------------------------------------
0000DB6C                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000DB6C                            ; ---------------------------------------------------------------------------
0000DB6C                            Map_SStom_internal:
0000DB6C 0000                       		dc.w @block-Map_SStom_internal
0000DB6E 0000                       		dc.w @spikes-Map_SStom_internal
0000DB70 0000                       		dc.w @wallbracket-Map_SStom_internal
0000DB72 0000                       		dc.w @pole1-Map_SStom_internal
0000DB74 0000                       		dc.w @pole2-Map_SStom_internal
0000DB76 0000                       		dc.w @pole3-Map_SStom_internal
0000DB78 0000                       		dc.w @pole4-Map_SStom_internal
0000DB7A 0000                       		dc.w @pole5-Map_SStom_internal
0000DB7C 0000                       		dc.w @pole5-Map_SStom_internal
0000DB7E 03                         @block:		dc.b 3
0000DB7F E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4 ; main metal block
0000DB84 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000DB89 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000DB8E 03                         @spikes:	dc.b 3
0000DB8F E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0 ; three spikes
0000DB94 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000DB99 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000DB9E 01                         @wallbracket:	dc.b 1
0000DB9F F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC ; thing holding it to the wall
0000DBA4 02                         @pole1:		dc.b 2
0000DBA5 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0 ; poles of various lengths
0000DBAA F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DBAF 04                         @pole2:		dc.b 4
0000DBB0 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DBB5 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DBBA F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DBBF F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DBC4 06                         @pole3:		dc.b 6
0000DBC5 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DBCA F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DBCF F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DBD4 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DBD9 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DBDE F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DBE3 08                         @pole4:		dc.b 8
0000DBE4 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DBE9 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DBEE F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DBF3 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DBF8 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DBFD F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DC02 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DC07 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DC0C 08                         @pole5:		dc.b 8		; Incorrect: this should be $A
0000DC0D F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DC12 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DC17 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DC1C F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DC21 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DC26 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DC2B F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DC30 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DC35 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000DC3A F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000DC3F                            		; @pole6 should be here, but it isn't...
0000DC40 00                         		even
0000DC40 00                         		even
0000DC40                            
0000DC40                            		include	"_incObj\32 Button.asm"
0000DC40                            ; ---------------------------------------------------------------------------
0000DC40                            ; Object 32 - buttons (MZ, SYZ, LZ, SBZ)
0000DC40                            ; ---------------------------------------------------------------------------
0000DC40                            
0000DC40                            Button:
0000DC40 7000                       		moveq	#0,d0
0000DC42 1028 0024                  		move.b	obRoutine(a0),d0
0000DC46 323B 0000                  		move.w	But_Index(pc,d0.w),d1
0000DC4A 4EFB 1000                  		jmp	But_Index(pc,d1.w)
0000DC4E                            ; ===========================================================================
0000DC4E 0000                       But_Index:	dc.w But_Main-But_Index
0000DC50 0000                       		dc.w But_Pressed-But_Index
0000DC52                            ; ===========================================================================
0000DC52                            
0000DC52                            But_Main:	; Routine 0
0000DC52 5428 0024                  		addq.b	#2,obRoutine(a0)
0000DC56 217C 0000 0000 0004        		move.l	#Map_But,obMap(a0)
0000DC5E 317C 4513 0002             		move.w	#$4513,obGfx(a0) ; MZ specific code
0000DC64 0C38 0002 FE10             		cmpi.b	#id_MZ,(v_zone).w ; is level Marble Zone?
0000DC6A 6700                       		beq.s	But_IsMZ	; if yes, branch
0000DC6C                            
0000DC6C 317C 0513 0002             		move.w	#$513,obGfx(a0)	; SYZ, LZ and SBZ specific code
0000DC72                            
0000DC72                            	But_IsMZ:
0000DC72 117C 0004 0001             		move.b	#4,obRender(a0)
0000DC78 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DC7E 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000DC84 5668 000C                  		addq.w	#3,obY(a0)
0000DC88                            
0000DC88                            But_Pressed:	; Routine 2
0000DC88 4A28 0001                  		tst.b	obRender(a0)
0000DC8C 6A00                       		bpl.s	But_Display
0000DC8E 323C 001B                  		move.w	#$1B,d1
0000DC92 343C 0005                  		move.w	#5,d2
0000DC96 363C 0005                  		move.w	#5,d3
0000DC9A 3828 0008                  		move.w	obX(a0),d4
0000DC9E 6100 0000                  		bsr.w	SolidObject
0000DCA2 08A8 0000 001A             		bclr	#0,obFrame(a0)	; use "unpressed" frame
0000DCA8 1028 0028                  		move.b	obSubtype(a0),d0
0000DCAC 0240 000F                  		andi.w	#$F,d0
0000DCB0 47F8 F7E0                  		lea	(f_switch).w,a3
0000DCB4 47F3 0000                  		lea	(a3,d0.w),a3
0000DCB8 7600                       		moveq	#0,d3
0000DCBA 0828 0006 0028             		btst	#6,obSubtype(a0)
0000DCC0 6700                       		beq.s	loc_BDB2
0000DCC2 7607                       		moveq	#7,d3
0000DCC4                            
0000DCC4                            loc_BDB2:
0000DCC4 4A28 0028                  		tst.b	obSubtype(a0)
0000DCC8 6A00                       		bpl.s	loc_BDBE
0000DCCA 6100 0000                  		bsr.w	But_MZBlock
0000DCCE 6600                       		bne.s	loc_BDC8
0000DCD0                            
0000DCD0                            loc_BDBE:
0000DCD0 4A28 0025                  		tst.b	ob2ndRout(a0)
0000DCD4 6600                       		bne.s	loc_BDC8
0000DCD6 0793                       		bclr	d3,(a3)
0000DCD8 6000                       		bra.s	loc_BDDE
0000DCDA                            ; ===========================================================================
0000DCDA                            
0000DCDA                            loc_BDC8:
0000DCDA 4A13                       		tst.b	(a3)
0000DCDC 6600                       		bne.s	loc_BDD6
0000DCE8                            
0000DCE8                            loc_BDD6:
0000DCE8 07D3                       		bset	d3,(a3)
0000DCEA 08E8 0000 001A             		bset	#0,obFrame(a0)	; use "pressed"	frame
0000DCF0                            
0000DCF0                            loc_BDDE:
0000DCF0 0828 0005 0028             		btst	#5,obSubtype(a0)
0000DCF6 6700                       		beq.s	But_Display
0000DCF8 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000DCFC 6A00                       		bpl.s	But_Display
0000DCFE 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000DD04 0868 0001 001A             		bchg	#1,obFrame(a0)
0000DD0A                            
0000DD0A                            But_Display:
0000DD0A 6100 0000                  		bsr.w	DisplaySprite
0000DD2C 4E75                       		rts	
0000DD2E                            ; ===========================================================================
0000DD2E                            
0000DD2E                            But_Delete:
0000DD2E 6100 0000                  		bsr.w	DeleteObject
0000DD32 4E75                       		rts	
0000DD34                            
0000DD34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD34                            
0000DD34                            
0000DD34                            But_MZBlock:
0000DD34 3F03                       		move.w	d3,-(sp)
0000DD36 3428 0008                  		move.w	obX(a0),d2
0000DD3A 3628 000C                  		move.w	obY(a0),d3
0000DD3E 0442 0010                  		subi.w	#$10,d2
0000DD42 5143                       		subq.w	#8,d3
0000DD44 383C 0020                  		move.w	#$20,d4
0000DD48 3A3C 0010                  		move.w	#$10,d5
0000DD4C 43F8 D800                  		lea	(v_lvlobjspace).w,a1 ; begin checking object RAM
0000DD50 3C3C 005F                  		move.w	#$5F,d6
0000DD54                            
0000DD54                            But_MZLoop:
0000DD54 4A29 0001                  		tst.b	obRender(a1)
0000DD58 6A00                       		bpl.s	loc_BE4E
0000DD5A 0C11 0000                  		cmpi.b	#id_PushBlock,(a1) ; is the object a green MZ block?
0000DD5E 6700                       		beq.s	loc_BE5E	; if yes, branch
0000DD60                            
0000DD60                            loc_BE4E:
0000DD60 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000DD64 51CE FFEE                  		dbf	d6,But_MZLoop	; repeat $5F times
0000DD68                            
0000DD68 361F                       		move.w	(sp)+,d3
0000DD6A 7000                       		moveq	#0,d0
0000DD6C                            
0000DD6C                            locret_BE5A:
0000DD6C 4E75                       		rts	
0000DD6E                            ; ===========================================================================
0000DD6E 1010                       But_MZData:	dc.b $10, $10
0000DD70                            ; ===========================================================================
0000DD70                            
0000DD70                            loc_BE5E:
0000DD70 7001                       		moveq	#1,d0
0000DD72 0240 003F                  		andi.w	#$3F,d0
0000DD76 D040                       		add.w	d0,d0
0000DD78 45FB 00F2                  		lea	But_MZData-2(pc,d0.w),a2
0000DD7C 121A                       		move.b	(a2)+,d1
0000DD7E 4881                       		ext.w	d1
0000DD80 3029 0008                  		move.w	obX(a1),d0
0000DD84 9041                       		sub.w	d1,d0
0000DD86 9042                       		sub.w	d2,d0
0000DD88 6400                       		bcc.s	loc_BE80
0000DD8A D241                       		add.w	d1,d1
0000DD8C D041                       		add.w	d1,d0
0000DD8E 6500                       		bcs.s	loc_BE84
0000DD90 60CE                       		bra.s	loc_BE4E
0000DD92                            ; ===========================================================================
0000DD92                            
0000DD92                            loc_BE80:
0000DD92 B044                       		cmp.w	d4,d0
0000DD94 62CA                       		bhi.s	loc_BE4E
0000DD96                            
0000DD96                            loc_BE84:
0000DD96 121A                       		move.b	(a2)+,d1
0000DD98 4881                       		ext.w	d1
0000DD9A 3029 000C                  		move.w	obY(a1),d0
0000DD9E 9041                       		sub.w	d1,d0
0000DDA0 9043                       		sub.w	d3,d0
0000DDA2 6400                       		bcc.s	loc_BE9A
0000DDA4 D241                       		add.w	d1,d1
0000DDA6 D041                       		add.w	d1,d0
0000DDA8 6500                       		bcs.s	loc_BE9E
0000DDAA 60B4                       		bra.s	loc_BE4E
0000DDAC                            ; ===========================================================================
0000DDAC                            
0000DDAC                            loc_BE9A:
0000DDAC B045                       		cmp.w	d5,d0
0000DDAE 62B0                       		bhi.s	loc_BE4E
0000DDB0                            
0000DDB0                            loc_BE9E:
0000DDB0 361F                       		move.w	(sp)+,d3
0000DDB2 7001                       		moveq	#1,d0
0000DDB4 4E75                       		rts	
0000DDB6                            ; End of function But_MZBlock
0000DDB6                            ; End of function But_MZBlock
0000DDB6                            Map_But:	include	"_maps\Button.asm"
0000DDB6                            ; ---------------------------------------------------------------------------
0000DDB6                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000DDB6                            ; ---------------------------------------------------------------------------
0000DDB6                            Map_But_internal:
0000DDB6 0000                       		dc.w byte_BEAC-Map_But_internal
0000DDB8 0000                       		dc.w byte_BEB7-Map_But_internal
0000DDBA 0000                       		dc.w byte_BEC2-Map_But_internal
0000DDBC 0000                       		dc.w byte_BEB7-Map_But_internal
0000DDBE 02                         byte_BEAC:	dc.b 2
0000DDBF F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000DDC4 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000DDC9 02                         byte_BEB7:	dc.b 2
0000DDCA F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000DDCF F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000DDD4 02                         byte_BEC2:	dc.b 2
0000DDD5 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000DDDA F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000DDDF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000DDE4                            		even
0000DDE4                            		even
0000DDE4                            
0000DDE4                            		include	"_incObj\33 Pushable Blocks.asm"
0000DDE4                            ; ---------------------------------------------------------------------------
0000DDE4                            ; Object 33 - pushable blocks (MZ, LZ)
0000DDE4                            ; ---------------------------------------------------------------------------
0000DDE4                            
0000DDE4                            PushBlock:
0000DDE4 7000                       		moveq	#0,d0
0000DDE6 1028 0024                  		move.b	obRoutine(a0),d0
0000DDEA 323B 0000                  		move.w	PushB_Index(pc,d0.w),d1
0000DDEE 4EFB 1000                  		jmp	PushB_Index(pc,d1.w)
0000DDF2                            ; ===========================================================================
0000DDF2 0000                       PushB_Index:	dc.w PushB_Main-PushB_Index
0000DDF4 0000                       		dc.w loc_BF6E-PushB_Index
0000DDF6 0000                       		dc.w loc_C02C-PushB_Index
0000DDF8                            
0000DDF8 1000                       PushB_Var:	dc.b $10, 0	; object width,	frame number
0000DDFA 4001                       		dc.b $40, 1
0000DDFC                            ; ===========================================================================
0000DDFC                            
0000DDFC                            PushB_Main:	; Routine 0
0000DDFC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000DE00 117C 000F 0016             		move.b	#$F,obHeight(a0)
0000DE06 117C 000F 0017             		move.b	#$F,obWidth(a0)
0000DE0C 217C 0000 0000 0004        		move.l	#Map_Push,obMap(a0)
0000DE14 317C 42B8 0002             		move.w	#$42B8,obGfx(a0) ; MZ specific code
0000DE1A 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w
0000DE20 6600                       		bne.s	@notLZ
0000DE22 317C 43DE 0002             		move.w	#$43DE,obGfx(a0) ; LZ specific code
0000DE28                            
0000DE28                            	@notLZ:
0000DE28 117C 0004 0001             		move.b	#4,obRender(a0)
0000DE2E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000DE34 3168 0008 0034             		move.w	obX(a0),$34(a0)
0000DE3A 3168 000C 0036             		move.w	obY(a0),$36(a0)
0000DE40 7000                       		moveq	#0,d0
0000DE42 1028 0028                  		move.b	obSubtype(a0),d0
0000DE46 D040                       		add.w	d0,d0
0000DE48 0240 000E                  		andi.w	#$E,d0
0000DE4C 45FB 00AA                  		lea	PushB_Var(pc,d0.w),a2
0000DE50 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000DE54 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000DE58 4A28 0028                  		tst.b	obSubtype(a0)
0000DE5C 6700                       		beq.s	@chkgone
0000DE5E 317C C2B8 0002             		move.w	#$C2B8,obGfx(a0)
0000DE64                            
0000DE64                            	@chkgone:
0000DE64 45F8 FC00                  		lea	(v_objstate).w,a2
0000DE68 7000                       		moveq	#0,d0
0000DE6A 1028 0023                  		move.b	obRespawnNo(a0),d0
0000DE6E 6700                       		beq.s	loc_BF6E
0000DE70 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000DE76 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000DE7C 6600 0000                  		bne.w	DeleteObject
0000DE80                            
0000DE80                            loc_BF6E:	; Routine 2
0000DE80 4A28 0032                  		tst.b	$32(a0)
0000DE84 6600 0000                  		bne.w	loc_C046
0000DE88 7200                       		moveq	#0,d1
0000DE8A 1228 0014                  		move.b	obActWid(a0),d1
0000DE8E 0641 000B                  		addi.w	#$B,d1
0000DE92 343C 0010                  		move.w	#$10,d2
0000DE96 363C 0011                  		move.w	#$11,d3
0000DE9A 3828 0008                  		move.w	obX(a0),d4
0000DE9E 6100 0000                  		bsr.w	loc_C186
0000DEA2 0C78 0200 FE10             		cmpi.w	#(id_MZ<<8)+0,(v_zone).w ; is the level MZ act 1?
0000DEA8 6600                       		bne.s	loc_BFC6	; if not, branch
0000DEAA 08A8 0007 0028             		bclr	#7,obSubtype(a0)
0000DEB0 3028 0008                  		move.w	obX(a0),d0
0000DEB4 0C40 0A20                  		cmpi.w	#$A20,d0
0000DEB8 6500                       		bcs.s	loc_BFC6
0000DEBA 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000DEBE 6400                       		bcc.s	loc_BFC6
0000DEC0 3038 F7A4                  		move.w	(v_obj31ypos).w,d0
0000DEC4 0440 001C                  		subi.w	#$1C,d0
0000DEC8 3140 000C                  		move.w	d0,obY(a0)
0000DECC 08F8 0007 F7A4             		bset	#7,(v_obj31ypos).w
0000DED2 08E8 0007 0028             		bset	#7,obSubtype(a0)
0000DED8                            
0000DED8                            	loc_BFC6:
0000DEF4 6000 0000                  		bra.w	DisplaySprite
0000DEF8                            ; ===========================================================================
0000DEF8                            
0000DEF8                            loc_ppppp:
0000DF14 3168 0034 0008             		move.w	$34(a0),obX(a0)
0000DF1A 3168 0036 000C             		move.w	$36(a0),obY(a0)
0000DF20 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000DF26 6000                       		bra.s	loc_C02C
0000DF28                            ; ===========================================================================
0000DF28                            
0000DF28                            loc_C016:
0000DF28 45F8 FC00                  		lea	(v_objstate).w,a2
0000DF2C 7000                       		moveq	#0,d0
0000DF2E 1028 0023                  		move.b	obRespawnNo(a0),d0
0000DF32 6700                       		beq.s	loc_C028
0000DF34 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000DF3A                            
0000DF3A                            loc_C028:
0000DF3A 6000 0000                  		bra.w	DeleteObject
0000DF3E                            ; ===========================================================================
0000DF3E                            
0000DF3E                            loc_C02C:	; Routine 4
0000DF3E 6100 0000                  		bsr.w	ChkPartiallyVisible
0000DF42 6700                       		beq.s	locret_C044
0000DF44 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000DF4A 4228 0032                  		clr.b	$32(a0)
0000DF4E 4268 0010                  		clr.w	obVelX(a0)
0000DF52 4268 0012                  		clr.w	obVelY(a0)
0000DF56                            
0000DF56                            locret_C044:
0000DF56 4E75                       		rts	
0000DF58                            ; ===========================================================================
0000DF58                            
0000DF58                            loc_C046:
0000DF58 3F28 0008                  		move.w	obX(a0),-(sp)
0000DF5C 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0000DF62 6400                       		bcc.s	loc_C056
0000DF64 6100 0000                  		bsr.w	SpeedToPos
0000DF68                            
0000DF68                            loc_C056:
0000DF68 0828 0001 0022             		btst	#1,obStatus(a0)
0000DF6E 6700                       		beq.s	loc_C0A0
0000DF70 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000DF76 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000DF7C 4A41                       		tst.w	d1
0000DF7E 6A00 0000                  		bpl.w	loc_C09E
0000DF82 D368 000C                  		add.w	d1,obY(a0)
0000DF86 4268 0012                  		clr.w	obVelY(a0)
0000DF8A 08A8 0001 0022             		bclr	#1,obStatus(a0)
0000DF90 3011                       		move.w	(a1),d0
0000DF92 0240 03FF                  		andi.w	#$3FF,d0
0000DF96 0C40 016A                  		cmpi.w	#$16A,d0
0000DF9A 6500                       		bcs.s	loc_C09E
0000DF9C 3028 0030                  		move.w	$30(a0),d0
0000DFA0 E640                       		asr.w	#3,d0
0000DFA2 3140 0010                  		move.w	d0,obVelX(a0)
0000DFA6 117C 0001 0032             		move.b	#1,$32(a0)
0000DFAC 4268 000E                  		clr.w	$E(a0)
0000DFB0                            
0000DFB0                            loc_C09E:
0000DFB0 6000                       		bra.s	loc_C0E6
0000DFB2                            ; ===========================================================================
0000DFB2                            
0000DFB2                            loc_C0A0:
0000DFB2 4A68 0010                  		tst.w	obVelX(a0)
0000DFB6 6700 0000                  		beq.w	loc_C0D6
0000DFBA 6B00                       		bmi.s	loc_C0BC
0000DFBC 7600                       		moveq	#0,d3
0000DFBE 1628 0014                  		move.b	obActWid(a0),d3
0000DFC2 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000DFC8 4A41                       		tst.w	d1		; has block touched a wall?
0000DFCA 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000DFCC 6000                       		bra.s	loc_C0E6
0000DFCE                            ; ===========================================================================
0000DFCE                            
0000DFCE                            loc_C0BC:
0000DFCE 7600                       		moveq	#0,d3
0000DFD0 1628 0014                  		move.b	obActWid(a0),d3
0000DFD4 4643                       		not.w	d3
0000DFD6 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000DFDC 4A41                       		tst.w	d1		; has block touched a wall?
0000DFDE 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000DFE0 6000                       		bra.s	loc_C0E6
0000DFE2                            ; ===========================================================================
0000DFE2                            
0000DFE2                            PushB_StopPush:
0000DFE2 4268 0010                  		clr.w	obVelX(a0)		; stop block moving
0000DFE6 6000                       		bra.s	loc_C0E6
0000DFE8                            ; ===========================================================================
0000DFE8                            
0000DFE8                            loc_C0D6:
0000DFE8 06A8 0000 2001 000C        		addi.l	#$2001,obY(a0)
0000DFF0 0C28 00A0 000F             		cmpi.b	#$A0,obY+3(a0)
0000DFF6 6400                       		bcc.s	loc_C104
0000DFF8                            
0000DFF8                            loc_C0E6:
0000DFF8 7200                       		moveq	#0,d1
0000DFFA 1228 0014                  		move.b	obActWid(a0),d1
0000DFFE 0641 000B                  		addi.w	#$B,d1
0000E002 343C 0010                  		move.w	#$10,d2
0000E006 363C 0011                  		move.w	#$11,d3
0000E00A 381F                       		move.w	(sp)+,d4
0000E00C 6100 0000                  		bsr.w	loc_C186
0000E010 6100                       		bsr.s	PushB_ChkLava
0000E012 6000 FEC4                  		bra.w	loc_BFC6
0000E016                            ; ===========================================================================
0000E016                            
0000E016                            loc_C104:
0000E016 381F                       		move.w	(sp)+,d4
0000E018 43F8 D000                  		lea	(v_player).w,a1
0000E01C 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000E022 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000E028 6000 FECE                  		bra.w	loc_ppppp
0000E02C                            ; ===========================================================================
0000E02C                            
0000E02C                            PushB_ChkLava:
0000E02C 0C78 0201 FE10             		cmpi.w	#(id_MZ<<8)+1,(v_zone).w ; is the level MZ act 2?
0000E032 6600                       		bne.s	PushB_ChkLava2	; if not, branch
0000E034 343C FFE0                  		move.w	#-$20,d2
0000E038 0C68 0DD0 0008             		cmpi.w	#$DD0,obX(a0)
0000E03E 6700                       		beq.s	PushB_LoadLava
0000E040 0C68 0CC0 0008             		cmpi.w	#$CC0,obX(a0)
0000E046 6700                       		beq.s	PushB_LoadLava
0000E048 0C68 0BA0 0008             		cmpi.w	#$BA0,obX(a0)
0000E04E 6700                       		beq.s	PushB_LoadLava
0000E050 4E75                       		rts	
0000E052                            ; ===========================================================================
0000E052                            
0000E052                            PushB_ChkLava2:
0000E052 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is the level MZ act 3?
0000E058 6600                       		bne.s	PushB_NoLava	; if not, branch
0000E05A 343C 0020                  		move.w	#$20,d2
0000E05E 0C68 0560 0008             		cmpi.w	#$560,obX(a0)
0000E064 6700                       		beq.s	PushB_LoadLava
0000E066 0C68 05C0 0008             		cmpi.w	#$5C0,obX(a0)
0000E06C 6700                       		beq.s	PushB_LoadLava
0000E06E                            
0000E06E                            PushB_NoLava:
0000E06E 4E75                       		rts	
0000E070                            ; ===========================================================================
0000E070                            
0000E070                            PushB_LoadLava:
0000E070 6100 0000                  		bsr.w	FindFreeObj
0000E074 6600                       		bne.s	locret_C184
0000E076 12BC 0000                  		move.b	#id_GeyserMaker,0(a1) ; load lava geyser object
0000E07A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000E080 D569 0008                  		add.w	d2,obX(a1)
0000E084 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000E08A 0669 0010 000C             		addi.w	#$10,obY(a1)
0000E090 2348 003C                  		move.l	a0,$3C(a1)
0000E094                            
0000E094                            locret_C184:
0000E094 4E75                       		rts	
0000E096                            ; ===========================================================================
0000E096                            
0000E096                            loc_C186:
0000E096 1028 0025                  		move.b	ob2ndRout(a0),d0
0000E09A 6700 0000                  		beq.w	loc_C218
0000E09E 5500                       		subq.b	#2,d0
0000E0A0 6600                       		bne.s	loc_C1AA
0000E0A2 6100 ACF4                  		bsr.w	ExitPlatform
0000E0A6 0829 0003 0022             		btst	#3,obStatus(a1)
0000E0AC 6600                       		bne.s	loc_C1A4
0000E0AE 4228 0025                  		clr.b	ob2ndRout(a0)
0000E0B2 4E75                       		rts	
0000E0B4                            ; ===========================================================================
0000E0B4                            
0000E0B4                            loc_C1A4:
0000E0B4 3404                       		move.w	d4,d2
0000E0B6 6000 B23E                  		bra.w	MvSonicOnPtfm
0000E0BA                            ; ===========================================================================
0000E0BA                            
0000E0BA                            loc_C1AA:
0000E0BA 5500                       		subq.b	#2,d0
0000E0BC 6600                       		bne.s	loc_C1F2
0000E0BE 6100 0000                  		bsr.w	SpeedToPos
0000E0C2 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E0C8 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E0CE 4A41                       		tst.w	d1
0000E0D0 6A00 0000                  		bpl.w	locret_C1F0
0000E0D4 D368 000C                  		add.w	d1,obY(a0)
0000E0D8 4268 0012                  		clr.w	obVelY(a0)
0000E0DC 4228 0025                  		clr.b	ob2ndRout(a0)
0000E0E0 3011                       		move.w	(a1),d0
0000E0E2 0240 03FF                  		andi.w	#$3FF,d0
0000E0E6 0C40 016A                  		cmpi.w	#$16A,d0
0000E0EA 6500                       		bcs.s	locret_C1F0
0000E0EC 3028 0030                  		move.w	$30(a0),d0
0000E0F0 E640                       		asr.w	#3,d0
0000E0F2 3140 0010                  		move.w	d0,obVelX(a0)
0000E0F6 117C 0001 0032             		move.b	#1,$32(a0)
0000E0FC 4268 000E                  		clr.w	obY+2(a0)
0000E100                            
0000E100                            locret_C1F0:
0000E100 4E75                       		rts	
0000E102                            ; ===========================================================================
0000E102                            
0000E102                            loc_C1F2:
0000E102 6100 0000                  		bsr.w	SpeedToPos
0000E106 3028 0008                  		move.w	obX(a0),d0
0000E10A 0240 000C                  		andi.w	#$C,d0
0000E10E 6600 0000                  		bne.w	locret_C2E4
0000E112 0268 FFF0 0008             		andi.w	#-$10,obX(a0)
0000E118 3168 0010 0030             		move.w	obVelX(a0),$30(a0)
0000E11E 4268 0010                  		clr.w	obVelX(a0)
0000E122 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000E126 4E75                       		rts	
0000E128                            ; ===========================================================================
0000E128                            
0000E128                            loc_C218:
0000E128 6100 0000                  		bsr.w	Solid_ChkEnter
0000E12C 4A44                       		tst.w	d4
0000E12E 6700 0000                  		beq.w	locret_C2E4
0000E132 6B00 0000                  		bmi.w	locret_C2E4
0000E136 4A28 0032                  		tst.b	$32(a0)
0000E13A 6700                       		beq.s	loc_C230
0000E13C 6000 0000                  		bra.w	locret_C2E4
0000E140                            ; ===========================================================================
0000E140                            
0000E140                            loc_C230:
0000E140 4A40                       		tst.w	d0
0000E142 6700 0000                  		beq.w	locret_C2E4
0000E146 6B00                       		bmi.s	loc_C268
0000E148 0829 0000 0022             		btst	#0,obStatus(a1)
0000E14E 6600 0000                  		bne.w	locret_C2E4
0000E152 3F00                       		move.w	d0,-(sp)
0000E154 7600                       		moveq	#0,d3
0000E156 1628 0014                  		move.b	obActWid(a0),d3
0000E15A 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E160 301F                       		move.w	(sp)+,d0
0000E162 4A41                       		tst.w	d1
0000E164 6B00 0000                  		bmi.w	locret_C2E4
0000E168 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000E170 7001                       		moveq	#1,d0
0000E172 323C 0040                  		move.w	#$40,d1
0000E176 6000                       		bra.s	loc_C294
0000E178                            ; ===========================================================================
0000E178                            
0000E178                            loc_C268:
0000E178 0829 0000 0022             		btst	#0,obStatus(a1)
0000E17E 6700                       		beq.s	locret_C2E4
0000E180 3F00                       		move.w	d0,-(sp)
0000E182 7600                       		moveq	#0,d3
0000E184 1628 0014                  		move.b	obActWid(a0),d3
0000E188 4643                       		not.w	d3
0000E18A 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E190 301F                       		move.w	(sp)+,d0
0000E192 4A41                       		tst.w	d1
0000E194 6B00                       		bmi.s	locret_C2E4
0000E196 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
0000E19E 70FF                       		moveq	#-1,d0
0000E1A0 323C FFC0                  		move.w	#-$40,d1
0000E1A4                            
0000E1A4                            loc_C294:
0000E1A4 43F8 D000                  		lea	(v_player).w,a1
0000E1A8 D169 0008                  		add.w	d0,obX(a1)
0000E1AC 3341 0020                  		move.w	d1,obInertia(a1)
0000E1B0 337C 0000 0010             		move.w	#0,obVelX(a1)
0000E1B6 3F00                       		move.w	d0,-(sp)
0000E1C2 301F                       		move.w	(sp)+,d0
0000E1C4 4A28 0028                  		tst.b	obSubtype(a0)
0000E1C8 6B00                       		bmi.s	locret_C2E4
0000E1CA 3F00                       		move.w	d0,-(sp)
0000E1CC 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E1D2 301F                       		move.w	(sp)+,d0
0000E1D4 0C41 0004                  		cmpi.w	#4,d1
0000E1D8 6F00                       		ble.s	loc_C2E0
0000E1DA 317C 0400 0010             		move.w	#$400,obVelX(a0)
0000E1E0 4A40                       		tst.w	d0
0000E1E2 6A00                       		bpl.s	loc_C2D8
0000E1E4 4468 0010                  		neg.w	obVelX(a0)
0000E1E8                            
0000E1E8                            loc_C2D8:
0000E1E8 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0000E1EE 6000                       		bra.s	locret_C2E4
0000E1F0                            ; ===========================================================================
0000E1F0                            
0000E1F0                            loc_C2E0:
0000E1F0 D368 000C                  		add.w	d1,obY(a0)
0000E1F4                            
0000E1F4                            locret_C2E4:
0000E1F4 4E75                       		rts	
0000E1F4 4E75                       		rts	
0000E1F6                            Map_Push:	include	"_maps\Pushable Blocks.asm"
0000E1F6                            ; ---------------------------------------------------------------------------
0000E1F6                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000E1F6                            ; ---------------------------------------------------------------------------
0000E1F6                            Map_Push_internal:
0000E1F6 0000                       		dc.w @single-Map_Push_internal
0000E1F8 0000                       		dc.w @four-Map_Push_internal
0000E1FA 01                         @single:	dc.b 1
0000E1FB F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000E200 04                         @four:		dc.b 4
0000E201 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000E206 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000E20B F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000E210 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000E216 00                         		even
0000E216 00                         		even
0000E216                            
0000E216                            		include	"_incObj\34 Title Cards.asm"
0000E216                            ; ---------------------------------------------------------------------------
0000E216                            ; Object 34 - zone title cards
0000E216                            ; ---------------------------------------------------------------------------
0000E216                            
0000E216                            TitleCard:
0000E216 7000                       		moveq	#0,d0
0000E218 1028 0024                  		move.b	obRoutine(a0),d0
0000E21C 323B 0000                  		move.w	Card_Index(pc,d0.w),d1
0000E220 4EFB 1000                  		jmp	Card_Index(pc,d1.w)
0000E224                            ; ===========================================================================
0000E224 0000                       Card_Index:	dc.w Card_CheckSBZ3-Card_Index
0000E226 0000                       		dc.w Card_ChkPos-Card_Index
0000E228 0000                       		dc.w Card_Wait-Card_Index
0000E22A 0000                       		dc.w Card_Wait-Card_Index
0000E22C                            
0000E22C =00000030                  card_mainX:	equ $30		; position for card to display on
0000E22C =00000032                  card_finalX:	equ $32		; position for card to finish on
0000E22C                            ; ===========================================================================
0000E22C                            
0000E22C                            Card_CheckSBZ3:	; Routine 0
0000E22C 2248                       		movea.l	a0,a1
0000E22E 7000                       		moveq	#0,d0
0000E230 1038 FE10                  		move.b	(v_zone).w,d0
0000E234 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; check if level is SBZ 3
0000E23A 6600                       		bne.s	Card_CheckFZ
0000E23C 7001                       		moveq	#1,d0		; load title card number 6 (FZ)
0000E23E                            
0000E23E                            	Card_CheckFZ:
0000E23E 3400                       		move.w	d0,d2
0000E240 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; check if level is FZ
0000E246 6600                       		bne.s	Card_LoadConfig
0000E248 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000E24A 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000E24C                            
0000E24C                            	Card_LoadConfig:
0000E24C 47F9 0000 0000             		lea	(Card_ConData).l,a3
0000E252 E948                       		lsl.w	#4,d0
0000E254 D6C0                       		adda.w	d0,a3
0000E256 45F9 0000 0000             		lea	(Card_ItemData).l,a2
0000E25C 7203                       		moveq	#3,d1
0000E25E                            
0000E25E                            Card_Loop:
0000E25E 12BC 0000                  		move.b	#id_TitleCard,0(a1)
0000E262 3353 0008                  		move.w	(a3),obX(a1)	; load start x-position
0000E266 335B 0032                  		move.w	(a3)+,card_finalX(a1) ; load finish x-position (same as start)
0000E26A 335B 0030                  		move.w	(a3)+,card_mainX(a1) ; load main x-position
0000E26E 335A 000A                  		move.w	(a2)+,obScreenY(a1)
0000E272 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E276 101A                       		move.b	(a2)+,d0
0000E278 6600                       		bne.s	Card_ActNumber
0000E27A 1002                       		move.b	d2,d0
0000E27C                            
0000E27C                            	Card_ActNumber:
0000E27C 0C00 0007                  		cmpi.b	#7,d0
0000E280 6600                       		bne.s	Card_MakeSprite
0000E282 D038 FE11                  		add.b	(v_act).w,d0
0000E286 0C38 0003 FE11             		cmpi.b	#3,(v_act).w
0000E28C 6600                       		bne.s	Card_MakeSprite
0000E28E 5300                       		subq.b	#1,d0
0000E290                            
0000E290                            	Card_MakeSprite:
0000E290 1340 001A                  		move.b	d0,obFrame(a1)	; display frame	number d0
0000E294 237C 0000 0000 0004        		move.l	#Map_Card,obMap(a1)
0000E29C 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E2A2 137C 0078 0014             		move.b	#$78,obActWid(a1)
0000E2A8 137C 0000 0001             		move.b	#0,obRender(a1)
0000E2AE 337C 0000 0018             		move.w	#0,obPriority(a1)
0000E2B4 337C 003C 001E             		move.w	#60,obTimeFrame(a1) ; set time delay to 1 second
0000E2BA 43E9 0040                  		lea	$40(a1),a1	; next object
0000E2BE 51C9 FF9E                  		dbf	d1,Card_Loop	; repeat sequence another 3 times
0000E2C2                            
0000E2C2                            Card_ChkPos:	; Routine 2
0000E2C2 7210                       		moveq	#$10,d1		; set horizontal speed
0000E2C4 3028 0030                  		move.w	card_mainX(a0),d0
0000E2C8 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the target position?
0000E2CC 6700                       		beq.s	Card_NoMove	; if yes, branch
0000E2CE 6C00                       		bge.s	Card_Move
0000E2D0 4441                       		neg.w	d1
0000E2D2                            
0000E2D2                            Card_Move:
0000E2D2 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E2D6                            
0000E2D6                            Card_NoMove:
0000E2D6 3028 0008                  		move.w	obX(a0),d0
0000E2DA 6B00                       		bmi.s	locret_C3D8
0000E2DC 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E2E0 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000E2E2 6000 0000                  		bra.w	DisplaySprite
0000E2E6                            ; ===========================================================================
0000E2E6                            
0000E2E6                            locret_C3D8:
0000E2E6 4E75                       		rts	
0000E2E8                            ; ===========================================================================
0000E2E8                            
0000E2E8                            Card_Wait:	; Routine 4/6
0000E2E8 4A68 001E                  		tst.w	obTimeFrame(a0)	; is time remaining zero?
0000E2EC 6700                       		beq.s	Card_ChkPos2	; if yes, branch
0000E2EE 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time
0000E2F2 6000 0000                  		bra.w	DisplaySprite
0000E2F6                            ; ===========================================================================
0000E2F6                            
0000E2F6                            Card_ChkPos2:
0000E2F6 4A28 0001                  		tst.b	obRender(a0)
0000E2FA 6A00                       		bpl.s	Card_ChangeArt
0000E2FC 7220                       		moveq	#$20,d1
0000E2FE 3028 0032                  		move.w	card_finalX(a0),d0
0000E302 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the finish position?
0000E306 6700                       		beq.s	Card_ChangeArt	; if yes, branch
0000E308 6C00                       		bge.s	Card_Move2
0000E30A 4441                       		neg.w	d1
0000E30C                            
0000E30C                            Card_Move2:
0000E30C D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E310 3028 0008                  		move.w	obX(a0),d0
0000E314 6B00                       		bmi.s	locret_C412
0000E316 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E31A 6400                       		bcc.s	locret_C412	; if yes, branch
0000E31C 6000 0000                  		bra.w	DisplaySprite
0000E320                            ; ===========================================================================
0000E320                            
0000E320                            locret_C412:
0000E320 4E75                       		rts	
0000E322                            ; ===========================================================================
0000E322                            
0000E322                            Card_ChangeArt:
0000E322 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000E328 6600                       		bne.s	Card_Delete
0000E32A 7000                       		moveq	#plcid_Explode,d0
0000E32C 4EB9 0000 173A             		jsr	(AddPLC).l	; load explosion patterns
0000E332 7000                       		moveq	#0,d0
0000E334 1038 FE10                  		move.b	(v_zone).w,d0
0000E338 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
0000E33C 4EB9 0000 173A             		jsr	(AddPLC).l	; load animal patterns
0000E342                            
0000E342                            Card_Delete:
0000E342 6000 0000                  		bra.w	DeleteObject
0000E346                            ; ===========================================================================
0000E346 00D0                       Card_ItemData:	dc.w $D0	; y-axis position
0000E348 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000E34A 00E4                       		dc.w $E4
0000E34C 0206                       		dc.b 2,	6
0000E34E 00EA                       		dc.w $EA
0000E350 0207                       		dc.b 2,	7
0000E352 00E0                       		dc.w $E0
0000E354 020A                       		dc.b 2,	$A
0000E356                            ; ---------------------------------------------------------------------------
0000E356                            ; Title	card configuration data
0000E356                            ; Format:
0000E356                            ; 4 bytes per item (YYYY XXXX)
0000E356                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000E356                            ; ---------------------------------------------------------------------------
0000E356 0000 0120 FEFC 013C 0414+  Card_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000E366 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000E376 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000E386 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000E396 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000E3A6 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000E3B6 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000E3C6                            ; ===========================================================================
0000E3C6                            ; ===========================================================================
0000E3C6                            		include	"_incObj\39 Game Over.asm"
0000E3C6                            ; ---------------------------------------------------------------------------
0000E3C6                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000E3C6                            ; ---------------------------------------------------------------------------
0000E3C6                            
0000E3C6                            GameOverCard:
0000E3C6 7000                       		moveq	#0,d0
0000E3C8 1028 0024                  		move.b	obRoutine(a0),d0
0000E3CC 323B 0000                  		move.w	Over_Index(pc,d0.w),d1
0000E3D0 4EFB 1000                  		jmp	Over_Index(pc,d1.w)
0000E3D4                            ; ===========================================================================
0000E3D4 0000                       Over_Index:	dc.w Over_ChkPLC-Over_Index
0000E3D6 0000                       		dc.w Over_Move-Over_Index
0000E3D8 0000                       		dc.w Over_Wait-Over_Index
0000E3DA                            ; ===========================================================================
0000E3DA                            
0000E3DA                            Over_ChkPLC:	; Routine 0
0000E3DA 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E3DE 6700                       		beq.s	Over_Main	; if yes, branch
0000E3E0 4E75                       		rts	
0000E3E2                            ; ===========================================================================
0000E3E2                            
0000E3E2                            Over_Main:
0000E3E2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E3E6 317C 0050 0008             		move.w	#$50,obX(a0)	; set x-position
0000E3EC 0828 0000 001A             		btst	#0,obFrame(a0)	; is the object	"OVER"?
0000E3F2 6700                       		beq.s	Over_1stWord	; if not, branch
0000E3F4 317C 01F0 0008             		move.w	#$1F0,obX(a0)	; set x-position for "OVER"
0000E3FA                            
0000E3FA                            	Over_1stWord:
0000E3FA 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0000E400 217C 0000 0000 0004        		move.l	#Map_Over,obMap(a0)
0000E408 317C 855E 0002             		move.w	#$855E,obGfx(a0)
0000E40E 117C 0000 0001             		move.b	#0,obRender(a0)
0000E414 317C 0000 0018             		move.w	#0,obPriority(a0)
0000E41A                            
0000E41A                            Over_Move:	; Routine 2
0000E41A 7210                       		moveq	#$10,d1		; set horizontal speed
0000E41C 0C68 0120 0008             		cmpi.w	#$120,obX(a0)	; has item reached its target position?
0000E422 6700                       		beq.s	Over_SetWait	; if yes, branch
0000E424 6500                       		bcs.s	Over_UpdatePos
0000E426 4441                       		neg.w	d1
0000E428                            
0000E428                            	Over_UpdatePos:
0000E428 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E42C 6000 0000                  		bra.w	DisplaySprite
0000E430                            ; ===========================================================================
0000E430                            
0000E430                            Over_SetWait:
0000E430 317C 02D0 001E             		move.w	#720,obTimeFrame(a0) ; set time delay to 12 seconds
0000E436 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E43A 4E75                       		rts	
0000E43C                            ; ===========================================================================
0000E43C                            
0000E43C                            Over_Wait:	; Routine 4
0000E43C 1038 F605                  		move.b	(v_jpadpress1).w,d0
0000E440 0200 0070                  		andi.b	#btnABC,d0	; is button A, B or C pressed?
0000E444 6600                       		bne.s	Over_ChgMode	; if yes, branch
0000E446 0828 0000 001A             		btst	#0,obFrame(a0)
0000E44C 6600                       		bne.s	Over_Display
0000E44E 4A68 001E                  		tst.w	obTimeFrame(a0)	; has time delay reached zero?
0000E452 6700                       		beq.s	Over_ChgMode	; if yes, branch
0000E454 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E458 6000 0000                  		bra.w	DisplaySprite
0000E45C                            ; ===========================================================================
0000E45C                            
0000E45C                            Over_ChgMode:
0000E45C 4A38 FE1A                  		tst.b	(f_timeover).w	; is time over flag set?
0000E460 6600                       		bne.s	Over_ResetLvl	; if yes, branch
0000E462 11FC 0000 F600             		move.b	#id_Continue,(v_gamemode).w ; set mode to $14 (continue screen)
0000E468 4A38 FE18                  		tst.b	(v_continues).w	; do you have any continues?
0000E46C 6600                       		bne.s	Over_Display	; if yes, branch
0000E46E 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set mode to 0 (Sega screen)
0000E474 6000                       		bra.s	Over_Display
0000E476                            ; ===========================================================================
0000E476                            
0000E476                            Over_ResetLvl:
0000E476 42B8 FE38                  			clr.l	(v_lamp_time).w
0000E47A 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E480                            
0000E480                            Over_Display:
0000E480 6000 0000                  		bra.w	DisplaySprite
0000E480 6000 0000                  		bra.w	DisplaySprite
0000E484                            		include	"_incObj\3A Got Through Card.asm"
0000E484                            ; ---------------------------------------------------------------------------
0000E484                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000E484                            ; ---------------------------------------------------------------------------
0000E484                            
0000E484                            GotThroughCard:
0000E484 7000                       		moveq	#0,d0
0000E486 1028 0024                  		move.b	obRoutine(a0),d0
0000E48A 323B 0000                  		move.w	Got_Index(pc,d0.w),d1
0000E48E 4EFB 1000                  		jmp	Got_Index(pc,d1.w)
0000E492                            ; ===========================================================================
0000E492 0000                       Got_Index:	dc.w Got_ChkPLC-Got_Index
0000E494 0000                       		dc.w Got_Move-Got_Index
0000E496 0000                       		dc.w Got_Wait-Got_Index
0000E498 0000                       		dc.w Got_TimeBonus-Got_Index
0000E49A 0000                       		dc.w Got_Wait-Got_Index
0000E49C 0000                       		dc.w Got_NextLevel-Got_Index
0000E49E 0000                       		dc.w Got_Wait-Got_Index
0000E4A0 0000                       		dc.w Got_Move2-Got_Index
0000E4A2 0000                       		dc.w loc_C766-Got_Index
0000E4A4                            
0000E4A4 =00000030                  got_mainX:	equ $30		; position for card to display on
0000E4A4 =00000032                  got_finalX:	equ $32		; position for card to finish on
0000E4A4                            ; ===========================================================================
0000E4A4                            
0000E4A4                            Got_ChkPLC:	; Routine 0
0000E4A4 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E4A8 6700                       		beq.s	Got_Main	; if yes, branch
0000E4AA 4E75                       		rts	
0000E4AC                            ; ===========================================================================
0000E4AC                            
0000E4AC                            Got_Main:
0000E4AC 2248                       		movea.l	a0,a1
0000E4AE 45F9 0000 0000             		lea	(Got_Config).l,a2
0000E4B4 7206                       		moveq	#6,d1
0000E4B6                            
0000E4B6                            Got_Loop:
0000E4B6 12BC 0000                  		move.b	#id_GotThroughCard,0(a1)
0000E4BA 3352 0008                  		move.w	(a2),obX(a1)	; load start x-position
0000E4BE 335A 0032                  		move.w	(a2)+,got_finalX(a1) ; load finish x-position (same as start)
0000E4C2 335A 0030                  		move.w	(a2)+,got_mainX(a1) ; load main x-position
0000E4C6 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E4CA 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E4CE 101A                       		move.b	(a2)+,d0
0000E4D0 0C00 0006                  		cmpi.b	#6,d0
0000E4D4 6600                       		bne.s	loc_C5CA
0000E4D6 D038 FE11                  		add.b	(v_act).w,d0	; add act number to frame number
0000E4DA                            
0000E4DA                            	loc_C5CA:
0000E4DA 1340 001A                  		move.b	d0,obFrame(a1)
0000E4DE 237C 0000 0000 0004        		move.l	#Map_Got,obMap(a1)
0000E4E6 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E4EC 137C 0000 0001             		move.b	#0,obRender(a1)
0000E4F2 43E9 0040                  		lea	$40(a1),a1
0000E4F6 51C9 FFBE                  		dbf	d1,Got_Loop	; repeat 6 times
0000E4FA                            
0000E4FA                            Got_Move:	; Routine 2
0000E4FA 7210                       		moveq	#$10,d1		; set horizontal speed
0000E4FC 3028 0030                  		move.w	got_mainX(a0),d0
0000E500 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E504 6700                       		beq.s	loc_C61A	; if yes, branch
0000E506 6C00                       		bge.s	Got_ChgPos
0000E508 4441                       		neg.w	d1
0000E50A                            
0000E50A                            	Got_ChgPos:
0000E50A D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E50E                            
0000E50E                            	loc_C5FE:
0000E50E 3028 0008                  		move.w	obX(a0),d0
0000E512 6B00                       		bmi.s	locret_C60E
0000E514 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E518 6400                       		bcc.s	locret_C60E	; if yes, branch
0000E51A 6000 0000                  		bra.w	DisplaySprite
0000E51E                            ; ===========================================================================
0000E51E                            
0000E51E                            locret_C60E:
0000E51E 4E75                       		rts	
0000E520                            ; ===========================================================================
0000E520                            
0000E520                            loc_C610:
0000E520 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000E526 6000 0000                  		bra.w	Got_Move2
0000E52A                            ; ===========================================================================
0000E52A                            
0000E52A                            loc_C61A:
0000E52A 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000E530 67EE                       		beq.s	loc_C610
0000E532 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E538 66D4                       		bne.s	loc_C5FE
0000E53A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E53E 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E544                            		;move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E544                            
0000E544                            Got_Wait:	; Routine 4, 8, $C
0000E544 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E548 6600                       		bne.s	Got_Display
0000E54A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E54E                            
0000E54E                            Got_Display:
0000E54E 6000 0000                  		bra.w	DisplaySprite
0000E552                            ; ===========================================================================
0000E552                            
0000E552                            Got_TimeBonus:	; Routine 6
0000E552 6100 0000                  		bsr.w	DisplaySprite
0000E556 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set time/ring bonus update flag
0000E55C 7000                       		moveq	#0,d0
0000E55E 4A78 F7D2                  		tst.w	(v_timebonus).w	; is time bonus	= zero?
0000E562 6700                       		beq.s	Got_RingBonus	; if yes, branch
0000E564 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E568 0478 000A F7D2             		subi.w	#10,(v_timebonus).w ; subtract 10 from time bonus
0000E56E                            
0000E56E                            Got_RingBonus:
0000E56E 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E572 6700                       		beq.s	Got_ChkBonus	; if yes, branch
0000E574 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E578 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E57E                            
0000E57E                            Got_ChkBonus:
0000E57E 4A40                       		tst.w	d0		; is there any bonus?
0000E580 6600                       		bne.s	Got_AddBonus	; if yes, branch
0000E58C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E590 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w
0000E596 6600                       		bne.s	Got_SetDelay
0000E598 5828 0024                  		addq.b	#4,obRoutine(a0)
0000E59C                            
0000E59C                            Got_SetDelay:
0000E59C 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E5A2                            
0000E5A2                            locret_C692:
0000E5A2 4E75                       		rts	
0000E5A4                            ; ===========================================================================
0000E5A4                            
0000E5A4                            Got_AddBonus:
0000E5A4 4EB9 0000 0000             		jsr	(AddPoints).l
0000E5AA 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E5AE 0200 0003                  		andi.b	#3,d0
0000E5B2 66EE                       		bne.s	locret_C692
0000E5BE                            ; ===========================================================================
0000E5BE                            
0000E5BE                            Got_NextLevel:	; Routine $A
0000E5BE 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E5C4 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E5CA 1038 FE10                  		move.b	(v_zone).w,d0
0000E5CE 0240 0007                  		andi.w	#7,d0
0000E5D2 E748                       		lsl.w	#3,d0
0000E5D4 1238 FE11                  		move.b	(v_act).w,d1
0000E5D8 0241 0003                  		andi.w	#3,d1
0000E5DC D241                       		add.w	d1,d1
0000E5DE D041                       		add.w	d1,d0
0000E5E0 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000E5E4 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
0000E5E8 4A40                       		tst.w	d0
0000E5EA 6600                       		bne.s	Got_ChkSS
0000E5EC 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
0000E5F2 6000                       		bra.s	Got_Display2
0000E5F4                            ; ===========================================================================
0000E5F4                            
0000E5F4                            Got_ChkSS:	
0000E5F4 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
0000E5F8                            		;tst.b	(f_emeraldm).w
0000E5F8                            		;beq.s	VBla_08A
0000E5F8                            		;addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0000E5F8                            		;sfx		bgm_Emerald,1,0,0 ;	play emerald music
0000E5F8                            		;bra.s	Got_Display2
0000E5F8 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E5FE                            		
0000E5FE                            ; ===========================================================================
0000E5FE                            
0000E5FE                            VBla_08A:
0000E5FE 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E604                            
0000E604                            Got_Display2:
0000E604 6000 0000                  		bra.w	DisplaySprite
0000E608                            ; ===========================================================================
0000E608                            ; ---------------------------------------------------------------------------
0000E608                            ; Level	order array
0000E608                            ; ---------------------------------------------------------------------------
0000E608                            LevelOrder:
0000E608                            		; Green Hill Zone
0000E608 0001                       		dc.b id_GHZ, 1	; Act 2
0000E60A 0002                       		dc.b id_GHZ, 2	; Act 2
0000E60C 0400                       		dc.b id_SYZ, 0	; Act 3
0000E60E 0000                       		dc.b 0, 0
0000E610                            
0000E610                            		; Labyrinth Zone
0000E610 0101                       		dc.b id_LZ, 1	; Act 1
0000E612 0102                       		dc.b id_LZ, 2	; Act 2
0000E614 0000                       		dc.b id_GHZ, 0 	; Act 3
0000E616 0502                       		dc.b id_SBZ, 2	; Scrap Brain Zone Act 3
0000E618                            
0000E618                            		; Marble Zone
0000E618 0201                       		dc.b id_MZ, 1	; Act 1
0000E61A 0202                       		dc.b id_MZ, 2	; Act 2
0000E61C 0502                       		dc.b id_SBZ, 2	; Act 3
0000E61E 0000                       		dc.b 0, 0
0000E620                            
0000E620                            		; Star Light Zone
0000E620 0301                       		dc.b id_SLZ, 1	; Act 1
0000E622 0302                       		dc.b id_SLZ, 2	; Act 2
0000E624 0500                       		dc.b id_SBZ, 0	; Act 3
0000E626 0000                       		dc.b 0, 0
0000E628                            
0000E628                            		; Spring Yard Zone
0000E628 0401                       		dc.b id_SYZ, 1	; Act 1
0000E62A 0200                       		dc.b id_MZ,  0	; Act 2
0000E62C 0200                       		dc.b id_MZ,	 0	; Act 3
0000E62E 0000                       		dc.b 0, 0
0000E630                            
0000E630                            		; Scrap Brain Zone
0000E630 0501                       		dc.b id_SBZ, 1	; Act 1
0000E632 0103                       		dc.b id_LZ, 3	; Act 2
0000E634 0000                       		dc.b 0, 0	; Final Zone
0000E636 0000                       		dc.b 0, 0
0000E638                            		even
0000E638                            ; ===========================================================================
0000E638                            
0000E638                            Got_Move2:	; Routine $E
0000E638 7220                       		moveq	#$20,d1		; set horizontal speed
0000E63A 3028 0032                  		move.w	got_finalX(a0),d0
0000E63E B068 0008                  		cmp.w	obX(a0),d0	; has item reached its finish position?
0000E642 6700                       		beq.s	Got_SBZ2	; if yes, branch
0000E644 6C00                       		bge.s	Got_ChgPos2
0000E646 4441                       		neg.w	d1
0000E648                            
0000E648                            	Got_ChgPos2:
0000E648 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E64C 3028 0008                  		move.w	obX(a0),d0
0000E650 6B00                       		bmi.s	locret_C748
0000E652 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E656 6400                       		bcc.s	locret_C748	; if yes, branch
0000E658 6000 0000                  		bra.w	DisplaySprite
0000E65C                            ; ===========================================================================
0000E65C                            
0000E65C                            locret_C748:
0000E65C 4E75                       		rts	
0000E65E                            ; ===========================================================================
0000E65E                            
0000E65E                            Got_SBZ2:
0000E65E 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E664 6600 0000                  		bne.w	DeleteObject
0000E668 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E66C 4238 F7CC                  		clr.b	(f_lockctrl).w	; unlock controls
0000E670 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E676                            ; ===========================================================================
0000E676                            
0000E676                            loc_C766:	; Routine $10
0000E676 5478 F72A                  		addq.w	#2,(v_limitright2).w
0000E67A 0C78 2100 F72A             		cmpi.w	#$2100,(v_limitright2).w
0000E680 6700 0000                  		beq.w	DeleteObject
0000E684 4E75                       		rts	
0000E686                            ; ===========================================================================
0000E686                            		;    x-start,	x-main,	y-main,
0000E686                            		;				routine, frame number
0000E686                            
0000E686 0004 0124 00BC             Got_Config:	dc.w 4,		$124,	$BC			; "SONIC HAS"
0000E68C 0200                       		dc.b 				2,	0
0000E68E                            
0000E68E FEE0 0120 00D0             		dc.w -$120,	$120,	$D0			; "PASSED"
0000E694 0201                       		dc.b 				2,	1
0000E696                            
0000E696 040C 014C 00D6             		dc.w $40C,	$14C,	$D6			; "ACT" 1/2/3
0000E69C 0206                       		dc.b 				2,	6
0000E69E                            
0000E69E 0520 0120 0112             		dc.w $520,	$120,	$112			; score
0000E6A4 0202                       		dc.b 				2,	2
0000E6A6                            
0000E6A6 0540 0120 00F2             		dc.w $540,	$120,	$F2			; time bonus
0000E6AC 0203                       		dc.b 				2,	3
0000E6AE                            
0000E6AE 0560 0120 0102             		dc.w $560,	$120,	$102			; ring bonus
0000E6B4 0204                       		dc.b 				2,	4
0000E6B6                            
0000E6B6 020C 014C 00CC             		dc.w $20C,	$14C,	$CC			; oval
0000E6BC 0205                       		dc.b 				2,	5
0000E6BC 0205                       		dc.b 				2,	5
0000E6BE                            		include	"_incObj\7E Special Stage Results.asm"
0000E6BE                            ; ---------------------------------------------------------------------------
0000E6BE                            ; Object 7E - special stage results screen
0000E6BE                            ; ---------------------------------------------------------------------------
0000E6BE                            
0000E6BE                            SSResult:
0000E6BE 7000                       		moveq	#0,d0
0000E6C0 1028 0024                  		move.b	obRoutine(a0),d0
0000E6C4 323B 0000                  		move.w	SSR_Index(pc,d0.w),d1
0000E6C8 4EFB 1000                  		jmp	SSR_Index(pc,d1.w)
0000E6CC                            ; ===========================================================================
0000E6CC 0000                       SSR_Index:	dc.w SSR_ChkPLC-SSR_Index
0000E6CE 0000                       		dc.w SSR_Move-SSR_Index
0000E6D0 0000                       		dc.w SSR_Wait-SSR_Index
0000E6D2 0000                       		dc.w SSR_RingBonus-SSR_Index
0000E6D4 0000                       		dc.w SSR_Wait-SSR_Index
0000E6D6 0000                       		dc.w SSR_Exit-SSR_Index
0000E6D8 0000                       		dc.w SSR_Wait-SSR_Index
0000E6DA 0000                       		dc.w SSR_Continue-SSR_Index
0000E6DC 0000                       		dc.w SSR_Wait-SSR_Index
0000E6DE 0000                       		dc.w SSR_Exit-SSR_Index
0000E6E0 0000                       		dc.w loc_C91A-SSR_Index
0000E6E2                            
0000E6E2 =00000030                  ssr_mainX:	equ $30		; position for card to display on
0000E6E2                            ; ===========================================================================
0000E6E2                            
0000E6E2                            SSR_ChkPLC:	; Routine 0
0000E6E2 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E6E6 6700                       		beq.s	SSR_Main	; if yes, branch
0000E6E8 4E75                       		rts	
0000E6EA                            ; ===========================================================================
0000E6EA                            
0000E6EA                            SSR_Main:
0000E6EA 2248                       		movea.l	a0,a1
0000E6EC 45F9 0000 0000             		lea	(SSR_Config).l,a2
0000E6F2 7203                       		moveq	#3,d1
0000E6F4 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have 50 or more rings?
0000E6FA 6500                       		bcs.s	SSR_Loop	; if no, branch
0000E6FC 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000E6FE                            
0000E6FE                            	SSR_Loop:
0000E6FE 12BC 0000                  		move.b	#id_SSResult,0(a1)
0000E702 335A 0008                  		move.w	(a2)+,obX(a1)	; load start x-position
0000E706 335A 0030                  		move.w	(a2)+,ssr_mainX(a1) ; load main x-position
0000E70A 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E70E 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E712 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000E716 237C 0000 0000 0004        		move.l	#Map_SSR,obMap(a1)
0000E71E 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E724 137C 0000 0001             		move.b	#0,obRender(a1)
0000E72A 43E9 0040                  		lea	$40(a1),a1
0000E72E 51C9 FFCE                  		dbf	d1,SSR_Loop	; repeat sequence 3 or 4 times
0000E732                            
0000E732 7007                       		moveq	#7,d0
0000E734 1238 FE57                  		move.b	(v_emeralds).w,d1
0000E738 6700                       		beq.s	loc_C842
0000E73A 7000                       		moveq	#0,d0
0000E73C 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000E740 6600                       		bne.s	loc_C842	; if not, branch
0000E742 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000E744 317C 0018 0008             		move.w	#$18,obX(a0)
0000E74A 317C 0118 0030             		move.w	#$118,ssr_mainX(a0) ; change position of text
0000E750                            
0000E750                            loc_C842:
0000E750 1140 001A                  		move.b	d0,obFrame(a0)
0000E754                            
0000E754                            SSR_Move:	; Routine 2
0000E754 7210                       		moveq	#$10,d1		; set horizontal speed
0000E756 3028 0030                  		move.w	ssr_mainX(a0),d0
0000E75A B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E75E 6700                       		beq.s	loc_C86C	; if yes, branch
0000E760 6C00                       		bge.s	SSR_ChgPos
0000E762 4441                       		neg.w	d1
0000E764                            
0000E764                            SSR_ChgPos:
0000E764 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E768                            
0000E768                            loc_C85A:
0000E768 3028 0008                  		move.w	obX(a0),d0
0000E76C 6B00                       		bmi.s	locret_C86A
0000E76E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E772 6400                       		bcc.s	locret_C86A	; if yes, branch
0000E774 6000 0000                  		bra.w	DisplaySprite
0000E778                            ; ===========================================================================
0000E778                            
0000E778                            locret_C86A:
0000E778 4E75                       		rts	
0000E77A                            ; ===========================================================================
0000E77A                            
0000E77A                            loc_C86C:
0000E77A 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000E780 66E6                       		bne.s	loc_C85A
0000E782 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E786 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E78C 11FC 0000 D800             		move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E792                            
0000E792                            SSR_Wait:	; Routine 4, 8, $C, $10
0000E792 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E796 6600                       		bne.s	SSR_Display
0000E798 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E79C                            
0000E79C                            SSR_Display:
0000E79C 6000 0000                  		bra.w	DisplaySprite
0000E7A0                            ; ===========================================================================
0000E7A0                            
0000E7A0                            SSR_RingBonus:	; Routine 6
0000E7A0 6100 0000                  		bsr.w	DisplaySprite
0000E7A4 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set ring bonus update flag
0000E7AA 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E7AE 6700                       		beq.s	loc_C8C4	; if yes, branch
0000E7B0 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E7B6 700A                       		moveq	#10,d0		; add 10 to score
0000E7B8 4EB9 0000 0000             		jsr	(AddPoints).l
0000E7BE 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E7C2 0200 0003                  		andi.b	#3,d0
0000E7C6 6600                       		bne.s	locret_C8EA
0000E7D2                            ; ===========================================================================
0000E7D2                            
0000E7D2                            loc_C8C4:
0000E7DC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E7E0 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E7E6 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have at least 50 rings?
0000E7EC 6500                       		bcs.s	locret_C8EA	; if not, branch
0000E7EE 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time delay to 1 second
0000E7F4 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto "SSR_Continue" routine
0000E7F8                            
0000E7F8                            locret_C8EA:
0000E7F8 4E75                       		rts	
0000E7FA                            ; ===========================================================================
0000E7FA                            
0000E7FA                            SSR_Exit:	; Routine $A, $12
0000E7FA 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E800 6000 0000                  		bra.w	DisplaySprite
0000E804                            ; ===========================================================================
0000E804                            
0000E804                            SSR_Continue:	; Routine $E
0000E804 11FC 0004 D6DA             		move.b	#4,(v_objspace+$6C0+obFrame).w
0000E80A 11FC 0014 D6E4             		move.b	#$14,(v_objspace+$6C0+obRoutine).w
0000E81A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E81E 317C 0168 001E             		move.w	#360,obTimeFrame(a0) ; set time delay to 6 seconds
0000E824 6000 0000                  		bra.w	DisplaySprite
0000E828                            ; ===========================================================================
0000E828                            
0000E828                            loc_C91A:	; Routine $14
0000E828 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E82C 0200 000F                  		andi.b	#$F,d0
0000E830 6600                       		bne.s	SSR_Display2
0000E832 0868 0000 001A             		bchg	#0,obFrame(a0)
0000E838                            
0000E838                            SSR_Display2:
0000E838 6000 0000                  		bra.w	DisplaySprite
0000E83C                            ; ===========================================================================
0000E83C 0020 0120 00C4             SSR_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000E842 0200                       		dc.b 2,	0		; rountine number, frame number
0000E844 0320 0120 0118             		dc.w $320, $120, $118
0000E84A 0201                       		dc.b 2,	1
0000E84C 0360 0120 0128             		dc.w $360, $120, $128
0000E852 0202                       		dc.b 2,	2
0000E854 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000E85A 0203                       		dc.b 2,	3
0000E85C 03A0 0120 0138             		dc.w $3A0, $120, $138
0000E862 0206                       		dc.b 2,	6
0000E862 0206                       		dc.b 2,	6
0000E864                            		include	"_incObj\7F SS Result Chaos Emeralds.asm"
0000E864                            ; ---------------------------------------------------------------------------
0000E864                            ; Object 7F - chaos emeralds from the special stage results screen
0000E864                            ; ---------------------------------------------------------------------------
0000E864                            
0000E864                            SSRChaos:
0000E864 7000                       		moveq	#0,d0
0000E866 1028 0024                  		move.b	obRoutine(a0),d0
0000E86A 323B 0000                  		move.w	SSRC_Index(pc,d0.w),d1
0000E86E 4EFB 1000                  		jmp	SSRC_Index(pc,d1.w)
0000E872                            ; ===========================================================================
0000E872 0000                       SSRC_Index:	dc.w SSRC_Main-SSRC_Index
0000E874 0000                       		dc.w SSRC_Flash-SSRC_Index
0000E876                            
0000E876                            ; ---------------------------------------------------------------------------
0000E876                            ; X-axis positions for chaos emeralds
0000E876                            ; ---------------------------------------------------------------------------
0000E876 0110 0128 00F8 0140 00E0+  SSRC_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000E882                            ; ===========================================================================
0000E882                            
0000E882                            SSRC_Main:	; Routine 0
0000E882 2248                       		movea.l	a0,a1
0000E884 45F9 0000 E876             		lea	(SSRC_PosData).l,a2
0000E88A 7400                       		moveq	#0,d2
0000E88C 7200                       		moveq	#0,d1
0000E88E 1238 FE57                  		move.b	(v_emeralds).w,d1 ; d1 is number of emeralds
0000E892 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000E894 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000E898                            
0000E898                            	SSRC_Loop:
0000E898 12BC 0000                  		move.b	#id_SSRChaos,0(a1)
0000E89C 335A 0008                  		move.w	(a2)+,obX(a1)	; set x-position
0000E8A0 337C 00F0 000A             		move.w	#$F0,obScreenY(a1) ; set y-position
0000E8A6 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0000E8AA 1633 2000                  		move.b	(a3,d2.w),d3
0000E8AE 1343 001A                  		move.b	d3,obFrame(a1)
0000E8B2 1343 001C                  		move.b	d3,obAnim(a1)
0000E8B6 5202                       		addq.b	#1,d2
0000E8B8 5429 0024                  		addq.b	#2,obRoutine(a1)
0000E8BC 237C 0000 0000 0004        		move.l	#Map_SSRC,obMap(a1)
0000E8C4 337C 8541 0002             		move.w	#$8541,obGfx(a1)
0000E8CA 137C 0000 0001             		move.b	#0,obRender(a1)
0000E8D0 43E9 0040                  		lea	$40(a1),a1	; next object
0000E8D4 51C9 FFC2                  		dbf	d1,SSRC_Loop	; loop for d1 number of	emeralds
0000E8D8                            
0000E8D8                            SSRC_Flash:	; Routine 2
0000E8D8 1028 001A                  		move.b	obFrame(a0),d0
0000E8DC 117C 0006 001A             		move.b	#6,obFrame(a0)	; load 6th frame (blank)
0000E8E2 0C00 0006                  		cmpi.b	#6,d0
0000E8E6 6600                       		bne.s	SSRC_Display
0000E8E8 1168 001C 001A             		move.b	obAnim(a0),obFrame(a0) ; load visible frame
0000E8EE                            
0000E8EE                            	SSRC_Display:
0000E8EE 6000 0000                  		bra.w	DisplaySprite
0000E8EE 6000 0000                  		bra.w	DisplaySprite
0000E8F2                            
0000E8F2                            ; ---------------------------------------------------------------------------
0000E8F2                            ; Sprite mappings - zone title cards
0000E8F2                            ; ---------------------------------------------------------------------------
0000E8F2 0000                       Map_Card:	dc.w M_Card_GHZ-Map_Card
0000E8F4 0000                       		dc.w M_Card_LZ-Map_Card
0000E8F6 0000                       		dc.w M_Card_MZ-Map_Card
0000E8F8 0000                       		dc.w M_Card_SLZ-Map_Card
0000E8FA 0000                       		dc.w M_Card_SYZ-Map_Card
0000E8FC 0000                       		dc.w M_Card_SBZ-Map_Card
0000E8FE 0000                       		dc.w M_Card_Zone-Map_Card
0000E900 0000                       		dc.w M_Card_Act1-Map_Card
0000E902 0000                       		dc.w M_Card_Act2-Map_Card
0000E904 0000                       		dc.w M_Card_Act3-Map_Card
0000E906 0000                       		dc.w M_Card_Oval-Map_Card
0000E908 0000                       		dc.w M_Card_FZ-Map_Card
0000E90A 09                         M_Card_GHZ:	dc.b 9 			; GREEN HILL
0000E90B F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000E910 F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000E915 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000E91A F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000E91F F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000E924 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000E929 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000E92E F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000E933 F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000E938                            		even
0000E938 0D                         M_Card_LZ:	dc.b $D	;  LABYRINTH | ROBOTIC ABYSS
0000E939 F805 003A 9C               		dc.b $F8, 5, 0, $3A, $9C	; R
0000E93E F805 0032 AC               		dc.b $F8, 5, 0, $32, $AC	; O
0000E943 F805 0004 BC               		dc.b $F8, 5, 0, 4, $BC		; B
0000E948 F805 0032 CC               		dc.b $F8, 5, 0, $32, $CC	; O
0000E94D F805 0042 DC               		dc.b $F8, 5, 0, $42, $DC	; T
0000E952 F801 0020 EC               		dc.b $F8, 1, 0, $20, $EC	; I
0000E957 F805 0008 F4               		dc.b $F8, 5, 0, 8, $F4		; C
0000E95C F800 0056 04               		dc.b $F8, 0, 0, $56, $4	; Space
0000E961 F805 0000 14               		dc.b $F8, 5, 0, 0, $14		; A
0000E966 F805 0004 24               		dc.b $F8, 5, 0, 4, $24		; B
0000E96B F805 004A 34               		dc.b $F8, 5, 0, $4A, $34	; Y
0000E970 F805 003E 44               		dc.b $F8, 5, 0, $3E, $44	; S
0000E975 F805 003E 54               		dc.b $F8, 5, 0, $3E, $54	; S
0000E97A 0B                         M_Card_MZ:	dc.b $B	;  MARBLE | SCRAP RUINS
0000E97B F805 003E A4               		dc.b $F8, 5, 0, $3E, $A4	; S
0000E980 F805 0008 B4               		dc.b $F8, 5, 0, 8, $B4		; C
0000E985 F805 003A C4               		dc.b $F8, 5, 0, $3A, $C4	; R
0000E98A F805 0000 D4               		dc.b $F8, 5, 0, 0, $D4		; A
0000E98F F805 0036 E4               		dc.b $F8, 5, 0, $36, $E4	; P
0000E994 F800 0056 F4               		dc.b $F8, 0, 0, $56, $F4	; Space
0000E999 F805 003A 04               		dc.b $F8, 5, 0, $3A, $4	; R
0000E99E F805 0046 14               		dc.b $F8, 5, 0, $46, $14	; U
0000E9A3 F801 0020 24               		dc.b $F8, 1, 0, $20, $24	; I
0000E9A8 F805 002E 2C               		dc.b $F8, 5, 0, $2E, $2C	; N
0000E9AD F805 003E 3C               		dc.b $F8, 5, 0, $3E, $3C	; S
0000E9B2 09                         M_Card_SLZ:	dc.b 9			; STAR LIGHT
0000E9B3 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000E9B8 F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000E9BD F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000E9C2 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000E9C7 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000E9CC F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000E9D1 F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000E9D6 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000E9DB F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000E9E0                            		even
0000E9E0 0A                         M_Card_SYZ:	dc.b $A	;  SPRING YARD | FUTURE BAY
0000E9E1 F805 0014 AC               		dc.b $F8, 5, 0, $14, $AC	; F
0000E9E6 F805 0046 BC               		dc.b $F8, 5, 0, $46, $BC	; U
0000E9EB F805 0042 CC               		dc.b $F8, 5, 0, $42, $CC	; T
0000E9F0 F805 0046 DC               		dc.b $F8, 5, 0, $46, $DC	; U
0000E9F5 F805 003A EC               		dc.b $F8, 5, 0, $3A, $EC	; R
0000E9FA F805 0010 FC               		dc.b $F8, 5, 0, $10, $FC	; E
0000E9FF F800 0056 0C               		dc.b $F8, 0, 0, $56, $C	; Space
0000EA04 F805 0004 1C               		dc.b $F8, 5, 0, 4, $1C		; B
0000EA09 F805 0000 2C               		dc.b $F8, 5, 0, 0, $2C		; A
0000EA0E F805 004A 3C               		dc.b $F8, 5, 0, $4A, $3C	; Y
0000EA13 0A                         M_Card_SBZ:	dc.b $A			; SCRAP BRAIN
0000EA14 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000EA19 F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000EA1E F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000EA23 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000EA28 F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000EA2D F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000EA32 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000EA37 F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000EA3C F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000EA41 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000EA46                            		even
0000EA46 04                         M_Card_Zone:	dc.b 4			; ZONE
0000EA47 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000EA4C F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000EA51 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000EA56 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EA5C 00                         		even
0000EA5C 02                         M_Card_Act1:	dc.b 2			; ACT 1
0000EA5D 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EA62 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000EA67 02                         M_Card_Act2:	dc.b 2			; ACT 2
0000EA68 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EA6D F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000EA72 02                         M_Card_Act3:	dc.b 2			; ACT 3
0000EA73 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EA78 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000EA7D 0D                         M_Card_Oval:	dc.b $D			; Oval
0000EA7E E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000EA83 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000EA88 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000EA8D F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000EA92 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000EA97 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000EA9C 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000EAA1 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000EAA6 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000EAAB F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000EAB0 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000EAB5 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000EABA 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000EAC0 00                         		even
0000EAC0 05                         M_Card_FZ:	dc.b 5			; FINAL
0000EAC1 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000EAC6 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000EACB F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000EAD0 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000EAD5 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000EADA                            		even
0000EADA                            
0000EADA                            Map_Over:	include	"_maps\Game Over.asm"
0000EADA                            ; ---------------------------------------------------------------------------
0000EADA                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000EADA                            ; ---------------------------------------------------------------------------
0000EADA                            Map_Over_internal:
0000EADA 0000                       		dc.w byte_CBAC-Map_Over_internal
0000EADC 0000                       		dc.w byte_CBB7-Map_Over_internal
0000EADE 0000                       		dc.w byte_CBC2-Map_Over_internal
0000EAE0 0000                       		dc.w byte_CBCD-Map_Over_internal
0000EAE2 02                         byte_CBAC:	dc.b 2			; GAME
0000EAE3 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000EAE8 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000EAED 02                         byte_CBB7:	dc.b 2			; OVER
0000EAEE F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000EAF3 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000EAF8 02                         byte_CBC2:	dc.b 2			; TIME
0000EAF9 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000EAFE F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000EB03 02                         byte_CBCD:	dc.b 2			; OVER
0000EB04 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000EB09 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000EB0E                            		even
0000EB0E                            		even
0000EB0E                            
0000EB0E                            ; ---------------------------------------------------------------------------
0000EB0E                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000EB0E                            ; ---------------------------------------------------------------------------
0000EB0E 0000                       Map_Got:	dc.w M_Got_SonicHas-Map_Got
0000EB10 0000                       		dc.w M_Got_Passed-Map_Got
0000EB12 0000                       		dc.w M_Got_Score-Map_Got
0000EB14 0000                       		dc.w M_Got_TBonus-Map_Got
0000EB16 0000                       		dc.w M_Got_RBonus-Map_Got
0000EB18 FF6F                       		dc.w M_Card_Oval-Map_Got
0000EB1A FF4E                       		dc.w M_Card_Act1-Map_Got
0000EB1C FF59                       		dc.w M_Card_Act2-Map_Got
0000EB1E FF64                       		dc.w M_Card_Act3-Map_Got
0000EB20 08                         M_Got_SonicHas:	dc.b 8			; SONIC HAS
0000EB21 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000EB26 F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000EB2B F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000EB30 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000EB35 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000EB3A F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000EB3F F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000EB44 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000EB49 06                         M_Got_Passed:	dc.b 6			; PASSED
0000EB4A F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000EB4F F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000EB54 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000EB59 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000EB5E F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EB63 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000EB68 06                         M_Got_Score:	dc.b 6			; SCORE
0000EB69 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000EB6E F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EB73 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EB78 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EB7D F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EB82 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EB87 07                         M_Got_TBonus:	dc.b 7			; TIME BONUS
0000EB88 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000EB8D F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EB92 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EB97 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EB9C FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EBA1 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000EBA6 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EBAB 07                         M_Got_RBonus:	dc.b 7			; RING BONUS
0000EBAC F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EBB1 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EBB6 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EBBB F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EBC0 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EBC5 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EBCA F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EBD0 00                         		even
0000EBD0                            ; ---------------------------------------------------------------------------
0000EBD0                            ; Sprite mappings - special stage results screen
0000EBD0                            ; ---------------------------------------------------------------------------
0000EBD0 0000                       Map_SSR:	dc.w M_SSR_Chaos-Map_SSR
0000EBD2 0000                       		dc.w M_SSR_Score-Map_SSR
0000EBD4 0000                       		dc.w byte_CD0D-Map_SSR
0000EBD6 FEAD                       		dc.w M_Card_Oval-Map_SSR
0000EBD8 0000                       		dc.w byte_CD31-Map_SSR
0000EBDA 0000                       		dc.w byte_CD46-Map_SSR
0000EBDC 0000                       		dc.w byte_CD5B-Map_SSR
0000EBDE 0000                       		dc.w byte_CD6B-Map_SSR
0000EBE0 0000                       		dc.w byte_CDA8-Map_SSR
0000EBE2 0D                         M_SSR_Chaos:	dc.b $D			; "CHAOS EMERALDS"
0000EBE3 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000EBE8 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000EBED F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000EBF2 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000EBF7 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000EBFC F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000EC01 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000EC06 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EC0B F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000EC10 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000EC15 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000EC1A F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000EC1F F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000EC24 06                         M_SSR_Score:	dc.b 6			; "SCORE"
0000EC25 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000EC2A F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EC2F F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EC34 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EC39 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EC3E FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EC43 07                         byte_CD0D:	dc.b 7
0000EC44 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EC49 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EC4E F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EC53 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EC58 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EC5D F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EC62 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EC67 04                         byte_CD31:	dc.b 4
0000EC68 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EC6D F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EC72 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EC77 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000EC7C 04                         byte_CD46:	dc.b 4
0000EC7D F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EC82 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EC87 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EC8C F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000EC91 03                         byte_CD5B:	dc.b 3
0000EC92 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EC97 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EC9C F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000ECA1 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000ECA2 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000ECA7 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000ECAC F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000ECB1 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000ECB6 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000ECBB F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000ECC0 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000ECC5 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000ECCA F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000ECCF F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000ECD4 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000ECD9 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000ECDE 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000ECDF F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000ECE4 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000ECE9 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000ECEE F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000ECF3 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000ECF8 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000ECFD F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000ED02 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000ED07 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000ED0C F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000ED11 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000ED16 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000ED1B F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000ED20 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000ED25 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000ED2A                            		even
0000ED2A                            
0000ED2A                            Map_SSRC:	include	"_maps\SS Result Chaos Emeralds.asm"
0000ED2A                            ; ---------------------------------------------------------------------------
0000ED2A                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000ED2A                            ; ---------------------------------------------------------------------------
0000ED2A                            Map_SSRC_internal:
0000ED2A 0000                       		dc.w byte_CE02-Map_SSRC_internal
0000ED2C 0000                       		dc.w byte_CE08-Map_SSRC_internal
0000ED2E 0000                       		dc.w byte_CE0E-Map_SSRC_internal
0000ED30 0000                       		dc.w byte_CE14-Map_SSRC_internal
0000ED32 0000                       		dc.w byte_CE1A-Map_SSRC_internal
0000ED34 0000                       		dc.w byte_CE20-Map_SSRC_internal
0000ED36 0000                       		dc.w byte_CE26-Map_SSRC_internal
0000ED38 01                         byte_CE02:	dc.b 1
0000ED39 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000ED3E 01                         byte_CE08:	dc.b 1
0000ED3F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000ED44 01                         byte_CE0E:	dc.b 1
0000ED45 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000ED4A 01                         byte_CE14:	dc.b 1
0000ED4B F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000ED50 01                         byte_CE1A:	dc.b 1
0000ED51 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000ED56 01                         byte_CE20:	dc.b 1
0000ED57 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000ED5C 00                         byte_CE26:	dc.b 0			; Blank frame
0000ED5E 00                         		even
0000ED5E 00                         		even
0000ED5E                            
0000ED5E                            		include	"_incObj\36 Spikes.asm"
0000ED5E                            ; ---------------------------------------------------------------------------
0000ED5E                            ; Object 36 - spikes
0000ED5E                            ; ---------------------------------------------------------------------------
0000ED5E                            
0000ED5E                            Spikes:
0000ED5E 7000                       		moveq	#0,d0
0000ED60 1028 0024                  		move.b	obRoutine(a0),d0
0000ED64 323B 0000                  		move.w	Spik_Index(pc,d0.w),d1
0000ED68 4EFB 1000                  		jmp	Spik_Index(pc,d1.w)
0000ED6C                            ; ===========================================================================
0000ED6C 0000                       Spik_Index:	dc.w Spik_Main-Spik_Index
0000ED6E 0000                       		dc.w Spik_Solid-Spik_Index
0000ED70                            
0000ED70 =00000030                  spik_origX:	equ $30		; start X position
0000ED70 =00000032                  spik_origY:	equ $32		; start Y position
0000ED70                            
0000ED70 0014                       Spik_Var:	dc.b 0,	$14		; frame	number,	object width
0000ED72 0110                       		dc.b 1,	$10
0000ED74 0204                       		dc.b 2,	4
0000ED76 031C                       		dc.b 3,	$1C
0000ED78 0440                       		dc.b 4,	$40
0000ED7A 0510                       		dc.b 5,	$10
0000ED7C                            ; ===========================================================================
0000ED7C                            
0000ED7C                            Spik_Main:	; Routine 0
0000ED7C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000ED80 217C 0000 0000 0004        		move.l	#Map_Spike,obMap(a0)
0000ED88 317C 051B 0002             		move.w	#$51B,obGfx(a0)
0000ED8E 0028 0004 0001             		ori.b	#4,obRender(a0)
0000ED94 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000ED9A 1028 0028                  		move.b	obSubtype(a0),d0
0000ED9E 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000EDA4 0240 00F0                  		andi.w	#$F0,d0
0000EDA8 43F9 0000 ED70             		lea	(Spik_Var).l,a1
0000EDAE E648                       		lsr.w	#3,d0
0000EDB0 D2C0                       		adda.w	d0,a1
0000EDB2 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000EDB6 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000EDBA 3168 0008 0030             		move.w	obX(a0),spik_origX(a0)
0000EDC0 3168 000C 0032             		move.w	obY(a0),spik_origY(a0)
0000EDC6                            
0000EDC6                            Spik_Solid:	; Routine 2
0000EDC6 6100 0000                  		bsr.w	Spik_Type0x	; make the object move
0000EDCA 343C 0004                  		move.w	#4,d2
0000EDCE 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is object type $5x ?
0000EDD4 6700                       		beq.s	Spik_SideWays	; if yes, branch
0000EDD6 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is object type $1x ?
0000EDDC 6600                       		bne.s	Spik_Upright	; if not, branch
0000EDDE 343C 0014                  		move.w	#$14,d2
0000EDE2                            
0000EDE2                            ; Spikes types $1x and $5x face	sideways
0000EDE2                            
0000EDE2                            Spik_SideWays:
0000EDE2 323C 001B                  		move.w	#$1B,d1
0000EDE6 3602                       		move.w	d2,d3
0000EDE8 5243                       		addq.w	#1,d3
0000EDEA 3828 0008                  		move.w	obX(a0),d4
0000EDEE 6100 0000                  		bsr.w	SolidObject
0000EDF2 0828 0003 0022             		btst	#3,obStatus(a0)
0000EDF8 6600                       		bne.s	Spik_Display
0000EDFA 0C44 0001                  		cmpi.w	#1,d4
0000EDFE 6700                       		beq.s	Spik_Hurt
0000EE00 6000                       		bra.s	Spik_Display
0000EE02                            ; ===========================================================================
0000EE02                            
0000EE02                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000EE02                            
0000EE02                            Spik_Upright:
0000EE02 7200                       		moveq	#0,d1
0000EE04 1228 0014                  		move.b	obActWid(a0),d1
0000EE08 0641 000B                  		addi.w	#$B,d1
0000EE0C 343C 0010                  		move.w	#$10,d2
0000EE10 363C 0011                  		move.w	#$11,d3
0000EE14 3828 0008                  		move.w	obX(a0),d4
0000EE18 6100 0000                  		bsr.w	SolidObject
0000EE1C 0828 0003 0022             		btst	#3,obStatus(a0)
0000EE22 6600                       		bne.s	Spik_Hurt
0000EE24 4A44                       		tst.w	d4
0000EE26 6A00                       		bpl.s	Spik_Display
0000EE28                            
0000EE28                            Spik_Hurt:
0000EE28 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0000EE2C 6600                       		bne.s	Spik_Display	; if yes, branch
0000EE2E 4A78 D030                  		tst.w	(v_player+$30).w ; +++ is Sonic invulnerable?
0000EE32 6600                       		bne.s	Spik_Display	; +++ if yes, branch
0000EE34 2F08                       		move.l	a0,-(sp)
0000EE36 2448                       		movea.l	a0,a2
0000EE38 41F8 D000                  		lea	(v_player).w,a0
0000EE3C 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000EE42 6400                       		bcc.s	loc_CF20
0000EE44                            		; This fixes the infamous "spike bug"
0000EE44 4A68 0030                  		tst.w	flashtime(a0)	; Is Sonic flashing after being hurt?
0000EE48 6600                       		bne.s	loc_CF20	; If so, skip getting hurt
0000EE4A 4EF9 0000 00E0             		jmp	(loc_E0).l	; This is a copy of the above code that was pushed aside for this
0000EE50                            loc_D5A2:
0000EE50 9680                       		sub.l	d0,d3
0000EE52 2143 000C                  		move.l	d3,obY(a0)
0000EE56 4EB9 0000 0000             		jsr	(HurtSonic).l
0000EE5C                            
0000EE5C                            loc_CF20:
0000EE5C 205F                       		movea.l	(sp)+,a0
0000EE5E                            
0000EE5E                            Spik_Display:
0000EE5E 6100 0000                  		bsr.w	DisplaySprite
0000EE80 4E75                       		rts	
0000EE82                            ; ===========================================================================
0000EE82                            
0000EE82                            Spik_Type0x:
0000EE82 7000                       		moveq	#0,d0
0000EE84 1028 0028                  		move.b	obSubtype(a0),d0
0000EE88 D040                       		add.w	d0,d0
0000EE8A 323B 0000                  		move.w	Spik_TypeIndex(pc,d0.w),d1
0000EE8E 4EFB 1000                  		jmp	Spik_TypeIndex(pc,d1.w)
0000EE92                            ; ===========================================================================
0000EE92 0000                       Spik_TypeIndex:	dc.w Spik_Type00-Spik_TypeIndex
0000EE94 0000                       		dc.w Spik_Type01-Spik_TypeIndex
0000EE96 0000                       		dc.w Spik_Type02-Spik_TypeIndex
0000EE98                            ; ===========================================================================
0000EE98                            
0000EE98                            Spik_Type00:
0000EE98 4E75                       		rts			; don't move the object
0000EE9A                            ; ===========================================================================
0000EE9A                            
0000EE9A                            Spik_Type01:
0000EE9A 6100 0000                  		bsr.w	Spik_Wait
0000EE9E 7000                       		moveq	#0,d0
0000EEA0 1028 0034                  		move.b	$34(a0),d0
0000EEA4 D068 0032                  		add.w	spik_origY(a0),d0
0000EEA8 3140 000C                  		move.w	d0,obY(a0)	; move the object vertically
0000EEAC 4E75                       		rts	
0000EEAE                            ; ===========================================================================
0000EEAE                            
0000EEAE                            Spik_Type02:
0000EEAE 6100 0000                  		bsr.w	Spik_Wait
0000EEB2 7000                       		moveq	#0,d0
0000EEB4 1028 0034                  		move.b	$34(a0),d0
0000EEB8 D068 0030                  		add.w	spik_origX(a0),d0
0000EEBC 3140 0008                  		move.w	d0,obX(a0)	; move the object horizontally
0000EEC0 4E75                       		rts	
0000EEC2                            ; ===========================================================================
0000EEC2                            
0000EEC2                            Spik_Wait:
0000EEC2 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000EEC6 6700                       		beq.s	loc_CFA4	; if yes, branch
0000EEC8 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000EECC 6600                       		bne.s	locret_CFE6
0000EECE 4A28 0001                  		tst.b	obRender(a0)
0000EED2 6A00                       		bpl.s	locret_CFE6
0000EEDE 6000                       		bra.s	locret_CFE6
0000EEE0                            ; ===========================================================================
0000EEE0                            
0000EEE0                            loc_CFA4:
0000EEE0 4A68 0036                  		tst.w	$36(a0)
0000EEE4 6700                       		beq.s	loc_CFC6
0000EEE6 0468 0800 0034             		subi.w	#$800,$34(a0)
0000EEEC 6400                       		bcc.s	locret_CFE6
0000EEEE 317C 0000 0034             		move.w	#0,$34(a0)
0000EEF4 317C 0000 0036             		move.w	#0,$36(a0)
0000EEFA 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000EF00 6000                       		bra.s	locret_CFE6
0000EF02                            ; ===========================================================================
0000EF02                            
0000EF02                            loc_CFC6:
0000EF02 0668 0800 0034             		addi.w	#$800,$34(a0)
0000EF08 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000EF0E 6500                       		bcs.s	locret_CFE6
0000EF10 317C 2000 0034             		move.w	#$2000,$34(a0)
0000EF16 317C 0001 0036             		move.w	#1,$36(a0)
0000EF1C 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000EF22                            
0000EF22                            locret_CFE6:
0000EF22 4E75                       		rts	
0000EF22 4E75                       		rts	
0000EF24                            Map_Spike:	include	"_maps\Spikes.asm"
0000EF24                            ; --------------------------------------------------------------------------------
0000EF24                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000EF24                            ; --------------------------------------------------------------------------------
0000EF24                            
0000EF24                            SME_XgeaQ:	
0000EF24 0000 0000                  		dc.w SME_XgeaQ_C-SME_XgeaQ, SME_XgeaQ_1C-SME_XgeaQ	
0000EF28 0000 0000                  		dc.w SME_XgeaQ_2C-SME_XgeaQ, SME_XgeaQ_32-SME_XgeaQ	
0000EF2C 0000 0000                  		dc.w SME_XgeaQ_42-SME_XgeaQ, SME_XgeaQ_61-SME_XgeaQ	
0000EF30 03                         SME_XgeaQ_C:	dc.b 3	
0000EF31 F003 2004 EC               		dc.b $F0, 3, $20, 4, $EC	
0000EF36 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000EF3B F003 2004 0C               		dc.b $F0, 3, $20, 4, $C	
0000EF40 03                         SME_XgeaQ_1C:	dc.b 3	
0000EF41 EC0C 2000 F0               		dc.b $EC, $C, $20, 0, $F0	
0000EF46 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000EF4B 0C0C 2000 F0               		dc.b $C, $C, $20, 0, $F0	
0000EF50 01                         SME_XgeaQ_2C:	dc.b 1	
0000EF51 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000EF56 03                         SME_XgeaQ_32:	dc.b 3	
0000EF57 F003 2004 E4               		dc.b $F0, 3, $20, 4, $E4	
0000EF5C F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000EF61 F003 2004 14               		dc.b $F0, 3, $20, 4, $14	
0000EF66 06                         SME_XgeaQ_42:	dc.b 6	
0000EF67 F003 2004 C0               		dc.b $F0, 3, $20, 4, $C0	
0000EF6C F003 2004 D8               		dc.b $F0, 3, $20, 4, $D8	
0000EF71 F003 2004 F0               		dc.b $F0, 3, $20, 4, $F0	
0000EF76 F003 2004 08               		dc.b $F0, 3, $20, 4, 8	
0000EF7B F003 2004 20               		dc.b $F0, 3, $20, 4, $20	
0000EF80 F003 2004 38               		dc.b $F0, 3, $20, 4, $38	
0000EF85 01                         SME_XgeaQ_61:	dc.b 1	
0000EF86 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000EF8C 00                         		even
0000EF8C 00                         		even
0000EF8C                            		include	"_incObj\3B Purple Rock.asm"
0000EF8C                            ; ---------------------------------------------------------------------------
0000EF8C                            ; Object 3B - purple rock (GHZ)
0000EF8C                            ; ---------------------------------------------------------------------------
0000EF8C                            
0000EF8C                            PurpleRock:
0000EF8C 7000                       		moveq	#0,d0
0000EF8E 1028 0024                  		move.b	obRoutine(a0),d0
0000EF92 323B 0000                  		move.w	Rock_Index(pc,d0.w),d1
0000EF96 4EFB 1000                  		jmp	Rock_Index(pc,d1.w)
0000EF9A                            ; ===========================================================================
0000EF9A 0000                       Rock_Index:	dc.w Rock_Main-Rock_Index
0000EF9C 0000                       		dc.w Rock_Solid-Rock_Index
0000EF9E                            ; ===========================================================================
0000EF9E                            
0000EF9E                            Rock_Main:	; Routine 0
0000EF9E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EFA2 217C 0000 0000 0004        		move.l	#Map_PRock,obMap(a0)
0000EFAA 317C 63D0 0002             		move.w	#$63D0,obGfx(a0)
0000EFB0 117C 0004 0001             		move.b	#4,obRender(a0)
0000EFB6 117C 0013 0014             		move.b	#$13,obActWid(a0)
0000EFBC 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000EFC2                            
0000EFC2                            Rock_Solid:	; Routine 2
0000EFC2 323C 001B                  		move.w	#$1B,d1
0000EFC6 343C 0010                  		move.w	#$10,d2
0000EFCA 363C 0010                  		move.w	#$10,d3
0000EFCE 3828 0008                  		move.w	obX(a0),d4
0000EFD2 6100 0000                  		bsr.w	SolidObject
0000EFD6 6100 0000                  		bsr.w	DisplaySprite
0000EFF8 4E75                       		rts	
0000EFF8 4E75                       		rts	
0000EFFA                            		include	"_incObj\49 Waterfall Sound.asm"
0000EFFA                            ; ---------------------------------------------------------------------------
0000EFFA                            ; Object 49 - waterfall	sound effect (GHZ)
0000EFFA                            ; ---------------------------------------------------------------------------
0000EFFA                            
0000EFFA                            WaterSound:
0000EFFA 7000                       		moveq	#0,d0
0000EFFC 1028 0024                  		move.b	obRoutine(a0),d0
0000F000 323B 0000                  		move.w	WSnd_Index(pc,d0.w),d1
0000F004 4EFB 1000                  		jmp	WSnd_Index(pc,d1.w)
0000F008                            ; ===========================================================================
0000F008 0000                       WSnd_Index:	dc.w WSnd_Main-WSnd_Index
0000F00A 0000                       		dc.w WSnd_PlaySnd-WSnd_Index
0000F00C                            ; ===========================================================================
0000F00C                            
0000F00C                            WSnd_Main:	; Routine 0
0000F00C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F010 117C 0004 0001             		move.b	#4,obRender(a0)
0000F016                            
0000F016                            WSnd_PlaySnd:	; Routine 2
0000F016 1038 FE0F                  		move.b	(v_vbla_byte).w,d0 ; get low byte of VBlank counter
0000F01A 0200 003F                  		andi.b	#$3F,d0
0000F01E 6600                       		bne.s	WSnd_ChkDel
0000F02A                            
0000F02A                            	WSnd_ChkDel:
0000F048 4E75                       		rts	
0000F048 4E75                       		rts	
0000F04A                            Map_PRock:	include	"_maps\Purple Rock.asm"
0000F04A                            ; ---------------------------------------------------------------------------
0000F04A                            ; Sprite mappings - purple rock	(GHZ)
0000F04A                            ; ---------------------------------------------------------------------------
0000F04A                            Map_PRock_internal:
0000F04A 0000                       		dc.w byte_D110-Map_PRock_internal
0000F04C 02                         byte_D110:	dc.b 2
0000F04D F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F052 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000F058 00                         		even
0000F058 00                         		even
0000F058                            		include	"_incObj\3C Smashable Wall.asm"
0000F058                            ; ---------------------------------------------------------------------------
0000F058                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000F058                            ; ---------------------------------------------------------------------------
0000F058                            
0000F058                            SmashWall:
0000F058 7000                       		moveq	#0,d0
0000F05A 1028 0024                  		move.b	obRoutine(a0),d0
0000F05E 323B 0000                  		move.w	Smash_Index(pc,d0.w),d1
0000F062 4EBB 1000                  		jsr	Smash_Index(pc,d1.w)
0000F066 6000 0000                  		bra.w	RememberState
0000F06A                            ; ===========================================================================
0000F06A 0000                       Smash_Index:	dc.w Smash_Main-Smash_Index
0000F06C 0000                       		dc.w Smash_Solid-Smash_Index
0000F06E 0000                       		dc.w Smash_FragMove-Smash_Index
0000F070                            
0000F070 =00000030                  smash_speed:	equ $30		; Sonic's horizontal speed
0000F070                            ; ===========================================================================
0000F070                            
0000F070                            Smash_Main:	; Routine 0
0000F070 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F074 217C 0000 0000 0004        		move.l	#Map_Smash,obMap(a0)
0000F07C 317C 450F 0002             		move.w	#$450F,obGfx(a0)
0000F082 117C 0004 0001             		move.b	#4,obRender(a0)
0000F088 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000F08E 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F094 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0000F09A                            
0000F09A                            Smash_Solid:	; Routine 2
0000F09A 3178 D010 0030             		move.w	(v_player+obVelX).w,smash_speed(a0) ; load Sonic's horizontal speed
0000F0A0 323C 001B                  		move.w	#$1B,d1
0000F0A4 343C 0020                  		move.w	#$20,d2
0000F0A8 363C 0020                  		move.w	#$20,d3
0000F0AC 3828 0008                  		move.w	obX(a0),d4
0000F0B0 6100 0000                  		bsr.w	SolidObject	
0000F0B4 4A04                       		tst.b	d4
0000F0B6 6E00 0000                  		bgt.w	@chkroll	
0000F0BA 6700 0000                  		beq.w	@donothing								
0000F0BE 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing against the wall?
0000F0C4 6700 0000                  		beq.w	@donothing	; if yes, branch
0000F0C8                            ; ===========================================================================
0000F0C8                            
0000F0C8                            @chkroll:
0000F0C8 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000F0CE 6600                       		bne.s	@donothing	; if not, branch	
0000F0D0 3028 0030                  		move.w	smash_speed(a0),d0
0000F0D4 6A00                       		bpl.s	@chkspeed
0000F0D6 4440                       		neg.w	d0
0000F0D8                            
0000F0D8                            	@chkspeed:
0000F0D8 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000F0DC 6500                       		bcs.s	@donothing	; if not, branch	
0000F0DE                            		
0000F0DE                            	@continue:	
0000F0DE 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000F0E4 3368 0030 0010             		move.w	smash_speed(a0),obVelX(a1)
0000F0EA 49F9 0000 0000             		lea	(Smash_FragSpd1).l,a4 ;	use fragments that move	right
0000F0F0 3028 0008                  		move.w	obX(a0),d0
0000F0F4 B069 0008                  		cmp.w	obX(a1),d0	; is Sonic to the right	of the block?
0000F0F8 6500                       		bcs.s	@smash		; if yes, branch
0000F0FA 49F9 0000 0000             		lea	(Smash_FragSpd2).l,a4 ;	use fragments that move	left
0000F100                            
0000F100                            	@smash:
0000F100 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000F106 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000F10C 7206                       		moveq	#6,d1		; load 7 fragments
0000F10E 343C 0070                  		move.w	#$70,d2
0000F112 6100                       		bsr.s	SmashObject
0000F114                            
0000F114                            @donothing:
0000F114 4E75                       		rts	
0000F116                            
0000F116                            Smash_FragMove:	; Routine 4
0000F116 588F                       		addq.l	#4,sp
0000F118 6100 0000                  		bsr.w	SpeedToPos
0000F11C 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make fragment	fall faster
0000F122 4A28 0001                  		tst.b	obRender(a0)
0000F126 6A00 0000                  		bpl.w	DeleteObject
0000F12A 6000 0000                  		bra.w	DisplaySprite
0000F12E                            
0000F12E                            
0000F12E                            
0000F12E                            		include	"_incObj\sub SmashObject.asm"
0000F12E                            ; ---------------------------------------------------------------------------
0000F12E                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000F12E                            ; ---------------------------------------------------------------------------
0000F12E                            
0000F12E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F12E                            
0000F12E                            
0000F12E                            SmashObject:
0000F12E 7000                       		moveq	#0,d0
0000F130 1028 001A                  		move.b	obFrame(a0),d0
0000F134 D040                       		add.w	d0,d0
0000F136 2668 0004                  		movea.l	obMap(a0),a3
0000F13A D6F3 0000                  		adda.w	(a3,d0.w),a3
0000F13E 524B                       		addq.w	#1,a3
0000F140 08E8 0005 0001             		bset	#5,obRender(a0)
0000F146 1810                       		move.b	0(a0),d4
0000F148 1A28 0001                  		move.b	obRender(a0),d5
0000F14C 2248                       		movea.l	a0,a1
0000F14E 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F154 1284                       		move.b	d4,0(a1)
0000F156 234B 0004                  		move.l	a3,obMap(a1)
0000F15A 1345 0001                  		move.b	d5,obRender(a1)
0000F15E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F164 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F16A 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F170 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F176 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F17C 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F180 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F184 5341                       		subq.w #1,d1
0000F186 43F8 D800                  		lea (v_lvlobjspace).w,a1
0000F18A 303C 005F                  		move.w #$5F,d0
0000F18E                            ; ===========================================================================
0000F18E                            
0000F18E                            Smash_Loop:
0000F18E 4A11                       		tst.b	(a1)
0000F190 6700                       		beq.s	@cont
0000F192 43E9 0040                  		lea		$40(a1),a1
0000F196 51C8 FFF6                  		dbf 	d0,Smash_Loop 
0000F19A 6600                       		bne.s	Smash_PlaySnd
0000F19C                            
0000F19C                            	@cont:
0000F19C 5A4B                       		addq.w #5,a3
0000F19E                            
0000F19E                            Smash_LoadFrag:				; XREF: SmashObject
0000F19E 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F1A4 1284                       		move.b	d4,0(a1)
0000F1A6 234B 0004                  		move.l	a3,obMap(a1)
0000F1AA 1345 0001                  		move.b	d5,obRender(a1)
0000F1AE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F1B4 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F1BA 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F1C0 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F1C6 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F1CC 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F1D0 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F1D4 51C9 FFB8                  		dbf	d1,Smash_Loop
0000F1D8                            
0000F1D8                            Smash_PlaySnd:
0000F1D8 303C 0000                  		move.w	#sfx_WallSmash,d0
0000F1DC 4EF9 0000 12A0             		jmp	(PlaySound_Special).l ; play smashing sound
0000F1E2                            
0000F1E2                            ; End of function SmashObject
0000F1E2                            ; End of function SmashObject
0000F1E2                            
0000F1E2                            ; ===========================================================================
0000F1E2                            ; Smashed block	fragment speeds
0000F1E2                            ;
0000F1E2 0400 FB00                  Smash_FragSpd1:	dc.w $400, -$500	; x-move speed,	y-move speed
0000F1E6 0600 FF00                  		dc.w $600, -$100
0000F1EA 0600 0100                  		dc.w $600, $100
0000F1EE 0400 0500                  		dc.w $400, $500
0000F1F2 0600 FA00                  		dc.w $600, -$600
0000F1F6 0800 FE00                  		dc.w $800, -$200
0000F1FA 0800 0200                  		dc.w $800, $200
0000F1FE 0600 0600                  		dc.w $600, $600
0000F202                            
0000F202 FA00 FA00                  Smash_FragSpd2:	dc.w -$600, -$600
0000F206 F800 FE00                  		dc.w -$800, -$200
0000F20A F800 0200                  		dc.w -$800, $200
0000F20E FA00 0600                  		dc.w -$600, $600
0000F212 FC00 FB00                  		dc.w -$400, -$500
0000F216 FA00 FF00                  		dc.w -$600, -$100
0000F21A FA00 0100                  		dc.w -$600, $100
0000F21E FC00 0500                  		dc.w -$400, $500
0000F222                            
0000F222                            Map_Smash:	include	"_maps\Smashable Walls.asm"
0000F222                            ; ---------------------------------------------------------------------------
0000F222                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000F222                            ; ---------------------------------------------------------------------------
0000F222                            Map_Smash_internal:
0000F222 0000                       		dc.w @left-Map_Smash_internal
0000F224 0000                       		dc.w @middle-Map_Smash_internal
0000F226 0000                       		dc.w @right-Map_Smash_internal
0000F228 08                         @left:		dc.b 8
0000F229 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000F22E F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000F233 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000F238 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000F23D E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F242 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F247 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F24C 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F251 08                         @middle:	dc.b 8
0000F252 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F257 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F25C 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F261 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F266 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F26B F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F270 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F275 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F27A 08                         @right:		dc.b 8
0000F27B E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F280 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F285 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F28A 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F28F E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000F294 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000F299 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000F29E 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000F2A4 00                         		even
0000F2A4 00                         		even
0000F2A4                            
0000F2A4                            ; ---------------------------------------------------------------------------
0000F2A4                            ; Object code execution subroutine
0000F2A4                            ; ---------------------------------------------------------------------------
0000F2A4                            
0000F2A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F2A4                            
0000F2A4                            
0000F2A4                            
0000F2A4                            ExecuteObjects: ; XREF: GM_Title; et al
0000F2A4 41F8 D000                  		lea (v_objspace).w,a0 ; set address for object RAM
0000F2A8 7E7F                       		moveq #$7F,d7
0000F2AA 7000                       		moveq #0,d0
0000F2AC 0C38 0006 D024             		cmpi.b #6,(v_player+obRoutine).w
0000F2B2 6400                       		bcc.s loc_D362
0000F2B4                            
0000F2B4                            loc_D348:
0000F2B4 1010                       		move.b (a0),d0 ; load object number from RAM
0000F2B6 6700                       		beq.s loc_D358
0000F2B8 D040                       		add.w d0,d0
0000F2BA D040                       		add.w d0,d0
0000F2BC 227B 0000                  		movea.l Obj_Index-4(pc,d0.w),a1
0000F2C0 4E91                       		jsr (a1) ; run the object's code
0000F2C2 7000                       		moveq #0,d0
0000F2C4                            
0000F2C4                            loc_D358:
0000F2C4 41E8 0040                  		lea $40(a0),a0 ; next object
0000F2C8 51CF FFEA                  		dbf d7,loc_D348
0000F2CC 4E75                       		rts
0000F2CE                            ; ===========================================================================
0000F2CE                            
0000F2CE                            loc_D362:
0000F2CE 7E1F                       		moveq #$1F,d7
0000F2D0 61E2                       		bsr.s loc_D348
0000F2D2 7E5F                       		moveq #$5F,d7
0000F2D4                            
0000F2D4                            loc_D368:
0000F2D4 7000                       		moveq #0,d0 ; Clear d0 quickly
0000F2D6 1010                       		move.b (a0),d0 ; get the object's ID
0000F2D8 6700                       		beq.s loc_D37C ; if it's obj00, skip it
0000F2DA 4A28 0001                  		tst.b obRender(a0) ; should we render it?
0000F2DE 6A00                       		bpl.s loc_D37C ; if not, skip it
0000F2E0 3028 0018                  		move.w obpriority(a0),d0 ; move object's priority to d0
0000F2E4 0828 0006 0001             		btst #6,obRender(a0) ; is the compound sprites flag set?
0000F2EA 6700                       		beq.s loc_D378 ; if not, branch
0000F2EC 303C 0200                  		move.w #$200,d0 ; move $200 to d0
0000F2F0                            
0000F2F0                            loc_D378:
0000F2F0 6100 0000                  		bsr.w DisplaySprite2
0000F2F4                            		
0000F2F4                            loc_D37C:
0000F2F4 41E8 0040                  		lea $40(a0),a0
0000F2F8 51CF FFDA                  		dbf d7,loc_D368
0000F2FC 4E75                       		rts
0000F2FE                            ; End of function ExecuteObjects
0000F2FE                            
0000F2FE                            ; ===========================================================================
0000F2FE                            ; ---------------------------------------------------------------------------
0000F2FE                            ; Object pointers
0000F2FE                            ; ---------------------------------------------------------------------------
0000F2FE                            Obj_Index:
0000F2FE                            		include	"_inc\Object Pointers.asm"
0000F2FE                            ; ---------------------------------------------------------------------------
0000F2FE                            ; Object pointers
0000F2FE                            ; ---------------------------------------------------------------------------
0000F2FE 0000 0000                  ptr_SonicPlayer:	dc.l SonicPlayer	; $01
0000F302 0000 0000                  ptr_Obj02:			dc.l ObjectFall
0000F306 0000 0000                  ptr_Obj03:			dc.l Obj03
0000F30A 0000 0000                  ptr_GShieldItem:	dc.l GShieldItem
0000F30E 0000 0000                  ptr_Obj05:		dc.l Spindash_dust
0000F312 0000 AFF4                  ptr_Mozzietron:		dc.l Mozzietron
0000F316 0000 0000                  ptr_RShieldItem:	dc.l RShieldItem	
0000F31A 0000 0000                  ptr_Splash:		dc.l Splash		; $08
0000F31E 0000 0000                  ptr_SonicSpecial:	dc.l SonicSpecial
0000F322 0000 0000                  ptr_DrownCount:		dc.l DrownCount
0000F326 0000 0000                  ptr_Pole:		dc.l Pole
0000F32A 0000 0000                  ptr_FlapDoor:		dc.l FlapDoor
0000F32E 0000 0000                  ptr_Signpost:		dc.l Signpost
0000F332 0000 C412                  ptr_TitleSonic:		dc.l TitleSonic
0000F336 0000 C492                  ptr_PSBTM:		dc.l PSBTM
0000F33A 0000 0000                  ptr_Obj10:		dc.l Obj10		; $10
0000F33E 0000 8B04                  ptr_Bridge:		dc.l Bridge
0000F342 0000 0000                  ptr_SpinningLight:	dc.l SpinningLight
0000F346 0000 0000                  ptr_LavaMaker:		dc.l LavaMaker
0000F34A 0000 0000                  ptr_LavaBall:		dc.l LavaBall
0000F34E 0000 912A                  ptr_SwingingPlatform:	dc.l SwingingPlatform
0000F352 0000 0000                  ptr_Harpoon:		dc.l Harpoon
0000F356 0000 9476                  ptr_Helix:		dc.l Helix
0000F35A 0000 9602                  ptr_BasicPlatform:	dc.l BasicPlatform	; $18
0000F35E 0000 0000                  ptr_InvStars:		dc.l InvStarsObj
0000F362 0000 99DE                  ptr_CollapseLedge:	dc.l CollapseLedge
0000F366 0000 0000                  ptr_WaterSurface:	dc.l WaterSurface
0000F36A 0000 9FE6                  ptr_Scenery:		dc.l Scenery
0000F36E 0000 A088                  ptr_MagicSwitch:	dc.l MagicSwitch
0000F372 0000 A370                  ptr_BallHog:		dc.l BallHog
0000F376 0000 AD0A                  ptr_Crabmeat:		dc.l Crabmeat
0000F37A 0000 A43E                  ptr_Cannonball:		dc.l Cannonball		; $20
0000F37E 0000 0000                  ptr_HUD:		dc.l HUD
0000F382 0000 B126                  ptr_BuzzBomber:		dc.l BuzzBomber
0000F386 0000 B278                  ptr_Missile:		dc.l Missile
0000F38A 0000 A510                  ptr_MissileDissolve:	dc.l MissileDissolve
0000F38E 0000 B4D2                  ptr_Rings:		dc.l Rings
0000F392 0000 BD1C                  ptr_Monitor:		dc.l Monitor
0000F396 0000 A580                  ptr_ExplosionItem:	dc.l ExplosionItem
0000F39A 0000 A73E                  ptr_Animals:		dc.l Animals		; $28
0000F39E 0000 AC2C                  ptr_Points:		dc.l Points
0000F3A2 0000 A15E                  ptr_AutoDoor:		dc.l AutoDoor
0000F3A6 0000 CA3C                  ptr_Chopper:		dc.l Chopper
0000F3AA 0000 CAF6                  ptr_Jaws:		dc.l Jaws
0000F3AE 0000 CBC0                  ptr_Burrobot:		dc.l Burrobot
0000F3B2 0000 BF1A                  ptr_PowerUp:		dc.l PowerUp
0000F3B6 0000 CDD4                  ptr_LargeGrass:		dc.l LargeGrass
0000F3BA 0000 D2B6                  ptr_GlassBlock:		dc.l GlassBlock		; $30
0000F3BE 0000 D592                  ptr_ChainStomp:		dc.l ChainStomp
0000F3C2 0000 DC40                  ptr_Button:		dc.l Button
0000F3C6 0000 DDE4                  ptr_PushBlock:		dc.l PushBlock
0000F3CA 0000 E216                  ptr_TitleCard:		dc.l TitleCard
0000F3CE 0000 D0F6                  ptr_GrassFire:		dc.l GrassFire
0000F3D2 0000 ED5E                  ptr_Spikes:		dc.l Spikes
0000F3D6 0000 B72E                  ptr_RingLoss:		dc.l RingLoss
0000F3DA 0000 0000                  ptr_ShieldItem:		dc.l ShieldItem		; $38
0000F3DE 0000 E3C6                  ptr_GameOverCard:	dc.l GameOverCard
0000F3E2 0000 E484                  ptr_GotThroughCard:	dc.l GotThroughCard
0000F3E6 0000 EF8C                  ptr_PurpleRock:		dc.l PurpleRock
0000F3EA 0000 F058                  ptr_SmashWall:		dc.l SmashWall
0000F3EE 0000 0000                  ptr_BossGreenHill:	dc.l BossGreenHill
0000F3F2 0000 0000                  ptr_Prison:		dc.l Prison
0000F3F6 0000 A612                  ptr_ExplosionBomb:	dc.l ExplosionBomb
0000F3FA 0000 0000                  ptr_MotoBug:		dc.l MotoBug		; $40
0000F3FE 0000 0000                  ptr_Springs:		dc.l Springs
0000F402 0000 0000                  ptr_Newtron:		dc.l Newtron
0000F406 0000 0000                  ptr_Roller:		dc.l Roller
0000F40A 0000 0000                  ptr_EdgeWalls:		dc.l EdgeWalls
0000F40E 0000 D8AE                  ptr_SideStomp:		dc.l SideStomp
0000F412 0000 0000                  ptr_MarbleBrick:	dc.l MarbleBrick
0000F416 0000 0000                  ptr_Bumper:		dc.l Bumper
0000F41A 0000 0000                  ptr_BossBall:		dc.l BossBall		; $48
0000F41E 0000 EFFA                  ptr_WaterSound:		dc.l WaterSound
0000F422 0000 0000                  ptr_VanishSonic:	dc.l VanishSonic
0000F426 0000 B9F0                  ptr_GiantRing:		dc.l GiantRing
0000F42A 0000 0000                  ptr_GeyserMaker:	dc.l GeyserMaker
0000F42E 0000 0000                  ptr_LavaGeyser:		dc.l LavaGeyser
0000F432 0000 0000                  ptr_SpShieldItem:	dc.l SpShieldItem
0000F436 0000 0000                  ptr_Obj4F:		dc.l Obj4F
0000F43A 0000 0000                  ptr_Yadrin:		dc.l Yadrin		; $50
0000F43E 0000 0000                  ptr_SmashBlock:		dc.l SmashBlock
0000F442 0000 0000                  ptr_MovingBlock:	dc.l MovingBlock
0000F446 0000 9AEE                  ptr_CollapseFloor:	dc.l CollapseFloor
0000F44A 0000 0000                  ptr_LavaTag:		dc.l LavaTag
0000F44E 0000 0000                  ptr_Basaran:		dc.l Basaran
0000F452 0000 0000                  ptr_FloatingBlock:	dc.l FloatingBlock
0000F456 0000 0000                  ptr_SpikeBall:		dc.l SpikeBall
0000F45A 0000 0000                  ptr_BigSpikeBall:	dc.l BigSpikeBall	; $58
0000F45E 0000 0000                  ptr_Elevator:		dc.l Elevator
0000F462 0000 0000                  ptr_CirclingPlatform:	dc.l CirclingPlatform
0000F466 0000 0000                  ptr_Staircase:		dc.l Staircase
0000F46A 0000 0000                  ptr_Pylon:		dc.l Pylon
0000F46E 0000 0000                  ptr_Fan:		dc.l Fan
0000F472 0000 0000                  ptr_Seesaw:		dc.l Seesaw
0000F476 0000 0000                  ptr_Bomb:		dc.l Bomb
0000F47A 0000 0000                  ptr_Orbinaut:		dc.l Orbinaut		; $60
0000F47E 0000 0000                  ptr_LabyrinthBlock:	dc.l LabyrinthBlock
0000F482 0000 0000                  ptr_Gargoyle:		dc.l Gargoyle
0000F486 0000 0000                  ptr_LabyrinthConvey:	dc.l LabyrinthConvey
0000F48A 0000 0000                  ptr_Bubble:		dc.l Bubble
0000F48E 0000 0000                  ptr_Waterfall:		dc.l Waterfall
0000F492 0000 0000                  ptr_Junction:		dc.l Junction
0000F496 0000 0000                  ptr_RunningDisc:	dc.l RunningDisc
0000F49A 0000 0000                  ptr_Conveyor:		dc.l Conveyor		; $68
0000F49E 0000 0000                  ptr_SpinPlatform:	dc.l SpinPlatform
0000F4A2 0000 0000                  ptr_Saws:		dc.l Saws
0000F4A6 0000 0000                  ptr_ScrapStomp:		dc.l ScrapStomp
0000F4AA 0000 0000                  ptr_VanishPlatform:	dc.l VanishPlatform
0000F4AE 0000 0000                  ptr_Flamethrower:	dc.l Flamethrower
0000F4B2 0000 0000                  ptr_Electro:		dc.l Electro
0000F4B6 0000 0000                  ptr_SpinConvey:		dc.l SpinConvey
0000F4BA 0000 0000                  ptr_Girder:		dc.l Girder		; $70
0000F4BE 0000 0000                  ptr_Invisibarrier:	dc.l Invisibarrier
0000F4C2 0000 0000                  ptr_Teleport:		dc.l Teleport
0000F4C6 0000 0000                  ptr_BossMarble:		dc.l BossMarble
0000F4CA 0000 0000                  ptr_BossFire:		dc.l BossFire
0000F4CE 0000 0000                  ptr_BossSpringYard:	dc.l BossSpringYard
0000F4D2 0000 0000                  ptr_BossBlock:		dc.l BossBlock
0000F4D6 0000 0000                  ptr_BossLabyrinth:	dc.l BossLabyrinth
0000F4DA 0000 0000                  ptr_Caterkiller:	dc.l Caterkiller	; $78
0000F4DE 0000 0000                  ptr_Lamppost:		dc.l Lamppost
0000F4E2 0000 0000                  ptr_BossStarLight:	dc.l BossStarLight
0000F4E6 0000 0000                  ptr_BossSpikeball:	dc.l BossSpikeball
0000F4EA 0000 BACA                  ptr_RingFlash:		dc.l RingFlash
0000F4EE 0000 0000                  ptr_HiddenBonus:	dc.l HiddenBonus
0000F4F2 0000 E6BE                  ptr_SSResult:		dc.l SSResult
0000F4F6 0000 E864                  ptr_SSRChaos:		dc.l SSRChaos
0000F4FA 0000 606E                  ptr_ContScrItem:	dc.l ContScrItem	; $80
0000F4FE 0000 6186                  ptr_ContSonic:		dc.l ContSonic
0000F502 0000 0000                  ptr_ScrapEggman:	dc.l ScrapEggman
0000F506 0000 0000                  ptr_FalseFloor:		dc.l FalseFloor
0000F50A 0000 0000                  ptr_EggmanCylinder:	dc.l EggmanCylinder
0000F50E 0000 0000                  ptr_BossFinal:		dc.l BossFinal
0000F512 0000 0000                  ptr_BossPlasma:		dc.l BossPlasma
0000F516 0000 660C                  ptr_EndSonic:		dc.l EndSonic
0000F51A 0000 6766                  ptr_EndChaos:		dc.l EndChaos		; $88
0000F51E 0000 6840                  ptr_EndSTH:		dc.l EndSTH
0000F522 0000 0000                  ptr_CreditsText:	dc.l CreditsText
0000F526 0000 6ABA                  ptr_EndEggman:		dc.l EndEggman
0000F52A 0000 6B9A                  ptr_TryChaos:		dc.l TryChaos
0000F52E 0000 0000                  ptr_SuperStars:		dc.l SuperStars
0000F532                            
0000F532                            NullObject:
0000F532                            		;jmp	(DeleteObject).l	; It would be safer to have this instruction here, but instead it just falls through to ObjectFall
0000F532                            
0000F532 =00000001                  id_SonicPlayer:		equ ((ptr_SonicPlayer-Obj_Index)/4)+1		; $01
0000F532 =00000002                  id_Obj02:		equ ((ptr_Obj02-Obj_Index)/4)+1
0000F532 =00000003                  id_Obj03:		equ ((ptr_Obj03-Obj_Index)/4)+1
0000F532 =00000004                  id_GShielditem:		equ ((ptr_GShieldItem-Obj_Index)/4)+1
0000F532 =00000005                  id_Obj05:		equ ((ptr_Obj05-Obj_Index)/4)+1
0000F532 =00000006                  id_Mozzietron:		equ ((ptr_Mozzietron-Obj_Index)/4)+1
0000F532 =00000007                  id_RShieldItem:		equ ((ptr_RShieldItem-Obj_Index)/4)+1	
0000F532 =00000008                  id_Splash:		equ ((ptr_Splash-Obj_Index)/4)+1		; $08
0000F532 =00000009                  id_SonicSpecial:	equ ((ptr_SonicSpecial-Obj_Index)/4)+1
0000F532 =0000000A                  id_DrownCount:		equ ((ptr_DrownCount-Obj_Index)/4)+1
0000F532 =0000000B                  id_Pole:		equ ((ptr_Pole-Obj_Index)/4)+1
0000F532 =0000000C                  id_FlapDoor:		equ ((ptr_FlapDoor-Obj_Index)/4)+1
0000F532 =0000000D                  id_Signpost:		equ ((ptr_Signpost-Obj_Index)/4)+1
0000F532 =0000000E                  id_TitleSonic:		equ ((ptr_TitleSonic-Obj_Index)/4)+1
0000F532 =0000000F                  id_PSBTM:		equ ((ptr_PSBTM-Obj_Index)/4)+1
0000F532 =00000010                  id_Obj10:		equ ((ptr_Obj10-Obj_Index)/4)+1			; $10
0000F532 =00000011                  id_Bridge:		equ ((ptr_Bridge-Obj_Index)/4)+1
0000F532 =00000012                  id_SpinningLight:	equ ((ptr_SpinningLight-Obj_Index)/4)+1
0000F532 =00000013                  id_LavaMaker:		equ ((ptr_LavaMaker-Obj_Index)/4)+1
0000F532 =00000014                  id_LavaBall:		equ ((ptr_LavaBall-Obj_Index)/4)+1
0000F532 =00000015                  id_SwingingPlatform:	equ ((ptr_SwingingPlatform-Obj_Index)/4)+1
0000F532 =00000016                  id_Harpoon:		equ ((ptr_Harpoon-Obj_Index)/4)+1
0000F532 =00000017                  id_Helix:		equ ((ptr_Helix-Obj_Index)/4)+1
0000F532 =00000018                  id_BasicPlatform:	equ ((ptr_BasicPlatform-Obj_Index)/4)+1		; $18
0000F532 =00000019                  id_InvStars:		equ ((ptr_InvStars-Obj_Index)/4)+1
0000F532 =0000001A                  id_CollapseLedge:	equ ((ptr_CollapseLedge-Obj_Index)/4)+1
0000F532 =0000001B                  id_WaterSurface:	equ ((ptr_WaterSurface-Obj_Index)/4)+1
0000F532 =0000001C                  id_Scenery:		equ ((ptr_Scenery-Obj_Index)/4)+1
0000F532 =0000001D                  id_MagicSwitch:		equ ((ptr_MagicSwitch-Obj_Index)/4)+1
0000F532 =0000001E                  id_BallHog:		equ ((ptr_BallHog-Obj_Index)/4)+1
0000F532 =0000001F                  id_Crabmeat:		equ ((ptr_Crabmeat-Obj_Index)/4)+1
0000F532 =00000020                  id_Cannonball:		equ ((ptr_Cannonball-Obj_Index)/4)+1		; $20
0000F532 =00000021                  id_HUD:			equ ((ptr_HUD-Obj_Index)/4)+1
0000F532 =00000022                  id_BuzzBomber:		equ ((ptr_BuzzBomber-Obj_Index)/4)+1
0000F532 =00000023                  id_Missile:		equ ((ptr_Missile-Obj_Index)/4)+1
0000F532 =00000024                  id_MissileDissolve:	equ ((ptr_MissileDissolve-Obj_Index)/4)+1
0000F532 =00000025                  id_Rings:		equ ((ptr_Rings-Obj_Index)/4)+1
0000F532 =00000026                  id_Monitor:		equ ((ptr_Monitor-Obj_Index)/4)+1
0000F532 =00000027                  id_ExplosionItem:	equ ((ptr_ExplosionItem-Obj_Index)/4)+1
0000F532 =00000028                  id_Animals:		equ ((ptr_Animals-Obj_Index)/4)+1		; $28
0000F532 =00000029                  id_Points:		equ ((ptr_Points-Obj_Index)/4)+1
0000F532 =0000002A                  id_AutoDoor:		equ ((ptr_AutoDoor-Obj_Index)/4)+1
0000F532 =0000002B                  id_Chopper:		equ ((ptr_Chopper-Obj_Index)/4)+1
0000F532 =0000002C                  id_Jaws:		equ ((ptr_Jaws-Obj_Index)/4)+1
0000F532 =0000002D                  id_Burrobot:		equ ((ptr_Burrobot-Obj_Index)/4)+1
0000F532 =0000002E                  id_PowerUp:		equ ((ptr_PowerUp-Obj_Index)/4)+1
0000F532 =0000002F                  id_LargeGrass:		equ ((ptr_LargeGrass-Obj_Index)/4)+1
0000F532 =00000030                  id_GlassBlock:		equ ((ptr_GlassBlock-Obj_Index)/4)+1		; $30
0000F532 =00000031                  id_ChainStomp:		equ ((ptr_ChainStomp-Obj_Index)/4)+1
0000F532 =00000032                  id_Button:		equ ((ptr_Button-Obj_Index)/4)+1
0000F532 =00000033                  id_PushBlock:		equ ((ptr_PushBlock-Obj_Index)/4)+1
0000F532 =00000034                  id_TitleCard:		equ ((ptr_TitleCard-Obj_Index)/4)+1
0000F532 =00000035                  id_GrassFire:		equ ((ptr_GrassFire-Obj_Index)/4)+1
0000F532 =00000036                  id_Spikes:		equ ((ptr_Spikes-Obj_Index)/4)+1
0000F532 =00000037                  id_RingLoss:		equ ((ptr_RingLoss-Obj_Index)/4)+1
0000F532 =00000038                  id_ShieldItem:		equ ((ptr_ShieldItem-Obj_Index)/4)+1		; $38
0000F532 =00000039                  id_GameOverCard:	equ ((ptr_GameOverCard-Obj_Index)/4)+1
0000F532 =0000003A                  id_GotThroughCard:	equ ((ptr_GotThroughCard-Obj_Index)/4)+1
0000F532 =0000003B                  id_PurpleRock:		equ ((ptr_PurpleRock-Obj_Index)/4)+1
0000F532 =0000003C                  id_SmashWall:		equ ((ptr_SmashWall-Obj_Index)/4)+1
0000F532 =0000003D                  id_BossGreenHill:	equ ((ptr_BossGreenHill-Obj_Index)/4)+1
0000F532 =0000003E                  id_Prison:		equ ((ptr_Prison-Obj_Index)/4)+1
0000F532 =0000003F                  id_ExplosionBomb:	equ ((ptr_ExplosionBomb-Obj_Index)/4)+1
0000F532 =00000040                  id_MotoBug:		equ ((ptr_MotoBug-Obj_Index)/4)+1		; $40
0000F532 =00000041                  id_Springs:		equ ((ptr_Springs-Obj_Index)/4)+1
0000F532 =00000042                  id_Newtron:		equ ((ptr_Newtron-Obj_Index)/4)+1
0000F532 =00000043                  id_Roller:		equ ((ptr_Roller-Obj_Index)/4)+1
0000F532 =00000044                  id_EdgeWalls:		equ ((ptr_EdgeWalls-Obj_Index)/4)+1
0000F532 =00000045                  id_SideStomp:		equ ((ptr_SideStomp-Obj_Index)/4)+1
0000F532 =00000046                  id_MarbleBrick:		equ ((ptr_MarbleBrick-Obj_Index)/4)+1
0000F532 =00000047                  id_Bumper:		equ ((ptr_Bumper-Obj_Index)/4)+1
0000F532 =00000048                  id_BossBall:		equ ((ptr_BossBall-Obj_Index)/4)+1		; $48
0000F532 =00000049                  id_WaterSound:		equ ((ptr_WaterSound-Obj_Index)/4)+1
0000F532 =0000004A                  id_VanishSonic:		equ ((ptr_VanishSonic-Obj_Index)/4)+1
0000F532 =0000004B                  id_GiantRing:		equ ((ptr_GiantRing-Obj_Index)/4)+1
0000F532 =0000004C                  id_GeyserMaker:		equ ((ptr_GeyserMaker-Obj_Index)/4)+1
0000F532 =0000004D                  id_LavaGeyser:		equ ((ptr_LavaGeyser-Obj_Index)/4)+1
0000F532 =0000004E                  id_SpShieldItem:		equ ((ptr_SpShieldItem-Obj_Index)/4)+1
0000F532 =0000004F                  id_Obj4F:		equ ((ptr_Obj4F-Obj_Index)/4)+1
0000F532 =00000050                  id_Yadrin:		equ ((ptr_Yadrin-Obj_Index)/4)+1		; $50
0000F532 =00000051                  id_SmashBlock:		equ ((ptr_SmashBlock-Obj_Index)/4)+1
0000F532 =00000052                  id_MovingBlock:		equ ((ptr_MovingBlock-Obj_Index)/4)+1
0000F532 =00000053                  id_CollapseFloor:	equ ((ptr_CollapseFloor-Obj_Index)/4)+1
0000F532 =00000054                  id_LavaTag:		equ ((ptr_LavaTag-Obj_Index)/4)+1
0000F532 =00000055                  id_Basaran:		equ ((ptr_Basaran-Obj_Index)/4)+1
0000F532 =00000056                  id_FloatingBlock:	equ ((ptr_FloatingBlock-Obj_Index)/4)+1
0000F532 =00000057                  id_SpikeBall:		equ ((ptr_SpikeBall-Obj_Index)/4)+1
0000F532 =00000058                  id_BigSpikeBall:	equ ((ptr_BigSpikeBall-Obj_Index)/4)+1		; $58
0000F532 =00000059                  id_Elevator:		equ ((ptr_Elevator-Obj_Index)/4)+1
0000F532 =0000005A                  id_CirclingPlatform:	equ ((ptr_CirclingPlatform-Obj_Index)/4)+1
0000F532 =0000005B                  id_Staircase:		equ ((ptr_Staircase-Obj_Index)/4)+1
0000F532 =0000005C                  id_Pylon:		equ ((ptr_Pylon-Obj_Index)/4)+1
0000F532 =0000005D                  id_Fan:			equ ((ptr_Fan-Obj_Index)/4)+1
0000F532 =0000005E                  id_Seesaw:		equ ((ptr_Seesaw-Obj_Index)/4)+1
0000F532 =0000005F                  id_Bomb:		equ ((ptr_Bomb-Obj_Index)/4)+1
0000F532 =00000060                  id_Orbinaut:		equ ((ptr_Orbinaut-Obj_Index)/4)+1		; $60
0000F532 =00000061                  id_LabyrinthBlock:	equ ((ptr_LabyrinthBlock-Obj_Index)/4)+1
0000F532 =00000062                  id_Gargoyle:		equ ((ptr_Gargoyle-Obj_Index)/4)+1
0000F532 =00000063                  id_LabyrinthConvey:	equ ((ptr_LabyrinthConvey-Obj_Index)/4)+1
0000F532 =00000064                  id_Bubble:		equ ((ptr_Bubble-Obj_Index)/4)+1
0000F532 =00000065                  id_Waterfall:		equ ((ptr_Waterfall-Obj_Index)/4)+1
0000F532 =00000066                  id_Junction:		equ ((ptr_Junction-Obj_Index)/4)+1
0000F532 =00000067                  id_RunningDisc:		equ ((ptr_RunningDisc-Obj_Index)/4)+1
0000F532 =00000068                  id_Conveyor:		equ ((ptr_Conveyor-Obj_Index)/4)+1		; $68
0000F532 =00000069                  id_SpinPlatform:	equ ((ptr_SpinPlatform-Obj_Index)/4)+1
0000F532 =0000006A                  id_Saws:		equ ((ptr_Saws-Obj_Index)/4)+1
0000F532 =0000006B                  id_ScrapStomp:		equ ((ptr_ScrapStomp-Obj_Index)/4)+1
0000F532 =0000006C                  id_VanishPlatform:	equ ((ptr_VanishPlatform-Obj_Index)/4)+1
0000F532 =0000006D                  id_Flamethrower:	equ ((ptr_Flamethrower-Obj_Index)/4)+1
0000F532 =0000006E                  id_Electro:		equ ((ptr_Electro-Obj_Index)/4)+1
0000F532 =0000006F                  id_SpinConvey:		equ ((ptr_SpinConvey-Obj_Index)/4)+1
0000F532 =00000070                  id_Girder:		equ ((ptr_Girder-Obj_Index)/4)+1		; $70
0000F532 =00000071                  id_Invisibarrier:	equ ((ptr_Invisibarrier-Obj_Index)/4)+1
0000F532 =00000072                  id_Teleport:		equ ((ptr_Teleport-Obj_Index)/4)+1
0000F532 =00000073                  id_BossMarble:		equ ((ptr_BossMarble-Obj_Index)/4)+1
0000F532 =00000074                  id_BossFire:		equ ((ptr_BossFire-Obj_Index)/4)+1
0000F532 =00000075                  id_BossSpringYard:	equ ((ptr_BossSpringYard-Obj_Index)/4)+1
0000F532 =00000076                  id_BossBlock:		equ ((ptr_BossBlock-Obj_Index)/4)+1
0000F532 =00000077                  id_BossLabyrinth:	equ ((ptr_BossLabyrinth-Obj_Index)/4)+1
0000F532 =00000078                  id_Caterkiller:		equ ((ptr_Caterkiller-Obj_Index)/4)+1		; $78
0000F532 =00000079                  id_Lamppost:		equ ((ptr_Lamppost-Obj_Index)/4)+1
0000F532 =0000007A                  id_BossStarLight:	equ ((ptr_BossStarLight-Obj_Index)/4)+1
0000F532 =0000007B                  id_BossSpikeball:	equ ((ptr_BossSpikeball-Obj_Index)/4)+1
0000F532 =0000007C                  id_RingFlash:		equ ((ptr_RingFlash-Obj_Index)/4)+1
0000F532 =0000007D                  id_HiddenBonus:		equ ((ptr_HiddenBonus-Obj_Index)/4)+1
0000F532 =0000007E                  id_SSResult:		equ ((ptr_SSResult-Obj_Index)/4)+1
0000F532 =0000007F                  id_SSRChaos:		equ ((ptr_SSRChaos-Obj_Index)/4)+1
0000F532 =00000080                  id_ContScrItem:		equ ((ptr_ContScrItem-Obj_Index)/4)+1		; $80
0000F532 =00000081                  id_ContSonic:		equ ((ptr_ContSonic-Obj_Index)/4)+1
0000F532 =00000082                  id_ScrapEggman:		equ ((ptr_ScrapEggman-Obj_Index)/4)+1
0000F532 =00000083                  id_FalseFloor:		equ ((ptr_FalseFloor-Obj_Index)/4)+1
0000F532 =00000084                  id_EggmanCylinder:	equ ((ptr_EggmanCylinder-Obj_Index)/4)+1
0000F532 =00000085                  id_BossFinal:		equ ((ptr_BossFinal-Obj_Index)/4)+1
0000F532 =00000086                  id_BossPlasma:		equ ((ptr_BossPlasma-Obj_Index)/4)+1
0000F532 =00000087                  id_EndSonic:		equ ((ptr_EndSonic-Obj_Index)/4)+1
0000F532 =00000088                  id_EndChaos:		equ ((ptr_EndChaos-Obj_Index)/4)+1		; $88
0000F532 =00000089                  id_EndSTH:		equ ((ptr_EndSTH-Obj_Index)/4)+1
0000F532 =0000008A                  id_CreditsText:		equ ((ptr_CreditsText-Obj_Index)/4)+1
0000F532 =0000008B                  id_EndEggman:		equ ((ptr_EndEggman-Obj_Index)/4)+1
0000F532 =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F532 =0000008D                  id_SuperStars:		equ ((ptr_SuperStars-Obj_Index)/4)+1
0000F532 =0000008D                  id_SuperStars:		equ ((ptr_SuperStars-Obj_Index)/4)+1
0000F532                            
0000F532                            		include	"_incObj\sub ObjectFall.asm"
0000F532                            ; ---------------------------------------------------------------------------
0000F532                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000F532                            ; ---------------------------------------------------------------------------
0000F532                            
0000F532                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F532                            
0000F532                            
0000F532                            ObjectFall:
0000F532 0C28 0050 0012             		cmpi.b	#$50,obVelY(a0)
0000F538 6700                       		beq.s	@donothing
0000F53A 3028 0010                  		move.w	obVelX(a0),d0
0000F53E 48C0                       		ext.l	d0
0000F540 E188                       		lsl.l	#8,d0
0000F542 D1A8 0008                  		add.l	d0,obX(a0)
0000F546 0C68 0FC8 0012                     cmp.w   #$FC8,obVelY(a0)   ; check if Sonic's Y speed is lower than this value
0000F54C 6F00                               ble.s   @skipline       ; if yes, branch
0000F54E 317C 0FC8 0012                     move.w  #$FC8,obVelY(a0)    ; alter Sonic's Y speed
0000F554                                @skipline:		
0000F554 3028 0012                  		move.w	obVelY(a0),d0
0000F558 0668 0038 0012             		addi.w	#$38,obVelY(a0)	; increase vertical speed
0000F55E 48C0                       		ext.l	d0
0000F560 E188                       		lsl.l	#8,d0
0000F562 D1A8 000C                  		add.l	d0,obY(a0)
0000F566 4E75                       		rts	
0000F568                            	
0000F568                            	@donothing:
0000F568 4E75                       		rts
0000F56A                            
0000F56A                            ; End of function ObjectFall
0000F56A                            ; End of function ObjectFall
0000F56A                            		include	"_incObj\sub SpeedToPos.asm"
0000F56A                            ; ---------------------------------------------------------------------------
0000F56A                            ; Subroutine translating object	speed to update	object position
0000F56A                            ; ---------------------------------------------------------------------------
0000F56A                            
0000F56A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F56A                            
0000F56A                            
0000F56A                            SpeedToPos:
0000F56A 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0000F570 E188                       		lsl.l	#8,d0
0000F572 D1A8 0008                  		add.l	d0,obX(a0)
0000F576 E18A                       		lsl.l	#8,d2
0000F578 D5A8 000C                  		add.l	d2,obY(a0)
0000F57C 4E75                       		rts
0000F57E                            ; End of function SpeedToPos
0000F57E                            ; End of function SpeedToPos
0000F57E                            		include	"_incObj\sub DisplaySprite.asm"
0000F57E                            ; ---------------------------------------------------------------------------
0000F57E                            ; Subroutine to    display    a sprite/object, when a0 is the    object RAM
0000F57E                            ; ---------------------------------------------------------------------------
0000F57E                            
0000F57E                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F57E                            
0000F57E                            
0000F57E                            DisplaySprite:
0000F57E 43F8 AC00                          lea    (v_spritequeue).w,a1
0000F582 D2E8 0018                          adda.w  obpriority(a0),a1 ; get sprite priority
0000F586 0C51 007E                          cmpi.w    #$7E,(a1)    ; is this part of the queue full?
0000F58A 6400                               bcc.s    DSpr_Full    ; if yes, branch
0000F58C 5451                               addq.w    #2,(a1)        ; increment sprite count
0000F58E D2D1                               adda.w    (a1),a1        ; jump to empty position
0000F590 3288                               move.w    a0,(a1)        ; insert RAM address for object
0000F592                            
0000F592                                DSpr_Full:
0000F592 4E75                               rts    
0000F594                            
0000F594                            ; End of function DisplaySprite
0000F594                            
0000F594                            
0000F594                            ; ---------------------------------------------------------------------------
0000F594                            ; Subroutine to    display    a 2nd sprite/object, when a1 is    the object RAM
0000F594                            ; ---------------------------------------------------------------------------
0000F594                            
0000F594                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F594                            
0000F594                            
0000F594                            DisplaySprite1:
0000F594 45F8 AC00                          lea    (v_spritequeue).w,a2
0000F598 D4E9 0018                          adda.w  obpriority(a1),a2
0000F59C 0C52 007E                          cmpi.w    #$7E,(a2)
0000F5A0 6400                               bcc.s    DSpr1_Full
0000F5A2 5452                               addq.w    #2,(a2)
0000F5A4 D4D2                               adda.w    (a2),a2
0000F5A6 3489                               move.w    a1,(a2)
0000F5A8                            
0000F5A8                                DSpr1_Full:
0000F5A8 4E75                               rts    
0000F5AA                            
0000F5AA                            ; End of function DisplaySprite1
0000F5AA                            
0000F5AA                            ; ---------------------------------------------------------------------------
0000F5AA                            ; Subroutine to display a sprite/object, when a0 is the object RAM
0000F5AA                            ; and d0 is already (priority/2)&$380
0000F5AA                            ; ---------------------------------------------------------------------------
0000F5AA                            
0000F5AA                            ; loc_16530:
0000F5AA                            DisplaySprite2:
0000F5AA 43F8 AC00                      lea    (v_spritequeue).w,a1
0000F5AE D2C0                           adda.w    d0,a1
0000F5B0 0C51 007E                      cmpi.w    #$7E,(a1)
0000F5B4 6400                           bhs.s    return_16542
0000F5B6 5451                           addq.w    #2,(a1)
0000F5B8 D2D1                           adda.w    (a1),a1
0000F5BA 3288                           move.w    a0,(a1)
0000F5BC                            
0000F5BC                            return_16542:
0000F5BC 4E75                           rts
0000F5BC 4E75                           rts
0000F5BE                            		include	"_incObj\sub DeleteObject.asm"
0000F5BE                            ; ---------------------------------------------------------------------------
0000F5BE                            ; Subroutine to	delete an object
0000F5BE                            ; ---------------------------------------------------------------------------
0000F5BE                            
0000F5BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F5BE                            
0000F5BE                            
0000F5BE                            DeleteObject:
0000F5BE 2248                       		movea.l	a0,a1		; move object RAM address to (a1)
0000F5C0                            
0000F5C0                            DeleteChild:				; child objects are already in (a1)
0000F5C0 7200                       		moveq	#0,d1
0000F5C2 700F                       		moveq	#$F,d0
0000F5C4                            
0000F5C4                            	DelObj_Loop:
0000F5C4 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000F5C6 51C8 FFFC                  		dbf	d0,DelObj_Loop	; repeat for length of object RAM
0000F5CA 4E75                       		rts	
0000F5CC                            
0000F5CC                            ; End of function DeleteObject
0000F5CC                            ; End of function DeleteObject
0000F5CC                            
0000F5CC                            ; ===========================================================================
0000F5CC 0000 0000                  BldSpr_ScrPos:	dc.l 0				; blank
0000F5D0 00FF F700                  		dc.l v_screenposx&$FFFFFF	; main screen x-position
0000F5D4 00FF F708                  		dc.l v_bgscreenposx&$FFFFFF	; background x-position	1
0000F5D8 00FF F718                  		dc.l v_bg3screenposx&$FFFFFF	; background x-position	2
0000F5DC                            ; ---------------------------------------------------------------------------
0000F5DC                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000F5DC                            ; ---------------------------------------------------------------------------
0000F5DC                            
0000F5DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F5DC                            BuildSprites:                ; XREF: TitleScreen; et al
0000F5DC 45F8 F800                  		lea	(v_spritetablebuffer).w,a2 ; set address for sprite table
0000F5E0 7A00                       		moveq	#0,d5
0000F5E2 49F8 AC00                  		lea	(v_spritequeue).w,a4
0000F5E6 7E07                       		moveq	#7,d7
0000F5E8                            		
0000F5E8                            loc_D66A:
0000F5E8 4A54                       		tst.w	(a4)
0000F5EA 6700 0000                  		beq.w	loc_D72E
0000F5EE 7C02                       		moveq	#2,d6
0000F5F0                            
0000F5F0                            loc_D672:
0000F5F0 3074 6000                          movea.w    (a4,d6.w),a0
0000F5F4 4A10                               tst.b    (a0)
0000F5F6 6700 0000                          beq.w    loc_D726
0000F5FA 08A8 0007 0001                     bclr    #7,1(a0)
0000F600 1028 0001                          move.b    1(a0),d0
0000F604 1800                               move.b    d0,d4
0000F606 0C10 0001                          cmpi.b    #1,(a0)    ; is this object is Sonic
0000F60A 6700                               beq.s    @skip    ; if it is, branch
0000F60C 0800 0006                          btst    #6,d0    ; is the multi-draw flag set?
0000F610 6600 0000                          bne.w   BuildSprites_MultiDraw    ; if it is, branch
0000F614                               @skip:
0000F614 0240 000C                  		andi.w	#$C,d0
0000F618 6700                       		beq.s	loc_D6DE
0000F61A 227B 00B0                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000F61E 7000                       		moveq	#0,d0
0000F620 1028 0014                  		move.b	width_pixels(a0),d0
0000F624 3628 0008                  		move.w	8(a0),d3
0000F628 9651                       		sub.w	(a1),d3
0000F62A 3203                       		move.w	d3,d1
0000F62C D240                       		add.w	d0,d1
0000F62E 6B00 0000                  		bmi.w	loc_D726
0000F632 3203                       		move.w	d3,d1
0000F634 9240                       		sub.w	d0,d1
0000F636 0C41 0140                  		cmpi.w	#$140,d1
0000F63A 6C00                       		bge.s	loc_D726
0000F63C 0643 0080                  		addi.w	#$80,d3
0000F640 0804 0004                  		btst	#4,d4
0000F644 6700                       		beq.s	loc_D6E8
0000F646 7000                       		moveq	#0,d0
0000F648 1028 0016                  		move.b	$16(a0),d0
0000F64C 3428 000C                  		move.w	$C(a0),d2
0000F650 9469 0004                  		sub.w	4(a1),d2
0000F654 3202                       		move.w	d2,d1
0000F656 D240                       		add.w	d0,d1
0000F658 6B00                       		bmi.s	loc_D726
0000F65A 3202                       		move.w	d2,d1
0000F65C 9240                       		sub.w	d0,d1
0000F65E 0C41 00E0                  		cmpi.w	#$E0,d1
0000F662 6C00                       		bge.s	loc_D726
0000F664 0642 0080                  		addi.w	#$80,d2
0000F668 6000                       		bra.s	loc_D700
0000F66A                            ; ===========================================================================
0000F66A                            
0000F66A                            loc_D6DE:
0000F66A 3428 000A                  		move.w	$A(a0),d2
0000F66E 3628 0008                  		move.w	8(a0),d3
0000F672 6000                       		bra.s	loc_D700
0000F674                            ; ===========================================================================
0000F674                            
0000F674                            loc_D6E8:
0000F674 3428 000C                  		move.w	$C(a0),d2
0000F678 9469 0004                  		sub.w	4(a1),d2
0000F67C 0642 0080                  		addi.w	#$80,d2
0000F680 0C42 0060                  		cmpi.w	#$60,d2
0000F684 6500                       		bcs.s	loc_D726
0000F686 0C42 0180                  		cmpi.w	#$180,d2
0000F68A 6400                       		bcc.s	loc_D726
0000F68C                            
0000F68C                            loc_D700:
0000F68C 2268 0004                  		movea.l	4(a0),a1
0000F690 7200                       		moveq	#0,d1
0000F692 0804 0005                  		btst	#5,d4
0000F696 6600                       		bne.s	loc_D71C
0000F698 1228 001A                  		move.b	$1A(a0),d1
0000F69C D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000F69E D2F1 1000                  		adda.w	(a1,d1.w),a1
0000F6A2 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000F6A4 1219                       		move.b	(a1)+,d1
0000F6A6 5301                       		subq.b	#1,d1
0000F6A8 6B00                       		bmi.s	loc_D720
0000F6AA                            
0000F6AA                            loc_D71C:
0000F6AA 4EB9 0000 0000             		jsr	sub_D750
0000F6B0                            
0000F6B0                            loc_D720:
0000F6B0 08E8 0007 0001             		bset	#7,1(a0)
0000F6B6                            
0000F6B6                            loc_D726:
0000F6B6 5446                       		addq.w	#2,d6
0000F6B8 5554                       		subq.w	#2,(a4)
0000F6BA 6600 FF34                  		bne.w	loc_D672
0000F6BE                            
0000F6BE                            loc_D72E:
0000F6BE 49EC 0080                  		lea	$80(a4),a4
0000F6C2 51CF FF24                  		dbf	d7,loc_D66A
0000F6C6 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000F6CA 0C05 0050                  		cmpi.b	#$50,d5
0000F6CE 6700                       		beq.s	loc_D748
0000F6D0 24BC 0000 0000             		move.l	#0,(a2)
0000F6D6 4E75                       		rts	
0000F6D8                            ; ===========================================================================
0000F6D8                            
0000F6D8                            loc_D748:
0000F6D8 157C 0000 FFFB             		move.b	#0,-5(a2)
0000F6DE 4E75                       		rts	
0000F6E0                            ; End of function BuildSprites
0000F6E0                            
0000F6E0                            BuildSprites_MultiDraw:
0000F6E0 2F0C                       	move.l	a4,-(sp)
0000F6E2 49F8 F700                  	lea	($FFFFF700).w,a4
0000F6E6 3668 0002                  	movea.w	art_tile(a0),a3
0000F6EA 2A68 0004                  	movea.l	mappings(a0),a5
0000F6EE 7000                       	moveq	#0,d0
0000F6F0                            
0000F6F0                            	; check if object is within X bounds
0000F6F0 1028 000E                  	move.b	mainspr_width(a0),d0	; load pixel width
0000F6F4 3628 0008                  	move.w	x_pos(a0),d3
0000F6F8 9654                       	sub.w	(a4),d3
0000F6FA 3203                       	move.w	d3,d1                            
0000F6FC D240                       	add.w	d0,d1                            ; is the object right edge to the left of the screen? 
0000F6FE 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000F702 3203                       	move.w	d3,d1
0000F704 9240                       	sub.w	d0,d1
0000F706 0C41 0140                  	cmpi.w	#320,d1                          ; is the object left edge to the right of the screen?
0000F70A 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000F70E 0643 0080                  	addi.w	#128,d3
0000F712                            
0000F712                            	; check if object is within Y bounds
0000F712 0804 0004                  	btst	#4,d4                            ; is the accurate Y check flag set?
0000F716 6700                       	beq.s	BuildSpritesMulti_ApproxYCheck
0000F718 7000                       	moveq	#0,d0
0000F71A 1028 0014                  	move.b	mainspr_height(a0),d0	         ; load pixel height
0000F71E 3428 000C                  	move.w	y_pos(a0),d2
0000F722 946C 0004                  	sub.w	4(a4),d2
0000F726 3202                       	move.w	d2,d1
0000F728 D240                       	add.w	d0,d1
0000F72A 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj  ; if the object is above the screen
0000F72E 3202                       	move.w	d2,d1
0000F730 9240                       	sub.w	d0,d1
0000F732 0C41 00E0                  	cmpi.w	#224,d1
0000F736 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj  ; if the object is below the screen
0000F73A 0642 0080                  	addi.w	#128,d2
0000F73E 6000                       	bra.s	BuildSpritesMulti_DrawSprite
0000F740                            BuildSpritesMulti_ApproxYCheck:
0000F740 3428 000C                  	move.w	y_pos(a0),d2
0000F744 946C 0004                  	sub.w	4(a4),d2
0000F748 0642 0080                  	addi.w	#128,d2
0000F74C 0242 07FF                  	andi.w	#$7FF,d2
0000F750 0C42 0060                  	cmpi.w	#-32+128,d2
0000F754 6500                       	blo.s	BuildSprites_MultiDraw_NextObj
0000F756 0C42 0180                  	cmpi.w	#32+128+224,d2
0000F75A 6400                       	bhs.s	BuildSprites_MultiDraw_NextObj
0000F75C                            BuildSpritesMulti_DrawSprite:
0000F75C 7200                       	moveq	#0,d1
0000F75E 1228 000B                  	move.b	mainspr_mapframe(a0),d1	         ; get current frame
0000F762 6700                       	beq.s	.noparenttodraw
0000F764 D241                       	add.w	d1,d1
0000F766 224D                       	movea.l	a5,a1                            ; a5 is mappings(a0), copy to a1
0000F768 D2F1 1000                  	adda.w	(a1,d1.w),a1
0000F76C 7200                       	moveq	#0,d1
0000F76E 1219                       	move.b	(a1)+,d1
0000F770 5301                       	subq.b	#1,d1                            ; get number of pieces
0000F772 6B00                       	bmi.s	.noparenttodraw                  ; if there are 0 pieces, branch
0000F774 3F04                       	move.w	d4,-(sp)
0000F776 4EB9 0000 0000             	jsr	ChkDrawSprite	                 ; draw the sprite
0000F77C 381F                       	move.w	(sp)+,d4
0000F77E                            .noparenttodraw:
0000F77E 0028 0080 0001             	ori.b	#$80,render_flags(a0)	         ; set onscreen flag
0000F784 4DE8 0010                  	lea	sub2_x_pos(a0),a6                ; address of first child sprite info
0000F788 7000                       	moveq	#0,d0
0000F78A 1028 000F                  	move.b	mainspr_childsprites(a0),d0	 ; get child sprite count
0000F78E 5340                       	subq.w	#1,d0		                 ; if there are 0, go to next object
0000F790 6500                       	bcs.s	BuildSprites_MultiDraw_NextObj
0000F792                            
0000F792                            @drawchildloop:
0000F792 4840                       	swap	d0
0000F794 361E                       	move.w	(a6)+,d3	                 ; get X pos
0000F796 9654                       	sub.w	(a4),d3                          ; subtract the screen's x position
0000F798 0643 0080                  	addi.w	#128,d3
0000F79C 341E                       	move.w	(a6)+,d2	                 ; get Y pos
0000F79E 946C 0004                  	sub.w	4(a4),d2   ; subtract the screen's y position
0000F7A2 0642 0080                  	addi.w	#128,d2
0000F7A6 0242 07FF                  	andi.w	#$7FF,d2
0000F7AA 524E                       	addq.w	#1,a6
0000F7AC 7200                       	moveq	#0,d1
0000F7AE 121E                       	move.b	(a6)+,d1	                 ; get mapping frame
0000F7B0 D241                       	add.w	d1,d1
0000F7B2 224D                       	movea.l	a5,a1
0000F7B4 D2F1 1000                  	adda.w	(a1,d1.w),a1
0000F7B8 7200                       	moveq	#0,d1
0000F7BA 1219                       	move.b	(a1)+,d1
0000F7BC 5301                       	subq.b	#1,d1                            ; get number of pieces
0000F7BE 6B00                       	bmi.s	@nochildleft                     ; if there are 0 pieces, branch
0000F7C0 3F04                       	move.w	d4,-(sp)
0000F7C2 4EB9 0000 0000             	jsr	ChkDrawSprite
0000F7C8 381F                       	move.w	(sp)+,d4
0000F7CA                            @nochildleft:
0000F7CA 4840                       	swap	d0
0000F7CC 51C8 FFC4                  	dbf	d0,@drawchildloop	         ; repeat for number of child sprites
0000F7D0                            ; loc_16804:
0000F7D0                            BuildSprites_MultiDraw_NextObj:
0000F7D0 285F                       	movea.l	(sp)+,a4
0000F7D2 6000 FEE2                  	bra.w	loc_D726; End of function BuildSprites
0000F7D6                            
0000F7D6                            
0000F7D6                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000F7D6                            
0000F7D6                            ; sub_1680A:
0000F7D6                            ChkDrawSprite:
0000F7D6 0C05 0050                  	cmpi.b	#80,d5		; has the sprite limit been reached?
0000F7DA 6500                       	blo.s	loc_1681C	; if it hasn't, branch
0000F7DC 4E75                       	rts	; otherwise, return
0000F7DE                            
0000F7DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F7DE                            
0000F7DE                            
0000F7DE                            sub_D750:				; XREF: BuildSprites
0000F7DE 3668 0002                  		movea.w	2(a0),a3
0000F7E2                            loc_1681C:
0000F7E2 0804 0000                  		btst	#0,d4
0000F7E6 6600                       		bne.s	loc_D796
0000F7E8 0804 0001                  		btst	#1,d4
0000F7EC 6600 0000                  		bne.w	loc_D7E4
0000F7F0                            ; End of function sub_D750
0000F7F0                            
0000F7F0                            
0000F7F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F7F0                            
0000F7F0                            
0000F7F0                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000F7F0 0C05 0050                  		cmpi.b	#$50,d5
0000F7F4 6700                       		beq.s	locret_D794
0000F7F6                            sub_D762_2:				; XREF: sub_D762; SS_ShowLayout
0000F7F6 1019                       		move.b	(a1)+,d0
0000F7F8 4880                       		ext.w	d0
0000F7FA D042                       		add.w	d2,d0
0000F7FC 34C0                       		move.w	d0,(a2)+
0000F7FE 14D9                       		move.b	(a1)+,(a2)+
0000F800 5205                       		addq.b	#1,d5
0000F802 14C5                       		move.b	d5,(a2)+
0000F804 1019                       		move.b	(a1)+,d0
0000F806 E148                       		lsl.w	#8,d0
0000F808 1019                       		move.b	(a1)+,d0
0000F80A D04B                       		add.w	a3,d0
0000F80C 34C0                       		move.w	d0,(a2)+
0000F80E 1019                       		move.b	(a1)+,d0
0000F810 4880                       		ext.w	d0
0000F812 D043                       		add.w	d3,d0
0000F814 0240 01FF                  		andi.w	#$1FF,d0
0000F818 6600                       		bne.s	loc_D78E
0000F81A 5240                       		addq.w	#1,d0
0000F81C                            
0000F81C                            loc_D78E:
0000F81C 34C0                       		move.w	d0,(a2)+
0000F81E 51C9 FFD0                  		dbf	d1,sub_D762
0000F822                            
0000F822                            locret_D794:
0000F822 4E75                       		rts
0000F824                            ; End of function sub_D762
0000F824                            
0000F824                            ; ===========================================================================
0000F824                            
0000F824                            loc_D796:
0000F824 0804 0001                  		btst	#1,d4
0000F828 6600 0000                  		bne.w	loc_D82A
0000F82C                            
0000F82C                            loc_D79E:
0000F82C 0C05 0050                  		cmpi.b	#$50,d5
0000F830 6700                       		beq.s	locret_D7E2
0000F832 1019                       		move.b	(a1)+,d0
0000F834 4880                       		ext.w	d0
0000F836 D042                       		add.w	d2,d0
0000F838 34C0                       		move.w	d0,(a2)+
0000F83A 1819                       		move.b	(a1)+,d4
0000F83C 14C4                       		move.b	d4,(a2)+
0000F83E 5205                       		addq.b	#1,d5
0000F840 14C5                       		move.b	d5,(a2)+
0000F842 1019                       		move.b	(a1)+,d0
0000F844 E148                       		lsl.w	#8,d0
0000F846 1019                       		move.b	(a1)+,d0
0000F848 D04B                       		add.w	a3,d0
0000F84A 0A40 0800                  		eori.w	#$800,d0
0000F84E 34C0                       		move.w	d0,(a2)+
0000F850 1019                       		move.b	(a1)+,d0
0000F852 4880                       		ext.w	d0
0000F854 4440                       		neg.w	d0
0000F856 D804                       		add.b	d4,d4
0000F858 0244 0018                  		andi.w	#$18,d4
0000F85C 5044                       		addq.w	#8,d4
0000F85E 9044                       		sub.w	d4,d0
0000F860 D043                       		add.w	d3,d0
0000F862 0240 01FF                  		andi.w	#$1FF,d0
0000F866 6600                       		bne.s	loc_D7DC
0000F868 5240                       		addq.w	#1,d0
0000F86A                            
0000F86A                            loc_D7DC:
0000F86A 34C0                       		move.w	d0,(a2)+
0000F86C 51C9 FFBE                  		dbf	d1,loc_D79E
0000F870                            
0000F870                            locret_D7E2:
0000F870 4E75                       		rts
0000F872                            ; ===========================================================================
0000F872                            
0000F872                            loc_D7E4:				; XREF: sub_D750
0000F872 0C05 0050                  		cmpi.b	#$50,d5
0000F876 6700                       		beq.s	locret_D828
0000F878 1019                       		move.b	(a1)+,d0
0000F87A 1811                       		move.b	(a1),d4
0000F87C 4880                       		ext.w	d0
0000F87E 4440                       		neg.w	d0
0000F880 E70C                       		lsl.b	#3,d4
0000F882 0244 0018                  		andi.w	#$18,d4
0000F886 5044                       		addq.w	#8,d4
0000F888 9044                       		sub.w	d4,d0
0000F88A D042                       		add.w	d2,d0
0000F88C 34C0                       		move.w	d0,(a2)+
0000F88E 14D9                       		move.b	(a1)+,(a2)+
0000F890 5205                       		addq.b	#1,d5
0000F892 14C5                       		move.b	d5,(a2)+
0000F894 1019                       		move.b	(a1)+,d0
0000F896 E148                       		lsl.w	#8,d0
0000F898 1019                       		move.b	(a1)+,d0
0000F89A D04B                       		add.w	a3,d0
0000F89C 0A40 1000                  		eori.w	#$1000,d0
0000F8A0 34C0                       		move.w	d0,(a2)+
0000F8A2 1019                       		move.b	(a1)+,d0
0000F8A4 4880                       		ext.w	d0
0000F8A6 D043                       		add.w	d3,d0
0000F8A8 0240 01FF                  		andi.w	#$1FF,d0
0000F8AC 6600                       		bne.s	loc_D822
0000F8AE 5240                       		addq.w	#1,d0
0000F8B0                            
0000F8B0                            loc_D822:
0000F8B0 34C0                       		move.w	d0,(a2)+
0000F8B2 51C9 FFBE                  		dbf	d1,loc_D7E4
0000F8B6                            
0000F8B6                            locret_D828:
0000F8B6 4E75                       		rts
0000F8B8                            ; ===========================================================================
0000F8B8                            
0000F8B8                            loc_D82A:
0000F8B8 0C05 0050                  		cmpi.b	#$50,d5
0000F8BC 6700                       		beq.s	locret_D87C
0000F8BE 1019                       		move.b	(a1)+,d0
0000F8C0 1811                       		move.b	(a1),d4
0000F8C2 4880                       		ext.w	d0
0000F8C4 4440                       		neg.w	d0
0000F8C6 E70C                       		lsl.b	#3,d4
0000F8C8 0244 0018                  		andi.w	#$18,d4
0000F8CC 5044                       		addq.w	#8,d4
0000F8CE 9044                       		sub.w	d4,d0
0000F8D0 D042                       		add.w	d2,d0
0000F8D2 34C0                       		move.w	d0,(a2)+
0000F8D4 1819                       		move.b	(a1)+,d4
0000F8D6 14C4                       		move.b	d4,(a2)+
0000F8D8 5205                       		addq.b	#1,d5
0000F8DA 14C5                       		move.b	d5,(a2)+
0000F8DC 1019                       		move.b	(a1)+,d0
0000F8DE E148                       		lsl.w	#8,d0
0000F8E0 1019                       		move.b	(a1)+,d0
0000F8E2 D04B                       		add.w	a3,d0
0000F8E4 0A40 1800                  		eori.w	#$1800,d0
0000F8E8 34C0                       		move.w	d0,(a2)+
0000F8EA 1019                       		move.b	(a1)+,d0
0000F8EC 4880                       		ext.w	d0
0000F8EE 4440                       		neg.w	d0
0000F8F0 D804                       		add.b	d4,d4
0000F8F2 0244 0018                  		andi.w	#$18,d4
0000F8F6 5044                       		addq.w	#8,d4
0000F8F8 9044                       		sub.w	d4,d0
0000F8FA D043                       		add.w	d3,d0
0000F8FC 0240 01FF                  		andi.w	#$1FF,d0
0000F900 6600                       		bne.s	loc_D876
0000F902 5240                       		addq.w	#1,d0
0000F904                            
0000F904                            loc_D876:
0000F904 34C0                       		move.w	d0,(a2)+
0000F906 51C9 FFB0                  		dbf	d1,loc_D82A
0000F90A                            
0000F90A                            locret_D87C:
0000F90A 4E75                       		rts
0000F90C                            ; End of function BuildSpr_Normal
0000F90C                            
0000F90C                            ; ===========================================================================
0000F90C                            
0000F90C                            		include	"_incObj\sub ChkObjectVisible.asm"
0000F90C                            ; ---------------------------------------------------------------------------
0000F90C                            ; Subroutine to	check if an object is off screen
0000F90C                            
0000F90C                            ; output:
0000F90C                            ;	d0 = flag set if object is off screen
0000F90C                            ; ---------------------------------------------------------------------------
0000F90C                            
0000F90C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F90C                            
0000F90C                            
0000F90C                            ChkObjectVisible:
0000F90C 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000F910 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000F914 6B00                       		bmi.s	@offscreen
0000F916 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000F91A 6C00                       		bge.s	@offscreen	; if not, branch
0000F91C                            
0000F91C 3228 000C                  		move.w	obY(a0),d1	; get object y-position
0000F920 9278 F704                  		sub.w	(v_screenposy).w,d1 ; subtract screen y-position
0000F924 6B00                       		bmi.s	@offscreen
0000F926 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000F92A 6C00                       		bge.s	@offscreen	; if not, branch
0000F92C                            
0000F92C 7000                       		moveq	#0,d0		; set flag to 0
0000F92E 4E75                       		rts	
0000F930                            
0000F930                            	@offscreen:
0000F930 7001                       		moveq	#1,d0		; set flag to 1
0000F932 4E75                       		rts	
0000F934                            ; End of function ChkObjectVisible
0000F934                            
0000F934                            ; ---------------------------------------------------------------------------
0000F934                            ; Subroutine to	check if an object is off screen
0000F934                            ; More precise than above subroutine, taking width into account
0000F934                            
0000F934                            ; output:
0000F934                            ;	d0 = flag set if object is off screen
0000F934                            ; ---------------------------------------------------------------------------
0000F934                            
0000F934                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F934                            
0000F934                            
0000F934                            ChkPartiallyVisible:
0000F934 7200                       		moveq	#0,d1
0000F936 1228 0014                  		move.b	obActWid(a0),d1
0000F93A 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000F93E 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000F942 D041                       		add.w	d1,d0		; add object width
0000F944 6B00                       		bmi.s	@offscreen2
0000F946 D241                       		add.w	d1,d1
0000F948 9041                       		sub.w	d1,d0
0000F94A 0C40 0140                  		cmpi.w	#320,d0
0000F94E 6C00                       		bge.s	@offscreen2
0000F950                            
0000F950 3228 000C                  		move.w	obY(a0),d1
0000F954 9278 F704                  		sub.w	(v_screenposy).w,d1
0000F958 6B00                       		bmi.s	@offscreen2
0000F95A 0C41 00E0                  		cmpi.w	#224,d1
0000F95E 6C00                       		bge.s	@offscreen2
0000F960                            
0000F960 7000                       		moveq	#0,d0
0000F962 4E75                       		rts	
0000F964                            
0000F964                            	@offscreen2:
0000F964 7001                       		moveq	#1,d0
0000F966 4E75                       		rts	
0000F968                            ; End of function ChkPartiallyVisible
0000F968                            ; End of function ChkPartiallyVisible
0000F968                            
0000F968                            ; ---------------------------------------------------------------------------
0000F968                            ; Subroutine to	load a level's objects
0000F968                            ; ---------------------------------------------------------------------------
0000F968                            
0000F968                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F968                            
0000F968                            
0000F968                            ObjPosLoad:
0000F968 7000                       		moveq	#0,d0
0000F96A 1038 F76C                  		move.b	(v_opl_routine).w,d0
0000F96E 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000F972 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000F976                            ; End of function ObjPosLoad
0000F976                            
0000F976                            ; ===========================================================================
0000F976 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000F978 0000                       		dc.w OPL_Next-OPL_Index
0000F97A                            ; ===========================================================================
0000F97A                            
0000F97A                            OPL_Main:
0000F97A 5438 F76C                  		addq.b	#2,(v_opl_routine).w
0000F97E 3038 FE10                  		move.w	(v_zone).w,d0
0000F982 ED08                       		lsl.b	#6,d0
0000F984 E848                       		lsr.w	#4,d0
0000F986 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000F98C 2248                       		movea.l	a0,a1
0000F98E D0F0 0000                  		adda.w	(a0,d0.w),a0
0000F992 21C8 F770                  		move.l	a0,(v_opl_data).w
0000F996 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000F99A D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000F99E 21C9 F778                  		move.l	a1,(v_opl_data+8).w
0000F9A2 21C9 F77C                  		move.l	a1,(v_opl_data+$C).w
0000F9A6 45F8 FC00                  		lea	(v_objstate).w,a2
0000F9AA 34FC 0101                  		move.w	#$101,(a2)+
0000F9AE 303C 005E                  		move.w	#$5E,d0
0000F9B2                            
0000F9B2                            OPL_ClrList:
0000F9B2 429A                       		clr.l	(a2)+
0000F9B4 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000F9B8                            
0000F9B8 45F8 FC00                  		lea	(v_objstate).w,a2
0000F9BC 7400                       		moveq	#0,d2
0000F9BE 3C38 F700                  		move.w	(v_screenposx).w,d6
0000F9C2 0446 0080                  		subi.w	#$80,d6
0000F9C6 6400                       		bhs.s	loc_D93C
0000F9C8 7C00                       		moveq	#0,d6
0000F9CA                            
0000F9CA                            loc_D93C:
0000F9CA 0246 FF80                  		andi.w	#$FF80,d6
0000F9CE 2078 F770                  		movea.l	(v_opl_data).w,a0
0000F9D2                            
0000F9D2                            loc_D944:
0000F9D2 BC50                       		cmp.w	(a0),d6
0000F9D4 6300                       		bls.s	loc_D956
0000F9D6 4A28 0004                  		tst.b	4(a0)
0000F9DA 6A00                       		bpl.s	loc_D952
0000F9DC 1412                       		move.b	(a2),d2
0000F9DE 5212                       		addq.b	#1,(a2)
0000F9E0                            
0000F9E0                            loc_D952:
0000F9E0 5C48                       		addq.w	#6,a0
0000F9E2 60EE                       		bra.s	loc_D944
0000F9E4                            ; ===========================================================================
0000F9E4                            
0000F9E4                            loc_D956:
0000F9E4 21C8 F770                  		move.l	a0,(v_opl_data).w
0000F9E8 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000F9EC 0446 0080                  		subi.w	#$80,d6
0000F9F0 6500                       		blo.s	loc_D976
0000F9F2                            
0000F9F2                            loc_D964:
0000F9F2 BC50                       		cmp.w	(a0),d6
0000F9F4 6300                       		bls.s	loc_D976
0000F9F6 4A28 0004                  		tst.b	4(a0)
0000F9FA 6A00                       		bpl.s	loc_D972
0000F9FC 522A 0001                  		addq.b	#1,1(a2)
0000FA00                            
0000FA00                            loc_D972:
0000FA00 5C48                       		addq.w	#6,a0
0000FA02 60EE                       		bra.s	loc_D964
0000FA04                            ; ===========================================================================
0000FA04                            
0000FA04                            loc_D976:
0000FA04 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FA08 31FC FFFF F76E             		move.w	#-1,(v_opl_screen).w
0000FA0E                            
0000FA0E                            OPL_Next:
0000FA0E 45F8 FC00                  		lea	(v_objstate).w,a2
0000FA12 7400                       		moveq	#0,d2
0000FA14 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FA18 0246 FF80                  		andi.w	#$FF80,d6
0000FA1C BC78 F76E                  		cmp.w	(v_opl_screen).w,d6
0000FA20 6700 0000                  		beq.w	locret_DA3A
0000FA24 6C00                       		bge.s	loc_D9F6
0000FA26 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FA2A 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FA2E 0446 0080                  		subi.w	#$80,d6
0000FA32 6500                       		blo.s	loc_D9D2
0000FA34                            
0000FA34                            loc_D9A6:
0000FA34 BC68 FFFA                  		cmp.w	-6(a0),d6
0000FA38 6C00                       		bge.s	loc_D9D2
0000FA3A 5D48                       		subq.w	#6,a0
0000FA3C 4A28 0004                  		tst.b	4(a0)
0000FA40 6A00                       		bpl.s	loc_D9BC
0000FA42 532A 0001                  		subq.b	#1,1(a2)
0000FA46 142A 0001                  		move.b	1(a2),d2
0000FA4A                            
0000FA4A                            loc_D9BC:
0000FA4A 6100 0000                  		bsr.w	loc_DA3C
0000FA4E 6600                       		bne.s	loc_D9C6
0000FA50 5D48                       		subq.w	#6,a0
0000FA52 60E0                       		bra.s	loc_D9A6
0000FA54                            ; ===========================================================================
0000FA54                            
0000FA54                            loc_D9C6:
0000FA54 4A28 0004                  		tst.b	4(a0)
0000FA58 6A00                       		bpl.s	loc_D9D0
0000FA5A 522A 0001                  		addq.b	#1,1(a2)
0000FA5E                            
0000FA5E                            loc_D9D0:
0000FA5E 5C48                       		addq.w	#6,a0
0000FA60                            
0000FA60                            loc_D9D2:
0000FA60 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FA64 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FA68 0646 0300                  		addi.w	#$300,d6
0000FA6C                            
0000FA6C                            loc_D9DE:
0000FA6C BC68 FFFA                  		cmp.w	-6(a0),d6
0000FA70 6E00                       		bgt.s	loc_D9F0
0000FA72 4A28 FFFE                  		tst.b	-2(a0)
0000FA76 6A00                       		bpl.s	loc_D9EC
0000FA78 5312                       		subq.b	#1,(a2)
0000FA7A                            
0000FA7A                            loc_D9EC:
0000FA7A 5D48                       		subq.w	#6,a0
0000FA7C 60EE                       		bra.s	loc_D9DE
0000FA7E                            ; ===========================================================================
0000FA7E                            
0000FA7E                            loc_D9F0:
0000FA7E 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FA82 4E75                       		rts	
0000FA84                            ; ===========================================================================
0000FA84                            
0000FA84                            loc_D9F6:
0000FA84 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FA88 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FA8C 0646 0280                  		addi.w	#$280,d6
0000FA90                            
0000FA90                            loc_DA02:
0000FA90 BC50                       		cmp.w	(a0),d6
0000FA92 6300                       		bls.s	loc_DA16
0000FA94 4A28 0004                  		tst.b	4(a0)
0000FA98 6A00                       		bpl.s	loc_DA10
0000FA9A 1412                       		move.b	(a2),d2
0000FA9C 5212                       		addq.b	#1,(a2)
0000FA9E                            
0000FA9E                            loc_DA10:
0000FA9E 6100 0000                  		bsr.w	loc_DA3C
0000FAA2 67EC                       		beq.s	loc_DA02
0000FAA4                            
0000FAA4                            loc_DA16:
0000FAA4 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FAA8 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FAAC 0446 0300                  		subi.w	#$300,d6
0000FAB0 6500                       		blo.s	loc_DA36
0000FAB2                            
0000FAB2                            loc_DA24:
0000FAB2 BC50                       		cmp.w	(a0),d6
0000FAB4 6300                       		bls.s	loc_DA36
0000FAB6 4A28 0004                  		tst.b	4(a0)
0000FABA 6A00                       		bpl.s	loc_DA32
0000FABC 522A 0001                  		addq.b	#1,1(a2)
0000FAC0                            
0000FAC0                            loc_DA32:
0000FAC0 5C48                       		addq.w	#6,a0
0000FAC2 60EE                       		bra.s	loc_DA24
0000FAC4                            ; ===========================================================================
0000FAC4                            
0000FAC4                            loc_DA36:
0000FAC4 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FAC8                            
0000FAC8                            locret_DA3A:
0000FAC8 4E75                       		rts	
0000FACA                            ; ===========================================================================
0000FACA                            
0000FACA                            loc_DA3C:
0000FACA 4A28 0004                  		tst.b	4(a0)
0000FACE 6A00                       		bpl.s	OPL_MakeItem
0000FAD0 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000FAD6 6700                       		beq.s	OPL_MakeItem
0000FAD8 5C48                       		addq.w	#6,a0
0000FADA 7000                       		moveq	#0,d0
0000FADC 4E75                       		rts	
0000FADE                            ; ===========================================================================
0000FADE                            
0000FADE                            OPL_MakeItem:
0000FADE 6100 0000                  		bsr.w	FindFreeObj
0000FAE2 6600                       		bne.s	locret_DA8A
0000FAE4 3358 0008                  		move.w	(a0)+,obX(a1)
0000FAE8 3018                       		move.w	(a0)+,d0
0000FAEA 3200                       		move.w	d0,d1
0000FAEC 0240 0FFF                  		andi.w	#$FFF,d0
0000FAF0 3340 000C                  		move.w	d0,obY(a1)
0000FAF4 E559                       		rol.w	#2,d1
0000FAF6 0201 0003                  		andi.b	#3,d1
0000FAFA 1341 0001                  		move.b	d1,obRender(a1)
0000FAFE 1341 0022                  		move.b	d1,obStatus(a1)
0000FB02 1018                       		move.b	(a0)+,d0
0000FB04 6A00                       		bpl.s	loc_DA80
0000FB06 0200 007F                  		andi.b	#$7F,d0
0000FB0A 1342 0023                  		move.b	d2,obRespawnNo(a1)
0000FB0E                            
0000FB0E                            loc_DA80:
0000FB0E 1280                       		move.b	d0,0(a1)
0000FB10 1358 0028                  		move.b	(a0)+,obSubtype(a1)
0000FB14 7000                       		moveq	#0,d0
0000FB16                            
0000FB16                            locret_DA8A:
0000FB16 4E75                       		rts	
0000FB18                            
0000FB18                            		include	"_incObj\sub FindFreeObj.asm"
0000FB18                            ; ---------------------------------------------------------------------------
0000FB18                            ; Subroutine to find a free object space
0000FB18                            
0000FB18                            ; output:
0000FB18                            ;	a1 = free position in object RAM
0000FB18                            ; ---------------------------------------------------------------------------
0000FB18                            
0000FB18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FB18                            
0000FB18                            
0000FB18                            FindFreeObj:
0000FB18 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; start address for object RAM
0000FB1C 303C 005F                  		move.w	#$5F,d0
0000FB20                            
0000FB20                            	FFree_Loop:
0000FB20 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000FB22 6700                       		beq.s	FFree_Found	; if yes, branch
0000FB24 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000FB28 51C8 FFF6                  		dbf	d0,FFree_Loop	; repeat $5F times
0000FB2C                            
0000FB2C                            	FFree_Found:
0000FB2C 4E75                       		rts	
0000FB2E                            
0000FB2E                            ; End of function FindFreeObj
0000FB2E                            
0000FB2E                            
0000FB2E                            ; ---------------------------------------------------------------------------
0000FB2E                            ; Subroutine to find a free object space AFTER the current one
0000FB2E                            
0000FB2E                            ; output:
0000FB2E                            ;	a1 = free position in object RAM
0000FB2E                            ; ---------------------------------------------------------------------------
0000FB2E                            
0000FB2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FB2E                            
0000FB2E                            
0000FB2E                            FindNextFreeObj:
0000FB2E 2248                       		movea.l	a0,a1
0000FB30 303C F000                  		move.w	#$F000,d0
0000FB34 9048                       		sub.w	a0,d0
0000FB36 EC48                       		lsr.w	#6,d0
0000FB38 5340                       		subq.w	#1,d0
0000FB3A 6500                       		bcs.s	NFree_Found
0000FB3C                            
0000FB3C                            	NFree_Loop:
0000FB3C 4A11                       		tst.b	(a1)
0000FB3E 6700                       		beq.s	NFree_Found
0000FB40 43E9 0040                  		lea	$40(a1),a1
0000FB44 51C8 FFF6                  		dbf	d0,NFree_Loop
0000FB48                            
0000FB48                            	NFree_Found:
0000FB48 4E75                       		rts	
0000FB4A                            
0000FB4A                            ; End of function FindNextFreeObj
0000FB4A                            ; End of function FindNextFreeObj
0000FB4A                            		include	"_incObj\41 Springs.asm"
0000FB4A                            ; ---------------------------------------------------------------------------
0000FB4A                            ; Object 41 - springs
0000FB4A                            ; ---------------------------------------------------------------------------
0000FB4A                            
0000FB4A                            Springs:
0000FB4A 7000                       		moveq	#0,d0
0000FB4C 1028 0024                  		move.b	obRoutine(a0),d0
0000FB50 323B 0000                  		move.w	Spring_Index(pc,d0.w),d1
0000FB54 4EBB 1000                  		jsr	Spring_Index(pc,d1.w)
0000FB58 6100 FA24                  		bsr.w	DisplaySprite
0000FB7A 4E75                       		rts	
0000FB7C                            ; ===========================================================================
0000FB7C 0000                       Spring_Index:	dc.w Spring_Main-Spring_Index
0000FB7E 0000                       		dc.w Spring_Up-Spring_Index
0000FB80 0000                       		dc.w Spring_AniUp-Spring_Index
0000FB82 0000                       		dc.w Spring_ResetUp-Spring_Index
0000FB84 0000                       		dc.w Spring_LR-Spring_Index
0000FB86 0000                       		dc.w Spring_AniLR-Spring_Index
0000FB88 0000                       		dc.w Spring_ResetLR-Spring_Index
0000FB8A 0000                       		dc.w Spring_Dwn-Spring_Index
0000FB8C 0000                       		dc.w Spring_AniDwn-Spring_Index
0000FB8E 0000                       		dc.w Spring_ResetDwn-Spring_Index
0000FB90                            
0000FB90 =00000030                  spring_pow:	equ $30			; power of current spring
0000FB90                            
0000FB90 F000                       Spring_Powers:	dc.w -$1000		; power	of red spring
0000FB92 F600                       		dc.w -$A00		; power	of yellow spring
0000FB94                            ; ===========================================================================
0000FB94                            
0000FB94                            Spring_Main:	; Routine 0
0000FB94 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FB98 217C 0000 0000 0004        		move.l	#Map_Spring,obMap(a0)
0000FBA0 317C 0523 0002             		move.w	#$523,obGfx(a0)
0000FBA6 0028 0004 0001             		ori.b	#4,obRender(a0)
0000FBAC 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000FBB2 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FBB8 1028 0028                  		move.b	obSubtype(a0),d0
0000FBBC 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000FBC0 6700                       		beq.s	Spring_NotLR	; if not, branch
0000FBC2                            
0000FBC2 117C 0008 0024             		move.b	#8,obRoutine(a0) ; use "Spring_LR" routine
0000FBC8 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FBCE 117C 0003 001A             		move.b	#3,obFrame(a0)
0000FBD4 317C 0533 0002             		move.w	#$533,obGfx(a0)
0000FBDA 117C 0008 0014             		move.b	#8,obActWid(a0)
0000FBE0                            
0000FBE0                            	Spring_NotLR:
0000FBE0 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000FBE4 6700                       		beq.s	Spring_NotDwn	; if not, branch
0000FBE6                            
0000FBE6 117C 000E 0024             		move.b	#$E,obRoutine(a0) ; use "Spring_Dwn" routine
0000FBEC 08E8 0001 0022             		bset	#1,obStatus(a0)
0000FBF2                            
0000FBF2                            	Spring_NotDwn:
0000FBF2 0800 0001                  		btst	#1,d0
0000FBF6 6700                       		beq.s	loc_DB72
0000FBF8 08E8 0005 0002             		bset	#5,obGfx(a0)
0000FBFE                            
0000FBFE                            loc_DB72:
0000FBFE 0240 000F                  		andi.w	#$F,d0
0000FC02 317B 008C 0030             		move.w	Spring_Powers(pc,d0.w),spring_pow(a0)
0000FC08 4E75                       		rts	
0000FC0A                            ; ===========================================================================
0000FC0A                            
0000FC0A                            Spring_Up:	; Routine 2
0000FC0A 323C 001B                  		move.w	#$1B,d1
0000FC0E 343C 0008                  		move.w	#8,d2
0000FC12 363C 0010                  		move.w	#$10,d3
0000FC16 3828 0008                  		move.w	obX(a0),d4
0000FC1A 6100 0000                  		bsr.w	SolidObject
0000FC1E 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic on top of the spring?
0000FC22 6600                       		bne.s	Spring_BounceUp	; if yes, branch
0000FC24 4E75                       		rts	
0000FC26                            ; ===========================================================================
0000FC26                            
0000FC26                            Spring_BounceUp:
0000FC26 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FC2A 5069 000C                  		addq.w	#8,obY(a1)
0000FC2E 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1) ; move Sonic upwards
0000FC34 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FC3A 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FC40 137C 0000 001C             		move.b	#id_Spring,obAnim(a1) ; use "bouncing" animation
0000FC46 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FC4C 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FC52 4228 0025                  		clr.b	obSolid(a0)
0000FC60                            
0000FC60                            Spring_AniUp:	; Routine 4
0000FC60 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FC66 6000 C9CC                  		bra.w	AnimateSprite
0000FC6A                            ; ===========================================================================
0000FC6A                            
0000FC6A                            Spring_ResetUp:	; Routine 6
0000FC6A 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FC70 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Up" routine
0000FC74 4E75                       		rts	
0000FC76                            ; ===========================================================================
0000FC76                            
0000FC76                            Spring_LR:	; Routine 8
0000FC76 323C 0013                  		move.w	#$13,d1
0000FC7A 343C 000E                  		move.w	#$E,d2
0000FC7E 363C 000F                  		move.w	#$F,d3
0000FC82 3828 0008                  		move.w	obX(a0),d4
0000FC86 6100 0000                  		bsr.w	SolidObject
0000FC8A 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FC90 6600                       		bne.s	loc_DC0C
0000FC92 117C 0008 0024             		move.b	#8,obRoutine(a0)
0000FC98                            
0000FC98                            loc_DC0C:
0000FC98 0828 0005 0022             		btst	#5,obStatus(a0)
0000FC9E 6600                       		bne.s	Spring_BounceLR
0000FCA0 4E75                       		rts	
0000FCA2                            ; ===========================================================================
0000FCA2                            
0000FCA2                            Spring_BounceLR:
0000FCA2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FCA6 3368 0030 0010             		move.w	spring_pow(a0),obVelX(a1) ; move Sonic to the left
0000FCAC 5069 0008                  		addq.w	#8,obX(a1)
0000FCB0 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
0000FCB6 6600                       		bne.s	Spring_Flipped	; if yes, branch
0000FCB8 0469 0010 0008             		subi.w	#$10,obX(a1)
0000FCBE 4469 0010                  		neg.w	obVelX(a1)	; move Sonic to	the right
0000FCC2                            
0000FCC2                            	Spring_Flipped:
0000FCC2 337C 000F 003E             		move.w	#$F,$3E(a1)
0000FCC8 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000FCCE 0869 0000 0022             		bchg	#0,obStatus(a1)
0000FCD4 0829 0002 0022             		btst	#2,obStatus(a1)
0000FCDA 6600                       		bne.s	loc_DC56
0000FCDC 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
0000FCE2                            
0000FCE2                            loc_DC56:
0000FCE2 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000FCE8 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000FCF8                            
0000FCF8                            Spring_AniLR:	; Routine $A
0000FCF8 4278 C904                  		clr.w ($FFFFC904).w	; clear screen delay counter
0000FCFC 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FD02 6000 C930                  		bra.w	AnimateSprite
0000FD06                            ; ===========================================================================
0000FD06                            
0000FD06                            Spring_ResetLR:	; Routine $C
0000FD06 117C 0002 001D             		move.b	#2,obNextAni(a0) ; reset animation
0000FD0C 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_LR" routine
0000FD10 4E75                       		rts	
0000FD12                            ; ===========================================================================
0000FD12                            
0000FD12                            Spring_Dwn:	; Routine $E
0000FD12 323C 001B                  		move.w	#$1B,d1
0000FD16 343C 0008                  		move.w	#8,d2
0000FD1A 363C 0010                  		move.w	#$10,d3
0000FD1E 3828 0008                  		move.w	obX(a0),d4
0000FD22 6100 0000                  		bsr.w	SolidObject
0000FD26 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FD2C 6600                       		bne.s	loc_DCA4
0000FD2E 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000FD34                            
0000FD34                            loc_DCA4:
0000FD34 4A28 0025                  		tst.b	obSolid(a0)
0000FD38 6600                       		bne.s	locret_DCAE
0000FD3A 4A44                       		tst.w	d4
0000FD3C 6B00                       		bmi.s	Spring_BounceDwn
0000FD3E                            
0000FD3E                            locret_DCAE:
0000FD3E 4E75                       		rts	
0000FD40                            ; ===========================================================================
0000FD40                            
0000FD40                            Spring_BounceDwn:
0000FD40 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FD44 5169 000C                  		subq.w	#8,obY(a1)
0000FD48 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1)
0000FD4E 4469 0012                  		neg.w	obVelY(a1)	; move Sonic downwards
0000FD52 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FD58 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FD5E 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FD64 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FD6A 4228 0025                  		clr.b	obSolid(a0)
0000FD78                            
0000FD78                            Spring_AniDwn:	; Routine $10
0000FD78 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FD7E 6000 C8B4                  		bra.w	AnimateSprite
0000FD82                            ; ===========================================================================
0000FD82                            
0000FD82                            Spring_ResetDwn:
0000FD82                            		; Routine $12
0000FD82 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FD88 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Dwn" routine
0000FD8C 4E75                       		rts	
0000FD8C 4E75                       		rts	
0000FD8E                            		include	"_anim\Springs.asm"
0000FD8E                            ; ---------------------------------------------------------------------------
0000FD8E                            ; Animation script - springs
0000FD8E                            ; ---------------------------------------------------------------------------
0000FD8E 0000                       Ani_Spring:	dc.w byte_DD02-Ani_Spring
0000FD90 0000                       		dc.w byte_DD0E-Ani_Spring
0000FD92 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, afRoutine
0000FD9E 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, afRoutine
0000FDAA                            		even
0000FDAA                            		even
0000FDAA                            Map_Spring:	include	"_maps\Springs.asm"
0000FDAA                            ; ---------------------------------------------------------------------------
0000FDAA                            ; Sprite mappings - springs
0000FDAA                            ; ---------------------------------------------------------------------------
0000FDAA                            Map_Spring_internal:
0000FDAA 0000                       		dc.w M_Spg_Up-Map_Spring_internal
0000FDAC 0000                       		dc.w M_Spg_UpFlat-Map_Spring_internal
0000FDAE 0000                       		dc.w M_Spg_UpExt-Map_Spring_internal
0000FDB0 0000                       		dc.w M_Spg_Left-Map_Spring_internal
0000FDB2 0000                       		dc.w M_Spg_LeftFlat-Map_Spring_internal
0000FDB4 0000                       		dc.w M_Spg_LeftExt-Map_Spring_internal
0000FDB6 02                         M_Spg_Up:	dc.b 2			; facing up
0000FDB7 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000FDBC 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000FDC1 01                         M_Spg_UpFlat:	dc.b 1			; facing up, flattened
0000FDC2 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000FDC7 03                         M_Spg_UpExt:	dc.b 3			; facing up, extended
0000FDC8 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000FDCD F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FDD2 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000FDD7 01                         M_Spg_Left:	dc.b 1			; facing left
0000FDD8 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000FDDD 01                         M_Spg_LeftFlat:	dc.b 1			; facing left, flattened
0000FDDE F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000FDE3 04                         M_Spg_LeftExt:	dc.b 4			; facing left, extended
0000FDE4 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000FDE9 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000FDEE F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000FDF3 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000FDF8                            		even
0000FDF8                            		even
0000FDF8                            
0000FDF8                            		include	"_incObj\42 Newtron.asm"
0000FDF8                            ; ---------------------------------------------------------------------------
0000FDF8                            ; Object 42 - Newtron enemy (GHZ)
0000FDF8                            ; ---------------------------------------------------------------------------
0000FDF8                            
0000FDF8                            Newtron:
0000FDF8 7000                       		moveq	#0,d0
0000FDFA 1028 0024                  		move.b	obRoutine(a0),d0
0000FDFE 323B 0000                  		move.w	Newt_Index(pc,d0.w),d1
0000FE02 4EFB 1000                  		jmp	Newt_Index(pc,d1.w)
0000FE06                            ; ===========================================================================
0000FE06 0000                       Newt_Index:	dc.w Newt_Main-Newt_Index
0000FE08 0000                       		dc.w Newt_Action-Newt_Index
0000FE0A 0000                       		dc.w Newt_Delete-Newt_Index
0000FE0C                            ; ===========================================================================
0000FE0C                            
0000FE0C                            Newt_Main:	; Routine 0
0000FE0C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FE10 217C 0000 0000 0004        		move.l	#Map_Newt,obMap(a0)
0000FE18 317C 049B 0002             		move.w	#$49B,obGfx(a0)
0000FE1E 117C 0004 0001             		move.b	#4,obRender(a0)
0000FE24 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FE2A 117C 0014 0014             		move.b	#$14,obActWid(a0)
0000FE30 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000FE36 117C 0008 0017             		move.b	#8,obWidth(a0)
0000FE3C                            
0000FE3C                            Newt_Action:	; Routine 2
0000FE3C 7000                       		moveq	#0,d0
0000FE3E 1028 0025                  		move.b	ob2ndRout(a0),d0
0000FE42 323B 0000                  		move.w	@index(pc,d0.w),d1
0000FE46 4EBB 1000                  		jsr	@index(pc,d1.w)
0000FE4A 43F9 0000 0000             		lea	(Ani_Newt).l,a1
0000FE50 6100 C7E2                  		bsr.w	AnimateSprite
0000FE54 6000 0000                  		bra.w	RememberState
0000FE58                            ; ===========================================================================
0000FE58 0000                       @index:		dc.w @chkdistance-@index
0000FE5A 0000                       		dc.w @type00-@index
0000FE5C 0000                       		dc.w @matchfloor-@index
0000FE5E 0000                       		dc.w @speed-@index
0000FE60 0000                       		dc.w @type01-@index
0000FE62                            ; ===========================================================================
0000FE62                            
0000FE62                            @chkdistance:
0000FE62 08E8 0000 0022             		bset	#0,obStatus(a0)
0000FE68 3038 D008                  		move.w	(v_player+obX).w,d0
0000FE6C 9068 0008                  		sub.w	obX(a0),d0
0000FE70 6400                       		bcc.s	@sonicisright
0000FE72 4440                       		neg.w	d0
0000FE74 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000FE7A                            
0000FE7A                            	@sonicisright:
0000FE7A 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000FE7E 6400                       		bcc.s	@outofrange	; if not, branch
0000FE80 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @type00 next
0000FE84 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FE8A 4A28 0028                  		tst.b	obSubtype(a0)	; check	object type
0000FE8E 6700                       		beq.s	@istype00	; if type is 00, branch
0000FE90                            
0000FE90 317C 249B 0002             		move.w	#$249B,obGfx(a0)
0000FE96 117C 0008 0025             		move.b	#8,ob2ndRout(a0) ; goto @type01 next
0000FE9C 117C 0004 001C             		move.b	#4,obAnim(a0)	; use different	animation
0000FEA2                            
0000FEA2                            	@outofrange:
0000FEA2                            	@istype00:
0000FEA2 4E75                       		rts	
0000FEA4                            ; ===========================================================================
0000FEA4                            
0000FEA4                            @type00:
0000FEA4 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has "appearing" animation finished?
0000FEAA 6400                       		bcc.s	@fall		; is yes, branch
0000FEAC 08E8 0000 0022             		bset	#0,obStatus(a0)
0000FEB2 3038 D008                  		move.w	(v_player+obX).w,d0
0000FEB6 9068 0008                  		sub.w	obX(a0),d0
0000FEBA 6400                       		bcc.s	@sonicisright2
0000FEBC 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000FEC2                            
0000FEC2                            	@sonicisright2:
0000FEC2 4E75                       		rts	
0000FEC4                            ; ===========================================================================
0000FEC4                            
0000FEC4                            	@fall:
0000FEC4 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
0000FECA 6600                       		bne.s	@loc_DE42
0000FECC 117C 000C 0020             		move.b	#$C,obColType(a0)
0000FED2                            
0000FED2                            	@loc_DE42:
0000FED2 6100 F65E                  		bsr.w	ObjectFall
0000FED6 4EB9 0000 0000             		jsr		ObjFloorDist
0000FEDC 4A41                       		tst.w	d1		; has newtron hit the floor?
0000FEDE 6A00                       		bpl.s	@keepfalling	; if not, branch
0000FEE0                            
0000FEE0 D368 000C                  		add.w	d1,obY(a0)
0000FEE4 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop newtron falling
0000FEEA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000FEEE 117C 0002 001C             		move.b	#2,obAnim(a0)
0000FEF4 0828 0005 0002             		btst	#5,obGfx(a0)
0000FEFA 6700                       		beq.s	@pppppppp
0000FEFC 5228 001C                  		addq.b	#1,obAnim(a0)
0000FF00                            
0000FF00                            	@pppppppp:
0000FF00 117C 000D 0020             		move.b	#$D,obColType(a0)
0000FF06 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move newtron horizontally
0000FF0C 0828 0000 0022             		btst	#0,obStatus(a0)
0000FF12 6600                       		bne.s	@keepfalling
0000FF14 4468 0010                  		neg.w	obVelX(a0)
0000FF18                            
0000FF18                            	@keepfalling:
0000FF18 4E75                       		rts	
0000FF1A                            ; ===========================================================================
0000FF1A                            
0000FF1A                            @matchfloor:
0000FF1A 6100 F64E                  		bsr.w	SpeedToPos
0000FF1E 4EB9 0000 0000             		jsr		ObjFloorDist
0000FF24 0C41 FFF8                  		cmpi.w	#-8,d1
0000FF28 6D00                       		blt.s	@nextroutine
0000FF2A 0C41 000C                  		cmpi.w	#$C,d1
0000FF2E 6C00                       		bge.s	@nextroutine
0000FF30 D368 000C                  		add.w	d1,obY(a0)	; match	newtron's position with floor
0000FF34 4E75                       		rts	
0000FF36                            ; ===========================================================================
0000FF36                            
0000FF36                            	@nextroutine:
0000FF36 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @speed next
0000FF3A 4E75                       		rts	
0000FF3C                            ; ===========================================================================
0000FF3C                            
0000FF3C                            @speed:
0000FF3C 6100 F62C                  		bsr.w	SpeedToPos
0000FF40 4E75                       		rts	
0000FF42                            ; ===========================================================================
0000FF42                            
0000FF42                            @type01:
0000FF42 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
0000FF48 6600                       		bne.s	@firemissile
0000FF4A 117C 000C 0020             		move.b	#$C,obColType(a0)
0000FF50                            
0000FF50                            	@firemissile:
0000FF50 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000FF56 6600                       		bne.s	@fail
0000FF58 4A28 0032                  		tst.b	$32(a0)
0000FF5C 6600                       		bne.s	@fail
0000FF5E 117C 0001 0032             		move.b	#1,$32(a0)
0000FF64 6100 FBB2                  		bsr.w	FindFreeObj
0000FF68 6600                       		bne.s	@fail
0000FF6A 12BC 0023                  		move.b	#id_Missile,0(a1) ; load missile object
0000FF6E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000FF74 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000FF7A 5169 000C                  		subq.w	#8,obY(a1)
0000FF7E 337C 0200 0010             		move.w	#$200,obVelX(a1)
0000FF84 303C 0014                  		move.w	#$14,d0
0000FF88 0828 0000 0022             		btst	#0,obStatus(a0)
0000FF8E 6600                       		bne.s	@noflip
0000FF90 4440                       		neg.w	d0
0000FF92 4469 0010                  		neg.w	obVelX(a1)
0000FF96                            
0000FF96                            	@noflip:
0000FF96 D169 0008                  		add.w	d0,obX(a1)
0000FF9A 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0000FFA0 137C 0001 0028             		move.b	#1,obSubtype(a1)
0000FFA6                            
0000FFA6                            	@fail:
0000FFA6 4E75                       		rts	
0000FFA8                            ; ===========================================================================
0000FFA8                            
0000FFA8                            Newt_Delete:	; Routine 4
0000FFA8 6000 F614                  		bra.w	DeleteObject
0000FFA8 6000 F614                  		bra.w	DeleteObject
0000FFAC                            		include	"_anim\Newtron.asm"
0000FFAC                            ; ---------------------------------------------------------------------------
0000FFAC                            ; Animation script - Newtron enemy
0000FFAC                            ; ---------------------------------------------------------------------------
0000FFAC 0000                       Ani_Newt:	dc.w A_Newt_Blank-Ani_Newt
0000FFAE 0000                       		dc.w A_Newt_Drop-Ani_Newt
0000FFB0 0000                       		dc.w A_Newt_Fly1-Ani_Newt
0000FFB2 0000                       		dc.w A_Newt_Fly2-Ani_Newt
0000FFB4 0000                       		dc.w A_Newt_Fires-Ani_Newt
0000FFB6 0F0A FF                    A_Newt_Blank:	dc.b $F, $A, afEnd
0000FFBA 00                         		even
0000FFBA 1300 0103 0405 FE01        A_Newt_Drop:	dc.b $13, 0, 1,	3, 4, 5, afBack, 1
0000FFC2 0206 07FF                  A_Newt_Fly1:	dc.b 2,	6, 7, afEnd
0000FFC6 0208 09FF                  A_Newt_Fly2:	dc.b 2,	8, 9, afEnd
0000FFCA 1300 0101 0201 0100 FC     A_Newt_Fires:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, afRoutine
0000FFD4 00                         		even
0000FFD4 00                         		even
0000FFD4                            Map_Newt:	include	"_maps\Newtron.asm"
0000FFD4                            ; ---------------------------------------------------------------------------
0000FFD4                            ; Sprite mappings - Newtron enemy (GHZ)
0000FFD4                            ; ---------------------------------------------------------------------------
0000FFD4                            Map_Newt_internal:
0000FFD4 0000                       		dc.w M_Newt_Trans-Map_Newt_internal
0000FFD6 0000                       		dc.w M_Newt_Norm-Map_Newt_internal
0000FFD8 0000                       		dc.w M_Newt_Fires-Map_Newt_internal
0000FFDA 0000                       		dc.w M_Newt_Drop1-Map_Newt_internal
0000FFDC 0000                       		dc.w M_Newt_Drop2-Map_Newt_internal
0000FFDE 0000                       		dc.w M_Newt_Drop3-Map_Newt_internal
0000FFE0 0000                       		dc.w M_Newt_Fly1a-Map_Newt_internal
0000FFE2 0000                       		dc.w M_Newt_Fly1b-Map_Newt_internal
0000FFE4 0000                       		dc.w M_Newt_Fly2a-Map_Newt_internal
0000FFE6 0000                       		dc.w M_Newt_Fly2b-Map_Newt_internal
0000FFE8 0000                       		dc.w M_Newt_Blank-Map_Newt_internal
0000FFEA 03                         M_Newt_Trans:	dc.b 3
0000FFEB EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC	; partially visible
0000FFF0 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000FFF5 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000FFFA 03                         M_Newt_Norm:	dc.b 3
0000FFFB EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC ; visible
00010000 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00010005 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0001000A 03                         M_Newt_Fires:	dc.b 3
0001000B EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC ; open mouth, firing
00010010 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00010015 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0001001A 04                         M_Newt_Drop1:	dc.b 4
0001001B EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC ; dropping
00010020 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00010025 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0001002A 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0001002F 03                         M_Newt_Drop2:	dc.b 3
00010030 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
00010035 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0001003A 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0001003F 02                         M_Newt_Drop3:	dc.b 2
00010040 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010045 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0001004A 03                         M_Newt_Fly1a:	dc.b 3
0001004B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC ; flying
00010050 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010055 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0001005A 03                         M_Newt_Fly1b:	dc.b 3
0001005B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010060 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010065 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0001006A 03                         M_Newt_Fly2a:	dc.b 3
0001006B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010070 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010075 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0001007A 03                         M_Newt_Fly2b:	dc.b 3
0001007B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010080 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010085 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0001008A 00                         M_Newt_Blank:	dc.b 0
0001008C 00                         		even
0001008C 00                         		even
0001008C                            		include	"_incObj\43 Roller.asm"
0001008C                            ; ---------------------------------------------------------------------------
0001008C                            ; Object 43 - Roller enemy (SYZ)
0001008C                            ; ---------------------------------------------------------------------------
0001008C                            
0001008C                            Roller:
0001008C 7000                       		moveq	#0,d0
0001008E 1028 0024                  		move.b	obRoutine(a0),d0
00010092 323B 0000                  		move.w	Roll_Index(pc,d0.w),d1
00010096 4EFB 1000                  		jmp	Roll_Index(pc,d1.w)
0001009A                            ; ===========================================================================
0001009A 0000                       Roll_Index:	dc.w Roll_Main-Roll_Index
0001009C 0000                       		dc.w Roll_Action-Roll_Index
0001009E                            ; ===========================================================================
0001009E                            
0001009E                            Roll_Main:	; Routine 0
0001009E 117C 000E 0016             		move.b	#$E,obHeight(a0)
000100A4 117C 0008 0017             		move.b	#8,obWidth(a0)
000100AA 6100 F486                  		bsr.w	ObjectFall
000100AE 4EB9 0000 0000             		jsr	ObjFloorDist
000100B4 4A41                       		tst.w	d1
000100B6 6A00                       		bpl.s	locret_E052
000100B8 D368 000C                  		add.w	d1,obY(a0)	; match	roller's position with the floor
000100BC 317C 0000 0012             		move.w	#0,obVelY(a0)
000100C2 5428 0024                  		addq.b	#2,obRoutine(a0)
000100C6 217C 0000 0000 0004        		move.l	#Map_Roll,obMap(a0)
000100CE 317C 04B8 0002             		move.w	#$4B8,obGfx(a0)
000100D4 117C 0004 0001             		move.b	#4,obRender(a0)
000100DA 317C 0200 0018             		move.w	#$200,obPriority(a0)
000100E0 117C 0010 0014             		move.b	#$10,obActWid(a0)
000100E6                            
000100E6                            	locret_E052:
000100E6 4E75                       		rts	
000100E8                            ; ===========================================================================
000100E8                            
000100E8                            Roll_Action:	; Routine 2
000100E8 7000                       		moveq	#0,d0
000100EA 1028 0025                  		move.b	ob2ndRout(a0),d0
000100EE 323B 0000                  		move.w	Roll_Index2(pc,d0.w),d1
000100F2 4EBB 1000                  		jsr	Roll_Index2(pc,d1.w)
000100F6 43F9 0000 0000             		lea	(Ani_Roll).l,a1
000100FC 6100 C536                  		bsr.w	AnimateSprite
00010100 3028 0008                  		move.w	obX(a0),d0
00010104 0240 FF80                  		andi.w	#$FF80,d0
00010108 3238 F700                  		move.w	(v_screenposx).w,d1
0001010C 0441 0080                  		subi.w	#$80,d1
00010110 0241 FF80                  		andi.w	#$FF80,d1
00010114 9041                       		sub.w	d1,d0
00010116 0C40 0280                  		cmpi.w	#$280,d0
0001011A 6E00 0000                  		bgt.w	Roll_ChkGone
0001011E 6000 F45E                  		bra.w	DisplaySprite
00010122                            ; ===========================================================================
00010122                            
00010122                            Roll_ChkGone:
00010122 45F8 FC00                  		lea	(v_objstate).w,a2
00010126 7000                       		moveq	#0,d0
00010128 1028 0023                  		move.b	obRespawnNo(a0),d0
0001012C 6700                       		beq.s	Roll_Delete
0001012E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010134                            
00010134                            Roll_Delete:
00010134 6000 F488                  		bra.w	DeleteObject
00010138                            ; ===========================================================================
00010138 0000                       Roll_Index2:	dc.w Roll_RollChk-Roll_Index2
0001013A 0000                       		dc.w Roll_RollNoChk-Roll_Index2
0001013C 0000                       		dc.w Roll_ChkJump-Roll_Index2
0001013E 0000                       		dc.w Roll_MatchFloor-Roll_Index2
00010140                            ; ===========================================================================
00010140                            
00010140                            Roll_RollChk:
00010140 3038 D008                  		move.w	(v_player+obX).w,d0
00010144 0440 0100                  		subi.w	#$100,d0
00010148 6500                       		bcs.s	loc_E0D2
0001014A 9068 0008                  		sub.w	obX(a0),d0	; check	distance between Roller	and Sonic
0001014E 6500                       		bcs.s	loc_E0D2
00010150 5828 0025                  		addq.b	#4,ob2ndRout(a0)
00010154 117C 0002 001C             		move.b	#2,obAnim(a0)
0001015A 317C 0700 0010             		move.w	#$700,obVelX(a0) ; move Roller horizontally
00010160 117C 008E 0020             		move.b	#$8E,obColType(a0) ; make Roller invincible
00010166                            
00010166                            loc_E0D2:
00010166 588F                       		addq.l	#4,sp
00010168 4E75                       		rts	
0001016A                            ; ===========================================================================
0001016A                            
0001016A                            Roll_RollNoChk:
0001016A 0C28 0002 001C             		cmpi.b	#2,obAnim(a0)
00010170 6700                       		beq.s	loc_E0F8
00010172 5368 0030                  		subq.w	#1,$30(a0)
00010176 6A00                       		bpl.s	locret_E0F6
00010178 117C 0001 001C             		move.b	#1,obAnim(a0)
0001017E 317C 0700 0010             		move.w	#$700,obVelX(a0)
00010184 117C 008E 0020             		move.b	#$8E,obColType(a0)
0001018A                            
0001018A                            locret_E0F6:
0001018A 4E75                       		rts	
0001018C                            ; ===========================================================================
0001018C                            
0001018C                            loc_E0F8:
0001018C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00010190 4E75                       		rts	
00010192                            ; ===========================================================================
00010192                            
00010192                            Roll_ChkJump:
00010192 6100 0000                  		bsr.w	Roll_Stop
00010196 6100 F3D2                  		bsr.w	SpeedToPos
0001019A 4EB9 0000 0000             		jsr	ObjFloorDist
000101A0 0C41 FFF8                  		cmpi.w	#-8,d1
000101A4 6D00                       		blt.s	Roll_Jump
000101A6 0C41 000C                  		cmpi.w	#$C,d1
000101AA 6C00                       		bge.s	Roll_Jump
000101AC D368 000C                  		add.w	d1,obY(a0)
000101B0 4E75                       		rts	
000101B2                            ; ===========================================================================
000101B2                            
000101B2                            Roll_Jump:
000101B2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000101B6 08E8 0000 0032             		bset	#0,$32(a0)
000101BC 6700                       		beq.s	locret_E12E
000101BE 317C FA00 0012             		move.w	#-$600,obVelY(a0)	; move Roller vertically
000101C4                            
000101C4                            locret_E12E:
000101C4 4E75                       		rts	
000101C6                            ; ===========================================================================
000101C6                            
000101C6                            Roll_MatchFloor:
000101C6 6100 F36A                  		bsr.w	ObjectFall
000101CA 4A68 0012                  		tst.w	obVelY(a0)
000101CE 6B00                       		bmi.s	locret_E150
000101D0 4EB9 0000 0000             		jsr	ObjFloorDist
000101D6 4A41                       		tst.w	d1
000101D8 6A00                       		bpl.s	locret_E150
000101DA D368 000C                  		add.w	d1,obY(a0)	; match	Roller's position with the floor
000101DE 5528 0025                  		subq.b	#2,ob2ndRout(a0)
000101E2 317C 0000 0012             		move.w	#0,obVelY(a0)
000101E8                            
000101E8                            locret_E150:
000101E8 4E75                       		rts	
000101EA                            
000101EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000101EA                            
000101EA                            
000101EA                            Roll_Stop:
000101EA 4A28 0032                  		tst.b	$32(a0)
000101EE 6B00                       		bmi.s	locret_E188
000101F0 3038 D008                  		move.w	(v_player+obX).w,d0
000101F4 0440 0030                  		subi.w	#$30,d0
000101F8 9068 0008                  		sub.w	obX(a0),d0
000101FC 6400                       		bcc.s	locret_E188
000101FE 117C 0000 001C             		move.b	#0,obAnim(a0)
00010204 117C 000E 0020             		move.b	#$E,obColType(a0)
0001020A 4268 0010                  		clr.w	obVelX(a0)
0001020E 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
00010214 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
0001021A 08E8 0007 0032             		bset	#7,$32(a0)
00010220                            
00010220                            locret_E188:
00010220 4E75                       		rts	
00010222                            ; End of function Roll_Stop
00010222                            ; End of function Roll_Stop
00010222                            		include	"_anim\Roller.asm"
00010222                            ; ---------------------------------------------------------------------------
00010222                            ; Animation script - Roller enemy
00010222                            ; ---------------------------------------------------------------------------
00010222 0000                       Ani_Roll:	dc.w A_Roll_Unfold-Ani_Roll
00010224 0000                       		dc.w A_Roll_Fold-Ani_Roll
00010226 0000                       		dc.w A_Roll_Roll-Ani_Roll
00010228 0F02 0100 FE01             A_Roll_Unfold:	dc.b $F, 2, 1, 0, afBack, 1
0001022E 0F01 02FD 02               A_Roll_Fold:	dc.b $F, 1, 2, afChange, 2
00010234 00                         		even
00010234 0303 0402 FF               A_Roll_Roll:	dc.b 3,	3, 4, 2, afEnd
0001023A 00                         		even
0001023A 00                         		even
0001023A                            Map_Roll:	include	"_maps\Roller.asm"
0001023A                            ; --------------------------------------------------------------------------------
0001023A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001023A                            ; --------------------------------------------------------------------------------
0001023A                            
0001023A                            SME_q3BmU:	
0001023A 0000 0000                  		dc.w SME_q3BmU_A-SME_q3BmU, SME_q3BmU_15-SME_q3BmU	
0001023E 0000 0000                  		dc.w SME_q3BmU_20-SME_q3BmU, SME_q3BmU_26-SME_q3BmU	
00010242 0000                       		dc.w SME_q3BmU_2C-SME_q3BmU	
00010244 02                         SME_q3BmU_A:	dc.b 2	
00010245 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0	
0001024A F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0	
0001024F 02                         SME_q3BmU_15:	dc.b 2	
00010250 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
00010255 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0	
0001025A 01                         SME_q3BmU_20:	dc.b 1	
0001025B F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0	
00010260 01                         SME_q3BmU_26:	dc.b 1	
00010261 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0	
00010266 01                         SME_q3BmU_2C:	dc.b 1	
00010267 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0	
0001026C                            		even
0001026C                            		even
0001026C                            
0001026C                            		include	"_incObj\44 GHZ Edge Walls.asm"
0001026C                            ; ---------------------------------------------------------------------------
0001026C                            ; Object 44 - edge walls (GHZ)
0001026C                            ; ---------------------------------------------------------------------------
0001026C                            
0001026C                            EdgeWalls:
0001026C 7000                       		moveq	#0,d0
0001026E 1028 0024                  		move.b	obRoutine(a0),d0
00010272 323B 0000                  		move.w	Edge_Index(pc,d0.w),d1
00010276 4EFB 1000                  		jmp	Edge_Index(pc,d1.w)
0001027A                            ; ===========================================================================
0001027A 0000                       Edge_Index:	dc.w Edge_Main-Edge_Index
0001027C 0000                       		dc.w Edge_Solid-Edge_Index
0001027E 0000                       		dc.w Edge_Display-Edge_Index
00010280                            ; ===========================================================================
00010280                            
00010280                            Edge_Main:	; Routine 0
00010280 5428 0024                  		addq.b	#2,obRoutine(a0)
00010284 217C 0000 0000 0004        		move.l	#Map_Edge,obMap(a0)
0001028C 317C 434C 0002             		move.w	#$434C,obGfx(a0)
00010292 0028 0004 0001             		ori.b	#4,obRender(a0)
00010298 117C 0008 0014             		move.b	#8,obActWid(a0)
0001029E 317C 0300 0018             		move.w	#$300,obPriority(a0)
000102A4 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0) ; copy object type number to frame number
000102AA 08A8 0004 001A             		bclr	#4,obFrame(a0)	; clear	4th bit	(deduct	$10)
000102B0 6700                       		beq.s	Edge_Solid	; make object solid if 4th bit = 0
000102B2 5428 0024                  		addq.b	#2,obRoutine(a0)
000102B6 6000                       		bra.s	Edge_Display	; don't make it solid if 4th bit = 1
000102B8                            ; ===========================================================================
000102B8                            
000102B8                            Edge_Solid:	; Routine 2
000102B8 323C 0013                  		move.w	#$13,d1
000102BC 343C 0028                  		move.w	#$28,d2
000102C0 6100 9FC4                  		bsr.w	Obj44_SolidWall
000102C4                            
000102C4                            Edge_Display:	; Routine 4
000102C4 6100 F2B8                  		bsr.w	DisplaySprite
000102E6 4E75                       		rts	
000102E6 4E75                       		rts	
000102E8                            Map_Edge:	include	"_maps\GHZ Edge Walls.asm"
000102E8                            ; ---------------------------------------------------------------------------
000102E8                            ; Sprite mappings - walls (GHZ)
000102E8                            ; ---------------------------------------------------------------------------
000102E8                            Map_Edge_internal:
000102E8 0000                       		dc.w M_Edge_Shadow-Map_Edge_internal
000102EA 0000                       		dc.w M_Edge_Light-Map_Edge_internal
000102EC 0000                       		dc.w M_Edge_Dark-Map_Edge_internal
000102EE 04                         M_Edge_Shadow:	dc.b 4
000102EF E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8	; light with shadow
000102F4 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000102F9 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
000102FE 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
00010303 04                         M_Edge_Light:	dc.b 4
00010304 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8	; light with no shadow
00010309 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0001030E 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
00010313 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
00010318 04                         M_Edge_Dark:	dc.b 4
00010319 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8	; all shadow
0001031E F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
00010323 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
00010328 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0001032E 00                         		even
0001032E 00                         		even
0001032E                            
0001032E                            		include	"_incObj\13 Lava Ball Maker.asm"
0001032E                            ; ---------------------------------------------------------------------------
0001032E                            ; Object 13 - lava ball	maker (MZ, SLZ)
0001032E                            ; ---------------------------------------------------------------------------
0001032E                            
0001032E                            LavaMaker:
0001032E 7000                       		moveq	#0,d0
00010330 1028 0024                  		move.b	obRoutine(a0),d0
00010334 323B 0000                  		move.w	LavaM_Index(pc,d0.w),d1
00010338 4EBB 1000                  		jsr	LavaM_Index(pc,d1.w)
0001033C 6000 0000                  		bra.w	LBall_ChkDel
00010340                            ; ===========================================================================
00010340 0000                       LavaM_Index:	dc.w LavaM_Main-LavaM_Index
00010342 0000                       		dc.w LavaM_MakeLava-LavaM_Index
00010344                            ; ---------------------------------------------------------------------------
00010344                            ;
00010344                            ; Lava ball production rates
00010344                            ;
00010344 1E3C 5A78 96B4             LavaM_Rates:	dc.b 30, 60, 90, 120, 150, 180
0001034A                            ; ===========================================================================
0001034A                            
0001034A                            LavaM_Main:	; Routine 0
0001034A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001034E 1028 0028                  		move.b	obSubtype(a0),d0
00010352 E848                       		lsr.w	#4,d0
00010354 0240 000F                  		andi.w	#$F,d0
00010358 117B 00EA 001F             		move.b	LavaM_Rates(pc,d0.w),obDelayAni(a0)
0001035E 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; set time delay for lava balls
00010364 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0001036A                            
0001036A                            LavaM_MakeLava:	; Routine 2
0001036A 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from time delay
0001036E 6600                       		bne.s	LavaM_Wait	; if time still	remains, branch
00010370 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset time delay
00010376 6100 F594                  		bsr.w	ChkObjectVisible
0001037A 6600                       		bne.s	LavaM_Wait
0001037C 6100 F79A                  		bsr.w	FindFreeObj
00010380 6600                       		bne.s	LavaM_Wait
00010382 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
00010386 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001038C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010392 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00010398                            
00010398                            	LavaM_Wait:
00010398 4E75                       		rts	
00010398 4E75                       		rts	
0001039A                            		include	"_incObj\14 Lava Ball.asm"
0001039A                            ; ---------------------------------------------------------------------------
0001039A                            ; Object 14 - lava balls (MZ, SLZ)
0001039A                            ; ---------------------------------------------------------------------------
0001039A                            
0001039A                            LavaBall:
0001039A 7000                       		moveq	#0,d0
0001039C 1028 0024                  		move.b	obRoutine(a0),d0
000103A0 323B 0000                  		move.w	LBall_Index(pc,d0.w),d1
000103A4 4EBB 1000                  		jsr	LBall_Index(pc,d1.w)
000103A8 6000 F1D4                  		bra.w	DisplaySprite
000103AC                            ; ===========================================================================
000103AC 0000                       LBall_Index:	dc.w LBall_Main-LBall_Index
000103AE 0000                       		dc.w LBall_Action-LBall_Index
000103B0 0000                       		dc.w LBall_Delete-LBall_Index
000103B2                            
000103B2 FC00 FB00 FA00 F900 FE00   LBall_Speeds:	dc.w -$400, -$500, -$600, -$700, -$200
000103BC 0200 FE00 0200 0000        		dc.w $200, -$200, $200,	0
000103C4                            ; ===========================================================================
000103C4                            
000103C4                            LBall_Main:	; Routine 0
000103C4 5428 0024                  		addq.b	#2,obRoutine(a0)
000103C8 117C 0008 0016             		move.b	#8,obHeight(a0)
000103CE 117C 0008 0017             		move.b	#8,obWidth(a0)
000103D4 217C 0000 D286 0004        		move.l	#Map_Fire,obMap(a0)
000103DC 317C 0345 0002             		move.w	#$345,obGfx(a0)
000103E2 0C38 0003 FE10             		cmpi.b	#3,(v_zone).w	; check if level is SLZ
000103E8 6600                       		bne.s	@notSLZ
000103EA 317C 0480 0002             		move.w	#$480,obGfx(a0)	; SLZ specific code
000103F0                            
000103F0                            	@notSLZ:
000103F0 117C 0004 0001             		move.b	#4,obRender(a0)
000103F6 317C 0180 0018             		move.w	#$180,obPriority(a0)
000103FC 117C 008B 0020             		move.b	#$8B,obColType(a0)
00010402 3168 000C 0030             		move.w	obY(a0),$30(a0)
00010408 4A28 0029                  		tst.b	$29(a0)
0001040C 6700                       		beq.s	@speed
0001040E 5428 0018                  		addq.b	#2,obPriority(a0)
00010412                            
00010412                            	@speed:
00010412 7000                       		moveq	#0,d0
00010414 1028 0028                  		move.b	obSubtype(a0),d0
00010418 D040                       		add.w	d0,d0
0001041A 317B 0096 0012             		move.w	LBall_Speeds(pc,d0.w),obVelY(a0) ; load object speed (vertical)
00010420 117C 0008 0014             		move.b	#8,obActWid(a0)
00010426 0C28 0006 0028             		cmpi.b	#6,obSubtype(a0) ; is object type below $6 ?
0001042C 6500                       		bcs.s	@sound		; if yes, branch
0001042E                            
0001042E 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010434 117C 0002 001C             		move.b	#2,obAnim(a0)	; use horizontal animation
0001043A 3168 0012 0010             		move.w	obVelY(a0),obVelX(a0) ; set horizontal speed
00010440 317C 0000 0012             		move.w	#0,obVelY(a0)	; delete vertical speed
00010446                            
00010446                            	@sound:
00010450                            
00010450                            LBall_Action:	; Routine 2
00010450 7000                       		moveq	#0,d0
00010452 1028 0028                  		move.b	obSubtype(a0),d0
00010456 D040                       		add.w	d0,d0
00010458 323B 0000                  		move.w	LBall_TypeIndex(pc,d0.w),d1
0001045C 4EBB 1000                  		jsr	LBall_TypeIndex(pc,d1.w)
00010460 6100 F108                  		bsr.w	SpeedToPos
00010464 43F9 0000 0000             		lea	(Ani_Fire).l,a1
0001046A 6100 C1C8                  		bsr.w	AnimateSprite
0001046E                            
0001046E                            LBall_ChkDel:
0001048C 4E75                       		rts	
0001048E                            ; ===========================================================================
0001048E 0000 0000                  LBall_TypeIndex:dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
00010492 0000 0000                  		dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
00010496 0000 0000                  		dc.w LBall_Type04-LBall_TypeIndex, LBall_Type05-LBall_TypeIndex
0001049A 0000 0000                  		dc.w LBall_Type06-LBall_TypeIndex, LBall_Type07-LBall_TypeIndex
0001049E 0000                       		dc.w LBall_Type08-LBall_TypeIndex
000104A0                            ; ===========================================================================
000104A0                            ; lavaball types 00-03 fly up and fall back down
000104A0                            
000104A0                            LBall_Type00:
000104A0 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's downward speed
000104A6 3028 0030                  		move.w	$30(a0),d0
000104AA B068 000C                  		cmp.w	obY(a0),d0	; has object fallen back to its	original position?
000104AE 6400                       		bcc.s	loc_E41E	; if not, branch
000104B0 5428 0024                  		addq.b	#2,obRoutine(a0)	; goto "LBall_Delete" routine
000104B4                            
000104B4                            loc_E41E:
000104B4 08A8 0001 0022             		bclr	#1,obStatus(a0)
000104BA 4A68 0012                  		tst.w	obVelY(a0)
000104BE 6A00                       		bpl.s	locret_E430
000104C0 08E8 0001 0022             		bset	#1,obStatus(a0)
000104C6                            
000104C6                            locret_E430:
000104C6 4E75                       		rts	
000104C8                            ; ===========================================================================
000104C8                            ; lavaball type	04 flies up until it hits the ceiling
000104C8                            
000104C8                            LBall_Type04:
000104C8 08E8 0001 0022             		bset	#1,obStatus(a0)
000104CE 4EB9 0000 0000             		jsr	ObjHitCeiling
000104D4 4A41                       		tst.w	d1
000104D6 6A00                       		bpl.s	locret_E452
000104D8 117C 0008 0028             		move.b	#8,obSubtype(a0)
000104DE 117C 0001 001C             		move.b	#1,obAnim(a0)
000104E4 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the ceiling
000104EA                            
000104EA                            locret_E452:
000104EA 4E75                       		rts	
000104EC                            ; ===========================================================================
000104EC                            ; lavaball type	05 falls down until it hits the	floor
000104EC                            
000104EC                            LBall_Type05:
000104EC 08A8 0001 0022             		bclr	#1,obStatus(a0)
000104F2 4EB9 0000 0000             		jsr	ObjFloorDist
000104F8 4A41                       		tst.w	d1
000104FA 6A00                       		bpl.s	locret_E474
000104FC 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010502 117C 0001 001C             		move.b	#1,obAnim(a0)
00010508 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the floor
0001050E                            
0001050E                            locret_E474:
0001050E 4E75                       		rts	
00010510                            ; ===========================================================================
00010510                            ; lavaball types 06-07 move sideways
00010510                            
00010510                            LBall_Type06:
00010510 08E8 0000 0022             		bset	#0,obStatus(a0)
00010516 76F8                       		moveq	#-8,d3
00010518 4EB9 0000 0000             		jsr	ObjHitWallLeft
0001051E 4A41                       		tst.w	d1
00010520 6A00                       		bpl.s	locret_E498
00010522 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010528 117C 0003 001C             		move.b	#3,obAnim(a0)
0001052E 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
00010534                            
00010534                            locret_E498:
00010534 4E75                       		rts	
00010536                            ; ===========================================================================
00010536                            
00010536                            LBall_Type07:
00010536 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001053C 7608                       		moveq	#8,d3
0001053E 4EB9 0000 0000             		jsr	ObjHitWallRight
00010544 4A41                       		tst.w	d1
00010546 6A00                       		bpl.s	locret_E4BC
00010548 117C 0008 0028             		move.b	#8,obSubtype(a0)
0001054E 117C 0003 001C             		move.b	#3,obAnim(a0)
00010554 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
0001055A                            
0001055A                            locret_E4BC:
0001055A 4E75                       		rts	
0001055C                            ; ===========================================================================
0001055C                            
0001055C                            LBall_Type08:
0001055C 4E75                       		rts	
0001055E                            ; ===========================================================================
0001055E                            
0001055E                            LBall_Delete:
0001055E 6000 F05E                  		bra.w	DeleteObject
0001055E 6000 F05E                  		bra.w	DeleteObject
00010562                            		include	"_anim\Fireballs.asm"
00010562                            ; ---------------------------------------------------------------------------
00010562                            ; Animation script - lava balls
00010562                            ; ---------------------------------------------------------------------------
00010562 0000                       Ani_Fire:	dc.w @vertical-Ani_Fire
00010564 0000                       		dc.w @vertcollide-Ani_Fire
00010566 0000                       		dc.w @horizontal-Ani_Fire
00010568 0000                       		dc.w @horicollide-Ani_Fire
0001056A 0500 2001 21FF             @vertical:	dc.b 5,	0, $20,	1, $21,	afEnd
00010570 0502 FC                    @vertcollide:	dc.b 5,	2, afRoutine
00010574 00                         		even
00010574 0503 4304 44FF             @horizontal:	dc.b 5,	3, $43,	4, $44,	afEnd
0001057A 0505 FC                    @horicollide:	dc.b 5,	5, afRoutine
0001057E 00                         		even
0001057E 00                         		even
0001057E                            
0001057E                            		include	"_incObj\6D Flamethrower.asm"
0001057E                            ; ---------------------------------------------------------------------------
0001057E                            ; Object 6D - flame thrower (SBZ)
0001057E                            ; ---------------------------------------------------------------------------
0001057E                            
0001057E                            Flamethrower:
0001057E 7000                       		moveq	#0,d0
00010580 1028 0024                  		move.b	obRoutine(a0),d0
00010584 323B 0000                  		move.w	Flame_Index(pc,d0.w),d1
00010588 4EFB 1000                  		jmp	Flame_Index(pc,d1.w)
0001058C                            ; ===========================================================================
0001058C 0000                       Flame_Index:	dc.w Flame_Main-Flame_Index
0001058E 0000                       		dc.w Flame_Action-Flame_Index
00010590                            ; ===========================================================================
00010590                            
00010590                            Flame_Main:	; Routine 0
00010590 5428 0024                  		addq.b	#2,obRoutine(a0)
00010594 217C 0000 0000 0004        		move.l	#Map_Flame,obMap(a0)
0001059C 317C 83D9 0002             		move.w	#$83D9,obGfx(a0)
000105A2 0028 0004 0001             		ori.b	#4,obRender(a0)
000105A8 317C 0080 0018             		move.w	#$80,obPriority(a0)
000105AE 3168 000C 0030             		move.w	obY(a0),$30(a0)	; store obY (gets overwritten later though)
000105B4 117C 000C 0014             		move.b	#$C,obActWid(a0)
000105BA 1028 0028                  		move.b	obSubtype(a0),d0
000105BE 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
000105C2 D040                       		add.w	d0,d0		; multiply by 2
000105C4 3140 0030                  		move.w	d0,$30(a0)
000105C8 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
000105CC 1028 0028                  		move.b	obSubtype(a0),d0
000105D0 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
000105D4 EB48                       		lsl.w	#5,d0		; multiply by $20
000105D6 3140 0034                  		move.w	d0,$34(a0)	; set pause time
000105DA 117C 000A 0036             		move.b	#$A,$36(a0)
000105E0 0828 0001 0022             		btst	#1,obStatus(a0)
000105E6 6700                       		beq.s	Flame_Action
000105E8 117C 0002 001C             		move.b	#2,obAnim(a0)
000105EE 117C 0015 0036             		move.b	#$15,$36(a0)
000105F4                            
000105F4                            Flame_Action:	; Routine 2
000105F4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000105F8 6A00                       		bpl.s	loc_E57A	; if time remains, branch
000105FA 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
00010600 0868 0000 001C             		bchg	#0,obAnim(a0)
00010606 6700                       		beq.s	loc_E57A
00010608 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
00010618                            
00010618                            loc_E57A:
00010618 43F9 0000 0000             		lea	(Ani_Flame).l,a1
0001061E 6100 C014                  		bsr.w	AnimateSprite
00010622 117C 0000 0020             		move.b	#0,obColType(a0)
00010628 1028 0036                  		move.b	$36(a0),d0
0001062C B028 001A                  		cmp.b	obFrame(a0),d0
00010630 6600                       		bne.s	Flame_ChkDel
00010632 117C 00A3 0020             		move.b	#$A3,obColType(a0)
00010638                            
00010638                            Flame_ChkDel:
00010656 6000 EF26                  		bra.w	DisplaySprite
00010656 6000 EF26                  		bra.w	DisplaySprite
0001065A                            		include	"_anim\Flamethrower.asm"
0001065A                            ; ---------------------------------------------------------------------------
0001065A                            ; Animation script - flamethrower (SBZ)
0001065A                            ; ---------------------------------------------------------------------------
0001065A 0000                       Ani_Flame:	dc.w @pipe1-Ani_Flame
0001065C 0000                       		dc.w @pipe2-Ani_Flame
0001065E 0000                       		dc.w @valve1-Ani_Flame
00010660 0000                       		dc.w @valve2-Ani_Flame
00010662 0300 0102 0304 0506 0708+  @pipe1:		dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, afBack, 2
00010670 0009 0705 0301 00FE 01     @pipe2:		dc.b 0,	9, 7, 5, 3, 1, 0, afBack, 1
0001067A 00                         		even
0001067A 030B 0C0D 0E0F 1011 1213+  @valve1:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, afBack, 2
00010688 0014 1211 0F0D 0BFE 01     @valve2:	dc.b 0,	$14, $12, $11, $F, $D, $B, afBack, 1
00010692 00                         		even
00010692 00                         		even
00010692                            Map_Flame:	include	"_maps\Flamethrower.asm"
00010692                            ; ---------------------------------------------------------------------------
00010692                            ; Sprite mappings - flame thrower (SBZ)
00010692                            ; ---------------------------------------------------------------------------
00010692                            Map_Flame_internal:
00010692 0000                       		dc.w @pipe1-Map_Flame_internal
00010694 0000                       		dc.w @pipe2-Map_Flame_internal
00010696 0000                       		dc.w @pipe3-Map_Flame_internal
00010698 0000                       		dc.w @pipe4-Map_Flame_internal
0001069A 0000                       		dc.w @pipe5-Map_Flame_internal
0001069C 0000                       		dc.w @pipe6-Map_Flame_internal
0001069E 0000                       		dc.w @pipe7-Map_Flame_internal
000106A0 0000                       		dc.w @pipe8-Map_Flame_internal
000106A2 0000                       		dc.w @pipe9-Map_Flame_internal
000106A4 0000                       		dc.w @pipe10-Map_Flame_internal
000106A6 0000                       		dc.w @pipe11-Map_Flame_internal
000106A8 0000                       		dc.w @valve1-Map_Flame_internal
000106AA 0000                       		dc.w @valve2-Map_Flame_internal
000106AC 0000                       		dc.w @valve3-Map_Flame_internal
000106AE 0000                       		dc.w @valve4-Map_Flame_internal
000106B0 0000                       		dc.w @valve5-Map_Flame_internal
000106B2 0000                       		dc.w @valve6-Map_Flame_internal
000106B4 0000                       		dc.w @valve7-Map_Flame_internal
000106B6 0000                       		dc.w @valve8-Map_Flame_internal
000106B8 0000                       		dc.w @valve9-Map_Flame_internal
000106BA 0000                       		dc.w @valve10-Map_Flame_internal
000106BC 0000                       		dc.w @valve11-Map_Flame_internal
000106BE 01                         @pipe1:		dc.b 1
000106BF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB ; broken pipe style flamethrower
000106C4 02                         @pipe2:		dc.b 2
000106C5 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000106CA 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000106CF 02                         @pipe3:		dc.b 2
000106D0 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000106D5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000106DA 03                         @pipe4:		dc.b 3
000106DB 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000106E0 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000106E5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000106EA 03                         @pipe5:		dc.b 3
000106EB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000106F0 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000106F5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000106FA 04                         @pipe6:		dc.b 4
000106FB 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010700 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010705 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001070A 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001070F 04                         @pipe7:		dc.b 4
00010710 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010715 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001071A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001071F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010724 05                         @pipe8:		dc.b 5
00010725 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0001072A 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001072F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010734 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010739 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001073E 05                         @pipe9:		dc.b 5
0001073F F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010744 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010749 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001074E 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010753 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010758 06                         @pipe10:	dc.b 6
00010759 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0001075E F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010763 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010768 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0001076D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010772 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010777 06                         @pipe11:	dc.b 6
00010778 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0001077D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010782 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010787 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001078C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010791 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010796 01                         @valve1:	dc.b 1
00010797 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9 ; valve style flamethrower
0001079C 02                         @valve2:	dc.b 2
0001079D 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000107A2 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000107A7 02                         @valve3:	dc.b 2
000107A8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000107AD 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000107B2 03                         @valve4:	dc.b 3
000107B3 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000107B8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000107BD 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000107C2 03                         @valve5:	dc.b 3
000107C3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000107C8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000107CD 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000107D2 04                         @valve6:	dc.b 4
000107D3 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000107D8 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000107DD 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000107E2 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000107E7 04                         @valve7:	dc.b 4
000107E8 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000107ED 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000107F2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000107F7 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000107FC 05                         @valve8:	dc.b 5
000107FD F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010802 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010807 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001080C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010811 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010816 05                         @valve9:	dc.b 5
00010817 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0001081C 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010821 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010826 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001082B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010830 06                         @valve10:	dc.b 6
00010831 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010836 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0001083B 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010840 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010845 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001084A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001084F 06                         @valve11:	dc.b 6
00010850 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010855 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0001085A 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0001085F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010864 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010869 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001086E                            		even
0001086E                            		even
0001086E                            
0001086E                            		include	"_incObj\46 MZ Bricks.asm"
0001086E                            ; ---------------------------------------------------------------------------
0001086E                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0001086E                            ; ---------------------------------------------------------------------------
0001086E                            
0001086E                            MarbleBrick:
0001086E 7000                       		moveq	#0,d0
00010870 1028 0024                  		move.b	obRoutine(a0),d0
00010874 323B 0000                  		move.w	Brick_Index(pc,d0.w),d1
00010878 4EFB 1000                  		jmp	Brick_Index(pc,d1.w)
0001087C                            ; ===========================================================================
0001087C 0000                       Brick_Index:	dc.w Brick_Main-Brick_Index
0001087E 0000                       		dc.w Brick_Action-Brick_Index
00010880                            
00010880 =00000030                  brick_origY:	equ $30
00010880                            ; ===========================================================================
00010880                            
00010880                            Brick_Main:	; Routine 0
00010880 5428 0024                  		addq.b	#2,obRoutine(a0)
00010884 117C 000F 0016             		move.b	#$F,obHeight(a0)
0001088A 117C 000F 0017             		move.b	#$F,obWidth(a0)
00010890 217C 0000 0000 0004        		move.l	#Map_Brick,obMap(a0)
00010898 317C 4000 0002             		move.w	#$4000,obGfx(a0)
0001089E 117C 0004 0001             		move.b	#4,obRender(a0)
000108A4 317C 0180 0018             		move.w	#$180,obPriority(a0)
000108AA 117C 0010 0014             		move.b	#$10,obActWid(a0)
000108B0 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
000108B6 317C 05C0 0032             		move.w	#$5C0,$32(a0)
000108BC                            
000108BC                            Brick_Action:	; Routine 2
000108BC 4A28 0001                  		tst.b	obRender(a0)
000108C0 6A00                       		bpl.s	@chkdel
000108C2 7000                       		moveq	#0,d0
000108C4 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000108C8 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
000108CC D040                       		add.w	d0,d0
000108CE 323B 0000                  		move.w	Brick_TypeIndex(pc,d0.w),d1
000108D2 4EBB 1000                  		jsr	Brick_TypeIndex(pc,d1.w)
000108D6 323C 001B                  		move.w	#$1B,d1
000108DA 343C 0010                  		move.w	#$10,d2
000108DE 363C 0011                  		move.w	#$11,d3
000108E2 3828 0008                  		move.w	obX(a0),d4
000108E6 6100 0000                  		bsr.w	SolidObject
000108EA                            
000108EA                            	@chkdel:
00010908 6000 EC74                  			bra.w	DisplaySprite
0001090C                            ; ===========================================================================
0001090C 0000                       Brick_TypeIndex:dc.w Brick_Type00-Brick_TypeIndex
0001090E 0000                       		dc.w Brick_Type01-Brick_TypeIndex
00010910 0000                       		dc.w Brick_Type02-Brick_TypeIndex
00010912 0000                       		dc.w Brick_Type03-Brick_TypeIndex
00010914 0000                       		dc.w Brick_Type04-Brick_TypeIndex
00010916                            ; ===========================================================================
00010916                            
00010916                            Brick_Type00:
00010916 4E75                       		rts	
00010918                            ; ===========================================================================
00010918                            
00010918                            Brick_Type02:
00010918 3038 D008                  		move.w	(v_player+obX).w,d0
0001091C 9068 0008                  		sub.w	obX(a0),d0
00010920 6400                       		bcc.s	loc_E888
00010922 4440                       		neg.w	d0
00010924                            
00010924                            loc_E888:
00010924 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00010928 6400                       		bcc.s	Brick_Type01	; if not, resume wobbling
0001092A 117C 0003 0028             		move.b	#3,obSubtype(a0)	; if yes, make the block fall
00010930                            
00010930                            Brick_Type01:
00010930 7000                       		moveq	#0,d0
00010932 1038 FE74                  		move.b	(v_oscillate+$16).w,d0
00010936 0828 0003 0028             		btst	#3,obSubtype(a0)
0001093C 6700                       		beq.s	loc_E8A8
0001093E 4440                       		neg.w	d0
00010940 0640 0010                  		addi.w	#$10,d0
00010944                            
00010944                            loc_E8A8:
00010944 3228 0030                  		move.w	brick_origY(a0),d1
00010948 9240                       		sub.w	d0,d1
0001094A 3141 000C                  		move.w	d1,obY(a0)	; update the block's position to make it wobble
0001094E 4E75                       		rts	
00010950                            ; ===========================================================================
00010950                            
00010950                            Brick_Type03:
00010950 6100 EC18                  		bsr.w	SpeedToPos
00010954 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase falling speed
0001095A 6100 0000                  		bsr.w	ObjFloorDist
0001095E 4A41                       		tst.w	d1		; has the block	hit the	floor?
00010960 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
00010964 D368 000C                  		add.w	d1,obY(a0)
00010968 4268 0012                  		clr.w	obVelY(a0)	; stop the block falling
0001096C 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010972 117C 0004 0028             		move.b	#4,obSubtype(a0)
00010978 3011                       		move.w	(a1),d0
0001097A 0240 03FF                  		andi.w	#$3FF,d0
0001097E 0C40 016A                  			cmpi.w	#$16A,d0
00010982 6400                       		bcc.s	locret_E8EE
00010984 117C 0000 0028             		move.b	#0,obSubtype(a0)
0001098A                            
0001098A                            locret_E8EE:
0001098A 4E75                       		rts	
0001098C                            ; ===========================================================================
0001098C                            
0001098C                            Brick_Type04:
0001098C 7000                       		moveq	#0,d0
0001098E 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
00010992 E648                       		lsr.w	#3,d0
00010994 3228 0030                  		move.w	brick_origY(a0),d1
00010998 9240                       		sub.w	d0,d1
0001099A 3141 000C                  		move.w	d1,obY(a0)	; make the block wobble
0001099E 4E75                       		rts	
0001099E 4E75                       		rts	
000109A0                            Map_Brick:	include	"_maps\MZ Bricks.asm"
000109A0                            ; ---------------------------------------------------------------------------
000109A0                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
000109A0                            ; ---------------------------------------------------------------------------
000109A0                            Map_Brick_internal:
000109A0 0000                       		dc.w @brick-Map_Brick_internal
000109A2 01                         @brick:		dc.b 1
000109A3 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
000109A8                            		even
000109A8                            		even
000109A8                            
000109A8                            		include	"_incObj\12 Light.asm"
000109A8                            ; ---------------------------------------------------------------------------
000109A8                            ; Object 12 - lamp (SYZ)
000109A8                            ; ---------------------------------------------------------------------------
000109A8                            
000109A8                            SpinningLight:
000109A8 7000                       		moveq	#0,d0
000109AA 1028 0024                  		move.b	obRoutine(a0),d0
000109AE 323B 0000                  		move.w	Light_Index(pc,d0.w),d1
000109B2 4EFB 1000                  		jmp	Light_Index(pc,d1.w)
000109B6                            ; ===========================================================================
000109B6 0000                       Light_Index:	dc.w Light_Main-Light_Index
000109B8 0000                       		dc.w Light_Animate-Light_Index
000109BA                            ; ===========================================================================
000109BA                            
000109BA                            Light_Main:	; Routine 0
000109BA 5428 0024                  		addq.b	#2,obRoutine(a0)
000109BE 217C 0000 0000 0004        		move.l	#Map_Light,obMap(a0)
000109C6 317C 0000 0002             		move.w	#0,obGfx(a0)
000109CC 117C 0004 0001             		move.b	#4,obRender(a0)
000109D2 117C 0010 0014             		move.b	#$10,obActWid(a0)
000109D8 317C 0300 0018             		move.w	#$300,obPriority(a0)
000109DE                            
000109DE                            Light_Animate:	; Routine 2
000109DE 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000109E2 6A00                       		bpl.s	@chkdel
000109E4 117C 000C 001E             		move.b	#12,obTimeFrame(a0)
000109EA 5228 001A                  		addq.b	#1,obFrame(a0)
000109EE 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
000109F4 6500                       		bcs.s	@chkdel
000109F6 117C 0000 001A             		move.b	#0,obFrame(a0)
000109FC                            
000109FC                            	@chkdel:
00010A1A 6000 EB62                  		bra.w	DisplaySprite
00010A1A 6000 EB62                  		bra.w	DisplaySprite
00010A1E                            Map_Light	include	"_maps\Light.asm"
00010A1E                            ; --------------------------------------------------------------------------------
00010A1E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010A1E                            ; --------------------------------------------------------------------------------
00010A1E                            
00010A1E                            SME_FBl1X:	
00010A1E 0000 0000                  		dc.w SME_FBl1X_8-SME_FBl1X, SME_FBl1X_22-SME_FBl1X	
00010A22 0000 0000                  		dc.w SME_FBl1X_3C-SME_FBl1X, SME_FBl1X_5B-SME_FBl1X	
00010A26 05                         SME_FBl1X_8:	dc.b 5	
00010A27 E004 006D 00               		dc.b $E0, 4, 0, $6D, 0	
00010A2C E80C 006F F8               		dc.b $E8, $C, 0, $6F, $F8	
00010A31 F00C 0073 F8               		dc.b $F0, $C, 0, $73, $F8	
00010A36 F800 0090 00               		dc.b $F8, 0, 0, $90, 0	
00010A3B F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010A40 05                         SME_FBl1X_22:	dc.b 5	
00010A41 E004 0077 00               		dc.b $E0, 4, 0, $77, 0	
00010A46 E804 0079 00               		dc.b $E8, 4, 0, $79, 0	
00010A4B E800 007B 10               		dc.b $E8, 0, 0, $7B, $10	
00010A50 F008 007C F8               		dc.b $F0, 8, 0, $7C, $F8	
00010A55 F804 0091 00               		dc.b $F8, 4, 0, $91, 0	
00010A5A 06                         SME_FBl1X_3C:	dc.b 6	
00010A5B E000 007F 00               		dc.b $E0, 0, 0, $7F, 0	
00010A60 E000 0078 08               		dc.b $E0, 0, 0, $78, 8	
00010A65 E80C 0080 F8               		dc.b $E8, $C, 0, $80, $F8	
00010A6A F00C 0084 F8               		dc.b $F0, $C, 0, $84, $F8	
00010A6F F800 0093 08               		dc.b $F8, 0, 0, $93, 8	
00010A74 F800 0091 00               		dc.b $F8, 0, 0, $91, 0	
00010A79 05                         SME_FBl1X_5B:	dc.b 5	
00010A7A E004 0088 00               		dc.b $E0, 4, 0, $88, 0	
00010A7F E808 008A F8               		dc.b $E8, 8, 0, $8A, $F8	
00010A84 F008 008D 00               		dc.b $F0, 8, 0, $8D, 0	
00010A89 F800 0094 00               		dc.b $F8, 0, 0, $94, 0	
00010A8E F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010A94 00                         		even
00010A94 00                         		even
00010A94                            		include	"_incObj\47 Bumper.asm"
00010A94                            ; ---------------------------------------------------------------------------
00010A94                            ; Object 47 - pinball bumper (SYZ)
00010A94                            ; ---------------------------------------------------------------------------
00010A94                            
00010A94                            Bumper:
00010A94 7000                       		moveq	#0,d0
00010A96 1028 0024                  		move.b	obRoutine(a0),d0
00010A9A 323B 0000                  		move.w	Bump_Index(pc,d0.w),d1
00010A9E 4EFB 1000                  		jmp	Bump_Index(pc,d1.w)
00010AA2                            ; ===========================================================================
00010AA2 0000                       Bump_Index:	dc.w Bump_Main-Bump_Index
00010AA4 0000                       		dc.w Bump_Hit-Bump_Index
00010AA6                            ; ===========================================================================
00010AA6                            
00010AA6                            Bump_Main:	; Routine 0
00010AA6 5428 0024                  		addq.b	#2,obRoutine(a0)
00010AAA 217C 0000 0000 0004        		move.l	#Map_Bump,obMap(a0)
00010AB2 317C 0380 0002             		move.w	#$380,obGfx(a0)
00010AB8 117C 0004 0001             		move.b	#4,obRender(a0)
00010ABE 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010AC4 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010ACA 117C 00D7 0020             		move.b	#$D7,obColType(a0)
00010AD0                            
00010AD0                            Bump_Hit:	; Routine 2
00010AD0 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	bumper?
00010AD4 6700 0000                  		beq.w	@display	; if not, branch
00010AD8 4228 0021                  		clr.b	obColProp(a0)
00010ADC 43F8 D000                  		lea	(v_player).w,a1
00010AE0 3228 0008                  		move.w	obX(a0),d1
00010AE4 3428 000C                  		move.w	obY(a0),d2
00010AE8 9269 0008                  		sub.w	obX(a1),d1
00010AEC 9469 000C                  		sub.w	obY(a1),d2
00010AF0 4EB9 0000 3F5C             		jsr	(CalcAngle).l
00010AF6 4EB9 0000 3CCA             		jsr	(CalcSine).l
00010AFC C3FC F900                  		muls.w	#-$700,d1
00010B00 E081                       		asr.l	#8,d1
00010B02 3341 0010                  		move.w	d1,obVelX(a1)	; bounce Sonic away
00010B06 C1FC F900                  		muls.w	#-$700,d0
00010B0A E080                       		asr.l	#8,d0
00010B0C 3340 0012                  		move.w	d0,obVelY(a1)	; bounce Sonic away
00010B10 08E9 0001 0022             		bset	#1,obStatus(a1)
00010B16 08A9 0004 0022             		bclr	#4,obStatus(a1)
00010B1C 08A9 0005 0022             		bclr	#5,obStatus(a1)
00010B22 4229 003C                  		clr.b	$3C(a1)
00010B26 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "hit" animation
00010B36 45F8 FC00                  		lea	(v_objstate).w,a2
00010B3A 7000                       		moveq	#0,d0
00010B3C 1028 0023                  		move.b	obRespawnNo(a0),d0
00010B40 6700                       		beq.s	@addscore
00010B42 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit 10 times?
00010B48 6400                       		bcc.s	@display	; if yes, Sonic	gets no	points
00010B4A 5232 0002                  		addq.b	#1,2(a2,d0.w)
00010B4E                            
00010B4E                            	@addscore:
00010B4E 7001                       		moveq	#1,d0
00010B50 4EB9 0000 0000             		jsr	(AddPoints).l	; add 10 to score
00010B56 6100 EFC0                  		bsr.w	FindFreeObj
00010B5A 6600                       		bne.s	@display
00010B5C 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00010B60 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010B66 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010B6C 137C 0004 001A             		move.b	#4,obFrame(a1)
00010B72                            
00010B72                            	@display:
00010B72 43F9 0000 0000             		lea	(Ani_Bump).l,a1
00010B78 6100 BABA                  		bsr.w	AnimateSprite
00010B98 6000 E9E4                  		bra.w	DisplaySprite
00010B9C                            ; ===========================================================================
00010B9C                            
00010B9C                            @resetcount:
00010B9C 45F8 FC00                  		lea	(v_objstate).w,a2
00010BA0 7000                       		moveq	#0,d0
00010BA2 1028 0023                  		move.b	obRespawnNo(a0),d0
00010BA6 6700                       		beq.s	@delete
00010BA8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010BAE                            
00010BAE                            	@delete:
00010BAE 6000 EA0E                  		bra.w	DeleteObject
00010BAE 6000 EA0E                  		bra.w	DeleteObject
00010BB2                            		include	"_anim\Bumper.asm"
00010BB2                            ; ---------------------------------------------------------------------------
00010BB2                            ; Animation script - flamethrower (SBZ)
00010BB2                            ; ---------------------------------------------------------------------------
00010BB2 0000                       Ani_Bump:	dc.w byte_EAF4-Ani_Bump
00010BB4 0000                       		dc.w byte_EAF8-Ani_Bump
00010BB6 0F00 FF                    byte_EAF4:	dc.b $F, 0, afEnd
00010BBA 00                         		even
00010BBA 0301 0201 02FD 00          byte_EAF8:	dc.b 3,	1, 2, 1, 2, afChange, 0
00010BC2 00                         		even
00010BC2 00                         		even
00010BC2                            Map_Bump:	include	"_maps\Bumper.asm"
00010BC2                            ; ---------------------------------------------------------------------------
00010BC2                            ; Sprite mappings - pinball bumper (SYZ)
00010BC2                            ; ---------------------------------------------------------------------------
00010BC2                            Map_Bump_internal:
00010BC2 0000                       		dc.w @normal-Map_Bump_internal
00010BC4 0000                       		dc.w @bumped1-Map_Bump_internal
00010BC6 0000                       		dc.w @bumped2-Map_Bump_internal
00010BC8 02                         @normal:	dc.b 2
00010BC9 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
00010BCE F007 0800 00               		dc.b $F0, 7, 8,	0, 0
00010BD3 02                         @bumped1:	dc.b 2
00010BD4 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
00010BD9 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
00010BDE 02                         @bumped2:	dc.b 2
00010BDF F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
00010BE4 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
00010BEA 00                         		even
00010BEA 00                         		even
00010BEA                            
00010BEA                            		include	"_incObj\0D Signpost.asm" ; includes "GotThroughAct" subroutine
00010BEA                            ; ---------------------------------------------------------------------------
00010BEA                            ; Object 0D - signpost at the end of a level
00010BEA                            ; ---------------------------------------------------------------------------
00010BEA                            
00010BEA                            Signpost:
00010BEA 7000                       		moveq	#0,d0
00010BEC 1028 0024                  		move.b	obRoutine(a0),d0
00010BF0 323B 0000                  		move.w	Sign_Index(pc,d0.w),d1
00010BF4 4EBB 1000                  		jsr	Sign_Index(pc,d1.w)
00010BF8 43F9 0000 0000             		lea	(Ani_Sign).l,a1
00010BFE 6100 BA34                  		bsr.w	AnimateSprite
00010C02 6100 E97A                  		bsr.w	DisplaySprite
00010C24 4E75                       		rts	
00010C26                            ; ===========================================================================
00010C26 0000                       Sign_Index:	dc.w Sign_Main-Sign_Index
00010C28 0000                       		dc.w Sign_Touch-Sign_Index
00010C2A 0000                       		dc.w Sign_Spin-Sign_Index
00010C2C 0000                       		dc.w Sign_SonicRun-Sign_Index
00010C2E 0000                       		dc.w Sign_Exit-Sign_Index
00010C30                            
00010C30 =00000030                  spintime:	equ $30		; time for signpost to spin
00010C30 =00000032                  sparkletime:	equ $32		; time between sparkles
00010C30 =00000034                  sparkle_id:	equ $34		; counter to keep track of sparkles
00010C30                            ; ===========================================================================
00010C30                            
00010C30                            Sign_Main:	; Routine 0
00010C30 5428 0024                  		addq.b	#2,obRoutine(a0)
00010C34 217C 0000 0000 0004        		move.l	#Map_Sign,obMap(a0)
00010C3C 317C 0680 0002             		move.w	#$680,obGfx(a0)
00010C42 117C 0004 0001             		move.b	#4,obRender(a0)
00010C48 117C 0018 0014             		move.b	#$18,obActWid(a0)
00010C4E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010C54                            
00010C54                            Sign_Touch:	; Routine 2
00010C54 3038 D008                  		move.w	(v_player+obX).w,d0
00010C58 9068 0008                  		sub.w	obX(a0),d0
00010C5C 6500                       		bcs.s	@notouch
00010C5E 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00010C62 6400                       		bcc.s	@notouch	; if not, branch
00010C64 11FC 0001 F7AA             		move.b  #1,($FFFFF7AA).w ; Lock the screen
00010C74 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010C78 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w ; lock screen position
00010C7E 5428 0024                  		addq.b	#2,obRoutine(a0)
00010C82 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is level MZ3?
00010C88 6700                       		beq.s	@normal
00010C8A 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010C90                            
00010C90                            	@normal:
00010C90 4A38 F5C3                  		tst.b	(f_emeraldm).w
00010C94 6700                       		beq.s	@notouch
00010C96 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
00010CA4                            
00010CA4                            	@notouch:
00010CA4 4E75                       		rts	
00010CA6                            	
00010CA6                            ; ===========================================================================
00010CA6                            
00010CA6                            Sign_Spin:	; Routine 4
00010CA6 4238 FE19                  		clr.b (Super_Sonic_Flag).w ; Revert Sonic to Normal
00010CAA 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w
00010CB0 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w
00010CB6 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w
00010CBC 5368 0030                  		subq.w	#1,spintime(a0)	; subtract 1 from spin time
00010CC0 6A00                       		bpl.s	@chksparkle	; if time remains, branch
00010CC2 317C 003C 0030             		move.w	#60,spintime(a0) ; set spin cycle time to 1 second
00010CC8 5228 001C                  		addq.b	#1,obAnim(a0)	; next spin cycle
00010CCC 0C28 0003 001C             		cmpi.b	#3,obAnim(a0)	; have 3 spin cycles completed?
00010CD2 6600                       		bne.s	@chksparkle	; if not, branch
00010CD4 5428 0024                  		addq.b	#2,obRoutine(a0)
00010CD8                            
00010CD8                            	@chksparkle:
00010CD8 5368 0032                  		subq.w	#1,sparkletime(a0) ; subtract 1 from time delay
00010CDC 6A00                       		bpl.s	@fail		; if time remains, branch
00010CDE 317C 000B 0032             		move.w	#$B,sparkletime(a0) ; set time between sparkles to $B frames
00010CE4 7000                       		moveq	#0,d0
00010CE6 1028 0034                  		move.b	sparkle_id(a0),d0 ; get sparkle id
00010CEA 5428 0034                  		addq.b	#2,sparkle_id(a0) ; increment sparkle counter
00010CEE 0228 000E 0034             		andi.b	#$E,sparkle_id(a0)
00010CF4 45FB 0000                  		lea	Sign_SparkPos(pc,d0.w),a2 ; load sparkle position data
00010CF8 6100 EE1E                  		bsr.w	FindFreeObj
00010CFC 6600                       		bne.s	@fail
00010CFE 12BC 0025                  		move.b	#id_Rings,0(a1)	; load rings object
00010D02 137C 0006 0024             		move.b	#id_Ring_Sparkle,obRoutine(a1) ; jump to ring sparkle subroutine
00010D08 101A                       		move.b	(a2)+,d0
00010D0A 4880                       		ext.w	d0
00010D0C D068 0008                  		add.w	obX(a0),d0
00010D10 3340 0008                  		move.w	d0,obX(a1)
00010D14 101A                       		move.b	(a2)+,d0
00010D16 4880                       		ext.w	d0
00010D18 D068 000C                  		add.w	obY(a0),d0
00010D1C 3340 000C                  		move.w	d0,obY(a1)
00010D20 237C 0000 BB86 0004        		move.l	#Map_Ring,obMap(a1)
00010D28 337C 2798 0002             		move.w	#$2798,obGfx(a1)
00010D2E 137C 0004 0001             		move.b	#4,obRender(a1)
00010D34 337C 0100 0018             		move.w	#$100,obPriority(a1)
00010D3A 137C 0008 0014             		move.b	#8,obActWid(a1)
00010D40                            
00010D40                            	@fail:
00010D40 4E75                       		rts	
00010D42                            ; ===========================================================================
00010D42 E8F0                       Sign_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00010D44 0808                       		dc.b	8,   8
00010D46 F000                       		dc.b -$10,   0
00010D48 18F8                       		dc.b  $18,  -8
00010D4A 00F8                       		dc.b	0,  -8
00010D4C 1000                       		dc.b  $10,   0
00010D4E E808                       		dc.b -$18,   8
00010D50 1810                       		dc.b  $18, $10
00010D52                            ; ===========================================================================
00010D52                            
00010D52                            Sign_SonicRun:	; Routine 6
00010D52 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00010D56 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
00010D5A 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010D60                            		
00010D60                            
00010D60                            	loc_EC86:
00010D60 5428 0024                  		addq.b	#2,obRoutine(a0)
00010D64                            
00010D64                            ; ---------------------------------------------------------------------------
00010D64                            ; Subroutine to	set up bonuses at the end of an	act
00010D64                            ; ---------------------------------------------------------------------------
00010D64                            
00010D64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010D64                            
00010D64                            
00010D64                            GotThroughAct:
00010D64 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00010D68 6600                       		bne.s	locret_ECEE
00010D6A 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00010D70 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00010D74 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00010D78 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010D7C 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00010D82 7000                       		moveq	#plcid_TitleCard,d0
00010D84 4EB9 0000 176C             		jsr	(NewPLC).l	; load title card patterns
00010D8A 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00010D90 7000                       		moveq	#0,d0
00010D92 1038 FE23                  		move.b	(v_timemin).w,d0
00010D96 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010D9A 7200                       		moveq	#0,d1
00010D9C 1238 FE24                  		move.b	(v_timesec).w,d1
00010DA0 D041                       		add.w	d1,d0		; add up your time
00010DA2 80FC 000F                  		divu.w	#15,d0		; divide by 15
00010DA6 7214                       		moveq	#$14,d1
00010DA8 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010DAA 6500                       		bcs.s	hastimebonus	; if not, branch
00010DAC 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010DAE                            
00010DAE                            	hastimebonus:
00010DAE D040                       		add.w	d0,d0
00010DB0 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),(v_timebonus).w ; set time bonus
00010DB6 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00010DBA C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00010DBE 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00010DCC 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00010DD2                            
00010DD2                            locret_ECEE:
00010DD2 4E75                       		rts	
00010DD4                            
00010DD4                            ; End of function GotThroughAct
00010DD4                            
00010DD4                            ; ===========================================================================
00010DD4 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00010DE8 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010DFE                            ; ===========================================================================
00010DFE                            
00010DFE                            Sign_Exit:	; Routine 8
00010DFE 4E75                       		rts	
00010E00                            
00010E00                            ; ---------------------------------------------------------------------------
00010E00                            ; Subroutine to	set up bonuses at the end of an	zone
00010E00                            ; ---------------------------------------------------------------------------
00010E00                            
00010E00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010E00                            
00010E00                            
00010E00                            GotThroughAct1:
00010E00 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00010E04 6600                       		bne.s	locret_ECEE1
00010E06 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00010E0C 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00010E10 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00010E14 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010E18 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00010E1E 7000                       		moveq	#plcid_TitleCard,d0
00010E20 4EB9 0000 176C             		jsr	(NewPLC).l	; load title card patterns
00010E26 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00010E2C 7000                       		moveq	#0,d0
00010E2E 1038 FE23                  		move.b	(v_timemin).w,d0
00010E32 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010E36 7200                       		moveq	#0,d1
00010E38 1238 FE24                  		move.b	(v_timesec).w,d1
00010E3C D041                       		add.w	d1,d0		; add up your time
00010E3E 80FC 000F                  		divu.w	#15,d0		; divide by 15
00010E42 7214                       		moveq	#$14,d1
00010E44 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010E46 6500 0000                  		bcs.w	hastimebonus2	; if not, branch
00010E4A 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010E4C                            
00010E4C                            	hastimebonus2:
00010E4C D040                       		add.w	d0,d0
00010E4E 31FB 0000 F7D2             		move.w	TimeBonuses1(pc,d0.w),(v_timebonus).w ; set time bonus
00010E54 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00010E58 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00010E5C 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00010E6A 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00010E70                            
00010E70                            locret_ECEE1:
00010E70 4E75                       		rts	
00010E72                            
00010E72                            ; End of function GotThroughAct		
00010E72                            
00010E72 1388 1388 03E8 01F4 0190+  TimeBonuses1:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00010E86 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010E86 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010E9C                            		include	"_anim\Signpost.asm"
00010E9C                            ; ---------------------------------------------------------------------------
00010E9C                            ; Animation script - signpost
00010E9C                            ; ---------------------------------------------------------------------------
00010E9C 0000                       Ani_Sign:	dc.w @eggman-Ani_Sign
00010E9E 0000                       		dc.w @spin1-Ani_Sign
00010EA0 0000                       		dc.w @spin2-Ani_Sign
00010EA2 0000                       		dc.w @sonic-Ani_Sign
00010EA4 0F00 FF                    @eggman:	dc.b $F, 0, afEnd
00010EA8 00                         		even
00010EA8 0100 0102 03FF             @spin1:		dc.b 1,	0, 1, 2, 3, afEnd
00010EAE 0104 0102 03FF             @spin2:		dc.b 1,	4, 1, 2, 3, afEnd
00010EB4 0F04 FF                    @sonic:		dc.b $F, 4, afEnd
00010EB8 00                         		even
00010EB8 00                         		even
00010EB8                            Map_Sign:	include	"_maps\Signpost.asm"
00010EB8                            ; --------------------------------------------------------------------------------
00010EB8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010EB8                            ; --------------------------------------------------------------------------------
00010EB8                            
00010EB8                            SME_KvSue:	
00010EB8 0000 0000                  		dc.w SME_KvSue_A-SME_KvSue, SME_KvSue_1F-SME_KvSue	
00010EBC 0000 0000                  		dc.w SME_KvSue_2F-SME_KvSue, SME_KvSue_3F-SME_KvSue	
00010EC0 0000                       		dc.w SME_KvSue_4F-SME_KvSue	
00010EC2 04                         SME_KvSue_A:	dc.b 4	
00010EC3 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8	
00010EC8 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0	
00010ECD 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00010ED2 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010ED7 03                         SME_KvSue_1F:	dc.b 3	
00010ED8 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0	
00010EDD 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00010EE2 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010EE7 03                         SME_KvSue_2F:	dc.b 3	
00010EE8 F003 001C FC               		dc.b $F0, 3, 0, $1C, $FC	
00010EED 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
00010EF2 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010EF7 03                         SME_KvSue_3F:	dc.b 3	
00010EF8 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0	
00010EFD 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
00010F02 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010F07 04                         SME_KvSue_4F:	dc.b 4	
00010F08 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8	
00010F0D F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0	
00010F12 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00010F17 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010F1C                            		even
00010F1C                            		even
00010F1C                            
00010F1C                            		include	"_incObj\4C & 4D Lava Geyser Maker.asm"
00010F1C                            ; ---------------------------------------------------------------------------
00010F1C                            ; Object 4C - lava geyser / lavafall producer (MZ)
00010F1C                            ; ---------------------------------------------------------------------------
00010F1C                            
00010F1C                            GeyserMaker:
00010F1C 7000                       		moveq	#0,d0
00010F1E 1028 0024                  		move.b	obRoutine(a0),d0
00010F22 323B 0000                  		move.w	GMake_Index(pc,d0.w),d1
00010F26 4EBB 1000                  		jsr	GMake_Index(pc,d1.w)
00010F2A 6000 0000                  		bra.w	Geyser_ChkDel
00010F2E                            ; ===========================================================================
00010F2E 0000                       GMake_Index:	dc.w GMake_Main-GMake_Index
00010F30 0000                       		dc.w GMake_Wait-GMake_Index
00010F32 0000                       		dc.w GMake_ChkType-GMake_Index
00010F34 0000                       		dc.w GMake_MakeLava-GMake_Index
00010F36 0000                       		dc.w GMake_Display-GMake_Index
00010F38 0000                       		dc.w GMake_Delete-GMake_Index
00010F3A                            
00010F3A =00000034                  gmake_time:	equ $34		; time delay (2 bytes)
00010F3A =00000032                  gmake_timer:	equ $32		; current time remaining (2 bytes)
00010F3A =0000003C                  gmake_parent:	equ $3C		; address of parent object
00010F3A                            ; ===========================================================================
00010F3A                            
00010F3A                            GMake_Main:	; Routine 0
00010F3A 5428 0024                  		addq.b	#2,obRoutine(a0)
00010F3E 217C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a0)
00010F46 317C E3A8 0002             		move.w	#$E3A8,obGfx(a0)
00010F4C 117C 0004 0001             		move.b	#4,obRender(a0)
00010F52 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010F58 117C 0038 0014             		move.b	#$38,obActWid(a0)
00010F5E 317C 0078 0034             		move.w	#120,gmake_time(a0) ; set time delay to 2 seconds
00010F64                            
00010F64                            GMake_Wait:	; Routine 2
00010F64 5368 0032                  		subq.w	#1,gmake_timer(a0) ; decrement timer
00010F68 6A00                       		bpl.s	@cancel		; if time remains, branch
00010F6A                            
00010F6A 3168 0034 0032             		move.w	gmake_time(a0),gmake_timer(a0) ; reset timer
00010F70 3038 D00C                  		move.w	(v_player+obY).w,d0
00010F74 3228 000C                  		move.w	obY(a0),d1
00010F78 B041                       		cmp.w	d1,d0
00010F7A 6400                       		bcc.s	@cancel
00010F7C 0441 0170                  		subi.w	#$170,d1
00010F80 B041                       		cmp.w	d1,d0
00010F82 6500                       		bcs.s	@cancel
00010F84 5428 0024                  		addq.b	#2,obRoutine(a0) ; if Sonic is within range, goto GMake_ChkType
00010F88                            
00010F88                            	@cancel:
00010F88 4E75                       		rts	
00010F8A                            ; ===========================================================================
00010F8A                            
00010F8A                            GMake_MakeLava:	; Routine 6
00010F8A 5428 0024                  		addq.b	#2,obRoutine(a0)
00010F8E 6100 EB9E                  		bsr.w	FindNextFreeObj
00010F92 6600                       		bne.s	@fail
00010F94 12BC 004D                  		move.b	#id_LavaGeyser,0(a1) ; load lavafall object
00010F98 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010F9E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010FA4 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00010FAA 2348 003C                  		move.l	a0,gmake_parent(a1)
00010FAE                            
00010FAE                            	@fail:
00010FAE 117C 0001 001C             		move.b	#1,obAnim(a0)
00010FB4 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 0 (geyser) ?
00010FB8 6700                       		beq.s	@isgeyser	; if yes, branch
00010FBA 117C 0004 001C             		move.b	#4,obAnim(a0)
00010FC0 6000                       		bra.s	GMake_Display
00010FC2                            ; ===========================================================================
00010FC2                            
00010FC2                            	@isgeyser:
00010FC2 2268 003C                  		movea.l	gmake_parent(a0),a1 ; get parent object address
00010FC6 08E9 0001 0022             		bset	#1,obStatus(a1)
00010FCC 337C FA80 0012             		move.w	#-$580,obVelY(a1)
00010FD2 6000                       		bra.s	GMake_Display
00010FD4                            ; ===========================================================================
00010FD4                            
00010FD4                            GMake_ChkType:	; Routine 4
00010FD4 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 (geyser) ?
00010FD8 6700                       		beq.s	GMake_Display	; if yes, branch
00010FDA 5428 0024                  		addq.b	#2,obRoutine(a0)
00010FDE 4E75                       		rts	
00010FE0                            ; ===========================================================================
00010FE0                            
00010FE0                            GMake_Display:	; Routine 8
00010FE0 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
00010FE6 6100 B64C                  		bsr.w	AnimateSprite
00010FEA 6100 E592                  		bsr.w	DisplaySprite
00010FEE 4E75                       		rts	
00010FF0                            ; ===========================================================================
00010FF0                            
00010FF0                            GMake_Delete:	; Routine $A
00010FF0 117C 0000 001C             		move.b	#0,obAnim(a0)
00010FF6 117C 0002 0024             		move.b	#2,obRoutine(a0)
00010FFC 4A28 0028                  		tst.b	obSubtype(a0)
00011000 6700 E5BC                  		beq.w	DeleteObject
00011004 4E75                       		rts	
00011006                            
00011006                            
00011006                            ; ---------------------------------------------------------------------------
00011006                            ; Object 4D - lava geyser / lavafall (MZ)
00011006                            ; ---------------------------------------------------------------------------
00011006                            
00011006                            LavaGeyser:
00011006 7000                       		moveq	#0,d0
00011008 1028 0024                  		move.b	obRoutine(a0),d0
0001100C 323B 0000                  		move.w	Geyser_Index(pc,d0.w),d1
00011010 4EBB 1000                  		jsr	Geyser_Index(pc,d1.w)
00011014 6000 E568                  		bra.w	DisplaySprite
00011018                            ; ===========================================================================
00011018 0000                       Geyser_Index:	dc.w Geyser_Main-Geyser_Index
0001101A 0000                       		dc.w Geyser_Action-Geyser_Index
0001101C 0000                       		dc.w loc_EFFC-Geyser_Index
0001101E 0000                       		dc.w Geyser_Delete-Geyser_Index
00011020                            
00011020 FB00 0000                  Geyser_Speeds:	dc.w $FB00, 0
00011024                            ; ===========================================================================
00011024                            
00011024                            Geyser_Main:	; Routine 0
00011024 5428 0024                  		addq.b	#2,obRoutine(a0)
00011028 3168 000C 0030             		move.w	obY(a0),$30(a0)
0001102E 4A28 0028                  		tst.b	obSubtype(a0)
00011032 6700                       		beq.s	@isgeyser
00011034 0468 0250 000C             		subi.w	#$250,obY(a0)
0001103A                            
0001103A                            	@isgeyser:
0001103A 7000                       		moveq	#0,d0
0001103C 1028 0028                  		move.b	obSubtype(a0),d0
00011040 D040                       		add.w	d0,d0
00011042 317B 00DC 0012             		move.w	Geyser_Speeds(pc,d0.w),obVelY(a0)
00011048 2248                       		movea.l	a0,a1
0001104A 7201                       		moveq	#1,d1
0001104C 6100                       		bsr.s	@makelava
0001104E 6000                       		bra.s	@activate
00011050                            ; ===========================================================================
00011050                            
00011050                            	@loop:
00011050 6100 EADC                  		bsr.w	FindNextFreeObj
00011054 6600                       		bne.s	@fail
00011056                            
00011056                            @makelava:
00011056 12BC 004D                  		move.b	#id_LavaGeyser,0(a1)
0001105A 237C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a1)
00011062 337C 63A8 0002             		move.w	#$63A8,obGfx(a1)
00011068 137C 0004 0001             		move.b	#4,obRender(a1)
0001106E 137C 0020 0014             		move.b	#$20,obActWid(a1)
00011074 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001107A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00011080 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00011086 337C 0080 0018             		move.w	#$80,obPriority(a1)
0001108C 137C 0005 001C             		move.b	#5,obAnim(a1)
00011092 4A28 0028                  		tst.b	obSubtype(a0)
00011096 6700                       		beq.s	@fail
00011098 137C 0002 001C             		move.b	#2,obAnim(a1)
0001109E                            
0001109E                            	@fail:
0001109E 51C9 FFB0                  		dbf	d1,@loop
000110A2 4E75                       		rts	
000110A4                            ; ===========================================================================
000110A4                            
000110A4                            @activate:
000110A4 0669 0060 000C             		addi.w	#$60,obY(a1)
000110AA 3368 0030 0030             		move.w	$30(a0),$30(a1)
000110B0 0669 0060 0030             		addi.w	#$60,$30(a1)
000110B6 137C 0093 0020             		move.b	#$93,obColType(a1)
000110BC 137C 0080 0016             		move.b	#$80,obHeight(a1)
000110C2 08E9 0004 0001             		bset	#4,obRender(a1)
000110C8 5829 0024                  		addq.b	#4,obRoutine(a1)
000110CC 2348 003C                  		move.l	a0,$3C(a1)
000110D0 4A28 0028                  		tst.b	obSubtype(a0)
000110D4 6700                       		beq.s	@sound
000110D6 7200                       		moveq	#0,d1
000110D8 6100 FF76                  		bsr.w	@loop
000110DC 5429 0024                  		addq.b	#2,obRoutine(a1)
000110E0 08E9 0004 0002             		bset	#4,obGfx(a1)
000110E6 0669 0100 000C             		addi.w	#$100,obY(a1)
000110EC 337C 0000 0018             		move.w	#0,obPriority(a1)
000110F2 3368 0030 0030             		move.w	$30(a0),$30(a1)
000110F8 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
000110FE 117C 0000 0028             		move.b	#0,obSubtype(a0)
00011104                            
00011104                            	@sound:
0001110E                            
0001110E                            Geyser_Action:	; Routine 2
0001110E 7000                       		moveq	#0,d0
00011110 1028 0028                  		move.b	obSubtype(a0),d0
00011114 D040                       		add.w	d0,d0
00011116 323B 0000                  		move.w	Geyser_Types(pc,d0.w),d1
0001111A 4EBB 1000                  		jsr	Geyser_Types(pc,d1.w)
0001111E 6100 E44A                  		bsr.w	SpeedToPos
00011122 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
00011128 6100 B50A                  		bsr.w	AnimateSprite
0001112C                            
0001112C                            Geyser_ChkDel:
0001114A 4E75                       		rts	
0001114C                            ; ===========================================================================
0001114C 0000                       Geyser_Types:	dc.w Geyser_Type00-Geyser_Types
0001114E 0000                       		dc.w Geyser_Type01-Geyser_Types
00011150                            ; ===========================================================================
00011150                            
00011150                            Geyser_Type00:
00011150 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
00011156 3028 0030                  		move.w	$30(a0),d0
0001115A B068 000C                  		cmp.w	obY(a0),d0
0001115E 6400                       		bcc.s	locret_EFDA
00011160 5828 0024                  		addq.b	#4,obRoutine(a0)
00011164 2268 003C                  		movea.l	$3C(a0),a1
00011168 137C 0003 001C             		move.b	#3,obAnim(a1)
0001116E                            
0001116E                            locret_EFDA:
0001116E 4E75                       		rts	
00011170                            ; ===========================================================================
00011170                            
00011170                            Geyser_Type01:
00011170 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
00011176 3028 0030                  		move.w	$30(a0),d0
0001117A B068 000C                  		cmp.w	obY(a0),d0
0001117E 6400                       		bcc.s	locret_EFFA
00011180 5828 0024                  		addq.b	#4,obRoutine(a0)
00011184 2268 003C                  		movea.l	$3C(a0),a1
00011188 137C 0001 001C             		move.b	#1,obAnim(a1)
0001118E                            
0001118E                            locret_EFFA:
0001118E 4E75                       		rts	
00011190                            ; ===========================================================================
00011190                            
00011190                            loc_EFFC:	; Routine 4
00011190 2268 003C                  		movea.l	$3C(a0),a1
00011194 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
0001119A 6700 0000                  		beq.w	Geyser_Delete
0001119E 3029 000C                  		move.w	obY(a1),d0
000111A2 0640 0060                  		addi.w	#$60,d0
000111A6 3140 000C                  		move.w	d0,obY(a0)
000111AA 9068 0030                  		sub.w	$30(a0),d0
000111AE 4440                       		neg.w	d0
000111B0 7208                       		moveq	#8,d1
000111B2 0C40 0040                  		cmpi.w	#$40,d0
000111B6 6C00                       		bge.s	loc_F026
000111B8 720B                       		moveq	#$B,d1
000111BA                            
000111BA                            loc_F026:
000111BA 0C40 0080                  		cmpi.w	#$80,d0
000111BE 6F00                       		ble.s	loc_F02E
000111C0 720E                       		moveq	#$E,d1
000111C2                            
000111C2                            loc_F02E:
000111C2 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000111C6 6A00                       		bpl.s	loc_F04C
000111C8 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
000111CE 5228 001B                  		addq.b	#1,obAniFrame(a0)
000111D2 0C28 0002 001B             		cmpi.b	#2,obAniFrame(a0)
000111D8 6500                       		bcs.s	loc_F04C
000111DA 117C 0000 001B             		move.b	#0,obAniFrame(a0)
000111E0                            
000111E0                            loc_F04C:
000111E0 1028 001B                  		move.b	obAniFrame(a0),d0
000111E4 D001                       		add.b	d1,d0
000111E6 1140 001A                  		move.b	d0,obFrame(a0)
000111EA 6000 FF40                  		bra.w	Geyser_ChkDel
000111EE                            ; ===========================================================================
000111EE                            
000111EE                            Geyser_Delete:	; Routine 6
000111EE 6000 E3CE                  		bra.w	DeleteObject
000111EE 6000 E3CE                  		bra.w	DeleteObject
000111F2                            		include	"_incObj\54 Lava Tag.asm"
000111F2                            ; ---------------------------------------------------------------------------
000111F2                            ; Object 54 - invisible	lava tag (MZ)
000111F2                            ; ---------------------------------------------------------------------------
000111F2                            
000111F2                            LavaTag:
000111F2 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)	;TIS
000111F8 6E00 0000                  		bgt	WaterTag	;TIS
000111FC 7000                       		moveq	#0,d0
000111FE 1028 0024                  		move.b	obRoutine(a0),d0
00011202 323B 0000                  		move.w	LTag_Index(pc,d0.w),d1
00011206 4EFB 1000                  		jmp	LTag_Index(pc,d1.w)
0001120A                            ; ===========================================================================
0001120A 0000                       LTag_Index:	dc.w LTag_Main-LTag_Index
0001120C 0000                       		dc.w LTag_ChkDel-LTag_Index
0001120E                            
0001120E 9694 95                    LTag_ColTypes:	dc.b $96, $94, $95
00011212 00                         		even
00011212                            ; ===========================================================================
00011212                            
00011212                            LTag_Main:	; Routine 0
00011212 5428 0024                  		addq.b	#2,obRoutine(a0)
00011216 7000                       		moveq	#0,d0
00011218 1028 0028                  		move.b	obSubtype(a0),d0
0001121C 117B 00F0 0020             		move.b	LTag_ColTypes(pc,d0.w),obColType(a0)
00011222 217C 0000 0000 0004        		move.l	#Map_LTag,obMap(a0)
0001122A 117C 0084 0001             		move.b	#$84,obRender(a0)
00011230                            
00011230                            LTag_ChkDel:	; Routine 2
00011230 3028 0008                  		move.w	obX(a0),d0
00011234 0240 FF80                  		andi.w	#$FF80,d0
00011238 3238 F700                  		move.w	(v_screenposx).w,d1
0001123C 0441 0080                  		subi.w	#$80,d1
00011240 0241 FF80                  		andi.w	#$FF80,d1
00011244 9041                       		sub.w	d1,d0
00011246 6B00 E376                  		bmi.w	DeleteObject
0001124A 0C40 0280                  		cmpi.w	#$280,d0
0001124E 6200 E36E                  		bhi.w	DeleteObject
00011252 4E75                       		rts
00011254                            
00011254                            
00011254                            ; ---------------------------------------------------------------------------
00011254                            ; Object 54a - invisible	water tag (MZ) - TIS
00011254                            ; ---------------------------------------------------------------------------
00011254                            
00011254                            WaterTag:	
00011254 7000                       		moveq	#0,d0
00011256 1028 0024                  		move.b	obRoutine(a0),d0
0001125A 323B 0000                  		move.w	WTag_Index(pc,d0.w),d1
0001125E 4EFB 1000                  		jmp	WTag_Index(pc,d1.w)
00011262                            ; ===========================================================================
00011262 0000                       WTag_Index:	dc.w WTag_Main-WTag_Index
00011264 0000                       		dc.w WTag_ChkDel-WTag_Index
00011266                            
00011266 9694 95                    WTag_ColTypes:	dc.b $96, $94, $95
0001126A 00                         		even
0001126A                            ; ===========================================================================
0001126A                            
0001126A                            
0001126A                            WTag_Main:	; Routine 0
0001126A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001126E 7000                       		moveq	#0,d0
00011270                            		;move.b	obSubtype(a0),d0
00011270                            		;move.b	WTag_ColTypes(pc,d0.w),obColType(a0)
00011270 0400 00F0                  		sub.b	#$F0,d0
00011274 1178 0096 0020             		move.b	$96,obColType(a0)							
0001127A                            		;move.l	#Map_LTag,obMap(a0)
0001127A                            		;move.b	#$84,obRender(a0)
0001127A                            
0001127A                            WTag_ChkDel:	; Routine 2
0001127A 3028 0008                  		move.w	obX(a0),d0
0001127E 0240 FF80                  		andi.w	#$FF80,d0
00011282 3238 F700                  		move.w	(v_screenposx).w,d1
00011286 0441 0080                  		subi.w	#$80,d1
0001128A 0241 FF80                  		andi.w	#$FF80,d1
0001128E 9041                       		sub.w	d1,d0
00011290 6B00 E32C                  		bmi.w	DeleteObject
00011294 0C40 0280                  		cmpi.w	#$280,d0
00011298 6200 E324                  		bhi.w	DeleteObject
0001129C 4E75                       		rts
0001129E                            
0001129E                            
0001129E                            Map_LTag:	include	"_maps\Lava Tag.asm"
0001129E                            ; ---------------------------------------------------------------------------
0001129E                            ; Sprite mappings - invisible lava tag (MZ)
0001129E                            ; ---------------------------------------------------------------------------
0001129E                            Map_LTag_internal:
0001129E 0000                       		dc.w @0-Map_LTag_internal
000112A0 00                         @0:		dc.b 0		; no sprite, because the tag is invisible!
000112A2 00                         		even
000112A2 00                         		even
000112A2                            		include	"_anim\Lava Geyser.asm"
000112A2                            ; ---------------------------------------------------------------------------
000112A2                            ; Animation script - geyser of lava (MZ)
000112A2                            ; ---------------------------------------------------------------------------
000112A2 0000                       Ani_Geyser:	dc.w @bubble1-Ani_Geyser
000112A4 0000                       		dc.w @bubble2-Ani_Geyser
000112A6 0000                       		dc.w @end-Ani_Geyser
000112A8 0000                       		dc.w @bubble3-Ani_Geyser
000112AA 0000                       		dc.w @blank-Ani_Geyser
000112AC 0000                       		dc.w @bubble4-Ani_Geyser
000112AE 0200 0100 0104 0504 05FC   @bubble1:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	afRoutine
000112B8 0202 03FF                  @bubble2:	dc.b 2,	2, 3, afEnd
000112BC 0206 07FF                  @end:		dc.b 2,	6, 7, afEnd
000112C0 0202 0300 0100 01FC        @bubble3:	dc.b 2,	2, 3, 0, 1, 0, 1, afRoutine
000112C8 0F13 FF                    @blank:		dc.b $F, $13, afEnd
000112CC 00                         		even
000112CC 0211 12FF                  @bubble4:	dc.b 2,	$11, $12, afEnd
000112D0                            		even
000112D0                            		even
000112D0                            Map_Geyser:	include	"_maps\Lava Geyser.asm"
000112D0                            ; ---------------------------------------------------------------------------
000112D0                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
000112D0                            ; ---------------------------------------------------------------------------
000112D0                            Map_Geyser_internal:
000112D0 0000                       		dc.w @bubble1-Map_Geyser_internal
000112D2 0000                       		dc.w @bubble2-Map_Geyser_internal
000112D4 0000                       		dc.w @bubble3-Map_Geyser_internal
000112D6 0000                       		dc.w @bubble4-Map_Geyser_internal
000112D8 0000                       		dc.w @bubble5-Map_Geyser_internal
000112DA 0000                       		dc.w @bubble6-Map_Geyser_internal
000112DC 0000                       		dc.w @end1-Map_Geyser_internal
000112DE 0000                       		dc.w @end2-Map_Geyser_internal
000112E0 0000                       		dc.w @medcolumn1-Map_Geyser_internal
000112E2 0000                       		dc.w @medcolumn2-Map_Geyser_internal
000112E4 0000                       		dc.w @medcolumn3-Map_Geyser_internal
000112E6 0000                       		dc.w @shortcolumn1-Map_Geyser_internal
000112E8 0000                       		dc.w @shortcolumn2-Map_Geyser_internal
000112EA 0000                       		dc.w @shortcolumn3-Map_Geyser_internal
000112EC 0000                       		dc.w @longcolumn1-Map_Geyser_internal
000112EE 0000                       		dc.w @longcolumn2-Map_Geyser_internal
000112F0 0000                       		dc.w @longcolumn3-Map_Geyser_internal
000112F2 0000                       		dc.w @bubble7-Map_Geyser_internal
000112F4 0000                       		dc.w @bubble8-Map_Geyser_internal
000112F6 0000                       		dc.w @blank-Map_Geyser_internal
000112F8 02                         @bubble1:	dc.b 2
000112F9 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
000112FE EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
00011303 02                         @bubble2:	dc.b 2
00011304 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
00011309 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0001130E 04                         @bubble3:	dc.b 4
0001130F EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00011314 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00011319 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0001131E EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00011323 04                         @bubble4:	dc.b 4
00011324 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00011329 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0001132E F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00011333 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00011338 06                         @bubble5:	dc.b 6
00011339 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0001133E F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00011343 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00011348 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0001134D E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
00011352 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
00011357 06                         @bubble6:	dc.b 6
00011358 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0001135D F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00011362 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00011367 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0001136C E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
00011371 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
00011376 02                         @end1:		dc.b 2
00011377 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0001137C E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
00011381 02                         @end2:		dc.b 2
00011382 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
00011387 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0001138C 0A                         @medcolumn1:	dc.b $A
0001138D 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00011392 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00011397 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0001139C B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000113A1 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000113A6 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000113AB F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
000113B0 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
000113B5 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
000113BA 100F 0840 00               		dc.b $10, $F, 8, $40, 0
000113BF 0A                         @medcolumn2:	dc.b $A
000113C0 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000113C5 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000113CA B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000113CF B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000113D4 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000113D9 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000113DE F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
000113E3 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
000113E8 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
000113ED 100F 0850 00               		dc.b $10, $F, 8, $50, 0
000113F2 0A                         @medcolumn3:	dc.b $A
000113F3 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000113F8 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000113FD B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00011402 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00011407 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0001140C D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00011411 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00011416 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0001141B 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00011420 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00011425 06                         @shortcolumn1:	dc.b 6
00011426 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0001142B 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00011430 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00011435 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0001143A D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0001143F D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00011444 06                         @shortcolumn2:	dc.b 6
00011445 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0001144A 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0001144F B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00011454 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011459 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0001145E D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00011463 06                         @shortcolumn3:	dc.b 6
00011464 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011469 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0001146E B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00011473 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00011478 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0001147D D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00011482 10                         @longcolumn1:	dc.b $10
00011483 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00011488 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0001148D B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00011492 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00011497 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0001149C D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000114A1 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
000114A6 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
000114AB 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
000114B0 100F 0840 00               		dc.b $10, $F, 8, $40, 0
000114B5 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
000114BA 300F 0840 00               		dc.b $30, $F, 8, $40, 0
000114BF 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
000114C4 500F 0840 00               		dc.b $50, $F, 8, $40, 0
000114C9 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
000114CE 700F 0840 00               		dc.b $70, $F, 8, $40, 0
000114D3 10                         @longcolumn2:	dc.b $10
000114D4 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000114D9 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000114DE B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000114E3 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000114E8 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000114ED D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000114F2 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
000114F7 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
000114FC 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00011501 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00011506 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0001150B 300F 0850 00               		dc.b $30, $F, 8, $50, 0
00011510 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
00011515 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0001151A 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0001151F 700F 0850 00               		dc.b $70, $F, 8, $50, 0
00011524 10                         @longcolumn3:	dc.b $10
00011525 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0001152A 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0001152F B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00011534 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00011539 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0001153E D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00011543 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00011548 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0001154D 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00011552 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00011557 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0001155C 300F 0860 00               		dc.b $30, $F, 8, $60, 0
00011561 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
00011566 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0001156B 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
00011570 700F 0860 00               		dc.b $70, $F, 8, $60, 0
00011575 06                         @bubble7:	dc.b 6
00011576 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0001157B E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00011580 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
00011585 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0001158A D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0001158F D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
00011594 06                         @bubble8:	dc.b 6
00011595 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0001159A E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0001159F E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
000115A4 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
000115A9 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
000115AE D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
000115B3 00                         @blank:	dc.b 0
000115B4                            		even
000115B4                            		even
000115B4                            
000115B4                            		include	"_incObj\40 Moto Bug.asm" ; includes "_incObj\sub RememberState.asm"
000115B4                            ; ---------------------------------------------------------------------------
000115B4                            ; Object 40 - Moto Bug enemy (GHZ)
000115B4                            ; ---------------------------------------------------------------------------
000115B4                            
000115B4                            MotoBug:
000115B4 7000                       		moveq	#0,d0
000115B6 1028 0024                  		move.b	obRoutine(a0),d0
000115BA 323B 0000                  		move.w	Moto_Index(pc,d0.w),d1
000115BE 4EFB 1000                  		jmp	Moto_Index(pc,d1.w)
000115C2                            ; ===========================================================================
000115C2 0000                       Moto_Index:	dc.w Moto_Main-Moto_Index
000115C4 0000                       		dc.w Moto_Action-Moto_Index
000115C6 0000                       		dc.w Moto_Animate-Moto_Index
000115C8 0000                       		dc.w Moto_Delete-Moto_Index
000115CA                            ; ===========================================================================
000115CA                            
000115CA                            Moto_Main:	; Routine 0
000115CA 217C 0000 0000 0004        		move.l	#Map_Moto,obMap(a0)
000115D2 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
000115D8 117C 0004 0001             		move.b	#4,obRender(a0)
000115DE 317C 0200 0018             		move.w	#$200,obPriority(a0)
000115E4 117C 0014 0014             		move.b	#$14,obActWid(a0)
000115EA 4A28 001C                  		tst.b	obAnim(a0)	; is object a smoke trail?
000115EE 6600                       		bne.s	@smoke		; if yes, branch
000115F0 117C 000E 0016             		move.b	#$E,obHeight(a0)
000115F6 117C 0008 0017             		move.b	#8,obWidth(a0)
000115FC 117C 000C 0020             		move.b	#$C,obColType(a0)
00011602 6100 DF2E                  		bsr.w	ObjectFall
00011606 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0001160C 4A41                       		tst.w	d1
0001160E 6A00                       		bpl.s	@notonfloor
00011610 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
00011614 317C 0000 0012             		move.w	#0,obVelY(a0)
0001161A 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Moto_Action next
0001161E 0868 0000 0022             		bchg	#0,obStatus(a0)
00011624                            
00011624                            	@notonfloor:
00011624 4E75                       		rts	
00011626                            ; ===========================================================================
00011626                            
00011626                            @smoke:
00011626 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Moto_Animate next
0001162A 6000 0000                  		bra.w	Moto_Animate
0001162E                            ; ===========================================================================
0001162E                            
0001162E                            Moto_Action:	; Routine 2
0001162E 7000                       		moveq	#0,d0
00011630 1028 0025                  		move.b	ob2ndRout(a0),d0
00011634 323B 0000                  		move.w	Moto_ActIndex(pc,d0.w),d1
00011638 4EBB 1000                  		jsr	Moto_ActIndex(pc,d1.w)
0001163C 43F9 0000 0000             		lea	(Ani_Moto).l,a1
00011642 6100 AFF0                  		bsr.w	AnimateSprite
00011646                            
00011646                            		include	"_incObj\sub RememberState.asm" ; Moto_Action terminates in this file
00011646                            ; ---------------------------------------------------------------------------
00011646                            ; Subroutine to remember whether an object is destroyed/collected
00011646                            ; ---------------------------------------------------------------------------
00011646                            
00011646                            RememberState:
00011664 6000 DF18                  		bra.w	DisplaySprite
00011668                            
00011668                            	@offscreen:
00011668 45F8 FC00                  		lea	(v_objstate).w,a2
0001166C 7000                       		moveq	#0,d0
0001166E 1028 0023                  		move.b	obRespawnNo(a0),d0
00011672 6700                       		beq.s	@delete
00011674 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001167A                            
0001167A                            	@delete:
0001167A 6000 DF42                  		bra.w	DeleteObject
0001167A 6000 DF42                  		bra.w	DeleteObject
0001167E                            
0001167E                            ; ===========================================================================
0001167E 0000                       Moto_ActIndex:	dc.w @move-Moto_ActIndex
00011680 0000                       		dc.w @findfloor-Moto_ActIndex
00011682                            
00011682 =00000030                  @time:		equ $30
00011682 =00000033                  @smokedelay:	equ $33
00011682                            ; ===========================================================================
00011682                            
00011682                            @move:
00011682 5368 0030                  		subq.w	#1,@time(a0)	; subtract 1 from pause	time
00011686 6A00                       		bpl.s	@wait		; if time remains, branch
00011688 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001168C 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object to the left
00011692 117C 0001 001C             		move.b	#1,obAnim(a0)
00011698 0868 0000 0022             		bchg	#0,obStatus(a0)
0001169E 6600                       		bne.s	@wait
000116A0 4468 0010                  		neg.w	obVelX(a0)	; change direction
000116A4                            
000116A4                            	@wait:
000116A4 4E75                       		rts	
000116A6                            ; ===========================================================================
000116A6                            
000116A6                            @findfloor:
000116A6 6100 DEC2                  		bsr.w	SpeedToPos
000116AA 4EB9 0000 0000             		jsr	(ObjFloorDist).l
000116B0 0C41 FFF8                  		cmpi.w	#-8,d1
000116B4 6D00                       		blt.s	@pause
000116B6 0C41 000C                  		cmpi.w	#$C,d1
000116BA 6C00                       		bge.s	@pause
000116BC D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
000116C0 5328 0033                  		subq.b	#1,@smokedelay(a0)
000116C4 6A00                       		bpl.s	@nosmoke
000116C6 117C 000F 0033             		move.b	#$F,@smokedelay(a0)
000116CC 6100 E44A                  		bsr.w	FindFreeObj
000116D0 6600                       		bne.s	@nosmoke
000116D2 12BC 0040                  		move.b	#id_MotoBug,0(a1) ; load exhaust smoke object
000116D6 3368 0008 0008             		move.w	obX(a0),obX(a1)
000116DC 3368 000C 000C             		move.w	obY(a0),obY(a1)
000116E2 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
000116E8 137C 0002 001C             		move.b	#2,obAnim(a1)
000116EE                            
000116EE                            	@nosmoke:
000116EE 4E75                       		rts	
000116F0                            
000116F0                            @pause:
000116F0 5528 0025                  		subq.b	#2,ob2ndRout(a0)
000116F4 317C 003B 0030             		move.w	#59,@time(a0)	; set pause time to 1 second
000116FA 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop the object moving
00011700 117C 0000 001C             		move.b	#0,obAnim(a0)
00011706 4E75                       		rts	
00011708                            ; ===========================================================================
00011708                            
00011708                            Moto_Animate:	; Routine 4
00011708 43F9 0000 0000             		lea	(Ani_Moto).l,a1
0001170E 6100 AF24                  		bsr.w	AnimateSprite
00011712 6000 DE6A                  		bra.w	DisplaySprite
00011716                            ; ===========================================================================
00011716                            
00011716                            Moto_Delete:	; Routine 6
00011716 6000 DEA6                  		bra.w	DeleteObject
00011716 6000 DEA6                  		bra.w	DeleteObject
0001171A                            		include	"_anim\Moto Bug.asm"
0001171A                            ; ---------------------------------------------------------------------------
0001171A                            ; Animation script - Motobug enemy
0001171A                            ; ---------------------------------------------------------------------------
0001171A 0000                       Ani_Moto:	dc.w @stand-Ani_Moto
0001171C 0000                       		dc.w @walk-Ani_Moto
0001171E 0000                       		dc.w @smoke-Ani_Moto
00011720                            
00011720 0F02 FF                    @stand:		dc.b $F, 2, afEnd
00011724 00                         		even
00011724 0700 0100 02FF             @walk:		dc.b 7,	0, 1, 0, 2, afEnd
0001172A 0103 0603 0604 0604 0604+  @smoke:		dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, afRoutine
00011738 00                         		even
00011738 00                         		even
00011738                            Map_Moto:	include	"_maps\Moto Bug.asm"
00011738                            ; --------------------------------------------------------------------------------
00011738                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011738                            ; --------------------------------------------------------------------------------
00011738                            
00011738                            SME_TTY9T:	
00011738 0000 0000                  		dc.w SME_TTY9T_E-SME_TTY9T, SME_TTY9T_23-SME_TTY9T	
0001173C 0000 0000                  		dc.w SME_TTY9T_38-SME_TTY9T, SME_TTY9T_52-SME_TTY9T	
00011740 0000 0000                  		dc.w SME_TTY9T_58-SME_TTY9T, SME_TTY9T_5E-SME_TTY9T	
00011744 0000                       		dc.w SME_TTY9T_64-SME_TTY9T	
00011746 04                         SME_TTY9T_E:	dc.b 4	
00011747 F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
0001174C 000C 2008 EC               		dc.b 0, $C, $20, 8, $EC	
00011751 F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
00011756 0808 200E F4               		dc.b 8, 8, $20, $E, $F4	
0001175B 04                         SME_TTY9T_23:	dc.b 4	
0001175C F10D 2000 EC               		dc.b $F1, $D, $20, 0, $EC	
00011761 010C 2008 EC               		dc.b 1, $C, $20, 8, $EC	
00011766 F901 200C 0C               		dc.b $F9, 1, $20, $C, $C	
0001176B 0908 2011 F4               		dc.b 9, 8, $20, $11, $F4	
00011770 05                         SME_TTY9T_38:	dc.b 5	
00011771 F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
00011776 000C 2014 EC               		dc.b 0, $C, $20, $14, $EC	
0001177B F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
00011780 0804 2018 EC               		dc.b 8, 4, $20, $18, $EC	
00011785 0804 2012 FC               		dc.b 8, 4, $20, $12, $FC	
0001178A 01                         SME_TTY9T_52:	dc.b 1	
0001178B FA00 001A 10               		dc.b $FA, 0, 0, $1A, $10	
00011790 01                         SME_TTY9T_58:	dc.b 1	
00011791 FA00 001B 10               		dc.b $FA, 0, 0, $1B, $10	
00011796 01                         SME_TTY9T_5E:	dc.b 1	
00011797 FA00 001C 10               		dc.b $FA, 0, 0, $1C, $10	
0001179C 00                         SME_TTY9T_64:	dc.b 0	
0001179E 00                         		even
0001179E 00                         		even
0001179E                            		include	"_incObj\4F.asm"
0001179E                            ; ---------------------------------------------------------------------------
0001179E                            ; Object 4F - Splats
0001179E                            ; ---------------------------------------------------------------------------
0001179E                            
0001179E                            Obj4F:
0001179E 7000                                       moveq   #0,d0
000117A0 1028 0024                                  move.b  $24(a0),d0
000117A4 323B 0000                                  move.w  ObjSplats_Index(pc,d0.w),d1
000117A8 4EFB 1000                                  jmp     ObjSplats_Index(pc,d1.w)
000117AC                            ; ---------------------------------------------------------------------------
000117AC 0000                       ObjSplats_Index:dc.w ObjSplats_Init-*
000117AE 0000                                       dc.w loc_D246-ObjSplats_Index
000117B0 0000                                       dc.w ObjSplats_Bounce-ObjSplats_Index
000117B2 0000                                       dc.w loc_D2C8-ObjSplats_Index
000117B4                            ; ---------------------------------------------------------------------------
000117B4                            
000117B4                            ObjSplats_Init:
000117B4 5428 0024                                  addq.b  #2,$24(a0)
000117B8 217C 0000 0000 0004                        move.l  #Map_Splats,4(a0)
000117C0 317C 24E4 0002                             move.w  #$24E4,2(a0)
000117C6 117C 0004 0001                             move.b  #4,1(a0)
000117CC 117C 0004 0014                             move.b  #4,obActWid(a0)
000117D2 317C 0200 0018             				move.w	#$200,obPriority(a0)
000117D8 117C 0014 0016                             move.b  #$14,$16(a0)
000117DE 117C 0002 0020                             move.b  #2,$20(a0)
000117E4 4A28 0028                                  tst.b   $28(a0)
000117E8 6700                                       beq.s   loc_D246
000117EA 343C 0300                                  move.w  #$300,d2
000117EE 6000                                       bra.s   ObjSplats_FaceRight
000117F0                            ; ---------------------------------------------------------------------------
000117F0                            
000117F0                            loc_D246:
000117F0 343C 00E0                                  move.w  #$E0,d2
000117F4                            
000117F4                            ObjSplats_FaceRight:
000117F4 323C 0100                                  move.w  #$100,d1
000117F8 08E8 0000 0001                             bset    #0,1(a0)
000117FE 3038 D008                                  move.w  ($FFFFD008).w,d0
00011802 9068 0008                                  sub.w   8(a0),d0
00011806 6400                                       bcc.s   ObjSplats_Move
00011808 4440                                       neg.w   d0
0001180A 4441                                       neg.w   d1
0001180C 08A8 0000 0001                             bclr    #0,1(a0)
00011812                            
00011812                            ObjSplats_Move:
00011812 B042                                       cmp.w   d2,d0
00011814 6400                                       bcc.s   ObjSplats_Bounce
00011816 3141 0010                                  move.w  d1,$10(a0)
0001181A 5428 0024                                  addq.b  #2,$24(a0)
0001181E                            
0001181E                            ObjSplats_Bounce:
0001181E 6100 DD12                                  bsr.w   ObjectFall
00011822 117C 0001 001A                             move.b  #1,$1A(a0)
00011828 4A68 0012                                  tst.w   $12(a0)
0001182C 6B00                                       bmi.s   ObjSplats_Turn
0001182E 117C 0000 001A                             move.b  #0,$1A(a0)
00011834 6100 0000                                  bsr.w   ObjFloorDist
00011838 4A41                                       tst.w   d1
0001183A 6A00                                       bpl.s   ObjSplats_Turn
0001183C 3011                                       move.w  (a1),d0
0001183E 0240 03FF                                  andi.w  #$3FF,d0
00011842 0C40 02D2                                  cmpi.w  #$2D2,d0
00011846 6500                                       bcs.s   ObjSplats_Fall
00011848 5428 0024                                  addq.b  #2,$24(a0)
0001184C 6000                                       bra.s   ObjSplats_Turn
0001184E                            ; ---------------------------------------------------------------------------
0001184E                            
0001184E                            ObjSplats_Fall:
0001184E D368 000C                                  add.w   d1,$C(a0)
00011852 317C FC00 0012                             move.w  #$FC00,$12(a0)
00011858                            
00011858                            ObjSplats_Turn:
00011858 6100 0000                                  bsr.w   Yad_ChkWall
0001185C 6700                                       beq.s   loc_D2C4
0001185E 4468 0010                                  neg.w   $10(a0)
00011862 0868 0000 0001                             bchg    #0,1(a0)
00011868 0868 0000 0022                             bchg    #0,$22(a0)
0001186E                            
0001186E                            loc_D2C4:
0001186E 6000 FDD6                                  bra.w   RememberState
00011872                            ; ---------------------------------------------------------------------------
00011872                            
00011872                            loc_D2C8:
00011872 6100 DCBE                                  bsr.w   ObjectFall
00011876 6100 DD06                                  bsr.w   DisplaySprite
0001187A 4A28 0001                                  tst.b   1(a0)
0001187E 6A00 DD3E                                  bpl.w   DeleteObject
00011882 4E75                                       rts
00011882 4E75                                       rts
00011884                            Map_Splats:	include	"_maps\Splats.asm"
00011884 0000                       Map_Splats_internal:     dc.w unk_D310-*
00011886 0000                                       dc.w unk_D31B-Map_Splats_internal
00011888 02                         unk_D310:       dc.b   2
00011889 EC0B 0000 F40C 0800 0CF4                   dc.b $EC, $B, 0, 0, $F4, $C, 8, 0, $C, $F4
00011893 02                         unk_D31B:       dc.b   2
00011894 EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011894 EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
0001189E                            
0001189E                            		include	"_incObj\50 Yadrin.asm"
0001189E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001189E                            
0001189E                            
0001189E                            Yad_ChkWall:
0001189E 3038 FE04                  		move.w	(v_framecount).w,d0
000118A2 D047                       		add.w	d7,d0
000118A4 0240 0003                  		andi.w	#3,d0
000118A8 6600                       		bne.s	loc_F836
000118AA 7600                       		moveq	#0,d3
000118AC 1628 0014                  		move.b	obActWid(a0),d3
000118B0 4A68 0010                  		tst.w	obVelX(a0)
000118B4 6B00                       		bmi.s	loc_F82C
000118B6 6100 0000                  		bsr.w	ObjHitWallRight
000118BA 4A41                       		tst.w	d1
000118BC 6A00                       		bpl.s	loc_F836
000118BE                            
000118BE                            loc_F828:
000118BE 7001                       		moveq	#1,d0
000118C0 4E75                       		rts	
000118C2                            ; ===========================================================================
000118C2                            
000118C2                            loc_F82C:
000118C2 4643                       		not.w	d3
000118C4 6100 0000                  		bsr.w	ObjHitWallLeft
000118C8 4A41                       		tst.w	d1
000118CA 6BF2                       		bmi.s	loc_F828
000118CC                            
000118CC                            loc_F836:
000118CC 7000                       		moveq	#0,d0
000118CE 4E75                       		rts	
000118D0                            ; End of function Yad_ChkWall
000118D0                            
000118D0                            ; ===========================================================================
000118D0                            ; ---------------------------------------------------------------------------
000118D0                            ; Object 50 - Yadrin enemy (SYZ)
000118D0                            ; ---------------------------------------------------------------------------
000118D0                            
000118D0                            Yadrin:
000118D0 7000                       		moveq	#0,d0
000118D2 1028 0024                  		move.b	obRoutine(a0),d0
000118D6 323B 0000                  		move.w	Yad_Index(pc,d0.w),d1
000118DA 4EFB 1000                  		jmp	Yad_Index(pc,d1.w)
000118DE                            ; ===========================================================================
000118DE 0000                       Yad_Index:	dc.w Yad_Main-Yad_Index
000118E0 0000                       		dc.w Yad_Action-Yad_Index
000118E2                            
000118E2 =00000030                  yad_timedelay:	equ $30
000118E2                            ; ===========================================================================
000118E2                            
000118E2                            Yad_Main:	; Routine 0
000118E2 217C 0000 0000 0004        		move.l	#Map_Yad,obMap(a0)
000118EA 317C 247B 0002             		move.w	#$247B,obGfx(a0)
000118F0 117C 0004 0001             		move.b	#4,obRender(a0)
000118F6 317C 0200 0018             		move.w	#$200,obPriority(a0)
000118FC 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011902 117C 0011 0016             		move.b	#$11,obHeight(a0)
00011908 117C 0008 0017             		move.b	#8,obWidth(a0)
0001190E 117C 00CC 0020             		move.b	#$CC,obColType(a0)
00011914 6100 DC1C                  		bsr.w	ObjectFall
00011918 6100 0000                  		bsr.w	ObjFloorDist
0001191C 4A41                       		tst.w	d1
0001191E 6A00                       		bpl.s	locret_F89E
00011920 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
00011924 317C 0000 0012             		move.w	#0,obVelY(a0)
0001192A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001192E 0868 0000 0022             		bchg	#0,obStatus(a0)
00011934                            
00011934                            	locret_F89E:
00011934 4E75                       		rts	
00011936                            ; ===========================================================================
00011936                            
00011936                            Yad_Action:	; Routine 2
00011936 7000                       		moveq	#0,d0
00011938 1028 0025                  		move.b	ob2ndRout(a0),d0
0001193C 323B 0000                  		move.w	Yad_Index2(pc,d0.w),d1
00011940 4EBB 1000                  		jsr	Yad_Index2(pc,d1.w)
00011944 43F9 0000 0000             		lea	(Ani_Yad).l,a1
0001194A 6100 ACE8                  		bsr.w	AnimateSprite
0001194E 6000 FCF6                  		bra.w	RememberState
00011952                            ; ===========================================================================
00011952 0000                       Yad_Index2:	dc.w Yad_Move-Yad_Index2
00011954 0000                       		dc.w Yad_FixToFloor-Yad_Index2
00011956                            ; ===========================================================================
00011956                            
00011956                            Yad_Move:
00011956 5368 0030                  		subq.w	#1,yad_timedelay(a0) ; subtract 1 from pause time
0001195A 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0001195C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00011960 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object
00011966 117C 0001 001C             		move.b	#1,obAnim(a0)
0001196C 0868 0000 0022             		bchg	#0,obStatus(a0)
00011972 6600                       		bne.s	locret_F8E2
00011974 4468 0010                  		neg.w	obVelX(a0)	; change direction
00011978                            
00011978                            	locret_F8E2:
00011978 4E75                       		rts	
0001197A                            ; ===========================================================================
0001197A                            
0001197A                            Yad_FixToFloor:
0001197A 6100 DBEE                  		bsr.w	SpeedToPos
0001197E 6100 0000                  		bsr.w	ObjFloorDist
00011982 0C41 FFF8                  		cmpi.w	#-8,d1
00011986 6D00                       		blt.s	Yad_Pause
00011988 0C41 000C                  		cmpi.w	#$C,d1
0001198C 6C00                       		bge.s	Yad_Pause
0001198E D368 000C                  		add.w	d1,obY(a0)	; match	object's position to the floor
00011992 6100 FF0A                  		bsr.w	Yad_ChkWall
00011996 6600                       		bne.s	Yad_Pause
00011998 4E75                       		rts	
0001199A                            ; ===========================================================================
0001199A                            
0001199A                            Yad_Pause:
0001199A 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001199E 317C 003B 0030             		move.w	#59,yad_timedelay(a0) ; set pause time to 1 second
000119A4 317C 0000 0010             		move.w	#0,obVelX(a0)
000119AA 117C 0000 001C             		move.b	#0,obAnim(a0)
000119B0 4E75                       		rts	
000119B0 4E75                       		rts	
000119B2                            		include	"_anim\Yadrin.asm"
000119B2                            ; ---------------------------------------------------------------------------
000119B2                            ; Animation script - Yadrin enemy
000119B2                            ; ---------------------------------------------------------------------------
000119B2 0000                       Ani_Yad:	dc.w @stand-Ani_Yad
000119B4 0000                       		dc.w @walk-Ani_Yad
000119B6                            
000119B6 0800 FF                    @stand:		dc.b 8,	0, afEnd
000119BA 00                         		even
000119BA 0800 0002 0000 0101 0103+  @walk:		dc.b 8, 0, 0, 2, 0, 0, 1, 1, 1, 3, 1, 1, 1, afEnd
000119C8                            		even
000119C8                            		even
000119C8                            Map_Yad:	include	"_maps\Yadrin.asm"
000119C8                            ; --------------------------------------------------------------------------------
000119C8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000119C8                            ; --------------------------------------------------------------------------------
000119C8                            
000119C8                            SME_4WhIu:	
000119C8 0000 0000                  		dc.w SME_4WhIu_C-SME_4WhIu, SME_4WhIu_3A-SME_4WhIu	
000119CC 0000 0000                  		dc.w SME_4WhIu_68-SME_4WhIu, SME_4WhIu_A5-SME_4WhIu	
000119D0 0000 0000                  		dc.w SME_4WhIu_E2-SME_4WhIu, SME_4WhIu_FC-SME_4WhIu	
000119D4 09                         SME_4WhIu_C:	dc.b 9	
000119D5 F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
000119DA EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
000119DF 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
000119E4 FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
000119E9 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
000119EE FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
000119F3 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
000119F8 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
000119FD EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011A02 09                         SME_4WhIu_3A:	dc.b 9	
00011A03 F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011A08 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011A0D FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011A12 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011A17 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011A1C 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011A21 F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011A26 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011A2B EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011A30 0C                         SME_4WhIu_68:	dc.b $C	
00011A31 EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011A36 FB00 601D FC               		dc.b $FB, 0, $60, $1D, $FC	
00011A3B FB00 6020 04               		dc.b $FB, 0, $60, $20, 4	
00011A40 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011A45 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011A4A F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011A4F EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011A54 FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011A59 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011A5E F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011A63 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011A68 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011A6D 0C                         SME_4WhIu_A5:	dc.b $C	
00011A6E F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011A73 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011A78 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011A7D FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011A82 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011A87 F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011A8C EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011A91 EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011A96 FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011A9B FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011AA0 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011AA5 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011AAA 05                         SME_4WhIu_E2:	dc.b 5	
00011AAB F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011AB0 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011AB5 EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011ABA F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011ABF 0409 0031 FC               		dc.b 4, 9, 0, $31, $FC	
00011AC4 05                         SME_4WhIu_FC:	dc.b 5	
00011AC5 F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011ACA 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011ACF EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011AD4 F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011AD9 0409 0037 FC               		dc.b 4, 9, 0, $37, $FC	
00011ADE                            		even
00011ADE                            		even
00011ADE                            
00011ADE                            		include	"_incObj\sub SolidObject.asm"
00011ADE                            ; ---------------------------------------------------------------------------
00011ADE                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00011ADE                            ;
00011ADE                            ; input:
00011ADE                            ;	d1 = width
00011ADE                            ;	d2 = height / 2 (when jumping)
00011ADE                            ;	d3 = height / 2 (when walking)
00011ADE                            ;	d4 = x-axis position
00011ADE                            ; ---------------------------------------------------------------------------
00011ADE                            
00011ADE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011ADE                            
00011ADE                            
00011ADE                            SolidObject:
00011ADE 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic standing on the object?
00011AE2 6700 0000                  		beq.w	Solid_ChkEnter	; if not, branch
00011AE6 3401                       		move.w	d1,d2
00011AE8 D442                       		add.w	d2,d2
00011AEA 43F8 D000                  		lea	(v_player).w,a1
00011AEE 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011AF4 6600                       		bne.s	@leave		; if yes, branch
00011AF6 3029 0008                  		move.w	obX(a1),d0
00011AFA 9068 0008                  		sub.w	obX(a0),d0
00011AFE D041                       		add.w	d1,d0
00011B00 6B00                       		bmi.s	@leave		; if Sonic moves off the left, branch
00011B02 B042                       		cmp.w	d2,d0		; has Sonic moved off the right?
00011B04 6500                       		bcs.s	@stand		; if not, branch
00011B06                            
00011B06                            	@leave:
00011B06 08A9 0003 0022             		bclr	#3,obStatus(a1)	; clear Sonic's standing flag
00011B0C 08A8 0003 0022             		bclr	#3,obStatus(a0)	; clear object's standing flag
00011B12 4228 0025                  		clr.b	obSolid(a0)
00011B16 7800                       		moveq	#0,d4
00011B18 4E75                       		rts	
00011B1A                            
00011B1A                            	@stand:
00011B1A 3404                       		move.w	d4,d2
00011B1C 4EB9 0000 92F6             		jsr	MvSonicOnPtfm
00011B22 7800                       		moveq	#0,d4
00011B24 4E75                       		rts	
00011B26                            ; ===========================================================================
00011B26                            
00011B26                            SolidObject71:
00011B26 4A28 0025                  		tst.b	obSolid(a0)
00011B2A 6700 0000                  		beq.w	loc_FAD0
00011B2E 3401                       		move.w	d1,d2
00011B30 D442                       		add.w	d2,d2
00011B32 43F8 D000                  		lea	(v_player).w,a1
00011B36 0829 0001 0022             		btst	#1,obStatus(a1)
00011B3C 6600                       		bne.s	@leave
00011B3E 3029 0008                  		move.w	obX(a1),d0
00011B42 9068 0008                  		sub.w	obX(a0),d0
00011B46 D041                       		add.w	d1,d0
00011B48 6B00                       		bmi.s	@leave
00011B4A B042                       		cmp.w	d2,d0
00011B4C 6500                       		bcs.s	@stand
00011B4E                            
00011B4E                            	@leave:
00011B4E 08A9 0003 0022             		bclr	#3,obStatus(a1)
00011B54 08A8 0003 0022             		bclr	#3,obStatus(a0)
00011B5A 4228 0025                  		clr.b	obSolid(a0)
00011B5E 7800                       		moveq	#0,d4
00011B60 4E75                       		rts	
00011B62                            
00011B62                            	@stand:
00011B62 3404                       		move.w	d4,d2
00011B64 4EB9 0000 92F6             		jsr	MvSonicOnPtfm
00011B6A 7800                       		moveq	#0,d4
00011B6C 4E75                       		rts	
00011B6E                            ; ===========================================================================
00011B6E                            
00011B6E                            SolidObject2F:
00011B6E 43F8 D000                  		lea	(v_player).w,a1
00011B72 4A28 0001                  		tst.b	obRender(a0)
00011B76 6A00 0000                  		bpl.w	Solid_Ignore
00011B7A 3029 0008                  		move.w	obX(a1),d0
00011B7E 9068 0008                  		sub.w	obX(a0),d0
00011B82 D041                       		add.w	d1,d0
00011B84 6B00 0000                  		bmi.w	Solid_Ignore
00011B88 3601                       		move.w	d1,d3
00011B8A D643                       		add.w	d3,d3
00011B8C B043                       		cmp.w	d3,d0
00011B8E 6200 0000                  		bhi.w	Solid_Ignore
00011B92 3A00                       		move.w	d0,d5
00011B94 0828 0000 0001             		btst	#0,obRender(a0)	; is object horizontally flipped?
00011B9A 6700                       		beq.s	@notflipped	; if not, branch
00011B9C 4645                       		not.w	d5
00011B9E DA43                       		add.w	d3,d5
00011BA0                            
00011BA0                            	@notflipped:
00011BA0 E24D                       		lsr.w	#1,d5
00011BA2 7600                       		moveq	#0,d3
00011BA4 1632 5000                  		move.b	(a2,d5.w),d3
00011BA8 9612                       		sub.b	(a2),d3
00011BAA 3A28 000C                  		move.w	obY(a0),d5
00011BAE 9A43                       		sub.w	d3,d5
00011BB0 1629 0016                  		move.b	obHeight(a1),d3
00011BB4 4883                       		ext.w	d3
00011BB6 D443                       		add.w	d3,d2
00011BB8 3629 000C                  		move.w	obY(a1),d3
00011BBC 9645                       		sub.w	d5,d3
00011BBE 5843                       		addq.w	#4,d3
00011BC0 D642                       		add.w	d2,d3
00011BC2 6B00 0000                  		bmi.w	Solid_Ignore
00011BC6 3802                       		move.w	d2,d4
00011BC8 D844                       		add.w	d4,d4
00011BCA B644                       		cmp.w	d4,d3
00011BCC 6400 0000                  		bcc.w	Solid_Ignore
00011BD0 6000 0000                  		bra.w	loc_FB0E
00011BD4                            ; ===========================================================================
00011BD4                            
00011BD4                            Solid_ChkEnter:
00011BD4 4A28 0001                  		tst.b	obRender(a0)
00011BD8 6A00 0000                  		bpl.w	Solid_Ignore
00011BDC                            
00011BDC                            loc_FAD0:
00011BDC 43F8 D000                  		lea	(v_player).w,a1
00011BE0 3029 0008                  		move.w	obX(a1),d0
00011BE4 9068 0008                  		sub.w	obX(a0),d0
00011BE8 D041                       		add.w	d1,d0
00011BEA 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves off the left, branch
00011BEE 3601                       		move.w	d1,d3
00011BF0 D643                       		add.w	d3,d3
00011BF2 B043                       		cmp.w	d3,d0		; has Sonic moved off the right?
00011BF4 6200 0000                  		bhi.w	Solid_Ignore	; if yes, branch
00011BF8 1629 0016                  		move.b	obHeight(a1),d3
00011BFC 4883                       		ext.w	d3
00011BFE D443                       		add.w	d3,d2
00011C00 3629 000C                  		move.w	obY(a1),d3
00011C04 9668 000C                  		sub.w	obY(a0),d3
00011C08 5843                       		addq.w	#4,d3
00011C0A D642                       		add.w	d2,d3
00011C0C 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves above, branch
00011C10 3802                       		move.w	d2,d4
00011C12 D844                       		add.w	d4,d4
00011C14 B644                       		cmp.w	d4,d3		; has Sonic moved below?
00011C16 6400 0000                  		bcc.w	Solid_Ignore	; if yes, branch
00011C1A                            
00011C1A                            loc_FB0E:
00011C1A 4A38 F7C8                  		tst.b	(f_lockmulti).w	; are controls locked?
00011C1E 6B00 0000                  		bmi.w	Solid_Ignore	; if yes, branch
00011C22 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic dying?
00011C28 6400 0000                  			bcc.w	Solid_Debug
00011C2C 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00011C30 6600 0000                  		bne.w	Solid_Debug	; if yes, branch
00011C34 3A00                       		move.w	d0,d5
00011C36 B240                       		cmp.w	d0,d1		; is Sonic right of centre of object?
00011C38 6400                       		bcc.s	@isright	; if yes, branch
00011C3A D241                       		add.w	d1,d1
00011C3C 9041                       		sub.w	d1,d0
00011C3E 3A00                       		move.w	d0,d5
00011C40 4445                       		neg.w	d5
00011C42                            
00011C42                            	@isright:
00011C42 3203                       		move.w	d3,d1
00011C44 B443                       		cmp.w	d3,d2		; is Sonic below centre of object?
00011C46 6400                       		bcc.s	@isbelow	; if yes, branch
00011C48                            
00011C48 5943                       		subq.w	#4,d3
00011C4A 9644                       		sub.w	d4,d3
00011C4C 3203                       		move.w	d3,d1
00011C4E 4441                       		neg.w	d1
00011C50                            
00011C50                            	@isbelow:
00011C50 BA41                       		cmp.w	d1,d5
00011C52 6200 0000                  		bhi.w	Solid_TopBottom	; if Sonic hits top or bottom, branch
00011C56 0C41 0004                  		cmpi.w	#4,d1
00011C5A 6300                       		bls.s	Solid_SideAir
00011C5C 4A40                       		tst.w	d0		; where is Sonic?
00011C5E 6700                       		beq.s	Solid_Centre	; if inside the object, branch
00011C60 6B00                       		bmi.s	Solid_Right	; if right of the object, branch
00011C62 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving left?
00011C66 6B00                       		bmi.s	Solid_Centre	; if yes, branch
00011C68 6000                       		bra.s	Solid_Left
00011C6A                            ; ===========================================================================
00011C6A                            
00011C6A                            Solid_Right:
00011C6A 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving right?
00011C6E 6A00                       		bpl.s	Solid_Centre	; if yes, branch
00011C70                            
00011C70                            Solid_Left:
00011C70 337C 0000 0020             		move.w	#0,obInertia(a1)
00011C76 337C 0000 0010             		move.w	#0,obVelX(a1)	; stop Sonic moving
00011C7C                            
00011C7C                            Solid_Centre:
00011C7C 9169 0008                  		sub.w	d0,obX(a1)	; correct Sonic's position
00011C80 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011C86 6600                       		bne.s	Solid_SideAir	; if yes, branch
00011C88 08E9 0005 0022             		bset	#5,obStatus(a1)	; make Sonic push object
00011C8E 08E8 0005 0022             		bset	#5,obStatus(a0)	; make object be pushed
00011C94 7801                       		moveq	#1,d4		; return side collision
00011C96 4E75                       		rts	
00011C98                            ; ===========================================================================
00011C98                            
00011C98                            Solid_SideAir:
00011C98 6100                       		bsr.s	Solid_NotPushing
00011C9A 7801                       		moveq	#1,d4		; return side collision
00011C9C 4E75                       		rts	
00011C9E                            ; ===========================================================================
00011C9E                            
00011C9E                            Solid_Ignore:
00011C9E 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing?
00011CA4 6700                       		beq.s	Solid_Debug	; if not, branch
00011CA6 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
00011CAC 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011CAE 0C29 0000 001C             		cmpi.b	#id_Drown,obAnim(a1)	; is Sonic in his drowning animation?
00011CB4 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011CB6 0C29 0000 001C             		cmpi.b	#id_Hurt,obAnim(a1)	; is Sonic in his hurt animation?
00011CBC 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011CBE 337C 0000 001C             		move.w	#id_Run,obAnim(a1) ; use running animation
00011CC4                            
00011CC4                            
00011CC4                            Solid_NotPushing:
00011CC4 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag
00011CCA 08A9 0005 0022             		bclr	#5,obStatus(a1)	; clear Sonic's pushing flag
00011CD0                            
00011CD0                            Solid_Debug:
00011CD0 7800                       		moveq	#0,d4		; return no collision
00011CD2 4E75                       		rts	
00011CD4                            ; ===========================================================================
00011CD4                            
00011CD4                            Solid_TopBottom:
00011CD4 4A43                       		tst.w	d3		; is Sonic below the object?
00011CD6 6B00                       		bmi.s	Solid_Below	; if yes, branch
00011CD8 0C43 0010                  		cmpi.w	#$10,d3		; has Sonic landed on the object?
00011CDC 6500                       		bcs.s	Solid_Landed	; if yes, branch
00011CDE 60BE                       		bra.s	Solid_Ignore
00011CE0                            ; ===========================================================================
00011CE0                            
00011CE0                            Solid_Below:
00011CE0 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving vertically?
00011CE4 6700                       		beq.s	Solid_Squash	; if not, branch
00011CE6 6A00                       		bpl.s	Solid_TopBtmAir	; if moving downwards, branch
00011CE8 4A43                       		tst.w	d3		; is Sonic above the object?
00011CEA 6A00                       		bpl.s	Solid_TopBtmAir	; if yes, branch
00011CEC 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011CF0 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic moving
00011CF6                            
00011CF6                            Solid_TopBtmAir:
00011CF6 78FF                       		moveq	#-1,d4
00011CF8 4E75                       		rts	
00011CFA                            ; ===========================================================================
00011CFA                            
00011CFA                            Solid_Squash:
00011CFA 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011D00 66F4                       		bne.s	Solid_TopBtmAir	; if yes, branch
00011D02 2F08                       		move.l	a0,-(sp)
00011D04 2049                       		movea.l	a1,a0
00011D06 4EB9 0000 0000             		jsr	(KillSonic).l	; kill Sonic
00011D0C 205F                       		movea.l	(sp)+,a0
00011D0E 78FF                       		moveq	#-1,d4
00011D10 4E75                       		rts	
00011D12                            ; ===========================================================================
00011D12                            
00011D12                            Solid_Landed:
00011D12 5943                       		subq.w	#4,d3
00011D14 7200                       		moveq	#0,d1
00011D16 1228 0014                  		move.b	obActWid(a0),d1
00011D1A 3401                       		move.w	d1,d2
00011D1C D442                       		add.w	d2,d2
00011D1E D269 0008                  		add.w	obX(a1),d1
00011D22 9268 0008                  		sub.w	obX(a0),d1
00011D26 6B00                       		bmi.s	Solid_Miss	; if Sonic is right of object, branch
00011D28 B242                       		cmp.w	d2,d1		; is Sonic left of object?
00011D2A 6400                       		bcc.s	Solid_Miss	; if yes, branch
00011D2C 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving upwards?
00011D30 6B00                       		bmi.s	Solid_Miss	; if yes, branch
00011D32 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011D36 5369 000C                  		subq.w	#1,obY(a1)
00011D3A 6100                       		bsr.s	Solid_ResetFloor
00011D3C 117C 0002 0025             		move.b	#2,obSolid(a0) ; set standing flags
00011D42 08E8 0003 0022             		bset	#3,obStatus(a0)
00011D48 78FF                       		moveq	#-1,d4		; return top/bottom collision
00011D4A 4E75                       		rts	
00011D4C                            ; ===========================================================================
00011D4C                            
00011D4C                            Solid_Miss:
00011D4C 7800                       		moveq	#0,d4
00011D4E 4E75                       		rts	
00011D50                            ; End of function SolidObject
00011D50                            
00011D50                            
00011D50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011D50                            
00011D50                            
00011D50                            Solid_ResetFloor:
00011D50 0829 0003 0022             		btst	#3,obStatus(a1)	; is Sonic standing on something?
00011D56 6700                       		beq.s	@notonobj	; if not, branch
00011D58                            
00011D58 7000                       		moveq	#0,d0
00011D5A 1029 003D                  		move.b	$3D(a1),d0	; get object being stood on
00011D5E ED48                       		lsl.w	#6,d0
00011D60 0680 00FF D000             		addi.l	#(v_objspace&$FFFFFF),d0
00011D66 2440                       		movea.l	d0,a2
00011D68 08AA 0003 0022             		bclr	#3,obStatus(a2)	; clear object's standing flags
00011D6E 422A 0025                  		clr.b	obSolid(a2)
00011D72                            
00011D72                            	@notonobj:
00011D72 3008                       		move.w	a0,d0
00011D74 0440 D000                  		subi.w	#$D000,d0
00011D78 EC48                       		lsr.w	#6,d0
00011D7A 0240 007F                  		andi.w	#$7F,d0
00011D7E 1340 003D                  		move.b	d0,$3D(a1)	; set object being stood on
00011D82 137C 0000 0026             		move.b	#0,obAngle(a1)	; clear Sonic's angle
00011D88 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic
00011D8E 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00011D94 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011D9A 6700                       		beq.s	@notinair	; if not, branch
00011D9C 2F08                       		move.l	a0,-(sp)
00011D9E 2049                       		movea.l	a1,a0
00011DA0 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l ; reset Sonic as if on floor
00011DA6 205F                       		movea.l	(sp)+,a0
00011DA8                            
00011DA8                            	@notinair:
00011DA8 08E9 0003 0022             		bset	#3,obStatus(a1)	; set object standing flag
00011DAE 08E8 0003 0022             		bset	#3,obStatus(a0)	; set Sonic standing on object flag
00011DB4 4E75                       		rts	
00011DB6                            ; End of function Solid_ResetFloor
00011DB6                            ; End of function Solid_ResetFloor
00011DB6                            
00011DB6                            		include	"_incObj\51 Smashable Green Block.asm"
00011DB6                            ; ---------------------------------------------------------------------------
00011DB6                            ; Object 51 - smashable	green block (MZ)
00011DB6                            ; ---------------------------------------------------------------------------
00011DB6                            
00011DB6                            SmashBlock:
00011DB6 7000                       		moveq	#0,d0
00011DB8 1028 0024                  		move.b	obRoutine(a0),d0
00011DBC 323B 0000                  		move.w	Smab_Index(pc,d0.w),d1
00011DC0 4EBB 1000                  		jsr	Smab_Index(pc,d1.w)
00011DC4 6000 F880                  		bra.w	RememberState
00011DC8                            ; ===========================================================================
00011DC8 0000                       Smab_Index:	dc.w Smab_Main-Smab_Index
00011DCA 0000                       		dc.w Smab_Solid-Smab_Index
00011DCC 0000                       		dc.w Smab_Points-Smab_Index
00011DCE                            ; ===========================================================================
00011DCE                            
00011DCE                            Smab_Main:	; Routine 0
00011DCE 5428 0024                  		addq.b	#2,obRoutine(a0)
00011DD2 217C 0000 0000 0004        		move.l	#Map_Smab,obMap(a0)
00011DDA 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00011DE0 117C 0004 0001             		move.b	#4,obRender(a0)
00011DE6 117C 0010 0014             		move.b	#$10,obActWid(a0)
00011DEC 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011DF2 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00011DF8                            
00011DF8                            Smab_Solid:	; Routine 2
00011DF8                            
00011DF8 =00000032                  sonicAniFrame:	equ $32		; Sonic's current animation number
00011DF8 =00000034                  @count:		equ $34		; number of blocks hit + previous stuff
00011DF8                            
00011DF8 3178 F7D0 0034             		move.w	(v_itembonus).w,$34(a0)
00011DFE 1178 D01C 0032             		move.b	(v_player+obAnim).w,sonicAniFrame(a0) ; load Sonic's animation number
00011E04 323C 001B                  		move.w	#$1B,d1
00011E08 343C 0010                  		move.w	#$10,d2
00011E0C 363C 0011                  		move.w	#$11,d3
00011E10 3828 0008                  		move.w	obX(a0),d4
00011E14 6100 FCC8                  		bsr.w	SolidObject
00011E18 0828 0003 0022             		btst	#3,obStatus(a0)	; has Sonic landed on the block?
00011E1E 6600                       		bne.s	@smash		; if yes, branch
00011E20                            
00011E20                            	@notspinning:
00011E20 4E75                       		rts	
00011E22                            ; ===========================================================================
00011E22                            
00011E22                            @smash:
00011E22 0C28 0000 0032             		cmpi.b	#id_Roll,sonicAniFrame(a0) ; is Sonic rolling/jumping?
00011E28 66F6                       		bne.s	@notspinning	; if not, branch
00011E2A 31E8 0034 F7D0             		move.w	@count(a0),(v_itembonus).w
00011E30 08E9 0002 0022             		bset	#2,obStatus(a1)
00011E36 137C 000E 0016             		move.b	#$E,obHeight(a1)
00011E3C 137C 0007 0017             		move.b	#7,obWidth(a1)
00011E42 137C 0000 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic roll
00011E48 337C FD00 0012             		move.w	#-$300,obVelY(a1) ; rebound Sonic
00011E4E 08E9 0001 0022             		bset	#1,obStatus(a1)
00011E54 08A9 0003 0022             		bclr	#3,obStatus(a1)
00011E5A 137C 0002 0024             		move.b	#2,obRoutine(a1)
00011E60 08A8 0003 0022             		bclr	#3,obStatus(a0)
00011E66 4228 0025                  		clr.b	obSolid(a0)
00011E6A 117C 0001 001A             		move.b	#1,obFrame(a0)
00011E70 49F9 0000 0000             		lea	(Smab_Speeds).l,a4 ; load broken fragment speed data
00011E76 7203                       		moveq	#3,d1		; set number of	fragments to 4
00011E78 343C 0038                  		move.w	#$38,d2
00011E7C 6100 D2B0                  		bsr.w	SmashObject
00011E80 6100 DC96                  		bsr.w	FindFreeObj
00011E84 6600                       		bne.s	Smab_Points
00011E86 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00011E8A 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011E90 3368 000C 000C             		move.w	obY(a0),obY(a1)
00011E96 3438 F7D0                  		move.w	(v_itembonus).w,d2
00011E9A 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; increment bonus counter
00011E9E 0C42 0006                  		cmpi.w	#6,d2		; have fewer than 3 blocks broken?
00011EA2 6500                       		bcs.s	@bonus		; if yes, branch
00011EA4 7406                       		moveq	#6,d2		; set cap for points
00011EA6                            
00011EA6                            	@bonus:
00011EA6 7000                       		moveq	#0,d0
00011EA8 303B 2000                  		move.w	Smab_Scores(pc,d2.w),d0
00011EAC 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 blocks been smashed?
00011EB2 6500                       		bcs.s	@givepoints	; if not, branch
00011EB4 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00011EB8 740A                       		moveq	#10,d2
00011EBA                            
00011EBA                            	@givepoints:
00011EBA 4EB9 0000 0000             		jsr	(AddPoints).l
00011EC0 E24A                       		lsr.w	#1,d2
00011EC2 1342 001A                  		move.b	d2,obFrame(a1)
00011EC6                            
00011EC6                            Smab_Points:	; Routine 4
00011EC6 6100 D6A2                  		bsr.w	SpeedToPos
00011ECA 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00011ED0 6100 D6AC                  		bsr.w	DisplaySprite
00011ED4 4A28 0001                  		tst.b	obRender(a0)
00011ED8 6A00 D6E4                  		bpl.w	DeleteObject
00011EDC 4E75                       		rts	
00011EDE                            ; ===========================================================================
00011EDE FE00 FE00                  Smab_Speeds:	dc.w -$200, -$200	; x-speed, y-speed
00011EE2 FF00 FF00                  		dc.w -$100, -$100
00011EE6 0200 FE00                  		dc.w $200, -$200
00011EEA 0100 FF00                  		dc.w $100, -$100
00011EEE                            
00011EEE 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
00011EEE 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
00011EF6                            Map_Smab:	include	"_maps\Smashable Green Block.asm"
00011EF6                            ; --------------------------------------------------------------------------------
00011EF6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011EF6                            ; --------------------------------------------------------------------------------
00011EF6                            
00011EF6                            SME_wdHTM:	
00011EF6 0000 0000                  		dc.w SME_wdHTM_6-SME_wdHTM, SME_wdHTM_1B-SME_wdHTM	
00011EFA 0000                       		dc.w SME_wdHTM_30-SME_wdHTM	
00011EFC 04                         SME_wdHTM_6:	dc.b 4	
00011EFD F005 0000 00               		dc.b $F0, 5, 0, 0, 0	
00011F02 0005 0000 00               		dc.b 0, 5, 0, 0, 0	
00011F07 0005 0000 F0               		dc.b 0, 5, 0, 0, $F0	
00011F0C F005 0000 F0               		dc.b $F0, 5, 0, 0, $F0	
00011F11 04                         SME_wdHTM_1B:	dc.b 4	
00011F12 F005 0000 00               		dc.b $F0, 5, 0, 0, 0	
00011F17 0005 0000 00               		dc.b 0, 5, 0, 0, 0	
00011F1C 0005 0000 F0               		dc.b 0, 5, 0, 0, $F0	
00011F21 F005 0000 F0               		dc.b $F0, 5, 0, 0, $F0	
00011F26 00                         SME_wdHTM_30:	dc.b 0	
00011F28 00                         		even
00011F28 00                         		even
00011F28                            
00011F28                            		include	"_incObj\52 Moving Blocks.asm"
00011F28                            ; ---------------------------------------------------------------------------
00011F28                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00011F28                            ; ---------------------------------------------------------------------------
00011F28                            
00011F28                            MovingBlock:
00011F28 7000                       		moveq	#0,d0
00011F2A 1028 0024                  		move.b	obRoutine(a0),d0
00011F2E 323B 0000                  		move.w	MBlock_Index(pc,d0.w),d1
00011F32 4EFB 1000                  		jmp	MBlock_Index(pc,d1.w)
00011F36                            ; ===========================================================================
00011F36 0000                       MBlock_Index:	dc.w MBlock_Main-MBlock_Index
00011F38 0000                       		dc.w MBlock_Platform-MBlock_Index
00011F3A 0000                       		dc.w MBlock_StandOn-MBlock_Index
00011F3C                            
00011F3C =00000030                  mblock_origX:	equ $30
00011F3C =00000032                  mblock_origY:	equ $32
00011F3C                            
00011F3C 1000                       MBlock_Var:	dc.b $10, 0		; object width,	frame number
00011F3E 2001                       		dc.b $20, 1
00011F40 2002                       		dc.b $20, 2
00011F42 4003                       		dc.b $40, 3
00011F44 3004                       		dc.b $30, 4
00011F46                            ; ===========================================================================
00011F46                            
00011F46                            MBlock_Main:	; Routine 0
00011F46 5428 0024                  		addq.b	#2,obRoutine(a0)
00011F4A 217C 0000 0000 0004        		move.l	#Map_MBlock,obMap(a0)
00011F52 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00011F58 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00011F5E 6600                       		bne.s	loc_FE44
00011F60 217C 0000 0000 0004        		move.l	#Map_MBlockLZ,obMap(a0) ; LZ specific code
00011F68 317C 43BC 0002             		move.w	#$43BC,obGfx(a0)
00011F6E 117C 0007 0016             		move.b	#7,obHeight(a0)
00011F74                            
00011F74                            loc_FE44:
00011F74 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00011F7A 6600                       		bne.s	loc_FE60
00011F7C 317C 22C0 0002             		move.w	#$22C0,obGfx(a0) ; SBZ specific code (object 5228)
00011F82 0C28 0028 0028             		cmpi.b	#$28,obSubtype(a0) ; is object 5228 ?
00011F88 6700                       		beq.s	loc_FE60	; if yes, branch
00011F8A 317C 4460 0002             		move.w	#$4460,obGfx(a0) ; SBZ specific code (object 523x)
00011F90                            
00011F90                            loc_FE60:
00011F90 117C 0004 0001             		move.b	#4,obRender(a0)
00011F96 7000                       		moveq	#0,d0
00011F98 1028 0028                  		move.b	obSubtype(a0),d0
00011F9C E648                       		lsr.w	#3,d0
00011F9E 0240 001E                  		andi.w	#$1E,d0
00011FA2 45FB 0098                  		lea	MBlock_Var(pc,d0.w),a2
00011FA6 115A 0014                  		move.b	(a2)+,obActWid(a0)
00011FAA 115A 001A                  		move.b	(a2)+,obFrame(a0)
00011FAE 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011FB4 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00011FBA 3168 000C 0032             		move.w	obY(a0),mblock_origY(a0)
00011FC0 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00011FC6                            
00011FC6                            MBlock_Platform: ; Routine 2
00011FC6 6100 0000                  		bsr.w	MBlock_Move
00011FCA 7200                       		moveq	#0,d1
00011FCC 1228 0014                  		move.b	obActWid(a0),d1
00011FD0 4EB9 0000 8C24             		jsr	(PlatformObject).l
00011FD6 6000                       		bra.s	MBlock_ChkDel
00011FD8                            ; ===========================================================================
00011FD8                            
00011FD8                            MBlock_StandOn:	; Routine 4
00011FD8 7200                       		moveq	#0,d1
00011FDA 1228 0014                  		move.b	obActWid(a0),d1
00011FDE 4EB9 0000 8D98             		jsr	(ExitPlatform).l
00011FE4 3F28 0008                  		move.w	obX(a0),-(sp)
00011FE8 6100 0000                  		bsr.w	MBlock_Move
00011FEC 341F                       		move.w	(sp)+,d2
00011FEE 4EB9 0000 9302             		jsr	(MvSonicOnPtfm2).l
00011FF4                            
00011FF4                            MBlock_ChkDel:
00012012 6000 D56A                  		bra.w	DisplaySprite
00012016                            ; ===========================================================================
00012016                            
00012016                            MBlock_Move:
00012016 7000                       		moveq	#0,d0
00012018 1028 0028                  		move.b	obSubtype(a0),d0
0001201C 0240 000F                  		andi.w	#$F,d0
00012020 D040                       		add.w	d0,d0
00012022 323B 0000                  		move.w	MBlock_TypeIndex(pc,d0.w),d1
00012026 4EFB 1000                  		jmp	MBlock_TypeIndex(pc,d1.w)
0001202A                            ; ===========================================================================
0001202A 0000 0000                  MBlock_TypeIndex:dc.w MBlock_Type00-MBlock_TypeIndex, MBlock_Type01-MBlock_TypeIndex
0001202E 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type03-MBlock_TypeIndex
00012032 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type05-MBlock_TypeIndex
00012036 0000 0000                  		dc.w MBlock_Type06-MBlock_TypeIndex, MBlock_Type07-MBlock_TypeIndex
0001203A 0000 0000                  		dc.w MBlock_Type08-MBlock_TypeIndex, MBlock_Type02-MBlock_TypeIndex
0001203E 0000                       		dc.w MBlock_Type0A-MBlock_TypeIndex
00012040                            ; ===========================================================================
00012040                            
00012040                            MBlock_Type00:
00012040 4E75                       		rts	
00012042                            ; ===========================================================================
00012042                            
00012042                            MBlock_Type01:
00012042 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012046 323C 0060                  		move.w	#$60,d1
0001204A 0828 0000 0022             		btst	#0,obStatus(a0)
00012050 6700                       		beq.s	loc_FF26
00012052 4440                       		neg.w	d0
00012054 D041                       		add.w	d1,d0
00012056                            
00012056                            loc_FF26:
00012056 3228 0030                  		move.w	mblock_origX(a0),d1
0001205A 9240                       		sub.w	d0,d1
0001205C 3141 0008                  		move.w	d1,obX(a0)
00012060 4E75                       		rts	
00012062                            ; ===========================================================================
00012062                            
00012062                            MBlock_Type02:
00012062 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; is Sonic standing on the platform?
00012068 6600                       		bne.s	MBlock_02_Wait
0001206A 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
0001206E                            
0001206E                            MBlock_02_Wait:
0001206E 4E75                       		rts	
00012070                            ; ===========================================================================
00012070                            
00012070                            MBlock_Type03:
00012070 7600                       		moveq	#0,d3
00012072 1628 0014                  		move.b	obActWid(a0),d3
00012076 6100 0000                  		bsr.w	ObjHitWallRight
0001207A 4A41                       		tst.w	d1		; has the platform hit a wall?
0001207C 6B00                       		bmi.s	MBlock_03_End	; if yes, branch
0001207E 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
00012082 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00012088 4E75                       		rts	
0001208A                            ; ===========================================================================
0001208A                            
0001208A                            MBlock_03_End:
0001208A 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving	type)
0001208E 4E75                       		rts	
00012090                            ; ===========================================================================
00012090                            
00012090                            MBlock_Type05:
00012090 7600                       		moveq	#0,d3
00012092 1628 0014                  		move.b	obActWid(a0),d3
00012096 6100 0000                  		bsr.w	ObjHitWallRight
0001209A 4A41                       		tst.w	d1		; has the platform hit a wall?
0001209C 6B00                       		bmi.s	MBlock_05_End	; if yes, branch
0001209E 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
000120A2 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
000120A8 4E75                       		rts	
000120AA                            ; ===========================================================================
000120AA                            
000120AA                            MBlock_05_End:
000120AA 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 06 (falling)
000120AE 4E75                       		rts	
000120B0                            ; ===========================================================================
000120B0                            
000120B0                            MBlock_Type06:
000120B0 6100 D4B8                  		bsr.w	SpeedToPos
000120B4 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make the platform fall
000120BA 6100 0000                  		bsr.w	ObjFloorDist
000120BE 4A41                       		tst.w	d1		; has platform hit the floor?
000120C0 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
000120C4 D368 000C                  		add.w	d1,obY(a0)
000120C8 4268 0012                  		clr.w	obVelY(a0)	; stop platform	falling
000120CC 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving)
000120D0                            
000120D0                            locret_FFA0:
000120D0 4E75                       		rts	
000120D2                            ; ===========================================================================
000120D2                            
000120D2                            MBlock_Type07:
000120D2 4A38 F7E2                  		tst.b	(f_switch+2).w	; has switch number 02 been pressed?
000120D6 6700                       		beq.s	MBlock_07_ChkDel
000120D8 5728 0028                  		subq.b	#3,obSubtype(a0) ; if yes, change object type to 04
000120DC                            
000120DC                            MBlock_07_ChkDel:
000120DC 588F                       		addq.l	#4,sp
000120FC 4E75                       		rts	
000120FE                            ; ===========================================================================
000120FE                            
000120FE                            MBlock_Type08:
000120FE 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00012102 323C 0080                  		move.w	#$80,d1
00012106 0828 0000 0022             		btst	#0,obStatus(a0)
0001210C 6700                       		beq.s	loc_FFE2
0001210E 4440                       		neg.w	d0
00012110 D041                       		add.w	d1,d0
00012112                            
00012112                            loc_FFE2:
00012112 3228 0032                  		move.w	mblock_origY(a0),d1
00012116 9240                       		sub.w	d0,d1
00012118 3141 000C                  		move.w	d1,obY(a0)
0001211C 4E75                       		rts	
0001211E                            ; ===========================================================================
0001211E                            
0001211E                            MBlock_Type0A:
0001211E 7600                       		moveq	#0,d3
00012120 1628 0014                  		move.b	obActWid(a0),d3
00012124 D643                       		add.w	d3,d3
00012126 7208                       		moveq	#8,d1
00012128 0828 0000 0022             		btst	#0,obStatus(a0)
0001212E 6700                       		beq.s	loc_10004
00012130 4441                       		neg.w	d1
00012132 4443                       		neg.w	d3
00012134                            
00012134                            loc_10004:
00012134 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00012138 6600                       		bne.s	MBlock_0A_Back	; if yes, branch
0001213A 3028 0008                  		move.w	obX(a0),d0
0001213E 9068 0030                  		sub.w	mblock_origX(a0),d0
00012142 B043                       		cmp.w	d3,d0
00012144 6700                       		beq.s	MBlock_0A_Wait
00012146 D368 0008                  		add.w	d1,obX(a0)	; move platform
0001214A 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00012150 4E75                       		rts	
00012152                            ; ===========================================================================
00012152                            
00012152                            MBlock_0A_Wait:
00012152 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00012156 6600                       		bne.s	locret_1002E	; if time remains, branch
00012158 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
0001215E                            
0001215E                            locret_1002E:
0001215E 4E75                       		rts	
00012160                            ; ===========================================================================
00012160                            
00012160                            MBlock_0A_Back:
00012160 3028 0008                  		move.w	obX(a0),d0
00012164 9068 0030                  		sub.w	mblock_origX(a0),d0
00012168 6700                       		beq.s	MBlock_0A_Reset
0001216A 9368 0008                  		sub.w	d1,obX(a0)	; return platform to its original position
0001216E 4E75                       		rts	
00012170                            ; ===========================================================================
00012170                            
00012170                            MBlock_0A_Reset:
00012170 4268 0036                  		clr.w	$36(a0)
00012174 5328 0028                  		subq.b	#1,obSubtype(a0)
00012178 4E75                       		rts	
00012178 4E75                       		rts	
0001217A                            Map_MBlock:	include	"_maps\Moving Blocks (MZ and SBZ).asm"
0001217A                            ; ---------------------------------------------------------------------------
0001217A                            ; Sprite mappings - moving blocks (MZ, SBZ)
0001217A                            ; ---------------------------------------------------------------------------
0001217A                            Map_MBlock_internal:
0001217A 0000                       		dc.w @mz1-Map_MBlock_internal
0001217C 0000                       		dc.w @mz2-Map_MBlock_internal
0001217E 0000                       		dc.w @sbz-Map_MBlock_internal
00012180 0000                       		dc.w @sbzwide-Map_MBlock_internal
00012182 0000                       		dc.w @mz3-Map_MBlock_internal
00012184 01                         @mz1:		dc.b 1
00012185 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0001218A 02                         @mz2:		dc.b 2
0001218B F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00012190 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00012195 04                         @sbz:		dc.b 4
00012196 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
0001219B 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000121A0 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000121A5 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000121AA 04                         @sbzwide:	dc.b 4
000121AB F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
000121B0 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
000121B5 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000121BA F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
000121BF 03                         @mz3:		dc.b 3
000121C0 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
000121C5 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000121CA F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
000121D0 00                         		even
000121D0 00                         		even
000121D0                            Map_MBlockLZ:	include	"_maps\Moving Blocks (LZ).asm"
000121D0                            ; ---------------------------------------------------------------------------
000121D0                            ; Sprite mappings - moving block (LZ)
000121D0                            ; ---------------------------------------------------------------------------
000121D0                            Map_MBlockLZ_internal:
000121D0 0000                       		dc.w @0-Map_MBlockLZ_internal
000121D2 01                         @0:		dc.b 1
000121D3 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
000121D8                            		even
000121D8                            		even
000121D8                            
000121D8                            		include	"_incObj\55 Basaran.asm"
000121D8                            ; ---------------------------------------------------------------------------
000121D8                            ; Object 55 - Basaran enemy (MZ)
000121D8                            ; ---------------------------------------------------------------------------
000121D8                            
000121D8                            Basaran:
000121D8 7000                       		moveq	#0,d0
000121DA 1028 0024                  		move.b	obRoutine(a0),d0
000121DE 323B 0000                  		move.w	Bas_Index(pc,d0.w),d1
000121E2 4EFB 1000                  		jmp	Bas_Index(pc,d1.w)
000121E6                            ; ===========================================================================
000121E6 0000                       Bas_Index:	dc.w Bas_Main-Bas_Index
000121E8 0000                       		dc.w Bas_Action-Bas_Index
000121EA                            ; ===========================================================================
000121EA                            
000121EA                            Bas_Main:	; Routine 0
000121EA 5428 0024                  		addq.b	#2,obRoutine(a0)
000121EE 217C 0000 0000 0004        		move.l	#Map_Bas,obMap(a0)
000121F6 317C 84B8 0002             		move.w	#$84B8,obGfx(a0)
000121FC 117C 0004 0001             		move.b	#4,obRender(a0)
00012202 117C 000C 0016             		move.b	#$C,obHeight(a0)
00012208 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001220E 117C 000B 0020             		move.b	#$B,obColType(a0)
00012214 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001221A                            
0001221A                            Bas_Action:	; Routine 2
0001221A 7000                       		moveq	#0,d0
0001221C 1028 0025                  		move.b	ob2ndRout(a0),d0
00012220 323B 0000                  		move.w	@index(pc,d0.w),d1
00012224 4EBB 1000                  		jsr	@index(pc,d1.w)
00012228 43F9 0000 0000             		lea	(Ani_Bas).l,a1
0001222E 6100 A404                  		bsr.w	AnimateSprite
00012232 6000 F412                  		bra.w	RememberState
00012236                            ; ===========================================================================
00012236 0000                       @index:		dc.w @dropcheck-@index
00012238 0000                       		dc.w @dropfly-@index
0001223A 0000                       		dc.w @flapsound-@index
0001223C 0000                       		dc.w @flyup-@index
0001223E                            ; ===========================================================================
0001223E                            
0001223E                            @dropcheck:
0001223E 343C 0080                  		move.w	#$80,d2
00012242 6100 0000                  		bsr.w	@chkdistance	; is Sonic < $80 pixels from basaran?
00012246 6400                       		bcc.s	@nodrop		; if not, branch
00012248 3038 D00C                  		move.w	(v_player+obY).w,d0
0001224C 3140 0036                  		move.w	d0,$36(a0)
00012250 9068 000C                  		sub.w	obY(a0),d0
00012254 6500                       		bcs.s	@nodrop
00012256 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic < $80 pixels from basaran?
0001225A 6400                       		bcc.s	@nodrop		; if not, branch
0001225C 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00012260 6600                       		bne.s	@nodrop		; if yes, branch
00012262                            
00012262 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012266 D007                       		add.b	d7,d0
00012268 0200 0007                  		andi.b	#7,d0
0001226C 6600                       		bne.s	@nodrop
0001226E 117C 0001 001C             		move.b	#1,obAnim(a0)
00012274 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012278                            
00012278                            	@nodrop:
00012278 4E75                       		rts	
0001227A                            ; ===========================================================================
0001227A                            
0001227A                            @dropfly:
0001227A 6100 D2EE                  		bsr.w	SpeedToPos
0001227E 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make basaran fall
00012284 343C 0080                  		move.w	#$80,d2
00012288 6100 0000                  		bsr.w	@chkdistance
0001228C 3028 0036                  		move.w	$36(a0),d0
00012290 9068 000C                  		sub.w	obY(a0),d0
00012294 6500                       		bcs.s	@chkdel
00012296 0C40 0010                  		cmpi.w	#$10,d0		; is basaran close to Sonic vertically?
0001229A 6400                       		bcc.s	@dropmore	; if not, branch
0001229C 3141 0010                  		move.w	d1,obVelX(a0)	; make basaran fly horizontally
000122A0 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop basaran falling
000122A6 117C 0002 001C             		move.b	#2,obAnim(a0)
000122AC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000122B0                            
000122B0                            	@dropmore:
000122B0 4E75                       		rts	
000122B2                            
000122B2                            	@chkdel:
000122B2 4A28 0001                  		tst.b	obRender(a0)
000122B6 6A00 D306                  		bpl.w	DeleteObject
000122BA 4E75                       		rts	
000122BC                            ; ===========================================================================
000122BC                            
000122BC                            @flapsound:
000122BC 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000122C0 0200 000F                  		andi.b	#$F,d0
000122C4 6600                       		bne.s	@nosound
000122D0                            
000122D0                            	@nosound:
000122D0 6100 D298                  		bsr.w	SpeedToPos
000122D4 3038 D008                  		move.w	(v_player+obX).w,d0
000122D8 9068 0008                  		sub.w	obX(a0),d0
000122DC 6400                       		bcc.s	@isright	; if Sonic is right of basaran, branch
000122DE 4440                       		neg.w	d0
000122E0                            
000122E0                            	@isright:
000122E0 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of basaran?
000122E4 6500                       		bcs.s	@dontflyup	; if yes, branch
000122E6 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000122EA D007                       		add.b	d7,d0
000122EC 0200 0007                  		andi.b	#7,d0
000122F0 6600                       		bne.s	@dontflyup
000122F2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000122F6                            
000122F6                            @dontflyup:
000122F6 4E75                       		rts	
000122F8                            ; ===========================================================================
000122F8                            
000122F8                            @flyup:
000122F8 6100 D270                  		bsr.w	SpeedToPos
000122FC 0468 0018 0012             		subi.w	#$18,obVelY(a0)	; make basaran fly upwards
00012302 6100 0000                  		bsr.w	ObjHitCeiling
00012306 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00012308 6A00                       		bpl.s	@noceiling	; if not, branch
0001230A 9368 000C                  		sub.w	d1,obY(a0)
0001230E 0268 FFF8 0008             		andi.w	#$FFF8,obX(a0)
00012314 4268 0010                  		clr.w	obVelX(a0)	; stop basaran moving
00012318 4268 0012                  		clr.w	obVelY(a0)
0001231C 4228 001C                  		clr.b	obAnim(a0)
00012320 4228 0025                  		clr.b	ob2ndRout(a0)
00012324                            
00012324                            	@noceiling:
00012324 4E75                       		rts	
00012326                            ; ===========================================================================
00012326                            
00012326                            ; Subroutine to check Sonic's distance from the basaran
00012326                            
00012326                            ; input:
00012326                            ;	d2 = distance to compare
00012326                            
00012326                            ; output:
00012326                            ;	d0 = distance between Sonic and basaran
00012326                            ;	d1 = speed/direction for basaran to fly
00012326                            
00012326                            @chkdistance:
00012326 323C 0100                  		move.w	#$100,d1
0001232A 08E8 0000 0022             		bset	#0,obStatus(a0)
00012330 3038 D008                  		move.w	(v_player+obX).w,d0
00012334 9068 0008                  		sub.w	obX(a0),d0
00012338 6400                       		bcc.s	@right		; if Sonic is right of basaran, branch
0001233A 4440                       		neg.w	d0
0001233C 4441                       		neg.w	d1
0001233E 08A8 0000 0022             		bclr	#0,obStatus(a0)
00012344                            
00012344                            	@right:
00012344 B042                       		cmp.w	d2,d0
00012346 4E75                       		rts	
00012348                            ; ===========================================================================
00012348                            ; unused crap
00012348 6100 D220                  		bsr.w	SpeedToPos
0001234C 6100 D230                  		bsr.w	DisplaySprite
00012350 4A28 0001                  		tst.b	obRender(a0)
00012354 6A00 D268                  		bpl.w	DeleteObject
00012358 4E75                       		rts	
00012358 4E75                       		rts	
0001235A                            		include	"_anim\Basaran.asm"
0001235A                            ; ---------------------------------------------------------------------------
0001235A                            ; Animation script - Basaran enemy
0001235A                            ; ---------------------------------------------------------------------------
0001235A 0000                       Ani_Bas:	dc.w @still-Ani_Bas
0001235C 0000                       		dc.w @fall-Ani_Bas
0001235E 0000                       		dc.w @fly-Ani_Bas
00012360 0F00 FF                    @still:		dc.b $F, 0, afEnd
00012364 00                         		even
00012364 0F01 FF                    @fall:		dc.b $F, 1, afEnd
00012368 00                         		even
00012368 0301 0203 02FF             @fly:		dc.b 3,	1, 2, 3, 2, afEnd
0001236E                            		even
0001236E                            		even
0001236E                            Map_Bas:	include	"_maps\Basaran.asm"
0001236E                            ; --------------------------------------------------------------------------------
0001236E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001236E                            ; --------------------------------------------------------------------------------
0001236E                            
0001236E                            SME_RhYYA:	
0001236E 0000 0000                  		dc.w SME_RhYYA_8-SME_RhYYA, SME_RhYYA_E-SME_RhYYA	
00012372 0000 0000                  		dc.w SME_RhYYA_1E-SME_RhYYA, SME_RhYYA_33-SME_RhYYA	
00012376 01                         SME_RhYYA_8:	dc.b 1	
00012377 F406 2000 F8               		dc.b $F4, 6, $20, 0, $F8	
0001237C 03                         SME_RhYYA_E:	dc.b 3	
0001237D F20E 2006 F4               		dc.b $F2, $E, $20, 6, $F4	
00012382 0A04 2012 FC               		dc.b $A, 4, $20, $12, $FC	
00012387 0200 2027 0C               		dc.b 2, 0, $20, $27, $C	
0001238C 04                         SME_RhYYA_1E:	dc.b 4	
0001238D F804 2014 F8               		dc.b $F8, 4, $20, $14, $F8	
00012392 000C 2016 F0               		dc.b 0, $C, $20, $16, $F0	
00012397 0804 201A 00               		dc.b 8, 4, $20, $1A, 0	
0001239C 0000 2028 0C               		dc.b 0, 0, $20, $28, $C	
000123A1 04                         SME_RhYYA_33:	dc.b 4	
000123A2 F609 201C F5               		dc.b $F6, 9, $20, $1C, $F5	
000123A7 0608 2022 F4               		dc.b 6, 8, $20, $22, $F4	
000123AC 0E04 2025 F4               		dc.b $E, 4, $20, $25, $F4	
000123B1 FE00 2027 0C               		dc.b $FE, 0, $20, $27, $C	
000123B6                            		even
000123B6                            		even
000123B6                            
000123B6                            		include	"_incObj\56 Floating Blocks and Doors.asm"
000123B6                            ; ---------------------------------------------------------------------------
000123B6                            ; Object 56 - floating blocks (SYZ/SLZ), large doors (LZ)
000123B6                            ; ---------------------------------------------------------------------------
000123B6                            
000123B6                            FloatingBlock:
000123B6 7000                       		moveq	#0,d0
000123B8 1028 0024                  		move.b	obRoutine(a0),d0
000123BC 323B 0000                  		move.w	FBlock_Index(pc,d0.w),d1
000123C0 4EFB 1000                  		jmp	FBlock_Index(pc,d1.w)
000123C4                            ; ===========================================================================
000123C4 0000                       FBlock_Index:	dc.w FBlock_Main-FBlock_Index
000123C6 0000                       		dc.w FBlock_Action-FBlock_Index
000123C8                            
000123C8 =00000034                  fb_origX:	equ $34		; original x-axis position
000123C8 =00000030                  fb_origY:	equ $30		; original y-axis position
000123C8 =0000003A                  fb_height:	equ $3A		; total object height
000123C8 =0000003C                  fb_type:		equ $3C		; subtype (2nd digit only)
000123C8                            
000123C8                            FBlock_Var:	; width/2, height/2
000123C8 1010                       		dc.b  $10, $10	; subtype 0x/8x
000123CA 2020                       		dc.b  $20, $20	; subtype 1x/9x
000123CC 1020                       		dc.b  $10, $20	; subtype 2x/Ax
000123CE 201A                       		dc.b  $20, $1A	; subtype 3x/Bx
000123D0 1027                       		dc.b  $10, $27	; subtype 4x/Cx
000123D2 1010                       		dc.b  $10, $10	; subtype 5x/Dx
000123D4 0820                       		dc.b	8, $20	; subtype 6x/Ex
000123D6 4010                       		dc.b  $40, $10	; subtype 7x/Fx
000123D8                            ; ===========================================================================
000123D8                            
000123D8                            FBlock_Main:	; Routine 0
000123D8 5428 0024                  		addq.b	#2,obRoutine(a0)
000123DC 217C 0000 0000 0004        		move.l	#Map_FBlock,obMap(a0)
000123E4 317C 4000 0002             		move.w	#$4000,obGfx(a0)
000123EA 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000123F0 6600                       		bne.s	@notLZ
000123F2 317C 43C4 0002             		move.w	#$43C4,obGfx(a0) ; LZ specific code
000123F8                            
000123F8                            	@notLZ:
000123F8 117C 0004 0001             		move.b	#4,obRender(a0)
000123FE 317C 0180 0018             		move.w	#$180,obPriority(a0)
00012404 7000                       		moveq	#0,d0
00012406 1028 0028                  		move.b	obSubtype(a0),d0 ; get subtype
0001240A E648                       		lsr.w	#3,d0
0001240C 0240 000E                  		andi.w	#$E,d0		; read only the 1st digit
00012410 45FB 00B6                  		lea	FBlock_Var(pc,d0.w),a2 ; get size data
00012414 115A 0014                  		move.b	(a2)+,obActWid(a0)
00012418 1152 0016                  		move.b	(a2),obHeight(a0)
0001241C E248                       		lsr.w	#1,d0
0001241E 1140 001A                  		move.b	d0,obFrame(a0)
00012422 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
00012428 3168 000C 0030             		move.w	obY(a0),fb_origY(a0)
0001242E 7000                       		moveq	#0,d0
00012430 1012                       		move.b	(a2),d0
00012432 D040                       		add.w	d0,d0
00012434 3140 003A                  		move.w	d0,fb_height(a0)
00012438 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
0001243E 6600                       			bne.s	@dontdelete
00012440 0C68 1BB8 0008             			cmpi.w	#$1BB8,obX(a0)
00012446 6600                       			bne.s	@notatpos
00012448 4A38 F7CE                  			tst.b	($FFFFF7CE).w
0001244C 6700                       			beq.s	@dontdelete
0001244E 4EF9 0000 F5BE             			jmp	(DeleteObject).l
00012454                            	@notatpos:
00012454 4228 0028                  			clr.b	obSubtype(a0)
00012458 4A38 F7CE                  			tst.b	($FFFFF7CE).w
0001245C 6600                       			bne.s	@dontdelete
0001245E 4EF9 0000 F5BE             			jmp	(DeleteObject).l
00012464                            	@dontdelete:
00012464 7000                       		moveq	#0,d0
00012466 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
0001246C 6700                       		beq.s	@stillnotLZ
0001246E 1028 0028                  		move.b	obSubtype(a0),d0 ; SYZ/SLZ specific code
00012472 0240 000F                  		andi.w	#$F,d0
00012476 5140                       		subq.w	#8,d0
00012478 6500                       		bcs.s	@stillnotLZ
0001247A E548                       		lsl.w	#2,d0
0001247C 45F8 FE8A                  		lea	(v_oscillate+$2C).w,a2
00012480 45F2 0000                  		lea	(a2,d0.w),a2
00012484 4A52                       		tst.w	(a2)
00012486 6A00                       		bpl.s	@stillnotLZ
00012488 0868 0000 0022             		bchg	#0,obStatus(a0)
0001248E                            
0001248E                            	@stillnotLZ:
0001248E 1028 0028                  		move.b	obSubtype(a0),d0
00012492 6A00                       		bpl.s	FBlock_Action
00012494 0200 000F                  		andi.b	#$F,d0
00012498 1140 003C                  		move.b	d0,fb_type(a0)
0001249C 117C 0005 0028             		move.b	#5,obSubtype(a0)
000124A2 0C28 0007 001A             		cmpi.b	#7,obFrame(a0)
000124A8 6600                       		bne.s	@chkstate
000124AA 117C 000C 0028             		move.b	#$C,obSubtype(a0)
000124B0 317C 0080 003A             		move.w	#$80,fb_height(a0)
000124B6                            
000124B6                            @chkstate:
000124B6 45F8 FC00                  		lea	(v_objstate).w,a2
000124BA 7000                       		moveq	#0,d0
000124BC 1028 0023                  		move.b	obRespawnNo(a0),d0
000124C0 6700                       		beq.s	FBlock_Action
000124C2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000124C8 0832 0000 0002             		btst	#0,2(a2,d0.w)
000124CE 6700                       		beq.s	FBlock_Action
000124D0 5228 0028                  		addq.b	#1,obSubtype(a0)
000124D4 4268 003A                  		clr.w	fb_height(a0)
000124D8                            
000124D8                            FBlock_Action:	; Routine 2
000124D8 3F28 0008                  		move.w	obX(a0),-(sp)
000124DC 7000                       		moveq	#0,d0
000124DE 1028 0028                  		move.b	obSubtype(a0),d0 ; get object subtype
000124E2 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000124E6 D040                       		add.w	d0,d0
000124E8 323B 0000                  		move.w	@index(pc,d0.w),d1
000124EC 4EBB 1000                  		jsr	@index(pc,d1.w)	; move block subroutines
000124F0 381F                       		move.w	(sp)+,d4
000124F2 4A28 0001                  		tst.b	obRender(a0)
000124F6 6A00                       		bpl.s	@chkdel
000124F8 7200                       		moveq	#0,d1
000124FA 1228 0014                  		move.b	obActWid(a0),d1
000124FE 0641 000B                  		addi.w	#$B,d1
00012502 7400                       		moveq	#0,d2
00012504 1428 0016                  		move.b	obHeight(a0),d2
00012508 3602                       		move.w	d2,d3
0001250A 5243                       		addq.w	#1,d3
0001250C 6100 F5D0                  		bsr.w	SolidObject
00012510                            
00012510                            	@chkdel:
0001252C                            		@display:
0001252C 6000 D050                  			bra.w	DisplaySprite
00012530                            		@chkdel2:
00012530 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
00012536 6600                       			bne.s	@delete
00012538 4A28 0038                  			tst.b	$38(a0)
0001253C 66EE                       			bne.s	@display
0001253E                            		@delete:
0001253E 4EF9 0000 F5BE             			jmp	(DeleteObject).l
00012544                            ; ===========================================================================
00012544 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00012548 0000 0000                  		dc.w @type02-@index, @type03-@index
0001254C 0000 0000                  		dc.w @type04-@index, @type05-@index
00012550 0000 0000                  		dc.w @type06-@index, @type07-@index
00012554 0000 0000                  		dc.w @type08-@index, @type09-@index
00012558 0000 0000                  		dc.w @type0A-@index, @type0B-@index
0001255C 0000 0000                  		dc.w @type0C-@index, @type0D-@index
00012560                            ; ===========================================================================
00012560                            
00012560                            @type00:
00012560                            ; doesn't move
00012560 4E75                       		rts	
00012562                            ; ===========================================================================
00012562                            
00012562                            @type01:
00012562                            ; moves side-to-side
00012562 323C 0040                  		move.w	#$40,d1		; set move distance
00012566 7000                       		moveq	#0,d0
00012568 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0001256C 6000                       		bra.s	@moveLR
0001256E                            ; ===========================================================================
0001256E                            
0001256E                            @type02:
0001256E                            ; moves side-to-side
0001256E 323C 0080                  		move.w	#$80,d1		; set move distance
00012572 7000                       		moveq	#0,d0
00012574 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00012578                            
00012578                            	@moveLR:
00012578 0828 0000 0022             		btst	#0,obStatus(a0)
0001257E 6700                       		beq.s	@noflip
00012580 4440                       		neg.w	d0
00012582 D041                       		add.w	d1,d0
00012584                            
00012584                            	@noflip:
00012584 3228 0034                  		move.w	fb_origX(a0),d1
00012588 9240                       		sub.w	d0,d1
0001258A 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
0001258E 4E75                       		rts	
00012590                            ; ===========================================================================
00012590                            
00012590                            @type03:
00012590                            ; moves up/down
00012590 323C 0040                  		move.w	#$40,d1		; set move distance
00012594 7000                       		moveq	#0,d0
00012596 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0001259A 6000                       		bra.s	@moveUD
0001259C                            ; ===========================================================================
0001259C                            
0001259C                            @type04:
0001259C                            ; moves up/down
0001259C 323C 0080                  		move.w	#$80,d1		; set move distance
000125A0 7000                       		moveq	#0,d0
000125A2 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
000125A6                            
000125A6                            	@moveUD:
000125A6 0828 0000 0022             		btst	#0,obStatus(a0)
000125AC 6700                       		beq.s	@noflip04
000125AE 4440                       		neg.w	d0
000125B0 D041                       		add.w	d1,d0
000125B2                            
000125B2                            	@noflip04:
000125B2 3228 0030                  		move.w	fb_origY(a0),d1
000125B6 9240                       		sub.w	d0,d1
000125B8 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
000125BC 4E75                       		rts	
000125BE                            ; ===========================================================================
000125BE                            
000125BE                            @type05:
000125BE                            ; moves up when a switch is pressed
000125BE 4A28 0038                  		tst.b	$38(a0)
000125C2 6600                       		bne.s	@loc_104A4
000125C4 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
000125CA 6600                       		bne.s	@aaa		; if not, branch
000125CC 0C28 0003 003C             		cmpi.b	#3,fb_type(a0)
000125D2 6600                       		bne.s	@aaa
000125D4 4238 F7C9                  		clr.b	(f_wtunnelallow).w
000125D8 3038 D008                  		move.w	(v_player+obX).w,d0
000125DC B068 0008                  		cmp.w	obX(a0),d0
000125E0 6400                       		bcc.s	@aaa
000125E2 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w
000125E8                            
000125E8                            	@aaa:
000125E8 45F8 F7E0                  		lea	(f_switch).w,a2
000125EC 7000                       		moveq	#0,d0
000125EE 1028 003C                  		move.b	fb_type(a0),d0
000125F2 0832 0000 0000             		btst	#0,(a2,d0.w)
000125F8 6700                       		beq.s	@loc_104AE
000125FA 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
00012600 6600                       		bne.s	@loc_1049E	; if not, branch
00012602 0C00 0003                  		cmpi.b	#3,d0
00012606 6600                       		bne.s	@loc_1049E
00012608 4238 F7C9                  		clr.b	(f_wtunnelallow).w
0001260C                            
0001260C                            @loc_1049E:
0001260C 117C 0001 0038             		move.b	#1,$38(a0)
00012612                            
00012612                            @loc_104A4:
00012612 4A68 003A                  		tst.w	fb_height(a0)
00012616 6700                       		beq.s	@loc_104C8
00012618 5568 003A                  		subq.w	#2,fb_height(a0)
0001261C                            
0001261C                            @loc_104AE:
0001261C 3028 003A                  		move.w	fb_height(a0),d0
00012620 0828 0000 0022             		btst	#0,$22(a0)
00012626 6700                       		beq.s	@loc_104BC
00012628 4440                       		neg.w	d0
0001262A                            
0001262A                            @loc_104BC:
0001262A 3228 0030                  		move.w	fb_origY(a0),d1
0001262E D240                       		add.w	d0,d1
00012630 3141 000C                  		move.w	d1,obY(a0)
00012634 4E75                       		rts	
00012636                            ; ===========================================================================
00012636                            
00012636                            @loc_104C8:
00012636 5228 0028                  		addq.b	#1,$28(a0)
0001263A 4228 0038                  		clr.b	$38(a0)
0001263E 45F8 FC00                  		lea	(v_objstate).w,a2
00012642 7000                       		moveq	#0,d0
00012644 1028 0023                  		move.b	obRespawnNo(a0),d0
00012648 67D2                       		beq.s	@loc_104AE
0001264A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00012650 60CA                       		bra.s	@loc_104AE
00012652                            ; ===========================================================================
00012652                            
00012652                            @type06:
00012652 4A28 0038                  		tst.b	$38(a0)
00012656 6600                       		bne.s	@loc_10500
00012658 45F8 F7E0                  		lea	(f_switch).w,a2
0001265C 7000                       		moveq	#0,d0
0001265E 1028 003C                  		move.b	fb_type(a0),d0
00012662 4A32 0000                  		tst.b	(a2,d0.w)
00012666 6A00                       		bpl.s	@loc_10512
00012668 117C 0001 0038             		move.b	#1,$38(a0)
0001266E                            
0001266E                            @loc_10500:
0001266E 7000                       		moveq	#0,d0
00012670 1028 0016                  		move.b	obHeight(a0),d0
00012674 D040                       		add.w	d0,d0
00012676 B068 003A                  		cmp.w	fb_height(a0),d0
0001267A 6700                       		beq.s	@loc_1052C
0001267C 5468 003A                  		addq.w	#2,fb_height(a0)
00012680                            
00012680                            @loc_10512:
00012680 3028 003A                  		move.w	fb_height(a0),d0
00012684 0828 0000 0022             		btst	#0,obStatus(a0)
0001268A 6700                       		beq.s	@loc_10520
0001268C 4440                       		neg.w	d0
0001268E                            
0001268E                            @loc_10520:
0001268E 3228 0030                  		move.w	fb_origY(a0),d1
00012692 D240                       		add.w	d0,d1
00012694 3141 000C                  		move.w	d1,obY(a0)
00012698 4E75                       		rts	
0001269A                            ; ===========================================================================
0001269A                            
0001269A                            @loc_1052C:
0001269A 5328 0028                  		subq.b	#1,obSubtype(a0)
0001269E 4228 0038                  		clr.b	$38(a0)
000126A2 45F8 FC00                  		lea	(v_objstate).w,a2
000126A6 7000                       		moveq	#0,d0
000126A8 1028 0023                  		move.b	obRespawnNo(a0),d0
000126AC 67D2                       		beq.s	@loc_10512
000126AE 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000126B4 60CA                       		bra.s	@loc_10512
000126B6                            ; ===========================================================================
000126B6                            
000126B6                            @type07:
000126B6 4A28 0038                  		tst.b	$38(a0)
000126BA 6600                       		bne.s	@loc_1055E
000126BC 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch number $F been pressed?
000126C0 6700                       		beq.s	@locret_10578
000126C2 117C 0001 0038             		move.b	#1,$38(a0)
000126C8 4268 003A                  		clr.w	fb_height(a0)
000126CC                            
000126CC                            @loc_1055E:
000126CC 5268 0008                  		addq.w	#1,obX(a0)
000126D0 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
000126D6 5268 003A                  		addq.w	#1,fb_height(a0)
000126DA 0C68 0380 003A             		cmpi.w	#$380,fb_height(a0)
000126E0 6600                       		bne.s	@locret_10578
000126E2 11FC 0001 F7CE             			move.b	#1,($FFFFF7CE).w
000126E8 4228 0038                  			clr.b	$38(a0)
000126EC 4228 0028                  		clr.b	obSubtype(a0)
000126F0                            
000126F0                            @locret_10578:
000126F0 4E75                       		rts	
000126F2                            ; ===========================================================================
000126F2                            
000126F2                            @type0C:
000126F2 4A28 0038                  		tst.b	$38(a0)
000126F6 6600                       		bne.s	@loc_10598
000126F8 45F8 F7E0                  		lea	(f_switch).w,a2
000126FC 7000                       		moveq	#0,d0
000126FE 1028 003C                  		move.b	fb_type(a0),d0
00012702 0832 0000 0000             		btst	#0,(a2,d0.w)
00012708 6700                       		beq.s	@loc_105A2
0001270A 117C 0001 0038             		move.b	#1,$38(a0)
00012710                            
00012710                            @loc_10598:
00012710 4A68 003A                  		tst.w	fb_height(a0)
00012714 6700                       		beq.s	@loc_105C0
00012716 5568 003A                  		subq.w	#2,fb_height(a0)
0001271A                            
0001271A                            @loc_105A2:
0001271A 3028 003A                  		move.w	fb_height(a0),d0
0001271E 0828 0000 0022             		btst	#0,obStatus(a0)
00012724 6700                       		beq.s	@loc_105B4
00012726 4440                       		neg.w	d0
00012728 0640 0080                  		addi.w	#$80,d0
0001272C                            
0001272C                            @loc_105B4:
0001272C 3228 0034                  		move.w	fb_origX(a0),d1
00012730 D240                       		add.w	d0,d1
00012732 3141 0008                  		move.w	d1,obX(a0)
00012736 4E75                       		rts	
00012738                            ; ===========================================================================
00012738                            
00012738                            @loc_105C0:
00012738 5228 0028                  		addq.b	#1,obSubtype(a0)
0001273C 4228 0038                  		clr.b	$38(a0)
00012740 45F8 FC00                  		lea	(v_objstate).w,a2
00012744 7000                       		moveq	#0,d0
00012746 1028 0023                  		move.b	obRespawnNo(a0),d0
0001274A 67CE                       		beq.s	@loc_105A2
0001274C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00012752 60C6                       		bra.s	@loc_105A2
00012754                            ; ===========================================================================
00012754                            
00012754                            @type0D:
00012754 4A28 0038                  		tst.b	$38(a0)
00012758 6600                       		bne.s	@loc_105F8
0001275A 45F8 F7E0                  		lea	(f_switch).w,a2
0001275E 7000                       		moveq	#0,d0
00012760 1028 003C                  		move.b	fb_type(a0),d0
00012764 4A32 0000                  		tst.b	(a2,d0.w)
00012768 6A00                       		bpl.s	@wtf
0001276A 117C 0001 0038             		move.b	#1,$38(a0)
00012770                            
00012770                            @loc_105F8:
00012770 303C 0080                  		move.w	#$80,d0
00012774 B068 003A                  		cmp.w	fb_height(a0),d0
00012778 6700                       		beq.s	@loc_10624
0001277A 5468 003A                  		addq.w	#2,fb_height(a0)
0001277E                            
0001277E                            @wtf:
0001277E 3028 003A                  		move.w	fb_height(a0),d0
00012782 0828 0000 0022             		btst	#0,obStatus(a0)
00012788 6700                       		beq.s	@loc_10618
0001278A 4440                       		neg.w	d0
0001278C 0640 0080                  		addi.w	#$80,d0
00012790                            
00012790                            @loc_10618:
00012790 3228 0034                  		move.w	fb_origX(a0),d1
00012794 D240                       		add.w	d0,d1
00012796 3141 0008                  		move.w	d1,obX(a0)
0001279A 4E75                       		rts	
0001279C                            ; ===========================================================================
0001279C                            
0001279C                            @loc_10624:
0001279C 5328 0028                  		subq.b	#1,obSubtype(a0)
000127A0 4228 0038                  		clr.b	$38(a0)
000127A4 45F8 FC00                  		lea	(v_objstate).w,a2
000127A8 7000                       		moveq	#0,d0
000127AA 1028 0023                  		move.b	obRespawnNo(a0),d0
000127AE 67CE                       		beq.s	@wtf
000127B0 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000127B6 60C6                       		bra.s	@wtf
000127B8                            ; ===========================================================================
000127B8                            
000127B8                            @type08:
000127B8 323C 0010                  		move.w	#$10,d1
000127BC 7000                       		moveq	#0,d0
000127BE 1038 FE88                  		move.b	(v_oscillate+$2A).w,d0
000127C2 E248                       		lsr.w	#1,d0
000127C4 3638 FE8A                  		move.w	(v_oscillate+$2C).w,d3
000127C8 6000                       		bra.s	@square
000127CA                            ; ===========================================================================
000127CA                            
000127CA                            @type09:
000127CA 323C 0030                  		move.w	#$30,d1
000127CE 7000                       		moveq	#0,d0
000127D0 1038 FE8C                  		move.b	(v_oscillate+$2E).w,d0
000127D4 3638 FE8E                  		move.w	(v_oscillate+$30).w,d3
000127D8 6000                       		bra.s	@square
000127DA                            ; ===========================================================================
000127DA                            
000127DA                            @type0A:
000127DA 323C 0050                  		move.w	#$50,d1
000127DE 7000                       		moveq	#0,d0
000127E0 1038 FE90                  		move.b	(v_oscillate+$32).w,d0
000127E4 3638 FE92                  		move.w	(v_oscillate+$34).w,d3
000127E8 6000                       		bra.s	@square
000127EA                            ; ===========================================================================
000127EA                            
000127EA                            @type0B:
000127EA 323C 0070                  		move.w	#$70,d1
000127EE 7000                       		moveq	#0,d0
000127F0 1038 FE94                  		move.b	(v_oscillate+$36).w,d0
000127F4 3638 FE96                  		move.w	(v_oscillate+$38).w,d3
000127F8                            
000127F8                            @square:
000127F8 4A43                       		tst.w	d3
000127FA 6600                       		bne.s	@loc_1068E
000127FC 5228 0022                  		addq.b	#1,obStatus(a0)
00012800 0228 0003 0022             		andi.b	#3,obStatus(a0)
00012806                            
00012806                            @loc_1068E:
00012806 1428 0022                  		move.b	obStatus(a0),d2
0001280A 0202 0003                  		andi.b	#3,d2
0001280E 6600                       		bne.s	@loc_106AE
00012810 9041                       		sub.w	d1,d0
00012812 D068 0034                  		add.w	fb_origX(a0),d0
00012816 3140 0008                  		move.w	d0,obX(a0)
0001281A 4441                       		neg.w	d1
0001281C D268 0030                  		add.w	fb_origY(a0),d1
00012820 3141 000C                  		move.w	d1,obY(a0)
00012824 4E75                       		rts	
00012826                            ; ===========================================================================
00012826                            
00012826                            @loc_106AE:
00012826 5302                       		subq.b	#1,d2
00012828 6600                       		bne.s	@loc_106CC
0001282A 5341                       		subq.w	#1,d1
0001282C 9041                       		sub.w	d1,d0
0001282E 4440                       		neg.w	d0
00012830 D068 0030                  		add.w	fb_origY(a0),d0
00012834 3140 000C                  		move.w	d0,obY(a0)
00012838 5241                       		addq.w	#1,d1
0001283A D268 0034                  		add.w	fb_origX(a0),d1
0001283E 3141 0008                  		move.w	d1,obX(a0)
00012842 4E75                       		rts	
00012844                            ; ===========================================================================
00012844                            
00012844                            @loc_106CC:
00012844 5302                       		subq.b	#1,d2
00012846 6600                       		bne.s	@loc_106EA
00012848 5341                       		subq.w	#1,d1
0001284A 9041                       		sub.w	d1,d0
0001284C 4440                       		neg.w	d0
0001284E D068 0034                  		add.w	fb_origX(a0),d0
00012852 3140 0008                  		move.w	d0,obX(a0)
00012856 5241                       		addq.w	#1,d1
00012858 D268 0030                  		add.w	fb_origY(a0),d1
0001285C 3141 000C                  		move.w	d1,obY(a0)
00012860 4E75                       		rts	
00012862                            ; ===========================================================================
00012862                            
00012862                            @loc_106EA:
00012862 9041                       		sub.w	d1,d0
00012864 D068 0030                  		add.w	fb_origY(a0),d0
00012868 3140 000C                  		move.w	d0,obY(a0)
0001286C 4441                       		neg.w	d1
0001286E D268 0034                  		add.w	fb_origX(a0),d1
00012872 3141 0008                  		move.w	d1,obX(a0)
00012876 4E75                       		rts	
00012876 4E75                       		rts	
00012878                            Map_FBlock:	include	"_maps\Floating Blocks and Doors.asm"
00012878                            ; ---------------------------------------------------------------------------
00012878                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00012878                            ; ---------------------------------------------------------------------------
00012878                            Map_FBlock_internal:
00012878 0000                       		dc.w @syz1x1-Map_FBlock_internal
0001287A 0000                       		dc.w @syz2x2-Map_FBlock_internal
0001287C 0000                       		dc.w @syz1x2-Map_FBlock_internal
0001287E 0000                       		dc.w @syzrect2x2-Map_FBlock_internal
00012880 0000                       		dc.w @syzrect1x3-Map_FBlock_internal
00012882 0000                       		dc.w @slz-Map_FBlock_internal
00012884 0000                       		dc.w @lzvert-Map_FBlock_internal
00012886 0000                       		dc.w @lzhoriz-Map_FBlock_internal
00012888 01                         @syz1x1:	dc.b 1
00012889 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0 ; SYZ - 1x1 square block
0001288E 04                         @syz2x2:	dc.b 4
0001288F E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0 ; SYZ - 2x2 square blocks
00012894 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00012899 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
0001289E 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
000128A3 02                         @syz1x2:	dc.b 2
000128A4 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0 ; SYZ - 1x2 square blocks
000128A9 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
000128AE 04                         @syzrect2x2:	dc.b 4
000128AF E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0 ; SYZ - 2x2 rectangular blocks
000128B4 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
000128B9 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
000128BE 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
000128C3 03                         @syzrect1x3:	dc.b 3
000128C4 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0 ; SYZ - 1x3 rectangular blocks
000128C9 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
000128CE 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
000128D3 01                         @slz:		dc.b 1
000128D4 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0 ; SLZ - 1x1 square block
000128D9 02                         @lzvert:	dc.b 2
000128DA E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8	; LZ - small vertical door
000128DF 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000128E4 04                         @lzhoriz:	dc.b 4
000128E5 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0 ; LZ - large horizontal door
000128EA F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
000128EF F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
000128F4 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
000128FA 00                         		even
000128FA 00                         		even
000128FA                            
000128FA                            		include	"_incObj\57 Spiked Ball and Chain.asm"
000128FA                            ; ---------------------------------------------------------------------------
000128FA                            ; Object 57 - spiked balls (SYZ, LZ)
000128FA                            ; ---------------------------------------------------------------------------
000128FA                            
000128FA                            SpikeBall:
000128FA 7000                       		moveq	#0,d0
000128FC 1028 0024                  		move.b	obRoutine(a0),d0
00012900 323B 0000                  		move.w	SBall_Index(pc,d0.w),d1
00012904 4EFB 1000                  		jmp	SBall_Index(pc,d1.w)
00012908                            ; ===========================================================================
00012908 0000                       SBall_Index:	dc.w SBall_Main-SBall_Index
0001290A 0000                       		dc.w SBall_Move-SBall_Index
0001290C 0000                       		dc.w SBall_Display-SBall_Index
0001290E                            
0001290E =00000029                  sball_childs:	equ $29		; number of child objects (1 byte)
0001290E                            		; $30-$37	; object RAM numbers of childs (1 byte each)
0001290E =0000003A                  sball_origX:	equ $3A		; centre x-axis position (2 bytes)
0001290E =00000038                  sball_origY:	equ $38		; centre y-axis position (2 bytes)
0001290E =0000003C                  sball_radius:	equ $3C		; radius (1 byte)
0001290E =0000003E                  sball_speed:	equ $3E		; rate of spin (2 bytes)
0001290E                            ; ===========================================================================
0001290E                            
0001290E                            SBall_Main:	; Routine 0
0001290E 5428 0024                  		addq.b	#2,obRoutine(a0)
00012912 217C 0000 0000 0004        		move.l	#Map_SBall,obMap(a0)
0001291A 317C 03BA 0002             		move.w	#$3BA,obGfx(a0)
00012920 117C 0004 0001             		move.b	#4,obRender(a0)
00012926 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001292C 117C 0008 0014             		move.b	#8,obActWid(a0)
00012932 3168 0008 003A             		move.w	obX(a0),sball_origX(a0)
00012938 3168 000C 0038             		move.w	obY(a0),sball_origY(a0)
0001293E 117C 0098 0020             		move.b	#$98,obColType(a0) ; SYZ specific code (chain hurts Sonic)
00012944 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
0001294A 6600                       		bne.s	@notlz
0001294C                            
0001294C 117C 0000 0020             		move.b	#0,obColType(a0) ; LZ specific code (chain doesn't hurt)
00012952 317C 0310 0002             		move.w	#$310,obGfx(a0)
00012958 217C 0000 0000 0004        		move.l	#Map_SBall2,obMap(a0)
00012960                            
00012960                            	@notlz:
00012960 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012964 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012968 4881                       		ext.w	d1
0001296A E741                       		asl.w	#3,d1		; multiply by 8
0001296C 3141 003E                  		move.w	d1,sball_speed(a0) ; set object twirl speed
00012970 1028 0022                  		move.b	obStatus(a0),d0
00012974 E418                       		ror.b	#2,d0
00012976 0200 00C0                  		andi.b	#$C0,d0
0001297A 1140 0026                  		move.b	d0,obAngle(a0)
0001297E 45E8 0029                  		lea	sball_childs(a0),a2
00012982 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012986 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
0001298A 14FC 0000                  		move.b	#0,(a2)+
0001298E 3601                       		move.w	d1,d3
00012990 E94B                       		lsl.w	#4,d3
00012992 1143 003C                  		move.b	d3,sball_radius(a0)
00012996 5341                       		subq.w	#1,d1		; set chain length (type-1)
00012998 6500                       		bcs.s	@fail
0001299A 0828 0003 0028             		btst	#3,obSubtype(a0)
000129A0 6700                       		beq.s	@makechain
000129A2 5341                       		subq.w	#1,d1
000129A4 6500                       		bcs.s	@fail
000129A6                            
000129A6                            @makechain:
000129A6 6100 D170                  		bsr.w	FindFreeObj
000129AA 6600                       		bne.s	@fail
000129AC 5228 0029                  		addq.b	#1,sball_childs(a0) ; increment child object counter
000129B0 3A09                       		move.w	a1,d5		; get child object RAM address
000129B2 0445 D000                  		subi.w	#$D000,d5	; subtract $D000
000129B6 EC4D                       		lsr.w	#6,d5		; divide by $40
000129B8 0245 007F                  		andi.w	#$7F,d5
000129BC 14C5                       		move.b	d5,(a2)+	; copy child RAM number
000129BE 137C 0004 0024             		move.b	#4,obRoutine(a1)
000129C4 1290                       		move.b	0(a0),0(a1)
000129C6 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
000129CC 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
000129D2 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
000129D8 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
000129DE 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
000129E4 1368 0020 0020             		move.b	obColType(a0),obColType(a1)
000129EA 0403 0010                  		subi.b	#$10,d3
000129EE 1343 003C                  		move.b	d3,sball_radius(a1)
000129F2 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000129F8 6600                       		bne.s	@notlzagain
000129FA                            
000129FA 4A03                       		tst.b	d3
000129FC 6600                       		bne.s	@notlzagain
000129FE 137C 0002 001A             		move.b	#2,obFrame(a1)	; use different frame for LZ chain
00012A04                            
00012A04                            	@notlzagain:
00012A04 51C9 FFA0                  		dbf	d1,@makechain ; repeat for length of chain
00012A08                            
00012A08                            	@fail:
00012A08 3A08                       		move.w	a0,d5
00012A0A 0445 D000                  		subi.w	#$D000,d5
00012A0E EC4D                       		lsr.w	#6,d5
00012A10 0245 007F                  		andi.w	#$7F,d5
00012A14 14C5                       		move.b	d5,(a2)+
00012A16 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012A1C 6600                       		bne.s	SBall_Move
00012A1E                            
00012A1E 117C 008B 0020             		move.b	#$8B,obColType(a0) ; if yes, make last spikeball larger
00012A24 117C 0001 001A             		move.b	#1,obFrame(a0)	; use different	frame
00012A2A                            
00012A2A                            SBall_Move:	; Routine 2
00012A2A 6100 0000                  		bsr.w	@movesub
00012A2E 6000 0000                  		bra.w	@chkdel
00012A32                            ; ===========================================================================
00012A32                            
00012A32                            @movesub:
00012A32 3028 003E                  		move.w	sball_speed(a0),d0
00012A36 D168 0026                  		add.w	d0,obAngle(a0)
00012A3A 1028 0026                  		move.b	obAngle(a0),d0
00012A3E 4EB9 0000 3CCA             		jsr	(CalcSine).l
00012A44 3428 0038                  		move.w	sball_origY(a0),d2
00012A48 3628 003A                  		move.w	sball_origX(a0),d3
00012A4C 45E8 0029                  		lea	sball_childs(a0),a2
00012A50 7C00                       		moveq	#0,d6
00012A52 1C1A                       		move.b	(a2)+,d6
00012A54                            
00012A54                            	@loop:
00012A54 7800                       		moveq	#0,d4
00012A56 181A                       		move.b	(a2)+,d4
00012A58 ED4C                       		lsl.w	#6,d4
00012A5A 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00012A60 2244                       		movea.l	d4,a1
00012A62 7800                       		moveq	#0,d4
00012A64 1829 003C                  		move.b	sball_radius(a1),d4
00012A68 2A04                       		move.l	d4,d5
00012A6A C9C0                       		muls.w	d0,d4
00012A6C E084                       		asr.l	#8,d4
00012A6E CBC1                       		muls.w	d1,d5
00012A70 E085                       		asr.l	#8,d5
00012A72 D842                       		add.w	d2,d4
00012A74 DA43                       		add.w	d3,d5
00012A76 3344 000C                  		move.w	d4,obY(a1)
00012A7A 3345 0008                  		move.w	d5,obX(a1)
00012A7E 51CE FFD4                  		dbf	d6,@loop
00012A82 4E75                       		rts	
00012A84                            ; ===========================================================================
00012A84                            
00012A84                            @chkdel:
00012AA2 6000 CADA                  		bra.w	DisplaySprite
00012AA6                            ; ===========================================================================
00012AA6                            
00012AA6                            @delete:
00012AA6 7400                       		moveq	#0,d2
00012AA8 45E8 0029                  		lea	sball_childs(a0),a2
00012AAC 141A                       		move.b	(a2)+,d2
00012AAE                            
00012AAE                            	@deleteloop:
00012AAE 7000                       		moveq	#0,d0
00012AB0 101A                       		move.b	(a2)+,d0
00012AB2 ED48                       		lsl.w	#6,d0
00012AB4 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00012ABA 2240                       		movea.l	d0,a1
00012ABC 6100 CB02                  		bsr.w	DeleteChild
00012AC0 51CA FFEC                  		dbf	d2,@deleteloop ; delete all pieces of	chain
00012AC4                            
00012AC4 4E75                       		rts	
00012AC6                            ; ===========================================================================
00012AC6                            
00012AC6                            SBall_Display:	; Routine 4
00012AC6 6000 CAB6                  		bra.w	DisplaySprite
00012AC6 6000 CAB6                  		bra.w	DisplaySprite
00012ACA                            Map_SBall:	include	"_maps\Spiked Ball and Chain (SYZ).asm"
00012ACA                            ; ---------------------------------------------------------------------------
00012ACA                            ; Sprite mappings - chain of spiked balls (SYZ)
00012ACA                            ; ---------------------------------------------------------------------------
00012ACA                            Map_SBall_internal:
00012ACA 0000                       		dc.w @0-Map_SBall_internal
00012ACC 01                         @0:		dc.b 1
00012ACD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012AD2                            		even
00012AD2                            		even
00012AD2                            Map_SBall2:	include	"_maps\Spiked Ball and Chain (LZ).asm"
00012AD2                            ; ---------------------------------------------------------------------------
00012AD2                            ; Sprite mappings - spiked ball	on a chain (LZ)
00012AD2                            ; ---------------------------------------------------------------------------
00012AD2                            Map_SBall2_internal:
00012AD2 0000                       		dc.w @chain-Map_SBall2_internal
00012AD4 0000                       		dc.w @spikeball-Map_SBall2_internal
00012AD6 0000                       		dc.w @base-Map_SBall2_internal
00012AD8 01                         @chain:		dc.b 1
00012AD9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; chain link
00012ADE 01                         @spikeball:	dc.b 1
00012ADF F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0	; spikeball
00012AE4 01                         @base:		dc.b 1
00012AE5 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8 ; wall attachment
00012AEA                            		even
00012AEA                            		even
00012AEA                            		include	"_incObj\58 Big Spiked Ball.asm"
00012AEA                            ; ---------------------------------------------------------------------------
00012AEA                            ; Object 58 - giant spiked balls (SYZ)
00012AEA                            ; ---------------------------------------------------------------------------
00012AEA                            
00012AEA                            BigSpikeBall:
00012AEA 7000                       		moveq	#0,d0
00012AEC 1028 0024                  		move.b	obRoutine(a0),d0
00012AF0 323B 0000                  		move.w	BBall_Index(pc,d0.w),d1
00012AF4 4EFB 1000                  		jmp	BBall_Index(pc,d1.w)
00012AF8                            ; ===========================================================================
00012AF8 0000                       BBall_Index:	dc.w BBall_Main-BBall_Index
00012AFA 0000                       		dc.w BBall_Move-BBall_Index
00012AFC                            
00012AFC =0000003A                  bball_origX:	equ $3A		; original x-axis position
00012AFC =00000038                  bball_origY:	equ $38		; original y-axis position
00012AFC =0000003C                  bball_radius:	equ $3C		; radius of circle
00012AFC =0000003E                  bball_speed:	equ $3E		; speed
00012AFC                            ; ===========================================================================
00012AFC                            
00012AFC                            BBall_Main:	; Routine 0
00012AFC 5428 0024                  		addq.b	#2,obRoutine(a0)
00012B00 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0)
00012B08 317C 0396 0002             		move.w	#$396,obGfx(a0)
00012B0E 117C 0004 0001             		move.b	#4,obRender(a0)
00012B14 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012B1A 117C 0018 0014             		move.b	#$18,obActWid(a0)
00012B20 3168 0008 003A             		move.w	obX(a0),bball_origX(a0)
00012B26 3168 000C 0038             		move.w	obY(a0),bball_origY(a0)
00012B2C 117C 0086 0020             		move.b	#$86,obColType(a0)
00012B32 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012B36 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012B3A 4881                       		ext.w	d1
00012B3C E741                       		asl.w	#3,d1		; multiply by 8
00012B3E 3141 003E                  		move.w	d1,bball_speed(a0) ; set object speed
00012B42 1028 0022                  		move.b	obStatus(a0),d0
00012B46 E418                       		ror.b	#2,d0
00012B48 0200 00C0                  		andi.b	#$C0,d0
00012B4C 1140 0026                  		move.b	d0,obAngle(a0)
00012B50 117C 0050 003C             		move.b	#$50,bball_radius(a0) ; set radius of circle motion
00012B56                            
00012B56                            BBall_Move:	; Routine 2
00012B56 7000                       		moveq	#0,d0
00012B58 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00012B5C 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00012B60 D040                       		add.w	d0,d0
00012B62 323B 0000                  		move.w	@index(pc,d0.w),d1
00012B66 4EBB 1000                  		jsr	@index(pc,d1.w)
00012B88 6000 C9F4                  		bra.w	DisplaySprite
00012B8C                            ; ===========================================================================
00012B8C 0000                       @index:		dc.w @type00-@index
00012B8E 0000                       		dc.w @type01-@index
00012B90 0000                       		dc.w @type02-@index
00012B92 0000                       		dc.w @type03-@index
00012B94                            ; ===========================================================================
00012B94                            
00012B94                            @type00:
00012B94 4E75                       		rts	
00012B96                            ; ===========================================================================
00012B96                            
00012B96                            @type01:
00012B96 323C 0060                  		move.w	#$60,d1
00012B9A 7000                       		moveq	#0,d0
00012B9C 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012BA0 0828 0000 0022             		btst	#0,obStatus(a0)
00012BA6 6700                       		beq.s	@noflip1
00012BA8 4440                       		neg.w	d0
00012BAA D041                       		add.w	d1,d0
00012BAC                            
00012BAC                            	@noflip1:
00012BAC 3228 003A                  		move.w	bball_origX(a0),d1
00012BB0 9240                       		sub.w	d0,d1
00012BB2 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
00012BB6 4E75                       		rts	
00012BB8                            ; ===========================================================================
00012BB8                            
00012BB8                            @type02:
00012BB8 323C 0060                  		move.w	#$60,d1
00012BBC 7000                       		moveq	#0,d0
00012BBE 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012BC2 0828 0000 0022             		btst	#0,obStatus(a0)
00012BC8 6700                       		beq.s	@noflip2
00012BCA 4440                       		neg.w	d0
00012BCC 0640 0080                  		addi.w	#$80,d0
00012BD0                            
00012BD0                            	@noflip2:
00012BD0 3228 0038                  		move.w	bball_origY(a0),d1
00012BD4 9240                       		sub.w	d0,d1
00012BD6 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012BDA 4E75                       		rts	
00012BDC                            ; ===========================================================================
00012BDC                            
00012BDC                            @type03:
00012BDC 3028 003E                  		move.w	bball_speed(a0),d0
00012BE0 D168 0026                  		add.w	d0,obAngle(a0)
00012BE4 1028 0026                  		move.b	obAngle(a0),d0
00012BE8 4EB9 0000 3CCA             		jsr	(CalcSine).l
00012BEE 3428 0038                  		move.w	bball_origY(a0),d2
00012BF2 3628 003A                  		move.w	bball_origX(a0),d3
00012BF6 7800                       		moveq	#0,d4
00012BF8 1828 003C                  		move.b	bball_radius(a0),d4
00012BFC 2A04                       		move.l	d4,d5
00012BFE C9C0                       		muls.w	d0,d4
00012C00 E084                       		asr.l	#8,d4
00012C02 CBC1                       		muls.w	d1,d5
00012C04 E085                       		asr.l	#8,d5
00012C06 D842                       		add.w	d2,d4
00012C08 DA43                       		add.w	d3,d5
00012C0A 3144 000C                  		move.w	d4,obY(a0)	; move object circularly
00012C0E 3145 0008                  		move.w	d5,obX(a0)
00012C12 4E75                       		rts	
00012C12 4E75                       		rts	
00012C14                            Map_BBall:	include	"_maps\Big Spiked Ball.asm"
00012C14                            ; --------------------------------------------------------------------------------
00012C14                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012C14                            ; --------------------------------------------------------------------------------
00012C14                            
00012C14                            SME_u_DKx:	
00012C14 0000 0000                  		dc.w SME_u_DKx_6-SME_u_DKx, SME_u_DKx_20-SME_u_DKx	
00012C18 0000                       		dc.w SME_u_DKx_26-SME_u_DKx	
00012C1A 05                         SME_u_DKx_6:	dc.b 5	
00012C1B E804 0000 F8               		dc.b $E8, 4, 0, 0, $F8	
00012C20 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0	
00012C25 F801 0012 E8               		dc.b $F8, 1, 0, $12, $E8	
00012C2A F801 0014 10               		dc.b $F8, 1, 0, $14, $10	
00012C2F 1004 0016 F8               		dc.b $10, 4, 0, $16, $F8	
00012C34 01                         SME_u_DKx_20:	dc.b 1	
00012C35 F805 0020 F8               		dc.b $F8, 5, 0, $20, $F8	
00012C3A 02                         SME_u_DKx_26:	dc.b 2	
00012C3B F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0	
00012C40 E80D 1018 F0               		dc.b $E8, $D, $10, $18, $F0	
00012C46 00                         		even
00012C46 00                         		even
00012C46                            		include	"_incObj\59 SLZ Elevators.asm"
00012C46                            ; ---------------------------------------------------------------------------
00012C46                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00012C46                            ; ---------------------------------------------------------------------------
00012C46                            
00012C46                            Elevator:
00012C46 7000                       		moveq	#0,d0
00012C48 1028 0024                  		move.b	obRoutine(a0),d0
00012C4C 323B 0000                  		move.w	Elev_Index(pc,d0.w),d1
00012C50 4EBB 1000                  		jsr	Elev_Index(pc,d1.w)
00012C72 6000 C90A                  		bra.w	DisplaySprite
00012C76                            ; ===========================================================================
00012C76 0000                       Elev_Index:	dc.w Elev_Main-Elev_Index
00012C78 0000                       		dc.w Elev_Platform-Elev_Index
00012C7A 0000                       		dc.w Elev_Action-Elev_Index
00012C7C 0000                       		dc.w Elev_MakeMulti-Elev_Index
00012C7E                            
00012C7E =00000032                  elev_origX:	equ $32		; original x-axis position
00012C7E =00000030                  elev_origY:	equ $30		; original y-axis position
00012C7E =0000003C                  elev_dist:	equ $3C		; distance to move (2 bytes)
00012C7E                            
00012C7E 2800                       Elev_Var1:	dc.b $28, 0		; width, frame number
00012C80                            
00012C80 1001                       Elev_Var2:	dc.b $10, 1		; distance to move, action type
00012C82 2001                       		dc.b $20, 1
00012C84 3401                       		dc.b $34, 1
00012C86 1003                       		dc.b $10, 3
00012C88 2003                       		dc.b $20, 3
00012C8A 3403                       		dc.b $34, 3
00012C8C 1401                       		dc.b $14, 1
00012C8E 2401                       		dc.b $24, 1
00012C90 2C01                       		dc.b $2C, 1
00012C92 1403                       		dc.b $14, 3
00012C94 2403                       		dc.b $24, 3
00012C96 2C03                       		dc.b $2C, 3
00012C98 2005                       		dc.b $20, 5
00012C9A 2007                       		dc.b $20, 7
00012C9C 3009                       		dc.b $30, 9
00012C9E                            ; ===========================================================================
00012C9E                            
00012C9E                            Elev_Main:	; Routine 0
00012C9E 5428 0024                  		addq.b	#2,obRoutine(a0)
00012CA2 7000                       		moveq	#0,d0
00012CA4 1028 0028                  		move.b	obSubtype(a0),d0
00012CA8 6A00                       		bpl.s	@normal		; branch for types 00-7F
00012CAA 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Elev_MakeMulti next
00012CAE 0240 007F                  		andi.w	#$7F,d0
00012CB2 C0FC 0006                  		mulu.w	#6,d0
00012CB6 3140 003C                  		move.w	d0,elev_dist(a0)
00012CBA 3140 003E                  		move.w	d0,$3E(a0)
00012CBE 588F                       		addq.l	#4,sp
00012CC0 4E75                       		rts	
00012CC2                            ; ===========================================================================
00012CC2                            
00012CC2                            	@normal:
00012CC2 E648                       		lsr.w	#3,d0
00012CC4 0240 001E                  		andi.w	#$1E,d0
00012CC8 45FB 00B4                  		lea	Elev_Var1(pc,d0.w),a2
00012CCC 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
00012CD0 115A 001A                  		move.b	(a2)+,obFrame(a0) ; set frame
00012CD4 7000                       		moveq	#0,d0
00012CD6 1028 0028                  		move.b	obSubtype(a0),d0
00012CDA D040                       		add.w	d0,d0
00012CDC 0240 001E                  		andi.w	#$1E,d0
00012CE0 45FB 009E                  		lea	Elev_Var2(pc,d0.w),a2
00012CE4 101A                       		move.b	(a2)+,d0
00012CE6 E548                       		lsl.w	#2,d0
00012CE8 3140 003C                  		move.w	d0,elev_dist(a0)	; set distance to move
00012CEC 115A 0028                  		move.b	(a2)+,obSubtype(a0)	; set type
00012CF0 217C 0000 0000 0004        		move.l	#Map_Elev,obMap(a0)
00012CF8 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012CFE 117C 0004 0001             		move.b	#4,obRender(a0)
00012D04 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012D0A 3168 0008 0032             		move.w	obX(a0),elev_origX(a0)
00012D10 3168 000C 0030             		move.w	obY(a0),elev_origY(a0)
00012D16                            
00012D16                            Elev_Platform:	; Routine 2
00012D16 7200                       		moveq	#0,d1
00012D18 1228 0014                  		move.b	obActWid(a0),d1
00012D1C 4EB9 0000 8C24             		jsr	(PlatformObject).l
00012D22 6000 0000                  		bra.w	Elev_Types
00012D26                            ; ===========================================================================
00012D26                            
00012D26                            Elev_Action:	; Routine 4
00012D26 7200                       		moveq	#0,d1
00012D28 1228 0014                  		move.b	obActWid(a0),d1
00012D2C 4EB9 0000 8D98             		jsr	(ExitPlatform).l
00012D32 3F28 0008                  		move.w	obX(a0),-(sp)
00012D36 6100 0000                  		bsr.w	Elev_Types
00012D3A 341F                       		move.w	(sp)+,d2
00012D3C 4A10                       		tst.b	0(a0)
00012D3E 6700                       		beq.s	@deleted
00012D40 4EF9 0000 9302             		jmp	(MvSonicOnPtfm2).l
00012D46                            
00012D46                            	@deleted:
00012D46 4E75                       		rts	
00012D48                            ; ===========================================================================
00012D48                            
00012D48                            Elev_Types:
00012D48 7000                       		moveq	#0,d0
00012D4A 1028 0028                  		move.b	obSubtype(a0),d0
00012D4E 0240 000F                  		andi.w	#$F,d0
00012D52 D040                       		add.w	d0,d0
00012D54 323B 0000                  		move.w	@index(pc,d0.w),d1
00012D58 4EFB 1000                  		jmp	@index(pc,d1.w)
00012D5C                            ; ===========================================================================
00012D5C 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00012D60 0000 0000                  		dc.w @type02-@index, @type01-@index
00012D64 0000 0000                  		dc.w @type04-@index, @type01-@index
00012D68 0000 0000                  		dc.w @type06-@index, @type01-@index
00012D6C 0000 0000                  		dc.w @type08-@index, @type09-@index
00012D70                            ; ===========================================================================
00012D70                            
00012D70                            @type00:
00012D70 4E75                       		rts	
00012D72                            ; ===========================================================================
00012D72                            
00012D72                            @type01:
00012D72 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; check if Sonic is standing on the object
00012D78 6600                       		bne.s	@notstanding
00012D7A 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
00012D7E                            
00012D7E                            	@notstanding:
00012D7E 4E75                       		rts	
00012D80                            ; ===========================================================================
00012D80                            
00012D80                            @type02:
00012D80 6100 0000                  		bsr.w	Elev_Move
00012D84 3028 0034                  		move.w	$34(a0),d0
00012D88 4440                       		neg.w	d0
00012D8A D068 0030                  		add.w	elev_origY(a0),d0
00012D8E 3140 000C                  		move.w	d0,obY(a0)
00012D92 4E75                       		rts	
00012D94                            ; ===========================================================================
00012D94                            
00012D94                            @type04:
00012D94 6100 0000                  		bsr.w	Elev_Move
00012D98 3028 0034                  		move.w	$34(a0),d0
00012D9C D068 0030                  		add.w	elev_origY(a0),d0
00012DA0 3140 000C                  		move.w	d0,obY(a0)
00012DA4 4E75                       		rts	
00012DA6                            ; ===========================================================================
00012DA6                            
00012DA6                            @type06:
00012DA6 6100 0000                  		bsr.w	Elev_Move
00012DAA 3028 0034                  		move.w	$34(a0),d0
00012DAE E240                       		asr.w	#1,d0
00012DB0 4440                       		neg.w	d0
00012DB2 D068 0030                  		add.w	elev_origY(a0),d0
00012DB6 3140 000C                  		move.w	d0,obY(a0)
00012DBA 3028 0034                  		move.w	$34(a0),d0
00012DBE D068 0032                  		add.w	elev_origX(a0),d0
00012DC2 3140 0008                  		move.w	d0,obX(a0)
00012DC6 4E75                       		rts	
00012DC8                            ; ===========================================================================
00012DC8                            
00012DC8                            @type08:
00012DC8 6100 0000                  		bsr.w	Elev_Move
00012DCC 3028 0034                  		move.w	$34(a0),d0
00012DD0 E240                       		asr.w	#1,d0
00012DD2 D068 0030                  		add.w	elev_origY(a0),d0
00012DD6 3140 000C                  		move.w	d0,obY(a0)
00012DDA 3028 0034                  		move.w	$34(a0),d0
00012DDE 4440                       		neg.w	d0
00012DE0 D068 0032                  		add.w	elev_origX(a0),d0
00012DE4 3140 0008                  		move.w	d0,obX(a0)
00012DE8 4E75                       		rts	
00012DEA                            ; ===========================================================================
00012DEA                            
00012DEA                            @type09:
00012DEA 6100 0000                  		bsr.w	Elev_Move
00012DEE 3028 0034                  		move.w	$34(a0),d0
00012DF2 4440                       		neg.w	d0
00012DF4 D068 0030                  		add.w	elev_origY(a0),d0
00012DF8 3140 000C                  		move.w	d0,obY(a0)
00012DFC 4A28 0028                  		tst.b	obSubtype(a0)
00012E00 6700 0000                  		beq.w	@typereset
00012E04 4E75                       		rts	
00012E06                            ; ===========================================================================
00012E06                            
00012E06                            	@typereset:
00012E06 0828 0003 0022             		btst	#3,obStatus(a0)
00012E0C 6700                       		beq.s	@delete
00012E0E 08E9 0001 0022             		bset	#1,obStatus(a1)
00012E14 08A9 0003 0022             		bclr	#3,obStatus(a1)
00012E1A 137C 0002 0024             		move.b	#2,obRoutine(a1)
00012E20                            
00012E20                            	@delete:
00012E20 6000 C79C                  		bra.w	DeleteObject
00012E24                            
00012E24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012E24                            
00012E24                            
00012E24                            Elev_Move:
00012E24 3028 0038                  		move.w	$38(a0),d0
00012E28 4A28 003A                  		tst.b	$3A(a0)
00012E2C 6600                       		bne.s	loc_10CC8
00012E2E 0C40 0800                  		cmpi.w	#$800,d0
00012E32 6400                       		bcc.s	loc_10CD0
00012E34 0640 0010                  		addi.w	#$10,d0
00012E38 6000                       		bra.s	loc_10CD0
00012E3A                            ; ===========================================================================
00012E3A                            
00012E3A                            loc_10CC8:
00012E3A 4A40                       		tst.w	d0
00012E3C 6700                       		beq.s	loc_10CD0
00012E3E 0440 0010                  		subi.w	#$10,d0
00012E42                            
00012E42                            loc_10CD0:
00012E42 3140 0038                  		move.w	d0,$38(a0)
00012E46 48C0                       		ext.l	d0
00012E48 E180                       		asl.l	#8,d0
00012E4A D0A8 0034                  		add.l	$34(a0),d0
00012E4E 2140 0034                  		move.l	d0,$34(a0)
00012E52 4840                       		swap	d0
00012E54 3428 003C                  		move.w	elev_dist(a0),d2
00012E58 B042                       		cmp.w	d2,d0
00012E5A 6300                       		bls.s	loc_10CF0
00012E5C 117C 0001 003A             		move.b	#1,$3A(a0)
00012E62                            
00012E62                            loc_10CF0:
00012E62 D442                       		add.w	d2,d2
00012E64 B042                       		cmp.w	d2,d0
00012E66 6600                       		bne.s	locret_10CFA
00012E68 4228 0028                  		clr.b	obSubtype(a0)
00012E6C                            
00012E6C                            locret_10CFA:
00012E6C 4E75                       		rts	
00012E6E                            ; End of function Elev_Move
00012E6E                            
00012E6E                            ; ===========================================================================
00012E6E                            
00012E6E                            Elev_MakeMulti:	; Routine 6
00012E6E 5368 003C                  		subq.w	#1,elev_dist(a0)
00012E72 6600                       		bne.s	@chkdel
00012E74 3168 003E 003C             		move.w	$3E(a0),elev_dist(a0)
00012E7A 6100 CC9C                  		bsr.w	FindFreeObj
00012E7E 6600                       		bne.s	@chkdel
00012E80 12BC 0059                  		move.b	#id_Elevator,0(a1) ; duplicate the object
00012E84 3368 0008 0008             		move.w	obX(a0),obX(a1)
00012E8A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00012E90 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00012E96                            
00012E96                            @chkdel:
00012E96 588F                       		addq.l	#4,sp
00012EB6 4E75                       		rts	
00012EB6 4E75                       		rts	
00012EB8                            Map_Elev:	include	"_maps\SLZ Elevators.asm"
00012EB8                            ; ---------------------------------------------------------------------------
00012EB8                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00012EB8                            ; ---------------------------------------------------------------------------
00012EB8                            Map_Elev_internal:
00012EB8 0000                       		dc.w @elevator-Map_Elev_internal
00012EBA 03                         @elevator:	dc.b 3
00012EBB F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00012EC0 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00012EC5 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00012ECA                            		even
00012ECA                            		even
00012ECA                            		include	"_incObj\5A SLZ Circling Platform.asm"
00012ECA                            ; ---------------------------------------------------------------------------
00012ECA                            ; Object 5A - platforms	moving in circles (SLZ)
00012ECA                            ; ---------------------------------------------------------------------------
00012ECA                            
00012ECA                            CirclingPlatform:
00012ECA 7000                       		moveq	#0,d0
00012ECC 1028 0024                  		move.b	obRoutine(a0),d0
00012ED0 323B 0000                  		move.w	Circ_Index(pc,d0.w),d1
00012ED4 4EBB 1000                  		jsr	Circ_Index(pc,d1.w)
00012EF6 6000 C686                  		bra.w	DisplaySprite
00012EFA                            ; ===========================================================================
00012EFA 0000                       Circ_Index:	dc.w Circ_Main-Circ_Index
00012EFC 0000                       		dc.w Circ_Platform-Circ_Index
00012EFE 0000                       		dc.w Circ_Action-Circ_Index
00012F00                            
00012F00 =00000032                  circ_origX:	equ $32		; original x-axis position
00012F00 =00000030                  circ_origY:	equ $30		; original y-axis position
00012F00                            ; ===========================================================================
00012F00                            
00012F00                            Circ_Main:	; Routine 0
00012F00 5428 0024                  		addq.b	#2,obRoutine(a0)
00012F04 217C 0000 0000 0004        		move.l	#Map_Circ,obMap(a0)
00012F0C 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012F12 117C 0004 0001             		move.b	#4,obRender(a0)
00012F18 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012F1E 117C 0018 0014             		move.b	#$18,obActWid(a0)
00012F24 3168 0008 0032             		move.w	obX(a0),circ_origX(a0)
00012F2A 3168 000C 0030             		move.w	obY(a0),circ_origY(a0)
00012F30                            
00012F30                            Circ_Platform:	; Routine 2
00012F30 7200                       		moveq	#0,d1
00012F32 1228 0014                  		move.b	obActWid(a0),d1
00012F36 4EB9 0000 8C24             		jsr	(PlatformObject).l
00012F3C 6000 0000                  		bra.w	Circ_Types
00012F40                            ; ===========================================================================
00012F40                            
00012F40                            Circ_Action:	; Routine 4
00012F40 7200                       		moveq	#0,d1
00012F42 1228 0014                  		move.b	obActWid(a0),d1
00012F46 4EB9 0000 8D98             		jsr	(ExitPlatform).l
00012F4C 3F28 0008                  		move.w	obX(a0),-(sp)
00012F50 6100 0000                  		bsr.w	Circ_Types
00012F54 341F                       		move.w	(sp)+,d2
00012F56 4EF9 0000 9302             		jmp	(MvSonicOnPtfm2).l
00012F5C                            ; ===========================================================================
00012F5C                            
00012F5C                            Circ_Types:
00012F5C 7000                       		moveq	#0,d0
00012F5E 1028 0028                  		move.b	obSubtype(a0),d0
00012F62 0240 000C                  		andi.w	#$C,d0
00012F66 E248                       		lsr.w	#1,d0
00012F68 323B 0000                  		move.w	@index(pc,d0.w),d1
00012F6C 4EFB 1000                  		jmp	@index(pc,d1.w)
00012F70                            ; ===========================================================================
00012F70 0000                       @index:		dc.w @type00-@index
00012F72 0000                       		dc.w @type04-@index
00012F74                            ; ===========================================================================
00012F74                            
00012F74                            @type00:
00012F74 1238 FE80                  		move.b	(v_oscillate+$22).w,d1 ; get rotating value
00012F78 0401 0050                  		subi.b	#$50,d1		; set radius of circle
00012F7C 4881                       		ext.w	d1
00012F7E 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
00012F82 0402 0050                  		subi.b	#$50,d2
00012F86 4882                       		ext.w	d2
00012F88 0828 0000 0028             		btst	#0,obSubtype(a0)
00012F8E 6700                       		beq.s	@noshift00a
00012F90 4441                       		neg.w	d1
00012F92 4442                       		neg.w	d2
00012F94                            
00012F94                            	@noshift00a:
00012F94 0828 0001 0028             		btst	#1,obSubtype(a0)
00012F9A 6700                       		beq.s	@noshift00b
00012F9C 4441                       		neg.w	d1
00012F9E C342                       		exg	d1,d2
00012FA0                            
00012FA0                            	@noshift00b:
00012FA0 D268 0032                  		add.w	circ_origX(a0),d1
00012FA4 3141 0008                  		move.w	d1,obX(a0)
00012FA8 D468 0030                  		add.w	circ_origY(a0),d2
00012FAC 3142 000C                  		move.w	d2,obY(a0)
00012FB0 4E75                       		rts	
00012FB2                            ; ===========================================================================
00012FB2                            
00012FB2                            @type04:
00012FB2 1238 FE80                  		move.b	(v_oscillate+$22).w,d1
00012FB6 0401 0050                  		subi.b	#$50,d1
00012FBA 4881                       		ext.w	d1
00012FBC 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
00012FC0 0402 0050                  		subi.b	#$50,d2
00012FC4 4882                       		ext.w	d2
00012FC6 0828 0000 0028             		btst	#0,obSubtype(a0)
00012FCC 6700                       		beq.s	@noshift04a
00012FCE 4441                       		neg.w	d1
00012FD0 4442                       		neg.w	d2
00012FD2                            
00012FD2                            	@noshift04a:
00012FD2 0828 0001 0028             		btst	#1,obSubtype(a0)
00012FD8 6700                       		beq.s	@noshift04b
00012FDA 4441                       		neg.w	d1
00012FDC C342                       		exg	d1,d2
00012FDE                            
00012FDE                            	@noshift04b:
00012FDE 4441                       		neg.w	d1
00012FE0 D268 0032                  		add.w	circ_origX(a0),d1
00012FE4 3141 0008                  		move.w	d1,obX(a0)
00012FE8 D468 0030                  		add.w	circ_origY(a0),d2
00012FEC 3142 000C                  		move.w	d2,obY(a0)
00012FF0 4E75                       		rts	
00012FF0 4E75                       		rts	
00012FF2                            Map_Circ:	include	"_maps\SLZ Circling Platform.asm"
00012FF2                            ; ---------------------------------------------------------------------------
00012FF2                            ; Sprite mappings - platforms that move	in circles (SLZ)
00012FF2                            ; ---------------------------------------------------------------------------
00012FF2                            Map_Circ_internal:
00012FF2 0000                       		dc.w @platform-Map_Circ_internal
00012FF4 02                         @platform:	dc.b 2
00012FF5 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00012FFA F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00013000 00                         		even
00013000 00                         		even
00013000                            		include	"_incObj\5B Staircase.asm"
00013000                            ; ---------------------------------------------------------------------------
00013000                            ; Object 5B - blocks that form a staircase (SLZ)
00013000                            ; ---------------------------------------------------------------------------
00013000                            
00013000                            Staircase:
00013000 7000                       		moveq	#0,d0
00013002 1028 0024                  		move.b	obRoutine(a0),d0
00013006 323B 0000                  		move.w	Stair_Index(pc,d0.w),d1
0001300A 4EBB 1000                  		jsr	Stair_Index(pc,d1.w)
0001302C 6000 C550                  		bra.w	DisplaySprite
00013030                            ; ===========================================================================
00013030 0000                       Stair_Index:	dc.w Stair_Main-Stair_Index
00013032 0000                       		dc.w Stair_Move-Stair_Index
00013034 0000                       		dc.w Stair_Solid-Stair_Index
00013036                            
00013036 =00000030                  stair_origX:	equ $30		; original x-axis position
00013036 =00000032                  stair_origY:	equ $32		; original y-axis position
00013036                            
00013036 =0000003C                  stair_parent:	equ $3C		; address of parent object (4 bytes)
00013036                            ; ===========================================================================
00013036                            
00013036                            Stair_Main:	; Routine 0
00013036 5428 0024                  		addq.b	#2,obRoutine(a0)
0001303A 7638                       		moveq	#$38,d3
0001303C 7801                       		moveq	#1,d4
0001303E 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
00013044 6700                       		beq.s	@notflipped	; if not, branch
00013046 763B                       		moveq	#$3B,d3
00013048 78FF                       		moveq	#-1,d4
0001304A                            
0001304A                            	@notflipped:
0001304A 3428 0008                  		move.w	obX(a0),d2
0001304E 2248                       		movea.l	a0,a1
00013050 7203                       		moveq	#3,d1
00013052 6000                       		bra.s	@makeblocks
00013054                            ; ===========================================================================
00013054                            
00013054                            @loop:
00013054 6100 CAD8                  		bsr.w	FindNextFreeObj
00013058 6600 0000                  		bne.w	@fail
0001305C 137C 0004 0024             		move.b	#4,obRoutine(a1)
00013062                            
00013062                            @makeblocks:
00013062 12BC 005B                  		move.b	#id_Staircase,0(a1) ; load another block object
00013066 237C 0000 0000 0004        		move.l	#Map_Stair,obMap(a1)
0001306E 337C 4000 0002             		move.w	#$4000,obGfx(a1)
00013074 137C 0004 0001             		move.b	#4,obRender(a1)
0001307A 337C 0180 0018             		move.w	#$180,obPriority(a1)
00013080 137C 0010 0014             		move.b	#$10,obActWid(a1)
00013086 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0001308C 3342 0008                  		move.w	d2,obX(a1)
00013090 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013096 3368 0008 0030             		move.w	obX(a0),stair_origX(a1)
0001309C 3369 000C 0032             		move.w	obY(a1),stair_origY(a1)
000130A2 0642 0020                  		addi.w	#$20,d2
000130A6 1343 0037                  		move.b	d3,$37(a1)
000130AA 2348 003C                  		move.l	a0,stair_parent(a1)
000130AE D604                       		add.b	d4,d3
000130B0 51C9 FFA2                  		dbf	d1,@loop	; repeat sequence 3 times
000130B4                            
000130B4                            	@fail:
000130B4                            
000130B4                            Stair_Move:	; Routine 2
000130B4 7000                       		moveq	#0,d0
000130B6 1028 0028                  		move.b	obSubtype(a0),d0
000130BA 0240 0007                  		andi.w	#7,d0
000130BE D040                       		add.w	d0,d0
000130C0 323B 0000                  		move.w	Stair_TypeIndex(pc,d0.w),d1
000130C4 4EBB 1000                  		jsr	Stair_TypeIndex(pc,d1.w)
000130C8                            
000130C8                            Stair_Solid:	; Routine 4
000130C8 2468 003C                  		movea.l	stair_parent(a0),a2
000130CC 7000                       		moveq	#0,d0
000130CE 1028 0037                  		move.b	$37(a0),d0
000130D2 1032 0000                  		move.b	(a2,d0.w),d0
000130D6 D068 0032                  		add.w	stair_origY(a0),d0
000130DA 3140 000C                  		move.w	d0,obY(a0)
000130DE 7200                       		moveq	#0,d1
000130E0 1228 0014                  		move.b	obActWid(a0),d1
000130E4 0641 000B                  		addi.w	#$B,d1
000130E8 343C 0010                  		move.w	#$10,d2
000130EC 363C 0011                  		move.w	#$11,d3
000130F0 3828 0008                  		move.w	obX(a0),d4
000130F4 6100 E9E8                  		bsr.w	SolidObject
000130F8 4A04                       		tst.b	d4
000130FA 6A00                       		bpl.s	loc_10F92
000130FC 1544 0036                  		move.b	d4,$36(a2)
00013100                            
00013100                            loc_10F92:
00013100 0828 0003 0022             		btst	#3,obStatus(a0)
00013106 6700                       		beq.s	locret_10FA0
00013108 157C 0001 0036             		move.b	#1,$36(a2)
0001310E                            
0001310E                            locret_10FA0:
0001310E 4E75                       		rts	
00013110                            ; ===========================================================================
00013110 0000                       Stair_TypeIndex:dc.w Stair_Type00-Stair_TypeIndex
00013112 0000                       		dc.w Stair_Type01-Stair_TypeIndex
00013114 0000                       		dc.w Stair_Type02-Stair_TypeIndex
00013116 0000                       		dc.w Stair_Type01-Stair_TypeIndex
00013118                            ; ===========================================================================
00013118                            
00013118                            Stair_Type00:
00013118 4A68 0034                  		tst.w	$34(a0)
0001311C 6600                       		bne.s	loc_10FC0
0001311E 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00013124 6600                       		bne.s	locret_10FBE
00013126 317C 001E 0034             		move.w	#$1E,$34(a0)
0001312C                            
0001312C                            locret_10FBE:
0001312C 4E75                       		rts	
0001312E                            ; ===========================================================================
0001312E                            
0001312E                            loc_10FC0:
0001312E 5368 0034                  		subq.w	#1,$34(a0)
00013132 66F8                       		bne.s	locret_10FBE
00013134 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
00013138 4E75                       		rts	
0001313A                            ; ===========================================================================
0001313A                            
0001313A                            Stair_Type02:
0001313A 4A68 0034                  		tst.w	$34(a0)
0001313E 6600                       		bne.s	loc_10FE0
00013140 4A28 0036                  		tst.b	$36(a0)
00013144 6A00                       		bpl.s	locret_10FDE
00013146 317C 003C 0034             		move.w	#$3C,$34(a0)
0001314C                            
0001314C                            locret_10FDE:
0001314C 4E75                       		rts	
0001314E                            ; ===========================================================================
0001314E                            
0001314E                            loc_10FE0:
0001314E 5368 0034                  		subq.w	#1,$34(a0)
00013152 6600                       		bne.s	loc_10FEC
00013154 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
00013158 4E75                       		rts	
0001315A                            ; ===========================================================================
0001315A                            
0001315A                            loc_10FEC:
0001315A 43E8 0038                  		lea	$38(a0),a1
0001315E 3028 0034                  		move.w	$34(a0),d0
00013162 E408                       		lsr.b	#2,d0
00013164 0200 0001                  		andi.b	#1,d0
00013168 12C0                       		move.b	d0,(a1)+
0001316A 0A00 0001                  		eori.b	#1,d0
0001316E 12C0                       		move.b	d0,(a1)+
00013170 0A00 0001                  		eori.b	#1,d0
00013174 12C0                       		move.b	d0,(a1)+
00013176 0A00 0001                  		eori.b	#1,d0
0001317A 12C0                       		move.b	d0,(a1)+
0001317C 4E75                       		rts	
0001317E                            ; ===========================================================================
0001317E                            
0001317E                            Stair_Type01:
0001317E 43E8 0038                  		lea	$38(a0),a1
00013182 0C11 0080                  		cmpi.b	#$80,(a1)
00013186 6700                       		beq.s	locret_11038
00013188 5211                       		addq.b	#1,(a1)
0001318A 7200                       		moveq	#0,d1
0001318C 1219                       		move.b	(a1)+,d1
0001318E 4841                       		swap	d1
00013190 E289                       		lsr.l	#1,d1
00013192 2401                       		move.l	d1,d2
00013194 E289                       		lsr.l	#1,d1
00013196 2601                       		move.l	d1,d3
00013198 D682                       		add.l	d2,d3
0001319A 4841                       		swap	d1
0001319C 4842                       		swap	d2
0001319E 4843                       		swap	d3
000131A0 12C3                       		move.b	d3,(a1)+
000131A2 12C2                       		move.b	d2,(a1)+
000131A4 12C1                       		move.b	d1,(a1)+
000131A6                            
000131A6                            locret_11038:
000131A6 4E75                       		rts	
000131A8 4E75                       		rts	
000131A8 4E75                       		rts	
000131AA                            Map_Stair:	include	"_maps\Staircase.asm"
000131AA                            ; ---------------------------------------------------------------------------
000131AA                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000131AA                            ; ---------------------------------------------------------------------------
000131AA                            Map_Stair_internal:
000131AA 0000                       		dc.w @block-Map_Stair_internal
000131AC 01                         @block:		dc.b 1
000131AD F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000131B2                            		even
000131B2                            		even
000131B2                            		include	"_incObj\5C Pylon.asm"
000131B2                            ; ---------------------------------------------------------------------------
000131B2                            ; Object 5C - metal pylons in foreground (SLZ)
000131B2                            ; ---------------------------------------------------------------------------
000131B2                            
000131B2                            Pylon:
000131B2 7000                       		moveq	#0,d0
000131B4 1028 0024                  		move.b	obRoutine(a0),d0
000131B8 323B 0000                  		move.w	Pyl_Index(pc,d0.w),d1
000131BC 4EFB 1000                  		jmp	Pyl_Index(pc,d1.w)
000131C0                            ; ===========================================================================
000131C0 0000                       Pyl_Index:	dc.w Pyl_Main-Pyl_Index
000131C2 0000                       		dc.w Pyl_Display-Pyl_Index
000131C4                            ; ===========================================================================
000131C4                            
000131C4                            Pyl_Main:	; Routine 0
000131C4 5428 0024                  		addq.b	#2,obRoutine(a0)
000131C8 217C 0000 0000 0004        		move.l	#Map_Pylon,obMap(a0)
000131D0 317C 83CC 0002             		move.w	#$83CC,obGfx(a0)
000131D6 117C 0010 0014             		move.b	#$10,obActWid(a0)
000131DC                            
000131DC                            Pyl_Display:	; Routine 2
000131DC 2238 F700                  		move.l	(v_screenposx).w,d1
000131E0 D281                       		add.l	d1,d1
000131E2 4841                       		swap	d1
000131E4 4441                       		neg.w	d1
000131E6 3141 0008                  		move.w	d1,obX(a0)
000131EA 2238 F704                  		move.l	(v_screenposy).w,d1
000131EE D281                       		add.l	d1,d1
000131F0 4841                       		swap	d1
000131F2 0241 003F                  		andi.w	#$3F,d1
000131F6 4441                       		neg.w	d1
000131F8 0641 0100                  		addi.w	#$100,d1
000131FC 3141 000A                  		move.w	d1,obScreenY(a0)
00013200 6000 C37C                  		bra.w	DisplaySprite
00013200 6000 C37C                  		bra.w	DisplaySprite
00013204                            Map_Pylon:	include	"_maps\Pylon.asm"
00013204                            ; ---------------------------------------------------------------------------
00013204                            ; Sprite mappings - metal pylons in foreground (SLZ)
00013204                            ; ---------------------------------------------------------------------------
00013204                            Map_Pylon_internal:
00013204 0000                       		dc.w @pylon-Map_Pylon_internal
00013206 09                         @pylon:		dc.b 9
00013207 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
0001320C A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00013211 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00013216 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
0001321B 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00013220 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00013225 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
0001322A 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
0001322F 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00013234                            		even
00013234                            		even
00013234                            
00013234                            		include	"_incObj\1B Water Surface.asm"
00013234                            ; ---------------------------------------------------------------------------
00013234                            ; Object 1B - water surface (LZ)
00013234                            ; ---------------------------------------------------------------------------
00013234                            
00013234                            WaterSurface:
00013234 7000                       		moveq	#0,d0
00013236 1028 0024                  		move.b	obRoutine(a0),d0
0001323A 323B 0000                  		move.w	Surf_Index(pc,d0.w),d1
0001323E 4EFB 1000                  		jmp	Surf_Index(pc,d1.w)
00013242                            ; ===========================================================================
00013242 0000                       Surf_Index:	dc.w Surf_Main-Surf_Index
00013244 0000                       		dc.w Surf_Action-Surf_Index
00013246                            
00013246 =00000030                  surf_origX:	equ $30		; original x-axis position
00013246 =00000032                  surf_freeze:	equ $32		; flag to freeze animation
00013246                            ; ===========================================================================
00013246                            
00013246                            Surf_Main:	; Routine 0
00013246 5428 0024                  		addq.b	#2,obRoutine(a0)
0001324A 217C 0000 0000 0004        		move.l	#Map_Surf,obMap(a0)
00013252 317C C300 0002             		move.w	#$C300,obGfx(a0)
00013258 117C 0004 0001             		move.b	#4,obRender(a0)
0001325E 117C 0080 0014             		move.b	#$80,obActWid(a0)
00013264 3168 0008 0030             		move.w	obX(a0),surf_origX(a0)
0001326A                            
0001326A                            Surf_Action:	; Routine 2
0001326A 3238 F700                  		move.w	(v_screenposx).w,d1
0001326E 0241 FFE0                  		andi.w	#$FFE0,d1
00013272 D268 0030                  		add.w	surf_origX(a0),d1
00013276 0838 0000 FE05             		btst	#0,(v_framebyte).w
0001327C 6700                       		beq.s	@even		; branch on even frames
0001327E 0641 0020                  		addi.w	#$20,d1
00013282                            
00013282                            	@even:
00013282 3141 0008                  		move.w	d1,obX(a0)	; match	obj x-position to screen position
00013286 3238 F646                  		move.w	(v_waterpos1).w,d1
0001328A 3141 000C                  		move.w	d1,obY(a0)	; match	obj y-position to water	height
0001328E 4A28 0032                  		tst.b	surf_freeze(a0)
00013292 6600                       		bne.s	@stopped
00013294 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
0001329A 6700                       		beq.s	@animate	; if not, branch
0001329C 5628 001A                  		addq.b	#3,obFrame(a0)	; use different	frames
000132A0 117C 0001 0032             		move.b	#1,surf_freeze(a0) ; stop animation
000132A6 6000                       		bra.s	@display
000132A8                            ; ===========================================================================
000132A8                            
000132A8                            @stopped:
000132A8 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
000132AC 6600                       		bne.s	@display	; if yes, branch
000132AE 117C 0000 0032             		move.b	#0,surf_freeze(a0) ; resume animation
000132B4 5728 001A                  		subq.b	#3,obFrame(a0)	; use normal frames
000132B8                            
000132B8                            @animate:
000132B8 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000132BC 6A00                       		bpl.s	@display
000132BE 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
000132C4 5228 001A                  		addq.b	#1,obFrame(a0)
000132C8 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)
000132CE 6500                       		bcs.s	@display
000132D0 117C 0000 001A             		move.b	#0,obFrame(a0)
000132D6                            
000132D6                            @display:
000132D6 6000 C2A6                  		bra.w	DisplaySprite
000132D6 6000 C2A6                  		bra.w	DisplaySprite
000132DA                            Map_Surf:	include	"_maps\Water Surface.asm"
000132DA                            ; --------------------------------------------------------------------------------
000132DA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000132DA                            ; --------------------------------------------------------------------------------
000132DA                            
000132DA                            SME_LGSi8:	
000132DA 0000 0000                  		dc.w SME_LGSi8_C-SME_LGSi8, SME_LGSi8_1C-SME_LGSi8	
000132DE 0000 0000                  		dc.w SME_LGSi8_2C-SME_LGSi8, SME_LGSi8_3C-SME_LGSi8	
000132E2 0000 0000                  		dc.w SME_LGSi8_5B-SME_LGSi8, SME_LGSi8_7A-SME_LGSi8	
000132E6 03                         SME_LGSi8_C:	dc.b 3	
000132E7 F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
000132EC F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
000132F1 F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
000132F6 03                         SME_LGSi8_1C:	dc.b 3	
000132F7 F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
000132FC F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
00013301 F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
00013306 03                         SME_LGSi8_2C:	dc.b 3	
00013307 F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
0001330C F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
00013311 F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
00013316 06                         SME_LGSi8_3C:	dc.b 6	
00013317 F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
0001331C F80D 0000 C0               		dc.b $F8, $D, 0, 0, $C0	
00013321 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
00013326 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
0001332B F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
00013330 F80D 0000 40               		dc.b $F8, $D, 0, 0, $40	
00013335 06                         SME_LGSi8_5B:	dc.b 6	
00013336 F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
0001333B F80D 0008 C0               		dc.b $F8, $D, 0, 8, $C0	
00013340 F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
00013345 F80D 0008 00               		dc.b $F8, $D, 0, 8, 0	
0001334A F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
0001334F F80D 0008 40               		dc.b $F8, $D, 0, 8, $40	
00013354 06                         SME_LGSi8_7A:	dc.b 6	
00013355 F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
0001335A F80D 0800 C0               		dc.b $F8, $D, 8, 0, $C0	
0001335F F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
00013364 F80D 0800 00               		dc.b $F8, $D, 8, 0, 0	
00013369 F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
0001336E F80D 0800 40               		dc.b $F8, $D, 8, 0, $40	
00013374 00                         		even
00013374 00                         		even
00013374                            		include	"_incObj\0B Pole that Breaks.asm"
00013374                            ; ---------------------------------------------------------------------------
00013374                            ; Object 0B - pole that	breaks (LZ)
00013374                            ; ---------------------------------------------------------------------------
00013374                            
00013374                            Pole:
00013374 7000                       		moveq	#0,d0
00013376 1028 0024                  		move.b	obRoutine(a0),d0
0001337A 323B 0000                  		move.w	Pole_Index(pc,d0.w),d1
0001337E 4EFB 1000                  		jmp	Pole_Index(pc,d1.w)
00013382                            ; ===========================================================================
00013382 0000                       Pole_Index:	dc.w Pole_Main-Pole_Index
00013384 0000                       		dc.w Pole_Action-Pole_Index
00013386 0000                       		dc.w Pole_Display-Pole_Index
00013388                            
00013388 =00000030                  pole_time:	equ $30		; time between grabbing the pole & breaking
00013388 =00000032                  pole_grabbed:	equ $32		; flag set when Sonic grabs the pole
00013388                            ; ===========================================================================
00013388                            
00013388                            Pole_Main:	; Routine 0
00013388 5428 0024                  		addq.b	#2,obRoutine(a0)
0001338C 217C 0000 0000 0004        		move.l	#Map_Pole,obMap(a0)
00013394 317C 43DE 0002             		move.w	#$43DE,obGfx(a0)
0001339A 117C 0004 0001             		move.b	#4,obRender(a0)
000133A0 117C 0008 0014             		move.b	#8,obActWid(a0)
000133A6 317C 0200 0018             		move.w	#$200,obPriority(a0)
000133AC 117C 00E1 0020             		move.b	#$E1,obColType(a0)
000133B2 7000                       		moveq	#0,d0
000133B4 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000133B8 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000133BC 3140 0030                  		move.w	d0,pole_time(a0) ; set breakage time
000133C0                            
000133C0                            Pole_Action:	; Routine 2
000133C0 4A28 0032                  		tst.b	pole_grabbed(a0) ; has pole already been grabbed?
000133C4 6700                       		beq.s	@grab		; if not, branch
000133C6 4A68 0030                  		tst.w	pole_time(a0)
000133CA 6700                       		beq.s	@moveup
000133CC 5368 0030                  		subq.w	#1,pole_time(a0) ; decrement time until break
000133D0 6600                       		bne.s	@moveup
000133D2 117C 0001 001A             		move.b	#1,obFrame(a0)	; break	the pole
000133D8 6000                       		bra.s	@release
000133DA                            ; ===========================================================================
000133DA                            
000133DA                            @moveup:
000133DA 43F8 D000                  		lea	(v_player).w,a1
000133DE 3028 000C                  		move.w	obY(a0),d0
000133E2 0440 0018                  		subi.w	#$18,d0
000133E6 0838 0000 F604             		btst	#bitUp,(v_jpadhold1).w ; is "up" pressed?
000133EC 6700                       		beq.s	@movedown	; if not, branch
000133EE 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up
000133F2 B069 000C                  		cmp.w	obY(a1),d0
000133F6 6500                       		bcs.s	@movedown
000133F8 3340 000C                  		move.w	d0,obY(a1)
000133FC                            
000133FC                            @movedown:
000133FC 0640 0024                  		addi.w	#$24,d0
00013400 0838 0001 F604             		btst	#bitDn,(v_jpadhold1).w ; is "down" pressed?
00013406 6700                       		beq.s	@letgo		; if not, branch
00013408 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down
0001340C B069 000C                  		cmp.w	obY(a1),d0
00013410 6400                       		bcc.s	@letgo
00013412 3340 000C                  		move.w	d0,obY(a1)
00013416                            
00013416                            @letgo:
00013416 1038 F603                  		move.b	(v_jpadpress2).w,d0
0001341A 0240 0070                  		andi.w	#btnABC,d0	; is A/B/C pressed?
0001341E 6700                       		beq.s	Pole_Display	; if not, branch
00013420                            
00013420                            @release:
00013420 4228 0020                  		clr.b	obColType(a0)
00013424 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Pole_Display next
00013428 4238 F7C8                  		clr.b	(f_lockmulti).w
0001342C 4238 F7C9                  		clr.b	(f_wtunnelallow).w
00013430 4228 0032                  		clr.b	pole_grabbed(a0)
00013434 6000                       		bra.s	Pole_Display
00013436                            ; ===========================================================================
00013436                            
00013436                            @grab:
00013436 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	pole?
0001343A 6700                       		beq.s	Pole_Display	; if not, branch
0001343C 43F8 D000                  		lea	(v_player).w,a1
00013440 3028 0008                  		move.w	obX(a0),d0
00013444 0640 0014                  		addi.w	#$14,d0
00013448 B069 0008                  		cmp.w	obX(a1),d0
0001344C 6400                       		bcc.s	Pole_Display
0001344E 4228 0021                  		clr.b	obColProp(a0)
00013452 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1)
00013458 6400                       		bcc.s	Pole_Display
0001345A 4269 0010                  		clr.w	obVelX(a1)	; stop Sonic moving
0001345E 4269 0012                  		clr.w	obVelY(a1)	; stop Sonic moving
00013462 3028 0008                  		move.w	obX(a0),d0
00013466 0640 0014                  		addi.w	#$14,d0
0001346A 3340 0008                  		move.w	d0,obX(a1)
0001346E 08A9 0000 0022             		bclr	#0,obStatus(a1)
00013474 137C 0000 001C             		move.b	#id_Hang,obAnim(a1) ; set Sonic's animation to "hanging" ($11)
0001347A 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
00013480 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
00013486 117C 0001 0032             		move.b	#1,pole_grabbed(a0) ; begin countdown to breakage
0001348C                            
0001348C                            Pole_Display:	; Routine 4
0001348C 6000 E1B8                  		bra.w	RememberState
0001348C 6000 E1B8                  		bra.w	RememberState
00013490                            Map_Pole:	include	"_maps\Pole that Breaks.asm"
00013490                            ; ---------------------------------------------------------------------------
00013490                            ; Sprite mappings - pole that breaks (LZ)
00013490                            ; ---------------------------------------------------------------------------
00013490                            Map_Pole_internal:
00013490 0000                       		dc.w @normal-Map_Pole_internal
00013492 0000                       		dc.w @broken-Map_Pole_internal
00013494 02                         @normal:	dc.b 2			; normal pole
00013495 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
0001349A 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
0001349F 04                         @broken:	dc.b 4			; broken pole
000134A0 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
000134A5 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
000134AA 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
000134AF 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
000134B4                            		even
000134B4                            		even
000134B4                            		include	"_incObj\0C Flapping Door.asm"
000134B4                            ; ---------------------------------------------------------------------------
000134B4                            ; Object 0C - flapping door (LZ)
000134B4                            ; ---------------------------------------------------------------------------
000134B4                            
000134B4                            FlapDoor:
000134B4 7000                       		moveq	#0,d0
000134B6 1028 0024                  		move.b	obRoutine(a0),d0
000134BA 323B 0000                  		move.w	Flap_Index(pc,d0.w),d1
000134BE 4EFB 1000                  		jmp	Flap_Index(pc,d1.w)
000134C2                            ; ===========================================================================
000134C2 0000                       Flap_Index:	dc.w Flap_Main-Flap_Index
000134C4 0000                       		dc.w Flap_OpenClose-Flap_Index
000134C6                            
000134C6 =00000032                  flap_time:	equ $32		; time between opening/closing
000134C6 =00000030                  flap_wait:	equ $30		; time until change
000134C6                            ; ===========================================================================
000134C6                            
000134C6                            Flap_Main:	; Routine 0
000134C6 5428 0024                  		addq.b	#2,obRoutine(a0)
000134CA 217C 0000 0000 0004        		move.l	#Map_Flap,obMap(a0)
000134D2 317C 4328 0002             		move.w	#$4328,obGfx(a0)
000134D8 0028 0004 0001             		ori.b	#4,obRender(a0)
000134DE 117C 0028 0014             		move.b	#$28,obActWid(a0)
000134E4 7000                       		moveq	#0,d0
000134E6 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000134EA C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000134EE 3140 0032                  		move.w	d0,flap_time(a0) ; set flap delay time
000134F2                            
000134F2                            Flap_OpenClose:	; Routine 2
000134F2 5368 0030                  		subq.w	#1,flap_wait(a0) ; decrement time delay
000134F6 6A00                       		bpl.s	@wait		; if time remains, branch
000134F8 3168 0032 0030             		move.w	flap_time(a0),flap_wait(a0) ; reset time delay
000134FE 0868 0000 001C             		bchg	#0,obAnim(a0)	; open/close door
00013504 4A28 0001                  		tst.b	obRender(a0)
00013508 6A00                       		bpl.s	@nosound
00013514                            
00013514                            	@wait:
00013514                            	@nosound:
00013514 43F9 0000 0000             		lea	(Ani_Flap).l,a1
0001351A 6100 9118                  		bsr.w	AnimateSprite
0001351E 4238 F7C9                  		clr.b	(f_wtunnelallow).w ; enable wind tunnel
00013522 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
00013526 6600                       		bne.s	@display	; if yes, branch
00013528 3038 D008                  		move.w	(v_player+obX).w,d0
0001352C B068 0008                  		cmp.w	obX(a0),d0	; has Sonic passed through the door?
00013530 6400                       		bcc.s	@display	; if yes, branch
00013532 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
00013538 323C 0013                  		move.w	#$13,d1
0001353C 343C 0020                  		move.w	#$20,d2
00013540 3602                       		move.w	d2,d3
00013542 5243                       		addq.w	#1,d3
00013544 3828 0008                  		move.w	obX(a0),d4
00013548 6100 E594                  		bsr.w	SolidObject	; make the door	solid
0001354C                            
0001354C                            	@display:
0001354C 6000 E0F8                  		bra.w	RememberState
0001354C 6000 E0F8                  		bra.w	RememberState
00013550                            		include	"_anim\Flapping Door.asm"
00013550                            ; ---------------------------------------------------------------------------
00013550                            ; Animation script - flapping door (LZ)
00013550                            ; ---------------------------------------------------------------------------
00013550 0000                       Ani_Flap:	dc.w @opening-Ani_Flap
00013552 0000                       		dc.w @closing-Ani_Flap
00013554 0300 0102 FE01             @opening:	dc.b 3,	0, 1, 2, afBack, 1
0001355A 0302 0100 FE01             @closing:	dc.b 3,	2, 1, 0, afBack, 1
00013560                            		even
00013560                            		even
00013560                            Map_Flap:	include	"_maps\Flapping Door.asm"
00013560                            ; ---------------------------------------------------------------------------
00013560                            ; Sprite mappings - flapping door (LZ)
00013560                            ; ---------------------------------------------------------------------------
00013560                            Map_Flap_internal:
00013560 0000                       		dc.w @closed-Map_Flap_internal
00013562 0000                       		dc.w @halfway-Map_Flap_internal
00013564 0000                       		dc.w @open-Map_Flap_internal
00013566 02                         @closed:	dc.b 2
00013567 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001356C 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00013571 02                         @halfway:	dc.b 2
00013572 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00013577 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
0001357C 02                         @open:		dc.b 2
0001357D D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00013582 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00013588 00                         		even
00013588 00                         		even
00013588                            
00013588                            		include	"_incObj\71 Invisible Barriers.asm"
00013588                            ; ---------------------------------------------------------------------------
00013588                            ; Object 71 - invisible	solid barriers
00013588                            ; ---------------------------------------------------------------------------
00013588                            
00013588                            Invisibarrier:
00013588 7000                       		moveq	#0,d0
0001358A 1028 0024                  		move.b	obRoutine(a0),d0
0001358E 323B 0000                  		move.w	Invis_Index(pc,d0.w),d1
00013592 4EFB 1000                  		jmp	Invis_Index(pc,d1.w)
00013596                            ; ===========================================================================
00013596 0000                       Invis_Index:	dc.w Invis_Main-Invis_Index
00013598 0000                       		dc.w Invis_Solid-Invis_Index
0001359A                            
0001359A =00000016                  invis_height:	equ $16		; height in pixels
0001359A                            ; ===========================================================================
0001359A                            
0001359A                            Invis_Main:	; Routine 0
0001359A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001359E 217C 0000 0000 0004        		move.l	#Map_Invis,obMap(a0)
000135A6 317C 8680 0002             		move.w	#$8680,obGfx(a0)
000135AC 0028 0004 0001             		ori.b	#4,obRender(a0)
000135B2 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000135B6 1200                       		move.b	d0,d1
000135B8 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
000135BC 0640 0010                  		addi.w	#$10,d0
000135C0 E248                       		lsr.w	#1,d0
000135C2 1140 0014                  		move.b	d0,obActWid(a0)	; set object width
000135C6 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
000135CA 5241                       		addq.w	#1,d1
000135CC E749                       		lsl.w	#3,d1
000135CE 1141 0016                  		move.b	d1,invis_height(a0) ; set object height
000135D2                            
000135D2                            Invis_Solid:	; Routine 2
000135D2 6100 C338                  		bsr.w	ChkObjectVisible
000135D6 6600                       		bne.s	@chkdel
000135D8 7200                       		moveq	#0,d1
000135DA 1228 0014                  		move.b	obActWid(a0),d1
000135DE 0641 000B                  		addi.w	#$B,d1
000135E2 7400                       		moveq	#0,d2
000135E4 1428 0016                  		move.b	invis_height(a0),d2
000135E8 3602                       		move.w	d2,d3
000135EA 5243                       		addq.w	#1,d3
000135EC 3828 0008                  		move.w	obX(a0),d4
000135F0 6100 E534                  		bsr.w	SolidObject71
000135F4                            
000135F4                            @chkdel:
00013610 4A78 FE08                  		tst.w	(v_debuguse).w	; are you using	debug mode?
00013614 6700                       		beq.s	@nodisplay	; if not, branch
00013616 4EF9 0000 F57E             		jmp	(DisplaySprite).l	; if yes, display the object
0001361C                            
0001361C                            	@nodisplay:
0001361C 4E75                       		rts	
0001361E                            
0001361E                            	@delete:
0001361E 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001361E 4EF9 0000 F5BE             		jmp	(DeleteObject).l
00013624                            Map_Invis:	include	"_maps\Invisible Barriers.asm"
00013624                            ; --------------------------------------------------------------------------------
00013624                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00013624                            ; --------------------------------------------------------------------------------
00013624                            
00013624                            SME_t60cE:	
00013624 0000 0000                  		dc.w SME_t60cE_6-SME_t60cE, SME_t60cE_1B-SME_t60cE	
00013628 0000                       		dc.w SME_t60cE_30-SME_t60cE	
0001362A 04                         SME_t60cE_6:	dc.b 4	
0001362B 0005 0028 F0               		dc.b 0, 5, 0, $28, $F0	
00013630 0005 0028 00               		dc.b 0, 5, 0, $28, 0	
00013635 F005 0028 00               		dc.b $F0, 5, 0, $28, 0	
0001363A F005 0028 F0               		dc.b $F0, 5, 0, $28, $F0	
0001363F 04                         SME_t60cE_1B:	dc.b 4	
00013640 E005 0028 C0               		dc.b $E0, 5, 0, $28, $C0	
00013645 E005 0028 30               		dc.b $E0, 5, 0, $28, $30	
0001364A 1005 0028 30               		dc.b $10, 5, 0, $28, $30	
0001364F 1005 0028 C0               		dc.b $10, 5, 0, $28, $C0	
00013654 04                         SME_t60cE_30:	dc.b 4	
00013655 E005 0028 80               		dc.b $E0, 5, 0, $28, $80	
0001365A E005 0028 70               		dc.b $E0, 5, 0, $28, $70	
0001365F 1005 0028 70               		dc.b $10, 5, 0, $28, $70	
00013664 1005 0028 80               		dc.b $10, 5, 0, $28, $80	
0001366A 00                         		even
0001366A 00                         		even
0001366A                            
0001366A                            		include	"_incObj\5D Fan.asm"
0001366A                            ; ---------------------------------------------------------------------------
0001366A                            ; Object 5D - fans (SLZ)
0001366A                            ; ---------------------------------------------------------------------------
0001366A                            
0001366A                            Fan:
0001366A 7000                       		moveq	#0,d0
0001366C 1028 0024                  		move.b	obRoutine(a0),d0
00013670 323B 0000                  		move.w	Fan_Index(pc,d0.w),d1
00013674 4EFB 1000                  		jmp	Fan_Index(pc,d1.w)
00013678                            ; ===========================================================================
00013678 0000                       Fan_Index:	dc.w Fan_Main-Fan_Index
0001367A 0000                       		dc.w Fan_Delay-Fan_Index
0001367C                            
0001367C =00000030                  fan_time:	equ $30		; time between switching on/off
0001367C =00000032                  fan_switch:	equ $32		; on/off switch
0001367C                            ; ===========================================================================
0001367C                            
0001367C                            Fan_Main:	; Routine 0
0001367C 5428 0024                  		addq.b	#2,obRoutine(a0)
00013680 217C 0000 0000 0004        		move.l	#Map_Fan,obMap(a0)
00013688 317C 43A0 0002             		move.w	#$43A0,obGfx(a0)
0001368E 0028 0004 0001             		ori.b	#4,obRender(a0)
00013694 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001369A 317C 0200 0018             		move.w	#$200,obPriority(a0)
000136A0                            
000136A0                            Fan_Delay:	; Routine 2
000136A0 0828 0001 0028             		btst	#1,obSubtype(a0) ; is object type 02/03 (always on)?
000136A6 6600                       		bne.s	@blow		; if yes, branch
000136A8 5368 0030                  		subq.w	#1,fan_time(a0)	; subtract 1 from time delay
000136AC 6A00                       		bpl.s	@blow		; if time remains, branch
000136AE 317C 0078 0030             		move.w	#120,fan_time(a0) ; set delay to 2 seconds
000136B4 0868 0000 0032             		bchg	#0,fan_switch(a0) ; switch fan on/off
000136BA 6700                       		beq.s	@blow		; if fan is off, branch
000136BC 317C 00B4 0030             		move.w	#180,fan_time(a0) ; set delay to 3 seconds
000136C2                            
000136C2                            @blow:
000136C2 4A28 0032                  		tst.b	fan_switch(a0)	; is fan switched on?
000136C6 6600 0000                  		bne.w	@chkdel		; if not, branch
000136CA 43F8 D000                  		lea	(v_player).w,a1
000136CE 3029 0008                  		move.w	obX(a1),d0
000136D2 9068 0008                  		sub.w	obX(a0),d0
000136D6 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
000136DC 6600                       		bne.s	@chksonic	; if yes, branch
000136DE 4440                       		neg.w	d0
000136E0                            
000136E0                            @chksonic:
000136E0 0640 0050                  		addi.w	#$50,d0
000136E4 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
000136E8 6400                       		bcc.s	@animate	; if yes, branch
000136EA 3229 000C                  		move.w	obY(a1),d1
000136EE 0641 0060                  		addi.w	#$60,d1
000136F2 9268 000C                  		sub.w	obY(a0),d1
000136F6 6500                       		bcs.s	@animate	; branch if Sonic is too low
000136F8 0C41 0070                  		cmpi.w	#$70,d1
000136FC 6400                       		bcc.s	@animate	; branch if Sonic is too high
000136FE 0440 0050                  		subi.w	#$50,d0		; is Sonic more than $50 pixels from the fan?
00013702 6400                       		bcc.s	@faraway	; if yes, branch
00013704 4640                       		not.w	d0
00013706 D040                       		add.w	d0,d0
00013708                            
00013708                            	@faraway:
00013708 0640 0060                  		addi.w	#$60,d0
0001370C 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
00013712 6600                       		bne.s	@right		; if yes, branch
00013714 4440                       		neg.w	d0
00013716                            
00013716                            	@right:
00013716 4400                       		neg.b	d0
00013718 E840                       		asr.w	#4,d0
0001371A 0828 0000 0028             		btst	#0,obSubtype(a0)
00013720 6700                       		beq.s	@movesonic
00013722 4440                       		neg.w	d0
00013724                            
00013724                            	@movesonic:
00013724 D169 0008                  		add.w	d0,obX(a1)	; push Sonic away from the fan
00013728                            
00013728                            @animate:
00013728 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001372C 6A00                       		bpl.s	@chkdel
0001372E 117C 0000 001E             		move.b	#0,obTimeFrame(a0)
00013734 5228 001B                  		addq.b	#1,obAniFrame(a0)
00013738 0C28 0003 001B             		cmpi.b	#3,obAniFrame(a0)
0001373E 6500                       		bcs.s	@noreset
00013740 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset after 4 frames
00013746                            
00013746                            	@noreset:
00013746 7000                       		moveq	#0,d0
00013748 0828 0000 0028             		btst	#0,obSubtype(a0)
0001374E 6700                       		beq.s	@noflip
00013750 7002                       		moveq	#2,d0
00013752                            
00013752                            	@noflip:
00013752 D028 001B                  		add.b	obAniFrame(a0),d0
00013756 1140 001A                  		move.b	d0,obFrame(a0)
0001375A                            
0001375A                            @chkdel:
0001375A 6100 BE22                  		bsr.w	DisplaySprite
0001377C 4E75                       		rts	
0001377C 4E75                       		rts	
0001377E                            Map_Fan:	include	"_maps\Fan.asm"
0001377E                            ; ---------------------------------------------------------------------------
0001377E                            ; Sprite mappings - fans (SLZ)
0001377E                            ; ---------------------------------------------------------------------------
0001377E                            Map_Fan_internal:
0001377E 0000                       		dc.w @fan1-Map_Fan_internal
00013780 0000                       		dc.w @fan2-Map_Fan_internal
00013782 0000                       		dc.w @fan3-Map_Fan_internal
00013784 0000                       		dc.w @fan2-Map_Fan_internal
00013786 0000                       		dc.w @fan1-Map_Fan_internal
00013788 02                         @fan1:		dc.b 2
00013789 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
0001378E 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00013793 02                         @fan2:		dc.b 2
00013794 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00013799 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
0001379E 02                         @fan3:		dc.b 2
0001379F F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
000137A4 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
000137AA 00                         		even
000137AA 00                         		even
000137AA                            		include	"_incObj\5E Seesaw.asm"
000137AA                            ; ---------------------------------------------------------------------------
000137AA                            ; Object 5E - seesaws (SLZ)
000137AA                            ; ---------------------------------------------------------------------------
000137AA                            
000137AA                            Seesaw:
000137AA 7000                       		moveq	#0,d0
000137AC 1028 0024                  		move.b	obRoutine(a0),d0
000137B0 323B 0000                  		move.w	See_Index(pc,d0.w),d1
000137B4 4EBB 1000                  		jsr	See_Index(pc,d1.w)
000137B8 3028 0000                  		move.w	see_origX(a0),d0
000137BC 0240 FF80                  		andi.w	#$FF80,d0
000137C0 3238 F700                  		move.w	(v_screenposx).w,d1
000137C4 0441 0080                  		subi.w	#$80,d1
000137C8 0241 FF80                  		andi.w	#$FF80,d1
000137CC 9041                       		sub.w	d1,d0
000137CE 6B00 BDEE                  		bmi.w	DeleteObject
000137D2 0C40 0280                  		cmpi.w	#$280,d0
000137D6 6200 BDE6                  		bhi.w	DeleteObject
000137DA 6000 BDA2                  		bra.w	DisplaySprite
000137DE                            ; ===========================================================================
000137DE 0000                       See_Index:	dc.w See_Main-See_Index
000137E0 0000                       		dc.w See_Slope-See_Index
000137E2 0000                       		dc.w See_Slope2-See_Index
000137E4 0000                       		dc.w See_Spikeball-See_Index
000137E6 0000                       		dc.w See_MoveSpike-See_Index
000137E8 0000                       		dc.w See_SpikeFall-See_Index
000137EA                            
000137EA =00000030                  see_origX:	equ $30		; original x-axis position
000137EA =00000034                  see_origY:	equ $34		; original y-axis position
000137EA =00000038                  see_speed:	equ $38		; speed of collision
000137EA =0000003A                  see_frame:	equ $3A		; 
000137EA =0000003C                  see_parent:	equ $3C		; RAM address of parent object
000137EA                            ; ===========================================================================
000137EA                            
000137EA                            See_Main:	; Routine 0
000137EA 5428 0024                  		addq.b	#2,obRoutine(a0)
000137EE 217C 0000 0000 0004        		move.l	#Map_Seesaw,obMap(a0)
000137F6 317C 0374 0002             		move.w	#$374,obGfx(a0)
000137FC 0028 0004 0001             		ori.b	#4,obRender(a0)
00013802 117C 0004 0018             		move.b	#4,obPriority(a0)
00013808 117C 0030 0014             		move.b	#$30,obActWid(a0)
0001380E 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013814 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 ?
00013818 6600                       		bne.s	@noball		; if not, branch
0001381A                            
0001381A 6100 C312                  		bsr.w	FindNextFreeObj
0001381E 6600                       		bne.s	@noball
00013820 12BC 005E                  		move.b	#id_Seesaw,0(a1) ; load spikeball object
00013824 5C29 0024                  		addq.b	#6,obRoutine(a1) ; use See_Spikeball routine
00013828 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001382E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013834 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0001383A 2348 003C                  		move.l	a0,see_parent(a1)
0001383E                            
0001383E                            	@noball:
0001383E 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013844 6700                       		beq.s	@noflip		; if not, branch
00013846 117C 0002 001A             		move.b	#2,obFrame(a0)	; use different frame
0001384C                            
0001384C                            	@noflip:
0001384C 1168 001A 003A             		move.b	obFrame(a0),see_frame(a0)
00013852                            
00013852                            See_Slope:	; Routine 2
00013852 1228 003A                  		move.b	see_frame(a0),d1
00013856 6100 0000                  		bsr.w	See_ChgFrame
0001385A 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00013860 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013866 6700                       		beq.s	@notflat	; if not, branch
00013868 45F9 0000 0000             		lea	(See_DataFlat).l,a2
0001386E                            
0001386E                            	@notflat:
0001386E 43F8 D000                  		lea	(v_player).w,a1
00013872 3169 0012 0038             		move.w	obVelY(a1),see_speed(a0)
00013878 323C 0030                  		move.w	#$30,d1
0001387C 4EB9 0000 8CF8             		jsr	(SlopeObject).l
00013882 4E75                       		rts	
00013884                            ; ===========================================================================
00013884                            
00013884                            See_Slope2:	; Routine 4
00013884 6100 0000                  		bsr.w	See_ChkSide
00013888 45F9 0000 0000             		lea	(See_DataSlope).l,a2
0001388E 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013894 6700                       		beq.s	@notflat	; if not, branch
00013896 45F9 0000 0000             		lea	(See_DataFlat).l,a2
0001389C                            
0001389C                            	@notflat:
0001389C 323C 0030                  		move.w	#$30,d1
000138A0 4EB9 0000 8D98             		jsr	(ExitPlatform).l
000138A6 323C 0030                  		move.w	#$30,d1
000138AA 3428 0008                  		move.w	obX(a0),d2
000138AE 4EB9 0000 9D32             		jsr	(SlopeObject2).l
000138B4 4E75                       		rts	
000138B6                            ; ===========================================================================
000138B6                            
000138B6                            See_ChkSide:
000138B6 7202                       		moveq	#2,d1
000138B8 43F8 D000                  		lea	(v_player).w,a1
000138BC 3028 0008                  		move.w	obX(a0),d0
000138C0 9069 0008                  		sub.w	obX(a1),d0	; is Sonic on the left side of the seesaw?
000138C4 6400                       		bcc.s	@leftside	; if yes, branch
000138C6 4440                       		neg.w	d0
000138C8 7200                       		moveq	#0,d1
000138CA                            
000138CA                            	@leftside:
000138CA 0C40 0008                  		cmpi.w	#8,d0
000138CE 6400                       		bcc.s	See_ChgFrame
000138D0 7201                       		moveq	#1,d1
000138D2                            
000138D2                            See_ChgFrame:
000138D2 1028 001A                  		move.b	obFrame(a0),d0
000138D6 B001                       		cmp.b	d1,d0		; does frame need to change?
000138D8 6700                       		beq.s	@noflip		; if not, branch
000138DA 6400                       		bcc.s	@loc_11772
000138DC 5400                       		addq.b	#2,d0
000138DE                            
000138DE                            	@loc_11772:
000138DE 5300                       		subq.b	#1,d0
000138E0 1140 001A                  		move.b	d0,obFrame(a0)
000138E4 1141 003A                  		move.b	d1,see_frame(a0)
000138E8 08A8 0000 0001             		bclr	#0,obRender(a0)
000138EE 0828 0001 001A             		btst	#1,obFrame(a0)
000138F4 6700                       		beq.s	@noflip
000138F6 08E8 0000 0001             		bset	#0,obRender(a0)
000138FC                            
000138FC                            	@noflip:
000138FC 4E75                       		rts	
000138FE                            ; ===========================================================================
000138FE                            
000138FE                            See_Spikeball:	; Routine 6
000138FE 5428 0024                  		addq.b	#2,obRoutine(a0)
00013902 217C 0000 0000 0004        		move.l	#Map_SSawBall,obMap(a0)
0001390A 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00013910 0028 0004 0001             		ori.b	#4,obRender(a0)
00013916 117C 0004 0018             		move.b	#4,obPriority(a0)
0001391C 117C 008B 0020             		move.b	#$8B,obColType(a0)
00013922 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013928 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
0001392E 0668 0028 0008             		addi.w	#$28,obX(a0)
00013934 3168 000C 0034             		move.w	obY(a0),see_origY(a0)
0001393A 117C 0001 001A             		move.b	#1,obFrame(a0)
00013940 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013946 6700                       		beq.s	See_MoveSpike	; if not, branch
00013948 0468 0050 0008             		subi.w	#$50,obX(a0)	; move spikeball to the other side
0001394E 117C 0002 003A             		move.b	#2,see_frame(a0)
00013954                            
00013954                            See_MoveSpike:	; Routine 8
00013954 2268 003C                  		movea.l	see_parent(a0),a1
00013958 7000                       		moveq	#0,d0
0001395A 1028 003A                  		move.b	see_frame(a0),d0
0001395E 9029 003A                  		sub.b	see_frame(a1),d0
00013962 6700                       		beq.s	loc_1183E
00013964 6400                       		bcc.s	loc_117FC
00013966 4400                       		neg.b	d0
00013968                            
00013968                            loc_117FC:
00013968 323C F7E8                  		move.w	#-$818,d1
0001396C 343C FEEC                  		move.w	#-$114,d2
00013970 0C00 0001                  		cmpi.b	#1,d0
00013974 6700                       		beq.s	loc_11822
00013976 323C F510                  		move.w	#-$AF0,d1
0001397A 343C FF34                  		move.w	#-$CC,d2
0001397E 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00013984 6D00                       		blt.s	loc_11822
00013986 323C F200                  		move.w	#-$E00,d1
0001398A 343C FF60                  		move.w	#-$A0,d2
0001398E                            
0001398E                            loc_11822:
0001398E 3141 0012                  		move.w	d1,obVelY(a0)
00013992 3142 0010                  		move.w	d2,obVelX(a0)
00013996 3028 0008                  		move.w	obX(a0),d0
0001399A 9068 0030                  		sub.w	see_origX(a0),d0
0001399E 6400                       		bcc.s	loc_11838
000139A0 4468 0010                  		neg.w	obVelX(a0)
000139A4                            
000139A4                            loc_11838:
000139A4 5428 0024                  		addq.b	#2,obRoutine(a0)
000139A8 6000                       		bra.s	See_SpikeFall
000139AA                            ; ===========================================================================
000139AA                            
000139AA                            loc_1183E:
000139AA 45F9 0000 0000             		lea	(See_Speeds).l,a2
000139B0 7000                       		moveq	#0,d0
000139B2 1029 001A                  		move.b	obFrame(a1),d0
000139B6 343C 0028                  		move.w	#$28,d2
000139BA 3228 0008                  		move.w	obX(a0),d1
000139BE 9268 0030                  		sub.w	see_origX(a0),d1
000139C2 6400                       		bcc.s	loc_1185C
000139C4 4442                       		neg.w	d2
000139C6 5440                       		addq.w	#2,d0
000139C8                            
000139C8                            loc_1185C:
000139C8 D040                       		add.w	d0,d0
000139CA 3228 0034                  		move.w	see_origY(a0),d1
000139CE D272 0000                  		add.w	(a2,d0.w),d1
000139D2 3141 000C                  		move.w	d1,obY(a0)
000139D6 D468 0030                  		add.w	see_origX(a0),d2
000139DA 3142 0008                  		move.w	d2,obX(a0)
000139DE 4268 000E                  		clr.w	obY+2(a0)
000139E2 4268 000A                  		clr.w	obX+2(a0)
000139E6 4E75                       		rts	
000139E8                            ; ===========================================================================
000139E8                            
000139E8                            See_SpikeFall:	; Routine $A
000139E8 4A68 0012                  		tst.w	obVelY(a0)	; is spikeball falling down?
000139EC 6A00                       		bpl.s	loc_1189A	; if yes, branch
000139EE 6100 BB42                  		bsr.w	ObjectFall
000139F2 3028 0034                  		move.w	see_origY(a0),d0
000139F6 0440 002F                  		subi.w	#$2F,d0
000139FA B068 000C                  		cmp.w	obY(a0),d0
000139FE 6E00                       		bgt.s	locret_11898
00013A00 6100 BB30                  		bsr.w	ObjectFall
00013A04                            
00013A04                            locret_11898:
00013A04 4E75                       		rts	
00013A06                            ; ===========================================================================
00013A06                            
00013A06                            loc_1189A:
00013A06 6100 BB2A                  		bsr.w	ObjectFall
00013A0A 2268 003C                  		movea.l	see_parent(a0),a1
00013A0E 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013A14 7000                       		moveq	#0,d0
00013A16 1029 001A                  		move.b	obFrame(a1),d0
00013A1A 3228 0008                  		move.w	obX(a0),d1
00013A1E 9268 0030                  		sub.w	see_origX(a0),d1
00013A22 6400                       		bcc.s	loc_118BA
00013A24 5440                       		addq.w	#2,d0
00013A26                            
00013A26                            loc_118BA:
00013A26 D040                       		add.w	d0,d0
00013A28 3228 0034                  		move.w	see_origY(a0),d1
00013A2C D272 0000                  		add.w	(a2,d0.w),d1
00013A30 B268 000C                  		cmp.w	obY(a0),d1
00013A34 6E00                       		bgt.s	locret_11938
00013A36 2268 003C                  		movea.l	see_parent(a0),a1
00013A3A 7202                       		moveq	#2,d1
00013A3C 4A68 0010                  		tst.w	obVelX(a0)
00013A40 6B00                       		bmi.s	See_Spring
00013A42 7200                       		moveq	#0,d1
00013A44                            
00013A44                            See_Spring:
00013A44 1341 003A                  		move.b	d1,$3A(a1)
00013A48 1141 003A                  		move.b	d1,see_frame(a0)
00013A4C B229 001A                  		cmp.b	obFrame(a1),d1
00013A50 6700                       		beq.s	loc_1192C
00013A52 08A9 0003 0022             		bclr	#3,obStatus(a1)
00013A58 6700                       		beq.s	loc_1192C
00013A5A 4229 0025                  		clr.b	ob2ndRout(a1)
00013A5E 137C 0002 0024             		move.b	#2,obRoutine(a1)
00013A64 45F8 D000                  		lea	(v_player).w,a2
00013A68 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
00013A6E 446A 0012                  		neg.w	obVelY(a2)
00013A72 08EA 0001 0022             		bset	#1,obStatus(a2)
00013A78 08AA 0003 0022             		bclr	#3,obStatus(a2)
00013A7E 422A 003C                  		clr.b	$3C(a2)
00013A82 157C 0000 001C             		move.b	#id_Spring,obAnim(a2) ; change Sonic's animation to "spring" ($10)
00013A88 157C 0002 0024             		move.b	#2,obRoutine(a2)
00013A98                            
00013A98                            loc_1192C:
00013A98 4268 0010                  		clr.w	obVelX(a0)
00013A9C 4268 0012                  		clr.w	obVelY(a0)
00013AA0 5528 0024                  		subq.b	#2,obRoutine(a0)
00013AA4                            
00013AA4                            locret_11938:
00013AA4 4E75                       		rts	
00013AA6                            ; ===========================================================================
00013AA6 FFF8 FFE4 FFD1 FFE4 FFF8   See_Speeds:	dc.w -8, -$1C, -$2F, -$1C, -8
00013AB0                            
00013AB0                            See_DataSlope:	incbin	"misc\slzssaw1.bin"
00013AE0                            		even
00013AE0                            See_DataFlat:	incbin	"misc\slzssaw2.bin"
00013B10                            		even
00013B10                            		even
00013B10                            Map_Seesaw:	include	"_maps\Seesaw.asm"
00013B10                            ; ---------------------------------------------------------------------------
00013B10                            ; Sprite mappings - seesaws (SLZ)
00013B10                            ; ---------------------------------------------------------------------------
00013B10                            Map_Seesaw_internal:
00013B10 0000                       		dc.w @sloping-Map_Seesaw_internal
00013B12 0000                       		dc.w @flat-Map_Seesaw_internal
00013B14 0000                       		dc.w @sloping-Map_Seesaw_internal
00013B16 0000                       		dc.w @flat-Map_Seesaw_internal
00013B18 07                         @sloping:	dc.b 7
00013B19 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00013B1E DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00013B23 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00013B28 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00013B2D FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00013B32 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00013B37 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00013B3C 04                         @flat:		dc.b 4
00013B3D E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00013B42 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00013B47 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00013B4C E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00013B52 00                         		even
00013B52 00                         		even
00013B52                            Map_SSawBall:	include	"_maps\Seesaw Ball.asm"
00013B52                            ; ---------------------------------------------------------------------------
00013B52                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00013B52                            ; ---------------------------------------------------------------------------
00013B52                            Map_SSawBall_internal:
00013B52 0000                       		dc.w @red-Map_SSawBall_internal
00013B54 0000                       		dc.w @silver-Map_SSawBall_internal
00013B56 01                         @red:		dc.b 1
00013B57 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013B5C 01                         @silver:	dc.b 1
00013B5D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00013B62                            		even
00013B62                            		even
00013B62                            		include	"_incObj\5F Bomb Enemy.asm"
00013B62                            ; ---------------------------------------------------------------------------
00013B62                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00013B62                            ; ---------------------------------------------------------------------------
00013B62                            
00013B62                            Bomb:
00013B62 7000                       		moveq	#0,d0
00013B64 1028 0024                  		move.b	obRoutine(a0),d0
00013B68 323B 0000                  		move.w	Bom_Index(pc,d0.w),d1
00013B6C 4EFB 1000                  		jmp	Bom_Index(pc,d1.w)
00013B70                            ; ===========================================================================
00013B70 0000                       Bom_Index:	dc.w Bom_Main-Bom_Index
00013B72 0000                       		dc.w Bom_Action-Bom_Index
00013B74 0000                       		dc.w Bom_Display-Bom_Index
00013B76 0000                       		dc.w Bom_End-Bom_Index
00013B78                            
00013B78 =00000030                  bom_time:	equ $30		; time of fuse
00013B78 =00000034                  bom_origY:	equ $34		; original y-axis position
00013B78 =0000003C                  bom_parent:	equ $3C		; address of parent object
00013B78                            ; ===========================================================================
00013B78                            
00013B78                            Bom_Main:	; Routine 0
00013B78 5428 0024                  		addq.b	#2,obRoutine(a0)
00013B7C 217C 0000 0000 0004        		move.l	#Map_Bomb,obMap(a0)
00013B84 317C 0400 0002             		move.w	#$400,obGfx(a0)
00013B8A 0028 0004 0001             		ori.b	#4,obRender(a0)
00013B90 317C 0180 0018             		move.w	#$180,obPriority(a0)
00013B96 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013B9C 1028 0028                  		move.b	obSubtype(a0),d0
00013BA0 6700                       		beq.s	loc_11A3C
00013BA2 1140 0024                  		move.b	d0,obRoutine(a0)
00013BA6 4E75                       		rts	
00013BA8                            ; ===========================================================================
00013BA8                            
00013BA8                            loc_11A3C:
00013BA8 117C 009A 0020             		move.b	#$9A,obColType(a0)
00013BAE 0868 0000 0022             		bchg	#0,obStatus(a0)
00013BB4                            
00013BB4                            Bom_Action:	; Routine 2
00013BB4 7000                       		moveq	#0,d0
00013BB6 1028 0025                  		move.b	ob2ndRout(a0),d0
00013BBA 323B 0000                  		move.w	@index(pc,d0.w),d1
00013BBE 4EBB 1000                  		jsr	@index(pc,d1.w)
00013BC2 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013BC8 6100 8A6A                  		bsr.w	AnimateSprite
00013BCC 6000 DA78                  		bra.w	RememberState
00013BD0                            ; ===========================================================================
00013BD0 0000                       @index:		dc.w @walk-@index
00013BD2 0000                       		dc.w @wait-@index
00013BD4 0000                       		dc.w @explode-@index
00013BD6                            ; ===========================================================================
00013BD6                            
00013BD6                            @walk:
00013BD6 6100 0000                  		bsr.w	@chksonic
00013BDA 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013BDE 6A00                       		bpl.s	@noflip		; if time remains, branch
00013BE0 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @wait
00013BE4 317C 05FF 0030             		move.w	#1535,bom_time(a0) ; set time delay to 25 seconds
00013BEA 317C 0010 0010             		move.w	#$10,obVelX(a0)
00013BF0 117C 0001 001C             		move.b	#1,obAnim(a0)	; use walking animation
00013BF6 0868 0000 0022             		bchg	#0,obStatus(a0)
00013BFC 6700                       		beq.s	@noflip
00013BFE 4468 0010                  		neg.w	obVelX(a0)	; change direction
00013C02                            
00013C02                            	@noflip:
00013C02 4E75                       		rts	
00013C04                            ; ===========================================================================
00013C04                            
00013C04                            @wait:
00013C04 6100 0000                  		bsr.w	@chksonic
00013C08 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013C0C 6B00                       		bmi.s	@stopwalking	; if time expires, branch
00013C0E 6100 B95A                  		bsr.w	SpeedToPos
00013C12 4E75                       		rts	
00013C14                            ; ===========================================================================
00013C14                            
00013C14                            	@stopwalking:
00013C14 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00013C18 317C 00B3 0030             		move.w	#179,bom_time(a0) ; set time delay to 3 seconds
00013C1E 4268 0010                  		clr.w	obVelX(a0)	; stop walking
00013C22 117C 0000 001C             		move.b	#0,obAnim(a0)	; use waiting animation
00013C28 4E75                       		rts	
00013C2A                            ; ===========================================================================
00013C2A                            
00013C2A                            @explode:
00013C2A 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013C2E 6A00                       		bpl.s	@noexplode	; if time remains, branch
00013C30 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0) ; change bomb into an explosion
00013C34 117C 0000 0024             		move.b	#0,obRoutine(a0)
00013C3A                            
00013C3A                            	@noexplode:
00013C3A 4E75                       		rts	
00013C3C                            ; ===========================================================================
00013C3C                            
00013C3C                            @chksonic:
00013C3C 3038 D008                  		move.w	(v_player+obX).w,d0
00013C40 9068 0008                  		sub.w	obX(a0),d0
00013C44 6400                       		bcc.s	@isleft
00013C46 4440                       		neg.w	d0
00013C48                            
00013C48                            	@isleft:
00013C48 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels?
00013C4C 6400                       		bcc.s	@outofrange	; if not, branch
00013C4E 3038 D00C                  		move.w	(v_player+obY).w,d0
00013C52 9068 000C                  		sub.w	obY(a0),d0
00013C56 6400                       		bcc.s	@isabove
00013C58 4440                       		neg.w	d0
00013C5A                            
00013C5A                            	@isabove:
00013C5A 0C40 0060                  		cmpi.w	#$60,d0
00013C5E 6400                       		bcc.s	@outofrange
00013C60 4A78 FE08                  		tst.w	(v_debuguse).w
00013C64 6600                       		bne.s	@outofrange
00013C66                            
00013C66 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
00013C6C 317C 008F 0030             		move.w	#143,bom_time(a0) ; set fuse time
00013C72 4268 0010                  		clr.w	obVelX(a0)
00013C76 117C 0002 001C             		move.b	#2,obAnim(a0)	; use activated animation
00013C7C 6100 BEB0                  		bsr.w	FindNextFreeObj
00013C80 6600                       		bne.s	@outofrange
00013C82 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load fuse object
00013C86 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013C8C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013C92 3368 000C 0034             		move.w	obY(a0),bom_origY(a1)
00013C98 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013C9E 137C 0004 0028             		move.b	#4,obSubtype(a1)
00013CA4 137C 0003 001C             		move.b	#3,obAnim(a1)
00013CAA 337C 0010 0012             		move.w	#$10,obVelY(a1)
00013CB0 0828 0001 0022             		btst	#1,obStatus(a0)	; is bomb upside-down?
00013CB6 6700                       		beq.s	@normal		; if not, branch
00013CB8 4469 0012                  		neg.w	obVelY(a1)	; reverse direction for fuse
00013CBC                            
00013CBC                            	@normal:
00013CBC 337C 008F 0030             		move.w	#143,bom_time(a1) ; set fuse time
00013CC2 2348 003C                  		move.l	a0,bom_parent(a1)
00013CC6                            
00013CC6                            @outofrange:
00013CC6 4E75                       		rts	
00013CC8                            ; ===========================================================================
00013CC8                            
00013CC8                            Bom_Display:	; Routine 4
00013CC8 6100                       		bsr.s	loc_11B70
00013CCA 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013CD0 6100 8962                  		bsr.w	AnimateSprite
00013CD4 6000 D970                  		bra.w	RememberState
00013CD8                            ; ===========================================================================
00013CD8                            
00013CD8                            loc_11B70:
00013CD8 5368 0030                  		subq.w	#1,bom_time(a0)
00013CDC 6B00                       		bmi.s	loc_11B7C
00013CDE 6100 B88A                  		bsr.w	SpeedToPos
00013CE2 4E75                       		rts	
00013CE4                            ; ===========================================================================
00013CE4                            
00013CE4                            loc_11B7C:
00013CE4 4268 0030                  		clr.w	bom_time(a0)
00013CE8 4228 0024                  		clr.b	obRoutine(a0)
00013CEC 3168 0034 000C             		move.w	bom_origY(a0),obY(a0)
00013CF2 7203                       		moveq	#3,d1
00013CF4 2248                       		movea.l	a0,a1
00013CF6 45F9 0000 0000             		lea	(Bom_ShrSpeed).l,a2 ; load shrapnel speed data
00013CFC 6000                       		bra.s	@makeshrapnel
00013CFE                            ; ===========================================================================
00013CFE                            
00013CFE                            	@loop:
00013CFE 6100 BE2E                  		bsr.w	FindNextFreeObj
00013D02 6600                       		bne.s	@fail
00013D04                            
00013D04                            @makeshrapnel:
00013D04 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load shrapnel	object
00013D08 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013D0E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013D14 137C 0006 0028             		move.b	#6,obSubtype(a1)
00013D1A 137C 0004 001C             		move.b	#4,obAnim(a1)
00013D20 335A 0010                  		move.w	(a2)+,obVelX(a1)
00013D24 335A 0012                  		move.w	(a2)+,obVelY(a1)
00013D28 137C 0098 0020             		move.b	#$98,obColType(a1)
00013D2E 08E9 0007 0001             		bset	#7,obRender(a1)
00013D34                            
00013D34                            	@fail:
00013D34 51C9 FFC8                  		dbf	d1,@loop	; repeat 3 more	times
00013D38                            
00013D38 117C 0006 0024             		move.b	#6,obRoutine(a0)
00013D3E                            
00013D3E                            Bom_End:	; Routine 6
00013D3E 6100 B82A                  		bsr.w	SpeedToPos
00013D42 0668 0018 0012             		addi.w	#$18,obVelY(a0)
00013D48 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013D4E 6100 88E4                  		bsr.w	AnimateSprite
00013D52 4A28 0001                  		tst.b	obRender(a0)
00013D56 6A00 B866                  		bpl.w	DeleteObject
00013D5A 6000 B822                  		bra.w	DisplaySprite
00013D5E                            ; ===========================================================================
00013D5E FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013D5E FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013D6E                            		include	"_anim\Bomb Enemy.asm"
00013D6E                            ; ---------------------------------------------------------------------------
00013D6E                            ; Animation script - Bomb enemy
00013D6E                            ; ---------------------------------------------------------------------------
00013D6E 0000                       Ani_Bomb:	dc.w @stand-Ani_Bomb
00013D70 0000                       		dc.w @walk-Ani_Bomb
00013D72 0000                       		dc.w @activated-Ani_Bomb
00013D74 0000                       		dc.w @fuse-Ani_Bomb
00013D76 0000                       		dc.w @shrapnel-Ani_Bomb
00013D78 1301 00FF                  @stand:		dc.b $13, 1, 0,	afEnd
00013D7C 1305 0403 02FF             @walk:		dc.b $13, 5, 4,	3, 2, afEnd
00013D82 1307 06FF                  @activated:	dc.b $13, 7, 6,	afEnd
00013D86 0308 09FF                  @fuse:		dc.b 3,	8, 9, afEnd
00013D8A 030A 0BFF                  @shrapnel:	dc.b 3,	$A, $B,	afEnd
00013D8E                            		even
00013D8E                            		even
00013D8E                            Map_Bomb:	include	"_maps\Bomb Enemy.asm"
00013D8E                            ; ---------------------------------------------------------------------------
00013D8E                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00013D8E                            ; ---------------------------------------------------------------------------
00013D8E                            Map_Bomb_internal:
00013D8E 0000                       		dc.w @stand1-Map_Bomb_internal
00013D90 0000                       		dc.w @stand2-Map_Bomb_internal
00013D92 0000                       		dc.w @walk1-Map_Bomb_internal
00013D94 0000                       		dc.w @walk2-Map_Bomb_internal
00013D96 0000                       		dc.w @walk3-Map_Bomb_internal
00013D98 0000                       		dc.w @walk4-Map_Bomb_internal
00013D9A 0000                       		dc.w @activate1-Map_Bomb_internal
00013D9C 0000                       		dc.w @activate2-Map_Bomb_internal
00013D9E 0000                       		dc.w @fuse1-Map_Bomb_internal
00013DA0 0000                       		dc.w @fuse2-Map_Bomb_internal
00013DA2 0000                       		dc.w @shrapnel1-Map_Bomb_internal
00013DA4 0000                       		dc.w @shrapnel2-Map_Bomb_internal
00013DA6 03                         @stand1:	dc.b 3
00013DA7 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb standing still
00013DAC 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013DB1 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013DB6 03                         @stand2:	dc.b 3
00013DB7 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013DBC 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013DC1 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013DC6 03                         @walk1:		dc.b 3
00013DC7 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4	; bomb walking
00013DCC 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00013DD1 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013DD6 03                         @walk2:		dc.b 3
00013DD7 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013DDC 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00013DE1 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013DE6 03                         @walk3:		dc.b 3
00013DE7 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00013DEC 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00013DF1 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013DF6 03                         @walk4:		dc.b 3
00013DF7 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013DFC 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00013E01 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013E06 02                         @activate1:	dc.b 2
00013E07 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb during detonation countdown
00013E0C 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013E11 02                         @activate2:	dc.b 2
00013E12 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013E17 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013E1C 01                         @fuse1:		dc.b 1
00013E1D E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC ; fuse	(just before it	explodes)
00013E22 01                         @fuse2:		dc.b 1
00013E23 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00013E28 01                         @shrapnel1:	dc.b 1
00013E29 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC ; shrapnel (after it exploded)
00013E2E 01                         @shrapnel2:	dc.b 1
00013E2F FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00013E34                            		even
00013E34                            		even
00013E34                            
00013E34                            		include	"_incObj\60 Orbinaut.asm"
00013E34                            ; ---------------------------------------------------------------------------
00013E34                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00013E34                            ; ---------------------------------------------------------------------------
00013E34                            
00013E34                            Orbinaut:
00013E34 7000                       		moveq	#0,d0
00013E36 1028 0024                  		move.b	obRoutine(a0),d0
00013E3A 323B 0000                  		move.w	Orb_Index(pc,d0.w),d1
00013E3E 4EFB 1000                  		jmp	Orb_Index(pc,d1.w)
00013E42                            ; ===========================================================================
00013E42 0000                       Orb_Index:	dc.w Orb_Main-Orb_Index
00013E44 0000                       		dc.w Orb_ChkSonic-Orb_Index
00013E46 0000                       		dc.w Orb_Display-Orb_Index
00013E48 0000                       		dc.w Orb_MoveOrb-Orb_Index
00013E4A 0000                       		dc.w Orb_ChkDel2-Orb_Index
00013E4C                            
00013E4C =0000003C                  orb_parent:	equ $3C		; address of parent object
00013E4C                            ; ===========================================================================
00013E4C                            
00013E4C                            Orb_Main:	; Routine 0
00013E4C 217C 0000 0000 0004        		move.l	#Map_Orb,obMap(a0)
00013E54 317C 0429 0002             		move.w	#$429,obGfx(a0)	; SBZ specific code
00013E5A 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00013E60 6700                       		beq.s	@isscrap
00013E62 317C 2429 0002             		move.w	#$2429,obGfx(a0) ; SLZ specific code
00013E68                            
00013E68                            	@isscrap:
00013E68 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00013E6E 6600                       		bne.s	@notlabyrinth
00013E70 317C 0467 0002             		move.w	#$467,obGfx(a0)	; LZ specific code
00013E76                            
00013E76                            	@notlabyrinth:
00013E76 0028 0004 0001             		ori.b	#4,obRender(a0)
00013E7C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013E82 117C 000B 0020             		move.b	#$B,obColType(a0)
00013E88 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013E8E 7400                       		moveq	#0,d2
00013E90 45E8 0037                  		lea	$37(a0),a2
00013E94 264A                       		movea.l	a2,a3
00013E96 524A                       		addq.w	#1,a2
00013E98 7203                       		moveq	#3,d1
00013E9A                            
00013E9A                            @makesatellites:
00013E9A 6100 BC92                  		bsr.w	FindNextFreeObj
00013E9E 6600                       		bne.s	@fail
00013EA0 5213                       		addq.b	#1,(a3)
00013EA2 3A09                       		move.w	a1,d5
00013EA4 0445 D000                  		subi.w	#$D000,d5
00013EA8 EC4D                       		lsr.w	#6,d5
00013EAA 0245 007F                  		andi.w	#$7F,d5
00013EAE 14C5                       		move.b	d5,(a2)+
00013EB0 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00013EB2 137C 0006 0024             		move.b	#6,obRoutine(a1) ; use Orb_MoveOrb routine
00013EB8 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00013EBE 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00013EC4 0029 0004 0001             		ori.b	#4,obRender(a1)
00013ECA 337C 0200 0018             		move.w	#$200,obPriority(a1)
00013ED0 137C 0008 0014             		move.b	#8,obActWid(a1)
00013ED6 137C 0003 001A             		move.b	#3,obFrame(a1)
00013EDC 137C 0098 0020             		move.b	#$98,obColType(a1)
00013EE2 1342 0026                  		move.b	d2,obAngle(a1)
00013EE6 0602 0040                  		addi.b	#$40,d2
00013EEA 2348 003C                  		move.l	a0,orb_parent(a1)
00013EEE 51C9 FFAA                  		dbf	d1,@makesatellites ; repeat sequence 3 more times
00013EF2                            
00013EF2                            	@fail:
00013EF2 7001                       		moveq	#1,d0
00013EF4 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left?
00013EFA 6700                       		beq.s	@noflip		; if not, branch
00013EFC 4440                       		neg.w	d0
00013EFE                            
00013EFE                            	@noflip:
00013EFE 1140 0036                  		move.b	d0,$36(a0)
00013F02 1168 0028 0024             		move.b	obSubtype(a0),obRoutine(a0) ; if type is 02, skip Orb_ChkSonic
00013F08 5428 0024                  		addq.b	#2,obRoutine(a0)
00013F0C 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move orbinaut to the left
00013F12 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left??
00013F18 6700                       		beq.s	@noflip2	; if not, branch
00013F1A 4468 0010                  		neg.w	obVelX(a0)	; move orbinaut	to the right
00013F1E                            
00013F1E                            	@noflip2:
00013F1E 4E75                       		rts	
00013F20                            ; ===========================================================================
00013F20                            
00013F20                            Orb_ChkSonic:	; Routine 2
00013F20 3038 D008                  		move.w	(v_player+obX).w,d0
00013F24 9068 0008                  		sub.w	obX(a0),d0	; is Sonic to the right of the orbinaut?
00013F28 6400                       		bcc.s	@isright	; if yes, branch
00013F2A 4440                       		neg.w	d0
00013F2C                            
00013F2C                            	@isright:
00013F2C 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00013F30 6400                       		bcc.s	@animate	; if not, branch
00013F32 3038 D00C                  		move.w	(v_player+obY).w,d0
00013F36 9068 000C                  		sub.w	obY(a0),d0	; is Sonic above the orbinaut?
00013F3A 6400                       		bcc.s	@isabove	; if yes, branch
00013F3C 4440                       		neg.w	d0
00013F3E                            
00013F3E                            	@isabove:
00013F3E 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00013F42 6400                       		bcc.s	@animate	; if not, branch
00013F44 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00013F48 6600                       		bne.s	@animate	; if yes, branch
00013F4A 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "angry" animation
00013F50                            
00013F50                            @animate:
00013F50 43F9 0000 0000             		lea	(Ani_Orb).l,a1
00013F56 6100 86DC                  		bsr.w	AnimateSprite
00013F5A 6000 0000                  		bra.w	Orb_ChkDel
00013F5E                            ; ===========================================================================
00013F5E                            
00013F5E                            Orb_Display:	; Routine 4
00013F5E 6100 B60A                  		bsr.w	SpeedToPos
00013F62                            
00013F62                            Orb_ChkDel:
00013F80 6000 B5FC                  		bra.w	DisplaySprite
00013F84                            
00013F84                            @chkgone:
00013F84 45F8 FC00                  		lea	(v_objstate).w,a2
00013F88 7000                       		moveq	#0,d0
00013F8A 1028 0023                  		move.b	obRespawnNo(a0),d0
00013F8E 6700                       		beq.s	loc_11E34
00013F90 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00013F96                            
00013F96                            loc_11E34:
00013F96 45E8 0037                  		lea	$37(a0),a2
00013F9A 7400                       		moveq	#0,d2
00013F9C 141A                       		move.b	(a2)+,d2
00013F9E 5342                       		subq.w	#1,d2
00013FA0 6500                       		bcs.s	Orb_Delete
00013FA2                            
00013FA2                            loc_11E40:
00013FA2 7000                       		moveq	#0,d0
00013FA4 101A                       		move.b	(a2)+,d0
00013FA6 ED48                       		lsl.w	#6,d0
00013FA8 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00013FAE 2240                       		movea.l	d0,a1
00013FB0 6100 B60E                  		bsr.w	DeleteChild
00013FB4 51CA FFEC                  		dbf	d2,loc_11E40
00013FB8                            
00013FB8                            Orb_Delete:
00013FB8 6000 B604                  		bra.w	DeleteObject
00013FBC                            ; ===========================================================================
00013FBC                            
00013FBC                            Orb_MoveOrb:	; Routine 6
00013FBC 2268 003C                  		movea.l	orb_parent(a0),a1
00013FC0 0C11 0060                  		cmpi.b	#id_Orbinaut,0(a1) ; does parent object still exist?
00013FC4 6600 B5F8                  		bne.w	DeleteObject	; if not, delete
00013FC8 0C29 0002 001A             		cmpi.b	#2,obFrame(a1)	; is orbinaut angry?
00013FCE 6600                       		bne.s	@circle		; if not, branch
00013FD0 0C28 0040 0026             		cmpi.b	#$40,obAngle(a0) ; is spikeorb directly under the orbinaut?
00013FD6 6600                       		bne.s	@circle		; if not, branch
00013FD8 5428 0024                  		addq.b	#2,obRoutine(a0)
00013FDC 5329 0037                  		subq.b	#1,$37(a1)
00013FE0 6600                       		bne.s	@fire
00013FE2 5429 0024                  		addq.b	#2,obRoutine(a1)
00013FE6                            
00013FE6                            	@fire:
00013FE6 317C FE00 0010             		move.w	#-$200,obVelX(a0) ; move orb to the left (quickly)
00013FEC 0829 0000 0022             		btst	#0,obStatus(a1)
00013FF2 6700                       		beq.s	@noflip
00013FF4 4468 0010                  		neg.w	obVelX(a0)
00013FF8                            
00013FF8                            	@noflip:
00013FF8 6000 B584                  		bra.w	DisplaySprite
00013FFC                            ; ===========================================================================
00013FFC                            
00013FFC                            @circle:
00013FFC 1028 0026                  		move.b	obAngle(a0),d0
00014000 4EB9 0000 3CCA             		jsr	(CalcSine).l
00014006 E841                       		asr.w	#4,d1
00014008 D269 0008                  		add.w	obX(a1),d1
0001400C 3141 0008                  		move.w	d1,obX(a0)
00014010 E840                       		asr.w	#4,d0
00014012 D069 000C                  		add.w	obY(a1),d0
00014016 3140 000C                  		move.w	d0,obY(a0)
0001401A 1029 0036                  		move.b	$36(a1),d0
0001401E D128 0026                  		add.b	d0,obAngle(a0)
00014022 6000 B55A                  		bra.w	DisplaySprite
00014026                            ; ===========================================================================
00014026                            
00014026                            Orb_ChkDel2:	; Routine 8
00014026 6100 B542                  		bsr.w	SpeedToPos
0001402A 4A28 0001                  		tst.b	obRender(a0)
0001402E 6A00 B58E                  		bpl.w	DeleteObject
00014032 6000 B54A                  		bra.w	DisplaySprite
00014032 6000 B54A                  		bra.w	DisplaySprite
00014036                            		include	"_anim\Orbinaut.asm"
00014036                            ; ---------------------------------------------------------------------------
00014036                            ; Animation script - Orbinaut enemy
00014036                            ; ---------------------------------------------------------------------------
00014036 0000                       Ani_Orb:	dc.w @normal-Ani_Orb
00014038 0000                       		dc.w @angers-Ani_Orb
0001403A 0F00 FF                    @normal:	dc.b $F, 0, afEnd
0001403E 00                         		even
0001403E 0F01 02FE 01               @angers:	dc.b $F, 1, 2, afBack, 1
00014044 00                         		even
00014044 00                         		even
00014044                            Map_Orb:	include	"_maps\Orbinaut.asm"
00014044                            ; ---------------------------------------------------------------------------
00014044                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00014044                            ; ---------------------------------------------------------------------------
00014044                            Map_Orb_internal:
00014044 0000                       		dc.w @normal-Map_Orb_internal
00014046 0000                       		dc.w @medium-Map_Orb_internal
00014048 0000                       		dc.w @angry-Map_Orb_internal
0001404A 0000                       		dc.w @spikeball-Map_Orb_internal
0001404C 01                         @normal:	dc.b 1
0001404D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00014052 01                         @medium:	dc.b 1
00014053 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00014058 01                         @angry:		dc.b 1
00014059 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001405E 01                         @spikeball:	dc.b 1
0001405F F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00014064                            		even
00014064                            		even
00014064                            
00014064                            		include	"_incObj\16 Harpoon.asm"
00014064                            ; ---------------------------------------------------------------------------
00014064                            ; Object 16 - harpoon (LZ)
00014064                            ; ---------------------------------------------------------------------------
00014064                            
00014064                            Harpoon:
00014064 7000                       		moveq	#0,d0
00014066 1028 0024                  		move.b	obRoutine(a0),d0
0001406A 323B 0000                  		move.w	Harp_Index(pc,d0.w),d1
0001406E 4EFB 1000                  		jmp	Harp_Index(pc,d1.w)
00014072                            ; ===========================================================================
00014072 0000                       Harp_Index:	dc.w Harp_Main-Harp_Index
00014074 0000                       		dc.w Harp_Move-Harp_Index
00014076 0000                       		dc.w Harp_Wait-Harp_Index
00014078                            
00014078 =00000030                  harp_time:	equ $30		; time between stabbing/retracting
00014078                            ; ===========================================================================
00014078                            
00014078                            Harp_Main:	; Routine 0
00014078 5428 0024                  		addq.b	#2,obRoutine(a0)
0001407C 217C 0000 0000 0004        		move.l	#Map_Harp,obMap(a0)
00014084 317C 03CC 0002             		move.w	#$3CC,obGfx(a0)
0001408A 0028 0004 0001             		ori.b	#4,obRender(a0)
00014090 317C 0200 0018             		move.w	#$200,obPriority(a0)
00014096 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0) ; get type (vert/horiz)
0001409C 117C 0014 0014             		move.b	#$14,obActWid(a0)
000140A2 317C 003C 0030             		move.w	#60,harp_time(a0) ; set time to 1 second
000140A8                            
000140A8                            Harp_Move:	; Routine 2
000140A8 43F9 0000 0000             		lea	(Ani_Harp).l,a1
000140AE 6100 8584                  		bsr.w	AnimateSprite
000140B2 7000                       		moveq	#0,d0
000140B4 1028 001A                  		move.b	obFrame(a0),d0	; get frame number
000140B8 117B 0000 0020             		move.b	@types(pc,d0.w),obColType(a0) ; get collision type
000140BE 6000 D586                  		bra.w	RememberState
000140C2                            
000140C2                            	@types:
000140C2 9B9C 9D9E 9FA0             		dc.b $9B, $9C, $9D, $9E, $9F, $A0
000140C8                            		even
000140C8                            
000140C8                            Harp_Wait:	; Routine 4
000140C8 5368 0030                  		subq.w	#1,harp_time(a0) ; decrement timer
000140CC 6A00                       		bpl.s	@chkdel		; branch if time remains
000140CE 317C 003C 0030             		move.w	#60,harp_time(a0) ; reset timer
000140D4 5528 0024                  		subq.b	#2,obRoutine(a0) ; run "Harp_Move" subroutine
000140D8 0868 0000 001C             		bchg	#0,obAnim(a0)	; reverse animation
000140DE                            
000140DE                            	@chkdel:
000140DE 6000 D566                  		bra.w	RememberState
000140DE 6000 D566                  		bra.w	RememberState
000140E2                            		include	"_anim\Harpoon.asm"
000140E2                            ; ---------------------------------------------------------------------------
000140E2                            ; Animation script - harpoon (LZ)
000140E2                            ; ---------------------------------------------------------------------------
000140E2 0000                       Ani_Harp:	dc.w @h_extending-Ani_Harp
000140E4 0000                       		dc.w @h_retracting-Ani_Harp
000140E6 0000                       		dc.w @v_extending-Ani_Harp
000140E8 0000                       		dc.w @v_retracting-Ani_Harp
000140EA 0301 02FC                  @h_extending:	dc.b 3,	1, 2, afRoutine
000140EE 0301 00FC                  @h_retracting:	dc.b 3,	1, 0, afRoutine
000140F2 0304 05FC                  @v_extending:	dc.b 3,	4, 5, afRoutine
000140F6 0304 03FC                  @v_retracting:	dc.b 3,	4, 3, afRoutine
000140FA                            		even
000140FA                            		even
000140FA                            Map_Harp:	include	"_maps\Harpoon.asm"
000140FA                            ; --------------------------------------------------------------------------------
000140FA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000140FA                            ; --------------------------------------------------------------------------------
000140FA                            
000140FA                            SME_JPFHb:	
000140FA 0000 0000                  		dc.w SME_JPFHb_C-SME_JPFHb, SME_JPFHb_12-SME_JPFHb	
000140FE 0000 0000                  		dc.w SME_JPFHb_18-SME_JPFHb, SME_JPFHb_23-SME_JPFHb	
00014102 0000 0000                  		dc.w SME_JPFHb_29-SME_JPFHb, SME_JPFHb_2F-SME_JPFHb	
00014106 01                         SME_JPFHb_C:	dc.b 1	
00014107 FC04 2000 F8               		dc.b $FC, 4, $20, 0, $F8	
0001410C 01                         SME_JPFHb_12:	dc.b 1	
0001410D FC0C 2002 F8               		dc.b $FC, $C, $20, 2, $F8	
00014112 02                         SME_JPFHb_18:	dc.b 2	
00014113 FC08 2006 F8               		dc.b $FC, 8, $20, 6, $F8	
00014118 FC08 2003 10               		dc.b $FC, 8, $20, 3, $10	
0001411D 01                         SME_JPFHb_23:	dc.b 1	
0001411E F801 2009 FC               		dc.b $F8, 1, $20, 9, $FC	
00014123 01                         SME_JPFHb_29:	dc.b 1	
00014124 E803 200B FC               		dc.b $E8, 3, $20, $B, $FC	
00014129 02                         SME_JPFHb_2F:	dc.b 2	
0001412A D802 200B FC               		dc.b $D8, 2, $20, $B, $FC	
0001412F F002 200F FC               		dc.b $F0, 2, $20, $F, $FC	
00014134                            		even
00014134                            		even
00014134                            		include	"_incObj\61 LZ Blocks.asm"
00014134                            ; ---------------------------------------------------------------------------
00014134                            ; Object 61 - blocks (LZ)
00014134                            ; ---------------------------------------------------------------------------
00014134                            
00014134                            LabyrinthBlock:
00014134 7000                       		moveq	#0,d0
00014136 1028 0024                  		move.b	obRoutine(a0),d0
0001413A 323B 0000                  		move.w	LBlk_Index(pc,d0.w),d1
0001413E 4EFB 1000                  		jmp	LBlk_Index(pc,d1.w)
00014142                            ; ===========================================================================
00014142 0000                       LBlk_Index:	dc.w LBlk_Main-LBlk_Index
00014144 0000                       		dc.w LBlk_Action-LBlk_Index
00014146                            
00014146 1010                       LBlk_Var:	dc.b $10, $10		; width, height
00014148 200C                       		dc.b $20, $C
0001414A 1010                       		dc.b $10, $10
0001414C 1010                       		dc.b $10, $10
0001414E                            
0001414E =00000016                  lblk_height:	equ $16		; block height
0001414E =00000034                  lblk_origX:	equ $34		; original x-axis position
0001414E =00000030                  lblk_origY:	equ $30		; original y-axis position
0001414E =00000036                  lblk_time:	equ $36		; time delay for block movement
0001414E =00000038                  lblk_untouched:	equ $38		; flag block as untouched
0001414E                            ; ===========================================================================
0001414E                            
0001414E                            LBlk_Main:	; Routine 0
0001414E 5428 0024                  		addq.b	#2,obRoutine(a0)
00014152 217C 0000 0000 0004        		move.l	#Map_LBlock,obMap(a0)
0001415A 317C 43E6 0002             		move.w	#$43E6,obGfx(a0)
00014160 117C 0004 0001             		move.b	#4,obRender(a0)
00014166 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001416C 7000                       		moveq	#0,d0
0001416E 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
00014172 E648                       		lsr.w	#3,d0		; read only the 1st digit
00014174 0240 000E                  		andi.w	#$E,d0
00014178 45FB 00CC                  		lea	LBlk_Var(pc,d0.w),a2
0001417C 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
00014180 1152 0016                  		move.b	(a2),lblk_height(a0) ; set height
00014184 E248                       		lsr.w	#1,d0
00014186 1140 001A                  		move.b	d0,obFrame(a0)
0001418A 3168 0008 0034             		move.w	obX(a0),lblk_origX(a0)
00014190 3168 000C 0030             		move.w	obY(a0),lblk_origY(a0)
00014196 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
0001419A 0200 000F                  		andi.b	#$F,d0		; read only the 2nd digit
0001419E 6700                       		beq.s	LBlk_Action	; branch if 0
000141A0 0C00 0007                  		cmpi.b	#7,d0
000141A4 6700                       		beq.s	LBlk_Action	; branch if 7
000141A6 117C 0001 0038             		move.b	#1,lblk_untouched(a0)
000141AC                            
000141AC                            LBlk_Action:	; Routine 2
000141AC 3F28 0008                  		move.w	obX(a0),-(sp)
000141B0 7000                       		moveq	#0,d0
000141B2 1028 0028                  		move.b	obSubtype(a0),d0
000141B6 0240 000F                  		andi.w	#$F,d0
000141BA D040                       		add.w	d0,d0
000141BC 323B 0000                  		move.w	@index(pc,d0.w),d1
000141C0 4EBB 1000                  		jsr	@index(pc,d1.w)
000141C4 381F                       		move.w	(sp)+,d4
000141C6 4A28 0001                  		tst.b	obRender(a0)
000141CA 6A00                       		bpl.s	@chkdel
000141CC 7200                       		moveq	#0,d1
000141CE 1228 0014                  		move.b	obActWid(a0),d1
000141D2 0641 000B                  		addi.w	#$B,d1
000141D6 7400                       		moveq	#0,d2
000141D8 1428 0016                  		move.b	lblk_height(a0),d2
000141DC 3602                       		move.w	d2,d3
000141DE 5243                       		addq.w	#1,d3
000141E0 6100 D8FC                  		bsr.w	SolidObject
000141E4 1144 003F                  		move.b	d4,$3F(a0)
000141E8 6100 0000                  		bsr.w	loc_12180
000141EC                            
000141EC                            @chkdel:
0001420A 6000 B372                  		bra.w	DisplaySprite
0001420E                            ; ===========================================================================
0001420E 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00014212 0000 0000                  		dc.w @type02-@index, @type03-@index
00014216 0000 0000                  		dc.w @type04-@index, @type05-@index
0001421A 0000 0000                  		dc.w @type06-@index, @type07-@index
0001421E                            ; ===========================================================================
0001421E                            
0001421E                            @type00:
0001421E 4E75                       		rts	
00014220                            ; ===========================================================================
00014220                            
00014220                            @type01:
00014220                            @type03:
00014220 4A68 0036                  		tst.w	lblk_time(a0)	; does time remain?
00014224 6600                       		bne.s	@wait01		; if yes, branch
00014226 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the object?
0001422C 6700                       		beq.s	@donothing01	; if not, branch
0001422E 317C 001E 0036             		move.w	#30,lblk_time(a0) ; wait for half second
00014234                            
00014234                            	@donothing01:
00014234 4E75                       		rts	
00014236                            ; ===========================================================================
00014236                            
00014236                            	@wait01:
00014236 5368 0036                  		subq.w	#1,lblk_time(a0); decrement waiting time
0001423A 66F8                       		bne.s	@donothing01	; if time remains, branch
0001423C 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type02 or @type04
00014240 4228 0038                  		clr.b	lblk_untouched(a0) ; flag block as touched
00014244 4E75                       		rts	
00014246                            ; ===========================================================================
00014246                            
00014246                            @type02:
00014246                            @type06:
00014246 6100 B322                  		bsr.w	SpeedToPos
0001424A 5068 0012                  		addq.w	#8,obVelY(a0)	; make block fall
0001424E 6100 0000                  		bsr.w	ObjFloorDist
00014252 4A41                       		tst.w	d1		; has block hit the floor?
00014254 6A00 0000                  		bpl.w	@nofloor02	; if not, branch
00014258 5241                       		addq.w	#1,d1
0001425A D368 000C                  		add.w	d1,obY(a0)
0001425E 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the floor
00014262 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
00014266                            
00014266                            	@nofloor02:
00014266 4E75                       		rts	
00014268                            ; ===========================================================================
00014268                            
00014268                            @type04:
00014268 6100 B300                  		bsr.w	SpeedToPos
0001426C 5168 0012                  		subq.w	#8,obVelY(a0)	; make block rise
00014270 6100 0000                  		bsr.w	ObjHitCeiling
00014274 4A41                       		tst.w	d1		; has block hit the ceiling?
00014276 6A00 0000                  		bpl.w	@noceiling04	; if not, branch
0001427A 9368 000C                  		sub.w	d1,obY(a0)
0001427E 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the ceiling
00014282 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
00014286                            
00014286                            	@noceiling04:
00014286 4E75                       		rts	
00014288                            ; ===========================================================================
00014288                            
00014288                            @type05:
00014288 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	block?
0001428E 6600                       		bne.s	@notouch05	; if not, branch
00014290 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type06
00014294 4228 0038                  		clr.b	lblk_untouched(a0)
00014298                            
00014298                            	@notouch05:
00014298 4E75                       		rts	
0001429A                            ; ===========================================================================
0001429A                            
0001429A                            @type07:
0001429A 3038 F646                  		move.w	(v_waterpos1).w,d0
0001429E 9068 000C                  		sub.w	obY(a0),d0	; is block level with water?
000142A2 6700                       		beq.s	@stop07		; if yes, branch
000142A4 6400                       		bcc.s	@fall07		; branch if block is above water
000142A6 0C40 FFFE                  		cmpi.w	#-2,d0
000142AA 6C00                       		bge.s	@loc_1214E
000142AC 70FE                       		moveq	#-2,d0
000142AE                            
000142AE                            	@loc_1214E:
000142AE D168 000C                  		add.w	d0,obY(a0)	; make the block rise with water level
000142B2 6100 0000                  		bsr.w	ObjHitCeiling
000142B6 4A41                       		tst.w	d1		; has block hit the ceiling?
000142B8 6A00 0000                  		bpl.w	@noceiling07	; if not, branch
000142BC 9368 000C                  		sub.w	d1,obY(a0)	; stop block
000142C0                            
000142C0                            	@noceiling07:
000142C0 4E75                       		rts	
000142C2                            ; ===========================================================================
000142C2                            
000142C2                            @fall07:
000142C2 0C40 0002                  		cmpi.w	#2,d0
000142C6 6F00                       		ble.s	@loc_1216A
000142C8 7002                       		moveq	#2,d0
000142CA                            
000142CA                            	@loc_1216A:
000142CA D168 000C                  		add.w	d0,obY(a0)	; make the block sink with water level
000142CE 6100 0000                  		bsr.w	ObjFloorDist
000142D2 4A41                       		tst.w	d1
000142D4 6A00 0000                  		bpl.w	@stop07
000142D8 5241                       		addq.w	#1,d1
000142DA D368 000C                  		add.w	d1,obY(a0)
000142DE                            
000142DE                            	@stop07:
000142DE 4E75                       		rts	
000142E0                            ; ===========================================================================
000142E0                            
000142E0                            loc_12180:
000142E0 4A28 0038                  		tst.b	lblk_untouched(a0) ; has block been stood on or touched?
000142E4 6700                       		beq.s	locret_121C0	; if yes, branch
000142E6 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on it now?
000142EC 6600                       		bne.s	loc_1219A	; if yes, branch
000142EE 4A28 003E                  		tst.b	$3E(a0)
000142F2 6700                       		beq.s	locret_121C0
000142F4 5928 003E                  		subq.b	#4,$3E(a0)
000142F8 6000                       		bra.s	loc_121A6
000142FA                            ; ===========================================================================
000142FA                            
000142FA                            loc_1219A:
000142FA 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00014300 6700                       		beq.s	locret_121C0
00014302 5828 003E                  		addq.b	#4,$3E(a0)
00014306                            
00014306                            loc_121A6:
00014306 1028 003E                  		move.b	$3E(a0),d0
0001430A 4EB9 0000 3CCA             		jsr	(CalcSine).l
00014310 323C 0400                  		move.w	#$400,d1
00014314 C1C1                       		muls.w	d1,d0
00014316 4840                       		swap	d0
00014318 D068 0030                  		add.w	lblk_origY(a0),d0
0001431C 3140 000C                  		move.w	d0,obY(a0)
00014320                            
00014320                            locret_121C0:
00014320 4E75                       		rts	
00014320 4E75                       		rts	
00014322                            Map_LBlock:	include	"_maps\LZ Blocks.asm"
00014322                            Map_6865:
00014322 0000                       Map_6865_0: 	dc.w Map_6865_8-Map_6865
00014324 0000                       Map_6865_2: 	dc.w Map_6865_E-Map_6865
00014326 0000                       Map_6865_4: 	dc.w Map_6865_19-Map_6865
00014328 0000                       Map_6865_6: 	dc.w Map_6865_1F-Map_6865
0001432A 01                         Map_6865_8: 	dc.b $1
0001432B F00F 2000 F0               	dc.b $F0, $F, $20, $0, $F0
00014330 02                         Map_6865_E: 	dc.b $2
00014331 F40E 0069 E0               	dc.b $F4, $E, $0, $69, $E0
00014336 F40E 0075 00               	dc.b $F4, $E, $0, $75, $0
0001433B 01                         Map_6865_19: 	dc.b $1
0001433C F00F 011A F0               	dc.b $F0, $F, $1, $1A, $F0
00014341 01                         Map_6865_1F: 	dc.b $1
00014342 F00F FDFA F0               	dc.b $F0, $F, $FD, $FA, $F0
00014348 00                         	even
00014348 00                         	even
00014348                            		include	"_incObj\62 Gargoyle.asm"
00014348                            ; ---------------------------------------------------------------------------
00014348                            ; Object 62 - gargoyle head (LZ)
00014348                            ; ---------------------------------------------------------------------------
00014348                            
00014348                            Gargoyle:
00014348 7000                       		moveq	#0,d0
0001434A 1028 0024                  		move.b	obRoutine(a0),d0
0001434E 323B 0000                  		move.w	Gar_Index(pc,d0.w),d1
00014352 4EBB 1000                  		jsr	Gar_Index(pc,d1.w)
00014356 6000 D2EE                  		bra.w	RememberState
0001435A                            ; ===========================================================================
0001435A 0000                       Gar_Index:	dc.w Gar_Main-Gar_Index
0001435C 0000                       		dc.w Gar_MakeFire-Gar_Index
0001435E 0000                       		dc.w Gar_FireBall-Gar_Index
00014360 0000                       		dc.w Gar_AniFire-Gar_Index
00014362                            
00014362 1E3C 5A78 96B4 D2F0        Gar_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
0001436A                            ; ===========================================================================
0001436A                            
0001436A                            Gar_Main:	; Routine 0
0001436A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001436E 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
00014376 317C 42E9 0002             		move.w	#$42E9,obGfx(a0)
0001437C 0028 0004 0001             		ori.b	#4,obRender(a0)
00014382 317C 0180 0018             		move.w	#$180,obPriority(a0)
00014388 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001438E 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014392 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00014396 117B 00CA 001F             		move.b	Gar_SpitRate(pc,d0.w),obDelayAni(a0) ; set fireball spit rate
0001439C 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
000143A2 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
000143A8                            
000143A8                            Gar_MakeFire:	; Routine 2
000143A8 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement timer
000143AC 6600                       		bne.s	@nofire		; if time remains, branch
000143AE                            
000143AE 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset timer
000143B4 6100 B556                  		bsr.w	ChkObjectVisible
000143B8 6600                       		bne.s	@nofire
000143BA 6100 B75C                  		bsr.w	FindFreeObj
000143BE 6600                       		bne.s	@nofire
000143C0 12BC 0062                  		move.b	#id_Gargoyle,0(a1) ; load fireball object
000143C4 5829 0024                  		addq.b	#4,obRoutine(a1) ; use Gar_FireBall routine
000143C8 3368 0008 0008             		move.w	obX(a0),obX(a1)
000143CE 3368 000C 000C             		move.w	obY(a0),obY(a1)
000143D4 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
000143DA 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
000143E0                            
000143E0                            	@nofire:
000143E0 4E75                       		rts	
000143E2                            ; ===========================================================================
000143E2                            
000143E2                            Gar_FireBall:	; Routine 4
000143E2 5428 0024                  		addq.b	#2,obRoutine(a0)
000143E6 117C 0008 0016             		move.b	#8,obHeight(a0)
000143EC 117C 0008 0017             		move.b	#8,obWidth(a0)
000143F2 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
000143FA 317C 02E9 0002             		move.w	#$2E9,obGfx(a0)
00014400 0028 0004 0001             		ori.b	#4,obRender(a0)
00014406 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001440C 117C 0098 0020             		move.b	#$98,obColType(a0)
00014412 117C 0008 0014             		move.b	#8,obActWid(a0)
00014418 117C 0002 001A             		move.b	#2,obFrame(a0)
0001441E 5068 000C                  		addq.w	#8,obY(a0)
00014422 317C 0200 0010             		move.w	#$200,obVelX(a0)
00014428 0828 0000 0022             		btst	#0,obStatus(a0)	; is gargoyle facing left?
0001442E 6600                       		bne.s	@noflip		; if not, branch
00014430 4468 0010                  		neg.w	obVelX(a0)
00014434                            
00014434                            	@noflip:
0001443E                            
0001443E                            Gar_AniFire:	; Routine 6
0001443E 1038 FE05                  		move.b	(v_framebyte).w,d0
00014442 0200 0007                  		andi.b	#7,d0
00014446 6600                       		bne.s	@nochg
00014448 0868 0000 001A             		bchg	#0,obFrame(a0)	; change every 8 frames
0001444E                            
0001444E                            	@nochg:
0001444E 6100 B11A                  		bsr.w	SpeedToPos
00014452 0828 0000 0022             		btst	#0,obStatus(a0) ; is fireball moving left?
00014458 6600                       		bne.s	@isright	; if not, branch
0001445A 76F8                       		moveq	#-8,d3
0001445C 6100 0000                  		bsr.w	ObjHitWallLeft
00014460 4A41                       		tst.w	d1
00014462 6B00 B15A                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00014466 4E75                       		rts	
00014468                            
00014468                            	@isright:
00014468 7608                       		moveq	#8,d3
0001446A 6100 0000                  		bsr.w	ObjHitWallRight
0001446E 4A41                       		tst.w	d1
00014470 6B00 B14C                  		bmi.w	DeleteObject
00014474 4E75                       		rts	
00014474 4E75                       		rts	
00014476                            Map_Gar:	include	"_maps\Gargoyle.asm"
00014476                            ; ---------------------------------------------------------------------------
00014476                            ; Sprite mappings - gargoyle head (LZ)
00014476                            ; ---------------------------------------------------------------------------
00014476                            Map_Gar_internal:
00014476 0000                       		dc.w @head-Map_Gar_internal
00014478 0000                       		dc.w @head-Map_Gar_internal
0001447A 0000                       		dc.w @fireball1-Map_Gar_internal
0001447C 0000                       		dc.w @fireball2-Map_Gar_internal
0001447E 03                         @head:		dc.b 3
0001447F F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00014484 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00014489 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
0001448E 01                         @fireball1:	dc.b 1
0001448F FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00014494 01                         @fireball2:	dc.b 1
00014495 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
0001449A                            		even
0001449A                            		even
0001449A                            		include	"_incObj\63 LZ Conveyor.asm"
0001449A                            ; ---------------------------------------------------------------------------
0001449A                            ; Object 63 - platforms	on a conveyor belt (LZ)
0001449A                            ; ---------------------------------------------------------------------------
0001449A                            
0001449A                            LabyrinthConvey:
0001449A 7000                       		moveq	#0,d0
0001449C 1028 0024                  		move.b	obRoutine(a0),d0
000144A0 323B 0000                  		move.w	LCon_Index(pc,d0.w),d1
000144A4 4EBB 1000                  		jsr	LCon_Index(pc,d1.w)
000144C4                            
000144C4                            LCon_Display:
000144C4 6000 B0B8                  		bra.w	DisplaySprite
000144C8                            ; ===========================================================================
000144C8                            
000144C8                            loc_1236A:
000144C8 0C38 0002 FE11             		cmpi.b	#2,(v_act).w
000144CE 6600                       		bne.s	loc_12378
000144D0 0C40 FF80                  		cmpi.w	#-$80,d0
000144D4 64EE                       		bcc.s	LCon_Display
000144D6                            
000144D6                            loc_12378:
000144D6 1028 002F                  		move.b	$2F(a0),d0
000144DA 6A00 B0E2                  		bpl.w	DeleteObject
000144DE 0240 007F                  		andi.w	#$7F,d0
000144E2 45F8 F7C1                  		lea	(v_obj63).w,a2
000144E6 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000144EC 6000 B0D0                  		bra.w	DeleteObject
000144F0                            ; ===========================================================================
000144F0 0000                       LCon_Index:	dc.w LCon_Main-LCon_Index
000144F2 0000                       		dc.w loc_124B2-LCon_Index
000144F4 0000                       		dc.w loc_124C2-LCon_Index
000144F6 0000                       		dc.w loc_124DE-LCon_Index
000144F8                            ; ===========================================================================
000144F8                            
000144F8                            LCon_Main:	; Routine 0
000144F8 1028 0028                  		move.b	obSubtype(a0),d0
000144FC 6B00 0000                  		bmi.w	loc_12460
00014500 5428 0024                  		addq.b	#2,obRoutine(a0)
00014504 217C 0000 0000 0004        		move.l	#Map_LConv,obMap(a0)
0001450C 317C 43F6 0002             		move.w	#$43F6,obGfx(a0)
00014512 0028 0004 0001             		ori.b	#4,obRender(a0)
00014518 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001451E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00014524 0C28 007F 0028             		cmpi.b	#$7F,obSubtype(a0)
0001452A 6600                       		bne.s	loc_123E2
0001452C 5828 0024                  		addq.b	#4,obRoutine(a0)
00014530 317C 03F6 0002             		move.w	#$3F6,obGfx(a0)
00014536 317C 0080 0018             		move.w	#$80,obPriority(a0)
0001453C 6000 0000                  		bra.w	loc_124DE
00014540                            ; ===========================================================================
00014540                            
00014540                            loc_123E2:
00014540 117C 0004 001A             		move.b	#4,obFrame(a0)
00014546 7000                       		moveq	#0,d0
00014548 1028 0028                  		move.b	obSubtype(a0),d0
0001454C 3200                       		move.w	d0,d1
0001454E E648                       		lsr.w	#3,d0
00014550 0240 001E                  		andi.w	#$1E,d0
00014554 45FA 0000                  		lea	LCon_Data(pc),a2
00014558 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001455C 315A 0038                  		move.w	(a2)+,$38(a0)
00014560 315A 0030                  		move.w	(a2)+,$30(a0)
00014564 214A 003C                  		move.l	a2,$3C(a0)
00014568 0241 000F                  		andi.w	#$F,d1
0001456C E549                       		lsl.w	#2,d1
0001456E 1141 0038                  		move.b	d1,$38(a0)
00014572 117C 0004 003A             		move.b	#4,$3A(a0)
00014578 4A38 F7C0                  		tst.b	(f_conveyrev).w
0001457C 6700                       		beq.s	loc_1244C
0001457E 117C 0001 003B             		move.b	#1,$3B(a0)
00014584 4428 003A                  		neg.b	$3A(a0)
00014588 7200                       		moveq	#0,d1
0001458A 1228 0038                  		move.b	$38(a0),d1
0001458E D228 003A                  		add.b	$3A(a0),d1
00014592 B228 0039                  		cmp.b	$39(a0),d1
00014596 6500                       		bcs.s	loc_12448
00014598 1001                       		move.b	d1,d0
0001459A 7200                       		moveq	#0,d1
0001459C 4A00                       		tst.b	d0
0001459E 6A00                       		bpl.s	loc_12448
000145A0 1228 0039                  		move.b	$39(a0),d1
000145A4 5901                       		subq.b	#4,d1
000145A6                            
000145A6                            loc_12448:
000145A6 1141 0038                  		move.b	d1,$38(a0)
000145AA                            
000145AA                            loc_1244C:
000145AA 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000145B0 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000145B6 6100 0000                  		bsr.w	LCon_ChangeDir
000145BA 6000 0000                  		bra.w	loc_124B2
000145BE                            ; ===========================================================================
000145BE                            
000145BE                            loc_12460:
000145BE 1140 002F                  		move.b	d0,$2F(a0)
000145C2 0240 007F                  		andi.w	#$7F,d0
000145C6 45F8 F7C1                  		lea	(v_obj63).w,a2
000145CA 08F2 0000 0000             		bset	#0,(a2,d0.w)
000145D0 6600 AFEC                  		bne.w	DeleteObject
000145D4 D040                       		add.w	d0,d0
000145D6 0240 001E                  		andi.w	#$1E,d0
000145DA 0640 0000                  		addi.w	#ObjPosLZPlatform_Index-ObjPos_Index,d0
000145DE 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000145E4 D4F2 0000                  		adda.w	(a2,d0.w),a2
000145E8 321A                       		move.w	(a2)+,d1
000145EA 2248                       		movea.l	a0,a1
000145EC 6000                       		bra.s	LCon_MakePtfms
000145EE                            ; ===========================================================================
000145EE                            
000145EE                            LCon_Loop:
000145EE 6100 B528                  		bsr.w	FindFreeObj
000145F2 6600                       		bne.s	loc_124AA
000145F4                            
000145F4                            LCon_MakePtfms:
000145F4 12BC 0063                  		move.b	#id_LabyrinthConvey,0(a1)
000145F8 335A 0008                  		move.w	(a2)+,obX(a1)
000145FC 335A 000C                  		move.w	(a2)+,obY(a1)
00014600 301A                       		move.w	(a2)+,d0
00014602 1340 0028                  		move.b	d0,obSubtype(a1)
00014606                            
00014606                            loc_124AA:
00014606 51C9 FFE6                  		dbf	d1,LCon_Loop
0001460A                            
0001460A 588F                       		addq.l	#4,sp
0001460C 4E75                       		rts	
0001460E                            ; ===========================================================================
0001460E                            
0001460E                            loc_124B2:	; Routine 2
0001460E 7200                       		moveq	#0,d1
00014610 1228 0014                  		move.b	obActWid(a0),d1
00014614 4EB9 0000 8C24             		jsr	(PlatformObject).l
0001461A 6000 0000                  		bra.w	sub_12502
0001461E                            ; ===========================================================================
0001461E                            
0001461E                            loc_124C2:	; Routine 4
0001461E 7200                       		moveq	#0,d1
00014620 1228 0014                  		move.b	obActWid(a0),d1
00014624 4EB9 0000 8D98             		jsr	(ExitPlatform).l
0001462A 3F28 0008                  		move.w	obX(a0),-(sp)
0001462E 6100 0000                  		bsr.w	sub_12502
00014632 341F                       		move.w	(sp)+,d2
00014634 4EF9 0000 9302             		jmp	(MvSonicOnPtfm2).l
0001463A                            ; ===========================================================================
0001463A                            
0001463A                            loc_124DE:	; Routine 6
0001463A 3038 FE04                  		move.w	(v_framecount).w,d0
0001463E 0240 0003                  		andi.w	#3,d0
00014642 6600                       		bne.s	loc_124FC
00014644 7201                       		moveq	#1,d1
00014646 4A38 F7C0                  		tst.b	(f_conveyrev).w
0001464A 6700                       		beq.s	loc_124F2
0001464C 4401                       		neg.b	d1
0001464E                            
0001464E                            loc_124F2:
0001464E D328 001A                  		add.b	d1,obFrame(a0)
00014652 0228 0003 001A             		andi.b	#3,obFrame(a0)
00014658                            
00014658                            loc_124FC:
00014658 588F                       		addq.l	#4,sp
0001465A 6000 CFEA                  		bra.w	RememberState
0001465E                            
0001465E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001465E                            
0001465E                            
0001465E                            sub_12502:
0001465E 4A38 F7EE                  		tst.b	(f_switch+$E).w
00014662 6700                       		beq.s	loc_12520
00014664 4A28 003B                  		tst.b	$3B(a0)
00014668 6600                       		bne.s	loc_12520
0001466A 117C 0001 003B             		move.b	#1,$3B(a0)
00014670 11FC 0001 F7C0             		move.b	#1,(f_conveyrev).w
00014676 4428 003A                  		neg.b	$3A(a0)
0001467A 6000                       		bra.s	loc_12534
0001467C                            ; ===========================================================================
0001467C                            
0001467C                            loc_12520:
0001467C 3028 0008                  		move.w	obX(a0),d0
00014680 B068 0034                  		cmp.w	$34(a0),d0
00014684 6600                       		bne.s	loc_1256A
00014686 3028 000C                  		move.w	obY(a0),d0
0001468A B068 0036                  		cmp.w	$36(a0),d0
0001468E 6600                       		bne.s	loc_1256A
00014690                            
00014690                            loc_12534:
00014690 7200                       		moveq	#0,d1
00014692 1228 0038                  		move.b	$38(a0),d1
00014696 D228 003A                  		add.b	$3A(a0),d1
0001469A B228 0039                  		cmp.b	$39(a0),d1
0001469E 6500                       		bcs.s	loc_12552
000146A0 1001                       		move.b	d1,d0
000146A2 7200                       		moveq	#0,d1
000146A4 4A00                       		tst.b	d0
000146A6 6A00                       		bpl.s	loc_12552
000146A8 1228 0039                  		move.b	$39(a0),d1
000146AC 5901                       		subq.b	#4,d1
000146AE                            
000146AE                            loc_12552:
000146AE 1141 0038                  		move.b	d1,$38(a0)
000146B2 2268 003C                  		movea.l	$3C(a0),a1
000146B6 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000146BC 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000146C2 6100 0000                  		bsr.w	LCon_ChangeDir
000146C6                            
000146C6                            loc_1256A:
000146C6 6100 AEA2                  		bsr.w	SpeedToPos
000146CA 4E75                       		rts	
000146CC                            ; End of function sub_12502
000146CC                            
000146CC                            
000146CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000146CC                            
000146CC                            
000146CC                            LCon_ChangeDir:
000146CC 7000                       		moveq	#0,d0
000146CE 343C FF00                  		move.w	#-$100,d2
000146D2 3028 0008                  		move.w	obX(a0),d0
000146D6 9068 0034                  		sub.w	$34(a0),d0
000146DA 6400                       		bcc.s	loc_12584
000146DC 4440                       		neg.w	d0
000146DE 4442                       		neg.w	d2
000146E0                            
000146E0                            loc_12584:
000146E0 7200                       		moveq	#0,d1
000146E2 363C FF00                  		move.w	#-$100,d3
000146E6 3228 000C                  		move.w	obY(a0),d1
000146EA 9268 0036                  		sub.w	$36(a0),d1
000146EE 6400                       		bcc.s	loc_12598
000146F0 4441                       		neg.w	d1
000146F2 4443                       		neg.w	d3
000146F4                            
000146F4                            loc_12598:
000146F4 B240                       		cmp.w	d0,d1
000146F6 6500                       		bcs.s	loc_125C2
000146F8 3028 0008                  		move.w	obX(a0),d0
000146FC 9068 0034                  		sub.w	$34(a0),d0
00014700 6700                       		beq.s	loc_125AE
00014702 48C0                       		ext.l	d0
00014704 E180                       		asl.l	#8,d0
00014706 81C1                       		divs.w	d1,d0
00014708 4440                       		neg.w	d0
0001470A                            
0001470A                            loc_125AE:
0001470A 3140 0010                  		move.w	d0,obVelX(a0)
0001470E 3143 0012                  		move.w	d3,obVelY(a0)
00014712 4840                       		swap	d0
00014714 3140 000A                  		move.w	d0,obX+2(a0)
00014718 4268 000E                  		clr.w	obY+2(a0)
0001471C 4E75                       		rts	
0001471E                            ; ===========================================================================
0001471E                            
0001471E                            loc_125C2:
0001471E 3228 000C                  		move.w	obY(a0),d1
00014722 9268 0036                  		sub.w	$36(a0),d1
00014726 6700                       		beq.s	loc_125D4
00014728 48C1                       		ext.l	d1
0001472A E181                       		asl.l	#8,d1
0001472C 83C0                       		divs.w	d0,d1
0001472E 4441                       		neg.w	d1
00014730                            
00014730                            loc_125D4:
00014730 3141 0012                  		move.w	d1,obVelY(a0)
00014734 3142 0010                  		move.w	d2,obVelX(a0)
00014738 4841                       		swap	d1
0001473A 3141 000E                  		move.w	d1,obY+2(a0)
0001473E 4268 000A                  		clr.w	obX+2(a0)
00014742 4E75                       		rts	
00014744                            ; End of function LCon_ChangeDir
00014744                            
00014744                            ; ===========================================================================
00014744 0000                       LCon_Data:	dc.w word_125F4-LCon_Data
00014746 0000                       		dc.w word_12610-LCon_Data
00014748 0000                       		dc.w word_12628-LCon_Data
0001474A 0000                       		dc.w word_1263C-LCon_Data
0001474C 0000                       		dc.w word_12650-LCon_Data
0001474E 0000                       		dc.w word_12668-LCon_Data
00014750 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00014760 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
0001476C 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
0001477C 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00014784 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00014798 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
000147AC 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
000147C4 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
000147C4 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
000147D8                            Map_LConv:	include	"_maps\LZ Conveyor.asm"
000147D8                            ; ---------------------------------------------------------------------------
000147D8                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000147D8                            ; ---------------------------------------------------------------------------
000147D8                            Map_LConv_internal:
000147D8 0000                       		dc.w @wheel1-Map_LConv_internal
000147DA 0000                       		dc.w @wheel2-Map_LConv_internal
000147DC 0000                       		dc.w @wheel3-Map_LConv_internal
000147DE 0000                       		dc.w @wheel4-Map_LConv_internal
000147E0 0000                       		dc.w @platform-Map_LConv_internal
000147E2 01                         @wheel1:	dc.b 1
000147E3 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000147E8 01                         @wheel2:	dc.b 1
000147E9 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000147EE 01                         @wheel3:	dc.b 1
000147EF F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
000147F4 01                         @wheel4:	dc.b 1
000147F5 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
000147FA 01                         @platform:	dc.b 1
000147FB F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00014800                            		even
00014800                            		even
00014800                            		include	"_incObj\64 Bubbles.asm"
00014800                            ; ---------------------------------------------------------------------------
00014800                            ; Object 64 - bubbles (LZ)
00014800                            ; ---------------------------------------------------------------------------
00014800                            
00014800                            Bubble:
00014800 7000                       		moveq	#0,d0
00014802 1028 0024                  		move.b	obRoutine(a0),d0
00014806 323B 0000                  		move.w	Bub_Index(pc,d0.w),d1
0001480A 4EFB 1000                  		jmp	Bub_Index(pc,d1.w)
0001480E                            ; ===========================================================================
0001480E 0000                       Bub_Index:	dc.w Bub_Main-Bub_Index
00014810 0000                       		dc.w Bub_Animate-Bub_Index
00014812 0000                       		dc.w Bub_ChkWater-Bub_Index
00014814 0000                       		dc.w Bub_Display-Bub_Index
00014816 0000                       		dc.w Bub_Delete-Bub_Index
00014818 0000                       		dc.w Bub_BblMaker-Bub_Index
0001481A                            
0001481A =0000002E                  bub_inhalable:	equ $2E		; flag set when bubble is collectable
0001481A =00000030                  bub_origX:	equ $30		; original x-axis position
0001481A =00000032                  bub_time:	equ $32		; time until next bubble spawn
0001481A =00000033                  bub_freq:	equ $33		; frequency of bubble spawn
0001481A                            ; ===========================================================================
0001481A                            
0001481A                            Bub_Main:	; Routine 0
0001481A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001481E 217C 0000 0000 0004        		move.l	#Map_Bub,obMap(a0)
00014826 317C 8348 0002             		move.w	#$8348,obGfx(a0)
0001482C 117C 0084 0001             		move.b	#$84,obRender(a0)
00014832 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014838 317C 0080 0018             		move.w	#$80,obPriority(a0)
0001483E 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
00014842 6A00                       		bpl.s	@bubble		; if type is $0-$7F, branch
00014844                            
00014844 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Bub_BblMaker next
00014848 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
0001484C 1140 0032                  		move.b	d0,bub_time(a0)
00014850 1140 0033                  		move.b	d0,bub_freq(a0)	; set bubble frequency
00014854 117C 0006 001C             		move.b	#6,obAnim(a0)
0001485A 6000 0000                  		bra.w	Bub_BblMaker
0001485E                            ; ===========================================================================
0001485E                            
0001485E                            @bubble:
0001485E 1140 001C                  		move.b	d0,obAnim(a0)
00014862 3168 0008 0030             		move.w	obX(a0),bub_origX(a0)
00014868 317C FF78 0012             		move.w	#-$88,obVelY(a0) ; float bubble upwards
0001486E 4EB9 0000 3CA4             		jsr	(RandomNumber).l
00014874 1140 0026                  		move.b	d0,obAngle(a0)
00014878                            
00014878                            Bub_Animate:	; Routine 2
00014878 43F9 0000 0000             		lea	(Ani_Bub).l,a1
0001487E 4EB9 0000 C634             		jsr	(AnimateSprite).l
00014884 0C28 0006 001A             		cmpi.b	#6,obFrame(a0)	; is bubble full-size?
0001488A 6600                       		bne.s	Bub_ChkWater	; if not, branch
0001488C                            
0001488C 117C 0001 002E             		move.b	#1,bub_inhalable(a0) ; set "inhalable" flag
00014892                            
00014892                            Bub_ChkWater:	; Routine 4
00014892 3038 F646                  		move.w	(v_waterpos1).w,d0
00014896 B068 000C                  		cmp.w	obY(a0),d0	; is bubble underwater?
0001489A 6500                       		bcs.s	@wobble		; if yes, branch
0001489C                            
0001489C                            @burst:
0001489C 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto Bub_Display next
000148A2 5628 001C                  		addq.b	#3,obAnim(a0)	; run "bursting" animation
000148A6 6000 0000                  		bra.w	Bub_Display
000148AA                            ; ===========================================================================
000148AA                            
000148AA                            @wobble:
000148AA 1028 0026                  		move.b	obAngle(a0),d0
000148AE 5228 0026                  		addq.b	#1,obAngle(a0)
000148B2 0240 007F                  		andi.w	#$7F,d0
000148B6 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
000148BC 1031 0000                  		move.b	(a1,d0.w),d0
000148C0 4880                       		ext.w	d0
000148C2 D068 0030                  		add.w	bub_origX(a0),d0
000148C6 3140 0008                  		move.w	d0,obX(a0)	; change bubble's x-axis position
000148CA 4A28 002E                  		tst.b	bub_inhalable(a0)
000148CE 6700                       		beq.s	@display
000148D0 6100 0000                  		bsr.w	Bub_ChkSonic	; has Sonic touched the	bubble?
000148D4 6700                       		beq.s	@display	; if not, branch
000148D6                            
000148D6 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
000148E4 43F8 D000                  		lea	(v_player).w,a1
000148E8 4269 0010                  		clr.w	obVelX(a1)
000148EC 4269 0012                  		clr.w	obVelY(a1)
000148F0 4269 0020                  		clr.w	obInertia(a1)	; stop Sonic
000148F4 137C 0000 001C             		move.b	#id_GetAir,obAnim(a1) ; use bubble-collecting animation
000148FA 337C 0023 003E             		move.w	#$23,$3E(a1)
00014900 137C 0000 003C             		move.b	#0,$3C(a1)
00014906 08A9 0005 0022             		bclr	#5,obStatus(a1)
0001490C 08A9 0004 0022             		bclr	#4,obStatus(a1)
00014912 0829 0002 0022             		btst	#2,obStatus(a1)
00014918 6700 FF82                  		beq.w	@burst
0001491C 08A9 0002 0022             		bclr	#2,obStatus(a1)
00014922 137C 0013 0016             		move.b	#$13,obHeight(a1)
00014928 137C 0009 0017             		move.b	#9,obWidth(a1)
0001492E 5B69 000C                  		subq.w	#5,obY(a1)
00014932 6000 FF68                  		bra.w	@burst
00014936                            ; ===========================================================================
00014936                            
00014936                            @display:
00014936 6100 AC32                  		bsr.w	SpeedToPos
0001493A 4A28 0001                  		tst.b	obRender(a0)
0001493E 6A00                       		bpl.s	@delete
00014940 4EF9 0000 F57E             		jmp	(DisplaySprite).l
00014946                            
00014946                            	@delete:
00014946 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001494C                            ; ===========================================================================
0001494C                            
0001494C                            Bub_Display:	; Routine 6
0001494C 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014952 4EB9 0000 C634             		jsr	(AnimateSprite).l
00014958 4A28 0001                  		tst.b	obRender(a0)
0001495C 6A00                       		bpl.s	@delete
0001495E 4EF9 0000 F57E             		jmp	(DisplaySprite).l
00014964                            
00014964                            	@delete:
00014964 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001496A                            ; ===========================================================================
0001496A                            
0001496A                            Bub_Delete:	; Routine 8
0001496A 6000 AC52                  		bra.w	DeleteObject
0001496E                            ; ===========================================================================
0001496E                            
0001496E                            Bub_BblMaker:	; Routine $A
0001496E 4A68 0036                  		tst.w	$36(a0)
00014972 6600                       		bne.s	@loc_12874
00014974 3038 F646                  		move.w	(v_waterpos1).w,d0
00014978 B068 000C                  		cmp.w	obY(a0),d0	; is bubble maker underwater?
0001497C 6400 0000                  		bcc.w	@chkdel		; if not, branch
00014980 4A28 0001                  		tst.b	obRender(a0)
00014984 6A00 0000                  		bpl.w	@chkdel
00014988 5368 0038                  		subq.w	#1,$38(a0)
0001498C 6A00 0000                  		bpl.w	@loc_12914
00014990 317C 0001 0036             		move.w	#1,$36(a0)
00014996                            
00014996                            	@tryagain:
00014996 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001499C 3200                       		move.w	d0,d1
0001499E 0240 0007                  		andi.w	#7,d0
000149A2 0C40 0006                  		cmpi.w	#6,d0		; random number over 6?
000149A6 64EE                       		bcc.s	@tryagain	; if yes, branch
000149A8                            
000149A8 1140 0034                  		move.b	d0,$34(a0)
000149AC 0241 000C                  		andi.w	#$C,d1
000149B0 43F9 0000 0000             		lea	(Bub_BblTypes).l,a1
000149B6 D2C1                       		adda.w	d1,a1
000149B8 2149 003C                  		move.l	a1,$3C(a0)
000149BC 5328 0032                  		subq.b	#1,bub_time(a0)
000149C0 6A00                       		bpl.s	@loc_12872
000149C2 1168 0033 0032             		move.b	bub_freq(a0),bub_time(a0)
000149C8 08E8 0007 0036             		bset	#7,$36(a0)
000149CE                            
000149CE                            @loc_12872:
000149CE 6000                       		bra.s	@loc_1287C
000149D0                            ; ===========================================================================
000149D0                            
000149D0                            @loc_12874:
000149D0 5368 0038                  		subq.w	#1,$38(a0)
000149D4 6A00 0000                  		bpl.w	@loc_12914
000149D8                            
000149D8                            @loc_1287C:
000149D8 4EB9 0000 3CA4             		jsr	(RandomNumber).l
000149DE 0240 001F                  		andi.w	#$1F,d0
000149E2 3140 0038                  		move.w	d0,$38(a0)
000149E6 6100 B130                  		bsr.w	FindFreeObj
000149EA 6600                       		bne.s	@fail
000149EC 12BC 0064                  		move.b	#id_Bubble,0(a1) ; load bubble object
000149F0 3368 0008 0008             		move.w	obX(a0),obX(a1)
000149F6 4EB9 0000 3CA4             		jsr	(RandomNumber).l
000149FC 0240 000F                  		andi.w	#$F,d0
00014A00 5140                       		subq.w	#8,d0
00014A02 D169 0008                  		add.w	d0,obX(a1)
00014A06 3368 000C 000C             		move.w	obY(a0),obY(a1)
00014A0C 7000                       		moveq	#0,d0
00014A0E 1028 0034                  		move.b	$34(a0),d0
00014A12 2468 003C                  		movea.l	$3C(a0),a2
00014A16 1372 0000 0028             		move.b	(a2,d0.w),obSubtype(a1)
00014A1C 0828 0007 0036             		btst	#7,$36(a0)
00014A22 6700                       		beq.s	@fail
00014A24 4EB9 0000 3CA4             		jsr	(RandomNumber).l
00014A2A 0240 0003                  		andi.w	#3,d0
00014A2E 6600                       		bne.s	@loc_buh
00014A30 08E8 0006 0036             		bset	#6,$36(a0)
00014A36 6600                       		bne.s	@fail
00014A38 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014A3E                            
00014A3E                            @loc_buh:
00014A3E 4A28 0034                  		tst.b	$34(a0)
00014A42 6600                       		bne.s	@fail
00014A44 08E8 0006 0036             		bset	#6,$36(a0)
00014A4A 6600                       		bne.s	@fail
00014A4C 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014A52                            
00014A52                            	@fail:
00014A52 5328 0034                  		subq.b	#1,$34(a0)
00014A56 6A00                       		bpl.s	@loc_12914
00014A58 4EB9 0000 3CA4             		jsr	(RandomNumber).l
00014A5E 0240 007F                  		andi.w	#$7F,d0
00014A62 0640 0080                  		addi.w	#$80,d0
00014A66 D168 0038                  		add.w	d0,$38(a0)
00014A6A 4268 0036                  		clr.w	$36(a0)
00014A6E                            
00014A6E                            @loc_12914:
00014A6E 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014A74 4EB9 0000 C634             		jsr	(AnimateSprite).l
00014A7A                            
00014A7A                            @chkdel:
00014A98 3038 F646                  		move.w	(v_waterpos1).w,d0
00014A9C B068 000C                  		cmp.w	obY(a0),d0
00014AA0 6500 AADC                  		bcs.w	DisplaySprite
00014AA4 4E75                       		rts	
00014AA6                            ; ===========================================================================
00014AA6                            ; bubble production sequence
00014AA6                            
00014AA6                            ; 0 = small bubble, 1 =	large bubble
00014AA6                            
00014AA6 0001 0000 0000 0100 0000+  Bub_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00014AB8                            
00014AB8                            ; ===========================================================================
00014AB8                            
00014AB8                            Bub_ChkSonic:
00014AB8 4A38 F7C8                  		tst.b	(f_lockmulti).w
00014ABC 6B00                       		bmi.s	@loc_12998
00014ABE 43F8 D000                  		lea	(v_player).w,a1
00014AC2 3029 0008                  		move.w	obX(a1),d0
00014AC6 3228 0008                  		move.w	obX(a0),d1
00014ACA 0441 0010                  		subi.w	#$10,d1
00014ACE B240                       		cmp.w	d0,d1
00014AD0 6400                       		bcc.s	@loc_12998
00014AD2 0641 0020                  		addi.w	#$20,d1
00014AD6 B240                       		cmp.w	d0,d1
00014AD8 6500                       		bcs.s	@loc_12998
00014ADA 3029 000C                  		move.w	obY(a1),d0
00014ADE 3228 000C                  		move.w	obY(a0),d1
00014AE2 B240                       		cmp.w	d0,d1
00014AE4 6400                       		bcc.s	@loc_12998
00014AE6 0641 0010                  		addi.w	#$10,d1
00014AEA B240                       		cmp.w	d0,d1
00014AEC 6500                       		bcs.s	@loc_12998
00014AEE 7001                       		moveq	#1,d0
00014AF0 4E75                       		rts	
00014AF2                            ; ===========================================================================
00014AF2                            
00014AF2                            @loc_12998:
00014AF2 7000                       		moveq	#0,d0
00014AF4 4E75                       		rts	
00014AF4 4E75                       		rts	
00014AF6                            		include	"_anim\Bubbles.asm"
00014AF6                            ; ---------------------------------------------------------------------------
00014AF6                            ; Animation script - bubbles (LZ)
00014AF6                            ; ---------------------------------------------------------------------------
00014AF6 0000                       Ani_Bub:	dc.w @small-Ani_Bub
00014AF8 0000                       		dc.w @medium-Ani_Bub
00014AFA 0000                       		dc.w @large-Ani_Bub
00014AFC 0000                       		dc.w @incroutine-Ani_Bub
00014AFE 0000                       		dc.w @incroutine-Ani_Bub
00014B00 0000                       		dc.w @burst-Ani_Bub
00014B02 0000                       		dc.w @bubmaker-Ani_Bub
00014B04 0D00 0102 FC               @small:		dc.b $D, 0, 1, 2, afRoutine ; small bubble forming
00014B0A 00                         		even
00014B0A 0D01 0203 04FC             @medium:	dc.b $D, 1, 2, 3, 4, afRoutine ; medium bubble forming
00014B10 0D02 0304 0506 FC          @large:		dc.b $D, 2, 3, 4, 5, 6,	afRoutine ; full size bubble forming
00014B18 00                         		even
00014B18 04FC                       @incroutine:	dc.b 4,	afRoutine	; increment routine counter (no animation)
00014B1A 0406 0708 FC               @burst:		dc.b 4,	6, 7, 8, afRoutine ; large bubble bursts
00014B20 00                         		even
00014B20 0E13 1415 FF               @bubmaker:	dc.b $E, $13, $14, $15,	afEnd ; bubble maker on the floor
00014B26 00                         		even
00014B26 00                         		even
00014B26                            Map_Bub:	include	"_maps\Bubbles.asm"
00014B26                            ; ---------------------------------------------------------------------------
00014B26                            ; Sprite mappings - bubbles (LZ)
00014B26                            ; ---------------------------------------------------------------------------
00014B26                            Map_Bub_internal:
00014B26 0000                       		dc.w @bubble1-Map_Bub_internal
00014B28 0000                       		dc.w @bubble2-Map_Bub_internal
00014B2A 0000                       		dc.w @bubble3-Map_Bub_internal
00014B2C 0000                       		dc.w @bubble4-Map_Bub_internal
00014B2E 0000                       		dc.w @bubble5-Map_Bub_internal
00014B30 0000                       		dc.w @bubble6-Map_Bub_internal
00014B32 0000                       		dc.w @bubblefull-Map_Bub_internal
00014B34 0000                       		dc.w @burst1-Map_Bub_internal
00014B36 0000                       		dc.w @burst2-Map_Bub_internal
00014B38 0000                       		dc.w @zero_sm-Map_Bub_internal
00014B3A 0000                       		dc.w @five_sm-Map_Bub_internal
00014B3C 0000                       		dc.w @three_sm-Map_Bub_internal
00014B3E 0000                       		dc.w @one_sm-Map_Bub_internal
00014B40 0000                       		dc.w @zero-Map_Bub_internal
00014B42 0000                       		dc.w @five-Map_Bub_internal
00014B44 0000                       		dc.w @four-Map_Bub_internal
00014B46 0000                       		dc.w @three-Map_Bub_internal
00014B48 0000                       		dc.w @two-Map_Bub_internal
00014B4A 0000                       		dc.w @one-Map_Bub_internal
00014B4C 0000                       		dc.w @bubmaker1-Map_Bub_internal
00014B4E 0000                       		dc.w @bubmaker2-Map_Bub_internal
00014B50 0000                       		dc.w @bubmaker3-Map_Bub_internal
00014B52 0000                       		dc.w @blank-Map_Bub_internal
00014B54 01                         @bubble1:	dc.b 1
00014B55 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC	; bubbles, increasing in size
00014B5A 01                         @bubble2:	dc.b 1
00014B5B FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00014B60 01                         @bubble3:	dc.b 1
00014B61 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00014B66 01                         @bubble4:	dc.b 1
00014B67 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00014B6C 01                         @bubble5:	dc.b 1
00014B6D F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00014B72 01                         @bubble6:	dc.b 1
00014B73 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00014B78 01                         @bubblefull:	dc.b 1
00014B79 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00014B7E 04                         @burst1:	dc.b 4
00014B7F F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0 ; large bubble bursting
00014B84 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00014B89 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00014B8E 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00014B93 04                         @burst2:	dc.b 4
00014B94 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00014B99 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00014B9E 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00014BA3 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00014BA8 01                         @zero_sm:	dc.b 1
00014BA9 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8 ; small, partially-formed countdown numbers
00014BAE 01                         @five_sm:	dc.b 1
00014BAF F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00014BB4 01                         @three_sm:	dc.b 1
00014BB5 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00014BBA 01                         @one_sm:	dc.b 1
00014BBB F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00014BC0 01                         @zero:		dc.b 1
00014BC1 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8 ; fully-formed countdown numbers
00014BC6 01                         @five:		dc.b 1
00014BC7 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00014BCC 01                         @four:		dc.b 1
00014BCD F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00014BD2 01                         @three:		dc.b 1
00014BD3 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00014BD8 01                         @two:		dc.b 1
00014BD9 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00014BDE 01                         @one:		dc.b 1
00014BDF F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00014BE4 01                         @bubmaker1:	dc.b 1
00014BE5 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00014BEA 01                         @bubmaker2:	dc.b 1
00014BEB F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00014BF0 01                         @bubmaker3:	dc.b 1
00014BF1 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00014BF6 00                         @blank:		dc.b 0
00014BF8 00                         		even
00014BF8 00                         		even
00014BF8                            		include	"_incObj\65 Waterfalls.asm"
00014BF8                            ; ---------------------------------------------------------------------------
00014BF8                            ; Object 65 - waterfalls (LZ)
00014BF8                            ; ---------------------------------------------------------------------------
00014BF8                            
00014BF8                            Waterfall:
00014BF8 7000                       		moveq	#0,d0
00014BFA 1028 0024                  		move.b	obRoutine(a0),d0
00014BFE 323B 0000                  		move.w	WFall_Index(pc,d0.w),d1
00014C02 4EFB 1000                  		jmp	WFall_Index(pc,d1.w)
00014C06                            ; ===========================================================================
00014C06 0000                       WFall_Index:	dc.w WFall_Main-WFall_Index
00014C08 0000                       		dc.w WFall_Animate-WFall_Index
00014C0A 0000                       		dc.w WFall_ChkDel-WFall_Index
00014C0C 0000                       		dc.w WFall_OnWater-WFall_Index
00014C0E 0000                       		dc.w loc_12B36-WFall_Index
00014C10                            ; ===========================================================================
00014C10                            
00014C10                            WFall_Main:	; Routine 0
00014C10 5828 0024                  		addq.b	#4,obRoutine(a0)
00014C14 217C 0000 0000 0004        		move.l	#Map_WFall,obMap(a0)
00014C1C 317C 4259 0002             		move.w	#$4259,obGfx(a0)
00014C22 0028 0004 0001             		ori.b	#4,obRender(a0)
00014C28 117C 0018 0014             		move.b	#$18,obActWid(a0)
00014C2E 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014C34 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014C38 6A00                       		bpl.s	@under80	; branch if $00-$7F
00014C3A 08E8 0007 0002             		bset	#7,obGfx(a0)
00014C40                            
00014C40                            	@under80:
00014C40 0200 000F                  		andi.b	#$F,d0		; read only the	2nd digit
00014C44 1140 001A                  		move.b	d0,obFrame(a0)	; set frame number
00014C48 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00014C4C 6600                       		bne.s	WFall_ChkDel	; if not, branch
00014C4E                            
00014C4E 4228 0018                  		clr.b	obPriority(a0)	; object is in front of Sonic
00014C52 5528 0024                  		subq.b	#2,obRoutine(a0) ; goto WFall_Animate next
00014C56 0828 0006 0028             		btst	#6,obSubtype(a0) ; is object type $49 ?
00014C5C 6700                       		beq.s	@not49		; if not, branch
00014C5E                            
00014C5E 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto WFall_OnWater next
00014C64                            
00014C64                            	@not49:
00014C64 0828 0005 0028             		btst	#5,obSubtype(a0) ; is object type $A9 ?
00014C6A 6700                       		beq.s	WFall_Animate	; if not, branch
00014C6C 117C 0008 0024             		move.b	#8,obRoutine(a0) ; goto loc_12B36 next
00014C72                            
00014C72                            WFall_Animate:	; Routine 2
00014C72 43F9 0000 0000             		lea	(Ani_WFall).l,a1
00014C78 4EB9 0000 C634             		jsr	(AnimateSprite).l
00014C7E                            
00014C7E                            WFall_ChkDel:	; Routine 4
00014C7E 6000 C9C6                  		bra.w	RememberState
00014C82                            ; ===========================================================================
00014C82                            
00014C82                            WFall_OnWater:	; Routine 6
00014C82 3038 F646                  		move.w	(v_waterpos1).w,d0
00014C86 0440 0010                  		subi.w	#$10,d0
00014C8A 3140 000C                  		move.w	d0,obY(a0)	; match	object position	to water height
00014C8E 60E2                       		bra.s	WFall_Animate
00014C90                            ; ===========================================================================
00014C90                            
00014C90                            loc_12B36:	; Routine 8
00014C90 08A8 0007 0002             		bclr	#7,obGfx(a0)
00014C96 0C38 0007 A506             		cmpi.b	#7,(v_lvllayout+$106).w
00014C9C 6600                       		bne.s	@animate
00014C9E 08E8 0007 0002             		bset	#7,obGfx(a0)
00014CA4                            
00014CA4                            	@animate:
00014CA4 60CC                       		bra.s	WFall_Animate
00014CA4 60CC                       		bra.s	WFall_Animate
00014CA6                            		include	"_anim\Waterfalls.asm"
00014CA6                            ; ---------------------------------------------------------------------------
00014CA6                            ; Animation script - waterfall (LZ)
00014CA6                            ; ---------------------------------------------------------------------------
00014CA6 0000                       Ani_WFall:	dc.w @splash-Ani_WFall
00014CA8 0509 0A0B FF               @splash:	dc.b 5,	9, $A, $B, afEnd
00014CAE 00                         		even
00014CAE 00                         		even
00014CAE                            Map_WFall	include	"_maps\Waterfalls.asm"
00014CAE                            ; ---------------------------------------------------------------------------
00014CAE                            ; Sprite mappings - waterfalls (LZ)
00014CAE                            ; ---------------------------------------------------------------------------
00014CAE                            Map_WFall_internal:
00014CAE 0000                       		dc.w @vertnarrow-Map_WFall_internal
00014CB0 0000                       		dc.w @cornerwide-Map_WFall_internal
00014CB2 0000                       		dc.w @cornermedium-Map_WFall_internal
00014CB4 0000                       		dc.w @cornernarrow-Map_WFall_internal
00014CB6 0000                       		dc.w @cornermedium2-Map_WFall_internal
00014CB8 0000                       		dc.w @cornernarrow2-Map_WFall_internal
00014CBA 0000                       		dc.w @cornernarrow3-Map_WFall_internal
00014CBC 0000                       		dc.w @vertwide-Map_WFall_internal
00014CBE 0000                       		dc.w @diagonal-Map_WFall_internal
00014CC0 0000                       		dc.w @splash1-Map_WFall_internal
00014CC2 0000                       		dc.w @splash2-Map_WFall_internal
00014CC4 0000                       		dc.w @splash3-Map_WFall_internal
00014CC6 01                         @vertnarrow:	dc.b 1
00014CC7 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00014CCC 02                         @cornerwide:	dc.b 2
00014CCD F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00014CD2 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00014CD7 02                         @cornermedium:	dc.b 2
00014CD8 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014CDD 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014CE2 01                         @cornernarrow:	dc.b 1
00014CE3 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00014CE8 02                         @cornermedium2:	dc.b 2
00014CE9 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014CEE 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014CF3 01                         @cornernarrow2:	dc.b 1
00014CF4 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00014CF9 01                         @cornernarrow3:	dc.b 1
00014CFA F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00014CFF 01                         @vertwide:	dc.b 1
00014D00 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00014D05 02                         @diagonal:	dc.b 2
00014D06 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00014D0B 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00014D10 02                         @splash1:	dc.b 2
00014D11 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00014D16 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00014D1B 02                         @splash2:	dc.b 2
00014D1C F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00014D21 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00014D26 02                         @splash3:	dc.b 2
00014D27 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00014D2C F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00014D32 00                         		even
00014D32 00                         		even
00014D32                            
00014D32                            
00014D32                            SpinDash_dust:
00014D32                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00014D32 7000                       		moveq	#0,d0
00014D34 1028 0024                  		move.b	$24(a0),d0
00014D38 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00014D3C 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00014D40                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014D40 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00014D42 0000                       		dc loc_1DD90-off_1DD2E; 1
00014D44 0000                       		dc loc_1DE46-off_1DD2E; 2
00014D46 0000                       		dc loc_1DE4A-off_1DD2E; 3
00014D48                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014D48                            
00014D48                            loc_1DD36:				; DATA XREF: h+6DBA?o
00014D48 5428 0024                  		addq.b	#2,$24(a0)
00014D4C 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00014D54 0028 0004 0001             		or.b	#4,1(a0)
00014D5A 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014D60 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014D66 317C 07AC 0002             		move	#$7AC,2(a0)
00014D6C 317C D000 003E             		move	#-$3000,$3E(a0)
00014D72 317C F580 003C             		move	#$F580,$3C(a0)
00014D78 B0FC D1C0                  		cmp	#-$2E40,a0
00014D7C 6700                       		beq.s	loc_1DD8C
00014D7E 117C 0001 0034             		move.b	#1,$34(a0)
00014D84                            ;		cmp	#2,($FFFFFF70).w
00014D84                            ;		beq.s	loc_1DD8C
00014D84                            ;		move	#$48C,2(a0)
00014D84                            ;		move	#-$4FC0,$3E(a0)
00014D84                            ;		move	#-$6E80,$3C(a0)
00014D84                            
00014D84                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
00014D84                            ;		bsr.w	sub_16D6E
00014D84                            
00014D84                            loc_1DD90:				; DATA XREF: h+6DBA?o
00014D84 3468 003E                  		movea.w	$3E(a0),a2
00014D88 7000                       		moveq	#0,d0
00014D8A 1028 001C                  		move.b	$1C(a0),d0
00014D8E D040                       		add	d0,d0
00014D90 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
00014D94 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
00014D98                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014D98 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
00014D9A 0000                       		dc loc_1DDAC-off_1DDA4; 1
00014D9C 0000                       		dc loc_1DDCC-off_1DDA4; 2
00014D9E 0000                       		dc loc_1DE20-off_1DDA4; 3
00014DA0                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014DA0                            
00014DA0                            loc_1DDAC:				; DATA XREF: h+6E30?o
00014DA0 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
00014DA6 4A28 001D                  		tst.b	$1D(a0)
00014DAA 6600                       		bne.s	loc_1DE28
00014DAC 316A 0008 0008             		move	8(a2),8(a0)
00014DB2 117C 0000 0022             		move.b	#0,$22(a0)
00014DB8 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014DBE 6000                       		bra.s	loc_1DE28
00014DC0                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014DC0                            
00014DC0                            loc_1DDCC:				; DATA XREF: h+6E30?o
00014DC0                            ;		cmp.b	#$C,$28(a2)
00014DC0                            ;		bcs.s	loc_1DE3E
00014DC0 0C2A 0004 0024             		cmp.b	#4,$24(a2)
00014DC6 6400                       		bcc.s	loc_1DE3E
00014DC8 4A2A 0039                  		tst.b	$39(a2)
00014DCC 6700                       		beq.s	loc_1DE3E
00014DCE 316A 0008 0008             		move	8(a2),8(a0)
00014DD4 316A 000C 000C             		move	$C(a2),$C(a0)
00014DDA 116A 0022 0022             		move.b	$22(a2),$22(a0)
00014DE0 0228 0001 0022             		and.b	#1,$22(a0)
00014DE6 4A28 0034                  		tst.b	$34(a0)
00014DEA 6700                       		beq.s	loc_1DE06
00014DEC 5968 000C                  		sub	#4,$C(a0)
00014DF0                            
00014DF0                            loc_1DE06:				; CODE XREF: h+6E8A?j
00014DF0 4A28 001D                  		tst.b	$1D(a0)
00014DF4 6600                       		bne.s	loc_1DE28
00014DF6 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014DFC 4A6A 0002                  		tst	2(a2)
00014E00 6A00                       		bpl.s	loc_1DE28
00014E02 0068 8000 0002             		or	#-$8000,2(a0)
00014E08                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014E08                            
00014E08                            loc_1DE20:				; DATA XREF: h+6E30?o
00014E08                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
00014E08 43F9 0000 0000             		lea	(off_1DF38).l,a1
00014E0E 4EB9 0000 C634             		jsr	AnimateSprite
00014E14 6100 0000                  		bsr.w	loc_1DEE4
00014E18 4EFA A764                  		jmp	DisplaySprite
00014E1C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014E1C                            
00014E1C                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
00014E1C 117C 0000 001C             		move.b	#0,$1C(a0)
00014E22 4E75                       		rts	
00014E24                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014E24                            
00014E24                            loc_1DE46:				; DATA XREF: h+6DBA?o
00014E24 6000 A798                  		bra.w	DeleteObject
00014E28                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014E28                            
00014E28                            
00014E28                            
00014E28                            loc_1DE4A:
00014E28 3468 003E                  	movea.w	$3E(a0),a2
00014E2C 7210                       	moveq	#$10,d1
00014E2E 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
00014E34 6700                       	beq.s	loc_1DE64
00014E36 7206                       	moveq	#$6,d1
00014E38 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
00014E3E 6700                       	beq.s	loc_1DE64
00014E40 117C 0002 0024             	move.b	#2,$24(a0)
00014E46 117C 0000 0032             	move.b	#0,$32(a0)
00014E4C 4E75                       	rts
00014E4E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014E4E                            
00014E4E                            loc_1DE64:				; CODE XREF: h+6EE0?j
00014E4E 5328 0032                  		subq.b	#1,$32(a0)
00014E52 6A00                       		bpl.s	loc_1DEE0
00014E54 117C 0003 0032             		move.b	#3,$32(a0)
00014E5A 4EBA ACBC                  		jsr	FindFreeObj
00014E5E 6600                       		bne.s	loc_1DEE0
00014E60 1290                       		move.b	0(a0),0(a1)
00014E62 336A 0008 0008             		move	8(a2),8(a1)
00014E68 336A 000C 000C             		move	$C(a2),$C(a1)
00014E6E 4A28 0034                  		tst.b	$34(a0)
00014E72 6700                       		beq.s	loc_1DE9A
00014E74 5941                       		sub	#4,d1
00014E76                            
00014E76                            loc_1DE9A:				; CODE XREF: h+6F1E?j
00014E76 D369 000C                  		add	d1,$C(a1)
00014E7A 137C 0000 0022             		move.b	#0,$22(a1)
00014E80 137C 0003 001C             		move.b	#3,$1C(a1)
00014E86 5429 0024                  		addq.b	#2,$24(a1)
00014E8A 2368 0004 0004             		move.l	4(a0),4(a1)
00014E90 1368 0001 0001             		move.b	1(a0),1(a1)
00014E96 337C 0080 0018             		move.w	#$80,obPriority(a1)
00014E9C 137C 0004 0014             		move.b	#4,obActWid(a1)
00014EA2 3368 0002 0002             		move	2(a0),2(a1)
00014EA8 3368 003E 003E             		move	$3E(a0),$3E(a1)
00014EAE 0269 7FFF 0002             		and	#$7FFF,2(a1)
00014EB4 4A6A 0002                  		tst	2(a2)
00014EB8 6A00                       		bpl.s	loc_1DEE0
00014EBA 0069 8000 0002             		or	#-$8000,2(a1)
00014EC0                            
00014EC0                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
00014EC0 6100                       		bsr.s	loc_1DEE4
00014EC2 4E75                       		rts	
00014EC4                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014EC4                            
00014EC4                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
00014EC4 7000                       		moveq	#0,d0
00014EC6 1028 001A                  		move.b	$1A(a0),d0
00014ECA B028 0030                  		cmp.b	$30(a0),d0
00014ECE 6700 0000                  		beq.w	locret_1DF36
00014ED2 1140 0030                  		move.b	d0,$30(a0)
00014ED6 45F9 0000 0000             		lea	(off_1E074).l,a2
00014EDC D040                       		add	d0,d0
00014EDE D4F2 0000                  		add	(a2,d0.w),a2
00014EE2 3A1A                       		move	(a2)+,d5
00014EE4 5345                       		subq	#1,d5
00014EE6 6B00 0000                  		bmi.w	locret_1DF36
00014EEA 3828 003C                  		move $3C(a0),d4
00014EEE                            
00014EEE                            loc_1DF0A:				; CODE XREF: h+6FBE?j
00014EEE 7200                       		moveq	#0,d1
00014EF0 321A                       		move	(a2)+,d1
00014EF2 3601                       		move	d1,d3
00014EF4 E04B                       		lsr.w	#8,d3
00014EF6 0243 00F0                  		and	#$F0,d3	; 'ð'
00014EFA 0643 0010                  		add	#$10,d3
00014EFE 0241 0FFF                  		and	#$FFF,d1
00014F02 EB89                       		lsl.l	#5,d1
00014F04 0681 0000 0000             		add.l	#Art_Dust,d1
00014F0A 3404                       		move	d4,d2
00014F0C D843                       		add	d3,d4
00014F0E D843                       		add	d3,d4
00014F10 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
00014F16 51CD FFD6                  		dbf	d5,loc_1DF0A
00014F1A 4E75                           rts
00014F1C                            
00014F1C                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
00014F1C 4E75                       		rts	
00014F1E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014F1E 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
00014F20 0000                       		dc byte_1DF43-off_1DF38; 1
00014F22 0000                       		dc byte_1DF4F-off_1DF38; 2
00014F24 0000                       		dc byte_1DF58-off_1DF38; 3
00014F26 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
00014F29 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
00014F35 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
00014F3E 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
00014F44                            ; -------------------------------------------------------------------------------
00014F44                            ; Unknown Sprite Mappings
00014F44                            ; -------------------------------------------------------------------------------
00014F44                            MapUnc_1DF5E:
00014F44 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
00014F46 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
00014F48 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
00014F4A 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
00014F4C 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
00014F4E 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
00014F50 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
00014F52 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
00014F54 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
00014F56 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
00014F58 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
00014F5A 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
00014F5C 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
00014F5E 0000                       	dc word_1E004-MapUnc_1DF5E; 13
00014F60 0000                       	dc word_1E016-MapUnc_1DF5E; 14
00014F62 0000                       	dc word_1E028-MapUnc_1DF5E; 15
00014F64 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
00014F66 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
00014F68 0000                       	dc word_1E056-MapUnc_1DF5E; 18
00014F6A 0000                       	dc word_1E060-MapUnc_1DF5E; 19
00014F6C 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
00014F6E 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
00014F70 00                         word_1DF8A:	dc.b 0
00014F71 01                         word_1DF8C:	dc.b 1
00014F72 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014F77 01                         word_1DF96:	dc.b 1
00014F78 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014F7D 01                         word_1DFA0:	dc.b 1
00014F7E E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014F83 01                         word_1DFAA:	dc.b 1
00014F84 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014F89 01                         word_1DFB4:	dc.b 1
00014F8A E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014F8F 01                         word_1DFBE:	dc.b 1
00014F90 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014F95 01                         word_1DFC8:	dc.b 1
00014F96 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014F9B 01                         word_1DFD2:	dc.b 1
00014F9C F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014FA1 01                         word_1DFDC:	dc.b 1
00014FA2 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014FA7 01                         word_1DFE6:	dc.b 1
00014FA8 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00014FAD 01                         word_1DFF0:	dc.b 1
00014FAE 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00014FB3 01                         word_1DFFA:	dc.b 1
00014FB4 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00014FB9 02                         word_1E004:	dc.b 2
00014FBA F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
00014FBF 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
00014FC4 02                         word_1E016:	dc.b 2
00014FC5 F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
00014FCA 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
00014FCF 02                         word_1E028:	dc.b 2
00014FD0 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00014FD5 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00014FDA 02                         word_1E03A:	dc.b 2
00014FDB F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00014FE0 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00014FE5 01                         word_1E04C:	dc.b 1
00014FE6 F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
00014FEB 01                         word_1E056:	dc.b 1
00014FEC F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
00014FF1 01                         word_1E060:	dc.b 1
00014FF2 F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
00014FF7 01                         word_1E06A:	dc.b 1
00014FF8 F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
00014FFD 00                         	dc.b 0
00014FFE 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
00015000 0000                       	dc word_1E0A2-off_1E074; 1
00015002 0000                       	dc word_1E0A6-off_1E074; 2
00015004 0000                       	dc word_1E0AA-off_1E074; 3
00015006 0000                       	dc word_1E0AE-off_1E074; 4
00015008 0000                       	dc word_1E0B2-off_1E074; 5
0001500A 0000                       	dc word_1E0B6-off_1E074; 6
0001500C 0000                       	dc word_1E0BA-off_1E074; 7
0001500E 0000                       	dc word_1E0BE-off_1E074; 8
00015010 0000                       	dc word_1E0C2-off_1E074; 9
00015012 0000                       	dc word_1E0C6-off_1E074; 10
00015014 0000                       	dc word_1E0CA-off_1E074; 11
00015016 0000                       	dc word_1E0CE-off_1E074; 12
00015018 0000                       	dc word_1E0D2-off_1E074; 13
0001501A 0000                       	dc word_1E0D8-off_1E074; 14
0001501C 0000                       	dc word_1E0DE-off_1E074; 15
0001501E 0000                       	dc word_1E0E4-off_1E074; 16
00015020 0000                       	dc word_1E0EA-off_1E074; 17
00015022 0000                       	dc word_1E0EA-off_1E074; 18
00015024 0000                       	dc word_1E0EA-off_1E074; 19
00015026 0000                       	dc word_1E0EA-off_1E074; 20
00015028 0000                       	dc word_1E0EC-off_1E074; 21
0001502A 0000                       word_1E0A0:	dc 0
0001502C 0001                       word_1E0A2:	dc 1
0001502E 7000                       	dc $7000
00015030 0001                       word_1E0A6:	dc 1
00015032 F008                       	dc $F008
00015034 0001                       word_1E0AA:	dc 1
00015036 F018                       	dc $F018
00015038 0001                       word_1E0AE:	dc 1
0001503A F028                       	dc $F028
0001503C 0001                       word_1E0B2:	dc 1
0001503E F038                       	dc $F038
00015040 0001                       word_1E0B6:	dc 1
00015042 F048                       	dc $F048
00015044 0001                       word_1E0BA:	dc 1
00015046 7058                       	dc $7058
00015048 0001                       word_1E0BE:	dc 1
0001504A 7060                       	dc $7060
0001504C 0001                       word_1E0C2:	dc 1
0001504E 7068                       	dc $7068
00015050 0001                       word_1E0C6:	dc 1
00015052 7070                       	dc $7070
00015054 0001                       word_1E0CA:	dc 1
00015056 7078                       	dc $7078
00015058 0001                       word_1E0CE:	dc 1
0001505A 7080                       	dc $7080
0001505C 0002                       word_1E0D2:	dc 2
0001505E 1088                       	dc $1088
00015060 708A                       	dc $708A
00015062 0002                       word_1E0D8:	dc 2
00015064 3092                       	dc $3092
00015066 7096                       	dc $7096
00015068 0002                       word_1E0DE:	dc 2
0001506A 509E                       	dc $509E
0001506C 70A4                       	dc $70A4
0001506E 0002                       word_1E0E4:	dc 2
00015070 50AC                       	dc $50AC
00015072 70B2                       	dc $70B2
00015074 0000                       word_1E0EA:	dc 0
00015076 0001                       word_1E0EC:	dc 1
00015078 F0BA                       	dc $F0BA
0001507A                            	even
0001507A                            
0001507A                            ; ===========================================================================
0001507A                            
0001507A                            LoadPlayerPal:
0001507A 7000                       		moveq	#0,d0
0001507C 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
00015080 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
00015084 4E75                       		rts
00015086                            
00015086                            	@palLUT:
00015086 0316 1718 19               		dc.b	palid_Sonic, palid_Sonic2, palid_Sonic3, palid_Sonic4, palid_Sonic5
0001508B 1A1B 1C1D 1E1F             		dc.b	palid_Sonic6, palid_Sonic7, palid_Sonic8, palid_Sonic9, palid_Sonic10, palid_Sonic11
00015092 00                         		even
00015092                            
00015092                            LoadPlayerWaterPal:
00015092 7000                       		moveq	#0,d0
00015094 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
00015098 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
0001509C 4E75                       		rts
0001509E                            
0001509E                            	@palLUT:
0001509E 1020 2122 23               		dc.b	palid_SBZ3SonWat, palid_SonWater2, palid_SonWater3, palid_SonWater4, palid_SonWater5
000150A3 2425 2627 2829             		dc.b	palid_SonWater6, palid_SonWater7, palid_SonWater8, palid_SonWater9, palid_SonWater10, palid_SonWater11
000150AA 00                         		even
000150AA                            
000150AA                            LoadLifeIcon:
000150AA 7000                       		moveq	#0,d0
000150AC 3038 FE10                  		move.w	(v_zone).w,d0	
000150B0 E418                       		ror.b	#2,d0
000150B2 EC48                               lsr.w 	#6,d0		
000150B4 103B 0000                  		move.b	LoadLifeIcon_Table(pc,d0.w),d0	
000150B8 4EB8 173A                  		jsr		AddPLC	
000150BC 4E75                       		rts
000150BE                            
000150BE                            LoadLifeIcon_Table:
000150BE                            		; GHZ
000150BE 00                         		dc.b	plcid_LifeIcon
000150BF 00                         		dc.b	plcid_LifeIcon
000150C0 00                         		dc.b	plcid_LifeIcon	
000150C1 00                         		dc.b	plcid_LifeIcon	
000150C2                            		; LZ
000150C2 00                         		dc.b	plcid_LifeIcon
000150C3 00                         		dc.b	plcid_LifeIcon
000150C4 00                         		dc.b	plcid_LifeIcon	
000150C5 00                         		dc.b	plcid_LifeIconF	
000150C6                            		; MZ
000150C6 00                         		dc.b	plcid_LifeIconF
000150C7 00                         		dc.b	plcid_LifeIconF
000150C8 00                         		dc.b	plcid_LifeIconF
000150C9 00                         		dc.b	plcid_LifeIconF
000150CA                            		; SLZ
000150CA 00                         		dc.b	plcid_LifeIcon
000150CB 00                         		dc.b	plcid_LifeIcon
000150CC 00                         		dc.b	plcid_LifeIcon	
000150CD 00                         		dc.b	plcid_LifeIcon	
000150CE                            		; SYZ
000150CE 00                         		dc.b	plcid_LifeIconF
000150CF 00                         		dc.b	plcid_LifeIconF
000150D0 00                         		dc.b	plcid_LifeIconF
000150D1 00                         		dc.b	plcid_LifeIconF	
000150D2                            		; SBZ
000150D2 00                         		dc.b	plcid_LifeIconF
000150D3 00                         		dc.b	plcid_LifeIconF
000150D4 00                         		dc.b	plcid_LifeIconF
000150D5 00                         		dc.b	plcid_LifeIconF	
000150D6                            		even
000150D6                            
000150D6                            ; ---------------------------------------------------------------------------
000150D6                            ; Object 01 - Sonic
000150D6                            ; ---------------------------------------------------------------------------
000150D6                            
000150D6                            SonicPlayer:
000150D6 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
000150DA 6700                       		beq.s	Sonic_Normal	; if not, branch
000150DC 4EF9 0000 0000             		jmp	(DebugMode).l
000150E2                            ; ===========================================================================
000150E2                            
000150E2                            Sonic_Normal:
000150E2 7000                       		moveq	#0,d0
000150E4 1028 0024                  		move.b	obRoutine(a0),d0
000150E8 323B 0000                  		move.w	Sonic_Index(pc,d0.w),d1
000150EC 4EFB 1000                  		jmp	Sonic_Index(pc,d1.w)
000150F0                            ; ===========================================================================
000150F0 0000                       Sonic_Index:	dc.w Sonic_Main-Sonic_Index
000150F2 0000                       		dc.w Sonic_Control-Sonic_Index
000150F4 0000                       		dc.w Sonic_Hurt-Sonic_Index
000150F6 0000                       		dc.w Sonic_Death-Sonic_Index
000150F8 0000                       		dc.w Sonic_ResetLevel-Sonic_Index
000150FA                            ; ===========================================================================
000150FA                            
000150FA                            Sonic_Main:	; Routine 0
000150FA 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
00015100 5428 0024                  		addq.b	#2,obRoutine(a0)
00015104 117C 0013 0016             		move.b	#$13,obHeight(a0)
0001510A 117C 0009 0017             		move.b	#9,obWidth(a0)
00015110 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00015118 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001511E 317C 0100 0018             		move.w	#$100,obPriority(a0)
00015124 117C 0018 0014             		move.b	#$18,obActWid(a0)
0001512A 117C 0004 0001             		move.b	#4,obRender(a0)
00015130 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; Sonic's top speed
00015136 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; Sonic's acceleration
0001513C 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; Sonic's deceleration
00015142 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
00015148 11FC 0000 FE19             		move.b	#0,(Super_Sonic_flag).w
0001514E                            		
0001514E                            Sonic_Control:    ; Routine 2
0001514E 4A38 FF8B                   		tst.b	($FFFFFF8B).w
00015152 6700 0000                  		beq.w	@cont    
00015156 6100                       		bsr.s    Sonic_PanCamera    ; ++add this++
00015158                             
00015158                            	@cont: 
00015158 4A78 FFFA                  		tst.w    (f_debugmode).w    ; is debug cheat enabled?
0001515C 6700                       		beq.s    loc_12C58    ; if not, branch
0001515E 0838 0004 F605             		btst    #bitB,(v_jpadpress1).w ; is button B pressed?
00015164 6700                       		beq.s    loc_12C58    ; if not, branch
00015166 31FC 0001 FE08             		move.w    #1,(v_debuguse).w ; change Sonic into a ring/item
0001516C 4238 F7CC                  		clr.b    (f_lockctrl).w
00015170 4E75                       		rts
00015172                            		
00015172                            		include    "_incObj\Sonic PanCamera.asm"    ; ++add this++
00015172                            ; ---------------------------------------------------------------------------
00015172                            ; Subroutine to    horizontally pan the camera view ahead of the player
00015172                            ; (Ported from the US version of Sonic CD's "R11A__.MMD" by Nat The Porcupine)
00015172                            ; ---------------------------------------------------------------------------
00015172                            
00015172                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00015172                            
00015172                            
00015172                            Sonic_PanCamera:
00015172 3238 F7A0                          move.w    (v_camera_pan).w,d1        ; get the current camera pan value
00015176 3028 0020                          move.w    obInertia(a0),d0        ; get sonic's inertia
0001517A 6A00                               bpl.s    @abs_inertia            ; if sonic's inertia is positive, branch ahead
0001517C 4440                               neg.w    d0                        ; otherwise, we negate it to get the absolute value
0001517E                            
0001517E                                @abs_inertia:
0001517E                            
0001517E                            ; These lines were intended to prevent the Camera from panning while
0001517E                            ; going up the very first giant ramp in Palmtree Panic Zone Act 1.
0001517E                            ; However, given that no such object exists in Sonic 1, I just went
0001517E                            ; ahead and commented these out.
0001517E                                    ;tst.b	($FFFFF5C2).w               ; is sonic going up a giant ramp in PPZ?
0001517E                                   ; bne.s	@reset_pan                   ; if not, branch
0001517E                                    ;cmpi.w 	#$1B00,obX(a0)            ; is sonic's x position lower than $1B00?
0001517E                                    ;bcs.s    @reset_pan                ; if so, branch
0001517E                            
0001517E                            ; These lines aren't part of the original routine; I added them myself.
0001517E                            ; If you've ported the Spin Dash, uncomment the following lines of code
0001517E                            ; to allow the camera to pan ahead while charging the Spin Dash:
0001517E 4A28 0039                          tst.b    $39(a0)                    ; is sonic charging up a spin dash?
00015182 6700                               beq.s    @skip                    ; if not, branch
00015184 0828 0000 0022                     btst    #0,obStatus(a0)            ; check the direction that sonic is facing
0001518A 6600                               bne.s    @pan_right                ; if he's facing right, pan the camera to the right
0001518C 6000                               bra.s    @pan_left                ; otherwise, pan the camera to the left
0001518E                            
0001518E                                @skip:
0001518E 0C40 0600                          cmpi.w    #$600,d0                ; is sonic's inertia greater than $600
00015192 6500                               bcs.s    @reset_pan                ; if not, recenter the screen (if needed)
00015194 4A68 0020                          tst.w    obInertia(a0)            ; otherwise, check the direction of inertia (by subtracting it from 0)
00015198 6A00                               bpl.s    @pan_left                ; if the result was positive, then inertia was negative, so we pan the screen left
0001519A                            
0001519A                                @pan_right:
0001519A 5441                               addq.w    #2,d1                    ; add 2 to the pan value
0001519C 0C41 00E0                          cmpi.w    #224,d1                    ; is the pan value greater than 224 pixels?
000151A0 6500                               bcs.s    @update_pan                ; if not, branch
000151A2 323C 00E0                          move.w    #224,d1                    ; otherwise, cap the value at the maximum of 224 pixels
000151A6 6000                               bra.s    @update_pan                ; branch
000151A8                            ; ---------------------------------------------------------------------------
000151A8                            
000151A8                                @pan_left:
000151A8 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
000151AA 0C41 0060                          cmpi.w    #96,d1                    ; is the pan value less than 96 pixels?
000151AE 6400                               bcc.s    @update_pan                ; if not, branch
000151B0 323C 0060                          move.w    #96,d1                    ; otherwise, cap the value at the minimum of 96 pixels
000151B4 6000                               bra.s    @update_pan                ; branch
000151B6                            ; ---------------------------------------------------------------------------
000151B6                            
000151B6                                @reset_pan:
000151B6 0C41 00A0                          cmpi.w    #160,d1                    ; is the pan value 160 pixels?
000151BA 6700                               beq.s    @update_pan                ; if so, branch
000151BC 6400                               bcc.s    @reset_left                ; otherwise, branch if it greater than 160
000151BE                                 
000151BE                                @reset_right:
000151BE 5441                               addq.w    #2,d1                    ; add 2 to the pan value
000151C0 6000                               bra.s    @update_pan                ; branch
000151C2                            ; ---------------------------------------------------------------------------
000151C2                            
000151C2                                @reset_left:
000151C2 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
000151C4                            
000151C4                                @update_pan:
000151C4 31C1 F7A0                          move.w    d1,(v_camera_pan).w        ; update the camera pan value
000151C8 4E75                               rts                                ; return
000151CA                                 
000151CA                            ; End of function Sonic_PanCamera
000151CA                            
000151CA                            
000151CA                            ; ===========================================================================
000151CA                            
000151CA                            loc_12C58:
000151CA 4A38 F7CC                  		tst.b	(f_lockctrl).w	; are controls locked?
000151CE 6600                       		bne.s	loc_12C64	; if yes, branch
000151D0 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w ; enable joypad control
000151D6                            
000151D6                            loc_12C64:
000151D6 0838 0000 F7C8             		btst	#0,(f_lockmulti).w ; are controls locked?
000151DC 6600                       		bne.s	loc_12C7E	; if yes, branch
000151DE 7000                       		moveq	#0,d0
000151E0 1028 0022                  		move.b	obStatus(a0),d0
000151E4 0240 0006                  		andi.w	#6,d0
000151E8 323B 0000                  		move.w	Sonic_Modes(pc,d0.w),d1
000151EC 4EBB 1000                  		jsr	Sonic_Modes(pc,d1.w)
000151F0                            
000151F0                            loc_12C7E:
000151F0 6100                       		bsr.s	Sonic_Display
000151F2 6100 0000                  		bsr.w	Sonic_Super
000151F6 6100 0000                  		bsr.w	Sonic_RecordPosition
000151FA 6100 0000                  		bsr.w	Sonic_Water
000151FE 1178 F768 0036             		move.b	(v_anglebuffer).w,$36(a0)
00015204 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
0001520A 4A38 F7C7                  		tst.b	(f_wtunnelmode).w
0001520E 6700                       		beq.s	loc_12CA6
00015210 4A28 001C                  		tst.b	obAnim(a0)
00015214 6600                       		bne.s	loc_12CA6
00015216 1168 001D 001C             		move.b	obNextAni(a0),obAnim(a0)
0001521C                            
0001521C                            loc_12CA6:
0001521C 6100 0000                  		bsr.w	Sonic_Animate
00015220 4A38 F7C8                  		tst.b	(f_lockmulti).w
00015224 6B00                       		bmi.s	loc_12CB6
00015226 4EB9 0000 0000             		jsr	(ReactToItem).l
0001522C                            
0001522C                            loc_12CB6:
0001522C 6100 0000                  		bsr.w	Sonic_Loops
00015230 6100 0000                  		bsr.w	Sonic_LoadGfx
00015234 4E75                       		rts	
00015236                            ; ===========================================================================
00015236 0000                       Sonic_Modes:	dc.w Sonic_MdNormal-Sonic_Modes
00015238 0000                       		dc.w Sonic_MdJump-Sonic_Modes
0001523A 0000                       		dc.w Sonic_MdRoll-Sonic_Modes
0001523C 0000                       		dc.w Sonic_MdJump2-Sonic_Modes
0001523E                            ; ---------------------------------------------------------------------------
0001523E                            ; Music	to play	after invincibility wears off
0001523E                            ; ---------------------------------------------------------------------------
0001523E                            MusicList2:
0001523E 00                         		dc.b bgm_GHZ
0001523F 00                         		dc.b bgm_LZ
00015240 00                         		dc.b bgm_MZ
00015241 00                         		dc.b bgm_SLZ
00015242 00                         		dc.b bgm_SYZ
00015243 00                         		dc.b bgm_SBZ
00015244                            		; The ending doesn't get an entry
00015244                            		even
00015244                            
00015244                            		include	"_incObj\Sonic Display.asm"
00015244                            ; ---------------------------------------------------------------------------
00015244                            ; Subroutine to display Sonic and set music
00015244                            ; ---------------------------------------------------------------------------
00015244                            
00015244                            Sonic_Display:
00015244 3028 0030                  		move.w    flashtime(a0),d0
00015248 6700                       		beq.s    @showAfterImage
0001524A 5368 0030                  		subq.w    #1,flashtime(a0)
0001524E E648                               	lsr.w    #3,d0
00015250 6400                               	bcc.s    @chkinvincible
00015252                            
00015252                            	@showAfterImage:
00015252 3028 0020                          	move.w    obInertia(a0),d0            ; get inertia
00015256 4A40                       		tst.w    d0                    ; is inertia greater than 0?
00015258 6C00                       		bge.s    @AfterImage_Start    ; if yes, don't negate it
0001525A 4440                       		neg        d0                    ; if not, negate it
0001525C                            
0001525C                            	@AfterImage_Start:        
0001525C 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
00015260 6700                       		beq.s	@display	; if not, don't show the After Image
00015262                            		;cmpi.w    #$900,d0	; is the sonic inertia greater than A00?
00015262                            		;blt.s    @display	; if not, don't show the After Image
00015262                            	
00015262                            	@AfterImage_Start2:    
00015262 6100 A8B4                          	bsr.w    FindFreeObj    ; search a free space in object RAM
00015266 6600                               	bne.s    @display    ; if not have, don't load the After Image
00015268 12BC 0010                          	move.b  #$10,0(a1)        ; load after-image object
0001526C 2368 0004 0004                     	move.l    obMap(a0),obMap(a1)        ; copy Sonic mappings to after-image mappings
00015272 3368 0008 0008                     	move.w    obX(a0),obX(a1)        ; copy Sonic x-pos to after-image x-pos
00015278 3368 000C 000C                     	move.w    obY(a0),obY(a1)    ; copy Sonic y-pos to after-image y-pos
0001527E                            
0001527E                                	@display:
0001527E 4EB9 0000 F57E                     	jsr    (DisplaySprite).l
00015284                            
00015284                            	@chkinvincible:
00015284 4A38 FE2D                  		tst.b	(v_invinc).w	; does Sonic have invincibility?
00015288 6700                       		beq.s	@chkshoes	; if not, branch
0001528A 0C38 0001 FE19             		cmpi.b	 #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
00015290 6700 0000                          beq		 @exit		
00015294 4A68 0032                  		tst.w	invtime(a0)	; check	time remaining for invinciblity
00015298 6700                       		beq.s	@chkshoes	; if no	time remains, branch
0001529A 5368 0032                  		subq.w	#1,invtime(a0)	; subtract 1 from time
0001529E 6600                       		bne.s	@chkshoes
000152A0 4A38 F7AA                  		tst.b	(f_lockscreen).w
000152A4 6600                       		bne.s	@removeinvincible
000152A6 0C78 000C FE14             		cmpi.w	#$C,(v_air).w
000152AC 6500                       		bcs.s	@removeinvincible	
000152AE 0C38 0001 F7AA             		cmpi.b	#$1,(f_lockscreen).w	
000152B4 6700                       		beq.s	@removeinvincible	
000152B6 0C38 0001 FE2E             		cmpi.b	#$1,(v_shoes).w	; does Sonic have speed shoes?
000152BC 6600                       		bne.s	@haveshoes	; if no, branch, and load regular stage music
000152BE 103C 008B                  		move.b	#$8B,d0		; if yes, load regular speed shoes music
000152C2 6000                       		bra.s	@playtune
000152C4                            		
000152C4                            @haveshoes:		
000152C4 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
000152C8                            
000152C8                            @playtune: 
000152C8 4EB9 0000 129A             		jsr	(PlaySound).l    ; play normal music
000152CE                            
000152CE                            	@removeinvincible:
000152CE 11FC 0000 FE2D             		move.b	#0,(v_invinc).w ; cancel invincibility
000152D4                            
000152D4                            	@chkshoes:
000152D4 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
000152D8 6700                       		beq.s	@exit		; if not, branch
000152DA 0C38 0001 FE19             		cmpi.b	 #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
000152E0 6700 0000                          beq		 @exit			
000152E4 4A68 0034                  		tst.w	shoetime(a0)	; check	time remaining
000152E8 6700                       		beq.s	@exit
000152EA 5368 0034                  		subq.w	#1,shoetime(a0)	; subtract 1 from time
000152EE 6600                       		bne.s	@exit
000152F0 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
000152F6 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
000152FC 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
00015302 11FC 0000 FE2E             		move.b	#0,(v_shoes).w	; cancel speed shoes
00015308 0C38 0001 F7AA             		cmpi.b	#$1,(f_lockscreen).w	
0001530E 6700                       		beq.s	@exit
00015310 0C38 0001 FE2D             		cmpi.b	#$1,($FFFFFE2D).w	; does Sonic have invincibility?
00015316 6600                       		bne.s	@isinvincible	; if no, branch, and load regular stage music
00015318 103C 0087                  		move.b	#$87,d0		; if yes, load regular invincibility music
0001531C 6000                       		bra.b	@playtune2
0001531E                            @isinvincible:		
0001531E 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
00015322                            @playtune2:
00015322 4EB9 0000 129A             		jsr	(PlaySound).l    ; play normal music
00015328                            		
00015328                            	@exit:
00015328 4E75                       		rts	
00015328 4E75                       		rts	
0001532A                            		include	"_incObj\Sonic RecordPosition.asm"
0001532A                            ; ---------------------------------------------------------------------------
0001532A                            ; Subroutine to	record Sonic's previous positions for invincibility stars
0001532A                            ; ---------------------------------------------------------------------------
0001532A                            
0001532A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001532A                            
0001532A                            
0001532A                            Sonic_RecordPosition:
0001532A 3038 F7A8                  		move.w	(v_trackpos).w,d0
0001532E 43F8 CB00                  		lea	(v_tracksonic).w,a1
00015332 43F1 0000                  		lea	(a1,d0.w),a1
00015336 32E8 0008                  		move.w	obX(a0),(a1)+
0001533A 32E8 000C                  		move.w	obY(a0),(a1)+
0001533E 5838 F7A9                  		addq.b	#4,(v_trackbyte).w
00015342 4E75                       		rts	
00015344                            ; End of function Sonic_RecordPosition
00015344                            ; End of function Sonic_RecordPosition
00015344                            		include	"_incObj\Sonic Water.asm"
00015344                            ; ---------------------------------------------------------------------------
00015344                            ; Subroutine for Sonic when he's underwater
00015344                            ; ---------------------------------------------------------------------------
00015344                            
00015344                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015344                            
00015344                            
00015344                            Sonic_Water:
00015344 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w	;TIS is level MZ?
0001534A 6700                       		beq.s	WaterTagforMZ	; if yes, branch
0001534C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level LZ?
00015352 6700                       		beq.s	Sonic_Water_LZ	; if yes, branch
00015354                            
00015354                            	Sonic_Water_Exit:
00015354 4E75                       		rts	
00015356                            ; ===========================================================================
00015356                            
00015356                            	Sonic_Water_LZ:
00015356 3038 F646                  		move.w	(v_waterpos1).w,d0
0001535A B068 000C                  		cmp.w	obY(a0),d0	; is Sonic above the water?
0001535E 6C00 0000                  		bge.w	Abovewater	; if yes, branch
00015362 6000 0000                  		bra	WaterStatus
00015366                            	WaterTagforMZ:
00015366 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
0001536C 6700 0000                  		beq.w	Abovewater	; if yes, branch
00015370                            		;move.w #$F,d0             ;TIS Length ($F = full line)
00015370                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
00015370                                ;    	lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
00015370                            	;	jsr	Palload_Loop
00015370                            	WaterStatus:
00015370 08E8 0006 0022             		bset	#6,obStatus(a0)
00015376 6600 FFDC                  		bne.w	Sonic_Water_Exit
0001537A 6100 0000                  		bsr.w	ResumeMusic
0001537E 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
00015384 11FC 000A D340             		move.b	#id_DrownCount,(v_objspace+$340).w ; load bubbles object from Sonic's mouth
0001538A 11FC 0081 D368             		move.b	#$81,(v_objspace+$340+obSubtype).w
00015390 31FC 0300 F760             		move.w	#$300,(v_sonspeedmax).w ; change Sonic's top speed
00015396 31FC 0006 F762             		move.w	#6,(v_sonspeedacc).w ; change Sonic's acceleration
0001539C 31FC 0040 F764             		move.w	#$40,(v_sonspeeddec).w ; change Sonic's deceleration
000153A2 4A38 FE19                  		tst.b	(Super_Sonic_flag).w	; Is Sonic Super?
000153A6 6700                       		beq.s	@Skip			; If not branch
000153A8 31FC 0500 F760             		move.w	#$500,(v_sonspeedmax).w
000153AE 31FC 0018 F762             		move.w	#$18,(v_sonspeedacc).w
000153B4 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w
000153BA                            @Skip		
000153BA E0E8 0010                  		asr	obVelX(a0)
000153BE E0E8 0012                  		asr	obVelY(a0)
000153C2 E0E8 0012                  		asr	obVelY(a0)	; slow Sonic
000153C6 6700 FF8C                  		beq.w	Sonic_Water_Exit		; branch if Sonic stops moving
000153CA                            		;move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000153CA 31FC 0100 D1DC                     	move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
000153DA 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
000153E0 6600 0000                  		bne.w	@return
000153E4                            		
000153E4                            		
000153E4                            	@return:
000153E4 4E75                       		rts
000153E6                            ; ===========================================================================
000153E6                            
000153E6                            Abovewater:
000153E6 08A8 0006 0022             		bclr	#6,obStatus(a0)
000153EC 6700 FF66                  		beq.w	Sonic_Water_Exit
000153F0 6100 0000                  		bsr.w	ResumeMusic
000153F4 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000153FA                            
000153FA 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
00015400 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
00015406 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
0001540C 4A38 FE19                  		tst.b	(Super_Sonic_flag).w	; Is Sonic Super?
00015410 6700                       		beq.s	@Skip			; If not branch
00015412 31FC 0A00 F760             		move.w	#$A00,(v_sonspeedmax).w
00015418 31FC 0030 F762             		move.w	#$30,(v_sonspeedacc).w
0001541E 31FC 0100 F764             		move.w	#$100,(v_sonspeeddec).w
00015424                            @Skip		
00015424 E1E8 0012                  		asl	obVelY(a0)
00015428 6700 FF2A                  		beq.w	Sonic_Water_Exit
0001542C 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
00015432 0C68 F000 0012             		cmpi.w	#-$1000,obVelY(a0)
00015438 6E00                       		bgt.s	@belowmaxspeed
0001543A 317C F000 0012             		move.w	#-$1000,obVelY(a0) ; set maximum speed on leaving water
00015440                            
00015440                            	@belowmaxspeed:
0001544A                            ; End of function Sonic_Water
0001544A                            ; End of function Sonic_Water
0001544A                            		include "_incObj\03 Hangable Sprite.asm"
0001544A                            ; ===========================================================================
0001544A                            ; ----------------------------------------------------------------------------
0001544A                            ; Object 03 - Invisible sprite that you can hang on to
0001544A                            ; ----------------------------------------------------------------------------
0001544A                            ; Sprite_2C92C:
0001544A                            Obj03:
0001544A 7000                       	moveq    #0,d0
0001544C 1028 0024                      move.b    obRoutine(a0),d0            ;just use s1 version of this variable
00015450 323B 0000                      move.w    Obj03_Index(pc,d0.w),d1
00015454 4EFB 1000                      jmp    Obj03_Index(pc,d1.w)
00015458                            ; ===========================================================================
00015458                            ; off_2C93A:
00015458                            Obj03_Index:
00015458 0000                           dc.w Obj03_Main-Obj03_Index
0001545A 0000                               dc.w Obj03_Init-Obj03_Index
0001545C                            ; ===========================================================================
0001545C                            ; loc_2C93E:
0001545C                            Obj03_Init:
0001545C 5428 0024                      addq.b    #2,obRoutine(a0)        ;just use s1 version of this variable
00015460 117C 0004 0001                 move.b    #4,obRender(a0)    ;just use s1 version of this variable
00015466 117C 0018 0014                 move.b    #$18,obActWid(a0)    ;just use s1 version of this variable
0001546C 317C 0200 0018                 move.w    #$200,obPriority(a0)            ;just use s1 version of this variable
00015472                            ; loc_2C954:
00015472                            Obj03_Main:
00015472 45E8 0030                      lea    $30(a0),a2
00015476 43F8 D000                      lea    (v_player).w,a1 ; a1=character
0001547A 3038 F604                      move.w    (v_jpadhold1).w,d0 			;S1 has same ram address for controller as S2 just different variable name like on the line above
0001547E 6100                           bsr.s    Obj03_Check
00015480                            ;    lea    (Sidekick).w,a1 ; a1=character  ;disabled
00015480                            ;    addq.w    #1,a2                          ;disabled
00015480                            ;    move.w    (Ctrl_2).w,d0                    ;disabled
00015480                            ;    bsr.s    Obj03_Check         	;disabled
00015480 4EF9 0000 0000             	jmp		bonu_chkdel
00015486                            ; ===========================================================================
00015486                            ; loc_2C972:
00015486                            Obj03_Check:
00015486 4A12                       		tst.b	(a2)
00015488 6700                       		beq.s	loc_2C9A0
0001548A 0200 0070                  		andi.b	#btnABC,d0
0001548E 6700 0000                  		beq.w	Obj03_Check_End
00015492 4238 F7C8                  		clr.b	f_lockmulti.w
00015496 4212                       		clr.b	(a2)
00015498 157C 0012 0002             		move.b	#$12,2(a2)
0001549E 0240 0F00                  		andi.w	#$F00,d0
000154A2 6700                       		beq.s	loc_2C954
000154A4 157C 003C 0002             		move.b	#$3C,2(a2)
000154AA                            	
000154AA                            loc_2C954:
000154AA 337C FD00 0012             		move.w	#-$300,y_vel(a1)
000154B0 6000 0000                  		bra.w	Obj03_Check_End
000154B4                            ; ===========================================================================
000154B4                            
000154B4                            loc_2C9A0:
000154B4 4A2A 0002                  		tst.b	2(a2)
000154B8 6700                       		beq.s	loc_2C972
000154BA 532A 0002                  		subq.b	#1,2(a2)
000154BE 6600 0000                  		bne.w	Obj03_Check_End
000154C2                            
000154C2                            loc_2C972:
000154C2 3029 0008                  		move.w	obX(a1),d0
000154C6 9068 0008                  		sub.w	obX(a0),d0
000154CA 0640 0018                  		addi.w	#$18,d0
000154CE 0C40 0030                  		cmpi.w	#$30,d0
000154D2 6400 0000                  		bhs.w	Obj03_Check_End
000154D6 3229 000C                  		move.w	obY(a1),d1
000154DA 9268 000C                  		sub.w	obY(a0),d1
000154DE 0C41 0010                  		cmpi.w	#$10,d1
000154E2 6400 0000                  		bhs.w	Obj03_Check_End
000154E6 4A38 F7C8                  		tst.b	f_lockmulti.w
000154EA 6B00                       		bmi.s	Obj03_Check_End
000154EC 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
000154F2 6400                       		bhs.s	Obj03_Check_End
000154F4 4A78 FFFA                  		tst.w	(f_debugmode).w
000154F8 6600                       		bne.s	Obj03_Check_End
000154FA 4269 0010                  		clr.w	x_vel(a1)
000154FE 4269 0012                  		clr.w	y_vel(a1)
00015502 4269 0020                  		clr.w	obInertia(a1)
00015506 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001550C 137C 0000 001C             		move.b	#id_Hang2,obAnim(a1)
00015512 11FC 0001 F7C8             		move.b	#1,f_lockmulti.w
00015518 14BC 0001                  		move.b	#1,(a2)
0001551C                            
0001551C                            ; return_2CA08:
0001551C                            Obj03_Check_End:
0001551C 4E75                       		rts
0001551C 4E75                       		rts
0001551E                            
0001551E                            ; ===========================================================================
0001551E                            ; ---------------------------------------------------------------------------
0001551E                            ; Modes	for controlling	Sonic
0001551E                            ; ---------------------------------------------------------------------------
0001551E                            
0001551E                            Sonic_MdNormal:
0001551E                            		;bsr.w	Sonic_Peelout
0001551E                            		;bsr.w	Sonic_SpinDash
0001551E 6100 0000                  		bsr.w	Sonic_Jump
00015522 6100 0000                  		bsr.w	Sonic_SlopeResist
00015526 6100 0000                  		bsr.w	Sonic_Move
0001552A 6100 0000                  		bsr.w	Sonic_Roll
0001552E 6100 0000                  		bsr.w	Sonic_LevelBound
00015532 4EB9 0000 F56A             		jsr	(SpeedToPos).l
00015538 6100 0000                  		bsr.w	Sonic_AnglePos
0001553C 6100 0000                  		bsr.w	Sonic_SlopeRepel
00015540 4E75                       		rts	
00015542                            
00015542                            ; ===========================================================================
00015542                            
00015542                            Sonic_MdJump:
00015542 6100 0000                  		bsr.w   Sonic_AirRoll
00015546 6100 0000                  		bsr.w	Sonic_JumpHeight
0001554A 6100 0000                  		bsr.w	Sonic_JumpDirection
0001554E 6100 0000                  		bsr.w	Sonic_LevelBound
00015552 4EB9 0000 F532             		jsr	(ObjectFall).l
00015558 0828 0006 0022             		btst	#6,obStatus(a0)
0001555E 6700                       		beq.s	loc_12E5C
00015560 0468 0028 0012             		subi.w	#$28,obVelY(a0)
00015566                            
00015566                            loc_12E5C:
00015566 6100 0000                  		bsr.w	Sonic_JumpAngle
0001556A 6100 0000                  		bsr.w	Sonic_Floor
0001556E 4E75                       		rts	
00015570                            ; ===========================================================================
00015570                            
00015570                            Sonic_MdRoll:
00015570 6100 0000                  		bsr.w	Sonic_Jump
00015574 6100 0000                  		bsr.w	Sonic_RollRepel
00015578 6100 0000                  		bsr.w	Sonic_RollSpeed
0001557C 6100 0000                  		bsr.w	Sonic_LevelBound
00015580 4EB9 0000 F56A             		jsr	(SpeedToPos).l
00015586 6100 0000                  		bsr.w	Sonic_AnglePos
0001558A 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001558E 4E75                       		rts	
00015590                            ; ===========================================================================
00015590                            
00015590                            Sonic_MdJump2:
00015590 6100 0000                  		bsr.w	Sonic_HomingAttack
00015594 6100 0000                  		bsr.w	Sonic_JumpHeight
00015598 6100 0000                  		bsr.w	Sonic_JumpDirection
0001559C 6100 0000                  		bsr.w	Sonic_LevelBound
000155A0 4EB9 0000 F532             		jsr	(ObjectFall).l
000155A6 0828 0006 0022             		btst	#6,obStatus(a0)
000155AC 6700                       		beq.s	loc_12EA6
000155AE 0468 0028 0012             		subi.w	#$28,obVelY(a0)
000155B4                            
000155B4                            loc_12EA6:
000155B4 6100 0000                  		bsr.w	Sonic_JumpAngle
000155B8 6100 0000                  		bsr.w	Sonic_Floor
000155BC 4E75                       		rts	
000155BE                            
000155BE                            		include	"_incObj\Sonic Move.asm"
000155BE                            ; ---------------------------------------------------------------------------
000155BE                            ; Subroutine to	make Sonic walk/run
000155BE                            ; ---------------------------------------------------------------------------
000155BE                            
000155BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155BE                            
000155BE                            
000155BE                            Sonic_Move:
000155BE 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
000155C2 3A38 F762                  		move.w	(v_sonspeedacc).w,d5
000155C6 3838 F764                  		move.w	(v_sonspeeddec).w,d4
000155CA 4A38 F7CA                  		tst.b	(f_jumponly).w
000155CE 6600 0000                  		bne.w	loc_12FEE
000155D2 4A68 003E                  		tst.w	$3E(a0)
000155D6 6600 0000                  		bne.w	Sonic_ResetScr
000155DA 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
000155E0 6700                       		beq.s	@notleft	; if not, branch
000155E2 6100 0000                  		bsr.w	Sonic_MoveLeft
000155E6                            
000155E6                            	@notleft:
000155E6 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
000155EC 6700                       		beq.s	@notright	; if not, branch
000155EE 6100 0000                  		bsr.w	Sonic_MoveRight
000155F2                            
000155F2                            	@notright:
000155F2 1028 0026                  		move.b	obAngle(a0),d0
000155F6 0600 0020                  		addi.b	#$20,d0
000155FA 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
000155FE 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
00015602 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
00015606 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
0001560A 08A8 0005 0022             		bclr	#5,obStatus(a0)
00015610 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
00015616 0828 0003 0022             		btst	#3,obStatus(a0)
0001561C 6700                       		beq.s	Sonic_Balance
0001561E 7000                       		moveq	#0,d0
00015620 1028 003D                  		move.b	$3D(a0),d0
00015624 ED48                       		lsl.w	#6,d0
00015626 43F8 D000                  		lea	(v_objspace).w,a1
0001562A 43F1 0000                  		lea	(a1,d0.w),a1
0001562E 4A29 0022                  		tst.b	obStatus(a1)
00015632 6B00                       		bmi.s	Sonic_LookUp
00015634 7200                       		moveq	#0,d1
00015636 1229 0014                  		move.b	obActWid(a1),d1
0001563A 3401                       		move.w	d1,d2
0001563C D442                       		add.w	d2,d2
0001563E 5942                       		subq.w	#4,d2
00015640 D268 0008                  		add.w	obX(a0),d1
00015644 9269 0008                  		sub.w	obX(a1),d1
00015648 0C41 0004                  		cmpi.w	#4,d1
0001564C 6D00                       		blt.s	loc_12F6A
0001564E B242                       		cmp.w	d2,d1
00015650 6C00                       		bge.s	loc_12F5A
00015652 6000                       		bra.s	Sonic_LookUp
00015654                            ; ===========================================================================
00015654                            
00015654                            Sonic_Balance:
00015654 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0001565A 0C41 000C                  		cmpi.w	#$C,d1
0001565E 6D00                       		blt.s	Sonic_LookUp
00015660 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00015666 6600                       		bne.s	loc_12F62
00015668                            
00015668                            loc_12F5A:
00015668 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001566E 6000                       		bra.s	loc_12F70
00015670                            ; ===========================================================================
00015670                            
00015670                            loc_12F62:
00015670 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00015676 6600                       		bne.s	Sonic_LookUp
00015678                            
00015678                            loc_12F6A:
00015678 08E8 0000 0022             		bset	#0,obStatus(a0)
0001567E                            
0001567E                            loc_12F70:
0001567E 117C 0000 001C             		move.b	#id_Balance,obAnim(a0) ; use "balancing" animation
00015684 6000 0000                  		bra.w	Sonic_ResetScr
00015688                            ; ===========================================================================
00015688                            
00015688                            Sonic_LookUp:
00015688 0838 0000 F602             		btst	#bitUp,(v_jpadhold2).w ; is up being pressed?
0001568E 6700                       		beq.s	Sonic_Duck	; if not, branch
00015690 117C 0000 001C             		move.b	#id_LookUp,obAnim(a0) ; use "looking up" animation
00015696 0C78 00C8 F73E             		cmpi.w	#$C8,(v_lookshift).w
0001569C 6700                       		beq.s	loc_12FC2
0001569E 5478 F73E                  		addq.w	#2,(v_lookshift).w
000156A2 6000                       		bra.s	loc_12FC2
000156A4                            ; ===========================================================================
000156A4                            
000156A4                            Sonic_Duck:
000156A4 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
000156AA 6700                       		beq.s	Sonic_ResetScr	; if not, branch
000156AC 117C 0000 001C             		move.b	#id_Duck,obAnim(a0) ; use "ducking" animation
000156B2 0C78 0008 F73E             		cmpi.w	#8,(v_lookshift).w
000156B8 6700                       		beq.s	loc_12FC2
000156BA 5578 F73E                  		subq.w	#2,(v_lookshift).w
000156BE 6000                       		bra.s	loc_12FC2
000156C0                            ; =============================================
000156C0                            ; ===========================================================================
000156C0                            
000156C0                            Sonic_ResetScr:
000156C0 11FC 0000 C903             		move.b	#0,($FFFFC903).w
000156C6                            		
000156C6                            Sonic_ResetScr_Part2:
000156C6 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000156CC 6700                       		beq.s	loc_12FC2	; if yes, branch
000156CE 6400                       		bcc.s	loc_12FBE
000156D0 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000156D4                            
000156D4                            loc_12FBE:
000156D4 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
000156D8                            
000156D8                            loc_12FC2:
000156D8 1038 F602                  		move.b	(v_jpadhold2).w,d0
000156DC 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	pressed?
000156E0 6600                       		bne.s	loc_12FEE	; if yes, branch
000156E2 3028 0020                  		move.w	obInertia(a0),d0
000156E6 6700                       		beq.s	loc_12FEE
000156E8 6B00                       		bmi.s	loc_12FE2
000156EA 9045                       		sub.w	d5,d0
000156EC 6400                       		bcc.s	loc_12FDC
000156EE 303C 0000                  		move.w	#0,d0
000156F2                            
000156F2                            loc_12FDC:
000156F2 3140 0020                  		move.w	d0,obInertia(a0)
000156F6 6000                       		bra.s	loc_12FEE
000156F8                            ; ===========================================================================
000156F8                            
000156F8                            loc_12FE2:
000156F8 D045                       		add.w	d5,d0
000156FA 6400                       		bcc.s	loc_12FEA
000156FC 303C 0000                  		move.w	#0,d0
00015700                            
00015700                            loc_12FEA:
00015700 3140 0020                  		move.w	d0,obInertia(a0)
00015704                            
00015704                            loc_12FEE:
00015704 4A28 0039                  		tst.b	$39(a0) 	;Peelout
00015708 6600                       		bne.s	loc_1300C 	;Peelout
0001570A 1028 0026                  		move.b	obAngle(a0),d0
0001570E 4EB9 0000 3CCA             		jsr	(CalcSine).l
00015714 C3E8 0020                  		muls.w	obInertia(a0),d1
00015718 E081                       		asr.l	#8,d1
0001571A 3141 0010                  		move.w	d1,obVelX(a0)
0001571E C1E8 0020                  		muls.w	obInertia(a0),d0
00015722 E080                       		asr.l	#8,d0
00015724 3140 0012                  		move.w	d0,obVelY(a0)
00015728                            
00015728                            loc_1300C:
00015728 1028 0026                  		move.b	obAngle(a0),d0
0001572C 0600 0040                  		addi.b	#$40,d0
00015730 6B00                       		bmi.s	locret_1307C
00015732 123C 0040                  		move.b	#$40,d1
00015736 4A68 0020                  		tst.w	obInertia(a0)
0001573A 6700                       		beq.s	locret_1307C
0001573C 6B00                       		bmi.s	loc_13024
0001573E 4441                       		neg.w	d1
00015740                            
00015740                            loc_13024:
00015740 1028 0026                  		move.b	obAngle(a0),d0
00015744 D001                       		add.b	d1,d0
00015746 3F00                       		move.w	d0,-(sp)
00015748 6100 0000                  		bsr.w	Sonic_WalkSpeed
0001574C 301F                       		move.w	(sp)+,d0
0001574E 4A41                       		tst.w	d1
00015750 6A00                       		bpl.s	locret_1307C
00015752 E141                       		asl.w	#8,d1
00015754 0600 0020                  		addi.b	#$20,d0
00015758 0200 00C0                  		andi.b	#$C0,d0
0001575C 6700                       		beq.s	loc_13078
0001575E 0C00 0040                  		cmpi.b	#$40,d0
00015762 6700                       		beq.s	loc_13066
00015764 0C00 0080                  		cmpi.b	#$80,d0
00015768 6700                       		beq.s	loc_13060
0001576A D368 0010                  		add.w	d1,obVelX(a0)
0001576E 08E8 0005 0022             		bset	#5,obStatus(a0)
00015774 317C 0000 0020             		move.w	#0,obInertia(a0)
0001577A 4E75                       		rts	
0001577C                            ; ===========================================================================
0001577C                            
0001577C                            loc_13060:
0001577C 9368 0012                  		sub.w	d1,obVelY(a0)
00015780 4E75                       		rts	
00015782                            ; ===========================================================================
00015782                            
00015782                            loc_13066:
00015782 9368 0010                  		sub.w	d1,obVelX(a0)
00015786 08E8 0005 0022             		bset	#5,obStatus(a0)
0001578C 317C 0000 0020             		move.w	#0,obInertia(a0)
00015792 4E75                       		rts	
00015794                            ; ===========================================================================
00015794                            
00015794                            loc_13078:
00015794 D368 0012                  		add.w	d1,obVelY(a0)
00015798                            
00015798                            locret_1307C:
00015798 4E75                       		rts	
0001579A                            ; End of function Sonic_Move
0001579A                            
0001579A                            
0001579A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001579A                            
0001579A                            
0001579A                            Sonic_MoveLeft:
0001579A 3028 0020                  		move.w	obInertia(a0),d0
0001579E 6700                       		beq.s	loc_13086
000157A0 6A00                       		bpl.s	loc_130B2
000157A2                            
000157A2                            loc_13086:
000157A2 08E8 0000 0022             		bset	#0,$22(a0)
000157A8 6600                       		bne.s	loc_1309A
000157AA 08A8 0005 0022             		bclr	#5,$22(a0)
000157B0 117C 0001 001D             		move.b	#1,$1D(a0)
000157B6                            
000157B6                            loc_1309A:
000157B6 9045                       		sub.w	d5,d0
000157B8 3206                       		move.w	d6,d1
000157BA 4441                       		neg.w	d1
000157BC B041                       		cmp.w	d1,d0
000157BE 6E00                       		bgt.s	loc_130A6
000157C0 D045                       		add.w	d5,d0
000157C2 B041                       		cmp.w	d1,d0
000157C4 6F00                       		ble.s	loc_130A6
000157C6 3001                       		move.w	d1,d0
000157C8                            
000157C8                            loc_130A6:
000157C8 3140 0020                  		move.w	d0,obInertia(a0)
000157CC 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
000157D2 4E75                       		rts
000157D4                            ; ===========================================================================
000157D4                            
000157D4                            loc_130B2:
000157D4 9044                       		sub.w	d4,d0
000157D6 6400                       		bcc.s	loc_130BA
000157D8 303C FF80                  		move.w	#-$80,d0
000157DC                            
000157DC                            loc_130BA:
000157DC 3140 0020                  		move.w	d0,obInertia(a0)
000157E0 1228 0026                  		move.b	obAngle(a0),d1
000157E4 0601 0020                  		addi.b	#$20,d1
000157E8 0201 00C0                  		andi.b	#$C0,d1
000157EC 6600                       		bne.s	locret_130E8
000157EE 0C40 0400                  		cmpi.w	#$400,d0
000157F2 6D00                       		blt.s	locret_130E8
000157F4 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
000157FA 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001580A 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00015810 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
00015816                            		
00015816                            locret_130E8:
00015816 4E75                       		rts	
00015818                            ; End of function Sonic_MoveLeft
00015818                            
00015818                            
00015818                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015818                            
00015818                            
00015818                            Sonic_MoveRight:
00015818 3028 0020                  		move.w	obInertia(a0),d0
0001581C 6B00                       		bmi.s	loc_13118
0001581E 08A8 0000 0022             		bclr	#0,$22(a0)
00015824 6700                       		beq.s	loc_13104
00015826 08A8 0005 0022             		bclr	#5,$22(a0)
0001582C 117C 0001 001D             		move.b	#1,$1D(a0)
00015832                            
00015832                            loc_13104:
00015832 D045                       		add.w	d5,d0
00015834 B046                       		cmp.w	d6,d0
00015836 6D00                       		blt.s	loc_1310C
00015838 9045                       		sub.w	d5,d0
0001583A B046                       		cmp.w	d6,d0
0001583C 6C00                       		bge.s	loc_1310C
0001583E 3006                       		move.w	d6,d0
00015840                            
00015840                            loc_1310C:
00015840 3140 0020                  		move.w	d0,obInertia(a0)
00015844 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
0001584A 4E75                       		rts
0001584C                            ; ===========================================================================
0001584C                            
0001584C                            loc_13118:
0001584C D044                       		add.w	d4,d0
0001584E 6400                       		bcc.s	loc_13120
00015850 303C 0080                  		move.w	#$80,d0
00015854                            
00015854                            loc_13120:
00015854 3140 0020                  		move.w	d0,obInertia(a0)
00015858 1228 0026                  		move.b	obAngle(a0),d1
0001585C 0601 0020                  		addi.b	#$20,d1
00015860 0201 00C0                  		andi.b	#$C0,d1
00015864 6600                       		bne.s	locret_1314E
00015866 0C40 FC00                  		cmpi.w	#-$400,d0
0001586A 6E00                       		bgt.s	locret_1314E
0001586C 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015872 08E8 0000 0022             		bset	#0,obStatus(a0)
00015882 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00015888 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
0001588E                            		
0001588E                            locret_1314E:
0001588E 4E75                       		rts	
00015890                            ; End of function Sonic_MoveRight
00015890                            ; End of function Sonic_MoveRight
00015890                            		include	"_incObj\Sonic RollSpeed.asm"
00015890                            ; ---------------------------------------------------------------------------
00015890                            ; Subroutine to	change Sonic's speed as he rolls
00015890                            ; ---------------------------------------------------------------------------
00015890                            
00015890                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015890                            
00015890                            
00015890                            Sonic_RollSpeed:
00015890 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
00015894 E346                       		asl.w	#1,d6
00015896 7A06                       		moveq	#6,d5	; natural roll deceleration = 1/2 normal acceleration
00015898 3838 F764                  		move.w	(v_sonspeeddec).w,d4
0001589C E444                       		asr.w	#2,d4
0001589E 4A38 F7CA                  		tst.b	(f_jumponly).w
000158A2 6600 0000                  		bne.w	loc_131CC
000158A6 4A68 003E                  		tst.w	$3E(a0)
000158AA 6600                       		bne.s	@notright
000158AC 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
000158B2 6700                       		beq.s	@notleft	; if not, branch
000158B4 6100 0000                  		bsr.w	Sonic_RollLeft
000158B8                            
000158B8                            	@notleft:
000158B8 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
000158BE 6700                       		beq.s	@notright	; if not, branch
000158C0 6100 0000                  		bsr.w	Sonic_RollRight
000158C4                            
000158C4                            	@notright:
000158C4 3028 0020                  		move.w	obInertia(a0),d0
000158C8 6700                       		beq.s	loc_131AA
000158CA 6B00                       		bmi.s	loc_1319E
000158CC 9045                       		sub.w	d5,d0
000158CE 6400                       		bcc.s	loc_13198
000158D0 303C 0000                  		move.w	#0,d0
000158D4                            
000158D4                            loc_13198:
000158D4 3140 0020                  		move.w	d0,obInertia(a0)
000158D8 6000                       		bra.s	loc_131AA
000158DA                            ; ===========================================================================
000158DA                            
000158DA                            loc_1319E:
000158DA D045                       		add.w	d5,d0
000158DC 6400                       		bcc.s	loc_131A6
000158DE 303C 0000                  		move.w	#0,d0
000158E2                            
000158E2                            loc_131A6:
000158E2 3140 0020                  		move.w	d0,obInertia(a0)
000158E6                            
000158E6                            loc_131AA:
000158E6 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
000158EA 6600                       		bne.s	loc_131CC	; if yes, branch
000158EC 08A8 0002 0022             		bclr	#2,obStatus(a0)
000158F2 117C 0013 0016             		move.b	#$13,obHeight(a0)
000158F8 117C 0009 0017             		move.b	#9,obWidth(a0)
000158FE 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
00015904 5B68 000C                  		subq.w	#5,obY(a0)
00015908                            
00015908                            loc_131CC:
00015908 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
0001590E 6700                       		beq.s	@cont2
00015910 6400                       		bcc.s	@cont1
00015912 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015916                            		
00015916                            @cont1:
00015916 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001591A                            		
0001591A                            @cont2:
0001591A 1028 0026                  		move.b	obAngle(a0),d0
0001591E 4EB9 0000 3CCA             		jsr	(CalcSine).l
00015924 C1E8 0020                  		muls.w	obInertia(a0),d0
00015928 E080                       		asr.l	#8,d0
0001592A 3140 0012                  		move.w	d0,obVelY(a0)
0001592E C3E8 0020                  		muls.w	obInertia(a0),d1
00015932 E081                       		asr.l	#8,d1
00015934 0C41 1000                  		cmpi.w	#$1000,d1
00015938 6F00                       		ble.s	loc_131F0
0001593A 323C 1000                  		move.w	#$1000,d1
0001593E                            
0001593E                            loc_131F0:
0001593E 0C41 F000                  		cmpi.w	#-$1000,d1
00015942 6C00                       		bge.s	loc_131FA
00015944 323C F000                  		move.w	#-$1000,d1
00015948                            
00015948                            loc_131FA:
00015948 3141 0010                  		move.w	d1,obVelX(a0)
0001594C 6000 FDDA                  		bra.w	loc_1300C
00015950                            ; End of function Sonic_RollSpeed
00015950                            
00015950                            
00015950                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015950                            
00015950                            
00015950                            Sonic_RollLeft:
00015950 3028 0020                  		move.w	obInertia(a0),d0
00015954 6700                       		beq.s	loc_1320A
00015956 6A00                       		bpl.s	loc_13218
00015958                            
00015958                            loc_1320A:
00015958 08E8 0000 0022             		bset	#0,obStatus(a0)
0001595E 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015964 4E75                       		rts	
00015966                            ; ===========================================================================
00015966                            
00015966                            loc_13218:
00015966 9044                       		sub.w	d4,d0
00015968 6400                       		bcc.s	loc_13220
0001596A 303C FF80                  		move.w	#-$80,d0
0001596E                            
0001596E                            loc_13220:
0001596E 3140 0020                  		move.w	d0,obInertia(a0)
00015972 4E75                       		rts	
00015974                            ; End of function Sonic_RollLeft
00015974                            
00015974                            
00015974                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015974                            
00015974                            
00015974                            Sonic_RollRight:
00015974 3028 0020                  		move.w	obInertia(a0),d0
00015978 6B00                       		bmi.s	loc_1323A
0001597A 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015980 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015986 4E75                       		rts	
00015988                            ; ===========================================================================
00015988                            
00015988                            loc_1323A:
00015988 D044                       		add.w	d4,d0
0001598A 6400                       		bcc.s	loc_13242
0001598C 303C 0080                  		move.w	#$80,d0
00015990                            
00015990                            loc_13242:
00015990 3140 0020                  		move.w	d0,obInertia(a0)
00015994 4E75                       		rts	
00015996                            ; End of function Sonic_RollRight
00015996                            ; End of function Sonic_RollRight
00015996                            		include	"_incObj\Sonic JumpDirection.asm"
00015996                            ; ---------------------------------------------------------------------------
00015996                            ; Subroutine to	change Sonic's direction while jumping
00015996                            ; ---------------------------------------------------------------------------
00015996                            
00015996                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015996                            
00015996                            
00015996                            Sonic_JumpDirection:
00015996 3C38 F760                  		move.w	($FFFFF760).w,d6
0001599A 3A38 F762                  		move.w	($FFFFF762).w,d5
0001599E E345                       		asl.w	#1,d5
000159A0 3028 0010                  		move.w	$10(a0),d0	
000159A4 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
000159AA 6700                       		beq.s	loc_13278; if not, branch	
000159AC 08E8 0000 0022             		bset	#0,$22(a0)	
000159B2 9045                       		sub.w	d5,d0	
000159B4 3206                       		move.w	d6,d1	
000159B6 4441                       		neg.w	d1	
000159B8 B041                       		cmp.w	d1,d0	
000159BA 6E00                       		bgt.s	loc_13278	
000159BC D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
000159BE B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
000159C0 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
000159C2 3001                       		move.w	d1,d0
000159C4                            
000159C4                            loc_13278:
000159C4 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
000159CA 6700                       		beq.s	Obj01_JumpMove; if not, branch	
000159CC 08A8 0000 0022             		bclr	#0,$22(a0)	
000159D2 D045                       		add.w	d5,d0	
000159D4 B046                       		cmp.w	d6,d0	
000159D6 6D00                       		blt.s	Obj01_JumpMove
000159D8 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
000159DA B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
000159DC 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
000159DE 3006                       		move.w	d6,d0
000159E0                            
000159E0                            Obj01_JumpMove:
000159E0 3140 0010                  		move.w	d0,obVelX(a0)	; change Sonic's horizontal speed
000159E4                            
000159E4                            Obj01_ResetScr2:
000159E4 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w ; is the screen in its default position?
000159EA 6700                       		beq.s	loc_132A4	; if yes, branch
000159EC 6400                       		bcc.s	loc_132A0
000159EE 5878 F73E                  		addq.w	#4,(v_lookshift).w
000159F2                            
000159F2                            loc_132A0:
000159F2 5578 F73E                  		subq.w	#2,(v_lookshift).w
000159F6                            
000159F6                            loc_132A4:
000159F6 0C68 FC00 0012             		cmpi.w	#-$400,obVelY(a0) ; is Sonic moving faster than -$400 upwards?
000159FC 6500                       		bcs.s	locret_132D2	; if yes, branch
000159FE 3028 0010                  		move.w	obVelX(a0),d0
00015A02 3200                       		move.w	d0,d1
00015A04 EA41                       		asr.w	#5,d1
00015A06 6700                       		beq.s	locret_132D2
00015A08 6B00                       		bmi.s	loc_132C6
00015A0A 9041                       		sub.w	d1,d0
00015A0C 6400                       		bcc.s	loc_132C0
00015A0E 303C 0000                  		move.w	#0,d0
00015A12                            
00015A12                            loc_132C0:
00015A12 3140 0010                  		move.w	d0,obVelX(a0)
00015A16 4E75                       		rts	
00015A18                            ; ===========================================================================
00015A18                            
00015A18                            loc_132C6:
00015A18 9041                       		sub.w	d1,d0
00015A1A 6500                       		bcs.s	loc_132CE
00015A1C 303C 0000                  		move.w	#0,d0
00015A20                            
00015A20                            loc_132CE:
00015A20 3140 0010                  		move.w	d0,obVelX(a0)
00015A24                            
00015A24                            locret_132D2:
00015A24 4E75                       		rts	
00015A26                            ; End of function Sonic_JumpDirection
00015A26                            ; End of function Sonic_JumpDirection
00015A26                            		include "_incObj\Sonic Peelout.asm"
00015A26                            ; ---------------------------------------------------------------------------
00015A26                            ; Subroutine to make Sonic perform a peelout
00015A26                            ; ---------------------------------------------------------------------------
00015A26                            ; If you use this makes sure to search for ;Peelout in Sonic1.asm
00015A26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A26                            
00015A26                            Sonic_Peelout:
00015A26 0828 0001 0039             		btst	#1,$39(a0)
00015A2C 6600                       		bne.s	SCDPeelout_Launch
00015A2E 0C28 0007 001C             		cmpi.b	#7,$1C(a0) ;check to see if your looking up
00015A34 6600                       		bne.s	@return
00015A36 1038 F603                  		move.b	($FFFFF603).w,d0
00015A3A 0200 0070                  		andi.b	#%01110000,d0
00015A3E 6700 0000                  		beq.w	@return
00015A42 117C 0001 001C             		move.b	#1,$1C(a0)
00015A48 317C 0000 003A             		move.w	#0,$3A(a0)
00015A4E 303C 00D2                  		move.w	#$D2,d0
00015A52 4EB9 0000 12A0             		jsr	(PlaySound_Special).l 		; Play peelout charge sound
00015A58                            	;	sfx 	sfx_PeeloutCharge 		; These are if you use AMPS
00015A58 588F                       		addq.l	#4,sp
00015A5A 08E8 0001 0039             		bset	#1,$39(a0)
00015A60                            		
00015A60 4268 0020                  		clr.w	obInertia(a0)
00015A64                             
00015A64 6100 0000                  		bsr.w	Sonic_LevelBound
00015A68 6100 0000                  		bsr.w	Sonic_AnglePos
00015A6C                             
00015A6C                            	@return:
00015A6C 4E75                       		rts	
00015A6E                            ; ---------------------------------------------------------------------------
00015A6E                             
00015A6E                            SCDPeelout_Launch:
00015A6E 0828 0001 0039             		btst	#1,$39(a0)
00015A74 1038 F602                  		move.b	($FFFFF602).w,d0
00015A78 0800 0000                  		btst	#0,d0
00015A7C 6600 0000                  		bne.w	SCDPeelout_Charge
00015A80 08A8 0001 0039             		bclr	#1,$39(a0)	; stop Dashing
00015A86 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)	; have we been charging long enough?
00015A8C 6600 0000                  		bne.w	SCDPeelout_Stop_Sound
00015A90 117C 0000 001C             		move.b	#0,$1C(a0)	; launches here (peelout sprites)
00015A96 317C 0001 0010             		move.w	#1,$10(a0)	; force X speed to nonzero for camera lag's benefit
00015A9C 3028 0020                  		move.w	obInertia(a0),d0
00015AA0 0440 0800                  		subi.w	#$800,d0
00015AA4 D040                       		add.w	d0,d0
00015AA6 0240 1F00                  		andi.w	#$1F00,d0
00015AAA 4440                       		neg.w	d0
00015AAC 0640 2000                  		addi.w	#$2000,d0
00015AB0 31C0 C904                  		move.w	d0,($FFFFC904).w
00015AB4 0828 0000 0022             		btst	#0,$22(a0)
00015ABA 6700                       		beq.s	@dontflip
00015ABC 4468 0020                  		neg.w	obInertia(a0)
00015AC0                             
00015AC0                            @dontflip:
00015AC0 08A8 0007 0022             		bclr	#7,$22(a0)
00015AC6 303C 00D3                  		move.w	#$D3,d0
00015ACA 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
00015AD0                            	;	sfx 	sfx_PeeloutRelease
00015AD0 1028 0026                  		move.b	obAngle(a0),d0
00015AD4 4EB9 0000 3CCA             		jsr	(CalcSine).l
00015ADA C3E8 0020                  		muls.w	obInertia(a0),d1
00015ADE E081                       		asr.l	#8,d1
00015AE0 3141 0010                  		move.w	d1,obVelX(a0)
00015AE4 C1E8 0020                  		muls.w	obInertia(a0),d0
00015AE8 E080                       		asr.l	#8,d0
00015AEA 3140 0012                  		move.w	d0,obVelY(a0)	
00015AEE 6000 0000                  		bra.w	SCDPeelout_ResetScr
00015AF2                            ; ---------------------------------------------------------------------------
00015AF2                             
00015AF2                            SCDPeelout_Charge:				; If still charging the dash...
00015AF2 3238 F760                  		move.w	($FFFFF760).w,d1	; get top peelout speed
00015AF6 3401                       		move.w	d1,d2
00015AF8 D241                       		add.w	d1,d1
00015AFA 4A38 FE2E                  		tst.b   ($FFFFFE2E).w 		; test for speed shoes
00015AFE 6700                       		beq.s	@noshoes
00015B00 E242                       		asr.w	#1,d2
00015B02 9242                       		sub.w	d2,d1
00015B04                            
00015B04                            @noshoes:
00015B04 0668 0064 0020             		addi.w	#$64,obInertia(a0)		; increment speed
00015B0A B268 0020                  		cmp.w	obInertia(a0),d1
00015B0E 6E00                       		bgt.s	@inctimer
00015B10 3141 0020                  		move.w	d1,obInertia(a0)
00015B14                            
00015B14                            @inctimer:
00015B14 5228 003A                  		addq.b	#1,$3A(a0)		; increment timer
00015B18 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)
00015B1E 6500                       		bcs.s	SCDPeelout_ResetScr
00015B20 117C 001E 003A             		move.b	#$1E,$3A(a0)
00015B26 4EF9 0000 0000             		jmp 	SCDPeelout_ResetScr
00015B2C                            		
00015B2C                            SCDPeelout_Stop_Sound:
00015B2C 303C 00D4                  		move.w	#$D4,d0
00015B30 4EB9 0000 12A0             		jsr		(PlaySound_Special).l
00015B36                            	;	sfx 	sfx_PeeloutStop
00015B36 4268 0020                  		clr.w	obInertia(a0)
00015B3A                            
00015B3A                            SCDPeelout_ResetScr:
00015B3A 588F                       		addq.l	#4,sp			; increase stack ptr ; was 4
00015B3C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00015B42 6700                       		beq.s	@finish
00015B44 6400                       		bcc.s	@skip
00015B46 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015B4A                             
00015B4A                            	@skip:
00015B4A 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015B4E                             
00015B4E                            	@finish:
00015B4E 6100 0000                  		bsr.w	Sonic_LevelBound
00015B52 6100 0000                  		bsr.w	Sonic_AnglePos
00015B56 4E75                       		rts
00015B58                            		
00015B58                            		
00015B58                            		include "_incObj\Sonic Spindash.asm"
00015B58                            ; ---------------------------------------------------------------------------
00015B58                            ; Subroutine to make Sonic perform a spindash
00015B58                            ; ---------------------------------------------------------------------------
00015B58                             
00015B58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B58                             
00015B58                             
00015B58                            Sonic_SpinDash:
00015B58 4A28 0039                  		tst.b	f_spindash(a0)			; already Spin Dashing?
00015B5C 6600                       		bne.s	loc2_1AC8E		; if set, branch
00015B5E 0C28 0000 001C             		cmpi.b	#id_duck,obAnim(a0)		; is anim duck
00015B64 6600                       		bne.s	locret2_1AC8C		; if not, return
00015B66 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015B6A 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
00015B6E 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
00015B72 117C 0000 001C             		move.b	#id_spindash,obAnim(a0)		; set Spin Dash anim (9 in s2)
00015B78 303C 00D5                  		move.w	#$D5,d0			; spin sound ($E0 in s2)
00015B7C 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; play spin sound
00015B82 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015B84 117C 0001 0039             		move.b	#1,f_spindash(a0)		; set Spin Dash flag
00015B8A 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
00015B90                            		;cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
00015B90                            		;bcs.s	loc2_1AC84		; ??? branch if carry
00015B90 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
00015B96                            						; the smoke/dust object
00015B96                            loc2_1AC84:
00015B96 6100 0000                  		bsr.w	Sonic_LevelBound
00015B9A 6100 0000                  		bsr.w	Sonic_AnglePos
00015B9E                            
00015B9E                            locret2_1AC8C:
00015B9E 4E75                       		rts	
00015BA0                            ; ---------------------------------------------------------------------------
00015BA0                            
00015BA0                            loc2_1AC8E:	
00015BA0 117C 001F 001C             		move.b	#$1F,$1C(a0)
00015BA6 1038 F602                  		move.b	(v_jpadhold2).w,d0	; read controller
00015BAA 0800 0001                  		btst	#1,d0			; check down button
00015BAE 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
00015BB2 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
00015BB8 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
00015BBE 117C 0000 001C             		move.b	#id_roll,obAnim(a0)		; set animation to roll
00015BC4 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
00015BC8 117C 0000 0039             		move.b	#0,f_spindash(a0)		; clear Spin Dash flag
00015BCE 7000                       		moveq	#0,d0
00015BD0 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
00015BD4 D040                       		add.w	d0,d0			; double it
00015BD6 317B 0000 0020             		move.w	Dash_Speeds(pc,d0.w),obInertia(a0) ; get normal speed
00015BDC 3028 0020                  		move.w	obInertia(a0),d0		; get inertia
00015BE0 0440 0800                  		subi.w	#$800,d0		; subtract $800
00015BE4 D040                       		add.w	d0,d0			; double it
00015BE6 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
00015BEA 4440                       		neg.w	d0			; negate it
00015BEC 0640 2000                  		addi.w	#$2000,d0		; add $2000
00015BF0 31C0 C904                  		move.w	d0,($FFFFC904).w	; move to $EED0
00015BF4 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing right?
00015BFA 6700                       		beq.s	loc2_1ACF4		; if not, branch
00015BFC 4468 0020                  		neg.w	obInertia(a0)			; negate inertia
00015C00                            
00015C00                            loc2_1ACF4:
00015C00 08E8 0002 0022             		bset	#2,$22(a0)		; set unused (in s1) flag
00015C06 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation.
00015C0C 303C 00BC                  		move.w	#$BC,d0			; spin release sound
00015C10 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; play it!
00015C16 1028 0026                  		move.b	obAngle(a0),d0
00015C1A 4EB9 0000 3CCA             		jsr	(CalcSine).l
00015C20 C3E8 0020                  		muls.w	obInertia(a0),d1
00015C24 E081                       		asr.l	#8,d1
00015C26 3141 0010                  		move.w	d1,obVelX(a0)
00015C2A C1E8 0020                  		muls.w	obInertia(a0),d0
00015C2E E080                       		asr.l	#8,d0
00015C30 3140 0012                  		move.w	d0,obVelY(a0)
00015C34                            	
00015C34 6000                       		bra.s	loc2_1AD78
00015C36                            ; ===========================================================================
00015C36                            Dash_Speeds:
00015C36 0700                       		dc.w  $700		; 0
00015C38 0780                       		dc.w  $780		; 1
00015C3A 0800                       		dc.w  $800		; 2
00015C3C 0880                       		dc.w  $880		; 3
00015C3E 0900                       		dc.w  $900		; 4
00015C40 0980                       		dc.w  $980		; 5
00015C42 0A00                       		dc.w  $A00		; 6
00015C44 0A80                       		dc.w  $A80		; 7
00015C46 0B00                       		dc.w  $B00		; 8
00015C48                            ; ===========================================================================
00015C48                            
00015C48                            loc2_1AD30:				; If still charging the dash...
00015C48 4A68 003A                  		tst.w	$3A(a0)		; check charge count
00015C4C 6700                       		beq.s	loc2_1AD48	; if zero, branch
00015C4E 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
00015C52 EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
00015C54 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
00015C58 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
00015C5A 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
00015C60                            
00015C60                            loc2_1AD48:
00015C60 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015C64 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
00015C68 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
00015C6C 317C 1F00 001C             		move.w	#$1F00,obAnim(a0)	; reset spdsh animation
00015C72 303C 00D5                  		move.w	#$D5,d0			; was $E0 in sonic 2
00015C76 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w		; Set the Spin Dash dust animation to $2.
00015C7C 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; play charge sound
00015C82 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
00015C88 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
00015C8E 6500                       		bcs.s	loc2_1AD78		; if not, then branch
00015C90 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
00015C96                            
00015C96                            loc2_1AD78:
00015C96 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015C98 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w	; $EED8 only ever seems
00015C9E 6700                       		beq.s	loc2_1AD8C		; to be used in Spin Dash
00015CA0 6400                       		bcc.s	loc2_1AD88
00015CA2 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015CA6                            
00015CA6                            loc2_1AD88:
00015CA6 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015CAA                            
00015CAA                            loc2_1AD8C:
00015CAA 6100 0000                  		bsr.w	Sonic_LevelBound
00015CAE 6100 0000                  		bsr.w	Sonic_AnglePos
00015CB2                            		;move.w	#$60,(v_lookshift).w	; reset looking up/down
00015CB2 4E75                       		rts
00015CB4                            ; End of subroutine Sonic_SpinDash
00015CB4                            ; End of subroutine Sonic_SpinDash
00015CB4                            		include	"_incObj\Sonic HomingAttack.asm"
00015CB4                            ; ===========================================================================
00015CB4                            ; ---------------------------------------------------------------------------
00015CB4                            ; Subroutine to perform Homing Attack
00015CB4                            ; ---------------------------------------------------------------------------
00015CB4                            
00015CB4                            ;HomingAttackType = 1 ; 0 is Sonic Winter Adventures, 1 is Sonic and the Mystic Gems
00015CB4                            
00015CB4                            Sonic_HomingAttack:     
00015CB4 4A38 F5C9                  		tst.b	(v_gshield)
00015CB8 6700                       		beq.s	@Return2
00015CBA 0C38 0002 F5CD             		cmpi.b	#2,(v_homingattack).w	; already Homing?
00015CC0 6700                       		beq.s	@Homing_Process		; if yes, branch
00015CC2 0238 0070 F603             		andi.b	#btnABC,(v_jpadpress2).w	; is A, B or C pressed?
00015CC8 6600                       		bne.s	@Homing_Perform
00015CCA 4E75                       		rts
00015CCC                            	@Return2:
00015CCC 4E75                       		rts
00015CCE                            ; ---------------------------------------------------------------------------
00015CCE                            @Homing_Process:
00015CCE 5328 001E                  		subq.b	#1,obTimeFrame(a0)		; is timer over?
00015CD2 6600                       		bne.s	@SetSpeeds		; if not, branch
00015CD4 4238 F5CD                  		clr.b	(v_homingattack).w
00015CD8 4E75                       		rts
00015CDA                            
00015CDA                            	@SetSpeeds:
00015CDA 3268 003A                  		movea.w	$3A(a0),a1		; load object to follow
00015CDE                            
00015CDE                            			
00015CDE                            
00015CDE 3229 000C                  		move.w	obY(a1),d1
00015CE2 9268 000C                  		sub.w	obY(a0),d1		; d1 -> Ydist
00015CE6 3429 0008                  		move.w	obX(a1),d2
00015CEA 9468 0008                  		sub.w	obX(a0),d2		; d2 -> Xdist
00015CEE 4EB9 0000 3F5C                             jsr     (CalcAngle).l		; Calcuate Angle
00015CF4 4EB9 0000 3CCA                             jsr     (CalcSine).l		; Get Sine
00015CFA 363C 0000                                  move.w	#$0,d3		; d3 -> Homing Attack Speed
00015CFE 363C 0A00                                  move.w	#$A00,d3		; d3 -> Homing Attack Speed
00015D02 C1C3                       		muls.w	d3,d0
00015D04 C3C3                       		muls.w	d3,d1
00015D06 E080                       		asr.l	#8,d0
00015D08 E081                       		asr.l	#8,d1
00015D0A 3141 0012                                  move.w  d1,obVelY(a0)		; set speed
00015D0E 3140 0010                                  move.w  d0,obVelX(a0)		; set speed
00015D12 3140 0020                  		move.w	d0,obInertia(a0)
00015D16 4E75                       		rts
00015D18                            
00015D18                            ; ---------------------------------------------------------------------------
00015D18                            @Homing_Perform:
00015D18 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015D1E 76FF                       		moveq	#-1,d3			; d3 will contain the direct distance for current d4,d5 (Piphagor yay)
00015D20 78FF                       		moveq	#-1,d4			; d4 will contain the shortest X-dist
00015D22 7AFF                       		moveq	#-1,d5			; d5 will contain the shortest Y-dist
00015D24 3C3C 005F                  		move.w	#$5F,d6
00015D28 43F8 D800                  		lea	(v_lvlobjspace).w,a1	; Load in-level objects RAM
00015D2C 3C3C 005F                  		move.w	#$5F,d6			; do $60 objects
00015D30                            		
00015D30                            	@ObjectsLoop:                  
00015D30 4A29 0001                  		tst.b	1(a1)			; is object on-screen?
00015D34 6A00                       		bpl.s	@NextObject		; if yes, branch
00015D36 4A29 0020                  		tst.b	obColType(a1)			; load touch response
00015D3A 6600                       		bne.s	@Homing_TestObject	; if touch response is not zero, branch
00015D3C                            
00015D3C                            	@NextObject:
00015D3C 43E9 0040                  		lea	$40(a1),a1		; load next object slot
00015D40 51CE FFEE                  		dbf	d6,@ObjectsLoop		; repeat for all objects in RAM
00015D44                            		
00015D44 0C83 0000 6400             		cmpi.l	#$A0*$A0,d3		; if Distance ^ 2 > $A0 ^ 2, quit
00015D4A 6200 0000                  		bhi.w	Sonic_JumpDash
00015D4E                            
00015D4E                            
00015D4E                            
00015D4E 117C 003C 001E             		move.b	#60,obTimeFrame(a0)		; follow object for 60 frames
00015D54 11FC 0002 F5CD             		move.b  #2,(v_homingattack).w	; set flag as #2 (Homing Attack)
00015D5A 303C 00BC                  		move.w	#$BC,d0			; play JD sound
00015D5E 4EF9 0000 12A0             		jmp	(PlaySound_Special).l   ;
00015D64                            
00015D64                            
00015D64                            ; ---------------------------------------------------------------------------
00015D64                            @Homing_TestObject:
00015D64 45FA 0000                  		lea	@Homing_ObjectList(pc),a2
00015D68 1011                       		move.b	(a1),d0
00015D6A                            		
00015D6A                            	@CheckID:
00015D6A B01A                       		cmp.b	(a2)+,d0		; compare current obj ID to one in list
00015D6C 6700                       		beq.s	@CalcXDist		; if object is in list, branch
00015D6E 62FA                       		bhi.s	@CheckID		; if current obj ID is higer, go on looking
00015D70 60CA                       		bra.s	@NextObject		; the object is not in list, quit
00015D72                            		
00015D72                            	@CalcXDist:
00015D72 3229 0008                  		move.w	obX(a1),d1		; d1 -> ObjX
00015D76 9268 0008                  		sub.w	obX(a0),d1		; d1 -> ObjX - SonX
00015D7A 6A00                       		bpl.s	@ObjAhead
00015D7C                            
00015D7C                            	; Object is behind Sonic
00015D7C 0828 0000 0022             		btst	#0,obStatus(a0)		; is Sonic faced left?
00015D82 67B8                       		beq.s	@NextObject		; if not, we can't home at object
00015D84 6000                       		bra.s	@CalcYDist
00015D86                            
00015D86                            	@ObjAhead:
00015D86 0828 0000 0022             		btst	#0,obStatus(a0)		; is Sonic faced right?
00015D8C 66AE                       		bne.s	@NextObject		; if not, we can't home at object
00015D8E                            
00015D8E                            	@CalcYDist:
00015D8E 3429 000C                  		move.w	obY(a1),d2		; d2 -> ObjY
00015D92 9468 000C                  		sub.w	obY(a0),d2		; d2 -> ObjY - SonY
00015D96                            		
00015D96                            	; Calculate absolute distance ( d1 * d1 + d2 * d2 )
00015D96 3002                       		move.w	d2,d0			; d0 -> d2
00015D98 4840                       		swap	d0
00015D9A 3001                       		move.w	d1,d0			; d0 -> d2 d1
00015D9C C3C1                       		muls.w	d1,d1			; d1 -> d1 * d1
00015D9E C5C2                       		muls.w	d2,d2			; d2 -> d2 * d2
00015DA0 D481                       		add.l	d1,d2			; d2 -> d1 * d1 + d2 * d2
00015DA2 B483                       		cmp.l	d3,d2			; is new distance shorter after all?
00015DA4 6400 FF96                  		bcc.w	@NextObject		; if not, branch
00015DA8                            
00015DA8 2602                       		move.l	d2,d3			; set new distance
00015DAA 3800                       		move.w	d0,d4			; set new Xdist
00015DAC 4840                       		swap	d0
00015DAE 3A00                       		move.w	d0,d5			; set new Ydist
00015DB0 3149 003A                  		move.w	a1,$3A(a0)		; save obj ID
00015DB4 6000 FF86                  		bra.w	@NextObject
00015DB8                            
00015DB8                            
00015DB8                            ; ---------------------------------------------------------------------------
00015DB8                            ; Object ids that are available for homming
00015DB8                            ; NOTE: They should go in increasing order (1,2,3..)
00015DB8                            ; ---------------------------------------------------------------------------
00015DB8                            
00015DB8                            @Homing_ObjectList:
00015DB8 1E1F 2226 2B2C 2D40 4243   		dc.b	$1E, $1F, $22, $26, $2B, $2C, $2D, $40, $42, $43
00015DC2 5055 6078                  		dc.b	$50, $55, $60, $78
00015DC6 FF                         		dc.b	-1	; mark end of list
00015DC8 00                         		even
00015DC8                            
00015DC8                            
00015DC8                            ; ===========================================================================
00015DC8                            ; ---------------------------------------------------------------------------
00015DC8                            ; Subroutine to perform Jump Dash
00015DC8                            ; ---------------------------------------------------------------------------
00015DC8                            
00015DC8                            Sonic_JumpDash:
00015DC8 4A38 F5CD                  		tst.b	(v_homingattack).w		; already Jump Dashing?
00015DCC 6600                       		bne.s	@Return			; if yes, branch
00015DCE 11FC 0001 F5CD             		move.b	#1,(v_homingattack).w
00015DD4 303C 0800                  		move.w	#$800,d0		; set Jump Dash speed
00015DD8 0828 0006 0022             		btst	#6,obStatus(a0)		; is Sonic underwater
00015DDE 6700                       		beq.s	@ChkShoes
00015DE0 303C 0600                  		move.w	#$600,d0		; set JD speed for underwater
00015DE4                            	
00015DE4                            	@ChkShoes:
00015DE4 4A38 FE2E                  		tst.b	(v_shoes).w		; does Sonic have speed	shoes?
00015DE8 6700                       		beq.s	@SetSpeeds		; if not, branch
00015DEA 0640 0200                  		addi.w	#$200,d0
00015DEE                            
00015DEE                            	;@ChkOrientation:
00015DEE                            		;btst	#0,obStatus(a0)
00015DEE                            		;beq.s	@SetSpeeds
00015DEE                            		;neg.w	d0
00015DEE                            
00015DEE                            	@SetSpeeds:
00015DEE 3140 0012                  		move.w	d0,obVelY(a0)
00015DF2 3140 0020                  		move.w	d0,obInertia(a0)
00015DF6                            		;move.w	#0,obVelY(a0)
00015DF6 303C 00BC                  		move.w	#$BC,d0			; play JD sound
00015DFA 4EF9 0000 12A0             		jmp	(PlaySound_Special).l   ;
00015E00                            
00015E00                            	@Return:
00015E00 4E75                       		rts
00015E02                            
00015E02                            ; -------------------------------------------------------------------------
00015E02                            ; Subroutine to stop Sonic, bounce him up and to give him the ability to
00015E02                            ; Jumpdash again when he has performed a Jumpdash
00015E02                            ; -------------------------------------------------------------------------
00015E02                            
00015E02                            BounceJD:
00015E02 0C38 0002 F5CD             		cmp.b	#2,(v_homingattack).w; was HA flag set?
00015E08 6600                       		bne.s	BounceJD_End	; if not, branch
00015E0A 4238 F5CD                  		clr.b	(v_homingattack).w	; if yes, clear HA flag (allow Sonic to HA again)
00015E0E 4268 0010                  		clr.w	obVelX(a0)		; clear X-velocity (stop sonic)
00015E12 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015E18 303C FF10                  		move.w	#-$F0,d0
00015E1C 0828 0000 0022             		btst	#0,obStatus(a0)		; is Sonic faced left?
00015E22 6600                       		bne.s	@MoveAhead		; if not, we can't move right
00015E24 4440                       		neg.w	d0
00015E26                            
00015E26                            	@MoveAhead:
00015E26 3140 0010                  		move.w	d0,obVelX(a0)
00015E2A                            	@Cont:
00015E2A 317C F810 0012             		move.w	#-$7F0,obVelY(a0)	; move sonic upwards
00015E30 0828 0006 0022             		btst	#6,obStatus(a0)	; is sonic underwater?
00015E36 6700                       		beq.s	BounceJD_Shoes	; if not, branch
00015E38 317C FAE0 0012             		move.w	#-$520,obVelY(a0)
00015E3E                            		
00015E3E                            BounceJD_Shoes:
00015E3E 4A38 FE2E                  		tst.b	(v_shoes).w	; does sonic has speed shoes?
00015E42 6700                       		beq.s	BounceJD_End	; if not, branch
00015E44 317C F7E0 0012             		move.w	#-$820,obVelY(a0)	; use -$620 for Y-velocity (move sonic upwards)
00015E4A                            		
00015E4A                            BounceJD_End:
00015E4A 4E75                       		rts			; return
00015E4C                            ; End of function BounceJD
00015E4C                            ; End of function BounceJD
00015E4C                            
00015E4C                            Sonic_AirRoll:
00015E4C 0C28 0000 001C             	cmpi.b  #id_spring,$1C(a0)      ; is sonic in the spring animation?
00015E52 6600                               bne.s   AirRoll_Return   ; if not, return
00015E54                            
00015E54                            AirRoll_CheckBtn:
00015E54 1038 F603                          move.b	($FFFFF603).w,d0 ; Move $FFFFF603 to d0
00015E58 0200 0070                          andi.b	#btnABC,d0 ; Has A/B/C been pressed?
00015E5C 6700                               beq.s	AirRoll_Return
00015E5E 117C 0000 001C             	move.b	#id_roll,$1C(a0) ; Set Sonic's animation to rolling.
00015E64                                   ; move.w	#$BC,d0
00015E64                                   ; jsr	(PlaySound_Special).l ;    play Sonic rolling sound
00015E64                            
00015E64                            AirRoll_Return:
00015E64 4E75                               rts
00015E66                            ; ===========================================================================
00015E66                            ; ---------------------------------------------------------------------------
00015E66                            ; Unused subroutine to squash Sonic
00015E66                            ; ---------------------------------------------------------------------------
00015E66 1028 0026                  		move.b	obAngle(a0),d0
00015E6A 0600 0020                  		addi.b	#$20,d0
00015E6E 0200 00C0                  		andi.b	#$C0,d0
00015E72 6600                       		bne.s	locret_13302
00015E74 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015E78 4A41                       		tst.w	d1
00015E7A 6A00                       		bpl.s	locret_13302
00015E7C 317C 0000 0020             		move.w	#0,obInertia(a0) ; stop Sonic moving
00015E82 317C 0000 0010             		move.w	#0,obVelX(a0)
00015E88 317C 0000 0012             		move.w	#0,obVelY(a0)
00015E8E 117C 0000 001C             		move.b	#id_Warp3,obAnim(a0) ; use "warping" animation
00015E94                            
00015E94                            locret_13302:
00015E94 4E75                       		rts		
00015E96                            		include	"_incObj\Sonic LevelBound.asm"
00015E96                            ; ---------------------------------------------------------------------------
00015E96                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00015E96                            ; ---------------------------------------------------------------------------
00015E96                            
00015E96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015E96                            
00015E96                            
00015E96                            Sonic_LevelBound:
00015E96 2228 0008                  		move.l	obX(a0),d1
00015E9A 3028 0010                  		move.w	obVelX(a0),d0
00015E9E 48C0                       		ext.l	d0
00015EA0 E180                       		asl.l	#8,d0
00015EA2 D280                       		add.l	d0,d1
00015EA4 4841                       		swap	d1
00015EA6 3038 F728                  		move.w	(v_limitleft2).w,d0
00015EAA 0640 0010                  		addi.w	#$10,d0
00015EAE B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015EB0 6200                       		bhi.s	@sides		; if yes, branch
00015EB2 3038 F72A                  		move.w	(v_limitright2).w,d0
00015EB6 0640 0128                  		addi.w	#$128,d0
00015EBA 4A38 F7AA                  		tst.b	(f_lockscreen).w
00015EBE 6600                       		bne.s	@screenlocked
00015EC0 0640 0040                  		addi.w	#$40,d0
00015EC4                            
00015EC4                            	@screenlocked:
00015EC4 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015EC6 6300                       		bls.s	@sides		; if yes, branch
00015EC8                            
00015EC8                            	@chkbottom:
00015EC8 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00015ECC 0640 00E0                  		addi.w	#$E0,d0
00015ED0 B068 000C                  		cmp.w	obY(a0),d0	; has Sonic touched the	bottom boundary?
00015ED4 6D00                       		blt.s	@bottom		; if yes, branch
00015ED6 4E75                       		rts	
00015ED8                            ; ===========================================================================
00015ED8                            
00015ED8                            @bottom:
00015ED8 3038 F726                  		move.w (v_limitbtm1).w,d0 
00015EDC 3238 F72E                  		move.w (v_limitbtm2).w,d1 
00015EE0 B240                       		cmp.w d0,d1 ; screen still scrolling down? 
00015EE2 6D00                       		blt.s @dontkill; if so, don't kill Sonic 
00015EE4 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is level SBZ2 ?
00015EEA 6600 0000                  		bne.w	Kill_transport	; if not, kill Sonic
00015EEE 0C78 1B00 D008             		cmpi.w	#$1B00,(v_player+obX).w
00015EF4 6500 0000                  		bcs.w	Kill_transport
00015EF8 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
00015EFC 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
00015F02 31FC 0103 FE10             		move.w	#(id_LZ<<8)+3,(v_zone).w ; set level to SBZ3 (LZ4)
00015F08 4E75                       		rts	
00015F0A                            @dontkill: 
00015F0A 4E75                       		rts
00015F0C                            ; ===========================================================================
00015F0C                            
00015F0C                            @sides:
00015F0C 3140 0008                  		move.w	d0,obX(a0)
00015F10 317C 0000 000A             		move.w	#0,obX+2(a0)
00015F16 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Sonic moving
00015F1C 317C 0000 0020             		move.w	#0,obInertia(a0)
00015F22 60A4                       		bra.s	@chkbottom
00015F24                            
00015F24                            Kill_transport: 
00015F24 4EF9 0000 0000                     	jmp        (KillSonic).l
00015F2A                            
00015F2A                            ; End of function Sonic_LevelBound
00015F2A                            ; End of function Sonic_LevelBound
00015F2A                            		include	"_incObj\Sonic Roll.asm"
00015F2A                            ; ---------------------------------------------------------------------------
00015F2A                            ; Subroutine allowing Sonic to roll when he's moving
00015F2A                            ; ---------------------------------------------------------------------------
00015F2A                            
00015F2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F2A                            
00015F2A                            
00015F2A                            Sonic_Roll:
00015F2A 4A38 F7CA                  		tst.b	(f_jumponly).w
00015F2E 6600                       		bne.s	@noroll
00015F30 3028 0020                  		move.w	obInertia(a0),d0
00015F34 6A00                       		bpl.s	@ispositive
00015F36 4440                       		neg.w	d0
00015F38                            
00015F38                            	@ispositive:
00015F38 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00015F3C 6500                       		bcs.s	@noroll		; if not, branch
00015F3E 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015F42 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	being pressed?
00015F46 6600                       		bne.s	@noroll		; if yes, branch
00015F48 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
00015F4E 6600                       		bne.s	Sonic_ChkRoll	; if yes, branch
00015F50                            
00015F50                            	@noroll:
00015F50 4E75                       		rts	
00015F52                            ; ===========================================================================
00015F52                            
00015F52                            Sonic_ChkRoll:
00015F52 0828 0002 0022             		btst	#2,obStatus(a0)	; is Sonic already rolling?
00015F58 6700                       		beq.s	@roll		; if not, branch
00015F5A 4E75                       		rts	
00015F5C                            ; ===========================================================================
00015F5C                            
00015F5C                            @roll:
00015F5C 08E8 0002 0022             		bset	#2,obStatus(a0)
00015F62 117C 000E 0016             		move.b	#$E,obHeight(a0)
00015F68 117C 0007 0017             		move.b	#7,obWidth(a0)
00015F6E 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015F74 5A68 000C                  		addq.w	#5,obY(a0)
00015F82 4A68 0020                  		tst.w	obInertia(a0)
00015F86 6600                       		bne.s	@ismoving
00015F88 317C 0200 0020             		move.w	#$200,obInertia(a0) ; set inertia if 0
00015F8E                            
00015F8E                            	@ismoving:
00015F8E 4E75                       		rts	
00015F90                            ; End of function Sonic_Roll
00015F90                            ; End of function Sonic_Roll
00015F90                            		include	"_incObj\Sonic Jump.asm"
00015F90                            ; ---------------------------------------------------------------------------
00015F90                            ; Subroutine allowing Sonic to jump
00015F90                            ; ---------------------------------------------------------------------------
00015F90                            
00015F90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F90                            
00015F90                            
00015F90                            Sonic_Jump:
00015F90 1038 F603                  		move.b	(v_jpadpress2).w,d0
00015F94 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00015F98 6700 0000                  		beq.w	locret_1348E	; if not, branch
00015F9C 7000                       		moveq	#0,d0
00015F9E 1028 0026                  		move.b	obAngle(a0),d0
00015FA2 0600 0080                  		addi.b	#$80,d0
00015FA6 6100 0000                  		bsr.w	sub_14D48
00015FAA 0C41 0006                  		cmpi.w	#6,d1
00015FAE 6D00 0000                  		blt.w	locret_1348E
00015FB2 343C 0680                  		move.w	#$680,d2
00015FB6 0828 0006 0022             		btst	#6,obStatus(a0)
00015FBC 6700                       		beq.s	loc_1341C
00015FBE 343C 0380                  		move.w	#$380,d2
00015FC2                            
00015FC2                            loc_1341C:
00015FC2 7000                       		moveq	#0,d0
00015FC4 1028 0026                  		move.b	obAngle(a0),d0
00015FC8 0400 0040                  		subi.b	#$40,d0
00015FCC 4EB9 0000 3CCA             		jsr	(CalcSine).l
00015FD2 C3C2                       		muls.w	d2,d1
00015FD4 E081                       		asr.l	#8,d1
00015FD6 D368 0010                  		add.w	d1,obVelX(a0)	; make Sonic jump
00015FDA C1C2                       		muls.w	d2,d0
00015FDC E080                       		asr.l	#8,d0
00015FDE D168 0012                  		add.w	d0,obVelY(a0)	; make Sonic jump
00015FE2 08E8 0001 0022             		bset	#1,obStatus(a0)
00015FE8 08A8 0005 0022             		bclr	#5,obStatus(a0)
00015FEE 588F                       		addq.l	#4,sp
00015FF0 117C 0001 003C             		move.b	#1,$3C(a0)
00015FF6 4228 0038                  		clr.b	$38(a0)
00016004 117C 0013 0016             		move.b	#$13,obHeight(a0)
0001600A 117C 0009 0017             		move.b	#9,obWidth(a0)
00016010 117C 000E 0016             		move.b	#$E,obHeight(a0)
00016016 117C 0007 0017             		move.b	#7,obWidth(a0)
0001601C                            Result_Check:
0001601C 4A38 F5C2                  		tst.b   ($FFFFF5C2).w ; Has the victory animation flag been set?
00016020 6700                       		beq.s   NormalJump ; If not, branch
00016022 117C 0000 001C             		move.b  #id_Leap2,$1C(a0) ; Play the victory animation
00016028 6000                       		bra.s   cont ; Continue
0001602A                            NormalJump:
0001602A 117C 0002 001C             		move.b  #2,$1C(a0)    ; use "jumping"    animation
00016030                            cont:
00016030 08E8 0002 0022             		bset	#2,obStatus(a0)
00016036 5A68 000C                  		addq.w	#5,obY(a0)
0001603A                            
0001603A                            locret_1348E:
0001603A 4E75                       		rts	
0001603C                            ; ===========================================================================
0001603C                            
0001603C                            ; End of function Sonic_Jump
0001603C                            ; End of function Sonic_Jump
0001603C                            		include	"_incObj\Sonic JumpHeight.asm"
0001603C                            ; ---------------------------------------------------------------------------
0001603C                            ; Subroutine controlling Sonic's jump height/duration
0001603C                            ; ---------------------------------------------------------------------------
0001603C                            
0001603C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001603C                            
0001603C                            
0001603C                            Sonic_JumpHeight:
0001603C 4A28 003C                  		tst.b	$3C(a0)
00016040 6700                       		beq.s	loc_134C4
00016042 323C FC00                  		move.w	#-$400,d1
00016046 0828 0006 0022             		btst	#6,obStatus(a0)
0001604C 6700                       		beq.s	loc_134AE
0001604E 323C FE00                  		move.w	#-$200,d1
00016052                            
00016052                            loc_134AE:
00016052 B268 0012                  		cmp.w	obVelY(a0),d1
00016056 6F00                       		ble.s	locret_134C2
00016058 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001605C 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00016060 6600                       		bne.s	locret_134C2	; if yes, branch
00016062 3141 0012                  		move.w	d1,obVelY(a0)
00016066                            
00016066                            locret_134C2:
00016066 4A38 F7C8                          tst.b   (f_lockmulti).w      ; Are Controls locked?
0001606A 66FA                               bne.s   locret_134C2            ; If so, branch, and do not bother with Super code
0001606C 1038 F603                          move.b  (v_jpadpress2).w,d0
00016070 0200 0010                          andi.b  #btnB,d0 ; is a jump button pressed?
00016074 6600 0000                  		bne.w	Sonic_CheckGoSuper
00016078 4E75                       		rts	
0001607A                            ; ===========================================================================
0001607A                            
0001607A                            loc_134C4:
0001607A 0C68 F040 0012             		cmpi.w	#-$FC0,obVelY(a0)
00016080 6C00                       		bge.s	locret_134D2
00016082 317C F040 0012             		move.w	#-$FC0,obVelY(a0)
00016088                            
00016088                            locret_134D2:		
00016088 4E75                       		rts	
0001608A                            ; End of function Sonic_JumpHeight
0001608A                            
0001608A                            
0001608A                            ; ---------------------------------------------------------------------------
0001608A                            ; Subroutine called at the peak of a jump that transforms Sonic into Super Sonic
0001608A                            ; if he has enough rings and emeralds
0001608A                            ; ---------------------------------------------------------------------------
0001608A                            
0001608A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0001608A                            
0001608A                            Sonic_CheckGoSuper:
0001608A 4A38 FE19                  		tst.b	(Super_Sonic_flag).w	; is Sonic already Super?
0001608E 6600 0000                  		bne.w	Sonic_RevertToNormal			; if yes, branch	
00016092 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; does Sonic have at least 50 rings?
00016098 6500                       		bcs.s	return_1ABA4		; if not, branch	
0001609A 11FC 0001 F5D8             		move.b	#1,(Super_Sonic_palette).w
000160A0 11FC 000F F5DE             		move.b	#$F,(Palette_timer).w
000160A6 11FC 0001 FE19             		move.b	#1,(Super_Sonic_flag).w
000160AC 4238 FE2E                  		clr.b	(v_shoes).w ; clear speed shoes
000160B0 11FC 0001 F7C8             		move.b    #$1,(f_lockmulti).w
000160B6 117C 0000 001C             		move.b    #id_Transform,obAnim(a0)   
000160BC 4EB9 0000 0000             		jsr		Super_and_Invincibility_Stars				
000160C2 11FC 008D D200             		move.b	#id_SuperStars,($FFFFD200).w				
000160C8 31FC 0A00 F760             		move.w	#$A00,(v_sonspeedmax).w
000160CE 31FC 0030 F762             		move.w	#$30,(v_sonspeedacc).w
000160D4 31FC 0100 F764             		move.w	#$100,(v_sonspeeddec).w
000160DA 317C 0000 0032             		move.w	#0,invtime(a0)
000160E0 11FC 0001 FE2D             		move.b #1,(v_invinc).w ; make Sonic invincible	
000160E6 303C 00D6                  		move.w	#$D6,d0         ; 
000160EA 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; Play transformation sound effect.
000160F0 303C 0087                  		move.w	#$87,d0         
000160F4 4EF9 0000 129A             		jmp	(PlaySound).l	; load the invincibility song and return also playmusic doesn't exist
000160FA                            
000160FA                            ; ---------------------------------------------------------------------------
000160FA                            return_1ABA4:
000160FA 4E75                       		rts
000160FC                            		
000160FC                            ; End of subroutine Sonic_CheckGoSuper		
000160FC                            ; ---------------------------------------------------------------------------
000160FC                            ; Subroutine doing the extra logic for Super Sonic
000160FC                            ; ---------------------------------------------------------------------------
000160FC                            
000160FC                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000160FC                            
000160FC                            ; loc_1ABA6:
000160FC                            Sonic_Super:
000160FC 4A38 FE19                  		tst.b	(Super_Sonic_flag).w	; Ignore all this code if not Super Sonic
00016100 6700 0000                  		beq.w	return_1AC3C
00016104 4A38 FE1E                  		tst.b	(f_timecount).w
00016108 6700                       		beq.s	Sonic_RevertToNormal ; ?
0001610A 5378 F670                  		subq.w	#1,(v_pal_buffer+$20).w
0001610E 6A00 0000                  		bpl.w	return_1AC3C
00016112 31FC 003C F670             		move.w	#60,(v_pal_buffer+$20).w	; Reset frame counter to 60
00016118 4A78 FE20                  		tst.w	(v_rings).w
0001611C 6700                       		beq.s	Sonic_RevertToNormal
0001611E 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w
00016124 0C78 0001 FE20             		cmpi.w	#1,(v_rings).w
0001612A 6700                       		beq.s	@update
0001612C 0C78 000A FE20             		cmpi.w	#10,(v_rings).w
00016132 6700                       		beq.s	@update
00016134 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w
0001613A 6600                       		bne.s	@update2
0001613C                            @update
0001613C 0038 0080 FE1D             		ori.b	#$80,(f_ringcount).w
00016142                            @update2
00016142 5378 FE20                  		subq.w	#1,(v_rings).w
00016146 6600                       		bne.s	return_1AC3C
00016148                            ; loc_1ABF2:
00016148                            Sonic_RevertToNormal:
00016148 4238 F7C8                  		clr.b   (f_lockmulti).w
0001614C 11FC 0002 F5D8             		move.b	#2,(Super_Sonic_palette).w	; Remove rotating palette
00016152 31FC 0028 F5CC             		move.w	#$28,($FFFFF5CC).w	; Unknown
00016158 11FC 0000 FE19             		move.b	#0,(Super_Sonic_flag).w
0001615E 11FC 0000 F7C8             		move.b    #0,(f_lockmulti).w	
00016164 317C 0001 0032             		move.w	#1,invtime(a0)				
0001616A 117C 0001 001D             		move.b	#1,next_anim(a0)	; Change animation back to normal ?
00016170 4238 D200                  		clr.b	($FFFFD200).w	; clear Obj7E (super sonic stars object) at $FFFFD200		
00016174 4238 FE2D                  		clr.b 	(v_invinc).w
00016178 4238 FE2E                  		clr.b 	(v_shoes).w 
0001617C 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
00016180 4EB9 0000 129A             		jsr		(PlaySound).l    ; play normal music		
00016186 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w
0001618C 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w
00016192 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w
00016198 0828 0006 0022             		btst	#6,obStatus(a0)	; Check if underwater, return if not
0001619E 6700                       		beq.s	return_1AC3C
000161A0 31FC 0300 F760             		move.w	#$300,(v_sonspeedmax).w
000161A6 31FC 0006 F762             		move.w	#6,(v_sonspeedacc).w
000161AC 31FC 0040 F764             		move.w	#$40,(v_sonspeeddec).w
000161B2                            		
000161B2                            return_1AC3C:
000161B2 4E75                       		rts
000161B4                            ; End of subroutine Sonic_Super	
000161B4                            
000161B4                            
000161B4                            ; ---------------------------------------------------------------------------
000161B4                            ; Subroutine to	delete the Super Stars and the Invincibility Stars
000161B4                            ; ---------------------------------------------------------------------------
000161B4                            
000161B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161B4                            
000161B4                            
000161B4                            Super_and_Invincibility_Stars:
000161B4 4278 D032                  		clr.w	($FFFFD032).w		; clear time limit of the invincibility
000161B8 2F08                       		move.l	a0,-(sp)
000161BA 41F8 D200                  		lea		($FFFFD200).w,a0	; stars object ($3801 and $8F)
000161BE 4EBA 93FE                  		jsr		DeleteObject		; delete stars
000161C2 41F8 D240                  		lea		($FFFFD240).w,a0	; stars object ($3802)
000161C6 4EBA 93F6                  		jsr		DeleteObject		; delete stars
000161CA 41F8 D280                  		lea		($FFFFD280).w,a0	; stars object ($3803)
000161CE 4EBA 93EE                  		jsr		DeleteObject		; delete stars
000161D2 41F8 D2C0                  		lea		($FFFFD2C0).w,a0	; stars object ($3804)
000161D6 4EBA 93E6                  		jsr		DeleteObject		; delete stars
000161DA 205F                       		move.l	(sp)+,a0
000161DC 4E75                       		rts
000161DE                            ; End of function Super_and_Invincibility_Stars
000161DE                            ; End of function Super_and_Invincibility_Stars
000161DE                            		include	"_incObj\Sonic SlopeResist.asm"
000161DE                            ; ---------------------------------------------------------------------------
000161DE                            ; Subroutine to	slow Sonic walking up a	slope
000161DE                            ; ---------------------------------------------------------------------------
000161DE                            
000161DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161DE                            
000161DE                            
000161DE                            Sonic_SlopeResist:
000161DE 1028 0026                  		move.b	obAngle(a0),d0
000161E2 0600 0060                  		addi.b	#$60,d0
000161E6 0C00 00C0                  		cmpi.b	#$C0,d0
000161EA 6400                       		bcc.s	locret_13508
000161EC 1028 0026                  		move.b	obAngle(a0),d0
000161F0 4EB9 0000 3CCA             		jsr	(CalcSine).l
000161F6 C1FC 0020                  		muls.w	#$20,d0
000161FA E080                       		asr.l	#8,d0
000161FC 4A68 0020                  		tst.w	obInertia(a0)
00016200 6700                       		beq.s	locret_13508
00016202 6B00                       		bmi.s	loc_13504
00016204 4A40                       		tst.w	d0
00016206 6700                       		beq.s	locret_13502
00016208 D168 0020                  		add.w	d0,obInertia(a0) ; change Sonic's inertia
0001620C                            
0001620C                            locret_13502:
0001620C 4E75                       		rts	
0001620E                            ; ===========================================================================
0001620E                            
0001620E                            loc_13504:
0001620E D168 0020                  		add.w	d0,obInertia(a0)
00016212                            
00016212                            locret_13508:
00016212 4E75                       		rts	
00016214                            ; End of function Sonic_SlopeResist
00016214                            ; End of function Sonic_SlopeResist
00016214                            		include	"_incObj\Sonic RollRepel.asm"
00016214                            ; ---------------------------------------------------------------------------
00016214                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00016214                            ; ---------------------------------------------------------------------------
00016214                            
00016214                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016214                            
00016214                            
00016214                            Sonic_RollRepel:
00016214 1028 0026                  		move.b	obAngle(a0),d0
00016218 0600 0060                  		addi.b	#$60,d0
0001621C 0C00 00C0                  		cmpi.b	#-$40,d0
00016220 6400                       		bcc.s	locret_13544
00016222 1028 0026                  		move.b	obAngle(a0),d0
00016226 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001622C C1FC 0050                  		muls.w	#$50,d0
00016230 E080                       		asr.l	#8,d0
00016232 4A68 0020                  		tst.w	obInertia(a0)
00016236 6B00                       		bmi.s	loc_1353A
00016238 4A40                       		tst.w	d0
0001623A 6A00                       		bpl.s	loc_13534
0001623C E480                       		asr.l	#2,d0
0001623E                            
0001623E                            loc_13534:
0001623E D168 0020                  		add.w	d0,obInertia(a0)
00016242 4E75                       		rts	
00016244                            ; ===========================================================================
00016244                            
00016244                            loc_1353A:
00016244 4A40                       		tst.w	d0
00016246 6B00                       		bmi.s	loc_13540
00016248 E480                       		asr.l	#2,d0
0001624A                            
0001624A                            loc_13540:
0001624A D168 0020                  		add.w	d0,obInertia(a0)
0001624E                            
0001624E                            locret_13544:
0001624E 4E75                       		rts	
00016250                            ; End of function Sonic_RollRepel
00016250                            ; End of function Sonic_RollRepel
00016250                            		include	"_incObj\Sonic SlopeRepel.asm"
00016250                            ; ---------------------------------------------------------------------------
00016250                            ; Subroutine to	push Sonic down	a slope
00016250                            ; ---------------------------------------------------------------------------
00016250                            
00016250                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016250                            
00016250                            
00016250                            Sonic_SlopeRepel:
00016250 4E71                       		nop	
00016252 4A28 0038                  		tst.b	$38(a0)
00016256 6600                       		bne.s	locret_13580
00016258 4A68 003E                  		tst.w	$3E(a0)
0001625C 6600                       		bne.s	loc_13582
0001625E 1028 0026                  		move.b	obAngle(a0),d0
00016262 0600 0020                  		addi.b	#$20,d0
00016266 0200 00C0                  		andi.b	#$C0,d0
0001626A 6700                       		beq.s	locret_13580
0001626C 3028 0020                  		move.w	obInertia(a0),d0
00016270 6A00                       		bpl.s	loc_1356A
00016272 4440                       		neg.w	d0
00016274                            
00016274                            loc_1356A:
00016274 0C40 0280                  		cmpi.w	#$280,d0
00016278 6400                       		bcc.s	locret_13580
0001627A 4268 0020                  		clr.w	obInertia(a0)
0001627E 08E8 0001 0022             		bset	#1,obStatus(a0)
00016284 317C 001E 003E             		move.w	#$1E,$3E(a0)
0001628A                            
0001628A                            locret_13580:
0001628A 4E75                       		rts	
0001628C                            ; ===========================================================================
0001628C                            
0001628C                            loc_13582:
0001628C 5368 003E                  		subq.w	#1,$3E(a0)
00016290 4E75                       		rts	
00016292                            ; End of function Sonic_SlopeRepel
00016292                            ; End of function Sonic_SlopeRepel
00016292                            		include	"_incObj\Sonic JumpAngle.asm"
00016292                            ; ---------------------------------------------------------------------------
00016292                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00016292                            ; ---------------------------------------------------------------------------
00016292                            
00016292                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016292                            
00016292                            
00016292                            Sonic_JumpAngle:
00016292 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
00016296 6700                       		beq.s	locret_135A2	; if already 0,	branch
00016298 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
0001629A                            
0001629A 5400                       		addq.b	#2,d0		; increase angle
0001629C 6400                       		bcc.s	loc_13596
0001629E 7000                       		moveq	#0,d0
000162A0                            
000162A0                            loc_13596:
000162A0 6000                       		bra.s	loc_1359E
000162A2                            ; ===========================================================================
000162A2                            
000162A2                            loc_13598:
000162A2 5500                       		subq.b	#2,d0		; decrease angle
000162A4 6400                       		bcc.s	loc_1359E
000162A6 7000                       		moveq	#0,d0
000162A8                            
000162A8                            loc_1359E:
000162A8 1140 0026                  		move.b	d0,obAngle(a0)
000162AC                            
000162AC                            locret_135A2:
000162AC 4E75                       		rts	
000162AE                            ; End of function Sonic_JumpAngle
000162AE                            ; End of function Sonic_JumpAngle
000162AE                            		include	"_incObj\Sonic Floor.asm"
000162AE                            ; ---------------------------------------------------------------------------
000162AE                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
000162AE                            ; ---------------------------------------------------------------------------
000162AE                            
000162AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000162AE                            
000162AE                            
000162AE                            Sonic_Floor:
000162AE 3228 0010                  		move.w	obVelX(a0),d1
000162B2 3428 0012                  		move.w	obVelY(a0),d2
000162B6 4EB9 0000 3F5C             		jsr	(CalcAngle).l
000162BC 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
000162C0 0400 0020                  		subi.b	#$20,d0
000162C4 11C0 FFED                  		move.b	d0,($FFFFFFED).w
000162C8 0200 00C0                  		andi.b	#$C0,d0
000162CC 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
000162D0 0C00 0040                  		cmpi.b	#$40,d0
000162D4 6700 0000                  		beq.w	loc_13680
000162D8 0C00 0080                  		cmpi.b	#$80,d0
000162DC 6700 0000                  		beq.w	loc_136E2
000162E0 0C00 00C0                  		cmpi.b	#$C0,d0
000162E4 6700 0000                  		beq.w	loc_1373E
000162E8 6100 0000                  		bsr.w	Sonic_HitWall
000162EC 4A41                       		tst.w	d1
000162EE 6A00                       		bpl.s	loc_135F0
000162F0 9368 0008                  		sub.w	d1,obX(a0)
000162F4 317C 0000 0010             		move.w	#0,obVelX(a0)
000162FA                            
000162FA                            loc_135F0:
000162FA 6100 0000                  		bsr.w	sub_14EB4
000162FE 4A41                       		tst.w	d1
00016300 6A00                       		bpl.s	loc_13602
00016302 D368 0008                  		add.w	d1,obX(a0)
00016306 317C 0000 0010             		move.w	#0,obVelX(a0)
0001630C                            
0001630C                            loc_13602:
0001630C 6100 0000                  		bsr.w	Sonic_HitFloor
00016310 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00016314 4A41                       		tst.w	d1
00016316 6A00                       		bpl.s	locret_1367E
00016318 1428 0012                  		move.b	obVelY(a0),d2
0001631C 5002                       		addq.b	#8,d2
0001631E 4402                       		neg.b	d2
00016320 B202                       		cmp.b	d2,d1
00016322 6C00                       		bge.s	loc_1361E
00016324 B002                       		cmp.b	d2,d0
00016326 6D00                       		blt.s	locret_1367E
00016328                            
00016328                            loc_1361E:
00016328 D368 000C                  		add.w	d1,obY(a0)
0001632C 1143 0026                  		move.b	d3,obAngle(a0)
00016330 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016334 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0001633A 1003                       		move.b	d3,d0
0001633C 0600 0020                  		addi.b	#$20,d0
00016340 0200 0040                  		andi.b	#$40,d0
00016344 6600                       		bne.s	loc_1365C
00016346 1003                       		move.b	d3,d0
00016348 0600 0010                  		addi.b	#$10,d0
0001634C 0200 0020                  		andi.b	#$20,d0
00016350 6700                       		beq.s	loc_1364E
00016352 E0E8 0012                  		asr	obVelY(a0)
00016356 6000                       		bra.s	loc_13670
00016358                            ; ===========================================================================
00016358                            
00016358                            loc_1364E:
00016358 317C 0000 0012             		move.w	#0,obVelY(a0)
0001635E 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
00016364 4E75                       		rts	
00016366                            ; ===========================================================================
00016366                            
00016366                            loc_1365C:
00016366 317C 0000 0010             		move.w	#0,obVelX(a0)
0001636C 0C68 0FC0 0012             		cmpi.w	#$FC0,obVelY(a0)
00016372 6F00                       		ble.s	loc_13670
00016374 317C 0FC0 0012             		move.w	#$FC0,obVelY(a0)
0001637A                            
0001637A                            loc_13670:
0001637A 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016380 4A03                       		tst.b	d3
00016382 6A00                       		bpl.s	locret_1367E
00016384 4468 0020                  		neg.w	obInertia(a0)
00016388                            
00016388                            locret_1367E:
00016388 4E75                       		rts	
0001638A                            ; ===========================================================================
0001638A                            
0001638A                            loc_13680:
0001638A 6100 0000                  		bsr.w	Sonic_HitWall
0001638E 4A41                       		tst.w	d1
00016390 6A00                       		bpl.s	loc_1369A
00016392 9368 0008                  		sub.w	d1,obX(a0)
00016396 317C 0000 0010             		move.w	#0,obVelX(a0)
0001639C 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000163A2 4E75                       		rts	
000163A4                            ; ===========================================================================
000163A4                            
000163A4                            loc_1369A:
000163A4 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000163A8 4A41                       		tst.w	d1
000163AA 6A00                       		bpl.s	loc_136B4
000163AC 9368 000C                  		sub.w	d1,obY(a0)
000163B0 4A68 0012                  		tst.w	obVelY(a0)
000163B4 6A00                       		bpl.s	locret_136B2
000163B6 317C 0000 0012             		move.w	#0,obVelY(a0)
000163BC                            
000163BC                            locret_136B2:
000163BC 4E75                       		rts	
000163BE                            ; ===========================================================================
000163BE                            
000163BE                            loc_136B4:
000163BE 4A68 0012                  		tst.w	obVelY(a0)
000163C2 6B00                       		bmi.s	locret_136E0
000163C4 6100 0000                  		bsr.w	Sonic_HitFloor
000163C8 4A41                       		tst.w	d1
000163CA 6A00                       		bpl.s	locret_136E0
000163CC D368 000C                  		add.w	d1,obY(a0)
000163D0 1143 0026                  		move.b	d3,obAngle(a0)
000163D4 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000163D8 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000163DE 317C 0000 0012             		move.w	#0,obVelY(a0)
000163E4 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
000163EA                            
000163EA                            locret_136E0:
000163EA 4E75                       		rts	
000163EC                            ; ===========================================================================
000163EC                            
000163EC                            loc_136E2:
000163EC 6100 0000                  		bsr.w	Sonic_HitWall
000163F0 4A41                       		tst.w	d1
000163F2 6A00                       		bpl.s	loc_136F4
000163F4 9368 0008                  		sub.w	d1,obX(a0)
000163F8 317C 0000 0010             		move.w	#0,obVelX(a0)
000163FE                            
000163FE                            loc_136F4:
000163FE 6100 0000                  		bsr.w	sub_14EB4
00016402 4A41                       		tst.w	d1
00016404 6A00                       		bpl.s	loc_13706
00016406 D368 0008                  		add.w	d1,obX(a0)
0001640A 317C 0000 0010             		move.w	#0,obVelX(a0)
00016410                            
00016410                            loc_13706:
00016410 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00016414 4A41                       		tst.w	d1
00016416 6A00                       		bpl.s	locret_1373C
00016418 9368 000C                  		sub.w	d1,obY(a0)
0001641C 1003                       		move.b	d3,d0
0001641E 0600 0020                  		addi.b	#$20,d0
00016422 0200 0040                  		andi.b	#$40,d0
00016426 6600                       		bne.s	loc_13726
00016428 317C 0000 0012             		move.w	#0,obVelY(a0)
0001642E 4E75                       		rts	
00016430                            ; ===========================================================================
00016430                            
00016430                            loc_13726:
00016430 1143 0026                  		move.b	d3,obAngle(a0)
00016434 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016438 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
0001643E 4A03                       		tst.b	d3
00016440 6A00                       		bpl.s	locret_1373C
00016442 4468 0020                  		neg.w	obInertia(a0)
00016446                            
00016446                            locret_1373C:
00016446 4E75                       		rts	
00016448                            ; ===========================================================================
00016448                            
00016448                            loc_1373E:
00016448 6100 0000                  		bsr.w	sub_14EB4
0001644C 4A41                       		tst.w	d1
0001644E 6A00                       		bpl.s	loc_13758
00016450 D368 0008                  		add.w	d1,obX(a0)
00016454 317C 0000 0010             		move.w	#0,obVelX(a0)
0001645A 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016460 4E75                       		rts	
00016462                            ; ===========================================================================
00016462                            
00016462                            loc_13758:
00016462 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00016466 4A41                       		tst.w	d1
00016468 6A00                       		bpl.s	loc_13772
0001646A 9368 000C                  		sub.w	d1,obY(a0)
0001646E 4A68 0012                  		tst.w	obVelY(a0)
00016472 6A00                       		bpl.s	locret_13770
00016474 317C 0000 0012             		move.w	#0,obVelY(a0)
0001647A                            
0001647A                            locret_13770:
0001647A 4E75                       		rts	
0001647C                            ; ===========================================================================
0001647C                            
0001647C                            loc_13772:
0001647C 4A68 0012                  		tst.w	obVelY(a0)
00016480 6B00                       		bmi.s	locret_1379E
00016482 6100 0000                  		bsr.w	Sonic_HitFloor
00016486 4A41                       		tst.w	d1
00016488 6A00                       		bpl.s	locret_1379E
0001648A D368 000C                  		add.w	d1,obY(a0)
0001648E 1143 0026                  		move.b	d3,obAngle(a0)
00016492 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016496 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0001649C 317C 0000 0012             		move.w	#0,obVelY(a0)
000164A2 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
000164A8                            
000164A8                            locret_1379E:
000164A8 4E75                       		rts	
000164AA                            ; End of function Sonic_Floor
000164AA                            ; End of function Sonic_Floor
000164AA                            		include	"_incObj\Sonic ResetOnFloor.asm"
000164AA                            ; ---------------------------------------------------------------------------
000164AA                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000164AA                            ; ---------------------------------------------------------------------------
000164AA                            
000164AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000164AA                            
000164AA                            
000164AA                            Sonic_ResetOnFloor:            ; XREF: PlatformObject; et al
000164AA 4238 F5CD                  		clr.b	(v_homingattack).w
000164AE 08A8 0005 0022                     	bclr    #5,$22(a0)
000164B4 08A8 0001 0022                     	bclr    #1,$22(a0)
000164BA 0828 0002 0022                     	btst    #2,$22(a0)
000164C0 6700                               	beq.s    loc_137E4
000164C2 08A8 0002 0022             		bclr	#2,obStatus(a0)
000164C8 117C 0013 0016             		move.b	#$13,obHeight(a0)
000164CE 117C 0009 0017             		move.b	#9,obWidth(a0)
000164D4 117C 0000 001C             		move.b	#id_Walk,obAnim(a0) ; use running/walking animation
000164DA 5B68 000C                  		subq.w	#5,obY(a0)
000164DE                            
000164DE                            loc_137E4:
000164DE 117C 0000 003C             		move.b	#0,$3C(a0)
000164E4 31FC 0000 F7D0             		move.w	#0,(v_itembonus).w
000164EA 4E75                       		rts	
000164EC                            ; End of function Sonic_ResetOnFloor
000164EC                            ; End of function Sonic_ResetOnFloor
000164EC                            		include	"_incObj\Sonic (part 2).asm"
000164EC                            ; ---------------------------------------------------------------------------
000164EC                            ; Sonic	when he	gets hurt
000164EC                            ; ---------------------------------------------------------------------------
000164EC                            
000164EC                            Sonic_Hurt:	; Routine 4
000164EC 4EB9 0000 F56A             		jsr	(SpeedToPos).l
000164F2 0668 0030 0012             		addi.w	#$30,obVelY(a0)
000164F8 0828 0006 0022             		btst	#6,obStatus(a0)
000164FE 6700                       		beq.s	loc_1380C
00016500 0468 0020 0012             		subi.w	#$20,obVelY(a0)
00016506                            
00016506                            loc_1380C:
00016506 6100 0000                  		bsr.w	Sonic_HurtStop
0001650A 6100 F98A                  		bsr.w	Sonic_LevelBound
0001650E 6100 EE1A                  		bsr.w	Sonic_RecordPosition
00016512 6100 0000                  		bsr.w	Sonic_Animate
00016516 6100 0000                  		bsr.w	Sonic_LoadGfx
0001651A 4EF9 0000 F57E             		jmp	(DisplaySprite).l
00016520                            
00016520                            ; ---------------------------------------------------------------------------
00016520                            ; Subroutine to	stop Sonic falling after he's been hurt
00016520                            ; ---------------------------------------------------------------------------
00016520                            
00016520                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016520                            
00016520                            
00016520                            Sonic_HurtStop:
00016520 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00016524 0640 00E0                  		addi.w	#$E0,d0
00016528                            		;cmp.w	obY(a0),d0
00016528                            		;bcs.w	KillSonic
00016528 6100 FD84                  		bsr.w	Sonic_Floor
0001652C 0828 0001 0022             		btst	#1,obStatus(a0)
00016532 6600                       		bne.s	locret_13860
00016534 7000                       		moveq	#0,d0
00016536 3140 0012                  		move.w	d0,obVelY(a0)
0001653A 3140 0010                  		move.w	d0,obVelX(a0)
0001653E 3140 0020                  		move.w	d0,obInertia(a0)
00016542 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016548 5528 0024                  		subq.b	#2,obRoutine(a0)
0001654C 317C 0078 0030             		move.w	#$78,$30(a0)
00016552                            
00016552                            locret_13860:
00016552 4E75                       		rts	
00016554                            ; End of function Sonic_HurtStop
00016554                            
00016554                            ; ---------------------------------------------------------------------------
00016554                            ; Sonic	when he	dies
00016554                            ; ---------------------------------------------------------------------------
00016554                            
00016554                            Sonic_Death:	; Routine 6
00016554 6100 0000                  		bsr.w	GameOver
00016558 4EB9 0000 F532             		jsr	(ObjectFall).l
0001655E 6100 EDCA                  		bsr.w	Sonic_RecordPosition
00016562 6100 0000                  		bsr.w	Sonic_Animate
00016566 6100 0000                  		bsr.w	Sonic_LoadGfx
0001656A 4EF9 0000 F57E             		jmp	(DisplaySprite).l
00016570                            
00016570                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016570                            
00016570                            GameOver:
00016570 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00016574 0640 0100                  		addi.w	#$100,d0
00016578 B068 000C                  		cmp.w	obY(a0),d0
0001657C 6400 0000                  		bcc.w	locret_13900
00016580 317C FFC8 0012             		move.w	#-$38,obVelY(a0)
00016586 5428 0024                  		addq.b	#2,obRoutine(a0)
0001658A 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0001658E 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update lives counter
00016592 5338 FE12                  		subq.b	#1,(v_lives).w	; subtract 1 from number of lives
00016596 6600                       		bne.s	loc_138D4
00016598 317C 0000 003A             		move.w	#0,$3A(a0)
0001659E 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load GAME object
000165A4 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
000165AA 11FC 0001 D0DA             		move.b	#1,(v_objspace+$C0+obFrame).w ; set OVER object to correct frame
000165B0 4238 FE1A                  		clr.b	(f_timeover).w
000165B4                            
000165B4                            loc_138C2:
000165BE 7003                       		moveq	#3,d0
000165C0 4EF9 0000 173A             		jmp	(AddPLC).l	; load game over patterns
000165C6                            		
000165C6                            loc_138C3:
000165D0 7003                       		moveq	#3,d0
000165D2 4EF9 0000 173A             		jmp	(AddPLC).l	; load game over patterns
000165D8                            ; ===========================================================================
000165D8                            
000165D8                            loc_138D4:
000165D8 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000165DE 4A38 FE1A                  		tst.b	(f_timeover).w	; is TIME OVER tag set?
000165E2 6700                       		beq.s	locret_13900	; if not, branch
000165E4 317C 0000 003A             		move.w	#0,$3A(a0)
000165EA 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load TIME object
000165F0 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
000165F6 11FC 0002 D09A             		move.b	#2,(v_objspace+$80+obFrame).w
000165FC 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
00016602 60B0                       		bra.s	loc_138C2
00016604                            		
00016604                            
00016604                            ; ===========================================================================
00016604                            
00016604                            locret_13900:
00016604 4E75                       		rts	
00016606                            ; End of function GameOver
00016606                            
00016606                            ; ---------------------------------------------------------------------------
00016606                            ; Sonic	when the level is restarted
00016606                            ; ---------------------------------------------------------------------------
00016606                            
00016606                            Sonic_ResetLevel:; Routine 8
00016606 4A68 003A                  		tst.w	$3A(a0)
0001660A 6700                       		beq.s	locret_13914
0001660C 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00016610 6600                       		bne.s	locret_13914
00016612 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
00016618                            
00016618                            	locret_13914:
00016618 4E75                       		rts	
00016618 4E75                       		rts	
0001661A                            		include	"_incObj\Sonic Loops.asm"
0001661A                            ; ---------------------------------------------------------------------------
0001661A                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
0001661A                            ; ---------------------------------------------------------------------------
0001661A                            
0001661A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001661A                            
0001661A                            
0001661A                            Sonic_Loops:
0001661A 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; is level SLZ ?
00016620 6700                       		beq.s	@isstarlight	; if yes, branch
00016622 4A38 FE10                  		tst.b	(v_zone).w	; is level GHZ ?
00016626 6600 0000                  		bne.w	@noloops	; if not, branch
0001662A                            
0001662A                            	@isstarlight:
0001662A 3028 000C                  		move.w	obY(a0),d0
0001662E E248                       		lsr.w	#1,d0
00016630 0240 0380                  		andi.w	#$380,d0
00016634 1228 0008                  		move.b	obX(a0),d1
00016638 0241 007F                  		andi.w	#$7F,d1
0001663C D041                       		add.w	d1,d0
0001663E 43F8 A400                  		lea	(v_lvllayout).w,a1
00016642 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00016646                            
00016646 B238 F7AE                  		cmp.b	(v_256roll1).w,d1 ; is Sonic on a "roll tunnel" tile?
0001664A 6700 F906                  		beq.w	Sonic_ChkRoll	; if yes, branch
0001664E B238 F7AF                  		cmp.b	(v_256roll2).w,d1
00016652 6700 F8FE                  		beq.w	Sonic_ChkRoll
00016656                            
00016656 B238 F7AC                  		cmp.b	(v_256loop1).w,d1 ; is Sonic on a loop tile?
0001665A 6700                       		beq.s	@chkifleft	; if yes, branch
0001665C B238 F7AD                  		cmp.b	(v_256loop2).w,d1
00016660 6700                       		beq.s	@chkifinair
00016662 08A8 0006 0001             		bclr	#6,obRender(a0) ; return Sonic to high plane
00016668 4E75                       		rts	
0001666A                            ; ===========================================================================
0001666A                            
0001666A                            @chkifinair:
0001666A 0828 0001 0022             		btst	#1,obStatus(a0)	; is Sonic in the air?
00016670 6700                       		beq.s	@chkifleft	; if not, branch
00016672                            
00016672 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
00016678 4E75                       		rts	
0001667A                            ; ===========================================================================
0001667A                            
0001667A                            @chkifleft:
0001667A 3428 0008                  		move.w	obX(a0),d2
0001667E 0C02 002C                  		cmpi.b	#$2C,d2
00016682 6400                       		bcc.s	@chkifright
00016684                            
00016684 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
0001668A 4E75                       		rts	
0001668C                            ; ===========================================================================
0001668C                            
0001668C                            @chkifright:
0001668C 0C02 00E0                  		cmpi.b	#$E0,d2
00016690 6500                       		bcs.s	@chkangle1
00016692                            
00016692 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
00016698 4E75                       		rts	
0001669A                            ; ===========================================================================
0001669A                            
0001669A                            @chkangle1:
0001669A 0828 0006 0001             		btst	#6,obRender(a0) ; is Sonic on low plane?
000166A0 6600                       		bne.s	@chkangle2	; if yes, branch
000166A2                            
000166A2 1228 0026                  		move.b	obAngle(a0),d1
000166A6 6700                       		beq.s	@done
000166A8 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upside-down?
000166AC 6200                       		bhi.s	@done		; if yes, branch
000166AE 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
000166B4 4E75                       		rts	
000166B6                            ; ===========================================================================
000166B6                            
000166B6                            @chkangle2:
000166B6 1228 0026                  		move.b	obAngle(a0),d1
000166BA 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upright?
000166BE 6300                       		bls.s	@done		; if yes, branch
000166C0 08A8 0006 0001             		bclr	#6,obRender(a0)	; send Sonic to	high plane
000166C6                            
000166C6                            @noloops:
000166C6                            @done:
000166C6 4E75                       		rts	
000166C8                            ; End of function Sonic_Loops
000166C8                            ; End of function Sonic_Loops
000166C8                            		include	"_incObj\Sonic Animate.asm"
000166C8                            ; ---------------------------------------------------------------------------
000166C8                            ; Subroutine to	animate	Sonic's sprites
000166C8                            ; ---------------------------------------------------------------------------
000166C8                            
000166C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000166C8                            
000166C8                            
000166C8                            Sonic_Animate:				; XREF: Obj01_Control; et al
000166C8 43F9 0000 0000             		lea	(Ani_Sonic).l,a1
000166CE 4A38 FE19                          tst.b	(Super_Sonic_flag).w	    ; is sonic super?
000166D2 6700                       		beq.s	 Sonic_Animatecont	    ; if not, branch
000166D4 43F9 0000 0000             		lea	(Ani_SuperSonic).l,a1	
000166DA                            
000166DA                            Sonic_Animatecont:	
000166DA 7000                       		moveq	#0,d0
000166DC 1028 001C                  		move.b	obAnim(a0),d0
000166E0 B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
000166E4 6700                       		beq.s	@do		; if not, branch
000166E6 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
000166EA 4228 001B                  		clr.b	obAniFrame(a0) ; reset animation
000166EE 4228 001E                  		clr.b	obTimeFrame(a0) ; reset frame duration
000166F2                            		
000166F2 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag	;Mercury Pushing While Walking Fix	;Mercury Constants
000166F8                            
000166F8                            	@do:
000166F8 D040                       		add.w	d0,d0
000166FA D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
000166FE 1011                       		move.b	(a1),d0
00016700 6B00                       		bmi.s	@walkrunroll	; if animation is walk/run/roll/jump, branch
00016702 1228 0022                  		move.b	obStatus(a0),d1
00016706 0201 0001                  		andi.b	#1,d1
0001670A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016710 8328 0001                  		or.b	d1,obRender(a0)
00016714 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00016718 6A00                       		bpl.s	@delay		; if time remains, branch
0001671A 1140 001E                  		move.b	d0,obTimeFrame(a0) ; load frame duration
0001671E                            
0001671E                            @loadframe:
0001671E 7200                       		moveq	#0,d1
00016720 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
00016724 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00016728 0C00 00FD                  		cmp.b	#$FD,d0				; MJ: is it a flag from FD to FF?
0001672C 6400 0000                  		bhs		@end_FF				; MJ: if so, branch to flag routines
00016730                            
00016730                            	@next:
00016730 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
00016734 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
00016738                            
00016738                            	@delay:
00016738 4E75                       		rts	
0001673A                            ; ===========================================================================
0001673A                            
0001673A                            @end_FF:
0001673A 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0001673C 6600                       		bne.s	@end_FE		; if not, branch
0001673E 4228 001B                  		clr.b	obAniFrame(a0) ; restart the animation
00016742 1029 0001                  		move.b	1(a1),d0	; read sprite number
00016746 60E8                       		bra.s	@next
00016748                            ; ===========================================================================
00016748                            
00016748                            @end_FE:
00016748 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0001674A 6600                       		bne.s	@end_FD		; if not, branch
0001674C 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00016750 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
00016754 9200                       		sub.b	d0,d1
00016756 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0001675A 60D4                       		bra.s	@next
0001675C                            ; ===========================================================================
0001675C                            
0001675C                            @end_FD:
0001675C 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0001675E 6600                       		bne.s	@end		; if not, branch
00016760 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
00016766                            
00016766                            	@end:
00016766 4E75                       		rts	
00016768                            ; ===========================================================================
00016768                            
00016768                            @walkrunroll:
00016768 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0001676C 6ACA                       		bpl.s	@delay		; if time remains, branch
0001676E 5200                       		addq.b	#1,d0		; is animation walking/running?
00016770 6600 0000                  		bne.w	@rolljump	; if not, branch
00016774 7200                       		moveq	#0,d1
00016776 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
0001677A 6B00                       		bmi.s	@ble 			; better handling of angles
0001677C 6700                       		beq.s	@ble
0001677E 5300                       		subq.b	#1,d0
00016780                            
00016780                            	@ble:																
00016780 1428 0022                  		move.b	obStatus(a0),d2
00016784 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00016788 6600                       		bne.s	@flip		; if yes, branch
0001678A 4600                       		not.b	d0		; reverse angle
0001678C                            
0001678C                            	@flip:
0001678C 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00016790 6A00                       		bpl.s	@noinvert	; if angle is $0-$7F, branch
00016792 7203                       		moveq	#3,d1
00016794                            
00016794                            	@noinvert:
00016794 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001679A B302                       		eor.b	d1,d2
0001679C 8528 0001                  		or.b	d2,obRender(a0)
000167A0 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing something?	;Mercury Constants
000167A6 6600 0000                  		bne.w	@push		; if yes, branch
000167AA                            
000167AA E808                       		lsr.b	#4,d0		; divide angle by $10
000167AC 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000167B0 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
000167B4 6A00                       		bpl.s	@nomodspeed
000167B6 4442                       		neg.w	d2		; modulus speed
000167B8                            
000167B8                            	@nomodspeed:
000167B8 4A38 FE19                  		tst.b	(Super_Sonic_flag).w		; is sonic super?
000167BC 6700                       		beq.s	@cont		; if not, branch
000167BE 43F9 0000 0000             		lea	(SuperSonAni_Run).l,a1 ; use	running	animation
000167C4 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000167C8 6400                       		bcc.s	@running	; if yes, branch
000167CA 43F9 0000 0000             		lea	(SuperSonAni_Walk).l,a1 ; use walking animation
000167D0                            	
000167D0                            	@cont:	
000167D0 43F9 0000 0000             		lea	(SonAni_MaxRun).l,a1 ; use Dashing animation
000167D6 0C42 0A00                  		cmpi.w	#$A00,d2	; is Sonic at Dashing speed?
000167DA 6400                       		bcc.s	@running	; if yes, branch
000167DC                            
000167DC 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000167E2 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000167E6 6400                       		bcc.s	@running	; if yes, branch
000167E8                            
000167E8 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000167EE                            
000167EE                            	@running:
000167EE D000                       		add.b	d0,d0
000167F0 D000                       		add.b	d0,d0
000167F2 1600                       		move.b	d0,d3
000167F4 4442                       		neg.w	d2
000167F6 0642 0780                  		addi.w	#$780,d2
000167FA 6A00                       		bpl.s	@belowmax
000167FC 7400                       		moveq	#0,d2		; max animation speed
000167FE 6000                       		bra.s	@belowmax
00016800                            
00016800                            	@maxrunning:
00016800 D000                       		add.b d0,d0
00016802 1600                       		move.b d0,d3
00016804 4442                       		neg.w d2
00016806 0642 0800                  		addi.w #$800, d2
0001680A 6A00                       		bpl.s @belowmax
0001680C 7400                       		moveq #0, d2 
0001680E                            
0001680E                            	@belowmax:
0001680E E04A                       		lsr.w	#8,d2
00016810 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016814 6100 FF08                  		bsr.w	@loadframe
00016818 D728 001A                  		add.b	d3,obFrame(a0)	; modify frame number
0001681C 4E75                       		rts	
0001681E                            ; ===========================================================================
0001681E                            
0001681E                            @rolljump:
0001681E 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00016820 6600                       		bne.s	@push		; if not, branch
00016822 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016826 6A00                       		bpl.s	@nomodspeed2
00016828 4442                       		neg.w	d2
0001682A                            
0001682A                            	@nomodspeed2:
0001682A 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00016830 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00016834 6400                       		bcc.s	@rollfast	; if yes, branch
00016836 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
0001683C                            
0001683C                            	@rollfast:
0001683C 4442                       		neg.w	d2
0001683E 0642 0400                  		addi.w	#$400,d2
00016842 6A00                       		bpl.s	@belowmax2
00016844 7400                       		moveq	#0,d2
00016846                            
00016846                            	@belowmax2:
00016846 E04A                       		lsr.w	#8,d2
00016848 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
0001684C 1228 0022                  		move.b	obStatus(a0),d1
00016850 0201 0001                  		andi.b	#1,d1
00016854 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001685A 8328 0001                  		or.b	d1,obRender(a0)
0001685E 6000 FEBE                  		bra.w	@loadframe
00016862                            ; ===========================================================================
00016862                            
00016862                            @push:
00016862 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016866 6B00                       		bmi.s	@negspeed
00016868 4442                       		neg.w	d2
0001686A                            
0001686A                            	@negspeed:
0001686A 0642 0800                  		addi.w	#$800,d2
0001686E 6A00                       		bpl.s	@belowmax3	
00016870 7400                       		moveq	#0,d2
00016872                            
00016872                            	@belowmax3:
00016872 EC4A                       		lsr.w	#6,d2
00016874 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016878 43F9 0000 0000             		lea	(SonAni_Push).l,a1
0001687E 1228 0022                  		move.b	obStatus(a0),d1
00016882 0201 0001                  		andi.b	#1,d1
00016886 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001688C 8328 0001                  		or.b	d1,obRender(a0)
00016890 6000 FE8C                  		bra.w	@loadframe
00016894                            
00016894                            ; End of function Sonic_Animate
00016894                            ; End of function Sonic_Animate
00016894                            		include	"_anim\Sonic.asm"
00016894                            ; ---------------------------------------------------------------------------
00016894                            ; Animation script - Sonic
00016894                            ; ---------------------------------------------------------------------------
00016894                            Ani_Sonic:
00016894                            
00016894 0000                       ptr_Walk:	dc.w SonAni_Walk-Ani_Sonic
00016896 0000                       ptr_Run:	dc.w SonAni_Run-Ani_Sonic
00016898 0000                       ptr_Roll:	dc.w SonAni_Roll-Ani_Sonic
0001689A 0000                       ptr_Roll2:	dc.w SonAni_Roll2-Ani_Sonic
0001689C 0000                       ptr_Push:	dc.w SonAni_Push-Ani_Sonic
0001689E 0000                       ptr_Wait:	dc.w SonAni_Wait-Ani_Sonic
000168A0 0000                       ptr_Balance:	dc.w SonAni_Balance-Ani_Sonic
000168A2 0000                       ptr_LookUp:	dc.w SonAni_LookUp-Ani_Sonic
000168A4 0000                       ptr_Duck:	dc.w SonAni_Duck-Ani_Sonic
000168A6 0000                       ptr_Warp1:	dc.w SonAni_Warp1-Ani_Sonic
000168A8 0000                       ptr_Warp2:	dc.w SonAni_Warp2-Ani_Sonic
000168AA 0000                       ptr_Warp3:	dc.w SonAni_Warp3-Ani_Sonic
000168AC 0000                       ptr_Warp4:	dc.w SonAni_Warp4-Ani_Sonic
000168AE 0000                       ptr_Stop:	dc.w SonAni_Stop-Ani_Sonic
000168B0 0000                       ptr_Float1:	dc.w SonAni_Float1-Ani_Sonic
000168B2 0000                       ptr_Float2:	dc.w SonAni_Float2-Ani_Sonic
000168B4 0000                       ptr_Spring:	dc.w SonAni_Spring-Ani_Sonic
000168B6 0000                       ptr_Hang:	dc.w SonAni_Hang-Ani_Sonic
000168B8 0000                       ptr_Leap1:	dc.w SonAni_Leap1-Ani_Sonic
000168BA 0000                       ptr_Leap2:	dc.w SonAni_Leap2-Ani_Sonic
000168BC 0000                       ptr_Surf:	dc.w SonAni_Surf-Ani_Sonic
000168BE 0000                       ptr_GetAir:	dc.w SonAni_GetAir-Ani_Sonic
000168C0 0000                       ptr_Burnt:	dc.w SonAni_Burnt-Ani_Sonic
000168C2 0000                       ptr_Drown:	dc.w SonAni_Drown-Ani_Sonic
000168C4 0000                       ptr_Death:	dc.w SonAni_Death-Ani_Sonic
000168C6 0000                       ptr_Hurt:	dc.w SonAni_Hurt-Ani_Sonic
000168C8 0000                       ptr_WaterSlide:	dc.w SonAni_WaterSlide-Ani_Sonic
000168CA 0000                       ptr_Null:	dc.w SonAni_Null-Ani_Sonic
000168CC 0000                       ptr_Float3:	dc.w SonAni_Float3-Ani_Sonic
000168CE 0000                       ptr_Float4:	dc.w SonAni_Float4-Ani_Sonic
000168D0 0000                       ptr_MaxRun:	dc.w SonAni_MaxRun-Ani_Sonic
000168D2 0000                       ptr_Spindash:	dc.w SonAni_SpinDash-Ani_Sonic ;1F
000168D4 0000                       ptr_Hurt2:	dc.w SonAni_Hurt2-Ani_Sonic
000168D6 0000                       ptr_GetUp:	dc.w SonAni_GetUp-Ani_Sonic
000168D8 0000                       ptr_Blink:	dc.w SonAni_Blink-Ani_Sonic
000168DA 0000                       ptr_Sit:	dc.w SonAni_Sit-Ani_Sonic
000168DC 0000                       ptr_Peelout:	dc.w SonAni_Peelout-Ani_Sonic
000168DE 0000                       ptr_Hang2:	dc.w SonAni_Hang2-Ani_Sonic
000168E0 0000                       ptr_GetAir2:	dc.w SonAni_GetAir2-Ani_Sonic
000168E2 0000                       ptr_Transform:	dc.w SonAni_Transform-Ani_Sonic
000168E4                            
000168E4 FF10 1112 1314 150E 0FFF+  SonAni_Walk:	dc.b $FF, fr_walk13, fr_walk14,	fr_walk15, fr_walk16, fr_walk17, fr_walk18, fr_walk11, fr_walk12, afEnd, afEnd, afEnd, afEnd
000168F2 00                         		even
000168F2 FF2E 2F30 3132 3334 35FF+  SonAni_Run:	dc.b $FF, fr_run11,  fr_run12,  fr_run13,  fr_run14, fr_run15,  fr_run16,  fr_run17,  fr_run18, afEnd, afEnd, afEnd, afEnd
00016900 00                         		even
00016900 FE5E 5F60 6162 66          SonAni_Roll:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016907 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
0001690E 00                         		even
0001690E FE5E 5F60 6162 66          SonAni_Roll2:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016915 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
0001691C 00                         		even
0001691C 0D89 8A8B 8C8D 8E8F 90FF+  SonAni_Push:	dc.b $D,  fr_push1,  fr_push2,  fr_push3,  fr_push4, fr_push5,  fr_push6,  fr_push7,  fr_push8, afEnd, afEnd, afEnd, afEnd
0001692A 00                         		even
0001692A                            SonAni_Wait:	
0001692A 0501 0101 0101 0101 0102+  		dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016939 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016948 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016957 0203 0303 0404 0505 0506+  		dc.b   2,  3,  3,  3,  4,  4,  5,  5,  5,  6,  6,  6,  7,  7,  7
00016966 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016975 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016984 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016993 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
000169A2 0808 0909 0A0A FE04        		dc.b   8,  8,  9,  9,  $A, $A, $FE, 4
000169AA                            		even
000169AA 0F72 7374 75FF             SonAni_Balance:	dc.b $F, fr_balance1, fr_balance2, fr_balance3, fr_balance4, afEnd
000169B0                            		even
000169B0 030C 0DFE 01               SonAni_LookUp:	dc.b $3, fr_lookup1, fr_lookup2, afBack, 1
000169B6 00                         		even
000169B6 0270 71FE 01               SonAni_Duck:	dc.b $2, fr_duck2, fr_duck, afBack, 1
000169BC 00                         		even
000169BC 3F67 FF                    SonAni_Warp1:	dc.b $3F, fr_warp1, afEnd
000169C0 00                         		even
000169C0 3F68 FF                    SonAni_Warp2:	dc.b $3F, fr_warp2, afEnd
000169C4 00                         		even
000169C4 3F69 FF                    SonAni_Warp3:	dc.b $3F, fr_warp3, afEnd
000169C8 00                         		even
000169C8 3F6A FF                    SonAni_Warp4:	dc.b $3F, fr_warp4, afEnd
000169CC 00                         		even
000169CC 026B 6C6C 6D6D 6E6E FD00   SonAni_Stop:	dc.b 2,	fr_stop1, fr_stop2, fr_stop2, fr_stop3, fr_stop3, fr_stop4, fr_stop4, $FD,  0
000169D6                            		even
000169D6 077C 82FE 02               SonAni_Float1:	dc.b 7,	fr_float1, fr_float4, afBack, 2
000169DC 00                         		even
000169DC 037C 7D7E 7F80 817B FF     SonAni_Float2:	dc.b 3,	fr_float1, fr_float7, fr_float2, fr_float8, fr_float5, fr_float3, fr_float6, afEnd
000169E6 00                         		even
000169E6 0783 8483 8483 84FD 00     SonAni_Spring:	dc.b 7, fr_spring, fr_spring2, fr_spring, fr_spring2, fr_spring, fr_spring2, afChange, id_Walk
000169F0 00                         		even
000169F0 0485 86FF                  SonAni_Hang:	dc.b 4,	fr_hang1, fr_hang2, afEnd
000169F4                            		even
000169F4 036F 8888 8888 8888 6F87+  SonAni_Leap1:	dc.b $3, fr_leap3, fr_leap2, fr_leap2, fr_leap2, fr_leap2, fr_leap2, fr_leap2, fr_leap3, fr_leap1, afBack, 1
00016A00                            		even
00016A00 0D87 FD00                  SonAni_Leap2:	dc.b $D, fr_leap1, afChange, id_Leap1
00016A04                            		even
00016A04 3F91 FF                    SonAni_Surf:	dc.b $3F, fr_surf, afEnd
00016A08 00                         		even
00016A08 0B95 FD00                  SonAni_GetAir:	dc.b $B, fr_getair, afChange, id_GetAir2
00016A0C                            		even
00016A0C 2092 FF                    SonAni_Burnt:	dc.b $20, fr_burnt, afEnd
00016A10 00                         		even
00016A10 2F93 FF                    SonAni_Drown:	dc.b $2F, fr_drown, afEnd
00016A14 00                         		even
00016A14 0394 FF                    SonAni_Death:	dc.b 3,	fr_death, afEnd
00016A18 00                         		even
00016A18 0396 FF                    SonAni_Hurt:	dc.b 3,	fr_injury, afEnd
00016A1C 00                         		even
00016A1C                            SonAni_WaterSlide:
00016A1C 0796 97FF                  		dc.b 7, fr_injury, fr_waterslide, afEnd
00016A20                            		even
00016A20 7700 FD00                  SonAni_Null:	dc.b $77, fr_null, afChange, id_Walk
00016A24                            		even
00016A24 037C 7E80 817B FF          SonAni_Float3:	dc.b 3,	fr_float1, fr_float2, fr_float5, fr_float3, fr_float6, afEnd
00016A2C 00                         		even
00016A2C 037C FD00                  SonAni_Float4:	dc.b 3,	fr_float1, afChange, id_Walk
00016A30                            		even
00016A30 FF4E 4F50 51FF FFFF FFFF+  SonAni_MaxRun:  dc.b $FF, fr_peelout11, fr_peelout12, fr_peelout13, fr_peelout14, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd
00016A3E 00                         		even
00016A3E 009B 9C9B 9D9B 9E9B 9F9B+  SonAni_SpinDash: dc.b 0, fr_Spindash1, fr_spindash2, fr_spindash1, fr_spindash3, fr_spindash1, fr_spindash4, fr_spindash1, fr_spindash5, fr_spindash1, fr_spindash6, afEnd
00016A4A                            		even
00016A4A 0298 9699 FF               SonAni_Hurt2:	dc.b 2, fr_skele1, fr_injury, fr_skele2, afEnd	
00016A50 00                         		even
00016A50 030B FD00                  SonAni_GetUp:	dc.b 3, $B,$FD,  0
00016A54                            		even
00016A54 0102 FD00                  SonAni_Blink:	dc.b   1,  2,$FD,  0
00016A58                            		even
00016A58 0808 0909 0A0A 09FE 05     SonAni_Sit:	dc.b   8, 8, 9, 9, $A, $A,  9, $FE, 5
00016A62 00                         		even
00016A62 000E 0E0E 0E0E 0E0F 0F     SonAni_Peelout: dc.b 	0, $E, $E, $E, $E, $E, $E, $F, $F
00016A6B 0F0F 1010 1111 1213        		dc.b	$F, $F, $10, $10, $11, $11, $12, $13
00016A73 1415 2E2F 3031 32          		dc.b	$14, $15, $2E, $2F, $30, $31, $32
00016A7A 3334 35                    		dc.b	$33, $34, $35
00016A7D 4E4F 5051 FE04 FE          		dc.b	$4E, $4F, $50,  $51, -2, 4, $FE
00016A84                            		even
00016A84 137A 7879 78FF             SonAni_Hang2:	dc.b $13, fr_vhang3, fr_vhang1, fr_vhang2, fr_vhang1, $FF	
00016A8A                            		even
00016A8A 0576 FD00                  SonAni_GetAir2: dc.b $5, fr_getair2, afChange, id_Roll
00016A8E                            		even
00016A8E                            SonAni_Transform:
00016A8E 02A1 A1A2 A3A3 A4A4 A4A5   				dc.b 2, $A1,$A1,$A2,$A3,$A3,$A4,$A4,$A4,$A5
00016A98 A6A5 A7A7 A9A8 A9A8 A9A8+  		dc.b	$A6,$A5,$A7,$A7,$A9,$A8,$A9,$A8,$A9,$A8, afchange, id_Walk
00016AA4                            		even
00016AA4                            
00016AA4 =00000000                  id_Walk:	equ (ptr_Walk-Ani_Sonic)/2	; 0
00016AA4 =00000001                  id_Run:		equ (ptr_Run-Ani_Sonic)/2	; 1
00016AA4 =00000002                  id_Roll:	equ (ptr_Roll-Ani_Sonic)/2	; 2
00016AA4 =00000003                  id_Roll2:	equ (ptr_Roll2-Ani_Sonic)/2	; 3
00016AA4 =00000004                  id_Push:	equ (ptr_Push-Ani_Sonic)/2	; 4
00016AA4 =00000005                  id_Wait:	equ (ptr_Wait-Ani_Sonic)/2	; 5
00016AA4 =00000006                  id_Balance:	equ (ptr_Balance-Ani_Sonic)/2	; 6
00016AA4 =00000007                  id_LookUp:	equ (ptr_LookUp-Ani_Sonic)/2	; 7
00016AA4 =00000008                  id_Duck:	equ (ptr_Duck-Ani_Sonic)/2	; 8
00016AA4 =00000009                  id_Warp1:	equ (ptr_Warp1-Ani_Sonic)/2	; 9
00016AA4 =0000000A                  id_Warp2:	equ (ptr_Warp2-Ani_Sonic)/2	; $A
00016AA4 =0000000B                  id_Warp3:	equ (ptr_Warp3-Ani_Sonic)/2	; $B
00016AA4 =0000000C                  id_Warp4:	equ (ptr_Warp4-Ani_Sonic)/2	; $C
00016AA4 =0000000D                  id_Stop:	equ (ptr_Stop-Ani_Sonic)/2	; $D
00016AA4 =0000000E                  id_Float1:	equ (ptr_Float1-Ani_Sonic)/2	; $E
00016AA4 =0000000F                  id_Float2:	equ (ptr_Float2-Ani_Sonic)/2	; $F
00016AA4 =00000010                  id_Spring:	equ (ptr_Spring-Ani_Sonic)/2	; $10
00016AA4 =00000011                  id_Hang:	equ (ptr_Hang-Ani_Sonic)/2	; $11
00016AA4 =00000012                  id_Leap1:	equ (ptr_Leap1-Ani_Sonic)/2	; $12
00016AA4 =00000013                  id_Leap2:	equ (ptr_Leap2-Ani_Sonic)/2	; $13
00016AA4 =00000014                  id_Surf:	equ (ptr_Surf-Ani_Sonic)/2	; $14
00016AA4 =00000015                  id_GetAir:	equ (ptr_GetAir-Ani_Sonic)/2	; $15
00016AA4 =00000016                  id_Burnt:	equ (ptr_Burnt-Ani_Sonic)/2	; $16
00016AA4 =00000017                  id_Drown:	equ (ptr_Drown-Ani_Sonic)/2	; $17
00016AA4 =00000018                  id_Death:	equ (ptr_Death-Ani_Sonic)/2	; $18
00016AA4 =00000019                  id_Hurt:	equ (ptr_Hurt-Ani_Sonic)/2	; $19
00016AA4 =0000001A                  id_WaterSlide:	equ (ptr_WaterSlide-Ani_Sonic)/2 ; $1A
00016AA4 =0000001B                  id_Null:	equ (ptr_Null-Ani_Sonic)/2	; $1B
00016AA4 =0000001C                  id_Float3:	equ (ptr_Float3-Ani_Sonic)/2	; $1C
00016AA4 =0000001D                  id_Float4:	equ (ptr_Float4-Ani_Sonic)/2	; $1D
00016AA4 =0000001E                  id_MaxRun:	equ (ptr_MaxRun-Ani_Sonic)/2	; $1E
00016AA4 =0000001F                  id_Spindash:	equ (ptr_Spindash-Ani_Sonic)/2	; $1F
00016AA4 =00000020                  id_Hurt2:	equ (ptr_Hurt2-Ani_Sonic)/2	; $21
00016AA4 =00000021                  id_GetUp:	equ (ptr_GetUp-Ani_Sonic)/2	; $22
00016AA4 =00000022                  id_Blink:	equ (ptr_Blink-Ani_Sonic)/2	; $23
00016AA4 =00000023                  id_Sit:		equ (ptr_Sit-Ani_Sonic)/2	; $24
00016AA4 =00000024                  id_Peelout:	equ (ptr_Peelout-Ani_Sonic)/2	; $25
00016AA4 =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
00016AA4 =00000026                  id_GetAir2:	equ (ptr_GetAir2-Ani_Sonic)/2
00016AA4 =00000027                  id_Transform:		equ	(ptr_Transform-Ani_Sonic)/2
00016AA4 =00000027                  id_Transform:		equ	(ptr_Transform-Ani_Sonic)/2
00016AA4                            		include	"_anim\Super Sonic.asm"		
00016AA4                            ; ---------------------------------------------------------------------------
00016AA4                            ; Animation script - Super Sonic
00016AA4                            ; ---------------------------------------------------------------------------
00016AA4                            Ani_SuperSonic:
00016AA4                            
00016AA4 0000                       ptr_SuperWalk:	dc.w SuperSonAni_Walk-Ani_SuperSonic
00016AA6 0000                       ptr_SuperRun:	dc.w SuperSonAni_Run-Ani_SuperSonic
00016AA8 0000                       ptr_SuperRoll:	dc.w SuperSonAni_Roll-Ani_Sonic
00016AAA 0000                       ptr_SuperRoll2:	dc.w SuperSonAni_Roll2-Ani_Sonic
00016AAC 0000                       ptr_SuperPush:	dc.w SuperSonAni_Push-Ani_SuperSonic
00016AAE 0000                       ptr_SuperWait:	dc.w SuperSonAni_Wait-Ani_SuperSonic
00016AB0 0000                       ptr_SuperBalance:	dc.w SuperSonAni_Balance-Ani_SuperSonic
00016AB2 0000                       ptr_SuperLookUp:	dc.w SuperSonAni_LookUp-Ani_SuperSonic
00016AB4 0000                       ptr_SuperDuck:	dc.w SuperSonAni_Duck-Ani_SuperSonic
00016AB6 0000                       ptr_SuperWarp1:	dc.w SuperSonAni_Warp1-Ani_Sonic
00016AB8 0000                       ptr_SuperWarp2:	dc.w SuperSonAni_Warp2-Ani_Sonic
00016ABA 0000                       ptr_SuperWarp3:	dc.w SuperSonAni_Warp3-Ani_Sonic
00016ABC 0000                       ptr_SuperWarp4:	dc.w SuperSonAni_Warp4-Ani_Sonic
00016ABE 0000                       ptr_SuperStop:	dc.w SuperSonAni_Stop-Ani_SuperSonic
00016AC0 0000                       ptr_SuperFloat1:	dc.w SuperSonAni_Float1-Ani_SuperSonic
00016AC2 0000                       ptr_SuperFloat2:	dc.w SuperSonAni_Float2-Ani_SuperSonic
00016AC4 0000                       ptr_SuperSpring:	dc.w SuperSonAni_Spring-Ani_SuperSonic
00016AC6 0000                       ptr_SuperHang:	dc.w SuperSonAni_Hang-Ani_SuperSonic
00016AC8 0000                       ptr_SuperLeap1:	dc.w SuperSonAni_Leap1-Ani_Sonic
00016ACA 0000                       ptr_SuperLeap2:	dc.w SuperSonAni_Leap2-Ani_Sonic
00016ACC 0000                       ptr_SuperSurf:	dc.w SuperSonAni_Surf-Ani_SuperSonic
00016ACE 0000                       ptr_SuperGetAir:	dc.w SuperSonAni_GetAir-Ani_SuperSonic
00016AD0 0000                       ptr_SuperBurnt:	dc.w SuperSonAni_Burnt-Ani_Sonic
00016AD2 0000                       ptr_SuperDrown:	dc.w SuperSonAni_Drown-Ani_Sonic
00016AD4 0000                       ptr_SuperDeath:	dc.w SuperSonAni_Death-Ani_Sonic
00016AD6 0000                       ptr_SuperHurt:	dc.w SuperSonAni_Hurt-Ani_Sonic
00016AD8 0000                       ptr_SuperWaterSlide:	dc.w SuperSonAni_WaterSlide-Ani_Sonic
00016ADA 0000                       ptr_SuperNull:	dc.w SuperSonAni_Null-Ani_Sonic
00016ADC 0000                       ptr_SuperFloat3:	dc.w SuperSonAni_Float3-Ani_SuperSonic
00016ADE 0000                       ptr_SuperFloat4:	dc.w SuperSonAni_Float4-Ani_SuperSonic
00016AE0 0000                       ptr_SuperMaxRun:	dc.w SuperSonAni_MaxRun-Ani_SuperSonic
00016AE2 0000                       ptr_SuperSpindash:	dc.w SuperSonAni_SpinDash-Ani_Sonic ;1F
00016AE4 0000                       ptr_SuperHurt2:	dc.w SuperSonAni_Hurt2-Ani_Sonic
00016AE6 0000                       ptr_SuperGetUp:	dc.w SuperSonAni_GetUp-Ani_Sonic
00016AE8 0000                       ptr_SuperBlink:	dc.w SuperSonAni_Blink-Ani_SuperSonic
00016AEA 0000                       ptr_SuperSit:	dc.w SuperSonAni_Sit-Ani_Sonic
00016AEC 0000                       ptr_SuperPeelout:	dc.w SuperSonAni_Peelout-Ani_SuperSonic
00016AEE 0000                       ptr_SuperHang2:	dc.w SuperSonAni_Hang2-Ani_SuperSonic
00016AF0 0000                       ptr_SuperTransform:	dc.w SuperSonAni_Transform-Ani_SuperSonic
00016AF2                            
00016AF2 FF10 1112 1314 150E 0FFF+  SuperSonAni_Walk:	dc.b $FF, fr_walk13, fr_walk14,	fr_walk15, fr_walk16, fr_walk17, fr_walk18, fr_walk11, fr_walk12, afEnd, afEnd, afEnd, afEnd
00016B00 00                         		even
00016B00 FF2E 2F30 3132 3334 35FF+  SuperSonAni_Run:	dc.b $FF, fr_run11,  fr_run12,  fr_run13,  fr_run14, fr_run15,  fr_run16,  fr_run17,  fr_run18, afEnd, afEnd, afEnd, afEnd
00016B0E 00                         		even
00016B0E FE5E 5F60 6162 66          SuperSonAni_Roll:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016B15 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016B1C 00                         		even
00016B1C FE5E 5F60 6162 66          SuperSonAni_Roll2:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016B23 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016B2A 00                         		even
00016B2A FD89 8A8B 8C8D 8E8F 90FF+  SuperSonAni_Push:	dc.b $FD,  fr_push1,  fr_push2,  fr_push3,  fr_push4, fr_push5,  fr_push6,  fr_push7,  fr_push8, afEnd, afEnd, afEnd, afEnd
00016B38 00                         		even
00016B38                            SuperSonAni_Wait:	
00016B38 0501 0101 0101 0101 0102+  		dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016B47 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016B56 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016B65 0203 0303 0404 0505 0506+  		dc.b   2,  3,  3,  3,  4,  4,  5,  5,  5,  6,  6,  6,  7,  7,  7
00016B74 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016B83 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016B92 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016BA1 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016BB0 0808 0909 0A0A FE04        		dc.b   8,  8,  9,  9,  $A, $A, $FE, 4
00016BB8                            		even
00016BB8 0F72 7374 75FF             SuperSonAni_Balance:	dc.b $F, fr_balance1, fr_balance2, fr_balance3, fr_balance4, afEnd
00016BBE                            		even
00016BBE 030C 0DFE 01               SuperSonAni_LookUp:	dc.b $3, fr_lookup1, fr_lookup2, afBack, 1
00016BC4 00                         		even
00016BC4 0270 71FE 01               SuperSonAni_Duck:	dc.b $2, fr_duck2, fr_duck, afBack, 1
00016BCA 00                         		even
00016BCA 3F67 FF                    SuperSonAni_Warp1:	dc.b $3F, fr_warp1, afEnd
00016BCE 00                         		even
00016BCE 3F68 FF                    SuperSonAni_Warp2:	dc.b $3F, fr_warp2, afEnd
00016BD2 00                         		even
00016BD2 3F69 FF                    SuperSonAni_Warp3:	dc.b $3F, fr_warp3, afEnd
00016BD6 00                         		even
00016BD6 3F6A FF                    SuperSonAni_Warp4:	dc.b $3F, fr_warp4, afEnd
00016BDA 00                         		even
00016BDA 026B 6C6C 6D6D 6E6E FD00   SuperSonAni_Stop:	dc.b 2,	fr_stop1, fr_stop2, fr_stop2, fr_stop3, fr_stop3, fr_stop4, fr_stop4, $FD,  0
00016BE4                            		even
00016BE4 077C 82FE 02               SuperSonAni_Float1:	dc.b 7,	fr_float1, fr_float4, afBack, 2
00016BEA 00                         		even
00016BEA 037C 7D7E 7F80 817B FF     SuperSonAni_Float2:	dc.b 3,	fr_float1, fr_float7, fr_float2, fr_float8, fr_float5, fr_float3, fr_float6, afEnd
00016BF4 00                         		even
00016BF4 0783 8483 8483 84FD 00     SuperSonAni_Spring:	dc.b 7, fr_spring, fr_spring2, fr_spring, fr_spring2, fr_spring, fr_spring2, afChange, id_Walk
00016BFE 00                         		even
00016BFE 0485 86FF                  SuperSonAni_Hang:	dc.b 4,	fr_hang1, fr_hang2, afEnd
00016C02                            		even
00016C02 0F87 8787 FE01             SuperSonAni_Leap1:	dc.b $F, fr_leap1, fr_leap1, fr_leap1,	afBack, 1
00016C08                            		even
00016C08 0F87 88FE 01               SuperSonAni_Leap2:	dc.b $F, fr_leap1, fr_leap2, afBack, 1
00016C0E 00                         		even
00016C0E 3F91 FF                    SuperSonAni_Surf:	dc.b $3F, fr_surf, afEnd
00016C12 00                         		even
00016C12 0B95 9512 13FD 00          SuperSonAni_GetAir:	dc.b $B, fr_getair, fr_getair, fr_walk15, fr_walk16, afChange, id_Walk
00016C1A 00                         		even
00016C1A 2092 FF                    SuperSonAni_Burnt:	dc.b $20, fr_burnt, afEnd
00016C1E 00                         		even
00016C1E 2F93 FF                    SuperSonAni_Drown:	dc.b $2F, fr_drown, afEnd
00016C22 00                         		even
00016C22 0394 FF                    SuperSonAni_Death:	dc.b 3,	fr_death, afEnd
00016C26 00                         		even
00016C26 0396 FF                    SuperSonAni_Hurt:	dc.b 3,	fr_injury, afEnd
00016C2A 00                         		even
00016C2A                            SuperSonAni_WaterSlide:
00016C2A 0796 97FF                  		dc.b 7, fr_injury, fr_waterslide, afEnd
00016C2E                            		even
00016C2E 7700 FD00                  SuperSonAni_Null:	dc.b $77, fr_null, afChange, id_Walk
00016C32                            		even
00016C32 037C 7E80 817B FF          SuperSonAni_Float3:	dc.b 3,	fr_float1, fr_float2, fr_float5, fr_float3, fr_float6, afEnd
00016C3A 00                         		even
00016C3A 037C FD00                  SuperSonAni_Float4:	dc.b 3,	fr_float1, afChange, id_Walk
00016C3E                            		even
00016C3E FF4E 4F50 51FF FFFF FFFF+  SuperSonAni_MaxRun:  dc.b $FF, fr_peelout11, fr_peelout12, fr_peelout13, fr_peelout14, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd
00016C4C 00                         		even
00016C4C 009B 9C9B 9D9B 9E9B 9F9B+  SuperSonAni_SpinDash: dc.b 0, fr_Spindash1, fr_spindash2, fr_spindash1, fr_spindash3, fr_spindash1, fr_spindash4, fr_spindash1, fr_spindash5, fr_spindash1, fr_spindash6, afEnd
00016C58                            		even
00016C58 0298 9699 FF               SuperSonAni_Hurt2:	dc.b 2, fr_skele1, fr_injury, fr_skele2, afEnd	
00016C5E 00                         		even
00016C5E 030B FD00                  SuperSonAni_GetUp:	dc.b 3, $B,$FD,  0
00016C62                            		even
00016C62 0102 FD00                  SuperSonAni_Blink:	dc.b   1,  2,$FD,  0
00016C66                            		even
00016C66 0808 0909 0A0A 09FE 05     SuperSonAni_Sit:	dc.b   8, 8, 9, 9, $A, $A,  9, $FE, 5
00016C70 00                         		even
00016C70 000E 0E0E 0E0E 0E0F 0F     SuperSonAni_Peelout: dc.b 	0, $E, $E, $E, $E, $E, $E, $F, $F
00016C79 0F0F 1010 1111 1213        		dc.b	$F, $F, $10, $10, $11, $11, $12, $13
00016C81 1415 2E2F 3031 32          		dc.b	$14, $15, $2E, $2F, $30, $31, $32
00016C88 3334 35                    		dc.b	$33, $34, $35
00016C8B 4E4F 5051 FE04 FE          		dc.b	$4E, $4F, $50,  $51, -2, 4, $FE
00016C92                            		even
00016C92 137A 7879 78FF             SuperSonAni_Hang2:	dc.b $13, fr_vhang3, fr_vhang1, fr_vhang2, fr_vhang1, $FF	
00016C98                            		even
00016C98                            SuperSonAni_Transform:
00016C98 02A1 A1A2 A3A3 A4A4 A4A5   				dc.b 2, $A1,$A1,$A2,$A3,$A3,$A4,$A4,$A4,$A5
00016CA2 A6A5 A7A7 A9A8 A9A8 A9A8+  		dc.b	$A6,$A5,$A7,$A7,$A9,$A8,$A9,$A8,$A9,$A8, afchange, id_Walk
00016CAE                            		even		
00016CAE                            		even		
00016CAE                            		include	"_incObj\Sonic LoadGfx.asm"
00016CAE                            ; ---------------------------------------------------------------------------
00016CAE                            ; Sonic	graphics loading subroutine
00016CAE                            ; ---------------------------------------------------------------------------
00016CAE                            
00016CAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016CAE                            
00016CAE                            
00016CAE                            Sonic_LoadGfx:			; XREF: Obj01_Control; et al
00016CAE 7000                       		moveq	#0,d0
00016CB0 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00016CB4 B038 F766                  		cmp.b	($FFFFF766).w,d0
00016CB8 6700                       		beq.s	locret_13C96
00016CBA 11C0 F766                  		move.b	d0,($FFFFF766).w
00016CBE 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00016CC4 D040                       		add.w	d0,d0
00016CC6 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016CCA 7A00                       		moveq	#0,d5
00016CCC 1A1A                       		move.b	(a2)+,d5
00016CCE 5345                       		subq.w	#1,d5
00016CD0 6B00                       		bmi.s	locret_13C96
00016CD2 383C F000                  		move.w	#$F000,d4
00016CD6 2C3C 0000 0000             		move.l	#Art_Sonic,d6
00016CDC                            
00016CDC                            SPLC_ReadEntry:
00016CDC 7200                       		moveq	#0,d1
00016CDE 121A                       		move.b	(a2)+,d1
00016CE0 E149                       		lsl.w	#8,d1
00016CE2 121A                       		move.b	(a2)+,d1
00016CE4 3601                       		move.w	d1,d3
00016CE6 E04B                       		lsr.w	#8,d3
00016CE8 0243 00F0                  		andi.w	#$F0,d3
00016CEC 0643 0010                  		addi.w	#$10,d3
00016CF0 0241 0FFF                  		andi.w	#$FFF,d1
00016CF4 EB89                       		lsl.l	#5,d1
00016CF6 D286                       		add.l	d6,d1
00016CF8 3404                       		move.w	d4,d2
00016CFA D843                       		add.w	d3,d4
00016CFC D843                       		add.w	d3,d4
00016CFE 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
00016D04 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
00016D08                            
00016D08                            locret_13C96:
00016D08 4E75                       		rts	
00016D0A                            ; End of function Sonic_LoadGfx
00016D0A                            ; End of function Sonic_LoadGfx
00016D0A                            
00016D0A                            		include	"_incObj\0A Drowning Countdown.asm"
00016D0A                            ; ---------------------------------------------------------------------------
00016D0A                            ; Object 0A - drowning countdown numbers and small bubbles that float out of
00016D0A                            ; Sonic's mouth (LZ)
00016D0A                            ; ---------------------------------------------------------------------------
00016D0A                            
00016D0A                            DrownCount:
00016D0A 7000                       		moveq	#0,d0
00016D0C 1028 0024                  		move.b	obRoutine(a0),d0
00016D10 323B 0000                  		move.w	Drown_Index(pc,d0.w),d1
00016D14 4EFB 1000                  		jmp	Drown_Index(pc,d1.w)
00016D18                            ; ===========================================================================
00016D18                            Drown_Index:
00016D18 0000                       ptr_Drown_Main:		dc.w Drown_Main-Drown_Index
00016D1A 0000                       ptr_Drown_Animate:	dc.w Drown_Animate-Drown_Index
00016D1C 0000                       ptr_Drown_ChkWater:	dc.w Drown_ChkWater-Drown_Index
00016D1E 0000                       ptr_Drown_Display:	dc.w Drown_Display-Drown_Index
00016D20 0000                       ptr_Drown_Delete:	dc.w Drown_Delete-Drown_Index
00016D22 0000                       ptr_Drown_Countdown:	dc.w Drown_Countdown-Drown_Index
00016D24 0000                       ptr_Drown_AirLeft:	dc.w Drown_AirLeft-Drown_Index
00016D26 0000                       			dc.w Drown_Display-Drown_Index
00016D28 0000                       			dc.w Drown_Delete-Drown_Index
00016D2A                            
00016D2A =00000030                  drown_origX:		equ $30		; original x-axis position
00016D2A =00000038                  drown_time:		equ $38		; time between each number changes
00016D2A                            
00016D2A =00000000                  id_Drown_Main:		equ ptr_Drown_Main-Drown_Index		; 0
00016D2A =00000002                  id_Drown_Animate:	equ ptr_Drown_Animate-Drown_Index		; 2
00016D2A =00000004                  id_Drown_ChkWater:	equ ptr_Drown_ChkWater-Drown_Index	; 4
00016D2A =00000006                  id_Drown_Display:	equ ptr_Drown_Display-Drown_Index		; 6
00016D2A =00000008                  id_Drown_Delete:		equ ptr_Drown_Delete-Drown_Index		; 8
00016D2A =0000000A                  id_Drown_Countdown:	equ ptr_Drown_Countdown-Drown_Index	; $A
00016D2A =0000000C                  id_Drown_AirLeft:	equ ptr_Drown_AirLeft-Drown_Index		; $C
00016D2A                            ; ===========================================================================
00016D2A                            
00016D2A                            Drown_Main:	; Routine 0
00016D2A 5428 0024                  		addq.b	#2,obRoutine(a0)
00016D2E 217C 0001 4B26 0004        		move.l	#Map_Bub,obMap(a0)
00016D36 317C 83F5 0002             		move.w	#$83F5,obGfx(a0)
00016D3C 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; is level Spring Yard Zone?
00016D42 6700                       		beq.s	Drown_IsSYZ	; if yes, branch
00016D44 317C 8348 0002             		move.w	#$8348,obGfx(a0)	; LZ
00016D4A                            
00016D4A                            	Drown_IsSYZ:	
00016D4A 117C 0084 0001             		move.b	#$84,obRender(a0)
00016D50 117C 0010 0014             		move.b	#$10,obActWid(a0)
00016D56 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016D5C 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
00016D60 6A00                       		bpl.s	@smallbubble	; branch if $00-$7F
00016D62                            
00016D62 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Drown_Countdown next
00016D66 217C 0000 0000 0004        		move.l	#Map_Drown,obMap(a0)
00016D6E 317C 0440 0002             		move.w	#$440,obGfx(a0)
00016D74 0240 007F                  		andi.w	#$7F,d0
00016D78 1140 0033                  		move.b	d0,$33(a0)
00016D7C 6000 0000                  		bra.w	Drown_Countdown
00016D80                            ; ===========================================================================
00016D80                            
00016D80                            @smallbubble:
00016D80 1140 001C                  		move.b	d0,obAnim(a0)
00016D84 3168 0008 0030             		move.w	obX(a0),drown_origX(a0)
00016D8A 317C FF78 0012             		move.w	#-$88,obVelY(a0)
00016D90                            
00016D90                            Drown_Animate:	; Routine 2
00016D90 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016D96 4EB9 0000 C634             		jsr	(AnimateSprite).l
00016D9C                            
00016D9C                            Drown_ChkWater:	; Routine 4
00016D9C 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; is level Spring Yard Zone? TIS
00016DA2 6600                       		bne.s	Normal_Water_Level	; if not, branch TIS
00016DA4 3038 FF92                  		move.w	(v_watersplashpos).w,d0	;TIS
00016DA8 0640 0010                  		add.w	#$10,d0	;Lower it a little - TIS
00016DAC B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water tag surface? - TIS
00016DB0 6200                       		bhi.s	Display_Next		; if so, branch TIS
00016DB2                            		
00016DB2                            
00016DB2                            Normal_Water_Level:
00016DB2 3038 F646                  		move.w	(v_waterpos1).w,d0
00016DB6 B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water surface?
00016DBA 6500                       		bcs.s	Wobble		; if not, branch
00016DBC                            Display_Next:	;TIS		
00016DBC 117C 0006 0024             		move.b	#id_Drown_Display,obRoutine(a0) ; goto Drown_Display next
00016DC2 5E28 001C                  		addq.b	#7,obAnim(a0)
00016DC6 0C28 000D 001C             		cmpi.b	#$D,obAnim(a0)
00016DCC 6700                       		beq.s	Drown_Display
00016DCE 6000                       		bra.s	Drown_Display
00016DD0                            ; ===========================================================================
00016DD0                            
00016DD0                            Wobble:
00016DD0 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic in a water tunnel?
00016DD4 6700                       		beq.s	@notunnel	; if not, branch
00016DD6 5868 0030                  		addq.w	#4,drown_origX(a0)
00016DDA                            
00016DDA                            	@notunnel:
00016DDA 1028 0026                  		move.b	obAngle(a0),d0
00016DDE 5228 0026                  		addq.b	#1,obAngle(a0)
00016DE2 0240 007F                  		andi.w	#$7F,d0
00016DE6 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00016DEC 1031 0000                  		move.b	(a1,d0.w),d0
00016DF0 4880                       		ext.w	d0
00016DF2 D068 0030                  		add.w	drown_origX(a0),d0
00016DF6 3140 0008                  		move.w	d0,obX(a0)
00016DFA 6100                       		bsr.s	Drown_ShowNumber
00016DFC 4EB9 0000 F56A             		jsr	(SpeedToPos).l
00016E02 4A28 0001                  		tst.b	obRender(a0)
00016E06 6A00                       		bpl.s	@delete
00016E08 4EF9 0000 F57E             		jmp	(DisplaySprite).l
00016E0E                            
00016E0E                            	@delete:
00016E0E 4EF9 0000 F5BE             		jmp	(DeleteObject).l
00016E14                            ; ===========================================================================
00016E14                            
00016E14                            Drown_Display:	; Routine 6, Routine $E
00016E14 6100                       		bsr.s	Drown_ShowNumber
00016E16 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016E1C 4EB9 0000 C634             		jsr	(AnimateSprite).l
00016E22 4EF9 0000 F57E             		jmp	(DisplaySprite).l
00016E28                            ; ===========================================================================
00016E28                            
00016E28                            Drown_Delete:	; Routine 8, Routine $10
00016E28 4EF9 0000 F5BE             		jmp	(DeleteObject).l
00016E2E                            ; ===========================================================================
00016E2E                            
00016E2E                            Drown_AirLeft:	; Routine $C
00016E2E 0C78 000C FE14             		cmpi.w	#$C,(v_air).w	; check air remaining
00016E34 6200                       		bhi.s	Drown_AirLeft_Delete		; if higher than $C, branch
00016E36 5368 0038                  		subq.w	#1,drown_time(a0)
00016E3A 6600                       		bne.s	@display
00016E3C 117C 000E 0024             		move.b	#id_Drown_Display+8,obRoutine(a0) ; goto Drown_Display next
00016E42 5E28 001C                  		addq.b	#7,obAnim(a0)
00016E46 60CC                       		bra.s	Drown_Display
00016E48                            ; ===========================================================================
00016E48                            
00016E48                            	@display:
00016E48 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016E4E 4EB9 0000 C634             		jsr	(AnimateSprite).l
00016E54 4A28 0001                  		tst.b	obRender(a0)
00016E58 6A00                       		bpl.s	Drown_AirLeft_Delete
00016E5A 4EF9 0000 F57E             		jmp	(DisplaySprite).l
00016E60                            
00016E60                            Drown_AirLeft_Delete:	
00016E60 4EF9 0000 F5BE             		jmp	(DeleteObject).l
00016E66                            ; ===========================================================================
00016E66                            
00016E66                            Drown_ShowNumber:
00016E66 4A68 0038                  		tst.w	drown_time(a0)
00016E6A 6700                       		beq.s	@nonumber
00016E6C 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
00016E70 6600                       		bne.s	@nonumber	; if time remains, branch
00016E72 0C28 0007 001C             		cmpi.b	#7,obAnim(a0)
00016E78 6400                       		bcc.s	@nonumber
00016E7A                            
00016E7A 317C 000F 0038             		move.w	#15,drown_time(a0)
00016E80 4268 0012                  		clr.w	obVelY(a0)
00016E84 117C 0080 0001             		move.b	#$80,obRender(a0)
00016E8A 3028 0008                  		move.w	obX(a0),d0
00016E8E 9078 F700                  		sub.w	(v_screenposx).w,d0
00016E92 0640 0080                  		addi.w	#$80,d0
00016E96 3140 0008                  		move.w	d0,obX(a0)
00016E9A 3028 000C                  		move.w	obY(a0),d0
00016E9E 9078 F704                  		sub.w	(v_screenposy).w,d0
00016EA2 0640 0080                  		addi.w	#$80,d0
00016EA6 3140 000A                  		move.w	d0,obScreenY(a0)
00016EAA 117C 000C 0024             		move.b	#id_Drown_AirLeft,obRoutine(a0) ; goto Drown_AirLeft next
00016EB0                            
00016EB0                            	@nonumber:
00016EB0 4E75                       		rts	
00016EB2                            ; ===========================================================================
00016EB2                            Drown_WobbleData:
00016EB2 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00016EC2 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00016ED2 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00016EE2 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00016EF2 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00016F02 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00016F12 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
00016F22 FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
00016F32 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00016F42 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00016F52 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00016F62 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00016F72 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00016F82 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00016F92 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
00016FA2 FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
00016FB2                            ; ===========================================================================
00016FB2                            
00016FB2                            Drown_Countdown:; Routine $A
00016FB2 4A68 002C                  		tst.w	$2C(a0)
00016FB6 6600 0000                  		bne.w	@loc_13F86
00016FBA 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00016FC0 6400 0000                  		bcc.w	@nocountdown
00016FC4 0838 0006 D022             		btst	#6,(v_player+obStatus).w ; is Sonic underwater?
00016FCA 6700 0000                  		beq.w	@nocountdown	; if not, branch
00016FCE                            
00016FCE 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
00016FD2 6A00 0000                  		bpl.w	@nochange	; branch if time remains
00016FD6 317C 003B 0038             		move.w	#59,drown_time(a0)
00016FDC 317C 0001 0036             		move.w	#1,$36(a0)
00016FE2 4EB9 0000 3CA4             		jsr	(RandomNumber).l
00016FE8 0240 0001                  		andi.w	#1,d0
00016FEC 1140 0034                  		move.b	d0,$34(a0)
00016FF0 3038 FE14                  		move.w	(v_air).w,d0	; check air remaining
00016FF4 0C40 0019                  		cmpi.w	#25,d0
00016FF8 6700                       		beq.s	@warnsound	; play sound if	air is 25
00016FFA 0C40 0014                  		cmpi.w	#20,d0
00016FFE 6700                       		beq.s	@warnsound
00017000 0C40 000F                  		cmpi.w	#15,d0
00017004 6700                       		beq.s	@warnsound
00017006 0C40 000C                  		cmpi.w	#12,d0
0001700A 6200                       		bhi.s	@reduceair	; if air is above 12, branch
0001700C                            
0001700C                            	@skipmusic:
00017016 5328 0032                  		subq.b	#1,$32(a0)
0001701A 6A00                       		bpl.s	@reduceair
0001701C 1168 0033 0032             		move.b	$33(a0),$32(a0)
00017022 08E8 0007 0036             		bset	#7,$36(a0)
00017028 6000                       		bra.s	@reduceair
0001702A                            ; ===========================================================================
0001702A                            
0001702A                            @warnsound:
00017034                            
00017034                            @reduceair:
00017034 5378 FE14                  		subq.w	#1,(v_air).w	; subtract 1 from air remaining
00017038 6400 0000                  		bcc.w	@gotomakenum	; if air is above 0, branch
0001703C                            
0001703C                            		; Sonic drowns here
0001703C 6100 0000                  		bsr.w	ResumeMusic
00017040 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
00017050 31FC 0000 FF92             		move.w	#0,(v_watersplashpos).w	;max it out for now - TIS
00017056 117C 000A 0034             		move.b	#$A,$34(a0)
0001705C 317C 0001 0036             		move.w	#1,$36(a0)
00017062 317C 0078 002C             		move.w	#$78,$2C(a0)
00017068 2F08                       		move.l	a0,-(sp)
0001706A 41F8 D000                  		lea	(v_player).w,a0
0001706E 6100 F43A                  		bsr.w	Sonic_ResetOnFloor
00017072 117C 0017 001C             		move.b	#id_Drown,obAnim(a0)	; use Sonic's drowning animation
00017078 08E8 0001 0022             		bset	#1,obStatus(a0)
0001707E 08E8 0007 0002             		bset	#7,obGfx(a0)
00017084 317C 0000 0012             		move.w	#0,obVelY(a0)
0001708A 317C 0000 0010             		move.w	#0,obVelX(a0)
00017090 317C 0000 0020             		move.w	#0,obInertia(a0)
00017096 11FC 0001 F744             		move.b	#1,(f_nobgscroll).w
0001709C 205F                       		movea.l	(sp)+,a0
0001709E 4E75                       		rts	
000170A0                            ; ===========================================================================
000170A0                            
000170A0                            @loc_13F86:
000170A0 5368 002C                  		subq.w	#1,$2C(a0)
000170A4 6600                       		bne.s	@loc_13F94
000170A6 11FC 0006 D024             		move.b	#6,(v_player+obRoutine).w
000170AC 4E75                       		rts	
000170AE                            ; ===========================================================================
000170AE                            
000170AE                            	@loc_13F94:
000170AE 2F08                       		move.l	a0,-(sp)
000170B0 41F8 D000                  		lea	(v_player).w,a0
000170B4 4EB9 0000 F56A             		jsr	(SpeedToPos).l
000170BA 0668 0010 0012             		addi.w	#$10,obVelY(a0)
000170C0 205F                       		movea.l	(sp)+,a0
000170C2 6000                       		bra.s	@nochange
000170C4                            ; ===========================================================================
000170C4                            
000170C4                            @gotomakenum:
000170C4 6000                       		bra.s	@makenum
000170C6                            ; ===========================================================================
000170C6                            
000170C6                            @nochange:
000170C6 4A68 0036                  		tst.w	$36(a0)
000170CA 6700 0000                  		beq.w	@nocountdown
000170CE 5368 003A                  		subq.w	#1,$3A(a0)
000170D2 6A00 0000                  		bpl.w	@nocountdown
000170D6                            
000170D6                            @makenum:
000170D6 4EB9 0000 3CA4             		jsr	(RandomNumber).l
000170DC 0240 000F                  		andi.w	#$F,d0
000170E0 3140 003A                  		move.w	d0,$3A(a0)
000170E4 4EB9 0000 FB18             		jsr	(FindFreeObj).l
000170EA 6600 0000                  		bne.w	@nocountdown
000170EE 12BC 000A                  		move.b	#id_DrownCount,0(a1) ; load object
000170F2 3378 D008 0008             		move.w	(v_player+obX).w,obX(a1) ; match X position to Sonic
000170F8 7006                       		moveq	#6,d0
000170FA 0838 0000 D022             		btst	#0,(v_player+obStatus).w
00017100 6700                       		beq.s	@noflip
00017102 4440                       		neg.w	d0
00017104 137C 0040 0026             		move.b	#$40,obAngle(a1)
0001710A                            
0001710A                            	@noflip:
0001710A D169 0008                  		add.w	d0,obX(a1)
0001710E 3378 D00C 000C             		move.w	(v_player+obY).w,obY(a1)
00017114 137C 0006 0028             		move.b	#6,obSubtype(a1)
0001711A 4A68 002C                  		tst.w	$2C(a0)
0001711E 6700 0000                  		beq.w	@loc_1403E
00017122 0268 0007 003A             		andi.w	#7,$3A(a0)
00017128 0668 0000 003A             		addi.w	#0,$3A(a0)
0001712E 3038 D00C                  		move.w	(v_player+obY).w,d0
00017132 0440 000C                  		subi.w	#$C,d0
00017136 3340 000C                  		move.w	d0,obY(a1)
0001713A 4EB9 0000 3CA4             		jsr	(RandomNumber).l
00017140 1340 0026                  		move.b	d0,obAngle(a1)
00017144 3038 FE04                  		move.w	(v_framecount).w,d0
00017148 0200 0003                  		andi.b	#3,d0
0001714C 6600                       		bne.s	@loc_14082
0001714E 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00017154 6000                       		bra.s	@loc_14082
00017156                            ; ===========================================================================
00017156                            
00017156                            @loc_1403E:
00017156 0828 0007 0036             		btst	#7,$36(a0)
0001715C 6700                       		beq.s	@loc_14082
0001715E 3438 FE14                  		move.w	(v_air).w,d2
00017162 E24A                       		lsr.w	#1,d2
00017164 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001716A 0240 0003                  		andi.w	#3,d0
0001716E 6600                       		bne.s	@loc_1406A
00017170 08E8 0006 0036             		bset	#6,$36(a0)
00017176 6600                       		bne.s	@loc_14082
00017178 1342 0028                  		move.b	d2,obSubtype(a1)
0001717C 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00017182                            
00017182                            	@loc_1406A:
00017182 4A28 0034                  		tst.b	$34(a0)
00017186 6600                       		bne.s	@loc_14082
00017188 08E8 0006 0036             		bset	#6,$36(a0)
0001718E 6600                       		bne.s	@loc_14082
00017190 1342 0028                  		move.b	d2,obSubtype(a1)
00017194 337C 001C 0038             		move.w	#$1C,drown_time(a1)
0001719A                            
0001719A                            @loc_14082:
0001719A 5328 0034                  		subq.b	#1,$34(a0)
0001719E 6A00                       		bpl.s	@nocountdown
000171A0 4268 0036                  		clr.w	$36(a0)
000171A4                            
000171A4                            @nocountdown:
000171A4 4E75                       		rts	
000171A4 4E75                       		rts	
000171A6                            
000171A6                            
000171A6                            ; ---------------------------------------------------------------------------
000171A6                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
000171A6                            ; ---------------------------------------------------------------------------
000171A6                            
000171A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000171A6                            
000171A6                            
000171A6                            ResumeMusic:
000171A6                            		;cmpi.w	#12,(v_air).w	; more than 12 seconds of air left?
000171A6                            		;bhi.s	@over12		; if yes, branch
000171A6                            		;move.b	(v_Saved_music),d0
000171A6                            		;tst.b	(v_invinc).w ; is Sonic invincible?
000171A6                            		;beq.s	@notinvinc ; if not, branch
000171A6                            		;move.w	#bgm_Invincible,d0
000171A6                            		;tst.b	(v_shoes).w ; is Sonic speed shoes?
000171A6                            		;beq.s	@notinvinc	; if not, branch
000171A6                            		;move.w	#bgm_Ending,d0
000171A6                            
000171A6                            	;@notinvinc:
000171A6                            		;tst.b	(f_lockscreen).w ; is Sonic at a boss?
000171A6                            		;beq.s	@playselected ; if not, branch
000171A6                            		;move.w	#bgm_Boss,d0
000171A6                            
000171A6                            	;@playselected:
000171A6                            		;jsr	(PlaySound).l
000171A6                            
000171A6                            	;@over12:
000171A6 31FC 001E FE14             		move.w	#30,(v_air).w	; reset air to 30 seconds
000171AC 4238 D372                  		clr.b	(v_objspace+$340+$32).w
000171B0 4E75                       		rts	
000171B2                            
000171B2                            ;End of function ResumeMusic
000171B2                            
000171B2                            ; ===========================================================================
000171B2                            
000171B2                            		include	"_anim\Drowning Countdown.asm"
000171B2                            ; ---------------------------------------------------------------------------
000171B2                            ; Animation script - countdown numbers and bubbles (LZ)
000171B2                            ; ---------------------------------------------------------------------------
000171B2 0000                       Ani_Drown:	dc.w @zeroappear-Ani_Drown
000171B4 0000                       		dc.w @oneappear-Ani_Drown
000171B6 0000                       		dc.w @twoappear-Ani_Drown
000171B8 0000                       		dc.w @threeappear-Ani_Drown
000171BA 0000                       		dc.w @fourappear-Ani_Drown
000171BC 0000                       		dc.w @fiveappear-Ani_Drown
000171BE 0000                       		dc.w @smallbubble-Ani_Drown
000171C0 0000                       		dc.w @zeroflash-Ani_Drown
000171C2 0000                       		dc.w @oneflash-Ani_Drown
000171C4 0000                       		dc.w @twoflash-Ani_Drown
000171C6 0000                       		dc.w @threeflash-Ani_Drown
000171C8 0000                       		dc.w @fourflash-Ani_Drown
000171CA 0000                       		dc.w @fiveflash-Ani_Drown
000171CC 0000                       		dc.w @blank-Ani_Drown
000171CE 0000                       		dc.w @mediumbubble-Ani_Drown
000171D0 0500 0102 0304 090D FC     @zeroappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, afRoutine
000171DA 00                         		even
000171DA 0500 0102 0304 0C12 FC     @oneappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	afRoutine
000171E4 00                         		even
000171E4 0500 0102 0304 0C11 FC     @twoappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	afRoutine
000171EE 00                         		even
000171EE 0500 0102 0304 0B10 FC     @threeappear:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	afRoutine
000171F8 00                         		even
000171F8 0500 0102 0304 090F FC     @fourappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, afRoutine
00017202 00                         		even
00017202 0500 0102 0304 0A0E FC     @fiveappear:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, afRoutine
0001720C 00                         		even
0001720C 0E00 0102 FC               @smallbubble:	dc.b $E, 0, 1, 2, afRoutine
00017212 00                         		even
00017212 0716 0D16 0D16 0DFC        @zeroflash:	dc.b 7,	$16, $D, $16, $D, $16, $D, afRoutine
0001721A 0716 1216 1216 12FC        @oneflash:	dc.b 7,	$16, $12, $16, $12, $16, $12, afRoutine
00017222 0716 1116 1116 11FC        @twoflash:	dc.b 7,	$16, $11, $16, $11, $16, $11, afRoutine
0001722A 0716 1016 1016 10FC        @threeflash:	dc.b 7,	$16, $10, $16, $10, $16, $10, afRoutine
00017232 0716 0F16 0F16 0FFC        @fourflash:	dc.b 7,	$16, $F, $16, $F, $16, $F, afRoutine
0001723A 0716 0E16 0E16 0EFC        @fiveflash:	dc.b 7,	$16, $E, $16, $E, $16, $E, afRoutine
00017242 0EFC                       @blank:		dc.b $E, afRoutine
00017244 0E01 0203 04FC             @mediumbubble:	dc.b $E, 1, 2, 3, 4, afRoutine
0001724A                            		even
0001724A                            		even
0001724A                            Map_Drown:	include	"_maps\Drowning Countdown.asm"
0001724A                            ; ---------------------------------------------------------------------------
0001724A                            ; Sprite mappings - drowning countdown numbers (LZ)
0001724A                            ; ---------------------------------------------------------------------------
0001724A                            Map_Drown_internal:
0001724A 0000                       		dc.w @num-Map_Drown_internal
0001724C 01                         @num:		dc.b 1
0001724D E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00017252                            		even
00017252                            		even
00017252                            
00017252                            ; --------------------------------------------------
00017252                            ; Subroutine to load the shield's art over DMA
00017252                            ; --------------------------------------------------
00017252                            
00017252                            PLCLoad_Shields:
00017252 7000                       		moveq	#0,d0
00017254 1028 001A                  		move.b	obFrame(a0),d0	; load frame number
00017258 B028 0033                  		cmp.b	shield_LastLoadedDPLC(a0),d0
0001725C 6700                       		beq.s	locret2_13C96
0001725E 1140 0033                  		move.b	d0,shield_LastLoadedDPLC(a0)
00017262 2468 003C                  		move.l  shield_DPLC_Address(A0),a2
00017266 D040                       		add.w   d0,d0
00017268 D4F2 0000                  		adda.w  (a2,D0),a2
0001726C 3A1A                       		move.w  (a2)+,d5
0001726E 5345                       		subq.w  #1,d5
00017270 6B00                       		bmi.s	locret2_13C96
00017272 3828 0036                  		move.w  shield_vram_art(A0),d4
00017276                            
00017276                            loc_199BE:
00017276 7200                       		moveq	#0,d1
00017278 121A                       		move.b	(a2)+,d1
0001727A E149                       		lsl.w	#8,d1
0001727C 121A                       		move.b	(a2)+,d1
0001727E 3601                       		move.w	d1,d3
00017280 E04B                       		lsr.w	#8,d3
00017282 0243 00F0                  		andi.w	#$F0,d3
00017286 0643 0010                  		addi.w	#$10,d3
0001728A 0241 0FFF                  		andi.w	#$FFF,d1
0001728E EB89                       		lsl.l	#5,d1
00017290 D2A8 0038                  		add.l   shield_Art_Address(a0),d1
00017294 3404                       		move.w  d4,d2
00017296 D843                       		add.w   d3,d4
00017298 D843                       		add.w   d3,d4
0001729A 4EB9 0000 1476             		jsr     (QueueDMATransfer).l
000172A0 51CD FFD4                  		dbf     d5,loc_199BE	; repeat for number of entries
000172A4                            
000172A4                            locret2_13C96:
000172A4 4E75                       		rts	
000172A6                            ; End of function PLCLoad_Shields
000172A6                            
000172A6                            		include	"_incObj\4E Silver Shield.asm"
000172A6                            ; ---------------------------------------------------------------------------
000172A6                            ; Object 4E - Silver Shield
000172A6                            ; ---------------------------------------------------------------------------
000172A6                            SPShieldItem: ; XREF: Obj_Index
000172A6 7000                       		moveq	#0,d0
000172A8 1028 0024                  		move.b	obRoutine(a0),d0
000172AC 323B 0000                  		move.w	SPShieldItem_Index(pc,d0.w),d1
000172B0 4EFB 1000                  		jmp	SPShieldItem_Index(pc,d1.w)
000172B4                            ; ===========================================================================
000172B4                            ; off_1D900:
000172B4                            SPShieldItem_Index:
000172B4 0000                       		dc.w SPShieldItem_Init-SPShieldItem_Index	; 0
000172B6 0000                       		dc.w SPShieldItem_Main-SPShieldItem_Index	; 2
000172B8                            ; ===========================================================================
000172B8                            ; loc_1D904:
000172B8                            SPShieldItem_Init:
000172B8 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
000172C0 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
000172C8 217C 0000 0000 0038        		move.l	#Art_SpShield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
000172D0 117C 0004 0001             		move.b	#4,obRender(a0)
000172D6 317C 0080 0018             		move.w	#$80,obPriority(a0)
000172DC 117C 0018 0014             		move.b	#$18,obActWid(a0)
000172E2 317C 0541 0002             		move.w	#$541,obGfx(a0)
000172E8 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
000172EE 0838 0007 D002             		btst	#7,(v_player+obGfx).w
000172F4 6700                       		beq.s	@animclear
000172F6 08E8 0007 0002             		bset	#7,obGfx(a0)
000172FC                            
000172FC                            @animclear:
000172FC 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
00017302 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
00017308 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
0001730C                            ; loc_1D92C:
0001730C                            SPShieldItem_Main:
0001730C 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
00017310 4A38 FE2D                  		tst.b	(v_invinc).w
00017314 6600                       		bne.s	@return
00017316                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
00017316                            		;beq.s	@return	; If so, do not display and do not update variables
00017316 4A38 F5CA                  		tst.b	(v_SpShield).w
0001731A 6700 0000                  		beq.w	SPShieldItem_Destroy	; If not, change to Insta-Shield
0001731E 316A 0008 0008             		move.w	obX(a2),obX(a0)
00017324 316A 000C 000C             		move.w	obY(a2),obY(a0)
0001732A 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
00017330 4A6A 0002                  		tst.w	obGFX(a2)
00017334 6A00                       		bpl.s	@nothighpriority
00017336 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
0001733C                            
0001733C                            		@nothighpriority:
0001733C 43F9 0000 0000             		lea	(Ani_Shield).l,a1
00017342 4EB9 0000 C634             		jsr	(AnimateSprite).l
00017348 4EB9 0001 7252             		jsr	(PLCLoad_Shields).l
0001734E 4EF9 0000 F57E             		jmp	(DisplaySprite).l
00017354                            ; ---------------------------------------------------------------------------
00017354                            ; ===========================================================================
00017354                            
00017354                            @return:
00017354 4E75                       		rts
00017356                            
00017356                            SPShieldItem_Destroy:
00017356 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
0001735A 4E75                       		rts
0001735C                            ; ===========================================================================
0001735C                            ; ===========================================================================
0001735C                            		include	"_incObj\04 Gold Shield.asm"
0001735C                            ; ---------------------------------------------------------------------------
0001735C                            ; Object 04 - Gold Shield
0001735C                            ; ---------------------------------------------------------------------------
0001735C                            GShieldItem: ; XREF: Obj_Index
0001735C 7000                       		moveq	#0,d0
0001735E 1028 0024                  		move.b	obRoutine(a0),d0
00017362 323B 0000                  		move.w	GShieldItem_Index(pc,d0.w),d1
00017366 4EFB 1000                  		jmp	GShieldItem_Index(pc,d1.w)
0001736A                            ; ===========================================================================
0001736A                            ; off_1D900:
0001736A                            GShieldItem_Index:
0001736A 0000                       		dc.w GShieldItem_Init-GShieldItem_Index	; 0
0001736C 0000                       		dc.w GShieldItem_Main-GShieldItem_Index	; 2
0001736E                            ; ===========================================================================
0001736E                            ; loc_1D904:
0001736E                            GShieldItem_Init:
0001736E 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
00017376 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
0001737E 217C 0000 0000 0038        		move.l	#Art_GShield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
00017386 117C 0004 0001             		move.b	#4,obRender(a0)
0001738C 317C 0080 0018             		move.w	#$80,obPriority(a0)
00017392 117C 0018 0014             		move.b	#$18,obActWid(a0)
00017398 317C 0541 0002             		move.w	#$541,obGfx(a0)
0001739E 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
000173A4 0838 0007 D002             		btst	#7,(v_player+obGfx).w
000173AA 6700                       		beq.s	@animclear
000173AC 08E8 0007 0002             		bset	#7,obGfx(a0)
000173B2                            
000173B2                            @animclear:
000173B2 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
000173B8 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
000173BE 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
000173C2                            ; loc_1D92C:
000173C2                            GShieldItem_Main:
000173C2 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
000173C6 4A38 FE2D                  		tst.b	(v_invinc).w
000173CA 6600                       		bne.s	@return
000173CC                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
000173CC                            		;beq.s	@return	; If so, do not display and do not update variables
000173CC 4A38 F5C9                  		tst.b	(v_GShield).w
000173D0 6700 0000                  		beq.w	GShieldItem_Destroy	; If not, change to Insta-Shield
000173D4 316A 0008 0008             		move.w	obX(a2),obX(a0)
000173DA 316A 000C 000C             		move.w	obY(a2),obY(a0)
000173E0 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
000173E6 4A6A 0002                  		tst.w	obGFX(a2)
000173EA 6A00                       		bpl.s	@nothighpriority
000173EC 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
000173F2                            
000173F2                            		@nothighpriority:
000173F2 43F9 0000 0000             		lea	(Ani_Shield).l,a1
000173F8 4EB9 0000 C634             		jsr	(AnimateSprite).l
000173FE 4EB9 0001 7252             		jsr	(PLCLoad_Shields).l
00017404 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001740A                            ; ---------------------------------------------------------------------------
0001740A                            ; ===========================================================================
0001740A                            
0001740A                            @return:
0001740A 4E75                       		rts
0001740C                            
0001740C                            GShieldItem_Destroy:
0001740C 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
00017410 4E75                       		rts
00017412                            ; ===========================================================================
00017412                            ; ===========================================================================
00017412                            		include	"_incObj\07 Red Shield.asm"
00017412                            ; ---------------------------------------------------------------------------
00017412                            ; Object 07 - Red Shield
00017412                            ; ---------------------------------------------------------------------------
00017412                            RShieldItem: ; XREF: Obj_Index
00017412 7000                       		moveq	#0,d0
00017414 1028 0024                  		move.b	obRoutine(a0),d0
00017418 323B 0000                  		move.w	RShieldItem_Index(pc,d0.w),d1
0001741C 4EFB 1000                  		jmp	RShieldItem_Index(pc,d1.w)
00017420                            ; ===========================================================================
00017420                            ; off_1D900:
00017420                            RShieldItem_Index:
00017420 0000                       		dc.w RShieldItem_Init-RShieldItem_Index	; 0
00017422 0000                       		dc.w RShieldItem_Main-RShieldItem_Index	; 2
00017424                            ; ===========================================================================
00017424                            ; loc_1D904:
00017424                            RShieldItem_Init:
00017424 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
0001742C 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
00017434 217C 0000 0000 0038        		move.l	#Art_RedShield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
0001743C 117C 0004 0001             		move.b	#4,obRender(a0)
00017442 317C 0080 0018             		move.w	#$80,obPriority(a0)
00017448 117C 0018 0014             		move.b	#$18,obActWid(a0)
0001744E 317C 0541 0002             		move.w	#$541,obGfx(a0)
00017454 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
0001745A 0838 0007 D002             		btst	#7,(v_player+obGfx).w
00017460 6700                       		beq.s	@animclear
00017462 08E8 0007 0002             		bset	#7,obGfx(a0)
00017468                            
00017468                            @animclear:
00017468 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
0001746E 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
00017474 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
00017478                            ; loc_1D92C:
00017478                            RShieldItem_Main:
00017478 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
0001747C 4A38 FE2D                  		tst.b	(v_invinc).w
00017480 6600                       		bne.s	@return
00017482                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
00017482                            		;beq.s	@return	; If so, do not display and do not update variables
00017482 4A38 F5C8                  		tst.b	(v_RShield).w
00017486 6700 0000                  		beq.w	RShieldItem_Destroy	; If not, change to Insta-Shield
0001748A 316A 0008 0008             		move.w	obX(a2),obX(a0)
00017490 316A 000C 000C             		move.w	obY(a2),obY(a0)
00017496 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
0001749C 4A6A 0002                  		tst.w	obGFX(a2)
000174A0 6A00                       		bpl.s	@nothighpriority
000174A2 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
000174A8                            
000174A8                            		@nothighpriority:
000174A8 43F9 0000 0000             		lea	(Ani_Shield).l,a1
000174AE 4EB9 0000 C634             		jsr	(AnimateSprite).l
000174B4 4EB9 0001 7252             		jsr	(PLCLoad_Shields).l
000174BA 4EF9 0000 F57E             		jmp	(DisplaySprite).l
000174C0                            ; ---------------------------------------------------------------------------
000174C0                            ; ===========================================================================
000174C0                            
000174C0                            @return:
000174C0 4E75                       		rts
000174C2                            
000174C2                            RShieldItem_Destroy:
000174C2 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
000174C6 4E75                       		rts
000174C8                            ; ===========================================================================
000174C8                            ; ===========================================================================
000174C8                            		include	"_incObj\38 Shield.asm"
000174C8                            ; ---------------------------------------------------------------------------
000174C8                            ; Object 38 - Shield
000174C8                            ; ---------------------------------------------------------------------------
000174C8                            ShieldItem: ; XREF: Obj_Index
000174C8 7000                       		moveq	#0,d0
000174CA 1028 0024                  		move.b	obRoutine(a0),d0
000174CE 323B 0000                  		move.w	ShieldItem_Index(pc,d0.w),d1
000174D2 4EFB 1000                  		jmp	ShieldItem_Index(pc,d1.w)
000174D6                            ; ===========================================================================
000174D6                            ; off_1D900:
000174D6                            ShieldItem_Index:
000174D6 0000                       		dc.w ShieldItem_Init-ShieldItem_Index	; 0
000174D8 0000                       		dc.w ShieldItem_Main-ShieldItem_Index	; 2
000174DA                            ; ===========================================================================
000174DA                            ; loc_1D904:
000174DA                            ShieldItem_Init:
000174DA 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
000174E2 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
000174EA 217C 0000 0000 0038        		move.l	#Art_Shield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
000174F2 117C 0004 0001             		move.b	#4,obRender(a0)
000174F8 317C 0080 0018             		move.w	#$80,obPriority(a0)
000174FE 117C 0018 0014             		move.b	#$18,obActWid(a0)
00017504 317C 0541 0002             		move.w	#$541,obGfx(a0)
0001750A 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
00017510 0838 0007 D002             		btst	#7,(v_player+obGfx).w
00017516 6700                       		beq.s	loc_195F0S
00017518 08E8 0007 0002             		bset	#7,obGfx(a0)
0001751E                            
0001751E                            loc_195F0S:
0001751E 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
00017524 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
0001752A 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
0001752E                            ; loc_1D92C:
0001752E                            ShieldItem_Main:
0001752E 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
00017532 4A38 FE2D                  		tst.b	(v_invinc).w
00017536 6600                       		bne.s	return_1D976
00017538                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
00017538                            		;beq.s	return_1D976	; If so, do not display and do not update variables
00017538 4A38 FE2C                  		tst.b	(v_shield).w
0001753C 6700 0000                  		beq.w	ShieldItem_Destroy	; If not, change to Insta-Shield
00017540 316A 0008 0008             		move.w	obX(a2),obX(a0)
00017546 316A 000C 000C             		move.w	obY(a2),obY(a0)
0001754C 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
00017552 4A6A 0002                  		tst.w	obGFX(a2)
00017556 6A00                       		bpl.s	@nothighpriority
00017558 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
0001755E                            
0001755E                            		@nothighpriority:
0001755E 43F9 0000 0000             		lea	(Ani_Shield).l,a1
00017564 4EB9 0000 C634             		jsr	(AnimateSprite).l
0001756A 4EB9 0001 7252             		jsr	(PLCLoad_Shields).l
00017570 4EF9 0000 F57E             		jmp	(DisplaySprite).l
00017576                            ; ---------------------------------------------------------------------------
00017576                            ; ===========================================================================
00017576                            
00017576                            return_1D976:
00017576 4E75                       		rts
00017578                            
00017578                            ShieldItem_Destroy:
00017578 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
0001757C 4E75                       		rts
0001757E                            ; ===========================================================================
0001757E                            ; ===========================================================================
0001757E                            		include	"_incObj\19 Invincibility Stars.asm"	
0001757E                            ; ---------------------------------------------------------------------------
0001757E                            ; Object 10 - invincibility stars
0001757E                            ; ---------------------------------------------------------------------------
0001757E =00000024                  invstars_obroutine: equ obRoutine ; the same as routine in other objects
0001757E =00000030                  InvStars_AniScript: equ $30 ; animation script used by sub-objects(in main object it's clear and unused) (4 bytes)
0001757E =00000034                  InvStars_SpeedIndex: equ $34  ; (2 bytes)
0001757E =00000036                  InvStars_PrevPosIndex: equ $36 ; clear and unused in main object
0001757E                            
0001757E                            InvStarsObj: 
0001757E 7000                       		moveq	#0,d0
00017580 1028 0024                  		move.b	InvStars_obRoutine(a0),d0
00017584 323B 0000                  		move.w	InvStars_Index(pc,d0.w),d1
00017588 4EFB 1000                  		jmp	InvStars_Index(pc,d1.w)
0001758C                            ; ===========================================================================
0001758C 0000                       InvStars_Index:	dc.w @InitObjects-InvStars_Index
0001758E 0000                       		dc.w @MainObject-InvStars_Index
00017590 0000                       		dc.w @SubObject-InvStars_Index
00017592                            ; ===========================================================================
00017592                            
00017592                            	@SubObjectsData:
00017592 0000 0000                  		dc.l Ani_InvStars2 ; animation script
00017596 0B00                       		dc.w $0B00 ; speed index,sub3 anim
00017598 0000 0000                  		dc.l Ani_InvStars3
0001759C 160D                       		dc.w $160D
0001759E 0000 0000                  		dc.l Ani_InvStars4
000175A2 2C0D                       		dc.w $2C0D
000175A4                            ; ===========================================================================
000175A4                            
000175A4                            	@InitObjects:
000175A4 223C 0000 0000             		move.l	#Unc_Stars,d1
000175AA 343C ABC0                  		move.w	#$ABC0,d2
000175AE 363C 0220                  		move.w	#$220,d3
000175B2 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
000175B8 7400                       		moveq	#0,d2
000175BA 45FA FFD0                  		lea	@SubObjectsData-6(pc),a2
000175BE 43D0                       		lea	(a0),a1
000175C0 7203                       		moveq	#3,d1
000175C2                            		
000175C2                            	@initStars:
000175C2 1290                       		move.b	(a0),(a1) ; load obj35
000175C4 137C 0004 0024             		move.b	#4,InvStars_obRoutine(a1)		; => @SubObject
000175CA 237C 0000 0000 0004        		move.l	#Map_InvStars,obMap(a1)
000175D2 337C 055E 0002             		move.w	#$55E,obGfx(a1)
000175D8 137C 0044 0001             		move.b  #%001000100,obRender(a1)
000175DE 137C 0010 000E             		move.b	#$10,mainspr_width(a1)
000175E4 137C 0002 000F             		move.b	#2,mainspr_childsprites(a1)							 
000175EA 1342 0036                  		move.b	d2,InvStars_PrevPosIndex(a1)
000175EE 5242                       		addq.w	#1,d2
000175F0 235A 0030                  		move.l	(a2)+,InvStars_AniScript(a1)
000175F4 335A 0034                  		move.w	(a2)+,InvStars_SpeedIndex(a1)
000175F8 43E9 0040                  		lea	$40(a1),a1 ; a1=object
000175FC 51C9 FFC4                  		dbf	d1,@initStars
00017600                            
00017600 117C 0002 0024             		move.b	#2,InvStars_obRoutine(a0)		; => @MainObject
00017606 117C 0004 0034             		move.b	#4,InvStars_SpeedIndex(a0)
0001760C                            
0001760C                            	@MainObject:
0001760C 43F8 D000                  		lea (v_player).w,a1 ; a1=character
00017610 4A38 FE2D                  		tst.b   (v_invinc).w
00017614 6700 0000                  		beq.w	JmpTo_DeleteObject
00017618 3029 0008                  		move.w	obX(a1),d0
0001761C 3140 0008                  		move.w	d0,obX(a0)
00017620 3229 000C                  		move.w	obY(a1),d1
00017624 3141 000C                  		move.w	d1,obY(a0)
00017628 45E8 0010                  		lea	sub2_x_pos(a0),a2
0001762C 47F9 0000 0000             		lea	Ani_InvStars1,a3
00017632 7A00                       		moveq	#0,d5
00017634                            
00017634                            	@getFrame_main:
00017634 3428 0038                  		move.w	$38(a0),d2
00017638 1A33 2000                  		move.b	(a3,d2.w),d5
0001763C 6A00                       		bpl.s	@setFrameAndPosition_main
0001763E 4268 0038                  		clr.w	$38(a0)
00017642 60F0                       		bra.s	@getFrame_main
00017644                            ; ===========================================================================
00017644                            
00017644                            	@setFrameAndPosition_main:
00017644 5268 0038                  		addq.w	#1,$38(a0)
00017648 4DF9 0000 0000             		lea	InvStars_Speeds,a6
0001764E 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
00017652 6100 0000                  		bsr.w	InvStars_get_speed
00017656 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
00017658 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
0001765A 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
0001765C 0646 0020                  		addi.w	#$20,d6
00017660 6100 0000                  		bsr.w	InvStars_get_speed
00017664 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
00017666 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
00017668 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
0001766A 7012                       		moveq	#$12,d0
0001766C 0829 0000 0022             		btst	#0,obStatus(a1)
00017672 6700                       		beq.s	@display_main
00017674 4440                       		neg.w	d0
00017676                            
00017676                            	@display_main:
00017676 D128 0034                  		add.b	d0,InvStars_SpeedIndex(a0)
0001767A 303C 0080                  		move.w	#(1*$80),d0
0001767E 4EF9 0000 F5AA             		jmp	DisplaySprite2
00017684                            ; ===========================================================================
00017684                            
00017684                            	@SubObject:
00017684 43F8 D000                  		lea 	(v_player).w,a1 ; a1=character
00017688 4A38 FE2D                  		tst.b   (v_invinc).w
0001768C 6700 0000                  		beq.w	JmpTo_DeleteObject
00017690 4BF8 F7A8                  		lea		(v_trackpos).w,a5
00017694 4DF8 CB00                  		lea		(v_tracksonic).w,a6
00017698                            
00017698                            	@getPosition_sub:
00017698 1228 0036                  		move.b	InvStars_PrevPosIndex(a0),d1
0001769C E509                       		lsl.b	#2,d1
0001769E 3401                       		move.w	d1,d2
000176A0 D241                       		add.w	d1,d1
000176A2 D242                       		add.w	d2,d1
000176A4 3015                       		move.w	(a5),d0
000176A6 9001                       		sub.b	d1,d0
000176A8 45F6 0000                  		lea	(a6,d0.w),a2
000176AC 301A                       		move.w	(a2)+,d0
000176AE 321A                       		move.w	(a2)+,d1
000176B0 3140 0008                  		move.w	d0,obX(a0)
000176B4 3141 000C                  		move.w	d1,obY(a0)
000176B8 45E8 0010                  		lea	sub2_x_pos(a0),a2
000176BC 2668 0030                  		movea.l	InvStars_AniScript(a0),a3
000176C0                            
000176C0                            	@getFrame_sub:
000176C0 3428 0038                  		move.w	$38(a0),d2
000176C4 1A33 2000                  		move.b	(a3,d2.w),d5
000176C8 6A00                       		bpl.s	@setFrameAndPosition_sub
000176CA 4268 0038                  		clr.w	$38(a0)
000176CE 60F0                       		bra.s	@getFrame_sub
000176D0                            ; ===========================================================================
000176D0                            
000176D0                            	@setFrameAndPosition_sub:
000176D0 4845                       		swap	d5
000176D2 D428 0035                  		add.b	$35(a0),d2
000176D6 1A33 2000                  		move.b	(a3,d2.w),d5
000176DA 5268 0038                  		addq.w	#1,$38(a0)
000176DE 4DFA 0000                  		lea	InvStars_Speeds(pc),a6
000176E2 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
000176E6 6100                       		bsr.s	InvStars_get_speed
000176E8 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
000176EA 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
000176EC 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
000176EE 0646 0020                  		addi.w	#$20,d6
000176F2 4845                       		swap	d5
000176F4 6100                       		bsr.s	InvStars_get_speed
000176F6 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
000176F8 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
000176FA 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
000176FC 7002                       		moveq	#2,d0
000176FE 0829 0000 0022             		btst	#0,obStatus(a1)
00017704 6700                       		beq.s	loc_1DB20
00017706 4440                       		neg.w	d0
00017708                            
00017708                            loc_1DB20:
00017708 D128 0034                  		add.b    d0,InvStars_SpeedIndex(a0)
0001770C 303C 0080                  		move.w    #(1*$80),d0
00017710 4EF9 0000 F5AA             		jmp    DisplaySprite2
00017716                            ; ===========================================================================
00017716                            
00017716                            InvStars_get_speed:
00017716 0246 003E                  		andi.w	#$3E,d6 ; limit to 6 bits and clear first bit
0001771A 1436 6000                  		move.b	(a6,d6.w),d2 ; move x-move speed to d2
0001771E 1636 6001                  		move.b	1(a6,d6.w),d3 ; move y-move speed to d3
00017722 4882                       		ext.w	d2
00017724 4883                       		ext.w	d3
00017726 D440                       		add.w	d0,d2 ; add object x position to x-move speed
00017728 D641                       		add.w	d1,d3 ; add object y position to y-move speed
0001772A 4E75                       		rts
0001772C                            
0001772C                            InvStars_Speeds: ; x-move speed,	y-move speed	
0001772C 0F00 0F03 0E06 0D08 0B0B+  		dc.w   $F00,  $F03,  $E06,  $D08,  $B0B,  $80D,  $60E,  $30F
0001773C 0010 FC0F F90E F70D F40B+  		dc.w    $10, -$3F1, -$6F2, -$8F3, -$BF5, -$DF8, -$EFA, -$FFD
0001774C F000 F0FC F1F9 F2F7 F4F4+  		dc.w  $F000, -$F04, -$E07, -$D09, -$B0C, -$80E, -$60F, -$310
0001775C FFF0 03F0 06F1 08F2 0BF4+  		dc.w   -$10,  $3F0,  $6F1,  $8F2,  $BF4,  $DF7,  $EF9,  $FFC
0001776C                            
0001776C                            ; ---------------------------------------------------------------------------
0001776C                            ; Animation script - invincibility stars
0001776C                            ; ---------------------------------------------------------------------------
0001776C                            
0001776C                            ; The animation script differs from the animate_sprite subroutine
0001776C                            ; Every positive byte - mapping
0001776C                            ; Every negative byte - loop flag 
0001776C                            
0001776C 0805 0706 0607 0508 0607+  Ani_InvStars1:	dc.b   8,  5,  7,  6,  6,  7,  5,  8,  6,  7,  7,  6,$FF
0001777A 00                         		even
0001777A 0807 0605 0403 0405 0607+  Ani_InvStars2:	dc.b   8,  7,  6,  5,  4,  3,  4,  5,  6,  7,$FF
00017785 0304 0506 0708 0706 0504   		dc.b   3,  4,  5,  6,  7,  8,  7,  6,  5,  4
00017790 00                         		even
00017790 0807 0605 0403 0203 0405+  Ani_InvStars3:	dc.b   8,  7,  6,  5,  4,  3,  2,  3,  4,  5,  6,  7,$FF
0001779D 0203 0405 0607 0807 0605+  		dc.b   2,  3,  4,  5,  6,  7,  8,  7,  6,  5,  4,  3
000177AA 00                         		even
000177AA 0706 0504 0302 0102 0304+  Ani_InvStars4:	dc.b   7,  6,  5,  4,  3,  2,  1,  2,  3,  4,  5,  6,$FF
000177B7 0102 0304 0506 0706 0504+  		dc.b   1,  2,  3,  4,  5,  6,  7,  6,  5,  4,  3,  2
000177C4 00                         		even			
000177C4                            ; ---------------------------------------------------------------------------
000177C4                            JmpTo_DeleteObject:
000177C4 4EF9 0000 F5BE             		jmp		(DeleteObject).l
000177C4 4EF9 0000 F5BE             		jmp		(DeleteObject).l
000177CA                            		include	"_incObj\8D Super Stars.asm"			
000177CA                            ; ---------------------------------------------------------------------------
000177CA                            ; Object 91 - Super Sonic Stars
000177CA                            ; ---------------------------------------------------------------------------
000177CA                            
000177CA                            SuperStars:					; XREF: Obj_Index					  ; ...
000177CA 223C 0000 0000             		move.l	#Unc_SuperSonic_stars,d1			        ; Call for Regular Shield Art
000177D0 343C ABC0                  		move.w	#$ABC0,d2			        ; Load Art from this location (VRAM location*20)
000177D4                            								; In this case, VRAM = $541*20
000177D4 363C 0100                  		move.w	#$100,d3
000177D8 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
000177DE 7000                       		moveq	#0,d0
000177E0 1028 0024                  		move.b	obRoutine(a0),d0
000177E4 323B 0000                  		move.w	SuperStars_States(pc,d0.w),d1
000177E8 4EFB 1000                  		jmp	SuperStars_States(pc,d1.w)
000177EC                            ; ---------------------------------------------------------------------------
000177EC 0000 0000                  SuperStars_States:	dc.w SuperStars_Init-SuperStars_States,SuperStars_Main-SuperStars_States; 0	; ...
000177F0                            ; ---------------------------------------------------------------------------
000177F0                            
000177F0                            SuperStars_Init:					  ; ...
000177F0 5428 0024                  		addq.b	#2,obRoutine(a0)
000177F4 217C 0000 0000 0004        		move.l	#SuperStars_MapUnc_1E1BE,4(a0)
000177FC 117C 0004 0001             		move.b	#4,obRender(a0)
00017802 317C 0080 0018             		move.w	#$80,obPriority(a0)
00017808 117C 0018 0014             		move.b	#$18,obActWid(a0)
0001780E 317C 055E 0002             		move.w	#$55E,art_tile(a0)
00017814 0838 0007 D002             		btst	#7,(v_player+art_tile).w
0001781A 6700                       		beq.s	SuperStars_Main
0001781C 08E8 0007 0002             		bset	#7,art_tile(a0)
00017822                            ; loc_1E138:
00017822                            SuperStars_Main:
00017822 4A38 FE19                  		tst.b	(Super_Sonic_flag).w
00017826 6700                       		beq.s	JmpTo8_DeleteObject
00017828 4A28 0030                  		tst.b	$30(a0)
0001782C 6700                       		beq.s	loc_1E188
0001782E 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
00017832 6A00                       		bpl.s	loc_1E170
00017834 117C 0001 001E             		move.b	#1,anim_frame_duration(a0)
0001783A 5228 001A                  		addq.b	#1,mapping_frame(a0)
0001783E 0C28 0006 001A             		cmpi.b	#6,mapping_frame(a0)
00017844 6500                       		bcs.s	loc_1E170
00017846 117C 0000 001A             		move.b	#0,mapping_frame(a0)
0001784C 117C 0000 0030             		move.b	#0,$30(a0)
00017852 117C 0001 0031             		move.b	#1,$31(a0)
00017858 4E75                       		rts
0001785A                            ; ===========================================================================
0001785A                            
0001785A                            loc_1E170:
0001785A 4A28 0031                  		tst.b	$31(a0)
0001785E 6600                       		bne.s	JmpTo6_DisplaySprite
00017860                            
00017860                            loc_1E176:
00017860 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0)
00017866 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0)
0001786C                            
0001786C                            JmpTo6_DisplaySprite:
0001786C 4EF9 0000 F57E             		jmp	DisplaySprite
00017872                            ; ===========================================================================
00017872                            
00017872                            loc_1E188:
00017872 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017876 6600                       		bne.s	loc_1E1AA
00017878 3038 D020                  		move.w	(v_player+obInertia).w,d0
0001787C 6A00                       		bpl.s	loc_1E196
0001787E 4440                       		neg.w	d0
00017880                            
00017880                            loc_1E196:
00017880 0C40 0800                  		cmpi.w	#$800,d0
00017884 6500                       		bcs.s	loc_1E1AA
00017886 117C 0000 001A             		move.b	#0,mapping_frame(a0)
0001788C 117C 0001 0030             		move.b	#1,$30(a0)
00017892 60CC                       		bra.s	loc_1E176
00017894                            ; ===========================================================================
00017894                            
00017894                            loc_1E1AA:
00017894 117C 0000 0030             		move.b	#0,$30(a0)
0001789A 117C 0000 0031             		move.b	#0,$31(a0)
000178A0 4E75                       		rts
000178A2                            ; ===========================================================================
000178A2                            
000178A2                            JmpTo8_DeleteObject:
000178A2 4EF9 0000 F5BE             		jmp	DeleteObject
000178A8                            ; ===========================================================================
000178A8                            
000178A8                            ; -------------------------------------------------------------------------------
000178A8                            ; sprite mappings
000178A8                            ; -------------------------------------------------------------------------------
000178A8                            ;Obj8F_MapUnc_1E1BE:
000178A8                            SuperStars_MapUnc_1E1BE:	include "_maps/Super Stars.asm"	
000178A8                            ; --------------------------------------------------------------------------------
000178A8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000178A8                            ; --------------------------------------------------------------------------------
000178A8                            
000178A8                            SME_fq6vL:	
000178A8 0000 0000                  		dc.w SME_fq6vL_C-SME_fq6vL, SME_fq6vL_21-SME_fq6vL	
000178AC 0000 0000                  		dc.w SME_fq6vL_36-SME_fq6vL, SME_fq6vL_4B-SME_fq6vL	
000178B0 0000 0000                  		dc.w SME_fq6vL_60-SME_fq6vL, SME_fq6vL_75-SME_fq6vL	
000178B4 04                         SME_fq6vL_C:	dc.b 4	
000178B5 F800 0000 F8               		dc.b $F8, 0, 0, 0, $F8	
000178BA F800 0800 00               		dc.b $F8, 0, 8, 0, 0	
000178BF 0000 1000 F8               		dc.b 0, 0, $10, 0, $F8	
000178C4 0000 1800 00               		dc.b 0, 0, $18, 0, 0	
000178C9 04                         SME_fq6vL_21:	dc.b 4	
000178CA F005 0001 F0               		dc.b $F0, 5, 0, 1, $F0	
000178CF F005 0801 00               		dc.b $F0, 5, 8, 1, 0	
000178D4 0005 1001 F0               		dc.b 0, 5, $10, 1, $F0	
000178D9 0005 1801 00               		dc.b 0, 5, $18, 1, 0	
000178DE 04                         SME_fq6vL_36:	dc.b 4	
000178DF E80A 0005 E8               		dc.b $E8, $A, 0, 5, $E8	
000178E4 E80A 0805 00               		dc.b $E8, $A, 8, 5, 0	
000178E9 000A 1005 E8               		dc.b 0, $A, $10, 5, $E8	
000178EE 000A 1805 00               		dc.b 0, $A, $18, 5, 0	
000178F3 04                         SME_fq6vL_4B:	dc.b 4	
000178F4 F005 0001 F0               		dc.b $F0, 5, 0, 1, $F0	
000178F9 F005 0801 00               		dc.b $F0, 5, 8, 1, 0	
000178FE 0005 1001 F0               		dc.b 0, 5, $10, 1, $F0	
00017903 0005 1801 00               		dc.b 0, 5, $18, 1, 0	
00017908 04                         SME_fq6vL_60:	dc.b 4	
00017909 F800 0000 F8               		dc.b $F8, 0, 0, 0, $F8	
0001790E F800 0800 00               		dc.b $F8, 0, 8, 0, 0	
00017913 0000 1000 F8               		dc.b 0, 0, $10, 0, $F8	
00017918 0000 1800 00               		dc.b 0, 0, $18, 0, 0	
0001791D 00                         SME_fq6vL_75:	dc.b 0	
0001791E                            		even
0001791E                            		even
0001791E                            
0001791E                            Unc_SuperSonic_stars:	incbin "artunc/Super Stars.bin"
00017ADE                            			even
00017ADE                            			even
00017ADE                            		include	"_incObj\4A Special Stage Entry (Unused).asm"
00017ADE                            ; ---------------------------------------------------------------------------
00017ADE                            ; Object 4A - special stage entry from beta
00017ADE                            ; ---------------------------------------------------------------------------
00017ADE                            
00017ADE                            VanishSonic:
00017ADE 7000                       		moveq	#0,d0
00017AE0 1028 0024                  		move.b	obRoutine(a0),d0
00017AE4 323B 0000                  		move.w	Van_Index(pc,d0.w),d1
00017AE8 4EFB 1000                  		jmp	Van_Index(pc,d1.w)
00017AEC                            ; ===========================================================================
00017AEC 0000                       Van_Index:	dc.w Van_Main-Van_Index
00017AEE 0000                       		dc.w Van_RmvSonic-Van_Index
00017AF0 0000                       		dc.w Van_LoadSonic-Van_Index
00017AF2                            
00017AF2 =00000030                  van_time:	equ $30		; time for Sonic to disappear
00017AF2                            ; ===========================================================================
00017AF2                            
00017AF2                            Van_Main:	; Routine 0
00017AF2 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are pattern load cues empty?
00017AF6 6700                       		beq.s	@isempty	; if yes, branch
00017AF8 4E75                       		rts	
00017AFA                            
00017AFA                            	@isempty:
00017AFA 5428 0024                  		addq.b	#2,obRoutine(a0)
00017AFE 217C 0000 0000 0004        		move.l	#Map_Vanish,obMap(a0)
00017B06 117C 0004 0001             		move.b	#4,obRender(a0)
00017B0C 317C 0080 0018             		move.w	#$80,obPriority(a0)
00017B12 117C 0038 0014             		move.b	#$38,obActWid(a0)
00017B18 317C 0541 0002             		move.w	#$541,obGfx(a0)
00017B1E 317C 0078 0030             		move.w	#120,van_time(a0) ; set time for Sonic's disappearance to 2 seconds
00017B24                            
00017B24                            Van_RmvSonic:	; Routine 2
00017B24 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0)
00017B2A 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0)
00017B30 1178 D022 0022             		move.b	(v_player+obStatus).w,obStatus(a0)
00017B36 43F9 0000 0000             		lea	(Ani_Vanish).l,a1
00017B3C 4EB9 0000 C634             		jsr	(AnimateSprite).l
00017B42 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
00017B48 6600                       		bne.s	@display
00017B4A 4A38 D000                  		tst.b	(v_player).w
00017B4E 6700                       		beq.s	@display
00017B50 11FC 0000 D000             		move.b	#0,(v_player).w	; remove Sonic
00017B60                            
00017B60                            	@display:
00017B60 4EF9 0000 F57E             		jmp	(DisplaySprite).l
00017B66                            ; ===========================================================================
00017B66                            
00017B66                            Van_LoadSonic:	; Routine 4
00017B66 5368 0030                  		subq.w	#1,van_time(a0)	; subtract 1 from time
00017B6A 6600                       		bne.s	@wait		; if time remains, branch
00017B6C 11FC 0001 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00017B72 4EF9 0000 F5BE             		jmp	(DeleteObject).l
00017B78                            
00017B78                            	@wait:
00017B78 4E75                       		rts	
00017B78 4E75                       		rts	
00017B7A                            		include	"_incObj\08 Water Splash.asm"
00017B7A                            ; ---------------------------------------------------------------------------
00017B7A                            ; Object 08 - water splash (LZ)
00017B7A                            ; ---------------------------------------------------------------------------
00017B7A                            
00017B7A                            Splash:
00017B7A 7000                       		moveq	#0,d0
00017B7C 1028 0024                  		move.b	obRoutine(a0),d0
00017B80 323B 0000                  		move.w	Spla_Index(pc,d0.w),d1
00017B84 4EFB 1000                  		jmp	Spla_Index(pc,d1.w)
00017B88                            ; ===========================================================================
00017B88 0000                       Spla_Index:	dc.w Spla_Main-Spla_Index
00017B8A 0000                       		dc.w Spla_Display-Spla_Index
00017B8C 0000                       		dc.w Spla_Delete-Spla_Index
00017B8E                            ; ===========================================================================
00017B8E                            
00017B8E                            Spla_Main:    ; Routine 0
00017B8E 5428 0024                          addq.b    #2,obRoutine(a0)
00017B92 217C 0000 0000 0004                move.l    #Map_Splash,obMap(a0)
00017B9A 0028 0004 0001                     ori.b    #4,obRender(a0)
00017BA0 117C 0001 0018                     move.b    #1,obPriority(a0)
00017BA6 117C 0010 0014                     move.b    #$10,obActWid(a0)
00017BAC 317C 4259 0002                     move.w    #$4259,obGfx(a0)
00017BB2 3178 D008 0008                     move.w    (v_player+obX).w,obX(a0) ; copy x-position from Sonic
00017BB8                            
00017BB8                            Spla_Display:    ; Routine 2
00017BB8                                    ;move.w    (v_waterpos1).w,obY(a0) ; copy y-position from water height
00017BB8 3178 FF92 000C                     move.w    (v_watersplashpos).w,obY(a0) ;TIS copy y-position from player
00017BBE 43F9 0000 0000                     lea    (Ani_Splash).l,a1
00017BC4 4EB9 0000 C634                     jsr    (AnimateSprite).l
00017BCA 4EF9 0000 F57E                     jmp    (DisplaySprite).l
00017BD0                            ; ===========================================================================
00017BD0                            
00017BD0                            Spla_Delete:	; Routine 4
00017BD0 4EF9 0000 F5BE             		jmp	(DeleteObject).l	; delete when animation	is complete
00017BD0 4EF9 0000 F5BE             		jmp	(DeleteObject).l	; delete when animation	is complete
00017BD6                            		include	"_anim\Shield and Invincibility.asm"
00017BD6                            ; ---------------------------------------------------------------------------
00017BD6                            ; Animation script - shield and invincibility stars
00017BD6                            ; ---------------------------------------------------------------------------
00017BD6 0000                       Ani_Shield:	dc.w @shield-Ani_Shield
00017BD8 0101 0002 0003 0004 0005+  @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, $A, 0, $B, 0, $C, 0, afEnd
00017BD8 0101 0002 0003 0004 0005+  @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, $A, 0, $B, 0, $C, 0, afEnd
00017BF2                            Map_Shield:	include	"_maps\Shield.asm"
00017BF2                            ; --------------------------------------------------------------------------------
00017BF2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00017BF2                            ; --------------------------------------------------------------------------------
00017BF2                            
00017BF2                            SME_ocN6K:	
00017BF2 0000 0000                  		dc.w SME_ocN6K_1A-SME_ocN6K, SME_ocN6K_1B-SME_ocN6K	
00017BF6 0000 0000                  		dc.w SME_ocN6K_30-SME_ocN6K, SME_ocN6K_45-SME_ocN6K	
00017BFA 0000 0000                  		dc.w SME_ocN6K_5A-SME_ocN6K, SME_ocN6K_6F-SME_ocN6K	
00017BFE 0000 0000                  		dc.w SME_ocN6K_7A-SME_ocN6K, SME_ocN6K_85-SME_ocN6K	
00017C02 0000 0000                  		dc.w SME_ocN6K_90-SME_ocN6K, SME_ocN6K_9B-SME_ocN6K	
00017C06 0000 0000                  		dc.w SME_ocN6K_A6-SME_ocN6K, SME_ocN6K_BB-SME_ocN6K	
00017C0A 0000                       		dc.w SME_ocN6K_D0-SME_ocN6K	
00017C0C 00                         SME_ocN6K_1A:	dc.b 0	
00017C0D 04                         SME_ocN6K_1B:	dc.b 4	
00017C0E E80E 2000 E3               		dc.b $E8, $E, $20, 0, $E3	
00017C13 E80A 200C 03               		dc.b $E8, $A, $20, $C, 3	
00017C18 000A 3015 03               		dc.b 0, $A, $30, $15, 3	
00017C1D 000E 301E E3               		dc.b 0, $E, $30, $1E, $E3	
00017C22 04                         SME_ocN6K_30:	dc.b 4	
00017C23 E80E 2000 E3               		dc.b $E8, $E, $20, 0, $E3	
00017C28 E80A 200C 03               		dc.b $E8, $A, $20, $C, 3	
00017C2D 000A 3015 03               		dc.b 0, $A, $30, $15, 3	
00017C32 000E 301E E3               		dc.b 0, $E, $30, $1E, $E3	
00017C37 04                         SME_ocN6K_45:	dc.b 4	
00017C38 E80E 2000 E3               		dc.b $E8, $E, $20, 0, $E3	
00017C3D E80A 200C 03               		dc.b $E8, $A, $20, $C, 3	
00017C42 000A 3015 03               		dc.b 0, $A, $30, $15, 3	
00017C47 000E 301E E3               		dc.b 0, $E, $30, $1E, $E3	
00017C4C 04                         SME_ocN6K_5A:	dc.b 4	
00017C4D E80E 2000 EB               		dc.b $E8, $E, $20, 0, $EB	
00017C52 E802 200C 0B               		dc.b $E8, 2, $20, $C, $B	
00017C57 000E 300F EB               		dc.b 0, $E, $30, $F, $EB	
00017C5C 0002 301B 0B               		dc.b 0, 2, $30, $1B, $B	
00017C61 02                         SME_ocN6K_6F:	dc.b 2	
00017C62 E80E 2000 EC               		dc.b $E8, $E, $20, 0, $EC	
00017C67 000E 300C EC               		dc.b 0, $E, $30, $C, $EC	
00017C6C 02                         SME_ocN6K_7A:	dc.b 2	
00017C6D E80A 2000 F1               		dc.b $E8, $A, $20, 0, $F1	
00017C72 000A 3009 F1               		dc.b 0, $A, $30, 9, $F1	
00017C77 02                         SME_ocN6K_85:	dc.b 2	
00017C78 E802 2000 F9               		dc.b $E8, 2, $20, 0, $F9	
00017C7D 0002 3003 F9               		dc.b 0, 2, $30, 3, $F9	
00017C82 02                         SME_ocN6K_90:	dc.b 2	
00017C83 E80A 2800 F1               		dc.b $E8, $A, $28, 0, $F1	
00017C88 000A 3809 F1               		dc.b 0, $A, $38, 9, $F1	
00017C8D 02                         SME_ocN6K_9B:	dc.b 2	
00017C8E E80E 2800 EC               		dc.b $E8, $E, $28, 0, $EC	
00017C93 000E 380C EC               		dc.b 0, $E, $38, $C, $EC	
00017C98 04                         SME_ocN6K_A6:	dc.b 4	
00017C99 E80E 2800 F3               		dc.b $E8, $E, $28, 0, $F3	
00017C9E E802 280C EB               		dc.b $E8, 2, $28, $C, $EB	
00017CA3 000E 380F F3               		dc.b 0, $E, $38, $F, $F3	
00017CA8 0002 381B EB               		dc.b 0, 2, $38, $1B, $EB	
00017CAD 04                         SME_ocN6K_BB:	dc.b 4	
00017CAE E80E 2800 FB               		dc.b $E8, $E, $28, 0, $FB	
00017CB3 E80A 280C E3               		dc.b $E8, $A, $28, $C, $E3	
00017CB8 000A 3815 E3               		dc.b 0, $A, $38, $15, $E3	
00017CBD 000E 381E FB               		dc.b 0, $E, $38, $1E, $FB	
00017CC2 04                         SME_ocN6K_D0:	dc.b 4	
00017CC3 E80E 2800 FB               		dc.b $E8, $E, $28, 0, $FB	
00017CC8 E80A 280C E3               		dc.b $E8, $A, $28, $C, $E3	
00017CCD 000A 3815 E3               		dc.b 0, $A, $38, $15, $E3	
00017CD2 000E 381E FB               		dc.b 0, $E, $38, $1E, $FB	
00017CD8 00                         		even
00017CD8 00                         		even
00017CD8                            DPLC_Shield:	include	"_maps\Shield - Dynamic Gfx Script.asm"
00017CD8                            ; --------------------------------------------------------------------------------
00017CD8                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 3 & Knuckles format; --------------------------------------------------------------------------------
00017CD8                            
00017CD8                            SME_yRIsY:	
00017CD8 0000 0000                  		dc.w SME_yRIsY_1A-SME_yRIsY, SME_yRIsY_1C-SME_yRIsY	
00017CDC 0000 0000                  		dc.w SME_yRIsY_26-SME_yRIsY, SME_yRIsY_30-SME_yRIsY	
00017CE0 0000 0000                  		dc.w SME_yRIsY_3A-SME_yRIsY, SME_yRIsY_44-SME_yRIsY	
00017CE4 0000 0000                  		dc.w SME_yRIsY_4A-SME_yRIsY, SME_yRIsY_50-SME_yRIsY	
00017CE8 0000 0000                  		dc.w SME_yRIsY_56-SME_yRIsY, SME_yRIsY_5C-SME_yRIsY	
00017CEC 0000 0000                  		dc.w SME_yRIsY_62-SME_yRIsY, SME_yRIsY_6C-SME_yRIsY	
00017CF0 0000                       		dc.w SME_yRIsY_76-SME_yRIsY	
00017CF2 0000                       SME_yRIsY_1A:	dc.b 0, 0	
00017CF4 0004 B000 800C 800C B000   SME_yRIsY_1C:	dc.b 0, 4, $B0, 0, $80, $C, $80, $C, $B0, 0	
00017CFE 0004 B015 8021 8021 B015   SME_yRIsY_26:	dc.b 0, 4, $B0, $15, $80, $21, $80, $21, $B0, $15	
00017D08 0004 B02A 8036 8036 B02A   SME_yRIsY_30:	dc.b 0, 4, $B0, $2A, $80, $36, $80, $36, $B0, $2A	
00017D12 0004 B03F 204B B03F 204B   SME_yRIsY_3A:	dc.b 0, 4, $B0, $3F, $20, $4B, $B0, $3F, $20, $4B	
00017D1C 0002 B04E B04E             SME_yRIsY_44:	dc.b 0, 2, $B0, $4E, $B0, $4E	
00017D22 0002 805A 805A             SME_yRIsY_4A:	dc.b 0, 2, $80, $5A, $80, $5A	
00017D28 0002 2063 2063             SME_yRIsY_50:	dc.b 0, 2, $20, $63, $20, $63	
00017D2E 0002 805A 805A             SME_yRIsY_56:	dc.b 0, 2, $80, $5A, $80, $5A	
00017D34 0002 B04E B04E             SME_yRIsY_5C:	dc.b 0, 2, $B0, $4E, $B0, $4E	
00017D3A 0004 B03F 204B B03F 204B   SME_yRIsY_62:	dc.b 0, 4, $B0, $3F, $20, $4B, $B0, $3F, $20, $4B	
00017D44 0004 B02A 8036 8036 B02A   SME_yRIsY_6C:	dc.b 0, 4, $B0, $2A, $80, $36, $80, $36, $B0, $2A	
00017D4E 0004 B015 8021 8021 B015   SME_yRIsY_76:	dc.b 0, 4, $B0, $15, $80, $21, $80, $21, $B0, $15	
00017D58                            		even
00017D58                            		even
00017D58                            Map_InvStars:	include	"_maps\Invincibility Stars.asm"
00017D58                            ; ================================================================================
00017D58                            ; Sprite Mappings - generated by Flex 2 Thu Apr 23 2020 12:30:36 GMT+0300 (RTZ 2 (зима))
00017D58                            ; ================================================================================
00017D58                            
00017D58                            InvStarMap:
00017D58 0000 0000                  	dc.w $0, InvStarMap_1-InvStarMap
00017D5C 0000 0000                  	dc.w InvStarMap_2-InvStarMap, InvStarMap_3-InvStarMap
00017D60 0000 0000                  	dc.w InvStarMap_4-InvStarMap, InvStarMap_5-InvStarMap
00017D64 0000 0000                  	dc.w InvStarMap_6-InvStarMap, InvStarMap_7-InvStarMap
00017D68 0000                       	dc.w InvStarMap_8-InvStarMap
00017D6A 01                         InvStarMap_1: dc.b $1
00017D6B F800 0000 FC               	dc.b $F8, $0, $0, $0, $FC
00017D70 01                         InvStarMap_2: dc.b $1
00017D71 F800 0001 FC               	dc.b $F8, $0, $0, $1, $FC
00017D76 01                         InvStarMap_3: dc.b $1
00017D77 F801 0002 FC               	dc.b $F8, $1, $0, $2, $FC
00017D7C 01                         InvStarMap_4: dc.b $1
00017D7D F801 0004 FC               	dc.b $F8, $1, $0, $4, $FC
00017D82 01                         InvStarMap_5: dc.b $1
00017D83 F801 0006 FC               	dc.b $F8, $1, $0, $6, $FC
00017D88 01                         InvStarMap_6: dc.b $1
00017D89 F805 0008 F8               	dc.b $F8, $5, $0, $8, $F8
00017D8E 01                         InvStarMap_7: dc.b $1
00017D8F F805 000C F8               	dc.b $F8, $5, $0, $C, $F8
00017D94 01                         InvStarMap_8: dc.b $1
00017D95 F00F 0010 F0               	dc.b $F0, $F, $0, $10, $F0
00017D9A                            	even
00017D9A                            	even
00017D9A                            		include	"_anim\Special Stage Entry (Unused).asm"
00017D9A                            ; ---------------------------------------------------------------------------
00017D9A                            ; Animation script - special stage entry effect from beta
00017D9A                            ; ---------------------------------------------------------------------------
00017D9A 0000                       Ani_Vanish:	dc.w @vanish-Ani_Vanish
00017D9C 0500 0100 0100 0701 0702+  @vanish:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, afRoutine
00017DB0                            		even
00017DB0                            		even
00017DB0                            Map_Vanish:	include	"_maps\Special Stage Entry (Unused).asm"
00017DB0                            ; ---------------------------------------------------------------------------
00017DB0                            ; Sprite mappings - special stage entry	from beta
00017DB0                            ; ---------------------------------------------------------------------------
00017DB0                            Map_Vanish_internal:
00017DB0 0000                       		dc.w @flash1-Map_Vanish_internal
00017DB2 0000                       		dc.w @flash2-Map_Vanish_internal
00017DB4 0000                       		dc.w @flash3-Map_Vanish_internal
00017DB6 0000                       		dc.w @sparkle1-Map_Vanish_internal
00017DB8 0000                       		dc.w @sparkle2-Map_Vanish_internal
00017DBA 0000                       		dc.w @sparkle3-Map_Vanish_internal
00017DBC 0000                       		dc.w @sparkle4-Map_Vanish_internal
00017DBE 0000                       		dc.w @blank-Map_Vanish_internal
00017DC0 03                         @flash1:	dc.b 3
00017DC1 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00017DC6 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00017DCB 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00017DD0 03                         @flash2:	dc.b 3
00017DD1 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00017DD6 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00017DDB 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00017DE0 05                         @flash3:	dc.b 5
00017DE1 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00017DE6 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00017DEB FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00017DF0 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00017DF5 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00017DFA 09                         @sparkle1:	dc.b 9
00017DFB F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00017E00 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00017E05 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00017E0A 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00017E0F F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00017E14 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00017E19 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00017E1E 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00017E23 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00017E28 12                         @sparkle2:	dc.b $12
00017E29 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00017E2E F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00017E33 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00017E38 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00017E3D 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00017E42 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00017E47 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00017E4C F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00017E51 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00017E56 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00017E5B 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00017E60 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00017E65 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00017E6A F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00017E6F 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00017E74 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00017E79 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00017E7E F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00017E83 11                         @sparkle3:	dc.b $11
00017E84 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00017E89 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00017E8E 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00017E93 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00017E98 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00017E9D F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00017EA2 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00017EA7 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00017EAC 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00017EB1 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00017EB6 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00017EBB 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00017EC0 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00017EC5 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00017ECA F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00017ECF 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00017ED4 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00017ED9 09                         @sparkle4:	dc.b 9
00017EDA FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00017EDF 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00017EE4 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00017EE9 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00017EEE FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00017EF3 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00017EF8 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00017EFD 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00017F02 04                         		dc.b 4
00017F03 0008 2758 00               @blank:		dc.b 0,	8, $27,	$58, 0
00017F08                            		even
00017F08                            		even
00017F08                            		include	"_anim\Water Splash.asm"
00017F08                            ; ---------------------------------------------------------------------------
00017F08                            ; Animation script - water splash (LZ)
00017F08                            ; ---------------------------------------------------------------------------
00017F08 0000                       Ani_Splash:	dc.w @splash-Ani_Splash
00017F0A 0400 0102 FC               @splash:	dc.b 4,	0, 1, 2, afRoutine
00017F10 00                         		even
00017F10 00                         		even
00017F10                            Map_Splash:	include	"_maps\Water Splash.asm"
00017F10                            ; ---------------------------------------------------------------------------
00017F10                            ; Sprite mappings - water splash (LZ)
00017F10                            ; ---------------------------------------------------------------------------
00017F10                            Map_Splash_internal:
00017F10 0000                       		dc.w @splash1-Map_Splash_internal
00017F12 0000                       		dc.w @splash2-Map_Splash_internal
00017F14 0000                       		dc.w @splash3-Map_Splash_internal
00017F16 02                         @splash1:	dc.b 2
00017F17 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00017F1C FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00017F21 02                         @splash2:	dc.b 2
00017F22 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00017F27 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00017F2C 01                         @splash3:	dc.b 1
00017F2D E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00017F32                            		even
00017F32                            		even
00017F32                            
00017F32                            		include	"_incObj\Sonic AnglePos.asm"
00017F32                            ; ---------------------------------------------------------------------------
00017F32                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00017F32                            ; ---------------------------------------------------------------------------
00017F32                            
00017F32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017F32                            
00017F32                            
00017F32                            Sonic_AnglePos:
00017F32 0828 0003 0022             		btst	#3,obStatus(a0)
00017F38 6700                       		beq.s	loc_14602
00017F3A 7000                       		moveq	#0,d0
00017F3C 11C0 F768                  		move.b	d0,($FFFFF768).w
00017F40 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017F44 4E75                       		rts	
00017F46                            ; ===========================================================================
00017F46                            
00017F46                            loc_14602:
00017F46 7003                       		moveq	#3,d0
00017F48 11C0 F768                  		move.b	d0,($FFFFF768).w
00017F4C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017F50 1028 0026                  		move.b	obAngle(a0),d0
00017F54 0600 0020                  		addi.b	#$20,d0
00017F58 6A00                       		bpl.s	loc_14624
00017F5A 1028 0026                  		move.b	obAngle(a0),d0
00017F5E 6A00                       		bpl.s	loc_1461E
00017F60 5300                       		subq.b	#1,d0
00017F62                            
00017F62                            loc_1461E:
00017F62 0600 0020                  		addi.b	#$20,d0
00017F66 6000                       		bra.s	loc_14630
00017F68                            ; ===========================================================================
00017F68                            
00017F68                            loc_14624:
00017F68 1028 0026                  		move.b	obAngle(a0),d0
00017F6C 6A00                       		bpl.s	loc_1462C
00017F6E 5200                       		addq.b	#1,d0
00017F70                            
00017F70                            loc_1462C:
00017F70 0600 001F                  		addi.b	#$1F,d0
00017F74                            
00017F74                            loc_14630:
00017F74 0200 00C0                  		andi.b	#$C0,d0
00017F78 0C00 0040                  		cmpi.b	#$40,d0
00017F7C 6700 0000                  		beq.w	Sonic_WalkVertL
00017F80 0C00 0080                  		cmpi.b	#$80,d0
00017F84 6700 0000                  		beq.w	Sonic_WalkCeiling
00017F88 0C00 00C0                  		cmpi.b	#$C0,d0
00017F8C 6700 0000                  		beq.w	Sonic_WalkVertR
00017F90 3428 000C                  		move.w	obY(a0),d2
00017F94 3628 0008                  		move.w	obX(a0),d3
00017F98 7000                       		moveq	#0,d0
00017F9A 1028 0016                  		move.b	obHeight(a0),d0
00017F9E 4880                       		ext.w	d0
00017FA0 D440                       		add.w	d0,d2
00017FA2 1028 0017                  		move.b	obWidth(a0),d0
00017FA6 4880                       		ext.w	d0
00017FA8 D640                       		add.w	d0,d3
00017FAA 49F8 F768                  		lea	($FFFFF768).w,a4
00017FAE 367C 0010                  		movea.w	#$10,a3
00017FB2 3C3C 0000                  		move.w	#0,d6
00017FB6 7A0D                       		moveq	#$D,d5
00017FB8 6100 0000                  		bsr.w	FindFloor
00017FBC 3F01                       		move.w	d1,-(sp)
00017FBE 3428 000C                  		move.w	obY(a0),d2
00017FC2 3628 0008                  		move.w	obX(a0),d3
00017FC6 7000                       		moveq	#0,d0
00017FC8 1028 0016                  		move.b	obHeight(a0),d0
00017FCC 4880                       		ext.w	d0
00017FCE D440                       		add.w	d0,d2
00017FD0 1028 0017                  		move.b	obWidth(a0),d0
00017FD4 4880                       		ext.w	d0
00017FD6 4440                       		neg.w	d0
00017FD8 D640                       		add.w	d0,d3
00017FDA 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017FDE 367C 0010                  		movea.w	#$10,a3
00017FE2 3C3C 0000                  		move.w	#0,d6
00017FE6 7A0D                       		moveq	#$D,d5
00017FE8 6100 0000                  		bsr.w	FindFloor
00017FEC 301F                       		move.w	(sp)+,d0
00017FEE 6100 0000                  		bsr.w	Sonic_Angle
00017FF2 4A41                       		tst.w	d1
00017FF4 6700                       		beq.s	locret_146BE
00017FF6 6A00                       		bpl.s	loc_146C0
00017FF8 0C41 FFF2                  		cmpi.w	#-$E,d1
00017FFC 6D00                       		blt.s	locret_146E6
00017FFE D368 000C                  		add.w	d1,obY(a0)
00018002                            
00018002                            locret_146BE:
00018002 4E75                       		rts	
00018004                            ; ===========================================================================
00018004                            
00018004                            loc_146C0:
00018004 0C41 000E                  		cmpi.w	#$E,d1
00018008 6E00                       		bgt.s	loc_146CC
0001800A                            
0001800A                            loc_146C6:
0001800A D368 000C                  		add.w	d1,obY(a0)
0001800E 4E75                       		rts	
00018010                            ; ===========================================================================
00018010                            
00018010                            loc_146CC:
00018010 4A28 0038                  		tst.b	$38(a0)
00018014 66F4                       		bne.s	loc_146C6
00018016 08E8 0001 0022             		bset	#1,obStatus(a0)
0001801C 08A8 0005 0022             		bclr	#5,obStatus(a0)
00018022 117C 0001 001D             		move.b	#1,obNextAni(a0)
00018028 4E75                       		rts	
0001802A                            ; ===========================================================================
0001802A                            
0001802A                            locret_146E6:
0001802A 4E75                       		rts	
0001802C                            ; End of function Sonic_AnglePos
0001802C                            
0001802C                            ; ===========================================================================
0001802C 2428 0008                  		move.l	obX(a0),d2
00018030 3028 0010                  		move.w	obVelX(a0),d0
00018034 48C0                       		ext.l	d0
00018036 E180                       		asl.l	#8,d0
00018038 9480                       		sub.l	d0,d2
0001803A 2142 0008                  		move.l	d2,obX(a0)
0001803E 303C 0038                  		move.w	#$38,d0
00018042 48C0                       		ext.l	d0
00018044 E180                       		asl.l	#8,d0
00018046 9680                       		sub.l	d0,d3
00018048 2143 000C                  		move.l	d3,obY(a0)
0001804C 4E75                       		rts	
0001804E                            ; ===========================================================================
0001804E                            
0001804E                            locret_1470A:
0001804E 4E75                       		rts	
00018050                            ; ===========================================================================
00018050 2628 000C                  		move.l	obY(a0),d3
00018054 3028 0012                  		move.w	obVelY(a0),d0
00018058 0440 0038                  		subi.w	#$38,d0
0001805C 3140 0012                  		move.w	d0,obVelY(a0)
00018060 48C0                       		ext.l	d0
00018062 E180                       		asl.l	#8,d0
00018064 9680                       		sub.l	d0,d3
00018066 2143 000C                  		move.l	d3,obY(a0)
0001806A 4E75                       		rts	
0001806C 4E75                       		rts	
0001806E                            ; ===========================================================================
0001806E 2428 0008                  		move.l	obX(a0),d2
00018072 2628 000C                  		move.l	obY(a0),d3
00018076 3028 0010                  		move.w	obVelX(a0),d0
0001807A 48C0                       		ext.l	d0
0001807C E180                       		asl.l	#8,d0
0001807E 9480                       		sub.l	d0,d2
00018080 3028 0012                  		move.w	obVelY(a0),d0
00018084 48C0                       		ext.l	d0
00018086 E180                       		asl.l	#8,d0
00018088 9680                       		sub.l	d0,d3
0001808A 2142 0008                  		move.l	d2,obX(a0)
0001808E 2143 000C                  		move.l	d3,obY(a0)
00018092 4E75                       		rts	
00018094                            
00018094                            ; ---------------------------------------------------------------------------
00018094                            ; Subroutine to	change Sonic's angle as he walks along the floor
00018094                            ; ---------------------------------------------------------------------------
00018094                            
00018094                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018094                            
00018094                            
00018094                            Sonic_Angle:
00018094 1438 F76A                  		move.b	($FFFFF76A).w,d2
00018098 B240                       		cmp.w	d0,d1
0001809A 6F00                       		ble.s	loc_1475E
0001809C 1438 F768                  		move.b	($FFFFF768).w,d2
000180A0 3200                       		move.w	d0,d1
000180A2                            
000180A2                            loc_1475E:
000180A2 0802 0000                  		btst	#0,d2
000180A6 6600                       		bne.s	loc_1476A
000180A8 1142 0026                  		move.b	d2,obAngle(a0)
000180AC 4E75                       		rts	
000180AE                            ; ===========================================================================
000180AE                            
000180AE                            loc_1476A:
000180AE 1428 0026                  		move.b	obAngle(a0),d2
000180B2 0602 0020                  		addi.b	#$20,d2
000180B6 0202 00C0                  		andi.b	#$C0,d2
000180BA 1142 0026                  		move.b	d2,obAngle(a0)
000180BE 4E75                       		rts	
000180C0                            ; End of function Sonic_Angle
000180C0                            
000180C0                            ; ---------------------------------------------------------------------------
000180C0                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000180C0                            ; ---------------------------------------------------------------------------
000180C0                            
000180C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000180C0                            
000180C0                            
000180C0                            Sonic_WalkVertR:
000180C0 3428 000C                  		move.w	obY(a0),d2
000180C4 3628 0008                  		move.w	obX(a0),d3
000180C8 7000                       		moveq	#0,d0
000180CA 1028 0017                  		move.b	obWidth(a0),d0
000180CE 4880                       		ext.w	d0
000180D0 4440                       		neg.w	d0
000180D2 D440                       		add.w	d0,d2
000180D4 1028 0016                  		move.b	obHeight(a0),d0
000180D8 4880                       		ext.w	d0
000180DA D640                       		add.w	d0,d3
000180DC 49F8 F768                  		lea	($FFFFF768).w,a4
000180E0 367C 0010                  		movea.w	#$10,a3
000180E4 3C3C 0000                  		move.w	#0,d6
000180E8 7A0D                       		moveq	#$D,d5
000180EA 6100 0000                  		bsr.w	FindWall
000180EE 3F01                       		move.w	d1,-(sp)
000180F0 3428 000C                  		move.w	obY(a0),d2
000180F4 3628 0008                  		move.w	obX(a0),d3
000180F8 7000                       		moveq	#0,d0
000180FA 1028 0017                  		move.b	obWidth(a0),d0
000180FE 4880                       		ext.w	d0
00018100 D440                       		add.w	d0,d2
00018102 1028 0016                  		move.b	obHeight(a0),d0
00018106 4880                       		ext.w	d0
00018108 D640                       		add.w	d0,d3
0001810A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001810E 367C 0010                  		movea.w	#$10,a3
00018112 3C3C 0000                  		move.w	#0,d6
00018116 7A0D                       		moveq	#$D,d5
00018118 6100 0000                  		bsr.w	FindWall
0001811C 301F                       		move.w	(sp)+,d0
0001811E 6100 FF74                  		bsr.w	Sonic_Angle
00018122 4A41                       		tst.w	d1
00018124 6700                       		beq.s	locret_147F0
00018126 6A00                       		bpl.s	loc_147F2
00018128 0C41 FFF2                  		cmpi.w	#-$E,d1
0001812C 6D00 FF20                  		blt.w	locret_1470A
00018130 D368 0008                  		add.w	d1,obX(a0)
00018134                            
00018134                            locret_147F0:
00018134 4E75                       		rts	
00018136                            ; ===========================================================================
00018136                            
00018136                            loc_147F2:
00018136 0C41 000E                  		cmpi.w	#$E,d1
0001813A 6E00                       		bgt.s	loc_147FE
0001813C                            
0001813C                            loc_147F8:
0001813C D368 0008                  		add.w	d1,obX(a0)
00018140 4E75                       		rts	
00018142                            ; ===========================================================================
00018142                            
00018142                            loc_147FE:
00018142 4A28 0038                  		tst.b	$38(a0)
00018146 66F4                       		bne.s	loc_147F8
00018148 08E8 0001 0022             		bset	#1,obStatus(a0)
0001814E 08A8 0005 0022             		bclr	#5,obStatus(a0)
00018154 117C 0001 001D             		move.b	#1,obNextAni(a0)
0001815A 4E75                       		rts	
0001815C                            ; End of function Sonic_WalkVertR
0001815C                            
0001815C                            ; ---------------------------------------------------------------------------
0001815C                            ; Subroutine allowing Sonic to walk upside-down
0001815C                            ; ---------------------------------------------------------------------------
0001815C                            
0001815C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001815C                            
0001815C                            
0001815C                            Sonic_WalkCeiling:
0001815C 3428 000C                  		move.w	obY(a0),d2
00018160 3628 0008                  		move.w	obX(a0),d3
00018164 7000                       		moveq	#0,d0
00018166 1028 0016                  		move.b	obHeight(a0),d0
0001816A 4880                       		ext.w	d0
0001816C 9440                       		sub.w	d0,d2
0001816E 0A42 000F                  		eori.w	#$F,d2
00018172 1028 0017                  		move.b	obWidth(a0),d0
00018176 4880                       		ext.w	d0
00018178 D640                       		add.w	d0,d3
0001817A 49F8 F768                  		lea	($FFFFF768).w,a4
0001817E 367C FFF0                  		movea.w	#-$10,a3
00018182 3C3C 1000                  		move.w	#$1000,d6
00018186 7A0D                       		moveq	#$D,d5
00018188 6100 0000                  		bsr.w	FindFloor
0001818C 3F01                       		move.w	d1,-(sp)
0001818E 3428 000C                  		move.w	obY(a0),d2
00018192 3628 0008                  		move.w	obX(a0),d3
00018196 7000                       		moveq	#0,d0
00018198 1028 0016                  		move.b	obHeight(a0),d0
0001819C 4880                       		ext.w	d0
0001819E 9440                       		sub.w	d0,d2
000181A0 0A42 000F                  		eori.w	#$F,d2
000181A4 1028 0017                  		move.b	obWidth(a0),d0
000181A8 4880                       		ext.w	d0
000181AA 9640                       		sub.w	d0,d3
000181AC 49F8 F76A                  		lea	($FFFFF76A).w,a4
000181B0 367C FFF0                  		movea.w	#-$10,a3
000181B4 3C3C 1000                  		move.w	#$1000,d6
000181B8 7A0D                       		moveq	#$D,d5
000181BA 6100 0000                  		bsr.w	FindFloor
000181BE 301F                       		move.w	(sp)+,d0
000181C0 6100 FED2                  		bsr.w	Sonic_Angle
000181C4 4A41                       		tst.w	d1
000181C6 6700                       		beq.s	locret_14892
000181C8 6A00                       		bpl.s	loc_14894
000181CA 0C41 FFF2                  		cmpi.w	#-$E,d1
000181CE 6D00 FE5A                  		blt.w	locret_146E6
000181D2 9368 000C                  		sub.w	d1,obY(a0)
000181D6                            
000181D6                            locret_14892:
000181D6 4E75                       		rts	
000181D8                            ; ===========================================================================
000181D8                            
000181D8                            loc_14894:
000181D8 0C41 000E                  		cmpi.w	#$E,d1
000181DC 6E00                       		bgt.s	loc_148A0
000181DE                            
000181DE                            loc_1489A:
000181DE 9368 000C                  		sub.w	d1,obY(a0)
000181E2 4E75                       		rts	
000181E4                            ; ===========================================================================
000181E4                            
000181E4                            loc_148A0:
000181E4 4A28 0038                  		tst.b	$38(a0)
000181E8 66F4                       		bne.s	loc_1489A
000181EA 08E8 0001 0022             		bset	#1,obStatus(a0)
000181F0 08A8 0005 0022             		bclr	#5,obStatus(a0)
000181F6 117C 0001 001D             		move.b	#1,obNextAni(a0)
000181FC 4E75                       		rts	
000181FE                            ; End of function Sonic_WalkCeiling
000181FE                            
000181FE                            ; ---------------------------------------------------------------------------
000181FE                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000181FE                            ; ---------------------------------------------------------------------------
000181FE                            
000181FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000181FE                            
000181FE                            
000181FE                            Sonic_WalkVertL:
000181FE 3428 000C                  		move.w	obY(a0),d2
00018202 3628 0008                  		move.w	obX(a0),d3
00018206 7000                       		moveq	#0,d0
00018208 1028 0017                  		move.b	obWidth(a0),d0
0001820C 4880                       		ext.w	d0
0001820E 9440                       		sub.w	d0,d2
00018210 1028 0016                  		move.b	obHeight(a0),d0
00018214 4880                       		ext.w	d0
00018216 9640                       		sub.w	d0,d3
00018218 0A43 000F                  		eori.w	#$F,d3
0001821C 49F8 F768                  		lea	($FFFFF768).w,a4
00018220 367C FFF0                  		movea.w	#-$10,a3
00018224 3C3C 0800                  		move.w	#$800,d6
00018228 7A0D                       		moveq	#$D,d5
0001822A 6100 0000                  		bsr.w	FindWall
0001822E 3F01                       		move.w	d1,-(sp)
00018230 3428 000C                  		move.w	obY(a0),d2
00018234 3628 0008                  		move.w	obX(a0),d3
00018238 7000                       		moveq	#0,d0
0001823A 1028 0017                  		move.b	obWidth(a0),d0
0001823E 4880                       		ext.w	d0
00018240 D440                       		add.w	d0,d2
00018242 1028 0016                  		move.b	obHeight(a0),d0
00018246 4880                       		ext.w	d0
00018248 9640                       		sub.w	d0,d3
0001824A 0A43 000F                  		eori.w	#$F,d3
0001824E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018252 367C FFF0                  		movea.w	#-$10,a3
00018256 3C3C 0800                  		move.w	#$800,d6
0001825A 7A0D                       		moveq	#$D,d5
0001825C 6100 0000                  		bsr.w	FindWall
00018260 301F                       		move.w	(sp)+,d0
00018262 6100 FE30                  		bsr.w	Sonic_Angle
00018266 4A41                       		tst.w	d1
00018268 6700                       		beq.s	locret_14934
0001826A 6A00                       		bpl.s	loc_14936
0001826C 0C41 FFF2                  		cmpi.w	#-$E,d1
00018270 6D00 FDDC                  		blt.w	locret_1470A
00018274 9368 0008                  		sub.w	d1,obX(a0)
00018278                            
00018278                            locret_14934:
00018278 4E75                       		rts	
0001827A                            ; ===========================================================================
0001827A                            
0001827A                            loc_14936:
0001827A 0C41 000E                  		cmpi.w	#$E,d1
0001827E 6E00                       		bgt.s	loc_14942
00018280                            
00018280                            loc_1493C:
00018280 9368 0008                  		sub.w	d1,obX(a0)
00018284 4E75                       		rts	
00018286                            ; ===========================================================================
00018286                            
00018286                            loc_14942:
00018286 4A28 0038                  		tst.b	$38(a0)
0001828A 66F4                       		bne.s	loc_1493C
0001828C 08E8 0001 0022             		bset	#1,obStatus(a0)
00018292 08A8 0005 0022             		bclr	#5,obStatus(a0)
00018298 117C 0001 001D             		move.b	#1,obNextAni(a0)
0001829E 4E75                       		rts	
000182A0                            ; End of function Sonic_WalkVertL
000182A0                            ; End of function Sonic_WalkVertL
000182A0                            
000182A0                            		include	"_incObj\sub FindNearestTile.asm"
000182A0                            ; ---------------------------------------------------------------------------
000182A0                            ; Subroutine to	find which tile	the object is standing on
000182A0                            
000182A0                            ; input:
000182A0                            ;	d2 = y-position of object's bottom edge
000182A0                            ;	d3 = x-position of object
000182A0                            
000182A0                            ; output:
000182A0                            ;	a1 = address within 256x256 mappings where object is standing
000182A0                            ;	     (refers to a 16x16 tile number)
000182A0                            ; ---------------------------------------------------------------------------
000182A0                            
000182A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000182A0                            
000182A0                            
000182A0                            FindNearestTile:
000182A0 3002                       		move.w	d2,d0		; get y-pos. of bottom edge of object
000182A2 E248                       		lsr.w	#1,d0
000182A4 0240 0380                  		andi.w	#$380,d0
000182A8 3203                       		move.w	d3,d1		; get x-pos. of object
000182AA E049                       		lsr.w	#8,d1
000182AC 0241 007F                  		andi.w	#$7F,d1
000182B0 D041                       		add.w	d1,d0		; combine
000182B2 72FF                       		moveq	#-1,d1
000182B4 43F8 A400                  		lea	(v_lvllayout).w,a1
000182B8 1231 0000                  		move.b	(a1,d0.w),d1	; get 256x256 tile number
000182BC 6700                       		beq.s	@blanktile	; branch if 0
000182BE 6B00                       		bmi.s	@specialtile	; branch if >$7F
000182C0 5301                       		subq.b	#1,d1
000182C2 4881                       		ext.w	d1
000182C4 EE59                       		ror.w	#7,d1
000182C6 3002                       		move.w	d2,d0
000182C8 D040                       		add.w	d0,d0
000182CA 0240 01E0                  		andi.w	#$1E0,d0
000182CE D240                       		add.w	d0,d1
000182D0 3003                       		move.w	d3,d0
000182D2 E648                       		lsr.w	#3,d0
000182D4 0240 001E                  		andi.w	#$1E,d0
000182D8 D240                       		add.w	d0,d1
000182DA                            
000182DA                            @blanktile:
000182DA 2241                       		movea.l	d1,a1
000182DC 4E75                       		rts	
000182DE                            ; ===========================================================================
000182DE                            
000182DE                            @specialtile:
000182DE 0241 007F                  		andi.w	#$7F,d1
000182E2 0828 0006 0001             		btst	#6,obRender(a0) ; is object "behind a loop"?
000182E8 6700                       		beq.s	@treatasnormal	; if not, branch
000182EA 5241                       		addq.w	#1,d1
000182EC 0C41 0029                  		cmpi.w	#$29,d1
000182F0 6600                       		bne.s	@treatasnormal
000182F2 323C 0051                  		move.w	#$51,d1
000182F6                            
000182F6                            	@treatasnormal:
000182F6 5301                       		subq.b	#1,d1
000182F8 EE59                       		ror.w	#7,d1
000182FA 3002                       		move.w	d2,d0
000182FC D040                       		add.w	d0,d0
000182FE 0240 01E0                  		andi.w	#$1E0,d0
00018302 D240                       		add.w	d0,d1
00018304 3003                       		move.w	d3,d0
00018306 E648                       		lsr.w	#3,d0
00018308 0240 001E                  		andi.w	#$1E,d0
0001830C D240                       		add.w	d0,d1
0001830E 2241                       		movea.l	d1,a1
00018310 4E75                       		rts	
00018312                            ; End of function FindNearestTile
00018312                            ; End of function FindNearestTile
00018312                            		include	"_incObj\sub FindFloor.asm"
00018312                            ; ---------------------------------------------------------------------------
00018312                            ; Subroutine to	find the floor
00018312                            
00018312                            ; input:
00018312                            ;	d2 = y-position of object's bottom edge
00018312                            ;	d3 = x-position of object
00018312                            ;	d5 = bit to test for solidness
00018312                            
00018312                            ; output:
00018312                            ;	d1 = distance to the floor
00018312                            ;	a1 = address within 256x256 mappings where object is standing
00018312                            ;	     (refers to a 16x16 tile number)
00018312                            ;	(a4) = floor angle
00018312                            ; ---------------------------------------------------------------------------
00018312                            
00018312                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018312                            
00018312                            
00018312                            FindFloor:
00018312 618C                       		bsr.s	FindNearestTile
00018314 3011                       		move.w	(a1),d0		; get value for solidness, orientation and 16x16 tile number
00018316 3800                       		move.w	d0,d4
00018318 0240 07FF                  		andi.w	#$7FF,d0
0001831C 6700                       		beq.s	@isblank	; branch if tile is blank
0001831E 0B04                       		btst	d5,d4		; is the tile solid?
00018320 6600                       		bne.s	@issolid	; if yes, branch
00018322                            
00018322                            @isblank:
00018322 D44B                       		add.w	a3,d2
00018324 6100 0000                  		bsr.w	FindFloor2	; try tile below the nearest
00018328 944B                       		sub.w	a3,d2
0001832A 0641 0010                  		addi.w	#$10,d1		; return distance to floor
0001832E 4E75                       		rts	
00018330                            ; ===========================================================================
00018330                            
00018330                            @issolid:
00018330 2478 F796                  		movea.l	(v_collindex).w,a2
00018334 1032 0000                  		move.b	(a2,d0.w),d0	; get collision block number
00018338 0240 00FF                  		andi.w	#$FF,d0
0001833C 67E4                       		beq.s	@isblank	; branch if 0
0001833E 45F9 0000 0000             		lea	(AngleMap).l,a2
00018344 18B2 0000                  		move.b	(a2,d0.w),(a4)	; get collision angle value
00018348 E948                       		lsl.w	#4,d0
0001834A 3203                       		move.w	d3,d1		; get x-pos. of object
0001834C 0804 000B                  		btst	#$B,d4		; is block flipped horizontally?
00018350 6700                       		beq.s	@noflip		; if not, branch
00018352 4641                       		not.w	d1
00018354 4414                       		neg.b	(a4)
00018356                            
00018356                            	@noflip:
00018356 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
0001835A 6700                       		beq.s	@noflip2	; if not, branch
0001835C 0614 0040                  		addi.b	#$40,(a4)
00018360 4414                       		neg.b	(a4)
00018362 0414 0040                  		subi.b	#$40,(a4)
00018366                            
00018366                            	@noflip2:
00018366 0241 000F                  		andi.w	#$F,d1
0001836A D240                       		add.w	d0,d1		; (block num. * $10) + x-pos. = place in array
0001836C 45F9 0000 0000             		lea	(CollArray1).l,a2
00018372 1032 1000                  		move.b	(a2,d1.w),d0	; get collision height
00018376 4880                       		ext.w	d0
00018378 BD44                       		eor.w	d6,d4
0001837A 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
0001837E 6700                       		beq.s	@noflip3	; if not, branch
00018380 4440                       		neg.w	d0
00018382                            
00018382                            	@noflip3:
00018382 4A40                       		tst.w	d0
00018384 679C                       		beq.s	@isblank	; branch if height is 0
00018386 6B00                       		bmi.s	@negfloor	; branch if height is negative
00018388 0C00 0010                  		cmpi.b	#$10,d0
0001838C 6700                       		beq.s	@maxfloor	; branch if height is $10 (max)
0001838E 3202                       		move.w	d2,d1		; get y-pos. of object
00018390 0241 000F                  		andi.w	#$F,d1
00018394 D041                       		add.w	d1,d0
00018396 323C 000F                  		move.w	#$F,d1
0001839A 9240                       		sub.w	d0,d1		; return distance to floor
0001839C 4E75                       		rts	
0001839E                            ; ===========================================================================
0001839E                            
0001839E                            @negfloor:
0001839E 3202                       		move.w	d2,d1
000183A0 0241 000F                  		andi.w	#$F,d1
000183A4 D041                       		add.w	d1,d0
000183A6 6A00 FF7A                  		bpl.w	@isblank
000183AA                            
000183AA                            @maxfloor:
000183AA 944B                       		sub.w	a3,d2
000183AC 6100 0000                  		bsr.w	FindFloor2	; try tile above the nearest
000183B0 D44B                       		add.w	a3,d2
000183B2 0441 0010                  		subi.w	#$10,d1		; return distance to floor
000183B6 4E75                       		rts	
000183B8                            ; End of function FindFloor
000183B8                            
000183B8                            
000183B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000183B8                            
000183B8                            
000183B8                            FindFloor2:
000183B8 6100 FEE6                  		bsr.w	FindNearestTile
000183BC 3011                       		move.w	(a1),d0
000183BE 3800                       		move.w	d0,d4
000183C0 0240 07FF                  		andi.w	#$7FF,d0
000183C4 6700                       		beq.s	@isblank2
000183C6 0B04                       		btst	d5,d4
000183C8 6600                       		bne.s	@issolid
000183CA                            
000183CA                            @isblank2:
000183CA 323C 000F                  		move.w	#$F,d1
000183CE 3002                       		move.w	d2,d0
000183D0 0240 000F                  		andi.w	#$F,d0
000183D4 9240                       		sub.w	d0,d1
000183D6 4E75                       		rts	
000183D8                            ; ===========================================================================
000183D8                            
000183D8                            @issolid:
000183D8 2478 F796                  		movea.l	(v_collindex).w,a2
000183DC 1032 0000                  		move.b	(a2,d0.w),d0
000183E0 0240 00FF                  		andi.w	#$FF,d0
000183E4 67E4                       		beq.s	@isblank2
000183E6 45F9 0000 0000             		lea	(AngleMap).l,a2
000183EC 18B2 0000                  		move.b	(a2,d0.w),(a4)
000183F0 E948                       		lsl.w	#4,d0
000183F2 3203                       		move.w	d3,d1
000183F4 0804 000B                  		btst	#$B,d4
000183F8 6700                       		beq.s	@noflip
000183FA 4641                       		not.w	d1
000183FC 4414                       		neg.b	(a4)
000183FE                            
000183FE                            	@noflip:
000183FE 0804 000C                  		btst	#$C,d4
00018402 6700                       		beq.s	@noflip2
00018404 0614 0040                  		addi.b	#$40,(a4)
00018408 4414                       		neg.b	(a4)
0001840A 0414 0040                  		subi.b	#$40,(a4)
0001840E                            
0001840E                            	@noflip2:
0001840E 0241 000F                  		andi.w	#$F,d1
00018412 D240                       		add.w	d0,d1
00018414 45F9 0000 0000             		lea	(CollArray1).l,a2
0001841A 1032 1000                  		move.b	(a2,d1.w),d0
0001841E 4880                       		ext.w	d0
00018420 BD44                       		eor.w	d6,d4
00018422 0804 000C                  		btst	#$C,d4
00018426 6700                       		beq.s	@noflip3
00018428 4440                       		neg.w	d0
0001842A                            
0001842A                            	@noflip3:
0001842A 4A40                       		tst.w	d0
0001842C 679C                       		beq.s	@isblank2
0001842E 6B00                       		bmi.s	@negfloor
00018430 3202                       		move.w	d2,d1
00018432 0241 000F                  		andi.w	#$F,d1
00018436 D041                       		add.w	d1,d0
00018438 323C 000F                  		move.w	#$F,d1
0001843C 9240                       		sub.w	d0,d1
0001843E 4E75                       		rts	
00018440                            ; ===========================================================================
00018440                            
00018440                            @negfloor:
00018440 3202                       		move.w	d2,d1
00018442 0241 000F                  		andi.w	#$F,d1
00018446 D041                       		add.w	d1,d0
00018448 6A00 FF80                  		bpl.w	@isblank2
0001844C 4641                       		not.w	d1
0001844E 4E75                       		rts	
00018450                            ; End of function FindFloor2
00018450                            ; End of function FindFloor2
00018450                            		include	"_incObj\sub FindWall.asm"
00018450                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018450                            
00018450                            
00018450                            FindWall:
00018450 6100 FE4E                  		bsr.w	FindNearestTile
00018454 3011                       		move.w	(a1),d0
00018456 3800                       		move.w	d0,d4
00018458 0240 07FF                  		andi.w	#$7FF,d0
0001845C 6700                       		beq.s	loc_14B1E
0001845E 0B04                       		btst	d5,d4
00018460 6600                       		bne.s	loc_14B2C
00018462                            
00018462                            loc_14B1E:
00018462 D64B                       		add.w	a3,d3
00018464 6100 0000                  		bsr.w	FindWall2
00018468 964B                       		sub.w	a3,d3
0001846A 0641 0010                  		addi.w	#$10,d1
0001846E 4E75                       		rts	
00018470                            ; ===========================================================================
00018470                            
00018470                            loc_14B2C:
00018470 2478 F796                  		movea.l	(v_collindex).w,a2
00018474 1032 0000                  		move.b	(a2,d0.w),d0
00018478 0240 00FF                  		andi.w	#$FF,d0
0001847C 67E4                       		beq.s	loc_14B1E
0001847E 45F9 0000 0000             		lea	(AngleMap).l,a2
00018484 18B2 0000                  		move.b	(a2,d0.w),(a4)
00018488 E948                       		lsl.w	#4,d0
0001848A 3202                       		move.w	d2,d1
0001848C 0804 000C                  		btst	#$C,d4
00018490 6700                       		beq.s	loc_14B5A
00018492 4641                       		not.w	d1
00018494 0614 0040                  		addi.b	#$40,(a4)
00018498 4414                       		neg.b	(a4)
0001849A 0414 0040                  		subi.b	#$40,(a4)
0001849E                            
0001849E                            loc_14B5A:
0001849E 0804 000B                  		btst	#$B,d4
000184A2 6700                       		beq.s	loc_14B62
000184A4 4414                       		neg.b	(a4)
000184A6                            
000184A6                            loc_14B62:
000184A6 0241 000F                  		andi.w	#$F,d1
000184AA D240                       		add.w	d0,d1
000184AC 45F9 0000 0000             		lea	(CollArray2).l,a2
000184B2 1032 1000                  		move.b	(a2,d1.w),d0
000184B6 4880                       		ext.w	d0
000184B8 BD44                       		eor.w	d6,d4
000184BA 0804 000B                  		btst	#$B,d4
000184BE 6700                       		beq.s	loc_14B7E
000184C0 4440                       		neg.w	d0
000184C2                            
000184C2                            loc_14B7E:
000184C2 4A40                       		tst.w	d0
000184C4 679C                       		beq.s	loc_14B1E
000184C6 6B00                       		bmi.s	loc_14B9A
000184C8 0C00 0010                  		cmpi.b	#$10,d0
000184CC 6700                       		beq.s	loc_14BA6
000184CE 3203                       		move.w	d3,d1
000184D0 0241 000F                  		andi.w	#$F,d1
000184D4 D041                       		add.w	d1,d0
000184D6 323C 000F                  		move.w	#$F,d1
000184DA 9240                       		sub.w	d0,d1
000184DC 4E75                       		rts	
000184DE                            ; ===========================================================================
000184DE                            
000184DE                            loc_14B9A:
000184DE 3203                       		move.w	d3,d1
000184E0 0241 000F                  		andi.w	#$F,d1
000184E4 D041                       		add.w	d1,d0
000184E6 6A00 FF7A                  		bpl.w	loc_14B1E
000184EA                            
000184EA                            loc_14BA6:
000184EA 964B                       		sub.w	a3,d3
000184EC 6100 0000                  		bsr.w	FindWall2
000184F0 D64B                       		add.w	a3,d3
000184F2 0441 0010                  		subi.w	#$10,d1
000184F6 4E75                       		rts	
000184F8                            ; End of function FindWall
000184F8                            
000184F8                            
000184F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000184F8                            
000184F8                            
000184F8                            FindWall2:
000184F8 6100 FDA6                  		bsr.w	FindNearestTile
000184FC 3011                       		move.w	(a1),d0
000184FE 3800                       		move.w	d0,d4
00018500 0240 07FF                  		andi.w	#$7FF,d0
00018504 6700                       		beq.s	loc_14BC6
00018506 0B04                       		btst	d5,d4
00018508 6600                       		bne.s	loc_14BD4
0001850A                            
0001850A                            loc_14BC6:
0001850A 323C 000F                  		move.w	#$F,d1
0001850E 3003                       		move.w	d3,d0
00018510 0240 000F                  		andi.w	#$F,d0
00018514 9240                       		sub.w	d0,d1
00018516 4E75                       		rts	
00018518                            ; ===========================================================================
00018518                            
00018518                            loc_14BD4:
00018518 2478 F796                  		movea.l	(v_collindex).w,a2
0001851C 1032 0000                  		move.b	(a2,d0.w),d0
00018520 0240 00FF                  		andi.w	#$FF,d0
00018524 67E4                       		beq.s	loc_14BC6
00018526 45F9 0000 0000             		lea	(AngleMap).l,a2
0001852C 18B2 0000                  		move.b	(a2,d0.w),(a4)
00018530 E948                       		lsl.w	#4,d0
00018532 3202                       		move.w	d2,d1
00018534 0804 000C                  		btst	#$C,d4
00018538 6700                       		beq.s	loc_14C02
0001853A 4641                       		not.w	d1
0001853C 0614 0040                  		addi.b	#$40,(a4)
00018540 4414                       		neg.b	(a4)
00018542 0414 0040                  		subi.b	#$40,(a4)
00018546                            
00018546                            loc_14C02:
00018546 0804 000B                  		btst	#$B,d4
0001854A 6700                       		beq.s	loc_14C0A
0001854C 4414                       		neg.b	(a4)
0001854E                            
0001854E                            loc_14C0A:
0001854E 0241 000F                  		andi.w	#$F,d1
00018552 D240                       		add.w	d0,d1
00018554 45F9 0000 0000             		lea	(CollArray2).l,a2
0001855A 1032 1000                  		move.b	(a2,d1.w),d0
0001855E 4880                       		ext.w	d0
00018560 BD44                       		eor.w	d6,d4
00018562 0804 000B                  		btst	#$B,d4
00018566 6700                       		beq.s	loc_14C26
00018568 4440                       		neg.w	d0
0001856A                            
0001856A                            loc_14C26:
0001856A 4A40                       		tst.w	d0
0001856C 679C                       		beq.s	loc_14BC6
0001856E 6B00                       		bmi.s	loc_14C3C
00018570 3203                       		move.w	d3,d1
00018572 0241 000F                  		andi.w	#$F,d1
00018576 D041                       		add.w	d1,d0
00018578 323C 000F                  		move.w	#$F,d1
0001857C 9240                       		sub.w	d0,d1
0001857E 4E75                       		rts	
00018580                            ; ===========================================================================
00018580                            
00018580                            loc_14C3C:
00018580 3203                       		move.w	d3,d1
00018582 0241 000F                  		andi.w	#$F,d1
00018586 D041                       		add.w	d1,d0
00018588 6A00 FF80                  		bpl.w	loc_14BC6
0001858C 4641                       		not.w	d1
0001858E 4E75                       		rts	
00018590                            ; End of function FindWall2
00018590                            ; End of function FindWall2
00018590                            
00018590                            ; ---------------------------------------------------------------------------
00018590                            ; Unused floor/wall subroutine - logs something	to do with collision
00018590                            ; ---------------------------------------------------------------------------
00018590                            
00018590                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018590                            
00018590                            
00018590                            FloorLog_Unk:
00018590 4E75                       		rts	
00018592                            
00018592 43F9 0000 0000             		lea	(CollArray1).l,a1
00018598 45F9 0000 0000             		lea	(CollArray1).l,a2
0001859E 363C 00FF                  		move.w	#$FF,d3
000185A2                            
000185A2                            loc_14C5E:
000185A2 7A10                       		moveq	#$10,d5
000185A4 343C 000F                  		move.w	#$F,d2
000185A8                            
000185A8                            loc_14C64:
000185A8 7800                       		moveq	#0,d4
000185AA 323C 000F                  		move.w	#$F,d1
000185AE                            
000185AE                            loc_14C6A:
000185AE 3019                       		move.w	(a1)+,d0
000185B0 EAA8                       		lsr.l	d5,d0
000185B2 D944                       		addx.w	d4,d4
000185B4 51C9 FFF8                  		dbf	d1,loc_14C6A
000185B8                            
000185B8 34C4                       		move.w	d4,(a2)+
000185BA 92FC 0020                  		suba.w	#$20,a1
000185BE 5345                       		subq.w	#1,d5
000185C0 51CA FFE6                  		dbf	d2,loc_14C64
000185C4                            
000185C4 D2FC 0020                  		adda.w	#$20,a1
000185C8 51CB FFD8                  		dbf	d3,loc_14C5E
000185CC                            
000185CC 43F9 0000 0000             		lea	(CollArray1).l,a1
000185D2 45F9 0000 0000             		lea	(CollArray2).l,a2
000185D8 6100                       		bsr.s	FloorLog_Unk2
000185DA 43F9 0000 0000             		lea	(CollArray1).l,a1
000185E0 45F9 0000 0000             		lea	(CollArray1).l,a2
000185E6                            
000185E6                            ; End of function FloorLog_Unk
000185E6                            
000185E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000185E6                            
000185E6                            
000185E6                            FloorLog_Unk2:
000185E6 363C 0FFF                  		move.w	#$FFF,d3
000185EA                            
000185EA                            loc_14CA6:
000185EA 7400                       		moveq	#0,d2
000185EC 323C 000F                  		move.w	#$F,d1
000185F0 3019                       		move.w	(a1)+,d0
000185F2 6700                       		beq.s	loc_14CD4
000185F4 6B00                       		bmi.s	loc_14CBE
000185F6                            
000185F6                            loc_14CB2:
000185F6 E248                       		lsr.w	#1,d0
000185F8 6400                       		bhs.s	loc_14CB8
000185FA 5202                       		addq.b	#1,d2
000185FC                            
000185FC                            loc_14CB8:
000185FC 51C9 FFF8                  		dbf	d1,loc_14CB2
00018600                            
00018600 6000                       		bra.s	loc_14CD6
00018602                            ; ===========================================================================
00018602                            
00018602                            loc_14CBE:
00018602 0C40 FFFF                  		cmpi.w	#-1,d0
00018606 6700                       		beq.s	loc_14CD0
00018608                            
00018608                            loc_14CC4:
00018608 E348                       		lsl.w	#1,d0
0001860A 6400                       		bhs.s	loc_14CCA
0001860C 5302                       		subq.b	#1,d2
0001860E                            
0001860E                            loc_14CCA:
0001860E 51C9 FFF8                  		dbf	d1,loc_14CC4
00018612                            
00018612 6000                       		bra.s	loc_14CD6
00018614                            ; ===========================================================================
00018614                            
00018614                            loc_14CD0:
00018614 303C 0010                  		move.w	#$10,d0
00018618                            
00018618                            loc_14CD4:
00018618 3400                       		move.w	d0,d2
0001861A                            
0001861A                            loc_14CD6:
0001861A 14C2                       		move.b	d2,(a2)+
0001861C 51CB FFCC                  		dbf	d3,loc_14CA6
00018620                            
00018620 4E75                       		rts	
00018622                            
00018622                            ; End of function FloorLog_Unk2
00018622                            
00018622                            
00018622                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018622                            
00018622                            
00018622                            Sonic_WalkSpeed:
00018622 2628 0008                  		move.l	obX(a0),d3
00018626 2428 000C                  		move.l	obY(a0),d2
0001862A 3228 0010                  		move.w	obVelX(a0),d1
0001862E 48C1                       		ext.l	d1
00018630 E181                       		asl.l	#8,d1
00018632 D681                       		add.l	d1,d3
00018634 3228 0012                  		move.w	obVelY(a0),d1
00018638 48C1                       		ext.l	d1
0001863A E181                       		asl.l	#8,d1
0001863C D481                       		add.l	d1,d2
0001863E 4842                       		swap	d2
00018640 4843                       		swap	d3
00018642 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00018646 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001864A 1200                       		move.b	d0,d1
0001864C 0600 0020                  		addi.b	#$20,d0
00018650 6A00                       		bpl.s	loc_14D1A
00018652 1001                       		move.b	d1,d0
00018654 6A00                       		bpl.s	loc_14D14
00018656 5300                       		subq.b	#1,d0
00018658                            
00018658                            loc_14D14:
00018658 0600 0020                  		addi.b	#$20,d0
0001865C 6000                       		bra.s	loc_14D24
0001865E                            ; ===========================================================================
0001865E                            
0001865E                            loc_14D1A:
0001865E 1001                       		move.b	d1,d0
00018660 6A00                       		bpl.s	loc_14D20
00018662 5200                       		addq.b	#1,d0
00018664                            
00018664                            loc_14D20:
00018664 0600 001F                  		addi.b	#$1F,d0
00018668                            
00018668                            loc_14D24:
00018668 0200 00C0                  		andi.b	#$C0,d0
0001866C 6700 0000                  		beq.w	loc_14DF0
00018670 0C00 0080                  		cmpi.b	#$80,d0
00018674 6700 0000                  		beq.w	loc_14F7C
00018678 0201 0038                  		andi.b	#$38,d1
0001867C 6600                       		bne.s	loc_14D3C
0001867E 5042                       		addq.w	#8,d2
00018680                            
00018680                            loc_14D3C:
00018680 0C00 0040                  		cmpi.b	#$40,d0
00018684 6700 0000                  		beq.w	loc_1504A
00018688 6000 0000                  		bra.w	loc_14EBC
0001868C                            
0001868C                            ; End of function Sonic_WalkSpeed
0001868C                            
0001868C                            
0001868C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001868C                            
0001868C                            
0001868C                            sub_14D48:
0001868C 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00018690 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00018694 0600 0020                  		addi.b	#$20,d0
00018698 0200 00C0                  		andi.b	#$C0,d0
0001869C 0C00 0040                  		cmpi.b	#$40,d0
000186A0 6700 0000                  		beq.w	loc_14FD6
000186A4 0C00 0080                  		cmpi.b	#$80,d0
000186A8 6700 0000                  		beq.w	Sonic_DontRunOnWalls
000186AC 0C00 00C0                  		cmpi.b	#$C0,d0
000186B0 6700 0000                  		beq.w	sub_14E50
000186B4                            
000186B4                            ; End of function sub_14D48
000186B4                            
000186B4                            ; ---------------------------------------------------------------------------
000186B4                            ; Subroutine to	make Sonic land	on the floor after jumping
000186B4                            ; ---------------------------------------------------------------------------
000186B4                            
000186B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000186B4                            
000186B4                            
000186B4                            Sonic_HitFloor:
000186B4 3428 000C                  		move.w	obY(a0),d2
000186B8 3628 0008                  		move.w	obX(a0),d3
000186BC 7000                       		moveq	#0,d0
000186BE 1028 0016                  		move.b	obHeight(a0),d0
000186C2 4880                       		ext.w	d0
000186C4 D440                       		add.w	d0,d2
000186C6 1028 0017                  		move.b	obWidth(a0),d0
000186CA 4880                       		ext.w	d0
000186CC D640                       		add.w	d0,d3
000186CE 49F8 F768                  		lea	(v_anglebuffer).w,a4
000186D2 367C 0010                  		movea.w	#$10,a3
000186D6 3C3C 0000                  		move.w	#0,d6
000186DA 7A0D                       		moveq	#$D,d5
000186DC 6100 FC34                  		bsr.w	FindFloor
000186E0 3F01                       		move.w	d1,-(sp)
000186E2 3428 000C                  		move.w	obY(a0),d2
000186E6 3628 0008                  		move.w	obX(a0),d3
000186EA 7000                       		moveq	#0,d0
000186EC 1028 0016                  		move.b	obHeight(a0),d0
000186F0 4880                       		ext.w	d0
000186F2 D440                       		add.w	d0,d2
000186F4 1028 0017                  		move.b	obWidth(a0),d0
000186F8 4880                       		ext.w	d0
000186FA 9640                       		sub.w	d0,d3
000186FC 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018700 367C 0010                  		movea.w	#$10,a3
00018704 3C3C 0000                  		move.w	#0,d6
00018708 7A0D                       		moveq	#$D,d5
0001870A 6100 FC06                  		bsr.w	FindFloor
0001870E 301F                       		move.w	(sp)+,d0
00018710 143C 0000                  		move.b	#0,d2
00018714                            
00018714                            loc_14DD0:
00018714 1638 F76A                  		move.b	($FFFFF76A).w,d3
00018718 B240                       		cmp.w	d0,d1
0001871A 6F00                       		ble.s	loc_14DDE
0001871C 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018720 C141                       		exg	d0,d1
00018722                            
00018722                            loc_14DDE:
00018722 0803 0000                  		btst	#0,d3
00018726 6700                       		beq.s	locret_14DE6
00018728 1602                       		move.b	d2,d3
0001872A                            
0001872A                            locret_14DE6:
0001872A 4E75                       		rts	
0001872C                            
0001872C                            ; End of function Sonic_HitFloor
0001872C                            
0001872C                            ; ===========================================================================
0001872C 3428 000C                  		move.w	obY(a0),d2
00018730 3628 0008                  		move.w	obX(a0),d3
00018734                            
00018734                            loc_14DF0:
00018734 0642 000A                  		addi.w	#$A,d2
00018738 49F8 F768                  		lea	(v_anglebuffer).w,a4
0001873C 367C 0010                  		movea.w	#$10,a3
00018740 3C3C 0000                  		move.w	#0,d6
00018744 7A0E                       		moveq	#$E,d5
00018746 6100 FBCA                  		bsr.w	FindFloor
0001874A 143C 0000                  		move.b	#0,d2
0001874E                            
0001874E                            loc_14E0A:
0001874E 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018752 0803 0000                  		btst	#0,d3
00018756 6700                       		beq.s	locret_14E16
00018758 1602                       		move.b	d2,d3
0001875A                            
0001875A                            locret_14E16:
0001875A 4E75                       		rts	
0001875C                            
0001875C                            		include	"_incObj\sub ObjFloorDist.asm"
0001875C                            ; ---------------------------------------------------------------------------
0001875C                            ; Subroutine to find the distance of an object to the floor
0001875C                            
0001875C                            ; input:
0001875C                            ;	d3 = x-pos. of object (ObjFloorDist2 only)
0001875C                            
0001875C                            ; output:
0001875C                            ;	d1 = distance to the floor
0001875C                            ;	d3 = floor angle
0001875C                            ;	a1 = address within 256x256 mappings where object is standing
0001875C                            ;	     (refers to a 16x16 tile number)
0001875C                            ;	(a4) = floor angle
0001875C                            ; ---------------------------------------------------------------------------
0001875C                            
0001875C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001875C                            
0001875C                            
0001875C                            ObjFloorDist:
0001875C 3628 0008                  		move.w	obX(a0),d3
00018760                            
00018760                            
00018760                            ObjFloorDist2:
00018760 3428 000C                  		move.w	obY(a0),d2
00018764 7000                       		moveq	#0,d0
00018766 1028 0016                  		move.b	obHeight(a0),d0
0001876A 4880                       		ext.w	d0
0001876C D440                       		add.w	d0,d2
0001876E 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018772 18BC 0000                  		move.b	#0,(a4)
00018776 367C 0010                  		movea.w	#$10,a3		; height of a 16x16 tile
0001877A 3C3C 0000                  		move.w	#0,d6
0001877E 7A0D                       		moveq	#$D,d5		; bit to test for solidness
00018780 6100 FB90                  		bsr.w	FindFloor
00018784 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018788 0803 0000                  		btst	#0,d3
0001878C 6700                       		beq.s	locret_14E4E
0001878E 163C 0000                  		move.b	#0,d3
00018792                            
00018792                            	locret_14E4E:
00018792 4E75                       		rts	
00018794                            
00018794                            ; End of function ObjFloorDist2
00018794                            ; End of function ObjFloorDist2
00018794                            
00018794                            
00018794                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018794                            
00018794                            
00018794                            sub_14E50:
00018794 3428 000C                  		move.w	obY(a0),d2
00018798 3628 0008                  		move.w	obX(a0),d3
0001879C 7000                       		moveq	#0,d0
0001879E 1028 0017                  		move.b	obWidth(a0),d0
000187A2 4880                       		ext.w	d0
000187A4 9440                       		sub.w	d0,d2
000187A6 1028 0016                  		move.b	obHeight(a0),d0
000187AA 4880                       		ext.w	d0
000187AC D640                       		add.w	d0,d3
000187AE 49F8 F768                  		lea	(v_anglebuffer).w,a4
000187B2 367C 0010                  		movea.w	#$10,a3
000187B6 3C3C 0000                  		move.w	#0,d6
000187BA 7A0E                       		moveq	#$E,d5
000187BC 6100 FC92                  		bsr.w	FindWall
000187C0 3F01                       		move.w	d1,-(sp)
000187C2 3428 000C                  		move.w	obY(a0),d2
000187C6 3628 0008                  		move.w	obX(a0),d3
000187CA 7000                       		moveq	#0,d0
000187CC 1028 0017                  		move.b	obWidth(a0),d0
000187D0 4880                       		ext.w	d0
000187D2 D440                       		add.w	d0,d2
000187D4 1028 0016                  		move.b	obHeight(a0),d0
000187D8 4880                       		ext.w	d0
000187DA D640                       		add.w	d0,d3
000187DC 49F8 F76A                  		lea	($FFFFF76A).w,a4
000187E0 367C 0010                  		movea.w	#$10,a3
000187E4 3C3C 0000                  		move.w	#0,d6
000187E8 7A0E                       		moveq	#$E,d5
000187EA 6100 FC64                  		bsr.w	FindWall
000187EE 301F                       		move.w	(sp)+,d0
000187F0 143C 00C0                  		move.b	#-$40,d2
000187F4 6000 FF1E                  		bra.w	loc_14DD0
000187F8                            
000187F8                            ; End of function sub_14E50
000187F8                            
000187F8                            
000187F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000187F8                            
000187F8                            
000187F8                            sub_14EB4:
000187F8 3428 000C                  		move.w	obY(a0),d2
000187FC 3628 0008                  		move.w	obX(a0),d3
00018800                            
00018800                            loc_14EBC:
00018800 0643 000A                  		addi.w	#$A,d3
00018804 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018808 367C 0010                  		movea.w	#$10,a3
0001880C 3C3C 0000                  		move.w	#0,d6
00018810 7A0E                       		moveq	#$E,d5
00018812 6100 FC3C                  		bsr.w	FindWall
00018816 143C 00C0                  		move.b	#-$40,d2
0001881A 6000 FF32                  		bra.w	loc_14E0A
0001881E                            
0001881E                            ; End of function sub_14EB4
0001881E                            
0001881E                            ; ---------------------------------------------------------------------------
0001881E                            ; Subroutine to	detect when an object hits a wall to its right
0001881E                            ; ---------------------------------------------------------------------------
0001881E                            
0001881E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001881E                            
0001881E                            
0001881E                            ObjHitWallRight:
0001881E D668 0008                  		add.w	obX(a0),d3
00018822 3428 000C                  		move.w	obY(a0),d2
00018826 49F8 F768                  		lea	(v_anglebuffer).w,a4
0001882A 18BC 0000                  		move.b	#0,(a4)
0001882E 367C 0010                  		movea.w	#$10,a3
00018832 3C3C 0000                  		move.w	#0,d6
00018836 7A0E                       		moveq	#$E,d5
00018838 6100 FC16                  		bsr.w	FindWall
0001883C 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018840 0803 0000                  		btst	#0,d3
00018844 6700                       		beq.s	locret_14F06
00018846 163C 00C0                  		move.b	#-$40,d3
0001884A                            
0001884A                            locret_14F06:
0001884A 4E75                       		rts	
0001884C                            
0001884C                            ; End of function ObjHitWallRight
0001884C                            
0001884C                            ; ---------------------------------------------------------------------------
0001884C                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
0001884C                            ; touches them
0001884C                            ; ---------------------------------------------------------------------------
0001884C                            
0001884C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001884C                            
0001884C                            
0001884C                            Sonic_DontRunOnWalls:
0001884C 3428 000C                  		move.w	obY(a0),d2
00018850 3628 0008                  		move.w	obX(a0),d3
00018854 7000                       		moveq	#0,d0
00018856 1028 0016                  		move.b	obHeight(a0),d0
0001885A 4880                       		ext.w	d0
0001885C 9440                       		sub.w	d0,d2
0001885E 0A42 000F                  		eori.w	#$F,d2
00018862 1028 0017                  		move.b	obWidth(a0),d0
00018866 4880                       		ext.w	d0
00018868 D640                       		add.w	d0,d3
0001886A 49F8 F768                  		lea	(v_anglebuffer).w,a4
0001886E 367C FFF0                  		movea.w	#-$10,a3
00018872 3C3C 1000                  		move.w	#$1000,d6
00018876 7A0E                       		moveq	#$E,d5
00018878 6100 FA98                  		bsr.w	FindFloor
0001887C 3F01                       		move.w	d1,-(sp)
0001887E 3428 000C                  		move.w	obY(a0),d2
00018882 3628 0008                  		move.w	obX(a0),d3
00018886 7000                       		moveq	#0,d0
00018888 1028 0016                  		move.b	obHeight(a0),d0
0001888C 4880                       		ext.w	d0
0001888E 9440                       		sub.w	d0,d2
00018890 0A42 000F                  		eori.w	#$F,d2
00018894 1028 0017                  		move.b	obWidth(a0),d0
00018898 4880                       		ext.w	d0
0001889A 9640                       		sub.w	d0,d3
0001889C 49F8 F76A                  		lea	($FFFFF76A).w,a4
000188A0 367C FFF0                  		movea.w	#-$10,a3
000188A4 3C3C 1000                  		move.w	#$1000,d6
000188A8 7A0E                       		moveq	#$E,d5
000188AA 6100 FA66                  		bsr.w	FindFloor
000188AE 301F                       		move.w	(sp)+,d0
000188B0 143C 0080                  		move.b	#-$80,d2
000188B4 6000 FE5E                  		bra.w	loc_14DD0
000188B8                            ; End of function Sonic_DontRunOnWalls
000188B8                            
000188B8                            ; ===========================================================================
000188B8 3428 000C                  		move.w	obY(a0),d2
000188BC 3628 0008                  		move.w	obX(a0),d3
000188C0                            
000188C0                            loc_14F7C:
000188C0 0442 000A                  		subi.w	#$A,d2
000188C4 0A42 000F                  		eori.w	#$F,d2
000188C8 49F8 F768                  		lea	(v_anglebuffer).w,a4
000188CC 367C FFF0                  		movea.w	#-$10,a3
000188D0 3C3C 1000                  		move.w	#$1000,d6
000188D4 7A0E                       		moveq	#$E,d5
000188D6 6100 FA3A                  		bsr.w	FindFloor
000188DA 143C 0080                  		move.b	#-$80,d2
000188DE 6000 FE6E                  		bra.w	loc_14E0A
000188E2                            
000188E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000188E2                            
000188E2                            
000188E2                            ObjHitCeiling:
000188E2 3428 000C                  		move.w	obY(a0),d2
000188E6 3628 0008                  		move.w	obX(a0),d3
000188EA 7000                       		moveq	#0,d0
000188EC 1028 0016                  		move.b	obHeight(a0),d0
000188F0 4880                       		ext.w	d0
000188F2 9440                       		sub.w	d0,d2
000188F4 0A42 000F                  		eori.w	#$F,d2
000188F8 49F8 F768                  		lea	(v_anglebuffer).w,a4
000188FC 367C FFF0                  		movea.w	#-$10,a3
00018900 3C3C 1000                  		move.w	#$1000,d6
00018904 7A0E                       		moveq	#$E,d5
00018906 6100 FA0A                  		bsr.w	FindFloor
0001890A 1638 F768                  		move.b	(v_anglebuffer).w,d3
0001890E 0803 0000                  		btst	#0,d3
00018912 6700                       		beq.s	locret_14FD4
00018914 163C 0080                  		move.b	#-$80,d3
00018918                            
00018918                            locret_14FD4:
00018918 4E75                       		rts	
0001891A                            ; End of function ObjHitCeiling
0001891A                            
0001891A                            ; ===========================================================================
0001891A                            
0001891A                            loc_14FD6:
0001891A 3428 000C                  		move.w	obY(a0),d2
0001891E 3628 0008                  		move.w	obX(a0),d3
00018922 7000                       		moveq	#0,d0
00018924 1028 0017                  		move.b	obWidth(a0),d0
00018928 4880                       		ext.w	d0
0001892A 9440                       		sub.w	d0,d2
0001892C 1028 0016                  		move.b	obHeight(a0),d0
00018930 4880                       		ext.w	d0
00018932 9640                       		sub.w	d0,d3
00018934 0A43 000F                  		eori.w	#$F,d3
00018938 49F8 F768                  		lea	(v_anglebuffer).w,a4
0001893C 367C FFF0                  		movea.w	#-$10,a3
00018940 3C3C 0800                  		move.w	#$800,d6
00018944 7A0E                       		moveq	#$E,d5
00018946 6100 FB08                  		bsr.w	FindWall
0001894A 3F01                       		move.w	d1,-(sp)
0001894C 3428 000C                  		move.w	obY(a0),d2
00018950 3628 0008                  		move.w	obX(a0),d3
00018954 7000                       		moveq	#0,d0
00018956 1028 0017                  		move.b	obWidth(a0),d0
0001895A 4880                       		ext.w	d0
0001895C D440                       		add.w	d0,d2
0001895E 1028 0016                  		move.b	obHeight(a0),d0
00018962 4880                       		ext.w	d0
00018964 9640                       		sub.w	d0,d3
00018966 0A43 000F                  		eori.w	#$F,d3
0001896A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001896E 367C FFF0                  		movea.w	#-$10,a3
00018972 3C3C 0800                  		move.w	#$800,d6
00018976 7A0E                       		moveq	#$E,d5
00018978 6100 FAD6                  		bsr.w	FindWall
0001897C 301F                       		move.w	(sp)+,d0
0001897E 143C 0040                  		move.b	#$40,d2
00018982 6000 FD90                  		bra.w	loc_14DD0
00018986                            
00018986                            ; ---------------------------------------------------------------------------
00018986                            ; Subroutine to	stop Sonic when	he jumps at a wall
00018986                            ; ---------------------------------------------------------------------------
00018986                            
00018986                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018986                            
00018986                            
00018986                            Sonic_HitWall:
00018986 3428 000C                  		move.w	obY(a0),d2
0001898A 3628 0008                  		move.w	obX(a0),d3
0001898E                            
0001898E                            loc_1504A:
0001898E 0443 000A                  		subi.w	#$A,d3
00018992 0A43 000F                  		eori.w	#$F,d3
00018996 49F8 F768                  		lea	(v_anglebuffer).w,a4
0001899A 367C FFF0                  		movea.w	#-$10,a3
0001899E 3C3C 0800                  		move.w	#$800,d6
000189A2 7A0E                       		moveq	#$E,d5
000189A4 6100 FAAA                  		bsr.w	FindWall
000189A8 143C 0040                  		move.b	#$40,d2
000189AC 6000 FDA0                  		bra.w	loc_14E0A
000189B0                            ; End of function Sonic_HitWall
000189B0                            
000189B0                            ; ---------------------------------------------------------------------------
000189B0                            ; Subroutine to	detect when an object hits a wall to its left
000189B0                            ; ---------------------------------------------------------------------------
000189B0                            
000189B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000189B0                            
000189B0                            
000189B0                            ObjHitWallLeft:
000189B0 D668 0008                  		add.w	obX(a0),d3
000189B4 3428 000C                  		move.w	obY(a0),d2
000189B8                            		; Engine bug: colliding with left walls is erratic with this function.
000189B8                            		; The cause is this: a missing instruction to flip collision on the found
000189B8                            		; 16x16 block; this one:
000189B8                            		;eori.w	#$F,d3
000189B8 49F8 F768                  		lea	(v_anglebuffer).w,a4
000189BC 18BC 0000                  		move.b	#0,(a4)
000189C0 367C FFF0                  		movea.w	#-$10,a3
000189C4 3C3C 0800                  		move.w	#$800,d6
000189C8 7A0E                       		moveq	#$E,d5
000189CA 6100 FA84                  		bsr.w	FindWall
000189CE 1638 F768                  		move.b	(v_anglebuffer).w,d3
000189D2 0803 0000                  		btst	#0,d3
000189D6 6700                       		beq.s	locret_15098
000189D8 163C 0040                  		move.b	#$40,d3
000189DC                            
000189DC                            locret_15098:
000189DC 4E75                       		rts	
000189DE                            ; End of function ObjHitWallLeft
000189DE                            
000189DE                            ; ===========================================================================
000189DE                            
000189DE                            		include	"_incObj\66 Rotating Junction.asm"
000189DE                            ; ---------------------------------------------------------------------------
000189DE                            ; Object 66 - rotating disc junction that grabs Sonic (SBZ)
000189DE                            ; ---------------------------------------------------------------------------
000189DE                            
000189DE                            Junction:
000189DE 7000                       		moveq	#0,d0
000189E0 1028 0024                  		move.b	obRoutine(a0),d0
000189E4 323B 0000                  		move.w	Jun_Index(pc,d0.w),d1
000189E8 4EFB 1000                  		jmp	Jun_Index(pc,d1.w)
000189EC                            ; ===========================================================================
000189EC 0000                       Jun_Index:	dc.w Jun_Main-Jun_Index
000189EE 0000                       		dc.w Jun_Action-Jun_Index
000189F0 0000                       		dc.w Jun_Display-Jun_Index
000189F2 0000                       		dc.w Jun_Release-Jun_Index
000189F4                            
000189F4 =00000034                  jun_frame:	equ $34		; current frame
000189F4 =00000036                  jun_reverse:	equ $36		; flag set when switch is pressed
000189F4 =00000038                  jun_switch:	equ $38		; which switch will reverse the disc
000189F4                            ; ===========================================================================
000189F4                            
000189F4                            Jun_Main:	; Routine 0
000189F4 5428 0024                  		addq.b	#2,obRoutine(a0)
000189F8 323C 0001                  		move.w	#1,d1
000189FC 2248                       		movea.l	a0,a1
000189FE 6000                       		bra.s	@makeitem
00018A00                            ; ===========================================================================
00018A00                            
00018A00                            	@repeat:
00018A00 4EB9 0000 FB18             		jsr	FindFreeObj
00018A06 6600                       		bne.s	@fail
00018A08 12BC 0066                  		move.b	#id_Junction,0(a1)
00018A0C 5829 0024                  		addq.b	#4,obRoutine(a1) ; goto Jun_Display next
00018A10 3368 0008 0008             		move.w	obX(a0),obX(a1)
00018A16 3368 000C 000C             		move.w	obY(a0),obY(a1)
00018A1C 337C 0180 0018             		move.w	#$180,obPriority(a1)
00018A22 137C 0010 001A             		move.b	#$10,obFrame(a1) ; use large circular sprite
00018A28                            
00018A28                            @makeitem:
00018A28 237C 0000 0000 0004        		move.l	#Map_Jun,obMap(a1)
00018A30 337C 4348 0002             		move.w	#$4348,obGfx(a1)
00018A36 0029 0004 0001             		ori.b	#4,obRender(a1)
00018A3C 137C 0038 0014             		move.b	#$38,obActWid(a1)
00018A42                            
00018A42                            	@fail:
00018A42 51C9 FFBC                  		dbf	d1,@repeat
00018A46                            
00018A46 117C 0030 0014             		move.b	#$30,obActWid(a0)
00018A4C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018A52 317C 003C 0030             		move.w	#$3C,$30(a0)
00018A58 117C 0001 0034             		move.b	#1,jun_frame(a0)
00018A5E 1168 0028 0038             		move.b	obSubtype(a0),jun_switch(a0)
00018A64                            
00018A64                            Jun_Action:	; Routine 2
00018A64 6100 0000                  		bsr.w	Jun_ChkSwitch
00018A68 4A28 0001                  		tst.b	obRender(a0)
00018A6C 6A00 0000                  		bpl.w	Jun_Display
00018A70 323C 0030                  		move.w	#$30,d1
00018A74 3401                       		move.w	d1,d2
00018A76 3602                       		move.w	d2,d3
00018A78 5243                       		addq.w	#1,d3
00018A7A 3828 0008                  		move.w	obX(a0),d4
00018A7E 6100 905E                  		bsr.w	SolidObject
00018A82 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing the disc?
00018A88 6700 0000                  		beq.w	Jun_Display	; if not, branch
00018A8C                            
00018A8C 43F8 D000                  		lea	(v_player).w,a1
00018A90 720E                       		moveq	#$E,d1
00018A92 3029 0008                  		move.w	obX(a1),d0
00018A96 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic to the left of the disc?
00018A9A 6500                       		bcs.s	@isleft		; if yes, branch
00018A9C 7207                       		moveq	#7,d1		
00018A9E                            
00018A9E                            	@isleft:
00018A9E B228 001A                  		cmp.b	obFrame(a0),d1	; is the gap next to Sonic?
00018AA2 6600                       		bne.s	Jun_Display	; if not, branch
00018AA4                            
00018AA4 1141 0032                  		move.b	d1,$32(a0)
00018AA8 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Jun_Release next
00018AAC 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
00018AB2 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic use "rolling" animation
00018AB8 337C 0800 0020             		move.w	#$800,obInertia(a1)
00018ABE 337C 0000 0010             		move.w	#0,obVelX(a1)
00018AC4 337C 0000 0012             		move.w	#0,obVelY(a1)
00018ACA 08A8 0005 0022             		bclr	#5,obStatus(a0)
00018AD0 08A9 0005 0022             		bclr	#5,obStatus(a1)
00018AD6 08E9 0001 0022             		bset	#1,obStatus(a1)
00018ADC 3429 0008                  		move.w	obX(a1),d2
00018AE0 3629 000C                  		move.w	obY(a1),d3
00018AE4 6100 0000                  		bsr.w	Jun_ChgPos
00018AE8 D569 0008                  		add.w	d2,obX(a1)
00018AEC D769 000C                  		add.w	d3,obY(a1)
00018AF0 E0E9 0008                  		asr	obX(a1)
00018AF4 E0E9 000C                  		asr	obY(a1)
00018AF8                            
00018AF8                            Jun_Display:	; Routine 4
00018AF8 6000 8B4C                  		bra.w	RememberState
00018AFC                            ; ===========================================================================
00018AFC                            
00018AFC                            Jun_Release:	; Routine 6
00018AFC 1028 001A                  		move.b	obFrame(a0),d0
00018B00 0C00 0004                  		cmpi.b	#4,d0		; is gap pointing down?
00018B04 6700                       		beq.s	@release	; if yes, branch
00018B06 0C00 0007                  		cmpi.b	#7,d0		; is gap pointing right?
00018B0A 6600                       		bne.s	@dontrelease	; if not, branch
00018B0C                            
00018B0C                            	@release:
00018B0C B028 0032                  		cmp.b	$32(a0),d0
00018B10 6700                       		beq.s	@dontrelease
00018B12 43F8 D000                  		lea	(v_player).w,a1
00018B16 337C 0000 0010             		move.w	#0,obVelX(a1)
00018B1C 337C 0800 0012             		move.w	#$800,obVelY(a1)
00018B22 0C00 0004                  		cmpi.b	#4,d0
00018B26 6700                       		beq.s	@isdown
00018B28 337C 0800 0010             		move.w	#$800,obVelX(a1)
00018B2E 337C 0800 0012             		move.w	#$800,obVelY(a1)
00018B34                            
00018B34                            	@isdown:
00018B34 4238 F7C8                  		clr.b	(f_lockmulti).w	; unlock controls
00018B38 5928 0024                  		subq.b	#4,obRoutine(a0)
00018B3C                            
00018B3C                            	@dontrelease:
00018B3C 6100                       		bsr.s	Jun_ChkSwitch
00018B3E 6100                       		bsr.s	Jun_ChgPos
00018B40 6000 8B04                  		bra.w	RememberState
00018B44                            
00018B44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018B44                            
00018B44                            
00018B44                            Jun_ChkSwitch:
00018B44 45F8 F7E0                  		lea	(f_switch).w,a2
00018B48 7000                       		moveq	#0,d0
00018B4A 1028 0038                  		move.b	jun_switch(a0),d0
00018B4E 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00018B54 6700                       		beq.s	@unpressed	; if not, branch
00018B56                            
00018B56 4A28 0036                  		tst.b	jun_reverse(a0)	; has switch previously	been pressed?
00018B5A 6600                       		bne.s	@animate	; if yes, branch
00018B5C 4428 0034                  		neg.b	jun_frame(a0)
00018B60 117C 0001 0036             		move.b	#1,jun_reverse(a0) ; set to "previously pressed"
00018B66 6000                       		bra.s	@animate
00018B68                            ; ===========================================================================
00018B68                            
00018B68                            @unpressed:
00018B68 4228 0036                  		clr.b	jun_reverse(a0)	; set to "not yet pressed"
00018B6C                            
00018B6C                            @animate:
00018B6C 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement frame timer
00018B70 6A00                       		bpl.s	@nochange	; if time remains, branch
00018B72 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00018B78 1228 0034                  		move.b	jun_frame(a0),d1
00018B7C 1028 001A                  		move.b	obFrame(a0),d0
00018B80 D001                       		add.b	d1,d0
00018B82 0200 000F                  		andi.b	#$F,d0
00018B86 1140 001A                  		move.b	d0,obFrame(a0)	; update frame
00018B8A                            
00018B8A                            	@nochange:
00018B8A 4E75                       		rts	
00018B8C                            ; End of function Jun_ChkSwitch
00018B8C                            
00018B8C                            
00018B8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018B8C                            
00018B8C                            
00018B8C                            Jun_ChgPos:
00018B8C 43F8 D000                  		lea	(v_player).w,a1
00018B90 7000                       		moveq	#0,d0
00018B92 1028 001A                  		move.b	obFrame(a0),d0
00018B96 D040                       		add.w	d0,d0
00018B98 45FB 0000                  		lea	@data(pc,d0.w),a2
00018B9C 101A                       		move.b	(a2)+,d0
00018B9E 4880                       		ext.w	d0
00018BA0 D068 0008                  		add.w	obX(a0),d0
00018BA4 3340 0008                  		move.w	d0,obX(a1)
00018BA8 101A                       		move.b	(a2)+,d0
00018BAA 4880                       		ext.w	d0
00018BAC D068 000C                  		add.w	obY(a0),d0
00018BB0 3340 000C                  		move.w	d0,obY(a1)
00018BB4 4E75                       		rts	
00018BB6                            
00018BB6                            
00018BB6 E000 E20E                  @data:		dc.b -$20,    0, -$1E,   $E ; disc x-pos, Sonic x-pos, disc y-pos, Sonic y-pos
00018BBA E818 F21E                  		dc.b -$18,  $18,  -$E,  $1E
00018BBE 0020 0E1E                  		dc.b    0,  $20,   $E,  $1E
00018BC2 1818 1E0E                  		dc.b  $18,  $18,  $1E,   $E
00018BC6 2000 1EF2                  		dc.b  $20,    0,  $1E,  -$E
00018BCA 18E8 0EE2                  		dc.b  $18, -$18,   $E, -$1E
00018BCE 00E0 F2E2                  		dc.b    0, -$20,  -$E, -$1E
00018BD2 E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
00018BD2 E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
00018BD6                            Map_Jun:	include	"_maps\Rotating Junction.asm"
00018BD6                            ; ---------------------------------------------------------------------------
00018BD6                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00018BD6                            ; ---------------------------------------------------------------------------
00018BD6                            Map_Jun_internal:
00018BD6 0000                       		dc.w @gap0-Map_Jun_internal
00018BD8 0000                       		dc.w @gap1-Map_Jun_internal
00018BDA 0000                       		dc.w @gap2-Map_Jun_internal
00018BDC 0000                       		dc.w @gap3-Map_Jun_internal
00018BDE 0000                       		dc.w @gap4-Map_Jun_internal
00018BE0 0000                       		dc.w @gap5-Map_Jun_internal
00018BE2 0000                       		dc.w @gap6-Map_Jun_internal
00018BE4 0000                       		dc.w @gap7-Map_Jun_internal
00018BE6 0000                       		dc.w @gap8-Map_Jun_internal
00018BE8 0000                       		dc.w @gap9-Map_Jun_internal
00018BEA 0000                       		dc.w @gapA-Map_Jun_internal
00018BEC 0000                       		dc.w @gapB-Map_Jun_internal
00018BEE 0000                       		dc.w @gapC-Map_Jun_internal
00018BF0 0000                       		dc.w @gapD-Map_Jun_internal
00018BF2 0000                       		dc.w @gapE-Map_Jun_internal
00018BF4 0000                       		dc.w @gapF-Map_Jun_internal
00018BF6 0000                       		dc.w @circle-Map_Jun_internal
00018BF8 06                         @gap0:		dc.b 6
00018BF9 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00018BFE 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00018C03 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00018C08 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00018C0D 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00018C12 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00018C17 06                         @gap1:		dc.b 6
00018C18 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00018C1D 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00018C22 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00018C27 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00018C2C 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00018C31 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00018C36 06                         @gap2:		dc.b 6
00018C37 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00018C3C 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00018C41 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00018C46 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00018C4B 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00018C50 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00018C55 06                         @gap3:		dc.b 6
00018C56 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00018C5B 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00018C60 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00018C65 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00018C6A 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00018C6F 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00018C74 06                         @gap4:		dc.b 6
00018C75 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00018C7A 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00018C7F 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00018C84 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00018C89 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00018C8E 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00018C93 06                         @gap5:		dc.b 6
00018C94 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00018C99 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00018C9E 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00018CA3 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00018CA8 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00018CAD 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00018CB2 06                         @gap6:		dc.b 6
00018CB3 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00018CB8 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00018CBD 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00018CC2 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00018CC7 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00018CCC 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00018CD1 06                         @gap7:		dc.b 6
00018CD2 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00018CD7 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00018CDC F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00018CE1 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00018CE6 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00018CEB 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00018CF0 06                         @gap8:		dc.b 6
00018CF1 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00018CF6 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00018CFB E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00018D00 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00018D05 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00018D0A 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00018D0F 06                         @gap9:		dc.b 6
00018D10 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00018D15 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00018D1A DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00018D1F DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00018D24 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00018D29 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00018D2E 06                         @gapA:		dc.b 6
00018D2F D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00018D34 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00018D39 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00018D3E D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00018D43 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00018D48 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00018D4D 06                         @gapB:		dc.b 6
00018D4E D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00018D53 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00018D58 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00018D5D CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00018D62 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00018D67 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00018D6C 06                         @gapC:		dc.b 6
00018D6D D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00018D72 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00018D77 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00018D7C C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00018D81 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00018D86 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00018D8B 06                         @gapD:		dc.b 6
00018D8C D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00018D91 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00018D96 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00018D9B CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00018DA0 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00018DA5 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00018DAA 06                         @gapE:		dc.b 6
00018DAB E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00018DB0 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00018DB5 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00018DBA D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00018DBF E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00018DC4 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00018DC9 06                         @gapF:		dc.b 6
00018DCA E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00018DCF D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00018DD4 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00018DD9 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00018DDE F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00018DE3 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00018DE8 0C                         @circle:	dc.b $C
00018DE9 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00018DEE D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00018DF3 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00018DF8 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00018DFD D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00018E02 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00018E07 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00018E0C 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00018E11 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00018E16 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00018E1B 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00018E20 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00018E26 00                         		even
00018E26 00                         		even
00018E26                            		include	"_incObj\67 Running Disc.asm"
00018E26                            ; ---------------------------------------------------------------------------
00018E26                            ; Object 67 - disc that	you run	around (SBZ)
00018E26                            ; ---------------------------------------------------------------------------
00018E26                            
00018E26                            RunningDisc:
00018E26 7000                       		moveq	#0,d0
00018E28 1028 0024                  		move.b	obRoutine(a0),d0
00018E2C 323B 0000                  		move.w	Disc_Index(pc,d0.w),d1
00018E30 4EFB 1000                  		jmp	Disc_Index(pc,d1.w)
00018E34                            ; ===========================================================================
00018E34 0000                       Disc_Index:	dc.w Disc_Main-Disc_Index
00018E36 0000                       		dc.w Disc_Action-Disc_Index
00018E38                            
00018E38 =00000032                  disc_origX:	equ $32		; original x-axis position
00018E38 =00000030                  disc_origY:	equ $30		; original y-axis position
00018E38                            ; ===========================================================================
00018E38                            
00018E38                            Disc_Main:	; Routine 0
00018E38 5428 0024                  		addq.b	#2,obRoutine(a0)
00018E3C 217C 0000 0000 0004        		move.l	#Map_Disc,obMap(a0)
00018E44 317C C344 0002             		move.w	#$C344,obGfx(a0)
00018E4A 117C 0004 0001             		move.b	#4,obRender(a0)
00018E50 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018E56 117C 0008 0014             		move.b	#8,obActWid(a0)
00018E5C 3168 0008 0032             		move.w	obX(a0),disc_origX(a0)
00018E62 3168 000C 0030             		move.w	obY(a0),disc_origY(a0)
00018E68 117C 0018 0034             		move.b	#$18,$34(a0)
00018E6E 117C 0048 0038             		move.b	#$48,$38(a0)
00018E74 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018E78 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00018E7C 6700                       		beq.s	@typeis0	; branch if 0
00018E7E 117C 0010 0034             		move.b	#$10,$34(a0)
00018E84 117C 0038 0038             		move.b	#$38,$38(a0)
00018E8A                            
00018E8A                            	@typeis0:
00018E8A 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018E8E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00018E92 4881                       		ext.w	d1
00018E94 E741                       		asl.w	#3,d1
00018E96 3141 0036                  		move.w	d1,$36(a0)
00018E9A 1028 0022                  		move.b	obStatus(a0),d0
00018E9E E418                       		ror.b	#2,d0
00018EA0 0200 00C0                  		andi.b	#$C0,d0
00018EA4 1140 0026                  		move.b	d0,obAngle(a0)
00018EA8                            
00018EA8                            Disc_Action:	; Routine 2
00018EA8 6100 0000                  		bsr.w	Disc_MoveSonic
00018EAC 6100 0000                  		bsr.w	Disc_MoveSpot
00018EB0 6000 0000                  		bra.w	Disc_ChkDel
00018EB4                            ; ===========================================================================
00018EB4                            
00018EB4                            Disc_MoveSonic:
00018EB4 7400                       		moveq	#0,d2
00018EB6 1428 0038                  		move.b	$38(a0),d2
00018EBA 3602                       		move.w	d2,d3
00018EBC D643                       		add.w	d3,d3
00018EBE 43F8 D000                  		lea	(v_player).w,a1
00018EC2 3029 0008                  		move.w	obX(a1),d0
00018EC6 9068 0032                  		sub.w	disc_origX(a0),d0
00018ECA D042                       		add.w	d2,d0
00018ECC B043                       		cmp.w	d3,d0
00018ECE 6400                       		bcc.s	loc_155A8
00018ED0 3229 000C                  		move.w	obY(a1),d1
00018ED4 9268 0030                  		sub.w	disc_origY(a0),d1
00018ED8 D242                       		add.w	d2,d1
00018EDA B243                       		cmp.w	d3,d1
00018EDC 6400                       		bcc.s	loc_155A8
00018EDE 0829 0001 0022             		btst	#1,obStatus(a1)
00018EE4 6700                       		beq.s	loc_155B8
00018EE6 4228 003A                  		clr.b	$3A(a0)
00018EEA 4E75                       		rts	
00018EEC                            ; ===========================================================================
00018EEC                            
00018EEC                            loc_155A8:
00018EEC 4A28 003A                  		tst.b	$3A(a0)
00018EF0 6700                       		beq.s	locret_155B6
00018EF2 4229 0038                  		clr.b	$38(a1)
00018EF6 4228 003A                  		clr.b	$3A(a0)
00018EFA                            
00018EFA                            locret_155B6:
00018EFA 4E75                       		rts	
00018EFC                            ; ===========================================================================
00018EFC                            
00018EFC                            loc_155B8:
00018EFC 4A28 003A                  		tst.b	$3A(a0)
00018F00 6600                       		bne.s	loc_155E2
00018F02 117C 0001 003A             		move.b	#1,$3A(a0)
00018F08 0829 0002 0022             		btst	#2,obStatus(a1)
00018F0E 6600                       		bne.s	loc_155D0
00018F10 4229 001C                  		clr.b	obAnim(a1)
00018F14                            
00018F14                            loc_155D0:
00018F14 08A9 0005 0022             		bclr	#5,obStatus(a1)
00018F1A 137C 0001 001D             		move.b	#1,obNextAni(a1)
00018F20 137C 0001 0038             		move.b	#1,$38(a1)
00018F26                            
00018F26                            loc_155E2:
00018F26 3029 0020                  		move.w	obInertia(a1),d0
00018F2A 4A68 0036                  		tst.w	$36(a0)
00018F2E 6A00                       		bpl.s	loc_15608
00018F30 0C40 FC00                  		cmpi.w	#-$400,d0
00018F34 6F00                       		ble.s	loc_155FA
00018F36 337C FC00 0020             		move.w	#-$400,obInertia(a1)
00018F3C 4E75                       		rts	
00018F3E                            ; ===========================================================================
00018F3E                            
00018F3E                            loc_155FA:
00018F3E 0C40 F100                  		cmpi.w	#-$F00,d0
00018F42 6C00                       		bge.s	locret_15606
00018F44 337C F100 0020             		move.w	#-$F00,obInertia(a1)
00018F4A                            
00018F4A                            locret_15606:
00018F4A 4E75                       		rts	
00018F4C                            ; ===========================================================================
00018F4C                            
00018F4C                            loc_15608:
00018F4C 0C40 0400                  		cmpi.w	#$400,d0
00018F50 6C00                       		bge.s	loc_15616
00018F52 337C 0400 0020             		move.w	#$400,obInertia(a1)
00018F58 4E75                       		rts	
00018F5A                            ; ===========================================================================
00018F5A                            
00018F5A                            loc_15616:
00018F5A 0C40 0F00                  		cmpi.w	#$F00,d0
00018F5E 6F00                       		ble.s	locret_15622
00018F60 337C 0F00 0020             		move.w	#$F00,obInertia(a1)
00018F66                            
00018F66                            locret_15622:
00018F66 4E75                       		rts	
00018F68                            ; ===========================================================================
00018F68                            
00018F68                            Disc_MoveSpot:
00018F68 3028 0036                  		move.w	$36(a0),d0
00018F6C D168 0026                  		add.w	d0,obAngle(a0)
00018F70 1028 0026                  		move.b	obAngle(a0),d0
00018F74 4EB9 0000 3CCA             		jsr	(CalcSine).l
00018F7A 3428 0030                  		move.w	disc_origY(a0),d2
00018F7E 3628 0032                  		move.w	disc_origX(a0),d3
00018F82 7800                       		moveq	#0,d4
00018F84 1828 0034                  		move.b	$34(a0),d4
00018F88 E14C                       		lsl.w	#8,d4
00018F8A 2A04                       		move.l	d4,d5
00018F8C C9C0                       		muls.w	d0,d4
00018F8E 4844                       		swap	d4
00018F90 CBC1                       		muls.w	d1,d5
00018F92 4845                       		swap	d5
00018F94 D842                       		add.w	d2,d4
00018F96 DA43                       		add.w	d3,d5
00018F98 3144 000C                  		move.w	d4,obY(a0)
00018F9C 3145 0008                  		move.w	d5,obX(a0)
00018FA0 4E75                       		rts	
00018FA2                            ; ===========================================================================
00018FA2                            
00018FA2                            Disc_ChkDel:
00018FBE 4EF9 0000 F57E             		jmp	(DisplaySprite).l
00018FC4                            
00018FC4                            	@delete:
00018FC4 4EF9 0000 F5BE             		jmp	(DeleteObject).l
00018FC4 4EF9 0000 F5BE             		jmp	(DeleteObject).l
00018FCA                            Map_Disc:	include	"_maps\Running Disc.asm"
00018FCA                            ; ---------------------------------------------------------------------------
00018FCA                            ; Sprite mappings - disc that you run around (SBZ)
00018FCA                            ; (It's just a small blob that moves around in a circle. The disc itself is
00018FCA                            ; part of the level tiles.)
00018FCA                            ; ---------------------------------------------------------------------------
00018FCA                            Map_Disc_internal:
00018FCA 0000                       		dc.w @spot-Map_Disc_internal
00018FCC 01                         @spot:		dc.b 1
00018FCD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018FD2                            		even
00018FD2                            		even
00018FD2                            		include	"_incObj\68 Conveyor Belt.asm"
00018FD2                            ; ---------------------------------------------------------------------------
00018FD2                            ; Object 68 - conveyor belts (SBZ)
00018FD2                            ; ---------------------------------------------------------------------------
00018FD2                            
00018FD2                            Conveyor:
00018FD2 7000                       		moveq	#0,d0
00018FD4 1028 0024                  		move.b	obRoutine(a0),d0
00018FD8 323B 0000                  		move.w	Conv_Index(pc,d0.w),d1
00018FDC 4EFB 1000                  		jmp	Conv_Index(pc,d1.w)
00018FE0                            ; ===========================================================================
00018FE0 0000                       Conv_Index:	dc.w Conv_Main-Conv_Index
00018FE2 0000                       		dc.w Conv_Action-Conv_Index
00018FE4                            
00018FE4 =00000036                  conv_speed:	equ $36
00018FE4 =00000038                  conv_width:	equ $38
00018FE4                            ; ===========================================================================
00018FE4                            
00018FE4                            Conv_Main:	; Routine 0
00018FE4 5428 0024                  		addq.b	#2,obRoutine(a0)
00018FE8 117C 0080 0038             		move.b	#128,conv_width(a0) ; set width to 128 pixels
00018FEE 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018FF2 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00018FF6 6700                       		beq.s	@typeis0	; if zero, branch
00018FF8 117C 0038 0038             		move.b	#56,conv_width(a0) ; set width to 56 pixels
00018FFE                            
00018FFE                            	@typeis0:
00018FFE 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00019002 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00019006 4881                       		ext.w	d1
00019008 E841                       		asr.w	#4,d1
0001900A 3141 0036                  		move.w	d1,conv_speed(a0) ; set belt speed
0001900E                            
0001900E                            Conv_Action:	; Routine 2
0001900E 6100                       		bsr.s	@movesonic
0001902C 4E75                       		rts	
0001902E                            
0001902E                            	@delete:
0001902E 4EF9 0000 F5BE             		jmp	(DeleteObject).l
00019034                            ; ===========================================================================
00019034                            
00019034                            @movesonic:
00019034 7400                       		moveq	#0,d2
00019036 1428 0038                  		move.b	conv_width(a0),d2
0001903A 3602                       		move.w	d2,d3
0001903C D643                       		add.w	d3,d3
0001903E 43F8 D000                  		lea	(v_player).w,a1
00019042 3029 0008                  		move.w	obX(a1),d0
00019046 9068 0008                  		sub.w	obX(a0),d0
0001904A D042                       		add.w	d2,d0
0001904C B043                       		cmp.w	d3,d0
0001904E 6400                       		bcc.s	@notonconveyor
00019050 3229 000C                  		move.w	obY(a1),d1
00019054 9268 000C                  		sub.w	obY(a0),d1
00019058 0641 0030                  		addi.w	#$30,d1
0001905C 0C41 0030                  		cmpi.w	#$30,d1
00019060 6400                       		bcc.s	@notonconveyor
00019062 0829 0001 0022             		btst	#1,obStatus(a1)
00019068 6600                       		bne.s	@notonconveyor
0001906A 3028 0036                  		move.w	conv_speed(a0),d0
0001906E D169 0008                  		add.w	d0,obX(a1)
00019072                            
00019072                            	@notonconveyor:
00019072 4E75                       		rts	
00019072 4E75                       		rts	
00019074                            		include	"_incObj\69 SBZ Spinning Platforms.asm"
00019074                            ; ---------------------------------------------------------------------------
00019074                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00019074                            ; ---------------------------------------------------------------------------
00019074                            
00019074                            SpinPlatform:
00019074 7000                       		moveq	#0,d0
00019076 1028 0024                  		move.b	obRoutine(a0),d0
0001907A 323B 0000                  		move.w	Spin_Index(pc,d0.w),d1
0001907E 4EFB 1000                  		jmp	Spin_Index(pc,d1.w)
00019082                            ; ===========================================================================
00019082 0000                       Spin_Index:	dc.w Spin_Main-Spin_Index
00019084 0000                       		dc.w Spin_Trapdoor-Spin_Index
00019086 0000                       		dc.w Spin_Spinner-Spin_Index
00019088                            
00019088 =00000030                  spin_timer:	equ $30		; time counter until change
00019088 =00000032                  spin_timelen:	equ $32		; time between changes (general)
00019088                            ; ===========================================================================
00019088                            
00019088                            Spin_Main:	; Routine 0
00019088 5428 0024                  		addq.b	#2,obRoutine(a0)
0001908C 217C 0000 0000 0004        		move.l	#Map_Trap,obMap(a0)
00019094 317C 4492 0002             		move.w	#$4492,obGfx(a0)
0001909A 0028 0004 0001             		ori.b	#4,obRender(a0)
000190A0 117C 0080 0014             		move.b	#$80,obActWid(a0)
000190A6 7000                       		moveq	#0,d0
000190A8 1028 0028                  		move.b	obSubtype(a0),d0
000190AC 0240 000F                  		andi.w	#$F,d0
000190B0 C0FC 003C                  		mulu.w	#$3C,d0
000190B4 3140 0032                  		move.w	d0,spin_timelen(a0)
000190B8 4A28 0028                  		tst.b	obSubtype(a0)	; is subtype $8x?
000190BC 6A00                       		bpl.s	Spin_Trapdoor	; if not, branch
000190BE                            
000190BE 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Spin_Spinner next
000190C2 217C 0000 0000 0004        		move.l	#Map_Spin,obMap(a0)
000190CA 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
000190D0 117C 0010 0014             		move.b	#$10,obActWid(a0)
000190D6 117C 0002 001C             		move.b	#2,obAnim(a0)
000190DC 7000                       		moveq	#0,d0
000190DE 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000190E2 3200                       		move.w	d0,d1
000190E4 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000190E8 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
000190EC 3140 0030                  		move.w	d0,spin_timer(a0)
000190F0 3140 0032                  		move.w	d0,spin_timelen(a0) ; set time delay
000190F4 0241 0070                  		andi.w	#$70,d1
000190F8 0641 0010                  		addi.w	#$10,d1
000190FC E549                       		lsl.w	#2,d1
000190FE 5341                       		subq.w	#1,d1
00019100 3141 0036                  		move.w	d1,$36(a0)
00019104 6000                       		bra.s	Spin_Spinner
00019106                            ; ===========================================================================
00019106                            
00019106                            Spin_Trapdoor:	; Routine 2
00019106 5368 0030                  		subq.w	#1,spin_timer(a0) ; decrement timer
0001910A 6A00                       		bpl.s	@animate	; if time remains, branch
0001910C                            
0001910C 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
00019112 0868 0000 001C             		bchg	#0,obAnim(a0)
00019118 4A28 0001                  		tst.b	obRender(a0)
0001911C 6A00                       		bpl.s	@animate
00019128                            
00019128                            	@animate:
00019128 43F9 0000 0000             		lea	(Ani_Spin).l,a1
0001912E 4EB9 0000 C634             		jsr	(AnimateSprite).l
00019134 4A28 001A                  		tst.b	obFrame(a0)	; is frame number 0 displayed?
00019138 6600                       		bne.s	@notsolid	; if not, branch
0001913A 323C 004B                  		move.w	#$4B,d1
0001913E 343C 000C                  		move.w	#$C,d2
00019142 3602                       		move.w	d2,d3
00019144 5243                       		addq.w	#1,d3
00019146 3828 0008                  		move.w	obX(a0),d4
0001914A 6100 8992                  		bsr.w	SolidObject
0001914E 6000 84F6                  		bra.w	RememberState
00019152                            ; ===========================================================================
00019152                            
00019152                            @notsolid:
00019152 0828 0003 0022             		btst	#3,obStatus(a0) ; is Sonic standing on the trapdoor?
00019158 6700                       		beq.s	@display	; if not, branch
0001915A 43F8 D000                  		lea	(v_player).w,a1
0001915E 08A9 0003 0022             		bclr	#3,obStatus(a1)
00019164 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001916A 4228 0025                  		clr.b	obSolid(a0)
0001916E                            
0001916E                            	@display:
0001916E 6000 84D6                  		bra.w	RememberState
00019172                            ; ===========================================================================
00019172                            
00019172                            Spin_Spinner:	; Routine 4
00019172 3038 FE04                  		move.w	(v_framecount).w,d0
00019176 C068 0036                  		and.w	$36(a0),d0
0001917A 6600                       		bne.s	@delay
0001917C 117C 0001 0034             		move.b	#1,$34(a0)
00019182                            
00019182                            	@delay:
00019182 4A28 0034                  		tst.b	$34(a0)
00019186 6700                       		beq.s	@animate
00019188 5368 0030                  		subq.w	#1,spin_timer(a0)
0001918C 6A00                       		bpl.s	@animate
0001918E 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
00019194 4228 0034                  		clr.b	$34(a0)
00019198 0868 0000 001C             		bchg	#0,obAnim(a0)
0001919E                            
0001919E                            	@animate:
0001919E 43F9 0000 0000             		lea	(Ani_Spin).l,a1
000191A4 4EB9 0000 C634             		jsr	(AnimateSprite).l
000191AA 4A28 001A                  		tst.b	obFrame(a0)	; check	if frame number	0 is displayed
000191AE 6600                       		bne.s	@notsolid2	; if not, branch
000191B0 323C 001B                  		move.w	#$1B,d1
000191B4 343C 0007                  		move.w	#7,d2
000191B8 3602                       		move.w	d2,d3
000191BA 5243                       		addq.w	#1,d3
000191BC 3828 0008                  		move.w	obX(a0),d4
000191C0 6100 891C                  		bsr.w	SolidObject
000191C4 6000 8480                  		bra.w	RememberState
000191C8                            ; ===========================================================================
000191C8                            
000191C8                            @notsolid2:
000191C8 0828 0003 0022             		btst	#3,obStatus(a0)
000191CE 6700                       		beq.s	@display
000191D0 43F8 D000                  		lea	(v_player).w,a1
000191D4 08A9 0003 0022             		bclr	#3,obStatus(a1)
000191DA 08A8 0003 0022             		bclr	#3,obStatus(a0)
000191E0 4228 0025                  		clr.b	obSolid(a0)
000191E4                            
000191E4                            	@display:
000191E4 6000 8460                  		bra.w	RememberState
000191E4 6000 8460                  		bra.w	RememberState
000191E8                            		include	"_anim\SBZ Spinning Platforms.asm"
000191E8                            ; ---------------------------------------------------------------------------
000191E8                            ; Animation script - trapdoor (SBZ)
000191E8                            ; ---------------------------------------------------------------------------
000191E8 0000                       Ani_Spin:	dc.w @trapopen-Ani_Spin
000191EA 0000                       		dc.w @trapclose-Ani_Spin
000191EC 0000                       		dc.w @spin1-Ani_Spin
000191EE 0000                       		dc.w @spin2-Ani_Spin
000191F0 0300 0102 FE01             @trapopen:	dc.b 3,	0, 1, 2, afBack, 1
000191F6 0302 0100 FE01             @trapclose:	dc.b 3,	2, 1, 0, afBack, 1
000191FC 0100 0102 0304 4342 4140+  @spin1:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
00019210 0100 0102 0304 4342 4140+  @spin2:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
00019224                            		even
00019224                            		even
00019224                            Map_Trap:	include	"_maps\Trapdoor.asm"
00019224                            ; ---------------------------------------------------------------------------
00019224                            ; Sprite mappings - trapdoor (SBZ)
00019224                            ; ---------------------------------------------------------------------------
00019224                            Map_Trap_internal:
00019224 0000                       		dc.w @closed-Map_Trap_internal
00019226 0000                       		dc.w @half-Map_Trap_internal
00019228 0000                       		dc.w @open-Map_Trap_internal
0001922A 04                         @closed:	dc.b 4
0001922B F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00019230 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00019235 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
0001923A F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
0001923F 08                         @half:		dc.b 8
00019240 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00019245 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
0001924A 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
0001924F 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00019254 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00019259 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
0001925E 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00019263 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00019268 04                         @open:		dc.b 4
00019269 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
0001926E 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00019273 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00019278 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
0001927E 00                         		even
0001927E 00                         		even
0001927E                            Map_Spin:	include	"_maps\SBZ Spinning Platforms.asm"
0001927E                            ; ---------------------------------------------------------------------------
0001927E                            ; Sprite mappings - spinning platforms (SBZ)
0001927E                            ; ---------------------------------------------------------------------------
0001927E                            Map_Spin_internal:
0001927E 0000                       		dc.w @flat-Map_Spin_internal
00019280 0000                       		dc.w @spin1-Map_Spin_internal
00019282 0000                       		dc.w @spin2-Map_Spin_internal
00019284 0000                       		dc.w @spin3-Map_Spin_internal
00019286 0000                       		dc.w @spin4-Map_Spin_internal
00019288 02                         @flat:		dc.b 2
00019289 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0001928E F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00019293 02                         @spin1:		dc.b 2
00019294 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00019299 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
0001929E 02                         @spin2:		dc.b 2
0001929F F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
000192A4 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
000192A9 02                         @spin3:		dc.b 2
000192AA F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
000192AF 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
000192B4 02                         @spin4:		dc.b 2
000192B5 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
000192BA 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
000192C0 00                         		even
000192C0 00                         		even
000192C0                            		include	"_incObj\6A Saws and Pizza Cutters.asm"
000192C0                            ; ---------------------------------------------------------------------------
000192C0                            ; Object 6A - ground saws and pizza cutters (SBZ)
000192C0                            ; ---------------------------------------------------------------------------
000192C0                            
000192C0                            Saws:
000192C0 7000                       		moveq	#0,d0
000192C2 1028 0024                  		move.b	obRoutine(a0),d0
000192C6 323B 0000                  		move.w	Saw_Index(pc,d0.w),d1
000192CA 4EFB 1000                  		jmp	Saw_Index(pc,d1.w)
000192CE                            ; ===========================================================================
000192CE 0000                       Saw_Index:	dc.w Saw_Main-Saw_Index
000192D0 0000                       		dc.w Saw_Action-Saw_Index
000192D2                            
000192D2 =0000003A                  saw_origX:	equ $3A		; original x-axis position
000192D2 =00000038                  saw_origY:	equ $38		; original y-axis position
000192D2 =0000003D                  saw_here:	equ $3D		; flag set when the ground saw appears
000192D2                            ; ===========================================================================
000192D2                            
000192D2                            Saw_Main:	; Routine 0
000192D2 5428 0024                  		addq.b	#2,obRoutine(a0)
000192D6 217C 0000 0000 0004        		move.l	#Map_Saw,obMap(a0)
000192DE 317C 43AD 0002             		move.w	#$43AD,obGfx(a0)
000192E4 117C 0004 0001             		move.b	#4,obRender(a0)
000192EA 317C 0200 0018             		move.w	#$200,obPriority(a0)
000192F0 117C 0020 0014             		move.b	#$20,obActWid(a0)
000192F6 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
000192FC 3168 000C 0038             		move.w	obY(a0),saw_origY(a0)
00019302 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object a ground saw?
00019308 6400                       		bcc.s	Saw_Action	; if yes, branch
0001930A 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00019310                            
00019310                            Saw_Action:	; Routine 2
00019310 7000                       		moveq	#0,d0
00019312 1028 0028                  		move.b	obSubtype(a0),d0
00019316 0240 0007                  		andi.w	#7,d0
0001931A D040                       		add.w	d0,d0
0001931C 323B 0000                  		move.w	@index(pc,d0.w),d1
00019320 4EBB 1000                  		jsr	@index(pc,d1.w)
00019340 4EF9 0000 F57E             		jmp	(DisplaySprite).l
00019346                            
00019346                            	@delete:
00019346 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001934C                            ; ===========================================================================
0001934C 0000 0000 0000             @index:		dc.w @type00-@index, @type01-@index, @type02-@index ; pizza cutters
00019352 0000 0000                  		dc.w @type03-@index, @type04-@index ; ground saws
00019356                            ; ===========================================================================
00019356                            
00019356                            @type00:
00019356 4E75                       		rts			; doesn't move
00019358                            ; ===========================================================================
00019358                            
00019358                            @type01:
00019358 323C 0060                  		move.w	#$60,d1
0001935C 7000                       		moveq	#0,d0
0001935E 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00019362 0828 0000 0022             		btst	#0,obStatus(a0)
00019368 6700                       		beq.s	@noflip01
0001936A 4440                       		neg.w	d0
0001936C D041                       		add.w	d1,d0
0001936E                            
0001936E                            	@noflip01:
0001936E 3228 003A                  		move.w	saw_origX(a0),d1
00019372 9240                       		sub.w	d0,d1
00019374 3141 0008                  		move.w	d1,obX(a0)	; move saw sideways
00019378                            
00019378 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001937C 6A00                       		bpl.s	@sameframe01
0001937E 117C 0002 001E             		move.b	#2,obTimeFrame(a0) ; time between frame changes
00019384 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
0001938A                            
0001938A                            	@sameframe01:
0001938A 4A28 0001                  		tst.b	obRender(a0)
0001938E 6A00                       		bpl.s	@nosound01
00019390 3038 FE04                  		move.w	(v_framecount).w,d0
00019394 0240 000F                  		andi.w	#$F,d0
00019398 6600                       		bne.s	@nosound01
000193A4                            
000193A4                            	@nosound01:
000193A4 4E75                       		rts	
000193A6                            ; ===========================================================================
000193A6                            
000193A6                            @type02:
000193A6 323C 0030                  		move.w	#$30,d1
000193AA 7000                       		moveq	#0,d0
000193AC 1038 FE64                  		move.b	(v_oscillate+6).w,d0
000193B0 0828 0000 0022             		btst	#0,obStatus(a0)
000193B6 6700                       		beq.s	@noflip02
000193B8 4440                       		neg.w	d0
000193BA 0640 0080                  		addi.w	#$80,d0
000193BE                            
000193BE                            	@noflip02:
000193BE 3228 0038                  		move.w	saw_origY(a0),d1
000193C2 9240                       		sub.w	d0,d1
000193C4 3141 000C                  		move.w	d1,obY(a0)	; move saw vertically
000193C8 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000193CC 6A00                       		bpl.s	@sameframe02
000193CE 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
000193D4 0868 0000 001A             		bchg	#0,obFrame(a0)
000193DA                            
000193DA                            	@sameframe02:
000193DA 4A28 0001                  		tst.b	obRender(a0)
000193DE 6A00                       		bpl.s	@nosound02
000193E0 1038 FE64                  		move.b	(v_oscillate+6).w,d0
000193E4 0C00 0018                  		cmpi.b	#$18,d0
000193E8 6600                       		bne.s	@nosound02
000193F4                            
000193F4                            	@nosound02:
000193F4 4E75                       		rts	
000193F6                            ; ===========================================================================
000193F6                            
000193F6                            @type03:
000193F6 4A28 003D                  		tst.b	saw_here(a0)	; has the saw appeared already?
000193FA 6600                       		bne.s	@here03		; if yes, branch
000193FC                            
000193FC 3038 D008                  		move.w	(v_player+obX).w,d0
00019400 0440 00C0                  		subi.w	#$C0,d0
00019404 6500                       		bcs.s	@nosaw03x
00019406 9068 0008                  		sub.w	obX(a0),d0
0001940A 6500                       		bcs.s	@nosaw03x
0001940C 3038 D00C                  		move.w	(v_player+obY).w,d0
00019410 0440 0080                  		subi.w	#$80,d0
00019414 B068 000C                  		cmp.w	obY(a0),d0
00019418 6400                       		bcc.s	@nosaw03y
0001941A 0640 0100                  		addi.w	#$100,d0
0001941E B068 000C                  		cmp.w	obY(a0),d0
00019422 6500                       		bcs.s	@nosaw03y
00019424 117C 0001 003D             		move.b	#1,saw_here(a0)
0001942A 317C 0600 0010             		move.w	#$600,obVelX(a0) ; move object to the right
00019430 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00019436 117C 0002 001A             		move.b	#2,obFrame(a0)
00019446                            
00019446                            	@nosaw03x:
00019446 588F                       		addq.l	#4,sp
00019448                            
00019448                            	@nosaw03y:
00019448 4E75                       		rts	
0001944A                            ; ===========================================================================
0001944A                            
0001944A                            @here03:
0001944A 4EB9 0000 F56A             		jsr	(SpeedToPos).l
00019450 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00019456 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001945A 6A00                       		bpl.s	@sameframe03
0001945C 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00019462 0868 0000 001A             		bchg	#0,obFrame(a0)
00019468                            
00019468                            	@sameframe03:
00019468 4E75                       		rts	
0001946A                            ; ===========================================================================
0001946A                            
0001946A                            @type04:
0001946A 4A28 003D                  		tst.b	saw_here(a0)
0001946E 6600                       		bne.s	@here04
00019470 3038 D008                  		move.w	(v_player+obX).w,d0
00019474 0640 00E0                  		addi.w	#$E0,d0
00019478 9068 0008                  		sub.w	obX(a0),d0
0001947C 6400                       		bcc.s	@nosaw04x
0001947E 3038 D00C                  		move.w	(v_player+obY).w,d0
00019482 0440 0080                  		subi.w	#$80,d0
00019486 B068 000C                  		cmp.w	obY(a0),d0
0001948A 6400                       		bcc.s	@nosaw04y
0001948C 0640 0100                  		addi.w	#$100,d0
00019490 B068 000C                  		cmp.w	obY(a0),d0
00019494 6500                       		bcs.s	@nosaw04y
00019496 117C 0001 003D             		move.b	#1,saw_here(a0)
0001949C 317C FA00 0010             		move.w	#-$600,obVelX(a0) ; move object to the left
000194A2 117C 00A2 0020             		move.b	#$A2,obColType(a0)
000194A8 117C 0002 001A             		move.b	#2,obFrame(a0)
000194B8                            
000194B8                            	@nosaw04x:
000194B8 588F                       		addq.l	#4,sp
000194BA                            
000194BA                            	@nosaw04y:
000194BA 4E75                       		rts	
000194BC                            ; ===========================================================================
000194BC                            
000194BC                            @here04:
000194BC 4EB9 0000 F56A             		jsr	(SpeedToPos).l
000194C2 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
000194C8 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000194CC 6A00                       		bpl.s	@sameframe04
000194CE 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
000194D4 0868 0000 001A             		bchg	#0,obFrame(a0)
000194DA                            
000194DA                            	@sameframe04:
000194DA 4E75                       		rts	
000194DA 4E75                       		rts	
000194DC                            Map_Saw:	include	"_maps\Saws and Pizza Cutters.asm"
000194DC                            ; ---------------------------------------------------------------------------
000194DC                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000194DC                            ; ---------------------------------------------------------------------------
000194DC                            Map_Saw_internal:
000194DC 0000                       		dc.w @pizzacutter1-Map_Saw_internal
000194DE 0000                       		dc.w @pizzacutter2-Map_Saw_internal
000194E0 0000                       		dc.w @groundsaw1-Map_Saw_internal
000194E2 0000                       		dc.w @groundsaw2-Map_Saw_internal
000194E4 07                         @pizzacutter1:	dc.b 7
000194E5 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000194EA D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000194EF E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000194F4 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000194F9 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000194FE 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00019503 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00019508 07                         @pizzacutter2:	dc.b 7
00019509 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001950E D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00019513 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00019518 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
0001951D E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00019522 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00019527 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
0001952C 04                         @groundsaw1:	dc.b 4
0001952D E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00019532 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00019537 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0001953C 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00019541 04                         @groundsaw2:	dc.b 4
00019542 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00019547 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
0001954C 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00019551 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00019556                            		even
00019556                            		even
00019556                            		include	"_incObj\6B SBZ Stomper and Door.asm"
00019556                            ; ---------------------------------------------------------------------------
00019556                            ; Object 6B - stomper and sliding door (SBZ)
00019556                            ; ---------------------------------------------------------------------------
00019556                            
00019556                            ScrapStomp:
00019556 7000                       		moveq	#0,d0
00019558 1028 0024                  		move.b	obRoutine(a0),d0
0001955C 323B 0000                  		move.w	Sto_Index(pc,d0.w),d1
00019560 4EFB 1000                  		jmp	Sto_Index(pc,d1.w)
00019564                            ; ===========================================================================
00019564 0000                       Sto_Index:	dc.w Sto_Main-Sto_Index
00019566 0000                       		dc.w Sto_Action-Sto_Index
00019568                            
00019568 =00000016                  sto_height:	equ $16
00019568 =00000034                  sto_origX:	equ $34		; original x-axis position
00019568 =00000030                  sto_origY:	equ $30		; original y-axis position
00019568 =00000038                  sto_active:	equ $38		; flag set when a switch is pressed
00019568                            
00019568 400C 8001                  Sto_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
0001956C 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00019570 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00019574 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00019578 8040 0005                  		dc.b  $80, $40,	  0,   5
0001957C                            ; ===========================================================================
0001957C                            
0001957C                            Sto_Main:	; Routine 0
0001957C 5428 0024                  		addq.b	#2,obRoutine(a0)
00019580 7000                       		moveq	#0,d0
00019582 1028 0028                  		move.b	obSubtype(a0),d0
00019586 E448                       		lsr.w	#2,d0
00019588 0240 001C                  		andi.w	#$1C,d0
0001958C 47FB 00DA                  		lea	Sto_Var(pc,d0.w),a3
00019590 115B 0014                  		move.b	(a3)+,obActWid(a0)
00019594 115B 0016                  		move.b	(a3)+,sto_height(a0)
00019598 E448                       		lsr.w	#2,d0
0001959A 1140 001A                  		move.b	d0,obFrame(a0)
0001959E 217C 0000 0000 0004        		move.l	#Map_Stomp,obMap(a0)
000195A6 317C 22C0 0002             		move.w	#$22C0,obGfx(a0)
000195AC 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ/SBZ3
000195B2 6600                       		bne.s	@isSBZ12	; if not, branch
000195B4 08F8 0000 F7CB             		bset	#0,(v_obj6B).w
000195BA 6700                       		beq.s	@isSBZ3
000195BC                            
000195BC                            @chkdel:
000195BC 45F8 FC00                  		lea	(v_objstate).w,a2
000195C0 7000                       		moveq	#0,d0
000195C2 1028 0023                  		move.b	obRespawnNo(a0),d0
000195C6 6700                       		beq.s	@delete
000195C8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000195CE                            
000195CE                            	@delete:
000195CE 4EF9 0000 F5BE             		jmp	(DeleteObject).l
000195D4                            ; ===========================================================================
000195D4                            
000195D4                            @isSBZ3:
000195D4 317C 41F0 0002             		move.w	#$41F0,obGfx(a0)
000195DA 0C68 0A80 0008             		cmpi.w	#$A80,obX(a0)
000195E0 6600                       		bne.s	@isSBZ12
000195E2 45F8 FC00                  		lea	(v_objstate).w,a2
000195E6 7000                       		moveq	#0,d0
000195E8 1028 0023                  		move.b	obRespawnNo(a0),d0
000195EC 6700                       		beq.s	@isSBZ12
000195EE 0832 0000 0002             		btst	#0,2(a2,d0.w)
000195F4 6700                       		beq.s	@isSBZ12
000195F6 4238 F7CB                  		clr.b	(v_obj6B).w
000195FA 60C0                       		bra.s	@chkdel
000195FC                            ; ===========================================================================
000195FC                            
000195FC                            @isSBZ12:
000195FC 0028 0004 0001             		ori.b	#4,obRender(a0)
00019602 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019608 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
0001960E 3168 000C 0030             		move.w	obY(a0),sto_origY(a0)
00019614 7000                       		moveq	#0,d0
00019616 101B                       		move.b	(a3)+,d0
00019618 3140 003C                  		move.w	d0,$3C(a0)
0001961C 7000                       		moveq	#0,d0
0001961E 1028 0028                  		move.b	obSubtype(a0),d0
00019622 6A00                       		bpl.s	Sto_Action
00019624 0200 000F                  		andi.b	#$F,d0
00019628 1140 003E                  		move.b	d0,$3E(a0)
0001962C 1153 0028                  		move.b	(a3),obSubtype(a0)
00019630 0C13 0005                  		cmpi.b	#5,(a3)
00019634 6600                       		bne.s	@chkgone
00019636 08E8 0004 0001             		bset	#4,obRender(a0)
0001963C                            
0001963C                            	@chkgone:
0001963C 45F8 FC00                  		lea	(v_objstate).w,a2
00019640 7000                       		moveq	#0,d0
00019642 1028 0023                  		move.b	obRespawnNo(a0),d0
00019646 6700                       		beq.s	Sto_Action
00019648 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001964E                            
0001964E                            Sto_Action:	; Routine 2
0001964E 3F28 0008                  		move.w	obX(a0),-(sp)
00019652 7000                       		moveq	#0,d0
00019654 1028 0028                  		move.b	obSubtype(a0),d0
00019658 0240 000F                  		andi.w	#$F,d0
0001965C D040                       		add.w	d0,d0
0001965E 323B 0000                  		move.w	@index(pc,d0.w),d1
00019662 4EBB 1000                  		jsr	@index(pc,d1.w)
00019666 381F                       		move.w	(sp)+,d4
00019668 4A28 0001                  		tst.b	obRender(a0)
0001966C 6A00                       		bpl.s	@chkdel
0001966E 7200                       		moveq	#0,d1
00019670 1228 0014                  		move.b	obActWid(a0),d1
00019674 0641 000B                  		addi.w	#$B,d1
00019678 7400                       		moveq	#0,d2
0001967A 1428 0016                  		move.b	sto_height(a0),d2
0001967E 3602                       		move.w	d2,d3
00019680 5243                       		addq.w	#1,d3
00019682 6100 845A                  		bsr.w	SolidObject
00019686                            
00019686                            	@chkdel:
000196A2 4EF9 0000 F57E             		jmp	(DisplaySprite).l
000196A8                            
000196A8                            	@chkgone:
000196A8 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w
000196AE 6600                       		bne.s	@delete
000196B0 4238 F7CB                  		clr.b	(v_obj6B).w
000196B4 45F8 FC00                  		lea	(v_objstate).w,a2
000196B8 7000                       		moveq	#0,d0
000196BA 1028 0023                  		move.b	obRespawnNo(a0),d0
000196BE 6700                       		beq.s	@delete
000196C0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000196C6                            
000196C6                            	@delete:
000196C6 4EF9 0000 F5BE             		jmp	(DeleteObject).l
000196CC                            ; ===========================================================================
000196CC 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000196D0 0000 0000                  		dc.w @type02-@index, @type03-@index
000196D4 0000 0000                  		dc.w @type04-@index, @type05-@index
000196D8                            ; ===========================================================================
000196D8                            
000196D8                            @type00:
000196D8 4E75                       		rts
000196DA                            ; ===========================================================================
000196DA                            
000196DA                            @type01:
000196DA 4A28 0038                  		tst.b	sto_active(a0)
000196DE 6600                       		bne.s	@isactive01
000196E0 45F8 F7E0                  		lea	(f_switch).w,a2
000196E4 7000                       		moveq	#0,d0
000196E6 1028 003E                  		move.b	$3E(a0),d0
000196EA 0832 0000 0000             		btst	#0,(a2,d0.w)
000196F0 6700                       		beq.s	@loc_15DC2
000196F2 117C 0001 0038             		move.b	#1,sto_active(a0)
000196F8                            
000196F8                            	@isactive01:
000196F8 3028 003C                  		move.w	$3C(a0),d0
000196FC B068 003A                  		cmp.w	$3A(a0),d0
00019700 6700                       		beq.s	@loc_15DE0
00019702 5468 003A                  		addq.w	#2,$3A(a0)
00019706                            
00019706                            	@loc_15DC2:
00019706 3028 003A                  		move.w	$3A(a0),d0
0001970A 0828 0000 0022             		btst	#0,obStatus(a0)
00019710 6700                       		beq.s	@noflip01
00019712 4440                       		neg.w	d0
00019714 0640 0080                  		addi.w	#$80,d0
00019718                            
00019718                            	@noflip01:
00019718 3228 0034                  		move.w	sto_origX(a0),d1
0001971C 9240                       		sub.w	d0,d1
0001971E 3141 0008                  		move.w	d1,obX(a0)
00019722 4E75                       		rts	
00019724                            ; ===========================================================================
00019724                            
00019724                            @loc_15DE0:
00019724 5228 0028                  		addq.b	#1,obSubtype(a0)
00019728 317C 00B4 0036             		move.w	#$B4,$36(a0)
0001972E 4228 0038                  		clr.b	sto_active(a0)
00019732 45F8 FC00                  		lea	(v_objstate).w,a2
00019736 7000                       		moveq	#0,d0
00019738 1028 0023                  		move.b	obRespawnNo(a0),d0
0001973C 67C8                       		beq.s	@loc_15DC2
0001973E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019744 60C0                       		bra.s	@loc_15DC2
00019746                            ; ===========================================================================
00019746                            
00019746                            @type02:
00019746 4A28 0038                  		tst.b	sto_active(a0)
0001974A 6600                       		bne.s	@isactive02
0001974C 5368 0036                  		subq.w	#1,$36(a0)
00019750 6600                       		bne.s	@loc_15E1E
00019752 117C 0001 0038             		move.b	#1,sto_active(a0)
00019758                            
00019758                            	@isactive02:
00019758 4A68 003A                  		tst.w	$3A(a0)
0001975C 6700                       		beq.s	@loc_15E3C
0001975E 5568 003A                  		subq.w	#2,$3A(a0)
00019762                            
00019762                            	@loc_15E1E:
00019762 3028 003A                  		move.w	$3A(a0),d0
00019766 0828 0000 0022             		btst	#0,obStatus(a0)
0001976C 6700                       		beq.s	@noflip02
0001976E 4440                       		neg.w	d0
00019770 0640 0080                  		addi.w	#$80,d0
00019774                            
00019774                            	@noflip02:
00019774 3228 0034                  		move.w	sto_origX(a0),d1
00019778 9240                       		sub.w	d0,d1
0001977A 3141 0008                  		move.w	d1,obX(a0)
0001977E 4E75                       		rts	
00019780                            ; ===========================================================================
00019780                            
00019780                            @loc_15E3C:
00019780 5328 0028                  		subq.b	#1,obSubtype(a0)
00019784 4228 0038                  		clr.b	sto_active(a0)
00019788 45F8 FC00                  		lea	(v_objstate).w,a2
0001978C 7000                       		moveq	#0,d0
0001978E 1028 0023                  		move.b	obRespawnNo(a0),d0
00019792 67CE                       		beq.s	@loc_15E1E
00019794 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001979A 60C6                       		bra.s	@loc_15E1E
0001979C                            ; ===========================================================================
0001979C                            
0001979C                            @type03:
0001979C 4A28 0038                  		tst.b	sto_active(a0)
000197A0 6600                       		bne.s	@isactive03
000197A2 4A68 003A                  		tst.w	$3A(a0)
000197A6 6700                       		beq.s	@loc_15E6A
000197A8 5368 003A                  		subq.w	#1,$3A(a0)
000197AC 6000                       		bra.s	@loc_15E8E
000197AE                            ; ===========================================================================
000197AE                            
000197AE                            @loc_15E6A:
000197AE 5368 0036                  		subq.w	#1,$36(a0)
000197B2 6A00                       		bpl.s	@loc_15E8E
000197B4 317C 003C 0036             		move.w	#$3C,$36(a0)
000197BA 117C 0001 0038             		move.b	#1,sto_active(a0)
000197C0                            
000197C0                            @isactive03:
000197C0 5068 003A                  		addq.w	#8,$3A(a0)
000197C4 3028 003A                  		move.w	$3A(a0),d0
000197C8 B068 003C                  		cmp.w	$3C(a0),d0
000197CC 6600                       		bne.s	@loc_15E8E
000197CE 4228 0038                  		clr.b	sto_active(a0)
000197D2                            
000197D2                            @loc_15E8E:
000197D2 3028 003A                  		move.w	$3A(a0),d0
000197D6 0828 0000 0022             		btst	#0,obStatus(a0)
000197DC 6700                       		beq.s	@noflip03
000197DE 4440                       		neg.w	d0
000197E0 0640 0038                  		addi.w	#$38,d0
000197E4                            
000197E4                            	@noflip03:
000197E4 3228 0030                  		move.w	sto_origY(a0),d1
000197E8 D240                       		add.w	d0,d1
000197EA 3141 000C                  		move.w	d1,obY(a0)
000197EE 4E75                       		rts	
000197F0                            ; ===========================================================================
000197F0                            
000197F0                            @type04:
000197F0 4A28 0038                  		tst.b	sto_active(a0)
000197F4 6600                       		bne.s	@isactive04
000197F6 4A68 003A                  		tst.w	$3A(a0)
000197FA 6700                       		beq.s	@loc_15EBE
000197FC 5168 003A                  		subq.w	#8,$3A(a0)
00019800 6000                       		bra.s	@loc_15EF0
00019802                            ; ===========================================================================
00019802                            
00019802                            @loc_15EBE:
00019802 5368 0036                  		subq.w	#1,$36(a0)
00019806 6A00                       		bpl.s	@loc_15EF0
00019808 317C 003C 0036             		move.w	#$3C,$36(a0)
0001980E 117C 0001 0038             		move.b	#1,sto_active(a0)
00019814                            
00019814                            @isactive04:
00019814 3028 003A                  		move.w	$3A(a0),d0
00019818 B068 003C                  		cmp.w	$3C(a0),d0
0001981C 6700                       		beq.s	@loc_15EE0
0001981E 5068 003A                  		addq.w	#8,$3A(a0)
00019822 6000                       		bra.s	@loc_15EF0
00019824                            ; ===========================================================================
00019824                            
00019824                            @loc_15EE0:
00019824 5368 0036                  		subq.w	#1,$36(a0)
00019828 6A00                       		bpl.s	@loc_15EF0
0001982A 317C 003C 0036             		move.w	#$3C,$36(a0)
00019830 4228 0038                  		clr.b	sto_active(a0)
00019834                            
00019834                            @loc_15EF0:
00019834 3028 003A                  		move.w	$3A(a0),d0
00019838 0828 0000 0022             		btst	#0,obStatus(a0)
0001983E 6700                       		beq.s	@noflip04
00019840 4440                       		neg.w	d0
00019842 0640 0038                  		addi.w	#$38,d0
00019846                            
00019846                            	@noflip04:
00019846 3228 0030                  		move.w	sto_origY(a0),d1
0001984A D240                       		add.w	d0,d1
0001984C 3141 000C                  		move.w	d1,obY(a0)
00019850 4E75                       		rts	
00019852                            ; ===========================================================================
00019852                            
00019852                            @type05:
00019852 4A28 0038                  		tst.b	sto_active(a0)
00019856 6600                       		bne.s	@loc_15F3E
00019858 45F8 F7E0                  		lea	(f_switch).w,a2
0001985C 7000                       		moveq	#0,d0
0001985E 1028 003E                  		move.b	$3E(a0),d0
00019862 0832 0000 0000             		btst	#0,(a2,d0.w)
00019868 6700                       		beq.s	@locret_15F5C
0001986A 117C 0001 0038             		move.b	#1,sto_active(a0)
00019870 45F8 FC00                  		lea	(v_objstate).w,a2
00019874 7000                       		moveq	#0,d0
00019876 1028 0023                  		move.b	obRespawnNo(a0),d0
0001987A 6700                       		beq.s	@loc_15F3E
0001987C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019882                            
00019882                            @loc_15F3E:
00019882 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
0001988A 06A8 0000 8000 000C        		addi.l	#$8000,obY(a0)
00019892 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00019898 0C68 0980 0008             		cmpi.w	#$980,obX(a0)
0001989E 6700                       		beq.s	@loc_15F5E
000198A0                            
000198A0                            @locret_15F5C:
000198A0 4E75                       		rts	
000198A2                            ; ===========================================================================
000198A2                            
000198A2                            @loc_15F5E:
000198A2 4228 0028                  		clr.b	obSubtype(a0)
000198A6 4228 0038                  		clr.b	sto_active(a0)
000198AA 4E75                       		rts	
000198AA 4E75                       		rts	
000198AC                            Map_Stomp:	include	"_maps\SBZ Stomper and Door.asm"
000198AC                            ; ---------------------------------------------------------------------------
000198AC                            ; Sprite mappings - stomper and	platforms (SBZ)
000198AC                            ; ---------------------------------------------------------------------------
000198AC                            Map_Stomp_internal:
000198AC 0000                       		dc.w @door-Map_Stomp_internal
000198AE 0000                       		dc.w @stomper-Map_Stomp_internal
000198B0 0000                       		dc.w @stomper-Map_Stomp_internal
000198B2 0000                       		dc.w @stomper-Map_Stomp_internal
000198B4 0000                       		dc.w @bigdoor-Map_Stomp_internal
000198B6 04                         @door:		dc.b 4
000198B7 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0 ; horizontal sliding door
000198BC F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
000198C1 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
000198C6 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
000198CB 08                         @stomper:	dc.b 8
000198CC E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4 ; stomper block with yellow/black stripes
000198D1 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
000198D6 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
000198DB E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
000198E0 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
000198E5 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
000198EA 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
000198EF 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
000198F4 0E                         @bigdoor:	dc.b $E
000198F5 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80	; huge diagonal sliding door from SBZ3
000198FA C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
000198FF C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00019904 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00019909 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
0001990E C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00019913 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00019918 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
0001991D E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00019922 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00019927 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
0001992C 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00019931 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00019936 200F 0058 80               		dc.b $20, $F, 0, $58, $80
0001993C 00                         		even
0001993C 00                         		even
0001993C                            		include	"_incObj\6C SBZ Vanishing Platforms.asm"
0001993C                            ; ---------------------------------------------------------------------------
0001993C                            ; Object 6C - vanishing	platforms (SBZ)
0001993C                            ; ---------------------------------------------------------------------------
0001993C                            
0001993C                            VanishPlatform:
0001993C 7000                       		moveq	#0,d0
0001993E 1028 0024                  		move.b	obRoutine(a0),d0
00019942 323B 0000                  		move.w	VanP_Index(pc,d0.w),d1
00019946 4EFB 1000                  		jmp	VanP_Index(pc,d1.w)
0001994A                            ; ===========================================================================
0001994A 0000                       VanP_Index:	dc.w VanP_Main-VanP_Index
0001994C 0000                       		dc.w VanP_Vanish-VanP_Index
0001994E 0000                       		dc.w VanP_Appear-VanP_Index
00019950 0000                       		dc.w loc_16068-VanP_Index
00019952                            
00019952 =00000030                  vanp_timer:	equ $30		; counter for time until event
00019952 =00000032                  vanp_timelen:	equ $32		; time between events (general)
00019952                            ; ===========================================================================
00019952                            
00019952                            VanP_Main:	; Routine 0
00019952 5C28 0024                  		addq.b	#6,obRoutine(a0)
00019956 217C 0000 0000 0004        		move.l	#Map_VanP,obMap(a0)
0001995E 317C 445D 0002             		move.w	#$445D,obGfx(a0)
00019964 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; is level Spring Yard Zone?
0001996A 6700                       		beq.s	VanP_IsSYZ	; if yes, branch
0001996C 317C 44C3 0002             		move.w	#$44C3,obGfx(a0)	; SBZ
00019972                            
00019972                            	VanP_IsSYZ:	
00019972 0028 0004 0001             		ori.b	#4,obRender(a0)
00019978 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001997E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019984 7000                       		moveq	#0,d0
00019986 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001998A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001998E 5240                       		addq.w	#1,d0		; add 1
00019990 EF48                       		lsl.w	#7,d0		; multiply by $80
00019992 3200                       		move.w	d0,d1
00019994 5340                       		subq.w	#1,d0
00019996 3140 0030                  		move.w	d0,vanp_timer(a0)
0001999A 3140 0032                  		move.w	d0,vanp_timelen(a0)
0001999E 7000                       		moveq	#0,d0
000199A0 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000199A4 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
000199A8 0641 0080                  		addi.w	#$80,d1
000199AC C0C1                       		mulu.w	d1,d0
000199AE E088                       		lsr.l	#8,d0
000199B0 3140 0036                  		move.w	d0,$36(a0)
000199B4 5341                       		subq.w	#1,d1
000199B6 3141 0038                  		move.w	d1,$38(a0)
000199BA                            
000199BA                            loc_16068:	; Routine 6
000199BA 3038 FE04                  		move.w	(v_framecount).w,d0
000199BE 9068 0036                  		sub.w	$36(a0),d0
000199C2 C068 0038                  		and.w	$38(a0),d0
000199C6 6600                       		bne.s	@animate
000199C8 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto VanP_Vanish next
000199CC 6000                       		bra.s	VanP_Vanish
000199CE                            ; ===========================================================================
000199CE                            
000199CE                            @animate:
000199CE 43F9 0000 0000             		lea	(Ani_Van).l,a1
000199D4 4EB9 0000 C634             		jsr	(AnimateSprite).l
000199DA 4EF9 0001 1646             		jmp	RememberState
000199E0                            ; ===========================================================================
000199E0                            
000199E0                            VanP_Vanish:	; Routine 2
000199E0                            VanP_Appear:	; Routine 4
000199E0 5368 0030                  		subq.w	#1,vanp_timer(a0)
000199E4 6A00                       		bpl.s	@wait
000199E6 317C 007F 0030             		move.w	#127,vanp_timer(a0)
000199EC 4A28 001C                  		tst.b	obAnim(a0)	; is platform vanishing?
000199F0 6700                       		beq.s	@isvanishing	; if yes, branch
000199F2 3168 0032 0030             		move.w	vanp_timelen(a0),vanp_timer(a0)
000199F8                            
000199F8                            	@isvanishing:
000199F8 0868 0000 001C             		bchg	#0,obAnim(a0)
000199FE                            
000199FE                            	@wait:
000199FE 43F9 0000 0000             		lea	(Ani_Van).l,a1
00019A04 4EB9 0000 C634             		jsr	(AnimateSprite).l
00019A0A 0828 0001 001A             		btst	#1,obFrame(a0)	; has platform vanished?
00019A10 6600                       		bne.s	@notsolid	; if yes, branch
00019A12 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
00019A18 6600                       		bne.s	@loc_160D6
00019A1A 7200                       		moveq	#0,d1
00019A1C 1228 0014                  		move.b	obActWid(a0),d1
00019A20 4EB9 0000 8C24             		jsr	(PlatformObject).l
00019A26 4EF9 0001 1646             		jmp	RememberState
00019A2C                            ; ===========================================================================
00019A2C                            
00019A2C                            @loc_160D6:
00019A2C 7200                       		moveq	#0,d1
00019A2E 1228 0014                  		move.b	obActWid(a0),d1
00019A32 4EB9 0000 8D98             		jsr	(ExitPlatform).l
00019A38 3428 0008                  		move.w	obX(a0),d2
00019A3C 4EB9 0000 9302             		jsr	(MvSonicOnPtfm2).l
00019A42 4EF9 0001 1646             		jmp	RememberState
00019A48                            ; ===========================================================================
00019A48                            
00019A48                            @notsolid:
00019A48 0828 0003 0022             		btst	#3,obStatus(a0)
00019A4E 6700                       		beq.s	@display
00019A50 43F8 D000                  		lea	(v_player).w,a1
00019A54 08A9 0003 0022             		bclr	#3,obStatus(a1)
00019A5A 08A8 0003 0022             		bclr	#3,obStatus(a0)
00019A60 117C 0002 0024             		move.b	#2,obRoutine(a0)
00019A66 4228 0025                  		clr.b	obSolid(a0)
00019A6A                            
00019A6A                            	@display:
00019A6A 4EF9 0001 1646             		jmp	RememberState
00019A6A 4EF9 0001 1646             		jmp	RememberState
00019A70                            		include	"_anim\SBZ Vanishing Platforms.asm"
00019A70                            ; ---------------------------------------------------------------------------
00019A70                            ; Animation script - vanishing platforms (SBZ)
00019A70                            ; ---------------------------------------------------------------------------
00019A70 0000                       Ani_Van:	dc.w @vanish-Ani_Van
00019A72 0000                       		dc.w @appear-Ani_Van
00019A74 0300 0102 0304 0506 FE01   @vanish:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, afBack, 1
00019A7E                            		even
00019A7E 0306 0504 0302 0100 FE01   @appear:	dc.b 3,	6, 5, 4, 3, 2, 1, 0, afBack, 1
00019A88                            		even
00019A88                            		even
00019A88                            Map_VanP:	include	"_maps\SBZ Vanishing Platforms.asm"
00019A88                            ; --------------------------------------------------------------------------------
00019A88                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00019A88                            ; --------------------------------------------------------------------------------
00019A88                            
00019A88                            SME_Mrcg1:	
00019A88 0000 0000                  		dc.w SME_Mrcg1_E-SME_Mrcg1, SME_Mrcg1_14-SME_Mrcg1	
00019A8C 0000 0000                  		dc.w SME_Mrcg1_29-SME_Mrcg1, SME_Mrcg1_2F-SME_Mrcg1	
00019A90 0000 0000                  		dc.w SME_Mrcg1_3A-SME_Mrcg1, SME_Mrcg1_40-SME_Mrcg1	
00019A94 0000                       		dc.w SME_Mrcg1_46-SME_Mrcg1	
00019A96 01                         SME_Mrcg1_E:	dc.b 1	
00019A97 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00019A9C 04                         SME_Mrcg1_14:	dc.b 4	
00019A9D F803 0010 F8               		dc.b $F8, 3, 0, $10, $F8	
00019AA2 F803 0010 00               		dc.b $F8, 3, 0, $10, 0	
00019AA7 F803 0010 F0               		dc.b $F8, 3, 0, $10, $F0	
00019AAC F803 0010 08               		dc.b $F8, 3, 0, $10, 8	
00019AB1 01                         SME_Mrcg1_29:	dc.b 1	
00019AB2 F807 0000 F8               		dc.b $F8, 7, 0, 0, $F8	
00019AB7 02                         SME_Mrcg1_2F:	dc.b 2	
00019AB8 F803 0010 F8               		dc.b $F8, 3, 0, $10, $F8	
00019ABD F803 0010 00               		dc.b $F8, 3, 0, $10, 0	
00019AC2 01                         SME_Mrcg1_3A:	dc.b 1	
00019AC3 F803 0000 FD               		dc.b $F8, 3, 0, 0, $FD	
00019AC8 01                         SME_Mrcg1_40:	dc.b 1	
00019AC9 F803 0010 FD               		dc.b $F8, 3, 0, $10, $FD	
00019ACE 00                         SME_Mrcg1_46:	dc.b 0	
00019AD0 00                         		even
00019AD0 00                         		even
00019AD0                            		include	"_incObj\6E Electrocuter.asm"
00019AD0                            ; ---------------------------------------------------------------------------
00019AD0                            ; Object 6E - electrocution orbs (SBZ)
00019AD0                            ; ---------------------------------------------------------------------------
00019AD0                            
00019AD0                            Electro:
00019AD0 7000                       		moveq	#0,d0
00019AD2 1028 0024                  		move.b	obRoutine(a0),d0
00019AD6 323B 0000                  		move.w	Elec_Index(pc,d0.w),d1
00019ADA 4EFB 1000                  		jmp	Elec_Index(pc,d1.w)
00019ADE                            ; ===========================================================================
00019ADE 0000                       Elec_Index:	dc.w Elec_Main-Elec_Index
00019AE0 0000                       		dc.w Elec_Shock-Elec_Index
00019AE2                            
00019AE2 =00000034                  elec_freq:	equ $34		; frequency
00019AE2                            ; ===========================================================================
00019AE2                            
00019AE2                            Elec_Main:	; Routine 0
00019AE2 5428 0024                  		addq.b	#2,obRoutine(a0)
00019AE6 217C 0000 0000 0004        		move.l	#Map_Elec,obMap(a0)
00019AEE 317C 047E 0002             		move.w	#$47E,obGfx(a0)
00019AF4 0028 0004 0001             		ori.b	#4,obRender(a0)
00019AFA 117C 0028 0014             		move.b	#$28,obActWid(a0)
00019B00 7000                       		moveq	#0,d0
00019B02 1028 0028                  		move.b	obSubtype(a0),d0 ; read object type
00019B06 E948                       		lsl.w	#4,d0		; multiply by $10
00019B08 5340                       		subq.w	#1,d0
00019B0A 3140 0034                  		move.w	d0,elec_freq(a0)
00019B0E                            
00019B0E                            Elec_Shock:	; Routine 2
00019B0E 3038 FE04                  		move.w	(v_framecount).w,d0
00019B12 C068 0034                  		and.w	elec_freq(a0),d0 ; is it time to zap?
00019B16 6600                       		bne.s	@animate	; if not, branch
00019B18                            
00019B18 117C 0001 001C             		move.b	#1,obAnim(a0)	; run "zap" animation
00019B1E 4A28 0001                  		tst.b	obRender(a0)
00019B22 6A00                       		bpl.s	@animate
00019B2E                            
00019B2E                            	@animate:
00019B2E 43F9 0000 0000             		lea	(Ani_Elec).l,a1
00019B34 4EB9 0000 C634             		jsr	(AnimateSprite).l
00019B3A 117C 0000 0020             		move.b	#0,obColType(a0)
00019B40 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; is 4th frame displayed?
00019B46 6600                       		bne.s	@display	; if not, branch
00019B48 117C 00A4 0020             		move.b	#$A4,obColType(a0) ; if yes, make object hurt Sonic
00019B4E                            
00019B4E                            	@display:
00019B4E 4EF9 0001 1646             		jmp	RememberState
00019B4E 4EF9 0001 1646             		jmp	RememberState
00019B54                            		include	"_anim\Electrocuter.asm"
00019B54                            ; ---------------------------------------------------------------------------
00019B54                            ; Animation script - electrocution orbs (SBZ)
00019B54                            ; ---------------------------------------------------------------------------
00019B54 0000                       Ani_Elec:	dc.w byte_161CC-Ani_Elec
00019B56 0000                       		dc.w byte_161D0-Ani_Elec
00019B58 0700 FF                    byte_161CC:	dc.b 7,	0, afEnd
00019B5C 00                         		even
00019B5C 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, afChange, 0
00019B6C                            		even
00019B6C                            		even
00019B6C                            Map_Elec:	include	"_maps\Electrocuter.asm"
00019B6C                            ; --------------------------------------------------------------------------------
00019B6C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00019B6C                            ; --------------------------------------------------------------------------------
00019B6C                            
00019B6C                            SME_KiF9w:	
00019B6C 0000 0000                  		dc.w SME_KiF9w_C-SME_KiF9w, SME_KiF9w_17-SME_KiF9w	
00019B70 0000 0000                  		dc.w SME_KiF9w_27-SME_KiF9w, SME_KiF9w_41-SME_KiF9w	
00019B74 0000 0000                  		dc.w SME_KiF9w_56-SME_KiF9w, SME_KiF9w_75-SME_KiF9w	
00019B78 02                         SME_KiF9w_C:	dc.b 2	
00019B79 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019B7E 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019B83 03                         SME_KiF9w_17:	dc.b 3	
00019B84 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019B89 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
00019B8E 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019B93 05                         SME_KiF9w_27:	dc.b 5	
00019B94 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019B99 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
00019B9E 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019BA3 F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
00019BA8 F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
00019BAD 04                         SME_KiF9w_41:	dc.b 4	
00019BAE F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019BB3 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019BB8 F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
00019BBD F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
00019BC2 06                         SME_KiF9w_56:	dc.b 6	
00019BC3 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019BC8 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019BCD F60D 300C 08               		dc.b $F6, $D, $30, $C, 8	
00019BD2 F60D 380C DC               		dc.b $F6, $D, $38, $C, $DC	
00019BD7 F60D 200C 24               		dc.b $F6, $D, $20, $C, $24	
00019BDC F60D 280C C0               		dc.b $F6, $D, $28, $C, $C0	
00019BE1 04                         SME_KiF9w_75:	dc.b 4	
00019BE2 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019BE7 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019BEC F60D 300C 24               		dc.b $F6, $D, $30, $C, $24	
00019BF1 F60D 380C C0               		dc.b $F6, $D, $38, $C, $C0	
00019BF6                            		even
00019BF6                            		even
00019BF6                            		include	"_incObj\6F SBZ Spin Platform Conveyor.asm"
00019BF6                            ; ---------------------------------------------------------------------------
00019BF6                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00019BF6                            ; ---------------------------------------------------------------------------
00019BF6                            
00019BF6                            SpinConvey:
00019BF6 7000                       		moveq	#0,d0
00019BF8 1028 0024                  		move.b	obRoutine(a0),d0
00019BFC 323B 0000                  		move.w	SpinC_Index(pc,d0.w),d1
00019C00 4EBB 1000                  		jsr	SpinC_Index(pc,d1.w)
00019C20                            
00019C20                            SpinC_Display:
00019C20 4EF9 0000 F57E             		jmp	(DisplaySprite).l
00019C26                            ; ===========================================================================
00019C26                            
00019C26                            loc_1629A:
00019C26 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; check if act is 3
00019C2C 6600                       		bne.s	SpinC_Act1or2	; if not, branch
00019C2E 0C40 FF80                  		cmpi.w	#-$80,d0
00019C32 64EC                       		bcc.s	SpinC_Display
00019C34                            
00019C34                            SpinC_Act1or2:
00019C34 1028 002F                  		move.b	$2F(a0),d0
00019C38 6A00                       		bpl.s	SpinC_Delete
00019C3A 0240 007F                  		andi.w	#$7F,d0
00019C3E 45F8 F7C1                  		lea	(v_obj63).w,a2
00019C42 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00019C48                            
00019C48                            SpinC_Delete:
00019C48 4EF9 0000 F5BE             		jmp	(DeleteObject).l
00019C4E                            ; ===========================================================================
00019C4E 0000                       SpinC_Index:	dc.w SpinC_Main-SpinC_Index
00019C50 0000                       		dc.w loc_163D8-SpinC_Index
00019C52                            ; ===========================================================================
00019C52                            
00019C52                            SpinC_Main:	; Routine 0
00019C52 1028 0028                  		move.b	obSubtype(a0),d0
00019C56 6B00 0000                  		bmi.w	loc_16380
00019C5A 5428 0024                  		addq.b	#2,obRoutine(a0)
00019C5E 217C 0001 927E 0004        		move.l	#Map_Spin,obMap(a0)
00019C66 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
00019C6C 117C 0010 0014             		move.b	#$10,obActWid(a0)
00019C72 0028 0004 0001             		ori.b	#4,obRender(a0)
00019C78 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019C7E 7000                       		moveq	#0,d0
00019C80 1028 0028                  		move.b	obSubtype(a0),d0
00019C84 3200                       		move.w	d0,d1
00019C86 E648                       		lsr.w	#3,d0
00019C88 0240 001E                  		andi.w	#$1E,d0
00019C8C 45FA 0000                  		lea	off_164A6(pc),a2
00019C90 D4F2 0000                  		adda.w	(a2,d0.w),a2
00019C94 315A 0038                  		move.w	(a2)+,$38(a0)
00019C98 315A 0030                  		move.w	(a2)+,$30(a0)
00019C9C 214A 003C                  		move.l	a2,$3C(a0)
00019CA0 0241 000F                  		andi.w	#$F,d1
00019CA4 E549                       		lsl.w	#2,d1
00019CA6 1141 0038                  		move.b	d1,$38(a0)
00019CAA 117C 0004 003A             		move.b	#4,$3A(a0)
00019CB0 4A38 F7C0                  		tst.b	(f_conveyrev).w
00019CB4 6700                       		beq.s	loc_16356
00019CB6 117C 0001 003B             		move.b	#1,$3B(a0)
00019CBC 4428 003A                  		neg.b	$3A(a0)
00019CC0 7200                       		moveq	#0,d1
00019CC2 1228 0038                  		move.b	$38(a0),d1
00019CC6 D228 003A                  		add.b	$3A(a0),d1
00019CCA B228 0039                  		cmp.b	$39(a0),d1
00019CCE 6500                       		bcs.s	loc_16352
00019CD0 1001                       		move.b	d1,d0
00019CD2 7200                       		moveq	#0,d1
00019CD4 4A00                       		tst.b	d0
00019CD6 6A00                       		bpl.s	loc_16352
00019CD8 1228 0039                  		move.b	$39(a0),d1
00019CDC 5901                       		subq.b	#4,d1
00019CDE                            
00019CDE                            loc_16352:
00019CDE 1141 0038                  		move.b	d1,$38(a0)
00019CE2                            
00019CE2                            loc_16356:
00019CE2 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00019CE8 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00019CEE 4A41                       		tst.w	d1
00019CF0 6600                       		bne.s	loc_1636C
00019CF2 117C 0001 001C             		move.b	#1,obAnim(a0)
00019CF8                            
00019CF8                            loc_1636C:
00019CF8 0C41 0008                  		cmpi.w	#8,d1
00019CFC 6600                       		bne.s	loc_16378
00019CFE 117C 0000 001C             		move.b	#0,obAnim(a0)
00019D04                            
00019D04                            loc_16378:
00019D04 6100 A9C6                  		bsr.w	LCon_ChangeDir
00019D08 6000 0000                  		bra.w	loc_163D8
00019D0C                            ; ===========================================================================
00019D0C                            
00019D0C                            loc_16380:
00019D0C 1140 002F                  		move.b	d0,$2F(a0)
00019D10 0240 007F                  		andi.w	#$7F,d0
00019D14 45F8 F7C1                  		lea	(v_obj63).w,a2
00019D18 08F2 0000 0000             		bset	#0,(a2,d0.w)
00019D1E 6700                       		beq.s	loc_1639A
00019D20 4EF9 0000 F5BE             		jmp	(DeleteObject).l
00019D26                            ; ===========================================================================
00019D26                            
00019D26                            loc_1639A:
00019D26 D040                       		add.w	d0,d0
00019D28 0240 001E                  		andi.w	#$1E,d0
00019D2C 0640 0000                  		addi.w	#ObjPosSBZPlatform_Index-ObjPos_Index,d0
00019D30 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00019D36 D4F2 0000                  		adda.w	(a2,d0.w),a2
00019D3A 321A                       		move.w	(a2)+,d1
00019D3C 2248                       		movea.l	a0,a1
00019D3E 6000                       		bra.s	SpinC_LoadPform
00019D40                            ; ===========================================================================
00019D40                            
00019D40                            SpinC_Loop:
00019D40 4EB9 0000 FB18             		jsr	(FindFreeObj).l
00019D46 6600                       		bne.s	loc_163D0
00019D48                            
00019D48                            SpinC_LoadPform:
00019D48 12BC 006F                  		move.b	#id_SpinConvey,0(a1)
00019D4C 335A 0008                  		move.w	(a2)+,obX(a1)
00019D50 335A 000C                  		move.w	(a2)+,obY(a1)
00019D54 301A                       		move.w	(a2)+,d0
00019D56 1340 0028                  		move.b	d0,obSubtype(a1)
00019D5A                            
00019D5A                            loc_163D0:
00019D5A 51C9 FFE4                  		dbf	d1,SpinC_Loop
00019D5E                            
00019D5E 588F                       		addq.l	#4,sp
00019D60 4E75                       		rts	
00019D62                            ; ===========================================================================
00019D62                            
00019D62                            loc_163D8:	; Routine 2
00019D62 43F9 0000 0000             		lea	(Ani_SpinConvey).l,a1
00019D68 4EB9 0000 C634             		jsr	(AnimateSprite).l
00019D6E 4A28 001A                  		tst.b	obFrame(a0)
00019D72 6600                       		bne.s	loc_16404
00019D74 3F28 0008                  		move.w	obX(a0),-(sp)
00019D78 6100 0000                  		bsr.w	loc_16424
00019D7C 323C 001B                  		move.w	#$1B,d1
00019D80 343C 0007                  		move.w	#7,d2
00019D84 3602                       		move.w	d2,d3
00019D86 5243                       		addq.w	#1,d3
00019D88 381F                       		move.w	(sp)+,d4
00019D8A 4EF9 0001 1ADE             		jmp	SolidObject
00019D90                            ; ===========================================================================
00019D90                            
00019D90                            loc_16404:
00019D90 0828 0003 0022             		btst	#3,obStatus(a0)
00019D96 6700                       		beq.s	loc_16420
00019D98 43F8 D000                  		lea	(v_objspace).w,a1
00019D9C 08A9 0003 0022             		bclr	#3,obStatus(a1)
00019DA2 08A8 0003 0022             		bclr	#3,obStatus(a0)
00019DA8 4228 0025                  		clr.b	obSolid(a0)
00019DAC                            
00019DAC                            loc_16420:
00019DAC 6000 0000                  		bra.w	loc_16424
00019DB0                            
00019DB0                            loc_16424:
00019DB0 3028 0008                  		move.w	obX(a0),d0
00019DB4 B068 0034                  		cmp.w	$34(a0),d0
00019DB8 6600                       		bne.s	loc_16484
00019DBA 3028 000C                  		move.w	obY(a0),d0
00019DBE B068 0036                  		cmp.w	$36(a0),d0
00019DC2 6600                       		bne.s	loc_16484
00019DC4 7200                       		moveq	#0,d1
00019DC6 1228 0038                  		move.b	$38(a0),d1
00019DCA D228 003A                  		add.b	$3A(a0),d1
00019DCE B228 0039                  		cmp.b	$39(a0),d1
00019DD2 6500                       		bcs.s	loc_16456
00019DD4 1001                       		move.b	d1,d0
00019DD6 7200                       		moveq	#0,d1
00019DD8 4A00                       		tst.b	d0
00019DDA 6A00                       		bpl.s	loc_16456
00019DDC 1228 0039                  		move.b	$39(a0),d1
00019DE0 5901                       		subq.b	#4,d1
00019DE2                            
00019DE2                            loc_16456:
00019DE2 1141 0038                  		move.b	d1,$38(a0)
00019DE6 2268 003C                  		movea.l	$3C(a0),a1
00019DEA 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00019DF0 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00019DF6 4A41                       		tst.w	d1
00019DF8 6600                       		bne.s	loc_16474
00019DFA 117C 0001 001C             		move.b	#1,obAnim(a0)
00019E00                            
00019E00                            loc_16474:
00019E00 0C41 0008                  		cmpi.w	#8,d1
00019E04 6600                       		bne.s	loc_16480
00019E06 117C 0000 001C             		move.b	#0,obAnim(a0)
00019E0C                            
00019E0C                            loc_16480:
00019E0C 6100 A8BE                  		bsr.w	LCon_ChangeDir
00019E10                            
00019E10                            loc_16484:
00019E10 4EF9 0000 F56A             		jmp	(SpeedToPos).l
00019E10 4EF9 0000 F56A             		jmp	(SpeedToPos).l
00019E16                            		include	"_anim\SBZ Spin Platform Conveyor.asm"
00019E16                            ; ---------------------------------------------------------------------------
00019E16                            ; Animation script - platform on conveyor belt (SBZ)
00019E16                            ; ---------------------------------------------------------------------------
00019E16 0000                       Ani_SpinConvey:	dc.w @spin-Ani_SpinConvey
00019E18 0000                       		dc.w @still-Ani_SpinConvey
00019E1A 0000 0102 0304 4342 4140+  @spin:		dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00019E27 6423 2221 00FF             		dc.b $64, $23, $22, $21, 0, afEnd
00019E2E 00                         		even
00019E2E 0F00 FF                    @still:		dc.b $F, 0, afEnd
00019E32 00                         		even
00019E32 00                         		even
00019E32                            
00019E32 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00019E38 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00019E3E 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00019E52 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00019E66 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00019E7A 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00019E8E 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00019EA2 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00019EB6                            ; ===========================================================================
00019EB6                            
00019EB6                            		include	"_incObj\70 Girder Block.asm"
00019EB6                            ; ---------------------------------------------------------------------------
00019EB6                            ; Object 70 - large girder block (SBZ)
00019EB6                            ; ---------------------------------------------------------------------------
00019EB6                            
00019EB6                            Girder:
00019EB6 7000                       		moveq	#0,d0
00019EB8 1028 0024                  		move.b	obRoutine(a0),d0
00019EBC 323B 0000                  		move.w	Gird_Index(pc,d0.w),d1
00019EC0 4EFB 1000                  		jmp	Gird_Index(pc,d1.w)
00019EC4                            ; ===========================================================================
00019EC4 0000                       Gird_Index:	dc.w Gird_Main-Gird_Index
00019EC6 0000                       		dc.w Gird_Action-Gird_Index
00019EC8                            
00019EC8 =00000016                  gird_height:	equ $16
00019EC8 =00000032                  gird_origX:	equ $32		; original x-axis position
00019EC8 =00000030                  gird_origY:	equ $30		; original y-axis position
00019EC8 =00000034                  gird_time:	equ $34		; duration for movement in a direction
00019EC8 =00000038                  gird_set:	equ $38		; which movement settings to use (0/8/16/24)
00019EC8 =0000003A                  gird_delay:	equ $3A		; delay for movement
00019EC8                            ; ===========================================================================
00019EC8                            
00019EC8                            Gird_Main:	; Routine 0
00019EC8 5428 0024                  		addq.b	#2,obRoutine(a0)
00019ECC 217C 0000 0000 0004        		move.l	#Map_Gird,obMap(a0)
00019ED4 317C 42F0 0002             		move.w	#$42F0,obGfx(a0)
00019EDA 0028 0004 0001             		ori.b	#4,obRender(a0)
00019EE0 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019EE6 117C 0060 0014             		move.b	#$60,obActWid(a0)
00019EEC 117C 0018 0016             		move.b	#$18,gird_height(a0)
00019EF2 3168 0008 0032             		move.w	obX(a0),gird_origX(a0)
00019EF8 3168 000C 0030             		move.w	obY(a0),gird_origY(a0)
00019EFE 6100 0000                  		bsr.w	Gird_ChgMove
00019F02                            
00019F02                            Gird_Action:	; Routine 2
00019F02 3F28 0008                  		move.w	obX(a0),-(sp)
00019F06 4A68 003A                  		tst.w	gird_delay(a0)
00019F0A 6700                       		beq.s	@beginmove
00019F0C 5368 003A                  		subq.w	#1,gird_delay(a0)
00019F10 6600                       		bne.s	@solid
00019F12                            
00019F12                            	@beginmove:
00019F12 4EB9 0000 F56A             		jsr	(SpeedToPos).l
00019F18 5368 0034                  		subq.w	#1,gird_time(a0) ; decrement movement duration
00019F1C 6600                       		bne.s	@solid		; if time remains, branch
00019F1E 6100 0000                  		bsr.w	Gird_ChgMove	; if time is zero, branch
00019F22                            
00019F22                            	@solid:
00019F22 381F                       		move.w	(sp)+,d4
00019F24 4A28 0001                  		tst.b	obRender(a0)
00019F28 6A00                       		bpl.s	@chkdel
00019F2A 7200                       		moveq	#0,d1
00019F2C 1228 0014                  		move.b	obActWid(a0),d1
00019F30 0641 000B                  		addi.w	#$B,d1
00019F34 7400                       		moveq	#0,d2
00019F36 1428 0016                  		move.b	gird_height(a0),d2
00019F3A 3602                       		move.w	d2,d3
00019F3C 5243                       		addq.w	#1,d3
00019F3E 4EB9 0001 1ADE             		jsr	SolidObject
00019F44                            
00019F44                            	@chkdel:
00019F60 4EF9 0000 F57E             		jmp	(DisplaySprite).l
00019F66                            
00019F66                            	@delete:
00019F66 4EF9 0000 F5BE             		jmp	(DeleteObject).l
00019F6C                            ; ===========================================================================
00019F6C                            
00019F6C                            Gird_ChgMove:
00019F6C 1028 0038                  		move.b	gird_set(a0),d0
00019F70 0240 0018                  		andi.w	#$18,d0
00019F74 43F9 0000 0000             		lea	(@settings).l,a1
00019F7A 43F1 0000                  		lea	(a1,d0.w),a1
00019F7E 3159 0010                  		move.w	(a1)+,obVelX(a0)
00019F82 3159 0012                  		move.w	(a1)+,obVelY(a0)
00019F86 3159 0034                  		move.w	(a1)+,gird_time(a0)
00019F8A 5028 0038                  		addq.b	#8,gird_set(a0)	; use next settings
00019F8E 317C 0007 003A             		move.w	#7,gird_delay(a0)
00019F94 4E75                       		rts	
00019F96                            ; ===========================================================================
00019F96                            @settings:	;   x-speed, y-speed, duration
00019F96 0100 0000 0060 0000        		dc.w   $100,	 0,   $60,     0 ; right
00019F9E 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0 ; down
00019FA6 FF00 FFC0 0060 0000        		dc.w  -$100,  -$40,   $60,     0 ; up/left
00019FAE 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
00019FAE 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
00019FB6                            Map_Gird:	include	"_maps\Girder Block.asm"
00019FB6                            ; ---------------------------------------------------------------------------
00019FB6                            ; Sprite mappings - large girder block (SBZ)
00019FB6                            ; ---------------------------------------------------------------------------
00019FB6                            Map_Gird_internal:
00019FB6 0000                       		dc.w @girder-Map_Gird_internal
00019FB8 0C                         @girder:	dc.b $C
00019FB9 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00019FBE 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00019FC3 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00019FC8 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00019FCD E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00019FD2 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00019FD7 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00019FDC 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00019FE1 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00019FE6 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00019FEB E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00019FF0 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00019FF6 00                         		even
00019FF6 00                         		even
00019FF6                            		include	"_incObj\72 Teleporter.asm"
00019FF6                            ; ---------------------------------------------------------------------------
00019FF6                            ; Object 72 - teleporter (SBZ)
00019FF6                            ; ---------------------------------------------------------------------------
00019FF6                            
00019FF6                            Teleport:
00019FF6 7000                       		moveq	#0,d0
00019FF8 1028 0024                  		move.b	obRoutine(a0),d0
00019FFC 323B 0000                  		move.w	Tele_Index(pc,d0.w),d1
0001A000 4EBB 1000                  		jsr	Tele_Index(pc,d1.w)
0001A020 4E75                       		rts	
0001A022                            
0001A022                            	@delete:
0001A022 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001A028                            ; ===========================================================================
0001A028 0000                       Tele_Index:	dc.w Tele_Main-Tele_Index
0001A02A 0000                       		dc.w loc_166C8-Tele_Index
0001A02C 0000                       		dc.w loc_1675E-Tele_Index
0001A02E 0000                       		dc.w loc_16798-Tele_Index
0001A030                            ; ===========================================================================
0001A030                            
0001A030                            Tele_Main:	; Routine 0
0001A030 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A034 1028 0028                  		move.b	obSubtype(a0),d0
0001A038 D040                       		add.w	d0,d0
0001A03A 0240 001E                  		andi.w	#$1E,d0
0001A03E 45FA 0000                  		lea	Tele_Data(pc),a2
0001A042 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001A046 315A 003A                  		move.w	(a2)+,$3A(a0)
0001A04A 214A 003C                  		move.l	a2,$3C(a0)
0001A04E 315A 0036                  		move.w	(a2)+,$36(a0)
0001A052 315A 0038                  		move.w	(a2)+,$38(a0)
0001A056                            
0001A056                            loc_166C8:	; Routine 2
0001A056 43F8 D000                  		lea	(v_player).w,a1
0001A05A 3029 0008                  		move.w	obX(a1),d0
0001A05E 9068 0008                  		sub.w	obX(a0),d0
0001A062 0828 0000 0022             		btst	#0,obStatus(a0)
0001A068 6700                       		beq.s	loc_166E0
0001A06A 0640 000F                  		addi.w	#$F,d0
0001A06E                            
0001A06E                            loc_166E0:
0001A06E 0C40 0010                  		cmpi.w	#$10,d0
0001A072 6400                       		bcc.s	locret_1675C
0001A074 3229 000C                  		move.w	obY(a1),d1
0001A078 9268 000C                  		sub.w	obY(a0),d1
0001A07C 0641 0020                  		addi.w	#$20,d1
0001A080 0C41 0040                  		cmpi.w	#$40,d1
0001A084 6400                       		bcc.s	locret_1675C
0001A086 4A38 F7C8                  		tst.b	(f_lockmulti).w
0001A08A 6600                       		bne.s	locret_1675C
0001A08C 0C28 0007 0028             		cmpi.b	#7,obSubtype(a0)
0001A092 6600                       		bne.s	loc_1670E
0001A094 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w
0001A09A 6500                       		bcs.s	locret_1675C
0001A09C                            
0001A09C                            loc_1670E:
0001A09C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A0A0 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
0001A0A6 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; use Sonic's rolling animation
0001A0AC 337C 0800 0020             		move.w	#$800,obInertia(a1)
0001A0B2 337C 0000 0010             		move.w	#0,obVelX(a1)
0001A0B8 337C 0000 0012             		move.w	#0,obVelY(a1)
0001A0BE 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001A0C4 08A9 0005 0022             		bclr	#5,obStatus(a1)
0001A0CA 08E9 0001 0022             		bset	#1,obStatus(a1)
0001A0D0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A0D6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A0DC 4228 0032                  		clr.b	$32(a0)
0001A0EA                            
0001A0EA                            locret_1675C:
0001A0EA 4E75                       		rts	
0001A0EC                            ; ===========================================================================
0001A0EC                            
0001A0EC                            loc_1675E:	; Routine 4
0001A0EC 43F8 D000                  		lea	(v_player).w,a1
0001A0F0 1028 0032                  		move.b	$32(a0),d0
0001A0F4 5428 0032                  		addq.b	#2,$32(a0)
0001A0F8 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001A0FE EA40                       		asr.w	#5,d0
0001A100 3428 000C                  		move.w	obY(a0),d2
0001A104 9440                       		sub.w	d0,d2
0001A106 3342 000C                  		move.w	d2,obY(a1)
0001A10A 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
0001A110 6600                       		bne.s	locret_16796
0001A112 6100 0000                  		bsr.w	sub_1681C
0001A116 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A124                            
0001A124                            locret_16796:
0001A124 4E75                       		rts	
0001A126                            ; ===========================================================================
0001A126                            
0001A126                            loc_16798:	; Routine 6
0001A126 588F                       		addq.l	#4,sp
0001A128 43F8 D000                  		lea	(v_player).w,a1
0001A12C 5328 002E                  		subq.b	#1,$2E(a0)
0001A130 6A00                       		bpl.s	loc_167DA
0001A132 3368 0036 0008             		move.w	$36(a0),obX(a1)
0001A138 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001A13E 7200                       		moveq	#0,d1
0001A140 1228 003A                  		move.b	$3A(a0),d1
0001A144 5801                       		addq.b	#4,d1
0001A146 B228 003B                  		cmp.b	$3B(a0),d1
0001A14A 6500                       		bcs.s	loc_167C2
0001A14C 7200                       		moveq	#0,d1
0001A14E 6000                       		bra.s	loc_16800
0001A150                            ; ===========================================================================
0001A150                            
0001A150                            loc_167C2:
0001A150 1141 003A                  		move.b	d1,$3A(a0)
0001A154 2468 003C                  		movea.l	$3C(a0),a2
0001A158 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
0001A15E 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
0001A164 6000 0000                  		bra.w	sub_1681C
0001A168                            ; ===========================================================================
0001A168                            
0001A168                            loc_167DA:
0001A168 2429 0008                  		move.l	obX(a1),d2
0001A16C 2629 000C                  		move.l	obY(a1),d3
0001A170 3029 0010                  		move.w	obVelX(a1),d0
0001A174 48C0                       		ext.l	d0
0001A176 E180                       		asl.l	#8,d0
0001A178 D480                       		add.l	d0,d2
0001A17A 3029 0012                  		move.w	obVelY(a1),d0
0001A17E 48C0                       		ext.l	d0
0001A180 E180                       		asl.l	#8,d0
0001A182 D680                       		add.l	d0,d3
0001A184 2342 0008                  		move.l	d2,obX(a1)
0001A188 2343 000C                  		move.l	d3,obY(a1)
0001A18C 4E75                       		rts	
0001A18E                            ; ===========================================================================
0001A18E                            
0001A18E                            loc_16800:
0001A18E 0269 07FF 000C             		andi.w	#$7FF,obY(a1)
0001A194 4228 0024                  		clr.b	obRoutine(a0)
0001A198 4238 F7C8                  		clr.b	(f_lockmulti).w
0001A19C 337C 0000 0010             		move.w	#0,obVelX(a1)
0001A1A2 337C 0200 0012             		move.w	#$200,obVelY(a1)
0001A1A8 4E75                       		rts	
0001A1AA                            
0001A1AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A1AA                            
0001A1AA                            
0001A1AA                            sub_1681C:
0001A1AA 7000                       		moveq	#0,d0
0001A1AC 343C 1000                  		move.w	#$1000,d2
0001A1B0 3028 0036                  		move.w	$36(a0),d0
0001A1B4 9069 0008                  		sub.w	obX(a1),d0
0001A1B8 6C00                       		bge.s	loc_16830
0001A1BA 4440                       		neg.w	d0
0001A1BC 4442                       		neg.w	d2
0001A1BE                            
0001A1BE                            loc_16830:
0001A1BE 7200                       		moveq	#0,d1
0001A1C0 363C 1000                  		move.w	#$1000,d3
0001A1C4 3228 0038                  		move.w	$38(a0),d1
0001A1C8 9269 000C                  		sub.w	obY(a1),d1
0001A1CC 6C00                       		bge.s	loc_16844
0001A1CE 4441                       		neg.w	d1
0001A1D0 4443                       		neg.w	d3
0001A1D2                            
0001A1D2                            loc_16844:
0001A1D2 B240                       		cmp.w	d0,d1
0001A1D4 6500                       		bcs.s	loc_1687A
0001A1D6 7200                       		moveq	#0,d1
0001A1D8 3228 0038                  		move.w	$38(a0),d1
0001A1DC 9269 000C                  		sub.w	obY(a1),d1
0001A1E0 4841                       		swap	d1
0001A1E2 83C3                       		divs.w	d3,d1
0001A1E4 7000                       		moveq	#0,d0
0001A1E6 3028 0036                  		move.w	$36(a0),d0
0001A1EA 9069 0008                  		sub.w	obX(a1),d0
0001A1EE 6700                       		beq.s	loc_16866
0001A1F0 4840                       		swap	d0
0001A1F2 81C1                       		divs.w	d1,d0
0001A1F4                            
0001A1F4                            loc_16866:
0001A1F4 3340 0010                  		move.w	d0,obVelX(a1)
0001A1F8 3343 0012                  		move.w	d3,obVelY(a1)
0001A1FC 4A41                       		tst.w	d1
0001A1FE 6A00                       		bpl.s	loc_16874
0001A200 4441                       		neg.w	d1
0001A202                            
0001A202                            loc_16874:
0001A202 3141 002E                  		move.w	d1,$2E(a0)
0001A206 4E75                       		rts	
0001A208                            ; ===========================================================================
0001A208                            
0001A208                            loc_1687A:
0001A208 7000                       		moveq	#0,d0
0001A20A 3028 0036                  		move.w	$36(a0),d0
0001A20E 9069 0008                  		sub.w	obX(a1),d0
0001A212 4840                       		swap	d0
0001A214 81C2                       		divs.w	d2,d0
0001A216 7200                       		moveq	#0,d1
0001A218 3228 0038                  		move.w	$38(a0),d1
0001A21C 9269 000C                  		sub.w	obY(a1),d1
0001A220 6700                       		beq.s	loc_16898
0001A222 4841                       		swap	d1
0001A224 83C0                       		divs.w	d0,d1
0001A226                            
0001A226                            loc_16898:
0001A226 3341 0012                  		move.w	d1,obVelY(a1)
0001A22A 3342 0010                  		move.w	d2,obVelX(a1)
0001A22E 4A40                       		tst.w	d0
0001A230 6A00                       		bpl.s	loc_168A6
0001A232 4440                       		neg.w	d0
0001A234                            
0001A234                            loc_168A6:
0001A234 3140 002E                  		move.w	d0,$2E(a0)
0001A238 4E75                       		rts	
0001A23A                            ; End of function sub_1681C
0001A23A                            
0001A23A                            ; ===========================================================================
0001A23A 0000 0000 0000             Tele_Data:	dc.w @type00-Tele_Data, @type01-Tele_Data, @type02-Tele_Data
0001A240 0000 0000 0000             		dc.w @type03-Tele_Data, @type04-Tele_Data, @type05-Tele_Data
0001A246 0000 0000                  		dc.w @type06-Tele_Data, @type07-Tele_Data
0001A24A 0004 0794 098C             @type00:	dc.w 4,	$794, $98C
0001A250 0004 0094 038C             @type01:	dc.w 4,	$94, $38C
0001A256 001C 0794 02E8             @type02:	dc.w $1C, $794,	$2E8
0001A25C 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
0001A262 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
0001A268 0884 0298 0894             		dc.w $884, $298, $894
0001A26E 0270 0894 0190             		dc.w $270, $894, $190
0001A274 0004 0894 0690             @type03:	dc.w 4,	$894, $690
0001A27A 001C 1194 0470             @type04:	dc.w $1C, $1194, $470
0001A280 1184 0498 1158             		dc.w $1184, $498, $1158
0001A286 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
0001A28C 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
0001A292 04E8 0F94 0590             		dc.w $4E8, $F94, $590
0001A298 0004 1294 0490             @type05:	dc.w 4,	$1294, $490
0001A29E 001C 1594 FFE8             @type06:	dc.w $1C, $1594, $FFE8
0001A2A4 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
0001A2AA FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
0001A2B0 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
0001A2B6 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
0001A2BC 0004 0894 0090             @type07:	dc.w 4,	$894, $90
0001A2BC 0004 0894 0090             @type07:	dc.w 4,	$894, $90
0001A2C2                            
0001A2C2                            		include	"_incObj\78 Caterkiller.asm"
0001A2C2                            ; ---------------------------------------------------------------------------
0001A2C2                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
0001A2C2                            ; ---------------------------------------------------------------------------
0001A2C2                            
0001A2C2                            Caterkiller:
0001A2C2 7000                       		moveq	#0,d0
0001A2C4 1028 0024                  		move.b	obRoutine(a0),d0
0001A2C8 323B 0000                  		move.w	Cat_Index(pc,d0.w),d1
0001A2CC 4EFB 1000                  		jmp	Cat_Index(pc,d1.w)
0001A2D0                            ; ===========================================================================
0001A2D0 0000                       Cat_Index:	dc.w Cat_Main-Cat_Index
0001A2D2 0000                       		dc.w Cat_Head-Cat_Index
0001A2D4 0000                       		dc.w Cat_BodySeg1-Cat_Index
0001A2D6 0000                       		dc.w Cat_BodySeg2-Cat_Index
0001A2D8 0000                       		dc.w Cat_BodySeg1-Cat_Index
0001A2DA 0000                       		dc.w Cat_Delete-Cat_Index
0001A2DC 0000                       		dc.w loc_16CC0-Cat_Index
0001A2DE                            
0001A2DE =0000003C                  cat_parent:	equ $3C		; address of parent object
0001A2DE                            ; ===========================================================================
0001A2DE                            
0001A2DE                            locret_16950:
0001A2DE 4E75                       		rts	
0001A2E0                            ; ===========================================================================
0001A2E0                            
0001A2E0                            Cat_Main:	; Routine 0
0001A2E0 117C 0007 0016             		move.b	#7,obHeight(a0)
0001A2E6 117C 0008 0017             		move.b	#8,obWidth(a0)
0001A2EC 4EB9 0000 F532             		jsr	(ObjectFall).l
0001A2F2 4EB9 0001 875C             		jsr	(ObjFloorDist).l
0001A2F8 4A41                       		tst.w	d1
0001A2FA 6AE2                       		bpl.s	locret_16950
0001A2FC D368 000C                  		add.w	d1,obY(a0)
0001A300 4268 0012                  		clr.w	obVelY(a0)
0001A304 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A308 217C 0000 0000 0004        		move.l	#Map_Cat,obMap(a0)
0001A310 317C 22B0 0002             		move.w	#$22B0,obGfx(a0)
0001A316 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; if level is SBZ, branch
0001A31C 6700                       		beq.s	@isscrapbrain
0001A31E 317C 24FF 0002             		move.w	#$24FF,obGfx(a0) ; MZ specific code
0001A324                            
0001A324                            	@isscrapbrain:
0001A324 0228 0003 0001             		andi.b	#3,obRender(a0)
0001A32A 0028 0004 0001             		ori.b	#4,obRender(a0)
0001A330 1168 0001 0022             		move.b	obRender(a0),obStatus(a0)
0001A336 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001A33C 117C 0008 0014             		move.b	#8,obActWid(a0)
0001A342 117C 000B 0020             		move.b	#$B,obColType(a0)
0001A348 3428 0008                  		move.w	obX(a0),d2
0001A34C 7A0C                       		moveq	#$C,d5
0001A34E 0828 0000 0022             		btst	#0,obStatus(a0)
0001A354 6700                       		beq.s	@noflip
0001A356 4445                       		neg.w	d5
0001A358                            
0001A358                            	@noflip:
0001A358 1C3C 0004                  		move.b	#4,d6
0001A35C 7600                       		moveq	#0,d3
0001A35E 7804                       		moveq	#4,d4
0001A360 2448                       		movea.l	a0,a2
0001A362 7202                       		moveq	#2,d1
0001A364                            
0001A364                            Cat_Loop:
0001A364 4EB9 0000 FB2E             		jsr	(FindNextFreeObj).l
0001A36A 6600 0000                  			bne.w	Cat_ChkGone
0001A36E 12BC 0078                  		move.b	#id_Caterkiller,0(a1) ; load body segment object
0001A372 1346 0024                  		move.b	d6,obRoutine(a1) ; goto Cat_BodySeg1 or Cat_BodySeg2 next
0001A376 5406                       		addq.b	#2,d6		; alternate between the two
0001A378 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
0001A37E 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0001A384 337C 0280 0018             		move.w	#$280,obPriority(a1)
0001A38A 137C 0008 0014             		move.b	#8,obActWid(a1)
0001A390 137C 00CB 0020             		move.b	#$CB,obColType(a1)
0001A396 D445                       		add.w	d5,d2
0001A398 3342 0008                  		move.w	d2,obX(a1)
0001A39C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A3A2 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0001A3A8 1368 0022 0001             		move.b	obStatus(a0),obRender(a1)
0001A3AE 137C 0008 001A             		move.b	#8,obFrame(a1)
0001A3B4 234A 003C                  		move.l	a2,cat_parent(a1)
0001A3B8 1344 003C                  		move.b	d4,cat_parent(a1)
0001A3BC 5804                       		addq.b	#4,d4
0001A3BE 2449                       		movea.l	a1,a2
0001A3C0                            
0001A3C0                            	@fail:
0001A3C0 51C9 FFA2                  		dbf	d1,Cat_Loop	; repeat sequence 2 more times
0001A3C4                            
0001A3C4 117C 0007 002A             		move.b	#7,$2A(a0)
0001A3CA 4228 003C                  		clr.b	cat_parent(a0)
0001A3CE                            
0001A3CE                            Cat_Head:	; Routine 2
0001A3CE 4A28 0022                  		tst.b	obStatus(a0)
0001A3D2 6B00 0000                  		bmi.w	loc_16C96
0001A3D6 7000                       		moveq	#0,d0
0001A3D8 1028 0025                  		move.b	ob2ndRout(a0),d0
0001A3DC 323B 0000                  		move.w	Cat_Index2(pc,d0.w),d1
0001A3E0 4EBB 1000                  		jsr	Cat_Index2(pc,d1.w)
0001A3E4 1228 002B                  		move.b	$2B(a0),d1
0001A3E8 6A00                       		bpl.s	@display
0001A3EA 43F9 0000 0000             		lea	(Ani_Cat).l,a1
0001A3F0 1028 0026                  		move.b	obAngle(a0),d0
0001A3F4 0240 007F                  		andi.w	#$7F,d0
0001A3F8 5828 0026                  		addq.b	#4,obAngle(a0)
0001A3FC 1031 0000                  		move.b	(a1,d0.w),d0
0001A400 6A00                       		bpl.s	@animate
0001A402 08A8 0007 002B             		bclr	#7,$2B(a0)
0001A408 6000                       		bra.s	@display
0001A40A                            
0001A40A                            	@animate:
0001A40A 0201 0010                  		andi.b	#$10,d1
0001A40E D001                       		add.b	d1,d0
0001A410 1140 001A                  		move.b	d0,obFrame(a0)
0001A414                            
0001A414                            	@display:
0001A432 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001A438                            
0001A438                            	Cat_ChkGone:
0001A438 45F8 FC00                  		lea	(v_objstate).w,a2
0001A43C 7000                       		moveq	#0,d0
0001A43E 1028 0023                  		move.b	obRespawnNo(a0),d0
0001A442 6700                       		beq.s	@delete
0001A444 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001A44A                            
0001A44A                            	@delete:
0001A44A 117C 000A 0024             		move.b	#$A,obRoutine(a0)	; goto Cat_Delete next
0001A450 4E75                       		rts	
0001A452                            ; ===========================================================================
0001A452                            
0001A452                            Cat_Delete:	; Routine $A
0001A452 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001A458                            ; ===========================================================================
0001A458 0000                       Cat_Index2:	dc.w @wait-Cat_Index2
0001A45A 0000                       		dc.w loc_16B02-Cat_Index2
0001A45C                            ; ===========================================================================
0001A45C                            
0001A45C                            @wait:
0001A45C 5328 002A                  		subq.b	#1,$2A(a0)
0001A460 6B00                       		bmi.s	@move
0001A462 4E75                       		rts	
0001A464                            ; ===========================================================================
0001A464                            
0001A464                            @move:
0001A464 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A468 117C 0010 002A             		move.b	#$10,$2A(a0)
0001A46E 317C FF40 0010             		move.w	#-$C0,obVelX(a0)
0001A474 317C 0040 001C             		move.w	#$40,obAnim(a0)
0001A47A 0868 0004 002B             		bchg	#4,$2B(a0)
0001A480 6600                       		bne.s	loc_16AFC
0001A482 4268 0010                  		clr.w	obVelX(a0)
0001A486 4468 001C                  		neg.w	obAnim(a0)
0001A48A                            
0001A48A                            loc_16AFC:
0001A48A 08E8 0007 002B             		bset	#7,$2B(a0)
0001A490                            
0001A490                            loc_16B02:
0001A490 5328 002A                  		subq.b	#1,$2A(a0)
0001A494 6B00                       		bmi.s	@loc_16B5E
0001A496 4A68 0010                  			tst.w	obVelX(a0)
0001A49A 6700                       			beq.s	@notmoving
0001A49C 2428 0008                  			move.l	obX(a0),d2
0001A4A0 2602                       			move.l	d2,d3
0001A4A2 3028 0010                  		move.w	obVelX(a0),d0
0001A4A6 0828 0000 0022             		btst	#0,obStatus(a0)
0001A4AC 6700                       		beq.s	@noflip
0001A4AE 4440                       		neg.w	d0
0001A4B0                            
0001A4B0                            	@noflip:
0001A4B0 48C0                       		ext.l	d0
0001A4B2 E180                       		asl.l	#8,d0
0001A4B4 D480                       		add.l	d0,d2
0001A4B6 2142 0008                  		move.l	d2,obX(a0)
0001A4BA 4843                       			swap	d3
0001A4BC B668 0008                  			cmp.w	obX(a0),d3
0001A4C0 6700                       			beq.s	@notmoving
0001A4C2 4EB9 0001 875C             			jsr	(ObjFloorDist).l
0001A4C8 0C41 FFF8                  			cmpi.w	#-8,d1
0001A4CC 6D00                       			blt.s	@loc_16B70
0001A4CE 0C41 000C                  			cmpi.w	#$C,d1
0001A4D2 6C00                       			bge.s	@loc_16B70
0001A4D4 D368 000C                  			add.w	d1,obY(a0)
0001A4D8 7000                       		moveq	#0,d0
0001A4DA 1028 003C                  		move.b	cat_parent(a0),d0
0001A4DE 5228 003C                  		addq.b	#1,cat_parent(a0)
0001A4E2 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
0001A4E8 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001A4EC                            
0001A4EC                            	@notmoving:
0001A4EC 4E75                       		rts	
0001A4EE                            ; ===========================================================================
0001A4EE                            
0001A4EE                            @loc_16B5E:
0001A4EE 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001A4F2 117C 0007 002A             		move.b	#7,$2A(a0)
0001A4F8 4268 0010                  			clr.w	obVelX(a0)
0001A4FC 4268 001C                  			clr.w	obAnim(a0)
0001A500 4E75                       		rts	
0001A502                            ; ===========================================================================
0001A502                            
0001A502                            @loc_16B70:
0001A502 7000                       			moveq	#0,d0
0001A504 1028 003C                  			move.b	cat_parent(a0),d0
0001A508 11BC 0080 002C             			move.b	#$80,$2C(a0,d0)
0001A50E 4468 000A                  			neg.w	obX+2(a0)
0001A512 6700                       			beq.s	@loc_1730A
0001A514 0828 0000 0022             			btst	#0,obStatus(a0)
0001A51A 6700                       			beq.s	@loc_1730A
0001A51C 5368 0008                  			subq.w	#1,obX(a0)
0001A520 5228 003C                  			addq.b	#1,cat_parent(a0)
0001A524 7000                       			moveq	#0,d0
0001A526 1028 003C                  			move.b	cat_parent(a0),d0
0001A52A 4230 002C                  			clr.b	$2C(a0,d0)
0001A52E                            	@loc_1730A:
0001A52E 0868 0000 0022             			bchg	#0,obStatus(a0)
0001A534 1168 0022 0001             			move.b	obStatus(a0),obRender(a0)
0001A53A 5228 003C                  		addq.b	#1,cat_parent(a0)
0001A53E 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
0001A544 4E75                       		rts	
0001A546                            ; ===========================================================================
0001A546                            
0001A546                            Cat_BodySeg2:	; Routine 6
0001A546 2268 003C                  		movea.l	cat_parent(a0),a1
0001A54A 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001A550 6A00                       		bpl.s	Cat_BodySeg1
0001A552 43F9 0000 0000             		lea	(Ani_Cat).l,a1
0001A558 1028 0026                  		move.b	obAngle(a0),d0
0001A55C 0240 007F                  		andi.w	#$7F,d0
0001A560 5828 0026                  		addq.b	#4,obAngle(a0)
0001A564 4A31 0004                  		tst.b	4(a1,d0.w)
0001A568 6A00                       		bpl.s	Cat_AniBody
0001A56A 5828 0026                  		addq.b	#4,obAngle(a0)
0001A56E                            
0001A56E                            Cat_AniBody:
0001A56E 1031 0000                  		move.b	(a1,d0.w),d0
0001A572 5000                       		addq.b	#8,d0
0001A574 1140 001A                  		move.b	d0,obFrame(a0)
0001A578                            
0001A578                            Cat_BodySeg1:	; Routine 4, 8
0001A578 2268 003C                  		movea.l	cat_parent(a0),a1
0001A57C 4A28 0022                  		tst.b	obStatus(a0)
0001A580 6B00 0000                  		bmi.w	loc_16C90
0001A584 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001A58A 1169 0025 0025             		move.b	ob2ndRout(a1),ob2ndRout(a0)
0001A590 6700 0000                  		beq.w	loc_16C64
0001A594 3169 001C 001C             		move.w	obAnim(a1),obAnim(a0)
0001A59A 3029 0010                  		move.w	obVelX(a1),d0
0001A59E D068 001C                  			add.w	obAnim(a0),d0
0001A5A2 3140 0010                  		move.w	d0,obVelX(a0)
0001A5A6 2428 0008                  		move.l	obX(a0),d2
0001A5AA 2602                       		move.l	d2,d3
0001A5AC 3028 0010                  		move.w	obVelX(a0),d0
0001A5B0 0828 0000 0022             		btst	#0,obStatus(a0)
0001A5B6 6700                       		beq.s	loc_16C0C
0001A5B8 4440                       		neg.w	d0
0001A5BA                            
0001A5BA                            loc_16C0C:
0001A5BA 48C0                       		ext.l	d0
0001A5BC E180                       		asl.l	#8,d0
0001A5BE D480                       		add.l	d0,d2
0001A5C0 2142 0008                  		move.l	d2,obX(a0)
0001A5C4 4843                       		swap	d3
0001A5C6 B668 0008                  		cmp.w	obX(a0),d3
0001A5CA 6700                       		beq.s	loc_16C64
0001A5CC 7000                       		moveq	#0,d0
0001A5CE 1028 003C                  		move.b	cat_parent(a0),d0
0001A5D2 1231 002C                  		move.b	$2C(a1,d0.w),d1
0001A5D6 0C01 0080                  		cmpi.b	#$80,d1
0001A5DA 6600                       		bne.s	loc_16C50
0001A5DC 1181 002C                  			move.b	d1,$2C(a0,d0)
0001A5E0 4468 000A                  			neg.w	obX+2(a0)
0001A5E4 6700                       			beq.s	locj_173E4
0001A5E6 0828 0000 0022             			btst	#0,obStatus(a0)
0001A5EC 6700                       			beq.s	locj_173E4
0001A5EE 0C68 FF40 0010             			cmpi.w	#-$C0,obVelX(a0)
0001A5F4 6600                       			bne.s	locj_173E4
0001A5F6 5368 0008                  			subq.w	#1,obX(a0)
0001A5FA 5228 003C                  			addq.b	#1,cat_parent(a0)
0001A5FE 7000                       			moveq	#0,d0
0001A600 1028 003C                  			move.b	cat_parent(a0),d0
0001A604 4230 002C                  			clr.b	$2C(a0,d0)
0001A608                            	locj_173E4:
0001A608 0868 0000 0022             		bchg	#0,obStatus(a0)
0001A60E 1168 0022 0001             		move.b	obStatus(a0),1(a0)
0001A614 5228 003C                  		addq.b	#1,cat_parent(a0)
0001A618 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
0001A61E 6000                       		bra.s	loc_16C64
0001A620                            ; ===========================================================================
0001A620                            
0001A620                            loc_16C50:
0001A620 4881                       		ext.w	d1
0001A622 D368 000C                  		add.w	d1,obY(a0)
0001A626 5228 003C                  		addq.b	#1,cat_parent(a0)
0001A62A 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
0001A630 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001A634                            
0001A634                            loc_16C64:
0001A634 0C29 000C 0024             		cmpi.b	#$C,obRoutine(a1)
0001A63A 6700                       		beq.s	loc_16C90
0001A63C 0C11 0027                  		cmpi.b	#id_ExplosionItem,0(a1)
0001A640 6700                       		beq.s	loc_16C7C
0001A642 0C29 000A 0024             		cmpi.b	#$A,obRoutine(a1)
0001A648 6600                       		bne.s	loc_16C82
0001A64A                            
0001A64A                            loc_16C7C:
0001A64A 4229 0020                  		clr.b    $20(a1)
0001A64E 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0001A654                            
0001A654                            loc_16C82:
0001A654 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001A65A                            
0001A65A                            ; ===========================================================================
0001A65A FE00 FE80 0180 0200        Cat_FragSpeed:	dc.w -$200, -$180, $180, $200
0001A662                            ; ===========================================================================
0001A662                            
0001A662                            loc_16C90:
0001A662 08E9 0007 0022             		bset	#7,obStatus(a1)
0001A668                            
0001A668                            loc_16C96:
0001A668 7000                       		moveq	#0,d0
0001A66A 1028 0024                  		move.b	obRoutine(a0),d0
0001A66E 303B 00E8                  		move.w	Cat_FragSpeed-2(pc,d0.w),d0
0001A672 0828 0000 0022             		btst	#0,obStatus(a0)
0001A678 6700                       		beq.s	loc_16CAA
0001A67A 4440                       		neg.w	d0
0001A67C                            
0001A67C                            loc_16CAA:
0001A67C 3140 0010                  		move.w	d0,obVelX(a0)
0001A680 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0001A686 117C 000C 0024             		move.b	#$C,obRoutine(a0)
0001A68C 0228 00F8 001A             		andi.b	#$F8,obFrame(a0)
0001A692                            
0001A692                            loc_16CC0:	; Routine $C
0001A692 4EB9 0000 F532             		jsr	(ObjectFall).l
0001A698 4A68 0012                  		tst.w	obVelY(a0)
0001A69C 6B00                       		bmi.s	loc_16CE0
0001A69E 4EB9 0001 875C             		jsr	(ObjFloorDist).l
0001A6A4 4A41                       		tst.w	d1
0001A6A6 6A00                       		bpl.s	loc_16CE0
0001A6A8 D368 000C                  		add.w	d1,obY(a0)
0001A6AC 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0001A6B2                            
0001A6B2                            loc_16CE0:
0001A6B2 4A28 0001                  		tst.b	obRender(a0)
0001A6B6 6A00 FD80                  		bpl.w	Cat_ChkGone
0001A6BA 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001A6BA 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001A6C0                            		include	"_anim\Caterkiller.asm"
0001A6C0                            ; ---------------------------------------------------------------------------
0001A6C0                            ; Animation script - Caterkiller enemy (uses non-standard format)
0001A6C0                            ; ---------------------------------------------------------------------------
0001A6C0 0000 0000 0000 0000 0000+  Ani_Cat:	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
0001A6D0 0101 0101 0101 0202 0202+  		dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
0001A6E0 0404 0404 0404 0505 0505+  		dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
0001A6F0 0606 0707 0707 0707 0707+  		dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
0001A700 0707 0707 0707 0707 0707+  		dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
0001A710 0606 0606 0606 0505 0505+  		dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
0001A720 0403 0303 0303 0202 0202+  		dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
0001A730 0101 0000 0000 0000 0000+  		dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
0001A740                            		even
0001A740                            		even
0001A740                            Map_Cat:	include	"_maps\Caterkiller.asm"
0001A740                            ; ---------------------------------------------------------------------------
0001A740                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001A740                            ; ---------------------------------------------------------------------------
0001A740                            Map_Cat_internal:
0001A740 0000                       		dc.w byte_16D9E-Map_Cat_internal
0001A742 0000                       		dc.w byte_16DA4-Map_Cat_internal
0001A744 0000                       		dc.w byte_16DAA-Map_Cat_internal
0001A746 0000                       		dc.w byte_16DB0-Map_Cat_internal
0001A748 0000                       		dc.w byte_16DB6-Map_Cat_internal
0001A74A 0000                       		dc.w byte_16DBC-Map_Cat_internal
0001A74C 0000                       		dc.w byte_16DC2-Map_Cat_internal
0001A74E 0000                       		dc.w byte_16DC8-Map_Cat_internal
0001A750 0000                       		dc.w byte_16DCE-Map_Cat_internal
0001A752 0000                       		dc.w byte_16DD4-Map_Cat_internal
0001A754 0000                       		dc.w byte_16DDA-Map_Cat_internal
0001A756 0000                       		dc.w byte_16DE0-Map_Cat_internal
0001A758 0000                       		dc.w byte_16DE6-Map_Cat_internal
0001A75A 0000                       		dc.w byte_16DEC-Map_Cat_internal
0001A75C 0000                       		dc.w byte_16DF2-Map_Cat_internal
0001A75E 0000                       		dc.w byte_16DF8-Map_Cat_internal
0001A760 0000                       		dc.w byte_16DFE-Map_Cat_internal
0001A762 0000                       		dc.w byte_16E04-Map_Cat_internal
0001A764 0000                       		dc.w byte_16E0A-Map_Cat_internal
0001A766 0000                       		dc.w byte_16E10-Map_Cat_internal
0001A768 0000                       		dc.w byte_16E16-Map_Cat_internal
0001A76A 0000                       		dc.w byte_16E1C-Map_Cat_internal
0001A76C 0000                       		dc.w byte_16E22-Map_Cat_internal
0001A76E 0000                       		dc.w byte_16E28-Map_Cat_internal
0001A770 01                         byte_16D9E:	dc.b 1
0001A771 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
0001A776 01                         byte_16DA4:	dc.b 1
0001A777 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
0001A77C 01                         byte_16DAA:	dc.b 1
0001A77D F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
0001A782 01                         byte_16DB0:	dc.b 1
0001A783 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
0001A788 01                         byte_16DB6:	dc.b 1
0001A789 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
0001A78E 01                         byte_16DBC:	dc.b 1
0001A78F ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
0001A794 01                         byte_16DC2:	dc.b 1
0001A795 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
0001A79A 01                         byte_16DC8:	dc.b 1
0001A79B EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
0001A7A0 01                         byte_16DCE:	dc.b 1
0001A7A1 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001A7A6 01                         byte_16DD4:	dc.b 1
0001A7A7 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
0001A7AC 01                         byte_16DDA:	dc.b 1
0001A7AD F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
0001A7B2 01                         byte_16DE0:	dc.b 1
0001A7B3 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
0001A7B8 01                         byte_16DE6:	dc.b 1
0001A7B9 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
0001A7BE 01                         byte_16DEC:	dc.b 1
0001A7BF F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
0001A7C4 01                         byte_16DF2:	dc.b 1
0001A7C5 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
0001A7CA 01                         byte_16DF8:	dc.b 1
0001A7CB F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
0001A7D0 01                         byte_16DFE:	dc.b 1
0001A7D1 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
0001A7D6 01                         byte_16E04:	dc.b 1
0001A7D7 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
0001A7DC 01                         byte_16E0A:	dc.b 1
0001A7DD F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
0001A7E2 01                         byte_16E10:	dc.b 1
0001A7E3 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
0001A7E8 01                         byte_16E16:	dc.b 1
0001A7E9 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
0001A7EE 01                         byte_16E1C:	dc.b 1
0001A7EF ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
0001A7F4 01                         byte_16E22:	dc.b 1
0001A7F5 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
0001A7FA 01                         byte_16E28:	dc.b 1
0001A7FB EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
0001A800                            		even
0001A800                            		even
0001A800                            
0001A800                            		include	"_incObj\79 Lamppost.asm"
0001A800                            ; ---------------------------------------------------------------------------
0001A800                            ; Object 79 - lamppost
0001A800                            ; ---------------------------------------------------------------------------
0001A800                            
0001A800                            Lamppost:
0001A800 7000                       		moveq	#0,d0
0001A802 1028 0024                  		move.b	obRoutine(a0),d0
0001A806 323B 0000                  		move.w	Lamp_Index(pc,d0.w),d1
0001A80A 4EBB 1000                  		jsr	Lamp_Index(pc,d1.w)
0001A80E 4EF9 0001 1646             		jmp	(RememberState).l
0001A814                            ; ===========================================================================
0001A814 0000                       Lamp_Index:	dc.w Lamp_Main-Lamp_Index
0001A816 0000                       		dc.w Lamp_Blue-Lamp_Index
0001A818 0000                       		dc.w Lamp_Finish-Lamp_Index
0001A81A 0000                       		dc.w Lamp_Twirl-Lamp_Index
0001A81C                            
0001A81C =00000030                  lamp_origX:	equ $30		; original x-axis position
0001A81C =00000032                  lamp_origY:	equ $32		; original y-axis position
0001A81C =00000036                  lamp_time:	equ $36		; length of time to twirl the lamp
0001A81C                            ; ===========================================================================
0001A81C                            
0001A81C                            Lamp_Main:	; Routine 0
0001A81C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A820 217C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a0)
0001A828 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
0001A82E 117C 0004 0001             		move.b	#4,obRender(a0)
0001A834 117C 0008 0014             		move.b	#8,obActWid(a0)
0001A83A 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001A840 45F8 FC00                  		lea	(v_objstate).w,a2
0001A844 7000                       		moveq	#0,d0
0001A846 1028 0023                  		move.b	obRespawnNo(a0),d0
0001A84A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001A850 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001A856 6600                       		bne.s	@red
0001A858 1238 FE30                  		move.b	(v_lastlamp).w,d1
0001A85C 0201 007F                  		andi.b	#$7F,d1
0001A860 1428 0028                  		move.b	obSubtype(a0),d2 ; get lamppost number
0001A864 0202 007F                  		andi.b	#$7F,d2
0001A868 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
0001A86A 6500                       		bcs.s	Lamp_Blue	; if yes, branch
0001A86C                            
0001A86C                            @red:
0001A86C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001A872 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
0001A878 117C 0003 001A             		move.b	#3,obFrame(a0)
0001A87E 4E75                       		rts	
0001A880                            
0001A880                            ; ===========================================================================
0001A880                            
0001A880                            Lamp_Blue:	; Routine 2
0001A880 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001A884 6600 0000                  		bne.w	@donothing	; if yes, branch
0001A888 4A38 F7C8                  		tst.b	(f_lockmulti).w
0001A88C 6B00 0000                  		bmi.w	@donothing
0001A890 1238 FE30                  		move.b	(v_lastlamp).w,d1
0001A894 0201 007F                  		andi.b	#$7F,d1
0001A898 1428 0028                  		move.b	obSubtype(a0),d2
0001A89C 0202 007F                  		andi.b	#$7F,d2
0001A8A0 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
0001A8A2 6500                       		bcs.s	@chkhit		; if yes, branch
0001A8A4 45F8 FC00                  		lea	(v_objstate).w,a2
0001A8A8 7000                       		moveq	#0,d0
0001A8AA 1028 0023                  		move.b	obRespawnNo(a0),d0
0001A8AE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001A8B4 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001A8BA 117C 0003 001A             		move.b	#3,obFrame(a0)
0001A8C0 6000 0000                  		bra.w	@donothing
0001A8C4                            ; ===========================================================================
0001A8C4                            
0001A8C4                            @chkhit:
0001A8C4 3038 D008                  		move.w	(v_player+obX).w,d0
0001A8C8 9068 0008                  		sub.w	obX(a0),d0
0001A8CC 5040                       		addq.w	#8,d0
0001A8CE 0C40 0010                  		cmpi.w	#$10,d0
0001A8D2 6400 0000                  		bcc.w	@donothing
0001A8D6 3038 D00C                  		move.w	(v_player+obY).w,d0
0001A8DA 9068 000C                  		sub.w	obY(a0),d0
0001A8DE 0640 0040                  		addi.w	#$40,d0
0001A8E2 0C40 0068                  		cmpi.w	#$68,d0
0001A8E6 6400                       		bcc.s	@donothing
0001A8E8                            
0001A8F2 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A8F6 4EB9 0000 FB18             		jsr	(FindFreeObj).l
0001A8FC 6600                       		bne.s	@fail
0001A8FE 12BC 0079                  		move.b	#id_Lamppost,0(a1)	; load twirling	lamp object
0001A902 137C 0006 0024             		move.b	#6,obRoutine(a1) ; goto Lamp_Twirl next
0001A908 3368 0008 0030             		move.w	obX(a0),lamp_origX(a1)
0001A90E 3368 000C 0032             		move.w	obY(a0),lamp_origY(a1)
0001A914 0469 0018 0032             		subi.w	#$18,lamp_origY(a1)
0001A91A 237C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a1)
0001A922 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
0001A928 137C 0004 0001             		move.b	#4,obRender(a1)
0001A92E 137C 0008 0014             		move.b	#8,obActWid(a1)
0001A934 337C 0200 0018             		move.w	#$200,obPriority(a1)
0001A93A 137C 0002 001A             		move.b	#2,obFrame(a1)	; use "ball only" frame
0001A940 337C 0020 0036             		move.w	#$20,lamp_time(a1)
0001A946                            
0001A946                            	@fail:
0001A946 117C 0001 001A             		move.b	#1,obFrame(a0)	; use "post only" frame
0001A94C 6100 0000                  		bsr.w	Lamp_StoreInfo
0001A950 45F8 FC00                  		lea	(v_objstate).w,a2
0001A954 7000                       		moveq	#0,d0
0001A956 1028 0023                  		move.b	obRespawnNo(a0),d0
0001A95A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001A960                            
0001A960                            	@donothing:
0001A960 4E75                       		rts	
0001A962                            ; ===========================================================================
0001A962                            
0001A962                            Lamp_Finish:	; Routine 4	
0001A962 4E75                       		rts	
0001A964                            ; ===========================================================================
0001A964                            
0001A964                            Lamp_Twirl:	; Routine 6
0001A964 5368 0036                  		subq.w	#1,lamp_time(a0) ; decrement timer
0001A968 6A00                       		bpl.s	@continue	; if time remains, keep twirling
0001A96A 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
0001A970                            
0001A970                            	@continue:
0001A970 1028 0026                  		move.b	obAngle(a0),d0
0001A974 0428 0010 0026             		subi.b	#$10,obAngle(a0)
0001A97A 0400 0040                  		subi.b	#$40,d0
0001A97E 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001A984 C3FC 0C00                  		muls.w	#$C00,d1
0001A988 4841                       		swap	d1
0001A98A D268 0030                  		add.w	lamp_origX(a0),d1
0001A98E 3141 0008                  		move.w	d1,obX(a0)
0001A992 C1FC 0C00                  		muls.w	#$C00,d0
0001A996 4840                       		swap	d0
0001A998 D068 0032                  		add.w	lamp_origY(a0),d0
0001A99C 3140 000C                  		move.w	d0,obY(a0)
0001A9A0 4E75                       		rts	
0001A9A2                            ; ===========================================================================
0001A9A2                            ; ---------------------------------------------------------------------------
0001A9A2                            ; Subroutine to	store information when you hit a lamppost
0001A9A2                            ; ---------------------------------------------------------------------------
0001A9A2                            
0001A9A2                            Lamp_StoreInfo:
0001A9A2 11E8 0028 FE30             		move.b	obSubtype(a0),(v_lastlamp).w 	; lamppost number
0001A9A8 11F8 FE30 FE31             		move.b	(v_lastlamp).w,($FFFFFE31).w
0001A9AE 31E8 0008 FE32             		move.w	obX(a0),($FFFFFE32).w		; x-position
0001A9B4 31E8 000C FE34             		move.w	obY(a0),($FFFFFE34).w		; y-position
0001A9BA 31F8 FE20 FE36             		move.w	(v_rings).w,($FFFFFE36).w 	; rings
0001A9C0 11F8 FE1B FE54             		move.b	(v_lifecount).w,($FFFFFE54).w 	; lives
0001A9C6 21F8 FE22 FE38             		move.l	(v_time).w,($FFFFFE38).w 	; time
0001A9CC 11F8 F742 FE3C             		move.b	(v_dle_routine).w,($FFFFFE3C).w ; routine counter for dynamic level mod
0001A9D2 31F8 F72E FE3E             		move.w	(v_limitbtm2).w,($FFFFFE3E).w 	; lower y-boundary of level
0001A9D8 31F8 F700 FE40             		move.w	(v_screenposx).w,($FFFFFE40).w 	; screen x-position
0001A9DE 31F8 F704 FE42             		move.w	(v_screenposy).w,($FFFFFE42).w 	; screen y-position
0001A9E4 31F8 F708 FE44             		move.w	(v_bgscreenposx).w,($FFFFFE44).w ; bg position
0001A9EA 31F8 F70C FE46             		move.w	(v_bgscreenposy).w,($FFFFFE46).w 	; bg position
0001A9F0 31F8 F710 FE48             		move.w	(v_bg2screenposx).w,($FFFFFE48).w 	; bg position
0001A9F6 31F8 F714 FE4A             		move.w	(v_bg2screenposy).w,($FFFFFE4A).w 	; bg position
0001A9FC 31F8 F718 FE4C             		move.w	(v_bg3screenposx).w,($FFFFFE4C).w 	; bg position
0001AA02 31F8 F71C FE4E             		move.w	(v_bg3screenposy).w,($FFFFFE4E).w 	; bg position
0001AA08 31F8 F648 FE50             		move.w	(v_waterpos2).w,($FFFFFE50).w 	; water height
0001AA0E 11F8 F64D FE52             		move.b	(v_wtr_routine).w,($FFFFFE52).w ; rountine counter for water
0001AA14 11F8 F64E FE53             		move.b	(f_wtr_state).w,($FFFFFE53).w 	; water direction
0001AA1A 11F8 F5C3 FE54             		move.b	(f_emeraldm).w,($FFFFFE54).w 	; emerald monitor
0001AA20 4E75                       		rts	
0001AA22                            
0001AA22                            ; ---------------------------------------------------------------------------
0001AA22                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001AA22                            ; ---------------------------------------------------------------------------
0001AA22                            
0001AA22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AA22                            
0001AA22                            
0001AA22                            Lamp_LoadInfo:
0001AA22 11F8 FE31 FE30             		move.b	($FFFFFE31).w,(v_lastlamp).w
0001AA28 31F8 FE32 D008             		move.w	($FFFFFE32).w,(v_player+obX).w
0001AA2E 31F8 FE34 D00C             		move.w	($FFFFFE34).w,(v_player+obY).w
0001AA34 31F8 FE36 FE20             		move.w	($FFFFFE36).w,(v_rings).w
0001AA3A 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,(v_lifecount).w
0001AA40 4278 FE20                  		clr.w	(v_rings).w
0001AA44 4238 FE1B                  		clr.b	(v_lifecount).w
0001AA48 21F8 FE38 FE22             		move.l	($FFFFFE38).w,(v_time).w
0001AA4E 11FC 003B FE25             		move.b	#59,(v_timecent).w
0001AA54 5338 FE24                  		subq.b	#1,(v_timesec).w
0001AA58 11F8 FE3C F742             		move.b	($FFFFFE3C).w,(v_dle_routine).w
0001AA5E 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001AA64 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,(v_limitbtm2).w
0001AA6A 31F8 FE3E F726             		move.w	($FFFFFE3E).w,(v_limitbtm1).w
0001AA70 31F8 FE40 F700             		move.w	($FFFFFE40).w,(v_screenposx).w
0001AA76 31F8 FE42 F704             		move.w	($FFFFFE42).w,(v_screenposy).w
0001AA7C 31F8 FE44 F708             		move.w	($FFFFFE44).w,(v_bgscreenposx).w
0001AA82 31F8 FE46 F70C             		move.w	($FFFFFE46).w,(v_bgscreenposy).w
0001AA88 31F8 FE48 F710             		move.w	($FFFFFE48).w,(v_bg2screenposx).w
0001AA8E 31F8 FE4A F714             		move.w	($FFFFFE4A).w,(v_bg2screenposy).w
0001AA94 31F8 FE4C F718             		move.w	($FFFFFE4C).w,(v_bg3screenposx).w
0001AA9A 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,(v_bg3screenposy).w
0001AAA0 11F8 FE54 F5C3             		move.b	($FFFFFE54).w,(f_emeraldm).w	;emerald monitor count
0001AAA6 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w	; is this Labyrinth Zone?
0001AAAC 6600                       		bne.s	@notlabyrinth	; if not, branch
0001AAAE                            
0001AAAE 31F8 FE50 F648             		move.w	($FFFFFE50).w,(v_waterpos2).w
0001AAB4 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001AABA 11F8 FE53 F64E             		move.b	($FFFFFE53).w,(f_wtr_state).w
0001AAC0                            
0001AAC0                            	@notlabyrinth:
0001AAC0 4A38 FE30                  		tst.b	(v_lastlamp).w
0001AAC4 6A00                       		bpl.s	locret_170F6
0001AAC6 3038 FE32                  		move.w	($FFFFFE32).w,d0
0001AACA 0440 00A0                  		subi.w	#$A0,d0
0001AACE 31C0 F728                  		move.w	d0,(v_limitleft2).w
0001AAD2                            
0001AAD2                            locret_170F6:
0001AAD2 4E75                       		rts	
0001AAD2 4E75                       		rts	
0001AAD4                            Map_Lamp:	include	"_maps\Lamppost.asm"
0001AAD4                            ; --------------------------------------------------------------------------------
0001AAD4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001AAD4                            ; --------------------------------------------------------------------------------
0001AAD4                            
0001AAD4                            SME_JfaKr:	
0001AAD4 0000 0000                  		dc.w SME_JfaKr_A-SME_JfaKr, SME_JfaKr_3D-SME_JfaKr	
0001AAD8 0000 0000                  		dc.w SME_JfaKr_66-SME_JfaKr, SME_JfaKr_71-SME_JfaKr	
0001AADC 0000                       		dc.w SME_JfaKr_A4-SME_JfaKr	
0001AADE 0A                         SME_JfaKr_A:	dc.b $A	
0001AADF E401 0000 F8               		dc.b $E4, 1, 0, 0, $F8	
0001AAE4 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001AAE9 D401 0006 F8               		dc.b $D4, 1, 0, 6, $F8	
0001AAEE D401 0806 00               		dc.b $D4, 1, 8, 6, 0	
0001AAF3 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001AAF8 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001AAFD 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001AB02 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001AB07 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001AB0C 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001AB11 08                         SME_JfaKr_3D:	dc.b 8	
0001AB12 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001AB17 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001AB1C F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001AB21 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001AB26 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001AB2B 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001AB30 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001AB35 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001AB3A 02                         SME_JfaKr_66:	dc.b 2	
0001AB3B F801 0008 F8               		dc.b $F8, 1, 0, 8, $F8	
0001AB40 F801 0808 00               		dc.b $F8, 1, 8, 8, 0	
0001AB45 0A                         SME_JfaKr_71:	dc.b $A	
0001AB46 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001AB4B E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001AB50 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001AB55 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001AB5A 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001AB5F 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001AB64 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001AB69 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001AB6E D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001AB73 D401 0808 00               		dc.b $D4, 1, 8, 8, 0	
0001AB78 0A                         SME_JfaKr_A4:	dc.b $A	
0001AB79 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001AB7E E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001AB83 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001AB88 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001AB8D 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001AB92 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001AB97 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001AB9C 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001ABA1 D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001ABA6 D401 2808 00               		dc.b $D4, 1, $28, 8, 0	
0001ABAC 00                         		even
0001ABAC 00                         		even
0001ABAC                            		include	"_incObj\7D Hidden Bonuses.asm"
0001ABAC                            ; ---------------------------------------------------------------------------
0001ABAC                            ; Object 7D - hidden points at the end of a level
0001ABAC                            ; ---------------------------------------------------------------------------
0001ABAC                            
0001ABAC                            HiddenBonus:
0001ABAC 7000                       		moveq	#0,d0
0001ABAE 1028 0024                  		move.b	obRoutine(a0),d0
0001ABB2 323B 0000                  		move.w	Bonus_Index(pc,d0.w),d1
0001ABB6 4EFB 1000                  		jmp	Bonus_Index(pc,d1.w)
0001ABBA                            ; ===========================================================================
0001ABBA 0000                       Bonus_Index:	dc.w Bonus_Main-Bonus_Index
0001ABBC 0000                       		dc.w Bonus_Display-Bonus_Index
0001ABBE                            
0001ABBE =00000030                  bonus_timelen:	equ $30		; length of time to display bonus sprites
0001ABBE                            ; ===========================================================================
0001ABBE                            
0001ABBE                            Bonus_Main:	; Routine 0
0001ABBE 7410                       		moveq	#$10,d2
0001ABC0 3602                       		move.w	d2,d3
0001ABC2 D643                       		add.w	d3,d3
0001ABC4 43F8 D000                  		lea	(v_player).w,a1
0001ABC8 3029 0008                  		move.w	obX(a1),d0
0001ABCC 9068 0008                  		sub.w	obX(a0),d0
0001ABD0 D042                       		add.w	d2,d0
0001ABD2 B043                       		cmp.w	d3,d0
0001ABD4 6400                       		bcc.s	bonu_chkdel
0001ABD6 3229 000C                  		move.w	obY(a1),d1
0001ABDA 9268 000C                  		sub.w	obY(a0),d1
0001ABDE D242                       		add.w	d2,d1
0001ABE0 B243                       		cmp.w	d3,d1
0001ABE2 6400                       		bcc.s	bonu_chkdel
0001ABE4 4A78 FE08                  		tst.w	(v_debuguse).w
0001ABE8 6600                       		bne.s	bonu_chkdel
0001ABEA 4A38 F7CD                  		tst.b	(f_bigring).w
0001ABEE 6600                       		bne.s	bonu_chkdel
0001ABF0 5428 0024                  		addq.b	#2,obRoutine(a0)
0001ABF4 217C 0000 0000 0004        		move.l	#Map_Bonus,obMap(a0)
0001ABFC 317C 84B6 0002             		move.w	#$84B6,obGfx(a0)
0001AC02 0028 0004 0001             		ori.b	#4,obRender(a0)
0001AC08 317C 0000 0018             		move.w	#0,obPriority(a0)
0001AC0E 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001AC14 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0001AC1A 317C 0077 0030             		move.w	#119,bonus_timelen(a0) ; set display time to 2 seconds
0001AC2A 7000                       		moveq	#0,d0
0001AC2C 1028 0028                  		move.b	obSubtype(a0),d0
0001AC30 D040                       		add.w	d0,d0
0001AC32 303B 0000                  		move.w	obj7d_points(pc,d0.w),d0 ; load bonus points array
0001AC36 4EB9 0000 0000             		jsr	(AddPoints).l
0001AC3C                            
0001AC3C                            bonu_chkdel:
0001AC58 4E75                       		rts	
0001AC5A                            
0001AC5A                            	@delete:
0001AC5A 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001AC60                            
0001AC60                            ; ===========================================================================
0001AC60 0000                       obj7d_points:	dc.w 0			; Bonus	points array
0001AC62 03E8                       		dc.w 1000
0001AC64 0064                       		dc.w 100
0001AC66 000A                       		dc.w 10
0001AC68                            ; ===========================================================================
0001AC68                            
0001AC68                            Bonus_Display:	; Routine 2
0001AC68 5368 0030                  		subq.w	#1,bonus_timelen(a0) ; decrement display time
0001AC6C 6B00                       		bmi.s	Bonus_Display_Delete		; if time is zero, branch
0001AC8A 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001AC90                            
0001AC90                            Bonus_Display_Delete:	
0001AC90 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001AC90 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001AC96                            Map_Bonus:	include	"_maps\Hidden Bonuses.asm"
0001AC96                            ; ---------------------------------------------------------------------------
0001AC96                            ; Sprite mappings - hidden points at the end of	a level
0001AC96                            ; ---------------------------------------------------------------------------
0001AC96                            Map_Bonus_internal:
0001AC96 0000                       		dc.w @blank-Map_Bonus_internal
0001AC98 0000                       		dc.w @10000-Map_Bonus_internal
0001AC9A 0000                       		dc.w @1000-Map_Bonus_internal
0001AC9C 0000                       		dc.w @100-Map_Bonus_internal
0001AC9E 00                         @blank:		dc.b 0
0001AC9F 01                         @10000:		dc.b 1
0001ACA0 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001ACA5 01                         @1000:		dc.b 1
0001ACA6 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001ACAB 01                         @100:		dc.b 1
0001ACAC F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001ACB2 00                         		even
0001ACB2 00                         		even
0001ACB2                            
0001ACB2                            		include	"_incObj\8A Credits.asm"
0001ACB2                            ; ---------------------------------------------------------------------------
0001ACB2                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001ACB2                            ; ---------------------------------------------------------------------------
0001ACB2                            
0001ACB2                            CreditsText:
0001ACB2 7000                       		moveq	#0,d0
0001ACB4 1028 0024                  		move.b	obRoutine(a0),d0
0001ACB8 323B 0000                  		move.w	Cred_Index(pc,d0.w),d1
0001ACBC 4EFB 1000                  		jmp	Cred_Index(pc,d1.w)
0001ACC0                            ; ===========================================================================
0001ACC0 0000                       Cred_Index:	dc.w Cred_Main-Cred_Index
0001ACC2 0000                       		dc.w Cred_Display-Cred_Index
0001ACC4                            ; ===========================================================================
0001ACC4                            
0001ACC4                            Cred_Main:	; Routine 0
0001ACC4 5428 0024                  		addq.b	#2,obRoutine(a0)
0001ACC8 317C 0120 0008             		move.w	#$120,obX(a0)
0001ACCE 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0001ACD4 217C 0000 0000 0004        		move.l	#Map_Cred,obMap(a0)
0001ACDC 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0001ACE2 3038 FFF4                  		move.w	(v_creditsnum).w,d0 ; load credits index number
0001ACE6 1140 001A                  		move.b	d0,obFrame(a0)	; display appropriate sprite
0001ACEA 117C 0000 0001             		move.b	#0,obRender(a0)
0001ACF0 317C 0000 0018             		move.w	#0,obPriority(a0)
0001ACF6                            
0001ACF6 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w ; is the mode #4 (title screen)?
0001ACFC 6600                       		bne.s	Cred_Display	; if not, branch
0001ACFE                            
0001ACFE 317C 00A6 0002             		move.w	#$A6,obGfx(a0)
0001AD04 117C 000A 001A             		move.b	#$A,obFrame(a0)	; display "SONIC TEAM PRESENTS"
0001AD0A 4A38 FFE3                  		tst.b	(f_creditscheat).w ; is hidden credits cheat on?
0001AD0E 6700                       		beq.s	Cred_Display	; if not, branch
0001AD10 0C38 0072 F604             		cmpi.b	#btnABC+btnDn,(v_jpadhold1).w ; is A+B+C+Down being pressed? ($72)
0001AD16 6600                       		bne.s	Cred_Display	; if not, branch
0001AD18 31FC 0EEE FBC0             		move.w	#cWhite,(v_pal_dry_dup+$40).w ; 3rd palette, 1st entry = white
0001AD1E 31FC 0880 FBC2             		move.w	#$880,(v_pal_dry_dup+$42).w ; 3rd palette, 2nd entry = cyan
0001AD24 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001AD2A                            ; ===========================================================================
0001AD2A                            
0001AD2A                            Cred_Display:	; Routine 2
0001AD2A 4EF9 0000 F57E             		jmp	DisplaySprite
0001AD2A 4EF9 0000 F57E             		jmp	DisplaySprite
0001AD30                            Map_Cred:	include	"_maps\Credits.asm"
0001AD30                            ; ---------------------------------------------------------------------------
0001AD30                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001AD30                            ; ---------------------------------------------------------------------------
0001AD30                            Map_Cred_internal:
0001AD30 0000                       		dc.w @staff-Map_Cred_internal
0001AD32 0000                       		dc.w @gameplan-Map_Cred_internal
0001AD34 0000                       		dc.w @program-Map_Cred_internal
0001AD36 0000                       		dc.w @character-Map_Cred_internal
0001AD38 0000                       		dc.w @design-Map_Cred_internal
0001AD3A 0000                       		dc.w @soundproduce-Map_Cred_internal
0001AD3C 0000                       		dc.w @soundprogram-Map_Cred_internal
0001AD3E 0000                       		dc.w @thanks-Map_Cred_internal
0001AD40 0000                       		dc.w @presentedby-Map_Cred_internal
0001AD42 0000                       		dc.w @tryagain-Map_Cred_internal
0001AD44 0000                       		dc.w @sonicteam-Map_Cred_internal
0001AD46 0E                         @staff:		dc.b $E			 ; SONIC TEAM STAFF
0001AD47 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
0001AD4C F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
0001AD51 F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
0001AD56 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
0001AD5B F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
0001AD60 F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
0001AD65 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
0001AD6A F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001AD6F F809 0008 08               		dc.b $F8, 9, 0,	8, 8
0001AD74 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
0001AD79 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
0001AD7E F805 0004 48               		dc.b $F8, 5, 0,	4, $48
0001AD83 F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
0001AD88 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
0001AD8D 0E                         @gameplan:	dc.b $E	;  GAME PLAN CAROL YAS | GAME PLAN SORRA    
0001AD8E 9005 0000 90               		dc.b $90, 5, 0, 0, $90		; G
0001AD93 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
0001AD98 9009 0008 B0               		dc.b $90, 9, 0, 8, $B0		; M
0001AD9D 9005 000E C4               		dc.b $90, 5, 0, $0E, $C4	; E
0001ADA2 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001ADA7 9005 0012 E4               		dc.b $90, 5, 0, $12, $E4	; P
0001ADAC 9005 0016 F4               		dc.b $90, 5, 0, $16, $F4	; L
0001ADB1 9005 0004 04               		dc.b $90, 5, 0, 4, $4		; A
0001ADB6 9005 001A 14               		dc.b $90, 5, 0, $1A, $14	; N
0001ADBB                            
0001ADBB B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001ADC0 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001ADC5 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001ADCA B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001ADCF B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001ADD4 1B                         @program:	dc.b $1B	;  CHARACTER DESIGN BIGISLAND | PROGRAM ANGELKOR INVISIBLE SUN  
0001ADD5 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001ADDA 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001ADDF 9005 0026 B0               		dc.b $90, 5, 0, $26, $B0	; O
0001ADE4 9005 0000 C0               		dc.b $90, 5, 0, 0, $C0		; G
0001ADE9 9005 0022 D0               		dc.b $90, 5, 0, $22, $D0	; R
0001ADEE 9005 0004 E0               		dc.b $90, 5, 0, 4, $E0		; A
0001ADF3 9009 0008 F0               		dc.b $90, 9, 0, 8, $F0		; M
0001ADF8                            
0001ADF8 B805 0004 C0               		dc.b $B8, 5, 0, 4, $C0		; A
0001ADFD B805 001A D0               		dc.b $B8, 5, 0, $1A, $D0	; N
0001AE02 B805 0000 E0               		dc.b $B8, 5, 0, 0, $E0		; G
0001AE07 B805 000E F0               		dc.b $B8, 5, 0, $0E, $F0	; E
0001AE0C B805 0016 00               		dc.b $B8, 5, 0, $16, $0	; L
0001AE11 B805 0058 10               		dc.b $B8, 5, 0, $58, $10	; K
0001AE16 B805 0026 20               		dc.b $B8, 5, 0, $26, $20	; O
0001AE1B B805 0022 30               		dc.b $B8, 5, 0, $22, $30	; R
0001AE20                            
0001AE20 D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	; I
0001AE25 D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	; N
0001AE2A                            
0001AE2A D801 0046 E8               		dc.b $D8, 1, 0, $46, $E8	; I
0001AE2F D805 002E F0               		dc.b $D8, 5, 0, $2E, $F0	; S
0001AE34 D801 0046 00               		dc.b $D8, 1, 0, $46, $0	; I
0001AE39 D805 0048 08               		dc.b $D8, 5, 0, $48, $8	; B
0001AE3E D805 0016 18               		dc.b $D8, 5, 0, $16, $18	; L
0001AE43 D805 000E 28               		dc.b $D8, 5, 0, $0E, $28	; E
0001AE48                            
0001AE48 F805 002E C0               		dc.b $F8, 5, 0, $2E, $C0	; S
0001AE4D F805 0032 D0               		dc.b $F8, 5, 0, $32, $D0	; U
0001AE52 F805 001A E0               		dc.b $F8, 5, 0, $1A, $E0	; N
0001AE57 08                         @character:	dc.b $8	;  CHARACTER DESIGN BIGISLAND | ART SORRA    
0001AE58 9005 0004 90               		dc.b $90, 5, 0, 4, $90		; A
0001AE5D 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001AE62 9005 003E B0               		dc.b $90, 5, 0, $3E, $B0	; T
0001AE67                            
0001AE67 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001AE6C B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001AE71 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001AE76 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001AE7B B805 0004 00               		dc.b $B8, 5, 0, 4, $0
0001AE80 0B                         @design:	dc.b $B	;  DESIGN JINYA PHENIX RIE | DESIGN SORRA    
0001AE81 9005 0042 90               		dc.b $90, 5, 0, $42, $90	; D
0001AE86 9005 000E A0               		dc.b $90, 5, 0, $0E, $A0	; E
0001AE8B 9005 002E B0               		dc.b $90, 5, 0, $2E, $B0	; S
0001AE90 9001 0046 C0               		dc.b $90, 1, 0, $46, $C0	; I
0001AE95 9005 0000 C8               		dc.b $90, 5, 0, 0, $C8		; G
0001AE9A 9005 001A D8               		dc.b $90, 5, 0, $1A, $D8	; N
0001AE9F                            
0001AE9F B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001AEA4 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001AEA9 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001AEAE B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001AEB3 B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001AEB8 1C                         @soundproduce:	dc.b $1C	;  SOUND PRODUCE MASATO NAKAMURA | SOUND PORT MR JOKER PRODUCTION   
0001AEB9 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001AEBE 9005 0026 A0               		dc.b $90, 5, 0, $26, $A0	; O
0001AEC3 9005 0032 B0               		dc.b $90, 5, 0, $32, $B0	; U
0001AEC8 9005 001A C0               		dc.b $90, 5, 0, $1A, $C0	; N
0001AECD 9005 0042 D0               		dc.b $90, 5, 0, $42, $D0	; D
0001AED2 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001AED7 9005 0012 F0               		dc.b $90, 5, 0, $12, $F0	; P
0001AEDC 9005 0026 00               		dc.b $90, 5, 0, $26, $0	; O
0001AEE1 9005 0022 10               		dc.b $90, 5, 0, $22, $10	; R
0001AEE6 9005 003E 20               		dc.b $90, 5, 0, $3E, $20	; T
0001AEEB                            
0001AEEB B809 0008 C0               		dc.b $B8, 9, 0, 8, $C0		; M
0001AEF0 B805 0022 D4               		dc.b $B8, 5, 0, $22, $D4	; R
0001AEF5 B800 0060 0C               		dc.b $B8, 0, 0, $60, $C    ;Space
0001AEFA B805 004C F4               		dc.b $B8, 5, 0, $4C, $F4	; J
0001AEFF B805 0026 04               		dc.b $B8, 5, 0, $26, $4	; O
0001AF04 B805 0058 14               		dc.b $B8, 5, 0, $58, $14	; K
0001AF09 B805 000E 24               		dc.b $B8, 5, 0, $0E, $24	; E
0001AF0E B805 0022 34               		dc.b $B8, 5, 0, $22, $34	; R
0001AF13                            
0001AF13 D805 0012 C0               		dc.b $D8, 5, 0, $12, $C0	; P
0001AF18 D805 0022 D0               		dc.b $D8, 5, 0, $22, $D0	; R
0001AF1D D805 0026 E0               		dc.b $D8, 5, 0, $26, $E0	; O
0001AF22 D805 0042 F0               		dc.b $D8, 5, 0, $42, $F0	; D
0001AF27 D805 0032 00               		dc.b $D8, 5, 0, $32, $0	; U
0001AF2C D805 001E 10               		dc.b $D8, 5, 0, $1E, $10	; C
0001AF31 D805 003E 20               		dc.b $D8, 5, 0, $3E, $20	; T
0001AF36 D801 0046 30               		dc.b $D8, 1, 0, $46, $30	; I
0001AF3B D805 0026 38               		dc.b $D8, 5, 0, $26, $38	; O
0001AF40 D805 001A 48               		dc.b $D8, 5, 0, $1A, $48	; N
0001AF45 17                         @soundprogram:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
0001AF46 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
0001AF4B D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
0001AF50 D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
0001AF55 D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
0001AF5A D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
0001AF5F D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001AF64 D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
0001AF69 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
0001AF6E D005 0000 28               		dc.b $D0, 5, 0,	0, $28
0001AF73 D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
0001AF78 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
0001AF7D D009 0008 58               		dc.b $D0, 9, 0,	8, $58
0001AF82 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
0001AF87 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
0001AF8C 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
0001AF91 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
0001AF96 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
0001AF9B 0005 0004 14               		dc.b 0,	5, 0, 4, $14
0001AFA0 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
0001AFA5 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
0001AFAA 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
0001AFAF 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
0001AFB4 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
0001AFB9 11                         @thanks:	dc.b $11	;  SPECIAL THANKS FUJIO MINEGISHI PAPA | SPECIAL  THANKS YOU   
0001AFBA 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001AFBF 9005 0012 A0               		dc.b $90, 5, 0, $12, $A0	; P
0001AFC4 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001AFC9 9005 001E C0               		dc.b $90, 5, 0, $1E, $C0	; C
0001AFCE 9001 0046 D0               		dc.b $90, 1, 0, $46, $D0	; I
0001AFD3 9005 0004 D8               		dc.b $90, 5, 0, 4, $D8		; A
0001AFD8 9005 0016 E8               		dc.b $90, 5, 0, $16, $E8	; L
0001AFDD 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001AFE2                            
0001AFE2 B805 003E C0               		dc.b $B8, 5, 0, $3E, $C0	; T
0001AFE7 B805 003A D0               		dc.b $B8, 5, 0, $3A, $D0	; H
0001AFEC B805 0004 E0               		dc.b $B8, 5, 0, 4, $E0		; A
0001AFF1 B805 001A F0               		dc.b $B8, 5, 0, $1A, $F0	; N
0001AFF6 B805 0058 00               		dc.b $B8, 5, 0, $58, $0	; K
0001AFFB B805 002E 10               		dc.b $B8, 5, 0, $2E, $10	; S
0001B000                            
0001B000 D805 002A C0               		dc.b $D8, 5, 0, $2A, $C0	; Y
0001B005 D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001B00A D805 0032 E0               		dc.b $D8, 5, 0, $32, $E0	; U
0001B00F 10                         @presentedby:	dc.b $10	;  PRESENTED BY SEGA | PRESENTED BY SORRA   
0001B010 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001B015 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001B01A 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001B01F 9005 002E C0               		dc.b $90, 5, 0, $2E, $C0	; S
0001B024 9005 000E D0               		dc.b $90, 5, 0, $0E, $D0	; E
0001B029 9005 001A E0               		dc.b $90, 5, 0, $1A, $E0	; N
0001B02E 9005 003E F0               		dc.b $90, 5, 0, $3E, $F0	; T
0001B033 9005 000E 00               		dc.b $90, 5, 0, $0E, $0	; E
0001B038 9005 0042 10               		dc.b $90, 5, 0, $42, $10	; D
0001B03D                            
0001B03D B805 0048 C0               		dc.b $B8, 5, 0, $48, $C0	; B
0001B042 B805 002A D0               		dc.b $B8, 5, 0, $2A, $D0	; Y
0001B047                            
0001B047 D805 002E C0               		dc.b $D8, 5, 0, $2E, $C0	; S
0001B04C D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001B051 D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
0001B056 D805 0022 F0               		dc.b $D8, 5, 0, $22, $F0	; R
0001B05B D805 0004 00               		dc.b $D8, 5, 0, 4, $0		; A
0001B060 08                         @tryagain:	dc.b 8			 ; TRY AGAIN
0001B061 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
0001B066 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
0001B06B 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001B070 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
0001B075 3005 0000 08               		dc.b $30, 5, 0,	0, 8
0001B07A 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0001B07F 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
0001B084 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
0001B089 0E                         @sonicteam:	dc.b $E	;  SONIC TEAM PRESENTS | SORRA PRESENTS
0001B08A E805 002E D0               		dc.b $E8, 5, 0, $2E, $D0	; S
0001B08F E805 0026 E0               		dc.b $E8, 5, 0, $26, $E0	; O
0001B094 E805 0022 F0               		dc.b $E8, 5, 0, $22, $F0	; R
0001B099 E805 0022 00               		dc.b $E8, 5, 0, $22, $0	; R
0001B09E E805 0004 10               		dc.b $E8, 5, 0, 4, $10		; A
0001B0A3 E800 0060 0C               		dc.b $E8, 0, 0, $60, $C   	 ; Space
0001B0A8                            
0001B0A8 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0	; P
0001B0AD 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0	; R
0001B0B2 0005 000E E0               		dc.b 0,	5, 0, $E, $E0	; E
0001B0B7 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0	; S
0001B0BC 0005 000E 00               		dc.b 0,	5, 0, $E, 0	; E
0001B0C1 0005 001A 10               		dc.b 0,	5, 0, $1A, $10	; N
0001B0C6 0005 003E 20               		dc.b 0,	5, 0, $3E, $20	; T
0001B0CB 0005 002E 30               		dc.b 0,	5, 0, $2E, $30	; S
0001B0D0                            		even
0001B0D0                            		even
0001B0D0                            
0001B0D0                            		include	"_incObj\3D Boss - Green Hill (part 1).asm"
0001B0D0                            ; ---------------------------------------------------------------------------
0001B0D0                            ; Object 3D - Eggman (GHZ)
0001B0D0                            ; ---------------------------------------------------------------------------
0001B0D0                            
0001B0D0                            BossGreenHill:
0001B0D0 7000                       		moveq	#0,d0
0001B0D2 1028 0024                  		move.b	obRoutine(a0),d0
0001B0D6 323B 0000                  		move.w	BGHZ_Index(pc,d0.w),d1
0001B0DA 4EFB 1000                  		jmp	BGHZ_Index(pc,d1.w)
0001B0DE                            ; ===========================================================================
0001B0DE 0000                       BGHZ_Index:	dc.w BGHZ_Main-BGHZ_Index
0001B0E0 0000                       		dc.w BGHZ_ShipMain-BGHZ_Index
0001B0E2 0000                       		dc.w BGHZ_FaceMain-BGHZ_Index
0001B0E4 0000                       		dc.w BGHZ_FlameMain-BGHZ_Index
0001B0E6                            
0001B0E6 0200                       BGHZ_ObjData:	dc.b 2,	0		; routine counter, animation
0001B0E8 0401                       		dc.b 4,	1
0001B0EA 0607                       		dc.b 6,	7
0001B0EC                            ; ===========================================================================
0001B0EC                            
0001B0EC                            BGHZ_Main:	; Routine 0
0001B0EC 45F9 0001 B0E6             		lea	(BGHZ_ObjData).l,a2
0001B0F2 2248                       		movea.l	a0,a1
0001B0F4 7202                       		moveq	#2,d1
0001B0F6 6000                       		bra.s	BGHZ_LoadBoss
0001B0F8                            ; ===========================================================================
0001B0F8                            
0001B0F8                            BGHZ_Loop:
0001B0F8 4EB9 0000 FB2E             		jsr	(FindNextFreeObj).l
0001B0FE 6600                       		bne.s	loc_17772
0001B100                            
0001B100                            BGHZ_LoadBoss:
0001B100 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B104 12BC 003D                  		move.b	#id_BossGreenHill,0(a1)
0001B108 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B10E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B114 237C 0000 0000 0004        		move.l	#Map_Eggman,obMap(a1)
0001B11C 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B122 137C 0004 0001             		move.b	#4,obRender(a1)
0001B128 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B12E 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001B134 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B138 2348 0034                  		move.l	a0,$34(a1)
0001B13C 51C9 FFBA                  		dbf	d1,BGHZ_Loop	; repeat sequence 2 more times
0001B140                            
0001B140                            loc_17772:
0001B140 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B146 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B14C 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B152 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B158                            
0001B158                            
0001B158                            BGHZ_ShipMain:	; Routine 2
0001B158 7000                       		moveq	#0,d0
0001B15A 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B15E 323B 0000                  		move.w	BGHZ_ShipIndex(pc,d0.w),d1
0001B162 4EBB 1000                  		jsr	BGHZ_ShipIndex(pc,d1.w)
0001B166 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001B16C 4EB9 0000 C634             		jsr	(AnimateSprite).l
0001B172 1028 0022                  		move.b	obStatus(a0),d0
0001B176 0200 0003                  		andi.b	#3,d0
0001B17A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B180 8128 0001                  		or.b	d0,obRender(a0)
0001B184 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001B18A                            ; ===========================================================================
0001B18A 0000                       BGHZ_ShipIndex:	dc.w BGHZ_ShipStart-BGHZ_ShipIndex
0001B18C 0000                       		dc.w BGHZ_MakeBall-BGHZ_ShipIndex
0001B18E 0000                       		dc.w BGHZ_ShipMove-BGHZ_ShipIndex
0001B190 0000                       		dc.w loc_17954-BGHZ_ShipIndex
0001B192 0000                       		dc.w loc_1797A-BGHZ_ShipIndex
0001B194 0000                       		dc.w loc_179AC-BGHZ_ShipIndex
0001B196 0000                       		dc.w loc_179F6-BGHZ_ShipIndex
0001B198                            ; ===========================================================================
0001B198                            
0001B198                            BGHZ_ShipStart:
0001B198 317C 0100 0012             		move.w	#$100,obVelY(a0) ; move ship down
0001B19E 6100 0000                  		bsr.w	BossMove
0001B1A2 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001B1A8 6600                       		bne.s	loc_177E6
0001B1AA 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop ship
0001B1B0 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto next routine
0001B1B4                            
0001B1B4                            loc_177E6:
0001B1B4 1028 003F                  		move.b	$3F(a0),d0
0001B1B8 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001B1BE EC40                       		asr.w	#6,d0
0001B1C0 D068 0038                  		add.w	$38(a0),d0
0001B1C4 3140 000C                  		move.w	d0,obY(a0)
0001B1C8 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B1CE 5428 003F                  		addq.b	#2,$3F(a0)
0001B1D2 0C28 0008 0025             		cmpi.b	#8,ob2ndRout(a0)
0001B1D8 6400                       		bcc.s	locret_1784A
0001B1DA 4A28 0022                  		tst.b	obStatus(a0)
0001B1DE 6B00                       		bmi.s	loc_1784C
0001B1E0 4A28 0020                  		tst.b	obColType(a0)
0001B1E4 6600                       		bne.s	locret_1784A
0001B1E6 4A28 003E                  		tst.b	$3E(a0)
0001B1EA 6600                       		bne.s	BGHZ_ShipFlash
0001B1EC 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001B1FC                            
0001B1FC                            BGHZ_ShipFlash:
0001B1FC 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1 ; load 2nd pallet, 2nd entry
0001B200 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001B202 4A51                       		tst.w	(a1)
0001B204 6600                       		bne.s	loc_1783C
0001B206 303C 0EEE                  		move.w	#cWhite,d0	; move 0EEE (white) to d0
0001B20A                            
0001B20A                            loc_1783C:
0001B20A 3280                       		move.w	d0,(a1)		; load color stored in	d0
0001B20C 5328 003E                  		subq.b	#1,$3E(a0)
0001B210 6600                       		bne.s	locret_1784A
0001B212 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B218                            
0001B218                            locret_1784A:
0001B218 4E75                       		rts	
0001B21A                            ; ===========================================================================
0001B21A                            
0001B21A                            loc_1784C:
0001B21A 7064                       		moveq	#100,d0
0001B21C 6100 0000                  		bsr.w	AddPoints
0001B220 117C 0008 0025             		move.b	#8,ob2ndRout(a0)
0001B226 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001B22C 4E75                       		rts	
0001B22C 4E75                       		rts	
0001B22E                            
0001B22E                            ; ---------------------------------------------------------------------------
0001B22E                            ; Defeated boss	subroutine
0001B22E                            ; ---------------------------------------------------------------------------
0001B22E                            
0001B22E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B22E                            
0001B22E                            
0001B22E                            BossDefeated:
0001B22E 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001B232 0200 0007                  		andi.b	#7,d0
0001B236 6600                       		bne.s	locret_178A2
0001B238 4EB9 0000 FB18             		jsr	(FindFreeObj).l
0001B23E 6600                       		bne.s	locret_178A2
0001B240 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1)	; load explosion object
0001B244 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B24A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B250 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001B256 3200                       		move.w	d0,d1
0001B258 7200                       		moveq	#0,d1
0001B25A 1200                       		move.b	d0,d1
0001B25C E409                       		lsr.b	#2,d1
0001B25E 0441 0020                  		subi.w	#$20,d1
0001B262 D369 0008                  		add.w	d1,obX(a1)
0001B266 E048                       		lsr.w	#8,d0
0001B268 E608                       		lsr.b	#3,d0
0001B26A D169 000C                  		add.w	d0,obY(a1)
0001B26E                            
0001B26E                            locret_178A2:
0001B26E 4E75                       		rts	
0001B270                            ; End of function BossDefeated
0001B270                            
0001B270                            ; ---------------------------------------------------------------------------
0001B270                            ; Subroutine to	move a boss
0001B270                            ; ---------------------------------------------------------------------------
0001B270                            
0001B270                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B270                            
0001B270                            
0001B270                            BossMove:
0001B270 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0001B276 E188                       		lsl.l	#8,d0
0001B278 D1A8 0030                  		add.l	d0,$30(a0)
0001B27C E18A                       		lsl.l	#8,d2
0001B27E D5A8 0038                  		add.l	d2,$38(a0)
0001B282 4E75                       		rts
0001B284                            ; End of function BossMove
0001B284                            
0001B284                            ; ===========================================================================
0001B284                            
0001B284                            		include	"_incObj\3D Boss - Green Hill (part 2).asm"
0001B284                            
0001B284                            BGHZ_MakeBall:
0001B284 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001B28A 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B290 6100 FFDE                  		bsr.w	BossMove
0001B294 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001B29A 6600                       		bne.s	loc_17916
0001B29C 317C 0000 0010             		move.w	#0,obVelX(a0)
0001B2A2 317C 0000 0012             		move.w	#0,obVelY(a0)
0001B2A8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B2AC 4EB9 0000 FB2E             		jsr	(FindNextFreeObj).l
0001B2B2 6600                       		bne.s	loc_17910
0001B2B4 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load swinging ball object
0001B2B8 3368 0300 0008             		move.w	$300(a0),obX(a1)
0001B2BE 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001B2C4 2348 0034                  		move.l	a0,$34(a1)
0001B2C8                            
0001B2C8                            loc_17910:
0001B2C8 317C 0077 003C             		move.w	#$77,$3C(a0)
0001B2CE                            
0001B2CE                            loc_17916:
0001B2CE 6000 FEE4                  		bra.w	loc_177E6
0001B2D2                            ; ===========================================================================
0001B2D2                            
0001B2D2                            BGHZ_ShipMove:
0001B2D2 5368 003C                  		subq.w	#1,$3C(a0)
0001B2D6 6A00                       		bpl.s	BGHZ_Reverse
0001B2D8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B2DC 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001B2E2 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move the ship sideways
0001B2E8 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001B2EE 6600                       		bne.s	BGHZ_Reverse
0001B2F0 317C 007F 003C             		move.w	#$7F,$3C(a0)
0001B2F6 317C 0040 0010             		move.w	#$40,obVelX(a0)
0001B2FC                            
0001B2FC                            BGHZ_Reverse:
0001B2FC 0828 0000 0022             		btst	#0,obStatus(a0)
0001B302 6600                       		bne.s	loc_17950
0001B304 4468 0010                  		neg.w	obVelX(a0)	; reverse direction of the ship
0001B308                            
0001B308                            loc_17950:
0001B308 6000 FEAA                  		bra.w	loc_177E6
0001B30C                            ; ===========================================================================
0001B30C                            
0001B30C                            loc_17954:
0001B30C 5368 003C                  		subq.w	#1,$3C(a0)
0001B310 6B00                       		bmi.s	loc_17960
0001B312 6100 FF5C                  		bsr.w	BossMove
0001B316 6000                       		bra.s	loc_17976
0001B318                            ; ===========================================================================
0001B318                            
0001B318                            loc_17960:
0001B318 0868 0000 0022             		bchg	#0,obStatus(a0)
0001B31E 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001B324 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001B328 317C 0000 0010             		move.w	#0,obVelX(a0)
0001B32E                            
0001B32E                            loc_17976:
0001B32E 6000 FE84                  		bra.w	loc_177E6
0001B332                            ; ===========================================================================
0001B332                            
0001B332                            loc_1797A:
0001B332 5368 003C                  		subq.w	#1,$3C(a0)
0001B336 6B00                       		bmi.s	loc_17984
0001B338 6000 FEF4                  		bra.w	BossDefeated
0001B33C                            ; ===========================================================================
0001B33C                            
0001B33C                            loc_17984:
0001B33C 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B342 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001B348 4268 0010                  		clr.w	obVelX(a0)
0001B34C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B350 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001B356 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001B35A 6600                       		bne.s	locret_179AA
0001B35C 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001B362                            
0001B362                            locret_179AA:
0001B362 4E75                       		rts	
0001B364                            ; ===========================================================================
0001B364                            
0001B364                            loc_179AC:
0001B364 5268 003C                  		addq.w	#1,$3C(a0)
0001B368 6700                       		beq.s	loc_179BC
0001B36A 6A00                       		bpl.s	loc_179C2
0001B36C 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B372 6000                       		bra.s	loc_179EE
0001B374                            ; ===========================================================================
0001B374                            
0001B374                            loc_179BC:
0001B374 4268 0012                  		clr.w	obVelY(a0)
0001B378 6000                       		bra.s	loc_179EE
0001B37A                            ; ===========================================================================
0001B37A                            
0001B37A                            loc_179C2:
0001B37A 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001B380 6500                       		bcs.s	loc_179DA
0001B382 6700                       		beq.s	loc_179E0
0001B384 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001B38A 6500                       		bcs.s	loc_179EE
0001B38C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B390 6000                       		bra.s	loc_179EE
0001B392                            ; ===========================================================================
0001B392                            
0001B392                            loc_179DA:
0001B392 5168 0012                  		subq.w	#8,obVelY(a0)
0001B396 6000                       		bra.s	loc_179EE
0001B398                            ; ===========================================================================
0001B398                            
0001B398                            loc_179E0:
0001B398 4268 0012                          clr.w    obVelY(a0)
0001B39C 4A38 FE2D                          tst.b     (v_invinc).w
0001B3A0 6600                               bne.s   @boss_invinc
0001B3A2 4A38 FE2E                          tst.b     (v_shoes).w
0001B3A6 6600                               bne.s   @boss_shoes
0001B3A8                            
0001B3A8 1038 F5C6                          move.b   (v_Saved_music),d0
0001B3AC 6000 0000                          bra.w      @boss_play
0001B3B0                            
0001B3B0                            @boss_invinc:
0001B3B0 103C 0000                          move.b #bgm_Invincible,d0
0001B3B4                            
0001B3B4                            @boss_shoes:
0001B3B4 103C 0000                          move.b #bgm_Ending,d0
0001B3B8                            
0001B3B8                            @boss_play:
0001B3B8 4EB8 129A                          jsr PlaySound
0001B3BC                            
0001B3BC                            loc_179EE:
0001B3BC 6100 FEB2                  		bsr.w	BossMove
0001B3C0 6000 FDF2                  		bra.w	loc_177E6
0001B3C4                            ; ===========================================================================
0001B3C4                            
0001B3C4                            loc_179F6:
0001B3C4 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001B3CA 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B3D0 0C78 2AC0 F72A             		cmpi.w	#$2AC0,(v_limitright2).w
0001B3D6 6700                       		beq.s	loc_17A10
0001B3D8 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B3DC 6000                       		bra.s	loc_17A16
0001B3DE                            ; ===========================================================================
0001B3DE                            
0001B3DE                            loc_17A10:
0001B3DE 4A28 0001                  		tst.b	obRender(a0)
0001B3E2 6A00                       		bpl.s	BGHZ_ShipDel
0001B3E4                            
0001B3E4                            loc_17A16:
0001B3E4 6100 FE8A                  		bsr.w	BossMove
0001B3E8 6000 FDCA                  		bra.w	loc_177E6
0001B3EC                            ; ===========================================================================
0001B3EC                            
0001B3EC                            BGHZ_ShipDel:
0001B3EC 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001B3F2                            ; ===========================================================================
0001B3F2                            
0001B3F2                            BGHZ_FaceMain:	; Routine 4
0001B3F2 7000                       		moveq	#0,d0
0001B3F4 7201                       		moveq	#1,d1
0001B3F6 2268 0034                  		movea.l	$34(a0),a1
0001B3FA 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B3FE 5900                       		subq.b	#4,d0
0001B400 6600                       		bne.s	loc_17A3E
0001B402 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
0001B408 6600                       		bne.s	loc_17A46
0001B40A 7204                       		moveq	#4,d1
0001B40C                            
0001B40C                            loc_17A3E:
0001B40C 5D00                       		subq.b	#6,d0
0001B40E 6B00                       		bmi.s	loc_17A46
0001B410 720A                       		moveq	#$A,d1
0001B412 6000                       		bra.s	loc_17A5A
0001B414                            ; ===========================================================================
0001B414                            
0001B414                            loc_17A46:
0001B414 4A29 0020                  		tst.b	obColType(a1)
0001B418 6600                       		bne.s	loc_17A50
0001B41A 7205                       		moveq	#5,d1
0001B41C 6000                       		bra.s	loc_17A5A
0001B41E                            ; ===========================================================================
0001B41E                            
0001B41E                            loc_17A50:
0001B41E 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B424 6500                       		bcs.s	loc_17A5A
0001B426 7204                       		moveq	#4,d1
0001B428                            
0001B428                            loc_17A5A:
0001B428 1141 001C                  		move.b	d1,obAnim(a0)
0001B42C 5500                       		subq.b	#2,d0
0001B42E 6600                       		bne.s	BGHZ_FaceDisp
0001B430 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B436 4A28 0001                  		tst.b	obRender(a0)
0001B43A 6A00                       		bpl.s	BGHZ_FaceDel
0001B43C                            
0001B43C                            BGHZ_FaceDisp:
0001B43C 6000                       		bra.s	BGHZ_Display
0001B43E                            ; ===========================================================================
0001B43E                            
0001B43E                            BGHZ_FaceDel:
0001B43E 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001B444                            ; ===========================================================================
0001B444                            
0001B444                            BGHZ_FlameMain:	; Routine 6
0001B444 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B44A 2268 0034                  		movea.l	$34(a0),a1
0001B44E 0C29 000C 0025             		cmpi.b	#$C,ob2ndRout(a1)
0001B454 6600                       		bne.s	loc_17A96
0001B456 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B45C 4A28 0001                  		tst.b	obRender(a0)
0001B460 6A00                       		bpl.s	BGHZ_FlameDel
0001B462 6000                       		bra.s	BGHZ_FlameDisp
0001B464                            ; ===========================================================================
0001B464                            
0001B464                            loc_17A96:
0001B464 3029 0010                  		move.w	obVelX(a1),d0
0001B468 6700                       		beq.s	BGHZ_FlameDisp
0001B46A 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B470                            
0001B470                            BGHZ_FlameDisp:
0001B470 6000                       		bra.s	BGHZ_Display
0001B472                            ; ===========================================================================
0001B472                            
0001B472                            BGHZ_FlameDel:
0001B472 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001B478                            ; ===========================================================================
0001B478                            
0001B478                            BGHZ_Display:
0001B478 2268 0034                  		movea.l	$34(a0),a1
0001B47C 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B482 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B488 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B48E 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001B494 4EB9 0000 C634             		jsr	(AnimateSprite).l
0001B49A 1028 0022                  		move.b	obStatus(a0),d0
0001B49E 0200 0003                  		andi.b	#3,d0
0001B4A2 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B4A8 8128 0001                  		or.b	d0,obRender(a0)
0001B4AC 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001B4AC 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001B4B2                            		include	"_incObj\48 Eggman's Swinging Ball.asm"
0001B4B2                            ; ---------------------------------------------------------------------------
0001B4B2                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001B4B2                            ; ---------------------------------------------------------------------------
0001B4B2                            
0001B4B2                            BossBall:
0001B4B2 7000                       		moveq	#0,d0
0001B4B4 1028 0024                  		move.b	obRoutine(a0),d0
0001B4B8 323B 0000                  		move.w	GBall_Index(pc,d0.w),d1
0001B4BC 4EFB 1000                  		jmp	GBall_Index(pc,d1.w)
0001B4C0                            ; ===========================================================================
0001B4C0 0000                       GBall_Index:	dc.w GBall_Main-GBall_Index
0001B4C2 0000                       		dc.w GBall_Base-GBall_Index
0001B4C4 0000                       		dc.w GBall_Display2-GBall_Index
0001B4C6 0000                       		dc.w loc_17C68-GBall_Index
0001B4C8 0000                       		dc.w GBall_ChkVanish-GBall_Index
0001B4CA                            ; ===========================================================================
0001B4CA                            
0001B4CA                            GBall_Main:	; Routine 0
0001B4CA 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B4CE 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0001B4D4 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001B4DA 217C 0000 0000 0004        		move.l	#Map_BossItems,obMap(a0)
0001B4E2 317C 046C 0002             		move.w	#$46C,obGfx(a0)
0001B4E8 45E8 0028                  		lea	obSubtype(a0),a2
0001B4EC 14FC 0000                  		move.b	#0,(a2)+
0001B4F0 7205                       		moveq	#5,d1
0001B4F2 2248                       		movea.l	a0,a1
0001B4F4 6000                       		bra.s	loc_17B60
0001B4F6                            ; ===========================================================================
0001B4F6                            
0001B4F6                            GBall_MakeLinks:
0001B4F6 4EB9 0000 FB2E             		jsr	(FindNextFreeObj).l
0001B4FC 6600                       		bne.s	GBall_MakeBall
0001B4FE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B504 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B50A 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load chain link object
0001B50E 137C 0006 0024             		move.b	#6,obRoutine(a1)
0001B514 237C 0000 941C 0004        		move.l	#Map_Swing_GHZ,obMap(a1)
0001B51C 337C 0380 0002             		move.w	#$380,obGfx(a1)
0001B522 137C 0001 001A             		move.b	#1,obFrame(a1)
0001B528 5228 0028                  		addq.b	#1,obSubtype(a0)
0001B52C                            
0001B52C                            loc_17B60:
0001B52C 3A09                       		move.w	a1,d5
0001B52E 0445 D000                  		subi.w	#$D000,d5
0001B532 EC4D                       		lsr.w	#6,d5
0001B534 0245 007F                  		andi.w	#$7F,d5
0001B538 14C5                       		move.b	d5,(a2)+
0001B53A 137C 0004 0001             		move.b	#4,obRender(a1)
0001B540 137C 0008 0014             		move.b	#8,obActWid(a1)
0001B546 337C 0300 0018             		move.w	#$300,obPriority(a1)
0001B54C 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001B552 51C9 FFA2                  		dbf	d1,GBall_MakeLinks ; repeat sequence 5 more times
0001B556                            
0001B556                            GBall_MakeBall:
0001B556 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001B55C 237C 0000 9978 0004        		move.l	#Map_GBall,obMap(a1) ; load different mappings for final link
0001B564 337C 43AA 0002             		move.w	#$43AA,obGfx(a1) ; use different graphics
0001B56A 137C 0001 001A             		move.b	#1,obFrame(a1)
0001B570 337C 0280 0018             		move.w	#$280,obPriority(a1)
0001B576 137C 0081 0020             		move.b	#$81,obColType(a1) ; make object hurt Sonic
0001B57C 4E75                       		rts	
0001B57E                            ; ===========================================================================
0001B57E                            
0001B57E 0010 2030 4060             GBall_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001B584                            
0001B584                            ; ===========================================================================
0001B584                            
0001B584                            GBall_Base:	; Routine 2
0001B584 47F9 0001 B57E             		lea	(GBall_PosData).l,a3
0001B58A 45E8 0028                  		lea	obSubtype(a0),a2
0001B58E 7C00                       		moveq	#0,d6
0001B590 1C1A                       		move.b	(a2)+,d6
0001B592                            
0001B592                            loc_17BC6:
0001B592 7800                       		moveq	#0,d4
0001B594 181A                       		move.b	(a2)+,d4
0001B596 ED4C                       		lsl.w	#6,d4
0001B598 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
0001B59E 2244                       		movea.l	d4,a1
0001B5A0 101B                       		move.b	(a3)+,d0
0001B5A2 B029 003C                  		cmp.b	$3C(a1),d0
0001B5A6 6700                       		beq.s	loc_17BE0
0001B5A8 5229 003C                  		addq.b	#1,$3C(a1)
0001B5AC                            
0001B5AC                            loc_17BE0:
0001B5AC 51CE FFE4                  		dbf	d6,loc_17BC6
0001B5B0                            
0001B5B0 B029 003C                  		cmp.b	$3C(a1),d0
0001B5B4 6600                       		bne.s	loc_17BFA
0001B5B6 2268 0034                  		movea.l	$34(a0),a1
0001B5BA 0C29 0006 0025             		cmpi.b	#6,ob2ndRout(a1)
0001B5C0 6600                       		bne.s	loc_17BFA
0001B5C2 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B5C6                            
0001B5C6                            loc_17BFA:
0001B5C6 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001B5CC 6700                       		beq.s	GBall_Display
0001B5CE 5268 0032                  		addq.w	#1,$32(a0)
0001B5D2                            
0001B5D2                            GBall_Display:
0001B5D2 6100 0000                  		bsr.w	sub_17C2A
0001B5D6 1028 0026                  		move.b	obAngle(a0),d0
0001B5DA 4EB9 0000 938E             		jsr	(Swing_Move2).l
0001B5E0 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001B5E6                            ; ===========================================================================
0001B5E6                            
0001B5E6                            GBall_Display2:	; Routine 4
0001B5E6 6100 0000                  		bsr.w	sub_17C2A
0001B5EA 4EB9 0000 934E             		jsr	(Obj48_Move).l
0001B5F0 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001B5F6                            
0001B5F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B5F6                            
0001B5F6                            
0001B5F6                            sub_17C2A:
0001B5F6 2268 0034                  		movea.l	$34(a0),a1
0001B5FA 0628 0020 001B             		addi.b	#$20,obAniFrame(a0)
0001B600 6400                       		bcc.s	loc_17C3C
0001B602 0868 0000 001A             		bchg	#0,obFrame(a0)
0001B608                            
0001B608                            loc_17C3C:
0001B608 3169 0008 003A             		move.w	obX(a1),$3A(a0)
0001B60E 3029 000C                  		move.w	obY(a1),d0
0001B612 D068 0032                  		add.w	$32(a0),d0
0001B616 3140 0038                  		move.w	d0,$38(a0)
0001B61A 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B620 4A29 0022                  		tst.b	obStatus(a1)
0001B624 6A00                       		bpl.s	locret_17C66
0001B626 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001B62A 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001B630                            
0001B630                            locret_17C66:
0001B630 4E75                       		rts	
0001B632                            ; End of function sub_17C2A
0001B632                            
0001B632                            ; ===========================================================================
0001B632                            
0001B632                            loc_17C68:	; Routine 6
0001B632 2268 0034                  		movea.l	$34(a0),a1
0001B636 4A29 0022                  		tst.b	obStatus(a1)
0001B63A 6A00                       		bpl.s	GBall_Display3
0001B63C 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001B640 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001B646                            
0001B646                            GBall_Display3:
0001B646 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001B64C                            ; ===========================================================================
0001B64C                            
0001B64C                            GBall_ChkVanish:; Routine 8
0001B64C 7000                       		moveq	#0,d0
0001B64E 4A28 001A                  		tst.b	obFrame(a0)
0001B652 6600                       		bne.s	GBall_Vanish
0001B654 5200                       		addq.b	#1,d0
0001B656                            
0001B656                            GBall_Vanish:
0001B656 1140 001A                  		move.b	d0,obFrame(a0)
0001B65A 2268 0034                  		movea.l	$34(a0),a1
0001B65E 4A29 0022                  		tst.b	obStatus(a1)
0001B662 6A00                       		bpl.s	GBall_Display4
0001B664 117C 0000 0020             		move.b	#0,obColType(a0)
0001B66A 6100 FBC2                  		bsr.w	BossDefeated
0001B66E 5328 003C                  		subq.b	#1,$3C(a0)
0001B672 6A00                       		bpl.s	GBall_Display4
0001B674 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001B678 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001B67E                            
0001B67E                            GBall_Display4:
0001B67E 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001B67E 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001B684                            		include	"_anim\Eggman.asm"
0001B684                            ; ---------------------------------------------------------------------------
0001B684                            ; Animation script - Eggman (bosses)
0001B684                            ; ---------------------------------------------------------------------------
0001B684 0000                       Ani_Eggman:	dc.w @ship-Ani_Eggman
0001B686 0000                       		dc.w @facenormal1-Ani_Eggman
0001B688 0000                       		dc.w @facenormal2-Ani_Eggman
0001B68A 0000                       		dc.w @facenormal3-Ani_Eggman
0001B68C 0000                       		dc.w @facelaugh-Ani_Eggman
0001B68E 0000                       		dc.w @facehit-Ani_Eggman
0001B690 0000                       		dc.w @facepanic-Ani_Eggman
0001B692 0000                       		dc.w @blank-Ani_Eggman
0001B694 0000                       		dc.w @flame1-Ani_Eggman
0001B696 0000                       		dc.w @flame2-Ani_Eggman
0001B698 0000                       		dc.w @facedefeat-Ani_Eggman
0001B69A 0000                       		dc.w @escapeflame-Ani_Eggman
0001B69C 0F00 FF                    @ship:		dc.b $F, 0, afEnd
0001B6A0 00                         		even
0001B6A0 0501 02FF                  @facenormal1:	dc.b 5,	1, 2, afEnd
0001B6A4                            		even
0001B6A4 0301 02FF                  @facenormal2:	dc.b 3,	1, 2, afEnd
0001B6A8                            		even
0001B6A8 0101 02FF                  @facenormal3:	dc.b 1,	1, 2, afEnd
0001B6AC                            		even
0001B6AC 0403 04FF                  @facelaugh:	dc.b 4,	3, 4, afEnd
0001B6B0                            		even
0001B6B0 1F05 01FF                  @facehit:	dc.b $1F, 5, 1,	afEnd
0001B6B4                            		even
0001B6B4 0306 01FF                  @facepanic:	dc.b 3,	6, 1, afEnd
0001B6B8                            		even
0001B6B8 0F0A FF                    @blank:		dc.b $F, $A, afEnd
0001B6BC 00                         		even
0001B6BC 0308 09FF                  @flame1:	dc.b 3,	8, 9, afEnd
0001B6C0                            		even
0001B6C0 0108 09FF                  @flame2:	dc.b 1,	8, 9, afEnd
0001B6C4                            		even
0001B6C4 0F07 FF                    @facedefeat:	dc.b $F, 7, afEnd
0001B6C8 00                         		even
0001B6C8 0209 080B 0C0B 0C09 08FE+  @escapeflame:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, afBack, 2
0001B6D4 00                         		even
0001B6D4 00                         		even
0001B6D4                            Map_Eggman:	include	"_maps\Eggman.asm"
0001B6D4                            ; --------------------------------------------------------------------------------
0001B6D4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001B6D4                            ; --------------------------------------------------------------------------------
0001B6D4                            
0001B6D4                            SME_F_pyS:	
0001B6D4 0000 0000                  		dc.w SME_F_pyS_1A-SME_F_pyS, SME_F_pyS_34-SME_F_pyS	
0001B6D8 0000 0000                  		dc.w SME_F_pyS_44-SME_F_pyS, SME_F_pyS_54-SME_F_pyS	
0001B6DC 0000 0000                  		dc.w SME_F_pyS_69-SME_F_pyS, SME_F_pyS_7E-SME_F_pyS	
0001B6E0 0000 0000                  		dc.w SME_F_pyS_93-SME_F_pyS, SME_F_pyS_A8-SME_F_pyS	
0001B6E4 0000 0000                  		dc.w SME_F_pyS_CC-SME_F_pyS, SME_F_pyS_D2-SME_F_pyS	
0001B6E8 0000 0000                  		dc.w SME_F_pyS_D8-SME_F_pyS, SME_F_pyS_D9-SME_F_pyS	
0001B6EC 0000                       		dc.w SME_F_pyS_E4-SME_F_pyS	
0001B6EE 05                         SME_F_pyS_1A:	dc.b 5	
0001B6EF EC01 000A E4               		dc.b $EC, 1, 0, $A, $E4	
0001B6F4 FC0E 2010 E4               		dc.b $FC, $E, $20, $10, $E4	
0001B6F9 FC0E 201C 04               		dc.b $FC, $E, $20, $1C, 4	
0001B6FE 140C 2028 EC               		dc.b $14, $C, $20, $28, $EC	
0001B703 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C	
0001B708 03                         SME_F_pyS_34:	dc.b 3	
0001B709 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001B70E EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC	
0001B713 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001B718 03                         SME_F_pyS_44:	dc.b 3	
0001B719 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001B71E EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001B723 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001B728 04                         SME_F_pyS_54:	dc.b 4	
0001B729 E408 003D F4               		dc.b $E4, 8, 0, $3D, $F4	
0001B72E EC09 0040 EC               		dc.b $EC, 9, 0, $40, $EC	
0001B733 EC05 0046 04               		dc.b $EC, 5, 0, $46, 4	
0001B738 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001B73D 04                         SME_F_pyS_69:	dc.b 4	
0001B73E E408 004A F4               		dc.b $E4, 8, 0, $4A, $F4	
0001B743 EC09 004D EC               		dc.b $EC, 9, 0, $4D, $EC	
0001B748 EC05 0053 04               		dc.b $EC, 5, 0, $53, 4	
0001B74D EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001B752 04                         SME_F_pyS_7E:	dc.b 4	
0001B753 E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001B758 EC09 005A EC               		dc.b $EC, 9, 0, $5A, $EC	
0001B75D EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001B762 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001B767 04                         SME_F_pyS_93:	dc.b 4	
0001B768 E404 0064 04               		dc.b $E4, 4, 0, $64, 4	
0001B76D E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001B772 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001B777 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001B77C 07                         SME_F_pyS_A8:	dc.b 7	
0001B77D E409 0066 F4               		dc.b $E4, 9, 0, $66, $F4	
0001B782 E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001B787 EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001B78C EC01 0035 EC               		dc.b $EC, 1, 0, $35, $EC	
0001B791 F400 005D F4               		dc.b $F4, 0, 0, $5D, $F4	
0001B796 F400 005F FC               		dc.b $F4, 0, 0, $5F, $FC	
0001B79B EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001B7A0 01                         SME_F_pyS_CC:	dc.b 1	
0001B7A1 0405 002D 22               		dc.b 4, 5, 0, $2D, $22	
0001B7A6 01                         SME_F_pyS_D2:	dc.b 1	
0001B7A7 0405 0031 22               		dc.b 4, 5, 0, $31, $22	
0001B7AC 00                         SME_F_pyS_D8:	dc.b 0	
0001B7AD 02                         SME_F_pyS_D9:	dc.b 2	
0001B7AE 0008 012A 22               		dc.b 0, 8, 1, $2A, $22	
0001B7B3 0808 112A 22               		dc.b 8, 8, $11, $2A, $22	
0001B7B8 02                         SME_F_pyS_E4:	dc.b 2	
0001B7B9 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22	
0001B7BE 0001 0139 3A               		dc.b 0, 1, 1, $39, $3A	
0001B7C4 00                         		even
0001B7C4 00                         		even
0001B7C4                            Map_BossItems:	include	"_maps\Boss Items.asm"
0001B7C4                            ; ---------------------------------------------------------------------------
0001B7C4                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001B7C4                            ; ---------------------------------------------------------------------------
0001B7C4                            Map_BossItems_internal:
0001B7C4 0000                       		dc.w @chainanchor1-Map_BossItems_internal
0001B7C6 0000                       		dc.w @chainanchor2-Map_BossItems_internal
0001B7C8 0000                       		dc.w @cross-Map_BossItems_internal
0001B7CA 0000                       		dc.w @widepipe-Map_BossItems_internal
0001B7CC 0000                       		dc.w @pipe-Map_BossItems_internal
0001B7CE 0000                       		dc.w @spike-Map_BossItems_internal
0001B7D0 0000                       		dc.w @legmask-Map_BossItems_internal
0001B7D2 0000                       		dc.w @legs-Map_BossItems_internal
0001B7D4 01                         @chainanchor1:	dc.b 1
0001B7D5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; GHZ boss
0001B7DA 02                         @chainanchor2:	dc.b 2
0001B7DB FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; GHZ boss
0001B7E0 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001B7E6 00                         		even
0001B7E6 01                         @cross:		dc.b 1
0001B7E7 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; unknown
0001B7EC 01                         @widepipe:	dc.b 1
0001B7ED 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4	; SLZ boss
0001B7F2 01                         @pipe:		dc.b 1
0001B7F3 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8	; MZ boss
0001B7F8 04                         @spike:		dc.b 4
0001B7F9 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8 ; SYZ boss
0001B7FE F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001B803 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001B808 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001B80E 00                         		even
0001B80E 02                         @legmask:	dc.b 2
0001B80F 0005 0017 00               		dc.b 0,	5, 0, $17, 0	; FZ post-boss: sprite covering part of legs
0001B814 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001B81A 00                         		even
0001B81A 02                         @legs:		dc.b 2
0001B81B 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0	; FZ post-boss
0001B820 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001B826 00                         		even
0001B826 00                         		even
0001B826                            		include	"_incObj\77 Boss - Labyrinth.asm"
0001B826                            ; ---------------------------------------------------------------------------
0001B826                            ; Object 77 - Eggman (LZ)
0001B826                            ; ---------------------------------------------------------------------------
0001B826                            
0001B826                            BossLabyrinth:
0001B826 7000                       		moveq	#0,d0
0001B828 1028 0024                  		move.b	obRoutine(a0),d0
0001B82C 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001B830 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
0001B834                            ; ===========================================================================
0001B834 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001B836 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001B838 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001B83A 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001B83C                            
0001B83C 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001B83E 0401                       		dc.b 4,	1
0001B840 0607                       		dc.b 6,	7
0001B842                            ; ===========================================================================
0001B842                            
0001B842                            Obj77_Main:	; Routine 0
0001B842 317C 1E10 0008             		move.w	#$1E10,obX(a0)
0001B848 317C 05C0 000C             		move.w	#$5C0,obY(a0)
0001B84E 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B854 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B85A 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B860 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B866 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001B86C 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001B870 2248                       		movea.l	a0,a1
0001B872 7202                       		moveq	#2,d1
0001B874 6000                       		bra.s	Obj77_LoadBoss
0001B876                            ; ===========================================================================
0001B876                            
0001B876                            Obj77_Loop:
0001B876 4EB9 0000 FB2E             		jsr	(FindNextFreeObj).l
0001B87C 6600                       		bne.s	Obj77_ShipMain
0001B87E 12BC 0077                  		move.b	#id_BossLabyrinth,0(a1)
0001B882 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B888 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B88E                            
0001B88E                            Obj77_LoadBoss:
0001B88E 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B894 4229 0025                  		clr.b	ob2ndRout(a1)
0001B898 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B89C 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B8A0 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0001B8A6 237C 0001 B6D4 0004        		move.l	#Map_Eggman,obMap(a1)
0001B8AE 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B8B4 137C 0004 0001             		move.b	#4,obRender(a1)
0001B8BA 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B8C0 2348 0034                  		move.l	a0,$34(a1)
0001B8C4 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001B8C8                            
0001B8C8                            Obj77_ShipMain:	; Routine 2
0001B8C8 43F8 D000                  		lea	(v_player).w,a1
0001B8CC 7000                       		moveq	#0,d0
0001B8CE 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B8D2 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001B8D6 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001B8DA 43F9 0001 B684             		lea	(Ani_Eggman).l,a1
0001B8E0 4EB9 0000 C634             		jsr	(AnimateSprite).l
0001B8E6 7003                       		moveq	#3,d0
0001B8E8 C028 0022                  		and.b	obStatus(a0),d0
0001B8EC 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B8F2 8128 0001                  		or.b	d0,obRender(a0)
0001B8F6 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001B8FC                            ; ===========================================================================
0001B8FC 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001B900 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
0001B904 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001B908 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001B90C                            ; ===========================================================================
0001B90C                            
0001B90C                            loc_17F1E:
0001B90C 3029 0008                  		move.w	obX(a1),d0
0001B910 0C40 1DA0                  		cmpi.w	#$1DA0,d0
0001B914 6500                       		bcs.s	loc_17F38
0001B916 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B91C 317C 0060 0010             		move.w	#$60,obVelX(a0)
0001B922 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B926                            
0001B926                            loc_17F38:
0001B926 6100 F948                  		bsr.w	BossMove
0001B92A 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B930 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B936                            
0001B936                            loc_17F48:
0001B936 4A28 003D                  		tst.b	$3D(a0)
0001B93A 6600                       		bne.s	loc_17F8E
0001B93C 4A28 0022                  		tst.b	obStatus(a0)
0001B940 6B00                       		bmi.s	loc_17F92
0001B942 4A28 0020                  		tst.b	obColType(a0)
0001B946 6600                       		bne.s	locret_17F8C
0001B948 4A28 003E                  		tst.b	$3E(a0)
0001B94C 6600                       		bne.s	loc_17F70
0001B94E 117C 0020 003E             		move.b	#$20,$3E(a0)
0001B95E                            
0001B95E                            loc_17F70:
0001B95E 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B962 7000                       		moveq	#0,d0
0001B964 4A51                       		tst.w	(a1)
0001B966 6600                       		bne.s	loc_17F7E
0001B968 303C 0EEE                  		move.w	#cWhite,d0
0001B96C                            
0001B96C                            loc_17F7E:
0001B96C 3280                       		move.w	d0,(a1)
0001B96E 5328 003E                  		subq.b	#1,$3E(a0)
0001B972 6600                       		bne.s	locret_17F8C
0001B974 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B97A                            
0001B97A                            locret_17F8C:
0001B97A 4E75                       		rts	
0001B97C                            ; ===========================================================================
0001B97C                            
0001B97C                            loc_17F8E:
0001B97C 6000 F8B0                  		bra.w	BossDefeated
0001B980                            ; ===========================================================================
0001B980                            
0001B980                            loc_17F92:
0001B980 7064                       		moveq	#100,d0
0001B982 6100 0000                  		bsr.w	AddPoints
0001B986 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001B98C 4E75                       		rts	
0001B98E                            ; ===========================================================================
0001B98E                            
0001B98E                            loc_17FA0:
0001B98E 70FE                       		moveq	#-2,d0
0001B990 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001B996 6500                       		bcs.s	loc_17FB6
0001B998 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001B99E 4268 0010                  		clr.w	obVelX(a0)
0001B9A2 5240                       		addq.w	#1,d0
0001B9A4                            
0001B9A4                            loc_17FB6:
0001B9A4 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001B9AA 6E00                       		bgt.s	loc_17FCA
0001B9AC 317C 0500 0038             		move.w	#$500,$38(a0)
0001B9B2 4268 0012                  		clr.w	obVelY(a0)
0001B9B6 5240                       		addq.w	#1,d0
0001B9B8                            
0001B9B8                            loc_17FCA:
0001B9B8 6600                       		bne.s	loc_17FDC
0001B9BA 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001B9C0 317C FE00 0012             		move.w	#-$200,obVelY(a0)
0001B9C6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B9CA                            
0001B9CA                            loc_17FDC:
0001B9CA 6000 FF5A                  		bra.w	loc_17F38
0001B9CE                            ; ===========================================================================
0001B9CE                            
0001B9CE                            loc_17FE0:
0001B9CE 70FE                       		moveq	#-2,d0
0001B9D0 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001B9D6 6500                       		bcs.s	loc_17FF6
0001B9D8 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001B9DE 4268 0010                  		clr.w	obVelX(a0)
0001B9E2 5240                       		addq.w	#1,d0
0001B9E4                            
0001B9E4                            loc_17FF6:
0001B9E4 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001B9EA 6E00                       		bgt.s	loc_1800A
0001B9EC 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001B9F2 4268 0012                  		clr.w	obVelY(a0)
0001B9F6 5240                       		addq.w	#1,d0
0001B9F8                            
0001B9F8                            loc_1800A:
0001B9F8 6600                       		bne.s	loc_1801A
0001B9FA 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001BA00 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BA04 4228 003F                  		clr.b	$3F(a0)
0001BA08                            
0001BA08                            loc_1801A:
0001BA08 6000 FF1C                  		bra.w	loc_17F38
0001BA0C                            ; ===========================================================================
0001BA0C                            
0001BA0C                            loc_1801E:
0001BA0C 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001BA12 6E00                       		bgt.s	loc_1804E
0001BA14 317C 0100 0038             		move.w	#$100,$38(a0)
0001BA1A 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001BA20 317C FF80 0012             		move.w	#-$80,obVelY(a0)
0001BA26 4A28 003D                  		tst.b	$3D(a0)
0001BA2A 6700                       		beq.s	loc_18046
0001BA2C E1E8 0010                  		asl	obVelX(a0)
0001BA30 E1E8 0012                  		asl	obVelY(a0)
0001BA34                            
0001BA34                            loc_18046:
0001BA34 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BA38 6000 FEEC                  		bra.w	loc_17F38
0001BA3C                            ; ===========================================================================
0001BA3C                            
0001BA3C                            loc_1804E:
0001BA3C 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BA42 5428 003F                  		addq.b	#2,$3F(a0)
0001BA46 1028 003F                  		move.b	$3F(a0),d0
0001BA4A 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001BA50 4A41                       		tst.w	d1
0001BA52 6A00                       		bpl.s	loc_1806C
0001BA54 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BA5A                            
0001BA5A                            loc_1806C:
0001BA5A E840                       		asr.w	#4,d0
0001BA5C 4840                       		swap	d0
0001BA5E 4240                       		clr.w	d0
0001BA60 D0A8 0030                  		add.l	$30(a0),d0
0001BA64 4840                       		swap	d0
0001BA66 3140 0008                  		move.w	d0,obX(a0)
0001BA6A 3028 0012                  		move.w	obVelY(a0),d0
0001BA6E 3238 D00C                  		move.w	(v_player+obY).w,d1
0001BA72 9268 000C                  		sub.w	obY(a0),d1
0001BA76 6500                       		bcs.s	loc_180A2
0001BA78 0441 0048                  		subi.w	#$48,d1
0001BA7C 6500                       		bcs.s	loc_180A2
0001BA7E E240                       		asr.w	#1,d0
0001BA80 0441 0028                  		subi.w	#$28,d1
0001BA84 6500                       		bcs.s	loc_180A2
0001BA86 E240                       		asr.w	#1,d0
0001BA88 0441 0028                  		subi.w	#$28,d1
0001BA8C 6500                       		bcs.s	loc_180A2
0001BA8E 7000                       		moveq	#0,d0
0001BA90                            
0001BA90                            loc_180A2:
0001BA90 48C0                       		ext.l	d0
0001BA92 E180                       		asl.l	#8,d0
0001BA94 4A28 003D                  		tst.b	$3D(a0)
0001BA98 6700                       		beq.s	loc_180AE
0001BA9A D080                       		add.l	d0,d0
0001BA9C                            
0001BA9C                            loc_180AE:
0001BA9C D1A8 0038                  		add.l	d0,$38(a0)
0001BAA0 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001BAA6 6000 FE8E                  		bra.w	loc_17F48
0001BAAA                            ; ===========================================================================
0001BAAA                            
0001BAAA                            loc_180BC:
0001BAAA 70FE                       		moveq	#-2,d0
0001BAAC 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001BAB2 6500                       		bcs.s	loc_180D2
0001BAB4 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001BABA 4268 0010                  		clr.w	obVelX(a0)
0001BABE 5240                       		addq.w	#1,d0
0001BAC0                            
0001BAC0                            loc_180D2:
0001BAC0 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001BAC6 6E00                       		bgt.s	loc_180E6
0001BAC8 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001BACE 4268 0012                  		clr.w	obVelY(a0)
0001BAD2 5240                       		addq.w	#1,d0
0001BAD4                            
0001BAD4                            loc_180E6:
0001BAD4 6600                       		bne.s	loc_180F2
0001BAD6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BADA 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BAE0                            
0001BAE0                            loc_180F2:
0001BAE0 6000 FE44                  		bra.w	loc_17F38
0001BAE4                            ; ===========================================================================
0001BAE4                            
0001BAE4                            loc_180F6:
0001BAE4 4A28 003D                  		tst.b	$3D(a0)
0001BAE8 6600                       		bne.s	loc_18112
0001BAEA 0C69 1EC8 0008             		cmpi.w	#$1EC8,obX(a1)
0001BAF0 6D00                       		blt.s	loc_18126
0001BAF2 0C69 00F0 000C             		cmpi.w	#$F0,obY(a1)
0001BAF8 6E00                       		bgt.s	loc_18126
0001BAFA 117C 0032 003C             		move.b	#$32,$3C(a0)
0001BB00                            
0001BB00                            loc_18112:
0001BB00 4A38 FE2D                          tst.b     (v_invinc).w
0001BB04 6600                               bne.s   @boss_invinc
0001BB06                            
0001BB06 1038 F5C6                          move.b   (v_Saved_music),d0
0001BB0A 6000 0000                          bra.w      @boss_play
0001BB0E                            
0001BB0E                            @boss_invinc:
0001BB0E 103C 0000                          move.b #bgm_Invincible,d0
0001BB12                            
0001BB12                            @boss_play:
0001BB12 4EB8 129A                          jsr PlaySound
0001BB16 4238 F7AA                          clr.b    (f_lockscreen).w
0001BB1A 08E8 0000 0022                     bset    #0,obStatus(a0)
0001BB20 5428 0025                          addq.b    #2,ob2ndRout(a0)
0001BB24                            
0001BB24                            loc_18126:
0001BB24 6000 FE00                  		bra.w	loc_17F38
0001BB28                            ; ===========================================================================
0001BB28                            
0001BB28                            loc_1812A:
0001BB28 4A28 003D                  		tst.b	$3D(a0)
0001BB2C 6600                       		bne.s	loc_18136
0001BB2E 5328 003C                  		subq.b	#1,$3C(a0)
0001BB32 6600                       		bne.s	loc_1814E
0001BB34                            
0001BB34                            loc_18136:
0001BB34 4228 003C                  		clr.b	$3C(a0)
0001BB38 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001BB3E 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001BB44 4228 003D                  		clr.b	$3D(a0)
0001BB48 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BB4C                            
0001BB4C                            loc_1814E:
0001BB4C 6000 FDD8                  		bra.w	loc_17F38
0001BB50                            ; ===========================================================================
0001BB50                            
0001BB50                            loc_18152:
0001BB50 0C78 2030 F72A             		cmpi.w	#$2030,(v_limitright2).w
0001BB56 6400                       		bcc.s	loc_18160
0001BB58 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001BB5C 6000                       		bra.s	loc_18166
0001BB5E                            ; ===========================================================================
0001BB5E                            
0001BB5E                            loc_18160:
0001BB5E 4A28 0001                  		tst.b	obRender(a0)
0001BB62 6A00                       		bpl.s	Obj77_ShipDel
0001BB64                            
0001BB64                            loc_18166:
0001BB64 6000 FDC0                  		bra.w	loc_17F38
0001BB68                            ; ===========================================================================
0001BB68                            
0001BB68                            Obj77_ShipDel:
0001BB68 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001BB6E                            ; ===========================================================================
0001BB6E                            
0001BB6E                            Obj77_FaceMain:	; Routine 4
0001BB6E 2268 0034                  		movea.l	$34(a0),a1
0001BB72 1011                       		move.b	(a1),d0
0001BB74 B010                       		cmp.b	(a0),d0
0001BB76 6600                       		bne.s	Obj77_FaceDel
0001BB78 7000                       		moveq	#0,d0
0001BB7A 1029 0025                  		move.b	ob2ndRout(a1),d0
0001BB7E 7201                       		moveq	#1,d1
0001BB80 4A28 003D                  		tst.b	$3D(a0)
0001BB84 6700                       		beq.s	loc_1818C
0001BB86 720A                       		moveq	#$A,d1
0001BB88 6000                       		bra.s	loc_181A0
0001BB8A                            ; ===========================================================================
0001BB8A                            
0001BB8A                            loc_1818C:
0001BB8A 4A29 0020                  		tst.b	obColType(a1)
0001BB8E 6600                       		bne.s	loc_18196
0001BB90 7205                       		moveq	#5,d1
0001BB92 6000                       		bra.s	loc_181A0
0001BB94                            ; ===========================================================================
0001BB94                            
0001BB94                            loc_18196:
0001BB94 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001BB9A 6500                       		bcs.s	loc_181A0
0001BB9C 7204                       		moveq	#4,d1
0001BB9E                            
0001BB9E                            loc_181A0:
0001BB9E 1141 001C                  		move.b	d1,obAnim(a0)
0001BBA2 0C00 000E                  		cmpi.b	#$E,d0
0001BBA6 6600                       		bne.s	loc_181B6
0001BBA8 117C 0006 001C             		move.b	#6,obAnim(a0)
0001BBAE 4A28 0001                  		tst.b	obRender(a0)
0001BBB2 6A00                       		bpl.s	Obj77_FaceDel
0001BBB4                            
0001BBB4                            loc_181B6:
0001BBB4 6000                       		bra.s	Obj77_Display
0001BBB6                            ; ===========================================================================
0001BBB6                            
0001BBB6                            Obj77_FaceDel:
0001BBB6 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001BBBC                            ; ===========================================================================
0001BBBC                            
0001BBBC                            Obj77_FlameMain:; Routine 6
0001BBBC 117C 0007 001C             		move.b	#7,obAnim(a0)
0001BBC2 2268 0034                  		movea.l	$34(a0),a1
0001BBC6 1011                       		move.b	(a1),d0
0001BBC8 B010                       		cmp.b	(a0),d0
0001BBCA 6600                       		bne.s	Obj77_FlameDel
0001BBCC 0C29 000E 0025             		cmpi.b	#$E,ob2ndRout(a1)
0001BBD2 6600                       		bne.s	loc_181F0
0001BBD4 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001BBDA 4A28 0001                  		tst.b	1(a0)
0001BBDE 6A00                       		bpl.s	Obj77_FlameDel
0001BBE0 6000                       		bra.s	loc_181F0
0001BBE2                            ; ===========================================================================
0001BBE2 4A69 0010                  		tst.w	obVelX(a1)
0001BBE6 6700                       		beq.s	loc_181F0
0001BBE8 117C 0008 001C             		move.b	#8,obAnim(a0)
0001BBEE                            
0001BBEE                            loc_181F0:
0001BBEE 6000                       		bra.s	Obj77_Display
0001BBF0                            ; ===========================================================================
0001BBF0                            
0001BBF0                            Obj77_FlameDel:
0001BBF0 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001BBF6                            ; ===========================================================================
0001BBF6                            
0001BBF6                            Obj77_Display:
0001BBF6 43F9 0001 B684             		lea	(Ani_Eggman).l,a1
0001BBFC 4EB9 0000 C634             		jsr	(AnimateSprite).l
0001BC02 2268 0034                  		movea.l	$34(a0),a1
0001BC06 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001BC0C 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001BC12 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001BC18 7003                       		moveq	#3,d0
0001BC1A C028 0022                  		and.b	obStatus(a0),d0
0001BC1E 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BC24 8128 0001                  		or.b	d0,obRender(a0)
0001BC28 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001BC28 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001BC2E                            		include	"_incObj\73 Boss - Marble.asm"
0001BC2E                            ; ---------------------------------------------------------------------------
0001BC2E                            ; Object 73 - Eggman (MZ)
0001BC2E                            ; ---------------------------------------------------------------------------
0001BC2E                            
0001BC2E                            BossMarble:
0001BC2E 7000                       		moveq	#0,d0
0001BC30 1028 0024                  		move.b	obRoutine(a0),d0
0001BC34 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001BC38 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001BC3C                            ; ===========================================================================
0001BC3C 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001BC3E 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001BC40 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001BC42 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001BC44 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001BC46                            
0001BC46 0200 0200                  Obj73_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001BC4A 0401 0200                  		dc.b 4,	1, $02, $00
0001BC4E 0607 0200                  		dc.b 6,	7, $02, $00
0001BC52 0800 0180                  		dc.b 8,	0, $01, $80
0001BC56                            ; ===========================================================================
0001BC56                            
0001BC56                            Obj73_Main:	; Routine 0
0001BC56 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001BC5C 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001BC62 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BC68 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001BC6E 45FA FFD6                  		lea	Obj73_ObjData(pc),a2
0001BC72 2248                       		movea.l	a0,a1
0001BC74 7203                       		moveq	#3,d1
0001BC76 6000                       		bra.s	Obj73_LoadBoss
0001BC78                            ; ===========================================================================
0001BC78                            
0001BC78                            Obj73_Loop:
0001BC78 4EB9 0000 FB2E             		jsr	(FindNextFreeObj).l
0001BC7E 6600                       		bne.s	Obj73_ShipMain
0001BC80 12BC 0073                  		move.b	#id_BossMarble,0(a1)
0001BC84 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BC8A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BC90                            
0001BC90                            Obj73_LoadBoss:
0001BC90 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BC96 4229 0025                  		clr.b	ob2ndRout(a1)
0001BC9A 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001BC9E 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001BCA2 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001BCA6 237C 0001 B6D4 0004        		move.l	#Map_Eggman,obMap(a1)
0001BCAE 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001BCB4 137C 0004 0001             		move.b	#4,obRender(a1)
0001BCBA 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001BCC0 2348 0034                  		move.l	a0,$34(a1)
0001BCC4 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001BCC8                            
0001BCC8                            Obj73_ShipMain:	; Routine 2
0001BCC8 7000                       		moveq	#0,d0
0001BCCA 1028 0025                  		move.b	ob2ndRout(a0),d0
0001BCCE 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001BCD2 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001BCD6 43F9 0001 B684             		lea	(Ani_Eggman).l,a1
0001BCDC 4EB9 0000 C634             		jsr	(AnimateSprite).l
0001BCE2 7003                       		moveq	#3,d0
0001BCE4 C028 0022                  		and.b	obStatus(a0),d0
0001BCE8 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BCEE 8128 0001                  		or.b	d0,obRender(a0)
0001BCF2 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001BCF8                            ; ===========================================================================
0001BCF8 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001BCFA 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001BCFC 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001BCFE 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001BD00 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001BD02                            ; ===========================================================================
0001BD02                            
0001BD02                            loc_18302:
0001BD02 1028 003F                  		move.b	$3F(a0),d0
0001BD06 5428 003F                  		addq.b	#2,$3F(a0)
0001BD0A 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001BD10 E440                       		asr.w	#2,d0
0001BD12 3140 0012                  		move.w	d0,obVelY(a0)
0001BD16 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001BD1C 6100 F552                  		bsr.w	BossMove
0001BD20 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001BD26 6600                       		bne.s	loc_18334
0001BD28 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BD2C 4228 0028                  		clr.b	obSubtype(a0)
0001BD30 42A8 0010                  		clr.l	obVelX(a0)
0001BD34                            
0001BD34                            loc_18334:
0001BD34 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001BD3A 1140 0034                  		move.b	d0,$34(a0)
0001BD3E                            
0001BD3E                            loc_1833E:
0001BD3E 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001BD44 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001BD4A 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0001BD50 6400                       		bcc.s	locret_18390
0001BD52 4A28 0022                  		tst.b	obStatus(a0)
0001BD56 6B00                       		bmi.s	loc_18392
0001BD58 4A28 0020                  		tst.b	obColType(a0)
0001BD5C 6600                       		bne.s	locret_18390
0001BD5E 4A28 003E                  		tst.b	$3E(a0)
0001BD62 6600                       		bne.s	loc_18374
0001BD64 117C 0028 003E             		move.b	#$28,$3E(a0)
0001BD74                            
0001BD74                            loc_18374:
0001BD74 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001BD78 7000                       		moveq	#0,d0
0001BD7A 4A51                       		tst.w	(a1)
0001BD7C 6600                       		bne.s	loc_18382
0001BD7E 303C 0EEE                  		move.w	#cWhite,d0
0001BD82                            
0001BD82                            loc_18382:
0001BD82 3280                       		move.w	d0,(a1)
0001BD84 5328 003E                  		subq.b	#1,$3E(a0)
0001BD88 6600                       		bne.s	locret_18390
0001BD8A 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BD90                            
0001BD90                            locret_18390:
0001BD90 4E75                       		rts	
0001BD92                            ; ===========================================================================
0001BD92                            
0001BD92                            loc_18392:
0001BD92 7064                       		moveq	#100,d0
0001BD94 6100 0000                  		bsr.w	AddPoints
0001BD98 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
0001BD9E 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001BDA4 4268 0010                  		clr.w	obVelX(a0)
0001BDA8 4E75                       		rts	
0001BDAA                            ; ===========================================================================
0001BDAA                            
0001BDAA                            loc_183AA:
0001BDAA 7000                       		moveq	#0,d0
0001BDAC 1028 0028                  		move.b	obSubtype(a0),d0
0001BDB0 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001BDB4 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001BDB8 0228 0006 0028             		andi.b	#6,obSubtype(a0)
0001BDBE 6000 FF7E                  		bra.w	loc_1833E
0001BDC2                            ; ===========================================================================
0001BDC2 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001BDC4 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001BDC6 0000                       		dc.w loc_183CA-off_183C2
0001BDC8 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001BDCA                            ; ===========================================================================
0001BDCA                            
0001BDCA                            loc_183CA:
0001BDCA 4A68 0010                  		tst.w	obVelX(a0)
0001BDCE 6600                       		bne.s	loc_183FE
0001BDD0 7040                       		moveq	#$40,d0
0001BDD2 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001BDD8 6700                       		beq.s	loc_183E6
0001BDDA 6500                       		bcs.s	loc_183DE
0001BDDC 4440                       		neg.w	d0
0001BDDE                            
0001BDDE                            loc_183DE:
0001BDDE 3140 0012                  		move.w	d0,obVelY(a0)
0001BDE2 6000 F48C                  		bra.w	BossMove
0001BDE6                            ; ===========================================================================
0001BDE6                            
0001BDE6                            loc_183E6:
0001BDE6 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001BDEC 317C 0100 0012             		move.w	#$100,obVelY(a0)
0001BDF2 0828 0000 0022             		btst	#0,obStatus(a0)
0001BDF8 6600                       		bne.s	loc_183FE
0001BDFA 4468 0010                  		neg.w	obVelX(a0)
0001BDFE                            
0001BDFE                            loc_183FE:
0001BDFE 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001BE04 6400                       		bcc.s	Obj73_MakeLava
0001BE06 6100 F468                  		bsr.w	BossMove
0001BE0A 5968 0012                  		subq.w	#4,obVelY(a0)
0001BE0E                            
0001BE0E                            Obj73_MakeLava:
0001BE0E 5328 0034                  		subq.b	#1,$34(a0)
0001BE12 6400                       		bcc.s	loc_1845C
0001BE14 4EB9 0000 FB18             		jsr	(FindFreeObj).l
0001BE1A 6600                       		bne.s	loc_1844A
0001BE1C 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
0001BE20 337C 02E8 000C             		move.w	#$2E8,obY(a1)	; set Y	position
0001BE26 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001BE2C 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001BE32 80FC 0050                  		divu.w	#$50,d0
0001BE36 4840                       		swap	d0
0001BE38 0640 1878                  		addi.w	#$1878,d0
0001BE3C 3340 0008                  		move.w	d0,obX(a1)
0001BE40 EE09                       		lsr.b	#7,d1
0001BE42 337C 00FF 0028             		move.w	#$FF,obSubtype(a1)
0001BE48                            
0001BE48                            loc_1844A:
0001BE48 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001BE4E 0200 001F                  		andi.b	#$1F,d0
0001BE52 0600 0040                  		addi.b	#$40,d0
0001BE56 1140 0034                  		move.b	d0,$34(a0)
0001BE5A                            
0001BE5A                            loc_1845C:
0001BE5A 0828 0000 0022             		btst	#0,obStatus(a0)
0001BE60 6700                       		beq.s	loc_18474
0001BE62 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001BE68 6D00                       		blt.s	locret_1849C
0001BE6A 317C 1910 0030             		move.w	#$1910,$30(a0)
0001BE70 6000                       		bra.s	loc_18482
0001BE72                            ; ===========================================================================
0001BE72                            
0001BE72                            loc_18474:
0001BE72 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001BE78 6E00                       		bgt.s	locret_1849C
0001BE7A 317C 1830 0030             		move.w	#$1830,$30(a0)
0001BE80                            
0001BE80                            loc_18482:
0001BE80 4268 0010                  		clr.w	obVelX(a0)
0001BE84 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001BE8A 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001BE90 6400                       		bcc.s	loc_18498
0001BE92 4468 0012                  		neg.w	obVelY(a0)
0001BE96                            
0001BE96                            loc_18498:
0001BE96 5428 0028                  		addq.b	#2,obSubtype(a0)
0001BE9A                            
0001BE9A                            locret_1849C:
0001BE9A 4E75                       		rts	
0001BE9C                            ; ===========================================================================
0001BE9C                            
0001BE9C                            Obj73_MakeLava2:
0001BE9C 6100 F3D2                  		bsr.w	BossMove
0001BEA0 3028 0038                  		move.w	$38(a0),d0
0001BEA4 0440 022C                  		subi.w	#$22C,d0
0001BEA8 6E00                       		bgt.s	locret_184F4
0001BEAA 303C 022C                  		move.w	#$22C,d0
0001BEAE 4A68 0012                  		tst.w	obVelY(a0)
0001BEB2 6700                       		beq.s	loc_184EA
0001BEB4 4268 0012                  		clr.w	obVelY(a0)
0001BEB8 317C 0050 003C             		move.w	#$50,$3C(a0)
0001BEBE 0868 0000 0022             		bchg	#0,obStatus(a0)
0001BEC4 4EB9 0000 FB18             		jsr	(FindFreeObj).l
0001BECA 6600                       		bne.s	loc_184EA
0001BECC 3368 0030 0008             		move.w	$30(a0),obX(a1)
0001BED2 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001BED8 0669 0018 000C             		addi.w	#$18,obY(a1)
0001BEDE 12BC 0074                  		move.b	#id_BossFire,(a1)	; load lava ball object
0001BEE2 137C 0001 0028             		move.b	#1,obSubtype(a1)
0001BEE8                            
0001BEE8                            loc_184EA:
0001BEE8 5368 003C                  		subq.w	#1,$3C(a0)
0001BEEC 6600                       		bne.s	locret_184F4
0001BEEE 5428 0028                  		addq.b	#2,obSubtype(a0)
0001BEF2                            
0001BEF2                            locret_184F4:
0001BEF2 4E75                       		rts	
0001BEF4                            ; ===========================================================================
0001BEF4                            
0001BEF4                            loc_184F6:
0001BEF4 5368 003C                  		subq.w	#1,$3C(a0)
0001BEF8 6B00                       		bmi.s	loc_18500
0001BEFA 6000 F332                  		bra.w	BossDefeated
0001BEFE                            ; ===========================================================================
0001BEFE                            
0001BEFE                            loc_18500:
0001BEFE 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BF04 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001BF0A 4268 0010                  		clr.w	obVelX(a0)
0001BF0E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BF12 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001BF18 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001BF1C 6600                       		bne.s	locret_1852A
0001BF1E 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001BF24 4268 0012                  		clr.w	obVelY(a0)
0001BF28                            
0001BF28                            locret_1852A:
0001BF28 4E75                       		rts	
0001BF2A                            ; ===========================================================================
0001BF2A                            
0001BF2A                            loc_1852C:
0001BF2A 5268 003C                  		addq.w	#1,$3C(a0)
0001BF2E 6700                       		beq.s	loc_18544
0001BF30 6A00                       		bpl.s	loc_1854E
0001BF32 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001BF38 6400                       		bcc.s	loc_18544
0001BF3A 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001BF40 6000                       		bra.s	loc_1857A
0001BF42                            ; ===========================================================================
0001BF42                            
0001BF42                            loc_18544:
0001BF42 4268 0012                  		clr.w	obVelY(a0)
0001BF46 4268 003C                  		clr.w	$3C(a0)
0001BF4A 6000                       		bra.s	loc_1857A
0001BF4C                            ; ===========================================================================
0001BF4C                            
0001BF4C                            loc_1854E:
0001BF4C 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001BF52 6500                       		bcs.s	loc_18566
0001BF54 6700                       		beq.s	loc_1856C
0001BF56 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001BF5C 6500                       		bcs.s	loc_1857A
0001BF5E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BF62 6000                       		bra.s	loc_1857A
0001BF64                            ; ===========================================================================
0001BF64                            
0001BF64                            loc_18566:
0001BF64 5168 0012                  		subq.w	#8,obVelY(a0)
0001BF68 6000                       		bra.s	loc_1857A
0001BF6A                            ; ===========================================================================
0001BF6A                            
0001BF6A                            loc_1856C:
0001BF6A 4268 0012                  		clr.w	obVelY(a0)
0001BF78                            
0001BF78                            loc_1857A:
0001BF78 6100 F2F6                  		bsr.w	BossMove
0001BF7C 6000 FDC0                  		bra.w	loc_1833E
0001BF80                            ; ===========================================================================
0001BF80                            
0001BF80                            loc_18582:
0001BF80 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001BF86 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001BF8C 0C78 1960 F72A             		cmpi.w	#$1960,(v_limitright2).w
0001BF92 6400                       		bcc.s	loc_1859C
0001BF94 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001BF98 6000                       		bra.s	loc_185A2
0001BF9A                            ; ===========================================================================
0001BF9A                            
0001BF9A                            loc_1859C:
0001BF9A 4A28 0001                  		tst.b	obRender(a0)
0001BF9E 6A00                       		bpl.s	Obj73_ShipDel
0001BFA0                            
0001BFA0                            loc_185A2:
0001BFA0 6100 F2CE                  		bsr.w	BossMove
0001BFA4 6000 FD98                  		bra.w	loc_1833E
0001BFA8                            ; ===========================================================================
0001BFA8                            
0001BFA8                            Obj73_ShipDel:
0001BFA8 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001BFAE                            ; ===========================================================================
0001BFAE                            
0001BFAE                            Obj73_FaceMain:	; Routine 4
0001BFAE 7000                       		moveq	#0,d0
0001BFB0 7201                       		moveq	#1,d1
0001BFB2 2268 0034                  		movea.l	$34(a0),a1
0001BFB6 1029 0025                  		move.b	ob2ndRout(a1),d0
0001BFBA 5540                       		subq.w	#2,d0
0001BFBC 6600                       		bne.s	loc_185D2
0001BFBE 0829 0001 0028             		btst	#1,obSubtype(a1)
0001BFC4 6700                       		beq.s	loc_185DA
0001BFC6 4A69 0012                  		tst.w	obVelY(a1)
0001BFCA 6600                       		bne.s	loc_185DA
0001BFCC 7204                       		moveq	#4,d1
0001BFCE 6000                       		bra.s	loc_185EE
0001BFD0                            ; ===========================================================================
0001BFD0                            
0001BFD0                            loc_185D2:
0001BFD0 5500                       		subq.b	#2,d0
0001BFD2 6B00                       		bmi.s	loc_185DA
0001BFD4 720A                       		moveq	#$A,d1
0001BFD6 6000                       		bra.s	loc_185EE
0001BFD8                            ; ===========================================================================
0001BFD8                            
0001BFD8                            loc_185DA:
0001BFD8 4A29 0020                  		tst.b	obColType(a1)
0001BFDC 6600                       		bne.s	loc_185E4
0001BFDE 7205                       		moveq	#5,d1
0001BFE0 6000                       		bra.s	loc_185EE
0001BFE2                            ; ===========================================================================
0001BFE2                            
0001BFE2                            loc_185E4:
0001BFE2 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001BFE8 6500                       		bcs.s	loc_185EE
0001BFEA 7204                       		moveq	#4,d1
0001BFEC                            
0001BFEC                            loc_185EE:
0001BFEC 1141 001C                  		move.b	d1,obAnim(a0)
0001BFF0 5900                       		subq.b	#4,d0
0001BFF2 6600                       		bne.s	loc_18602
0001BFF4 117C 0006 001C             		move.b	#6,obAnim(a0)
0001BFFA 4A28 0001                  		tst.b	obRender(a0)
0001BFFE 6A00                       		bpl.s	Obj73_FaceDel
0001C000                            
0001C000                            loc_18602:
0001C000 6000                       		bra.s	Obj73_Display
0001C002                            ; ===========================================================================
0001C002                            
0001C002                            Obj73_FaceDel:
0001C002 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001C008                            ; ===========================================================================
0001C008                            
0001C008                            Obj73_FlameMain:; Routine 6
0001C008 117C 0007 001C             		move.b	#7,obAnim(a0)
0001C00E 2268 0034                  		movea.l	$34(a0),a1
0001C012 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001C018 6D00                       		blt.s	loc_1862A
0001C01A 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001C020 4A28 0001                  		tst.b	obRender(a0)
0001C024 6A00                       		bpl.s	Obj73_FlameDel
0001C026 6000                       		bra.s	loc_18636
0001C028                            ; ===========================================================================
0001C028                            
0001C028                            loc_1862A:
0001C028 4A69 0010                  		tst.w	obVelX(a1)
0001C02C 6700                       		beq.s	loc_18636
0001C02E 117C 0008 001C             		move.b	#8,obAnim(a0)
0001C034                            
0001C034                            loc_18636:
0001C034 6000                       		bra.s	Obj73_Display
0001C036                            ; ===========================================================================
0001C036                            
0001C036                            Obj73_FlameDel:
0001C036 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001C03C                            ; ===========================================================================
0001C03C                            
0001C03C                            Obj73_Display:
0001C03C 43F9 0001 B684             		lea	(Ani_Eggman).l,a1
0001C042 4EB9 0000 C634             		jsr	(AnimateSprite).l
0001C048                            
0001C048                            loc_1864A:
0001C048 2268 0034                  		movea.l	$34(a0),a1
0001C04C 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C052 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C058 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001C05E 7003                       		moveq	#3,d0
0001C060 C028 0022                  		and.b	obStatus(a0),d0
0001C064 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C06A 8128 0001                  		or.b	d0,obRender(a0)
0001C06E 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001C074                            ; ===========================================================================
0001C074                            
0001C074                            Obj73_TubeMain:	; Routine 8
0001C074 2268 0034                  		movea.l	$34(a0),a1
0001C078 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001C07E 6600                       		bne.s	loc_18688
0001C080 4A28 0001                  		tst.b	obRender(a0)
0001C084 6A00                       		bpl.s	Obj73_TubeDel
0001C086                            
0001C086                            loc_18688:
0001C086 217C 0001 B7C4 0004        		move.l	#Map_BossItems,obMap(a0)
0001C08E 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001C094 117C 0004 001A             		move.b	#4,obFrame(a0)
0001C09A 60AC                       		bra.s	loc_1864A
0001C09C                            ; ===========================================================================
0001C09C                            
0001C09C                            Obj73_TubeDel:
0001C09C 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001C09C 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001C0A2                            		include	"_incObj\74 MZ Boss Fire.asm"
0001C0A2                            ; ---------------------------------------------------------------------------
0001C0A2                            ; Object 74 - lava that	Eggman drops (MZ)
0001C0A2                            ; ---------------------------------------------------------------------------
0001C0A2                            
0001C0A2                            BossFire:
0001C0A2 7000                       		moveq	#0,d0
0001C0A4 1028 0024                  		move.b	obRoutine(a0),d0
0001C0A8 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001C0AC 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001C0B0 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001C0B6                            ; ===========================================================================
0001C0B6 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001C0B8 0000                       		dc.w Obj74_Action-Obj74_Index
0001C0BA 0000                       		dc.w loc_18886-Obj74_Index
0001C0BC 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001C0BE                            ; ===========================================================================
0001C0BE                            
0001C0BE                            Obj74_Main:	; Routine 0
0001C0BE 117C 0008 0016             		move.b	#8,obHeight(a0)
0001C0C4 117C 0008 0017             		move.b	#8,obWidth(a0)
0001C0CA 217C 0000 D286 0004        		move.l	#Map_Fire,obMap(a0)
0001C0D2 317C 0345 0002             		move.w	#$345,obGfx(a0)
0001C0D8 117C 0004 0001             		move.b	#4,obRender(a0)
0001C0DE 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001C0E4 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C0EA 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C0F0 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C0F4 4A28 0028                  		tst.b	obSubtype(a0)
0001C0F8 6600                       		bne.s	loc_1870A
0001C0FA 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001C100 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C104 6000 0000                  		bra.w	loc_18886
0001C108                            ; ===========================================================================
0001C108                            
0001C108                            loc_1870A:
0001C108 117C 001E 0029             		move.b	#$1E,$29(a0)
0001C118                            
0001C118                            Obj74_Action:	; Routine 2
0001C118 7000                       		moveq	#0,d0
0001C11A 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C11E 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001C122 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001C126 4EB9 0000 F56A             		jsr	(SpeedToPos).l
0001C12C 43F9 0001 0562             		lea	(Ani_Fire).l,a1
0001C132 4EB9 0000 C634             		jsr	(AnimateSprite).l
0001C138 0C68 02E8 000C             		cmpi.w	#$2E8,obY(a0)
0001C13E 6200                       		bhi.s	Obj74_Delete
0001C140 4E75                       		rts	
0001C142                            ; ===========================================================================
0001C142                            
0001C142                            Obj74_Delete:
0001C142 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001C148                            ; ===========================================================================
0001C148 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001C14A 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001C14C 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001C14E 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001C150                            ; ===========================================================================
0001C150                            
0001C150                            Obj74_Drop:
0001C150 08E8 0001 0022             		bset	#1,obStatus(a0)
0001C156 5328 0029                  		subq.b	#1,$29(a0)
0001C15A 6A00                       		bpl.s	locret_18780
0001C15C 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001C162 4228 0028                  		clr.b	obSubtype(a0)
0001C166 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C16C 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001C172 6100 C5E8                  		bsr.w	ObjFloorDist
0001C176 4A41                       		tst.w	d1
0001C178 6A00                       		bpl.s	locret_18780
0001C17A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C17E                            
0001C17E                            locret_18780:
0001C17E 4E75                       		rts	
0001C180                            ; ===========================================================================
0001C180                            
0001C180                            Obj74_MakeFlame:
0001C180 5568 000C                  		subq.w	#2,obY(a0)
0001C184 08E8 0007 0002             		bset	#7,obGfx(a0)
0001C18A 317C 00A0 0010             		move.w	#$A0,obVelX(a0)
0001C190 4268 0012                  		clr.w	obVelY(a0)
0001C194 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C19A 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C1A0 117C 0003 0029             		move.b	#3,$29(a0)
0001C1A6 4EB9 0000 FB2E             		jsr	(FindNextFreeObj).l
0001C1AC 6600                       		bne.s	loc_187CA
0001C1AE 47D1                       		lea	(a1),a3
0001C1B0 45D0                       		lea	(a0),a2
0001C1B2 7003                       		moveq	#3,d0
0001C1B4                            
0001C1B4                            Obj74_Loop:
0001C1B4 26DA                       		move.l	(a2)+,(a3)+
0001C1B6 26DA                       		move.l	(a2)+,(a3)+
0001C1B8 26DA                       		move.l	(a2)+,(a3)+
0001C1BA 26DA                       		move.l	(a2)+,(a3)+
0001C1BC 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001C1C0                            
0001C1C0 4469 0010                  		neg.w	obVelX(a1)
0001C1C4 5429 0025                  		addq.b	#2,ob2ndRout(a1)
0001C1C8                            
0001C1C8                            loc_187CA:
0001C1C8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C1CC 4E75                       		rts	
0001C1CE                            
0001C1CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C1CE                            
0001C1CE                            
0001C1CE                            Obj74_Duplicate2:
0001C1CE 4EB9 0000 FB2E             		jsr	(FindNextFreeObj).l
0001C1D4 6600                       		bne.s	locret_187EE
0001C1D6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C1DC 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C1E2 12BC 0074                  		move.b	#id_BossFire,(a1)
0001C1E6 337C 0067 0028             		move.w	#$67,obSubtype(a1)
0001C1EC                            
0001C1EC                            locret_187EE:
0001C1EC 4E75                       		rts	
0001C1EE                            ; End of function Obj74_Duplicate2
0001C1EE                            
0001C1EE                            ; ===========================================================================
0001C1EE                            
0001C1EE                            Obj74_Duplicate:
0001C1EE 6100 C56C                  		bsr.w	ObjFloorDist
0001C1F2 4A41                       		tst.w	d1
0001C1F4 6A00                       		bpl.s	loc_18826
0001C1F6 3028 0008                  		move.w	obX(a0),d0
0001C1FA 0C40 1940                  		cmpi.w	#$1940,d0
0001C1FE 6E00                       		bgt.s	loc_1882C
0001C200 3228 0030                  		move.w	$30(a0),d1
0001C204 B240                       		cmp.w	d0,d1
0001C206 6700                       		beq.s	loc_1881E
0001C208 0240 0010                  		andi.w	#$10,d0
0001C20C 0241 0010                  		andi.w	#$10,d1
0001C210 B240                       		cmp.w	d0,d1
0001C212 6700                       		beq.s	loc_1881E
0001C214 61B8                       		bsr.s	Obj74_Duplicate2
0001C216 3168 0008 0032             		move.w	obX(a0),$32(a0)
0001C21C                            
0001C21C                            loc_1881E:
0001C21C 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C222 4E75                       		rts	
0001C224                            ; ===========================================================================
0001C224                            
0001C224                            loc_18826:
0001C224 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C228 4E75                       		rts	
0001C22A                            ; ===========================================================================
0001C22A                            
0001C22A                            loc_1882C:
0001C22A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C22E 4E75                       		rts	
0001C230                            ; ===========================================================================
0001C230                            
0001C230                            Obj74_FallEdge:
0001C230 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001C236 0668 0024 0012             		addi.w	#$24,obVelY(a0)	; make flame fall
0001C23C 3028 0008                  		move.w	obX(a0),d0
0001C240 9068 0032                  		sub.w	$32(a0),d0
0001C244 6A00                       		bpl.s	loc_1884A
0001C246 4440                       		neg.w	d0
0001C248                            
0001C248                            loc_1884A:
0001C248 0C40 0012                  		cmpi.w	#$12,d0
0001C24C 6600                       		bne.s	loc_18856
0001C24E 08A8 0007 0002             		bclr	#7,obGfx(a0)
0001C254                            
0001C254                            loc_18856:
0001C254 6100 C506                  		bsr.w	ObjFloorDist
0001C258 4A41                       		tst.w	d1
0001C25A 6A00                       		bpl.s	locret_1887E
0001C25C 5328 0029                  		subq.b	#1,$29(a0)
0001C260 6700                       		beq.s	Obj74_Delete2
0001C262 4268 0012                  		clr.w	obVelY(a0)
0001C266 3168 0032 0008             		move.w	$32(a0),obX(a0)
0001C26C 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001C272 08E8 0007 0002             		bset	#7,obGfx(a0)
0001C278 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001C27C                            
0001C27C                            locret_1887E:
0001C27C 4E75                       		rts	
0001C27E                            ; ===========================================================================
0001C27E                            
0001C27E                            Obj74_Delete2:
0001C27E 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001C284                            ; ===========================================================================
0001C284                            
0001C284                            loc_18886:	; Routine 4
0001C284 08E8 0007 0002             		bset	#7,obGfx(a0)
0001C28A 5328 0029                  		subq.b	#1,$29(a0)
0001C28E 6600                       		bne.s	Obj74_Animate
0001C290 117C 0001 001C             		move.b	#1,obAnim(a0)
0001C296 5968 000C                  		subq.w	#4,obY(a0)
0001C29A 4228 0020                  		clr.b	obColType(a0)
0001C29E                            
0001C29E                            Obj74_Animate:
0001C29E 43F9 0001 0562             		lea	(Ani_Fire).l,a1
0001C2A4 4EF9 0000 C634             		jmp	(AnimateSprite).l
0001C2AA                            ; ===========================================================================
0001C2AA                            
0001C2AA                            Obj74_Delete3:	; Routine 6
0001C2AA 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001C2AA 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001C2B0                            
0001C2B0                            	Obj7A_Delete:
0001C2B0 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001C2B6                            
0001C2B6                            		include	"_incObj\7A Boss - Star Light.asm"
0001C2B6                            ; ---------------------------------------------------------------------------
0001C2B6                            ; Object 7A - Eggman (SLZ)
0001C2B6                            ; ---------------------------------------------------------------------------
0001C2B6                            
0001C2B6                            BossStarLight:
0001C2B6 7000                       		moveq	#0,d0
0001C2B8 1028 0024                  		move.b	obRoutine(a0),d0
0001C2BC 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001C2C0 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001C2C4                            ; ===========================================================================
0001C2C4 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001C2C6 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001C2C8 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001C2CA 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001C2CC 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001C2CE                            
0001C2CE 0200 0200                  Obj7A_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001C2D2 0401 0200                  		dc.b 4,	1, $02, $00
0001C2D6 0607 0200                  		dc.b 6,	7, $02, $00
0001C2DA 0800 0180                  		dc.b 8,	0, $01, $80
0001C2DE                            ; ===========================================================================
0001C2DE                            
0001C2DE                            Obj7A_Main:
0001C2DE 317C 2188 0008             		move.w	#$2188,obX(a0)
0001C2E4 317C 0228 000C             		move.w	#$228,obY(a0)
0001C2EA 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C2F0 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C2F6 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C2FC 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001C302 45FA FFCA                  		lea	Obj7A_ObjData(pc),a2
0001C306 2248                       		movea.l	a0,a1
0001C308 7203                       		moveq	#3,d1
0001C30A 6000                       		bra.s	Obj7A_LoadBoss
0001C30C                            ; ===========================================================================
0001C30C                            
0001C30C                            Obj7A_Loop:
0001C30C 4EB9 0000 FB2E             		jsr	(FindNextFreeObj).l
0001C312 6600                       		bne.s	loc_1895C
0001C314 12BC 007A                  		move.b	#id_BossStarLight,0(a1)
0001C318 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C31E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C324                            
0001C324                            Obj7A_LoadBoss:
0001C324 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C32A 4229 0025                  		clr.b	ob2ndRout(a1)
0001C32E 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C332 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C336 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001C33A 237C 0001 B6D4 0004        		move.l	#Map_Eggman,obMap(a1)
0001C342 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001C348 137C 0004 0001             		move.b	#4,obRender(a1)
0001C34E 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001C354 2348 0034                  		move.l	a0,$34(a1)
0001C358 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001C35C                            
0001C35C                            loc_1895C:
0001C35C 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C360 45E8 002A                  		lea	$2A(a0),a2
0001C364 705E                       		moveq	#$5E,d0
0001C366 723E                       		moveq	#$3E,d1
0001C368                            
0001C368                            loc_18968:
0001C368 B011                       		cmp.b	(a1),d0
0001C36A 6600                       		bne.s	loc_18974
0001C36C 4A29 0028                  		tst.b	obSubtype(a1)
0001C370 6700                       		beq.s	loc_18974
0001C372 34C9                       		move.w	a1,(a2)+
0001C374                            
0001C374                            loc_18974:
0001C374 D2FC 0040                  		adda.w	#$40,a1
0001C378 51C9 FFEE                  		dbf	d1,loc_18968
0001C37C                            
0001C37C                            Obj7A_ShipMain:	; Routine 2
0001C37C 7000                       		moveq	#0,d0
0001C37E 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C382 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001C386 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001C38A 43F9 0001 B684             		lea	(Ani_Eggman).l,a1
0001C390 4EB9 0000 C634             		jsr	(AnimateSprite).l
0001C396 7003                       		moveq	#3,d0
0001C398 C028 0022                  		and.b	obStatus(a0),d0
0001C39C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C3A2 8128 0001                  		or.b	d0,obRender(a0)
0001C3A6 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001C3AC                            ; ===========================================================================
0001C3AC 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001C3AE 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001C3B0 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001C3B2 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001C3B4 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001C3B6 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001C3B8                            ; ===========================================================================
0001C3B8                            
0001C3B8                            loc_189B8:
0001C3B8 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001C3BE 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001C3C4 6400                       		bcc.s	loc_189CA
0001C3C6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C3CA                            
0001C3CA                            loc_189CA:
0001C3CA 6100 EEA4                  		bsr.w	BossMove
0001C3CE 1028 003F                  		move.b	$3F(a0),d0
0001C3D2 5428 003F                  		addq.b	#2,$3F(a0)
0001C3D6 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001C3DC EC40                       		asr.w	#6,d0
0001C3DE D068 0038                  		add.w	$38(a0),d0
0001C3E2 3140 000C                  		move.w	d0,obY(a0)
0001C3E6 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C3EC 6000                       		bra.s	loc_189FE
0001C3EE                            ; ===========================================================================
0001C3EE                            
0001C3EE                            loc_189EE:
0001C3EE 6100 EE80                  		bsr.w	BossMove
0001C3F2 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001C3F8 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C3FE                            
0001C3FE                            loc_189FE:
0001C3FE 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001C404 6400                       		bcc.s	locret_18A44
0001C406 4A28 0022                  		tst.b	obStatus(a0)
0001C40A 6B00                       		bmi.s	loc_18A46
0001C40C 4A28 0020                  		tst.b	obColType(a0)
0001C410 6600                       		bne.s	locret_18A44
0001C412 4A28 003E                  		tst.b	$3E(a0)
0001C416 6600                       		bne.s	loc_18A28
0001C418 117C 0020 003E             		move.b	#$20,$3E(a0)
0001C428                            
0001C428                            loc_18A28:
0001C428 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001C42C 7000                       		moveq	#0,d0
0001C42E 4A51                       		tst.w	(a1)
0001C430 6600                       		bne.s	loc_18A36
0001C432 303C 0EEE                  		move.w	#cWhite,d0
0001C436                            
0001C436                            loc_18A36:
0001C436 3280                       		move.w	d0,(a1)
0001C438 5328 003E                  		subq.b	#1,$3E(a0)
0001C43C 6600                       		bne.s	locret_18A44
0001C43E 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C444                            
0001C444                            locret_18A44:
0001C444 4E75                       		rts	
0001C446                            ; ===========================================================================
0001C446                            
0001C446                            loc_18A46:
0001C446 7064                       		moveq	#100,d0
0001C448 6100 0000                  		bsr.w	AddPoints
0001C44C 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001C452 117C 0078 003C             		move.b	#$78,$3C(a0)
0001C458 4268 0010                  		clr.w	obVelX(a0)
0001C45C 4E75                       		rts	
0001C45E                            ; ===========================================================================
0001C45E                            
0001C45E                            loc_18A5E:
0001C45E 3028 0030                  		move.w	$30(a0),d0
0001C462 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001C468 0828 0000 0022             		btst	#0,obStatus(a0)
0001C46E 6600                       		bne.s	loc_18A7C
0001C470 4468 0010                  		neg.w	obVelX(a0)
0001C474 0C40 2008                  		cmpi.w	#$2008,d0
0001C478 6E00                       		bgt.s	loc_18A88
0001C47A 6000                       		bra.s	loc_18A82
0001C47C                            ; ===========================================================================
0001C47C                            
0001C47C                            loc_18A7C:
0001C47C 0C40 2138                  		cmpi.w	#$2138,d0
0001C480 6D00                       		blt.s	loc_18A88
0001C482                            
0001C482                            loc_18A82:
0001C482 0868 0000 0022             		bchg	#0,obStatus(a0)
0001C488                            
0001C488                            loc_18A88:
0001C488 3028 0008                  		move.w	8(a0),d0
0001C48C 72FF                       		moveq	#-1,d1
0001C48E 7402                       		moveq	#2,d2
0001C490 45E8 002A                  		lea	$2A(a0),a2
0001C494 7828                       		moveq	#$28,d4
0001C496 4A68 0010                  		tst.w	obVelX(a0)
0001C49A 6A00                       		bpl.s	loc_18A9E
0001C49C 4444                       		neg.w	d4
0001C49E                            
0001C49E                            loc_18A9E:
0001C49E 321A                       		move.w	(a2)+,d1
0001C4A0 2641                       		movea.l	d1,a3
0001C4A2 082B 0003 0022             		btst	#3,obStatus(a3)
0001C4A8 6600                       		bne.s	loc_18AB4
0001C4AA 362B 0008                  		move.w	8(a3),d3
0001C4AE D644                       		add.w	d4,d3
0001C4B0 9640                       		sub.w	d0,d3
0001C4B2 6700                       		beq.s	loc_18AC0
0001C4B4                            
0001C4B4                            loc_18AB4:
0001C4B4 51CA FFE8                  		dbf	d2,loc_18A9E
0001C4B8                            
0001C4B8 1142 0028                  		move.b	d2,obSubtype(a0)
0001C4BC 6000 FF0C                  		bra.w	loc_189CA
0001C4C0                            ; ===========================================================================
0001C4C0                            
0001C4C0                            loc_18AC0:
0001C4C0 1142 0028                  		move.b	d2,obSubtype(a0)
0001C4C4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C4C8 117C 0028 003C             		move.b	#$28,$3C(a0)
0001C4CE 6000 FEFA                  		bra.w	loc_189CA
0001C4D2                            ; ===========================================================================
0001C4D2                            
0001C4D2                            Obj7A_MakeBall:
0001C4D2 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001C4D8 6600                       		bne.s	loc_18B36
0001C4DA 70FF                       		moveq	#-1,d0
0001C4DC 1028 0028                  		move.b	obSubtype(a0),d0
0001C4E0 4880                       		ext.w	d0
0001C4E2 6B00                       		bmi.s	loc_18B40
0001C4E4 5540                       		subq.w	#2,d0
0001C4E6 4440                       		neg.w	d0
0001C4E8 D040                       		add.w	d0,d0
0001C4EA 43E8 002A                  		lea	$2A(a0),a1
0001C4EE 3031 0000                  		move.w	(a1,d0.w),d0
0001C4F2 2440                       		movea.l	d0,a2
0001C4F4 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C4F8 723E                       		moveq	#$3E,d1
0001C4FA                            
0001C4FA                            loc_18AFA:
0001C4FA B0A9 003C                  		cmp.l	$3C(a1),d0
0001C4FE 6700                       		beq.s	loc_18B40
0001C500 D2FC 0040                  		adda.w	#$40,a1
0001C504 51C9 FFF4                  		dbf	d1,loc_18AFA
0001C508                            
0001C508 2F08                       		move.l	a0,-(sp)
0001C50A 41D2                       		lea	(a2),a0
0001C50C 4EB9 0000 FB2E             		jsr	(FindNextFreeObj).l
0001C512 205F                       		movea.l	(sp)+,a0
0001C514 6600                       		bne.s	loc_18B40
0001C516 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load spiked ball object
0001C51A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C520 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C526 0669 0020 000C             		addi.w	#$20,obY(a1)
0001C52C 136A 0022 0022             		move.b	obStatus(a2),obStatus(a1)
0001C532 234A 003C                  		move.l	a2,$3C(a1)
0001C536                            
0001C536                            loc_18B36:
0001C536 5328 003C                  		subq.b	#1,$3C(a0)
0001C53A 6700                       		beq.s	loc_18B40
0001C53C 6000 FEC0                  		bra.w	loc_189FE
0001C540                            ; ===========================================================================
0001C540                            
0001C540                            loc_18B40:
0001C540 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001C544 6000 FE84                  		bra.w	loc_189CA
0001C548                            ; ===========================================================================
0001C548                            
0001C548                            loc_18B48:
0001C548 5328 003C                  		subq.b	#1,$3C(a0)
0001C54C 6B00                       		bmi.s	loc_18B52
0001C54E 6000 ECDE                  		bra.w	BossDefeated
0001C552                            ; ===========================================================================
0001C552                            
0001C552                            loc_18B52:
0001C552 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C556 4268 0012                  		clr.w	obVelY(a0)
0001C55A 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C560 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001C566 4268 0010                  		clr.w	obVelX(a0)
0001C56A 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001C570 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001C574 6600                       		bne.s	loc_18B7C
0001C576 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001C57C                            
0001C57C                            loc_18B7C:
0001C57C 6000 FE80                  		bra.w	loc_189FE
0001C580                            ; ===========================================================================
0001C580                            
0001C580                            loc_18B80:
0001C580 5228 003C                  		addq.b	#1,$3C(a0)
0001C584 6700                       		beq.s	loc_18B90
0001C586 6A00                       		bpl.s	loc_18B96
0001C588 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C58E 6000                       		bra.s	loc_18BC2
0001C590                            ; ===========================================================================
0001C590                            
0001C590                            loc_18B90:
0001C590 4268 0012                  		clr.w	obVelY(a0)
0001C594 6000                       		bra.s	loc_18BC2
0001C596                            ; ===========================================================================
0001C596                            
0001C596                            loc_18B96:
0001C596 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001C59C 6500                       		bcs.s	loc_18BAE
0001C59E 6700                       		beq.s	loc_18BB4
0001C5A0 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001C5A6 6500                       		bcs.s	loc_18BC2
0001C5A8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C5AC 6000                       		bra.s	loc_18BC2
0001C5AE                            ; ===========================================================================
0001C5AE                            
0001C5AE                            loc_18BAE:
0001C5AE 5168 0012                  		subq.w	#8,obVelY(a0)
0001C5B2 6000                       		bra.s	loc_18BC2
0001C5B4                            ; ===========================================================================
0001C5B4                            
0001C5B4                            loc_18BB4:
0001C5B4 4268 0012                          	clr.w    obVelY(a0)
0001C5B8 4A38 FE2D                          	tst.b     (v_invinc).w
0001C5BC 6600                               	bne.s   @boss_invinc
0001C5BE                            
0001C5BE 1038 F5C6                          	move.b   (v_Saved_music),d0
0001C5C2 6000 0000                          	bra.w      @boss_play
0001C5C6                            
0001C5C6                            	@boss_invinc:
0001C5C6 103C 0000                          	move.b #bgm_Invincible,d0
0001C5CA                            
0001C5CA                            	@boss_play:
0001C5CA 4EB8 129A                          	jsr PlaySound
0001C5CE                            
0001C5CE                            loc_18BC2:
0001C5CE 6000 FE1E                  		bra.w	loc_189EE
0001C5D2                            ; ===========================================================================
0001C5D2                            
0001C5D2                            loc_18BC6:
0001C5D2 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001C5D8 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001C5DE 0C78 2160 F72A             		cmpi.w	#$2160,(v_limitright2).w
0001C5E4 6400                       		bcc.s	loc_18BE0
0001C5E6 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001C5EA 6000                       		bra.s	loc_18BE8
0001C5EC                            ; ===========================================================================
0001C5EC                            
0001C5EC                            loc_18BE0:
0001C5EC 4A28 0001                  		tst.b	obRender(a0)
0001C5F0 6A00 FCBE                  		bpl.w	Obj7A_Delete
0001C5F4                            
0001C5F4                            loc_18BE8:
0001C5F4 6100 EC7A                  		bsr.w	BossMove
0001C5F8 6000 FDD0                  		bra.w	loc_189CA
0001C5FC                            ; ===========================================================================
0001C5FC                            
0001C5FC                            Obj7A_FaceMain:	; Routine 4
0001C5FC 7000                       		moveq	#0,d0
0001C5FE 7201                       		moveq	#1,d1
0001C600 2268 0034                  		movea.l	$34(a0),a1
0001C604 1029 0025                  		move.b	ob2ndRout(a1),d0
0001C608 0C00 0006                  		cmpi.b	#6,d0
0001C60C 6B00                       		bmi.s	loc_18C06
0001C60E 720A                       		moveq	#$A,d1
0001C610 6000                       		bra.s	loc_18C1A
0001C612                            ; ===========================================================================
0001C612                            
0001C612                            loc_18C06:
0001C612 4A29 0020                  		tst.b	obColType(a1)
0001C616 6600                       		bne.s	loc_18C10
0001C618 7205                       		moveq	#5,d1
0001C61A 6000                       		bra.s	loc_18C1A
0001C61C                            ; ===========================================================================
0001C61C                            
0001C61C                            loc_18C10:
0001C61C 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001C622 6500                       		bcs.s	loc_18C1A
0001C624 7204                       		moveq	#4,d1
0001C626                            
0001C626                            loc_18C1A:
0001C626 1141 001C                  		move.b	d1,obAnim(a0)
0001C62A 0C00 000A                  		cmpi.b	#$A,d0
0001C62E 6600                       		bne.s	loc_18C32
0001C630 117C 0006 001C             		move.b	#6,obAnim(a0)
0001C636 4A28 0001                  		tst.b	obRender(a0)
0001C63A 6A00 FC74                  		bpl.w	Obj7A_Delete
0001C63E                            
0001C63E                            loc_18C32:
0001C63E 6000                       		bra.s	loc_18C6C
0001C640                            ; ===========================================================================
0001C640                            
0001C640                            Obj7A_FlameMain:; Routine 6
0001C640 117C 0008 001C             		move.b	#8,obAnim(a0)
0001C646 2268 0034                  		movea.l	$34(a0),a1
0001C64A 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C650 6600                       		bne.s	loc_18C56
0001C652 4A28 0001                  		tst.b	obRender(a0)
0001C656 6A00 FC58                  		bpl.w	Obj7A_Delete
0001C65A 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001C660 6000                       		bra.s	loc_18C6C
0001C662                            ; ===========================================================================
0001C662                            
0001C662                            loc_18C56:
0001C662 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001C668 6E00                       		bgt.s	loc_18C6C
0001C66A 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001C670 6D00                       		blt.s	loc_18C6C
0001C672 117C 0007 001C             		move.b	#7,obAnim(a0)
0001C678                            
0001C678                            loc_18C6C:
0001C678 43F9 0001 B684             		lea	(Ani_Eggman).l,a1
0001C67E 4EB9 0000 C634             		jsr	(AnimateSprite).l
0001C684                            
0001C684                            loc_18C78:
0001C684 2268 0034                  		movea.l	$34(a0),a1
0001C688 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C68E 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C694 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001C69A 7003                       		moveq	#3,d0
0001C69C C028 0022                  		and.b	obStatus(a0),d0
0001C6A0 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C6A6 8128 0001                  		or.b	d0,obRender(a0)
0001C6AA 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001C6B0                            ; ===========================================================================
0001C6B0                            
0001C6B0                            Obj7A_TubeMain:	; Routine 8
0001C6B0 2268 0034                  		movea.l	$34(a0),a1
0001C6B4 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C6BA 6600                       		bne.s	loc_18CB8
0001C6BC 4A28 0001                  		tst.b	obRender(a0)
0001C6C0 6A00 FBEE                  		bpl.w	Obj7A_Delete
0001C6C4                            
0001C6C4                            loc_18CB8:
0001C6C4 217C 0001 B7C4 0004        		move.l	#Map_BossItems,obMap(a0)
0001C6CC 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001C6D2 117C 0003 001A             		move.b	#3,obFrame(a0)
0001C6D8 60AA                       		bra.s	loc_18C78
0001C6D8 60AA                       		bra.s	loc_18C78
0001C6DA                            		include	"_incObj\7B SLZ Boss Spikeball.asm"
0001C6DA                            ; ---------------------------------------------------------------------------
0001C6DA                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001C6DA                            ; ---------------------------------------------------------------------------
0001C6DA                            
0001C6DA                            BossSpikeball:
0001C6DA 7000                       		moveq	#0,d0
0001C6DC 1028 0024                  		move.b	obRoutine(a0),d0
0001C6E0 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001C6E4 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001C6E8 3028 0030                  		move.w	$30(a0),d0
0001C6EC 0240 FF80                  		andi.w	#$FF80,d0
0001C6F0 3238 F700                  		move.w	(v_screenposx).w,d1
0001C6F4 0441 0080                  		subi.w	#$80,d1
0001C6F8 0241 FF80                  		andi.w	#$FF80,d1
0001C6FC 9041                       		sub.w	d1,d0
0001C6FE 6B00 FBB0                  		bmi.w	Obj7A_Delete
0001C702 0C40 0280                  		cmpi.w	#$280,d0
0001C706 6200 FBA8                  		bhi.w	Obj7A_Delete
0001C70A 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001C710                            ; ===========================================================================
0001C710 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001C712 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001C714 0000                       		dc.w loc_18DC6-Obj7B_Index
0001C716 0000                       		dc.w loc_18EAA-Obj7B_Index
0001C718 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001C71A 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001C71C                            ; ===========================================================================
0001C71C                            
0001C71C                            Obj7B_Main:	; Routine 0
0001C71C 217C 0001 3B52 0004        		move.l	#Map_SSawBall,obMap(a0)
0001C724 317C 0518 0002             		move.w	#$518,obGfx(a0)
0001C72A 117C 0001 001A             		move.b	#1,obFrame(a0)
0001C730 0028 0004 0001             		ori.b	#4,obRender(a0)
0001C736 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001C73C 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001C742 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001C748 2268 003C                  		movea.l	$3C(a0),a1
0001C74C 3169 0008 0030             		move.w	obX(a1),$30(a0)
0001C752 3169 000C 0034             		move.w	obY(a1),$34(a0)
0001C758 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C75E 3028 0008                  		move.w	obX(a0),d0
0001C762 B069 0008                  		cmp.w	obX(a1),d0
0001C766 6E00                       		bgt.s	loc_18D68
0001C768 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C76E 117C 0002 003A             		move.b	#2,$3A(a0)
0001C774                            
0001C774                            loc_18D68:
0001C774 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C778                            
0001C778                            Obj7B_Fall:	; Routine 2
0001C778 4EB9 0000 F532             		jsr	(ObjectFall).l
0001C77E 2268 003C                  		movea.l	$3C(a0),a1
0001C782 45F9 0000 0000             		lea	(word_19018).l,a2
0001C788 7000                       		moveq	#0,d0
0001C78A 1029 001A                  		move.b	obFrame(a1),d0
0001C78E 3228 0008                  		move.w	8(a0),d1
0001C792 9268 0030                  		sub.w	$30(a0),d1
0001C796 6400                       		bcc.s	loc_18D8E
0001C798 5440                       		addq.w	#2,d0
0001C79A                            
0001C79A                            loc_18D8E:
0001C79A D040                       		add.w	d0,d0
0001C79C 3228 0034                  		move.w	$34(a0),d1
0001C7A0 D272 0000                  		add.w	(a2,d0.w),d1
0001C7A4 B268 000C                  		cmp.w	obY(a0),d1
0001C7A8 6E00                       		bgt.s	locret_18DC4
0001C7AA 2268 003C                  		movea.l	$3C(a0),a1
0001C7AE 7202                       		moveq	#2,d1
0001C7B0 0828 0000 0022             		btst	#0,obStatus(a0)
0001C7B6 6700                       		beq.s	loc_18DAE
0001C7B8 7200                       		moveq	#0,d1
0001C7BA                            
0001C7BA                            loc_18DAE:
0001C7BA 317C 00F0 0028             		move.w	#$F0,obSubtype(a0)
0001C7C0 117C 000A 001F             		move.b	#10,obDelayAni(a0)	; set frame duration to	10 frames
0001C7C6 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001C7CC 6000 0000                  		bra.w	loc_18FA2
0001C7D0                            ; ===========================================================================
0001C7D0                            
0001C7D0                            locret_18DC4:
0001C7D0 4E75                       		rts	
0001C7D2                            ; ===========================================================================
0001C7D2                            
0001C7D2                            loc_18DC6:	; Routine 4
0001C7D2 2268 003C                  		movea.l	$3C(a0),a1
0001C7D6 7000                       		moveq	#0,d0
0001C7D8 1028 003A                  		move.b	$3A(a0),d0
0001C7DC 9029 003A                  		sub.b	$3A(a1),d0
0001C7E0 6700                       		beq.s	loc_18E2A
0001C7E2 6400                       		bcc.s	loc_18DDA
0001C7E4 4400                       		neg.b	d0
0001C7E6                            
0001C7E6                            loc_18DDA:
0001C7E6 323C F7E8                  		move.w	#-$818,d1
0001C7EA 343C FEEC                  		move.w	#-$114,d2
0001C7EE 0C00 0001                  		cmpi.b	#1,d0
0001C7F2 6700                       		beq.s	loc_18E00
0001C7F4 323C F6A0                  		move.w	#-$960,d1
0001C7F8 343C FF0C                  		move.w	#-$F4,d2
0001C7FC 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001C802 6D00                       		blt.s	loc_18E00
0001C804 323C F5E0                  		move.w	#-$A20,d1
0001C808 343C FF80                  		move.w	#-$80,d2
0001C80C                            
0001C80C                            loc_18E00:
0001C80C 3141 0012                  		move.w	d1,obVelY(a0)
0001C810 3142 0010                  		move.w	d2,obVelX(a0)
0001C814 3028 0008                  		move.w	obX(a0),d0
0001C818 9068 0030                  		sub.w	$30(a0),d0
0001C81C 6400                       		bcc.s	loc_18E16
0001C81E 4468 0010                  		neg.w	obVelX(a0)
0001C822                            
0001C822                            loc_18E16:
0001C822 117C 0001 001A             		move.b	#1,obFrame(a0)
0001C828 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001C82E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C832 6000 0000                  		bra.w	loc_18EAA
0001C836                            ; ===========================================================================
0001C836                            
0001C836                            loc_18E2A:
0001C836 45F9 0000 0000             		lea	(word_19018).l,a2
0001C83C 7000                       		moveq	#0,d0
0001C83E 1029 001A                  		move.b	obFrame(a1),d0
0001C842 343C 0028                  		move.w	#$28,d2
0001C846 3228 0008                  		move.w	obX(a0),d1
0001C84A 9268 0030                  		sub.w	$30(a0),d1
0001C84E 6400                       		bcc.s	loc_18E48
0001C850 4442                       		neg.w	d2
0001C852 5440                       		addq.w	#2,d0
0001C854                            
0001C854                            loc_18E48:
0001C854 D040                       		add.w	d0,d0
0001C856 3228 0034                  		move.w	$34(a0),d1
0001C85A D272 0000                  		add.w	(a2,d0.w),d1
0001C85E 3141 000C                  		move.w	d1,obY(a0)
0001C862 D468 0030                  		add.w	$30(a0),d2
0001C866 3142 0008                  		move.w	d2,obX(a0)
0001C86A 4268 000E                  		clr.w	obY+2(a0)
0001C86E 4268 000A                  		clr.w	obX+2(a0)
0001C872 5368 0028                  		subq.w	#1,obSubtype(a0)
0001C876 6600                       		bne.s	loc_18E7A
0001C878 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001C87E 117C 0008 0024             		move.b	#8,obRoutine(a0)
0001C884 4E75                       		rts	
0001C886                            ; ===========================================================================
0001C886                            
0001C886                            loc_18E7A:
0001C886 0C68 0078 0028             		cmpi.w	#$78,obSubtype(a0)
0001C88C 6600                       		bne.s	loc_18E88
0001C88E 117C 0005 001F             		move.b	#5,obDelayAni(a0)
0001C894                            
0001C894                            loc_18E88:
0001C894 0C68 003C 0028             		cmpi.w	#$3C,obSubtype(a0)
0001C89A 6600                       		bne.s	loc_18E96
0001C89C 117C 0002 001F             		move.b	#2,obDelayAni(a0)
0001C8A2                            
0001C8A2                            loc_18E96:
0001C8A2 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001C8A6 6E00                       		bgt.s	locret_18EA8
0001C8A8 0868 0000 001A             		bchg	#0,obFrame(a0)
0001C8AE 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001C8B4                            
0001C8B4                            locret_18EA8:
0001C8B4 4E75                       		rts	
0001C8B6                            ; ===========================================================================
0001C8B6                            
0001C8B6                            loc_18EAA:	; Routine 6
0001C8B6 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C8BA 707A                       		moveq	#id_BossStarLight,d0
0001C8BC 7240                       		moveq	#$40,d1
0001C8BE 743E                       		moveq	#$3E,d2
0001C8C0                            
0001C8C0                            loc_18EB4:
0001C8C0 B011                       		cmp.b	(a1),d0
0001C8C2 6700                       		beq.s	loc_18EC0
0001C8C4 D2C1                       		adda.w	d1,a1
0001C8C6 51CA FFF8                  		dbf	d2,loc_18EB4
0001C8CA                            
0001C8CA 6000                       		bra.s	loc_18F38
0001C8CC                            ; ===========================================================================
0001C8CC                            
0001C8CC                            loc_18EC0:
0001C8CC 3029 0008                  		move.w	obX(a1),d0
0001C8D0 3229 000C                  		move.w	obY(a1),d1
0001C8D4 3428 0008                  		move.w	obX(a0),d2
0001C8D8 3628 000C                  		move.w	obY(a0),d3
0001C8DC 45FA 0000                  		lea	byte_19022(pc),a2
0001C8E0 47FA 0000                  		lea	byte_19026(pc),a3
0001C8E4 181A                       		move.b	(a2)+,d4
0001C8E6 4884                       		ext.w	d4
0001C8E8 D044                       		add.w	d4,d0
0001C8EA 181B                       		move.b	(a3)+,d4
0001C8EC 4884                       		ext.w	d4
0001C8EE D444                       		add.w	d4,d2
0001C8F0 B440                       		cmp.w	d0,d2
0001C8F2 6500                       		bcs.s	loc_18F38
0001C8F4 181A                       		move.b	(a2)+,d4
0001C8F6 4884                       		ext.w	d4
0001C8F8 D044                       		add.w	d4,d0
0001C8FA 181B                       		move.b	(a3)+,d4
0001C8FC 4884                       		ext.w	d4
0001C8FE D444                       		add.w	d4,d2
0001C900 B042                       		cmp.w	d2,d0
0001C902 6500                       		bcs.s	loc_18F38
0001C904 181A                       		move.b	(a2)+,d4
0001C906 4884                       		ext.w	d4
0001C908 D244                       		add.w	d4,d1
0001C90A 181B                       		move.b	(a3)+,d4
0001C90C 4884                       		ext.w	d4
0001C90E D644                       		add.w	d4,d3
0001C910 B641                       		cmp.w	d1,d3
0001C912 6500                       		bcs.s	loc_18F38
0001C914 181A                       		move.b	(a2)+,d4
0001C916 4884                       		ext.w	d4
0001C918 D244                       		add.w	d4,d1
0001C91A 181B                       		move.b	(a3)+,d4
0001C91C 4884                       		ext.w	d4
0001C91E D644                       		add.w	d4,d3
0001C920 B243                       		cmp.w	d3,d1
0001C922 6500                       		bcs.s	loc_18F38
0001C924 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C928 4268 0028                  		clr.w	obSubtype(a0)
0001C92C 4229 0020                  		clr.b	obColType(a1)
0001C930 5329 0021                  		subq.b	#1,obColProp(a1)
0001C934 6600                       		bne.s	loc_18F38
0001C936 08E9 0007 0022             		bset	#7,obStatus(a1)
0001C93C 4268 0010                  		clr.w	obVelX(a0)
0001C940 4268 0012                  		clr.w	obVelY(a0)
0001C944                            
0001C944                            loc_18F38:
0001C944 4A68 0012                  		tst.w	obVelY(a0)
0001C948 6A00                       		bpl.s	loc_18F5C
0001C94A 4EB9 0000 F532             		jsr	(ObjectFall).l
0001C950 3028 0034                  		move.w	$34(a0),d0
0001C954 0440 002F                  		subi.w	#$2F,d0
0001C958 B068 000C                  		cmp.w	obY(a0),d0
0001C95C 6E00                       		bgt.s	loc_18F58
0001C95E 4EB9 0000 F532             		jsr	(ObjectFall).l
0001C964                            
0001C964                            loc_18F58:
0001C964 6000 FF20                  		bra.w	loc_18E7A
0001C968                            ; ===========================================================================
0001C968                            
0001C968                            loc_18F5C:
0001C968 4EB9 0000 F532             		jsr	(ObjectFall).l
0001C96E 2268 003C                  		movea.l	$3C(a0),a1
0001C972 45F9 0000 0000             		lea	(word_19018).l,a2
0001C978 7000                       		moveq	#0,d0
0001C97A 1029 001A                  		move.b	obFrame(a1),d0
0001C97E 3228 0008                  		move.w	obX(a0),d1
0001C982 9268 0030                  		sub.w	$30(a0),d1
0001C986 6400                       		bcc.s	loc_18F7E
0001C988 5440                       		addq.w	#2,d0
0001C98A                            
0001C98A                            loc_18F7E:
0001C98A D040                       		add.w	d0,d0
0001C98C 3228 0034                  		move.w	$34(a0),d1
0001C990 D272 0000                  		add.w	(a2,d0.w),d1
0001C994 B268 000C                  		cmp.w	obY(a0),d1
0001C998 6ECA                       		bgt.s	loc_18F58
0001C99A 2268 003C                  		movea.l	$3C(a0),a1
0001C99E 7202                       		moveq	#2,d1
0001C9A0 4A68 0010                  		tst.w	obVelX(a0)
0001C9A4 6B00                       		bmi.s	loc_18F9C
0001C9A6 7200                       		moveq	#0,d1
0001C9A8                            
0001C9A8                            loc_18F9C:
0001C9A8 317C 0000 0028             		move.w	#0,obSubtype(a0)
0001C9AE                            
0001C9AE                            loc_18FA2:
0001C9AE 1341 003A                  		move.b	d1,$3A(a1)
0001C9B2 1141 003A                  		move.b	d1,$3A(a0)
0001C9B6 B229 001A                  		cmp.b	obFrame(a1),d1
0001C9BA 6700                       		beq.s	loc_19008
0001C9BC 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001C9C2 6700                       		beq.s	loc_19008
0001C9C4 4229 0025                  		clr.b	ob2ndRout(a1)
0001C9C8 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001C9CE 45F8 D000                  		lea	(v_objspace).w,a2
0001C9D2 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
0001C9D8 446A 0012                  		neg.w	obVelY(a2)
0001C9DC 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0001C9E2 6600                       		bne.s	loc_18FDC
0001C9E4 E0EA 0012                  		asr	obVelY(a2)
0001C9E8                            
0001C9E8                            loc_18FDC:
0001C9E8 08EA 0001 0022             		bset	#1,obStatus(a2)
0001C9EE 08AA 0003 0022             		bclr	#3,obStatus(a2)
0001C9F4 422A 003C                  		clr.b	$3C(a2)
0001C9F8 2F08                       		move.l	a0,-(sp)
0001C9FA 41D2                       		lea	(a2),a0
0001C9FC 4EB9 0001 5F52             		jsr	(Sonic_ChkRoll).l
0001CA02 205F                       		movea.l	(sp)+,a0
0001CA04 157C 0002 0024             		move.b	#2,obRoutine(a2)
0001CA14                            
0001CA14                            loc_19008:
0001CA14 4268 0010                  		clr.w	obVelX(a0)
0001CA18 4268 0012                  		clr.w	obVelY(a0)
0001CA1C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CA20 6000 FE64                  		bra.w	loc_18E7A
0001CA24                            ; ===========================================================================
0001CA24 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w -8, -$1C, -$2F, -$1C, -8
0001CA2E                            		even
0001CA2E E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001CA32                            		even
0001CA32 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001CA36                            		even
0001CA36                            ; ===========================================================================
0001CA36                            
0001CA36                            Obj7B_Explode:	; Routine 8
0001CA36 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001CA3A 4228 0024                  		clr.b	obRoutine(a0)
0001CA3E 0C68 0020 0028             		cmpi.w	#$20,obSubtype(a0)
0001CA44 6700                       		beq.s	Obj7B_MakeFrag
0001CA46 4E75                       		rts	
0001CA48                            ; ===========================================================================
0001CA48                            
0001CA48                            Obj7B_MakeFrag:
0001CA48 3168 0034 000C             		move.w	$34(a0),obY(a0)
0001CA4E 7203                       		moveq	#3,d1
0001CA50 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001CA54                            
0001CA54                            Obj7B_Loop:
0001CA54 4EB9 0000 FB18             		jsr	(FindFreeObj).l
0001CA5A 6600                       		bne.s	loc_1909A
0001CA5C 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load shrapnel object
0001CA60 137C 000A 0024             		move.b	#$A,obRoutine(a1)
0001CA66 237C 0000 0000 0004        		move.l	#Map_BSBall,obMap(a1)
0001CA6E 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001CA74 337C 0518 0002             		move.w	#$518,obGfx(a1)
0001CA7A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001CA80 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001CA86 335A 0010                  		move.w	(a2)+,obVelX(a1)
0001CA8A 335A 0012                  		move.w	(a2)+,obVelY(a1)
0001CA8E 137C 0098 0020             		move.b	#$98,obColType(a1)
0001CA94 0029 0004 0001             		ori.b	#4,obRender(a1)
0001CA9A 08E9 0007 0001             		bset	#7,obRender(a1)
0001CAA0 137C 000C 0014             		move.b	#$C,obActWid(a1)
0001CAA6                            
0001CAA6                            loc_1909A:
0001CAA6 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001CAAA                            
0001CAAA 4E75                       		rts	
0001CAAC                            ; ===========================================================================
0001CAAC FF00 FCC0                  Obj7B_FragSpeed:dc.w -$100, -$340	; horizontal, vertical
0001CAB0 FF60 FDC0                  		dc.w -$A0, -$240
0001CAB4 0100 FCC0                  		dc.w $100, -$340
0001CAB8 00A0 FDC0                  		dc.w $A0, -$240
0001CABC                            ; ===========================================================================
0001CABC                            
0001CABC                            Obj7B_MoveFrag:	; Routine $A
0001CABC 4EB9 0000 F56A             		jsr	(SpeedToPos).l
0001CAC2 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001CAC8 3168 000C 0034             		move.w	obY(a0),$34(a0)
0001CACE 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001CAD4 7004                       		moveq	#4,d0
0001CAD6 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001CADA E448                       		lsr.w	#2,d0
0001CADC 1140 001A                  		move.b	d0,obFrame(a0)
0001CAE0 4A28 0001                  		tst.b	1(a0)
0001CAE4 6A00 F7CA                  		bpl.w	Obj7A_Delete
0001CAE8 4E75                       		rts	
0001CAE8 4E75                       		rts	
0001CAEA                            Map_BSBall:	include	"_maps\SLZ Boss Spikeball.asm"
0001CAEA                            ; ---------------------------------------------------------------------------
0001CAEA                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001CAEA                            ; ---------------------------------------------------------------------------
0001CAEA                            Map_BSBall_internal:
0001CAEA 0000                       		dc.w @fireball1-Map_BSBall_internal
0001CAEC 0000                       		dc.w @fireball2-Map_BSBall_internal
0001CAEE 01                         @fireball1:	dc.b 1
0001CAEF FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001CAF4 01                         @fireball2:	dc.b 1
0001CAF5 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001CAFA                            		even
0001CAFA                            		even
0001CAFA                            		include	"_incObj\75 Boss - Spring Yard.asm"
0001CAFA                            ; ---------------------------------------------------------------------------
0001CAFA                            ; Object 75 - Eggman (SYZ)
0001CAFA                            ; ---------------------------------------------------------------------------
0001CAFA                            
0001CAFA                            BossSpringYard:
0001CAFA 7000                       		moveq	#0,d0
0001CAFC 1028 0024                  		move.b	obRoutine(a0),d0
0001CB00 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001CB04 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001CB08                            ; ===========================================================================
0001CB08 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001CB0A 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001CB0C 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001CB0E 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001CB10 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001CB12                            
0001CB12 0200 0280                  Obj75_ObjData:	dc.b 2,	0, $02, $80		; routine number, animation, priority (high and low bytes)
0001CB16 0401 0280                  		dc.b 4,	1, $02, $80
0001CB1A 0607 0280                  		dc.b 6,	7, $02, $80
0001CB1E 0800 0280                  		dc.b 8,	0, $02, $80
0001CB22                            ; ===========================================================================
0001CB22                            
0001CB22                            Obj75_Main:	; Routine 0
0001CB22 317C 2DB0 0008             		move.w	#$2DB0,obX(a0)
0001CB28 317C 04DA 000C             		move.w	#$4DA,obY(a0)
0001CB2E 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001CB34 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001CB3A 117C 000F 0020             		move.b	#$F,obColType(a0)
0001CB40 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001CB46 45FA FFCA                  		lea	Obj75_ObjData(pc),a2
0001CB4A 2248                       		movea.l	a0,a1
0001CB4C 7203                       		moveq	#3,d1
0001CB4E 6000                       		bra.s	Obj75_LoadBoss
0001CB50                            ; ===========================================================================
0001CB50                            
0001CB50                            Obj75_Loop:
0001CB50 4EB9 0000 FB2E             		jsr	(FindNextFreeObj).l
0001CB56 6600                       		bne.s	Obj75_ShipMain
0001CB58 12BC 0075                  		move.b	#id_BossSpringYard,(a1)
0001CB5C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001CB62 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001CB68                            
0001CB68                            Obj75_LoadBoss:
0001CB68 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001CB6E 4229 0025                  		clr.b	ob2ndRout(a1)
0001CB72 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001CB76 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001CB7A 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001CB7E 237C 0001 B6D4 0004        		move.l	#Map_Eggman,obMap(a1)
0001CB86 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001CB8C 137C 0004 0001             		move.b	#4,obRender(a1)
0001CB92 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001CB98 2348 0034                  		move.l	a0,$34(a1)
0001CB9C 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001CBA0                            
0001CBA0                            Obj75_ShipMain:	; Routine 2
0001CBA0 7000                       		moveq	#0,d0
0001CBA2 1028 0025                  		move.b	ob2ndRout(a0),d0
0001CBA6 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001CBAA 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001CBAE 43F9 0001 B684             		lea	(Ani_Eggman).l,a1
0001CBB4 4EB9 0000 C634             		jsr	(AnimateSprite).l
0001CBBA 7003                       		moveq	#3,d0
0001CBBC C028 0022                  		and.b	obStatus(a0),d0
0001CBC0 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001CBC6 8128 0001                  		or.b	d0,obRender(a0)
0001CBCA 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001CBD0                            ; ===========================================================================
0001CBD0 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001CBD4 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001CBD8 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001CBDC                            ; ===========================================================================
0001CBDC                            
0001CBDC                            loc_191CC:
0001CBDC 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001CBE2 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001CBE8 6400                       		bcc.s	loc_191DE
0001CBEA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CBEE                            
0001CBEE                            loc_191DE:
0001CBEE 1028 003F                  		move.b	$3F(a0),d0
0001CBF2 5428 003F                  		addq.b	#2,$3F(a0)
0001CBF6 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001CBFC E440                       		asr.w	#2,d0
0001CBFE 3140 0012                  		move.w	d0,obVelY(a0)
0001CC02                            
0001CC02                            loc_191F2:
0001CC02 6100 E66C                  		bsr.w	BossMove
0001CC06 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001CC0C 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001CC12                            
0001CC12                            loc_19202:
0001CC12 3028 0008                  		move.w	8(a0),d0
0001CC16 0440 2C00                  		subi.w	#$2C00,d0
0001CC1A EA48                       		lsr.w	#5,d0
0001CC1C 1140 0034                  		move.b	d0,$34(a0)
0001CC20 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001CC26 6400                       		bcc.s	locret_19256
0001CC28 4A28 0022                  		tst.b	obStatus(a0)
0001CC2C 6B00                       		bmi.s	loc_19258
0001CC2E 4A28 0020                  		tst.b	obColType(a0)
0001CC32 6600                       		bne.s	locret_19256
0001CC34 4A28 003E                  		tst.b	$3E(a0)
0001CC38 6600                       		bne.s	loc_1923A
0001CC3A 117C 0020 003E             		move.b	#$20,$3E(a0)
0001CC4A                            
0001CC4A                            loc_1923A:
0001CC4A 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001CC4E 7000                       		moveq	#0,d0
0001CC50 4A51                       		tst.w	(a1)
0001CC52 6600                       		bne.s	loc_19248
0001CC54 303C 0EEE                  		move.w	#cWhite,d0
0001CC58                            
0001CC58                            loc_19248:
0001CC58 3280                       		move.w	d0,(a1)
0001CC5A 5328 003E                  		subq.b	#1,$3E(a0)
0001CC5E 6600                       		bne.s	locret_19256
0001CC60 117C 000F 0020             		move.b	#$F,obColType(a0)
0001CC66                            
0001CC66                            locret_19256:
0001CC66 4E75                       		rts	
0001CC68                            ; ===========================================================================
0001CC68                            
0001CC68                            loc_19258:
0001CC68 7064                       		moveq	#100,d0
0001CC6A 6100 0000                  		bsr.w	AddPoints
0001CC6E 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001CC74 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001CC7A 4268 0010                  		clr.w	obVelX(a0)
0001CC7E 4E75                       		rts	
0001CC80                            ; ===========================================================================
0001CC80                            
0001CC80                            loc_19270:
0001CC80 3028 0030                  		move.w	$30(a0),d0
0001CC84 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001CC8A 0828 0000 0022             		btst	#0,obStatus(a0)
0001CC90 6600                       		bne.s	loc_1928E
0001CC92 4468 0010                  		neg.w	obVelX(a0)
0001CC96 0C40 2C08                  		cmpi.w	#$2C08,d0
0001CC9A 6E00                       		bgt.s	loc_1929E
0001CC9C 6000                       		bra.s	loc_19294
0001CC9E                            ; ===========================================================================
0001CC9E                            
0001CC9E                            loc_1928E:
0001CC9E 0C40 2D38                  		cmpi.w	#$2D38,d0
0001CCA2 6D00                       		blt.s	loc_1929E
0001CCA4                            
0001CCA4                            loc_19294:
0001CCA4 0868 0000 0022             		bchg	#0,obStatus(a0)
0001CCAA 4228 003D                  		clr.b	$3D(a0)
0001CCAE                            
0001CCAE                            loc_1929E:
0001CCAE 0440 2C10                  		subi.w	#$2C10,d0
0001CCB2 0240 001F                  		andi.w	#$1F,d0
0001CCB6 0440 001F                  		subi.w	#$1F,d0
0001CCBA 6A00                       		bpl.s	loc_192AE
0001CCBC 4440                       		neg.w	d0
0001CCBE                            
0001CCBE                            loc_192AE:
0001CCBE 5340                       		subq.w	#1,d0
0001CCC0 6E00                       		bgt.s	loc_192E8
0001CCC2 4A28 003D                  		tst.b	$3D(a0)
0001CCC6 6600                       		bne.s	loc_192E8
0001CCC8 3238 D008                  		move.w	(v_player+obX).w,d1
0001CCCC 0441 2C00                  		subi.w	#$2C00,d1
0001CCD0 EA41                       		asr.w	#5,d1
0001CCD2 B228 0034                  		cmp.b	$34(a0),d1
0001CCD6 6600                       		bne.s	loc_192E8
0001CCD8 7000                       		moveq	#0,d0
0001CCDA 1028 0034                  		move.b	$34(a0),d0
0001CCDE EB40                       		asl.w	#5,d0
0001CCE0 0640 2C10                  		addi.w	#$2C10,d0
0001CCE4 3140 0030                  		move.w	d0,$30(a0)
0001CCE8 6100 0000                  		bsr.w	Obj75_FindBlocks
0001CCEC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CCF0 4268 0028                  		clr.w	obSubtype(a0)
0001CCF4 4268 0010                  		clr.w	obVelX(a0)
0001CCF8                            
0001CCF8                            loc_192E8:
0001CCF8 6000 FEF4                  		bra.w	loc_191DE
0001CCFC                            ; ===========================================================================
0001CCFC                            
0001CCFC                            loc_192EC:
0001CCFC 7000                       		moveq	#0,d0
0001CCFE 1028 0028                  		move.b	obSubtype(a0),d0
0001CD02 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001CD06 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001CD0A                            ; ===========================================================================
0001CD0A 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001CD0C 0000                       		dc.w loc_19348-off_192FA
0001CD0E 0000                       		dc.w loc_1938E-off_192FA
0001CD10 0000                       		dc.w loc_193D0-off_192FA
0001CD12                            ; ===========================================================================
0001CD12                            
0001CD12                            loc_19302:
0001CD12 317C 0180 0012             		move.w	#$180,obVelY(a0)
0001CD18 3028 0038                  		move.w	$38(a0),d0
0001CD1C 0C40 0556                  		cmpi.w	#$556,d0
0001CD20 6500                       		bcs.s	loc_19344
0001CD22 317C 0556 0038             		move.w	#$556,$38(a0)
0001CD28 4268 003C                  		clr.w	$3C(a0)
0001CD2C 70FF                       		moveq	#-1,d0
0001CD2E 3028 0036                  		move.w	$36(a0),d0
0001CD32 6700                       		beq.s	loc_1933C
0001CD34 2240                       		movea.l	d0,a1
0001CD36 137C 00FF 0029             		move.b	#-1,$29(a1)
0001CD3C 117C 00FF 0029             		move.b	#-1,$29(a0)
0001CD42 2348 0034                  		move.l	a0,$34(a1)
0001CD46 317C 0032 003C             		move.w	#$32,$3C(a0)
0001CD4C                            
0001CD4C                            loc_1933C:
0001CD4C 4268 0012                  		clr.w	obVelY(a0)
0001CD50 5428 0028                  		addq.b	#2,obSubtype(a0)
0001CD54                            
0001CD54                            loc_19344:
0001CD54 6000 FEAC                  		bra.w	loc_191F2
0001CD58                            ; ===========================================================================
0001CD58                            
0001CD58                            loc_19348:
0001CD58 5368 003C                  		subq.w	#1,$3C(a0)
0001CD5C 6A00                       		bpl.s	loc_19366
0001CD5E 5428 0028                  		addq.b	#2,obSubtype(a0)
0001CD62 317C F800 0012             		move.w	#-$800,obVelY(a0)
0001CD68 4A68 0036                  		tst.w	$36(a0)
0001CD6C 6600                       		bne.s	loc_19362
0001CD6E E0E8 0012                  		asr	obVelY(a0)
0001CD72                            
0001CD72                            loc_19362:
0001CD72 7000                       		moveq	#0,d0
0001CD74 6000                       		bra.s	loc_1937C
0001CD76                            ; ===========================================================================
0001CD76                            
0001CD76                            loc_19366:
0001CD76 7000                       		moveq	#0,d0
0001CD78 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001CD7E 6E00                       		bgt.s	loc_1937C
0001CD80 7002                       		moveq	#2,d0
0001CD82 0828 0001 003D             		btst	#1,$3D(a0)
0001CD88 6700                       		beq.s	loc_1937C
0001CD8A 4440                       		neg.w	d0
0001CD8C                            
0001CD8C                            loc_1937C:
0001CD8C D068 0038                  		add.w	$38(a0),d0
0001CD90 3140 000C                  		move.w	d0,obY(a0)
0001CD94 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001CD9A 6000 FE76                  		bra.w	loc_19202
0001CD9E                            ; ===========================================================================
0001CD9E                            
0001CD9E                            loc_1938E:
0001CD9E 303C 04DA                  		move.w	#$4DA,d0
0001CDA2 4A68 0036                  		tst.w	$36(a0)
0001CDA6 6700                       		beq.s	loc_1939C
0001CDA8 0440 0018                  		subi.w	#$18,d0
0001CDAC                            
0001CDAC                            loc_1939C:
0001CDAC B068 0038                  		cmp.w	$38(a0),d0
0001CDB0 6D00                       		blt.s	loc_193BE
0001CDB2 317C 0008 003C             		move.w	#8,$3C(a0)
0001CDB8 4A68 0036                  		tst.w	$36(a0)
0001CDBC 6700                       		beq.s	loc_193B4
0001CDBE 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001CDC4                            
0001CDC4                            loc_193B4:
0001CDC4 5428 0028                  		addq.b	#2,obSubtype(a0)
0001CDC8 4268 0012                  		clr.w	obVelY(a0)
0001CDCC 6000                       		bra.s	loc_193CC
0001CDCE                            ; ===========================================================================
0001CDCE                            
0001CDCE                            loc_193BE:
0001CDCE 0C68 FFC0 0012             		cmpi.w	#-$40,obVelY(a0)
0001CDD4 6C00                       		bge.s	loc_193CC
0001CDD6 0668 000C 0012             		addi.w	#$C,obVelY(a0)
0001CDDC                            
0001CDDC                            loc_193CC:
0001CDDC 6000 FE24                  		bra.w	loc_191F2
0001CDE0                            ; ===========================================================================
0001CDE0                            
0001CDE0                            loc_193D0:
0001CDE0 5368 003C                  		subq.w	#1,$3C(a0)
0001CDE4 6E00                       		bgt.s	loc_19406
0001CDE6 6B00                       		bmi.s	loc_193EE
0001CDE8 70FF                       		moveq	#-1,d0
0001CDEA 3028 0036                  		move.w	$36(a0),d0
0001CDEE 6700                       		beq.s	loc_193E8
0001CDF0 2240                       		movea.l	d0,a1
0001CDF2 137C 000A 0029             		move.b	#$A,$29(a1)
0001CDF8                            
0001CDF8                            loc_193E8:
0001CDF8 4268 0036                  		clr.w	$36(a0)
0001CDFC 6000                       		bra.s	loc_19406
0001CDFE                            ; ===========================================================================
0001CDFE                            
0001CDFE                            loc_193EE:
0001CDFE 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001CE04 6600                       		bne.s	loc_19406
0001CE06 4228 0029                  		clr.b	$29(a0)
0001CE0A 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001CE0E 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001CE14 6000                       		bra.s	loc_19446
0001CE16                            ; ===========================================================================
0001CE16                            
0001CE16                            loc_19406:
0001CE16 7001                       		moveq	#1,d0
0001CE18 4A68 0036                  		tst.w	$36(a0)
0001CE1C 6700                       		beq.s	loc_19410
0001CE1E 7002                       		moveq	#2,d0
0001CE20                            
0001CE20                            loc_19410:
0001CE20 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001CE26 6700                       		beq.s	loc_19424
0001CE28 6D00                       		blt.s	loc_1941C
0001CE2A 4440                       		neg.w	d0
0001CE2C                            
0001CE2C                            loc_1941C:
0001CE2C 4A68 0036                  		tst.w	$36(a0)
0001CE30 D168 0038                  		add.w	d0,$38(a0)
0001CE34                            
0001CE34                            loc_19424:
0001CE34 7000                       		moveq	#0,d0
0001CE36 4A68 0036                  		tst.w	$36(a0)
0001CE3A 6700                       		beq.s	loc_19438
0001CE3C 7002                       		moveq	#2,d0
0001CE3E 0828 0000 003D             		btst	#0,$3D(a0)
0001CE44 6700                       		beq.s	loc_19438
0001CE46 4440                       		neg.w	d0
0001CE48                            
0001CE48                            loc_19438:
0001CE48 D068 0038                  		add.w	$38(a0),d0
0001CE4C 3140 000C                  		move.w	d0,obY(a0)
0001CE50 3168 0030 0008             		move.w	$30(a0),8(a0)
0001CE56                            
0001CE56                            loc_19446:
0001CE56 6000 FDBA                  		bra.w	loc_19202
0001CE5A                            
0001CE5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE5A                            
0001CE5A                            
0001CE5A                            Obj75_FindBlocks:
0001CE5A 4268 0036                  		clr.w	$36(a0)
0001CE5E 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001CE62 703E                       		moveq	#$3E,d0
0001CE64 7276                       		moveq	#$76,d1
0001CE66 1428 0034                  		move.b	$34(a0),d2
0001CE6A                            
0001CE6A                            Obj75_FindLoop:
0001CE6A B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001CE6C 6600                       		bne.s	loc_1946A	; if not, branch
0001CE6E B429 0028                  		cmp.b	obSubtype(a1),d2
0001CE72 6600                       		bne.s	loc_1946A
0001CE74 3149 0036                  		move.w	a1,$36(a0)
0001CE78 6000                       		bra.s	locret_19472
0001CE7A                            ; ===========================================================================
0001CE7A                            
0001CE7A                            loc_1946A:
0001CE7A 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001CE7E 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001CE82                            
0001CE82                            locret_19472:
0001CE82 4E75                       		rts	
0001CE84                            ; End of function Obj75_FindBlocks
0001CE84                            
0001CE84                            ; ===========================================================================
0001CE84                            
0001CE84                            loc_19474:
0001CE84 5368 003C                  		subq.w	#1,$3C(a0)
0001CE88 6B00                       		bmi.s	loc_1947E
0001CE8A 6000 E3A2                  		bra.w	BossDefeated
0001CE8E                            ; ===========================================================================
0001CE8E                            
0001CE8E                            loc_1947E:
0001CE8E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CE92 4268 0012                  		clr.w	obVelY(a0)
0001CE96 08E8 0000 0022             		bset	#0,obStatus(a0)
0001CE9C 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001CEA2 4268 0010                  		clr.w	obVelX(a0)
0001CEA6 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001CEAC 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001CEB0 6600                       		bne.s	loc_194A8
0001CEB2 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001CEB8                            
0001CEB8                            loc_194A8:
0001CEB8 6000 FD58                  		bra.w	loc_19202
0001CEBC                            ; ===========================================================================
0001CEBC                            
0001CEBC                            loc_194AC:
0001CEBC 5268 003C                  		addq.w	#1,$3C(a0)
0001CEC0 6700                       		beq.s	loc_194BC
0001CEC2 6A00                       		bpl.s	loc_194C2
0001CEC4 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001CECA 6000                       		bra.s	loc_194EE
0001CECC                            ; ===========================================================================
0001CECC                            
0001CECC                            loc_194BC:
0001CECC 4268 0012                  		clr.w	obVelY(a0)
0001CED0 6000                       		bra.s	loc_194EE
0001CED2                            ; ===========================================================================
0001CED2                            
0001CED2                            loc_194C2:
0001CED2 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001CED8 6500                       		bcs.s	loc_194DA
0001CEDA 6700                       		beq.s	loc_194E0
0001CEDC 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001CEE2 6500                       		bcs.s	loc_194EE
0001CEE4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CEE8 6000                       		bra.s	loc_194EE
0001CEEA                            ; ===========================================================================
0001CEEA                            
0001CEEA                            loc_194DA:
0001CEEA 5168 0012                  		subq.w	#8,obVelY(a0)
0001CEEE 6000                       		bra.s	loc_194EE
0001CEF0                            ; ===========================================================================
0001CEF0                            
0001CEF0                            loc_194E0:
0001CEF0 4268 0012                  		clr.w    obVelY(a0)
0001CEF4 4A38 FE2D                          	tst.b     (v_invinc).w
0001CEF8 6600                               	bne.s   @boss_invinc
0001CEFA                            
0001CEFA 1038 F5C6                          	move.b   (v_Saved_music),d0
0001CEFE 6000 0000                          	bra.w      @boss_play
0001CF02                            
0001CF02                            @boss_invinc:
0001CF02 103C 0000                          	move.b #bgm_Invincible,d0
0001CF06                            
0001CF06                            @boss_play:
0001CF06 4EB8 129A                          	jsr PlaySound
0001CF0A                            
0001CF0A                            loc_194EE:
0001CF0A 6000 FCF6                  		bra.w	loc_191F2
0001CF0E                            ; ===========================================================================
0001CF0E                            
0001CF0E                            loc_194F2:
0001CF0E 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001CF14 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001CF1A 0C78 2D40 F72A             		cmpi.w	#$2D40,(v_limitright2).w
0001CF20 6400                       		bcc.s	loc_1950C
0001CF22 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001CF26 6000                       		bra.s	loc_19512
0001CF28                            ; ===========================================================================
0001CF28                            
0001CF28                            loc_1950C:
0001CF28 4A28 0001                  		tst.b	obRender(a0)
0001CF2C 6A00                       		bpl.s	Obj75_ShipDelete
0001CF2E                            
0001CF2E                            loc_19512:
0001CF2E 6100 E340                  		bsr.w	BossMove
0001CF32 6000 FCBA                  		bra.w	loc_191DE
0001CF36                            ; ===========================================================================
0001CF36                            
0001CF36                            Obj75_ShipDelete:
0001CF36 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001CF3C                            ; ===========================================================================
0001CF3C                            
0001CF3C                            Obj75_FaceMain:	; Routine 4
0001CF3C 7201                       		moveq	#1,d1
0001CF3E 2268 0034                  		movea.l	$34(a0),a1
0001CF42 7000                       		moveq	#0,d0
0001CF44 1029 0025                  		move.b	ob2ndRout(a1),d0
0001CF48 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001CF4C 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001CF50 1141 001C                  		move.b	d1,obAnim(a0)
0001CF54 1010                       		move.b	(a0),d0
0001CF56 B011                       		cmp.b	(a1),d0
0001CF58 6600                       		bne.s	Obj75_FaceDelete
0001CF5A 6000                       		bra.s	loc_195BE
0001CF5C                            ; ===========================================================================
0001CF5C                            
0001CF5C                            Obj75_FaceDelete:
0001CF5C 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001CF62                            ; ===========================================================================
0001CF62 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001CF66 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001CF6A 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001CF6E                            ; ===========================================================================
0001CF6E                            
0001CF6E                            loc_19552:
0001CF6E 720A                       		moveq	#$A,d1
0001CF70 4E75                       		rts	
0001CF72                            ; ===========================================================================
0001CF72                            
0001CF72                            loc_19556:
0001CF72 7206                       		moveq	#6,d1
0001CF74 4E75                       		rts	
0001CF76                            ; ===========================================================================
0001CF76                            
0001CF76                            loc_1955A:
0001CF76 7000                       		moveq	#0,d0
0001CF78 1029 0028                  		move.b	obSubtype(a1),d0
0001CF7C 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001CF80 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001CF84                            ; ===========================================================================
0001CF84 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001CF88 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001CF8C                            ; ===========================================================================
0001CF8C                            
0001CF8C                            loc_19570:
0001CF8C 6000                       		bra.s	loc_19574
0001CF8E                            ; ===========================================================================
0001CF8E                            
0001CF8E                            loc_19572:
0001CF8E 7206                       		moveq	#6,d1
0001CF90                            
0001CF90                            loc_19574:
0001CF90 4A29 0020                  		tst.b	obColType(a1)
0001CF94 6600                       		bne.s	loc_1957E
0001CF96 7205                       		moveq	#5,d1
0001CF98 4E75                       		rts	
0001CF9A                            ; ===========================================================================
0001CF9A                            
0001CF9A                            loc_1957E:
0001CF9A 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001CFA0 6500                       		bcs.s	locret_19588
0001CFA2 7204                       		moveq	#4,d1
0001CFA4                            
0001CFA4                            locret_19588:
0001CFA4 4E75                       		rts	
0001CFA6                            ; ===========================================================================
0001CFA6                            
0001CFA6                            Obj75_FlameMain:; Routine 6
0001CFA6 117C 0007 001C             		move.b	#7,obAnim(a0)
0001CFAC 2268 0034                  		movea.l	$34(a0),a1
0001CFB0 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001CFB6 6600                       		bne.s	loc_195AA
0001CFB8 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001CFBE 4A28 0001                  		tst.b	1(a0)
0001CFC2 6A00                       		bpl.s	Obj75_FlameDelete
0001CFC4 6000                       		bra.s	loc_195B6
0001CFC6                            ; ===========================================================================
0001CFC6                            
0001CFC6                            loc_195AA:
0001CFC6 4A69 0010                  		tst.w	obVelX(a1)
0001CFCA 6700                       		beq.s	loc_195B6
0001CFCC 117C 0008 001C             		move.b	#8,obAnim(a0)
0001CFD2                            
0001CFD2                            loc_195B6:
0001CFD2 6000                       		bra.s	loc_195BE
0001CFD4                            ; ===========================================================================
0001CFD4                            
0001CFD4                            Obj75_FlameDelete:
0001CFD4 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001CFDA                            ; ===========================================================================
0001CFDA                            
0001CFDA                            loc_195BE:
0001CFDA 43F9 0001 B684             		lea	(Ani_Eggman).l,a1
0001CFE0 4EB9 0000 C634             		jsr	(AnimateSprite).l
0001CFE6 2268 0034                  		movea.l	$34(a0),a1
0001CFEA 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001CFF0 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001CFF6                            
0001CFF6                            loc_195DA:
0001CFF6 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001CFFC 7003                       		moveq	#3,d0
0001CFFE C028 0022                  		and.b	obStatus(a0),d0
0001D002 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001D008 8128 0001                  		or.b	d0,obRender(a0)
0001D00C 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001D012                            ; ===========================================================================
0001D012                            
0001D012                            Obj75_SpikeMain:; Routine 8
0001D012 217C 0001 B7C4 0004        		move.l	#Map_BossItems,obMap(a0)
0001D01A 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001D020 117C 0005 001A             		move.b	#5,obFrame(a0)
0001D026 2268 0034                  		movea.l	$34(a0),a1
0001D02A 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001D030 6600                       		bne.s	loc_1961C
0001D032 4A28 0001                  		tst.b	obRender(a0)
0001D036 6A00                       		bpl.s	Obj75_SpikeDelete
0001D038                            
0001D038                            loc_1961C:
0001D038 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D03E 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D044 3028 003C                  		move.w	$3C(a0),d0
0001D048 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001D04E 6600                       		bne.s	loc_19652
0001D050 0C29 0006 0028             		cmpi.b	#6,obSubtype(a1)
0001D056 6700                       		beq.s	loc_1964C
0001D058 4A29 0028                  		tst.b	obSubtype(a1)
0001D05C 6600                       		bne.s	loc_19658
0001D05E 0C40 0094                  		cmpi.w	#$94,d0
0001D062 6C00                       		bge.s	loc_19658
0001D064 5E40                       		addq.w	#7,d0
0001D066 6000                       		bra.s	loc_19658
0001D068                            ; ===========================================================================
0001D068                            
0001D068                            loc_1964C:
0001D068 4A69 003C                  		tst.w	$3C(a1)
0001D06C 6A00                       		bpl.s	loc_19658
0001D06E                            
0001D06E                            loc_19652:
0001D06E 4A40                       		tst.w	d0
0001D070 6F00                       		ble.s	loc_19658
0001D072 5B40                       		subq.w	#5,d0
0001D074                            
0001D074                            loc_19658:
0001D074 3140 003C                  		move.w	d0,$3C(a0)
0001D078 E440                       		asr.w	#2,d0
0001D07A D168 000C                  		add.w	d0,obY(a0)
0001D07E 117C 0008 0014             		move.b	#8,obActWid(a0)
0001D084 117C 000C 0016             		move.b	#$C,obHeight(a0)
0001D08A 4228 0020                  		clr.b	obColType(a0)
0001D08E 2268 0034                  		movea.l	$34(a0),a1
0001D092 4A29 0020                  		tst.b	obColType(a1)
0001D096 6700                       		beq.s	loc_19688
0001D098 4A29 0029                  		tst.b	$29(a1)
0001D09C 6600                       		bne.s	loc_19688
0001D09E 117C 0084 0020             		move.b	#$84,obColType(a0)
0001D0A4                            
0001D0A4                            loc_19688:
0001D0A4 6000 FF50                  		bra.w	loc_195DA
0001D0A8                            ; ===========================================================================
0001D0A8                            
0001D0A8                            Obj75_SpikeDelete:
0001D0A8 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001D0A8 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001D0AE                            		include	"_incObj\76 SYZ Boss Blocks.asm"
0001D0AE                            ; ---------------------------------------------------------------------------
0001D0AE                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001D0AE                            ; ---------------------------------------------------------------------------
0001D0AE                            
0001D0AE                            BossBlock:
0001D0AE 7000                       		moveq	#0,d0
0001D0B0 1028 0024                  		move.b	obRoutine(a0),d0
0001D0B4 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001D0B8 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001D0BC                            ; ===========================================================================
0001D0BC 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001D0BE 0000                       		dc.w Obj76_Action-Obj76_Index
0001D0C0 0000                       		dc.w loc_19762-Obj76_Index
0001D0C2                            ; ===========================================================================
0001D0C2                            
0001D0C2                            Obj76_Main:	; Routine 0
0001D0C2 7800                       		moveq	#0,d4
0001D0C4 3A3C 2C10                  		move.w	#$2C10,d5
0001D0C8 7C09                       		moveq	#9,d6
0001D0CA 43D0                       		lea	(a0),a1
0001D0CC 6000                       		bra.s	Obj76_MakeBlock
0001D0CE                            ; ===========================================================================
0001D0CE                            
0001D0CE                            Obj76_Loop:
0001D0CE 4EB9 0000 FB18             		jsr	(FindFreeObj).l
0001D0D4 6600                       		bne.s	Obj76_ExitLoop
0001D0D6                            
0001D0D6                            Obj76_MakeBlock:
0001D0D6 12BC 0076                  		move.b	#id_BossBlock,(a1)
0001D0DA 237C 0000 0000 0004        		move.l	#Map_BossBlock,obMap(a1)
0001D0E2 337C 4000 0002             		move.w	#$4000,obGfx(a1)
0001D0E8 137C 0004 0001             		move.b	#4,obRender(a1)
0001D0EE 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001D0F4 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001D0FA 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001D100 3345 0008                  		move.w	d5,obX(a1)	; set x-position
0001D104 337C 0582 000C             		move.w	#$582,obY(a1)
0001D10A 3344 0028                  		move.w	d4,obSubtype(a1)
0001D10E 0644 0101                  		addi.w	#$101,d4
0001D112 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001D116 5429 0024                  		addq.b	#2,obRoutine(a1)
0001D11A 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001D11E                            
0001D11E                            Obj76_ExitLoop:
0001D11E 4E75                       		rts	
0001D120                            ; ===========================================================================
0001D120                            
0001D120                            Obj76_Action:	; Routine 2
0001D120 1028 0029                  		move.b	$29(a0),d0
0001D124 B028 0028                  		cmp.b	obSubtype(a0),d0
0001D128 6700                       		beq.s	Obj76_Solid
0001D12A 4A00                       		tst.b	d0
0001D12C 6B00                       		bmi.s	loc_19718
0001D12E                            
0001D12E                            loc_19712:
0001D12E 6100 0000                  		bsr.w	Obj76_Break
0001D132 6000                       		bra.s	Obj76_Display
0001D134                            ; ===========================================================================
0001D134                            
0001D134                            loc_19718:
0001D134 2268 0034                  		movea.l	$34(a0),a1
0001D138 4A29 0021                  		tst.b	obColProp(a1)
0001D13C 67F0                       		beq.s	loc_19712
0001D13E 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D144 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D14A 0668 002C 000C             		addi.w	#$2C,obY(a0)
0001D150 B2C8                       		cmpa.w	a0,a1
0001D152 6500                       		bcs.s	Obj76_Display
0001D154 3029 0012                  		move.w	obVelY(a1),d0
0001D158 48C0                       		ext.l	d0
0001D15A E080                       		asr.l	#8,d0
0001D15C D168 000C                  		add.w	d0,obY(a0)
0001D160 6000                       		bra.s	Obj76_Display
0001D162                            ; ===========================================================================
0001D162                            
0001D162                            Obj76_Solid:
0001D162 323C 001B                  		move.w	#$1B,d1
0001D166 343C 0010                  		move.w	#$10,d2
0001D16A 363C 0011                  		move.w	#$11,d3
0001D16E 3828 0008                  		move.w	obX(a0),d4
0001D172 4EB9 0001 1ADE             		jsr	(SolidObject).l
0001D178                            
0001D178                            Obj76_Display:
0001D178 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001D17E                            ; ===========================================================================
0001D17E                            
0001D17E                            loc_19762:	; Routine 4
0001D17E 4A28 0001                  		tst.b	obRender(a0)
0001D182 6A00                       		bpl.s	Obj76_Delete
0001D184 4EB9 0000 F532             		jsr	(ObjectFall).l
0001D18A 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001D190                            ; ===========================================================================
0001D190                            
0001D190                            Obj76_Delete:
0001D190 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001D196                            
0001D196                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D196                            
0001D196                            
0001D196                            Obj76_Break:
0001D196 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001D19A 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001D19E 7801                       		moveq	#1,d4
0001D1A0 7203                       		moveq	#3,d1
0001D1A2 7438                       		moveq	#$38,d2
0001D1A4 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D1A8 117C 0008 0014             		move.b	#8,obActWid(a0)
0001D1AE 117C 0008 0016             		move.b	#8,obHeight(a0)
0001D1B4 43D0                       		lea	(a0),a1
0001D1B6 6000                       		bra.s	Obj76_MakeFrag
0001D1B8                            ; ===========================================================================
0001D1B8                            
0001D1B8                            Obj76_LoopFrag:
0001D1B8 4EB9 0000 FB2E             		jsr	(FindNextFreeObj).l
0001D1BE 6600                       		bne.s	loc_197D4
0001D1C0                            
0001D1C0                            Obj76_MakeFrag:
0001D1C0 45D0                       		lea	(a0),a2
0001D1C2 47D1                       		lea	(a1),a3
0001D1C4 7603                       		moveq	#3,d3
0001D1C6                            
0001D1C6                            loc_197AA:
0001D1C6 26DA                       		move.l	(a2)+,(a3)+
0001D1C8 26DA                       		move.l	(a2)+,(a3)+
0001D1CA 26DA                       		move.l	(a2)+,(a3)+
0001D1CC 26DA                       		move.l	(a2)+,(a3)+
0001D1CE 51CB FFF6                  		dbf	d3,loc_197AA
0001D1D2                            
0001D1D2 335C 0010                  		move.w	(a4)+,obVelX(a1)
0001D1D6 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001D1DA 361D                       		move.w	(a5)+,d3
0001D1DC D769 0008                  		add.w	d3,obX(a1)
0001D1E0 361D                       		move.w	(a5)+,d3
0001D1E2 D769 000C                  		add.w	d3,obY(a1)
0001D1E6 1344 001A                  		move.b	d4,obFrame(a1)
0001D1EA 5244                       		addq.w	#1,d4
0001D1EC 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001D1F0                            
0001D1F0                            loc_197D4:
0001D1FA                            ; End of function Obj76_Break
0001D1FA                            
0001D1FA                            ; ===========================================================================
0001D1FA FE80 FE00                  Obj76_FragSpeed:dc.w -$180, -$200
0001D1FE 0180 FE00                  		dc.w $180, -$200
0001D202 FF00 FF00                  		dc.w -$100, -$100
0001D206 0100 FF00                  		dc.w $100, -$100
0001D20A FFF8 FFF8                  Obj76_FragPos:	dc.w -8, -8
0001D20E 0010 0000                  		dc.w $10, 0
0001D212 0000 0010                  		dc.w 0,	$10
0001D216 0010 0010                  		dc.w $10, $10
0001D216 0010 0010                  		dc.w $10, $10
0001D21A                            Map_BossBlock:	include	"_maps\SYZ Boss Blocks.asm"
0001D21A                            ; ---------------------------------------------------------------------------
0001D21A                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001D21A                            ; ---------------------------------------------------------------------------
0001D21A                            Map_BossBlock_internal:
0001D21A 0000                       		dc.w @wholeblock-Map_BossBlock_internal
0001D21C 0000                       		dc.w @topleft-Map_BossBlock_internal
0001D21E 0000                       		dc.w @topright-Map_BossBlock_internal
0001D220 0000                       		dc.w @bottomleft-Map_BossBlock_internal
0001D222 0000                       		dc.w @bottomright-Map_BossBlock_internal
0001D224 02                         @wholeblock:	dc.b 2
0001D225 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001D22A 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001D22F 00                         		dc.b 0
0001D230 01                         @topleft:	dc.b 1
0001D231 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001D236 01                         @topright:	dc.b 1
0001D237 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001D23C 01                         @bottomleft:	dc.b 1
0001D23D F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001D242 01                         @bottomright:	dc.b 1
0001D243 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001D248                            		even
0001D248                            		even
0001D248                            
0001D248                            loc_1982C:
0001D248 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001D24E                            
0001D24E                            		include	"_incObj\82 Eggman - Scrap Brain 2.asm"
0001D24E                            ; ---------------------------------------------------------------------------
0001D24E                            ; Object 82 - Eggman (SBZ2)
0001D24E                            ; ---------------------------------------------------------------------------
0001D24E                            
0001D24E                            ScrapEggman:
0001D24E 7000                       		moveq	#0,d0
0001D250 1028 0024                  		move.b	obRoutine(a0),d0
0001D254 323B 0000                  		move.w	SEgg_Index(pc,d0.w),d1
0001D258 4EFB 1000                  		jmp	SEgg_Index(pc,d1.w)
0001D25C                            ; ===========================================================================
0001D25C 0000                       SEgg_Index:	dc.w SEgg_Main-SEgg_Index
0001D25E 0000                       		dc.w SEgg_Eggman-SEgg_Index
0001D260 0000                       		dc.w SEgg_Switch-SEgg_Index
0001D262                            
0001D262 0200 03                    SEgg_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001D265 0400 03                    		dc.b 4,	0, 3
0001D268                            ; ===========================================================================
0001D268                            
0001D268                            SEgg_Main:	; Routine 0
0001D268 45FA FFF8                  		lea	SEgg_ObjData(pc),a2
0001D26C 317C 1C60 0008             		move.w	#$1C60,obX(a0)
0001D272 317C 02A4 000C             		move.w	#$2A4,obY(a0)
0001D278 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D27E 117C 0010 0021             		move.b	#$10,obColProp(a0)
0001D284 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001D28A 4228 0025                  		clr.b	ob2ndRout(a0)
0001D28E 115A 0024                  		move.b	(a2)+,obRoutine(a0)
0001D292 115A 001C                  		move.b	(a2)+,obAnim(a0)
0001D296 115A 0018                  		move.b	(a2)+,obPriority(a0)
0001D29A 217C 0000 0000 0004        		move.l	#Map_SEgg,obMap(a0)
0001D2A2 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D2A8 117C 0004 0001             		move.b	#4,obRender(a0)
0001D2AE 08E8 0007 0001             		bset	#7,obRender(a0)
0001D2B4 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001D2BA 4EB9 0000 FB2E             		jsr	(FindNextFreeObj).l
0001D2C0 6600                       		bne.s	SEgg_Eggman
0001D2C2 2348 0034                  		move.l	a0,$34(a1)
0001D2C6 12BC 0082                  		move.b	#id_ScrapEggman,(a1) ; load switch object
0001D2CA 337C 1C30 0008             		move.w	#$1C30,obX(a1)
0001D2D0 337C 02BC 000C             		move.w	#$2BC,obY(a1)
0001D2D6 4228 0025                  		clr.b	ob2ndRout(a0)
0001D2DA 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001D2DE 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001D2E2 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001D2E6 237C 0000 DDB6 0004        		move.l	#Map_But,obMap(a1)
0001D2EE 337C 04A4 0002             		move.w	#$4A4,obGfx(a1)
0001D2F4 137C 0004 0001             		move.b	#4,obRender(a1)
0001D2FA 08E9 0007 0001             		bset	#7,obRender(a1)
0001D300 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001D306 137C 0000 001A             		move.b	#0,obFrame(a1)
0001D30C                            
0001D30C                            SEgg_Eggman:	; Routine 2
0001D30C 7000                       		moveq	#0,d0
0001D30E 1028 0025                  		move.b	ob2ndRout(a0),d0
0001D312 323B 0000                  		move.w	SEgg_EggIndex(pc,d0.w),d1
0001D316 4EBB 1000                  		jsr	SEgg_EggIndex(pc,d1.w)
0001D31A 43FA 0000                  		lea	Ani_SEgg(pc),a1
0001D31E 4EB9 0000 C634             		jsr	(AnimateSprite).l
0001D324 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001D32A                            ; ===========================================================================
0001D32A 0000                       SEgg_EggIndex:	dc.w SEgg_ChkSonic-SEgg_EggIndex
0001D32C 0000                       		dc.w SEgg_PreLeap-SEgg_EggIndex
0001D32E 0000                       		dc.w SEgg_Leap-SEgg_EggIndex
0001D330 0000                       		dc.w loc_19934-SEgg_EggIndex
0001D332                            ; ===========================================================================
0001D332                            
0001D332                            SEgg_ChkSonic:
0001D332 3028 0008                  		move.w	obX(a0),d0
0001D336 9078 D008                  		sub.w	(v_player+obX).w,d0
0001D33A 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001D33E 6400                       		bcc.s	loc_19934	; if not, branch
0001D340 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D344 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001D34A 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D350                            
0001D350                            loc_19934:
0001D350 4EF9 0000 F56A             		jmp	(SpeedToPos).l
0001D356                            ; ===========================================================================
0001D356                            
0001D356                            SEgg_PreLeap:
0001D356 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001D35A 6600                       		bne.s	loc_19954	; if time remains, branch
0001D35C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D360 117C 0002 001C             		move.b	#2,obAnim(a0)
0001D366 5868 000C                  		addq.w	#4,obY(a0)
0001D36A 317C 000F 003C             		move.w	#15,$3C(a0)
0001D370                            
0001D370                            loc_19954:
0001D370 60DE                       		bra.s	loc_19934
0001D372                            ; ===========================================================================
0001D372                            
0001D372                            SEgg_Leap:
0001D372 5368 003C                  		subq.w	#1,$3C(a0)
0001D376 6E00                       		bgt.s	loc_199D0
0001D378 6600                       		bne.s	loc_1996A
0001D37A 317C FF04 0010             		move.w	#-$FC,obVelX(a0) ; make Eggman leap
0001D380 317C FC40 0012             		move.w	#-$3C0,obVelY(a0)
0001D386                            
0001D386                            loc_1996A:
0001D386 0C68 1C32 0008             		cmpi.w	#$1C32,obX(a0)
0001D38C 6E00                       		bgt.s	loc_19976
0001D38E 4268 0010                  		clr.w	obVelX(a0)
0001D392                            
0001D392                            loc_19976:
0001D392 0668 0024 0012             		addi.w	#$24,obVelY(a0)
0001D398 4A68 0012                  		tst.w	obVelY(a0)
0001D39C 6B00                       		bmi.s	SEgg_FindBlocks
0001D39E 0C68 0295 000C             		cmpi.w	#$295,obY(a0)
0001D3A4 6500                       		bcs.s	SEgg_FindBlocks
0001D3A6 317C 5357 0028             		move.w	#$5357,obSubtype(a0)
0001D3AC 0C68 029B 000C             		cmpi.w	#$29B,obY(a0)
0001D3B2 6500                       		bcs.s	SEgg_FindBlocks
0001D3B4 317C 029B 000C             		move.w	#$29B,obY(a0)
0001D3BA 4268 0012                  		clr.w	obVelY(a0)
0001D3BE                            
0001D3BE                            SEgg_FindBlocks:
0001D3BE 3028 0010                  		move.w	obVelX(a0),d0
0001D3C2 8068 0012                  		or.w	obVelY(a0),d0
0001D3C6 6600                       		bne.s	loc_199D0
0001D3C8 43F8 D000                  		lea	(v_objspace).w,a1 ; start at the first object RAM
0001D3CC 703E                       		moveq	#$3E,d0
0001D3CE 7240                       		moveq	#$40,d1
0001D3D0                            
0001D3D0                            SEgg_FindLoop:	
0001D3D0 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001D3D2 0C11 0083                  		cmpi.b	#id_FalseFloor,(a1) ; is object a block? (object $83)
0001D3D6 57C8 FFF8                  		dbeq	d0,SEgg_FindLoop ; if not, repeat (max	$3E times)
0001D3DA                            
0001D3DA 6600                       		bne.s	loc_199D0
0001D3DC 337C 474F 0028             		move.w	#$474F,obSubtype(a1) ; set block to disintegrate
0001D3E2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D3E6 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D3EC                            
0001D3EC                            loc_199D0:
0001D3EC 6000 FF62                  		bra.w	loc_19934
0001D3F0                            ; ===========================================================================
0001D3F0                            
0001D3F0                            SEgg_Switch:	; Routine 4
0001D3F0 7000                       		moveq	#0,d0
0001D3F2 1028 0025                  		move.b	ob2ndRout(a0),d0
0001D3F6 303B 0000                  		move.w	SEgg_SwIndex(pc,d0.w),d0
0001D3FA 4EFB 0000                  		jmp	SEgg_SwIndex(pc,d0.w)
0001D3FE                            ; ===========================================================================
0001D3FE 0000                       SEgg_SwIndex:	dc.w loc_199E6-SEgg_SwIndex
0001D400 0000                       		dc.w SEgg_SwDisplay-SEgg_SwIndex
0001D402                            ; ===========================================================================
0001D402                            
0001D402                            loc_199E6:
0001D402 2268 0034                  		movea.l	$34(a0),a1
0001D406 0C69 5357 0028             		cmpi.w	#$5357,obSubtype(a1)
0001D40C 6600                       		bne.s	SEgg_SwDisplay
0001D40E 117C 0001 001A             		move.b	#1,obFrame(a0)
0001D414 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D418                            
0001D418                            SEgg_SwDisplay:
0001D418 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001D418 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001D41E                            		include	"_anim\Eggman - Scrap Brain 2 & Final.asm"
0001D41E                            ; ---------------------------------------------------------------------------
0001D41E                            ; Animation script - Eggman (SBZ2)
0001D41E                            ; ---------------------------------------------------------------------------
0001D41E 0000                       Ani_SEgg:	dc.w @stand-Ani_SEgg
0001D420 0000                       		dc.w @laugh-Ani_SEgg
0001D422 0000                       		dc.w @jump1-Ani_SEgg
0001D424 0000                       		dc.w @intube-Ani_SEgg
0001D426 0000                       		dc.w @running-Ani_SEgg
0001D428 0000                       		dc.w @jump2-Ani_SEgg
0001D42A 0000                       		dc.w @starjump-Ani_SEgg
0001D42C 7E00 FF                    @stand:		dc.b $7E, 0, afEnd
0001D430 00                         		even
0001D430 0601 02FF                  @laugh:		dc.b 6,	1, 2, afEnd
0001D434 0E03 0404 0000 00FF        @jump1:		dc.b $E, 3, 4, 4, 0, 0,	0, afEnd
0001D43C 0005 09FF                  @intube:	dc.b 0,	5, 9, afEnd
0001D440 0607 0408 04FF             @running:	dc.b 6,	7, 4, 8, 4, afEnd
0001D446 0F04 0303 FF               @jump2:		dc.b $F, 4, 3, 3, afEnd
0001D44C 00                         		even
0001D44C 7E06 FF                    @starjump:	dc.b $7E, 6, afEnd
0001D450 00                         		even
0001D450 00                         		even
0001D450                            Map_SEgg:	include	"_maps\Eggman - Scrap Brain 2.asm"
0001D450                            ; --------------------------------------------------------------------------------
0001D450                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001D450                            ; --------------------------------------------------------------------------------
0001D450                            
0001D450                            SME_y00JM:	
0001D450 0000 0000                  		dc.w SME_y00JM_16-SME_y00JM, SME_y00JM_26-SME_y00JM	
0001D454 0000 0000                  		dc.w SME_y00JM_4A-SME_y00JM, SME_y00JM_6E-SME_y00JM	
0001D458 0000 0000                  		dc.w SME_y00JM_83-SME_y00JM, SME_y00JM_A7-SME_y00JM	
0001D45C 0000 0000                  		dc.w SME_y00JM_BC-SME_y00JM, SME_y00JM_E0-SME_y00JM	
0001D460 0000 0000                  		dc.w SME_y00JM_FA-SME_y00JM, SME_y00JM_119-SME_y00JM	
0001D464 0000                       		dc.w SME_y00JM_142-SME_y00JM	
0001D466 03                         SME_y00JM_16:	dc.b 3	
0001D467 FC00 008F E8               		dc.b $FC, 0, 0, $8F, $E8	
0001D46C E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001D471 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001D476 07                         SME_y00JM_26:	dc.b 7	
0001D477 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0	
0001D47C 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001D481 FC00 008F E8               		dc.b $FC, 0, 0, $8F, $E8	
0001D486 F800 0002 F0               		dc.b $F8, 0, 0, 2, $F0	
0001D48B F800 0005 F8               		dc.b $F8, 0, 0, 5, $F8	
0001D490 F800 0008 00               		dc.b $F8, 0, 0, 8, 0	
0001D495 F800 000B 08               		dc.b $F8, 0, 0, $B, 8	
0001D49A 07                         SME_y00JM_4A:	dc.b 7	
0001D49B E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0	
0001D4A0 FD00 008F E8               		dc.b $FD, 0, 0, $8F, $E8	
0001D4A5 F900 0002 F0               		dc.b $F9, 0, 0, 2, $F0	
0001D4AA F900 0005 F8               		dc.b $F9, 0, 0, 5, $F8	
0001D4AF F900 0008 00               		dc.b $F9, 0, 0, 8, 0	
0001D4B4 F900 000B 08               		dc.b $F9, 0, 0, $B, 8	
0001D4B9 010F 007F F0               		dc.b 1, $F, 0, $7F, $F0	
0001D4BE 04                         SME_y00JM_6E:	dc.b 4	
0001D4BF F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0	
0001D4C4 F504 0830 10               		dc.b $F5, 4, 8, $30, $10	
0001D4C9 0809 084E F0               		dc.b 8, 9, 8, $4E, $F0	
0001D4CE EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0	
0001D4D3 07                         SME_y00JM_83:	dc.b 7	
0001D4D4 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001D4D9 F104 0830 10               		dc.b $F1, 4, 8, $30, $10	
0001D4DE 0806 083E F8               		dc.b 8, 6, 8, $3E, $F8	
0001D4E3 E800 0000 F0               		dc.b $E8, 0, 0, 0, $F0	
0001D4E8 E800 0003 F8               		dc.b $E8, 0, 0, 3, $F8	
0001D4ED E800 0006 00               		dc.b $E8, 0, 0, 6, 0	
0001D4F2 E800 0009 08               		dc.b $E8, 0, 0, 9, 8	
0001D4F7 04                         SME_y00JM_A7:	dc.b 4	
0001D4F8 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001D4FD E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001D502 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001D507 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001D50C 07                         SME_y00JM_BC:	dc.b 7	
0001D50D E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001D512 E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001D517 0409 0834 00               		dc.b 4, 9, 8, $34, 0	
0001D51C 0405 083A E8               		dc.b 4, 5, 8, $3A, $E8	
0001D521 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001D526 F104 0854 10               		dc.b $F1, 4, 8, $54, $10	
0001D52B F104 0054 E0               		dc.b $F1, 4, 0, $54, $E0	
0001D530 05                         SME_y00JM_E0:	dc.b 5	
0001D531 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001D536 F104 0830 10               		dc.b $F1, 4, 8, $30, $10	
0001D53B 0409 0834 00               		dc.b 4, 9, 8, $34, 0	
0001D540 0405 083A E8               		dc.b 4, 5, 8, $3A, $E8	
0001D545 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001D54A 06                         SME_y00JM_FA:	dc.b 6	
0001D54B EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0	
0001D550 EF04 0830 10               		dc.b $EF, 4, 8, $30, $10	
0001D555 0905 0844 00               		dc.b 9, 5, 8, $44, 0	
0001D55A 0301 0848 F8               		dc.b 3, 1, 8, $48, $F8	
0001D55F 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8	
0001D564 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
0001D569 08                         SME_y00JM_119:	dc.b 8	
0001D56A E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001D56F E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001D574 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001D579 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001D57E E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0, $F0	
0001D583 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0, $F0	
0001D588 000D 3EF0 F0               		dc.b 0, $D, $3E, $F0, $F0	
0001D58D 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0, $F0	
0001D592 03                         SME_y00JM_142:	dc.b 3	
0001D593 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4	
0001D598 F408 005E 04               		dc.b $F4, 8, 0, $5E, 4	
0001D59D EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC	
0001D5A2                            		even
0001D5A2                            		even
0001D5A2                            		include	"_incObj\83 SBZ Eggman's Crumbling Floor.asm"
0001D5A2                            ; ---------------------------------------------------------------------------
0001D5A2                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001D5A2                            ; ---------------------------------------------------------------------------
0001D5A2                            
0001D5A2                            FalseFloor:
0001D5A2 7000                       		moveq	#0,d0
0001D5A4 1028 0024                  		move.b	obRoutine(a0),d0
0001D5A8 323B 0000                  		move.w	FFloor_Index(pc,d0.w),d1
0001D5AC 4EFB 1000                  		jmp	FFloor_Index(pc,d1.w)
0001D5B0                            ; ===========================================================================
0001D5B0 0000                       FFloor_Index:	dc.w FFloor_Main-FFloor_Index
0001D5B2 0000                       		dc.w FFloor_ChkBreak-FFloor_Index
0001D5B4 0000                       		dc.w loc_19C36-FFloor_Index
0001D5B6 0000                       		dc.w loc_19C62-FFloor_Index
0001D5B8 0000                       		dc.w loc_19C72-FFloor_Index
0001D5BA 0000                       		dc.w loc_19C80-FFloor_Index
0001D5BC                            ; ===========================================================================
0001D5BC                            
0001D5BC                            FFloor_Main:	; Routine 0
0001D5BC 317C 1B80 0008             		move.w	#$1B80,obX(a0)
0001D5C2 317C 02D0 000C             		move.w	#$2D0,obY(a0)
0001D5C8 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001D5CE 117C 0010 0016             		move.b	#$10,obHeight(a0)
0001D5D4 117C 0004 0001             		move.b	#4,obRender(a0)
0001D5DA 08E8 0007 0001             		bset	#7,obRender(a0)
0001D5E0 7800                       		moveq	#0,d4
0001D5E2 3A3C 1B10                  		move.w	#$1B10,d5
0001D5E6 7C07                       		moveq	#7,d6
0001D5E8 45E8 0030                  		lea	$30(a0),a2
0001D5EC                            
0001D5EC                            FFloor_MakeBlock:
0001D5EC 4EB9 0000 FB18             		jsr	(FindFreeObj).l
0001D5F2 6600                       		bne.s	FFloor_ExitMake
0001D5F4 34C9                       		move.w	a1,(a2)+
0001D5F6 12BC 0083                  		move.b	#id_FalseFloor,(a1) ; load block object
0001D5FA 237C 0000 0000 0004        		move.l	#Map_FFloor,obMap(a1)
0001D602 337C 4518 0002             		move.w	#$4518,obGfx(a1)
0001D608 137C 0004 0001             		move.b	#4,obRender(a1)
0001D60E 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001D614 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001D61A 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001D620 3345 0008                  		move.w	d5,obX(a1)	; set X	position
0001D624 337C 02D0 000C             		move.w	#$2D0,obY(a1)
0001D62A 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001D62E 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001D634 51CE FFB6                  		dbf	d6,FFloor_MakeBlock ; repeat sequence 7 more times
0001D638                            
0001D638                            FFloor_ExitMake:
0001D638 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D63C 4E75                       		rts	
0001D63E                            ; ===========================================================================
0001D63E                            
0001D63E                            FFloor_ChkBreak:; Routine 2
0001D63E 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001D644 6600                       		bne.s	FFloor_Solid	; if not, branch
0001D646 4228 001A                  		clr.b	obFrame(a0)
0001D64A 5428 0024                  		addq.b	#2,obRoutine(a0) ; next subroutine
0001D64E                            
0001D64E                            FFloor_Solid:
0001D64E 7000                       		moveq	#0,d0
0001D650 1028 001A                  		move.b	obFrame(a0),d0
0001D654 4400                       		neg.b	d0
0001D656 4880                       		ext.w	d0
0001D658 5040                       		addq.w	#8,d0
0001D65A E940                       		asl.w	#4,d0
0001D65C 383C 1C00                  		move.w	#$1C00,d4
0001D660 9840                       		sub.w	d0,d4
0001D662 1140 0014                  		move.b	d0,obActWid(a0)
0001D666 3144 0008                  		move.w	d4,obX(a0)
0001D66A 720B                       		moveq	#$B,d1
0001D66C D240                       		add.w	d0,d1
0001D66E 7410                       		moveq	#$10,d2
0001D670 7611                       		moveq	#$11,d3
0001D672 4EF9 0001 1ADE             		jmp	(SolidObject).l
0001D678                            ; ===========================================================================
0001D678                            
0001D678                            loc_19C36:	; Routine 4
0001D678 0428 000E 001E             		subi.b	#$E,obTimeFrame(a0)
0001D67E 6400                       		bcc.s	FFloor_Solid2
0001D680 70FF                       		moveq	#-1,d0
0001D682 1028 001A                  		move.b	obFrame(a0),d0
0001D686 4880                       		ext.w	d0
0001D688 D040                       		add.w	d0,d0
0001D68A 3030 0030                  		move.w	$30(a0,d0.w),d0
0001D68E 2240                       		movea.l	d0,a1
0001D690 337C 474F 0028             		move.w	#$474F,obSubtype(a1)
0001D696 5228 001A                  		addq.b	#1,obFrame(a0)
0001D69A 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)
0001D6A0 6700                       		beq.s	loc_19C62
0001D6A2                            
0001D6A2                            FFloor_Solid2:
0001D6A2 60AA                       		bra.s	FFloor_Solid
0001D6A4                            ; ===========================================================================
0001D6A4                            
0001D6A4                            loc_19C62:	; Routine 6
0001D6A4 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001D6AA 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001D6B0 6000 FB96                  		bra.w	loc_1982C
0001D6B4                            ; ===========================================================================
0001D6B4                            
0001D6B4                            loc_19C72:	; Routine 8
0001D6B4 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001D6BA 6700                       		beq.s	FFloor_Break	; if yes, branch
0001D6BC 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001D6C2                            ; ===========================================================================
0001D6C2                            
0001D6C2                            loc_19C80:	; Routine $A
0001D6C2 4A28 0001                  		tst.b	obRender(a0)
0001D6C6 6A00 FB80                  		bpl.w	loc_1982C
0001D6CA 4EB9 0000 F532             		jsr	(ObjectFall).l
0001D6D0 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001D6D6                            ; ===========================================================================
0001D6D6                            
0001D6D6                            FFloor_Break:
0001D6D6 49FA 0000                  		lea	FFloor_FragSpeed(pc),a4
0001D6DA 4BFA 0000                  		lea	FFloor_FragPos(pc),a5
0001D6DE 7801                       		moveq	#1,d4
0001D6E0 7203                       		moveq	#3,d1
0001D6E2 7438                       		moveq	#$38,d2
0001D6E4 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D6E8 117C 0008 0014             		move.b	#8,obActWid(a0)
0001D6EE 117C 0008 0016             		move.b	#8,obHeight(a0)
0001D6F4 43D0                       		lea	(a0),a1
0001D6F6 6000                       		bra.s	FFloor_MakeFrag
0001D6F8                            ; ===========================================================================
0001D6F8                            
0001D6F8                            FFloor_LoopFrag:
0001D6F8 4EB9 0000 FB2E             		jsr	(FindNextFreeObj).l
0001D6FE 6600                       		bne.s	FFloor_BreakSnd
0001D700                            
0001D700                            FFloor_MakeFrag:
0001D700 45D0                       		lea	(a0),a2
0001D702 47D1                       		lea	(a1),a3
0001D704 7603                       		moveq	#3,d3
0001D706                            
0001D706                            loc_19CC4:
0001D706 26DA                       		move.l	(a2)+,(a3)+
0001D708 26DA                       		move.l	(a2)+,(a3)+
0001D70A 26DA                       		move.l	(a2)+,(a3)+
0001D70C 26DA                       		move.l	(a2)+,(a3)+
0001D70E 51CB FFF6                  		dbf	d3,loc_19CC4
0001D712                            
0001D712 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001D716 361D                       		move.w	(a5)+,d3
0001D718 D769 0008                  		add.w	d3,obX(a1)
0001D71C 361D                       		move.w	(a5)+,d3
0001D71E D769 000C                  		add.w	d3,obY(a1)
0001D722 1344 001A                  		move.b	d4,obFrame(a1)
0001D726 5244                       		addq.w	#1,d4
0001D728 51C9 FFCE                  		dbf	d1,FFloor_LoopFrag ; repeat sequence 3 more times
0001D72C                            
0001D72C                            FFloor_BreakSnd:
0001D736 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001D73C                            ; ===========================================================================
0001D73C 0080 0000                  FFloor_FragSpeed:dc.w $80, 0
0001D740 0120 00C0                  		dc.w $120, $C0
0001D744 FFF8 FFF8                  FFloor_FragPos:	dc.w -8, -8
0001D748 0010 0000                  		dc.w $10, 0
0001D74C 0000 0010                  		dc.w 0,	$10
0001D750 0010 0010                  		dc.w $10, $10
0001D750 0010 0010                  		dc.w $10, $10
0001D754                            Map_FFloor:	include	"_maps\SBZ Eggman's Crumbling Floor.asm"
0001D754                            ; ---------------------------------------------------------------------------
0001D754                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001D754                            ; ---------------------------------------------------------------------------
0001D754                            Map_FFloor_internal:
0001D754 0000                       		dc.w @wholeblock-Map_FFloor_internal
0001D756 0000                       		dc.w @topleft-Map_FFloor_internal
0001D758 0000                       		dc.w @topright-Map_FFloor_internal
0001D75A 0000                       		dc.w @bottomleft-Map_FFloor_internal
0001D75C 0000                       		dc.w @bottomright-Map_FFloor_internal
0001D75E 01                         @wholeblock:	dc.b 1
0001D75F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001D764 02                         @topleft:	dc.b 2
0001D765 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001D76A F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001D76F 00                         		dc.b 0
0001D770 02                         @topright:	dc.b 2
0001D771 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001D776 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001D77B 00                         		dc.b 0
0001D77C 02                         @bottomleft:	dc.b 2
0001D77D F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001D782 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001D787 00                         		dc.b 0
0001D788 02                         @bottomright:	dc.b 2
0001D789 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001D78E F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001D794 00                         		even
0001D794 00                         		even
0001D794                            		include	"_incObj\85 Boss - Final.asm"
0001D794                            ; ---------------------------------------------------------------------------
0001D794                            ; Object 85 - Eggman (FZ)
0001D794                            ; ---------------------------------------------------------------------------
0001D794                            
0001D794                            Obj85_Delete:
0001D794 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001D79A                            ; ===========================================================================
0001D79A                            
0001D79A                            BossFinal:
0001D79A 7000                       		moveq	#0,d0
0001D79C 1028 0024                  		move.b	obRoutine(a0),d0
0001D7A0 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001D7A4 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001D7A8                            ; ===========================================================================
0001D7A8 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001D7AA 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001D7AC 0000                       		dc.w loc_1A38E-Obj85_Index
0001D7AE 0000                       		dc.w loc_1A346-Obj85_Index
0001D7B0 0000                       		dc.w loc_1A2C6-Obj85_Index
0001D7B2 0000                       		dc.w loc_1A3AC-Obj85_Index
0001D7B4 0000                       		dc.w loc_1A264-Obj85_Index
0001D7B6                            
0001D7B6 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001D7BC 0001 D450                  		dc.l Map_SEgg		; mappings pointer
0001D7C0 25B0 0590 0300             		dc.w $25B0, $590, $300
0001D7C6 0000 0000                  		dc.l Map_EggCyl
0001D7CA 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001D7D0 0000 0000                  		dc.l Map_FZLegs
0001D7D4 26E0 0596 0470             		dc.w $26E0, $596, $470
0001D7DA 0001 D450                  		dc.l Map_SEgg
0001D7DE 26E0 0596 0400             		dc.w $26E0, $596, $400
0001D7E4 0001 B6D4                  		dc.l Map_Eggman
0001D7E8 26E0 0596 0400             		dc.w $26E0, $596, $400
0001D7EE 0001 B6D4                  		dc.l Map_Eggman
0001D7F2                            
0001D7F2                            Obj85_ObjData2:	; routine num, animation, sprite priority (high and low bytes), width, height		
0001D7F2 0200 0200 2019             		dc.b  2, 0, $02, $00, $20, $19
0001D7F8 0400 0080 1208             		dc.b  4, 0, $00, $80, $12,   8
0001D7FE 0600 0180 0000             		dc.b  6, 0, $01, $80,   0,   0
0001D804 0800 0180 0000             		dc.b  8, 0, $01, $80,   0,   0
0001D80A 0A00 0180 2020             		dc.b $A, 0, $01, $80, $20, $20
0001D810 0C00 0180 0000             		dc.b $C, 0, $01, $80,   0,   0
0001D816                            ; ===========================================================================
0001D816                            
0001D816                            Obj85_Main:	; Routine 0
0001D816 45FA FF9E                  		lea	Obj85_ObjData(pc),a2
0001D81A 47FA FFD6                  		lea	Obj85_ObjData2(pc),a3
0001D81E 2248                       		movea.l	a0,a1
0001D820 7205                       		moveq	#5,d1
0001D822 6000                       		bra.s	Obj85_LoadBoss
0001D824                            ; ===========================================================================
0001D824                            
0001D824                            Obj85_Loop:
0001D824 4EB9 0000 FB2E             		jsr	(FindNextFreeObj).l
0001D82A 6600                       		bne.s	loc_19E20
0001D82C                            
0001D82C                            Obj85_LoadBoss:
0001D82C 12BC 0085                  		move.b	#id_BossFinal,(a1)
0001D830 335A 0008                  		move.w	(a2)+,obX(a1)
0001D834 335A 000C                  		move.w	(a2)+,obY(a1)
0001D838 335A 0002                  		move.w	(a2)+,obGfx(a1)
0001D83C 235A 0004                  		move.l	(a2)+,obMap(a1)
0001D840 135B 0024                  		move.b	(a3)+,obRoutine(a1)
0001D844 135B 001C                  		move.b	(a3)+,obAnim(a1)
0001D848 335B 0018                  		move.w	(a3)+,obPriority(a1)
0001D84C 135B 0014                  			move.b	(a3)+,obActWid(a1)
0001D850 135B 0016                  		move.b	(a3)+,obHeight(a1)
0001D854 137C 0004 0001             		move.b	#4,obRender(a1)
0001D85A 08E8 0007 0001             		bset	#7,obRender(a0)
0001D860 2348 0034                  		move.l	a0,$34(a1)
0001D864 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001D868                            
0001D868                            loc_19E20:
0001D868 45E8 0036                  		lea	$36(a0),a2
0001D86C 4EB9 0000 FB18             		jsr	(FindFreeObj).l
0001D872 6600                       		bne.s	loc_19E5A
0001D874 12BC 0086                  		move.b	#id_BossPlasma,(a1) ; load energy ball object
0001D878 3489                       		move.w	a1,(a2)
0001D87A 2348 0034                  		move.l	a0,$34(a1)
0001D87E 45E8 0038                  		lea	$38(a0),a2
0001D882 7400                       		moveq	#0,d2
0001D884 7203                       		moveq	#3,d1
0001D886                            
0001D886                            loc_19E3E:
0001D886 4EB9 0000 FB2E             		jsr	(FindNextFreeObj).l
0001D88C 6600                       		bne.s	loc_19E5A
0001D88E 34C9                       		move.w	a1,(a2)+
0001D890 12BC 0084                  		move.b	#id_EggmanCylinder,(a1) ; load crushing	cylinder object
0001D894 2348 0034                  		move.l	a0,$34(a1)
0001D898 1342 0028                  		move.b	d2,obSubtype(a1)
0001D89C 5442                       		addq.w	#2,d2
0001D89E 51C9 FFE6                  		dbf	d1,loc_19E3E
0001D8A2                            
0001D8A2                            loc_19E5A:
0001D8A2 317C 0000 0034             		move.w	#0,$34(a0)
0001D8A8 117C 0006 0021             		move.b	#6,obColProp(a0) ; set number of hits to 6
0001D8AE 317C FFFF 0030             		move.w	#-1,$30(a0)
0001D8B4                            
0001D8B4                            Obj85_Eggman:	; Routine 2
0001D8B4 7000                       		moveq	#0,d0
0001D8B6 1028 0034                  		move.b	$34(a0),d0
0001D8BA 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001D8BE 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001D8C2 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001D8C8                            ; ===========================================================================
0001D8C8 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001D8CC 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001D8D0 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001D8D4 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001D8D8                            ; ===========================================================================
0001D8D8                            
0001D8D8                            loc_19E90:
0001D8D8 4AB8 F680                  		tst.l	(v_plc_buffer).w
0001D8DC 6600                       		bne.s	loc_19EA2
0001D8DE 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
0001D8E4 6500                       		bcs.s	loc_19EA2
0001D8E6 5428 0034                  		addq.b	#2,$34(a0)
0001D8EA                            
0001D8EA                            loc_19EA2:
0001D8EA 52B8 F636                  		addq.l	#1,(v_random).w
0001D8EE 4E75                       		rts	
0001D8F0                            ; ===========================================================================
0001D8F0                            
0001D8F0                            loc_19EA8:
0001D8F0 4A68 0030                  		tst.w	$30(a0)
0001D8F4 6A00                       		bpl.s	loc_19F10
0001D8F6 4268 0030                  		clr.w	$30(a0)
0001D8FA 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001D900 0240 000C                  		andi.w	#$C,d0
0001D904 3200                       		move.w	d0,d1
0001D906 5441                       		addq.w	#2,d1
0001D908 4A80                       		tst.l	d0
0001D90A 6A00                       		bpl.s	loc_19EC6
0001D90C C340                       		exg	d1,d0
0001D90E                            
0001D90E                            loc_19EC6:
0001D90E 43FA 0000                  		lea	word_19FD6(pc),a1
0001D912 3031 0000                  		move.w	(a1,d0.w),d0
0001D916 3231 1000                  		move.w	(a1,d1.w),d1
0001D91A 3140 0030                  		move.w	d0,$30(a0)
0001D91E 74FF                       		moveq	#-1,d2
0001D920 3430 0038                  		move.w	$38(a0,d0.w),d2
0001D924 2242                       		movea.l	d2,a1
0001D926 137C 00FF 0029             		move.b	#-1,$29(a1)
0001D92C 337C FFFF 0030             		move.w	#-1,$30(a1)
0001D932 3430 1038                  		move.w	$38(a0,d1.w),d2
0001D936 2242                       		movea.l	d2,a1
0001D938 137C 0001 0029             		move.b	#1,$29(a1)
0001D93E 337C 0000 0030             		move.w	#0,$30(a1)
0001D944 317C 0001 0032             		move.w	#1,$32(a0)
0001D94A 4228 0035                  		clr.b	$35(a0)
0001D958                            
0001D958                            loc_19F10:
0001D958 4A68 0032                  		tst.w	$32(a0)
0001D95C 6B00 0000                  		bmi.w	loc_19FA6
0001D960 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001D966 3038 D008                  		move.w	(v_player+obX).w,d0
0001D96A 9068 0008                  		sub.w	obX(a0),d0
0001D96E 6500                       		bcs.s	loc_19F2E
0001D970 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D976                            
0001D976                            loc_19F2E:
0001D976 323C 002B                  		move.w	#$2B,d1
0001D97A 343C 0014                  		move.w	#$14,d2
0001D97E 363C 0014                  		move.w	#$14,d3
0001D982 3828 0008                  		move.w	obX(a0),d4
0001D986 4EB9 0001 1ADE             		jsr	(SolidObject).l
0001D98C 4A44                       		tst.w	d4
0001D98E 6E00                       		bgt.s	loc_19F50
0001D990                            
0001D990                            loc_19F48:
0001D990 4A28 0035                  		tst.b	$35(a0)
0001D994 6600                       		bne.s	loc_19F88
0001D996 6000                       		bra.s	loc_19F96
0001D998                            ; ===========================================================================
0001D998                            
0001D998                            loc_19F50:
0001D998 5E78 F636                  		addq.w	#7,(v_random).w
0001D99C 0C38 0002 D01C             		cmpi.b	#id_Roll,(v_player+obAnim).w
0001D9A2 66EC                       		bne.s	loc_19F48
0001D9A4 303C 0300                  		move.w	#$300,d0
0001D9A8 0828 0000 0022             		btst	#0,obStatus(a0)
0001D9AE 6600                       		bne.s	loc_19F6A
0001D9B0 4440                       		neg.w	d0
0001D9B2                            
0001D9B2                            loc_19F6A:
0001D9B2 31C0 D010                  		move.w	d0,(v_player+obVelX).w
0001D9B6 4A28 0035                  		tst.b	$35(a0)
0001D9BA 6600                       		bne.s	loc_19F88
0001D9BC 5328 0021                  		subq.b	#1,obColProp(a0)
0001D9C0 117C 00FF 0035             		move.b	#$FF,$35(a0)
0001D9C6 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001D9CC                            
0001D9CC                            loc_19F88:
0001D9CC 5328 0035                  		subq.b	#1,$35(a0)
0001D9D0 6700                       		beq.s	loc_19F96
0001D9D2 117C 0003 001C             		move.b	#3,obAnim(a0)
0001D9D8 6000                       		bra.s	loc_19F9C
0001D9DA                            ; ===========================================================================
0001D9DA                            
0001D9DA                            loc_19F96:
0001D9DA 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D9E0                            
0001D9E0                            loc_19F9C:
0001D9E0 43FA FA3C                  		lea	Ani_SEgg(pc),a1
0001D9E4 4EF9 0000 C634             		jmp	(AnimateSprite).l
0001D9EA                            ; ===========================================================================
0001D9EA                            
0001D9EA                            loc_19FA6:
0001D9EA 4A28 0021                  		tst.b	obColProp(a0)
0001D9EE 6700                       		beq.s	loc_19FBC
0001D9F0 5428 0034                  		addq.b	#2,$34(a0)
0001D9F4 317C FFFF 0030             		move.w	#-1,$30(a0)
0001D9FA 4268 0032                  		clr.w	$32(a0)
0001D9FE 4E75                       		rts	
0001DA00                            ; ===========================================================================
0001DA00                            
0001DA00                            loc_19FBC:
0001DA00 7064                       			moveq	#100,d0
0001DA02 6100 0000                  			bsr.w	AddPoints
0001DA06 117C 0006 0034             		move.b	#6,$34(a0)
0001DA0C 317C 25C0 0008             		move.w	#$25C0,obX(a0)
0001DA12 317C 053C 000C             		move.w	#$53C,obY(a0)
0001DA18 117C 0014 0016             		move.b	#$14,obHeight(a0)
0001DA1E 4E75                       		rts	
0001DA20                            ; ===========================================================================
0001DA20 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001DA30                            ; ===========================================================================
0001DA30                            
0001DA30                            loc_19FE6:
0001DA30 70FF                       		moveq	#-1,d0
0001DA32 3028 0036                  		move.w	$36(a0),d0
0001DA36 2240                       		movea.l	d0,a1
0001DA38 4A68 0030                  		tst.w	$30(a0)
0001DA3C 6A00                       		bpl.s	loc_1A000
0001DA3E 4268 0030                  		clr.w	$30(a0)
0001DA42 137C 00FF 0029             		move.b	#-1,$29(a1)
0001DA48 6100                       		bsr.s	loc_1A020
0001DA4A                            
0001DA4A                            loc_1A000:
0001DA4A 700F                       		moveq	#$F,d0
0001DA4C C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001DA50 6600                       		bne.s	loc_1A00A
0001DA52 6100                       		bsr.s	loc_1A020
0001DA54                            
0001DA54                            loc_1A00A:
0001DA54 4A68 0032                  		tst.w	$32(a0)
0001DA58 6700                       		beq.s	locret_1A01E
0001DA5A 5528 0034                  		subq.b	#2,$34(a0)
0001DA5E 317C FFFF 0030             		move.w	#-1,$30(a0)
0001DA64 4268 0032                  		clr.w	$32(a0)
0001DA68                            
0001DA68                            locret_1A01E:
0001DA68 4E75                       		rts	
0001DA6A                            ; ===========================================================================
0001DA6A                            
0001DA6A                            loc_1A020:
0001DA74                            ; ===========================================================================
0001DA74                            
0001DA74                            loc_1A02A:
0001DA74 117C 0030 0014             			move.b	#$30,obActWid(a0)
0001DA7A 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DA80 4EB9 0000 F56A             		jsr	(SpeedToPos).l
0001DA86 117C 0006 001A             		move.b	#6,obFrame(a0)
0001DA8C 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001DA92 0C68 059C 000C             		cmpi.w	#$59C,obY(a0)
0001DA98 6500                       		bcs.s	loc_1A070
0001DA9A 317C 059C 000C             		move.w	#$59C,obY(a0)
0001DAA0 5428 0034                  		addq.b	#2,$34(a0)
0001DAA4 117C 0020 0014             			move.b	#$20,obActWid(a0)
0001DAAA 317C 0100 0010             		move.w	#$100,obVelX(a0)
0001DAB0 317C FF00 0012             		move.w	#-$100,obVelY(a0)
0001DAB6 5438 F742                  		addq.b	#2,(v_dle_routine).w
0001DABA                            
0001DABA                            loc_1A070:
0001DABA 6000 0000                  		bra.w	loc_1A166
0001DABE                            ; ===========================================================================
0001DABE                            
0001DABE                            loc_1A074:
0001DABE 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DAC4 117C 0004 001C             		move.b	#4,obAnim(a0)
0001DACA 4EB9 0000 F56A             		jsr	(SpeedToPos).l
0001DAD0 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001DAD6 0C68 05A3 000C             		cmpi.w	#$5A3,obY(a0)
0001DADC 6500                       		bcs.s	loc_1A09A
0001DADE 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001DAE4                            
0001DAE4                            loc_1A09A:
0001DAE4 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001DAEA 3028 0008                  		move.w	obX(a0),d0
0001DAEE 9078 D008                  		sub.w	(v_player+obX).w,d0
0001DAF2 6A00                       		bpl.s	loc_1A0B4
0001DAF4 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001DAFA 6000 0000                  		bra.w	loc_1A0F2
0001DAFE                            ; ===========================================================================
0001DAFE                            
0001DAFE                            loc_1A0B4:
0001DAFE 0440 0070                  		subi.w	#$70,d0
0001DB02 6500                       		bcs.s	loc_1A0F2
0001DB04 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001DB0A 5140                       		subq.w	#8,d0
0001DB0C 6500                       		bcs.s	loc_1A0F2
0001DB0E 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001DB14 5140                       		subq.w	#8,d0
0001DB16 6500                       		bcs.s	loc_1A0F2
0001DB18 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001DB1E 5140                       		subq.w	#8,d0
0001DB20 6500                       		bcs.s	loc_1A0F2
0001DB22 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001DB28 5140                       		subq.w	#8,d0
0001DB2A 6500                       		bcs.s	loc_1A0F2
0001DB2C 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001DB32 0440 0038                  		subi.w	#$38,d0
0001DB36 6500                       		bcs.s	loc_1A0F2
0001DB38 4268 0010                  		clr.w	obVelX(a0)
0001DB3C                            
0001DB3C                            loc_1A0F2:
0001DB3C 0C68 26A0 0008             		cmpi.w	#$26A0,obX(a0)
0001DB42 6500                       		bcs.s	loc_1A110
0001DB44 317C 26A0 0008             		move.w	#$26A0,obX(a0)
0001DB4A 317C 0240 0010             		move.w	#$240,obVelX(a0)
0001DB50 317C FB40 0012             		move.w	#-$4C0,obVelY(a0)
0001DB56 5428 0034                  		addq.b	#2,$34(a0)
0001DB5A                            
0001DB5A                            loc_1A110:
0001DB5A 6000                       		bra.s	loc_1A15C
0001DB5C                            ; ===========================================================================
0001DB5C                            
0001DB5C                            loc_1A112:
0001DB5C 4EB9 0000 F56A             		jsr	(SpeedToPos).l
0001DB62 0C68 26E0 0008             		cmpi.w	#$26E0,obX(a0)
0001DB68 6500                       		bcs.s	loc_1A124
0001DB6A 4268 0010                  		clr.w	obVelX(a0)
0001DB6E                            
0001DB6E                            loc_1A124:
0001DB6E 0668 0034 0012             		addi.w	#$34,obVelY(a0)
0001DB74 4A68 0012                  		tst.w	obVelY(a0)
0001DB78 6B00                       		bmi.s	loc_1A142
0001DB7A 0C68 0592 000C             		cmpi.w	#$592,obY(a0)
0001DB80 6500                       		bcs.s	loc_1A142
0001DB82 317C 0592 000C             		move.w	#$592,obY(a0)
0001DB88 4268 0012                  		clr.w	obVelY(a0)
0001DB8C                            
0001DB8C                            loc_1A142:
0001DB8C 3028 0010                  		move.w	obVelX(a0),d0
0001DB90 8068 0012                  		or.w	obVelY(a0),d0
0001DB94 6600                       		bne.s	loc_1A15C
0001DB96 5428 0034                  		addq.b	#2,$34(a0)
0001DB9A 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001DBA0 117C 0001 0021             		move.b	#1,obColProp(a0)
0001DBA6                            
0001DBA6                            loc_1A15C:
0001DBA6 43FA F876                  		lea	Ani_SEgg(pc),a1
0001DBAA 4EB9 0000 C634             		jsr	(AnimateSprite).l
0001DBB0                            
0001DBB0                            loc_1A166:
0001DBB0 0C78 2700 F72A             		cmpi.w	#$2700,(v_limitright2).w
0001DBB6 6C00                       		bge.s	loc_1A172
0001DBB8 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001DBBC                            
0001DBBC                            loc_1A172:
0001DBBC 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001DBC2 6C00                       		bge.s	locret_1A190
0001DBC4 323C 001B                  		move.w	#$1B,d1
0001DBC8 343C 0070                  		move.w	#$70,d2
0001DBCC 363C 0071                  		move.w	#$71,d3
0001DBD0 3828 0008                  		move.w	obX(a0),d4
0001DBD4 4EF9 0001 1ADE             		jmp	(SolidObject).l
0001DBDA                            ; ===========================================================================
0001DBDA                            
0001DBDA                            locret_1A190:
0001DBDA 4E75                       		rts	
0001DBDC                            ; ===========================================================================
0001DBDC                            
0001DBDC                            loc_1A192:
0001DBDC 217C 0001 B6D4 0004        		move.l	#Map_Eggman,obMap(a0)
0001DBE4 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001DBEA 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DBF0 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DBF6 4EB9 0000 F56A             		jsr	(SpeedToPos).l
0001DBFC 0C68 0544 000C             		cmpi.w	#$544,obY(a0)
0001DC02 6400                       		bcc.s	loc_1A1D0
0001DC04 317C 0180 0010             		move.w	#$180,obVelX(a0)
0001DC0A 317C FFE8 0012             		move.w	#-$18,obVelY(a0)
0001DC10 117C 000F 0020             		move.b	#$F,obColType(a0)
0001DC16 5428 0034                  		addq.b	#2,$34(a0)
0001DC1A                            
0001DC1A                            loc_1A1D0:
0001DC1A 6000 FF8A                  		bra.w	loc_1A15C
0001DC1E                            ; ===========================================================================
0001DC1E                            
0001DC1E                            loc_1A1D4:
0001DC1E 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DC24 4EB9 0000 F56A             		jsr	(SpeedToPos).l
0001DC2A 4A68 0030                  		tst.w	$30(a0)
0001DC2E 6600                       		bne.s	loc_1A1FC
0001DC30 4A28 0020                  		tst.b	obColType(a0)
0001DC34 6600                       		bne.s	loc_1A216
0001DC36 317C 001E 0030             		move.w	#$1E,$30(a0)
0001DC3C 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001DC42                            
0001DC42                            loc_1A1FC:
0001DC42 5368 0030                  		subq.w	#1,$30(a0)
0001DC46 6600                       		bne.s	loc_1A216
0001DC48 4A28 0022                  		tst.b	obStatus(a0)
0001DC4C 6A00                       		bpl.s	loc_1A210
0001DC4E 317C 0060 0012             		move.w	#$60,obVelY(a0)
0001DC54 6000                       		bra.s	loc_1A216
0001DC56                            ; ===========================================================================
0001DC56                            
0001DC56                            loc_1A210:
0001DC56 117C 000F 0020             		move.b	#$F,obColType(a0)
0001DC5C                            
0001DC5C                            loc_1A216:
0001DC5C 0C78 2790 D008             		cmpi.w	#$2790,(v_player+obX).w
0001DC62 6D00                       		blt.s	loc_1A23A
0001DC64 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w
0001DC6A 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
0001DC70 4278 D020                  		clr.w	(v_player+obInertia).w
0001DC74 4A68 0012                  		tst.w	obVelY(a0)
0001DC78 6A00                       		bpl.s	loc_1A248
0001DC7A 31FC 0100 F602             		move.w	#$100,(v_jpadhold2).w
0001DC80                            
0001DC80                            loc_1A23A:
0001DC80 0C78 27E0 D008             		cmpi.w	#$27E0,(v_player+obX).w
0001DC86 6D00                       		blt.s	loc_1A248
0001DC88 31FC 27E0 D008             		move.w	#$27E0,(v_player+obX).w
0001DC8E                            
0001DC8E                            loc_1A248:
0001DC8E 0C68 2900 0008             		cmpi.w	#$2900,obX(a0)
0001DC94 6500                       		bcs.s	loc_1A260
0001DC96 4A28 0001                  		tst.b	obRender(a0)
0001DC9A 6B00                       		bmi.s	loc_1A260
0001DC9C 11FC 0018 F600             		move.b	#$18,(v_gamemode).w
0001DCA2 6000 FAF0                  		bra.w	Obj85_Delete
0001DCA6                            ; ===========================================================================
0001DCA6                            
0001DCA6                            loc_1A260:
0001DCA6 6000 FEFE                  		bra.w	loc_1A15C
0001DCAA                            ; ===========================================================================
0001DCAA                            
0001DCAA                            loc_1A264:	; Routine 4
0001DCAA 2268 0034                  		movea.l	$34(a0),a1
0001DCAE 1011                       		move.b	(a1),d0
0001DCB0 B010                       		cmp.b	(a0),d0
0001DCB2 6600 FAE0                  		bne.w	Obj85_Delete
0001DCB6 117C 0007 001C             		move.b	#7,obAnim(a0)
0001DCBC 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001DCC2 6C00                       		bge.s	loc_1A280
0001DCC4 6000                       		bra.s	loc_1A2A6
0001DCC6                            ; ===========================================================================
0001DCC6                            
0001DCC6                            loc_1A280:
0001DCC6 4A69 0010                  		tst.w	obVelX(a1)
0001DCCA 6700                       		beq.s	loc_1A28C
0001DCCC 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001DCD2                            
0001DCD2                            loc_1A28C:
0001DCD2 43FA D9B0                  		lea	Ani_Eggman(pc),a1
0001DCD6 4EB9 0000 C634             		jsr	(AnimateSprite).l
0001DCDC                            
0001DCDC                            loc_1A296:
0001DCDC 2268 0034                  		movea.l	$34(a0),a1
0001DCE0 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001DCE6 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001DCEC                            
0001DCEC                            loc_1A2A6:
0001DCEC 2268 0034                  		movea.l	$34(a0),a1
0001DCF0 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001DCF6 7003                       		moveq	#3,d0
0001DCF8 C028 0022                  		and.b	obStatus(a0),d0
0001DCFC 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001DD02 8128 0001                  		or.b	d0,obRender(a0)
0001DD06 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001DD0C                            ; ===========================================================================
0001DD0C                            
0001DD0C                            loc_1A2C6:	; Routine 6
0001DD0C 2268 0034                  		movea.l	$34(a0),a1
0001DD10 1011                       		move.b	(a1),d0
0001DD12 B010                       		cmp.b	(a0),d0
0001DD14 6600 FA7E                  		bne.w	Obj85_Delete
0001DD18 0CA9 0001 B6D4 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001DD20 6700                       		beq.s	loc_1A2E4
0001DD22 117C 000A 001A             		move.b	#$A,obFrame(a0)
0001DD28 60C2                       		bra.s	loc_1A2A6
0001DD2A                            ; ===========================================================================
0001DD2A                            
0001DD2A                            loc_1A2E4:
0001DD2A 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DD30 4A29 0021                  		tst.b	obColProp(a1)
0001DD34 6F00                       		ble.s	loc_1A312
0001DD36 117C 0006 001C             		move.b	#6,obAnim(a0)
0001DD3C 217C 0001 B6D4 0004        		move.l	#Map_Eggman,obMap(a0)
0001DD44 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001DD4A 43FA D938                  		lea	Ani_Eggman(pc),a1
0001DD4E 4EB9 0000 C634             		jsr	(AnimateSprite).l
0001DD54 6000 FF86                  		bra.w	loc_1A296
0001DD58                            ; ===========================================================================
0001DD58                            
0001DD58                            loc_1A312:
0001DD58 4A28 0001                  		tst.b	1(a0)
0001DD5C 6A00 FA36                  		bpl.w	Obj85_Delete
0001DD60 6100 D4CC                  		bsr.w	BossDefeated
0001DD64 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001DD6A 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DD70 217C 0000 0000 0004        		move.l	#Map_FZDamaged,obMap(a0)
0001DD78 317C 03A0 0002             		move.w	#$3A0,obGfx(a0)
0001DD7E 43FA 0000                  		lea	Ani_FZEgg(pc),a1
0001DD82 4EB9 0000 C634             		jsr	(AnimateSprite).l
0001DD88 6000 FF52                  		bra.w	loc_1A296
0001DD8C                            ; ===========================================================================
0001DD8C                            
0001DD8C                            loc_1A346:	; Routine 8
0001DD8C 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DD92 2268 0034                  		movea.l	$34(a0),a1
0001DD96 0CA9 0001 B6D4 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001DD9E 6700                       		beq.s	loc_1A35E
0001DDA0 6000 FF4A                  		bra.w	loc_1A2A6
0001DDA4                            ; ===========================================================================
0001DDA4                            
0001DDA4                            loc_1A35E:
0001DDA4 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001DDAA 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001DDB0 4A28 001E                  		tst.b	obTimeFrame(a0)
0001DDB4 6600                       		bne.s	loc_1A376
0001DDB6 117C 0014 001E             		move.b	#$14,obTimeFrame(a0)
0001DDBC                            
0001DDBC                            loc_1A376:
0001DDBC 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001DDC0 6E00                       		bgt.s	loc_1A38A
0001DDC2 5228 001A                  		addq.b	#1,obFrame(a0)
0001DDC6 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0001DDCC 6E00 F9C6                  		bgt.w	Obj85_Delete
0001DDD0                            
0001DDD0                            loc_1A38A:
0001DDD0 6000 FF0A                  		bra.w	loc_1A296
0001DDD4                            ; ===========================================================================
0001DDD4                            
0001DDD4                            loc_1A38E:	; Routine $A
0001DDD4 117C 000B 001A             		move.b	#$B,obFrame(a0)
0001DDDA 3038 D008                  		move.w	(v_player+obX).w,d0
0001DDDE 9068 0008                  		sub.w	obX(a0),d0
0001DDE2 6500                       		bcs.s	loc_1A3A6
0001DDE4 4A28 0001                  		tst.b	obRender(a0)
0001DDE8 6A00 F9AA                  		bpl.w	Obj85_Delete
0001DDEC                            
0001DDEC                            loc_1A3A6:
0001DDEC 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001DDF2                            ; ===========================================================================
0001DDF2                            
0001DDF2                            loc_1A3AC:	; Routine $C
0001DDF2 117C 0000 001A             		move.b	#0,obFrame(a0)
0001DDF8 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DDFE 2268 0034                  		movea.l	$34(a0),a1
0001DE02 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001DE08 6600                       		bne.s	loc_1A3D0
0001DE0A 0CA9 0001 B6D4 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001DE12 6700 F980                  		beq.w	Obj85_Delete
0001DE16                            
0001DE16                            loc_1A3D0:
0001DE16 6000 FED4                  		bra.w	loc_1A2A6
0001DE1A                            		
0001DE1A                            BossModeMusic:
0001DE1A 0C28 0002 0021             		cmpi.b	#2,obColProp(a0)
0001DE20 6600 0000                  		bne.w	NormalMode
0001DE24 4EF9 0000 0000             		jmp	PinchMode
0001DE2A                            
0001DE2A                            NormalMode:
0001DE2A 303C 00AC                  		move.w	#$AC,d0
0001DE2E 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001DE34 4E75                       		rts
0001DE36                            
0001DE36                            PinchMode:
0001DE36 303C 0094                  		move.w	#$94,d0
0001DE3A 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001DE40 303C 00E2                  		move.w	#$E2,d0
0001DE44 4EB9 0000 129A             		jsr	(PlaySound).l
0001DE4A 4E75                       		rts		
0001DE4A 4E75                       		rts		
0001DE4C                            		include	"_anim\FZ Eggman in Ship.asm"
0001DE4C                            ; ---------------------------------------------------------------------------
0001DE4C                            ; Animation script - Eggman (FZ)
0001DE4C                            ; ---------------------------------------------------------------------------
0001DE4C 0000                       Ani_FZEgg:	dc.w byte_1A3D6-Ani_FZEgg
0001DE4E 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, afEnd
0001DE52                            		even
0001DE52                            		even
0001DE52                            Map_FZDamaged:	include	"_maps\FZ Damaged Eggmobile.asm"
0001DE52                            ; ---------------------------------------------------------------------------
0001DE52                            ; Sprite mappings - Eggman in broken eggmobile (FZ)
0001DE52                            ; ---------------------------------------------------------------------------
0001DE52                            Map_FZDamaged_internal:
0001DE52 0000                       		dc.w @damage1-Map_FZDamaged_internal
0001DE54 0000                       		dc.w @damage2-Map_FZDamaged_internal
0001DE56 06                         @damage1:	dc.b 6
0001DE57 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001DE5C EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001DE61 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001DE66 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001DE6B FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001DE70 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001DE75 06                         @damage2:	dc.b 6
0001DE76 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001DE7B EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001DE80 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001DE85 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001DE8A FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001DE8F 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001DE94                            		even
0001DE94                            		even
0001DE94                            Map_FZLegs:	include	"_maps\FZ Eggmobile Legs.asm"
0001DE94                            ; ---------------------------------------------------------------------------
0001DE94                            ; Sprite mappings - legs on Eggman's escape ship (FZ)
0001DE94                            ; ---------------------------------------------------------------------------
0001DE94                            Map_FZLegs_internal:
0001DE94 0000                       		dc.w @extended-Map_FZLegs_internal
0001DE96 0000                       		dc.w @halfway-Map_FZLegs_internal
0001DE98 0000                       		dc.w @retracted-Map_FZLegs_internal
0001DE9A 02                         @extended:	dc.b 2
0001DE9B 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001DEA0 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001DEA5 03                         @halfway:	dc.b 3
0001DEA6 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001DEAB 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001DEB0 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001DEB5 02                         @retracted:	dc.b 2
0001DEB6 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001DEBB 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001DEC0                            		even
0001DEC0                            		even
0001DEC0                            		include	"_incObj\84 FZ Eggman's Cylinders.asm"
0001DEC0                            ; ---------------------------------------------------------------------------
0001DEC0                            ; Object 84 - cylinder Eggman hides in (FZ)
0001DEC0                            ; ---------------------------------------------------------------------------
0001DEC0                            
0001DEC0                            Obj84_Delete:
0001DEC0 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001DEC6                            ; ===========================================================================
0001DEC6                            
0001DEC6                            EggmanCylinder:
0001DEC6 7000                       		moveq	#0,d0
0001DEC8 1028 0024                  		move.b	obRoutine(a0),d0
0001DECC 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001DED0 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001DED4                            ; ===========================================================================
0001DED4 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001DED6 0000                       		dc.w loc_1A4CE-Obj84_Index
0001DED8 0000                       		dc.w loc_1A57E-Obj84_Index
0001DEDA                            
0001DEDA 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001DEDE 2550 0620                  		dc.w $2550, $620
0001DEE2 2490 04C0                  		dc.w $2490, $4C0
0001DEE6 2510 04C0                  		dc.w $2510, $4C0
0001DEEA                            ; ===========================================================================
0001DEEA                            
0001DEEA                            Obj84_Main:	; Routine
0001DEEA 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001DEEE 7000                       		moveq	#0,d0
0001DEF0 1028 0028                  		move.b	obSubtype(a0),d0
0001DEF4 D040                       		add.w	d0,d0
0001DEF6 D2C0                       		adda.w	d0,a1
0001DEF8 117C 0004 0001             		move.b	#4,obRender(a0)
0001DEFE 08E8 0007 0001             		bset	#7,obRender(a0)
0001DF04 08E8 0004 0001             		bset	#4,obRender(a0)
0001DF0A 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001DF10 217C 0000 0000 0004        		move.l	#Map_EggCyl,obMap(a0)
0001DF18 3159 0008                  		move.w	(a1)+,obX(a0)
0001DF1C 3151 000C                  		move.w	(a1),obY(a0)
0001DF20 3159 0038                  		move.w	(a1)+,$38(a0)
0001DF24 117C 0020 0016             		move.b	#$20,obHeight(a0)
0001DF2A 117C 0060 0017             		move.b	#$60,obWidth(a0)
0001DF30 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001DF36 117C 0060 0016             		move.b	#$60,obHeight(a0)
0001DF3C 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001DF42 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DF46                            
0001DF46                            loc_1A4CE:	; Routine 2
0001DF46 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001DF4C 6F00                       		ble.s	loc_1A4DC
0001DF4E 08E8 0001 0001             		bset	#1,obRender(a0)
0001DF54                            
0001DF54                            loc_1A4DC:
0001DF54 42A8 003C                  		clr.l	$3C(a0)
0001DF58 4A28 0029                  		tst.b	$29(a0)
0001DF5C 6700                       		beq.s	loc_1A4EA
0001DF5E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DF62                            
0001DF62                            loc_1A4EA:
0001DF62 2028 003C                  		move.l	$3C(a0),d0
0001DF66 2228 0038                  		move.l	$38(a0),d1
0001DF6A D280                       		add.l	d0,d1
0001DF6C 4841                       		swap	d1
0001DF6E 3141 000C                  		move.w	d1,obY(a0)
0001DF72 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0001DF78 6600                       		bne.s	loc_1A524
0001DF7A 4A68 0030                  		tst.w	$30(a0)
0001DF7E 6A00                       		bpl.s	loc_1A524
0001DF80 70F6                       		moveq	#-$A,d0
0001DF82 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001DF88 6F00                       		ble.s	loc_1A514
0001DF8A 700E                       		moveq	#$E,d0
0001DF8C                            
0001DF8C                            loc_1A514:
0001DF8C D240                       		add.w	d0,d1
0001DF8E 2268 0034                  		movea.l	$34(a0),a1
0001DF92 3341 000C                  		move.w	d1,obY(a1)
0001DF96 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DF9C                            
0001DF9C                            loc_1A524:
0001DF9C 323C 002B                  		move.w	#$2B,d1
0001DFA0 343C 0060                  		move.w	#$60,d2
0001DFA4 363C 0061                  		move.w	#$61,d3
0001DFA8 3828 0008                  		move.w	obX(a0),d4
0001DFAC 4EB9 0001 1ADE             		jsr	(SolidObject).l
0001DFB2 7000                       		moveq	#0,d0
0001DFB4 3228 003C                  		move.w	$3C(a0),d1
0001DFB8 6A00                       		bpl.s	loc_1A550
0001DFBA 4441                       		neg.w	d1
0001DFBC 5141                       		subq.w	#8,d1
0001DFBE 6500                       		bcs.s	loc_1A55C
0001DFC0 5200                       		addq.b	#1,d0
0001DFC2 E841                       		asr.w	#4,d1
0001DFC4 D041                       		add.w	d1,d0
0001DFC6 6000                       		bra.s	loc_1A55C
0001DFC8                            ; ===========================================================================
0001DFC8                            
0001DFC8                            loc_1A550:
0001DFC8 0441 0027                  		subi.w	#$27,d1
0001DFCC 6500                       		bcs.s	loc_1A55C
0001DFCE 5200                       		addq.b	#1,d0
0001DFD0 E841                       		asr.w	#4,d1
0001DFD2 D041                       		add.w	d1,d0
0001DFD4                            
0001DFD4                            loc_1A55C:
0001DFD4 1140 001A                  		move.b	d0,obFrame(a0)
0001DFD8 3038 D008                  		move.w	(v_player+obX).w,d0
0001DFDC 9068 0008                  		sub.w	obX(a0),d0
0001DFE0 6B00                       		bmi.s	loc_1A578
0001DFE2 0440 0140                  		subi.w	#$140,d0
0001DFE6 6B00                       		bmi.s	loc_1A578
0001DFE8 4A28 0001                  		tst.b	obRender(a0)
0001DFEC 6A00 FED2                  		bpl.w	Obj84_Delete
0001DFF0                            
0001DFF0                            loc_1A578:
0001DFF0 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001DFF6                            ; ===========================================================================
0001DFF6                            
0001DFF6                            loc_1A57E:	; Routine 4
0001DFF6 7000                       		moveq	#0,d0
0001DFF8 1028 0028                  		move.b	obSubtype(a0),d0
0001DFFC 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001E000 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001E004 6000 FF5C                  		bra.w	loc_1A4EA
0001E008                            ; ===========================================================================
0001E008 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001E00A 0000                       		dc.w loc_1A598-off_1A590
0001E00C 0000                       		dc.w loc_1A604-off_1A590
0001E00E 0000                       		dc.w loc_1A604-off_1A590
0001E010                            ; ===========================================================================
0001E010                            
0001E010                            loc_1A598:
0001E010 4A28 0029                  		tst.b	$29(a0)
0001E014 6600                       		bne.s	loc_1A5D4
0001E016 2268 0034                  		movea.l	$34(a0),a1
0001E01A 4A29 0021                  		tst.b	obColProp(a1)
0001E01E 6600                       		bne.s	loc_1A5B4
0001E020 6100 D20C                  		bsr.w	BossDefeated
0001E024 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001E02C                            
0001E02C                            loc_1A5B4:
0001E02C 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001E034 6400                       		bcc.s	locret_1A602
0001E036 42A8 003C                  		clr.l	$3C(a0)
0001E03A 2268 0034                  		movea.l	$34(a0),a1
0001E03E 5369 0032                  		subq.w	#1,$32(a1)
0001E042 4269 0030                  		clr.w	$30(a1)
0001E046 5528 0024                  		subq.b	#2,obRoutine(a0)
0001E04A 4E75                       		rts	
0001E04C                            ; ===========================================================================
0001E04C                            
0001E04C                            loc_1A5D4:
0001E04C 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001E052 6C00                       		bge.s	loc_1A5E4
0001E054 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001E05C                            
0001E05C                            loc_1A5E4:
0001E05C 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001E064 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001E06A 6E00                       		bgt.s	locret_1A602
0001E06C 4268 003E                  		clr.w	$3E(a0)
0001E070 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001E076 4228 0029                  		clr.b	$29(a0)
0001E07A                            
0001E07A                            locret_1A602:
0001E07A 4E75                       		rts	
0001E07C                            ; ===========================================================================
0001E07C                            
0001E07C                            loc_1A604:
0001E07C 08E8 0001 0001             		bset	#1,obRender(a0)
0001E082 4A28 0029                  		tst.b	$29(a0)
0001E086 6600                       		bne.s	loc_1A646
0001E088 2268 0034                  		movea.l	$34(a0),a1
0001E08C 4A29 0021                  		tst.b	obColProp(a1)
0001E090 6600                       		bne.s	loc_1A626
0001E092 6100 D19A                  		bsr.w	BossDefeated
0001E096 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001E09E                            
0001E09E                            loc_1A626:
0001E09E 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001E0A6 6400                       		bcc.s	locret_1A674
0001E0A8 42A8 003C                  		clr.l	$3C(a0)
0001E0AC 2268 0034                  		movea.l	$34(a0),a1
0001E0B0 5369 0032                  		subq.w	#1,$32(a1)
0001E0B4 4269 0030                  		clr.w	$30(a1)
0001E0B8 5528 0024                  		subq.b	#2,obRoutine(a0)
0001E0BC 4E75                       		rts	
0001E0BE                            ; ===========================================================================
0001E0BE                            
0001E0BE                            loc_1A646:
0001E0BE 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001E0C4 6D00                       		blt.s	loc_1A656
0001E0C6 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001E0CE                            
0001E0CE                            loc_1A656:
0001E0CE 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001E0D6 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001E0DC 6D00                       		blt.s	locret_1A674
0001E0DE 4268 003E                  		clr.w	$3E(a0)
0001E0E2 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001E0E8 4228 0029                  		clr.b	$29(a0)
0001E0EC                            
0001E0EC                            locret_1A674:
0001E0EC 4E75                       		rts	
0001E0EC 4E75                       		rts	
0001E0EE                            Map_EggCyl:	include	"_maps\FZ Eggman's Cylinders.asm"
0001E0EE                            ; --------------------------------------------------------------------------------
0001E0EE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001E0EE                            ; --------------------------------------------------------------------------------
0001E0EE                            
0001E0EE                            SME_SCUpI:	
0001E0EE 0000 0000                  		dc.w SME_SCUpI_18-SME_SCUpI, SME_SCUpI_37-SME_SCUpI	
0001E0F2 0000 0000                  		dc.w SME_SCUpI_60-SME_SCUpI, SME_SCUpI_93-SME_SCUpI	
0001E0F6 0000 0000                  		dc.w SME_SCUpI_D0-SME_SCUpI, SME_SCUpI_112-SME_SCUpI	
0001E0FA 0000 0000                  		dc.w SME_SCUpI_159-SME_SCUpI, SME_SCUpI_1A0-SME_SCUpI	
0001E0FE 0000 0000                  		dc.w SME_SCUpI_1E7-SME_SCUpI, SME_SCUpI_22E-SME_SCUpI	
0001E102 0000 0000                  		dc.w SME_SCUpI_275-SME_SCUpI, SME_SCUpI_2BC-SME_SCUpI	
0001E106 06                         SME_SCUpI_18:	dc.b 6	
0001E107 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E10C B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E111 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E116 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E11B B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E120 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E125 08                         SME_SCUpI_37:	dc.b 8	
0001E126 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E12B B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E130 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E135 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E13A B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E13F D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E144 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E149 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E14E 0A                         SME_SCUpI_60:	dc.b $A	
0001E14F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E154 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E159 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E15E B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E163 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E168 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E16D D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E172 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E177 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E17C A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E181 0C                         SME_SCUpI_93:	dc.b $C	
0001E182 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E187 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E18C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E191 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E196 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E19B D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E1A0 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E1A5 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E1AA F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E1AF 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E1B4 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E1B9 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E1BE 0D                         SME_SCUpI_D0:	dc.b $D	
0001E1BF A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E1C4 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E1C9 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E1CE B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E1D3 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E1D8 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E1DD D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E1E2 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E1E7 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E1EC 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E1F1 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E1F6 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E1FB A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E200 0E                         SME_SCUpI_112:	dc.b $E	
0001E201 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E206 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E20B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E210 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E215 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E21A D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E21F D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E224 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E229 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E22E 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E233 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E238 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E23D 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E242 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E247 0E                         SME_SCUpI_159:	dc.b $E	
0001E248 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E24D B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E252 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E257 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E25C B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E261 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E266 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E26B F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E270 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E275 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E27A 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E27F 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E284 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E289 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E28E 0E                         SME_SCUpI_1A0:	dc.b $E	
0001E28F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E294 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E299 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E29E B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E2A3 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E2A8 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E2AD D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E2B2 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E2B7 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E2BC 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E2C1 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E2C6 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E2CB 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E2D0 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E2D5 0E                         SME_SCUpI_1E7:	dc.b $E	
0001E2D6 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E2DB B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E2E0 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E2E5 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E2EA B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E2EF D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E2F4 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E2F9 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E2FE F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E303 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E308 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E30D 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E312 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E317 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E31C 0E                         SME_SCUpI_22E:	dc.b $E	
0001E31D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E322 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E327 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E32C B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E331 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E336 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E33B D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E340 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E345 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E34A 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E34F 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E354 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E359 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E35E A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E363 0E                         SME_SCUpI_275:	dc.b $E	
0001E364 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E369 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E36E B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E373 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E378 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E37D D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E382 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E387 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E38C F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E391 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E396 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E39B 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E3A0 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E3A5 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E3AA 02                         SME_SCUpI_2BC:	dc.b 2	
0001E3AB F804 0068 F0               		dc.b $F8, 4, 0, $68, $F0	
0001E3B0 000C 006A F0               		dc.b 0, $C, 0, $6A, $F0	
0001E3B6 00                         		even
0001E3B6 00                         		even
0001E3B6                            		include	"_incObj\86 FZ Plasma Ball Launcher.asm"
0001E3B6                            ; ---------------------------------------------------------------------------
0001E3B6                            ; Object 86 - energy balls (FZ)
0001E3B6                            ; ---------------------------------------------------------------------------
0001E3B6                            
0001E3B6                            BossPlasma:
0001E3B6 7000                       		moveq	#0,d0
0001E3B8 1028 0024                  		move.b	obRoutine(a0),d0
0001E3BC 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001E3C0 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001E3C4                            ; ===========================================================================
0001E3C4 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001E3C6 0000                       		dc.w Obj86_Generator-Obj86_Index
0001E3C8 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001E3CA 0000                       		dc.w loc_1A962-Obj86_Index
0001E3CC 0000                       		dc.w loc_1A982-Obj86_Index
0001E3CE                            ; ===========================================================================
0001E3CE                            
0001E3CE                            Obj86_Main:	; Routine 0
0001E3CE 317C 2588 0008             		move.w	#$2588,obX(a0)
0001E3D4 317C 053C 000C             		move.w	#$53C,obY(a0)
0001E3DA 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001E3E0 217C 0000 0000 0004        		move.l	#Map_PLaunch,obMap(a0)
0001E3E8 117C 0000 001C             		move.b	#0,obAnim(a0)
0001E3EE 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001E3F4 117C 0008 0017             		move.b	#8,obWidth(a0)
0001E3FA 117C 0008 0016             		move.b	#8,obHeight(a0)
0001E400 117C 0004 0001             		move.b	#4,obRender(a0)
0001E406 08E8 0007 0001             		bset	#7,obRender(a0)
0001E40C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E410                            
0001E410                            Obj86_Generator:; Routine 2
0001E410 2268 0034                  		movea.l	$34(a0),a1
0001E414 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001E41A 6600                       		bne.s	loc_1A850
0001E41C 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001E420 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001E426 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001E42C                            ; ===========================================================================
0001E42C                            
0001E42C                            loc_1A850:
0001E42C 117C 0000 001C             		move.b	#0,obAnim(a0)
0001E432 4A28 0029                  		tst.b	$29(a0)
0001E436 6700                       		beq.s	loc_1A86C
0001E438 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E43C 117C 0001 001C             		move.b	#1,obAnim(a0)
0001E442 117C 003E 0028             		move.b	#$3E,obSubtype(a0)
0001E448                            
0001E448                            loc_1A86C:
0001E448 323C 0013                  		move.w	#$13,d1
0001E44C 343C 0008                  		move.w	#8,d2
0001E450 363C 0011                  		move.w	#$11,d3
0001E454 3828 0008                  		move.w	obX(a0),d4
0001E458 4EB9 0001 1ADE             		jsr	(SolidObject).l
0001E45E 3038 D008                  		move.w	(v_player+obX).w,d0
0001E462 9068 0008                  		sub.w	obX(a0),d0
0001E466 6B00                       		bmi.s	loc_1A89A
0001E468 0440 0140                  		subi.w	#$140,d0
0001E46C 6B00                       		bmi.s	loc_1A89A
0001E46E 4A28 0001                  		tst.b	obRender(a0)
0001E472 6A00 FA4C                  		bpl.w	Obj84_Delete
0001E476                            
0001E476                            loc_1A89A:
0001E476 43FA 0000                  		lea	Ani_PLaunch(pc),a1
0001E47A 4EB9 0000 C634             		jsr	(AnimateSprite).l
0001E480 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001E486                            ; ===========================================================================
0001E486                            
0001E486                            Obj86_MakeBalls:; Routine 4
0001E486 4A28 0029                  		tst.b	$29(a0)
0001E48A 6700 0000                  		beq.w	loc_1A954
0001E48E 4228 0029                  		clr.b	$29(a0)
0001E492 D068 0030                  		add.w	$30(a0),d0
0001E496 0240 001E                  		andi.w	#$1E,d0
0001E49A D4C0                       		adda.w	d0,a2
0001E49C 5868 0030                  		addq.w	#4,$30(a0)
0001E4A0 4268 0032                  		clr.w	$32(a0)
0001E4A4 7403                       		moveq	#3,d2
0001E4A6                            
0001E4A6                            Obj86_Loop:
0001E4A6 4EB9 0000 FB2E             		jsr	(FindNextFreeObj).l
0001E4AC 6600 0000                  		bne.w	loc_1A954
0001E4B0 12BC 0086                  		move.b	#id_BossPlasma,(a1)
0001E4B4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E4BA 337C 053C 000C             		move.w	#$53C,obY(a1)
0001E4C0 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001E4C6 337C 2300 0002             		move.w	#$2300,obGfx(a1)
0001E4CC 237C 0000 0000 0004        		move.l	#Map_Plasma,obMap(a1)
0001E4D4 137C 000C 0016             		move.b	#$C,obHeight(a1)
0001E4DA 137C 000C 0017             		move.b	#$C,obWidth(a1)
0001E4E0 137C 0000 0020             		move.b	#0,obColType(a1)
0001E4E6 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001E4EC 337C 003E 0028             		move.w	#$3E,obSubtype(a1)
0001E4F2 137C 0004 0001             		move.b	#4,obRender(a1)
0001E4F8 08E9 0007 0001             		bset	#7,obRender(a1)
0001E4FE 2348 0034                  		move.l	a0,$34(a1)
0001E502 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001E508 3228 0032                  		move.w	$32(a0),d1
0001E50C C3FC FFB1                  		muls.w	#-$4F,d1
0001E510 0641 2578                  		addi.w	#$2578,d1
0001E514 0240 001F                  		andi.w	#$1F,d0
0001E518 0440 0010                  		subi.w	#$10,d0
0001E51C D041                       		add.w	d1,d0
0001E51E 3340 0030                  		move.w	d0,$30(a1)
0001E522 5268 0032                  		addq.w	#1,$32(a0)
0001E526 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001E52C 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001E530                            
0001E530                            loc_1A954:
0001E530 4A68 0032                  		tst.w	$32(a0)
0001E534 6600                       		bne.s	loc_1A95E
0001E536 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E53A                            
0001E53A                            loc_1A95E:
0001E53A 6000 FF0C                  		bra.w	loc_1A86C
0001E53E                            ; ===========================================================================
0001E53E                            
0001E53E                            loc_1A962:	; Routine 6
0001E53E 117C 0002 001C             		move.b	#2,obAnim(a0)
0001E544 4A68 0038                  		tst.w	$38(a0)
0001E548 6600                       		bne.s	loc_1A97E
0001E54A 117C 0002 0024             		move.b	#2,obRoutine(a0)
0001E550 2268 0034                  		movea.l	$34(a0),a1
0001E554 337C FFFF 0032             		move.w	#-1,$32(a1)
0001E55A                            
0001E55A                            loc_1A97E:
0001E55A 6000 FEEC                  		bra.w	loc_1A86C
0001E55E                            ; ===========================================================================
0001E55E                            
0001E55E                            loc_1A982:	; Routine 8
0001E55E 7000                       		moveq	#0,d0
0001E560 1028 0025                  		move.b	ob2ndRout(a0),d0
0001E564 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001E568 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001E56C 43FA 0000                  		lea	Ani_Plasma(pc),a1
0001E570 4EB9 0000 C634             		jsr	(AnimateSprite).l
0001E576 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001E57C                            ; ===========================================================================
0001E57C 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001E57E 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001E580 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001E582                            ; ===========================================================================
0001E582                            
0001E582                            loc_1A9A6:
0001E582 3028 0030                  		move.w	$30(a0),d0
0001E586 9068 0008                  		sub.w	obX(a0),d0
0001E58A E940                       		asl.w	#4,d0
0001E58C 3140 0010                  		move.w	d0,obVelX(a0)
0001E590 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001E596 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001E59A 4E75                       		rts	
0001E59C                            ; ===========================================================================
0001E59C                            
0001E59C                            loc_1A9C0:
0001E59C 4A68 0010                  		tst.w	obVelX(a0)
0001E5A0 6700                       		beq.s	loc_1A9E6
0001E5A2 4EB9 0000 F56A             		jsr	(SpeedToPos).l
0001E5A8 3028 0008                  		move.w	obX(a0),d0
0001E5AC 9068 0030                  		sub.w	$30(a0),d0
0001E5B0 6400                       		bcc.s	loc_1A9E6
0001E5B2 4268 0010                  		clr.w	obVelX(a0)
0001E5B6 D168 0008                  		add.w	d0,obX(a0)
0001E5BA 2268 0034                  		movea.l	$34(a0),a1
0001E5BE 5369 0032                  		subq.w	#1,$32(a1)
0001E5C2                            
0001E5C2                            loc_1A9E6:
0001E5C2 117C 0000 001C             		move.b	#0,obAnim(a0)
0001E5C8 5368 0028                  		subq.w	#1,obSubtype(a0)
0001E5CC 6600                       		bne.s	locret_1AA1C
0001E5CE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001E5D2 117C 0001 001C             		move.b	#1,obAnim(a0)
0001E5D8 117C 009A 0020             		move.b	#$9A,obColType(a0)
0001E5DE 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001E5E4 7000                       		moveq	#0,d0
0001E5E6 3038 D008                  		move.w	(v_player+obX).w,d0
0001E5EA 9068 0008                  		sub.w	obX(a0),d0
0001E5EE 3140 0010                  		move.w	d0,obVelX(a0)
0001E5F2 317C 0140 0012             		move.w	#$140,obVelY(a0)
0001E5F8                            
0001E5F8                            locret_1AA1C:
0001E5F8 4E75                       		rts	
0001E5FA                            ; ===========================================================================
0001E5FA                            
0001E5FA                            loc_1AA1E:
0001E5FA 4EB9 0000 F56A             		jsr	(SpeedToPos).l
0001E600 0C68 05E0 000C             		cmpi.w	#$5E0,obY(a0)
0001E606 6400                       		bcc.s	loc_1AA34
0001E608 5368 0028                  		subq.w	#1,obSubtype(a0)
0001E60C 6700                       		beq.s	loc_1AA34
0001E60E 4E75                       		rts	
0001E610                            ; ===========================================================================
0001E610                            
0001E610                            loc_1AA34:
0001E610 2268 0034                  		movea.l	$34(a0),a1
0001E614 5369 0038                  		subq.w	#1,$38(a1)
0001E618 6000 F8A6                  		bra.w	Obj84_Delete
0001E618 6000 F8A6                  		bra.w	Obj84_Delete
0001E61C                            		include	"_anim\Plasma Ball Launcher.asm"
0001E61C                            ; ---------------------------------------------------------------------------
0001E61C                            ; Animation script - energy ball launcher (FZ)
0001E61C                            ; ---------------------------------------------------------------------------
0001E61C 0000                       Ani_PLaunch:	dc.w @red-Ani_PLaunch
0001E61E 0000                       		dc.w @redsparking-Ani_PLaunch
0001E620 0000                       		dc.w @whitesparking-Ani_PLaunch
0001E622 7E00 FF                    @red:		dc.b $7E, 0, afEnd
0001E626 00                         		even
0001E626 0100 0200 03FF             @redsparking:	dc.b 1,	0, 2, 0, 3, afEnd
0001E62C                            		even
0001E62C 0101 0201 03FF             @whitesparking:	dc.b 1,	1, 2, 1, 3, afEnd
0001E632                            		even
0001E632                            		even
0001E632                            Map_PLaunch:	include	"_maps\Plasma Ball Launcher.asm"
0001E632                            ; ---------------------------------------------------------------------------
0001E632                            ; Sprite mappings - energy ball	launcher (FZ)
0001E632                            ; ---------------------------------------------------------------------------
0001E632                            Map_PLaunch_internal:
0001E632 0000                       		dc.w @red-Map_PLaunch_internal
0001E634 0000                       		dc.w @white-Map_PLaunch_internal
0001E636 0000                       		dc.w @sparking1-Map_PLaunch_internal
0001E638 0000                       		dc.w @sparking2-Map_PLaunch_internal
0001E63A 01                         @red:		dc.b 1
0001E63B F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001E640 01                         @white:		dc.b 1
0001E641 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001E646 01                         @sparking1:	dc.b 1
0001E647 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001E64C 01                         @sparking2:	dc.b 1
0001E64D F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001E652                            		even
0001E652                            		even
0001E652                            		include	"_anim\Plasma Balls.asm"
0001E652                            ; ---------------------------------------------------------------------------
0001E652                            ; Animation script - energy balls (FZ)
0001E652                            ; ---------------------------------------------------------------------------
0001E652 0000                       Ani_Plasma:	dc.w @full-Ani_Plasma
0001E654 0000                       		dc.w @short-Ani_Plasma
0001E656 0100 0A08 0A01 0A09 0A06+  @full:		dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001E665 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001E674 0A05 FF                    		dc.b $A, 5, afEnd
0001E678 00                         		even
0001E678 0006 0501 0507 0501 05FF   @short:		dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	afEnd
0001E682                            		even
0001E682                            		even
0001E682                            Map_Plasma:	include	"_maps\Plasma Balls.asm"
0001E682                            ; ---------------------------------------------------------------------------
0001E682                            ; Sprite mappings - energy balls (FZ)
0001E682                            ; ---------------------------------------------------------------------------
0001E682                            Map_Plasma_internal:
0001E682 0000                       		dc.w @fuzzy1-Map_Plasma_internal
0001E684 0000                       		dc.w @fuzzy2-Map_Plasma_internal
0001E686 0000                       		dc.w @white1-Map_Plasma_internal
0001E688 0000                       		dc.w @white2-Map_Plasma_internal
0001E68A 0000                       		dc.w @white3-Map_Plasma_internal
0001E68C 0000                       		dc.w @white4-Map_Plasma_internal
0001E68E 0000                       		dc.w @fuzzy3-Map_Plasma_internal
0001E690 0000                       		dc.w @fuzzy4-Map_Plasma_internal
0001E692 0000                       		dc.w @fuzzy5-Map_Plasma_internal
0001E694 0000                       		dc.w @fuzzy6-Map_Plasma_internal
0001E696 0000                       		dc.w @blank-Map_Plasma_internal
0001E698 02                         @fuzzy1:	dc.b 2
0001E699 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001E69E 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001E6A3 02                         @fuzzy2:	dc.b 2
0001E6A4 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001E6A9 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001E6AE 02                         @white1:	dc.b 2
0001E6AF F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001E6B4 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001E6B9 02                         @white2:	dc.b 2
0001E6BA F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001E6BF 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001E6C4 02                         @white3:	dc.b 2
0001E6C5 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001E6CA 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001E6CF 02                         @white4:	dc.b 2
0001E6D0 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001E6D5 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001E6DA 01                         @fuzzy3:	dc.b 1
0001E6DB F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001E6E0 01                         @fuzzy4:	dc.b 1
0001E6E1 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001E6E6 02                         @fuzzy5:	dc.b 2
0001E6E7 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001E6EC 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001E6F1 02                         @fuzzy6:	dc.b 2
0001E6F2 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001E6F7 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001E6FC 00                         @blank:		dc.b 0
0001E6FE 00                         		even
0001E6FE 00                         		even
0001E6FE                            
0001E6FE                            		include	"_incObj\3E Prison Capsule.asm"
0001E6FE                            ; ---------------------------------------------------------------------------
0001E6FE                            ; Object 3E - prison capsule
0001E6FE                            ; ---------------------------------------------------------------------------
0001E6FE                            
0001E6FE                            Prison:
0001E6FE 7000                       		moveq	#0,d0
0001E700 1028 0024                  		move.b	obRoutine(a0),d0
0001E704 323B 0000                  		move.w	Pri_Index(pc,d0.w),d1
0001E708 4EBB 1000                  		jsr	Pri_Index(pc,d1.w)
0001E728 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001E72E                            
0001E72E                            	@delete:
0001E72E 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001E734                            ; ===========================================================================
0001E734 0000                       Pri_Index:	dc.w Pri_Main-Pri_Index
0001E736 0000                       		dc.w Pri_BodyMain-Pri_Index
0001E738 0000                       		dc.w Pri_Switched-Pri_Index
0001E73A 0000                       		dc.w Pri_Explosion-Pri_Index
0001E73C 0000                       		dc.w Pri_Explosion-Pri_Index
0001E73E 0000                       		dc.w Pri_Explosion-Pri_Index
0001E740 0000                       		dc.w Pri_Animals-Pri_Index
0001E742 0000                       		dc.w Pri_EndAct-Pri_Index
0001E744                            
0001E744 =00000030                  pri_origY:	equ $30		; original y-axis position
0001E744                            
0001E744 0220 0400                  Pri_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001E748 040C 0501                  		dc.b 4,	$C, 5, 1
0001E74C 0610 0403                  		dc.b 6,	$10, 4,	3
0001E750 0810 0305                  		dc.b 8,	$10, 3,	5
0001E754                            ; ===========================================================================
0001E754                            
0001E754                            Pri_Main:	; Routine 0
0001E754 217C 0000 0000 0004        		move.l	#Map_Pri,obMap(a0)
0001E75C 317C 049D 0002             		move.w	#$49D,obGfx(a0)
0001E762 117C 0004 0001             		move.b	#4,obRender(a0)
0001E768 3168 000C 0030             		move.w	obY(a0),pri_origY(a0)
0001E76E 7000                       		moveq	#0,d0
0001E770 1028 0028                  		move.b	obSubtype(a0),d0
0001E774 E548                       		lsl.w	#2,d0
0001E776 43FB 00CC                  		lea	Pri_Var(pc,d0.w),a1
0001E77A 1159 0024                  		move.b	(a1)+,obRoutine(a0)
0001E77E 1159 0014                  		move.b	(a1)+,obActWid(a0)
0001E782 1159 0018                  		move.b	(a1)+,obPriority(a0)
0001E786 3028 0018                  		move.w obPriority(a0),d0 
0001E78A E248                       		lsr.w #1,d0 
0001E78C 0240 0380                  		andi.w #$380,d0 
0001E790 3140 0018                  		move.w d0,obPriority(a0)		
0001E794 1159 001A                  		move.b	(a1)+,obFrame(a0)
0001E798 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001E79C 6600                       		bne.s	@not02		; if not, branch
0001E79E                            
0001E79E 117C 0006 0020             		move.b	#6,obColType(a0)
0001E7A4 117C 0008 0021             		move.b	#8,obColProp(a0)
0001E7AA                            
0001E7AA                            	@not02:
0001E7AA 4E75                       		rts	
0001E7AC                            ; ===========================================================================
0001E7AC                            
0001E7AC                            Pri_BodyMain:	; Routine 2
0001E7AC 0C38 0002 F7A7             		cmpi.b	#2,(v_bossstatus).w
0001E7B2 6700                       		beq.s	@chkopened
0001E7B4 323C 002B                  		move.w	#$2B,d1
0001E7B8 343C 0018                  		move.w	#$18,d2
0001E7BC 363C 0018                  		move.w	#$18,d3
0001E7C0 3828 0008                  		move.w	obX(a0),d4
0001E7C4 4EF9 0001 1ADE             		jmp	(SolidObject).l
0001E7CA                            ; ===========================================================================
0001E7CA                            
0001E7CA                            @chkopened:
0001E7CA 4A28 0025                  		tst.b	ob2ndRout(a0)	; has the prison been opened?
0001E7CE 6700                       		beq.s	@open		; if yes, branch
0001E7D0 4228 0025                  		clr.b	ob2ndRout(a0)
0001E7D4 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001E7DA 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001E7E0                            
0001E7E0                            	@open:
0001E7E0 117C 0002 001A             		move.b	#2,obFrame(a0)	; use frame number 2 (destroyed	prison)
0001E7E6                            		
0001E7E6                            	@rts:
0001E7E6 4E75                       		rts
0001E7E8                            ; ===========================================================================
0001E7E8                            
0001E7E8                            Pri_Switched:	; Routine 4
0001E7E8 323C 0017                  		move.w	#$17,d1
0001E7EC 343C 0008                  		move.w	#8,d2
0001E7F0 363C 0008                  		move.w	#8,d3
0001E7F4 3828 0008                  		move.w	obX(a0),d4
0001E7F8 4EB9 0001 1ADE             		jsr	(SolidObject).l
0001E7FE 43F9 0000 0000             		lea	(Ani_Pri).l,a1
0001E804 4EB9 0000 C634             		jsr	(AnimateSprite).l
0001E80A 3168 0030 000C             		move.w	pri_origY(a0),obY(a0)
0001E810 4A28 0025                  		tst.b	ob2ndRout(a0)	; has prison already been opened?
0001E814 6700                       		beq.s	@open2		; if yes, branch
0001E816                            
0001E816 5068 000C                  		addq.w	#8,obY(a0)
0001E81A 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0001E820 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time between animal spawns
0001E826 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0001E82A 4238 F7AA                  		clr.b	(f_lockscreen).w ; lock screen position
0001E82E 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0001E834 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; make Sonic run to the right
0001E83A 4228 0025                  		clr.b	ob2ndRout(a0)
0001E83E 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001E844 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001E84A 4A38 F5C3                  		tst.b	(f_emeraldm).w
0001E84E 6700                       		beq.s	@open2
0001E850 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001E85E                            
0001E85E                            	@open2:
0001E85E 4E75                       		rts	
0001E860                            ; ===========================================================================
0001E860                            
0001E860                            Pri_Explosion:	; Routine 6, 8, $A
0001E860 7007                       		moveq	#7,d0
0001E862 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001E866 6600                       		bne.s	@noexplosion
0001E868 4EB9 0000 FB18             		jsr	(FindFreeObj).l
0001E86E 6600                       		bne.s	@noexplosion
0001E870 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1) ; load explosion object
0001E874 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E87A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E880 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001E886 7200                       		moveq	#0,d1
0001E888 1200                       		move.b	d0,d1
0001E88A E409                       		lsr.b	#2,d1
0001E88C 0441 0020                  		subi.w	#$20,d1
0001E890 D369 0008                  		add.w	d1,obX(a1)
0001E894 E048                       		lsr.w	#8,d0
0001E896 E608                       		lsr.b	#3,d0
0001E898 D169 000C                  		add.w	d0,obY(a1)
0001E89C                            
0001E89C                            	@noexplosion:
0001E89C 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001E8A0 6700                       		beq.s	@makeanimal
0001E8A2 4E75                       		rts	
0001E8A4                            ; ===========================================================================
0001E8A4                            
0001E8A4                            @makeanimal:
0001E8A4 11FC 0002 F7A7             		move.b	#2,(v_bossstatus).w
0001E8AA 117C 000C 0024             		move.b	#$C,obRoutine(a0)	; replace explosions with animals
0001E8B0 117C 0006 001A             		move.b	#6,obFrame(a0)
0001E8B6 317C 0096 001E             		move.w	#150,obTimeFrame(a0)
0001E8BC 0668 0020 000C             		addi.w	#$20,obY(a0)
0001E8C2 7C07                       		moveq	#7,d6
0001E8C4 3A3C 009A                  		move.w	#$9A,d5
0001E8C8 78E4                       		moveq	#-$1C,d4
0001E8CA                            
0001E8CA                            	@loop:
0001E8CA 4EB9 0000 FB18             		jsr	(FindFreeObj).l
0001E8D0 6600                       		bne.s	@fail
0001E8D2 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001E8D6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E8DC 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E8E2 D969 0008                  		add.w	d4,obX(a1)
0001E8E6 5E44                       		addq.w	#7,d4
0001E8E8 3345 0036                  		move.w	d5,$36(a1)
0001E8EC 5145                       		subq.w	#8,d5
0001E8EE 51CE FFDA                  		dbf	d6,@loop	; repeat 7 more	times
0001E8F2                            
0001E8F2                            	@fail:
0001E8F2 4E75                       		rts	
0001E8F4                            ; ===========================================================================
0001E8F4                            
0001E8F4                            Pri_Animals:	; Routine $C
0001E8F4 7007                       		moveq	#7,d0
0001E8F6 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001E8FA 6600                       		bne.s	@noanimal
0001E8FC 4EB9 0000 FB18             		jsr	(FindFreeObj).l
0001E902 6600                       		bne.s	@noanimal
0001E904 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001E908 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E90E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E914 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001E91A 0240 001F                  		andi.w	#$1F,d0
0001E91E 5D40                       		subq.w	#6,d0
0001E920 4A41                       		tst.w	d1
0001E922 6A00                       		bpl.s	@ispositive
0001E924 4440                       		neg.w	d0
0001E926                            
0001E926                            	@ispositive:
0001E926 D169 0008                  		add.w	d0,obX(a1)
0001E92A 337C 000C 0036             		move.w	#$C,$36(a1)
0001E930                            
0001E930                            	@noanimal:
0001E930 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001E934 6600                       		bne.s	@wait
0001E936 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E93A 317C 00B4 001E             		move.w	#180,obTimeFrame(a0)
0001E940                            
0001E940                            	@wait:
0001E940 4E75                       		rts	
0001E942                            ; ===========================================================================
0001E942                            
0001E942                            Pri_EndAct:	; Routine $E
0001E942 703E                       		moveq	#$3E,d0
0001E944 7228                       		moveq	#id_Animals,d1
0001E946 7440                       		moveq	#$40,d2
0001E948 43F8 D040                  		lea	(v_objspace+$40).w,a1 ; load object RAM
0001E94C                            
0001E94C                            	@findanimal:
0001E94C B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001E94E 6700                       		beq.s	@found		; if yes, branch
0001E950 D2C2                       		adda.w	d2,a1		; next object RAM
0001E952 51C8 FFF8                  		dbf	d0,@findanimal	; repeat $3E times
0001E956                            
0001E956 4EB9 0001 0E00             		jsr	(GotThroughAct1).l
0001E95C 4EF9 0000 F5BE             		jmp	(DeleteObject).l
0001E962                            
0001E962                            	@found:
0001E962 4E75                       		rts	
0001E962 4E75                       		rts	
0001E964                            		include	"_anim\Prison Capsule.asm"
0001E964                            ; ---------------------------------------------------------------------------
0001E964                            ; Animation script - prison capsule
0001E964                            ; ---------------------------------------------------------------------------
0001E964 0000                       Ani_Pri:	dc.w @switchflash-Ani_Pri
0001E966 0000                       		dc.w @switchflash-Ani_Pri
0001E968 0201 03FF                  @switchflash:	dc.b 2,	1, 3, afEnd
0001E96C                            		even
0001E96C                            		even
0001E96C                            Map_Pri:	include	"_maps\Prison Capsule.asm"
0001E96C                            ; ---------------------------------------------------------------------------
0001E96C                            ; Sprite mappings - prison capsule
0001E96C                            ; ---------------------------------------------------------------------------
0001E96C                            Map_Pri_internal:
0001E96C 0000                       		dc.w @capsule-Map_Pri_internal
0001E96E 0000                       		dc.w @switch1-Map_Pri_internal
0001E970 0000                       		dc.w @broken-Map_Pri_internal
0001E972 0000                       		dc.w @switch2-Map_Pri_internal
0001E974 0000                       		dc.w @unusedthing1-Map_Pri_internal
0001E976 0000                       		dc.w @unusedthing2-Map_Pri_internal
0001E978 0000                       		dc.w @blank-Map_Pri_internal
0001E97A 07                         @capsule:	dc.b 7
0001E97B E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001E980 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001E985 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001E98A F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001E98F F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001E994 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001E999 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001E99E 01                         @switch1:	dc.b 1
0001E99F F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001E9A4 06                         @broken:	dc.b 6
0001E9A5 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001E9AA 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001E9AF 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001E9B4 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001E9B9 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001E9BE 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001E9C3 01                         @switch2:	dc.b 1
0001E9C4 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001E9C9 02                         @unusedthing1:	dc.b 2
0001E9CA E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001E9CF 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001E9D4 01                         @unusedthing2:	dc.b 1
0001E9D5 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001E9DA 00                         @blank:		dc.b 0
0001E9DC 00                         		even
0001E9DC 00                         		even
0001E9DC                            
0001E9DC                            		include	"_incObj\sub ReactToItem.asm"
0001E9DC                            ; ---------------------------------------------------------------------------
0001E9DC                            ; Subroutine to react to obColType(a0)
0001E9DC                            ; ---------------------------------------------------------------------------
0001E9DC                            
0001E9DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E9DC                            
0001E9DC                            
0001E9DC                            ReactToItem:
0001E9DC 4E71                       		nop	
0001E9DE 3428 0008                  		move.w	obX(a0),d2	; load Sonic's x-axis position
0001E9E2 3628 000C                  		move.w	obY(a0),d3	; load Sonic's y-axis position
0001E9E6 5142                       		subq.w	#8,d2
0001E9E8 7A00                       		moveq	#0,d5
0001E9EA 1A28 0016                  		move.b	obHeight(a0),d5	; load Sonic's height
0001E9EE 5705                       		subq.b	#3,d5
0001E9F0 9645                       		sub.w	d5,d3
0001E9F2 0C28 0071 001A             		cmpi.b	#fr_Duck,obFrame(a0) ; is Sonic ducking?
0001E9F8 6600                       		bne.s	@notducking	; if not, branch
0001E9FA 0643 000C                  		addi.w	#$C,d3
0001E9FE 7A0A                       		moveq	#$A,d5
0001EA00                            
0001EA00                            	@notducking:
0001EA00 383C 0010                  		move.w	#$10,d4
0001EA04 DA45                       		add.w	d5,d5
0001EA06 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; set object RAM start address
0001EA0A 3C3C 005F                  		move.w	#$5F,d6
0001EA0E                            
0001EA0E                            @loop:
0001EA0E 4A29 0001                  		tst.b	obRender(a1)
0001EA12 6A00                       		bpl.s	@next
0001EA14 1029 0020                  		move.b	obColType(a1),d0 ; load collision type
0001EA18 6600                       		bne.s	@proximity	; if nonzero, branch
0001EA1A                            
0001EA1A                            	@next:
0001EA1A 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001EA1E 51CE FFEE                  		dbf	d6,@loop	; repeat $5F more times
0001EA22                            
0001EA22 7000                       		moveq	#0,d0
0001EA24 4E75                       		rts	
0001EA26                            ; ===========================================================================
0001EA26                            @sizes:		;   width, height
0001EA26 1414                       		dc.b  $14, $14		; $01
0001EA28 0C14                       		dc.b   $C, $14		; $02
0001EA2A 140C                       		dc.b  $14,  $C		; $03
0001EA2C 0410                       		dc.b	4, $10		; $04
0001EA2E 0C12                       		dc.b   $C, $12		; $05
0001EA30 1010                       		dc.b  $10, $10		; $06
0001EA32 0606                       		dc.b	6,   6		; $07
0001EA34 180C                       		dc.b  $18,  $C		; $08
0001EA36 0C10                       		dc.b   $C, $10		; $09
0001EA38 100C                       		dc.b  $10,  $C		; $0A
0001EA3A 0808                       		dc.b	8,   8		; $0B
0001EA3C 1410                       		dc.b  $14, $10		; $0C
0001EA3E 1408                       		dc.b  $14,   8		; $0D
0001EA40 0E0E                       		dc.b   $E,  $E		; $0E
0001EA42 1818                       		dc.b  $18, $18		; $0F
0001EA44 2810                       		dc.b  $28, $10		; $10
0001EA46 1018                       		dc.b  $10, $18		; $11
0001EA48 0810                       		dc.b	8, $10		; $12
0001EA4A 2070                       		dc.b  $20, $70		; $13
0001EA4C 4020                       		dc.b  $40, $20		; $14
0001EA4E 8020                       		dc.b  $80, $20		; $15
0001EA50 2020                       		dc.b  $20, $20		; $16
0001EA52 0808                       		dc.b	8,   8		; $17
0001EA54 0404                       		dc.b	4,   4		; $18
0001EA56 2008                       		dc.b  $20,   8		; $19
0001EA58 0C0C                       		dc.b   $C,  $C		; $1A
0001EA5A 0804                       		dc.b	8,   4		; $1B
0001EA5C 1804                       		dc.b  $18,   4		; $1C
0001EA5E 2804                       		dc.b  $28,   4		; $1D
0001EA60 0408                       		dc.b	4,   8		; $1E
0001EA62 0418                       		dc.b	4, $18		; $1F
0001EA64 0428                       		dc.b	4, $28		; $20
0001EA66 0420                       		dc.b	4, $20		; $21
0001EA68 1818                       		dc.b  $18, $18		; $22
0001EA6A 0C18                       		dc.b   $C, $18		; $23
0001EA6C 4808                       		dc.b  $48,   8		; $24
0001EA6E                            ; ===========================================================================
0001EA6E                            
0001EA6E                            @proximity:
0001EA6E 0240 003F                  		andi.w	#$3F,d0
0001EA72 D040                       		add.w	d0,d0
0001EA74 45FB 00AE                  		lea	@sizes-2(pc,d0.w),a2
0001EA78 7200                       		moveq	#0,d1
0001EA7A 121A                       		move.b	(a2)+,d1
0001EA7C 3029 0008                  		move.w	obX(a1),d0
0001EA80 9041                       		sub.w	d1,d0
0001EA82 9042                       		sub.w	d2,d0
0001EA84 6400                       		bcc.s	@outsidex	; branch if not touching
0001EA86 D241                       		add.w	d1,d1
0001EA88 D041                       		add.w	d1,d0
0001EA8A 6500                       		bcs.s	@withinx	; branch if touching
0001EA8C 6000 FF8C                  		bra.w	@next
0001EA90                            ; ===========================================================================
0001EA90                            
0001EA90                            @outsidex:
0001EA90 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001EA94 B044                       		cmp.w	d4,d0
0001EA96 6200 FF82                  		bhi.w	@next
0001EA9A                            
0001EA9A                            @withinx:
0001EA9A 7200                       		moveq	#0,d1
0001EA9C 121A                       		move.b	(a2)+,d1
0001EA9E 3029 000C                  		move.w	obY(a1),d0
0001EAA2 9041                       		sub.w	d1,d0
0001EAA4 9043                       		sub.w	d3,d0
0001EAA6 6400                       		bcc.s	@outsidey	; branch if not touching
0001EAA8 D241                       		add.w	d1,d1
0001EAAA D240                       		add.w	d0,d1
0001EAAC 6500                       		bcs.s	@withiny	; branch if touching
0001EAAE 6000 FF6A                  		bra.w	@next
0001EAB2                            
0001EAB2                            ; ===========================================================================
0001EAB2                            
0001EAB2                            @outsidey:
0001EAB2 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001EAB6 B045                       		cmp.w	d5,d0
0001EAB8 6200 FF60                  		bhi.w	@next
0001EABC                            
0001EABC                            @withiny:
0001EABC                            	@chktype:
0001EABC 0C38 0004 FE10                     	cmpi.b	#id_SYZ,(v_zone).w   ;TIS is level GHZZ?
0001EAC2 6600 0000                          	bne	NotGHZReact  ;TIS
0001EAC6 1229 0020                          	move.b	obColType(a1),d1 ;TIS load collision type
0001EACA 0C01 0096                          	cmpi.b	#$96,d1        ;TIS - is collision type $96?
0001EACE 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001EAD2 0C01 0094                          	cmpi.b	#$94,d1        ;TIS - is collision type $94?
0001EAD6 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001EADA 0C01 0095                          	cmpi.b	#$95,d1        ;TIS - is collision type $95?
0001EADE 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001EAE2                            NotGHZReact:                      ;TIS
0001EAE2 1229 0020                  		move.b	obColType(a1),d1 ; load collision type
0001EAE6 0201 00C0                  		andi.b	#$C0,d1        ; is obColType $40 or higher?
0001EAEA 6700 0000                  		beq.w	React_Enemy    ; if not, branch
0001EAEE 0C01 00C0                  		cmpi.b	#$C0,d1		; is obColType $C0 or higher?
0001EAF2 6700 0000                  		beq.w	React_Special	; if yes, branch
0001EAF6 4A01                       		tst.b	d1		; is obColType $80-$BF?
0001EAF8 6B00 0000                  		bmi.w	React_ChkHurt	; if yes, branch
0001EAFC                            
0001EAFC                            ; obColType is $40-$7F (powerups)
0001EAFC                            
0001EAFC 1029 0020                  		move.b	obColType(a1),d0
0001EB00 0200 003F                  		andi.b	#$3F,d0
0001EB04 0C00 0006                  		cmpi.b	#6,d0		; is collision type $46	?
0001EB08 6700                       		beq.s	React_Monitor	; if yes, branch
0001EB0A 0C68 005A 0030             		cmpi.w	#90,$30(a0)	; is Sonic invincible?
0001EB10 6400 0000                  		bcc.w	@invincible	; if yes, branch
0001EB14 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the object's routine counter
0001EB18                            
0001EB18                            	@invincible:
0001EB18 4E75                       		rts	
0001EB1A                            ; ===========================================================================
0001EB1A                            
0001EB1A                            React_Monitor:
0001EB1A 4A68 0012                  		tst.w	obVelY(a0)	; is Sonic moving upwards?
0001EB1E 6A00                       		bpl.s	@movingdown	; if not, branch
0001EB20                            
0001EB20 3028 000C                  		move.w	obY(a0),d0
0001EB24 0440 0010                  		subi.w	#$10,d0
0001EB28 B069 000C                  		cmp.w	obY(a1),d0
0001EB2C 6500                       		bcs.s	@donothing
0001EB2E 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's vertical speed
0001EB32 337C FE80 0012             		move.w	#-$180,obVelY(a1)
0001EB38 4A29 0025                  		tst.b	ob2ndRout(a1)
0001EB3C 6600                       		bne.s	@donothing
0001EB3E 5829 0025                  		addq.b	#4,ob2ndRout(a1) ; advance the monitor's routine counter
0001EB42 4E75                       		rts	
0001EB44                            ; ===========================================================================
0001EB44                            
0001EB44                            @movingdown:
0001EB44 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001EB4A 6600                       		bne.s	@donothing
0001EB4C 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's y-motion
0001EB50 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the monitor's routine counter
0001EB54 4EB9 0001 5E02             		jsr		BounceJD
0001EB5A                            
0001EB5A                            	@donothing:
0001EB5A 4E75                       		rts	
0001EB5C                            ; ===========================================================================
0001EB5C                            
0001EB5C                            React_Enemy:
0001EB5C 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001EB60 6600                       		bne.s	@donthurtsonic	; if yes, branch
0001EB62 0C28 001F 001C             		cmpi.b	#id_Spindash,obAnim(a0)	; is Sonic Spin Dashing? 
0001EB68 6700 0000                  		beq.w	@donthurtsonic	; if yes, branch
0001EB6C 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001EB72 6600 0000                  		bne.w	React_ChkHurt	; if not, branch
0001EB76                            
0001EB76                            	@donthurtsonic:
0001EB76 4A29 0021                  		tst.b	obColProp(a1)
0001EB7A 6700                       		beq.s	breakenemy
0001EB7C                            
0001EB7C 4468 0010                  		neg.w	obVelX(a0)	; repel Sonic
0001EB80 4468 0012                  		neg.w	obVelY(a0)
0001EB84 E0E8 0010                  		asr	obVelX(a0)
0001EB88 E0E8 0012                  		asr	obVelY(a0)
0001EB8C 137C 0000 0020             		move.b	#0,obColType(a1)
0001EB92 5329 0021                  		subq.b	#1,obColProp(a1)
0001EB96 6600                       		bne.s	@flagnotclear
0001EB98 08E9 0007 0022             		bset	#7,obStatus(a1)
0001EB9E                            
0001EB9E                            	@flagnotclear:
0001EB9E 4E75                       		rts	
0001EBA0                            ; ===========================================================================
0001EBA0                            
0001EBA0                            breakenemy:
0001EBA0 08E9 0007 0022             		bset	#7,obStatus(a1)
0001EBA6 7000                       		moveq	#0,d0
0001EBA8 3038 F7D0                  		move.w	(v_itembonus).w,d0
0001EBAC 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; add 2 to item bonus counter
0001EBB0 0C40 0006                  		cmpi.w	#6,d0
0001EBB4 6500                       		bcs.s	@bonusokay
0001EBB6 7006                       		moveq	#6,d0		; max bonus is lvl6
0001EBB8                            
0001EBB8                            	@bonusokay:
0001EBB8 3340 003E                  		move.w	d0,$3E(a1)
0001EBBC 303B 0000                  		move.w	@points(pc,d0.w),d0
0001EBC0 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 enemies been destroyed?
0001EBC6 6500                       		bcs.s	@lessthan16	; if not, branch
0001EBC8 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001EBCC 337C 000A 003E             		move.w	#$A,$3E(a1)
0001EBD2                            
0001EBD2                            	@lessthan16:
0001EBD2 6100 0000                  		bsr.w	AddPoints
0001EBD6 4EB9 0001 5E02             		jsr		BounceJD
0001EBDC 12BC 0027                  		move.b	#id_ExplosionItem,0(a1) ; change object to explosion
0001EBE0 137C 0000 0024             		move.b	#0,obRoutine(a1)
0001EBE6 4A68 0012                  		tst.w	obVelY(a0)
0001EBEA 6B00                       		bmi.s	@bouncedown
0001EBEC 3028 000C                  		move.w	obY(a0),d0
0001EBF0 B069 000C                  		cmp.w	obY(a1),d0
0001EBF4 6400                       		bcc.s	@bounceup
0001EBF6 4468 0012                  		neg.w	obVelY(a0)
0001EBFA 4E75                       		rts	
0001EBFC                            ; ===========================================================================
0001EBFC                            
0001EBFC                            	@bouncedown:
0001EBFC 0668 0100 0012             		addi.w	#$100,obVelY(a0)
0001EC02 4E75                       		rts	
0001EC04                            
0001EC04                            	@bounceup:
0001EC04 0468 0100 0012             		subi.w	#$100,obVelY(a0)
0001EC0A 4E75                       		rts	
0001EC0C                            
0001EC0C 000A 0014 0032 0064        @points:	dc.w 10, 20, 50, 100	; points awarded div 10
0001EC14                            
0001EC14                            ; ===========================================================================
0001EC14                            
0001EC14                            React_Caterkiller:
0001EC14 08E9 0007 0022             		bset	#7,obStatus(a1)
0001EC1A                            
0001EC1A                            React_ChkHurt:
0001EC1A 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001EC1E 6700                       		beq.s	notinvincible	; if not, branch
0001EC20                            
0001EC20                            	isflashing:
0001EC20 70FF                       		moveq	#-1,d0
0001EC22 4E75                       		rts	
0001EC24                            ; ===========================================================================
0001EC24                            
0001EC24                            	notinvincible:
0001EC24 4E71                       		nop	
0001EC26 4A68 0030                  		tst.w	$30(a0)		; is Sonic flashing?
0001EC2A 66F4                       		bne.s	isflashing	; if yes, branch
0001EC2C 2449                       		movea.l	a1,a2
0001EC2E                            
0001EC2E                            ; End of function ReactToItem
0001EC2E                            ; continue straight to HurtSonic
0001EC2E                            
0001EC2E                            ; ---------------------------------------------------------------------------
0001EC2E                            ; Hurting Sonic	subroutine
0001EC2E                            ; ---------------------------------------------------------------------------
0001EC2E                            
0001EC2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EC2E                            
0001EC2E                            
0001EC2E                            HurtSonic:
0001EC2E 4A38 FE2C                  		tst.b	(v_shield).w	; does Sonic have a shield?
0001EC32 6600                       		bne.s	@hasshield	; if yes, branch
0001EC34 4A38 F5C8                  		tst.b	(v_rshield).w	; does Sonic have a red shield?
0001EC38 6600                       		bne.s	@hasshield	; if yes, branch
0001EC3A 4A38 F5C9                  		tst.b	(v_gshield).w	; does Sonic have a gold shield?
0001EC3E 6600                       		bne.s	@hasshield	; if yes, branch
0001EC40 4A38 F5CA                  		tst.b	(v_spshield).w	; does Sonic have a silver shield?
0001EC44 6600                       		bne.s	@hasshield	; if yes, branch
0001EC46 4A78 FE20                  		tst.w	(v_rings).w	; does Sonic have any rings?
0001EC4A 6700 0000                  		beq.w	@norings	; if not, branch
0001EC4E                            
0001EC4E 4EB9 0000 FB18             		jsr	(FindFreeObj).l
0001EC54 6600                       		bne.s	@hasshield
0001EC56 12BC 0037                  		move.b	#id_RingLoss,0(a1) ; load bouncing multi rings object
0001EC5A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001EC60 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001EC66                            
0001EC66                            	@hasshield:
0001EC66 0C38 0001 FE2C             		cmpi.b	#1,(v_shield).w     ; does sonic have a Shield?
0001EC6C 6600                       		bne.s	@hasrshield        ; if no, check for red shield
0001EC6E 0C12 006E                  		cmpi.b	#$6E,(a2)     ; was damage caused by electrocuter?
0001EC72 6700 FFAC                  		beq.w	isflashing
0001EC76 0C12 0086                  		cmpi.b	#$86,(a2)     ; was damage caused by Plasma Ball Launcher?
0001EC7A 6700 FFA4                  		beq.w	isflashing
0001EC7E                            
0001EC7E                            	@hasrshield:
0001EC7E 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w     ; does sonic not a Red Shield?
0001EC84 6700                       		beq.s	@hasspshield          ; if yes, check for gray shield
0001EC86 0C12 0014                  		cmpi.b	#$14,(a2)	; was damage caused by lava ball?
0001EC8A 6700 FF94                  		beq.w 	isflashing
0001EC8E 0C12 004C                  		cmpi.b	#$4C,(a2)	; was damage caused by lava geyser?
0001EC92 6700 FF8C                  		beq.w 	isflashing
0001EC96 0C12 004D                  		cmpi.b	#$4D,(a2)	; was damage caused by lava geyser?
0001EC9A 6700 FF84                  		beq.w 	isflashing
0001EC9E 0C12 0062                  		cmpi.b	#$62,(a2)	; was damage caused by gargoyle?
0001ECA2 6700 FF7C                  		beq.w 	isflashing
0001ECA6 0C12 0074                  		cmpi.b	#$74,(a2)	; was damage caused by MZ fire boss?
0001ECAA 6700 FF74                  		beq.w 	isflashing
0001ECAE 0C12 0035                  		cmpi.b	#$35,(a2)	; was damage caused by burning grass?
0001ECB2 6700 FF6C                  		beq.w 	isflashing
0001ECB6 0C12 006D                  		cmpi.b	#$6D,(a2)	; was damage caused by flamethrower?
0001ECBA 6700 FF64                  		beq.w 	isflashing
0001ECBE 0C12 0054                  		cmpi.b	#$54,(a2)	; was damage caused by Lava Tag/Magma?
0001ECC2 6700 FF5C                  		beq.w 	isflashing
0001ECC6                            
0001ECC6                            	@hasspshield:
0001ECC6 0C38 0001 F5CA             		cmpi.b	#1,(v_spshield).w     ; does sonic have a sp Shield?
0001ECCC 6600 0000                  		bne.w	@hurtcont           ; if yes, make him invulnerable to metal objects
0001ECD0 0C12 0015                  		cmpi.b	#$15,(a2)	; was damage caused by SBZ Spiked Ball?
0001ECD4 6700 FF4A                  		beq.w 	isflashing
0001ECD8 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ Harpoon?
0001ECDC 6700 FF42                  		beq.w 	isflashing
0001ECE0 0C12 0017                  		cmpi.b	#$17,(a2)	; was damage caused by helix of spikes?
0001ECE4 6700 FF3A                  		beq.w 	isflashing
0001ECE8 0C12 0031                  		cmpi.b	#$31,(a2)	; was damage caused by Chained Stompers?
0001ECEC 6700 FF32                  		beq.w 	isflashing
0001ECF0 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by Spikes?
0001ECF4 6700 FF2A                  		beq.w 	isflashing
0001ECF8 0C12 007B                  		cmpi.b	#$7B,(a2)	; was damage caused by SLZ boss spikeball?
0001ECFC 6700 FF22                  		beq.w 	isflashing
0001ED00 0C12 0057                  		cmpi.b	#$57,(a2)	; was damage caused by Spiked Ball & Chain?
0001ED04 6700 FF1A                  		beq.w 	isflashing
0001ED08 0C12 0058                  		cmpi.b	#$58,(a2)	; was damage caused by Big Spiked Ball?
0001ED0C 6700 FF12                  		beq.w 	isflashing
0001ED10 0C12 006A                  		cmpi.b	#$6A,(a2)	; was damage caused by Saws?
0001ED14 6700 FF0A                  		beq.w 	isflashing
0001ED18 0C12 005E                  		cmpi.b	#$5E,(a2)	; was damage caused by Seesaw ball?
0001ED1C 6700 FF02                  		beq.w 	isflashing
0001ED20                            
0001ED20 0C12 0006                  		cmpi.b	#$06,(a2)	; was damage caused by Mozzietron?
0001ED24 6700 FE7A                  		beq.w 	breakenemy
0001ED28 0C12 001E                  		cmpi.b	#$1E,(a2)	; was damage caused by Ball Hog?
0001ED2C 6700 FE72                  		beq.w 	breakenemy
0001ED30 0C12 002D                  		cmpi.b	#$2D,(a2)	; was damage caused by Burrobot?
0001ED34 6700 FE6A                  		beq.w 	breakenemy
0001ED38 0C12 0017                  		cmpi.b	#$17,(a2)	; was damage caused by Jaws?
0001ED3C 6700 FEE2                  		beq.w 	isflashing
0001ED40 0C12 0050                  		cmpi.b	#$50,(a2)	; was damage caused by Yadrin?
0001ED44 6700 FE5A                  		beq.w 	breakenemy
0001ED48                            		;cmpi.b	#$5F,(a2)	; was damage caused by Bomb?
0001ED48                            		;beq.w 	breakenemy
0001ED48 0C12 0060                  		cmpi.b	#$60,(a2)	; was damage caused by Orbinaut?
0001ED4C 6700 FE52                  		beq.w 	breakenemy
0001ED50 0C12 0078                  		cmpi.b	#$78,(a2)	; was damage caused by Catterkiller?
0001ED54 6700 FE4A                  		beq.w 	breakenemy
0001ED58                            
0001ED58                            	@hurtcont:
0001ED58 11FC 0000 FE2C             		move.b	#0,(v_shield).w		; remove shield
0001ED5E                            		;move.b	#0,(v_gshield).w	; remove g shield
0001ED5E 11FC 0000 F5CA             		move.b	#0,(v_spshield).w	; remove sp shield
0001ED64                            		
0001ED64 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w ; do you have no r shield?
0001ED6A 6700                       		beq.s	@gshieldcheck	;if not, branch
0001ED6C 5338 F5C8                  		subq.b	#1,(v_rshield).w
0001ED70                            		
0001ED70                            	@gshieldcheck:
0001ED70 0C38 0000 F5C9             		cmpi.b	#0,(v_gshield).w 	; do you have no g shield?
0001ED76 6700                       		beq.s	@hurtcont2			;if not, branch
0001ED78 5338 F5C9                  		subq.b	#1,(v_gshield).w	
0001ED7C                            		
0001ED7C                            	@hurtcont2:
0001ED7C 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001ED82 4EB9 0001 64AA             		jsr		Sonic_ResetOnFloor
0001ED88 08E8 0001 0022             		bset	#1,obStatus(a0)
0001ED8E 317C FC00 0012             		move.w	#-$400,obVelY(a0) ; make Sonic bounce away from the object
0001ED94 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001ED9A 0828 0006 0022             		btst	#6,obStatus(a0)	; is Sonic underwater?
0001EDA0 6700                       		beq.s	@isdry		; if not, branch
0001EDA2                            
0001EDA2 317C FE00 0012             		move.w	#-$200,obVelY(a0) ; slower bounce
0001EDA8 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001EDAE                            
0001EDAE                            	@isdry:
0001EDAE 3028 0008                  		move.w	obX(a0),d0
0001EDB2 B06A 0008                  		cmp.w	obX(a2),d0
0001EDB6 6500                       		bcs.s	@isleft		; if Sonic is left of the object, branch
0001EDB8 4468 0010                  		neg.w	obVelX(a0)	; if Sonic is right of the object, reverse
0001EDBC                            
0001EDBC                            	@isleft:
0001EDBC 117C 0000 0039             		move.b	#0,f_spindash(a0) ; clear Spin Dash flag 
0001EDC2 317C 0000 0020             		move.w	#0,obInertia(a0) 
0001EDC8 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0) 
0001EDCE 317C 0120 0030             		move.w	#$120,$30(a0)
0001EDD4 0C12 006E                  		cmpi.b	#$6E,(a2)    ; check if you were hurt by Electrocuter
0001EDD8 6700                       		beq.s	@hurtelec       ; if yes, branch
0001EDDA 0C12 0086                  		cmpi.b	#$86,(a2)    ; check if you were hurt by FZ plasma
0001EDDE 6700                       		beq.s	@hurtelec       ; if yes, branch
0001EDE0 317C 0000 0020             		move.w	#0,obInertia(a0)
0001EDE6 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0)
0001EDEC 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001EDF2 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001EDF6 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001EDFA 6600                       		bne.s	@sound		; if not, branch
0001EDFC 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001EE00 6600                       		bne.s	@sound		; if not, branch
0001EE02 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001EE06                            
0001EE06                            	@sound:
0001EE06 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001EE0C 70FF                       		moveq	#-1,d0
0001EE0E 4E75                       		rts	
0001EE10                            
0001EE10                            	@hurtelec:
0001EE10 117C 0020 001C             		move.b	#id_Hurt2,obAnim(a0)
0001EE16 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001EE1C 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001EE20 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001EE24 66E0                       		bne.s	@sound		; if not, branch
0001EE26 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001EE2A 66DA                       		bne.s	@sound		; if not, branch
0001EE2C 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001EE30                            ; ===========================================================================
0001EE30                            
0001EE30                            @norings:
0001EE30 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat on?
0001EE34 6600 FE30                  		bne.w	@hasshield	; if yes, branch
0001EE38                            
0001EE38                            ; ---------------------------------------------------------------------------
0001EE38                            ; Subroutine to	kill Sonic
0001EE38                            ; ---------------------------------------------------------------------------
0001EE38                            
0001EE38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EE38                            
0001EE38                            
0001EE38                            KillSonic:
0001EE38 11FC 0002 F5D8             		move.b    #2,(Super_Sonic_palette).w; Remove rotating palette
0001EE3E 4238 FE19                  		clr.b (Super_Sonic_Flag).w ; Revert Sonic to Normal
0001EE42 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	active?
0001EE46 6600 0000                  		bne.w	@dontdie	; if yes, branch
0001EE4A 31FC 0000 FE20             		move.w	#0,(v_rings).w ; clear rings
0001EE50 11FC 0000 FE2D             		move.b	#0,(v_invinc).w	; remove invincibility
0001EE56 11FC 0000 FE2E             		move.b  #0,(v_shoes).w
0001EE5C 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0001EE62 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w  ;clear victory animation flag
0001EE68 117C 0006 0024             		move.b	#6,obRoutine(a0)
0001EE6E 4EB9 0001 64AA             		jsr		Sonic_ResetOnFloor
0001EE74 08E8 0001 0022             		bset	#1,obStatus(a0)
0001EE7A 317C F900 0012             		move.w	#-$700,obVelY(a0)
0001EE80 317C 0000 0010             		move.w	#0,obVelX(a0)
0001EE86 317C 0000 0020             		move.w	#0,obInertia(a0)
0001EE8C 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001EE92 0C12 0054                  		cmpi.b	#$54,(a2)    ; check if you were killed by lava
0001EE96 6700                       		beq.s	Kill_Lava       ; if yes, branch
0001EE98 0C12 006D                  		cmpi.b	#$6D,(a2)    ; check if you were killed by flamethrower
0001EE9C 6700                       		beq.s	Kill_Lava        ; if yes, branch
0001EE9E 117C 0018 001C             		move.b	#id_Death,obAnim(a0)
0001EEA4 08E8 0007 0002             		bset	#7,obGfx(a0)
0001EEAA 303C 0000                  		move.w	#sfx_Death,d0	; play normal death sound
0001EEAE 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; check	if you were killed by spikes
0001EEB2 6600                       		bne.s	@sound
0001EEB4 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; play spikes death sound
0001EEB8                            
0001EEB8                            	@sound:
0001EEB8 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001EEBE                            
0001EEBE                            	@dontdie:
0001EEBE 70FF                       		moveq	#-1,d0
0001EEC0 4E75                       		rts	
0001EEC2                            ; End of function KillSonic
0001EEC2                            Kill_Lava:	
0001EEC2 08E8 0007 0002             	bset	#7,obGfx(a0)
0001EEC8 117C 0016 001C             	move.b	#$16,$1C(a0)
0001EECE 303C 00C8                  	move.w	#$C8,d0        ; play death sound
0001EED2 4EB9 0000 12A0                 jsr		(PlaySound_Special).l
0001EED8                            
0001EED8                            
0001EED8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EED8                            
0001EED8                            
0001EED8                            React_Special:
0001EED8 1229 0020                  		move.b	obColType(a1),d1
0001EEDC 0201 003F                  		andi.b	#$3F,d1
0001EEE0 0C01 000B                  		cmpi.b	#$B,d1		; is collision type $CB	?
0001EEE4 6700                       		beq.s	@caterkiller	; if yes, branch
0001EEE6 0C01 000C                  		cmpi.b	#$C,d1		; is collision type $CC	?
0001EEEA 6700                       		beq.s	@yadrin		; if yes, branch
0001EEEC 0C01 0017                  		cmpi.b	#$17,d1		; is collision type $D7	?
0001EEF0 6700                       		beq.s	@D7orE1		; if yes, branch
0001EEF2 0C01 0021                  		cmpi.b	#$21,d1		; is collision type $E1	?
0001EEF6 6700                       		beq.s	@D7orE1		; if yes, branch
0001EEF8 4E75                       		rts	
0001EEFA                            ; ===========================================================================
0001EEFA                            
0001EEFA                            @caterkiller:
0001EEFA 6000 FD18                  		bra.w	React_Caterkiller
0001EEFE                            ; ===========================================================================
0001EEFE                            
0001EEFE                            @yadrin:
0001EEFE 9A40                       		sub.w	d0,d5
0001EF00 0C45 0008                  		cmpi.w	#8,d5
0001EF04 6400                       		bcc.s	@normalenemy
0001EF06 3029 0008                  		move.w	obX(a1),d0
0001EF0A 5940                       		subq.w	#4,d0
0001EF0C 0829 0000 0022             		btst	#0,obStatus(a1)
0001EF12 6700                       		beq.s	@noflip
0001EF14 0440 0010                  		subi.w	#$10,d0
0001EF18                            
0001EF18                            	@noflip:
0001EF18 9042                       		sub.w	d2,d0
0001EF1A 6400                       		bcc.s	@loc_1B13C
0001EF1C 0640 0018                  		addi.w	#$18,d0
0001EF20 6500                       		bcs.s	@loc_1B140
0001EF22 6000                       		bra.s	@normalenemy
0001EF24                            ; ===========================================================================
0001EF24                            
0001EF24                            	@loc_1B13C:
0001EF24 B044                       		cmp.w	d4,d0
0001EF26 6200                       		bhi.s	@normalenemy
0001EF28                            
0001EF28                            	@loc_1B140:
0001EF28 6000 FCF0                  		bra.w	React_ChkHurt
0001EF2C                            ; ===========================================================================
0001EF2C                            
0001EF2C                            	@normalenemy:
0001EF2C 6000 FC2E                  		bra.w	React_Enemy
0001EF30                            ; ===========================================================================
0001EF30                            
0001EF30                            @D7orE1:
0001EF30 5229 0021                  		addq.b	#1,obColProp(a1)
0001EF34 4E75                       		rts	
0001EF36                            ; End of function React_Special
0001EF36                            
0001EF36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EF36                            
0001EF36                            React_ChkWaterTag:
0001EF36 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001EF3C 6600 0000                  		bne	NotWaterTag
0001EF40 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0001EF46                            	NotWaterTag:
0001EF46 4E75                       		rts
0001EF48                            
0001EF48                            React_WaterTag:
0001EF48 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001EF4E 6700 0000                  		beq	SkipWaterTag
0001EF52 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0001EF58                            	SkipWaterTag:
0001EF58 4E75                       		rts
0001EF58 4E75                       		rts
0001EF5A                            
0001EF5A                            ; ---------------------------------------------------------------------------
0001EF5A                            ; Subroutine to	show the special stage layout
0001EF5A                            ; ---------------------------------------------------------------------------
0001EF5A                            
0001EF5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EF5A                            
0001EF5A                            
0001EF5A                            SS_ShowLayout:
0001EF5A 6100 0000                  		bsr.w	SS_AniWallsRings
0001EF5E 6100 0000                  		bsr.w	SS_AniItems
0001EF62 3F05                       		move.w	d5,-(sp)
0001EF64 43F8 8000                  		lea	($FFFF8000).w,a1
0001EF68 1038 F780                  		move.b	(v_ssangle).w,d0
0001EF6C 0200 00FC                  		andi.b	#$FC,d0
0001EF70 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001EF76 3800                       		move.w	d0,d4
0001EF78 3A01                       		move.w	d1,d5
0001EF7A C9FC 0018                  		muls.w	#$18,d4
0001EF7E CBFC 0018                  		muls.w	#$18,d5
0001EF82 7400                       		moveq	#0,d2
0001EF84 3438 F700                  		move.w	(v_screenposx).w,d2
0001EF88 84FC 0018                  		divu.w	#$18,d2
0001EF8C 4842                       		swap	d2
0001EF8E 4442                       		neg.w	d2
0001EF90 0642 FF4C                  		addi.w	#-$B4,d2
0001EF94 7600                       		moveq	#0,d3
0001EF96 3638 F704                  		move.w	(v_screenposy).w,d3
0001EF9A 86FC 0018                  		divu.w	#$18,d3
0001EF9E 4843                       		swap	d3
0001EFA0 4443                       		neg.w	d3
0001EFA2 0643 FF4C                  		addi.w	#-$B4,d3
0001EFA6 3E3C 000F                  		move.w	#$F,d7
0001EFAA                            
0001EFAA                            loc_1B19E:
0001EFAA 48A7 E000                  		movem.w	d0-d2,-(sp)
0001EFAE 48A7 C000                  		movem.w	d0-d1,-(sp)
0001EFB2 4440                       		neg.w	d0
0001EFB4 C3C2                       		muls.w	d2,d1
0001EFB6 C1C3                       		muls.w	d3,d0
0001EFB8 2C00                       		move.l	d0,d6
0001EFBA DC81                       		add.l	d1,d6
0001EFBC 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001EFC0 C1C2                       		muls.w	d2,d0
0001EFC2 C3C3                       		muls.w	d3,d1
0001EFC4 D280                       		add.l	d0,d1
0001EFC6 2406                       		move.l	d6,d2
0001EFC8 3C3C 000F                  		move.w	#$F,d6
0001EFCC                            
0001EFCC                            loc_1B1C0:
0001EFCC 2002                       		move.l	d2,d0
0001EFCE E080                       		asr.l	#8,d0
0001EFD0 32C0                       		move.w	d0,(a1)+
0001EFD2 2001                       		move.l	d1,d0
0001EFD4 E080                       		asr.l	#8,d0
0001EFD6 32C0                       		move.w	d0,(a1)+
0001EFD8 D485                       		add.l	d5,d2
0001EFDA D284                       		add.l	d4,d1
0001EFDC 51CE FFEE                  		dbf	d6,loc_1B1C0
0001EFE0                            
0001EFE0 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001EFE4 0643 0018                  		addi.w	#$18,d3
0001EFE8 51CF FFC0                  		dbf	d7,loc_1B19E
0001EFEC                            
0001EFEC 3A1F                       		move.w	(sp)+,d5
0001EFEE 41F9 00FF 0000             		lea	($FF0000).l,a0
0001EFF4 7000                       		moveq	#0,d0
0001EFF6 3038 F704                  		move.w	(v_screenposy).w,d0
0001EFFA 80FC 0018                  		divu.w	#$18,d0
0001EFFE C0FC 0080                  		mulu.w	#$80,d0
0001F002 D1C0                       		adda.l	d0,a0
0001F004 7000                       		moveq	#0,d0
0001F006 3038 F700                  		move.w	(v_screenposx).w,d0
0001F00A 80FC 0018                  		divu.w	#$18,d0
0001F00E D0C0                       		adda.w	d0,a0
0001F010 49F8 8000                  		lea	($FFFF8000).w,a4
0001F014 3E3C 000F                  		move.w	#$F,d7
0001F018                            
0001F018                            loc_1B20C:
0001F018 3C3C 000F                  		move.w	#$F,d6
0001F01C                            
0001F01C                            loc_1B210:
0001F01C 7000                       		moveq	#0,d0
0001F01E 1018                       		move.b	(a0)+,d0
0001F020 6700                       		beq.s	loc_1B268
0001F022 0C00 004E                  		cmpi.b	#$4E,d0
0001F026 6200                       		bhi.s	loc_1B268
0001F028 3614                       		move.w	(a4),d3
0001F02A 0643 0120                  		addi.w	#$120,d3
0001F02E 0C43 0070                  		cmpi.w	#$70,d3
0001F032 6500                       		blo.s	loc_1B268
0001F034 0C43 01D0                  		cmpi.w	#$1D0,d3
0001F038 6400                       		bhs.s	loc_1B268
0001F03A 342C 0002                  		move.w	2(a4),d2
0001F03E 0642 00F0                  		addi.w	#$F0,d2
0001F042 0C42 0070                  		cmpi.w	#$70,d2
0001F046 6500                       		blo.s	loc_1B268
0001F048 0C42 0170                  		cmpi.w	#$170,d2
0001F04C 6400                       		bhs.s	loc_1B268
0001F04E 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001F054 E748                       		lsl.w	#3,d0
0001F056 4BF5 0000                  		lea	(a5,d0.w),a5
0001F05A 225D                       		movea.l	(a5)+,a1
0001F05C 321D                       		move.w	(a5)+,d1
0001F05E D241                       		add.w	d1,d1
0001F060 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001F064 365D                       		movea.w	(a5)+,a3
0001F066 7200                       		moveq	#0,d1
0001F068 1219                       		move.b	(a1)+,d1
0001F06A 5301                       		subq.b	#1,d1
0001F06C 6B00                       		bmi.s	loc_1B268
0001F06E 4EB9 0000 F7F0             		jsr	(sub_D762).l
0001F074                            
0001F074                            loc_1B268:
0001F074 584C                       		addq.w	#4,a4
0001F076 51CE FFA4                  		dbf	d6,loc_1B210
0001F07A                            
0001F07A 41E8 0070                  		lea	$70(a0),a0
0001F07E 51CF FF98                  		dbf	d7,loc_1B20C
0001F082                            
0001F082 11C5 F62C                  		move.b	d5,(v_spritecount).w
0001F086 0C05 0050                  		cmpi.b	#$50,d5
0001F08A 6700                       		beq.s	loc_1B288
0001F08C 24BC 0000 0000             		move.l	#0,(a2)
0001F092 4E75                       		rts	
0001F094                            ; ===========================================================================
0001F094                            
0001F094                            loc_1B288:
0001F094 157C 0000 FFFB             		move.b	#0,-5(a2)
0001F09A 4E75                       		rts	
0001F09C                            ; End of function SS_ShowLayout
0001F09C                            
0001F09C                            ; ---------------------------------------------------------------------------
0001F09C                            ; Subroutine to	animate	walls and rings	in the special stage
0001F09C                            ; ---------------------------------------------------------------------------
0001F09C                            
0001F09C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F09C                            
0001F09C                            
0001F09C                            SS_AniWallsRings:
0001F09C 43F9 00FF 400C             		lea	($FF400C).l,a1
0001F0A2 7000                       		moveq	#0,d0
0001F0A4 1038 F780                  		move.b	(v_ssangle).w,d0
0001F0A8 E408                       		lsr.b	#2,d0
0001F0AA 0240 000F                  		andi.w	#$F,d0
0001F0AE 7223                       		moveq	#$23,d1
0001F0B0                            
0001F0B0                            loc_1B2A4:
0001F0B0 3280                       		move.w	d0,(a1)
0001F0B2 5049                       		addq.w	#8,a1
0001F0B4 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001F0B8                            
0001F0B8 43F9 00FF 4005             		lea	($FF4005).l,a1
0001F0BE 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
0001F0C2 6A00                       		bpl.s	loc_1B2C8
0001F0C4 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0001F0CA 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
0001F0CE 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0001F0D4                            
0001F0D4                            loc_1B2C8:
0001F0D4 1378 FEC3 01D0             		move.b	(v_ani1_frame).w,$1D0(a1)
0001F0DA 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0001F0DE 6A00                       		bpl.s	loc_1B2E4
0001F0E0 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
0001F0E6 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
0001F0EA 0238 0001 FEC5             		andi.b	#1,(v_ani2_frame).w
0001F0F0                            
0001F0F0                            loc_1B2E4:
0001F0F0 1038 FEC5                  		move.b	(v_ani2_frame).w,d0
0001F0F4 1340 0138                  		move.b	d0,$138(a1)
0001F0F8 1340 0160                  		move.b	d0,$160(a1)
0001F0FC 1340 0148                  		move.b	d0,$148(a1)
0001F100 1340 0150                  		move.b	d0,$150(a1)
0001F104 1340 01D8                  		move.b	d0,$1D8(a1)
0001F108 1340 01E0                  		move.b	d0,$1E0(a1)
0001F10C 1340 01E8                  		move.b	d0,$1E8(a1)
0001F110 1340 01F0                  		move.b	d0,$1F0(a1)
0001F114 1340 01F8                  		move.b	d0,$1F8(a1)
0001F118 1340 0200                  		move.b	d0,$200(a1)
0001F11C 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
0001F120 6A00                       		bpl.s	loc_1B326
0001F122 11FC 0004 FEC6             		move.b	#4,(v_ani3_time).w
0001F128 5238 FEC7                  		addq.b	#1,(v_ani3_frame).w
0001F12C 0238 0003 FEC7             		andi.b	#3,(v_ani3_frame).w
0001F132                            
0001F132                            loc_1B326:
0001F132 1038 FEC7                  		move.b	(v_ani3_frame).w,d0
0001F136 1340 0168                  		move.b	d0,$168(a1)
0001F13A 1340 0170                  		move.b	d0,$170(a1)
0001F13E 1340 0178                  		move.b	d0,$178(a1)
0001F142 1340 0180                  		move.b	d0,$180(a1)
0001F146 5338 FEC0                  		subq.b	#1,(v_ani0_time).w
0001F14A 6A00                       		bpl.s	loc_1B350
0001F14C 11FC 0007 FEC0             		move.b	#7,(v_ani0_time).w
0001F152 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w
0001F156 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w
0001F15C                            
0001F15C                            loc_1B350:
0001F15C 43F9 00FF 4016             		lea	($FF4016).l,a1
0001F162 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001F168 7000                       		moveq	#0,d0
0001F16A 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0001F16E D040                       		add.w	d0,d0
0001F170 41F0 0000                  		lea	(a0,d0.w),a0
0001F174 3290                       		move.w	(a0),(a1)
0001F176 3368 0002 0008             		move.w	2(a0),8(a1)
0001F17C 3368 0004 0010             		move.w	4(a0),$10(a1)
0001F182 3368 0006 0018             		move.w	6(a0),$18(a1)
0001F188 3368 0008 0020             		move.w	8(a0),$20(a1)
0001F18E 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001F194 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001F19A 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001F1A0 D0FC 0020                  		adda.w	#$20,a0
0001F1A4 D2FC 0048                  		adda.w	#$48,a1
0001F1A8 3290                       		move.w	(a0),(a1)
0001F1AA 3368 0002 0008             		move.w	2(a0),8(a1)
0001F1B0 3368 0004 0010             		move.w	4(a0),$10(a1)
0001F1B6 3368 0006 0018             		move.w	6(a0),$18(a1)
0001F1BC 3368 0008 0020             		move.w	8(a0),$20(a1)
0001F1C2 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001F1C8 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001F1CE 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001F1D4 D0FC 0020                  		adda.w	#$20,a0
0001F1D8 D2FC 0048                  		adda.w	#$48,a1
0001F1DC 3290                       		move.w	(a0),(a1)
0001F1DE 3368 0002 0008             		move.w	2(a0),8(a1)
0001F1E4 3368 0004 0010             		move.w	4(a0),$10(a1)
0001F1EA 3368 0006 0018             		move.w	6(a0),$18(a1)
0001F1F0 3368 0008 0020             		move.w	8(a0),$20(a1)
0001F1F6 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001F1FC 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001F202 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001F208 D0FC 0020                  		adda.w	#$20,a0
0001F20C D2FC 0048                  		adda.w	#$48,a1
0001F210 3290                       		move.w	(a0),(a1)
0001F212 3368 0002 0008             		move.w	2(a0),8(a1)
0001F218 3368 0004 0010             		move.w	4(a0),$10(a1)
0001F21E 3368 0006 0018             		move.w	6(a0),$18(a1)
0001F224 3368 0008 0020             		move.w	8(a0),$20(a1)
0001F22A 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001F230 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001F236 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001F23C D0FC 0020                  		adda.w	#$20,a0
0001F240 D2FC 0048                  		adda.w	#$48,a1
0001F244 4E75                       		rts	
0001F246                            ; End of function SS_AniWallsRings
0001F246                            
0001F246                            ; ===========================================================================
0001F246 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001F256 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001F266 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001F276 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001F286 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001F296 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001F2A6 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001F2B6 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001F2C6                            ; ---------------------------------------------------------------------------
0001F2C6                            ; Subroutine to	remove items when you collect them in the special stage
0001F2C6                            ; ---------------------------------------------------------------------------
0001F2C6                            
0001F2C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F2C6                            
0001F2C6                            
0001F2C6                            SS_RemoveCollectedItem:
0001F2C6 45F9 00FF 4400             		lea	($FF4400).l,a2
0001F2CC 303C 001F                  		move.w	#$1F,d0
0001F2D0                            
0001F2D0                            loc_1B4C4:
0001F2D0 4A12                       		tst.b	(a2)
0001F2D2 6700                       		beq.s	locret_1B4CE
0001F2D4 504A                       		addq.w	#8,a2
0001F2D6 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001F2DA                            
0001F2DA                            locret_1B4CE:
0001F2DA 4E75                       		rts	
0001F2DC                            ; End of function SS_RemoveCollectedItem
0001F2DC                            
0001F2DC                            ; ---------------------------------------------------------------------------
0001F2DC                            ; Subroutine to	animate	special	stage items when you touch them
0001F2DC                            ; ---------------------------------------------------------------------------
0001F2DC                            
0001F2DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F2DC                            
0001F2DC                            
0001F2DC                            SS_AniItems:
0001F2DC 41F9 00FF 4400             		lea	($FF4400).l,a0
0001F2E2 3E3C 001F                  		move.w	#$1F,d7
0001F2E6                            
0001F2E6                            loc_1B4DA:
0001F2E6 7000                       		moveq	#0,d0
0001F2E8 1010                       		move.b	(a0),d0
0001F2EA 6700                       		beq.s	loc_1B4E8
0001F2EC E548                       		lsl.w	#2,d0
0001F2EE 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001F2F2 4E91                       		jsr	(a1)
0001F2F4                            
0001F2F4                            loc_1B4E8:
0001F2F4 5048                       		addq.w	#8,a0
0001F2F6                            
0001F2F6                            loc_1B4EA:
0001F2F6 51CF FFEE                  		dbf	d7,loc_1B4DA
0001F2FA                            
0001F2FA 4E75                       		rts	
0001F2FC                            ; End of function SS_AniItems
0001F2FC                            
0001F2FC                            ; ===========================================================================
0001F2FC 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001F300 0000 0000                  		dc.l SS_AniBumper
0001F304 0000 0000                  		dc.l SS_Ani1Up
0001F308 0000 0000                  		dc.l SS_AniReverse
0001F30C 0000 0000                  		dc.l SS_AniEmeraldSparks
0001F310 0000 0000                  		dc.l SS_AniGlassBlock
0001F314                            ; ===========================================================================
0001F314                            
0001F314                            SS_AniRingSparks:
0001F314 5328 0002                  		subq.b	#1,2(a0)
0001F318 6A00                       		bpl.s	locret_1B530
0001F31A 117C 0005 0002             		move.b	#5,2(a0)
0001F320 7000                       		moveq	#0,d0
0001F322 1028 0003                  		move.b	3(a0),d0
0001F326 5228 0003                  		addq.b	#1,3(a0)
0001F32A 2268 0004                  		movea.l	4(a0),a1
0001F32E 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001F332 1280                       		move.b	d0,(a1)
0001F334 6600                       		bne.s	locret_1B530
0001F336 4290                       		clr.l	(a0)
0001F338 42A8 0004                  		clr.l	4(a0)
0001F33C                            
0001F33C                            locret_1B530:
0001F33C 4E75                       		rts	
0001F33E                            ; ===========================================================================
0001F33E 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001F344                            ; ===========================================================================
0001F344                            
0001F344                            SS_AniBumper:
0001F344 5328 0002                  		subq.b	#1,2(a0)
0001F348 6A00                       		bpl.s	locret_1B566
0001F34A 117C 0007 0002             		move.b	#7,2(a0)
0001F350 7000                       		moveq	#0,d0
0001F352 1028 0003                  		move.b	3(a0),d0
0001F356 5228 0003                  		addq.b	#1,3(a0)
0001F35A 2268 0004                  		movea.l	4(a0),a1
0001F35E 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001F362 6600                       		bne.s	loc_1B564
0001F364 4290                       		clr.l	(a0)
0001F366 42A8 0004                  		clr.l	4(a0)
0001F36A 12BC 0025                  		move.b	#$25,(a1)
0001F36E 4E75                       		rts	
0001F370                            ; ===========================================================================
0001F370                            
0001F370                            loc_1B564:
0001F370 1280                       		move.b	d0,(a1)
0001F372                            
0001F372                            locret_1B566:
0001F372 4E75                       		rts	
0001F374                            ; ===========================================================================
0001F374 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001F37A                            ; ===========================================================================
0001F37A                            
0001F37A                            SS_Ani1Up:
0001F37A 5328 0002                  		subq.b	#1,2(a0)
0001F37E 6A00                       		bpl.s	locret_1B596
0001F380 117C 0005 0002             		move.b	#5,2(a0)
0001F386 7000                       		moveq	#0,d0
0001F388 1028 0003                  		move.b	3(a0),d0
0001F38C 5228 0003                  		addq.b	#1,3(a0)
0001F390 2268 0004                  		movea.l	4(a0),a1
0001F394 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001F398 1280                       		move.b	d0,(a1)
0001F39A 6600                       		bne.s	locret_1B596
0001F39C 4290                       		clr.l	(a0)
0001F39E 42A8 0004                  		clr.l	4(a0)
0001F3A2                            
0001F3A2                            locret_1B596:
0001F3A2 4E75                       		rts	
0001F3A4                            ; ===========================================================================
0001F3A4 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001F3AA                            ; ===========================================================================
0001F3AA                            
0001F3AA                            SS_AniReverse:
0001F3AA 5328 0002                  		subq.b	#1,2(a0)
0001F3AE 6A00                       		bpl.s	locret_1B5CC
0001F3B0 117C 0007 0002             		move.b	#7,2(a0)
0001F3B6 7000                       		moveq	#0,d0
0001F3B8 1028 0003                  		move.b	3(a0),d0
0001F3BC 5228 0003                  		addq.b	#1,3(a0)
0001F3C0 2268 0004                  		movea.l	4(a0),a1
0001F3C4 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001F3C8 6600                       		bne.s	loc_1B5CA
0001F3CA 4290                       		clr.l	(a0)
0001F3CC 42A8 0004                  		clr.l	4(a0)
0001F3D0 12BC 002B                  		move.b	#$2B,(a1)
0001F3D4 4E75                       		rts	
0001F3D6                            ; ===========================================================================
0001F3D6                            
0001F3D6                            loc_1B5CA:
0001F3D6 1280                       		move.b	d0,(a1)
0001F3D8                            
0001F3D8                            locret_1B5CC:
0001F3D8 4E75                       		rts	
0001F3DA                            ; ===========================================================================
0001F3DA 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001F3E0                            ; ===========================================================================
0001F3E0                            
0001F3E0                            SS_AniEmeraldSparks:
0001F3E0 5328 0002                  		subq.b	#1,2(a0)
0001F3E4 6A00                       		bpl.s	locret_1B60C
0001F3E6 117C 0005 0002             		move.b	#5,2(a0)
0001F3EC 7000                       		moveq	#0,d0
0001F3EE 1028 0003                  		move.b	3(a0),d0
0001F3F2 5228 0003                  		addq.b	#1,3(a0)
0001F3F6 2268 0004                  		movea.l	4(a0),a1
0001F3FA 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001F3FE 1280                       		move.b	d0,(a1)
0001F400 6600                       		bne.s	locret_1B60C
0001F402 4290                       		clr.l	(a0)
0001F404 42A8 0004                  		clr.l	4(a0)
0001F408 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001F418                            
0001F418                            locret_1B60C:
0001F418 4E75                       		rts	
0001F41A                            ; ===========================================================================
0001F41A 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001F420                            ; ===========================================================================
0001F420                            
0001F420                            SS_AniGlassBlock:
0001F420 5328 0002                  		subq.b	#1,2(a0)
0001F424 6A00                       		bpl.s	locret_1B640
0001F426 117C 0001 0002             		move.b	#1,2(a0)
0001F42C 7000                       		moveq	#0,d0
0001F42E 1028 0003                  		move.b	3(a0),d0
0001F432 5228 0003                  		addq.b	#1,3(a0)
0001F436 2268 0004                  		movea.l	4(a0),a1
0001F43A 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001F43E 1280                       		move.b	d0,(a1)
0001F440 6600                       		bne.s	locret_1B640
0001F442 12A8 0004                  		move.b	4(a0),(a1)
0001F446 4290                       		clr.l	(a0)
0001F448 42A8 0004                  		clr.l	4(a0)
0001F44C                            
0001F44C                            locret_1B640:
0001F44C 4E75                       		rts	
0001F44E                            ; ===========================================================================
0001F44E 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001F458                            
0001F458                            ; ---------------------------------------------------------------------------
0001F458                            ; Special stage	layout pointers
0001F458                            ; ---------------------------------------------------------------------------
0001F458                            SS_LayoutIndex:
0001F458 0000 0000                  		dc.l SS_1
0001F45C 0000 0000                  		dc.l SS_2
0001F460 0000 0000                  		dc.l SS_3
0001F464 0000 0000                  		dc.l SS_4
0001F468 0000 0000                  		dc.l SS_5
0001F46C 0000 0000                  		dc.l SS_6
0001F470                            		even
0001F470                            
0001F470                            ; ---------------------------------------------------------------------------
0001F470                            ; Special stage start locations
0001F470                            ; ---------------------------------------------------------------------------
0001F470                            SS_StartLoc:	include	"_inc\Start Location Array - Special Stages.asm"
0001F470                            ; ---------------------------------------------------------------------------
0001F470                            ; Special stage start locations
0001F470                            ; ---------------------------------------------------------------------------
0001F470                            
0001F470                            		incbin	"startpos\ss1.bin"
0001F474                            		incbin	"startpos\ss2.bin"
0001F478                            		incbin	"startpos\ss3.bin"
0001F47C                            		incbin	"startpos\ss4.bin"
0001F480                            		incbin	"startpos\ss5.bin"
0001F484                            		incbin	"startpos\ss6.bin"
0001F488                            		even
0001F488                            		even
0001F488                            
0001F488                            ; ---------------------------------------------------------------------------
0001F488                            ; Subroutine to	load special stage layout
0001F488                            ; ---------------------------------------------------------------------------
0001F488                            
0001F488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F488                            
0001F488                            
0001F488                            SS_Load:
0001F488 7000                       		moveq	#0,d0
0001F48A 1038 FE16                  		move.b	(v_lastspecial).w,d0 ; load number of last special stage entered
0001F48E 5238 FE16                  		addq.b	#1,(v_lastspecial).w
0001F492 0C38 0006 FE16             		cmpi.b	#6,(v_lastspecial).w
0001F498 6500                       		blo.s	SS_ChkEmldNum
0001F49A 11FC 0000 FE16             		move.b	#0,(v_lastspecial).w ; reset if higher than 6
0001F4A0                            
0001F4A0                            SS_ChkEmldNum:
0001F4A0 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all emeralds?
0001F4A6 6700                       		beq.s	SS_LoadData	; if yes, branch
0001F4A8 7200                       		moveq	#0,d1
0001F4AA 1238 FE57                  		move.b	(v_emeralds).w,d1
0001F4AE 5301                       		subq.b	#1,d1
0001F4B0 6500                       		blo.s	SS_LoadData
0001F4B2 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0001F4B6                            
0001F4B6                            SS_ChkEmldLoop:	
0001F4B6 B033 1000                  		cmp.b	(a3,d1.w),d0
0001F4BA 6600                       		bne.s	SS_ChkEmldRepeat
0001F4BC 60CA                       		bra.s	SS_Load
0001F4BE                            ; ===========================================================================
0001F4BE                            
0001F4BE                            SS_ChkEmldRepeat:
0001F4BE 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001F4C2                            
0001F4C2                            SS_LoadData:
0001F4C2 E548                       		lsl.w	#2,d0
0001F4C4 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001F4C8 31D9 D008                  		move.w	(a1)+,(v_player+obX).w
0001F4CC 31D9 D00C                  		move.w	(a1)+,(v_player+obY).w
0001F4D0 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001F4D4 43F9 00FF 4000             		lea	($FF4000).l,a1
0001F4DA 303C 0000                  		move.w	#0,d0
0001F4DE 4EB9 0000 18D8             		jsr	(EniDec).l
0001F4E4 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F4EA 303C 0FFF                  		move.w	#$FFF,d0
0001F4EE                            
0001F4EE                            SS_ClrRAM3:
0001F4EE 4299                       		clr.l	(a1)+
0001F4F0 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001F4F4                            
0001F4F4 43F9 00FF 1020             		lea	($FF1020).l,a1
0001F4FA 41F9 00FF 4000             		lea	($FF4000).l,a0
0001F500 723F                       		moveq	#$3F,d1
0001F502                            
0001F502                            loc_1B6F6:
0001F502 743F                       		moveq	#$3F,d2
0001F504                            
0001F504                            loc_1B6F8:
0001F504 12D8                       		move.b	(a0)+,(a1)+
0001F506 51CA FFFC                  		dbf	d2,loc_1B6F8
0001F50A                            
0001F50A 43E9 0040                  		lea	$40(a1),a1
0001F50E 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001F512                            
0001F512 43F9 00FF 4008             		lea	($FF4008).l,a1
0001F518 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001F51E 724D                       		moveq	#$4D,d1
0001F520                            
0001F520                            loc_1B714:
0001F520 22D8                       		move.l	(a0)+,(a1)+
0001F522 32FC 0000                  		move.w	#0,(a1)+
0001F526 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001F52C 32D8                       		move.w	(a0)+,(a1)+
0001F52E 51C9 FFF0                  		dbf	d1,loc_1B714
0001F532                            
0001F532 43F9 00FF 4400             		lea	($FF4400).l,a1
0001F538 323C 003F                  		move.w	#$3F,d1
0001F53C                            
0001F53C                            loc_1B730:
0001F53C                            
0001F53C 4299                       		clr.l	(a1)+
0001F53E 51C9 FFFC                  		dbf	d1,loc_1B730
0001F542                            
0001F542 4E75                       		rts	
0001F544                            ; End of function SS_Load
0001F544                            
0001F544                            ; ===========================================================================
0001F544                            
0001F544                            SS_MapIndex:
0001F544                            		include	"_inc\Special Stage Mappings & VRAM Pointers.asm"
0001F544                            ; ---------------------------------------------------------------------------
0001F544                            ; Special stage	mappings and VRAM pointers
0001F544                            ; ---------------------------------------------------------------------------
0001F544 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001F548 0142                       	dc.w $142		; VRAM setting
0001F54A 0000 0000                  	dc.l Map_SSWalls
0001F54E 0142                       	dc.w $142
0001F550 0000 0000                  	dc.l Map_SSWalls
0001F554 0142                       	dc.w $142
0001F556 0000 0000                  	dc.l Map_SSWalls
0001F55A 0142                       	dc.w $142
0001F55C 0000 0000                  	dc.l Map_SSWalls
0001F560 0142                       	dc.w $142
0001F562 0000 0000                  	dc.l Map_SSWalls
0001F566 0142                       	dc.w $142
0001F568 0000 0000                  	dc.l Map_SSWalls
0001F56C 0142                       	dc.w $142
0001F56E 0000 0000                  	dc.l Map_SSWalls
0001F572 0142                       	dc.w $142
0001F574 0000 0000                  	dc.l Map_SSWalls
0001F578 0142                       	dc.w $142
0001F57A 0000 0000                  	dc.l Map_SSWalls
0001F57E 2142                       	dc.w $2142
0001F580 0000 0000                  	dc.l Map_SSWalls
0001F584 2142                       	dc.w $2142
0001F586 0000 0000                  	dc.l Map_SSWalls
0001F58A 2142                       	dc.w $2142
0001F58C 0000 0000                  	dc.l Map_SSWalls
0001F590 2142                       	dc.w $2142
0001F592 0000 0000                  	dc.l Map_SSWalls
0001F596 2142                       	dc.w $2142
0001F598 0000 0000                  	dc.l Map_SSWalls
0001F59C 2142                       	dc.w $2142
0001F59E 0000 0000                  	dc.l Map_SSWalls
0001F5A2 2142                       	dc.w $2142
0001F5A4 0000 0000                  	dc.l Map_SSWalls
0001F5A8 2142                       	dc.w $2142
0001F5AA 0000 0000                  	dc.l Map_SSWalls
0001F5AE 2142                       	dc.w $2142
0001F5B0 0000 0000                  	dc.l Map_SSWalls
0001F5B4 4142                       	dc.w $4142
0001F5B6 0000 0000                  	dc.l Map_SSWalls
0001F5BA 4142                       	dc.w $4142
0001F5BC 0000 0000                  	dc.l Map_SSWalls
0001F5C0 4142                       	dc.w $4142
0001F5C2 0000 0000                  	dc.l Map_SSWalls
0001F5C6 4142                       	dc.w $4142
0001F5C8 0000 0000                  	dc.l Map_SSWalls
0001F5CC 4142                       	dc.w $4142
0001F5CE 0000 0000                  	dc.l Map_SSWalls
0001F5D2 4142                       	dc.w $4142
0001F5D4 0000 0000                  	dc.l Map_SSWalls
0001F5D8 4142                       	dc.w $4142
0001F5DA 0000 0000                  	dc.l Map_SSWalls
0001F5DE 4142                       	dc.w $4142
0001F5E0 0000 0000                  	dc.l Map_SSWalls
0001F5E4 4142                       	dc.w $4142
0001F5E6 0000 0000                  	dc.l Map_SSWalls
0001F5EA 6142                       	dc.w $6142
0001F5EC 0000 0000                  	dc.l Map_SSWalls
0001F5F0 6142                       	dc.w $6142
0001F5F2 0000 0000                  	dc.l Map_SSWalls
0001F5F6 6142                       	dc.w $6142
0001F5F8 0000 0000                  	dc.l Map_SSWalls
0001F5FC 6142                       	dc.w $6142
0001F5FE 0000 0000                  	dc.l Map_SSWalls
0001F602 6142                       	dc.w $6142
0001F604 0000 0000                  	dc.l Map_SSWalls
0001F608 6142                       	dc.w $6142
0001F60A 0000 0000                  	dc.l Map_SSWalls
0001F60E 6142                       	dc.w $6142
0001F610 0000 0000                  	dc.l Map_SSWalls
0001F614 6142                       	dc.w $6142
0001F616 0000 0000                  	dc.l Map_SSWalls
0001F61A 6142                       	dc.w $6142
0001F61C 0001 0BC2                  	dc.l Map_Bump
0001F620 023B                       	dc.w $23B
0001F622 0000 0000                  	dc.l Map_SS_R
0001F626 0570                       	dc.w $570
0001F628 0000 0000                  	dc.l Map_SS_R
0001F62C 0251                       	dc.w $251
0001F62E 0000 0000                  	dc.l Map_SS_R
0001F632 0370                       	dc.w $370
0001F634 0000 0000                  	dc.l Map_SS_Up
0001F638 0263                       	dc.w $263
0001F63A 0000 0000                  	dc.l Map_SS_Down
0001F63E 0263                       	dc.w $263
0001F640 0000 0000                  	dc.l Map_SS_R
0001F644 22F0                       	dc.w $22F0
0001F646 0000 0000                  	dc.l Map_SS_Glass
0001F64A 0470                       	dc.w $470
0001F64C 0000 0000                  	dc.l Map_SS_Glass
0001F650 05F0                       	dc.w $5F0
0001F652 0000 0000                  	dc.l Map_SS_Glass
0001F656 65F0                       	dc.w $65F0
0001F658 0000 0000                  	dc.l Map_SS_Glass
0001F65C 25F0                       	dc.w $25F0
0001F65E 0000 0000                  	dc.l Map_SS_Glass
0001F662 45F0                       	dc.w $45F0
0001F664 0000 0000                  	dc.l Map_SS_R
0001F668 02F0                       	dc.w $2F0
0001F66A 0101 0BC2                  	dc.l Map_Bump+$1000000	; add frame no.	* $1000000
0001F66E 023B                       	dc.w $23B
0001F670 0201 0BC2                  	dc.l Map_Bump+$2000000
0001F674 023B                       	dc.w $23B
0001F676 0000 0000                  	dc.l Map_SS_R
0001F67A 0797                       	dc.w $797
0001F67C 0000 0000                  	dc.l Map_SS_R
0001F680 07A0                       	dc.w $7A0
0001F682 0000 0000                  	dc.l Map_SS_R
0001F686 07A9                       	dc.w $7A9
0001F688 0000 0000                  	dc.l Map_SS_R
0001F68C 0797                       	dc.w $797
0001F68E 0000 0000                  	dc.l Map_SS_R
0001F692 07A0                       	dc.w $7A0
0001F694 0000 0000                  	dc.l Map_SS_R
0001F698 07A9                       	dc.w $7A9
0001F69A 0000 BB86                  	dc.l Map_Ring
0001F69E 2798                       	dc.w $2798
0001F6A0 0000 0000                  	dc.l Map_SS_Chaos3
0001F6A4 0770                       	dc.w $770
0001F6A6 0000 0000                  	dc.l Map_SS_Chaos3
0001F6AA 2770                       	dc.w $2770
0001F6AC 0000 0000                  	dc.l Map_SS_Chaos3
0001F6B0 4770                       	dc.w $4770
0001F6B2 0000 0000                  	dc.l Map_SS_Chaos3
0001F6B6 6770                       	dc.w $6770
0001F6B8 0000 0000                  	dc.l Map_SS_Chaos1
0001F6BC 0770                       	dc.w $770
0001F6BE 0000 0000                  	dc.l Map_SS_Chaos2
0001F6C2 0770                       	dc.w $770
0001F6C4 0000 0000                  	dc.l Map_SS_R
0001F6C8 04F0                       	dc.w $4F0
0001F6CA 0400 BB86                  	dc.l Map_Ring+$4000000
0001F6CE 2798                       	dc.w $2798
0001F6D0 0500 BB86                  	dc.l Map_Ring+$5000000
0001F6D4 2798                       	dc.w $2798
0001F6D6 0600 BB86                  	dc.l Map_Ring+$6000000
0001F6DA 2798                       	dc.w $2798
0001F6DC 0700 BB86                  	dc.l Map_Ring+$7000000
0001F6E0 2798                       	dc.w $2798
0001F6E2 0000 0000                  	dc.l Map_SS_Glass
0001F6E6 23F0                       	dc.w $23F0
0001F6E8 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001F6EC 23F0                       	dc.w $23F0
0001F6EE 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001F6F2 23F0                       	dc.w $23F0
0001F6F4 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001F6F8 23F0                       	dc.w $23F0
0001F6FA 0000 0000                  	dc.l Map_SS_R+$2000000
0001F6FE 04F0                       	dc.w $4F0
0001F700 0000 0000                  	dc.l Map_SS_Glass
0001F704 05F0                       	dc.w $5F0
0001F706 0000 0000                  	dc.l Map_SS_Glass
0001F70A 65F0                       	dc.w $65F0
0001F70C 0000 0000                  	dc.l Map_SS_Glass
0001F710 25F0                       	dc.w $25F0
0001F712 0000 0000                  	dc.l Map_SS_Glass
0001F716 45F0                       	dc.w $45F0
0001F716 45F0                       	dc.w $45F0
0001F718                            
0001F718                            Map_SS_R:	include	"_maps\SS R Block.asm"
0001F718                            ; ---------------------------------------------------------------------------
0001F718                            ; Sprite mappings - special stage "R" block
0001F718                            ; ---------------------------------------------------------------------------
0001F718                            Map_SS_R_internal:
0001F718 0000                       		dc.w byte_1B912-Map_SS_R_internal
0001F71A 0000                       		dc.w byte_1B918-Map_SS_R_internal
0001F71C 0000                       		dc.w byte_1B91E-Map_SS_R_internal
0001F71E 01                         byte_1B912:	dc.b 1
0001F71F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001F724 01                         byte_1B918:	dc.b 1
0001F725 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001F72A 00                         byte_1B91E:	dc.b 0
0001F72C 00                         		even
0001F72C 00                         		even
0001F72C                            Map_SS_Glass:	include	"_maps\SS Glass Block.asm"
0001F72C                            ; ---------------------------------------------------------------------------
0001F72C                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001F72C                            ; ---------------------------------------------------------------------------
0001F72C                            Map_SS_Glass_internal:
0001F72C 0000                       		dc.w byte_1B928-Map_SS_Glass_internal
0001F72E 0000                       		dc.w byte_1B92E-Map_SS_Glass_internal
0001F730 0000                       		dc.w byte_1B934-Map_SS_Glass_internal
0001F732 0000                       		dc.w byte_1B93A-Map_SS_Glass_internal
0001F734 01                         byte_1B928:	dc.b 1
0001F735 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001F73A 01                         byte_1B92E:	dc.b 1
0001F73B F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001F740 01                         byte_1B934:	dc.b 1
0001F741 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001F746 01                         byte_1B93A:	dc.b 1
0001F747 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001F74C                            		even
0001F74C                            		even
0001F74C                            Map_SS_Up:	include	"_maps\SS UP Block.asm"
0001F74C                            ; ---------------------------------------------------------------------------
0001F74C                            ; Sprite mappings - special stage "UP" block
0001F74C                            ; ---------------------------------------------------------------------------
0001F74C                            Map_SS_Up_internal:
0001F74C 0000                       		dc.w byte_1B944-Map_SS_Up_internal
0001F74E 0000                       		dc.w byte_1B94A-Map_SS_Up_internal
0001F750 01                         byte_1B944:	dc.b 1
0001F751 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001F756 01                         byte_1B94A:	dc.b 1
0001F757 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001F75C                            		even
0001F75C                            		even
0001F75C                            Map_SS_Down:	include	"_maps\SS DOWN Block.asm"
0001F75C                            ; ---------------------------------------------------------------------------
0001F75C                            ; Sprite mappings - special stage "DOWN" block
0001F75C                            ; ---------------------------------------------------------------------------
0001F75C                            Map_SS_Down_internal:
0001F75C 0000                       		dc.w byte_1B954-Map_SS_Down_internal
0001F75E 0000                       		dc.w byte_1B95A-Map_SS_Down_internal
0001F760 01                         byte_1B954:	dc.b 1
0001F761 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001F766 01                         byte_1B95A:	dc.b 1
0001F767 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001F76C                            		even
0001F76C                            		even
0001F76C                            		include	"_maps\SS Chaos Emeralds.asm"
0001F76C                            ; ---------------------------------------------------------------------------
0001F76C                            ; Sprite mappings - special stage chaos	emeralds
0001F76C                            ; ---------------------------------------------------------------------------
0001F76C 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001F76E 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001F770 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001F772 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001F774 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001F776 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001F778 01                         byte_1B96C:	dc.b 1
0001F779 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001F77E 01                         byte_1B972:	dc.b 1
0001F77F F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0001F784 01                         byte_1B978:	dc.b 1
0001F785 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001F78A 01                         byte_1B97E:	dc.b 1
0001F78B F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001F790                            		even
0001F790                            		even
0001F790                            
0001F790                            		include	"_incObj\09 Sonic in Special Stage.asm"
0001F790                            ; ---------------------------------------------------------------------------
0001F790                            ; Object 09 - Sonic (special stage)
0001F790                            ; ---------------------------------------------------------------------------
0001F790                            
0001F790                            SonicSpecial:
0001F790 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001F794 6700                       		beq.s	Obj09_Normal	; if not, branch
0001F796 6100 0000                  		bsr.w	SS_FixCamera
0001F79A 6000 0000                  		bra.w	DebugMode
0001F79E                            ; ===========================================================================
0001F79E                            
0001F79E                            Obj09_Normal:
0001F79E 7000                       		moveq	#0,d0
0001F7A0 1028 0024                  		move.b	obRoutine(a0),d0
0001F7A4 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001F7A8 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001F7AC                            ; ===========================================================================
0001F7AC 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001F7AE 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001F7B0 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001F7B2 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001F7B4                            ; ===========================================================================
0001F7B4                            
0001F7B4                            Obj09_Main:	; Routine 0
0001F7B4 5428 0024                  		addq.b	#2,obRoutine(a0)
0001F7B8 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001F7BE 117C 0007 0017             		move.b	#7,obWidth(a0)
0001F7C4 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0001F7CC 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001F7D2 117C 0004 0001             		move.b	#4,obRender(a0)
0001F7D8 317C 0000 0018             		move.w	#0,obPriority(a0)
0001F7DE 117C 0002 001C             		move.b	#id_Roll,obAnim(a0)
0001F7E4 08E8 0002 0022             		bset	#2,obStatus(a0)
0001F7EA 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F7F0                            
0001F7F0                            Obj09_ChkDebug:	; Routine 2
0001F7F0 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat enabled?
0001F7F4 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001F7F6 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0001F7FC 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001F7FE 31FC 0001 FE08             		move.w	#1,(v_debuguse).w ; change Sonic into a ring
0001F804                            
0001F804                            Obj09_NoDebug:
0001F804 117C 0000 0030             		move.b	#0,$30(a0)
0001F80A 7000                       		moveq	#0,d0
0001F80C 1028 0022                  		move.b	obStatus(a0),d0
0001F810 0240 0002                  		andi.w	#2,d0
0001F814 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001F818 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001F81C 4EB9 0001 6CAE             		jsr	(Sonic_LoadGfx).l
0001F822 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001F828                            ; ===========================================================================
0001F828 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001F82A 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001F82C                            ; ===========================================================================
0001F82C                            
0001F82C                            Obj09_OnWall:
0001F82C 6100 0000                  		bsr.w	Obj09_Jump
0001F830 6100 0000                  		bsr.w	Obj09_Move
0001F834 6100 0000                  		bsr.w	Obj09_Fall
0001F838 6000                       		bra.s	Obj09_Display
0001F83A                            ; ===========================================================================
0001F83A                            
0001F83A                            Obj09_InAir:
0001F83A 6100 0000                  		bsr.w	nullsub_2
0001F83E 6100 0000                  		bsr.w	Obj09_Move
0001F842 6100 0000                  		bsr.w	Obj09_Fall
0001F846                            
0001F846                            Obj09_Display:
0001F846 6100 0000                  		bsr.w	Obj09_ChkItems
0001F84A 6100 0000                  		bsr.w	Obj09_ChkItems2
0001F84E 4EB9 0000 F56A             		jsr	(SpeedToPos).l
0001F854 6100 0000                  		bsr.w	SS_FixCamera
0001F858 3038 F780                  		move.w	(v_ssangle).w,d0
0001F85C D078 F782                  		add.w	(v_ssrotate).w,d0
0001F860 31C0 F780                  		move.w	d0,(v_ssangle).w
0001F864 4EB9 0001 66C8             		jsr	(Sonic_Animate).l
0001F86A 4E75                       		rts	
0001F86C                            
0001F86C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F86C                            
0001F86C                            
0001F86C                            Obj09_Move:
0001F86C 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001F872 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001F874 6100 0000                  		bsr.w	Obj09_MoveLeft
0001F878                            
0001F878                            Obj09_ChkRight:
0001F878 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
0001F87E 6700                       		beq.s	loc_1BA78	; if not, branch
0001F880 6100 0000                  		bsr.w	Obj09_MoveRight
0001F884                            
0001F884                            loc_1BA78:
0001F884 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001F888 0200 000C                  		andi.b	#btnL+btnR,d0
0001F88C 6600                       		bne.s	loc_1BAA8
0001F88E 3028 0020                  		move.w	obInertia(a0),d0
0001F892 6700                       		beq.s	loc_1BAA8
0001F894 6B00                       		bmi.s	loc_1BA9A
0001F896 0440 000C                  		subi.w	#$C,d0
0001F89A 6400                       		bcc.s	loc_1BA94
0001F89C 303C 0000                  		move.w	#0,d0
0001F8A0                            
0001F8A0                            loc_1BA94:
0001F8A0 3140 0020                  		move.w	d0,obInertia(a0)
0001F8A4 6000                       		bra.s	loc_1BAA8
0001F8A6                            ; ===========================================================================
0001F8A6                            
0001F8A6                            loc_1BA9A:
0001F8A6 0640 000C                  		addi.w	#$C,d0
0001F8AA 6400                       		bcc.s	loc_1BAA4
0001F8AC 303C 0000                  		move.w	#0,d0
0001F8B0                            
0001F8B0                            loc_1BAA4:
0001F8B0 3140 0020                  		move.w	d0,obInertia(a0)
0001F8B4                            
0001F8B4                            loc_1BAA8:
0001F8B4 1038 F780                  		move.b	(v_ssangle).w,d0
0001F8B8 0600 0020                  		addi.b	#$20,d0
0001F8BC 0200 00C0                  		andi.b	#$C0,d0
0001F8C0 4400                       		neg.b	d0
0001F8C2 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001F8C8 C3E8 0020                  		muls.w	obInertia(a0),d1
0001F8CC D3A8 0008                  		add.l	d1,obX(a0)
0001F8D0 C1E8 0020                  		muls.w	obInertia(a0),d0
0001F8D4 D1A8 000C                  		add.l	d0,obY(a0)
0001F8D8 48E7 C000                  		movem.l	d0-d1,-(sp)
0001F8DC 2428 000C                  		move.l	obY(a0),d2
0001F8E0 2628 0008                  		move.l	obX(a0),d3
0001F8E4 6100 0000                  		bsr.w	sub_1BCE8
0001F8E8 6700                       		beq.s	loc_1BAF2
0001F8EA 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001F8EE 93A8 0008                  		sub.l	d1,obX(a0)
0001F8F2 91A8 000C                  		sub.l	d0,obY(a0)
0001F8F6 317C 0000 0020             		move.w	#0,obInertia(a0)
0001F8FC 4E75                       		rts	
0001F8FE                            ; ===========================================================================
0001F8FE                            
0001F8FE                            loc_1BAF2:
0001F8FE 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001F902 4E75                       		rts	
0001F904                            ; End of function Obj09_Move
0001F904                            
0001F904                            
0001F904                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F904                            
0001F904                            
0001F904                            Obj09_MoveLeft:
0001F904 08E8 0000 0022             		bset	#0,obStatus(a0)
0001F90A 3028 0020                  		move.w	obInertia(a0),d0
0001F90E 6700                       		beq.s	loc_1BB06
0001F910 6A00                       		bpl.s	loc_1BB1A
0001F912                            
0001F912                            loc_1BB06:
0001F912 0440 000C                  		subi.w	#$C,d0
0001F916 0C40 F800                  		cmpi.w	#-$800,d0
0001F91A 6E00                       		bgt.s	loc_1BB14
0001F91C 303C F800                  		move.w	#-$800,d0
0001F920                            
0001F920                            loc_1BB14:
0001F920 3140 0020                  		move.w	d0,obInertia(a0)
0001F924 4E75                       		rts	
0001F926                            ; ===========================================================================
0001F926                            
0001F926                            loc_1BB1A:
0001F926 0440 0040                  		subi.w	#$40,d0
0001F92A 6400                       		bcc.s	loc_1BB22
0001F92C 4E71                       		nop	
0001F92E                            
0001F92E                            loc_1BB22:
0001F92E 3140 0020                  		move.w	d0,obInertia(a0)
0001F932 4E75                       		rts	
0001F934                            ; End of function Obj09_MoveLeft
0001F934                            
0001F934                            
0001F934                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F934                            
0001F934                            
0001F934                            Obj09_MoveRight:
0001F934 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001F93A 3028 0020                  		move.w	obInertia(a0),d0
0001F93E 6B00                       		bmi.s	loc_1BB48
0001F940 0640 000C                  		addi.w	#$C,d0
0001F944 0C40 0800                  		cmpi.w	#$800,d0
0001F948 6D00                       		blt.s	loc_1BB42
0001F94A 303C 0800                  		move.w	#$800,d0
0001F94E                            
0001F94E                            loc_1BB42:
0001F94E 3140 0020                  		move.w	d0,obInertia(a0)
0001F952 6000                       		bra.s	locret_1BB54
0001F954                            ; ===========================================================================
0001F954                            
0001F954                            loc_1BB48:
0001F954 0640 0040                  		addi.w	#$40,d0
0001F958 6400                       		bcc.s	loc_1BB50
0001F95A 4E71                       		nop	
0001F95C                            
0001F95C                            loc_1BB50:
0001F95C 3140 0020                  		move.w	d0,obInertia(a0)
0001F960                            
0001F960                            locret_1BB54:
0001F960 4E75                       		rts	
0001F962                            ; End of function Obj09_MoveRight
0001F962                            
0001F962                            
0001F962                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F962                            
0001F962                            
0001F962                            Obj09_Jump:
0001F962 1038 F603                  		move.b	(v_jpadpress2).w,d0
0001F966 0200 0070                  		andi.b	#btnABC,d0	; is A,	B or C pressed?
0001F96A 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001F96C 1038 F780                  		move.b	(v_ssangle).w,d0
0001F970 0200 00FC                  		andi.b	#$FC,d0
0001F974 4400                       		neg.b	d0
0001F976 0400 0040                  		subi.b	#$40,d0
0001F97A 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001F980 C3FC 0680                  		muls.w	#$680,d1
0001F984 E081                       		asr.l	#8,d1
0001F986 3141 0010                  		move.w	d1,obVelX(a0)
0001F98A C1FC 0680                  		muls.w	#$680,d0
0001F98E E080                       		asr.l	#8,d0
0001F990 3140 0012                  		move.w	d0,obVelY(a0)
0001F994 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F9A4                            
0001F9A4                            Obj09_NoJump:
0001F9A4 4E75                       		rts	
0001F9A6                            ; End of function Obj09_Jump
0001F9A6                            
0001F9A6                            
0001F9A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F9A6                            
0001F9A6                            
0001F9A6                            nullsub_2:
0001F9A6 4E75                       		rts	
0001F9A8                            ; End of function nullsub_2
0001F9A8                            
0001F9A8                            ; ===========================================================================
0001F9A8                            ; ---------------------------------------------------------------------------
0001F9A8                            ; unused subroutine to limit Sonic's upward vertical speed
0001F9A8                            ; ---------------------------------------------------------------------------
0001F9A8 323C FC00                  		move.w	#-$400,d1
0001F9AC B268 0012                  		cmp.w	obVelY(a0),d1
0001F9B0 6F00                       		ble.s	locret_1BBB4
0001F9B2 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001F9B6 0200 0070                  		andi.b	#btnABC,d0
0001F9BA 6600                       		bne.s	locret_1BBB4
0001F9BC 3141 0012                  		move.w	d1,obVelY(a0)
0001F9C0                            
0001F9C0                            locret_1BBB4:
0001F9C0 4E75                       		rts	
0001F9C2                            ; ---------------------------------------------------------------------------
0001F9C2                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001F9C2                            ; ---------------------------------------------------------------------------
0001F9C2                            
0001F9C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F9C2                            
0001F9C2                            
0001F9C2                            SS_FixCamera:
0001F9C2 3428 000C                  		move.w	obY(a0),d2
0001F9C6 3628 0008                  		move.w	obX(a0),d3
0001F9CA 3038 F700                  		move.w	(v_screenposx).w,d0
0001F9CE 0443 00A0                  		subi.w	#$A0,d3
0001F9D2 6500                       		bcs.s	loc_1BBCE
0001F9D4 9043                       		sub.w	d3,d0
0001F9D6 9178 F700                  		sub.w	d0,(v_screenposx).w
0001F9DA                            
0001F9DA                            loc_1BBCE:
0001F9DA 3038 F704                  		move.w	(v_screenposy).w,d0
0001F9DE 0442 0070                  		subi.w	#$70,d2
0001F9E2 6500                       		bcs.s	locret_1BBDE
0001F9E4 9042                       		sub.w	d2,d0
0001F9E6 9178 F704                  		sub.w	d0,(v_screenposy).w
0001F9EA                            
0001F9EA                            locret_1BBDE:
0001F9EA 4E75                       		rts	
0001F9EC                            ; End of function SS_FixCamera
0001F9EC                            
0001F9EC                            ; ===========================================================================
0001F9EC                            
0001F9EC                            Obj09_ExitStage:
0001F9EC 0678 0040 F782             		addi.w	#$40,(v_ssrotate).w
0001F9F2 0C78 1800 F782             		cmpi.w	#$1800,(v_ssrotate).w
0001F9F8 6600                       		bne.s	loc_1BBF4
0001F9FA 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001FA00                            
0001FA00                            loc_1BBF4:
0001FA00 0C78 3000 F782             		cmpi.w	#$3000,(v_ssrotate).w
0001FA06 6D00                       		blt.s	loc_1BC12
0001FA08 31FC 0000 F782             		move.w	#0,(v_ssrotate).w
0001FA0E 31FC 4000 F780             		move.w	#$4000,(v_ssangle).w
0001FA14 5428 0024                  		addq.b	#2,obRoutine(a0)
0001FA18 317C 003C 0038             		move.w	#$3C,$38(a0)
0001FA1E                            
0001FA1E                            loc_1BC12:
0001FA1E 3038 F780                  		move.w	(v_ssangle).w,d0
0001FA22 D078 F782                  		add.w	(v_ssrotate).w,d0
0001FA26 31C0 F780                  		move.w	d0,(v_ssangle).w
0001FA2A 4EB9 0001 66C8             		jsr	(Sonic_Animate).l
0001FA30 4EB9 0001 6CAE             		jsr	(Sonic_LoadGfx).l
0001FA36 6100 FF8A                  		bsr.w	SS_FixCamera
0001FA3A 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001FA40                            ; ===========================================================================
0001FA40                            
0001FA40                            Obj09_Exit2:
0001FA40 5368 0038                  		subq.w	#1,$38(a0)
0001FA44 6600                       		bne.s	loc_1BC40
0001FA46 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001FA4C                            
0001FA4C                            loc_1BC40:
0001FA4C 4EB9 0001 66C8             		jsr	(Sonic_Animate).l
0001FA52 4EB9 0001 6CAE             		jsr	(Sonic_LoadGfx).l
0001FA58 6100 FF68                  		bsr.w	SS_FixCamera
0001FA5C 4EF9 0000 F57E             		jmp	(DisplaySprite).l
0001FA62                            
0001FA62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FA62                            
0001FA62                            
0001FA62                            Obj09_Fall:
0001FA62 2428 000C                  		move.l	obY(a0),d2
0001FA66 2628 0008                  		move.l	obX(a0),d3
0001FA6A 1038 F780                  		move.b	(v_ssangle).w,d0
0001FA6E 0200 00FC                  		andi.b	#$FC,d0
0001FA72 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001FA78 3828 0010                  		move.w	obVelX(a0),d4
0001FA7C 48C4                       		ext.l	d4
0001FA7E E184                       		asl.l	#8,d4
0001FA80 C1FC 002A                  		muls.w	#$2A,d0
0001FA84 D084                       		add.l	d4,d0
0001FA86 3828 0012                  		move.w	obVelY(a0),d4
0001FA8A 48C4                       		ext.l	d4
0001FA8C E184                       		asl.l	#8,d4
0001FA8E C3FC 002A                  		muls.w	#$2A,d1
0001FA92 D284                       		add.l	d4,d1
0001FA94 D680                       		add.l	d0,d3
0001FA96 6100 0000                  		bsr.w	sub_1BCE8
0001FA9A 6700                       		beq.s	loc_1BCB0
0001FA9C 9680                       		sub.l	d0,d3
0001FA9E 7000                       		moveq	#0,d0
0001FAA0 3140 0010                  		move.w	d0,obVelX(a0)
0001FAA4 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001FAAA D481                       		add.l	d1,d2
0001FAAC 6100 0000                  		bsr.w	sub_1BCE8
0001FAB0 6700                       		beq.s	loc_1BCC6
0001FAB2 9481                       		sub.l	d1,d2
0001FAB4 7200                       		moveq	#0,d1
0001FAB6 3141 0012                  		move.w	d1,obVelY(a0)
0001FABA 4E75                       		rts	
0001FABC                            ; ===========================================================================
0001FABC                            
0001FABC                            loc_1BCB0:
0001FABC D481                       		add.l	d1,d2
0001FABE 6100 0000                  		bsr.w	sub_1BCE8
0001FAC2 6700                       		beq.s	loc_1BCD4
0001FAC4 9481                       		sub.l	d1,d2
0001FAC6 7200                       		moveq	#0,d1
0001FAC8 3141 0012                  		move.w	d1,obVelY(a0)
0001FACC 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001FAD2                            
0001FAD2                            loc_1BCC6:
0001FAD2 E080                       		asr.l	#8,d0
0001FAD4 E081                       		asr.l	#8,d1
0001FAD6 3140 0010                  		move.w	d0,obVelX(a0)
0001FADA 3141 0012                  		move.w	d1,obVelY(a0)
0001FADE 4E75                       		rts	
0001FAE0                            ; ===========================================================================
0001FAE0                            
0001FAE0                            loc_1BCD4:
0001FAE0 E080                       		asr.l	#8,d0
0001FAE2 E081                       		asr.l	#8,d1
0001FAE4 3140 0010                  		move.w	d0,obVelX(a0)
0001FAE8 3141 0012                  		move.w	d1,obVelY(a0)
0001FAEC 08E8 0001 0022             		bset	#1,obStatus(a0)
0001FAF2 4E75                       		rts	
0001FAF4                            ; End of function Obj09_Fall
0001FAF4                            
0001FAF4                            
0001FAF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FAF4                            
0001FAF4                            
0001FAF4                            sub_1BCE8:
0001FAF4 43F9 00FF 0000             		lea	($FF0000).l,a1
0001FAFA 7800                       		moveq	#0,d4
0001FAFC 4842                       		swap	d2
0001FAFE 3802                       		move.w	d2,d4
0001FB00 4842                       		swap	d2
0001FB02 0644 0044                  		addi.w	#$44,d4
0001FB06 88FC 0018                  		divu.w	#$18,d4
0001FB0A C8FC 0080                  		mulu.w	#$80,d4
0001FB0E D3C4                       		adda.l	d4,a1
0001FB10 7800                       		moveq	#0,d4
0001FB12 4843                       		swap	d3
0001FB14 3803                       		move.w	d3,d4
0001FB16 4843                       		swap	d3
0001FB18 0644 0014                  		addi.w	#$14,d4
0001FB1C 88FC 0018                  		divu.w	#$18,d4
0001FB20 D2C4                       		adda.w	d4,a1
0001FB22 7A00                       		moveq	#0,d5
0001FB24 1819                       		move.b	(a1)+,d4
0001FB26 6100                       		bsr.s	sub_1BD30
0001FB28 1819                       		move.b	(a1)+,d4
0001FB2A 6100                       		bsr.s	sub_1BD30
0001FB2C D2FC 007E                  		adda.w	#$7E,a1
0001FB30 1819                       		move.b	(a1)+,d4
0001FB32 6100                       		bsr.s	sub_1BD30
0001FB34 1819                       		move.b	(a1)+,d4
0001FB36 6100                       		bsr.s	sub_1BD30
0001FB38 4A05                       		tst.b	d5
0001FB3A 4E75                       		rts	
0001FB3C                            ; End of function sub_1BCE8
0001FB3C                            
0001FB3C                            
0001FB3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB3C                            
0001FB3C                            
0001FB3C                            sub_1BD30:
0001FB3C 6700                       		beq.s	locret_1BD44
0001FB3E 0C04 0028                  		cmpi.b	#$28,d4
0001FB42 6700                       		beq.s	locret_1BD44
0001FB44 0C04 003A                  		cmpi.b	#$3A,d4
0001FB48 6500                       		bcs.s	loc_1BD46
0001FB4A 0C04 004B                  		cmpi.b	#$4B,d4
0001FB4E 6400                       		bcc.s	loc_1BD46
0001FB50                            
0001FB50                            locret_1BD44:
0001FB50 4E75                       		rts	
0001FB52                            ; ===========================================================================
0001FB52                            
0001FB52                            loc_1BD46:
0001FB52 1144 0030                  		move.b	d4,$30(a0)
0001FB56 2149 0032                  		move.l	a1,$32(a0)
0001FB5A 7AFF                       		moveq	#-1,d5
0001FB5C 4E75                       		rts	
0001FB5E                            ; End of function sub_1BD30
0001FB5E                            
0001FB5E                            
0001FB5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB5E                            
0001FB5E                            
0001FB5E                            Obj09_ChkItems:
0001FB5E 43F9 00FF 0000             		lea	($FF0000).l,a1
0001FB64 7800                       		moveq	#0,d4
0001FB66 3828 000C                  		move.w	obY(a0),d4
0001FB6A 0644 0050                  		addi.w	#$50,d4
0001FB6E 88FC 0018                  		divu.w	#$18,d4
0001FB72 C8FC 0080                  		mulu.w	#$80,d4
0001FB76 D3C4                       		adda.l	d4,a1
0001FB78 7800                       		moveq	#0,d4
0001FB7A 3828 0008                  		move.w	obX(a0),d4
0001FB7E 0644 0020                  		addi.w	#$20,d4
0001FB82 88FC 0018                  		divu.w	#$18,d4
0001FB86 D2C4                       		adda.w	d4,a1
0001FB88 1811                       		move.b	(a1),d4
0001FB8A 6600                       		bne.s	Obj09_ChkCont
0001FB8C 4A28 003A                  		tst.b	$3A(a0)
0001FB90 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001FB94 7800                       		moveq	#0,d4
0001FB96 4E75                       		rts	
0001FB98                            ; ===========================================================================
0001FB98                            
0001FB98                            Obj09_ChkCont:
0001FB98 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001FB9C 6600                       		bne.s	Obj09_Chk1Up
0001FB9E 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001FBA2 6600                       		bne.s	Obj09_GetCont
0001FBA4 14BC 0001                  		move.b	#1,(a2)
0001FBA8 2549 0004                  		move.l	a1,4(a2)
0001FBAC                            
0001FBAC                            Obj09_GetCont:
0001FBAC 4EB9 0000 B6EE             		jsr	(CollectRing).l
0001FBB2 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; check if you have 50 rings
0001FBB8 6500                       		bcs.s	Obj09_NoCont
0001FBBA 08F8 0000 FE1B             		bset	#0,(v_lifecount).w
0001FBC0 6600                       		bne.s	Obj09_NoCont
0001FBC2 5238 FE18                  		addq.b	#1,(v_continues).w ; add 1 to number of continues
0001FBD0                            
0001FBD0                            Obj09_NoCont:
0001FBD0 7800                       		moveq	#0,d4
0001FBD2 4E75                       		rts	
0001FBD4                            ; ===========================================================================
0001FBD4                            
0001FBD4                            Obj09_Chk1Up:
0001FBD4 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001FBD8 6600                       		bne.s	Obj09_ChkEmer
0001FBDA 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001FBDE 6600                       		bne.s	Obj09_Get1Up
0001FBE0 14BC 0003                  		move.b	#3,(a2)
0001FBE4 2549 0004                  		move.l	a1,4(a2)
0001FBE8                            
0001FBE8                            Obj09_Get1Up:
0001FBE8 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to number of lives
0001FBEC 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0001FBFA 7800                       		moveq	#0,d4
0001FBFC 4E75                       		rts	
0001FBFE                            ; ===========================================================================
0001FBFE                            
0001FBFE                            Obj09_ChkEmer:
0001FBFE 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001FC02 6500                       		bcs.s	Obj09_ChkGhost
0001FC04 0C04 0040                  		cmpi.b	#$40,d4
0001FC08 6200                       		bhi.s	Obj09_ChkGhost
0001FC0A 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001FC0E 6600                       		bne.s	Obj09_GetEmer
0001FC10 14BC 0005                  		move.b	#5,(a2)
0001FC14 2549 0004                  		move.l	a1,4(a2)
0001FC18                            
0001FC18                            Obj09_GetEmer:
0001FC18 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0001FC1E 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001FC20 0404 003B                  		subi.b	#$3B,d4
0001FC24 7000                       		moveq	#0,d0
0001FC26 1038 FE57                  		move.b	(v_emeralds).w,d0
0001FC2A 45F8 FE58                  		lea	(v_emldlist).w,a2
0001FC2E 1584 0000                  		move.b	d4,(a2,d0.w)
0001FC32 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001FC36                            
0001FC36                            Obj09_NoEmer:
0001FC40 7800                       		moveq	#0,d4
0001FC42 4E75                       		rts	
0001FC44                            ; ===========================================================================
0001FC44                            
0001FC44                            Obj09_ChkGhost:
0001FC44 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001FC48 6600                       		bne.s	Obj09_ChkGhostTag
0001FC4A 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001FC50                            
0001FC50                            Obj09_ChkGhostTag:
0001FC50 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001FC54 6600                       		bne.s	Obj09_NoGhost
0001FC56 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001FC5C 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001FC5E 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001FC64                            
0001FC64                            Obj09_NoGhost:
0001FC64 78FF                       		moveq	#-1,d4
0001FC66 4E75                       		rts	
0001FC68                            ; ===========================================================================
0001FC68                            
0001FC68                            Obj09_MakeGhostSolid:
0001FC68 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001FC6E 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001FC70 43F9 00FF 1020             		lea	($FF1020).l,a1
0001FC76 723F                       		moveq	#$3F,d1
0001FC78                            
0001FC78                            Obj09_GhostLoop2:
0001FC78 743F                       		moveq	#$3F,d2
0001FC7A                            
0001FC7A                            Obj09_GhostLoop:
0001FC7A 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001FC7E 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001FC80 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001FC84                            
0001FC84                            Obj09_NoReplace:
0001FC84 5249                       		addq.w	#1,a1
0001FC86 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001FC8A 43E9 0040                  		lea	$40(a1),a1
0001FC8E 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001FC92                            
0001FC92                            Obj09_GhostNotSolid:
0001FC92 4228 003A                  		clr.b	$3A(a0)
0001FC96 7800                       		moveq	#0,d4
0001FC98 4E75                       		rts	
0001FC9A                            ; End of function Obj09_ChkItems
0001FC9A                            
0001FC9A                            
0001FC9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC9A                            
0001FC9A                            
0001FC9A                            Obj09_ChkItems2:
0001FC9A 1028 0030                  		move.b	$30(a0),d0
0001FC9E 6600                       		bne.s	Obj09_ChkBumper
0001FCA0 5328 0036                  		subq.b	#1,$36(a0)
0001FCA4 6A00                       		bpl.s	loc_1BEA0
0001FCA6 117C 0000 0036             		move.b	#0,$36(a0)
0001FCAC                            
0001FCAC                            loc_1BEA0:
0001FCAC 5328 0037                  		subq.b	#1,$37(a0)
0001FCB0 6A00                       		bpl.s	locret_1BEAC
0001FCB2 117C 0000 0037             		move.b	#0,$37(a0)
0001FCB8                            
0001FCB8                            locret_1BEAC:
0001FCB8 4E75                       		rts	
0001FCBA                            ; ===========================================================================
0001FCBA                            
0001FCBA                            Obj09_ChkBumper:
0001FCBA 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001FCBE 6600                       		bne.s	Obj09_GOAL
0001FCC0 2228 0032                  		move.l	$32(a0),d1
0001FCC4 0481 00FF 0001             		subi.l	#$FF0001,d1
0001FCCA 3401                       		move.w	d1,d2
0001FCCC 0241 007F                  		andi.w	#$7F,d1
0001FCD0 C2FC 0018                  		mulu.w	#$18,d1
0001FCD4 0441 0014                  		subi.w	#$14,d1
0001FCD8 EE4A                       		lsr.w	#7,d2
0001FCDA 0242 007F                  		andi.w	#$7F,d2
0001FCDE C4FC 0018                  		mulu.w	#$18,d2
0001FCE2 0442 0044                  		subi.w	#$44,d2
0001FCE6 9268 0008                  		sub.w	obX(a0),d1
0001FCEA 9468 000C                  		sub.w	obY(a0),d2
0001FCEE 4EB9 0000 3F5C             		jsr	(CalcAngle).l
0001FCF4 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001FCFA C3FC F900                  		muls.w	#-$700,d1
0001FCFE E081                       		asr.l	#8,d1
0001FD00 3141 0010                  		move.w	d1,obVelX(a0)
0001FD04 C1FC F900                  		muls.w	#-$700,d0
0001FD08 E080                       		asr.l	#8,d0
0001FD0A 3140 0012                  		move.w	d0,obVelY(a0)
0001FD0E 08E8 0001 0022             		bset	#1,obStatus(a0)
0001FD14 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001FD18 6600                       		bne.s	Obj09_BumpSnd
0001FD1A 14BC 0002                  		move.b	#2,(a2)
0001FD1E 2028 0032                  		move.l	$32(a0),d0
0001FD22 5380                       		subq.l	#1,d0
0001FD24 2540 0004                  		move.l	d0,4(a2)
0001FD28                            
0001FD28                            Obj09_BumpSnd:
0001FD32                            ; ===========================================================================
0001FD32                            
0001FD32                            Obj09_GOAL:
0001FD32 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001FD36 6600                       		bne.s	Obj09_UPblock
0001FD38 5428 0024                  		addq.b	#2,obRoutine(a0) ; run routine "Obj09_ExitStage"
0001FD46 4E75                       		rts	
0001FD48                            ; ===========================================================================
0001FD48                            
0001FD48                            Obj09_UPblock:
0001FD48 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001FD4C 6600                       		bne.s	Obj09_DOWNblock
0001FD4E 4A28 0036                  		tst.b	$36(a0)
0001FD52 6600 0000                  		bne.w	Obj09_NoGlass
0001FD56 117C 001E 0036             		move.b	#$1E,$36(a0)
0001FD5C 0838 0006 F783             		btst	#6,($FFFFF783).w
0001FD62 6700                       		beq.s	Obj09_UPsnd
0001FD64 E1F8 F782                  		asl	(v_ssrotate).w	; increase stage rotation speed
0001FD68 2268 0032                  		movea.l	$32(a0),a1
0001FD6C 5389                       		subq.l	#1,a1
0001FD6E 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001FD72                            
0001FD72                            Obj09_UPsnd:
0001FD7C                            ; ===========================================================================
0001FD7C                            
0001FD7C                            Obj09_DOWNblock:
0001FD7C 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001FD80 6600                       		bne.s	Obj09_Rblock
0001FD82 4A28 0036                  		tst.b	$36(a0)
0001FD86 6600 0000                  		bne.w	Obj09_NoGlass
0001FD8A 117C 001E 0036             		move.b	#$1E,$36(a0)
0001FD90 0838 0006 F783             		btst	#6,(v_ssrotate+1).w
0001FD96 6600                       		bne.s	Obj09_DOWNsnd
0001FD98 E0F8 F782                  		asr	(v_ssrotate).w	; reduce stage rotation speed
0001FD9C 2268 0032                  		movea.l	$32(a0),a1
0001FDA0 5389                       		subq.l	#1,a1
0001FDA2 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001FDA6                            
0001FDA6                            Obj09_DOWNsnd:
0001FDB0                            ; ===========================================================================
0001FDB0                            
0001FDB0                            Obj09_Rblock:
0001FDB0 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001FDB4 6600                       		bne.s	Obj09_ChkGlass
0001FDB6 4A28 0037                  		tst.b	$37(a0)
0001FDBA 6600 0000                  		bne.w	Obj09_NoGlass
0001FDBE 117C 001E 0037             		move.b	#$1E,$37(a0)
0001FDC4 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001FDC8 6600                       		bne.s	Obj09_RevStage
0001FDCA 14BC 0004                  		move.b	#4,(a2)
0001FDCE 2028 0032                  		move.l	$32(a0),d0
0001FDD2 5380                       		subq.l	#1,d0
0001FDD4 2540 0004                  		move.l	d0,4(a2)
0001FDD8                            
0001FDD8                            Obj09_RevStage:
0001FDD8 4478 F782                  		neg.w	(v_ssrotate).w	; reverse stage rotation
0001FDE6                            ; ===========================================================================
0001FDE6                            
0001FDE6                            Obj09_ChkGlass:
0001FDE6 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001FDEA 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001FDEC 0C00 002E                  		cmpi.b	#$2E,d0
0001FDF0 6700                       		beq.s	Obj09_Glass
0001FDF2 0C00 002F                  		cmpi.b	#$2F,d0
0001FDF6 6700                       		beq.s	Obj09_Glass
0001FDF8 0C00 0030                  		cmpi.b	#$30,d0
0001FDFC 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001FDFE                            
0001FDFE                            Obj09_Glass:
0001FDFE 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0001FE02 6600                       		bne.s	Obj09_GlassSnd
0001FE04 14BC 0006                  		move.b	#6,(a2)
0001FE08 2268 0032                  		movea.l	$32(a0),a1
0001FE0C 5389                       		subq.l	#1,a1
0001FE0E 2549 0004                  		move.l	a1,4(a2)
0001FE12 1011                       		move.b	(a1),d0
0001FE14 5200                       		addq.b	#1,d0		; change glass type when touched
0001FE16 0C00 0030                  		cmpi.b	#$30,d0
0001FE1A 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001FE1C 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001FE1E                            
0001FE1E                            Obj09_GlassUpdate:
0001FE1E 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001FE22                            
0001FE22                            Obj09_GlassSnd:
0001FE2C                            ; ===========================================================================
0001FE2C                            
0001FE2C                            Obj09_NoGlass:
0001FE2C 4E75                       		rts	
0001FE2E                            ; End of function Obj09_ChkItems2
0001FE2E                            ; End of function Obj09_ChkItems2
0001FE2E                            
0001FE2E                            		include	"_incObj\10.asm"
0001FE2E                            ; ---------------------------------------------------------------------------
0001FE2E                            ; Object 10 - After-Image
0001FE2E                            ; ---------------------------------------------------------------------------
0001FE2E                            
0001FE2E                            Obj10:
0001FE2E 0C38 0018 D01C                   cmpi.b   #id_Death,(v_player+obAnim).w   ; is Sonic using the death animation?
0001FE34 6700 0000                        beq.w   AfterimageEnd      ; if yes, delete the After Image
0001FE38                            
0001FE38 7000                             moveq   #0,d0
0001FE3A 1028 0024                        move.b   obRoutine(a0),d0
0001FE3E 323B 0000                        move.w   Afterimage_Index(pc,d0.w),d1
0001FE42 4EFB 1000                        jmp	Afterimage_Index(pc,d1.w)
0001FE46                            
0001FE46                            ; ===========================================================================
0001FE46                            ;           Change the length by moving around the "No Afterimage" and "After Image Start/ After Image L Priority" sections.
0001FE46                            ; ===========================================================================
0001FE46                            Afterimage_Index:
0001FE46 0000                             dc.w NoAfterImage-Afterimage_Index
0001FE48 0000                             dc.w NoAfterImage-Afterimage_Index
0001FE4A 0000                             dc.w NoAfterImage-Afterimage_Index
0001FE4C 0000                             dc.w AfterimageStart-Afterimage_Index
0001FE4E 0000                             dc.w NoAfterImage-Afterimage_Index
0001FE50 0000                             dc.w NoAfterImage-Afterimage_Index
0001FE52 0000                             dc.w NoAfterImage-Afterimage_Index
0001FE54 0000                             dc.w AfterimageLPrio-Afterimage_Index
0001FE56 0000                             dc.w AfterimageEnd-Afterimage_Index
0001FE58                            ; ===========================================================================
0001FE58                            NoAfterImage:
0001FE58 5428 0024                        addq.b   #2,obRoutine(a0)         ; go to next item of index, at the next frame
0001FE5C 4E75                             rts
0001FE5E                            ; ===========================================================================
0001FE5E                            AfterimageStart:
0001FE5E 117C 0002 0018                   move.b   #2,obPriority(a0)         ; set sprite priority to 2
0001FE64 6000                             bra.s   Afterimage_Show
0001FE66                            ; ===========================================================================
0001FE66                            AfterimageLPrio:
0001FE66 5228 0018                        addq.b   #1,obPriority(a0)         ; set a lower sprite priority
0001FE6A                            ; ===========================================================================
0001FE6A                            Afterimage_Show:
0001FE6A 5428 0024                        addq.b   #2,obRoutine(a0)            ; go to next item of index
0001FE6E 4EB9 0000 3CA4                   jsr   (RandomNumber).l         ; get a random number
0001FE74 0200 0003                        andi.b   #3,d0               ; get a number equal or lower than 2 (0 until 2)
0001FE78 6600                             bne.s   AfterimageException   ; if is not 0, branch
0001FE7A 4E75                             rts                        ; if it is 0, then don't show the after-image
0001FE7C                            
0001FE7C                            AfterimageException:
0001FE7C 3178 D002 0002                   move.w   (v_player+obGfx).w,obGfx(a0)      ; copy Sonic map to after-image map
0001FE82 1178 D001 0001                    move.b   (v_player+obRender).w,obRender(a0)      ; copy Sonic frame infos (horizontal/vertical mirror, coordinate system......)
0001FE88 2178 D01A 001A                    move.l   (v_player+obFrame).w,obFrame(a0)   ; copy the Sonic animation frame
0001FE8E 4EF9 0000 F57E                   jmp   DisplaySprite
0001FE94                            ; ===========================================================================
0001FE94                            AfterimageEnd:
0001FE94 4EF9 0000 F5BE                   jmp   DeleteObject
0001FE94 4EF9 0000 F5BE                   jmp   DeleteObject
0001FE9A                            
0001FE9A                            		include	"_inc\AnimateLevelGfx.asm"
0001FE9A                            ; ---------------------------------------------------------------------------
0001FE9A                            ; Subroutine to	animate	level graphics
0001FE9A                            ; ---------------------------------------------------------------------------
0001FE9A                            
0001FE9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE9A                            
0001FE9A                            
0001FE9A                            AnimateLevelGfx:
0001FE9A 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
0001FE9E 6600                       		bne.s	@ispaused	; if yes, branch
0001FEA0 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001FEA6 6100 0000                  		bsr.w	AniArt_GiantRing
0001FEAA 7000                       		moveq	#0,d0
0001FEAC 1038 FE10                  		move.b	(v_zone).w,d0
0001FEB0 D040                       		add.w	d0,d0
0001FEB2 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001FEB6 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001FEBA                            
0001FEBA                            	@ispaused:
0001FEBA 4E75                       		rts	
0001FEBC                            
0001FEBC                            ; ===========================================================================
0001FEBC 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001FEC0 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001FEC4 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001FEC8 0000                       		dc.w AniArt_Ending-AniArt_Index
0001FECA                            ; ===========================================================================
0001FECA                            ; ---------------------------------------------------------------------------
0001FECA                            ; Animated pattern routine - Green Hill
0001FECA                            ; ---------------------------------------------------------------------------
0001FECA                            
0001FECA                            AniArt_GHZ:
0001FECA                            
0001FECA                            AniArt_GHZ_Waterfall:
0001FECA                            
0001FECA =00000008                  @size:		equ 8	; number of tiles per frame
0001FECA                            
0001FECA 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001FECE 6A00                       		bpl.s	AniArt_GHZ_Bigflower ; branch if not 0
0001FED0                            
0001FED0 11FC 0005 F7B1             		move.b	#5,(v_lani0_time).w ; time to display each frame
0001FED6 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001FEDC 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001FEE0 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001FEE4 0240 0001                  		andi.w	#1,d0		; there are only 2 frames
0001FEE8 6700                       		beq.s	@isframe0	; branch if frame 0
0001FEEA 43E9 0100                  		lea	@size*$20(a1),a1 ; use graphics for frame 1
0001FEEE                            
0001FEEE                            	@isframe0:
0001FEF8 323C 0007                  		move.w	#@size-1,d1	; number of 8x8	tiles
0001FEFC 6000 0000                  		bra.w	LoadTiles
0001FF00                            ; ===========================================================================
0001FF00                            
0001FF00                            AniArt_GHZ_Bigflower:
0001FF00                            
0001FF00 =00000010                  @size:		equ 16	; number of tiles per frame
0001FF00                            
0001FF00 5338 F7B3                  		subq.b	#1,(v_lani1_time).w
0001FF04 6A00                       		bpl.s	AniArt_GHZ_Smallflower
0001FF06                            
0001FF06 11FC 000F F7B3             		move.b	#$F,(v_lani1_time).w
0001FF0C 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001FF12 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001FF16 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w
0001FF1A 0240 0001                  		andi.w	#1,d0
0001FF1E 6700                       		beq.s	@isframe0
0001FF20 43E9 0200                  		lea	@size*$20(a1),a1
0001FF24                            
0001FF24                            	@isframe0:
0001FF2E 323C 000F                  		move.w	#@size-1,d1
0001FF32 6000 0000                  		bra.w	LoadTiles
0001FF36                            ; ===========================================================================
0001FF36                            
0001FF36                            AniArt_GHZ_Smallflower:
0001FF36                            
0001FF36 =0000000C                  @size:		equ 12	; number of tiles per frame
0001FF36                            
0001FF36 5338 F7B5                  		subq.b	#1,(v_lani2_time).w
0001FF3A 6A00                       		bpl.s	@end
0001FF3C                            
0001FF3C 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001FF42 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001FF46 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001FF4A 0240 0003                  		andi.w	#3,d0		; there are 4 frames
0001FF4E 103B 0000                  		move.b	@sequence(pc,d0.w),d0
0001FF52 0800 0000                  		btst	#0,d0		; is frame 0 or 2? (actual frame, not frame counter)
0001FF56 6600                       		bne.s	@isframe1	; if not, branch
0001FF58 11FC 007F F7B5             		move.b	#$7F,(v_lani2_time).w ; set longer duration for frames 0 and 2
0001FF5E                            
0001FF5E                            	@isframe1:
0001FF5E EF48                       		lsl.w	#7,d0		; multiply frame num by $80
0001FF60 3200                       		move.w	d0,d1
0001FF62 D040                       		add.w	d0,d0
0001FF64 D041                       		add.w	d1,d0		; multiply that by 3 (i.e. frame num times 12 * $20)
0001FF70 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001FF76 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001FF7A 323C 000B                  		move.w	#@size-1,d1
0001FF7E 6100 0000                  		bsr.w	LoadTiles
0001FF82                            
0001FF82                            @end:
0001FF82 4E75                       		rts	
0001FF84                            
0001FF84 0001 0201                  @sequence:	dc.b 0,	1, 2, 1
0001FF88                            ; ===========================================================================
0001FF88                            ; ---------------------------------------------------------------------------
0001FF88                            ; Animated pattern routine - Marble
0001FF88                            ; ---------------------------------------------------------------------------
0001FF88                            
0001FF88                            AniArt_MZ:
0001FF88                            
0001FF88                            AniArt_MZ_Lava:
0001FF88                            
0001FF88 =00000008                  @size:		equ 8	; number of tiles per frame
0001FF88                            
0001FF88 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001FF8C 6A00                       		bpl.s	AniArt_MZ_Magma	; branch if not 0
0001FF8E                            
0001FF8E 11FC 0011 F7B1             		move.b	#$11,(v_lani0_time).w ; time to display each frame
0001FF94 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001FF9A 7000                       		moveq	#0,d0
0001FF9C 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001FFA0 5200                       		addq.b	#1,d0		; increment frame counter
0001FFA2 0C00 0003                  		cmpi.b	#3,d0		; there are 3 frames
0001FFA6 6600                       		bne.s	@frame01or2	; branch if frame 0, 1 or 2
0001FFA8 7000                       		moveq	#0,d0
0001FFAA                            
0001FFAA                            	@frame01or2:
0001FFAA 11C0 F7B0                  		move.b	d0,(v_lani0_frame).w
0001FFAE C0FC 0100                  		mulu.w	#@size*$20,d0
0001FFB2 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001FFBE 323C 0007                  		move.w	#@size-1,d1
0001FFC2 6100 0000                  		bsr.w	LoadTiles
0001FFC6                            
0001FFC6                            AniArt_MZ_Magma:
0001FFC6 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001FFCA 6A00                       		bpl.s	AniArt_MZ_Torch	; branch if not 0
0001FFCC                            		
0001FFCC 11FC 0001 F7B3             		move.b	#1,(v_lani1_time).w ; time between each gfx change
0001FFD2 7000                       		moveq	#0,d0
0001FFD4 1038 F7B0                  		move.b	(v_lani0_frame).w,d0 ; get surface lava frame number
0001FFD8 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load magma gfx
0001FFDE EE58                       		ror.w	#7,d0		; multiply frame num by $200
0001FFE0 D8C0                       		adda.w	d0,a4		; jump to appropriate tile
0001FFEC 7600                       		moveq	#0,d3
0001FFEE 1638 F7B2                  		move.b	(v_lani1_frame).w,d3
0001FFF2 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter (unused)
0001FFF6 1638 FE68                  		move.b	(v_oscillate+$A).w,d3 ; get oscillating value
0001FFFA 343C 0003                  		move.w	#3,d2
0001FFFE                            
0001FFFE                            	@loop:
0001FFFE 3003                       		move.w	d3,d0
00020000 D040                       		add.w	d0,d0
00020002 0240 001E                  		andi.w	#$1E,d0
00020006 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0002000C 3033 0000                  		move.w	(a3,d0.w),d0
00020010 47F3 0000                  		lea	(a3,d0.w),a3
00020014 224C                       		movea.l	a4,a1
00020016 323C 001F                  		move.w	#$1F,d1
0002001A 4E93                       		jsr	(a3)
0002001C 5843                       		addq.w	#4,d3
0002001E 51CA FFDE                  		dbf	d2,@loop
00020022 4E75                       		rts	
00020024                            ; ===========================================================================
00020024                            
00020024                            AniArt_MZ_Torch:
00020024                            
00020024 =00000006                  @size:		equ 6	; number of tiles per frame
00020024                            
00020024 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
00020028 6A00 0000                  		bpl.w	@end		; branch if not 0
0002002C                            		
0002002C 11FC 0004 F7B5             		move.b	#4,(v_lani2_time).w ; time to display each frame
00020032 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
00020038 7000                       		moveq	#0,d0
0002003A 1038 F7B6                  		move.b	(v_lani3_frame).w,d0
0002003E 5238 F7B6                  		addq.b	#1,(v_lani3_frame).w ; increment frame counter
00020042 0238 0003 F7B6             		andi.b	#3,(v_lani3_frame).w ; there are 3 frames
00020048 C0FC 00C0                  		mulu.w	#@size*$20,d0
0002004C D2C0                       		adda.w	d0,a1		; jump to appropriate tile
00020058 323C 0005                  		move.w	#@size-1,d1
0002005C 6000 0000                  		bra.w	LoadTiles
00020060                            
00020060                            @end:
00020060 4E75                       		rts	
00020062                            ; ===========================================================================
00020062                            ; ---------------------------------------------------------------------------
00020062                            ; Animated pattern routine - Scrap Brain
00020062                            ; ---------------------------------------------------------------------------
00020062                            
00020062                            AniArt_SBZ:
00020062                            
00020062 =0000000C                  @size:		equ 12	; number of tiles per frame
00020062                            
00020062 4A38 F7B4                  		tst.b	(v_lani2_frame).w
00020066 6700                       		beq.s	@smokepuff	; branch if counter hits 0
00020068                            		
00020068 5338 F7B4                  		subq.b	#1,(v_lani2_frame).w ; decrement counter
0002006C 6000                       		bra.s	@chk_smokepuff2
0002006E                            ; ===========================================================================
0002006E                            
0002006E                            @smokepuff:
0002006E 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
00020072 6A00                       		bpl.s	@chk_smokepuff2 ; branch if not 0
00020074                            		
00020074 11FC 0007 F7B1             		move.b	#7,(v_lani0_time).w ; time to display each frame
0002007A 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0002008A 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0002008E 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
00020092 0240 0007                  		andi.w	#7,d0
00020096 6700                       		beq.s	@untilnextpuff	; branch if frame 0
00020098 5340                       		subq.w	#1,d0
0002009A C0FC 0180                  		mulu.w	#@size*$20,d0
0002009E 43F1 0000                  		lea	(a1,d0.w),a1
000200A2 323C 000B                  		move.w	#@size-1,d1
000200A6 6000 0000                  		bra.w	LoadTiles
000200AA                            ; ===========================================================================
000200AA                            
000200AA                            @untilnextpuff:
000200AA 11FC 00B4 F7B4             		move.b	#180,(v_lani2_frame).w ; time between smoke puffs (3 seconds)
000200B0                            
000200B0                            @clearsky:
000200B0 323C 0005                  		move.w	#(@size/2)-1,d1
000200B4 6100 0000                  		bsr.w	LoadTiles
000200B8 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
000200BE 323C 0005                  		move.w	#(@size/2)-1,d1
000200C2 6000 0000                  		bra.w	LoadTiles	; load blank tiles for no smoke puff
000200C6                            ; ===========================================================================
000200C6                            
000200C6                            @chk_smokepuff2:
000200C6 4A38 F7B5                  		tst.b	(v_lani2_time).w
000200CA 6700                       		beq.s	@smokepuff2	; branch if counter hits 0
000200CC                            		
000200CC 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement counter
000200D0 6000                       		bra.s	@end
000200D2                            ; ===========================================================================
000200D2                            
000200D2                            @smokepuff2:
000200D2 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
000200D6 6A00                       		bpl.s	@end		; branch if not 0
000200D8                            		
000200D8 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w ; time to display each frame
000200DE 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
000200EE 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
000200F2 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
000200F6 0240 0007                  		andi.w	#7,d0
000200FA 6700                       		beq.s	@untilnextpuff2	; branch if frame 0
000200FC 5340                       		subq.w	#1,d0
000200FE C0FC 0180                  		mulu.w	#@size*$20,d0
00020102 43F1 0000                  		lea	(a1,d0.w),a1
00020106 323C 000B                  		move.w	#@size-1,d1
0002010A 6000 0000                  		bra.w	LoadTiles
0002010E                            ; ===========================================================================
0002010E                            
0002010E                            @untilnextpuff2:
0002010E 11FC 0078 F7B5             		move.b	#120,(v_lani2_time).w ; time between smoke puffs (2 seconds)
00020114 609A                       		bra.s	@clearsky
00020116                            ; ===========================================================================
00020116                            
00020116                            @end:
00020116 4E75                       		rts	
00020118                            ; ===========================================================================
00020118                            ; ---------------------------------------------------------------------------
00020118                            ; Animated pattern routine - ending sequence
00020118                            ; ---------------------------------------------------------------------------
00020118                            
00020118                            AniArt_Ending:
00020118                            
00020118                            AniArt_Ending_BigFlower:
00020118                            
00020118 =00000010                  @size:		equ 16	; number of tiles per frame
00020118                            
00020118 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0002011C 6A00                       		bpl.s	AniArt_Ending_SmallFlower ; branch if not 0
0002011E                            		
0002011E 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w
00020124 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0002012A 45F8 9400                  		lea	($FFFF9400).w,a2 ; load 2nd big flower from RAM
0002012E 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
00020132 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
00020136 0240 0001                  		andi.w	#1,d0		; only 2 frames
0002013A 6700                       		beq.s	@isframe0	; branch if frame 0
0002013C 43E9 0200                  		lea	@size*$20(a1),a1
00020140 45EA 0200                  		lea	@size*$20(a2),a2
00020144                            
00020144                            	@isframe0:
0002014E 323C 000F                  		move.w	#@size-1,d1
00020152 6100 0000                  		bsr.w	LoadTiles
00020156 224A                       		movea.l	a2,a1
00020162 323C 000F                  		move.w	#@size-1,d1
00020166 6000 0000                  		bra.w	LoadTiles
0002016A                            ; ===========================================================================
0002016A                            
0002016A                            AniArt_Ending_SmallFlower:
0002016A                            
0002016A =0000000C                  @size:		equ 12	; number of tiles per frame
0002016A                            
0002016A 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0002016E 6A00                       		bpl.s	AniArt_Ending_Flower3 ; branch if not 0
00020170                            		
00020170 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
00020176 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0002017A 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0002017E 0240 0007                  		andi.w	#7,d0		; max 8 frames
00020182 103B 0000                  		move.b	@sequence(pc,d0.w),d0 ; get actual frame num from sequence data
00020186 EF48                       		lsl.w	#7,d0		; multiply by $80
00020188 3200                       		move.w	d0,d1
0002018A D040                       		add.w	d0,d0
0002018C D041                       		add.w	d1,d0		; multiply by 3
00020198 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0002019E 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
000201A2 323C 000B                  		move.w	#@size-1,d1
000201A6 6000 0000                  		bra.w	LoadTiles
000201AA                            ; ===========================================================================
000201AA 0000 0001 0202 0201        @sequence:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
000201B2                            ; ===========================================================================
000201B2                            
000201B2                            AniArt_Ending_Flower3:
000201B2                            
000201B2 =00000010                  @size:		equ 16	; number of tiles per frame
000201B2                            
000201B2 5338 F7B9                  		subq.b	#1,(v_lani4_time).w ; decrement timer
000201B6 6A00                       		bpl.s	AniArt_Ending_Flower4 ; branch if not 0
000201B8                            		
000201B8 11FC 000E F7B9             		move.b	#$E,(v_lani4_time).w
000201BE 1038 F7B8                  		move.b	(v_lani4_frame).w,d0
000201C2 5238 F7B8                  		addq.b	#1,(v_lani4_frame).w ; increment frame counter
000201C6 0240 0003                  		andi.w	#3,d0		; max 4 frames
000201CA 103B 0000                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
000201CE E148                       		lsl.w	#8,d0		; multiply by $100
000201D0 D040                       		add.w	d0,d0		; multiply by 2
000201DC 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
000201E0 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
000201E4 323C 000F                  		move.w	#@size-1,d1
000201E8 6000 0000                  		bra.w	LoadTiles
000201EC                            ; ===========================================================================
000201EC 0001 0201                  AniArt_Ending_Flower3_sequence:	dc.b 0,	1, 2, 1
000201F0                            ; ===========================================================================
000201F0                            
000201F0                            AniArt_Ending_Flower4:
000201F0                            
000201F0 =00000010                  @size:		equ 16	; number of tiles per frame
000201F0                            
000201F0 5338 F7BB                  		subq.b	#1,(v_lani5_time).w ; decrement timer
000201F4 6A00                       		bpl.s	@end		; branch if not 0
000201F6                            		
000201F6 11FC 000B F7BB             		move.b	#$B,(v_lani5_time).w
000201FC 1038 F7BA                  		move.b	(v_lani5_frame).w,d0
00020200 5238 F7BA                  		addq.b	#1,(v_lani5_frame).w ; increment frame counter
00020204 0240 0003                  		andi.w	#3,d0
00020208 103B 00E2                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0002020C E148                       		lsl.w	#8,d0		; multiply by $100
0002020E D040                       		add.w	d0,d0		; multiply by 2
0002021A 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0002021E 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
00020222 323C 000F                  		move.w	#@size-1,d1
00020226 6000 0000                  		bra.w	LoadTiles
0002022A                            ; ===========================================================================
0002022A                            
0002022A                            @end:
0002022A 4E75                       		rts	
0002022C                            ; ===========================================================================
0002022C                            
0002022C                            AniArt_none:
0002022C 4E75                       		rts	
0002022E                            
0002022E                            ; ---------------------------------------------------------------------------
0002022E                            ; Subroutine to	transfer graphics to VRAM
0002022E                            
0002022E                            ; input:
0002022E                            ;	a1 = source address
0002022E                            ;	a6 = vdp_data_port ($C00000)
0002022E                            ;	d1 = number of tiles to load (minus one)
0002022E                            ; ---------------------------------------------------------------------------
0002022E                            
0002022E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002022E                            
0002022E                            
0002022E                            LoadTiles:
0002022E 2C99                       		move.l	(a1)+,(a6)
00020230 2C99                       		move.l	(a1)+,(a6)
00020232 2C99                       		move.l	(a1)+,(a6)
00020234 2C99                       		move.l	(a1)+,(a6)
00020236 2C99                       		move.l	(a1)+,(a6)
00020238 2C99                       		move.l	(a1)+,(a6)
0002023A 2C99                       		move.l	(a1)+,(a6)
0002023C 2C99                       		move.l	(a1)+,(a6)
0002023E 51C9 FFEE                  		dbf	d1,LoadTiles
00020242 4E75                       		rts	
00020244                            ; End of function LoadTiles
00020244                            
00020244                            ; ===========================================================================
00020244                            ; ---------------------------------------------------------------------------
00020244                            ; Animated pattern routine - more Marble Zone
00020244                            ; ---------------------------------------------------------------------------
00020244 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
00020248 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0002024C 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
00020250 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
00020254 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
00020258 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0002025C 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
00020260 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
00020264                            ; ===========================================================================
00020264                            
00020264                            loc_1C3EE:
00020264 2C91                       		move.l	(a1),(a6)
00020266 43E9 0010                  		lea	$10(a1),a1
0002026A 51C9 FFF8                  		dbf	d1,loc_1C3EE
0002026E 4E75                       		rts	
00020270                            ; ===========================================================================
00020270                            
00020270                            loc_1C3FA:
00020270 2029 0002                  		move.l	2(a1),d0
00020274 1029 0001                  		move.b	1(a1),d0
00020278 E098                       		ror.l	#8,d0
0002027A 2C80                       		move.l	d0,(a6)
0002027C 43E9 0010                  		lea	$10(a1),a1
00020280 51C9 FFEE                  		dbf	d1,loc_1C3FA
00020284 4E75                       		rts	
00020286                            ; ===========================================================================
00020286                            
00020286                            loc_1C410:
00020286 2CA9 0002                  		move.l	2(a1),(a6)
0002028A 43E9 0010                  		lea	$10(a1),a1
0002028E 51C9 FFF6                  		dbf	d1,loc_1C410
00020292 4E75                       		rts	
00020294                            ; ===========================================================================
00020294                            
00020294                            loc_1C41E:
00020294 2029 0004                  		move.l	4(a1),d0
00020298 1029 0003                  		move.b	3(a1),d0
0002029C E098                       		ror.l	#8,d0
0002029E 2C80                       		move.l	d0,(a6)
000202A0 43E9 0010                  		lea	$10(a1),a1
000202A4 51C9 FFEE                  		dbf	d1,loc_1C41E
000202A8 4E75                       		rts	
000202AA                            ; ===========================================================================
000202AA                            
000202AA                            loc_1C434:
000202AA 2CA9 0004                  		move.l	4(a1),(a6)
000202AE 43E9 0010                  		lea	$10(a1),a1
000202B2 51C9 FFF6                  		dbf	d1,loc_1C434
000202B6 4E75                       		rts	
000202B8                            ; ===========================================================================
000202B8                            
000202B8                            loc_1C442:
000202B8 2029 0006                  		move.l	6(a1),d0
000202BC 1029 0005                  		move.b	5(a1),d0
000202C0 E098                       		ror.l	#8,d0
000202C2 2C80                       		move.l	d0,(a6)
000202C4 43E9 0010                  		lea	$10(a1),a1
000202C8 51C9 FFEE                  		dbf	d1,loc_1C442
000202CC 4E75                       		rts	
000202CE                            ; ===========================================================================
000202CE                            
000202CE                            loc_1C458:
000202CE 2CA9 0006                  		move.l	6(a1),(a6)
000202D2 43E9 0010                  		lea	$10(a1),a1
000202D6 51C9 FFF6                  		dbf	d1,loc_1C458
000202DA 4E75                       		rts	
000202DC                            ; ===========================================================================
000202DC                            
000202DC                            loc_1C466:
000202DC 2029 0008                  		move.l	8(a1),d0
000202E0 1029 0007                  		move.b	7(a1),d0
000202E4 E098                       		ror.l	#8,d0
000202E6 2C80                       		move.l	d0,(a6)
000202E8 43E9 0010                  		lea	$10(a1),a1
000202EC 51C9 FFEE                  		dbf	d1,loc_1C466
000202F0 4E75                       		rts	
000202F2                            ; ===========================================================================
000202F2                            
000202F2                            loc_1C47C:
000202F2 2CA9 0008                  		move.l	8(a1),(a6)
000202F6 43E9 0010                  		lea	$10(a1),a1
000202FA 51C9 FFF6                  		dbf	d1,loc_1C47C
000202FE 4E75                       		rts	
00020300                            ; ===========================================================================
00020300                            
00020300                            loc_1C48A:
00020300 2029 000A                  		move.l	$A(a1),d0
00020304 1029 0009                  		move.b	9(a1),d0
00020308 E098                       		ror.l	#8,d0
0002030A 2C80                       		move.l	d0,(a6)
0002030C 43E9 0010                  		lea	$10(a1),a1
00020310 51C9 FFEE                  		dbf	d1,loc_1C48A
00020314 4E75                       		rts	
00020316                            ; ===========================================================================
00020316                            
00020316                            loc_1C4A0:
00020316 2CA9 000A                  		move.l	$A(a1),(a6)
0002031A 43E9 0010                  		lea	$10(a1),a1
0002031E 51C9 FFF6                  		dbf	d1,loc_1C4A0
00020322 4E75                       		rts	
00020324                            ; ===========================================================================
00020324                            
00020324                            loc_1C4AE:
00020324 2029 000C                  		move.l	$C(a1),d0
00020328 1029 000B                  		move.b	$B(a1),d0
0002032C E098                       		ror.l	#8,d0
0002032E 2C80                       		move.l	d0,(a6)
00020330 43E9 0010                  		lea	$10(a1),a1
00020334 51C9 FFEE                  		dbf	d1,loc_1C4AE
00020338 4E75                       		rts	
0002033A                            ; ===========================================================================
0002033A                            
0002033A                            loc_1C4C4:
0002033A 2CA9 000C                  		move.l	$C(a1),(a6)
0002033E 43E9 0010                  		lea	$10(a1),a1
00020342 51C9 FFF6                  		dbf	d1,loc_1C4C4
00020346 4E75                       		rts	
00020348                            ; ===========================================================================
00020348                            
00020348                            loc_1C4D2:
00020348 2029 000C                  		move.l	$C(a1),d0
0002034C E198                       		rol.l	#8,d0
0002034E 1011                       		move.b	0(a1),d0
00020350 2C80                       		move.l	d0,(a6)
00020352 43E9 0010                  		lea	$10(a1),a1
00020356 51C9 FFF0                  		dbf	d1,loc_1C4D2
0002035A 4E75                       		rts	
0002035C                            ; ===========================================================================
0002035C                            
0002035C                            loc_1C4E8:
0002035C 3CA9 000E                  		move.w	$E(a1),(a6)
00020360 3C91                       		move.w	0(a1),(a6)
00020362 43E9 0010                  		lea	$10(a1),a1
00020366 51C9 FFF4                  		dbf	d1,loc_1C4E8
0002036A 4E75                       		rts	
0002036C                            ; ===========================================================================
0002036C                            
0002036C                            loc_1C4FA:
0002036C 2011                       		move.l	0(a1),d0
0002036E 1029 000F                  		move.b	$F(a1),d0
00020372 E098                       		ror.l	#8,d0
00020374 2C80                       		move.l	d0,(a6)
00020376 43E9 0010                  		lea	$10(a1),a1
0002037A 51C9 FFF0                  		dbf	d1,loc_1C4FA
0002037E 4E75                       		rts	
00020380                            
00020380                            ; ---------------------------------------------------------------------------
00020380                            ; Animated pattern routine - giant ring
00020380                            ; ---------------------------------------------------------------------------
00020380                            
00020380                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020380                            
00020380                            
00020380                            AniArt_GiantRing:
00020380                            
00020380 =0000000E                  @size:		equ 14
00020380                            
00020380 4A78 F7BE                  		tst.w	(v_gfxbigring).w	; Is there any of the art left to load?
00020384 6600                       		bne.s	@loadTiles		; If so, get to work
00020386 4E75                       		rts	
00020388                            ; ===========================================================================
00020388                            ; loc_1C518:
00020388                            @loadTiles:
00020388 0478 01C0 F7BE             		subi.w	#@size*$20,(v_gfxbigring).w	; Count-down the 14 tiles we're going to load now
0002038E 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
00020394 7000                       		moveq	#0,d0
00020396 3038 F7BE                  		move.w	(v_gfxbigring).w,d0
0002039A 43F1 0000                  		lea	(a1,d0.w),a1
0002039E                            		; Turn VRAM address into VDP command
0002039E 0640 8000                  		addi.w	#$8000,d0
000203A2 E588                       		lsl.l	#2,d0
000203A4 E448                       		lsr.w	#2,d0
000203A6 0040 4000                  		ori.w	#$4000,d0
000203AA 4840                       		swap	d0
000203AC                            		; Send VDP command (write to VRAM at address contained in v_gfxbigring)
000203AC 2D40 0004                  		move.l	d0,4(a6)
000203B0                            
000203B0 323C 000D                  		move.w	#@size-1,d1
000203B4 6000 FE78                  		bra.w	LoadTiles
000203B8                            
000203B8                            ; End of function AniArt_GiantRing
000203B8                            ; End of function AniArt_GiantRing
000203B8                            
000203B8                            		include	"_incObj\21 HUD.asm"
000203B8                            ; ---------------------------------------------------------------------------
000203B8                            ; Object 21 - SCORE, TIME, RINGS
000203B8                            ; ---------------------------------------------------------------------------
000203B8                            
000203B8                            HUD:
000203B8 7000                       		moveq	#0,d0
000203BA 1028 0024                  		move.b	obRoutine(a0),d0
000203BE 323B 0000                  		move.w	HUD_Index(pc,d0.w),d1
000203C2 4EFB 1000                  		jmp	HUD_Index(pc,d1.w)
000203C6                            ; ===========================================================================
000203C6 0000                       HUD_Index:	dc.w HUD_Main-HUD_Index
000203C8 0000                       		dc.w HUD_Flash-HUD_Index
000203CA                            ; ===========================================================================
000203CA                            
000203CA                            HUD_Main:	; Routine 0
000203CA 5428 0024                  		addq.b	#2,obRoutine(a0)
000203CE 317C 0090 0008             		move.w	#$90,obX(a0)
000203D4 317C 0108 000A             		move.w	#$108,obScreenY(a0)
000203DA 217C 0000 0000 0004        		move.l	#Map_HUD,obMap(a0)
000203E2 317C 06CA 0002             		move.w	#$6CA,obGfx(a0)
000203E8 117C 0000 0001             		move.b	#0,obRender(a0)
000203EE 317C 0000 0018             		move.w	#0,obPriority(a0)
000203F4                            
000203F4                            HUD_Flash:	; Routine 2
000203F4 7000                       		moveq	#0,d0
000203F6 0838 0003 FE05             		btst	#3,(v_framebyte).w
000203FC 6600                       		bne.s	@display
000203FE 4A78 FE20                  		tst.w	(v_rings).w	; do you have any rings?
00020402 6600                       		bne.s	@norings	; if so, branch
00020404 5240                       		addq.w	#1,d0		; make ring counter flash red
00020406                            ; ===========================================================================
00020406                            
00020406                            @norings:
00020406 0C38 0009 FE23             		cmpi.b	#9,(v_timemin).w ; have	9 minutes elapsed?
0002040C 6600                       		bne.s	@display	; if not, branch
0002040E 5440                       		addq.w	#2,d0		; make time counter flash red
00020410                            
00020410                            	@display:
00020410 1140 001A                  		move.b	d0,obFrame(a0)
00020414 4EF9 0000 F57E             		jmp	DisplaySprite
00020414 4EF9 0000 F57E             		jmp	DisplaySprite
0002041A                            Map_HUD:	include	"_maps\HUD.asm"
0002041A                            ; ---------------------------------------------------------------------------
0002041A                            ; Sprite mappings - SCORE, TIME, RINGS
0002041A                            ; ---------------------------------------------------------------------------
0002041A                            Map_HUD_internal:
0002041A 0000                       		dc.w @allyellow-Map_HUD_internal
0002041C 0000                       		dc.w @ringred-Map_HUD_internal
0002041E 0000                       		dc.w @timered-Map_HUD_internal
00020420 0000                       		dc.w @allred-Map_HUD_internal
00020422 0A                         @allyellow:	dc.b $A
00020423 800D 8000 00               		dc.b $80, $D, $80, 0, 0
00020428 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0002042D 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
00020432 900D 8010 00               		dc.b $90, $D, $80, $10,	0
00020437 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0002043C A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
00020441 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
00020446 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0002044B 4005 810A 00               		dc.b $40, 5, $81, $A, 0
00020450 400D 810E 10               		dc.b $40, $D, $81, $E, $10
00020455 00                         		dc.b 0
00020456 0A                         @ringred:	dc.b $A
00020457 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0002045C 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
00020461 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
00020466 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0002046B 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
00020470 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
00020475 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0002047A A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0002047F 4005 810A 00               		dc.b $40, 5, $81, $A, 0
00020484 400D 810E 10               		dc.b $40, $D, $81, $E, $10
00020489 00                         		dc.b 0
0002048A 0A                         @timered:	dc.b $A
0002048B 800D 8000 00               		dc.b $80, $D, $80, 0, 0
00020490 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
00020495 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0002049A 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0002049F 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
000204A4 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
000204A9 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
000204AE A009 8030 30               		dc.b $A0, 9, $80, $30, $30
000204B3 4005 810A 00               		dc.b $40, 5, $81, $A, 0
000204B8 400D 810E 10               		dc.b $40, $D, $81, $E, $10
000204BD 00                         		dc.b 0
000204BE 0A                         @allred:	dc.b $A
000204BF 800D 8000 00               		dc.b $80, $D, $80, 0, 0
000204C4 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
000204C9 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
000204CE 900D A010 00               		dc.b $90, $D, $A0, $10,	0
000204D3 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
000204D8 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
000204DD A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
000204E2 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
000204E7 4005 810A 00               		dc.b $40, 5, $81, $A, 0
000204EC 400D 810E 10               		dc.b $40, $D, $81, $E, $10
000204F2 00                         		even
000204F2 00                         		even
000204F2                            
000204F2                            ; ---------------------------------------------------------------------------
000204F2                            ; Add points subroutine
000204F2                            ; ---------------------------------------------------------------------------
000204F2                            
000204F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000204F2                            
000204F2                            
000204F2                            AddPoints:
000204F2 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; set score counter to update
000204F8                            
000204F8                            
000204F8 47F8 FE26                  			lea     (v_score).w,a3
000204FC D193                       			add.l   d0,(a3)
000204FE 223C 000F 423F             			move.l  #999999,d1
00020504 B293                       			cmp.l   (a3),d1 ; is score below 999999?
00020506 6200                       			bhi.s   @belowmax ; if yes, branch
00020508 2681                       			move.l  d1,(a3) ; reset score to 999999
0002050A                            		@belowmax:
0002050A 2013                       			move.l  (a3),d0
0002050C B0B8 FFC0                  			cmp.l   (v_scorelife).w,d0 ; has Sonic got 50000+ points?
00020510 6500                       			blo.s   @noextralife ; if not, branch
00020512                            
00020512 06B8 0000 1388 FFC0        			addi.l  #5000,(v_scorelife).w ; increase requirement by 50000
0002051A 4A38 FFF8                  			tst.b   (v_megadrive).w
0002051E 6B00                       			bmi.s   @noextralife ; branch if Mega Drive is Japanese
00020520 5238 FE12                  			addq.b  #1,(v_lives).w ; give extra life
00020524 5238 FE1C                  			addq.b  #1,(f_lifecount).w
00020532                            
00020532                            @locret_1C6B6:
00020532                            @noextralife:
00020532 4E75                       		rts	
00020534                            ; End of function AddPoints
00020534                            
00020534                            		include	"_inc\HUD_Update.asm"
00020534                            ; ---------------------------------------------------------------------------
00020534                            ; Subroutine to	update the HUD
00020534                            ; ---------------------------------------------------------------------------
00020534                            
00020534                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020534                            
00020534                            hudVRAM:	macro loc
00020534                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),d0
00020534                            		endm
00020534                            
00020534                            
00020534                            HUD_Update:
00020534 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	on?
00020538 6600 0000                  		bne.w	HudDebug	; if yes, branch
0002053C 4A38 FE1F                  		tst.b	(f_scorecount).w ; does the score need updating?
00020540 6700                       		beq.s	@chkrings	; if not, branch
00020542                            
00020542 4238 FE1F                  		clr.b	(f_scorecount).w
00020546 203C 5C80 0003             		hudVRAM	$DC80		; set VRAM address
0002054C 2238 FE26                  		move.l	(v_score).w,d1	; load score
00020550 6100 0000                  		bsr.w	Hud_Score
00020554                            
00020554                            	@chkrings:
00020554 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
00020558 6700                       		beq.s	@chktime	; if not, branch
0002055A 6A00                       		bpl.s	@notzero
0002055C 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
00020560                            
00020560                            	@notzero:
00020560 4238 FE1D                  		clr.b	(f_ringcount).w
00020564 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0002056A 7200                       		moveq	#0,d1
0002056C 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
00020570 6100 0000                  		bsr.w	Hud_Rings
00020574                            
00020574                            	@chktime:
00020574 4A38 FE1E                  		tst.b	(f_timecount).w	; does the time	need updating?
00020578 6700                       		beq.s	@chklives	; if not, branch
0002057A 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
0002057E 6600                       		bne.s	@chklives	; if yes, branch
00020580 43F8 FE22                  		lea	(v_time).w,a1
00020584 0C99 0009 3B3B             		cmpi.l	#(9*$10000)+(59*$100)+59,(a1)+ ; is the time 9:59:59?
0002058A 6700                       		beq.s	TimeOver	; if yes, branch
0002058C                            
0002058C 5221                       		addq.b	#1,-(a1)	; increment 1/60s counter
0002058E 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
00020592 6500                       		bcs.s	@chklives
00020594 12BC 0000                  		move.b	#0,(a1)
00020598 5221                       		addq.b	#1,-(a1)	; increment second counter
0002059A 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0002059E 6500                       		bcs.s	@updatetime
000205A0 12BC 0000                  		move.b	#0,(a1)
000205A4 5221                       		addq.b	#1,-(a1)	; increment minute counter
000205A6 0C11 0009                  		cmpi.b	#9,(a1)		; check if passed 9
000205AA 6500                       		bcs.s	@updatetime
000205AC 12BC 0009                  		move.b	#9,(a1)		; keep as 9
000205B0                            
000205B0                            	@updatetime:
000205B0 203C 5E40 0003             		hudVRAM	$DE40
000205B6 7200                       		moveq	#0,d1
000205B8 1238 FE23                  		move.b	(v_timemin).w,d1 ; load	minutes
000205BC 6100 0000                  		bsr.w	Hud_Mins
000205C0 203C 5EC0 0003             		hudVRAM	$DEC0
000205C6 7200                       		moveq	#0,d1
000205C8 1238 FE24                  		move.b	(v_timesec).w,d1 ; load	seconds
000205CC 6100 0000                  		bsr.w	Hud_Secs
000205D0                            
000205D0                            	@chklives:
000205D0 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
000205D4 6700                       		beq.s	@chkbonus	; if not, branch
000205D6 4238 FE1C                  		clr.b	(f_lifecount).w
000205DA 6100 0000                  		bsr.w	Hud_Lives
000205DE                            
000205DE                            	@chkbonus:
000205DE 4A38 F7D6                  		tst.b	(f_endactbonus).w ; do time/ring bonus counters need updating?
000205E2 6700                       		beq.s	@finish		; if not, branch
000205E4 4238 F7D6                  		clr.b	(f_endactbonus).w
000205F2 7200                       		moveq	#0,d1
000205F4 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
000205F8 6100 0000                  		bsr.w	Hud_TimeRingBonus
000205FC 7200                       		moveq	#0,d1
000205FE 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
00020602 6100 0000                  		bsr.w	Hud_TimeRingBonus
00020606                            
00020606                            	@finish:
00020606 4E75                       		rts	
00020608                            ; ===========================================================================
00020608                            
00020608                            TimeOver:
00020608 4238 FE1E                  		clr.b	(f_timecount).w
0002060C 41F8 D000                  		lea	(v_player).w,a0
00020610 2448                       		movea.l	a0,a2
00020612 6100 E824                  		bsr.w	KillSonic
00020616 11FC 0001 FE1A             		move.b	#1,(f_timeover).w
0002061C 4E75                       		rts	
0002061E                            ; ===========================================================================
0002061E                            
0002061E                            HudDebug:
0002061E 6100 0000                  		bsr.w	HudDb_XY
00020622 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
00020626 6700                       		beq.s	@objcounter	; if not, branch
00020628 6A00                       		bpl.s	@notzero
0002062A 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0002062E                            
0002062E                            	@notzero:
0002062E 4238 FE1D                  		clr.b	(f_ringcount).w
00020632 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
00020638 7200                       		moveq	#0,d1
0002063A 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0002063E 6100 0000                  		bsr.w	Hud_Rings
00020642                            
00020642                            	@objcounter:
00020642 203C 5EC0 0003             		hudVRAM	$DEC0		; set VRAM address
00020648 7200                       		moveq	#0,d1
0002064A 1238 F62C                  		move.b	(v_spritecount).w,d1 ; load "number of objects" counter
0002064E 6100 0000                  		bsr.w	Hud_Secs
00020652 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
00020656 6700                       		beq.s	@chkbonus	; if not, branch
00020658 4238 FE1C                  		clr.b	(f_lifecount).w
0002065C 6100 0000                  		bsr.w	Hud_Lives
00020660                            
00020660                            	@chkbonus:
00020660 4A38 F7D6                  		tst.b	(f_endactbonus).w ; does the ring/time bonus counter need updating?
00020664 6700                       		beq.s	@finish		; if not, branch
00020666 4238 F7D6                  		clr.b	(f_endactbonus).w
00020674 7200                       		moveq	#0,d1
00020676 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0002067A 6100 0000                  		bsr.w	Hud_TimeRingBonus
0002067E 7200                       		moveq	#0,d1
00020680 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
00020684 6100 0000                  		bsr.w	Hud_TimeRingBonus
00020688                            
00020688                            	@finish:
00020688 4E75                       		rts	
0002068A                            ; End of function HUD_Update
0002068A                            
0002068A                            ; ---------------------------------------------------------------------------
0002068A                            ; Subroutine to	load "0" on the	HUD
0002068A                            ; ---------------------------------------------------------------------------
0002068A                            
0002068A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002068A                            
0002068A                            
0002068A                            Hud_LoadZero:
00020694 45FA 0000                  		lea	Hud_TilesZero(pc),a2
00020698 343C 0002                  		move.w	#2,d2
0002069C 6000                       		bra.s	loc_1C83E
0002069E                            ; End of function Hud_LoadZero
0002069E                            
0002069E                            ; ---------------------------------------------------------------------------
0002069E                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0002069E                            ; ---------------------------------------------------------------------------
0002069E                            
0002069E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002069E                            
0002069E                            
0002069E                            Hud_Base:
0002069E 4DF9 00C0 0000             		lea	($C00000).l,a6
000206A4 6100 0000                  		bsr.w	Hud_Lives
000206B2 45FA 0000                  		lea	Hud_TilesBase(pc),a2
000206B6 343C 000E                  		move.w	#$E,d2
000206BA                            
000206BA                            loc_1C83E:
000206BA 43FA 0000                  		lea	Art_Hud(pc),a1
000206BE                            
000206BE                            loc_1C842:
000206BE 323C 000F                  		move.w	#$F,d1
000206C2 101A                       		move.b	(a2)+,d0
000206C4 6B00                       		bmi.s	loc_1C85E
000206C6 4880                       		ext.w	d0
000206C8 EB48                       		lsl.w	#5,d0
000206CA 47F1 0000                  		lea	(a1,d0.w),a3
000206CE                            
000206CE                            loc_1C852:
000206CE 2C9B                       		move.l	(a3)+,(a6)
000206D0 51C9 FFFC                  		dbf	d1,loc_1C852
000206D4                            
000206D4                            loc_1C858:
000206D4 51CA FFE8                  		dbf	d2,loc_1C842
000206D8                            
000206D8 4E75                       		rts	
000206DA                            ; ===========================================================================
000206DA                            
000206DA                            loc_1C85E:
000206DA 2CBC 0000 0000             		move.l	#0,(a6)
000206E0 51C9 FFF8                  		dbf	d1,loc_1C85E
000206E4                            
000206E4 60EE                       		bra.s	loc_1C858
000206E6                            ; End of function Hud_Base
000206E6                            
000206E6                            ; ===========================================================================
000206E6 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
000206F2 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
000206F6                            ; ---------------------------------------------------------------------------
000206F6                            ; Subroutine to	load debug mode	numbers	patterns
000206F6                            ; ---------------------------------------------------------------------------
000206F6                            
000206F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000206F6                            
000206F6                            
000206F6                            HudDb_XY:
00020700 3238 F700                  		move.w	(v_screenposx).w,d1 ; load camera x-position
00020704 4841                       		swap	d1
00020706 3238 D008                  		move.w	(v_player+obX).w,d1 ; load Sonic's x-position
0002070A 6100                       		bsr.s	HudDb_XY2
0002070C 3238 F704                  		move.w	(v_screenposy).w,d1 ; load camera y-position
00020710 4841                       		swap	d1
00020712 3238 D00C                  		move.w	(v_player+obY).w,d1 ; load Sonic's y-position
00020716                            ; End of function HudDb_XY
00020716                            
00020716                            
00020716                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020716                            
00020716                            
00020716                            HudDb_XY2:
00020716 7C07                       		moveq	#7,d6
00020718 43F9 0000 059E             		lea	(Art_Text).l,a1
0002071E                            
0002071E                            HudDb_XYLoop:
0002071E E959                       		rol.w	#4,d1
00020720 3401                       		move.w	d1,d2
00020722 0242 000F                  		andi.w	#$F,d2
00020726 0C42 000A                  		cmpi.w	#$A,d2
0002072A 6500                       		bcs.s	loc_1C8B2
0002072C 5E42                       		addq.w	#7,d2
0002072E                            
0002072E                            loc_1C8B2:
0002072E EB4A                       		lsl.w	#5,d2
00020730 47F1 2000                  		lea	(a1,d2.w),a3
00020734 2C9B                       		move.l	(a3)+,(a6)
00020736 2C9B                       		move.l	(a3)+,(a6)
00020738 2C9B                       		move.l	(a3)+,(a6)
0002073A 2C9B                       		move.l	(a3)+,(a6)
0002073C 2C9B                       		move.l	(a3)+,(a6)
0002073E 2C9B                       		move.l	(a3)+,(a6)
00020740 2C9B                       		move.l	(a3)+,(a6)
00020742 2C9B                       		move.l	(a3)+,(a6)
00020744 4841                       		swap	d1
00020746 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0002074A                            
0002074A 4E75                       		rts	
0002074C                            ; End of function HudDb_XY2
0002074C                            
0002074C                            ; ---------------------------------------------------------------------------
0002074C                            ; Subroutine to	load rings numbers patterns
0002074C                            ; ---------------------------------------------------------------------------
0002074C                            
0002074C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002074C                            
0002074C                            
0002074C                            Hud_Rings:
0002074C 45F9 0000 0000             		lea	(Hud_100).l,a2
00020752 7C02                       		moveq	#2,d6
00020754 6000                       		bra.s	Hud_LoadArt
00020756                            ; End of function Hud_Rings
00020756                            
00020756                            ; ---------------------------------------------------------------------------
00020756                            ; Subroutine to	load score numbers patterns
00020756                            ; ---------------------------------------------------------------------------
00020756                            
00020756                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020756                            
00020756                            
00020756                            Hud_Score:
00020756 45F9 0000 0000             		lea	(Hud_100000).l,a2
0002075C 7C05                       		moveq	#5,d6
0002075E                            
0002075E                            Hud_LoadArt:
0002075E 7800                       		moveq	#0,d4
00020760 43FA 0000                  		lea	Art_Hud(pc),a1
00020764                            
00020764                            Hud_ScoreLoop:
00020764 7400                       		moveq	#0,d2
00020766 261A                       		move.l	(a2)+,d3
00020768                            
00020768                            loc_1C8EC:
00020768 9283                       		sub.l	d3,d1
0002076A 6500                       		bcs.s	loc_1C8F4
0002076C 5242                       		addq.w	#1,d2
0002076E 60F8                       		bra.s	loc_1C8EC
00020770                            ; ===========================================================================
00020770                            
00020770                            loc_1C8F4:
00020770 D283                       		add.l	d3,d1
00020772 4A42                       		tst.w	d2
00020774 6700                       		beq.s	loc_1C8FE
00020776 383C 0001                  		move.w	#1,d4
0002077A                            
0002077A                            loc_1C8FE:
0002077A 4A44                       		tst.w	d4
0002077C 6700                       		beq.s	loc_1C92C
0002077E ED4A                       		lsl.w	#6,d2
00020780 2D40 0004                  		move.l	d0,4(a6)
00020784 47F1 2000                  		lea	(a1,d2.w),a3
00020788 2C9B                       		move.l	(a3)+,(a6)
0002078A 2C9B                       		move.l	(a3)+,(a6)
0002078C 2C9B                       		move.l	(a3)+,(a6)
0002078E 2C9B                       		move.l	(a3)+,(a6)
00020790 2C9B                       		move.l	(a3)+,(a6)
00020792 2C9B                       		move.l	(a3)+,(a6)
00020794 2C9B                       		move.l	(a3)+,(a6)
00020796 2C9B                       		move.l	(a3)+,(a6)
00020798 2C9B                       		move.l	(a3)+,(a6)
0002079A 2C9B                       		move.l	(a3)+,(a6)
0002079C 2C9B                       		move.l	(a3)+,(a6)
0002079E 2C9B                       		move.l	(a3)+,(a6)
000207A0 2C9B                       		move.l	(a3)+,(a6)
000207A2 2C9B                       		move.l	(a3)+,(a6)
000207A4 2C9B                       		move.l	(a3)+,(a6)
000207A6 2C9B                       		move.l	(a3)+,(a6)
000207A8                            
000207A8                            loc_1C92C:
000207A8 0680 0040 0000             		addi.l	#$400000,d0
000207AE 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
000207B2                            
000207B2 4E75                       		rts	
000207B4                            
000207B4                            ; End of function Hud_Score
000207B4                            ; End of function Hud_Score
000207B4                            
000207B4                            ; ---------------------------------------------------------------------------
000207B4                            ; Subroutine to	load countdown numbers on the continue screen
000207B4                            ; ---------------------------------------------------------------------------
000207B4                            
000207B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000207B4                            
000207B4                            
000207B4                            ContScrCounter:
000207BE 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000207C4 45F9 0000 0000             		lea	(Hud_10).l,a2
000207CA 7C01                       		moveq	#1,d6
000207CC 7800                       		moveq	#0,d4
000207CE 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
000207D2                            
000207D2                            ContScr_Loop:
000207D2 7400                       		moveq	#0,d2
000207D4 261A                       		move.l	(a2)+,d3
000207D6                            
000207D6                            loc_1C95A:
000207D6 9283                       		sub.l	d3,d1
000207D8 6500                       		blo.s	loc_1C962
000207DA 5242                       		addq.w	#1,d2
000207DC 60F8                       		bra.s	loc_1C95A
000207DE                            ; ===========================================================================
000207DE                            
000207DE                            loc_1C962:
000207DE D283                       		add.l	d3,d1
000207E0 ED4A                       		lsl.w	#6,d2
000207E2 47F1 2000                  		lea	(a1,d2.w),a3
000207E6 2C9B                       		move.l	(a3)+,(a6)
000207E8 2C9B                       		move.l	(a3)+,(a6)
000207EA 2C9B                       		move.l	(a3)+,(a6)
000207EC 2C9B                       		move.l	(a3)+,(a6)
000207EE 2C9B                       		move.l	(a3)+,(a6)
000207F0 2C9B                       		move.l	(a3)+,(a6)
000207F2 2C9B                       		move.l	(a3)+,(a6)
000207F4 2C9B                       		move.l	(a3)+,(a6)
000207F6 2C9B                       		move.l	(a3)+,(a6)
000207F8 2C9B                       		move.l	(a3)+,(a6)
000207FA 2C9B                       		move.l	(a3)+,(a6)
000207FC 2C9B                       		move.l	(a3)+,(a6)
000207FE 2C9B                       		move.l	(a3)+,(a6)
00020800 2C9B                       		move.l	(a3)+,(a6)
00020802 2C9B                       		move.l	(a3)+,(a6)
00020804 2C9B                       		move.l	(a3)+,(a6)
00020806 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0002080A                            
0002080A 4E75                       		rts	
0002080C                            ; End of function ContScrCounter
0002080C                            
0002080C                            ; ===========================================================================
0002080C                            
0002080C                            		include	"_inc\HUD (part 2).asm"
0002080C                            ; ---------------------------------------------------------------------------
0002080C                            ; HUD counter sizes
0002080C                            ; ---------------------------------------------------------------------------
0002080C 0001 86A0                  Hud_100000:	dc.l 100000
00020810 0000 2710                  Hud_10000:	dc.l 10000
00020814 0000 03E8                  Hud_1000:	dc.l 1000
00020818 0000 0064                  Hud_100:	dc.l 100
0002081C 0000 000A                  Hud_10:		dc.l 10
00020820 0000 0001                  Hud_1:		dc.l 1
00020824                            
00020824                            ; ---------------------------------------------------------------------------
00020824                            ; Subroutine to	load time numbers patterns
00020824                            ; ---------------------------------------------------------------------------
00020824                            
00020824                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020824                            
00020824                            
00020824                            Hud_Mins:
00020824 45F9 0002 0820             		lea	(Hud_1).l,a2
0002082A 7C00                       		moveq	#0,d6
0002082C 6000                       		bra.s	loc_1C9BA
0002082E                            ; End of function Hud_Mins
0002082E                            
0002082E                            
0002082E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002082E                            
0002082E                            
0002082E                            Hud_Secs:
0002082E 45F9 0002 081C             		lea	(Hud_10).l,a2
00020834 7C01                       		moveq	#1,d6
00020836                            
00020836                            loc_1C9BA:
00020836 7800                       		moveq	#0,d4
00020838 43FA 0000                  		lea	Art_Hud(pc),a1
0002083C                            
0002083C                            Hud_TimeLoop:
0002083C 7400                       		moveq	#0,d2
0002083E 261A                       		move.l	(a2)+,d3
00020840                            
00020840                            loc_1C9C4:
00020840 9283                       		sub.l	d3,d1
00020842 6500                       		bcs.s	loc_1C9CC
00020844 5242                       		addq.w	#1,d2
00020846 60F8                       		bra.s	loc_1C9C4
00020848                            ; ===========================================================================
00020848                            
00020848                            loc_1C9CC:
00020848 D283                       		add.l	d3,d1
0002084A 4A42                       		tst.w	d2
0002084C 6700                       		beq.s	loc_1C9D6
0002084E 383C 0001                  		move.w	#1,d4
00020852                            
00020852                            loc_1C9D6:
00020852 ED4A                       		lsl.w	#6,d2
00020854 2D40 0004                  		move.l	d0,4(a6)
00020858 47F1 2000                  		lea	(a1,d2.w),a3
0002085C 2C9B                       		move.l	(a3)+,(a6)
0002085E 2C9B                       		move.l	(a3)+,(a6)
00020860 2C9B                       		move.l	(a3)+,(a6)
00020862 2C9B                       		move.l	(a3)+,(a6)
00020864 2C9B                       		move.l	(a3)+,(a6)
00020866 2C9B                       		move.l	(a3)+,(a6)
00020868 2C9B                       		move.l	(a3)+,(a6)
0002086A 2C9B                       		move.l	(a3)+,(a6)
0002086C 2C9B                       		move.l	(a3)+,(a6)
0002086E 2C9B                       		move.l	(a3)+,(a6)
00020870 2C9B                       		move.l	(a3)+,(a6)
00020872 2C9B                       		move.l	(a3)+,(a6)
00020874 2C9B                       		move.l	(a3)+,(a6)
00020876 2C9B                       		move.l	(a3)+,(a6)
00020878 2C9B                       		move.l	(a3)+,(a6)
0002087A 2C9B                       		move.l	(a3)+,(a6)
0002087C 0680 0040 0000             		addi.l	#$400000,d0
00020882 51CE FFB8                  		dbf	d6,Hud_TimeLoop
00020886                            
00020886 4E75                       		rts	
00020888                            ; End of function Hud_Secs
00020888                            
00020888                            ; ---------------------------------------------------------------------------
00020888                            ; Subroutine to	load time/ring bonus numbers patterns
00020888                            ; ---------------------------------------------------------------------------
00020888                            
00020888                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020888                            
00020888                            
00020888                            Hud_TimeRingBonus:
00020888 45F9 0002 0814             		lea	(Hud_1000).l,a2
0002088E 7C03                       		moveq	#3,d6
00020890 7800                       		moveq	#0,d4
00020892 43FA 0000                  		lea	Art_Hud(pc),a1
00020896                            
00020896                            Hud_BonusLoop:
00020896 7400                       		moveq	#0,d2
00020898 261A                       		move.l	(a2)+,d3
0002089A                            
0002089A                            loc_1CA1E:
0002089A 9283                       		sub.l	d3,d1
0002089C 6500                       		bcs.s	loc_1CA26
0002089E 5242                       		addq.w	#1,d2
000208A0 60F8                       		bra.s	loc_1CA1E
000208A2                            ; ===========================================================================
000208A2                            
000208A2                            loc_1CA26:
000208A2 D283                       		add.l	d3,d1
000208A4 4A42                       		tst.w	d2
000208A6 6700                       		beq.s	loc_1CA30
000208A8 383C 0001                  		move.w	#1,d4
000208AC                            
000208AC                            loc_1CA30:
000208AC 4A44                       		tst.w	d4
000208AE 6700                       		beq.s	Hud_ClrBonus
000208B0 ED4A                       		lsl.w	#6,d2
000208B2 47F1 2000                  		lea	(a1,d2.w),a3
000208B6 2C9B                       		move.l	(a3)+,(a6)
000208B8 2C9B                       		move.l	(a3)+,(a6)
000208BA 2C9B                       		move.l	(a3)+,(a6)
000208BC 2C9B                       		move.l	(a3)+,(a6)
000208BE 2C9B                       		move.l	(a3)+,(a6)
000208C0 2C9B                       		move.l	(a3)+,(a6)
000208C2 2C9B                       		move.l	(a3)+,(a6)
000208C4 2C9B                       		move.l	(a3)+,(a6)
000208C6 2C9B                       		move.l	(a3)+,(a6)
000208C8 2C9B                       		move.l	(a3)+,(a6)
000208CA 2C9B                       		move.l	(a3)+,(a6)
000208CC 2C9B                       		move.l	(a3)+,(a6)
000208CE 2C9B                       		move.l	(a3)+,(a6)
000208D0 2C9B                       		move.l	(a3)+,(a6)
000208D2 2C9B                       		move.l	(a3)+,(a6)
000208D4 2C9B                       		move.l	(a3)+,(a6)
000208D6                            
000208D6                            loc_1CA5A:
000208D6 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
000208DA                            
000208DA 4E75                       		rts	
000208DC                            ; ===========================================================================
000208DC                            
000208DC                            Hud_ClrBonus:
000208DC 7A0F                       		moveq	#$F,d5
000208DE                            
000208DE                            Hud_ClrBonusLoop:
000208DE 2CBC 0000 0000             		move.l	#0,(a6)
000208E4 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
000208E8                            
000208E8 60EC                       		bra.s	loc_1CA5A
000208EA                            ; End of function Hud_TimeRingBonus
000208EA                            
000208EA                            ; ---------------------------------------------------------------------------
000208EA                            ; Subroutine to	load uncompressed lives	counter	patterns
000208EA                            ; ---------------------------------------------------------------------------
000208EA                            
000208EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000208EA                            
000208EA                            
000208EA                            Hud_Lives:
000208EA 203C 7BA0 0003             		hudVRAM	$FBA0		; set VRAM address
000208F0 7200                       		moveq	#0,d1
000208F2 1238 FE12                  		move.b	(v_lives).w,d1	; load number of lives
000208F6 45F9 0002 081C             		lea	(Hud_10).l,a2
000208FC 7C01                       		moveq	#1,d6
000208FE 7800                       		moveq	#0,d4
00020900 43FA 0000                  		lea	Art_LivesNums(pc),a1
00020904                            		
00020904                            
00020904                            Hud_LivesLoop:
00020904 2D40 0004                  		move.l	d0,4(a6)
00020908 7400                       		moveq	#0,d2
0002090A 261A                       		move.l	(a2)+,d3
0002090C                            
0002090C                            loc_1CA90:
0002090C 9283                       		sub.l	d3,d1
0002090E 6500                       		bcs.s	loc_1CA98
00020910 5242                       		addq.w	#1,d2
00020912 60F8                       		bra.s	loc_1CA90
00020914                            ; ===========================================================================
00020914                            
00020914                            loc_1CA98:
00020914 D283                       		add.l	d3,d1
00020916 4A42                       		tst.w	d2
00020918 6700                       		beq.s	loc_1CAA2
0002091A 383C 0001                  		move.w	#1,d4
0002091E                            
0002091E                            loc_1CAA2:
0002091E 4A44                       		tst.w	d4
00020920 6700                       		beq.s	Hud_ClrLives
00020922                            
00020922                            loc_1CAA6:
00020922 EB4A                       		lsl.w	#5,d2
00020924 47F1 2000                  		lea	(a1,d2.w),a3
00020928 2C9B                       		move.l	(a3)+,(a6)
0002092A 2C9B                       		move.l	(a3)+,(a6)
0002092C 2C9B                       		move.l	(a3)+,(a6)
0002092E 2C9B                       		move.l	(a3)+,(a6)
00020930 2C9B                       		move.l	(a3)+,(a6)
00020932 2C9B                       		move.l	(a3)+,(a6)
00020934 2C9B                       		move.l	(a3)+,(a6)
00020936 2C9B                       		move.l	(a3)+,(a6)
00020938                            
00020938                            loc_1CABC:
00020938 0680 0040 0000             		addi.l	#$400000,d0
0002093E 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
00020942                            
00020942 4E75                       		rts	
00020944                            ; ===========================================================================
00020944                            
00020944                            Hud_ClrLives:
00020944 4A46                       		tst.w	d6
00020946 67DA                       		beq.s	loc_1CAA6
00020948 7A07                       		moveq	#7,d5
0002094A                            
0002094A                            Hud_ClrLivesLoop:
0002094A 2CBC 0000 0000             		move.l	#0,(a6)
00020950 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
00020954 60E2                       		bra.s	loc_1CABC
00020956                            ; End of function Hud_Lives
00020956                            ; End of function Hud_Lives
00020956                            
00020956                            Art_Hud:	incbin	"artunc\HUD Numbers.bin" ; 8x16 pixel numbers on HUD
00020C56                            		even
00020C56                            Art_LivesNums:	incbin	"artunc\Lives Counter Numbers.bin" ; 8x8 pixel numbers on lives counter
00020D96                            		even
00020D96                            
00020D96                            		include	"_incObj\DebugMode.asm"
00020D96                            ; ---------------------------------------------------------------------------
00020D96                            ; When debug mode is currently in use
00020D96                            ; ---------------------------------------------------------------------------
00020D96                            
00020D96                            DebugMode:
00020D96 7000                       		moveq	#0,d0
00020D98 1038 FE08                  		move.b	(v_debuguse).w,d0
00020D9C 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
00020DA0 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
00020DA4                            ; ===========================================================================
00020DA4 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
00020DA6 0000                       		dc.w Debug_Action-Debug_Index
00020DA8                            ; ===========================================================================
00020DA8                            
00020DA8                            Debug_Main:	; Routine 0
00020DA8 5438 FE08                  		addq.b	#2,(v_debuguse).w
00020DAC 31F8 F72C FEF0             		move.w	(v_limittop2).w,(v_limittopdb).w ; buffer level x-boundary
00020DB2 31F8 F726 FEF2             		move.w	(v_limitbtm1).w,(v_limitbtmdb).w ; buffer level y-boundary
00020DB8 31FC 0000 F72C             		move.w	#0,(v_limittop2).w
00020DBE 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00020DC4 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00020DCA 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
00020DD0 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00020DD6 117C 0000 001A             		move.b	#0,obFrame(a0)
00020DDC 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00020DE2 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
00020DE8 6600                       		bne.s	@islevel	; if not, branch
00020DEA                            
00020DEA 31FC 0000 F782             		move.w	#0,(v_ssrotate).w ; stop special stage rotating
00020DF0 31FC 0000 F780             		move.w	#0,(v_ssangle).w ; make	special	stage "upright"
00020DF6 7006                       		moveq	#6,d0		; use 6th debug	item list
00020DF8 6000                       		bra.s	@selectlist
00020DFA                            ; ===========================================================================
00020DFA                            
00020DFA                            @islevel:
00020DFA 7000                       		moveq	#0,d0
00020DFC 1038 FE10                  		move.b	(v_zone).w,d0
00020E00                            
00020E00                            @selectlist:
00020E00 45F9 0000 0000             		lea	(DebugList).l,a2
00020E06 D040                       		add.w	d0,d0
00020E08 D4F2 0000                  		adda.w	(a2,d0.w),a2
00020E0C 3C1A                       		move.w	(a2)+,d6
00020E0E BC38 FE06                  		cmp.b	(v_debugitem).w,d6 ; have you gone past the last item?
00020E12 6200                       		bhi.s	@noreset	; if not, branch
00020E14 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; back to start of list
00020E1A                            
00020E1A                            	@noreset:
00020E1A 6100 0000                  		bsr.w	Debug_ShowItem
00020E1E 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
00020E24 11FC 0001 FE0B             		move.b	#1,(v_debugyspeed).w
00020E2A                            
00020E2A                            Debug_Action:	; Routine 2
00020E2A 7006                       		moveq	#6,d0
00020E2C 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w
00020E32 6700                       		beq.s	@isntlevel
00020E34                            
00020E34 7000                       		moveq	#0,d0
00020E36 1038 FE10                  		move.b	(v_zone).w,d0
00020E3A                            
00020E3A                            	@isntlevel:
00020E3A 45F9 0000 0000             		lea	(DebugList).l,a2
00020E40 D040                       		add.w	d0,d0
00020E42 D4F2 0000                  		adda.w	(a2,d0.w),a2
00020E46 3C1A                       		move.w	(a2)+,d6
00020E48 6100 0000                  		bsr.w	Debug_Control
00020E4C 4EF9 0000 F57E             		jmp	(DisplaySprite).l
00020E52                            
00020E52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020E52                            
00020E52                            
00020E52                            Debug_Control:
00020E52 7800                       		moveq	#0,d4
00020E54 323C 0001                  		move.w	#1,d1
00020E58 1838 F605                  		move.b	(v_jpadpress1).w,d4
00020E5C 0244 000F                  		andi.w	#btnDir,d4	; is up/down/left/right	pressed?
00020E60 6600                       		bne.s	@dirpressed	; if yes, branch
00020E62                            
00020E62 1038 F604                  		move.b	(v_jpadhold1).w,d0
00020E66 0240 000F                  		andi.w	#btnDir,d0	; is up/down/left/right	held?
00020E6A 6600                       		bne.s	@dirheld	; if yes, branch
00020E6C                            
00020E6C 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
00020E72 11FC 000F FE0B             		move.b	#15,(v_debugyspeed).w
00020E78 6000 0000                  		bra.w	Debug_ChgItem
00020E7C                            ; ===========================================================================
00020E7C                            
00020E7C                            @dirheld:
00020E7C 5338 FE0A                  		subq.b	#1,(v_debugxspeed).w
00020E80 6600                       		bne.s	loc_1D01C
00020E82 11FC 0001 FE0A             		move.b	#1,(v_debugxspeed).w
00020E88 5238 FE0B                  		addq.b	#1,(v_debugyspeed).w
00020E8C 6600                       		bne.s	@dirpressed
00020E8E 11FC 00FF FE0B             		move.b	#-1,(v_debugyspeed).w
00020E94                            
00020E94                            @dirpressed:
00020E94 1838 F604                  		move.b	(v_jpadhold1).w,d4
00020E98                            
00020E98                            loc_1D01C:
00020E98 7200                       		moveq	#0,d1
00020E9A 1238 FE0B                  		move.b	(v_debugyspeed).w,d1
00020E9E 5241                       		addq.w	#1,d1
00020EA0 4841                       		swap	d1
00020EA2 E881                       		asr.l	#4,d1
00020EA4 2428 000C                  		move.l	obY(a0),d2
00020EA8 2628 0008                  		move.l	obX(a0),d3
00020EAC 0804 0000                  		btst	#bitUp,d4	; is up	being pressed?
00020EB0 6700                       		beq.s	loc_1D03C	; if not, branch
00020EB2 9481                       		sub.l	d1,d2
00020EB4 6400                       		bcc.s	loc_1D03C
00020EB6 7400                       		moveq	#0,d2
00020EB8                            
00020EB8                            loc_1D03C:
00020EB8 0804 0001                  		btst	#bitDn,d4	; is down being	pressed?
00020EBC 6700                       		beq.s	loc_1D052	; if not, branch
00020EBE D481                       		add.l	d1,d2
00020EC0 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
00020EC6 6500                       		bcs.s	loc_1D052
00020EC8 243C 07FF 0000             		move.l	#$7FF0000,d2
00020ECE                            
00020ECE                            loc_1D052:
00020ECE 0804 0002                  		btst	#bitL,d4
00020ED2 6700                       		beq.s	loc_1D05E
00020ED4 9681                       		sub.l	d1,d3
00020ED6 6400                       		bcc.s	loc_1D05E
00020ED8 7600                       		moveq	#0,d3
00020EDA                            
00020EDA                            loc_1D05E:
00020EDA 0804 0003                  		btst	#bitR,d4
00020EDE 6700                       		beq.s	loc_1D066
00020EE0 D681                       		add.l	d1,d3
00020EE2                            
00020EE2                            loc_1D066:
00020EE2 2142 000C                  		move.l	d2,obY(a0)
00020EE6 2143 0008                  		move.l	d3,obX(a0)
00020EEA                            
00020EEA                            Debug_ChgItem:
00020EEA 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
00020EF0 6700                       		beq.s	@createitem	; if not, branch
00020EF2 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
00020EF8 6700                       		beq.s	@nextitem	; if not, branch
00020EFA 5338 FE06                  		subq.b	#1,(v_debugitem).w ; go back 1 item
00020EFE 6400                       		bcc.s	@display
00020F00 DD38 FE06                  		add.b	d6,(v_debugitem).w
00020F04 6000                       		bra.s	@display
00020F06                            ; ===========================================================================
00020F06                            
00020F06                            @nextitem:
00020F06 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
00020F0C 6700                       		beq.s	@createitem	; if not, branch
00020F0E 5238 FE06                  		addq.b	#1,(v_debugitem).w ; go forwards 1 item
00020F12 BC38 FE06                  		cmp.b	(v_debugitem).w,d6
00020F16 6200                       		bhi.s	@display
00020F18 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; loop back to first item
00020F1E                            
00020F1E                            	@display:
00020F1E 6000 0000                  		bra.w	Debug_ShowItem
00020F22                            ; ===========================================================================
00020F22                            
00020F22                            @createitem:
00020F22 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
00020F28 6700                       		beq.s	@backtonormal	; if not, branch
00020F2A 4EB9 0000 FB18             		jsr	(FindFreeObj).l
00020F30 6600                       		bne.s	@backtonormal
00020F32 3368 0008 0008             		move.w	obX(a0),obX(a1)
00020F38 3368 000C 000C             		move.w	obY(a0),obY(a1)
00020F3E 12A8 0004                  		move.b	4(a0),0(a1)	; create object
00020F42 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00020F48 1368 0001 0022             		move.b	obRender(a0),obStatus(a1)
00020F4E 0229 007F 0022             		andi.b	#$7F,obStatus(a1)
00020F54 7000                       		moveq	#0,d0
00020F56 1038 FE06                  		move.b	(v_debugitem).w,d0
00020F5A E748                       		lsl.w	#3,d0
00020F5C 1372 0004 0028             		move.b	4(a2,d0.w),obSubtype(a1)
00020F62 4E75                       		rts	
00020F64                            ; ===========================================================================
00020F64                            
00020F64                            @backtonormal:
00020F64 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
00020F6A 6700                       		beq.s	@stayindebug	; if not, branch
00020F6C 7000                       		moveq	#0,d0
00020F6E 31C0 FE08                  		move.w	d0,(v_debuguse).w ; deactivate debug mode
00020F72 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
00020F7A 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
00020F80 11C0 D01C                  		move.b	d0,(v_player+obAnim).w
00020F84 3140 000A                  		move.w	d0,obX+2(a0)
00020F88 3140 000E                  		move.w	d0,obY+2(a0)
00020F8C 31F8 FEF0 F72C             		move.w	(v_limittopdb).w,(v_limittop2).w ; restore level boundaries
00020F92 31F8 FEF2 F726             		move.w	(v_limitbtmdb).w,(v_limitbtm1).w
00020F98 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; are you in the special stage?
00020F9E 6600                       		bne.s	@stayindebug	; if not, branch
00020FA0                            
00020FA0 4278 F780                  		clr.w	(v_ssangle).w
00020FA4 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set new level rotation speed
00020FAA 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
00020FB2 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
00020FB8 11FC 0002 D01C             		move.b	#id_Roll,(v_player+obAnim).w
00020FBE 08F8 0002 D022             		bset	#2,(v_player+obStatus).w
00020FC4 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
00020FCA                            
00020FCA                            	@stayindebug:
00020FCA 4E75                       		rts	
00020FCC                            ; End of function Debug_Control
00020FCC                            
00020FCC                            
00020FCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020FCC                            
00020FCC                            
00020FCC                            Debug_ShowItem:
00020FCC 7000                       		moveq	#0,d0
00020FCE 1038 FE06                  		move.b	(v_debugitem).w,d0
00020FD2 E748                       		lsl.w	#3,d0
00020FD4 2172 0000 0004             		move.l	(a2,d0.w),obMap(a0) ; load mappings for item
00020FDA 3172 0006 0002             		move.w	6(a2,d0.w),obGfx(a0) ; load VRAM setting for item
00020FE0 1172 0005 001A             		move.b	5(a2,d0.w),obFrame(a0) ; load frame number for item
00020FE6 4E75                       		rts	
00020FE8                            ; End of function Debug_ShowItem
00020FE8                            ; End of function Debug_ShowItem
00020FE8                            		include	"_inc\DebugList.asm"
00020FE8                            ; ---------------------------------------------------------------------------
00020FE8                            ; Debug	mode item lists
00020FE8                            ; ---------------------------------------------------------------------------
00020FE8                            DebugList:
00020FE8 0000                       	dc.w @GHZ-DebugList
00020FEA 0000                       	dc.w @LZ-DebugList
00020FEC 0000                       	dc.w @MZ-DebugList
00020FEE 0000                       	dc.w @SLZ-DebugList
00020FF0 0000                       	dc.w @SYZ-DebugList
00020FF2 0000                       	dc.w @SBZ-DebugList
00020FF4 0000                       	dc.w @Ending-DebugList
00020FF6                            
00020FF6                            dbug:	macro map,object,subtype,frame,vram
00020FF6                            	dc.l map+(object<<24)
00020FF6                            	dc.b subtype,frame
00020FF6                            	dc.w vram
00020FF6                            	endm
00020FF6                            
00020FF6                            @GHZ:
00020FF6 0000                       	dc.w (@GHZend-@GHZ-2)/8
00020FF8                            
00020FF8                            ;		mappings	object		subtype	frame	VRAM setting
00020FF8 2500 BB86 0000 27B2        	dbug 	Map_Ring,	id_Rings,	0,	0,	$27B2
00021000 2600 C344 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00021008 1F00 AF66 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
00021010 2200 B3F0 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00021018 2B00 CAE6 0000 047B        	dbug	Map_Chop,	id_Chopper,	0,	0,	$47B
00021020 3600 EF24 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00021028 1800 990C 0000 4000        	dbug	Map_Plat_GHZ,	id_BasicPlatform, 0,	0,	$4000
00021030 3B00 F04A 0000 63D0        	dbug	Map_PRock,	id_PurpleRock,	0,	0,	$63D0
00021038 4001 1738 0000 04F0        	dbug	Map_Moto,	id_MotoBug,	0,	0,	$4F0
00021040 4100 FDAA 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00021048 4200 FFD4 0000 249B        	dbug	Map_Newt,	id_Newtron,	0,	0,	$249B
00021050 4401 02E8 0000 434C        	dbug	Map_Edge,	id_EdgeWalls,	0,	0,	$434C
00021058 7901 AAD4 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00021060 4B00 BBD6 0000 2400        	dbug	Map_GRing,	id_GiantRing,	0,	0,	$2400
00021068 7D01 AC96 0101 84B6        	dbug	Map_Bonus,	id_HiddenBonus,	1,	1,	$84B6
00021070                            	@GHZend:
00021070                            
00021070                            @LZ:
00021070 0000                       	dc.w (@LZend-@LZ-2)/8
00021072                            
00021072                            ;		mappings	object		subtype	frame	VRAM setting
00021072 2500 BB86 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002107A 2600 C344 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00021082 4100 FDAA 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0002108A 2C00 CB8C 0800 2486        	dbug	Map_Jaws,	id_Jaws,	8,	0,	$2486
00021092 2D00 CD78 0002 84A6        	dbug	Map_Burro,	id_Burrobot,	0,	2,	$84A6
0002109A 1601 40FA 0000 03CC        	dbug	Map_Harp,	id_Harpoon,	0,	0,	$3CC
000210A2 1601 40FA 0203 03CC        	dbug	Map_Harp,	id_Harpoon,	2,	3,	$3CC
000210AA 3300 E1F6 0000 43DE        	dbug	Map_Push,	id_PushBlock,	0,	0,	$43DE
000210B2 3200 DDB6 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
000210BA 3600 EF24 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
000210C2 5201 21D0 0400 43BC        	dbug	Map_MBlockLZ,	id_MovingBlock,	4,	0,	$43BC
000210CA 6101 4322 0100 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 1,	0,	$43E6
000210D2 6101 4322 1301 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $13,	1,	$43E6
000210DA 6101 4322 0500 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 5,	0,	$43E6
000210E2 6201 4476 0000 443E        	dbug	Map_Gar,	id_Gargoyle,	0,	0,	$443E
000210EA 6101 4322 2702 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $27,	2,	$43E6
000210F2 6101 4322 3003 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $30,	3,	$43E6
000210FA 6301 47D8 7F00 03F6        	dbug	Map_LConv,	id_LabyrinthConvey, $7F, 0,	$3F6
00021102 6001 4044 0000 0467        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$467
0002110A 6401 4B26 8413 8348        	dbug	Map_Bub,	id_Bubble,	$84,	$13,	$8348
00021112 6501 4CAE 0202 C259        	dbug	Map_WFall,	id_Waterfall,	2,	2,	$C259
0002111A 6501 4CAE 0909 C259        	dbug	Map_WFall,	id_Waterfall,	9,	9,	$C259
00021122 0B01 3490 0000 43DE        	dbug	Map_Pole,	id_Pole,	0,	0,	$43DE
0002112A 0C01 3560 0200 4328        	dbug	Map_Flap,	id_FlapDoor,	2,	0,	$4328
00021132 7901 AAD4 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0002113A                            	@LZend:
0002113A                            
0002113A                            @MZ:
0002113A 0000                       	dc.w (@MZend-@MZ-2)/8
0002113C                            
0002113C                            ;		mappings	object		subtype	frame	VRAM setting
0002113C 2500 BB86 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00021144 2600 C344 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0002114C 2200 B3F0 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00021154 3600 EF24 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
0002115C 4100 FDAA 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00021164 1300 D286 0000 0345        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$345
0002116C 4601 09A0 0000 4000        	dbug	Map_Brick,	id_MarbleBrick,	0,	0,	$4000
00021174 6E01 9B6C 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
0002117C 6A01 94DC 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
00021184 3300 E1F6 0000 42B8        	dbug	Map_Push,	id_PushBlock,	0,	0,	$42B8
0002118C 1E00 A67E 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
00021194 5101 1EF6 0000 42B8        	dbug	Map_Smab,	id_SmashBlock,	0,	0,	$42B8
0002119C 5201 217A 0000 02B8        	dbug	Map_MBlock,	id_MovingBlock,	0,	0,	$2B8
000211A4 5300 9F4E 0000 62B8        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$62B8
000211AC 5401 129E 0000 8680        	dbug	Map_LTag,	id_LavaTag,	0,	0,	$8680
000211B4 5501 236E 0000 04B8        	dbug	Map_Bas,	id_Basaran,	0,	0,	$4B8
000211BC 7801 A740 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
000211C4 7901 AAD4 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000211CC                            	@MZend:
000211CC                            
000211CC                            @SLZ:
000211CC 0000                       	dc.w (@SLZend-@SLZ-2)/8
000211CE                            
000211CE                            ;		mappings	object		subtype	frame	VRAM setting
000211CE 2500 BB86 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000211D6 2600 C344 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000211DE 5901 2EB8 0000 4000        	dbug	Map_Elev,	id_Elevator,	0,	0,	$4000
000211E6 5300 9F4E 0002 44E0        	dbug	Map_CFlo,	id_CollapseFloor, 0,	2,	$44E0
000211EE 1800 996A 0000 4000        	dbug	Map_Plat_SLZ,	id_BasicPlatform, 0,	0,	$4000
000211F6 5A01 2FF2 0000 4000        	dbug	Map_Circ,	id_CirclingPlatform, 0,	0,	$4000
000211FE 5B01 31AA 0000 4000        	dbug	Map_Stair,	id_Staircase,	0,	0,	$4000
00021206 5D01 377E 0000 43A0        	dbug	Map_Fan,	id_Fan,		0,	0,	$43A0
0002120E 5E01 3B10 0000 0374        	dbug	Map_Seesaw,	id_Seesaw,	0,	0,	$374
00021216 4100 FDAA 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0002121E 1300 D286 0000 0480        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$480
00021226 1C00 A080 0000 44D8        	dbug	Map_Scen,	id_Scenery,	0,	0,	$44D8
0002122E 5F01 3D8E 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
00021236 6001 4044 0000 2429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$2429
0002123E 7901 AAD4 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00021246                            	@SLZend:
00021246                            
00021246                            @SYZ:
00021246 0000                       	dc.w (@SYZend-@SYZ-2)/8
00021248                            
00021248                            ;		mappings	object		subtype	frame	VRAM setting
00021248 2500 BB86 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00021250 2600 C344 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00021258 3600 EF24 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00021260 4100 FDAA 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00021268 4301 023A 0000 04B8        	dbug	Map_Roll,	id_Roller,	0,	0,	$4B8
00021270 1201 0A1E 0000 0000        	dbug	Map_Light,	id_SpinningLight, 0,	0,	0
00021278 4701 0BC2 0000 0380        	dbug	Map_Bump,	id_Bumper,	0,	0,	$380
00021280 1F00 AF66 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
00021288 2200 B3F0 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00021290 5001 19C8 0000 247B        	dbug	Map_Yad,	id_Yadrin,	0,	0,	$247B
00021298 1800 9958 0000 4000        	dbug	Map_Plat_SYZ,	id_BasicPlatform, 0,	0,	$4000
000212A0 5601 2878 0000 4000        	dbug	Map_FBlock,	id_FloatingBlock, 0,	0,	$4000
000212A8 3200 DDB6 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
000212B0 7801 A740 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
000212B8 7901 AAD4 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000212C0                            	@SYZend:
000212C0                            
000212C0                            @SBZ:
000212C0 0000                       	dc.w (@SBZend-@SBZ-2)/8
000212C2                            
000212C2                            ;		mappings	object		subtype	frame	VRAM setting
000212C2 2500 BB86 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000212CA 2600 C344 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000212D2 5F01 3D8E 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
000212DA 6001 4044 0000 0429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$429
000212E2 7801 A740 0000 22B0        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$22B0
000212EA 1501 2C14 0702 4391        	dbug	Map_BBall,	id_SwingingPlatform, 7,	2,	$4391
000212F2 6701 8FCA E000 C344        	dbug	Map_Disc,	id_RunningDisc,	$E0,	0,	$C344
000212FA 5201 217A 2802 22C0        	dbug	Map_MBlock,	id_MovingBlock,	$28,	2,	$22C0
00021302 3200 DDB6 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
0002130A 6901 9224 0300 4492        	dbug	Map_Trap,	id_SpinPlatform, 3,	0,	$4492
00021312 6901 927E 8300 04DF        	dbug	Map_Spin,	id_SpinPlatform, $83,	0,	$4DF
0002131A 6A01 94DC 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
00021322 5300 9F4E 0000 43F5        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$43F5
0002132A 5201 217A 3903 4460        	dbug	Map_MBlock,	id_MovingBlock,	$39,	3,	$4460
00021332 6B01 98AC 0000 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	0,	0,	$22C0
0002133A 2A00 A210 0000 42E8        	dbug	Map_ADoor,	id_AutoDoor,	0,	0,	$42E8
00021342 6B01 98AC 1301 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$13,	1,	$22C0
0002134A 6A01 94DC 0100 43B5        	dbug	Map_Saw,	id_Saws,	1,	0,	$43B5
00021352 6B01 98AC 2401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$24,	1,	$22C0
0002135A 6A01 94DC 0402 43B5        	dbug	Map_Saw,	id_Saws,	4,	2,	$43B5
00021362 6B01 98AC 3401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$34,	1,	$22C0
0002136A 6C01 9A88 0000 44C3        	dbug	Map_VanP,	id_VanishPlatform, 0,	0,	$44C3
00021372 6D01 0692 6400 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	0,	$83D9
0002137A 6D01 0692 640B 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	$B,	$83D9
00021382 6E01 9B6C 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
0002138A 7001 9FB6 0000 42F0        	dbug	Map_Gird,	id_Girder,	0,	0,	$42F0
00021392 7101 3624 1100 8680        	dbug	Map_Invis,	id_Invisibarrier, $11,	0,	$8680
0002139A 1E00 A67E 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
000213A2 7901 AAD4 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000213AA                            	@SBZend:
000213AA                            
000213AA                            @Ending:
000213AA 0000                       	dc.w (@Endingend-@Ending-2)/8
000213AC                            
000213AC                            ;		mappings	object		subtype	frame	VRAM setting
000213AC 2500 BB86 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000213B4 2500 BB86 0008 27B2        	dbug	Map_Ring,	id_Rings,	0,	8,	$27B2
000213BC                            	@Endingend:
000213BC                            
000213BC                            	even
000213BC                            	even
000213BC                            		include	"_inc\LevelHeaders.asm"
000213BC                            ; ---------------------------------------------------------------------------
000213BC                            ; Level Headers
000213BC                            ; ---------------------------------------------------------------------------
000213BC                            
000213BC                            LevelHeaders:
000213BC                            
000213BC                            lhead:	macro plc1,lvlgfx,plc2,sixteen,twofivesix,music,pal
000213BC                            	dc.l (plc1<<24)+lvlgfx
000213BC                            	dc.l (plc2<<24)+sixteen
000213BC                            	dc.l twofivesix
000213BC                            	dc.b 0, music, pal, pal
000213BC                            	endm
000213BC                            
000213BC                            ; 1st PLC, level gfx (unused), 2nd PLC, 16x16 data, 256x256 data,
000213BC                            ; music (unused), palette (unused), palette
000213BC                            
000213BC                            ;		1st PLC				2nd PLC				256x256 data			palette
000213BC                            ;				level gfx*			16x16 data			music*
000213BC                            
000213BC 0000 0000 0000 0000 0000+  	lhead	plcid_GHZ,	Nem_GHZ_2nd,	plcid_GHZ2,	Blk16_GHZ,	Blk256_GHZ,	bgm_GHZ,	palid_GHZ	; Green Hill
000213CC 0000 0000 0000 0000 0000+  	lhead	plcid_LZ,	Nem_LZ,		plcid_LZ2,	Blk16_LZ,	Blk256_LZ,	bgm_LZ,		palid_LZ	; Labyrinth
000213DC 0000 0000 0000 0000 0000+  	lhead	plcid_MZ,	Nem_MZ,		plcid_MZ2,	Blk16_MZ,	Blk256_MZ,	bgm_MZ,		palid_MZ	; Marble
000213EC 0000 0000 0000 0000 0000+  	lhead	plcid_SLZ,	Nem_SLZ,	plcid_SLZ2,	Blk16_SLZ,	Blk256_SLZ,	bgm_SLZ,	palid_SLZ	; Star Light
000213FC 0000 0000 0000 0000 0000+  	lhead	plcid_SYZ,	Nem_SYZ,	plcid_SYZ2,	Blk16_SYZ,	Blk256_SYZ,	bgm_SYZ,	palid_SYZ	; Spring Yard
0002140C 0000 0000 0000 0000 0000+  	lhead	plcid_SBZ,	Nem_SBZ,	plcid_SBZ2,	Blk16_SBZ,	Blk256_SBZ,	bgm_SBZ,	palid_SBZ1	; Scrap Brain
0002141C 0000 0000 0000 0000 0000+  	lhead	0,		Nem_GHZ_2nd,	0,		Blk16_GHZ,	Blk256_GHZ,	bgm_SBZ,	palid_Ending	; Ending
0002142C                            	even
0002142C                            
0002142C                            ;	* music and level gfx are actually set elsewhere, so these values are useless
0002142C                            ;	* music and level gfx are actually set elsewhere, so these values are useless
0002142C                            		include	"_inc\Pattern Load Cues.asm"
0002142C                            ; ---------------------------------------------------------------------------
0002142C                            ; Pattern load cues
0002142C                            ; ---------------------------------------------------------------------------
0002142C                            ArtLoadCues:
0002142C                            
0002142C 0000                       ptr_PLC_Main:		dc.w PLC_Main-ArtLoadCues
0002142E 0000                       ptr_PLC_Main2:		dc.w PLC_Main2-ArtLoadCues
00021430 0000                       ptr_PLC_Explode:	dc.w PLC_Explode-ArtLoadCues
00021432 0000                       ptr_PLC_GameOver:	dc.w PLC_GameOver-ArtLoadCues
00021434                            PLC_Levels:
00021434 0000                       ptr_PLC_GHZ:		dc.w PLC_GHZ-ArtLoadCues
00021436 0000                       ptr_PLC_GHZ2:		dc.w PLC_GHZ2-ArtLoadCues
00021438 0000                       ptr_PLC_LZ:		dc.w PLC_LZ-ArtLoadCues
0002143A 0000                       ptr_PLC_LZ2:		dc.w PLC_LZ2-ArtLoadCues
0002143C 0000                       ptr_PLC_MZ:		dc.w PLC_MZ-ArtLoadCues
0002143E 0000                       ptr_PLC_MZ2:		dc.w PLC_MZ2-ArtLoadCues
00021440 0000                       ptr_PLC_SLZ:		dc.w PLC_SLZ-ArtLoadCues
00021442 0000                       ptr_PLC_SLZ2:		dc.w PLC_SLZ2-ArtLoadCues
00021444 0000                       ptr_PLC_SYZ:		dc.w PLC_SYZ-ArtLoadCues
00021446 0000                       ptr_PLC_SYZ2:		dc.w PLC_SYZ2-ArtLoadCues
00021448 0000                       ptr_PLC_SBZ:		dc.w PLC_SBZ-ArtLoadCues
0002144A 0000                       ptr_PLC_SBZ2:		dc.w PLC_SBZ2-ArtLoadCues
0002144C 0000                       ptr_PLC_TitleCard:	dc.w PLC_TitleCard-ArtLoadCues
0002144E 0000                       ptr_PLC_Boss:		dc.w PLC_Boss-ArtLoadCues
00021450 0000                       ptr_PLC_Signpost:	dc.w PLC_Signpost-ArtLoadCues
00021452 0000                       ptr_PLC_Warp:		dc.w PLC_Warp-ArtLoadCues
00021454 0000                       ptr_PLC_SpecialStage:	dc.w PLC_SpecialStage-ArtLoadCues
00021456                            PLC_Animals:
00021456 0000                       ptr_PLC_GHZAnimals:	dc.w PLC_GHZAnimals-ArtLoadCues
00021458 0000                       ptr_PLC_LZAnimals:	dc.w PLC_LZAnimals-ArtLoadCues
0002145A 0000                       ptr_PLC_MZAnimals:	dc.w PLC_MZAnimals-ArtLoadCues
0002145C 0000                       ptr_PLC_SLZAnimals:	dc.w PLC_SLZAnimals-ArtLoadCues
0002145E 0000                       ptr_PLC_SYZAnimals:	dc.w PLC_SYZAnimals-ArtLoadCues
00021460 0000                       ptr_PLC_SBZAnimals:	dc.w PLC_SBZAnimals-ArtLoadCues
00021462 0000                       ptr_PLC_SSResult:	dc.w PLC_SSResult-ArtLoadCues
00021464 0000                       ptr_PLC_Ending:		dc.w PLC_Ending-ArtLoadCues
00021466 0000                       ptr_PLC_TryAgain:	dc.w PLC_TryAgain-ArtLoadCues
00021468 0000                       ptr_PLC_EggmanSBZ2:	dc.w PLC_EggmanSBZ2-ArtLoadCues
0002146A 0000                       ptr_PLC_FZBoss:		dc.w PLC_FZBoss-ArtLoadCues
0002146C 0000                       ptr_PLC_Egg:		dc.w PLC_Egg-ArtLoadCues
0002146E 0000                       ptr_PLC_LifeIcon:		dc.w PLC_LifeIcon-ArtLoadCues
00021470 0000                       ptr_PLC_LifeIconF:		dc.w PLC_LifeIconF-ArtLoadCues
00021472                            
00021472                            plcm:	macro gfx,vram
00021472                            	dc.l gfx
00021472                            	dc.w vram
00021472                            	endm
00021472                            
00021472                            ; ---------------------------------------------------------------------------
00021472                            ; Pattern load cues - standard block 1
00021472                            ; ---------------------------------------------------------------------------
00021472 0000                       PLC_Main:	dc.w ((PLC_Mainend-PLC_Main-2)/6)-1
00021474 0000 0000 D800             		plcm	Nem_Lamp, $D800		; lamppost
0002147A 0000 0000 D940             		plcm	Nem_Hud, $D940		; HUD
00021480 0000 0000 F300             		plcm	Nem_Ring, $F300		; rings		
00021486 0000 0000 ADA0             		plcm	Nem_Points, $ADA0 	; points from enemy
0002148C                            	PLC_Mainend:
0002148C                            ; ---------------------------------------------------------------------------
0002148C                            ; Pattern load cues - standard block 2
0002148C                            ; ---------------------------------------------------------------------------
0002148C 0000                       PLC_Main2:	dc.w ((PLC_Main2end-PLC_Main2-2)/6)-1
0002148E 0000 0000 D000             		plcm	Nem_Monitors, $D000	; monitors
00021494                            	PLC_Main2end:
00021494                            ; ---------------------------------------------------------------------------
00021494                            ; Pattern load cues - explosion
00021494                            ; ---------------------------------------------------------------------------
00021494 0000                       PLC_Explode:	dc.w ((PLC_Explodeend-PLC_Explode-2)/6)-1
00021496 0000 0000 B400             		plcm	Nem_Explode, $B400	; explosion
0002149C                            	PLC_Explodeend:
0002149C                            ; ---------------------------------------------------------------------------
0002149C                            ; Pattern load cues - game/time	over
0002149C                            ; ---------------------------------------------------------------------------
0002149C 0000                       PLC_GameOver:	dc.w ((PLC_GameOverend-PLC_GameOver-2)/6)-1
0002149E 0000 0000 ABC0             		plcm	Nem_GameOver, $ABC0	; game/time over
000214A4                            	PLC_GameOverend:
000214A4                            ; ---------------------------------------------------------------------------
000214A4                            ; Pattern load cues - Green Hill
000214A4                            ; ---------------------------------------------------------------------------
000214A4 0000                       PLC_GHZ:	dc.w ((PLC_GHZ2-PLC_GHZ-2)/6)-1
000214A6 0000 0000 0000             		plcm	Nem_GHZ_1st, 0		; GHZ main patterns
000214AC 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
000214B2 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
000214B8 0000 0000 7A00             		plcm	Nem_PplRock, $7A00	; purple rock
000214BE 0000 0000 8000             		plcm	Nem_Crabmeat, $8000	; crabmeat enemy
000214C4 0000 0000 8880             		plcm	Nem_Mozzietron, $8880	; mozzietron enemy
000214CA 0000 0000 8F60             		plcm	Nem_Chopper, $8F60	; chopper enemy
000214D0 0000 0000 9360             		plcm	Nem_Newtron, $9360	; newtron enemy
000214D6 0000 0000 9E00             		plcm	Nem_Motobug, $9E00	; motobug enemy
000214DC 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
000214E2 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
000214E8 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
000214EE                            
000214EE 0000                       PLC_GHZ2:	dc.w ((PLC_GHZ2end-PLC_GHZ2-2)/6)-1
000214F0 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
000214F6 0000 0000 71C0             		plcm	Nem_Bridge, $71C0	; bridge
000214FC 0000 0000 7300             		plcm	Nem_SpikePole, $7300	; spiked pole
00021502 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
00021508 0000 0000 A1E0             		plcm	Nem_GhzWall1, $A1E0	; breakable wall
0002150E 0000 0000 6980             		plcm	Nem_GhzWall2, $6980	; normal wall
00021514                            	PLC_GHZ2end:
00021514                            ; ---------------------------------------------------------------------------
00021514                            ; Pattern load cues - Labyrinth
00021514                            ; ---------------------------------------------------------------------------
00021514 0000                       PLC_LZ:		dc.w ((PLC_LZ2-PLC_LZ-2)/6)-1
00021516 0000 0000 0000             		plcm	Nem_LZ,0		; LZ main patterns
0002151C 0000 0000 3C00             		plcm	Nem_LzBlock1, $3C00	; block
00021522                            		;plcm	Nem_LzBlock2, $3E00	; blocks
00021522 0000 0000 6000             		plcm	Nem_Water, $6000	; water	surface
00021528 0000 0000 6200             		plcm	Nem_LzSpikeBall, $6200	; spiked ball
0002152E 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00021534 0000 0000 7780             		plcm	Nem_LzBlock3, $7780	; block
0002153A 0000 0000 7880             		plcm	Nem_LzDoor1, $7880	; vertical door
00021540 0000 0000 7980             		plcm	Nem_Harpoon, $7980	; harpoon
00021546 0000 0000 94C0             		plcm	Nem_Burrobot, $94C0	; burrobot enemy
0002154C                            
0002154C 0000                       PLC_LZ2:	dc.w ((PLC_LZ2end-PLC_LZ2-2)/6)-1
0002154E 0000 0000 7BC0             		plcm	Nem_LzPole, $7BC0	; pole that breaks
00021554 0000 0000 7CC0             		plcm	Nem_LzDoor2, $7CC0	; large	horizontal door
0002155A                            		;plcm	Nem_LzWheel, $7EC0	; wheel
0002155A                            		;plcm	Nem_Gargoyle, $5D20	; gargoyle head
0002155A 0000 0000 89E0             		plcm	Nem_LzPlatfm, $89E0	; rising platform
00021560 0000 0000 8CE0             		plcm	Nem_Orbinaut, $8CE0	; orbinaut enemy
00021566 0000 0000 90C0             		plcm	Nem_Jaws, $90C0		; jaws enemy
0002156C 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00021572 0000 0000 A000             		plcm	Nem_Cork, $A000		; cork block
00021578 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
0002157E 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00021584 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
0002158A                            	PLC_LZ2end:
0002158A                            ; ---------------------------------------------------------------------------
0002158A                            ; Pattern load cues - Marble
0002158A                            ; ---------------------------------------------------------------------------
0002158A 0000                       PLC_MZ:		dc.w ((PLC_MZ2-PLC_MZ-2)/6)-1
0002158C 0000 0000 0000             		plcm	Nem_MZ,0		; MZ main patterns
00021592 0000 0000 9FE0             		plcm	Nem_Cater, $9FE0	; caterkiller enemy
00021598 0000 0000 6040             		plcm	Nem_BallHog, $6040	; ball hog enemy
0002159E 0000 0000 68A0             		plcm	Nem_MzFire, $68A0	; fireballs
000215A4                            	;	plcm	Nem_MzGlass, $71C0	; green	glassy block
000215A4 0000 0000 75A0             		plcm	Nem_Cutter, $75A0	; pizza	cutter
000215AA 0000 0000 8000             		plcm	Nem_Bomb, $8000
000215B0 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
000215B6 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
000215BC 0000 0000 9700             		plcm	Nem_Basaran, $9700	; basaran enemy
000215C2                            
000215C2 0000                       PLC_MZ2:	dc.w ((PLC_MZ2end-PLC_MZ2-2)/6)-1
000215C4 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
000215CA 0000 0000 5D40             		plcm	Nem_SbzDoor1, $5D40	; door
000215D0                            		;plcm	Nem_MzSwitch, $A260	; switch
000215D0 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
000215D6 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
000215DC 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
000215E2 0000 0000 5700             		plcm	Nem_MzBlock, $5700	; green	stone block
000215E8 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
000215EE                            	PLC_MZ2end:
000215EE                            ; ---------------------------------------------------------------------------
000215EE                            ; Pattern load cues - Star Light
000215EE                            ; ---------------------------------------------------------------------------
000215EE 0000                       PLC_SLZ:	dc.w ((PLC_SLZ2-PLC_SLZ-2)/6)-1
000215F0 0000 0000 0000             		plcm	Nem_SLZ,0		; SLZ main patterns
000215F6 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
000215FC 0000 0000 8520             		plcm	Nem_Orbinaut, $8520	; orbinaut enemy
00021602 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00021608 0000 0000 9000             		plcm	Nem_MzFire, $9000	; fireballs
0002160E 0000 0000 9C00             		plcm	Nem_SlzBlock, $9C00	; block
00021614 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
0002161A 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00021620 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00021626 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
0002162C                            
0002162C 0000                       PLC_SLZ2:	dc.w ((PLC_SLZ2end-PLC_SLZ2-2)/6)-1
0002162E 0000 0000 6E80             		plcm	Nem_Seesaw, $6E80	; seesaw
00021634 0000 0000 7400             		plcm	Nem_Fan, $7400		; fan
0002163A 0000 0000 7980             		plcm	Nem_Pylon, $7980	; foreground pylon
00021640 0000 0000 7B80             		plcm	Nem_SlzSwing, $7B80	; swinging platform
00021646 0000 0000 9B00             		plcm	Nem_SlzCannon, $9B00	; fireball launcher
0002164C 0000 0000 9E00             		plcm	Nem_SlzSpike, $9E00	; spikeball
00021652                            	PLC_SLZ2end:
00021652                            ; ---------------------------------------------------------------------------
00021652                            ; Pattern load cues - Spring Yard
00021652                            ; ---------------------------------------------------------------------------
00021652 0000                       PLC_SYZ:	dc.w ((PLC_SYZ2-PLC_SYZ-2)/6)-1
00021654 0000 0000 0000             		plcm	Nem_SYZ,0		; SYZ main patterns
0002165A                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
0002165A                            		;plcm	Nem_SbzDoor1, $5D40	; door
0002165A 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
00021660 0000 0000 7EA0             		plcm	Nem_Bubbles, $7EA0	; bubbles and numbers
00021666                            		;plcm	Nem_Buzz, $8880		; buzz bomber enemy
00021666 0000 0000 8F60             		plcm	Nem_Yadrin, $8F60	; yadrin enemy
0002166C 0000 0000 9700             		plcm	Nem_Roller, $9700	; roller enemy
00021672 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00021678 0000 0000 7840             		plcm	Nem_SbzFloor, $7840	; collapsing floor
0002167E 0000 0000 8BA0             		plcm	Nem_SbzBlock, $8BA0	; vanishing block
00021684 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
0002168A                            
0002168A 0000                       PLC_SYZ2:	dc.w ((PLC_SYZ2end-PLC_SYZ2-2)/6)-1
0002168C                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
0002168C 0000 0000 7000             		plcm	Nem_Bumper, $7000	; bumper
00021692 0000 0000 72C0             		plcm	Nem_SyzSpike1, $72C0	; large	spikeball
00021698 0000 0000 7740             		plcm	Nem_SyzSpike2, $7740	; small	spikeball
0002169E                            		;plcm	Nem_TrapDoor, $9240	; trapdoor
0002169E 0000 0000 78C0             		plcm	Nem_SbzFloor, $78C0	; collapsing floor
000216A4                            		;plcm	Nem_SpinPform, $9BE0	; small	spinning platform
000216A4 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
000216AA 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
000216B0 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
000216B6 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
000216BC                            	PLC_SYZ2end:
000216BC                            ; ---------------------------------------------------------------------------
000216BC                            ; Pattern load cues - Scrap Brain
000216BC                            ; ---------------------------------------------------------------------------
000216BC 0000                       PLC_SBZ:	dc.w ((PLC_SBZ2-PLC_SBZ-2)/6)-1
000216BE 0000 0000 0000             		plcm	Nem_SBZ,0		; SBZ main patterns
000216C4                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
000216C4                            		;plcm	Nem_SbzDoor1, $5D00	; door
000216C4                            		;plcm	Nem_Girder, $5E00	; girder
000216C4 0000 0000 6880             		plcm	Nem_SbzWheel1, $6880	; spot on large	wheel
000216CA 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
000216D0                            		;plcm	Nem_SbzWheel2, $6900	; wheel	that grabs Sonic
000216D0 0000 0000 7220             		plcm	Nem_SyzSpike1, $7220	; large	spikeball
000216D6 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
000216DC 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
000216E2 0000 0000 9860             		plcm	Nem_SbzBlock, $9860	; vanishing block
000216E8                            
000216E8 0000                       PLC_SBZ2:	dc.w ((PLC_SBZ2end-PLC_SBZ2-2)/6)-1
000216EA 0000 0000 5600             		plcm	Nem_Cater, $5600	; caterkiller enemy
000216F0 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
000216F6 0000 0000 8C00             		plcm	Nem_SlideFloor, $8C00	; floor	that slides away
000216FC                            		;plcm	Nem_SbzDoor2, $8DE0	; horizontal door
000216FC 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00021702 0000 0000 9240             		plcm	Nem_TrapDoor, $9240	; trapdoor
00021708 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
0002170E 0000 0000 9BE0             		plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00021714 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
0002171A 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00021720 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00021726 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
0002172C                            	PLC_SBZ2end:
0002172C                            ; ---------------------------------------------------------------------------
0002172C                            ; Pattern load cues - title card
0002172C                            ; ---------------------------------------------------------------------------
0002172C 0000                       PLC_TitleCard:	dc.w ((PLC_TitleCardend-PLC_TitleCard-2)/6)-1
0002172E 0000 0000 B000             		plcm	Nem_TitleCard, $B000
00021734                            	PLC_TitleCardend:
00021734                            ; ---------------------------------------------------------------------------
00021734                            ; Pattern load cues - act 3 boss
00021734                            ; ---------------------------------------------------------------------------
00021734 0000                       PLC_Boss:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00021736 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
0002173C 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00021742 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00021748                            		;plcm	Nem_Bomb, $A300		; bomb enemy ((gets overwritten)
00021748                            		;plcm	Nem_SlzSpike, $A300	; spikeball ((SLZ boss)
00021748 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
0002174E 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
00021754                            	PLC_Bossend:
00021754                            ; ---------------------------------------------------------------------------
00021754                            ; Pattern load cues - act 1/2 signpost
00021754                            ; ---------------------------------------------------------------------------
00021754 0000                       PLC_Signpost:	dc.w ((PLC_Signpostend-PLC_Signpost-2)/6)-1
00021756 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
0002175C 0000 0000 96C0             		plcm	Nem_Bonus, $96C0	; hidden bonus points
00021762 0000 0000 8C40             		plcm	Nem_BigFlash, $8C40	; giant	ring flash effect
00021768                            		;plcm	Nem_SSEmerald, $EE00	; emeralds
00021768                            	PLC_Signpostend:
00021768                            ; ---------------------------------------------------------------------------
00021768                            ; Pattern load cues - beta special stage warp effect
00021768                            ; ---------------------------------------------------------------------------
00021768                            PLC_Warp:
00021768                            	PLC_Warpend:
00021768                            ; ---------------------------------------------------------------------------
00021768                            ; Pattern load cues - special stage
00021768                            ; ---------------------------------------------------------------------------
00021768 0000                       PLC_SpecialStage:	dc.w ((PLC_SpeStageend-PLC_SpecialStage-2)/6)-1
0002176A 0000 0000 0000             		plcm	Nem_SSBgCloud, 0	; bubble and cloud background
00021770 0000 0000 0A20             		plcm	Nem_SSBgFish, $A20	; bird and fish	background
00021776 0000 0000 2840             		plcm	Nem_SSWalls, $2840	; walls
0002177C 0000 0000 4760             		plcm	Nem_Bumper, $4760	; bumper
00021782 0000 0000 4A20             		plcm	Nem_SSGOAL, $4A20	; GOAL block
00021788 0000 0000 4C60             		plcm	Nem_SSUpDown, $4C60	; UP and DOWN blocks
0002178E 0000 0000 5E00             		plcm	Nem_SSRBlock, $5E00	; R block
00021794 0000 0000 6E00             		plcm	Nem_SS1UpBlock, $6E00	; 1UP block
0002179A 0000 0000 7E00             		plcm	Nem_SSEmStars, $7E00	; emerald collection stars
000217A0 0000 0000 8E00             		plcm	Nem_SSRedWhite, $8E00	; red and white	block
000217A6 0000 0000 9E00             		plcm	Nem_SSGhost, $9E00	; ghost	block
000217AC 0000 0000 AE00             		plcm	Nem_SSWBlock, $AE00	; W block
000217B2 0000 0000 BE00             		plcm	Nem_SSGlass, $BE00	; glass	block
000217B8 0000 0000 EE00             		plcm	Nem_SSEmerald, $EE00	; emeralds
000217BE                            		;plcm	Nem_SSZone1, $F2E0	; ZONE 1 block
000217BE                            		;plcm	Nem_SSZone2, $F400	; ZONE 2 block
000217BE                            		;plcm	Nem_SSZone3, $F520	; ZONE 3 block
000217BE                            	PLC_SpeStageend:
000217BE                            		;plcm	Nem_SSZone4, $F2E0	; ZONE 4 block
000217BE                            		;plcm	Nem_SSZone5, $F400	; ZONE 5 block
000217BE                            		;plcm	Nem_SSZone6, $F520	; ZONE 6 block
000217BE                            ; ---------------------------------------------------------------------------
000217BE                            ; Pattern load cues - GHZ animals
000217BE                            ; ---------------------------------------------------------------------------
000217BE 0000                       PLC_GHZAnimals:	dc.w ((PLC_GHZAnimalsend-PLC_GHZAnimals-2)/6)-1
000217C0 0000 0000 B000             		plcm	Nem_Rabbit, $B000	; rabbit
000217C6 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
000217CC                            	PLC_GHZAnimalsend:
000217CC                            ; ---------------------------------------------------------------------------
000217CC                            ; Pattern load cues - LZ animals
000217CC                            ; ---------------------------------------------------------------------------
000217CC 0000                       PLC_LZAnimals:	dc.w ((PLC_LZAnimalsend-PLC_LZAnimals-2)/6)-1
000217CE 0000 0000 B000             		plcm	Nem_BlackBird, $B000	; blackbird
000217D4 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
000217DA                            	PLC_LZAnimalsend:
000217DA                            ; ---------------------------------------------------------------------------
000217DA                            ; Pattern load cues - MZ animals
000217DA                            ; ---------------------------------------------------------------------------
000217DA 0000                       PLC_MZAnimals:	dc.w ((PLC_MZAnimalsend-PLC_MZAnimals-2)/6)-1
000217DC 0000 0000 B000             		plcm	Nem_Squirrel, $B000	; squirrel
000217E2 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
000217E8                            	PLC_MZAnimalsend:
000217E8                            ; ---------------------------------------------------------------------------
000217E8                            ; Pattern load cues - SLZ animals
000217E8                            ; ---------------------------------------------------------------------------
000217E8 0000                       PLC_SLZAnimals:	dc.w ((PLC_SLZAnimalsend-PLC_SLZAnimals-2)/6)-1
000217EA 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
000217F0 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
000217F6                            	PLC_SLZAnimalsend:
000217F6                            ; ---------------------------------------------------------------------------
000217F6                            ; Pattern load cues - SYZ animals
000217F6                            ; ---------------------------------------------------------------------------
000217F6 0000                       PLC_SYZAnimals:	dc.w ((PLC_SYZAnimalsend-PLC_SYZAnimals-2)/6)-1
000217F8 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
000217FE 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00021804                            	PLC_SYZAnimalsend:
00021804                            ; ---------------------------------------------------------------------------
00021804                            ; Pattern load cues - SBZ animals
00021804                            ; ---------------------------------------------------------------------------
00021804 0000                       PLC_SBZAnimals:	dc.w ((PLC_SBZAnimalsend-PLC_SBZAnimals-2)/6)-1
00021806 0000 0000 B000             		plcm	Nem_Rabbit, $B000		; rabbit
0002180C 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00021812                            	PLC_SBZAnimalsend:
00021812                            ; ---------------------------------------------------------------------------
00021812                            ; Pattern load cues - special stage results screen
00021812                            ; ---------------------------------------------------------------------------
00021812 0000                       PLC_SSResult:dc.w ((PLC_SpeStResultend-PLC_SSResult-2)/6)-1
00021814 0000 0000 A820             		plcm	Nem_ResultEm, $A820	; emeralds
0002181A 0000 0000 AA20             		plcm	Nem_MiniSonic, $AA20	; mini Sonic
00021820                            	PLC_SpeStResultend:
00021820                            ; ---------------------------------------------------------------------------
00021820                            ; Pattern load cues - ending sequence
00021820                            ; ---------------------------------------------------------------------------
00021820 0000                       PLC_Ending:	dc.w ((PLC_Endingend-PLC_Ending-2)/6)-1
00021822 0000 0000 0000             		plcm	Nem_GHZ_1st,0		; GHZ main patterns
00021828 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
0002182E 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00021834                            		;plcm	Nem_EndFlower, $7400	; flowers
00021834 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
0002183A 0000 0000 7C20             		plcm	Nem_EndSonic, $7C20	; Sonic
00021840 0000 0000 AA60             		plcm	Nem_Rabbit, $AA60	; rabbit
00021846 0000 0000 ACA0             		plcm	Nem_Chicken, $ACA0	; chicken
0002184C 0000 0000 AE60             		plcm	Nem_BlackBird, $AE60	; blackbird
00021852 0000 0000 B0A0             		plcm	Nem_Seal, $B0A0		; seal
00021858 0000 0000 B260             		plcm	Nem_Pig, $B260		; pig
0002185E 0000 0000 B4A0             		plcm	Nem_Flicky, $B4A0	; flicky
00021864 0000 0000 B660             		plcm	Nem_Squirrel, $B660	; squirrel
0002186A 0000 0000 B8A0             		plcm	Nem_EndStH, $B8A0	; "SONIC THE HEDGEHOG"
00021870                            	PLC_Endingend:
00021870                            ; ---------------------------------------------------------------------------
00021870                            ; Pattern load cues - "TRY AGAIN" and "END" screens
00021870                            ; ---------------------------------------------------------------------------
00021870 0000                       PLC_TryAgain:	dc.w ((PLC_TryAgainend-PLC_TryAgain-2)/6)-1
00021872 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00021878 0000 0000 7C20             		plcm	Nem_TryAgain, $7C20	; Eggman
0002187E 0000 0000 B400             		plcm	Nem_CreditText, $B400	; credits alphabet
00021884                            	PLC_TryAgainend:
00021884                            ; ---------------------------------------------------------------------------
00021884                            ; Pattern load cues - Eggman on SBZ 2
00021884                            ; ---------------------------------------------------------------------------
00021884 0000                       PLC_EggmanSBZ2:	dc.w ((PLC_EggmanSBZ2end-PLC_EggmanSBZ2-2)/6)-1
00021886 0000 0000 A300             		plcm	Nem_SbzBlock, $A300	; block
0002188C 0000 0000 8000             		plcm	Nem_Sbz2Eggman, $8000	; Eggman
00021892 0000 0000 9400             		plcm	Nem_LzSwitch, $9400	; switch
00021898                            	PLC_EggmanSBZ2end:
00021898                            ; ---------------------------------------------------------------------------
00021898                            ; Pattern load cues - final boss
00021898                            ; ---------------------------------------------------------------------------
00021898 0000                       PLC_FZBoss:	dc.w ((PLC_FZBossend-PLC_FZBoss-2)/6)-1
0002189A 0000 0000 7400             		plcm	Nem_FzEggman, $7400	; Eggman after boss
000218A0 0000 0000 6000             		plcm	Nem_FzBoss, $6000	; FZ boss
000218A6 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
000218AC 0000 0000 8E00             		plcm	Nem_Sbz2Eggman, $8E00	; Eggman without ship
000218B2 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
000218B8                            	PLC_FZBossend:
000218B8                            ; ---------------------------------------------------------------------------
000218B8                            ; Pattern load cues - Eggman
000218B8                            ; ---------------------------------------------------------------------------
000218B8 0004                       PLC_Egg:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
000218BA 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
000218C0 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
000218C6 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
000218CC 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
000218D2 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
000218D8 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
000218DE                            	PLC_Eggend:
000218DE                            		even
000218DE                            ; ---------------------------------------------------------------------------
000218DE                            ; Pattern load cues - Life Icon
000218DE                            ; ---------------------------------------------------------------------------	
000218DE 0000                       PLC_LifeIcon:	dc.w ((PLC_LifeIcon_end-PLC_LifeIcon-2)/6)-1
000218E0 0000 0000 FA80             		plcm	Nem_Lives, $FA80	; lives	counter	
000218E6                            	PLC_LifeIcon_end: 
000218E6                            		even	
000218E6                            ; ---------------------------------------------------------------------------
000218E6                            ; Pattern load cues - Life Icon (Future)
000218E6                            ; ---------------------------------------------------------------------------	
000218E6 0000                       PLC_LifeIconF:	dc.w ((PLC_LifeIconF_end-PLC_LifeIconF-2)/6)-1
000218E8 0000 0000 FA80             		plcm	Nem_Future, $FA80	; lives	counter	
000218EE                            	PLC_LifeIconF_end: ; nahhhhh... too far, bro
000218EE                            		even			
000218EE                            ; ---------------------------------------------------------------------------
000218EE                            ; Pattern load cue IDs
000218EE                            ; ---------------------------------------------------------------------------
000218EE =00000000                  plcid_Main:		equ (ptr_PLC_Main-ArtLoadCues)/2	; 0
000218EE =00000001                  plcid_Main2:		equ (ptr_PLC_Main2-ArtLoadCues)/2	; 1
000218EE =00000002                  plcid_Explode:		equ (ptr_PLC_Explode-ArtLoadCues)/2	; 2
000218EE =00000003                  plcid_GameOver:		equ (ptr_PLC_GameOver-ArtLoadCues)/2	; 3
000218EE =00000004                  plcid_GHZ:		equ (ptr_PLC_GHZ-ArtLoadCues)/2		; 4
000218EE =00000005                  plcid_GHZ2:		equ (ptr_PLC_GHZ2-ArtLoadCues)/2	; 5
000218EE =00000006                  plcid_LZ:		equ (ptr_PLC_LZ-ArtLoadCues)/2		; 6
000218EE =00000007                  plcid_LZ2:		equ (ptr_PLC_LZ2-ArtLoadCues)/2		; 7
000218EE =00000008                  plcid_MZ:		equ (ptr_PLC_MZ-ArtLoadCues)/2		; 8
000218EE =00000009                  plcid_MZ2:		equ (ptr_PLC_MZ2-ArtLoadCues)/2		; 9
000218EE =0000000A                  plcid_SLZ:		equ (ptr_PLC_SLZ-ArtLoadCues)/2		; $A
000218EE =0000000B                  plcid_SLZ2:		equ (ptr_PLC_SLZ2-ArtLoadCues)/2	; $B
000218EE =0000000C                  plcid_SYZ:		equ (ptr_PLC_SYZ-ArtLoadCues)/2		; $C
000218EE =0000000D                  plcid_SYZ2:		equ (ptr_PLC_SYZ2-ArtLoadCues)/2	; $D
000218EE =0000000E                  plcid_SBZ:		equ (ptr_PLC_SBZ-ArtLoadCues)/2		; $E
000218EE =0000000F                  plcid_SBZ2:		equ (ptr_PLC_SBZ2-ArtLoadCues)/2	; $F
000218EE =00000010                  plcid_TitleCard:	equ (ptr_PLC_TitleCard-ArtLoadCues)/2	; $10
000218EE =00000011                  plcid_Boss:		equ (ptr_PLC_Boss-ArtLoadCues)/2	; $11
000218EE =00000012                  plcid_Signpost:		equ (ptr_PLC_Signpost-ArtLoadCues)/2	; $12
000218EE =00000013                  plcid_Warp:		equ (ptr_PLC_Warp-ArtLoadCues)/2	; $13
000218EE =00000014                  plcid_SpecialStage:	equ (ptr_PLC_SpecialStage-ArtLoadCues)/2 ; $14
000218EE =00000015                  plcid_GHZAnimals:	equ (ptr_PLC_GHZAnimals-ArtLoadCues)/2	; $15
000218EE =00000016                  plcid_LZAnimals:	equ (ptr_PLC_LZAnimals-ArtLoadCues)/2	; $16
000218EE =00000017                  plcid_MZAnimals:	equ (ptr_PLC_MZAnimals-ArtLoadCues)/2	; $17
000218EE =00000018                  plcid_SLZAnimals:	equ (ptr_PLC_SLZAnimals-ArtLoadCues)/2	; $18
000218EE =00000019                  plcid_SYZAnimals:	equ (ptr_PLC_SYZAnimals-ArtLoadCues)/2	; $19
000218EE =0000001A                  plcid_SBZAnimals:	equ (ptr_PLC_SBZAnimals-ArtLoadCues)/2	; $1A
000218EE =0000001B                  plcid_SSResult:		equ (ptr_PLC_SSResult-ArtLoadCues)/2	; $1B
000218EE =0000001C                  plcid_Ending:		equ (ptr_PLC_Ending-ArtLoadCues)/2	; $1C
000218EE =0000001D                  plcid_TryAgain:		equ (ptr_PLC_TryAgain-ArtLoadCues)/2	; $1D
000218EE =0000001E                  plcid_EggmanSBZ2:	equ (ptr_PLC_EggmanSBZ2-ArtLoadCues)/2	; $1E
000218EE =0000001F                  plcid_FZBoss:		equ (ptr_PLC_FZBoss-ArtLoadCues)/2	; $1F
000218EE =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $20
000218EE =00000021                  plcid_LifeIcon:		equ (ptr_PLC_LifeIcon-ArtLoadCues)/2	; $21
000218EE =00000022                  plcid_LifeIconF:		equ (ptr_PLC_LifeIconF-ArtLoadCues)/2	; $21
000218EE =00000022                  plcid_LifeIconF:		equ (ptr_PLC_LifeIconF-ArtLoadCues)/2	; $21
000218EE                            
00021A00                            			dcb.b	$300,$FF
00021D00                            	Nem_SegaLogo:	incbin	"artnem\Sega Logo (JP1).bin" ; large Sega logo
00022170                            			even
00022170                            	Eni_SegaLogo:	incbin	"tilemaps\Sega Logo (JP1).bin" ; large Sega logo (mappings)
0002226C                            			even
0002226C                            Eni_Title:	incbin	"tilemaps\Title Screen.bin" ; title screen foreground (mappings)
0002234C                            		even
0002234C                            Nem_TitleFg:	incbin	"artnem\Title Screen Foreground.bin"
000237B8                            		even
000237B8                            Nem_TitleSonic:	incbin	"artnem\Title Screen Sonic.bin"
00025298                            		even
00025298                            Nem_TitleTM:	incbin	"artnem\Title Screen TM.bin"
000252CC                            		even
000252CC                            Nem_TitleMenu:   incbin   "artnem\titlemenu.bin"  
000254FE 00                         		even		
000254FE                            Eni_JapNames:	incbin	"tilemaps\Hidden Japanese Credits.bin" ; Japanese credits (mappings)
000255BC                            		even
000255BC                            Nem_JapNames:	incbin	"artnem\Hidden Japanese Credits.bin"
00025A64                            		even
00025A64                            
00025A64                            Map_Sonic:	include	"_maps\Sonic.asm"
00025A64                            ; --------------------------------------------------------------------------------
00025A64                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00025A64                            ; --------------------------------------------------------------------------------
00025A64                            
00025A64                            SME_wvX4F:	
00025A64 0000 0000                  		dc.w SME_wvX4F_1EE-SME_wvX4F, SME_wvX4F_1EF-SME_wvX4F	
00025A68 0000 0000                  		dc.w SME_wvX4F_204-SME_wvX4F, SME_wvX4F_232-SME_wvX4F	
00025A6C 0000 0000                  		dc.w SME_wvX4F_265-SME_wvX4F, SME_wvX4F_27A-SME_wvX4F	
00025A70 0000 0000                  		dc.w SME_wvX4F_28A-SME_wvX4F, SME_wvX4F_29A-SME_wvX4F	
00025A74 0000 0000                  		dc.w SME_wvX4F_2AF-SME_wvX4F, SME_wvX4F_2BA-SME_wvX4F	
00025A78 0000 0000                  		dc.w SME_wvX4F_2CA-SME_wvX4F, SME_wvX4F_2DA-SME_wvX4F	
00025A7C 0000 0000                  		dc.w SME_wvX4F_2EA-SME_wvX4F, SME_wvX4F_2FF-SME_wvX4F	
00025A80 0000 0000                  		dc.w SME_wvX4F_30F-SME_wvX4F, SME_wvX4F_333-SME_wvX4F	
00025A84 0000 0000                  		dc.w SME_wvX4F_34D-SME_wvX4F, SME_wvX4F_358-SME_wvX4F	
00025A88 0000 0000                  		dc.w SME_wvX4F_368-SME_wvX4F, SME_wvX4F_37D-SME_wvX4F	
00025A8C 0000 0000                  		dc.w SME_wvX4F_388-SME_wvX4F, SME_wvX4F_398-SME_wvX4F	
00025A90 0000 0000                  		dc.w SME_wvX4F_3B2-SME_wvX4F, SME_wvX4F_3CC-SME_wvX4F	
00025A94 0000 0000                  		dc.w SME_wvX4F_3EB-SME_wvX4F, SME_wvX4F_400-SME_wvX4F	
00025A98 0000 0000                  		dc.w SME_wvX4F_410-SME_wvX4F, SME_wvX4F_42A-SME_wvX4F	
00025A9C 0000 0000                  		dc.w SME_wvX4F_43F-SME_wvX4F, SME_wvX4F_44F-SME_wvX4F	
00025AA0 0000 0000                  		dc.w SME_wvX4F_469-SME_wvX4F, SME_wvX4F_47E-SME_wvX4F	
00025AA4 0000 0000                  		dc.w SME_wvX4F_489-SME_wvX4F, SME_wvX4F_494-SME_wvX4F	
00025AA8 0000 0000                  		dc.w SME_wvX4F_4AE-SME_wvX4F, SME_wvX4F_4C3-SME_wvX4F	
00025AAC 0000 0000                  		dc.w SME_wvX4F_4CE-SME_wvX4F, SME_wvX4F_4DE-SME_wvX4F	
00025AB0 0000 0000                  		dc.w SME_wvX4F_4EE-SME_wvX4F, SME_wvX4F_50D-SME_wvX4F	
00025AB4 0000 0000                  		dc.w SME_wvX4F_52C-SME_wvX4F, SME_wvX4F_541-SME_wvX4F	
00025AB8 0000 0000                  		dc.w SME_wvX4F_551-SME_wvX4F, SME_wvX4F_56B-SME_wvX4F	
00025ABC 0000 0000                  		dc.w SME_wvX4F_580-SME_wvX4F, SME_wvX4F_590-SME_wvX4F	
00025AC0 0000 0000                  		dc.w SME_wvX4F_5AA-SME_wvX4F, SME_wvX4F_5B5-SME_wvX4F	
00025AC4 0000 0000                  		dc.w SME_wvX4F_5C0-SME_wvX4F, SME_wvX4F_5CB-SME_wvX4F	
00025AC8 0000 0000                  		dc.w SME_wvX4F_5D6-SME_wvX4F, SME_wvX4F_5E1-SME_wvX4F	
00025ACC 0000 0000                  		dc.w SME_wvX4F_5EC-SME_wvX4F, SME_wvX4F_5F7-SME_wvX4F	
00025AD0 0000 0000                  		dc.w SME_wvX4F_602-SME_wvX4F, SME_wvX4F_617-SME_wvX4F	
00025AD4 0000 0000                  		dc.w SME_wvX4F_627-SME_wvX4F, SME_wvX4F_637-SME_wvX4F	
00025AD8 0000 0000                  		dc.w SME_wvX4F_647-SME_wvX4F, SME_wvX4F_65C-SME_wvX4F	
00025ADC 0000 0000                  		dc.w SME_wvX4F_66C-SME_wvX4F, SME_wvX4F_67C-SME_wvX4F	
00025AE0 0000 0000                  		dc.w SME_wvX4F_68C-SME_wvX4F, SME_wvX4F_697-SME_wvX4F	
00025AE4 0000 0000                  		dc.w SME_wvX4F_6A2-SME_wvX4F, SME_wvX4F_6AD-SME_wvX4F	
00025AE8 0000 0000                  		dc.w SME_wvX4F_6B8-SME_wvX4F, SME_wvX4F_6C3-SME_wvX4F	
00025AEC 0000 0000                  		dc.w SME_wvX4F_6CE-SME_wvX4F, SME_wvX4F_6D9-SME_wvX4F	
00025AF0 0000 0000                  		dc.w SME_wvX4F_6E4-SME_wvX4F, SME_wvX4F_6F9-SME_wvX4F	
00025AF4 0000 0000                  		dc.w SME_wvX4F_709-SME_wvX4F, SME_wvX4F_714-SME_wvX4F	
00025AF8 0000 0000                  		dc.w SME_wvX4F_724-SME_wvX4F, SME_wvX4F_739-SME_wvX4F	
00025AFC 0000 0000                  		dc.w SME_wvX4F_749-SME_wvX4F, SME_wvX4F_754-SME_wvX4F	
00025B00 0000 0000                  		dc.w SME_wvX4F_764-SME_wvX4F, SME_wvX4F_774-SME_wvX4F	
00025B04 0000 0000                  		dc.w SME_wvX4F_784-SME_wvX4F, SME_wvX4F_7B2-SME_wvX4F	
00025B08 0000 0000                  		dc.w SME_wvX4F_7E0-SME_wvX4F, SME_wvX4F_7F0-SME_wvX4F	
00025B0C 0000 0000                  		dc.w SME_wvX4F_800-SME_wvX4F, SME_wvX4F_810-SME_wvX4F	
00025B10 0000 0000                  		dc.w SME_wvX4F_82A-SME_wvX4F, SME_wvX4F_83A-SME_wvX4F	
00025B14 0000 0000                  		dc.w SME_wvX4F_84A-SME_wvX4F, SME_wvX4F_864-SME_wvX4F	
00025B18 0000 0000                  		dc.w SME_wvX4F_87E-SME_wvX4F, SME_wvX4F_893-SME_wvX4F	
00025B1C 0000 0000                  		dc.w SME_wvX4F_8A8-SME_wvX4F, SME_wvX4F_8BD-SME_wvX4F	
00025B20 0000 0000                  		dc.w SME_wvX4F_8D2-SME_wvX4F, SME_wvX4F_8D8-SME_wvX4F	
00025B24 0000 0000                  		dc.w SME_wvX4F_8DE-SME_wvX4F, SME_wvX4F_8E4-SME_wvX4F	
00025B28 0000 0000                  		dc.w SME_wvX4F_8EA-SME_wvX4F, SME_wvX4F_8F0-SME_wvX4F	
00025B2C 0000 0000                  		dc.w SME_wvX4F_8F6-SME_wvX4F, SME_wvX4F_8FC-SME_wvX4F	
00025B30 0000 0000                  		dc.w SME_wvX4F_90C-SME_wvX4F, SME_wvX4F_912-SME_wvX4F	
00025B34 0000 0000                  		dc.w SME_wvX4F_91D-SME_wvX4F, SME_wvX4F_923-SME_wvX4F	
00025B38 0000 0000                  		dc.w SME_wvX4F_92E-SME_wvX4F, SME_wvX4F_934-SME_wvX4F	
00025B3C 0000 0000                  		dc.w SME_wvX4F_949-SME_wvX4F, SME_wvX4F_96D-SME_wvX4F	
00025B40 0000 0000                  		dc.w SME_wvX4F_987-SME_wvX4F, SME_wvX4F_997-SME_wvX4F	
00025B44 0000 0000                  		dc.w SME_wvX4F_9B1-SME_wvX4F, SME_wvX4F_9C6-SME_wvX4F	
00025B48 0000 0000                  		dc.w SME_wvX4F_9DB-SME_wvX4F, SME_wvX4F_9F0-SME_wvX4F	
00025B4C 0000 0000                  		dc.w SME_wvX4F_A1E-SME_wvX4F, SME_wvX4F_A2E-SME_wvX4F	
00025B50 0000 0000                  		dc.w SME_wvX4F_A3E-SME_wvX4F, SME_wvX4F_A4E-SME_wvX4F	
00025B54 0000 0000                  		dc.w SME_wvX4F_A4F-SME_wvX4F, SME_wvX4F_A78-SME_wvX4F	
00025B58 0000 0000                  		dc.w SME_wvX4F_A9C-SME_wvX4F, SME_wvX4F_AB1-SME_wvX4F	
00025B5C 0000 0000                  		dc.w SME_wvX4F_AC1-SME_wvX4F, SME_wvX4F_AD1-SME_wvX4F	
00025B60 0000 0000                  		dc.w SME_wvX4F_AE1-SME_wvX4F, SME_wvX4F_AEC-SME_wvX4F	
00025B64 0000 0000                  		dc.w SME_wvX4F_AFC-SME_wvX4F, SME_wvX4F_B0C-SME_wvX4F	
00025B68 0000 0000                  		dc.w SME_wvX4F_B1C-SME_wvX4F, SME_wvX4F_B2C-SME_wvX4F	
00025B6C 0000 0000                  		dc.w SME_wvX4F_B41-SME_wvX4F, SME_wvX4F_B6A-SME_wvX4F	
00025B70 0000 0000                  		dc.w SME_wvX4F_B7F-SME_wvX4F, SME_wvX4F_B94-SME_wvX4F	
00025B74 0000 0000                  		dc.w SME_wvX4F_BAE-SME_wvX4F, SME_wvX4F_BC8-SME_wvX4F	
00025B78 0000 0000                  		dc.w SME_wvX4F_BD3-SME_wvX4F, SME_wvX4F_BED-SME_wvX4F	
00025B7C 0000 0000                  		dc.w SME_wvX4F_BFD-SME_wvX4F, SME_wvX4F_C17-SME_wvX4F	
00025B80 0000 0000                  		dc.w SME_wvX4F_C22-SME_wvX4F, SME_wvX4F_C32-SME_wvX4F	
00025B84 0000 0000                  		dc.w SME_wvX4F_C42-SME_wvX4F, SME_wvX4F_C52-SME_wvX4F	
00025B88 0000 0000                  		dc.w SME_wvX4F_C5D-SME_wvX4F, SME_wvX4F_C6D-SME_wvX4F	
00025B8C 0000 0000                  		dc.w SME_wvX4F_CA5-SME_wvX4F, SME_wvX4F_CC4-SME_wvX4F	
00025B90 0000 0000                  		dc.w SME_wvX4F_CD4-SME_wvX4F, SME_wvX4F_CF8-SME_wvX4F	
00025B94 0000 0000                  		dc.w SME_wvX4F_D03-SME_wvX4F, SME_wvX4F_D18-SME_wvX4F	
00025B98 0000 0000                  		dc.w SME_wvX4F_D28-SME_wvX4F, SME_wvX4F_D38-SME_wvX4F	
00025B9C 0000 0000                  		dc.w SME_wvX4F_D4D-SME_wvX4F, SME_wvX4F_D53-SME_wvX4F	
00025BA0 0000 0000                  		dc.w SME_wvX4F_D59-SME_wvX4F, SME_wvX4F_D5F-SME_wvX4F	
00025BA4 0000 0000                  		dc.w SME_wvX4F_D65-SME_wvX4F, SME_wvX4F_D70-SME_wvX4F	
00025BA8 0000 0000                  		dc.w SME_wvX4F_D76-SME_wvX4F, SME_wvX4F_D7C-SME_wvX4F	
00025BAC 0000 0000                  		dc.w SME_wvX4F_D82-SME_wvX4F, SME_wvX4F_D92-SME_wvX4F	
00025BB0 0000 0000                  		dc.w SME_wvX4F_DA2-SME_wvX4F, SME_wvX4F_DB2-SME_wvX4F	
00025BB4 0000 0000                  		dc.w SME_wvX4F_DC2-SME_wvX4F, SME_wvX4F_DD2-SME_wvX4F	
00025BB8 0000 0000                  		dc.w SME_wvX4F_DFB-SME_wvX4F, SME_wvX4F_E0B-SME_wvX4F	
00025BBC 0000 0000                  		dc.w SME_wvX4F_E1B-SME_wvX4F, SME_wvX4F_E3F-SME_wvX4F	
00025BC0 0000 0000                  		dc.w SME_wvX4F_E4F-SME_wvX4F, SME_wvX4F_E55-SME_wvX4F	
00025BC4 0000 0000                  		dc.w SME_wvX4F_E5B-SME_wvX4F, SME_wvX4F_E7F-SME_wvX4F	
00025BC8 0000 0000                  		dc.w SME_wvX4F_E8F-SME_wvX4F, SME_wvX4F_E95-SME_wvX4F	
00025BCC 0000 0000                  		dc.w SME_wvX4F_EA0-SME_wvX4F, SME_wvX4F_EAB-SME_wvX4F	
00025BD0 0000 0000                  		dc.w SME_wvX4F_EC5-SME_wvX4F, SME_wvX4F_EE4-SME_wvX4F	
00025BD4 0000 0000                  		dc.w SME_wvX4F_EF9-SME_wvX4F, SME_wvX4F_F09-SME_wvX4F	
00025BD8 0000 0000                  		dc.w SME_wvX4F_F23-SME_wvX4F, SME_wvX4F_F38-SME_wvX4F	
00025BDC 0000 0000                  		dc.w SME_wvX4F_F48-SME_wvX4F, SME_wvX4F_F62-SME_wvX4F	
00025BE0 0000 0000                  		dc.w SME_wvX4F_F72-SME_wvX4F, SME_wvX4F_F78-SME_wvX4F	
00025BE4 0000 0000                  		dc.w SME_wvX4F_F7E-SME_wvX4F, SME_wvX4F_F8E-SME_wvX4F	
00025BE8 0000 0000                  		dc.w SME_wvX4F_F9E-SME_wvX4F, SME_wvX4F_FA4-SME_wvX4F	
00025BEC 0000 0000                  		dc.w SME_wvX4F_FB4-SME_wvX4F, SME_wvX4F_FBF-SME_wvX4F	
00025BF0 0000 0000                  		dc.w SME_wvX4F_FDE-SME_wvX4F, SME_wvX4F_FFD-SME_wvX4F	
00025BF4 0000 0000                  		dc.w SME_wvX4F_1012-SME_wvX4F, SME_wvX4F_1022-SME_wvX4F	
00025BF8 0000 0000                  		dc.w SME_wvX4F_103C-SME_wvX4F, SME_wvX4F_1051-SME_wvX4F	
00025BFC 0000 0000                  		dc.w SME_wvX4F_1061-SME_wvX4F, SME_wvX4F_107B-SME_wvX4F	
00025C00 0000 0000                  		dc.w SME_wvX4F_108B-SME_wvX4F, SME_wvX4F_10A5-SME_wvX4F	
00025C04 0000 0000                  		dc.w SME_wvX4F_10BA-SME_wvX4F, SME_wvX4F_10CF-SME_wvX4F	
00025C08 0000 0000                  		dc.w SME_wvX4F_10DA-SME_wvX4F, SME_wvX4F_10E5-SME_wvX4F	
00025C0C 0000 0000                  		dc.w SME_wvX4F_10F0-SME_wvX4F, SME_wvX4F_10FB-SME_wvX4F	
00025C10 0000 0000                  		dc.w SME_wvX4F_1106-SME_wvX4F, SME_wvX4F_1116-SME_wvX4F	
00025C14 0000 0000                  		dc.w SME_wvX4F_1126-SME_wvX4F, SME_wvX4F_114A-SME_wvX4F	
00025C18 0000 0000                  		dc.w SME_wvX4F_1155-SME_wvX4F, SME_wvX4F_1160-SME_wvX4F	
00025C1C 0000 0000                  		dc.w SME_wvX4F_116B-SME_wvX4F, SME_wvX4F_1176-SME_wvX4F	
00025C20 0000 0000                  		dc.w SME_wvX4F_1186-SME_wvX4F, SME_wvX4F_119B-SME_wvX4F	
00025C24 0000 0000                  		dc.w SME_wvX4F_119C-SME_wvX4F, SME_wvX4F_119D-SME_wvX4F	
00025C28 0000 0000                  		dc.w SME_wvX4F_11AD-SME_wvX4F, SME_wvX4F_11BD-SME_wvX4F	
00025C2C 0000 0000                  		dc.w SME_wvX4F_11BE-SME_wvX4F, SME_wvX4F_11BF-SME_wvX4F	
00025C30 0000 0000                  		dc.w SME_wvX4F_11CA-SME_wvX4F, SME_wvX4F_11D0-SME_wvX4F	
00025C34 0000 0000                  		dc.w SME_wvX4F_11DB-SME_wvX4F, SME_wvX4F_11E6-SME_wvX4F	
00025C38 0000 0000                  		dc.w SME_wvX4F_11F1-SME_wvX4F, SME_wvX4F_11FC-SME_wvX4F	
00025C3C 0000 0000                  		dc.w SME_wvX4F_1216-SME_wvX4F, SME_wvX4F_1230-SME_wvX4F	
00025C40 0000 0000                  		dc.w SME_wvX4F_123B-SME_wvX4F, SME_wvX4F_1246-SME_wvX4F	
00025C44 0000 0000                  		dc.w SME_wvX4F_1251-SME_wvX4F, SME_wvX4F_125C-SME_wvX4F	
00025C48 0000 0000                  		dc.w SME_wvX4F_1267-SME_wvX4F, SME_wvX4F_1272-SME_wvX4F	
00025C4C 0000 0000                  		dc.w SME_wvX4F_127D-SME_wvX4F, SME_wvX4F_1288-SME_wvX4F	
00025C50 0000                       		dc.w SME_wvX4F_1293-SME_wvX4F	
00025C52 00                         SME_wvX4F_1EE:	dc.b 0	
00025C53 04                         SME_wvX4F_1EF:	dc.b 4	
00025C54 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00025C59 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
00025C5E 0408 000B F0               		dc.b 4, 8, 0, $B, $F0	
00025C63 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00025C68 09                         SME_wvX4F_204:	dc.b 9	
00025C69 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00025C6E 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
00025C73 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00025C78 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00025C7D FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
00025C82 F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00025C87 FC00 000D F8               		dc.b $FC, 0, 0, $D, $F8	
00025C8C FC00 000E 08               		dc.b $FC, 0, 0, $E, 8	
00025C91 F404 000F F8               		dc.b $F4, 4, 0, $F, $F8	
00025C96 0A                         SME_wvX4F_232:	dc.b $A	
00025C97 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00025C9C 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
00025CA1 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00025CA6 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00025CAB FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
00025CB0 F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00025CB5 FC00 000D 08               		dc.b $FC, 0, 0, $D, 8	
00025CBA F400 000E F8               		dc.b $F4, 0, 0, $E, $F8	
00025CBF F400 000F 00               		dc.b $F4, 0, 0, $F, 0	
00025CC4 FC00 0010 F8               		dc.b $FC, 0, 0, $10, $F8	
00025CC9 04                         SME_wvX4F_265:	dc.b 4	
00025CCA EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00025CCF F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00025CD4 FC00 100D 08               		dc.b $FC, 0, $10, $D, 8	
00025CD9 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00025CDE 03                         SME_wvX4F_27A:	dc.b 3	
00025CDF EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025CE4 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025CE9 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00025CEE 03                         SME_wvX4F_28A:	dc.b 3	
00025CEF EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025CF4 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025CF9 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00025CFE 04                         SME_wvX4F_29A:	dc.b 4	
00025CFF EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025D04 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025D09 0C04 000C 00               		dc.b $C, 4, 0, $C, 0	
00025D0E 0C00 000E F8               		dc.b $C, 0, 0, $E, $F8	
00025D13 02                         SME_wvX4F_2AF:	dc.b 2	
00025D14 F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025D19 0401 000C 08               		dc.b 4, 1, 0, $C, 8	
00025D1E 03                         SME_wvX4F_2BA:	dc.b 3	
00025D1F FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025D24 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025D29 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
00025D2E 03                         SME_wvX4F_2CA:	dc.b 3	
00025D2F FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025D34 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025D39 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
00025D3E 03                         SME_wvX4F_2DA:	dc.b 3	
00025D3F F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025D44 EC08 000C F0               		dc.b $EC, 8, 0, $C, $F0	
00025D49 FC02 000F 08               		dc.b $FC, 2, 0, $F, 8	
00025D4E 04                         SME_wvX4F_2EA:	dc.b 4	
00025D4F 0408 0000 F0               		dc.b 4, 8, 0, 0, $F0	
00025D54 0C08 0003 F8               		dc.b $C, 8, 0, 3, $F8	
00025D59 EC0A 0006 F0               		dc.b $EC, $A, 0, 6, $F0	
00025D5E F400 000F 08               		dc.b $F4, 0, 0, $F, 8	
00025D63 03                         SME_wvX4F_2FF:	dc.b 3	
00025D64 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
00025D69 0408 0009 F0               		dc.b 4, 8, 0, 9, $F0	
00025D6E 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00025D73 07                         SME_wvX4F_30F:	dc.b 7	
00025D74 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00025D79 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
00025D7E 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
00025D83 F300 000E F5               		dc.b $F3, 0, 0, $E, $F5	
00025D88 EB05 000F FD               		dc.b $EB, 5, 0, $F, $FD	
00025D8D EB00 0013 F5               		dc.b $EB, 0, 0, $13, $F5	
00025D92 F300 0014 ED               		dc.b $F3, 0, 0, $14, $ED	
00025D97 05                         SME_wvX4F_333:	dc.b 5	
00025D98 FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
00025D9D F400 000C F5               		dc.b $F4, 0, 0, $C, $F5	
00025DA2 EC05 000D FD               		dc.b $EC, 5, 0, $D, $FD	
00025DA7 EC00 0011 F5               		dc.b $EC, 0, 0, $11, $F5	
00025DAC F400 0012 ED               		dc.b $F4, 0, 0, $12, $ED	
00025DB1 02                         SME_wvX4F_34D:	dc.b 2	
00025DB2 FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
00025DB7 ED09 0009 F5               		dc.b $ED, 9, 0, 9, $F5	
00025DBC 03                         SME_wvX4F_358:	dc.b 3	
00025DBD F30F 0000 F0               		dc.b $F3, $F, 0, 0, $F0	
00025DC2 EB0C 0010 F0               		dc.b $EB, $C, 0, $10, $F0	
00025DC7 0500 0014 10               		dc.b 5, 0, 0, $14, $10	
00025DCC 04                         SME_wvX4F_368:	dc.b 4	
00025DCD EB09 0000 F5               		dc.b $EB, 9, 0, 0, $F5	
00025DD2 FB09 0006 ED               		dc.b $FB, 9, 0, 6, $ED	
00025DD7 FB06 000C 05               		dc.b $FB, 6, 0, $C, 5	
00025DDC 0B04 0012 ED               		dc.b $B, 4, 0, $12, $ED	
00025DE1 02                         SME_wvX4F_37D:	dc.b 2	
00025DE2 EC09 0000 F6               		dc.b $EC, 9, 0, 0, $F6	
00025DE7 FC0E 0006 EE               		dc.b $FC, $E, 0, 6, $EE	
00025DEC 03                         SME_wvX4F_388:	dc.b 3	
00025DED ED09 0000 F6               		dc.b $ED, 9, 0, 0, $F6	
00025DF2 FD06 0006 F6               		dc.b $FD, 6, 0, 6, $F6	
00025DF7 FD00 000C 06               		dc.b $FD, 0, 0, $C, 6	
00025DFC 05                         SME_wvX4F_398:	dc.b 5	
00025DFD FD0C 0000 F6               		dc.b $FD, $C, 0, 0, $F6	
00025E02 0509 0004 F6               		dc.b 5, 9, 0, 4, $F6	
00025E07 F500 000A EE               		dc.b $F5, 0, 0, $A, $EE	
00025E0C ED01 000B F6               		dc.b $ED, 1, 0, $B, $F6	
00025E11 ED05 000D FE               		dc.b $ED, 5, 0, $D, $FE	
00025E16 05                         SME_wvX4F_3B2:	dc.b 5	
00025E17 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00025E1C EC06 0006 04               		dc.b $EC, 6, 0, 6, 4	
00025E21 FC08 000C EC               		dc.b $FC, 8, 0, $C, $EC	
00025E26 0409 000F F4               		dc.b 4, 9, 0, $F, $F4	
00025E2B 1400 0015 FC               		dc.b $14, 0, 0, $15, $FC	
00025E30 06                         SME_wvX4F_3CC:	dc.b 6	
00025E31 ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00025E36 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
00025E3B FD0C 0008 ED               		dc.b $FD, $C, 0, 8, $ED	
00025E40 0509 000C F5               		dc.b 5, 9, 0, $C, $F5	
00025E45 FD05 0012 0D               		dc.b $FD, 5, 0, $12, $D	
00025E4A F500 0016 15               		dc.b $F5, 0, 0, $16, $15	
00025E4F 04                         SME_wvX4F_3EB:	dc.b 4	
00025E50 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025E55 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00025E5A FE0D 0008 F6               		dc.b $FE, $D, 0, 8, $F6	
00025E5F 0E08 0010 FE               		dc.b $E, 8, 0, $10, $FE	
00025E64 03                         SME_wvX4F_400:	dc.b 3	
00025E65 ED0F 0000 EF               		dc.b $ED, $F, 0, 0, $EF	
00025E6A ED03 0010 0F               		dc.b $ED, 3, 0, $10, $F	
00025E6F 0D0C 0014 F7               		dc.b $D, $C, 0, $14, $F7	
00025E74 05                         SME_wvX4F_410:	dc.b 5	
00025E75 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00025E7A EC05 0006 04               		dc.b $EC, 5, 0, 6, 4	
00025E7F FC0D 000A F4               		dc.b $FC, $D, 0, $A, $F4	
00025E84 0C08 0012 F4               		dc.b $C, 8, 0, $12, $F4	
00025E89 1404 0015 FC               		dc.b $14, 4, 0, $15, $FC	
00025E8E 04                         SME_wvX4F_42A:	dc.b 4	
00025E8F EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
00025E94 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
00025E99 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
00025E9E 0C08 0010 FD               		dc.b $C, 8, 0, $10, $FD	
00025EA3 03                         SME_wvX4F_43F:	dc.b 3	
00025EA4 ED0F 0000 ED               		dc.b $ED, $F, 0, 0, $ED	
00025EA9 ED03 0010 0D               		dc.b $ED, 3, 0, $10, $D	
00025EAE 0D0C 0014 F5               		dc.b $D, $C, 0, $14, $F5	
00025EB3 05                         SME_wvX4F_44F:	dc.b 5	
00025EB4 ED09 0000 EE               		dc.b $ED, 9, 0, 0, $EE	
00025EB9 ED01 0006 06               		dc.b $ED, 1, 0, 6, 6	
00025EBE FD00 0008 EE               		dc.b $FD, 0, 0, 8, $EE	
00025EC3 FD0D 0009 F6               		dc.b $FD, $D, 0, 9, $F6	
00025EC8 0D08 0011 FE               		dc.b $D, 8, 0, $11, $FE	
00025ECD 04                         SME_wvX4F_469:	dc.b 4	
00025ECE F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
00025ED3 EB09 0008 FD               		dc.b $EB, 9, 0, 8, $FD	
00025ED8 FB04 000E FD               		dc.b $FB, 4, 0, $E, $FD	
00025EDD 0309 0010 FD               		dc.b 3, 9, 0, $10, $FD	
00025EE2 02                         SME_wvX4F_47E:	dc.b 2	
00025EE3 F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
00025EE8 EC0B 0008 FD               		dc.b $EC, $B, 0, 8, $FD	
00025EED 02                         SME_wvX4F_489:	dc.b 2	
00025EEE F40A 0000 FD               		dc.b $F4, $A, 0, 0, $FD	
00025EF3 F406 0009 ED               		dc.b $F4, 6, 0, 9, $ED	
00025EF8 05                         SME_wvX4F_494:	dc.b 5	
00025EF9 E900 0000 04               		dc.b $E9, 0, 0, 0, 4	
00025EFE F10C 0001 F4               		dc.b $F1, $C, 0, 1, $F4	
00025F03 F100 0005 EC               		dc.b $F1, 0, 0, 5, $EC	
00025F08 F90E 0006 EC               		dc.b $F9, $E, 0, 6, $EC	
00025F0D F902 0012 0C               		dc.b $F9, 2, 0, $12, $C	
00025F12 04                         SME_wvX4F_4AE:	dc.b 4	
00025F13 F306 0000 EC               		dc.b $F3, 6, 0, 0, $EC	
00025F18 EB09 0006 FC               		dc.b $EB, 9, 0, 6, $FC	
00025F1D FB04 000C FC               		dc.b $FB, 4, 0, $C, $FC	
00025F22 0309 000E FC               		dc.b 3, 9, 0, $E, $FC	
00025F27 02                         SME_wvX4F_4C3:	dc.b 2	
00025F28 F306 0000 ED               		dc.b $F3, 6, 0, 0, $ED	
00025F2D F30B 0006 FD               		dc.b $F3, $B, 0, 6, $FD	
00025F32 03                         SME_wvX4F_4CE:	dc.b 3	
00025F33 F408 0000 ED               		dc.b $F4, 8, 0, 0, $ED	
00025F38 FC0D 0003 ED               		dc.b $FC, $D, 0, 3, $ED	
00025F3D FC01 000B 0D               		dc.b $FC, 1, 0, $B, $D	
00025F42 03                         SME_wvX4F_4DE:	dc.b 3	
00025F43 F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
00025F48 EC00 0008 FD               		dc.b $EC, 0, 0, 8, $FD	
00025F4D F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD	
00025F52 06                         SME_wvX4F_4EE:	dc.b 6	
00025F53 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00025F58 EC04 0006 F6               		dc.b $EC, 4, 0, 6, $F6	
00025F5D F404 0008 EE               		dc.b $F4, 4, 0, 8, $EE	
00025F62 F40A 000A FE               		dc.b $F4, $A, 0, $A, $FE	
00025F67 0C00 0013 FE               		dc.b $C, 0, 0, $13, $FE	
00025F6C FC00 0014 16               		dc.b $FC, 0, 0, $14, $16	
00025F71 06                         SME_wvX4F_50D:	dc.b 6	
00025F72 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00025F77 E408 0006 F7               		dc.b $E4, 8, 0, 6, $F7	
00025F7C EC04 0009 FF               		dc.b $EC, 4, 0, 9, $FF	
00025F81 F404 000B EF               		dc.b $F4, 4, 0, $B, $EF	
00025F86 F40A 000D FF               		dc.b $F4, $A, 0, $D, $FF	
00025F8B 0C00 0016 FF               		dc.b $C, 0, 0, $16, $FF	
00025F90 04                         SME_wvX4F_52C:	dc.b 4	
00025F91 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00025F96 F304 0006 EF               		dc.b $F3, 4, 0, 6, $EF	
00025F9B EB0A 0008 FF               		dc.b $EB, $A, 0, 8, $FF	
00025FA0 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00025FA5 03                         SME_wvX4F_541:	dc.b 3	
00025FA6 E90F 0000 F5               		dc.b $E9, $F, 0, 0, $F5	
00025FAB F102 0010 ED               		dc.b $F1, 2, 0, $10, $ED	
00025FB0 0908 0013 ED               		dc.b 9, 8, 0, $13, $ED	
00025FB5 05                         SME_wvX4F_551:	dc.b 5	
00025FB6 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00025FBB EC08 0006 F6               		dc.b $EC, 8, 0, 6, $F6	
00025FC0 F404 0009 EE               		dc.b $F4, 4, 0, 9, $EE	
00025FC5 F40D 000B FE               		dc.b $F4, $D, 0, $B, $FE	
00025FCA 0408 0013 FE               		dc.b 4, 8, 0, $13, $FE	
00025FCF 04                         SME_wvX4F_56B:	dc.b 4	
00025FD0 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00025FD5 F404 0006 EF               		dc.b $F4, 4, 0, 6, $EF	
00025FDA EC0A 0008 FF               		dc.b $EC, $A, 0, 8, $FF	
00025FDF 0404 0011 FF               		dc.b 4, 4, 0, $11, $FF	
00025FE4 03                         SME_wvX4F_580:	dc.b 3	
00025FE5 EB0F 0000 F0               		dc.b $EB, $F, 0, 0, $F0	
00025FEA 0B08 0010 F0               		dc.b $B, 8, 0, $10, $F0	
00025FEF EB01 0013 0F               		dc.b $EB, 1, 0, $13, $F	
00025FF4 05                         SME_wvX4F_590:	dc.b 5	
00025FF5 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00025FFA EB0A 0006 FF               		dc.b $EB, $A, 0, 6, $FF	
00025FFF F304 000F EF               		dc.b $F3, 4, 0, $F, $EF	
00026004 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00026009 0B00 0013 FF               		dc.b $B, 0, 0, $13, $FF	
0002600E 02                         SME_wvX4F_5AA:	dc.b 2	
0002600F EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026014 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00026019 02                         SME_wvX4F_5B5:	dc.b 2	
0002601A FE0E 0000 EC               		dc.b $FE, $E, 0, 0, $EC	
0002601F EE09 000C F4               		dc.b $EE, 9, 0, $C, $F4	
00026024 02                         SME_wvX4F_5C0:	dc.b 2	
00026025 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002602A FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002602F 02                         SME_wvX4F_5CB:	dc.b 2	
00026030 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026035 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002603A 02                         SME_wvX4F_5D6:	dc.b 2	
0002603B EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026040 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00026045 02                         SME_wvX4F_5E1:	dc.b 2	
00026046 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002604B FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00026050 02                         SME_wvX4F_5EC:	dc.b 2	
00026051 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026056 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002605B 02                         SME_wvX4F_5F7:	dc.b 2	
0002605C EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026061 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00026066 04                         SME_wvX4F_602:	dc.b 4	
00026067 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002606C EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00026071 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00026076 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
0002607B 03                         SME_wvX4F_617:	dc.b 3	
0002607C F60F 0000 F6               		dc.b $F6, $F, 0, 0, $F6	
00026081 EE02 0010 EE               		dc.b $EE, 2, 0, $10, $EE	
00026086 EE08 0013 F6               		dc.b $EE, 8, 0, $13, $F6	
0002608B 03                         SME_wvX4F_627:	dc.b 3	
0002608C EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00026091 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00026096 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
0002609B 03                         SME_wvX4F_637:	dc.b 3	
0002609C FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000260A1 EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000260A6 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000260AB 04                         SME_wvX4F_647:	dc.b 4	
000260AC EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000260B1 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000260B6 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000260BB FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000260C0 03                         SME_wvX4F_65C:	dc.b 3	
000260C1 FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000260C6 EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000260CB FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000260D0 03                         SME_wvX4F_66C:	dc.b 3	
000260D1 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000260D6 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000260DB FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000260E0 03                         SME_wvX4F_67C:	dc.b 3	
000260E1 EE0D 0000 EE               		dc.b $EE, $D, 0, 0, $EE	
000260E6 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000260EB FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000260F0 02                         SME_wvX4F_68C:	dc.b 2	
000260F1 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000260F6 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000260FB 02                         SME_wvX4F_697:	dc.b 2	
000260FC F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026101 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026106 02                         SME_wvX4F_6A2:	dc.b 2	
00026107 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002610C F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026111 02                         SME_wvX4F_6AD:	dc.b 2	
00026112 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026117 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002611C 02                         SME_wvX4F_6B8:	dc.b 2	
0002611D F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026122 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026127 02                         SME_wvX4F_6C3:	dc.b 2	
00026128 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002612D F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026132 02                         SME_wvX4F_6CE:	dc.b 2	
00026133 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026138 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002613D 02                         SME_wvX4F_6D9:	dc.b 2	
0002613E F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026143 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026148 04                         SME_wvX4F_6E4:	dc.b 4	
00026149 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002614E F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
00026153 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00026158 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
0002615D 03                         SME_wvX4F_6F9:	dc.b 3	
0002615E EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
00026163 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00026168 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
0002616D 02                         SME_wvX4F_709:	dc.b 2	
0002616E F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
00026173 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00026178 03                         SME_wvX4F_714:	dc.b 3	
00026179 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002617E 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00026183 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00026188 04                         SME_wvX4F_724:	dc.b 4	
00026189 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002618E F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
00026193 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00026198 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
0002619D 03                         SME_wvX4F_739:	dc.b 3	
0002619E EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000261A3 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000261A8 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000261AD 02                         SME_wvX4F_749:	dc.b 2	
000261AE F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
000261B3 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000261B8 03                         SME_wvX4F_754:	dc.b 3	
000261B9 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000261BE 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000261C3 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000261C8 03                         SME_wvX4F_764:	dc.b 3	
000261C9 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000261CE 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000261D3 F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000261D8 03                         SME_wvX4F_774:	dc.b 3	
000261D9 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000261DE 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000261E3 F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000261E8 09                         SME_wvX4F_784:	dc.b 9	
000261E9 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
000261EE F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
000261F3 1000 0009 F3               		dc.b $10, 0, 0, 9, $F3	
000261F8 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
000261FD 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
00026202 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00026207 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
0002620C F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
00026211 F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00026216 09                         SME_wvX4F_7B2:	dc.b 9	
00026217 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
0002621C F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
00026221 1000 0009 F0               		dc.b $10, 0, 0, 9, $F0	
00026226 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
0002622B 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
00026230 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00026235 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
0002623A F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
0002623F F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00026244 03                         SME_wvX4F_7E0:	dc.b 3	
00026245 F20F 0000 F5               		dc.b $F2, $F, 0, 0, $F5	
0002624A 0201 0010 ED               		dc.b 2, 1, 0, $10, $ED	
0002624F EA0C 0012 F5               		dc.b $EA, $C, 0, $12, $F5	
00026254 03                         SME_wvX4F_7F0:	dc.b 3	
00026255 F40B 0000 EF               		dc.b $F4, $B, 0, 0, $EF	
0002625A EC07 000C 07               		dc.b $EC, 7, 0, $C, 7	
0002625F EC04 0014 F7               		dc.b $EC, 4, 0, $14, $F7	
00026264 03                         SME_wvX4F_800:	dc.b 3	
00026265 F30F 0000 F4               		dc.b $F3, $F, 0, 0, $F4	
0002626A EB0C 0010 F4               		dc.b $EB, $C, 0, $10, $F4	
0002626F 0300 0014 EC               		dc.b 3, 0, 0, $14, $EC	
00026274 05                         SME_wvX4F_810:	dc.b 5	
00026275 F10E 0000 F7               		dc.b $F1, $E, 0, 0, $F7	
0002627A 090C 000C EF               		dc.b 9, $C, 0, $C, $EF	
0002627F F901 0010 EF               		dc.b $F9, 1, 0, $10, $EF	
00026284 1104 0012 F7               		dc.b $11, 4, 0, $12, $F7	
00026289 E908 0014 F7               		dc.b $E9, 8, 0, $14, $F7	
0002628E 03                         SME_wvX4F_82A:	dc.b 3	
0002628F ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
00026294 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
00026299 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
0002629E 03                         SME_wvX4F_83A:	dc.b 3	
0002629F ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
000262A4 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
000262A9 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
000262AE 05                         SME_wvX4F_84A:	dc.b 5	
000262AF 0509 0000 F6               		dc.b 5, 9, 0, 0, $F6	
000262B4 ED02 0006 0E               		dc.b $ED, 2, 0, 6, $E	
000262B9 0500 0009 0E               		dc.b 5, 0, 0, 9, $E	
000262BE ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000262C3 ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000262C8 05                         SME_wvX4F_864:	dc.b 5	
000262C9 ED02 0000 0E               		dc.b $ED, 2, 0, 0, $E	
000262CE 0509 0003 F6               		dc.b 5, 9, 0, 3, $F6	
000262D3 0800 0009 0E               		dc.b 8, 0, 0, 9, $E	
000262D8 ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000262DD ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000262E2 04                         SME_wvX4F_87E:	dc.b 4	
000262E3 F00E 0000 E9               		dc.b $F0, $E, 0, 0, $E9	
000262E8 0808 000C F9               		dc.b 8, 8, 0, $C, $F9	
000262ED E808 000F F1               		dc.b $E8, 8, 0, $F, $F1	
000262F2 F002 0012 09               		dc.b $F0, 2, 0, $12, 9	
000262F7 04                         SME_wvX4F_893:	dc.b 4	
000262F8 E60B 0000 F3               		dc.b $E6, $B, 0, 0, $F3	
000262FD 0608 000C F3               		dc.b 6, 8, 0, $C, $F3	
00026302 F602 000F 0B               		dc.b $F6, 2, 0, $F, $B	
00026307 EE02 0012 EB               		dc.b $EE, 2, 0, $12, $EB	
0002630C 04                         SME_wvX4F_8A8:	dc.b 4	
0002630D EA0F 0000 EA               		dc.b $EA, $F, 0, 0, $EA	
00026312 F202 0010 0A               		dc.b $F2, 2, 0, $10, $A	
00026317 0A00 0013 02               		dc.b $A, 0, 0, $13, 2	
0002631C 0A00 0014 0A               		dc.b $A, 0, 0, $14, $A	
00026321 04                         SME_wvX4F_8BD:	dc.b 4	
00026322 E80F 0000 ED               		dc.b $E8, $F, 0, 0, $ED	
00026327 0808 0010 F5               		dc.b 8, 8, 0, $10, $F5	
0002632C F801 0013 0D               		dc.b $F8, 1, 0, $13, $D	
00026331 F001 0015 E5               		dc.b $F0, 1, 0, $15, $E5	
00026336 01                         SME_wvX4F_8D2:	dc.b 1	
00026337 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002633C 01                         SME_wvX4F_8D8:	dc.b 1	
0002633D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026342 01                         SME_wvX4F_8DE:	dc.b 1	
00026343 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026348 01                         SME_wvX4F_8E4:	dc.b 1	
00026349 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002634E 01                         SME_wvX4F_8EA:	dc.b 1	
0002634F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026354 01                         SME_wvX4F_8F0:	dc.b 1	
00026355 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002635A 01                         SME_wvX4F_8F6:	dc.b 1	
0002635B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026360 03                         SME_wvX4F_8FC:	dc.b 3	
00026361 F00A 0000 F0               		dc.b $F0, $A, 0, 0, $F0	
00026366 080C 0009 F0               		dc.b 8, $C, 0, 9, $F0	
0002636B F002 000D 08               		dc.b $F0, 2, 0, $D, 8	
00026370 01                         SME_wvX4F_90C:	dc.b 1	
00026371 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026376 02                         SME_wvX4F_912:	dc.b 2	
00026377 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC	
0002637C F402 000C 0C               		dc.b $F4, 2, 0, $C, $C	
00026381 01                         SME_wvX4F_91D:	dc.b 1	
00026382 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026387 02                         SME_wvX4F_923:	dc.b 2	
00026388 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4	
0002638D 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4	
00026392 01                         SME_wvX4F_92E:	dc.b 1	
00026393 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026398 04                         SME_wvX4F_934:	dc.b 4	
00026399 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
0002639E FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0	
000263A3 F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
000263A8 F500 0014 08               		dc.b $F5, 0, 0, $14, 8	
000263AD 07                         SME_wvX4F_949:	dc.b 7	
000263AE ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
000263B3 FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0	
000263B8 0D04 000E 00               		dc.b $D, 4, 0, $E, 0	
000263BD F500 0010 E8               		dc.b $F5, 0, 0, $10, $E8	
000263C2 F500 0011 08               		dc.b $F5, 0, 0, $11, 8	
000263C7 0D00 0012 F8               		dc.b $D, 0, 0, $12, $F8	
000263CC FD00 0013 E8               		dc.b $FD, 0, 0, $13, $E8	
000263D1 05                         SME_wvX4F_96D:	dc.b 5	
000263D2 F502 0000 F0               		dc.b $F5, 2, 0, 0, $F0	
000263D7 F50B 0003 F8               		dc.b $F5, $B, 0, 3, $F8	
000263DC ED08 000F F0               		dc.b $ED, 8, 0, $F, $F0	
000263E1 F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
000263E6 ED00 0014 08               		dc.b $ED, 0, 0, $14, 8	
000263EB 03                         SME_wvX4F_987:	dc.b 3	
000263EC F50B 0000 F8               		dc.b $F5, $B, 0, 0, $F8	
000263F1 ED03 000C F0               		dc.b $ED, 3, 0, $C, $F0	
000263F6 ED04 0010 F8               		dc.b $ED, 4, 0, $10, $F8	
000263FB 05                         SME_wvX4F_997:	dc.b 5	
000263FC F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4	
00026401 E80C 000C F4               		dc.b $E8, $C, 0, $C, $F4	
00026406 1004 0010 F4               		dc.b $10, 4, 0, $10, $F4	
0002640B 0000 0012 EC               		dc.b 0, 0, 0, $12, $EC	
00026410 F000 0013 0C               		dc.b $F0, 0, 0, $13, $C	
00026415 04                         SME_wvX4F_9B1:	dc.b 4	
00026416 F402 0000 F8               		dc.b $F4, 2, 0, 0, $F8	
0002641B F402 0003 00               		dc.b $F4, 2, 0, 3, 0	
00026420 F402 0006 08               		dc.b $F4, 2, 0, 6, 8	
00026425 0C08 0009 F8               		dc.b $C, 8, 0, 9, $F8	
0002642A 04                         SME_wvX4F_9C6:	dc.b 4	
0002642B F404 0000 03               		dc.b $F4, 4, 0, 0, 3	
00026430 FC0D 0002 F8               		dc.b $FC, $D, 0, 2, $F8	
00026435 0C08 000A F8               		dc.b $C, 8, 0, $A, $F8	
0002643A 0C00 000D 10               		dc.b $C, 0, 0, $D, $10	
0002643F 04                         SME_wvX4F_9DB:	dc.b 4	
00026440 EC08 0800 E8               		dc.b $EC, 8, 8, 0, $E8	
00026445 F402 0803 00               		dc.b $F4, 2, 8, 3, 0	
0002644A F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0	
0002644F EC00 0016 00               		dc.b $EC, 0, 0, $16, 0	
00026454 09                         SME_wvX4F_9F0:	dc.b 9	
00026455 F402 0000 00               		dc.b $F4, 2, 0, 0, 0	
0002645A EC0C 0003 E8               		dc.b $EC, $C, 0, 3, $E8	
0002645F F407 0007 E0               		dc.b $F4, 7, 0, 7, $E0	
00026464 0C00 080F F8               		dc.b $C, 0, 8, $F, $F8	
00026469 F400 0010 F0               		dc.b $F4, 0, 0, $10, $F0	
0002646E F402 0011 F8               		dc.b $F4, 2, 0, $11, $F8	
00026473 0400 0014 F0               		dc.b 4, 0, 0, $14, $F0	
00026478 0C00 0015 F0               		dc.b $C, 0, 0, $15, $F0	
0002647D FC00 0016 F0               		dc.b $FC, 0, 0, $16, $F0	
00026482 03                         SME_wvX4F_A1E:	dc.b 3	
00026483 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8	
00026488 040D 080C E0               		dc.b 4, $D, 8, $C, $E0	
0002648D 0C00 1814 00               		dc.b $C, 0, $18, $14, 0	
00026492 03                         SME_wvX4F_A2E:	dc.b 3	
00026493 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
00026498 0401 0010 E0               		dc.b 4, 1, 0, $10, $E0	
0002649D EC0C 0012 E8               		dc.b $EC, $C, 0, $12, $E8	
000264A2 03                         SME_wvX4F_A3E:	dc.b 3	
000264A3 F30F 0000 EC               		dc.b $F3, $F, 0, 0, $EC	
000264A8 EB0C 0010 EC               		dc.b $EB, $C, 0, $10, $EC	
000264AD F303 0014 0C               		dc.b $F3, 3, 0, $14, $C	
000264B2 00                         SME_wvX4F_A4E:	dc.b 0	
000264B3 08                         SME_wvX4F_A4F:	dc.b 8	
000264B4 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000264B9 E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
000264BE F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
000264C3 F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
000264C8 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
000264CD 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
000264D2 0801 0013 F8               		dc.b 8, 1, 0, $13, $F8	
000264D7 1000 0015 10               		dc.b $10, 0, 0, $15, $10	
000264DC 07                         SME_wvX4F_A78:	dc.b 7	
000264DD E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000264E2 E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
000264E7 F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
000264EC F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
000264F1 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
000264F6 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
000264FB 0801 0013 10               		dc.b 8, 1, 0, $13, $10	
00026500 04                         SME_wvX4F_A9C:	dc.b 4	
00026501 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
00026506 F00A 0004 F8               		dc.b $F0, $A, 0, 4, $F8	
0002650B E801 000D 10               		dc.b $E8, 1, 0, $D, $10	
00026510 0809 000F F0               		dc.b 8, 9, 0, $F, $F0	
00026515 03                         SME_wvX4F_AB1:	dc.b 3	
00026516 F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC	
0002651B FC00 0808 F4               		dc.b $FC, 0, 8, 8, $F4	
00026520 040C 0809 F4               		dc.b 4, $C, 8, 9, $F4	
00026525 03                         SME_wvX4F_AC1:	dc.b 3	
00026526 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
0002652B FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00026530 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00026535 03                         SME_wvX4F_AD1:	dc.b 3	
00026536 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
0002653B 040C 0008 F4               		dc.b 4, $C, 0, 8, $F4	
00026540 FC00 000C F4               		dc.b $FC, 0, 0, $C, $F4	
00026545 02                         SME_wvX4F_AE1:	dc.b 2	
00026546 F40A 0000 F0               		dc.b $F4, $A, 0, 0, $F0	
0002654B F40A 0800 08               		dc.b $F4, $A, 8, 0, 8	
00026550 03                         SME_wvX4F_AEC:	dc.b 3	
00026551 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00026556 040C 0808 FC               		dc.b 4, $C, 8, 8, $FC	
0002655B FC00 080C 14               		dc.b $FC, 0, 8, $C, $14	
00026560 03                         SME_wvX4F_AFC:	dc.b 3	
00026561 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00026566 FC05 0808 14               		dc.b $FC, 5, 8, 8, $14	
0002656B 0408 080C FC               		dc.b 4, 8, 8, $C, $FC	
00026570 03                         SME_wvX4F_B0C:	dc.b 3	
00026571 F40D 0000 F4               		dc.b $F4, $D, 0, 0, $F4	
00026576 FC00 0008 14               		dc.b $FC, 0, 0, 8, $14	
0002657B 040C 0009 FC               		dc.b 4, $C, 0, 9, $FC	
00026580 03                         SME_wvX4F_B1C:	dc.b 3	
00026581 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00026586 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
0002658B 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00026590 04                         SME_wvX4F_B2C:	dc.b 4	
00026591 E90B 0000 F4               		dc.b $E9, $B, 0, 0, $F4	
00026596 1100 000C FC               		dc.b $11, 0, 0, $C, $FC	
0002659B 0900 000D FC               		dc.b 9, 0, 0, $D, $FC	
000265A0 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
000265A5 08                         SME_wvX4F_B41:	dc.b 8	
000265A6 E909 0000 F4               		dc.b $E9, 9, 0, 0, $F4	
000265AB F901 0006 04               		dc.b $F9, 1, 0, 6, 4	
000265B0 0900 0008 FC               		dc.b 9, 0, 0, 8, $FC	
000265B5 1100 0009 FC               		dc.b $11, 0, 0, 9, $FC	
000265BA F901 000A FC               		dc.b $F9, 1, 0, $A, $FC	
000265BF F900 000C F4               		dc.b $F9, 0, 0, $C, $F4	
000265C4 0100 000D F4               		dc.b 1, 0, 0, $D, $F4	
000265C9 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
000265CE 04                         SME_wvX4F_B6A:	dc.b 4	
000265CF F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
000265D4 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
000265D9 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
000265DE F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
000265E3 04                         SME_wvX4F_B7F:	dc.b 4	
000265E4 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
000265E9 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
000265EE F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
000265F3 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
000265F8 05                         SME_wvX4F_B94:	dc.b 5	
000265F9 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
000265FE F001 0009 0C               		dc.b $F0, 1, 0, 9, $C	
00026603 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
00026608 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
0002660D 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
00026612 05                         SME_wvX4F_BAE:	dc.b 5	
00026613 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
00026618 E801 0009 0C               		dc.b $E8, 1, 0, 9, $C	
0002661D 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
00026622 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
00026627 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
0002662C 02                         SME_wvX4F_BC8:	dc.b 2	
0002662D ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00026632 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00026637 05                         SME_wvX4F_BD3:	dc.b 5	
00026638 0505 0000 EB               		dc.b 5, 5, 0, 0, $EB	
0002663D ED02 0004 F3               		dc.b $ED, 2, 0, 4, $F3	
00026642 F503 0007 FB               		dc.b $F5, 3, 0, 7, $FB	
00026647 ED03 000B 03               		dc.b $ED, 3, 0, $B, 3	
0002664C ED00 000F FB               		dc.b $ED, 0, 0, $F, $FB	
00026651 03                         SME_wvX4F_BED:	dc.b 3	
00026652 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00026657 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
0002665C 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00026661 05                         SME_wvX4F_BFD:	dc.b 5	
00026662 0D00 0000 EB               		dc.b $D, 0, 0, 0, $EB	
00026667 F503 0001 F3               		dc.b $F5, 3, 0, 1, $F3	
0002666C F503 0005 FB               		dc.b $F5, 3, 0, 5, $FB	
00026671 F503 0009 03               		dc.b $F5, 3, 0, 9, 3	
00026676 ED08 000D F3               		dc.b $ED, 8, 0, $D, $F3	
0002667B 02                         SME_wvX4F_C17:	dc.b 2	
0002667C ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00026681 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00026686 03                         SME_wvX4F_C22:	dc.b 3	
00026687 F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
0002668C 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00026691 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
00026696 03                         SME_wvX4F_C32:	dc.b 3	
00026697 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
0002669C 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
000266A1 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
000266A6 03                         SME_wvX4F_C42:	dc.b 3	
000266A7 F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
000266AC 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
000266B1 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
000266B6 02                         SME_wvX4F_C52:	dc.b 2	
000266B7 EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
000266BC FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0	
000266C1 03                         SME_wvX4F_C5D:	dc.b 3	
000266C2 E80D 2000 EC               		dc.b $E8, $D, $20, 0, $EC	
000266C7 E801 2008 0C               		dc.b $E8, 1, $20, 8, $C	
000266CC F80B 200A F4               		dc.b $F8, $B, $20, $A, $F4	
000266D1 0B                         SME_wvX4F_C6D:	dc.b $B	
000266D2 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
000266D7 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
000266DC 1000 000A F4               		dc.b $10, 0, 0, $A, $F4	
000266E1 0808 000B F4               		dc.b 8, 8, 0, $B, $F4	
000266E6 1000 000E 04               		dc.b $10, 0, 0, $E, 4	
000266EB F800 000F FC               		dc.b $F8, 0, 0, $F, $FC	
000266F0 F800 0010 F4               		dc.b $F8, 0, 0, $10, $F4	
000266F5 F800 0011 04               		dc.b $F8, 0, 0, $11, 4	
000266FA 0000 0012 FC               		dc.b 0, 0, 0, $12, $FC	
000266FF 0000 0013 04               		dc.b 0, 0, 0, $13, 4	
00026704 0000 0014 F4               		dc.b 0, 0, 0, $14, $F4	
00026709 06                         SME_wvX4F_CA5:	dc.b 6	
0002670A E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
0002670F E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00026714 F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
00026719 1000 0010 F4               		dc.b $10, 0, 0, $10, $F4	
0002671E 0808 0011 F4               		dc.b 8, 8, 0, $11, $F4	
00026723 1000 0014 04               		dc.b $10, 0, 0, $14, 4	
00026728 03                         SME_wvX4F_CC4:	dc.b 3	
00026729 EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
0002672E FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC	
00026733 0301 0012 0C               		dc.b 3, 1, 0, $12, $C	
00026738 07                         SME_wvX4F_CD4:	dc.b 7	
00026739 F801 0000 0C               		dc.b $F8, 1, 0, 0, $C	
0002673E 080C 0002 F4               		dc.b 8, $C, 0, 2, $F4	
00026743 F801 0006 FC               		dc.b $F8, 1, 0, 6, $FC	
00026748 F000 0008 FC               		dc.b $F0, 0, 0, 8, $FC	
0002674D F801 0009 EC               		dc.b $F8, 1, 0, 9, $EC	
00026752 F002 000B F4               		dc.b $F0, 2, 0, $B, $F4	
00026757 F002 000E 04               		dc.b $F0, 2, 0, $E, 4	
0002675C 02                         SME_wvX4F_CF8:	dc.b 2	
0002675D F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
00026762 F802 0010 0C               		dc.b $F8, 2, 0, $10, $C	
00026767 04                         SME_wvX4F_D03:	dc.b 4	
00026768 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
0002676D F800 000C EC               		dc.b $F8, 0, 0, $C, $EC	
00026772 F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00026777 0000 0011 EC               		dc.b 0, 0, 0, $11, $EC	
0002677C 03                         SME_wvX4F_D18:	dc.b 3	
0002677D F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00026782 F801 000C EC               		dc.b $F8, 1, 0, $C, $EC	
00026787 F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
0002678C 03                         SME_wvX4F_D28:	dc.b 3	
0002678D F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00026792 F008 000C F4               		dc.b $F0, 8, 0, $C, $F4	
00026797 F801 000F EC               		dc.b $F8, 1, 0, $F, $EC	
0002679C 04                         SME_wvX4F_D38:	dc.b 4	
0002679D 0002 0000 F4               		dc.b 0, 2, 0, 0, $F4	
000267A2 F803 0003 FC               		dc.b $F8, 3, 0, 3, $FC	
000267A7 F803 0007 04               		dc.b $F8, 3, 0, 7, 4	
000267AC F802 000B 0C               		dc.b $F8, 2, 0, $B, $C	
000267B1 01                         SME_wvX4F_D4D:	dc.b 1	
000267B2 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
000267B7 01                         SME_wvX4F_D53:	dc.b 1	
000267B8 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
000267BD 01                         SME_wvX4F_D59:	dc.b 1	
000267BE F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
000267C3 01                         SME_wvX4F_D5F:	dc.b 1	
000267C4 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
000267C9 02                         SME_wvX4F_D65:	dc.b 2	
000267CA F80B 0000 F4               		dc.b $F8, $B, 0, 0, $F4	
000267CF F802 000C 0C               		dc.b $F8, 2, 0, $C, $C	
000267D4 01                         SME_wvX4F_D70:	dc.b 1	
000267D5 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000267DA 01                         SME_wvX4F_D76:	dc.b 1	
000267DB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000267E0 01                         SME_wvX4F_D7C:	dc.b 1	
000267E1 F00B 0000 F5               		dc.b $F0, $B, 0, 0, $F5	
000267E6 03                         SME_wvX4F_D82:	dc.b 3	
000267E7 E80F 0000 F1               		dc.b $E8, $F, 0, 0, $F1	
000267EC 0805 0010 F1               		dc.b 8, 5, 0, $10, $F1	
000267F1 0801 0014 01               		dc.b 8, 1, 0, $14, 1	
000267F6 03                         SME_wvX4F_D92:	dc.b 3	
000267F7 0809 0000 F1               		dc.b 8, 9, 0, 0, $F1	
000267FC E80B 0006 F1               		dc.b $E8, $B, 0, 6, $F1	
00026801 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
00026806 03                         SME_wvX4F_DA2:	dc.b 3	
00026807 E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
0002680C 0809 000C F1               		dc.b 8, 9, 0, $C, $F1	
00026811 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
00026816 03                         SME_wvX4F_DB2:	dc.b 3	
00026817 E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
0002681C 0809 000C F1               		dc.b 8, 9, 0, $C, $F1	
00026821 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
00026826 03                         SME_wvX4F_DC2:	dc.b 3	
00026827 E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
0002682C 0809 000C F1               		dc.b 8, 9, 0, $C, $F1	
00026831 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
00026836 08                         SME_wvX4F_DD2:	dc.b 8	
00026837 0809 0000 F1               		dc.b 8, 9, 0, 0, $F1	
0002683C 0000 0006 09               		dc.b 0, 0, 0, 6, 9	
00026841 F002 0007 F9               		dc.b $F0, 2, 0, 7, $F9	
00026846 F001 000A 01               		dc.b $F0, 1, 0, $A, 1	
0002684B 0000 000C F1               		dc.b 0, 0, 0, $C, $F1	
00026850 0000 000D 01               		dc.b 0, 0, 0, $D, 1	
00026855 E802 000E F1               		dc.b $E8, 2, 0, $E, $F1	
0002685A E804 0011 F9               		dc.b $E8, 4, 0, $11, $F9	
0002685F 03                         SME_wvX4F_DFB:	dc.b 3	
00026860 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
00026865 EC0F 0003 EF               		dc.b $EC, $F, 0, 3, $EF	
0002686A E40C 0013 EF               		dc.b $E4, $C, 0, $13, $EF	
0002686F 03                         SME_wvX4F_E0B:	dc.b 3	
00026870 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
00026875 EC0F 0003 EF               		dc.b $EC, $F, 0, 3, $EF	
0002687A E408 0013 EF               		dc.b $E4, 8, 0, $13, $EF	
0002687F 07                         SME_wvX4F_E1B:	dc.b 7	
00026880 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
00026885 F402 0003 F7               		dc.b $F4, 2, 0, 3, $F7	
0002688A F402 0006 FF               		dc.b $F4, 2, 0, 6, $FF	
0002688F EC02 0009 07               		dc.b $EC, 2, 0, 9, 7	
00026894 0400 000C EF               		dc.b 4, 0, 0, $C, $EF	
00026899 E403 000D EF               		dc.b $E4, 3, 0, $D, $EF	
0002689E E405 0011 F7               		dc.b $E4, 5, 0, $11, $F7	
000268A3 03                         SME_wvX4F_E3F:	dc.b 3	
000268A4 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
000268A9 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
000268AE 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
000268B3 01                         SME_wvX4F_E4F:	dc.b 1	
000268B4 FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
000268B9 01                         SME_wvX4F_E55:	dc.b 1	
000268BA FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
000268BF 07                         SME_wvX4F_E5B:	dc.b 7	
000268C0 0500 0000 10               		dc.b 5, 0, 0, 0, $10	
000268C5 0301 0001 F0               		dc.b 3, 1, 0, 1, $F0	
000268CA 0301 0003 F8               		dc.b 3, 1, 0, 3, $F8	
000268CF FB02 0005 00               		dc.b $FB, 2, 0, 5, 0	
000268D4 FB00 0008 F8               		dc.b $FB, 0, 0, 8, $F8	
000268D9 FB00 0009 F0               		dc.b $FB, 0, 0, 9, $F0	
000268DE FB02 000A 08               		dc.b $FB, 2, 0, $A, 8	
000268E3 03                         SME_wvX4F_E7F:	dc.b 3	
000268E4 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
000268E9 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
000268EE 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
000268F3 01                         SME_wvX4F_E8F:	dc.b 1	
000268F4 FC0E 0000 EE               		dc.b $FC, $E, 0, 0, $EE	
000268F9 02                         SME_wvX4F_E95:	dc.b 2	
000268FA FD06 0000 F6               		dc.b $FD, 6, 0, 0, $F6	
000268FF FD00 0006 06               		dc.b $FD, 0, 0, 6, 6	
00026904 02                         SME_wvX4F_EA0:	dc.b 2	
00026905 FD0C 0000 F6               		dc.b $FD, $C, 0, 0, $F6	
0002690A 0509 0004 F6               		dc.b 5, 9, 0, 4, $F6	
0002690F 05                         SME_wvX4F_EAB:	dc.b 5	
00026910 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00026915 EC06 0006 04               		dc.b $EC, 6, 0, 6, 4	
0002691A FC08 000C EC               		dc.b $FC, 8, 0, $C, $EC	
0002691F 0409 000F F4               		dc.b 4, 9, 0, $F, $F4	
00026924 1400 0015 FC               		dc.b $14, 0, 0, $15, $FC	
00026929 06                         SME_wvX4F_EC5:	dc.b 6	
0002692A ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
0002692F ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
00026934 FD0C 0008 ED               		dc.b $FD, $C, 0, 8, $ED	
00026939 0509 000C F5               		dc.b 5, 9, 0, $C, $F5	
0002693E FD05 0012 0D               		dc.b $FD, 5, 0, $12, $D	
00026943 F500 0016 15               		dc.b $F5, 0, 0, $16, $15	
00026948 04                         SME_wvX4F_EE4:	dc.b 4	
00026949 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002694E EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00026953 FE0D 0008 F6               		dc.b $FE, $D, 0, 8, $F6	
00026958 0E08 0010 FE               		dc.b $E, 8, 0, $10, $FE	
0002695D 03                         SME_wvX4F_EF9:	dc.b 3	
0002695E ED0F 0000 EF               		dc.b $ED, $F, 0, 0, $EF	
00026963 ED03 0010 0F               		dc.b $ED, 3, 0, $10, $F	
00026968 0D0C 0014 F7               		dc.b $D, $C, 0, $14, $F7	
0002696D 05                         SME_wvX4F_F09:	dc.b 5	
0002696E EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00026973 EC05 0006 04               		dc.b $EC, 5, 0, 6, 4	
00026978 FC0D 000A F4               		dc.b $FC, $D, 0, $A, $F4	
0002697D 0C08 0012 F4               		dc.b $C, 8, 0, $12, $F4	
00026982 1404 0015 FC               		dc.b $14, 4, 0, $15, $FC	
00026987 04                         SME_wvX4F_F23:	dc.b 4	
00026988 EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
0002698D EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
00026992 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
00026997 0C08 0010 FD               		dc.b $C, 8, 0, $10, $FD	
0002699C 03                         SME_wvX4F_F38:	dc.b 3	
0002699D ED0F 0000 ED               		dc.b $ED, $F, 0, 0, $ED	
000269A2 ED03 0010 0D               		dc.b $ED, 3, 0, $10, $D	
000269A7 0D0C 0014 F5               		dc.b $D, $C, 0, $14, $F5	
000269AC 05                         SME_wvX4F_F48:	dc.b 5	
000269AD ED09 0000 EE               		dc.b $ED, 9, 0, 0, $EE	
000269B2 ED01 0006 06               		dc.b $ED, 1, 0, 6, 6	
000269B7 FD00 0008 EE               		dc.b $FD, 0, 0, 8, $EE	
000269BC FD0D 0009 F6               		dc.b $FD, $D, 0, 9, $F6	
000269C1 0D08 0011 FE               		dc.b $D, 8, 0, $11, $FE	
000269C6 03                         SME_wvX4F_F62:	dc.b 3	
000269C7 EB09 0000 FD               		dc.b $EB, 9, 0, 0, $FD	
000269CC FB04 0006 FD               		dc.b $FB, 4, 0, 6, $FD	
000269D1 0309 0008 FD               		dc.b 3, 9, 0, 8, $FD	
000269D6 01                         SME_wvX4F_F72:	dc.b 1	
000269D7 EC0B 0000 FD               		dc.b $EC, $B, 0, 0, $FD	
000269DC 01                         SME_wvX4F_F78:	dc.b 1	
000269DD F40A 0000 FD               		dc.b $F4, $A, 0, 0, $FD	
000269E2 03                         SME_wvX4F_F7E:	dc.b 3	
000269E3 E900 0000 04               		dc.b $E9, 0, 0, 0, 4	
000269E8 F90A 0001 FC               		dc.b $F9, $A, 0, 1, $FC	
000269ED F108 000A FC               		dc.b $F1, 8, 0, $A, $FC	
000269F2 03                         SME_wvX4F_F8E:	dc.b 3	
000269F3 EB09 0000 FC               		dc.b $EB, 9, 0, 0, $FC	
000269F8 FB04 0006 FC               		dc.b $FB, 4, 0, 6, $FC	
000269FD 0309 0008 FC               		dc.b 3, 9, 0, 8, $FC	
00026A02 01                         SME_wvX4F_F9E:	dc.b 1	
00026A03 F30B 0000 FD               		dc.b $F3, $B, 0, 0, $FD	
00026A08 03                         SME_wvX4F_FA4:	dc.b 3	
00026A09 FC01 0000 0D               		dc.b $FC, 1, 0, 0, $D	
00026A0E F400 0002 FD               		dc.b $F4, 0, 0, 2, $FD	
00026A13 FC05 0003 FD               		dc.b $FC, 5, 0, 3, $FD	
00026A18 02                         SME_wvX4F_FB4:	dc.b 2	
00026A19 EC00 0000 FD               		dc.b $EC, 0, 0, 0, $FD	
00026A1E F40A 0001 FD               		dc.b $F4, $A, 0, 1, $FD	
00026A23 06                         SME_wvX4F_FBF:	dc.b 6	
00026A24 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00026A29 EC04 0006 F6               		dc.b $EC, 4, 0, 6, $F6	
00026A2E F404 0008 EE               		dc.b $F4, 4, 0, 8, $EE	
00026A33 F40A 000A FE               		dc.b $F4, $A, 0, $A, $FE	
00026A38 0C00 0013 FE               		dc.b $C, 0, 0, $13, $FE	
00026A3D FC00 0014 16               		dc.b $FC, 0, 0, $14, $16	
00026A42 06                         SME_wvX4F_FDE:	dc.b 6	
00026A43 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00026A48 E408 0006 F7               		dc.b $E4, 8, 0, 6, $F7	
00026A4D EC04 0009 FF               		dc.b $EC, 4, 0, 9, $FF	
00026A52 F404 000B EF               		dc.b $F4, 4, 0, $B, $EF	
00026A57 F40A 000D FF               		dc.b $F4, $A, 0, $D, $FF	
00026A5C 0C00 0016 FF               		dc.b $C, 0, 0, $16, $FF	
00026A61 04                         SME_wvX4F_FFD:	dc.b 4	
00026A62 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00026A67 F304 0006 EF               		dc.b $F3, 4, 0, 6, $EF	
00026A6C EB0A 0008 FF               		dc.b $EB, $A, 0, 8, $FF	
00026A71 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00026A76 03                         SME_wvX4F_1012:	dc.b 3	
00026A77 E90F 0000 F5               		dc.b $E9, $F, 0, 0, $F5	
00026A7C F102 0010 ED               		dc.b $F1, 2, 0, $10, $ED	
00026A81 0908 0013 ED               		dc.b 9, 8, 0, $13, $ED	
00026A86 05                         SME_wvX4F_1022:	dc.b 5	
00026A87 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00026A8C EC08 0006 F6               		dc.b $EC, 8, 0, 6, $F6	
00026A91 F404 0009 EE               		dc.b $F4, 4, 0, 9, $EE	
00026A96 F40D 000B FE               		dc.b $F4, $D, 0, $B, $FE	
00026A9B 0408 0013 FE               		dc.b 4, 8, 0, $13, $FE	
00026AA0 04                         SME_wvX4F_103C:	dc.b 4	
00026AA1 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00026AA6 F404 0006 EF               		dc.b $F4, 4, 0, 6, $EF	
00026AAB EC0A 0008 FF               		dc.b $EC, $A, 0, 8, $FF	
00026AB0 0404 0011 FF               		dc.b 4, 4, 0, $11, $FF	
00026AB5 03                         SME_wvX4F_1051:	dc.b 3	
00026AB6 EB0F 0000 F0               		dc.b $EB, $F, 0, 0, $F0	
00026ABB 0B08 0010 F0               		dc.b $B, 8, 0, $10, $F0	
00026AC0 EB01 0013 0F               		dc.b $EB, 1, 0, $13, $F	
00026AC5 05                         SME_wvX4F_1061:	dc.b 5	
00026AC6 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00026ACB EB0A 0006 FF               		dc.b $EB, $A, 0, 6, $FF	
00026AD0 F304 000F EF               		dc.b $F3, 4, 0, $F, $EF	
00026AD5 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00026ADA 0B00 0013 FF               		dc.b $B, 0, 0, $13, $FF	
00026ADF 03                         SME_wvX4F_107B:	dc.b 3	
00026AE0 F80E 0000 F8               		dc.b $F8, $E, 0, 0, $F8	
00026AE5 1008 000C F0               		dc.b $10, 8, 0, $C, $F0	
00026AEA 0800 000F F0               		dc.b 8, 0, 0, $F, $F0	
00026AEF 05                         SME_wvX4F_108B:	dc.b 5	
00026AF0 F80E 0000 F8               		dc.b $F8, $E, 0, 0, $F8	
00026AF5 0801 000C F0               		dc.b 8, 1, 0, $C, $F0	
00026AFA 1004 000E F8               		dc.b $10, 4, 0, $E, $F8	
00026AFF F004 0010 F8               		dc.b $F0, 4, 0, $10, $F8	
00026B04 1000 0012 08               		dc.b $10, 0, 0, $12, 8	
00026B09 04                         SME_wvX4F_10A5:	dc.b 4	
00026B0A F80E 0000 F8               		dc.b $F8, $E, 0, 0, $F8	
00026B0F 0801 000C F0               		dc.b 8, 1, 0, $C, $F0	
00026B14 1008 000E F8               		dc.b $10, 8, 0, $E, $F8	
00026B19 F008 0011 F8               		dc.b $F0, 8, 0, $11, $F8	
00026B1E 04                         SME_wvX4F_10BA:	dc.b 4	
00026B1F F80E 0000 F8               		dc.b $F8, $E, 0, 0, $F8	
00026B24 0801 000C F0               		dc.b 8, 1, 0, $C, $F0	
00026B29 1008 000E F8               		dc.b $10, 8, 0, $E, $F8	
00026B2E F008 0011 F8               		dc.b $F0, 8, 0, $11, $F8	
00026B33 02                         SME_wvX4F_10CF:	dc.b 2	
00026B34 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026B39 E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026B3E 02                         SME_wvX4F_10DA:	dc.b 2	
00026B3F F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026B44 E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026B49 02                         SME_wvX4F_10E5:	dc.b 2	
00026B4A F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026B4F E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026B54 02                         SME_wvX4F_10F0:	dc.b 2	
00026B55 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026B5A E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026B5F 02                         SME_wvX4F_10FB:	dc.b 2	
00026B60 F00C 0000 F0               		dc.b $F0, $C, 0, 0, $F0	
00026B65 F80F 0004 F0               		dc.b $F8, $F, 0, 4, $F0	
00026B6A 03                         SME_wvX4F_1106:	dc.b 3	
00026B6B F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026B70 F00C 0010 F0               		dc.b $F0, $C, 0, $10, $F0	
00026B75 F002 0014 E8               		dc.b $F0, 2, 0, $14, $E8	
00026B7A 03                         SME_wvX4F_1116:	dc.b 3	
00026B7B F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026B80 F008 0010 F0               		dc.b $F0, 8, 0, $10, $F0	
00026B85 F002 0013 E8               		dc.b $F0, 2, 0, $13, $E8	
00026B8A 07                         SME_wvX4F_1126:	dc.b 7	
00026B8B F00A 0000 E8               		dc.b $F0, $A, 0, 0, $E8	
00026B90 F000 0009 00               		dc.b $F0, 0, 0, 9, 0	
00026B95 F803 000A 00               		dc.b $F8, 3, 0, $A, 0	
00026B9A 0800 000E 08               		dc.b 8, 0, 0, $E, 8	
00026B9F 0000 000F 08               		dc.b 0, 0, 0, $F, 8	
00026BA4 1000 0010 08               		dc.b $10, 0, 0, $10, 8	
00026BA9 0804 0011 F0               		dc.b 8, 4, 0, $11, $F0	
00026BAE 02                         SME_wvX4F_114A:	dc.b 2	
00026BAF F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026BB4 E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026BB9 02                         SME_wvX4F_1155:	dc.b 2	
00026BBA F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026BBF E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026BC4 02                         SME_wvX4F_1160:	dc.b 2	
00026BC5 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026BCA E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026BCF 02                         SME_wvX4F_116B:	dc.b 2	
00026BD0 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026BD5 E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026BDA 03                         SME_wvX4F_1176:	dc.b 3	
00026BDB F802 0000 10               		dc.b $F8, 2, 0, 0, $10	
00026BE0 F80F 0003 F0               		dc.b $F8, $F, 0, 3, $F0	
00026BE5 F008 0013 00               		dc.b $F0, 8, 0, $13, 0	
00026BEA 04                         SME_wvX4F_1186:	dc.b 4	
00026BEB F00F 0000 F8               		dc.b $F0, $F, 0, 0, $F8	
00026BF0 100C 0010 F0               		dc.b $10, $C, 0, $10, $F0	
00026BF5 0001 0014 F0               		dc.b 0, 1, 0, $14, $F0	
00026BFA F800 0016 F0               		dc.b $F8, 0, 0, $16, $F0	
00026BFF 00                         SME_wvX4F_119B:	dc.b 0	
00026C00 00                         SME_wvX4F_119C:	dc.b 0	
00026C01 03                         SME_wvX4F_119D:	dc.b 3	
00026C02 F00E 0000 E8               		dc.b $F0, $E, 0, 0, $E8	
00026C07 F803 000C 08               		dc.b $F8, 3, 0, $C, 8	
00026C0C 0809 0010 F0               		dc.b 8, 9, 0, $10, $F0	
00026C11 03                         SME_wvX4F_11AD:	dc.b 3	
00026C12 F00E 0000 E8               		dc.b $F0, $E, 0, 0, $E8	
00026C17 080D 000C F0               		dc.b 8, $D, 0, $C, $F0	
00026C1C F801 0014 08               		dc.b $F8, 1, 0, $14, 8	
00026C21 00                         SME_wvX4F_11BD:	dc.b 0	
00026C22 00                         SME_wvX4F_11BE:	dc.b 0	
00026C23 02                         SME_wvX4F_11BF:	dc.b 2	
00026C24 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0	
00026C29 F40F 0004 F0               		dc.b $F4, $F, 0, 4, $F0	
00026C2E 01                         SME_wvX4F_11CA:	dc.b 1	
00026C2F F40F 0000 F0               		dc.b $F4, $F, 0, 0, $F0	
00026C34 02                         SME_wvX4F_11D0:	dc.b 2	
00026C35 F40F 0000 F0               		dc.b $F4, $F, 0, 0, $F0	
00026C3A E40D 0010 F0               		dc.b $E4, $D, 0, $10, $F0	
00026C3F 02                         SME_wvX4F_11DB:	dc.b 2	
00026C40 E40F 0000 F0               		dc.b $E4, $F, 0, 0, $F0	
00026C45 040D 0010 F0               		dc.b 4, $D, 0, $10, $F0	
00026C4A 02                         SME_wvX4F_11E6:	dc.b 2	
00026C4B E40F 0000 F0               		dc.b $E4, $F, 0, 0, $F0	
00026C50 040D 0010 F0               		dc.b 4, $D, 0, $10, $F0	
00026C55 02                         SME_wvX4F_11F1:	dc.b 2	
00026C56 E40F 0000 F0               		dc.b $E4, $F, 0, 0, $F0	
00026C5B 040D 0010 F0               		dc.b 4, $D, 0, $10, $F0	
00026C60 05                         SME_wvX4F_11FC:	dc.b 5	
00026C61 0209 0000 00               		dc.b 2, 9, 0, 0, 0	
00026C66 E207 0006 F0               		dc.b $E2, 7, 0, 6, $F0	
00026C6B EA06 000E 00               		dc.b $EA, 6, 0, $E, 0	
00026C70 E200 0014 00               		dc.b $E2, 0, 0, $14, 0	
00026C75 0200 0015 F8               		dc.b 2, 0, 0, $15, $F8	
00026C7A 05                         SME_wvX4F_1216:	dc.b 5	
00026C7B E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026C80 020C 000C F0               		dc.b 2, $C, 0, $C, $F0	
00026C85 0201 0010 10               		dc.b 2, 1, 0, $10, $10	
00026C8A 0A04 0012 00               		dc.b $A, 4, 0, $12, 0	
00026C8F EA02 0014 08               		dc.b $EA, 2, 0, $14, 8	
00026C94 02                         SME_wvX4F_1230:	dc.b 2	
00026C95 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026C9A 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026C9F 02                         SME_wvX4F_123B:	dc.b 2	
00026CA0 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026CA5 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026CAA 02                         SME_wvX4F_1246:	dc.b 2	
00026CAB E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026CB0 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026CB5 02                         SME_wvX4F_1251:	dc.b 2	
00026CB6 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026CBB 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026CC0 02                         SME_wvX4F_125C:	dc.b 2	
00026CC1 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026CC6 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026CCB 02                         SME_wvX4F_1267:	dc.b 2	
00026CCC E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026CD1 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026CD6 02                         SME_wvX4F_1272:	dc.b 2	
00026CD7 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026CDC 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026CE1 02                         SME_wvX4F_127D:	dc.b 2	
00026CE2 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026CE7 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026CEC 02                         SME_wvX4F_1288:	dc.b 2	
00026CED E20F 0000 F0               		dc.b $E2, $F, 0, 0, $F0	
00026CF2 020D 0010 F0               		dc.b 2, $D, 0, $10, $F0	
00026CF7 02                         SME_wvX4F_1293:	dc.b 2	
00026CF8 E20F 0000 F0               		dc.b $E2, $F, 0, 0, $F0	
00026CFD 020D 0010 F0               		dc.b 2, $D, 0, $10, $F0	
00026D02                            		even
00026D02                            		even
00026D02                            SonicDynPLC:	include	"_maps\Sonic - Dynamic Gfx Script.asm"
00026D02                            ; --------------------------------------------------------------------------------
00026D02                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00026D02                            
00026D02                            SME_I2OLA:	
00026D02 0000 0000                  		dc.w SME_I2OLA_1EE-SME_I2OLA, SME_I2OLA_1EF-SME_I2OLA	
00026D06 0000 0000                  		dc.w SME_I2OLA_1F8-SME_I2OLA, SME_I2OLA_20B-SME_I2OLA	
00026D0A 0000 0000                  		dc.w SME_I2OLA_220-SME_I2OLA, SME_I2OLA_229-SME_I2OLA	
00026D0E 0000 0000                  		dc.w SME_I2OLA_230-SME_I2OLA, SME_I2OLA_237-SME_I2OLA	
00026D12 0000 0000                  		dc.w SME_I2OLA_240-SME_I2OLA, SME_I2OLA_245-SME_I2OLA	
00026D16 0000 0000                  		dc.w SME_I2OLA_24C-SME_I2OLA, SME_I2OLA_253-SME_I2OLA	
00026D1A 0000 0000                  		dc.w SME_I2OLA_25A-SME_I2OLA, SME_I2OLA_263-SME_I2OLA	
00026D1E 0000 0000                  		dc.w SME_I2OLA_26A-SME_I2OLA, SME_I2OLA_279-SME_I2OLA	
00026D22 0000 0000                  		dc.w SME_I2OLA_284-SME_I2OLA, SME_I2OLA_28B-SME_I2OLA	
00026D26 0000 0000                  		dc.w SME_I2OLA_292-SME_I2OLA, SME_I2OLA_29B-SME_I2OLA	
00026D2A 0000 0000                  		dc.w SME_I2OLA_2A0-SME_I2OLA, SME_I2OLA_2A7-SME_I2OLA	
00026D2E 0000 0000                  		dc.w SME_I2OLA_2B2-SME_I2OLA, SME_I2OLA_2BD-SME_I2OLA	
00026D32 0000 0000                  		dc.w SME_I2OLA_2CA-SME_I2OLA, SME_I2OLA_2D3-SME_I2OLA	
00026D36 0000 0000                  		dc.w SME_I2OLA_2DA-SME_I2OLA, SME_I2OLA_2E5-SME_I2OLA	
00026D3A 0000 0000                  		dc.w SME_I2OLA_2EE-SME_I2OLA, SME_I2OLA_2F5-SME_I2OLA	
00026D3E 0000 0000                  		dc.w SME_I2OLA_300-SME_I2OLA, SME_I2OLA_309-SME_I2OLA	
00026D42 0000 0000                  		dc.w SME_I2OLA_30E-SME_I2OLA, SME_I2OLA_313-SME_I2OLA	
00026D46 0000 0000                  		dc.w SME_I2OLA_31E-SME_I2OLA, SME_I2OLA_327-SME_I2OLA	
00026D4A 0000 0000                  		dc.w SME_I2OLA_32C-SME_I2OLA, SME_I2OLA_333-SME_I2OLA	
00026D4E 0000 0000                  		dc.w SME_I2OLA_33A-SME_I2OLA, SME_I2OLA_347-SME_I2OLA	
00026D52 0000 0000                  		dc.w SME_I2OLA_354-SME_I2OLA, SME_I2OLA_35D-SME_I2OLA	
00026D56 0000 0000                  		dc.w SME_I2OLA_364-SME_I2OLA, SME_I2OLA_36F-SME_I2OLA	
00026D5A 0000 0000                  		dc.w SME_I2OLA_378-SME_I2OLA, SME_I2OLA_37F-SME_I2OLA	
00026D5E 0000 0000                  		dc.w SME_I2OLA_38A-SME_I2OLA, SME_I2OLA_38F-SME_I2OLA	
00026D62 0000 0000                  		dc.w SME_I2OLA_394-SME_I2OLA, SME_I2OLA_399-SME_I2OLA	
00026D66 0000 0000                  		dc.w SME_I2OLA_39E-SME_I2OLA, SME_I2OLA_3A3-SME_I2OLA	
00026D6A 0000 0000                  		dc.w SME_I2OLA_3A8-SME_I2OLA, SME_I2OLA_3AD-SME_I2OLA	
00026D6E 0000 0000                  		dc.w SME_I2OLA_3B2-SME_I2OLA, SME_I2OLA_3BB-SME_I2OLA	
00026D72 0000 0000                  		dc.w SME_I2OLA_3C2-SME_I2OLA, SME_I2OLA_3C9-SME_I2OLA	
00026D76 0000 0000                  		dc.w SME_I2OLA_3D0-SME_I2OLA, SME_I2OLA_3D9-SME_I2OLA	
00026D7A 0000 0000                  		dc.w SME_I2OLA_3E0-SME_I2OLA, SME_I2OLA_3E7-SME_I2OLA	
00026D7E 0000 0000                  		dc.w SME_I2OLA_3EE-SME_I2OLA, SME_I2OLA_3F3-SME_I2OLA	
00026D82 0000 0000                  		dc.w SME_I2OLA_3F8-SME_I2OLA, SME_I2OLA_3FD-SME_I2OLA	
00026D86 0000 0000                  		dc.w SME_I2OLA_402-SME_I2OLA, SME_I2OLA_407-SME_I2OLA	
00026D8A 0000 0000                  		dc.w SME_I2OLA_40C-SME_I2OLA, SME_I2OLA_411-SME_I2OLA	
00026D8E 0000 0000                  		dc.w SME_I2OLA_416-SME_I2OLA, SME_I2OLA_41F-SME_I2OLA	
00026D92 0000 0000                  		dc.w SME_I2OLA_426-SME_I2OLA, SME_I2OLA_42B-SME_I2OLA	
00026D96 0000 0000                  		dc.w SME_I2OLA_432-SME_I2OLA, SME_I2OLA_43B-SME_I2OLA	
00026D9A 0000 0000                  		dc.w SME_I2OLA_442-SME_I2OLA, SME_I2OLA_447-SME_I2OLA	
00026D9E 0000 0000                  		dc.w SME_I2OLA_44E-SME_I2OLA, SME_I2OLA_455-SME_I2OLA	
00026DA2 0000 0000                  		dc.w SME_I2OLA_45C-SME_I2OLA, SME_I2OLA_46F-SME_I2OLA	
00026DA6 0000 0000                  		dc.w SME_I2OLA_482-SME_I2OLA, SME_I2OLA_489-SME_I2OLA	
00026DAA 0000 0000                  		dc.w SME_I2OLA_490-SME_I2OLA, SME_I2OLA_497-SME_I2OLA	
00026DAE 0000 0000                  		dc.w SME_I2OLA_4A2-SME_I2OLA, SME_I2OLA_4A9-SME_I2OLA	
00026DB2 0000 0000                  		dc.w SME_I2OLA_4B0-SME_I2OLA, SME_I2OLA_4BB-SME_I2OLA	
00026DB6 0000 0000                  		dc.w SME_I2OLA_4C6-SME_I2OLA, SME_I2OLA_4CF-SME_I2OLA	
00026DBA 0000 0000                  		dc.w SME_I2OLA_4D8-SME_I2OLA, SME_I2OLA_4E1-SME_I2OLA	
00026DBE 0000 0000                  		dc.w SME_I2OLA_4EA-SME_I2OLA, SME_I2OLA_4ED-SME_I2OLA	
00026DC2 0000 0000                  		dc.w SME_I2OLA_4F0-SME_I2OLA, SME_I2OLA_4F3-SME_I2OLA	
00026DC6 0000 0000                  		dc.w SME_I2OLA_4F6-SME_I2OLA, SME_I2OLA_4F9-SME_I2OLA	
00026DCA 0000 0000                  		dc.w SME_I2OLA_4FC-SME_I2OLA, SME_I2OLA_4FF-SME_I2OLA	
00026DCE 0000 0000                  		dc.w SME_I2OLA_506-SME_I2OLA, SME_I2OLA_509-SME_I2OLA	
00026DD2 0000 0000                  		dc.w SME_I2OLA_50E-SME_I2OLA, SME_I2OLA_511-SME_I2OLA	
00026DD6 0000 0000                  		dc.w SME_I2OLA_516-SME_I2OLA, SME_I2OLA_519-SME_I2OLA	
00026DDA 0000 0000                  		dc.w SME_I2OLA_522-SME_I2OLA, SME_I2OLA_531-SME_I2OLA	
00026DDE 0000 0000                  		dc.w SME_I2OLA_53C-SME_I2OLA, SME_I2OLA_543-SME_I2OLA	
00026DE2 0000 0000                  		dc.w SME_I2OLA_54E-SME_I2OLA, SME_I2OLA_557-SME_I2OLA	
00026DE6 0000 0000                  		dc.w SME_I2OLA_560-SME_I2OLA, SME_I2OLA_569-SME_I2OLA	
00026DEA 0000 0000                  		dc.w SME_I2OLA_57C-SME_I2OLA, SME_I2OLA_583-SME_I2OLA	
00026DEE 0000 0000                  		dc.w SME_I2OLA_58A-SME_I2OLA, SME_I2OLA_591-SME_I2OLA	
00026DF2 0000 0000                  		dc.w SME_I2OLA_592-SME_I2OLA, SME_I2OLA_5A3-SME_I2OLA	
00026DF6 0000 0000                  		dc.w SME_I2OLA_5B2-SME_I2OLA, SME_I2OLA_5BB-SME_I2OLA	
00026DFA 0000 0000                  		dc.w SME_I2OLA_5C2-SME_I2OLA, SME_I2OLA_5C9-SME_I2OLA	
00026DFE 0000 0000                  		dc.w SME_I2OLA_5D0-SME_I2OLA, SME_I2OLA_5D3-SME_I2OLA	
00026E02 0000 0000                  		dc.w SME_I2OLA_5DA-SME_I2OLA, SME_I2OLA_5E1-SME_I2OLA	
00026E06 0000 0000                  		dc.w SME_I2OLA_5E8-SME_I2OLA, SME_I2OLA_5EF-SME_I2OLA	
00026E0A 0000 0000                  		dc.w SME_I2OLA_5F8-SME_I2OLA, SME_I2OLA_609-SME_I2OLA	
00026E0E 0000 0000                  		dc.w SME_I2OLA_612-SME_I2OLA, SME_I2OLA_61B-SME_I2OLA	
00026E12 0000 0000                  		dc.w SME_I2OLA_626-SME_I2OLA, SME_I2OLA_631-SME_I2OLA	
00026E16 0000 0000                  		dc.w SME_I2OLA_636-SME_I2OLA, SME_I2OLA_641-SME_I2OLA	
00026E1A 0000 0000                  		dc.w SME_I2OLA_648-SME_I2OLA, SME_I2OLA_653-SME_I2OLA	
00026E1E 0000 0000                  		dc.w SME_I2OLA_658-SME_I2OLA, SME_I2OLA_65F-SME_I2OLA	
00026E22 0000 0000                  		dc.w SME_I2OLA_666-SME_I2OLA, SME_I2OLA_66D-SME_I2OLA	
00026E26 0000 0000                  		dc.w SME_I2OLA_672-SME_I2OLA, SME_I2OLA_679-SME_I2OLA	
00026E2A 0000 0000                  		dc.w SME_I2OLA_690-SME_I2OLA, SME_I2OLA_69D-SME_I2OLA	
00026E2E 0000 0000                  		dc.w SME_I2OLA_6A4-SME_I2OLA, SME_I2OLA_6B3-SME_I2OLA	
00026E32 0000 0000                  		dc.w SME_I2OLA_6B8-SME_I2OLA, SME_I2OLA_6C1-SME_I2OLA	
00026E36 0000 0000                  		dc.w SME_I2OLA_6C8-SME_I2OLA, SME_I2OLA_6CF-SME_I2OLA	
00026E3A 0000 0000                  		dc.w SME_I2OLA_6D8-SME_I2OLA, SME_I2OLA_6DB-SME_I2OLA	
00026E3E 0000 0000                  		dc.w SME_I2OLA_6DE-SME_I2OLA, SME_I2OLA_6E1-SME_I2OLA	
00026E42 0000 0000                  		dc.w SME_I2OLA_6E4-SME_I2OLA, SME_I2OLA_6E7-SME_I2OLA	
00026E46 0000 0000                  		dc.w SME_I2OLA_6EA-SME_I2OLA, SME_I2OLA_6ED-SME_I2OLA	
00026E4A 0000 0000                  		dc.w SME_I2OLA_6F0-SME_I2OLA, SME_I2OLA_6F7-SME_I2OLA	
00026E4E 0000 0000                  		dc.w SME_I2OLA_6FE-SME_I2OLA, SME_I2OLA_705-SME_I2OLA	
00026E52 0000 0000                  		dc.w SME_I2OLA_70C-SME_I2OLA, SME_I2OLA_713-SME_I2OLA	
00026E56 0000 0000                  		dc.w SME_I2OLA_724-SME_I2OLA, SME_I2OLA_72B-SME_I2OLA	
00026E5A 0000 0000                  		dc.w SME_I2OLA_732-SME_I2OLA, SME_I2OLA_741-SME_I2OLA	
00026E5E 0000 0000                  		dc.w SME_I2OLA_748-SME_I2OLA, SME_I2OLA_74B-SME_I2OLA	
00026E62 0000 0000                  		dc.w SME_I2OLA_750-SME_I2OLA, SME_I2OLA_75F-SME_I2OLA	
00026E66 0000 0000                  		dc.w SME_I2OLA_766-SME_I2OLA, SME_I2OLA_769-SME_I2OLA	
00026E6A 0000 0000                  		dc.w SME_I2OLA_76E-SME_I2OLA, SME_I2OLA_773-SME_I2OLA	
00026E6E 0000 0000                  		dc.w SME_I2OLA_77E-SME_I2OLA, SME_I2OLA_78B-SME_I2OLA	
00026E72 0000 0000                  		dc.w SME_I2OLA_794-SME_I2OLA, SME_I2OLA_79B-SME_I2OLA	
00026E76 0000 0000                  		dc.w SME_I2OLA_7A6-SME_I2OLA, SME_I2OLA_7AF-SME_I2OLA	
00026E7A 0000 0000                  		dc.w SME_I2OLA_7B6-SME_I2OLA, SME_I2OLA_7C1-SME_I2OLA	
00026E7E 0000 0000                  		dc.w SME_I2OLA_7C8-SME_I2OLA, SME_I2OLA_7CB-SME_I2OLA	
00026E82 0000 0000                  		dc.w SME_I2OLA_7CE-SME_I2OLA, SME_I2OLA_7D5-SME_I2OLA	
00026E86 0000 0000                  		dc.w SME_I2OLA_7DC-SME_I2OLA, SME_I2OLA_7DF-SME_I2OLA	
00026E8A 0000 0000                  		dc.w SME_I2OLA_7E6-SME_I2OLA, SME_I2OLA_7EB-SME_I2OLA	
00026E8E 0000 0000                  		dc.w SME_I2OLA_7F8-SME_I2OLA, SME_I2OLA_805-SME_I2OLA	
00026E92 0000 0000                  		dc.w SME_I2OLA_80E-SME_I2OLA, SME_I2OLA_815-SME_I2OLA	
00026E96 0000 0000                  		dc.w SME_I2OLA_820-SME_I2OLA, SME_I2OLA_829-SME_I2OLA	
00026E9A 0000 0000                  		dc.w SME_I2OLA_830-SME_I2OLA, SME_I2OLA_83B-SME_I2OLA	
00026E9E 0000 0000                  		dc.w SME_I2OLA_842-SME_I2OLA, SME_I2OLA_84D-SME_I2OLA	
00026EA2 0000 0000                  		dc.w SME_I2OLA_856-SME_I2OLA, SME_I2OLA_85F-SME_I2OLA	
00026EA6 0000 0000                  		dc.w SME_I2OLA_864-SME_I2OLA, SME_I2OLA_869-SME_I2OLA	
00026EAA 0000 0000                  		dc.w SME_I2OLA_86E-SME_I2OLA, SME_I2OLA_873-SME_I2OLA	
00026EAE 0000 0000                  		dc.w SME_I2OLA_878-SME_I2OLA, SME_I2OLA_87F-SME_I2OLA	
00026EB2 0000 0000                  		dc.w SME_I2OLA_886-SME_I2OLA, SME_I2OLA_895-SME_I2OLA	
00026EB6 0000 0000                  		dc.w SME_I2OLA_89A-SME_I2OLA, SME_I2OLA_89F-SME_I2OLA	
00026EBA 0000 0000                  		dc.w SME_I2OLA_8A4-SME_I2OLA, SME_I2OLA_8A9-SME_I2OLA	
00026EBE 0000 0000                  		dc.w SME_I2OLA_8B0-SME_I2OLA, SME_I2OLA_8B9-SME_I2OLA	
00026EC2 0000 0000                  		dc.w SME_I2OLA_8BA-SME_I2OLA, SME_I2OLA_8BB-SME_I2OLA	
00026EC6 0000 0000                  		dc.w SME_I2OLA_8C2-SME_I2OLA, SME_I2OLA_8C9-SME_I2OLA	
00026ECA 0000 0000                  		dc.w SME_I2OLA_8CA-SME_I2OLA, SME_I2OLA_8CB-SME_I2OLA	
00026ECE 0000 0000                  		dc.w SME_I2OLA_8D0-SME_I2OLA, SME_I2OLA_8D3-SME_I2OLA	
00026ED2 0000 0000                  		dc.w SME_I2OLA_8D8-SME_I2OLA, SME_I2OLA_8DD-SME_I2OLA	
00026ED6 0000 0000                  		dc.w SME_I2OLA_8E2-SME_I2OLA, SME_I2OLA_8E7-SME_I2OLA	
00026EDA 0000 0000                  		dc.w SME_I2OLA_8F2-SME_I2OLA, SME_I2OLA_8FD-SME_I2OLA	
00026EDE 0000 0000                  		dc.w SME_I2OLA_902-SME_I2OLA, SME_I2OLA_907-SME_I2OLA	
00026EE2 0000 0000                  		dc.w SME_I2OLA_90C-SME_I2OLA, SME_I2OLA_911-SME_I2OLA	
00026EE6 0000 0000                  		dc.w SME_I2OLA_916-SME_I2OLA, SME_I2OLA_91B-SME_I2OLA	
00026EEA 0000 0000                  		dc.w SME_I2OLA_920-SME_I2OLA, SME_I2OLA_925-SME_I2OLA	
00026EEE 0000                       		dc.w SME_I2OLA_92A-SME_I2OLA	
00026EF0 00                         SME_I2OLA_1EE:	dc.b 0	
00026EF1 0420 0070 0320 0B20 0E     SME_I2OLA_1EF:	dc.b 4, $20, 0, $70, 3, $20, $B, $20, $E	
00026EFA 0920 0020 0B20 0E10 0300+  SME_I2OLA_1F8:	dc.b 9, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, 6, 0, $A, $10, $1D	
00026F0D 0A20 0020 0B20 0E10 0300+  SME_I2OLA_20B:	dc.b $A, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, $A, 0, $1F, 0, $26, 0, $32	
00026F22 04B6 C606 D200 0920 0E     SME_I2OLA_220:	dc.b 4, $B6, $C6, 6, $D2, 0, 9, $20, $E	
00026F2B 0350 1150 1720 0E          SME_I2OLA_229:	dc.b 3, $50, $11, $50, $17, $20, $E	
00026F32 0350 2050 1720 0E          SME_I2OLA_230:	dc.b 3, $50, $20, $50, $17, $20, $E	
00026F39 0450 2050 1710 2700 0E     SME_I2OLA_237:	dc.b 4, $50, $20, $50, $17, $10, $27, 0, $E	
00026F42 02B6 D316 DF               SME_I2OLA_240:	dc.b 2, $B6, $D3, $16, $DF	
00026F47 0356 E126 E736 EA          SME_I2OLA_245:	dc.b 3, $56, $E1, $26, $E7, $36, $EA	
00026F4E 0356 E126 E736 EE          SME_I2OLA_24C:	dc.b 3, $56, $E1, $26, $E7, $36, $EE	
00026F55 03B6 F226 FE27 01          SME_I2OLA_253:	dc.b 3, $B6, $F2, $26, $FE, $27, 1	
00026F5C 0420 0B20 0E87 0A07 13     SME_I2OLA_25A:	dc.b 4, $20, $B, $20, $E, $87, $A, 7, $13	
00026F65 0380 2920 0B20 0E          SME_I2OLA_263:	dc.b 3, $80, $29, $20, $B, $20, $E	
00026F6C 0750 3A50 4010 4600 3530+  SME_I2OLA_26A:	dc.b 7, $50, $3A, $50, $40, $10, $46, 0, $35, $30, $36, 0, $34, 0, $33	
00026F7B 05B0 4800 3530 3600 3400+  SME_I2OLA_279:	dc.b 5, $B0, $48, 0, $35, $30, $36, 0, $34, 0, $33	
00026F86 0380 5A57 0400 09          SME_I2OLA_284:	dc.b 3, $80, $5A, $57, 4, 0, 9	
00026F8D 03F7 1437 2407 28          SME_I2OLA_28B:	dc.b 3, $F7, $14, $37, $24, 7, $28	
00026F94 0450 5450 6350 6910 6F     SME_I2OLA_292:	dc.b 4, $50, $54, $50, $63, $50, $69, $10, $6F	
00026F9D 0250 54B0 71               SME_I2OLA_29B:	dc.b 2, $50, $54, $B0, $71	
00026FA2 0357 0457 2907 2F          SME_I2OLA_2A0:	dc.b 3, $57, 4, $57, $29, 7, $2F	
00026FA9 0530 7D50 8100 3310 3430+  SME_I2OLA_2A7:	dc.b 5, $30, $7D, $50, $81, 0, $33, $10, $34, $30, $36	
00026FB4 0550 8750 8D20 9350 9600+  SME_I2OLA_2B2:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
00026FBF 0650 8710 9D30 9F50 A330+  SME_I2OLA_2BD:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
00026FCC 0450 AE10 B470 B620 BE     SME_I2OLA_2CA:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
00026FD5 03F9 7539 8539 89          SME_I2OLA_2D3:	dc.b 3, $F9, $75, $39, $85, $39, $89	
00026FDC 0550 C130 C770 CB20 D310+  SME_I2OLA_2DA:	dc.b 5, $50, $C1, $30, $C7, $70, $CB, $20, $D3, $10, $D6	
00026FE7 0450 C110 D870 DA20 E2     SME_I2OLA_2E5:	dc.b 4, $50, $C1, $10, $D8, $70, $DA, $20, $E2	
00026FF0 03F9 8D39 9D39 A1          SME_I2OLA_2EE:	dc.b 3, $F9, $8D, $39, $9D, $39, $A1	
00026FF7 0550 8710 9D00 9370 E520+  SME_I2OLA_2F5:	dc.b 5, $50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED	
00027002 0470 F050 F810 FE51 00     SME_I2OLA_300:	dc.b 4, $70, $F0, $50, $F8, $10, $FE, $51, 0	
0002700B 0270 F0B1 06               SME_I2OLA_309:	dc.b 2, $70, $F0, $B1, 6	
00027010 0281 1858 F9               SME_I2OLA_30E:	dc.b 2, $81, $18, $58, $F9	
00027015 0508 FF39 0009 04B9 0529+  SME_I2OLA_313:	dc.b 5, 8, $FF, $39, 0, 9, 4, $B9, 5, $29, $11	
00027020 0451 1251 2111 2751 29     SME_I2OLA_31E:	dc.b 4, $51, $12, $51, $21, $11, $27, $51, $29	
00027029 0251 12B1 2F               SME_I2OLA_327:	dc.b 2, $51, $12, $B1, $2F	
0002702E 0329 1479 1719 1F          SME_I2OLA_32C:	dc.b 3, $29, $14, $79, $17, $19, $1F	
00027035 0370 F001 0681 3B          SME_I2OLA_333:	dc.b 3, $70, $F0, 1, 6, $81, $3B	
0002703C 0651 4411 4A11 4C81 4E01+  SME_I2OLA_33A:	dc.b 6, $51, $44, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58	
00027049 0651 4421 5911 5C11 5E81+  SME_I2OLA_347:	dc.b 6, $51, $44, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57	
00027056 0451 6911 6F81 7111 7A     SME_I2OLA_354:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
0002705F 03F9 A529 B529 B8          SME_I2OLA_35D:	dc.b 3, $F9, $A5, $29, $B5, $29, $B8	
00027066 0551 7C21 8211 8571 8721+  SME_I2OLA_364:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
00027071 0451 7C11 9281 9411 9D     SME_I2OLA_36F:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
0002707A 03F9 BB29 CB19 CE          SME_I2OLA_378:	dc.b 3, $F9, $BB, $29, $CB, $19, $CE	
00027081 0551 4481 9F11 5E11 A801+  SME_I2OLA_37F:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
0002708C 0251 AAB1 B0               SME_I2OLA_38A:	dc.b 2, $51, $AA, $B1, $B0	
00027091 02B7 3057 3C               SME_I2OLA_38F:	dc.b 2, $B7, $30, $57, $3C	
00027096 0250 54B1 BC               SME_I2OLA_394:	dc.b 2, $50, $54, $B1, $BC	
0002709B 0257 3CB7 42               SME_I2OLA_399:	dc.b 2, $57, $3C, $B7, $42	
000270A0 0251 AAB1 C8               SME_I2OLA_39E:	dc.b 2, $51, $AA, $B1, $C8	
000270A5 0257 3CB7 4E               SME_I2OLA_3A3:	dc.b 2, $57, $3C, $B7, $4E	
000270AA 0250 54B1 D4               SME_I2OLA_3A8:	dc.b 2, $50, $54, $B1, $D4	
000270AF 0257 3CB7 5A               SME_I2OLA_3AD:	dc.b 2, $57, $3C, $B7, $5A	
000270B4 0451 E011 E6B1 E801 F4     SME_I2OLA_3B2:	dc.b 4, $51, $E0, $11, $E6, $B1, $E8, 1, $F4	
000270BD 03F8 7128 8128 84          SME_I2OLA_3BB:	dc.b 3, $F8, $71, $28, $81, $28, $84	
000270C4 0351 F511 FBB1 FD          SME_I2OLA_3C2:	dc.b 3, $51, $F5, $11, $FB, $B1, $FD	
000270CB 03B8 BD78 C901 F4          SME_I2OLA_3C9:	dc.b 3, $B8, $BD, $78, $C9, 1, $F4	
000270D2 0451 E012 09B2 0B01 F4     SME_I2OLA_3D0:	dc.b 4, $51, $E0, $12, 9, $B2, $B, 1, $F4	
000270DB 03B8 D178 DD01 F4          SME_I2OLA_3D9:	dc.b 3, $B8, $D1, $78, $DD, 1, $F4	
000270E2 0351 F511 FBB2 17          SME_I2OLA_3E0:	dc.b 3, $51, $F5, $11, $FB, $B2, $17	
000270E9 0378 E5B8 ED01 F4          SME_I2OLA_3E7:	dc.b 3, $78, $E5, $B8, $ED, 1, $F4	
000270F0 0252 23B2 29               SME_I2OLA_3EE:	dc.b 2, $52, $23, $B2, $29	
000270F5 0258 87B8 8D               SME_I2OLA_3F3:	dc.b 2, $58, $87, $B8, $8D	
000270FA 0251 12B2 35               SME_I2OLA_3F8:	dc.b 2, $51, $12, $B2, $35	
000270FF 0258 87B8 99               SME_I2OLA_3FD:	dc.b 2, $58, $87, $B8, $99	
00027104 0252 23B2 41               SME_I2OLA_402:	dc.b 2, $52, $23, $B2, $41	
00027109 0258 87B8 A5               SME_I2OLA_407:	dc.b 2, $58, $87, $B8, $A5	
0002710E 0251 12B2 4D               SME_I2OLA_40C:	dc.b 2, $51, $12, $B2, $4D	
00027113 0258 87B8 B1               SME_I2OLA_411:	dc.b 2, $58, $87, $B8, $B1	
00027118 0452 5912 5FB2 6102 6D     SME_I2OLA_416:	dc.b 4, $52, $59, $12, $5F, $B2, $61, 2, $6D	
00027121 03B9 2129 2D59 30          SME_I2OLA_41F:	dc.b 3, $B9, $21, $29, $2D, $59, $30	
00027128 0272 6EB2 76               SME_I2OLA_426:	dc.b 2, $72, $6E, $B2, $76	
0002712D 03B9 3629 4259 45          SME_I2OLA_42B:	dc.b 3, $B9, $36, $29, $42, $59, $45	
00027134 0452 5912 82B2 8402 6D     SME_I2OLA_432:	dc.b 4, $52, $59, $12, $82, $B2, $84, 2, $6D	
0002713D 03B9 4B29 5759 5A          SME_I2OLA_43B:	dc.b 3, $B9, $4B, $29, $57, $59, $5A	
00027144 0272 6EB2 90               SME_I2OLA_442:	dc.b 2, $72, $6E, $B2, $90	
00027149 03B9 6029 6C59 6F          SME_I2OLA_447:	dc.b 3, $B9, $60, $29, $6C, $59, $6F	
00027150 03B4 EE24 FA54 FD          SME_I2OLA_44E:	dc.b 3, $B4, $EE, $24, $FA, $54, $FD	
00027157 03B5 0325 0F55 12          SME_I2OLA_455:	dc.b 3, $B5, 3, $25, $F, $55, $12	
0002715E 0925 1E55 2105 3715 1815+  SME_I2OLA_45C:	dc.b 9, $25, $1E, $55, $21, 5, $37, $15, $18, $15, $1A, $15, $1C, $14, $EE, $14, $F2, $14, $F6	
00027171 0925 2D55 3005 3615 2715+  SME_I2OLA_46F:	dc.b 9, $25, $2D, $55, $30, 5, $36, $15, $27, $15, $29, $15, $2B, $15, 3, $15, 7, $15, $B	
00027184 03F6 6416 7436 76          SME_I2OLA_482:	dc.b 3, $F6, $64, $16, $74, $36, $76	
0002718B 03B6 8176 8D16 95          SME_I2OLA_489:	dc.b 3, $B6, $81, $76, $8D, $16, $95	
00027192 03F5 3835 4805 4C          SME_I2OLA_490:	dc.b 3, $F5, $38, $35, $48, 5, $4C	
00027199 05B5 4D35 5915 5D15 5F25+  SME_I2OLA_497:	dc.b 5, $B5, $4D, $35, $59, $15, $5D, $15, $5F, $25, $61	
000271A4 03B5 6425 7055 73          SME_I2OLA_4A2:	dc.b 3, $B5, $64, $25, $70, $55, $73	
000271AB 03B5 7925 8555 88          SME_I2OLA_4A9:	dc.b 3, $B5, $79, $25, $85, $55, $88	
000271B2 0555 9425 9A05 AD55 8E55+  SME_I2OLA_4B0:	dc.b 5, $55, $94, $25, $9A, 5, $AD, $55, $8E, $55, $64	
000271BD 0525 A355 A605 AC55 9D55+  SME_I2OLA_4BB:	dc.b 5, $25, $A3, $55, $A6, 5, $AC, $55, $9D, $55, $79	
000271C8 04B5 BA25 C625 C925 CC     SME_I2OLA_4C6:	dc.b 4, $B5, $BA, $25, $C6, $25, $C9, $25, $CC	
000271D1 04B5 AE25 CF25 D225 D5     SME_I2OLA_4CF:	dc.b 4, $B5, $AE, $25, $CF, $25, $D2, $25, $D5	
000271DA 04F5 D825 E805 EB05 EC     SME_I2OLA_4D8:	dc.b 4, $F5, $D8, $25, $E8, 5, $EB, 5, $EC	
000271E3 04F5 ED25 FD16 0016 02     SME_I2OLA_4E1:	dc.b 4, $F5, $ED, $25, $FD, $16, 0, $16, 2	
000271EC 01F2 9C                    SME_I2OLA_4EA:	dc.b 1, $F2, $9C	
000271EF 01F6 2B                    SME_I2OLA_4ED:	dc.b 1, $F6, $2B	
000271F2 01F2 AC                    SME_I2OLA_4F0:	dc.b 1, $F2, $AC	
000271F5 01F6 3B                    SME_I2OLA_4F3:	dc.b 1, $F6, $3B	
000271F8 01F2 BC                    SME_I2OLA_4F6:	dc.b 1, $F2, $BC	
000271FB 01F6 4B                    SME_I2OLA_4F9:	dc.b 1, $F6, $4B	
000271FE 01F2 CC                    SME_I2OLA_4FC:	dc.b 1, $F2, $CC	
00027201 0386 5B36 7A26 7E          SME_I2OLA_4FF:	dc.b 3, $86, $5B, $36, $7A, $26, $7E	
00027208 01F2 DC                    SME_I2OLA_506:	dc.b 1, $F2, $DC	
0002720B 02B2 EC22 F8               SME_I2OLA_509:	dc.b 2, $B2, $EC, $22, $F8	
00027210 01F2 FB                    SME_I2OLA_50E:	dc.b 1, $F2, $FB	
00027213 02B3 0B23 17               SME_I2OLA_511:	dc.b 2, $B3, $B, $23, $17	
00027218 01F3 1A                    SME_I2OLA_516:	dc.b 1, $F3, $1A	
0002721B 0453 2AB3 3018 1508 17     SME_I2OLA_519:	dc.b 4, $53, $2A, $B3, $30, $18, $15, 8, $17	
00027224 0753 3C73 4213 4A03 4C08+  SME_I2OLA_522:	dc.b 7, $53, $3C, $73, $42, $13, $4A, 3, $4C, 8, $1A, 8, $19, 8, $18	
00027233 0528 1BB8 1E28 2A18 2D08+  SME_I2OLA_531:	dc.b 5, $28, $1B, $B8, $1E, $28, $2A, $18, $2D, 8, $2F	
0002723E 03B8 3038 3C18 40          SME_I2OLA_53C:	dc.b 3, $B8, $30, $38, $3C, $18, $40	
00027245 05B4 8834 9413 FD03 FF0A+  SME_I2OLA_543:	dc.b 5, $B4, $88, $34, $94, $13, $FD, 3, $FF, $A, $CD	
00027250 0427 6627 6927 6C20 0E     SME_I2OLA_54E:	dc.b 4, $27, $66, $27, $69, $27, $6C, $20, $E	
00027259 0413 4D73 4F23 5703 5A     SME_I2OLA_557:	dc.b 4, $13, $4D, $73, $4F, $23, $57, 3, $5A	
00027262 0423 5B23 5EF3 6108 42     SME_I2OLA_560:	dc.b 4, $23, $5B, $23, $5E, $F3, $61, 8, $42	
0002726B 0928 5338 5678 4303 6408+  SME_I2OLA_569:	dc.b 9, $28, $53, $38, $56, $78, $43, 3, $64, 8, $4B, $28, $4F, 8, $4D, 8, $4E, 8, $52	
0002727E 03B3 7173 7D00 71          SME_I2OLA_57C:	dc.b 3, $B3, $71, $73, $7D, 0, $71	
00027285 03F8 5B18 6B38 6D          SME_I2OLA_583:	dc.b 3, $F8, $5B, $18, $6B, $38, $6D	
0002728C 03F8 0138 113A CE          SME_I2OLA_58A:	dc.b 3, $F8, 1, $38, $11, $3A, $CE	
00027293 00                         SME_I2OLA_591:	dc.b 0	
00027294 0839 E219 EF29 E619 E919+  SME_I2OLA_592:	dc.b 8, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $59, $F7, $19, $FD, 9, $FF	
000272A5 0739 E219 EF29 E619 E919+  SME_I2OLA_5A3:	dc.b 7, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $5A, 0, $1A, 6	
000272B4 0439 E289 E619 EF59 F1     SME_I2OLA_5B2:	dc.b 4, $39, $E2, $89, $E6, $19, $EF, $59, $F1	
000272BD 0373 9D03 A533 A6          SME_I2OLA_5BB:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
000272C4 0373 8533 8D23 91          SME_I2OLA_5C2:	dc.b 3, $73, $85, $33, $8D, $23, $91	
000272CB 0376 9736 9F06 A3          SME_I2OLA_5C9:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
000272D2 0183 94                    SME_I2OLA_5D0:	dc.b 1, $83, $94	
000272D5 0376 9736 9F06 A3          SME_I2OLA_5D3:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
000272DC 0373 8533 8D23 91          SME_I2OLA_5DA:	dc.b 3, $73, $85, $33, $8D, $23, $91	
000272E3 0373 9D03 A533 A6          SME_I2OLA_5E1:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
000272EA 0373 AA33 B223 B6          SME_I2OLA_5E8:	dc.b 3, $73, $AA, $33, $B2, $23, $B6	
000272F1 04B3 B903 C603 C503 C7     SME_I2OLA_5EF:	dc.b 4, $B3, $B9, 3, $C6, 3, $C5, 3, $C7	
000272FA 0856 1113 C303 C503 C613+  SME_I2OLA_5F8:	dc.b 8, $56, $11, $13, $C3, 3, $C5, 3, $C6, $13, $BF, 6, 5, 6, 6, 3, $C7	
0002730B 04B3 DA33 E603 EA03 EB     SME_I2OLA_609:	dc.b 4, $B3, $DA, $33, $E6, 3, $EA, 3, $EB	
00027314 04B3 C833 D403 D803 D9     SME_I2OLA_612:	dc.b 4, $B3, $C8, $33, $D4, 3, $D8, 3, $D9	
0002731D 0583 EC13 F553 F713 FD03+  SME_I2OLA_61B:	dc.b 5, $83, $EC, $13, $F5, $53, $F7, $13, $FD, 3, $FF	
00027328 0584 0014 0953 F713 FD03+  SME_I2OLA_626:	dc.b 5, $84, 0, $14, 9, $53, $F7, $13, $FD, 3, $FF	
00027333 0284 0B74 14               SME_I2OLA_631:	dc.b 2, $84, $B, $74, $14	
00027338 0534 9824 9C34 9F34 A304+  SME_I2OLA_636:	dc.b 5, $34, $98, $24, $9C, $34, $9F, $34, $A3, 4, $A7	
00027343 0384 1C24 2514 28          SME_I2OLA_641:	dc.b 3, $84, $1C, $24, $25, $14, $28	
0002734A 0504 A834 A934 AD34 B124+  SME_I2OLA_648:	dc.b 5, 4, $A8, $34, $A9, $34, $AD, $34, $B1, $24, $B5	
00027355 0284 2A74 33               SME_I2OLA_653:	dc.b 2, $84, $2A, $74, $33	
0002735A 03B7 DF17 EB27 ED          SME_I2OLA_658:	dc.b 3, $B7, $DF, $17, $EB, $27, $ED	
00027361 0384 1C24 3B14 3E          SME_I2OLA_65F:	dc.b 3, $84, $1C, $24, $3B, $14, $3E	
00027368 03B7 F017 FC27 FE          SME_I2OLA_666:	dc.b 3, $B7, $F0, $17, $FC, $27, $FE	
0002736F 0254 40B4 46               SME_I2OLA_66D:	dc.b 2, $54, $40, $B4, $46	
00027374 0374 5214 5AB4 5C          SME_I2OLA_672:	dc.b 3, $74, $52, $14, $5A, $B4, $5C	
0002737B 0B74 6814 7004 7924 7504+  SME_I2OLA_679:	dc.b $B, $74, $68, $14, $70, 4, $79, $24, $75, 4, $78, 4, $73, 4, $72, 4, $74, 4, $85, 4, $87, 4, $83	
00027392 0674 7A14 7054 8204 7924+  SME_I2OLA_690:	dc.b 6, $74, $7A, $14, $70, $54, $82, 4, $79, $24, $75, 4, $78	
0002739F 0354 C9B4 CF10 6D          SME_I2OLA_69D:	dc.b 3, $54, $C9, $B4, $CF, $10, $6D	
000273A6 0714 C334 C514 BE04 BD14+  SME_I2OLA_6A4:	dc.b 7, $14, $C3, $34, $C5, $14, $BE, 4, $BD, $14, $B8, $24, $BA, $24, $C0	
000273B5 02F4 DB24 EB               SME_I2OLA_6B3:	dc.b 2, $F4, $DB, $24, $EB	
000273BA 04B6 A416 B026 B206 B1     SME_I2OLA_6B8:	dc.b 4, $B6, $A4, $16, $B0, $26, $B2, 6, $B1	
000273C3 03B6 B516 C126 C3          SME_I2OLA_6C1:	dc.b 3, $B6, $B5, $16, $C1, $26, $C3	
000273CA 03B9 D129 DD19 E0          SME_I2OLA_6C8:	dc.b 3, $B9, $D1, $29, $DD, $19, $E0	
000273D1 0427 6F37 7237 7627 7A     SME_I2OLA_6CF:	dc.b 4, $27, $6F, $37, $72, $37, $76, $27, $7A	
000273DA 01F7 7E                    SME_I2OLA_6D8:	dc.b 1, $F7, $7E	
000273DD 01F7 8E                    SME_I2OLA_6DB:	dc.b 1, $F7, $8E	
000273E0 01F7 9E                    SME_I2OLA_6DE:	dc.b 1, $F7, $9E	
000273E3 01F7 AE                    SME_I2OLA_6E1:	dc.b 1, $F7, $AE	
000273E6 01F7 BE                    SME_I2OLA_6E4:	dc.b 1, $F7, $BE	
000273E9 01FA 08                    SME_I2OLA_6E7:	dc.b 1, $FA, 8	
000273EC 01FA BD                    SME_I2OLA_6EA:	dc.b 1, $FA, $BD	
000273EF 01BA 18                    SME_I2OLA_6ED:	dc.b 1, $BA, $18	
000273F2 03FA 243A 341A 38          SME_I2OLA_6F0:	dc.b 3, $FA, $24, $3A, $34, $1A, $38	
000273F9 035A 46BA 3A0A 4C          SME_I2OLA_6F7:	dc.b 3, $5A, $46, $BA, $3A, $A, $4C	
00027400 03BA 4D5A 590A 5F          SME_I2OLA_6FE:	dc.b 3, $BA, $4D, $5A, $59, $A, $5F	
00027407 03BA 605A 6C0A 72          SME_I2OLA_705:	dc.b 3, $BA, $60, $5A, $6C, $A, $72	
0002740E 03BA 735A 7F0A 85          SME_I2OLA_70C:	dc.b 3, $BA, $73, $5A, $7F, $A, $85	
00027415 085A 7F0A 852A 781A 7C0A+  SME_I2OLA_713:	dc.b 8, $5A, $7F, $A, $85, $2A, $78, $1A, $7C, $A, $76, $A, $86, $2A, $87, $1A, $8A	
00027426 0320 0EFA 8C3A 9C          SME_I2OLA_724:	dc.b 3, $20, $E, $FA, $8C, $3A, $9C	
0002742D 0320 0EFA A02A B0          SME_I2OLA_72B:	dc.b 3, $20, $E, $FA, $A0, $2A, $B0	
00027434 0720 0E2A 912A 952A 980A+  SME_I2OLA_732:	dc.b 7, $20, $E, $2A, $91, $2A, $95, $2A, $98, $A, $8F, $3A, $B5, $3A, $B9	
00027443 0350 3A50 4010 46          SME_I2OLA_741:	dc.b 3, $50, $3A, $50, $40, $10, $46	
0002744A 01B0 48                    SME_I2OLA_748:	dc.b 1, $B0, $48	
0002744D 0280 5A00 09               SME_I2OLA_74B:	dc.b 2, $80, $5A, 0, 9	
00027452 0707 2817 1617 1A27 1D07+  SME_I2OLA_750:	dc.b 7, 7, $28, $17, $16, $17, $1A, $27, $1D, 7, $19, 7, $15, $27, $21	
00027461 0350 6350 6910 6F          SME_I2OLA_75F:	dc.b 3, $50, $63, $50, $69, $10, $6F	
00027468 01B0 71                    SME_I2OLA_766:	dc.b 1, $B0, $71	
0002746B 0257 2907 2F               SME_I2OLA_769:	dc.b 2, $57, $29, 7, $2F	
00027470 0230 7D50 81               SME_I2OLA_76E:	dc.b 2, $30, $7D, $50, $81	
00027475 0550 8750 8D20 9350 9600+  SME_I2OLA_773:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
00027480 0650 8710 9D30 9F50 A330+  SME_I2OLA_77E:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
0002748D 0450 AE10 B470 B620 BE     SME_I2OLA_78B:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
00027496 03F9 7539 8539 89          SME_I2OLA_794:	dc.b 3, $F9, $75, $39, $85, $39, $89	
0002749D 0550 C130 C770 CB20 D310+  SME_I2OLA_79B:	dc.b 5, $50, $C1, $30, $C7, $70, $CB, $20, $D3, $10, $D6	
000274A8 0450 C110 D870 DA20 E2     SME_I2OLA_7A6:	dc.b 4, $50, $C1, $10, $D8, $70, $DA, $20, $E2	
000274B1 03F9 8D39 9D39 A1          SME_I2OLA_7AF:	dc.b 3, $F9, $8D, $39, $9D, $39, $A1	
000274B8 0550 8710 9D00 9370 E520+  SME_I2OLA_7B6:	dc.b 5, $50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED	
000274C3 0350 F810 FE51 00          SME_I2OLA_7C1:	dc.b 3, $50, $F8, $10, $FE, $51, 0	
000274CA 01B1 06                    SME_I2OLA_7C8:	dc.b 1, $B1, 6	
000274CD 0181 18                    SME_I2OLA_7CB:	dc.b 1, $81, $18	
000274D0 0308 FF89 0B29 01          SME_I2OLA_7CE:	dc.b 3, 8, $FF, $89, $B, $29, 1	
000274D7 0351 2111 2751 29          SME_I2OLA_7D5:	dc.b 3, $51, $21, $11, $27, $51, $29	
000274DE 01B1 2F                    SME_I2OLA_7DC:	dc.b 1, $B1, $2F	
000274E1 0319 1F09 1639 1B          SME_I2OLA_7DF:	dc.b 3, $19, $1F, 9, $16, $39, $1B	
000274E8 0201 0681 3B               SME_I2OLA_7E6:	dc.b 2, 1, 6, $81, $3B	
000274ED 0651 4411 4A11 4C81 4E01+  SME_I2OLA_7EB:	dc.b 6, $51, $44, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58	
000274FA 0651 4421 5911 5C11 5E81+  SME_I2OLA_7F8:	dc.b 6, $51, $44, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57	
00027507 0451 6911 6F81 7111 7A     SME_I2OLA_805:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
00027510 03F9 A529 B529 B8          SME_I2OLA_80E:	dc.b 3, $F9, $A5, $29, $B5, $29, $B8	
00027517 0551 7C21 8211 8571 8721+  SME_I2OLA_815:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
00027522 0451 7C11 9281 9411 9D     SME_I2OLA_820:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
0002752B 03F9 BB29 CB19 CE          SME_I2OLA_829:	dc.b 3, $F9, $BB, $29, $CB, $19, $CE	
00027532 0551 4481 9F11 5E11 A801+  SME_I2OLA_830:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
0002753D 03BA D32A DF0A E2          SME_I2OLA_83B:	dc.b 3, $BA, $D3, $2A, $DF, $A, $E2	
00027544 05BA E31A EF1A F11A F30A+  SME_I2OLA_842:	dc.b 5, $BA, $E3, $1A, $EF, $1A, $F1, $1A, $F3, $A, $F5	
0002754F 04BA F61B 022B 042B 07     SME_I2OLA_84D:	dc.b 4, $BA, $F6, $1B, 2, $2B, 4, $2B, 7	
00027558 04BB 0A1B 162B 182B 1B     SME_I2OLA_856:	dc.b 4, $BB, $A, $1B, $16, $2B, $18, $2B, $1B	
00027561 02FB 1E7B 2E               SME_I2OLA_85F:	dc.b 2, $FB, $1E, $7B, $2E	
00027566 02FB 367B 46               SME_I2OLA_864:	dc.b 2, $FB, $36, $7B, $46	
0002756B 02FB 1E7B 2E               SME_I2OLA_869:	dc.b 2, $FB, $1E, $7B, $2E	
00027570 02FB 367B 46               SME_I2OLA_86E:	dc.b 2, $FB, $36, $7B, $46	
00027575 023B 4EFB 52               SME_I2OLA_873:	dc.b 2, $3B, $4E, $FB, $52	
0002757A 03FB 623B 722B 76          SME_I2OLA_878:	dc.b 3, $FB, $62, $3B, $72, $2B, $76	
00027581 03FB 792B 892B 8C          SME_I2OLA_87F:	dc.b 3, $FB, $79, $2B, $89, $2B, $8C	
00027588 078B 970B 8F3B 900B 960B+  SME_I2OLA_886:	dc.b 7, $8B, $97, $B, $8F, $3B, $90, $B, $96, $B, $95, $B, $94, $1B, $A0	
00027597 02FB 1E7B 2E               SME_I2OLA_895:	dc.b 2, $FB, $1E, $7B, $2E	
0002759C 02FB 367B 46               SME_I2OLA_89A:	dc.b 2, $FB, $36, $7B, $46	
000275A1 02FB 1E7B 2E               SME_I2OLA_89F:	dc.b 2, $FB, $1E, $7B, $2E	
000275A6 02FB 367B 46               SME_I2OLA_8A4:	dc.b 2, $FB, $36, $7B, $46	
000275AB 032D 23FD 132D 26          SME_I2OLA_8A9:	dc.b 3, $2D, $23, $FD, $13, $2D, $26	
000275B2 04FD 293D 391D 3D0D 3F     SME_I2OLA_8B0:	dc.b 4, $FD, $29, $3D, $39, $1D, $3D, $D, $3F	
000275BB 00                         SME_I2OLA_8B9:	dc.b 0	
000275BC 00                         SME_I2OLA_8BA:	dc.b 0	
000275BD 03BD 403D 4C5D 50          SME_I2OLA_8BB:	dc.b 3, $BD, $40, $3D, $4C, $5D, $50	
000275C4 03BD 567D 621D 6A          SME_I2OLA_8C2:	dc.b 3, $BD, $56, $7D, $62, $1D, $6A	
000275CB 00                         SME_I2OLA_8C9:	dc.b 0	
000275CC 00                         SME_I2OLA_8CA:	dc.b 0	
000275CD 023B A2FB A6               SME_I2OLA_8CB:	dc.b 2, $3B, $A2, $FB, $A6	
000275D2 01FB B6                    SME_I2OLA_8D0:	dc.b 1, $FB, $B6	
000275D5 02FB C67B D6               SME_I2OLA_8D3:	dc.b 2, $FB, $C6, $7B, $D6	
000275DA 02FB DE7B EE               SME_I2OLA_8D8:	dc.b 2, $FB, $DE, $7B, $EE	
000275DF 02FB F67C 06               SME_I2OLA_8DD:	dc.b 2, $FB, $F6, $7C, 6	
000275E4 02FC 0E7C 1E               SME_I2OLA_8E2:	dc.b 2, $FC, $E, $7C, $1E	
000275E9 055C 267C 2C5C 340C 3A0C+  SME_I2OLA_8E7:	dc.b 5, $5C, $26, $7C, $2C, $5C, $34, $C, $3A, $C, $3B	
000275F4 05BC 3C3C 481C 4C1C 4E2C+  SME_I2OLA_8F2:	dc.b 5, $BC, $3C, $3C, $48, $1C, $4C, $1C, $4E, $2C, $50	
000275FF 02BC 535C 5F               SME_I2OLA_8FD:	dc.b 2, $BC, $53, $5C, $5F	
00027604 02BC 655C 71               SME_I2OLA_902:	dc.b 2, $BC, $65, $5C, $71	
00027609 02BC 775C 83               SME_I2OLA_907:	dc.b 2, $BC, $77, $5C, $83	
0002760E 02BC 895C 95               SME_I2OLA_90C:	dc.b 2, $BC, $89, $5C, $95	
00027613 02BC 9B5C A7               SME_I2OLA_911:	dc.b 2, $BC, $9B, $5C, $A7	
00027618 02BC AD5C B9               SME_I2OLA_916:	dc.b 2, $BC, $AD, $5C, $B9	
0002761D 02BC BF5C CB               SME_I2OLA_91B:	dc.b 2, $BC, $BF, $5C, $CB	
00027622 02BC D15C DD               SME_I2OLA_920:	dc.b 2, $BC, $D1, $5C, $DD	
00027627 02FC E37C F3               SME_I2OLA_925:	dc.b 2, $FC, $E3, $7C, $F3	
0002762C 02FC FB7D 0B               SME_I2OLA_92A:	dc.b 2, $FC, $FB, $7D, $B	
00027632 00                         		even
00027632 00                         		even
00027632                            
00027632                            ; ---------------------------------------------------------------------------
00027632                            ; Uncompressed graphics	- Sonic
00027632                            ; ---------------------------------------------------------------------------
00027632                            Art_Sonic:	incbin	"artunc\Sonic.bin"	; Sonic
0004EDD2                            		even
0004EDD2                            ; ---------------------------------------------------------------------------
0004EDD2                            ; Compressed graphics - various
0004EDD2                            ; ---------------------------------------------------------------------------
0004EDD2                            Art_GShield:	incbin	"artunc\Gold Shield.bin"
0004FA92                            		even
0004FA92                            Art_RedShield:	incbin	"artunc\Red Shield.bin"
00050752                            		even
00050752                            Art_SpShield:	incbin	"artunc\Gray Shield.bin"
00051412                            		even
00051412                            Art_Shield:	incbin	"artunc\Shield.bin"
000520D2                            		even
000520D2                            Unc_Stars:	incbin	"artunc\Invincibility Stars.bin"
000524D2                            		even
000524D2                            
000524D2                            Map_SSWalls:	include	"_maps\SS Walls.asm"
000524D2                            ; ---------------------------------------------------------------------------
000524D2                            ; Sprite mappings - walls of the special stage
000524D2                            ; ---------------------------------------------------------------------------
000524D2                            Map_SSWalls_internal:
000524D2 0000                       		dc.w byte_2C584-Map_SSWalls_internal
000524D4 0000                       		dc.w byte_2C58A-Map_SSWalls_internal
000524D6 0000                       		dc.w byte_2C590-Map_SSWalls_internal
000524D8 0000                       		dc.w byte_2C596-Map_SSWalls_internal
000524DA 0000                       		dc.w byte_2C59C-Map_SSWalls_internal
000524DC 0000                       		dc.w byte_2C5A2-Map_SSWalls_internal
000524DE 0000                       		dc.w byte_2C5A8-Map_SSWalls_internal
000524E0 0000                       		dc.w byte_2C5AE-Map_SSWalls_internal
000524E2 0000                       		dc.w byte_2C5B4-Map_SSWalls_internal
000524E4 0000                       		dc.w byte_2C5BA-Map_SSWalls_internal
000524E6 0000                       		dc.w byte_2C5C0-Map_SSWalls_internal
000524E8 0000                       		dc.w byte_2C5C6-Map_SSWalls_internal
000524EA 0000                       		dc.w byte_2C5CC-Map_SSWalls_internal
000524EC 0000                       		dc.w byte_2C5D2-Map_SSWalls_internal
000524EE 0000                       		dc.w byte_2C5D8-Map_SSWalls_internal
000524F0 0000                       		dc.w byte_2C5DE-Map_SSWalls_internal
000524F2 01                         byte_2C584:	dc.b 1
000524F3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000524F8 01                         byte_2C58A:	dc.b 1
000524F9 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
000524FE 01                         byte_2C590:	dc.b 1
000524FF F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00052504 01                         byte_2C596:	dc.b 1
00052505 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0005250A 01                         byte_2C59C:	dc.b 1
0005250B F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00052510 01                         byte_2C5A2:	dc.b 1
00052511 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00052516 01                         byte_2C5A8:	dc.b 1
00052517 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0005251C 01                         byte_2C5AE:	dc.b 1
0005251D F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00052522 01                         byte_2C5B4:	dc.b 1
00052523 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00052528 01                         byte_2C5BA:	dc.b 1
00052529 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0005252E 01                         byte_2C5C0:	dc.b 1
0005252F F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00052534 01                         byte_2C5C6:	dc.b 1
00052535 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0005253A 01                         byte_2C5CC:	dc.b 1
0005253B F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00052540 01                         byte_2C5D2:	dc.b 1
00052541 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00052546 01                         byte_2C5D8:	dc.b 1
00052547 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0005254C 01                         byte_2C5DE:	dc.b 1
0005254D F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00052552                            		even
00052552                            		even
00052552                            
00052552                            ; ---------------------------------------------------------------------------
00052552                            ; Compressed graphics - special stage
00052552                            ; ---------------------------------------------------------------------------
00052552                            Nem_SSWalls:	incbin	"artnem\Special Walls.bin" ; special stage walls
00052E8A                            		even
00052E8A                            Eni_SSBg1:	incbin	"tilemaps\SS Background 1.bin" ; special stage background (mappings)
00052FBE                            		even
00052FBE                            Nem_SSBgFish:	incbin	"artnem\Special Birds & Fish.bin" ; special stage birds and fish background
00053C4E                            		even
00053C4E                            Eni_SSBg2:	incbin	"tilemaps\SS Background 2.bin" ; special stage background (mappings)
00053F4E                            		even
00053F4E                            Nem_SSBgCloud:	incbin	"artnem\Special Clouds.bin" ; special stage clouds background
00054442                            		even
00054442                            Nem_SSGOAL:	incbin	"artnem\Special GOAL.bin" ; special stage GOAL block
00054530                            		even
00054530                            Nem_SSRBlock:	incbin	"artnem\Special R.bin"	; special stage R block
00054600                            		even
00054600                            Nem_SS1UpBlock:	incbin	"artnem\Special 1UP.bin" ; special stage 1UP block
000546F6                            		even
000546F6                            Nem_SSEmStars:	incbin	"artnem\Special Emerald Twinkle.bin" ; special stage stars from a collected emerald
00054754                            		even
00054754                            Nem_SSRedWhite:	incbin	"artnem\Special Red-White.bin" ; special stage red/white block
000547E6                            		even
000547E6                            Nem_SSZone1:	incbin	"artnem\Special ZONE1.bin" ; special stage ZONE1 block
000548A8                            		even
000548A8                            Nem_SSZone2:	incbin	"artnem\Special ZONE2.bin" ; ZONE2 block
00054976                            		even
00054976                            Nem_SSZone3:	incbin	"artnem\Special ZONE3.bin" ; ZONE3 block
00054A42                            		even
00054A42                            Nem_SSZone4:	incbin	"artnem\Special ZONE4.bin" ; ZONE4 block
00054B0A                            		even
00054B0A                            Nem_SSZone5:	incbin	"artnem\Special ZONE5.bin" ; ZONE5 block
00054BD4                            		even
00054BD4                            Nem_SSZone6:	incbin	"artnem\Special ZONE6.bin" ; ZONE6 block
00054CA4                            		even
00054CA4                            Nem_SSUpDown:	incbin	"artnem\Special UP-DOWN.bin" ; special stage UP/DOWN block
00054E98                            		even
00054E98                            Nem_SSEmerald:	incbin	"artnem\Special Emeralds.bin" ; special stage chaos emeralds
00055000                            		even
00055000                            Nem_SSGhost:	incbin	"artnem\Special Ghost.bin" ; special stage ghost block
000550B0                            		even
000550B0                            Nem_SSWBlock:	incbin	"artnem\Special W.bin"	; special stage W block
0005518A                            		even
0005518A                            Nem_SSGlass:	incbin	"artnem\Special Glass.bin" ; special stage destroyable glass block
0005520E                            		even
0005520E                            Nem_ResultEm:	incbin	"artnem\Special Result Emeralds.bin" ; chaos emeralds on special stage results screen
0005538C                            		even
0005538C                            ; ---------------------------------------------------------------------------
0005538C                            ; Compressed graphics - GHZ stuff
0005538C                            ; ---------------------------------------------------------------------------
0005538C                            Nem_Stalk:	incbin	"artnem\GHZ Flower Stalk.bin"
000553EE                            		even
000553EE                            Nem_Swing:	incbin	"artnem\GHZ Swinging Platform.bin"
00055508                            		even
00055508                            Nem_Bridge:	incbin	"artnem\GHZ Bridge.bin"
00055626                            		even
00055626                            Nem_GhzUnkBlock:incbin	"artnem\Unused - GHZ Block.bin"
0005566E                            		even
0005566E                            Nem_Ball:	incbin	"artnem\GHZ Giant Ball.bin"
0005580C                            		even
0005580C                            Nem_Spikes:	incbin	"artnem\Spikes.bin"
00055888                            		even
00055888                            Nem_GhzLog:	incbin	"artnem\Unused - GHZ Log.bin"
00055A9C                            		even
00055A9C                            Nem_SpikePole:	incbin	"artnem\GHZ Spiked Log.bin"
00055BC8                            		even
00055BC8                            Nem_PplRock:	incbin	"artnem\GHZ Purple Rock.bin"
00055D1C                            		even
00055D1C                            Nem_GhzWall1:	incbin	"artnem\GHZ Breakable Wall.bin"
00055DCC                            		even
00055DCC                            Nem_GhzWall2:	incbin	"artnem\GHZ Edge Wall.bin"
00055E2C                            		even
00055E2C                            ; ---------------------------------------------------------------------------
00055E2C                            ; Compressed graphics - LZ stuff
00055E2C                            ; ---------------------------------------------------------------------------
00055E2C                            Nem_Water:	incbin	"artnem\LZ Water Surface.bin"
00055F04                            		even
00055F04                            Nem_Splash:	incbin	"artnem\LZ Water & Splashes.bin"
000566F8                            		even
000566F8                            Nem_LzSpikeBall:incbin	"artnem\LZ Spiked Ball & Chain.bin"
0005688A 00                         		even
0005688A                            Nem_FlapDoor:	incbin	"artnem\LZ Flapping Door.bin"
000569F4                            		even
000569F4                            Nem_Bubbles:	incbin	"artnem\LZ Bubbles & Countdown.bin"
00057034 00                         		even
00057034                            Nem_LzBlock3:	incbin	"artnem\LZ 32x16 Block.bin"
000570D6 00                         		even
000570D6                            Nem_LzDoor1:	incbin	"artnem\LZ Vertical Door.bin"
00057150 00                         		even
00057150                            Nem_Harpoon:	incbin	"artnem\LZ Harpoon.bin"
000572B6 00                         		even
000572B6                            Nem_LzPole:	incbin	"artnem\LZ Breakable Pole.bin"
0005733C 00                         		even
0005733C                            Nem_LzDoor2:	incbin	"artnem\LZ Horizontal Door.bin"
000574A8                            		even
000574A8                            Nem_LzWheel:	incbin	"artnem\LZ Wheel.bin"
0005798A                            		even
0005798A                            Nem_Gargoyle:	incbin	"artnem\LZ Gargoyle & Fireball.bin"
00057AFA                            		even
00057AFA                            Nem_LzBlock2:	incbin	"artnem\LZ Blocks.bin"
00057DB2                            		even
00057DB2                            Nem_LzPlatfm:	incbin	"artnem\LZ Rising Platform.bin"
00057EF8                            		even
00057EF8                            Nem_Cork:	incbin	"artnem\LZ Cork.bin"
00058022                            		even
00058022                            Nem_LzBlock1:	incbin	"artnem\LZ 32x32 Block.bin"
000581A2 00                         		even
000581A2                            ; ---------------------------------------------------------------------------
000581A2                            ; Compressed graphics - MZ stuff
000581A2                            ; ---------------------------------------------------------------------------
000581A2                            Nem_MzMetal:	incbin	"artnem\MZ Metal Blocks.bin"
00058430                            		even
00058430                            Nem_MzSwitch:	incbin	"artnem\MZ Switch.bin"
000584EE                            		even
000584EE                            Nem_MzGlass:	incbin	"artnem\MZ Green Glass Block.bin"
000585C6                            		even
000585C6                            Nem_UnkGrass:	incbin	"artnem\Unused - Grass.bin"
0005861A                            		even
0005861A                            Nem_MzFire:	incbin	"artnem\Fireballs.bin"
00058938 00                         		even
00058938                            Nem_Lava:	incbin	"artnem\MZ Lava.bin"
0005924E                            		even
0005924E                            Nem_MzBlock:	incbin	"artnem\MZ Green Pushable Block.bin"
000593BC                            		even
000593BC                            Nem_MzUnkBlock:	incbin	"artnem\Unused - MZ Background.bin"
00059444                            		even
00059444                            ; ---------------------------------------------------------------------------
00059444                            ; Compressed graphics - SLZ stuff
00059444                            ; ---------------------------------------------------------------------------
00059444                            Nem_Seesaw:	incbin	"artnem\SLZ Seesaw.bin"
00059680                            		even
00059680                            Nem_SlzSpike:	incbin	"artnem\SLZ Little Spikeball.bin"
000597C6                            		even
000597C6                            Nem_Fan:	incbin	"artnem\SLZ Fan.bin"
00059A0A                            		even
00059A0A                            Nem_SlzWall:	incbin	"artnem\SLZ Breakable Wall.bin"
00059AA6 00                         		even
00059AA6                            Nem_Pylon:	incbin	"artnem\SLZ Pylon.bin"
00059B88                            		even
00059B88                            Nem_SlzSwing:	incbin	"artnem\SLZ Swinging Platform.bin"
00059D6A                            		even
00059D6A                            Nem_SlzBlock:	incbin	"artnem\SLZ 32x32 Block.bin"
00059E76                            		even
00059E76                            Nem_SlzCannon:	incbin	"artnem\SLZ Cannon.bin"
00059F1A                            		even
00059F1A                            ; ---------------------------------------------------------------------------
00059F1A                            ; Compressed graphics - SYZ stuff
00059F1A                            ; ---------------------------------------------------------------------------
00059F1A                            Nem_Bumper:	incbin	"artnem\SYZ Bumper.bin"
0005A0AA                            		even
0005A0AA                            Nem_SyzSpike2:	incbin	"artnem\SYZ Small Spikeball.bin"
0005A10C                            		even
0005A10C                            Nem_LzSwitch:	incbin	"artnem\Switch.bin"
0005A228 00                         		even
0005A228                            Nem_SyzSpike1:	incbin	"artnem\SYZ Large Spikeball.bin"
0005A4B6                            		even
0005A4B6                            ; ---------------------------------------------------------------------------
0005A4B6                            ; Compressed graphics - SBZ stuff
0005A4B6                            ; ---------------------------------------------------------------------------
0005A4B6                            Nem_SbzWheel1:	incbin	"artnem\SBZ Running Disc.bin"
0005A50A                            		even
0005A50A                            Nem_SbzWheel2:	incbin	"artnem\SBZ Junction Wheel.bin"
0005A7A6                            		even
0005A7A6                            Nem_Cutter:	incbin	"artnem\SBZ Pizza Cutter.bin"
0005A996                            		even
0005A996                            Nem_Stomper:	incbin	"artnem\SBZ Stomper.bin"
0005AB34                            		even
0005AB34                            Nem_SpinPform:	incbin	"artnem\SBZ Spinning Platform.bin"
0005AE64                            		even
0005AE64                            Nem_TrapDoor:	incbin	"artnem\SBZ Trapdoor.bin"
0005B042                            		even
0005B042                            Nem_SbzFloor:	incbin	"artnem\SBZ Collapsing Floor.bin"
0005B09A                            		even
0005B09A                            Nem_Electric:	incbin	"artnem\SBZ Electrocuter.bin"
0005B24C 00                         		even
0005B24C                            Nem_SbzBlock:	incbin	"artnem\SBZ Vanishing Block.bin"
0005B368                            		even
0005B368                            Nem_FlamePipe:	incbin	"artnem\SBZ Flaming Pipe.bin"
0005B4F6                            		even
0005B4F6                            Nem_SbzDoor1:	incbin	"artnem\SBZ Small Vertical Door.bin"
0005B590                            		even
0005B590                            Nem_SlideFloor:	incbin	"artnem\SBZ Sliding Floor Trap.bin"
0005B5E8                            		even
0005B5E8                            Nem_SbzDoor2:	incbin	"artnem\SBZ Large Horizontal Door.bin"
0005B6E4                            		even
0005B6E4                            Nem_Girder:	incbin	"artnem\SBZ Crushing Girder.bin"
0005B7FA                            		even
0005B7FA                            ; ---------------------------------------------------------------------------
0005B7FA                            ; Compressed graphics - enemies
0005B7FA                            ; ---------------------------------------------------------------------------
0005B7FA                            Nem_BallHog:	incbin	"artnem\Enemy Ball Hog.bin"
0005BC42 00                         		even
0005BC42                            Nem_Crabmeat:	incbin	"artnem\Enemy Crabmeat.bin"
0005C132 00                         		even
0005C132                            Nem_Mozzietron:	incbin	"artnem\Enemy Mozzietron.bin"
0005C416 00                         		even
0005C416                            Nem_Buzz:	incbin	"artnem\Enemy Buzz Bomber.bin"
0005C7D6                            		even
0005C7D6                            Nem_UnkExplode:	incbin	"artnem\Unused - Explosion.bin"
0005C9BE                            		even
0005C9BE                            Nem_Burrobot:	incbin	"artnem\Enemy Burrobot.bin"
0005D0EC 00                         		even
0005D0EC                            Nem_Chopper:	incbin	"artnem\Enemy Chopper.bin"
0005D374 00                         		even
0005D374                            Nem_Jaws:	incbin	"artnem\Enemy Jaws.bin"
0005D610 00                         		even
0005D610                            Nem_Roller:	incbin	"artnem\Enemy Roller.bin"
0005DBE4                            		even
0005DBE4                            Nem_Motobug:	incbin	"artnem\Enemy Motobug.bin"
0005DE76                            		even
0005DE76                            Nem_Newtron:	incbin	"artnem\Enemy Newtron.bin"
0005E4C0 00                         		even
0005E4C0                            Nem_Yadrin:	incbin	"artnem\Enemy Yadrin.bin"
0005E8FC                            		even
0005E8FC                            Nem_Basaran:	incbin	"artnem\Enemy Basaran.bin"
0005EC0A 00                         		even
0005EC0A                            Nem_Splats:	incbin	"artnem\Enemy Splats.bin"
0005EE6A                            		even
0005EE6A                            Nem_Bomb:	incbin	"artnem\Enemy Bomb.bin"
0005F168                            		even
0005F168                            Nem_Orbinaut:	incbin	"artnem\Enemy Orbinaut.bin"
0005F394 00                         		even
0005F394                            Nem_Cater:	incbin	"artnem\Enemy Caterkiller.bin"
0005F522                            		even
0005F522                            ; ---------------------------------------------------------------------------
0005F522                            ; Compressed graphics - various
0005F522                            ; ---------------------------------------------------------------------------
0005F522                            Nem_TitleCard:	incbin	"artnem\Title Cards.bin"
0005FB70 00                         		even
0005FB70                            Nem_Hud:	incbin	"artnem\HUD.bin"	; HUD (rings, time, score)
0005FCE8 00                         		even
0005FCE8                            Nem_Lives:	incbin	"artnem\HUD - Life Counter Icon.bin"
0005FE0A 00                         		even
0005FE0A                            Nem_Future:	incbin	"artnem\HUD - Life Counter Icon Future.bin"
0005FF12 00                         		even
0005FF12                            Nem_Ring:	incbin	"artnem\Rings.bin"
00060066 00                         		even
00060066                            Nem_Monitors:	incbin	"artnem\Monitors.bin"
000604F4                            		even
000604F4                            Nem_Explode:	incbin	"artnem\Explosion.bin"
00060B68                            		even
00060B68                            Nem_Points:	incbin	"artnem\Points.bin"	; points from destroyed enemy or object
00060C02 00                         		even
00060C02                            Nem_GameOver:	incbin	"artnem\Game Over.bin"	; game over / time over
00060D94                            		even
00060D94                            Nem_HSpring:	incbin	"artnem\Spring Horizontal.bin"
00060EB2 00                         		even
00060EB2                            Nem_VSpring:	incbin	"artnem\Spring Vertical.bin"
00060F9E                            		even
00060F9E                            Nem_SignPost:	incbin	"artnem\Signpost.bin"	; end of level signpost
00061516                            		even
00061516                            Nem_Lamp:	incbin	"artnem\Lamppost.bin"
00061600                            		even
00061600                            Nem_BigFlash:	incbin	"artnem\Giant Ring Flash.bin"
00061774                            		even
00061774                            Nem_Bonus:	incbin	"artnem\Hidden Bonuses.bin" ; hidden bonuses at end of a level
00061AFC 00                         		even
00061AFC                            ; ---------------------------------------------------------------------------
00061AFC                            ; Compressed graphics - continue screen
00061AFC                            ; ---------------------------------------------------------------------------
00061AFC                            Nem_ContSonic:	incbin	"artnem\Continue Screen Sonic.bin"
00061DD0 00                         		even
00061DD0                            Nem_MiniSonic:	incbin	"artnem\Continue Screen Stuff.bin"
0006206A 00                         		even
0006206A                            ; ---------------------------------------------------------------------------
0006206A                            ; Compressed graphics - animals
0006206A                            ; ---------------------------------------------------------------------------
0006206A                            Nem_Rabbit:	incbin	"artnem\Animal Rabbit.bin"
000621C2                            		even
000621C2                            Nem_Chicken:	incbin	"artnem\Animal Chicken.bin"
0006231E                            		even
0006231E                            Nem_BlackBird:	incbin	"artnem\Animal Blackbird.bin"
0006249A                            		even
0006249A                            Nem_Seal:	incbin	"artnem\Animal Seal.bin"
000625B6                            		even
000625B6                            Nem_Pig:	incbin	"artnem\Animal Pig.bin"
00062730                            		even
00062730                            Nem_Flicky:	incbin	"artnem\Animal Flicky.bin"
0006286A                            		even
0006286A                            Nem_Squirrel:	incbin	"artnem\Animal Squirrel.bin"
000629C6                            		even
000629C6                            ; ---------------------------------------------------------------------------
000629C6                            ; Compressed graphics - primary patterns and block mappings
000629C6                            ; ---------------------------------------------------------------------------
000629C6                            Blk16_GHZ:	incbin	"map16\GHZ.bin"
000633A2                            		even
000633A2                            Nem_GHZ_1st:	incbin	"artnem\8x8 - GHZ1.bin"	; GHZ primary patterns
00064CF2                            		even
00064CF2                            Nem_GHZ_2nd:	incbin	"artnem\8x8 - GHZ2.bin"	; GHZ secondary patterns
00066274                            		even
00066274                            Blk256_GHZ:	incbin	"map256\GHZ.bin"
0006866E                            		even
0006866E                            Blk16_TS:	incbin	"map16\TS.bin"
000688F2                            		even
000688F2                            Nem_TS_1st:	incbin	"artnem\8x8 - TS1.bin"	; GHZ primary patterns
00069A30                            		even
00069A30                            Blk256_TS:	incbin	"map256\TS.bin"
0006A5DE                            		even
0006A5DE                            Blk16_LZ:	incbin	"map16\LZ.bin"
0006B77C                            		even
0006B77C                            Nem_LZ:		incbin	"artnem\8x8 - LZ.bin"	; LZ primary patterns
0006EC24                            		even
0006EC24                            Blk256_LZ:	incbin	"map256\LZ.bin"
00072146                            		even
00072146                            Blk16_MZ:	incbin	"map16\MZ.bin"
00072934                            		even
00072934                            Nem_MZ:		incbin	"artnem\8x8 - MZ.bin"	; MZ primary patterns
000753C4                            		even
000753C4                            		incbin	"map256\MZ (JP1).bin"
000774FE                            		even
000774FE                            Blk16_SLZ:	incbin	"map16\SLZ.bin"
00077B80                            		even
00077B80                            Nem_SLZ:	incbin	"artnem\8x8 - SLZ.bin"	; SLZ primary patterns
0007B5EA                            		even
0007B5EA                            Blk256_SLZ:	incbin	"map256\SLZ.bin"
0007D9F4                            		even
0007D9F4                            Blk16_SYZ:	incbin	"map16\SYZ.bin"
0007DE98                            		even
0007DE98                            Nem_SYZ:	incbin	"artnem\8x8 - SYZ.bin"	; SYZ primary patterns
0007F670                            		even
0007F670                            Blk256_SYZ:	incbin	"map256\SYZ.bin"
0007F9DA                            		even
0007F9DA                            Blk16_SBZ:	incbin	"map16\SBZ.bin"
000805D4                            		even
000805D4                            Nem_SBZ:	incbin	"artnem\8x8 - SBZ.bin"	; SBZ primary patterns
00082E16                            		even
00082E16                            		incbin	"map256\SBZ (JP1).bin"
000839A2                            		even
000839A2                            ; ---------------------------------------------------------------------------
000839A2                            ; Compressed graphics - bosses and ending sequence
000839A2                            ; ---------------------------------------------------------------------------
000839A2                            Nem_Eggman:	incbin	"artnem\Boss - Main.bin"
0008420A                            		even
0008420A                            Nem_Weapons:	incbin	"artnem\Boss - Weapons.bin"
000844F4                            		even
000844F4                            Nem_Prison:	incbin	"artnem\Prison Capsule.bin"
00084D78                            		even
00084D78                            Nem_Sbz2Eggman:	incbin	"artnem\Boss - Eggman in SBZ2 & FZ.bin"
000855B6 00                         		even
000855B6                            Nem_FzBoss:	incbin	"artnem\Boss - Final Zone.bin"
00085D84 00                         		even
00085D84                            Nem_FzEggman:	incbin	"artnem\Boss - Eggman after FZ Fight.bin"
000862AC                            		even
000862AC                            Nem_Exhaust:	incbin	"artnem\Boss - Exhaust Flame.bin"
000863CC                            		even
000863CC                            Nem_EndEm:	incbin	"artnem\Ending - Emeralds.bin"
000865D4 00                         		even
000865D4                            Nem_EndSonic:	incbin	"artnem\Ending - Sonic.bin"
000878BE 00                         		even
000878BE                            Nem_TryAgain:	incbin	"artnem\Ending - Try Again.bin"
00088202                            		even
00088202                            		even
00088202                            Kos_EndFlowers:	incbin	"artkos\Flowers at Ending.bin" ; ending sequence animated flowers
00088792                            		even
00088792                            Nem_EndFlower:	incbin	"artnem\Ending - Flowers.bin"
00088A1A                            		even
00088A1A                            Nem_CreditText:	incbin	"artnem\Ending - Credits.bin"
0008909E                            		even
0008909E                            Nem_EndStH:	incbin	"artnem\Ending - StH Logo.bin"
00089402                            		even
00089402                            
00089402 FFFF FFFF FFFF FFFF FFFF+  		dcb.b $40,$FF
00089442                            ; ---------------------------------------------------------------------------
00089442                            ; Collision data
00089442                            ; ---------------------------------------------------------------------------
00089442                            AngleMap:	incbin	"collide\Angle Map.bin"
00089542                            		even
00089542                            CollArray1:	incbin	"collide\Collision Array (Normal).bin"
0008A542                            		even
0008A542                            CollArray2:	incbin	"collide\Collision Array (Rotated).bin"
0008B542                            		even
0008B542                            Col_GHZ:	incbin	"collide\GHZ.bin"	; GHZ index
0008B6F0 00                         		even
0008B6F0                            Col_LZ:		incbin	"collide\LZ.bin"	; LZ index
0008B994                            		even
0008B994                            Col_MZ:		incbin	"collide\MZ.bin"	; MZ index
0008BB38 00                         		even
0008BB38                            Col_SLZ:	incbin	"collide\SLZ.bin"	; SLZ index
0008BD2C                            		even
0008BD2C                            Col_SYZ:	incbin	"collide\SYZ.bin"	; SYZ index
0008BE06                            		even
0008BE06                            Col_SBZ:	incbin	"collide\SBZ.bin"	; SBZ index
0008BFD6                            		even
0008BFD6                            ; ---------------------------------------------------------------------------
0008BFD6                            ; Special Stage layouts
0008BFD6                            ; ---------------------------------------------------------------------------
0008BFD6                            SS_1:		incbin	"sslayout\1.bin"
0008C250                            		even
0008C250                            SS_2:		incbin	"sslayout\2.bin"
0008C662                            		even
0008C662                            SS_3:		incbin	"sslayout\3.bin"
0008C9BE                            		even
0008C9BE                            SS_4:		incbin	"sslayout\4.bin"
0008CE98                            		even
0008CE98                            	SS_5:		incbin	"sslayout\5 (JP1).bin"
0008D348                            			even
0008D348                            	SS_6:		incbin	"sslayout\6 (JP1).bin"
0008D63A                            		even
0008D63A                            ; ---------------------------------------------------------------------------
0008D63A                            ; Animated uncompressed graphics
0008D63A                            ; ---------------------------------------------------------------------------
0008D63A                            Art_GhzWater:	incbin	"artunc\GHZ Waterfall.bin"
0008D83A                            		even
0008D83A                            Art_GhzFlower1:	incbin	"artunc\GHZ Flower Large.bin"
0008DC3A                            		even
0008DC3A                            Art_GhzFlower2:	incbin	"artunc\GHZ Flower Small.bin"
0008E0BA                            		even
0008E0BA                            Art_MzLava1:	incbin	"artunc\MZ Lava Surface.bin"
0008E3BA                            		even
0008E3BA                            Art_MzLava2:	incbin	"artunc\MZ Lava.bin"
0008E9BA                            		even
0008E9BA                            Art_MzTorch:	incbin	"artunc\MZ Background Torch.bin"
0008ECBA                            		even
0008ECBA                            Art_SbzSmoke:	incbin	"artunc\SBZ Background Smoke.bin"
0008F73A                            		even
0008F73A                            
0008F73A                            ; ---------------------------------------------------------------------------
0008F73A                            ; Level	layout index
0008F73A                            ; ---------------------------------------------------------------------------
0008F73A                            Level_Index:
0008F73A                            		; GHZ
0008F73A 0000 0000 0000             		dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0008F740 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0008F746 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0008F74C 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0008F752                            		; LZ
0008F752 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0008F758 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0008F75E 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0008F764 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0008F76A                            		; MZ
0008F76A 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0008F770 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0008F776 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0008F77C 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0008F782                            		; SLZ
0008F782 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0008F788 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0008F78E 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0008F794 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0008F79A                            		; SYZ
0008F79A 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0008F7A0 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0008F7A6 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0008F7AC 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0008F7B2                            		; SBZ
0008F7B2 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0008F7B8 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0008F7BE 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0008F7C4 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0008F7CA                            		; Ending
0008F7CA 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0008F7D0 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0008F7D6 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0008F7DC 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0008F7E2                            
0008F7E2                            Level_GHZ1:	incbin	"levels\ghz1.bin"
0008FA14                            		even
0008FA14 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0008FA18                            Level_GHZ2:	incbin	"levels\ghz2.bin"
0008FB52                            		even
0008FB52 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0008FB56                            Level_GHZ3:	incbin	"levels\ghz3.bin"
0008FC78                            		even
0008FC78                            Level_GHZbg:	incbin	"levels\ghzbg.bin"
0008FCB6                            		even
0008FCB6 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0008FCBA 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0008FCBE                            
0008FCBE                            Level_LZ1:	incbin	"levels\lz1.bin"
0008FD80                            		even
0008FD80                            Level_LZbg:	incbin	"levels\lzbg.bin"
0008FE82                            		even
0008FE82 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0008FE86                            Level_LZ2:	incbin	"levels\lz2.bin"
0008FF20                            		even
0008FF20 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0008FF24                            Level_LZ3:	incbin	"levels\lz3.bin"
0009003E                            		even
0009003E 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00090042                            Level_SBZ3:	incbin	"levels\sbz3.bin"
000900FC                            		even
000900FC 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00090100                            
00090100                            Level_MZ1:	incbin	"levels\mz1.bin"
000901F2                            		even
000901F2                            Level_MZ1bg:	incbin	"levels\mz1bg.bin"
00090314                            		even
00090314                            Level_MZ2:	incbin	"levels\mz2.bin"
00090436                            		even
00090436                            Level_MZ2bg:	incbin	"levels\mz2bg.bin"
00090558                            		even
00090558 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0009055C                            Level_MZ3:	incbin	"levels\mz3.bin"
000905F6                            		even
000905F6                            Level_MZ3bg:	incbin	"levels\mz3bg.bin"
00090718                            		even
00090718 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0009071C 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
00090720                            
00090720                            Level_SLZ1:	incbin	"levels\slz1.bin"
00090832                            		even
00090832                            Level_SLZbg:	incbin	"levels\slzbg.bin"
000908AC                            		even
000908AC                            Level_SLZ2:	incbin	"levels\slz2.bin"
0009099C                            		even
0009099C                            Level_SLZ3:	incbin	"levels\slz3.bin"
00090AB6                            		even
00090AB6 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
00090ABA                            
00090ABA                            Level_SYZ1:	incbin	"levels\syz1.bin"
00090BBE                            		even
00090BBE                            		incbin	"levels\syzbg (JP1).bin"
00090BF8                            		even
00090BF8 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
00090BFC                            Level_SYZ2:	incbin	"levels\syz2.bin"
00090D00                            		even
00090D00 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00090D04                            Level_SYZ3:	incbin	"levels\syz3.bin"
00090E5E 00                         		even
00090E5E 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
00090E62 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
00090E66                            
00090E66                            Level_SBZ1:	incbin	"levels\sbz1.bin"
00090F88                            		even
00090F88                            Level_SBZ1bg:	incbin	"levels\sbz1bg.bin"
00090FC6                            		even
00090FC6                            Level_SBZ2:	incbin	"levels\sbz2.bin"
00091108                            		even
00091108                            Level_SBZ2bg:	incbin	"levels\sbz2bg.bin"
00091272                            		even
00091272 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00091276 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0009127A                            Level_End:	incbin	"levels\ending.bin"
000912AA 00                         		even
000912AA 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
000912AE                            
000912AE                            
000912AE                            Art_BigRing:	incbin	"artunc\Giant Ring.bin"
00091EEE                            		even
00091EEE                            
00091F00                            
00091F00                            ; ---------------------------------------------------------------------------
00091F00                            ; Sprite locations index
00091F00                            ; ---------------------------------------------------------------------------
00091F00                            ObjPos_Index:
00091F00                            		; GHZ
00091F00 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091F04 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091F08 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091F0C 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091F10                            		; LZ
00091F10 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091F14 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091F18 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091F1C 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091F20                            		; MZ
00091F20 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091F24 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091F28 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091F2C 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091F30                            		; SLZ
00091F30 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091F34 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091F38 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091F3C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091F40                            		; SYZ
00091F40 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091F44 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091F48 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091F4C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091F50                            		; SBZ
00091F50 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091F54 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091F58 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091F5C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091F60                            		; Ending
00091F60 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091F64 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091F68 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091F6C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091F70                            		; --- Put extra object data here. ---
00091F70                            ObjPosLZPlatform_Index:
00091F70 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00091F74 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00091F78 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
00091F7C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00091F80                            ObjPosSBZPlatform_Index:
00091F80 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00091F84 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00091F88 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
00091F8C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00091F90 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00091F96                            ObjPos_GHZ1:	incbin	"objpos\ghz1.bin"
0009263E                            		even
0009263E                            ObjPos_GHZ2:	incbin	"objpos\ghz2.bin"
00092C5C                            		even
00092C5C                            		incbin	"objpos\ghz3 (JP1).bin"
0009326E                            		even
0009326E                            		incbin	"objpos\lz1 (JP1).bin"
000932A4                            		even
000932A4                            ObjPos_LZ2:	incbin	"objpos\lz2.bin"
000935E6                            		even
000935E6                            		incbin	"objpos\lz3 (JP1).bin"
00093BAA                            		even
00093BAA                            ObjPos_SBZ3:	incbin	"objpos\sbz3.bin"
00094114                            		even
00094114                            ObjPos_LZ1pf1:	incbin	"objpos\lz1pf1.bin"
00094146                            		even
00094146                            ObjPos_LZ1pf2:	incbin	"objpos\lz1pf2.bin"
00094178                            		even
00094178                            ObjPos_LZ2pf1:	incbin	"objpos\lz2pf1.bin"
000941AA                            		even
000941AA                            ObjPos_LZ2pf2:	incbin	"objpos\lz2pf2.bin"
000941DC                            		even
000941DC                            ObjPos_LZ3pf1:	incbin	"objpos\lz3pf1.bin"
00094226                            		even
00094226                            ObjPos_LZ3pf2:	incbin	"objpos\lz3pf2.bin"
00094264                            		even
00094264                            		incbin	"objpos\mz1 (JP1).bin"
0009485E                            		even
0009485E                            ObjPos_MZ2:	incbin	"objpos\mz2.bin"
00094E88                            		even
00094E88                            ObjPos_MZ3:	incbin	"objpos\mz3.bin"
00095176                            		even
00095176                            ObjPos_SLZ1:	incbin	"objpos\slz1.bin"
000956AA                            		even
000956AA                            ObjPos_SLZ2:	incbin	"objpos\slz2.bin"
00095B18                            		even
00095B18                            ObjPos_SLZ3:	incbin	"objpos\slz3.bin"
000960FA                            		even
000960FA                            ObjPos_SYZ1:	incbin	"objpos\syz1.bin"
00096346                            		even
00096346                            ObjPos_SYZ2:	incbin	"objpos\syz2.bin"
000965A4                            		even
000965A4                            		incbin	"objpos\syz3 (JP1).bin"
000965D4                            		even
000965D4                            		incbin	"objpos\sbz1 (JP1).bin"
0009661C                            		even
0009661C                            ObjPos_SBZ2:	incbin	"objpos\sbz2.bin"
00096646                            		even
00096646                            ObjPos_FZ:	incbin	"objpos\fz.bin"
00096682                            		even
00096682                            ObjPos_SBZ1pf1:	incbin	"objpos\sbz1pf1.bin"
000966B4                            		even
000966B4                            ObjPos_SBZ1pf2:	incbin	"objpos\sbz1pf2.bin"
000966E6                            		even
000966E6                            ObjPos_SBZ1pf3:	incbin	"objpos\sbz1pf3.bin"
00096718                            		even
00096718                            ObjPos_SBZ1pf4:	incbin	"objpos\sbz1pf4.bin"
0009674A                            		even
0009674A                            ObjPos_SBZ1pf5:	incbin	"objpos\sbz1pf5.bin"
0009677C                            		even
0009677C                            ObjPos_SBZ1pf6:	incbin	"objpos\sbz1pf6.bin"
000967B4                            		even
000967B4                            ObjPos_End:	incbin	"objpos\ending.bin"
00096910                            		even
00096910 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00096916                            
00096916                            		dcb.b $63C,$FF
00096F52                            		;dcb.b ($10000-(*%$10000))-(EndOfRom-SoundDriver),$FF
00096F52                            
00096F52                            SoundDriver:	include "s1.sounddriver.asm"
00096F52                            ; ---------------------------------------------------------------------------
00096F52                            ; Modified (early?) SMPS 68k Type 1b
00096F52                            ; ---------------------------------------------------------------------------
00096F52                            ; Go_SoundTypes:
00096F52 0000 0000                  Go_SoundPriorities:	dc.l SoundPriorities
00096F56                            ; Go_SoundD0:
00096F56 0000 0000                  Go_SpecSoundIndex:	dc.l SpecSoundIndex
00096F5A 0000 0000                  Go_MusicIndex:		dc.l MusicIndex
00096F5E 0000 0000                  Go_SoundIndex:		dc.l SoundIndex
00096F62                            ; off_719A0:
00096F62 0000 0000                  Go_SpeedUpIndex:	dc.l SpeedUpIndex
00096F66 0000 0000                  Go_PSGIndex:		dc.l PSG_Index
00096F6A                            ; ---------------------------------------------------------------------------
00096F6A                            ; PSG instruments used in music
00096F6A                            ; ---------------------------------------------------------------------------
00096F6A                            PSG_Index:
00096F6A 0000 0000 0000 0000 0000+  		dc.l PSG1, PSG2, PSG3
00096F76 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00096F82 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00096F8E                            PSG1:		incbin	"sound/psg/psg1.bin"
00096FA5                            PSG2:		incbin	"sound/psg/psg2.bin"
00096FAC                            PSG3:		incbin	"sound/psg/psg3.bin"
00096FBD                            PSG4:		incbin	"sound/psg/psg4.bin"
00096FC8                            PSG6:		incbin	"sound/psg/psg6.bin"
00096FD7                            PSG5:		incbin	"sound/psg/psg5.bin"
00097001                            PSG7:		incbin	"sound/psg/psg7.bin"
0009701D                            PSG8:		incbin	"sound/psg/psg8.bin"
00097045                            PSG9:		incbin	"sound/psg/psg9.bin"
00097056                            ; ---------------------------------------------------------------------------
00097056                            ; New tempos for songs during speed shoes
00097056                            ; ---------------------------------------------------------------------------
00097056                            ; DANGER! several songs will use the first few bytes of MusicIndex as their main
00097056                            ; tempos while speed shoes are active. If you don't want that, you should add
00097056                            ; their "correct" sped-up main tempos to the list.
00097056                            ; byte_71A94:
00097056                            SpeedUpIndex:
00097056 07                         		dc.b 7		; GHZ
00097057 72                         		dc.b $72	; LZ
00097058 73                         		dc.b $73	; MZ
00097059 26                         		dc.b $26	; SLZ
0009705A 15                         		dc.b $15	; SYZ
0009705B 08                         		dc.b 8		; SBZ
0009705C FF                         		dc.b $FF	; Invincibility
0009705D 05                         		dc.b 5		; Extra Life
0009705E                            		;dc.b ?		; Special Stage
0009705E                            		;dc.b ?		; Title Screen
0009705E                            		;dc.b ?		; Ending
0009705E                            		;dc.b ?		; Boss
0009705E                            		;dc.b ?		; FZ
0009705E                            		;dc.b ?		; Sonic Got Through
0009705E                            		;dc.b ?		; Game Over
0009705E                            		;dc.b ?		; Continue Screen
0009705E                            		;dc.b ?		; Credits
0009705E                            		;dc.b ?		; Drowning
0009705E                            		;dc.b ?		; Get Emerald
0009705E                            
0009705E                            ; ---------------------------------------------------------------------------
0009705E                            ; Music	Pointers
0009705E                            ; ---------------------------------------------------------------------------
0009705E                            MusicIndex:
0009705E 0000 0000                  ptr_mus81:	dc.l Music81
00097062 0000 0000                  ptr_mus82:	dc.l Music82
00097066 0000 0000                  ptr_mus83:	dc.l Music83
0009706A 0000 0000                  ptr_mus84:	dc.l Music84
0009706E 0000 0000                  ptr_mus85:	dc.l Music85
00097072 0000 0000                  ptr_mus86:	dc.l Music86
00097076 0000 0000                  ptr_mus87:	dc.l Music87
0009707A 0000 0000                  ptr_mus88:	dc.l Music88
0009707E 0000 0000                  ptr_mus89:	dc.l Music89
00097082 0000 0000                  ptr_mus8A:	dc.l Music8A
00097086 0000 0000                  ptr_mus8B:	dc.l Music8B
0009708A 0000 0000                  ptr_mus8C:	dc.l Music8C
0009708E 0000 0000                  ptr_mus8D:	dc.l Music8D
00097092 0000 0000                  ptr_mus8E:	dc.l Music8E
00097096 0000 0000                  ptr_mus8F:	dc.l Music8F
0009709A 0000 0000                  ptr_mus90:	dc.l Music90
0009709E 0000 0000                  ptr_mus91:	dc.l Music91
000970A2 0000 0000                  ptr_mus92:	dc.l Music92
000970A6 0000 0000                  ptr_mus93:	dc.l Music93
000970AA 0000 0000                  ptr_mus94:	dc.l Music94
000970AE 0000 0000                  ptr_mus95:	dc.l Music95
000970B2 0000 0000                  ptr_mus96:	dc.l Music96
000970B6 0000 0000                  ptr_mus97:	dc.l Music97
000970BA 0000 0000                  ptr_mus98:	dc.l Music98
000970BE 0000 0000                  ptr_mus99:	dc.l Music99
000970C2 0000 0000                  ptr_mus9A:	dc.l Music9A
000970C6 0000 0000                  ptr_mus9B:	dc.l Music9B
000970CA 0000 0000                  ptr_mus9C:	dc.l Music9C
000970CE                            ptr_musend
000970CE                            ; ---------------------------------------------------------------------------
000970CE                            ; Priority of sound. New music or SFX must have a priority higher than or equal
000970CE                            ; to what is stored in v_sndprio or it won't play. If bit 7 of new priority is
000970CE                            ; set ($80 and up), the new music or SFX will not set its priority -- meaning
000970CE                            ; any music or SFX can override it (as long as it can override whatever was
000970CE                            ; playing before). Usually, SFX will only override SFX, special SFX ($D0-$DF)
000970CE                            ; will only override special SFX and music will only override music.
000970CE                            ; ---------------------------------------------------------------------------
000970CE                            ; SoundTypes:
000970CE                            SoundPriorities:
000970CE 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $81
000970DD 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
000970ED 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
000970FD 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
0009710D 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
0009711D 8080 8080 8080 8080 8080+  		dc.b $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80	; $D0
0009712D 9090 9090 90               		dc.b $90,$90,$90,$90,$90                                            	; $E0
00097132                            
00097132                            ; ---------------------------------------------------------------------------
00097132                            ; Subroutine to update music more than once per frame
00097132                            ; (Called by horizontal & vert. interrupts)
00097132                            ; ---------------------------------------------------------------------------
00097132                            
00097132                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097132                            
00097132                            ; sub_71B4C:
00097132                            UpdateMusic:
00097132 33FC 0100 00A1 1100        		stopZ80
0009713A 4E71                       		nop	
0009713C 4E71                       		nop	
0009713E 4E71                       		nop	
00097140                            ; loc_71B5A:
00097140                            @updateloop:
00097140 0839 0000 00A1 1100        		btst	#0,(z80_bus_request).l		; Is the z80 busy?
00097148 66F6                       		bne.s	@updateloop			; If so, wait
0009714A                            
0009714A 0839 0007 00A0 1FFD        		btst	#7,(z80_dac_status).l		; Is DAC accepting new samples?
00097152 6700                       		beq.s	@driverinput			; Branch if yes
00097154 33FC 0000 00A1 1100        		startZ80
0009715C 4E71                       		nop	
0009715E 4E71                       		nop	
00097160 4E71                       		nop	
00097162 4E71                       		nop	
00097164 4E71                       		nop	
00097166 60CA                       		bra.s	UpdateMusic
00097168                            ; ===========================================================================
00097168                            ; loc_71B82:
00097168                            @driverinput:
00097168 4DF9 00FF F000             		lea	(v_snddriver_ram&$FFFFFF).l,a6
0009716E 422E 000E                  		clr.b	f_voice_selector(a6)
00097172 4A2E 0003                  		tst.b	f_pausemusic(a6)		; is music paused?
00097176 6600 0000                  		bne.w	PauseMusic			; if yes, branch
0009717A 532E 0001                  		subq.b	#1,v_main_tempo_timeout(a6)	; Has main tempo timer expired?
0009717E 6600                       		bne.s	@skipdelay
00097180 4EBA 0000                  		jsr	TempoWait(pc)
00097184                            ; loc_71B9E:
00097184                            @skipdelay:
00097184 102E 0004                  		move.b	v_fadeout_counter(a6),d0
00097188 6700                       		beq.s	@skipfadeout
0009718A 4EBA 0000                  		jsr	DoFadeOut(pc)
0009718E                            ; loc_71BA8:
0009718E                            @skipfadeout:
0009718E 4A2E 0024                  		tst.b	f_fadein_flag(a6)
00097192 6700                       		beq.s	@skipfadein
00097194 4EBA 0000                  		jsr	DoFadeIn(pc)
00097198                            ; loc_71BB2:
00097198                            @skipfadein:
00097198                            		; DANGER! The following line only checks v_soundqueue0 and v_soundqueue1, breaking v_soundqueue2.
00097198 4A6E 000A                  		tst.w	v_soundqueue0(a6)	; is a music or sound queued for played?
0009719C 6700                       		beq.s	@nosndinput		; if not, branch
0009719E 4EBA 0000                  		jsr	CycleSoundQueue(pc)
000971A2                            ; loc_71BBC:
000971A2                            @nosndinput:
000971A2 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; is song queue set for silence (empty)?
000971A8 6700                       		beq.s	@nonewsound		; If yes, branch
000971AA 4EBA 0000                  		jsr	PlaySoundID(pc)
000971AE                            ; loc_71BC8:
000971AE                            @nonewsound:
000971AE 4A38 C901                  		tst.b	($FFFFC901).w
000971B2 6700                       		beq.s	@cont
000971B4 5338 C901                  		subq.b	#1,($FFFFC901).w
000971B8                            		
000971B8                            @cont:
000971B8 4BEE 0040                  		lea	v_music_dac_track(a6),a5
000971BC 4A15                       		tst.b	(a5)			; Is DAC track playing? (TrackPlaybackControl)
000971BE 6A00                       		bpl.s	@dacdone		; Branch if not
000971C0 4EBA 0000                  		jsr	DACUpdateTrack(pc)
000971C4                            ; loc_71BD4:
000971C4                            @dacdone:
000971C4 422E 0008                  		clr.b	f_updating_dac(a6)
000971C8 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
000971CA                            ; loc_71BDA:
000971CA                            @bgmfmloop:
000971CA DAFC 0030                  		adda.w	#TrackSz,a5
000971CE 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000971D0 6A00                       		bpl.s	@bgmfmnext		; Branch if not
000971D2 4EBA 0000                  		jsr	FMUpdateTrack(pc)
000971D6                            ; loc_71BE6:
000971D6                            @bgmfmnext:
000971D6 51CF FFF2                  		dbf	d7,@bgmfmloop
000971DA                            
000971DA 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks
000971DC                            ; loc_71BEC:
000971DC                            @bgmpsgloop:
000971DC DAFC 0030                  		adda.w	#TrackSz,a5
000971E0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000971E2 6A00                       		bpl.s	@bgmpsgnext		; Branch if not
000971E4 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
000971E8                            ; loc_71BF8:
000971E8                            @bgmpsgnext:
000971E8 51CF FFF2                  		dbf	d7,@bgmpsgloop
000971EC                            
000971EC 1D7C 0080 000E             		move.b	#$80,f_voice_selector(a6)			; Now at SFX tracks
000971F2 7E02                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d7	; 3 FM tracks (SFX)
000971F4                            ; loc_71C04:
000971F4                            @sfxfmloop:
000971F4 DAFC 0030                  		adda.w	#TrackSz,a5
000971F8 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000971FA 6A00                       		bpl.s	@sfxfmnext		; Branch if not
000971FC 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00097200                            ; loc_71C10:
00097200                            @sfxfmnext:
00097200 51CF FFF2                  		dbf	d7,@sfxfmloop
00097204                            
00097204 7E02                       		moveq	#((v_sfx_psg_tracks_end-v_sfx_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks (SFX)
00097206                            ; loc_71C16:
00097206                            @sfxpsgloop:
00097206 DAFC 0030                  		adda.w	#TrackSz,a5
0009720A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0009720C 6A00                       		bpl.s	@sfxpsgnext		; Branch of not
0009720E 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00097212                            ; loc_71C22:
00097212                            @sfxpsgnext:
00097212 51CF FFF2                  		dbf	d7,@sfxpsgloop
00097216                            		
00097216 1D7C 0040 000E             		move.b	#$40,f_voice_selector(a6) ; Now at special SFX tracks
0009721C DAFC 0030                  		adda.w	#TrackSz,a5
00097220 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097222 6A00                       		bpl.s	@specfmdone		; Branch if not
00097224 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00097228                            ; loc_71C38:
00097228                            @specfmdone:
00097228 DAFC 0030                  		adda.w	#TrackSz,a5
0009722C 4A15                       		tst.b	(a5)			; Is track playing (TrackPlaybackControl)
0009722E 6A00                       		bpl.s	DoStartZ80		; Branch if not
00097230 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00097234                            ; loc_71C44:
00097234                            DoStartZ80:
00097234 33FC 0000 00A1 1100        		startZ80
0009723C 0838 0006 FFF8             		btst #6,(v_megadrive).w ; is Megadrive PAL?
00097242 6700                       		beq.s @end ; if not, branch
00097244 0C38 0005 F015             		cmpi.b #$5,(v_palmuscounter).w ; 5th frame?
0009724A 6600                       		bne.s @end ; if not, branch
0009724C 11FC 0000 F015             		move.b #$0,(v_palmuscounter).w ; reset counter
00097252 6000 FEDE                  		bra.w UpdateMusic ; run sound driver again
00097256                            
00097256                            	@end:
00097256 5238 F015                  		addq.b #$1,(v_palmuscounter).w ; add 1 to frame count
0009725A 4E75                       		rts
0009725C                            ; End of function UpdateMusic
0009725C                            
0009725C                            
0009725C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009725C                            
0009725C                            ; sub_71C4E: UpdateDAC:
0009725C                            DACUpdateTrack:
0009725C 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Has DAC sample timeout expired?
00097260 6600                       		bne.s	@locret				; Return if not
00097262 1D7C 0080 0008             		move.b	#$80,f_updating_dac(a6)		; Set flag to indicate this is the DAC
00097268                            ;DACDoNext:
00097268 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; DAC track data pointer
0009726C                            ; loc_71C5E:
0009726C                            @sampleloop:
0009726C 7A00                       		moveq	#0,d5
0009726E 1A1C                       		move.b	(a4)+,d5	; Get next SMPS unit
00097270 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
00097274 6500                       		blo.s	@notcoord	; Branch if not
00097276 4EBA 0000                  		jsr	CoordFlag(pc)
0009727A 60F0                       		bra.s	@sampleloop
0009727C                            ; ===========================================================================
0009727C                            ; loc_71C6E:
0009727C                            @notcoord:
0009727C 4A05                       		tst.b	d5			; Is it a sample?
0009727E 6A00                       		bpl.s	@gotduration		; Branch if not (duration)
00097280 1B45 0010                  		move.b	d5,TrackSavedDAC(a5)	; Store new sample
00097284 1A1C                       		move.b	(a4)+,d5		; Get another byte
00097286 6A00                       		bpl.s	@gotduration		; Branch if it is a duration
00097288 534C                       		subq.w	#1,a4			; Put byte back
0009728A 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5) ; Use last duration
00097290 6000                       		bra.s	@gotsampleduration
00097292                            ; ===========================================================================
00097292                            ; loc_71C84:
00097292                            @gotduration:
00097292 4EBA 0000                  		jsr	SetDuration(pc)
00097296                            ; loc_71C88:
00097296                            @gotsampleduration:
00097296 2B4C 0004                  		move.l	a4,TrackDataPointer(a5) ; Save pointer
0009729A 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
0009729E 6600                       		bne.s	@locret			; Return if yes
000972A0 7000                       		moveq	#0,d0
000972A2 102D 0010                  		move.b	TrackSavedDAC(a5),d0	; Get sample
000972A6 0C00 0080                  		cmpi.b	#$80,d0			; Is it a rest?
000972AA 6700                       		beq.s	@locret			; Return if yes
000972AC 0800 0003                  		btst	#3,d0			; Is bit 3 set (samples between $88-$8F)?
000972B0 6600                       		bne.s	@timpani		; Various timpani
000972B2 13C0 00A0 1FFF             		move.b	d0,(z80_dac_sample).l
000972B8                            ; locret_71CAA:
000972B8                            @locret:
000972B8 4E75                       		rts	
000972BA                            ; ===========================================================================
000972BA                            ; loc_71CAC:
000972BA                            @timpani:
000972BA 0400 0088                  		subi.b	#$88,d0		; Convert into an index
000972BE 103B 0000                  		move.b	DAC_sample_rate(pc,d0.w),d0
000972C2                            		; Warning: this affects the raw pitch of sample $83, meaning it will
000972C2                            		; use this value from then on.
000972C2 13C0 00A0 00EA             		move.b	d0,(z80_dac3_pitch).l
000972C8 13FC 0083 00A0 1FFF        		move.b	#$83,(z80_dac_sample).l	; Use timpani
000972D0 4E75                       		rts	
000972D2                            ; End of function DACUpdateTrack
000972D2                            
000972D2                            ; ===========================================================================
000972D2                            ; Note: this only defines rates for samples $88-$8D, meaning $8E-$8F are invalid.
000972D2                            ; Also, $8C-$8D are so slow you may want to skip them.
000972D2                            ; byte_71CC4:
000972D2 171A 2122 FFFF             DAC_sample_rate: dc.b $17, $1A, $21, $22, $FF, $FF
000972D8                            
000972D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000972D8                            
000972D8                            ; sub_71CCA:
000972D8                            FMUpdateTrack:
000972D8 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5) ; Update duration timeout
000972DC 6600                       		bne.s	@notegoing		; Branch if it hasn't expired
000972DE 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
000972E2 4EBA 0000                  		jsr	FMDoNext(pc)
000972E6 4EBA 0000                  		jsr	FMPrepareNote(pc)
000972EA 6000 0000                  		bra.w	FMNoteOn
000972EE                            ; ===========================================================================
000972EE                            ; loc_71CE0:
000972EE                            @notegoing:
000972EE 4EBA 0000                  		jsr	NoteTimeoutUpdate(pc)
000972F2 4EBA 0000                  		jsr	DoModulation(pc)
000972F6 6000 0000                  		bra.w	FMUpdateFreq
000972FA                            ; End of function FMUpdateTrack
000972FA                            
000972FA                            
000972FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000972FA                            
000972FA                            ; sub_71CEC:
000972FA                            FMDoNext:
000972FA 286D 0004                  		movea.l	TrackDataPointer(a5),a4 ; Track data pointer
000972FE 0895 0001                  		bclr	#1,(a5)			; Clear 'track at rest' bit (TrackPlaybackControl)
00097302                            ; loc_71CF4:
00097302                            @noteloop:
00097302 7A00                       		moveq	#0,d5
00097304 1A1C                       		move.b	(a4)+,d5	; Get byte from track
00097306 0C05 00E0                  		cmpi.b	#$E0,d5		; Is this a coord. flag?
0009730A 6500                       		blo.s	@gotnote	; Branch if not
0009730C 4EBA 0000                  		jsr	CoordFlag(pc)
00097310 60F0                       		bra.s	@noteloop
00097312                            ; ===========================================================================
00097312                            ; loc_71D04:
00097312                            @gotnote:
00097312 4EBA 0000                  		jsr	FMNoteOff(pc)
00097316 4A05                       		tst.b	d5		; Is this a note?
00097318 6A00                       		bpl.s	@gotduration	; Branch if not
0009731A 4EBA 0000                  		jsr	FMSetFreq(pc)
0009731E 1A1C                       		move.b	(a4)+,d5	; Get another byte
00097320 6A00                       		bpl.s	@gotduration	; Branch if it is a duration
00097322 534C                       		subq.w	#1,a4		; Otherwise, put it back
00097324 6000 0000                  		bra.w	FinishTrackUpdate
00097328                            ; ===========================================================================
00097328                            ; loc_71D1A:
00097328                            @gotduration:
00097328 4EBA 0000                  		jsr	SetDuration(pc)
0009732C 6000 0000                  		bra.w	FinishTrackUpdate
00097330                            ; End of function FMDoNext
00097330                            
00097330                            
00097330                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097330                            
00097330                            ; sub_71D22:
00097330                            FMSetFreq:
00097330 0405 0080                  		subi.b	#$80,d5			; Make it a zero-based index
00097334 6700                       		beq.s	TrackSetRest
00097336 DA2D 0008                  		add.b	TrackTranspose(a5),d5	; Add track transposition
0009733A 0245 007F                  		andi.w	#$7F,d5			; Clear high byte and sign bit
0009733E E34D                       		lsl.w	#1,d5
00097340 41FA 0000                  		lea	FMFrequencies(pc),a0
00097344 3C30 5000                  		move.w	(a0,d5.w),d6
00097348 3B46 0010                  		move.w	d6,TrackFreq(a5)	; Store new frequency
0009734C 4E75                       		rts	
0009734E                            ; End of function FMSetFreq
0009734E                            
0009734E                            
0009734E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009734E                            
0009734E                            ; sub_71D40:
0009734E                            SetDuration:
0009734E 1005                       		move.b	d5,d0
00097350 122D 0002                  		move.b	TrackTempoDivider(a5),d1	; Get dividing timing
00097354                            ; loc_71D46:
00097354                            @multloop:
00097354 5301                       		subq.b	#1,d1
00097356 6700                       		beq.s	@donemult
00097358 D005                       		add.b	d5,d0
0009735A 60F8                       		bra.s	@multloop
0009735C                            ; ===========================================================================
0009735C                            ; loc_71D4E:
0009735C                            @donemult:
0009735C 1B40 000F                  		move.b	d0,TrackSavedDuration(a5)	; Save duration
00097360 1B40 000E                  		move.b	d0,TrackDurationTimeout(a5)	; Save duration timeout
00097364 4E75                       		rts	
00097366                            ; End of function SetDuration
00097366                            
00097366                            ; ===========================================================================
00097366                            ; loc_71D58:
00097366                            TrackSetRest:
00097366 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
0009736A 426D 0010                  		clr.w	TrackFreq(a5)	; Clear frequency
0009736E                            
0009736E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009736E                            
0009736E                            ; sub_71D60:
0009736E                            FinishTrackUpdate:
0009736E 2B4C 0004                  		move.l	a4,TrackDataPointer(a5)	; Store new track position
00097372 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5)	; Reset note timeout
00097378 0815 0004                  		btst	#4,(a5)				; Is track set to not attack note? (TrackPlaybackControl)
0009737C 6600                       		bne.s	@locret				; If so, branch
0009737E 1B6D 0013 0012             		move.b	TrackNoteTimeoutMaster(a5),TrackNoteTimeout(a5)	; Reset note fill timeout
00097384 422D 000C                  		clr.b	TrackVolEnvIndex(a5)		; Reset PSG volume envelope index (even on FM tracks...)
00097388 0815 0003                  		btst	#3,(a5)				; Is modulation on? (TrackPlaybackControl)
0009738C 6700                       		beq.s	@locret				; If not, return (TrackPlaybackControl)
0009738E 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Modulation data pointer
00097392 1B58 0018                  		move.b	(a0)+,TrackModulationWait(a5)	; Reset wait
00097396 1B58 0019                  		move.b	(a0)+,TrackModulationSpeed(a5)	; Reset speed
0009739A 1B58 001A                  		move.b	(a0)+,TrackModulationDelta(a5)	; Reset delta
0009739E 1018                       		move.b	(a0)+,d0			; Get steps
000973A0 E208                       		lsr.b	#1,d0				; Halve them
000973A2 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; Then store
000973A6 426D 001C                  		clr.w	TrackModulationVal(a5)		; Reset frequency change
000973AA                            ; locret_71D9C:
000973AA                            @locret:
000973AA 4E75                       		rts	
000973AC                            ; End of function FinishTrackUpdate
000973AC                            
000973AC                            
000973AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000973AC                            
000973AC                            ; sub_71D9E: NoteFillUpdate
000973AC                            NoteTimeoutUpdate:
000973AC 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)	; Is note fill on?
000973B0 6700                       		beq.s	@locret
000973B2 532D 0012                  		subq.b	#1,TrackNoteTimeout(a5)	; Update note fill timeout
000973B6 6600                       		bne.s	@locret				; Return if it hasn't expired
000973B8 08D5 0001                  		bset	#1,(a5)				; Put track at rest (TrackPlaybackControl)
000973BC 4A2D 0001                  		tst.b	TrackVoiceControl(a5)		; Is this a psg track?
000973C0 6B00 0000                  		bmi.w	@psgnoteoff			; If yes, branch
000973C4 4EBA 0000                  		jsr	FMNoteOff(pc)
000973C8 584F                       		addq.w	#4,sp				; Do not return to caller
000973CA 4E75                       		rts	
000973CC                            ; ===========================================================================
000973CC                            ; loc_71DBE:
000973CC                            @psgnoteoff:
000973CC 4EBA 0000                  		jsr	PSGNoteOff(pc)
000973D0 584F                       		addq.w	#4,sp		; Do not return to caller
000973D2                            ; locret_71DC4:
000973D2                            @locret:
000973D2 4E75                       		rts	
000973D4                            ; End of function NoteTimeoutUpdate
000973D4                            
000973D4                            
000973D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000973D4                            
000973D4                            ; sub_71DC6:
000973D4                            DoModulation:
000973D4 584F                       		addq.w	#4,sp				; Do not return to caller (but see below)
000973D6 0815 0003                  		btst	#3,(a5)				; Is modulation active? (TrackPlaybackControl)
000973DA 6700                       		beq.s	@locret				; Return if not
000973DC 4A2D 0018                  		tst.b	TrackModulationWait(a5)	; Has modulation wait expired?
000973E0 6700                       		beq.s	@waitdone			; If yes, branch
000973E2 532D 0018                  		subq.b	#1,TrackModulationWait(a5)	; Update wait timeout
000973E6 4E75                       		rts	
000973E8                            ; ===========================================================================
000973E8                            ; loc_71DDA:
000973E8                            @waitdone:
000973E8 532D 0019                  		subq.b	#1,TrackModulationSpeed(a5)	; Update speed
000973EC 6700                       		beq.s	@updatemodulation		; If it expired, want to update modulation
000973EE 4E75                       		rts	
000973F0                            ; ===========================================================================
000973F0                            ; loc_71DE2:
000973F0                            @updatemodulation:
000973F0 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Get modulation data
000973F4 1B68 0001 0019             		move.b	1(a0),TrackModulationSpeed(a5)	; Restore modulation speed
000973FA 4A2D 001B                  		tst.b	TrackModulationSteps(a5)	; Check number of steps
000973FE 6600                       		bne.s	@calcfreq			; If nonzero, branch
00097400 1B68 0003 001B             		move.b	3(a0),TrackModulationSteps(a5)	; Restore from modulation data
00097406 442D 001A                  		neg.b	TrackModulationDelta(a5)	; Negate modulation delta
0009740A 4E75                       		rts	
0009740C                            ; ===========================================================================
0009740C                            ; loc_71DFE:
0009740C                            @calcfreq:
0009740C 532D 001B                  		subq.b	#1,TrackModulationSteps(a5)	; Update modulation steps
00097410 1C2D 001A                  		move.b	TrackModulationDelta(a5),d6	; Get modulation delta
00097414 4886                       		ext.w	d6
00097416 DC6D 001C                  		add.w	TrackModulationVal(a5),d6	; Add cumulative modulation change
0009741A 3B46 001C                  		move.w	d6,TrackModulationVal(a5)	; Store it
0009741E DC6D 0010                  		add.w	TrackFreq(a5),d6		; Add note frequency to it
00097422 594F                       		subq.w	#4,sp		; In this case, we want to return to caller after all
00097424                            ; locret_71E16:
00097424                            @locret:
00097424 4E75                       		rts	
00097426                            ; End of function DoModulation
00097426                            
00097426                            
00097426                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097426                            
00097426                            ; sub_71E18:
00097426                            FMPrepareNote:
00097426 0815 0001                  		btst	#1,(a5)			; Is track resting? (TrackPlaybackControl)
0009742A 6600                       		bne.s	locret_71E48		; Return if so
0009742C 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get current note frequency
00097430 6700                       		beq.s	FMSetRest		; Branch if zero
00097432                            ; loc_71E24:
00097432                            FMUpdateFreq:
00097432 102D 001E                  		move.b	TrackDetune(a5),d0 	; Get detune value
00097436 4880                       		ext.w	d0
00097438 DC40                       		add.w	d0,d6			; Add note frequency
0009743A 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
0009743E 6600                       		bne.s	locret_71E48		; Return if so
00097440 3206                       		move.w	d6,d1
00097442 E049                       		lsr.w	#8,d1
00097444 103C 00A4                  		move.b	#$A4,d0			; Register for upper 6 bits of frequency
00097448 4EBA 0000                  		jsr	WriteFMIorII(pc)
0009744C 1206                       		move.b	d6,d1
0009744E 103C 00A0                  		move.b	#$A0,d0			; Register for lower 8 bits of frequency
00097452 4EBA 0000                  		jsr	WriteFMIorII(pc)	; (It would be better if this were a jmp)
00097456                            ; locret_71E48:
00097456                            locret_71E48:
00097456 4E75                       		rts	
00097458                            ; ===========================================================================
00097458                            ; loc_71E4A:
00097458                            FMSetRest:
00097458 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
0009745C 4E75                       		rts	
0009745E                            ; End of function FMPrepareNote
0009745E                            
0009745E                            ; ===========================================================================
0009745E                            ; loc_71E50:
0009745E                            PauseMusic:
0009745E 6B00                       		bmi.s	@unpausemusic		; Branch if music is being unpaused
00097460 0C2E 0002 0003             		cmpi.b	#2,f_pausemusic(a6)
00097466 6700 0000                  		beq.w	@unpausedallfm
0009746A 1D7C 0002 0003             		move.b	#2,f_pausemusic(a6)
00097470 7602                       		moveq	#2,d3
00097472 103C 00B4                  		move.b	#$B4,d0		; Command to set AMS/FMS/panning
00097476 7200                       		moveq	#0,d1		; No panning, AMS or FMS
00097478                            ; loc_71E6A:
00097478                            @killpanloop:
00097478 4EBA 0000                  		jsr	WriteFMI(pc)
0009747C 4EBA 0000                  		jsr	WriteFMII(pc)
00097480 5200                       		addq.b	#1,d0
00097482 51CB FFF4                  		dbf	d3,@killpanloop
00097486                            
00097486 7602                       		moveq	#2,d3
00097488 7028                       		moveq	#$28,d0		; Key on/off register
0009748A                            ; loc_71E7C:
0009748A                            @noteoffloop:
0009748A 1203                       		move.b	d3,d1		; FM1, FM2, FM3
0009748C 4EBA 0000                  		jsr	WriteFMI(pc)
00097490 5801                       		addq.b	#4,d1		; FM4, FM5, FM6
00097492 4EBA 0000                  		jsr	WriteFMI(pc)
00097496 51CB FFF2                  		dbf	d3,@noteoffloop
0009749A                            
0009749A 4EBA 0000                  		jsr	PSGSilenceAll(pc)
0009749E 6000 FD94                  		bra.w	DoStartZ80
000974A2                            ; ===========================================================================
000974A2                            ; loc_71E94:
000974A2                            @unpausemusic:
000974A2 422E 0003                  		clr.b	f_pausemusic(a6)
000974A6 7630                       		moveq	#TrackSz,d3
000974A8 4BEE 0040                  		lea	v_music_fmdac_tracks(a6),a5
000974AC 7806                       		moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d4	; 6 FM + 1 DAC tracks
000974AE                            ; loc_71EA0:
000974AE                            @bgmfmloop:
000974AE 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
000974B2 6700                       		beq.s	@bgmfmnext		; Branch if not
000974B4 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000974B8 6600                       		bne.s	@bgmfmnext		; Branch if yes
000974BA 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
000974BE 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
000974C2 4EBA 0000                  		jsr	WriteFMIorII(pc)
000974C6                            ; loc_71EB8:
000974C6                            @bgmfmnext:
000974C6 DAC3                       		adda.w	d3,a5
000974C8 51CC FFE4                  		dbf	d4,@bgmfmloop
000974CC                            
000974CC 4BEE 0220                  		lea	v_sfx_fm_tracks(a6),a5
000974D0 7802                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d4	; 3 FM tracks (SFX)
000974D2                            ; loc_71EC4:
000974D2                            @sfxfmloop:
000974D2 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
000974D6 6700                       		beq.s	@sfxfmnext		; Branch if not
000974D8 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000974DC 6600                       		bne.s	@sfxfmnext		; Branch if yes
000974DE 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
000974E2 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
000974E6 4EBA 0000                  		jsr	WriteFMIorII(pc)
000974EA                            ; loc_71EDC:
000974EA                            @sfxfmnext:
000974EA DAC3                       		adda.w	d3,a5
000974EC 51CC FFE4                  		dbf	d4,@sfxfmloop
000974F0                            
000974F0 4BEE 0340                  		lea	v_spcsfx_track_ram(a6),a5
000974F4 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
000974F8 6700                       		beq.s	@unpausedallfm		; Branch if not
000974FA 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000974FE 6600                       		bne.s	@unpausedallfm		; Branch if yes
00097500 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00097504 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00097508 4EBA 0000                  		jsr	WriteFMIorII(pc)
0009750C                            ; loc_71EFE:
0009750C                            @unpausedallfm:
0009750C 6000 FD26                  		bra.w	DoStartZ80
00097510                            
00097510                            ; ---------------------------------------------------------------------------
00097510                            ; Subroutine to	play a sound or	music track
00097510                            ; ---------------------------------------------------------------------------
00097510                            
00097510                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097510                            
00097510                            ; Sound_Play:
00097510                            CycleSoundQueue:
00097510 2079 0009 6F52             		movea.l	(Go_SoundPriorities).l,a0
00097516 43EE 000A                  		lea	v_soundqueue0(a6),a1	; load music track number
0009751A 1616                       		move.b	v_sndprio(a6),d3	; Get priority of currently playing SFX
0009751C 7802                       		moveq	#2,d4			; Number of queues-1 (v_soundqueue0, v_soundqueue1, v_soundqueue2)
0009751E                            ; loc_71F12:
0009751E                            @inputloop:
0009751E 1011                       		move.b	(a1),d0			; move track number to d0
00097520 1200                       		move.b	d0,d1
00097522 4219                       		clr.b	(a1)+			; Clear entry
00097524 0400 0081                  		subi.b	#bgm__First,d0		; Make it into 0-based index
00097528 6500                       		bcs.s	@nextinput		; If negative (i.e., it was $80 or lower), branch
0009752A 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; Is v_sound_id a $80 (silence/empty)?
00097530 6700                       		beq.s	@havesound		; If yes, branch
00097532 1D41 000A                  		move.b	d1,v_soundqueue0(a6)	; Put sound into v_soundqueue0
00097536 6000                       		bra.s	@nextinput
00097538                            ; ===========================================================================
00097538                            ; loc_71F2C:
00097538                            @havesound:
00097538 0240 007F                  		andi.w	#$7F,d0			; Clear high byte and sign bit
0009753C 1430 0000                  		move.b	(a0,d0.w),d2		; Get sound type
00097540 B403                       		cmp.b	d3,d2			; Is it a lower priority sound?
00097542 6500                       		blo.s	@nextinput		; Branch if yes
00097544 1602                       		move.b	d2,d3			; Store new priority
00097546 1D41 0009                  		move.b	d1,v_sound_id(a6)	; Queue sound for play
0009754A                            ; loc_71F3E:
0009754A                            @nextinput:
0009754A 51CC FFD2                  		dbf	d4,@inputloop
0009754E                            
0009754E 4A03                       		tst.b	d3			; We don't want to change sound priority if it is negative
00097550 6B00                       		bmi.s	@locret
00097552 1C83                       		move.b	d3,v_sndprio(a6)	; Set new sound priority
00097554                            ; locret_71F4A:
00097554                            @locret:
00097554 4E75                       		rts	
00097556                            ; End of function CycleSoundQueue
00097556                            
00097556                            
00097556                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097556                            
00097556                            ; Sound_ChkValue:
00097556                            PlaySoundID:
00097556 7E00                       		moveq	#0,d7
00097558 1E2E 0009                  		move.b	v_sound_id(a6),d7
0009755C 6700 0000                  		beq.w	StopAllSound
00097560 6A00                       		bpl.s	@locret			; If >= 0, return (not a valid sound, bgm or command)
00097562 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; reset	music flag
00097568                            		; DANGER! Music ends at $93, yet this checks until $9F; attempting to
00097568                            		; play sounds $94-$9F will cause a crash! Remove the '+$C' to fix this.
00097568                            		; See LevSel_NoCheat for more.
00097568 0C07 0000                  		cmpi.b	#bgm__Last,d7	; Is this music ($81-$9F)?
0009756C 6300 0000                  		bls.w	Sound_PlayBGM		; Branch if yes
00097570 0C07 00A0                  		cmpi.b	#sfx__First,d7		; Is this after music but before sfx? (redundant check)
00097574 6500 0000                  		blo.w	@locret			; Return if yes
00097578 0C07 0000                  		cmpi.b	#sfx__Last,d7		; Is this sfx ($A0-$CF)?
0009757C 6300 0000                  		bls.w	Sound_PlaySFX		; Branch if yes
00097580 0C07 00D0                  		cmpi.b	#spec__First,d7		; Is this after sfx but before special sfx? (redundant check)
00097584 6500 0000                  		blo.w	@locret			; Return if yes
00097588 0C07 00D1                  		cmpi.b	#$D1,d7
0009758C 6500 0000                  		bcs.w	Sound_PlaySpecial
00097590 0C07 00DF                  		cmp.b	#$DF,d7
00097594 6F00 0000                  		ble.w	Sound_D1toDF
00097598 0C07 00E0                  		cmpi.b	#flg__First,d7		; Is this after special sfx but before $E0?
0009759C 6500 0000                  		blo.w	@locret			; Return if yes
000975A0 0C07 0000                  		cmpi.b	#flg__Last,d7		; Is this $E0-$E4?
000975A4 6300                       		bls.s	Sound_E0toE4		; Branch if yes
000975A6                            ; locret_71F8C:
000975A6                            @locret:
000975A6 4E75                       		rts	
000975A8                            ; ===========================================================================
000975A8                            
000975A8                            Sound_E0toE4:
000975A8 0407 00E0                  		subi.b	#flg__First,d7
000975AC E54F                       		lsl.w	#2,d7
000975AE 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000975B2                            ; ===========================================================================
000975B2                            
000975B2                            Sound_ExIndex:
000975B2 6000 0000                  ptr_flgE0:	bra.w	FadeOutMusic		; $E0
000975B6 6000 0000                  ptr_flgE1:	bra.w	PlaySegaSound		; $E1
000975BA 6000 0000                  ptr_flgE2:	bra.w	SpeedUpMusic		; $E2
000975BE 6000 0000                  ptr_flgE3:	bra.w	SlowDownMusic		; $E3
000975C2 6000 0000                  ptr_flgE4:	bra.w	StopAllSound		; $E4
000975C6                            ptr_flgend
000975C6                            ; ===========================================================================
000975C6                            ; ---------------------------------------------------------------------------
000975C6                            ; Play "Say-gaa" PCM sound
000975C6                            ; ---------------------------------------------------------------------------
000975C6                            ; Sound_E1: PlaySega:
000975C6                            PlaySegaSound:
000975C6 13FC 0088 00A0 1FFF        		move.b	#$88,(z80_dac_sample).l	; Queue Sega PCM
000975CE 33FC 0000 00A1 1100        		startZ80
000975D6 323C 0011                  		move.w	#$11,d1
000975DA                            ; loc_71FC0:
000975DA                            @busyloop_outer:
000975DA 303C FFFF                  		move.w	#-1,d0
000975DE                            ; loc_71FC4:
000975DE                            @busyloop:
000975DE 4E71                       		nop	
000975E0 51C8 FFFC                  		dbf	d0,@busyloop
000975E4                            
000975E4 51C9 FFF4                  		dbf	d1,@busyloop_outer
000975E8                            
000975E8 584F                       		addq.w	#4,sp	; Tamper return value so we don't return to caller
000975EA 4E75                       		rts	
000975EC                            ; ===========================================================================
000975EC                            ; ---------------------------------------------------------------------------
000975EC                            ; Play music track $81-$9F
000975EC                            ; ---------------------------------------------------------------------------
000975EC                            ; Sound_81to9F:
000975EC                            Sound_PlayBGM:
000975EC 0C07 0000                  		cmpi.b	#bgm_ExtraLife,d7	; is the "extra life" music to be played?
000975F0 6600                       		bne.s	@bgmnot1up		; if not, branch
000975F2 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is a 1-up music playing?
000975F6 6600 0000                  		bne.w	@locdblret		; if yes, branch
000975FA 4BEE 0040                  		lea	v_music_track_ram(a6),a5
000975FE 7009                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d0	; 1 DAC + 6 FM + 3 PSG tracks
00097600                            ; loc_71FE6:
00097600                            @clearsfxloop:
00097600 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00097604 DAFC 0030                  		adda.w	#TrackSz,a5
00097608 51C8 FFF6                  		dbf	d0,@clearsfxloop
0009760C                            
0009760C 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
00097610 7005                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d0	; 3 FM + 3 PSG tracks (SFX)
00097612                            ; loc_71FF8:
00097612                            @cleartrackplayloop:
00097612 0895 0007                  		bclr	#7,(a5)			; Clear 'track is playing' bit (TrackPlaybackControl)
00097616 DAFC 0030                  		adda.w	#TrackSz,a5
0009761A 51C8 FFF6                  		dbf	d0,@cleartrackplayloop
0009761E                            
0009761E 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00097620 204E                       		movea.l	a6,a0
00097622 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
00097626 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Backup $220 bytes: all variables and music track data
0009762A                            ; loc_72012:
0009762A                            @backupramloop:
0009762A 22D8                       		move.l	(a0)+,(a1)+
0009762C 51C8 FFFC                  		dbf	d0,@backupramloop
00097630                            
00097630 1D7C 0080 0027             		move.b	#$80,f_1up_playing(a6)
00097636 4216                       		clr.b	v_sndprio(a6)		; Clear priority again (?)
00097638 6000                       		bra.s	@bgm_loadMusic
0009763A                            ; ===========================================================================
0009763A                            ; loc_72024:
0009763A                            @bgmnot1up:
0009763A 422E 0027                  		clr.b	f_1up_playing(a6)
0009763E 422E 0026                  		clr.b	v_fadein_counter(a6)
00097642                            ; loc_7202C:
00097642                            @bgm_loadMusic:
00097642 4EBA 0000                  		jsr	InitMusicPlayback(pc)
00097646 2879 0009 6F62             		movea.l	(Go_SpeedUpIndex).l,a4
0009764C 0407 0081                  		subi.b	#bgm__First,d7
00097650 1D74 7000 0029             		move.b	(a4,d7.w),v_speeduptempo(a6)
00097656 2879 0009 6F5A             		movea.l	(Go_MusicIndex).l,a4
0009765C E54F                       		lsl.w	#2,d7
0009765E 2874 7000                  		movea.l	(a4,d7.w),a4		; a4 now points to (uncompressed) song data
00097662 7000                       		moveq	#0,d0
00097664 3014                       		move.w	(a4),d0			; load voice pointer
00097666 D08C                       		add.l	a4,d0			; It is a relative pointer
00097668 2D40 0018                  		move.l	d0,v_voice_ptr(a6)
0009766C 102C 0005                  		move.b	5(a4),d0		; load tempo
00097670 1D40 0028                  		move.b	d0,v_tempo_mod(a6)
00097674                            		;tst.b	f_speedup(a6)
00097674                            		;beq.s	@nospeedshoes
00097674                            		;move.b	v_speeduptempo(a6),d0
00097674                            ; loc_72068:
00097674                            ;@nospeedshoes:
00097674 1D40 0002                  		move.b	d0,v_main_tempo(a6)
00097678 1D40 0001                  		move.b	d0,v_main_tempo_timeout(a6)
0009767C 7200                       		moveq	#0,d1
0009767E 264C                       		movea.l	a4,a3
00097680 5C4C                       		addq.w	#6,a4			; Point past header
00097682 7E00                       		moveq	#0,d7
00097684 1E2B 0002                  		move.b	2(a3),d7		; load number of FM+DAC tracks
00097688 6700 0000                  		beq.w	@bgm_fmdone		; branch if zero
0009768C 5307                       		subq.b	#1,d7
0009768E 123C 00C0                  		move.b	#$C0,d1			; Default AMS+FMS+Panning
00097692 182B 0004                  		move.b	4(a3),d4		; load tempo dividing timing
00097696 7C30                       		moveq	#TrackSz,d6
00097698 1A3C 0001                  		move.b	#1,d5			; Note duration for first "note"
0009769C 43EE 0040                  		lea	v_music_fmdac_tracks(a6),a1
000976A0 45FA 0000                  		lea	FMDACInitBytes(pc),a2
000976A4                            ; loc_72098:
000976A4                            @bmg_fmloadloop:
000976A4 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
000976A8 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
000976AC 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
000976B0 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
000976B4 1341 000A                  		move.b	d1,TrackAMSFMSPan(a1)		; Set AMS/FMS/Panning
000976B8 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
000976BC 7000                       		moveq	#0,d0
000976BE 301C                       		move.w	(a4)+,d0			; load DAC/FM pointer
000976C0 D08B                       		add.l	a3,d0				; Relative pointer
000976C2 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
000976C6 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load FM channel modifier
000976CA D2C6                       		adda.w	d6,a1
000976CC 51CF FFD6                  		dbf	d7,@bmg_fmloadloop
000976D0                            		
000976D0 0C2B 0007 0002             		cmpi.b	#7,2(a3)	; Are 7 FM tracks defined?
000976D6 6600                       		bne.s	@silencefm6
000976D8 702B                       		moveq	#$2B,d0		; DAC enable/disable register
000976DA 7200                       		moveq	#0,d1		; Disable DAC
000976DC 4EBA 0000                  		jsr	WriteFMI(pc)
000976E0 6000 0000                  		bra.w	@bgm_fmdone
000976E4                            ; ===========================================================================
000976E4                            ; loc_720D8:
000976E4                            @silencefm6:
000976E4 7028                       		moveq	#$28,d0		; Key on/off register
000976E6 7206                       		moveq	#6,d1		; Note off on all operators of channel 6
000976E8 4EBA 0000                  		jsr	WriteFMI(pc)
000976EC 103C 0042                  		move.b	#$42,d0		; TL for operator 1 of FM6
000976F0 727F                       		moveq	#$7F,d1		; Total silence
000976F2 4EBA 0000                  		jsr	WriteFMII(pc)
000976F6 103C 004A                  		move.b	#$4A,d0		; TL for operator 3 of FM6
000976FA 727F                       		moveq	#$7F,d1		; Total silence
000976FC 4EBA 0000                  		jsr	WriteFMII(pc)
00097700 103C 0046                  		move.b	#$46,d0		; TL for operator 2 of FM6
00097704 727F                       		moveq	#$7F,d1		; Total silence
00097706 4EBA 0000                  		jsr	WriteFMII(pc)
0009770A 103C 004E                  		move.b	#$4E,d0		; TL for operator 4 of FM6
0009770E 727F                       		moveq	#$7F,d1		; Total silence
00097710 4EBA 0000                  		jsr	WriteFMII(pc)
00097714 103C 00B6                  		move.b	#$B6,d0		; AMS/FMS/panning of FM6
00097718 123C 00C0                  		move.b	#$C0,d1		; Stereo
0009771C 4EBA 0000                  		jsr	WriteFMII(pc)
00097720                            ; loc_72114:
00097720                            @bgm_fmdone:
00097720 7E00                       		moveq	#0,d7
00097722 1E2B 0003                  		move.b	3(a3),d7	; Load number of PSG tracks
00097726 6700                       		beq.s	@bgm_psgdone	; branch if zero
00097728 5307                       		subq.b	#1,d7
0009772A 43EE 0190                  		lea	v_music_psg_tracks(a6),a1
0009772E 45FA 0000                  		lea	PSGInitBytes(pc),a2
00097732                            ; loc_72126:
00097732                            @bgm_psgloadloop:
00097732 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00097736 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
0009773A 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
0009773E 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
00097742 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00097746 7000                       		moveq	#0,d0
00097748 301C                       		move.w	(a4)+,d0			; load PSG channel pointer
0009774A D08B                       		add.l	a3,d0				; Relative pointer
0009774C 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00097750 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load PSG modifier
00097754 101C                       		move.b	(a4)+,d0			; load redundant byte
00097756 135C 000B                  		move.b	(a4)+,TrackVoiceIndex(a1)	; Initial PSG tone
0009775A D2C6                       		adda.w	d6,a1
0009775C 51CF FFD4                  		dbf	d7,@bgm_psgloadloop
00097760                            ; loc_72154:
00097760                            @bgm_psgdone:
00097760 43EE 0220                  		lea	v_sfx_track_ram(a6),a1
00097764 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 6 SFX tracks
00097766                            ; loc_7215A:
00097766                            @sfxstoploop:
00097766 4A11                       		tst.b	(a1)		; Is SFX playing? (TrackPlaybackControl)
00097768 6A00 0000                  		bpl.w	@sfxnext	; Branch if not
0009776C 7000                       		moveq	#0,d0
0009776E 1029 0001                  		move.b	TrackVoiceControl(a1),d0 ; Get voice control bits
00097772 6B00                       		bmi.s	@sfxpsgchannel		; Branch if this is a PSG channel
00097774 5500                       		subq.b	#2,d0			; SFX can't have FM1 or FM2
00097776 E508                       		lsl.b	#2,d0			; Convert to index
00097778 6000                       		bra.s	@gotchannelindex
0009777A                            ; ===========================================================================
0009777A                            ; loc_7216E:
0009777A                            @sfxpsgchannel:
0009777A E608                       		lsr.b	#3,d0		; Convert to index
0009777C                            ; loc_72170:
0009777C                            @gotchannelindex:
0009777C 41FA 0000                  		lea	SFX_BGMChannelRAM(pc),a0
00097780 2070 0000                  		movea.l	(a0,d0.w),a0
00097784 08D0 0002                  		bset	#2,(a0)		; Set 'SFX is overriding' bit (TrackPlaybackControl)
00097788                            ; loc_7217C:
00097788                            @sfxnext:
00097788 D2C6                       		adda.w	d6,a1
0009778A 51CF FFDA                  		dbf	d7,@sfxstoploop
0009778E                            
0009778E 4A6E 0340                  		tst.w	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00097792 6A00                       		bpl.s	@checkspecialpsg				; Branch if not
00097794 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
0009779A                            ; loc_7218E:
0009779A                            @checkspecialpsg:
0009779A 4A6E 0370                  		tst.w	v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Is special SFX being played?
0009779E 6A00                       		bpl.s	@sendfmnoteoff					; Branch if not
000977A0 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000977A6                            ; loc_7219A:
000977A6                            @sendfmnoteoff:
000977A6 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
000977AA 7805                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d4	; 6 FM tracks
000977AC                            ; loc_721A0:
000977AC                            @fmnoteoffloop:
000977AC 4EBA 0000                  		jsr	FMNoteOff(pc)
000977B0 DAC6                       		adda.w	d6,a5
000977B2 51CC FFF8                  		dbf	d4,@fmnoteoffloop		; run all FM tracks
000977B6 7802                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d4 ; 3 PSG tracks
000977B8                            ; loc_721AC:
000977B8                            @psgnoteoffloop:
000977B8 4EBA 0000                  		jsr	PSGNoteOff(pc)
000977BC DAC6                       		adda.w	d6,a5
000977BE 51CC FFF8                  		dbf	d4,@psgnoteoffloop		; run all PSG tracks
000977C2                            ; loc_721B6:
000977C2                            @locdblret:
000977C2 584F                       		addq.w	#4,sp	; Tamper with return value to not return to caller
000977C4 4E75                       		rts	
000977C6                            ; ===========================================================================
000977C6                            ; byte_721BA:
000977C6 0600 0102 0405 06          FMDACInitBytes:	dc.b 6,	0, 1, 2, 4, 5, 6	; first byte is for DAC; then notice the 0, 1, 2 then 4, 5, 6; this is the gap between parts I and II for YM2612 port writes
000977CE 00                         		even
000977CE                            ; byte_721C2:
000977CE 80A0 C0                    PSGInitBytes:	dc.b $80, $A0, $C0	; Specifically, these configure writes to the PSG port for each channel
000977D2 00                         		even
000977D2                            ; ===========================================================================
000977D2                            ; ---------------------------------------------------------------------------
000977D2                            ; Play Spin Dash sound effect
000977D2                            ; ---------------------------------------------------------------------------
000977D2                            Sound_D1toDF:
000977D2 4A2E 0027                  		tst.b	$27(a6)
000977D6 6600 0000                  		bne.w	loc_722C6
000977DA 4A2E 0004                  		tst.b	4(a6)
000977DE 6600 0000                  		bne.w	loc_722C6
000977E2 4A2E 0024                  		tst.b	$24(a6)
000977E6 6600 0000                  		bne.w	loc_722C6
000977EA 4238 C900                  		clr.b	($FFFFC900).w
000977EE 0C07 00D5                  		cmp.b	#$D5,d7		; is this the Spin Dash sound?
000977F2 6600                       		bne.s	@cont3	; if not, branch
000977F4 3F00                       		move.w	d0,-(sp)
000977F6 1038 C902                  		move.b	($FFFFC902).w,d0	; store extra frequency
000977FA 4A38 C901                  		tst.b	($FFFFC901).w	; is the Spin Dash timer active?
000977FE 6600                       		bne.s	@cont1		; if it is, branch
00097800 103C 00FF                  		move.b	#-1,d0		; otherwise, reset frequency (becomes 0 on next line)
00097804                            		
00097804                            @cont1:
00097804 5200                       		addq.b	#1,d0
00097806 0C00 000C                  		cmp.b	#$C,d0		; has the limit been reached?
0009780A 6400                       		bcc.s	@cont2		; if it has, branch
0009780C 11C0 C902                  		move.b	d0,($FFFFC902).w	; otherwise, set new frequency
00097810                            		
00097810                            @cont2:
00097810 11FC 0001 C900             		move.b	#1,($FFFFC900).w	; set flag
00097816 11FC 003C C901             		move.b	#60,($FFFFC901).w	; set timer
0009781C 301F                       		move.w	(sp)+,d0
0009781E                            		
0009781E                            @cont3:	
0009781E 2079 0009 6F5E             		movea.l	(Go_SoundIndex).l,a0
00097824 0407 00A0                  		sub.b	#$A0,d7
00097828 6000                       		bra.s	SoundEffects_Common
0009782A                            ; ---------------------------------------------------------------------------
0009782A                            ; Play normal sound effect
0009782A                            ; ---------------------------------------------------------------------------
0009782A                            ; Sound_A0toCF:
0009782A                            Sound_PlaySFX:
0009782A 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
0009782E 6600 0000                  		bne.w	loc_722C6		; Exit is it is
00097832 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00097836 6600 0000                  		bne.w	loc_722C6		; Exit if it is
0009783A 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
0009783E 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00097842 4238 C900                  		clr.b	($FFFFC900).w
00097846 0C07 0000                  		cmpi.b	#sfx_Ring,d7		; is ring sound	effect played?
0009784A 6600                       		bne.s	Sound_notB5		; if not, branch
0009784C 4A2E 002B                  		tst.b	v_ring_speaker(a6)	; Is the ring sound playing on right speaker?
00097850 6600                       		bne.s	loc_721EE		; Branch if not
00097852 1E3C 0000                  		move.b	#sfx_RingLeft,d7	; play ring sound in left speaker
00097856                            
00097856                            loc_721EE:
00097856 086E 0000 002B             		bchg	#0,v_ring_speaker(a6)	; change speaker
0009785C                            
0009785C                            Sound_notB5:
0009785C 0C07 0000                  		cmpi.b	#sfx_Push,d7		; is "pushing" sound played?
00097860 6600                       		bne.s	Sound_notA7		; if not, branch
00097862 4A2E 002C                  		tst.b	f_push_playing(a6)	; Is pushing sound already playing?
00097866 6600 0000                  		bne.w	locret_722C4			; Return if not
0009786A 1D7C 0080 002C             		move.b	#$80,f_push_playing(a6)	; Mark it as playing
00097870                            		
00097870                            Sound_notA7:
00097870 2079 0009 6F5E             		movea.l	(Go_SoundIndex).l,a0
00097876 0407 00A0                  		subi.b	#sfx__First,d7		; Make it 0-based
0009787A                            
0009787A                            SoundEffects_Common:		
0009787A E54F                       		lsl.w	#2,d7			; Convert sfx ID into index
0009787C 2670 7000                  		movea.l	(a0,d7.w),a3		; SFX data pointer
00097880 224B                       		movea.l	a3,a1
00097882 7200                       		moveq	#0,d1
00097884 3219                       		move.w	(a1)+,d1		; Voice pointer
00097886 D28B                       		add.l	a3,d1			; Relative pointer
00097888 1A19                       		move.b	(a1)+,d5		; Dividing timing	
0009788A                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which SFXes whose
0009788A                            		; index entry is above $3F will cause a crash. This is actually the same way that
0009788A                            		; this bug is fixed in Ristar's driver.
0009788A 7E00                       		moveq	#0,d7	
0009788C 1E19                       		move.b	(a1)+,d7	; Number of tracks (FM + PSG)
0009788E 5307                       		subq.b	#1,d7
00097890 7C30                       		moveq	#TrackSz,d6
00097892                            
00097892                            loc_72228:
00097892 7600                       		moveq	#0,d3
00097894 1629 0001                  		move.b	1(a1),d3	; Channel assignment bits
00097898 1803                       		move.b	d3,d4
0009789A 6B00                       		bmi.s	loc_72244	; Branch if PSG
0009789C 5543                       		subq.w	#2,d3		; SFX can only have FM3, FM4 or FM5
0009789E E54B                       		lsl.w	#2,d3
000978A0 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
000978A4 2A75 3000                  		movea.l	(a5,d3.w),a5
000978A8 08D5 0002                  		bset	#2,(a5)		; Mark music track as being overridden (TrackPlaybackControl)
000978AC 6000                       		bra.s	loc_7226E
000978AE                            ; ===========================================================================
000978AE                            
000978AE                            loc_72244:
000978AE E64B                       		lsr.w	#3,d3
000978B0 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
000978B4 2A75 3000                  		movea.l	(a5,d3.w),a5
000978B8 08D5 0002                  		bset	#2,(a5)			; Mark music track as being overridden (TrackPlaybackControl)
000978BC 0C04 00C0                  		cmpi.b	#$C0,d4			; Is this PSG 3?
000978C0 6600                       		bne.s	loc_7226E	; Branch if not
000978C2 1004                       		move.b	d4,d0
000978C4 0000 001F                  		ori.b	#$1F,d0			; Command to silence PSG 3
000978C8 13C0 00C0 0011             		move.b	d0,(psg_input).l
000978CE 0840 0005                  		bchg	#5,d0			; Command to silence noise channel
000978D2 13C0 00C0 0011             		move.b	d0,(psg_input).l
000978D8                            
000978D8                            loc_7226E:
000978D8 4BFA 0000                  		lea	SFX_SFXChannelRAM(pc),a5
000978DC 2A75 3000                  		movea.l	(a5,d3.w),a5
000978E0 244D                       		movea.l	a5,a2
000978E2 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
000978E4                            
000978E4                            loc_72276:
000978E4 429A                       		clr.l	(a2)+
000978E6 51C8 FFFC                  		dbf	d0,loc_72276
000978EA                            
000978EA 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits (TrackPlaybackControl)
000978EC 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)	; Initial voice control bits
000978F0 7000                       		moveq	#0,d0
000978F2 3019                       		move.w	(a1)+,d0			; Track data pointer
000978F4 D08B                       		add.l	a3,d0				; Relative pointer
000978F6 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
000978FA 3B59 0008                  		move.w	(a1)+,8(a5)
000978FE 4A38 C900                  		tst.b	($FFFFC900).w	; is the Spin Dash sound playing?
00097902 6700                       		beq.s	@cont		; if not, branch
00097904 3F00                       		move.w	d0,-(sp)
00097906 1038 C902                  		move.b	($FFFFC902).w,d0
0009790A D12D 0008                  		add.b	d0,8(a5)
0009790E 301F                       		move.w	(sp)+,d0
00097910                            		
00097910                            @cont:
00097910 1B7C 0001 000E             		move.b	#1,$E(a5)
00097916 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
0009791A 4A04                       		tst.b	d4				; Is this a PSG channel?
0009791C 6B00                       		bmi.s	loc_722A8		; Branch if yes
0009791E 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00097924 2B41 0020                  		move.l	d1,TrackVoicePtr(a5)		; Voice pointer
00097928                            
00097928                            loc_722A8:
00097928 51CF FF68                  		dbf	d7,loc_72228
0009792C                            
0009792C 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00097930 6A00                       		bpl.s	loc_722B8				; Branch if not
00097932 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00097938                            
00097938                            loc_722B8:
00097938 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is SFX being played?
0009793C 6A00                       		bpl.s	locret_722C4						; Branch if not
0009793E 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00097944                            
00097944                            locret_722C4:
00097944 4E75                       		rts	
00097946                            ; ===========================================================================
00097946                            
00097946                            loc_722C6:
00097946 4216                       		clr.b	v_sndprio(a6)	; Clear priority
00097948 4E75                       		rts	
0009794A                            ; ===========================================================================
0009794A                            ; ---------------------------------------------------------------------------
0009794A                            ; RAM addresses for FM and PSG channel variables used by the SFX
0009794A                            ; ---------------------------------------------------------------------------
0009794A                            ; dword_722CC: BGMChannelRAM:
0009794A                            SFX_BGMChannelRAM:
0009794A 00FF F0D0                  		dc.l (v_snddriver_ram+v_music_fm3_track)&$FFFFFF
0009794E 0000 0000                  		dc.l 0
00097952 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00097956 00FF F130                  		dc.l (v_snddriver_ram+v_music_fm5_track)&$FFFFFF
0009795A 00FF F190                  		dc.l (v_snddriver_ram+v_music_psg1_track)&$FFFFFF
0009795E 00FF F1C0                  		dc.l (v_snddriver_ram+v_music_psg2_track)&$FFFFFF
00097962 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Plain PSG3
00097966 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Noise
0009796A                            ; dword_722EC: SFXChannelRAM:
0009796A                            SFX_SFXChannelRAM:
0009796A 00FF F220                  		dc.l (v_snddriver_ram+v_sfx_fm3_track)&$FFFFFF
0009796E 0000 0000                  		dc.l 0
00097972 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00097976 00FF F280                  		dc.l (v_snddriver_ram+v_sfx_fm5_track)&$FFFFFF
0009797A 00FF F2B0                  		dc.l (v_snddriver_ram+v_sfx_psg1_track)&$FFFFFF
0009797E 00FF F2E0                  		dc.l (v_snddriver_ram+v_sfx_psg2_track)&$FFFFFF
00097982 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Plain PSG3
00097986 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Noise
0009798A                            ; ===========================================================================
0009798A                            ; ---------------------------------------------------------------------------
0009798A                            ; Play GHZ waterfall sound
0009798A                            ; ---------------------------------------------------------------------------
0009798A                            ; Sound_D0toDF:
0009798A                            Sound_PlaySpecial:
0009798A 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
0009798E 6600 0000                  		bne.w	@locret			; Return if so
00097992 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00097996 6600 0000                  		bne.w	@locret			; Exit if it is
0009799A 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
0009799E 6600 0000                  		bne.w	@locret			; Exit if it is
000979A2 2079 0009 6F56             		movea.l	(Go_SpecSoundIndex).l,a0
000979A8 0407 00D0                  		subi.b	#spec__First,d7		; Make it 0-based
000979AC E54F                       		lsl.w	#2,d7
000979AE 2670 7000                  		movea.l	(a0,d7.w),a3
000979B2 224B                       		movea.l	a3,a1
000979B4 7000                       		moveq	#0,d0
000979B6 3019                       		move.w	(a1)+,d0			; Voice pointer
000979B8 D08B                       		add.l	a3,d0				; Relative pointer
000979BA 2D40 0020                  		move.l	d0,v_special_voice_ptr(a6)	; Store voice pointer
000979BE 1A19                       		move.b	(a1)+,d5			; Dividing timing
000979C0                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which special SFXes whose
000979C0                            		; index entry is above $3F will cause a crash. This instance was not fixed in Ristar's driver.
000979C0 7E00                       		moveq	#0,d7	
000979C2 1E19                       		move.b	(a1)+,d7			; Number of tracks (FM + PSG)
000979C4 5307                       		subq.b	#1,d7
000979C6 7C30                       		moveq	#TrackSz,d6
000979C8                            ; loc_72348:
000979C8                            @sfxloadloop:
000979C8 1829 0001                  		move.b	1(a1),d4					; Voice control bits
000979CC 6B00                       		bmi.s	@sfxoverridepsg					; Branch if PSG
000979CE 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000979D4 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
000979D8 6000                       		bra.s	@sfxinitpsg
000979DA                            ; ===========================================================================
000979DA                            ; loc_7235A:
000979DA                            @sfxoverridepsg:
000979DA 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000979E0 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
000979E4                            ; loc_72364:
000979E4                            @sfxinitpsg:
000979E4 244D                       		movea.l	a5,a2
000979E6 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
000979E8                            ; loc_72368:
000979E8                            @clearsfxtrackram:
000979E8 429A                       		clr.l	(a2)+
000979EA 51C8 FFFC                  		dbf	d0,@clearsfxtrackram
000979EE                            
000979EE 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits & voice control bits (TrackPlaybackControl)
000979F0 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)
000979F4 7000                       		moveq	#0,d0
000979F6 3019                       		move.w	(a1)+,d0			; Track data pointer
000979F8 D08B                       		add.l	a3,d0				; Relative pointer
000979FA 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
000979FE 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
00097A02 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
00097A08 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
00097A0C 4A04                       		tst.b	d4				; Is this a PSG channel?
00097A0E 6B00                       		bmi.s	@sfxpsginitdone			; Branch if yes
00097A10 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00097A16                            ; loc_72396:
00097A16                            @sfxpsginitdone:
00097A16 51CF FFB0                  		dbf	d7,@sfxloadloop
00097A1A                            
00097A1A 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is track playing?
00097A1E 6A00                       		bpl.s	@doneoverride					; Branch if not
00097A20 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00097A26                            ; loc_723A6:
00097A26                            @doneoverride:
00097A26 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is track playing?
00097A2A 6A00                       		bpl.s	@locret						; Branch if not
00097A2C 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00097A32 0004 001F                  		ori.b	#$1F,d4						; Command to silence channel
00097A36 13C4 00C0 0011             		move.b	d4,(psg_input).l
00097A3C 0844 0005                  		bchg	#5,d4			; Command to silence noise channel
00097A40 13C4 00C0 0011             		move.b	d4,(psg_input).l
00097A46                            ; locret_723C6:
00097A46                            @locret:
00097A46 4E75                       		rts	
00097A48                            ; End of function PlaySoundID
00097A48                            
00097A48                            ; ===========================================================================
00097A48                            ; ---------------------------------------------------------------------------
00097A48                            ; Unused RAM addresses for FM and PSG channel variables used by the Special SFX
00097A48                            ; ---------------------------------------------------------------------------
00097A48                            ; The first block would have been used for overriding the music tracks
00097A48                            ; as they have a lower priority, just as they are in Sound_PlaySFX
00097A48                            ; The third block would be used to set up the Special SFX
00097A48                            ; The second block, however, is for the SFX tracks, which have a higher priority
00097A48                            ; and would be checked for if they're currently playing
00097A48                            ; If they are, then the third block would be used again, this time to mark
00097A48                            ; the new tracks as 'currently playing'
00097A48                            
00097A48                            ; These were actually used in Moonwalker's driver (and other SMPS 68k Type 1a drivers)
00097A48                            
00097A48                            ; BGMFM4PSG3RAM:
00097A48                            ;SpecSFX_BGMChannelRAM:
00097A48 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00097A4C 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF
00097A50                            ; SFXFM4PSG3RAM:
00097A50                            ;SpecSFX_SFXChannelRAM:
00097A50 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00097A54 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF
00097A58                            ; SpecialSFXFM4PSG3RAM:
00097A58                            ;SpecSFX_SpecSFXChannelRAM:
00097A58 00FF F340                  		dc.l (v_snddriver_ram+v_spcsfx_fm4_track)&$FFFFFF
00097A5C 00FF F370                  		dc.l (v_snddriver_ram+v_spcsfx_psg3_track)&$FFFFFF
00097A60                            
00097A60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097A60                            
00097A60                            ; Snd_FadeOut1: Snd_FadeOutSFX: FadeOutSFX:
00097A60                            StopSFX:
00097A60 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00097A62 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
00097A66 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 3 FM + 3 PSG tracks (SFX)
00097A68                            ; loc_723EA:
00097A68                            @trackloop:
00097A68 4A15                       		tst.b	(a5)		; Is track playing? (TrackPlaybackControl)
00097A6A 6A00 0000                  		bpl.w	@nexttrack	; Branch if not
00097A6E 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00097A72 7600                       		moveq	#0,d3
00097A74 162D 0001                  		move.b	TrackVoiceControl(a5),d3	; Get voice control bits
00097A78 6B00                       		bmi.s	@trackpsg			; Branch if PSG
00097A7A 4EBA 0000                  		jsr	FMNoteOff(pc)
00097A7E 0C03 0004                  		cmpi.b	#4,d3						; Is this FM4?
00097A82 6600                       		bne.s	@getfmpointer					; Branch if not
00097A84 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00097A88 6A00                       		bpl.s	@getfmpointer					; Branch if not
00097A8A                            		; DANGER! there is a missing 'movea.l	a5,a3' here, without which the
00097A8A                            		; code is broken. It is dangerous to do a fade out when a GHZ waterfall
00097A8A                            		; is playing its sound!
00097A8A 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00097A8E 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get special voice pointer
00097A92 6000                       		bra.s	@gotfmpointer
00097A94                            ; ===========================================================================
00097A94                            ; loc_72416:
00097A94                            @getfmpointer:
00097A94 5503                       		subq.b	#2,d3		; SFX only has FM3 and up
00097A96 E50B                       		lsl.b	#2,d3
00097A98 41FA FEB0                  		lea	SFX_BGMChannelRAM(pc),a0
00097A9C 264D                       		movea.l	a5,a3
00097A9E 2A70 3000                  		movea.l	(a0,d3.w),a5
00097AA2 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get music voice pointer
00097AA6                            ; loc_72428:
00097AA6                            @gotfmpointer:
00097AA6 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00097AAA 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00097AAE 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00097AB2 4EBA 0000                  		jsr	SetVoice(pc)
00097AB6 2A4B                       		movea.l	a3,a5
00097AB8 6000                       		bra.s	@nexttrack
00097ABA                            ; ===========================================================================
00097ABA                            ; loc_7243C:
00097ABA                            @trackpsg:
00097ABA 4EBA 0000                  		jsr	PSGNoteOff(pc)
00097ABE 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00097AC2 0C03 00E0                  		cmpi.b	#$E0,d3			; Is this a noise channel:
00097AC6 6700                       		beq.s	@gotpsgpointer		; Branch if yes
00097AC8 0C03 00C0                  		cmpi.b	#$C0,d3			; Is this PSG 3?
00097ACC 6700                       		beq.s	@gotpsgpointer		; Branch if yes
00097ACE E60B                       		lsr.b	#3,d3
00097AD0 41FA FE78                  		lea	SFX_BGMChannelRAM(pc),a0
00097AD4 2070 3000                  		movea.l	(a0,d3.w),a0
00097AD8                            ; loc_7245A:
00097AD8                            @gotpsgpointer:
00097AD8 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00097ADC 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00097AE0 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise channel?
00097AE6 6600                       		bne.s	@nexttrack			; Branch if not
00097AE8 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise type
00097AF0                            ; loc_72472:
00097AF0                            @nexttrack:
00097AF0 DAFC 0030                  		adda.w	#TrackSz,a5
00097AF4 51CF FF72                  		dbf	d7,@trackloop
00097AF8                            
00097AF8 4E75                       		rts	
00097AFA                            ; End of function StopSFX
00097AFA                            
00097AFA                            
00097AFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097AFA                            
00097AFA                            ; Snd_FadeOut2: FadeOutSFX2: FadeOutSpecialSFX:
00097AFA                            StopSpecialSFX:
00097AFA 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00097AFE 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097B00 6A00                       		bpl.s	@fadedfm		; Branch if not
00097B02 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00097B06 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00097B0A 6600                       		bne.s	@fadedfm		; Branch if not
00097B0C 4EBA 0000                  		jsr	SendFMNoteOff(pc)
00097B10 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00097B14 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00097B18 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00097B1C 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097B1E 6A00                       		bpl.s	@fadedfm		; Branch if not
00097B20 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00097B24 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00097B28 4EBA 0000                  		jsr	SetVoice(pc)
00097B2C                            ; loc_724AE:
00097B2C                            @fadedfm:
00097B2C 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00097B30 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097B32 6A00                       		bpl.s	@fadedpsg		; Branch if not
00097B34 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00097B38 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00097B3C 6600                       		bne.s	@fadedpsg		; Return if not
00097B3E 4EBA 0000                  		jsr	SendPSGNoteOff(pc)
00097B42 4BEE 01F0                  		lea	v_music_psg3_track(a6),a5
00097B46 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00097B4A 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00097B4E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097B50 6A00                       		bpl.s	@fadedpsg		; Return if not
00097B52 0C2D 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a5)	; Is this a noise channel?
00097B58 6600                       		bne.s	@fadedpsg			; Return if not
00097B5A 13ED 001F 00C0 0011        		move.b	TrackPSGNoise(a5),(psg_input).l ; Set noise type
00097B62                            ; locret_724E4:
00097B62                            @fadedpsg:
00097B62 4E75                       		rts	
00097B64                            ; End of function StopSpecialSFX
00097B64                            
00097B64                            ; ===========================================================================
00097B64                            ; ---------------------------------------------------------------------------
00097B64                            ; Fade out music
00097B64                            ; ---------------------------------------------------------------------------
00097B64                            ; Sound_E0:
00097B64                            FadeOutMusic:
00097B64 4EBA FEFA                  		jsr	StopSFX(pc)
00097B68 4EBA FF90                  		jsr	StopSpecialSFX(pc)
00097B6C 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)			; Set fadeout delay to 3
00097B72 1D7C 0028 0004             		move.b	#$28,v_fadeout_counter(a6)		; Set fadeout counter
00097B78 422E 0040                  		clr.b	v_music_dac_track+TrackPlaybackControl(a6)	; Stop DAC track
00097B7C 422E 002A                  		clr.b	f_speedup(a6)				; Disable speed shoes tempo
00097B80 4E75                       		rts	
00097B82                            
00097B82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097B82                            
00097B82                            ; sub_72504:
00097B82                            DoFadeOut:
00097B82 102E 0006                  		move.b	v_fadeout_delay(a6),d0	; Has fadeout delay expired?
00097B86 6700                       		beq.s	@continuefade		; Branch if yes
00097B88 532E 0006                  		subq.b	#1,v_fadeout_delay(a6)
00097B8C 4E75                       		rts	
00097B8E                            ; ===========================================================================
00097B8E                            ; loc_72510:
00097B8E                            @continuefade:
00097B8E 532E 0004                  		subq.b	#1,v_fadeout_counter(a6)	; Update fade counter
00097B92 6700 0000                  		beq.w	StopAllSound			; Branch if fade is done
00097B96 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)		; Reset fade delay
00097B9C 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00097BA0 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00097BA2                            ; loc_72524:
00097BA2                            @fmloop:
00097BA2 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097BA4 6A00                       		bpl.s	@nextfm			; Branch if not
00097BA6 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00097BAA 6A00                       		bpl.s	@sendfmtl		; Branch if still positive
00097BAC 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00097BB0 6000                       		bra.s	@nextfm
00097BB2                            ; ===========================================================================
00097BB2                            ; loc_72534:
00097BB2                            @sendfmtl:
00097BB2 4EBA 0000                  		jsr	SendVoiceTL(pc)
00097BB6                            ; loc_72538:
00097BB6                            @nextfm:
00097BB6 DAFC 0030                  		adda.w	#TrackSz,a5
00097BBA 51CF FFE6                  		dbf	d7,@fmloop
00097BBE                            
00097BBE 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00097BC0                            ; loc_72542:
00097BC0                            @psgloop:
00097BC0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097BC2 6A00                       		bpl.s	@nextpsg		; branch if not
00097BC4 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00097BC8 0C2D 0010 0009             		cmpi.b	#$10,TrackVolume(a5)	; Is it greater than $F?
00097BCE 6500                       		blo.s	@sendpsgvol		; Branch if not
00097BD0 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00097BD4 6000                       		bra.s	@nextpsg
00097BD6                            ; ===========================================================================
00097BD6                            ; loc_72558:
00097BD6                            @sendpsgvol:
00097BD6 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Store new volume attenuation
00097BDA 4EBA 0000                  		jsr	SetPSGVolume(pc)
00097BDE                            ; loc_72560:
00097BDE                            @nextpsg:
00097BDE DAFC 0030                  		adda.w	#TrackSz,a5
00097BE2 51CF FFDC                  		dbf	d7,@psgloop
00097BE6                            
00097BE6 4E75                       		rts	
00097BE8                            ; End of function DoFadeOut
00097BE8                            
00097BE8                            
00097BE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097BE8                            
00097BE8                            ; sub_7256A:
00097BE8                            FMSilenceAll:
00097BE8 7602                       		moveq	#2,d3		; 3 FM channels for each YM2612 parts
00097BEA 7028                       		moveq	#$28,d0		; FM key on/off register
00097BEC                            ; loc_7256E:
00097BEC                            @noteoffloop:
00097BEC 1203                       		move.b	d3,d1
00097BEE 4EBA 0000                  		jsr	WriteFMI(pc)
00097BF2 5801                       		addq.b	#4,d1		; Move to YM2612 part 1
00097BF4 4EBA 0000                  		jsr	WriteFMI(pc)
00097BF8 51CB FFF2                  		dbf	d3,@noteoffloop
00097BFC                            
00097BFC 7040                       		moveq	#$40,d0		; Set TL on FM channels...
00097BFE 727F                       		moveq	#$7F,d1		; ... to total attenuation...
00097C00 7802                       		moveq	#2,d4		; ... for all 3 channels...
00097C02                            ; loc_72584:
00097C02                            @channelloop:
00097C02 7603                       		moveq	#3,d3		; ... for all operators on each channel...
00097C04                            ; loc_72586:
00097C04                            @channeltlloop:
00097C04 4EBA 0000                  		jsr	WriteFMI(pc)	; ... for part 0...
00097C08 4EBA 0000                  		jsr	WriteFMII(pc)	; ... and part 1.
00097C0C 5840                       		addq.w	#4,d0		; Next TL operator
00097C0E 51CB FFF4                  		dbf	d3,@channeltlloop
00097C12                            
00097C12 0400 000F                  		subi.b	#$F,d0		; Move to TL operator 1 of next channel
00097C16 51CC FFEA                  		dbf	d4,@channelloop
00097C1A                            
00097C1A 4E75                       		rts	
00097C1C                            ; End of function FMSilenceAll
00097C1C                            
00097C1C                            ; ===========================================================================
00097C1C                            ; ---------------------------------------------------------------------------
00097C1C                            ; Stop music
00097C1C                            ; ---------------------------------------------------------------------------
00097C1C                            ; Sound_E4: StopSoundAndMusic:
00097C1C                            StopAllSound:
00097C1C 702B                       		moveq	#$2B,d0		; Enable/disable DAC
00097C1E 123C 0080                  		move.b	#$80,d1		; Enable DAC
00097C22 4EBA 0000                  		jsr	WriteFMI(pc)
00097C26 7027                       		moveq	#$27,d0		; Timers, FM3/FM6 mode
00097C28 7200                       		moveq	#0,d1		; FM3/FM6 normal mode, disable timers
00097C2A 4EBA 0000                  		jsr	WriteFMI(pc)
00097C2E 204E                       		movea.l	a6,a0
00097C30                            		; DANGER! This should be clearing all variables and track data, but misses the last $10 bytes of v_spcsfx_psg3_track.
00097C30                            		; Remove the '-$10' to fix this.
00097C30 303C 00E7                  		move.w	#((v_spcsfx_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $390 bytes: all variables and most track data
00097C34                            ; loc_725B6:
00097C34                            @clearramloop:
00097C34 4298                       		clr.l	(a0)+
00097C36 51C8 FFFC                  		dbf	d0,@clearramloop
00097C3A                            
00097C3A 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00097C40 4EBA FFA6                  		jsr	FMSilenceAll(pc)
00097C44 6000 0000                  		bra.w	PSGSilenceAll
00097C48                            
00097C48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097C48                            
00097C48                            ; sub_725CA:
00097C48                            InitMusicPlayback:
00097C48 204E                       		movea.l	a6,a0
00097C4A                            		; Save several values
00097C4A 1216                       		move.b	v_sndprio(a6),d1
00097C4C 142E 0027                  		move.b	f_1up_playing(a6),d2
00097C50 162E 002A                  		move.b	f_speedup(a6),d3
00097C54 182E 0026                  		move.b	v_fadein_counter(a6),d4
00097C58                            		; DANGER! Only v_soundqueue0 and v_soundqueue1 are backed up, once again breaking v_soundqueue2
00097C58 3A2E 000A                  		move.w	v_soundqueue0(a6),d5
00097C5C 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $220 bytes: all variables and music track data
00097C60                            ; loc_725E4:
00097C60                            @clearramloop:
00097C60 4298                       		clr.l	(a0)+
00097C62 51C8 FFFC                  		dbf	d0,@clearramloop
00097C66                            
00097C66                            		; Restore the values saved above
00097C66 1C81                       		move.b	d1,v_sndprio(a6)
00097C68 1D42 0027                  		move.b	d2,f_1up_playing(a6)
00097C6C 1D43 002A                  		move.b	d3,f_speedup(a6)
00097C70 1D44 0026                  		move.b	d4,v_fadein_counter(a6)
00097C74 3D45 000A                  		move.w	d5,v_soundqueue0(a6)
00097C78 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00097C7E                            		; DANGER! This silences ALL channels, even the ones being used
00097C7E                            		; by SFX, and not music! @sendfmnoteoff does this already, and
00097C7E                            		; doesn't affect SFX channels, either.
00097C7E                            		; This should be replaced with an 'rts'.
00097C7E 4EBA FF68                  		jsr	FMSilenceAll(pc)
00097C82 6000 0000                  		bra.w	PSGSilenceAll
00097C86                            		; DANGER! InitMusicPlayback, and Sound_PlayBGM for that matter,
00097C86                            		; don't do a very good job of setting up the music tracks.
00097C86                            		; Tracks that aren't defined in a music file's header don't have
00097C86                            		; their channels defined, meaning @sendfmnoteoff won't silence
00097C86                            		; hardware properly. In combination with removing the above
00097C86                            		; calls to FMSilenceAll/PSGSilenceAll, this will cause hanging
00097C86                            		; notes.
00097C86                            		; To fix this, I suggest using this code, instead of an 'rts':
00097C86                            		;lea	v_music_track_ram+TrackVoiceControl(a6),a1
00097C86                            		;lea	FMDACInitBytes(pc),a2
00097C86                            		;moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d1		; 7 DAC/FM tracks
00097C86                            		;bsr.s	@writeloop
00097C86                            		;lea	PSGInitBytes(pc),a2
00097C86                            		;moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d1	; 3 PSG tracks
00097C86                            
00097C86                            ;@writeloop:
00097C86                            		;move.b	(a2)+,(a1)		; Write track's channel byte
00097C86                            		;lea	TrackSz(a1),a1		; Next track
00097C86                            		;dbf	d1,@writeloop		; Loop for all DAC/FM/PSG tracks
00097C86                            
00097C86                            		;rts
00097C86                            	
00097C86                            ; End of function InitMusicPlayback
00097C86                            
00097C86                            
00097C86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097C86                            
00097C86                            ; sub_7260C:
00097C86                            TempoWait:
00097C86 1D6E 0002 0001             		move.b	v_main_tempo(a6),v_main_tempo_timeout(a6)	; Reset main tempo timeout
00097C8C 41EE 004E                  		lea	v_music_track_ram+TrackDurationTimeout(a6),a0	; note timeout
00097C90 7030                       		moveq	#TrackSz,d0
00097C92 7209                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d1		; 1 DAC + 6 FM + 3 PSG tracks
00097C94                            ; loc_7261A:
00097C94                            @tempoloop:
00097C94 5210                       		addq.b	#1,(a0)	; Delay note by 1 frame
00097C96 D0C0                       		adda.w	d0,a0	; Advance to next track
00097C98 51C9 FFFA                  		dbf	d1,@tempoloop
00097C9C                            
00097C9C 4E75                       		rts	
00097C9E                            ; End of function TempoWait
00097C9E                            
00097C9E                            ; ===========================================================================
00097C9E                            ; ---------------------------------------------------------------------------
00097C9E                            ; Speed	up music
00097C9E                            ; ---------------------------------------------------------------------------
00097C9E                            ; Sound_E2:
00097C9E                            SpeedUpMusic:
00097C9E 4A2E 0027                  		tst.b	f_1up_playing(a6)
00097CA2 6600                       		bne.s	@speedup_1up
00097CA4 1D6E 0029 0002             		move.b	v_speeduptempo(a6),v_main_tempo(a6)
00097CAA 1D6E 0029 0001             		move.b	v_speeduptempo(a6),v_main_tempo_timeout(a6)
00097CB0 1D7C 0080 002A             		move.b	#$80,f_speedup(a6)
00097CB6 4E75                       		rts	
00097CB8                            ; ===========================================================================
00097CB8                            ; loc_7263E:
00097CB8                            @speedup_1up:
00097CB8 1D6E 03C9 03A2             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo(a6)
00097CBE 1D6E 03C9 03A1             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00097CC4 1D7C 0080 03CA             		move.b	#$80,v_1up_ram_copy+f_speedup(a6)
00097CCA 4E75                       		rts	
00097CCC                            ; ===========================================================================
00097CCC                            ; ---------------------------------------------------------------------------
00097CCC                            ; Change music back to normal speed
00097CCC                            ; ---------------------------------------------------------------------------
00097CCC                            ; Sound_E3:
00097CCC                            SlowDownMusic:
00097CCC 4A2E 0027                  		tst.b	f_1up_playing(a6)
00097CD0 6600                       		bne.s	@slowdown_1up
00097CD2 1D6E 0028 0002             		move.b	v_tempo_mod(a6),v_main_tempo(a6)
00097CD8 1D6E 0028 0001             		move.b	v_tempo_mod(a6),v_main_tempo_timeout(a6)
00097CDE 422E 002A                  		clr.b	f_speedup(a6)
00097CE2 4E75                       		rts	
00097CE4                            ; ===========================================================================
00097CE4                            ; loc_7266A:
00097CE4                            @slowdown_1up:
00097CE4 1D6E 03C8 03A2             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo(a6)
00097CEA 1D6E 03C8 03A1             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00097CF0 422E 03CA                  		clr.b	v_1up_ram_copy+f_speedup(a6)
00097CF4 4E75                       		rts	
00097CF6                            
00097CF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097CF6                            
00097CF6                            ; sub_7267C:
00097CF6                            DoFadeIn:
00097CF6 4A2E 0025                  		tst.b	v_fadein_delay(a6)	; Has fadein delay expired?
00097CFA 6700                       		beq.s	@continuefade		; Branch if yes
00097CFC 532E 0025                  		subq.b	#1,v_fadein_delay(a6)
00097D00 4E75                       		rts	
00097D02                            ; ===========================================================================
00097D02                            ; loc_72688:
00097D02                            @continuefade:
00097D02 4A2E 0026                  		tst.b	v_fadein_counter(a6)	; Is fade done?
00097D06 6700                       		beq.s	@fadedone		; Branch if yes
00097D08 532E 0026                  		subq.b	#1,v_fadein_counter(a6)	; Update fade counter
00097D0C 1D7C 0002 0025             		move.b	#2,v_fadein_delay(a6)	; Reset fade delay
00097D12 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00097D16 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00097D18                            ; loc_7269E:
00097D18                            @fmloop:
00097D18 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097D1A 6A00                       		bpl.s	@nextfm			; Branch if not
00097D1C 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00097D20 4EBA 0000                  		jsr	SendVoiceTL(pc)
00097D24                            ; loc_726AA:
00097D24                            @nextfm:
00097D24 DAFC 0030                  		adda.w	#TrackSz,a5
00097D28 51CF FFEE                  		dbf	d7,@fmloop
00097D2C 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7		; 3 PSG tracks
00097D2E                            ; loc_726B4:
00097D2E                            @psgloop:
00097D2E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097D30 6A00                       		bpl.s	@nextpsg		; Branch if not
00097D32 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00097D36 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get value
00097D3A 0C06 0010                  		cmpi.b	#$10,d6			; Is it is < $10?
00097D3E 6500                       		blo.s	@sendpsgvol		; Branch if yes
00097D40 7C0F                       		moveq	#$F,d6			; Limit to $F (maximum attenuation)
00097D42                            ; loc_726C8:
00097D42                            @sendpsgvol:
00097D42 4EBA 0000                  		jsr	SetPSGVolume(pc)
00097D46                            ; loc_726CC:
00097D46                            @nextpsg:
00097D46 DAFC 0030                  		adda.w	#TrackSz,a5
00097D4A 51CF FFE2                  		dbf	d7,@psgloop
00097D4E 4E75                       		rts	
00097D50                            ; ===========================================================================
00097D50                            ; loc_726D6:
00097D50                            @fadedone:
00097D50 08AE 0002 0040             		bclr	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Clear 'SFX overriding' bit
00097D56 422E 0024                  		clr.b	f_fadein_flag(a6)				; Stop fadein
00097D5A 4E75                       		rts	
00097D5C                            ; End of function DoFadeIn
00097D5C                            
00097D5C                            ; ===========================================================================
00097D5C                            ; loc_726E2:
00097D5C                            FMNoteOn:
00097D5C 0815 0001                  		btst	#1,(a5)		; Is track resting? (TrackPlaybackControl)
00097D60 6600                       		bne.s	@locret		; Return if so
00097D62 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00097D66 6600                       		bne.s	@locret		; Return if so
00097D68 7028                       		moveq	#$28,d0		; Note on/off register
00097D6A 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Get channel bits
00097D6E 0001 00F0                  		ori.b	#$F0,d1		; Note on on all operators
00097D72 6000 0000                  		bra.w	WriteFMI
00097D76                            ; ===========================================================================
00097D76                            ; locret_726FC:
00097D76                            @locret:
00097D76 4E75                       		rts	
00097D78                            
00097D78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097D78                            
00097D78                            ; sub_726FE:
00097D78                            FMNoteOff:
00097D78 0815 0004                  		btst	#4,(a5)		; Is 'do not attack next note' set? (TrackPlaybackControl)
00097D7C 6600                       		bne.s	locret_72714	; Return if yes
00097D7E 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00097D82 6600                       		bne.s	locret_72714	; Return if yes
00097D84                            ; loc_7270A:
00097D84                            SendFMNoteOff:
00097D84 7028                       		moveq	#$28,d0		; Note on/off register
00097D86 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Note off to this channel
00097D8A 6000 0000                  		bra.w	WriteFMI
00097D8E                            ; ===========================================================================
00097D8E                            
00097D8E                            locret_72714:
00097D8E 4E75                       		rts	
00097D90                            ; End of function FMNoteOff
00097D90                            
00097D90                            ; ===========================================================================
00097D90                            ; loc_72716:
00097D90                            WriteFMIorIIMain:
00097D90 0815 0002                  		btst	#2,(a5)		; Is track being overriden by sfx? (TrackPlaybackControl)
00097D94 6600                       		bne.s	@locret		; Return if yes
00097D96 6000 0000                  		bra.w	WriteFMIorII
00097D9A                            ; ===========================================================================
00097D9A                            ; locret_72720:
00097D9A                            @locret:
00097D9A 4E75                       		rts	
00097D9C                            
00097D9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097D9C                            
00097D9C                            ; sub_72722:
00097D9C                            WriteFMIorII:
00097D9C 082D 0002 0001             		btst	#2,TrackVoiceControl(a5)	; Is this bound for part I or II?
00097DA2 6600                       		bne.s	WriteFMIIPart			; Branch if for part II
00097DA4 D02D 0001                  		add.b	TrackVoiceControl(a5),d0	; Add in voice control bits
00097DA8                            ; End of function WriteFMIorII
00097DA8                            
00097DA8                            
00097DA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097DA8                            
00097DA8                            ; The reason I think this is an *early* SMPS 68k Type 1b
00097DA8                            ; is because this subroutine is the one from Type 1a:
00097DA8                            ; other Type 1b drivers have a newer, optimised version.
00097DA8                            ; The driver itself is Type 1b, with this odd exception.
00097DA8                            
00097DA8                            ; sub_7272E:
00097DA8                            WriteFMI:
00097DA8 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00097DAE 0802 0007                  		btst	#7,d2		; Is FM busy?
00097DB2 66F4                       		bne.s	WriteFMI	; Loop if so
00097DB4 13C0 00A0 4000             		move.b	d0,(ym2612_a0).l
00097DBA 4E71                       		nop	
00097DBC 4E71                       		nop	
00097DBE 4E71                       		nop	
00097DC0                            ; loc_72746:
00097DC0                            @waitloop:
00097DC0 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00097DC6 0802 0007                  		btst	#7,d2		; Is FM busy?
00097DCA 66F4                       		bne.s	@waitloop	; Loop if so
00097DCC                            
00097DCC 13C1 00A0 4001             		move.b	d1,(ym2612_d0).l
00097DD2 4E75                       		rts	
00097DD4                            ; End of function WriteFMI
00097DD4                            
00097DD4                            ; ===========================================================================
00097DD4                            ; loc_7275A:
00097DD4                            WriteFMIIPart:
00097DD4 142D 0001                  		move.b	TrackVoiceControl(a5),d2 ; Get voice control bits
00097DD8 0882 0002                  		bclr	#2,d2			; Clear chip toggle
00097DDC D002                       		add.b	d2,d0			; Add in to destination register
00097DDE                            
00097DDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097DDE                            
00097DDE                            ; sub_72764:
00097DDE                            WriteFMII:
00097DDE 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00097DE4 0802 0007                  		btst	#7,d2		; Is FM busy?
00097DE8 66F4                       		bne.s	WriteFMII	; Loop if so
00097DEA 13C0 00A0 4002             		move.b	d0,(ym2612_a1).l
00097DF0 4E71                       		nop	
00097DF2 4E71                       		nop	
00097DF4 4E71                       		nop	
00097DF6                            ; loc_7277C:
00097DF6                            @waitloop:
00097DF6 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00097DFC 0802 0007                  		btst	#7,d2		; Is FM busy?
00097E00 66F4                       		bne.s	@waitloop	; Loop if so
00097E02                            
00097E02 13C1 00A0 4003             		move.b	d1,(ym2612_d1).l
00097E08 4E75                       		rts	
00097E0A                            ; End of function WriteFMII
00097E0A                            
00097E0A                            ; ===========================================================================
00097E0A                            ; ---------------------------------------------------------------------------
00097E0A                            ; FM Note Values: b-0 to a#8
00097E0A                            ; ---------------------------------------------------------------------------
00097E0A                            ; word_72790: FM_Notes:
00097E0A                            FMFrequencies:
00097E0A 025E 0284 02AB 02D3 02FE+  	dc.w $025E,$0284,$02AB,$02D3,$02FE,$032D,$035C,$038F,$03C5,$03FF,$043C,$047C
00097E22 0A5E 0A84 0AAB 0AD3 0AFE+  	dc.w $0A5E,$0A84,$0AAB,$0AD3,$0AFE,$0B2D,$0B5C,$0B8F,$0BC5,$0BFF,$0C3C,$0C7C
00097E3A 125E 1284 12AB 12D3 12FE+  	dc.w $125E,$1284,$12AB,$12D3,$12FE,$132D,$135C,$138F,$13C5,$13FF,$143C,$147C
00097E52 1A5E 1A84 1AAB 1AD3 1AFE+  	dc.w $1A5E,$1A84,$1AAB,$1AD3,$1AFE,$1B2D,$1B5C,$1B8F,$1BC5,$1BFF,$1C3C,$1C7C
00097E6A 225E 2284 22AB 22D3 22FE+  	dc.w $225E,$2284,$22AB,$22D3,$22FE,$232D,$235C,$238F,$23C5,$23FF,$243C,$247C
00097E82 2A5E 2A84 2AAB 2AD3 2AFE+  	dc.w $2A5E,$2A84,$2AAB,$2AD3,$2AFE,$2B2D,$2B5C,$2B8F,$2BC5,$2BFF,$2C3C,$2C7C
00097E9A 325E 3284 32AB 32D3 32FE+  	dc.w $325E,$3284,$32AB,$32D3,$32FE,$332D,$335C,$338F,$33C5,$33FF,$343C,$347C
00097EB2 3A5E 3A84 3AAB 3AD3 3AFE+  	dc.w $3A5E,$3A84,$3AAB,$3AD3,$3AFE,$3B2D,$3B5C,$3B8F,$3BC5,$3BFF,$3C3C,$3C7C
00097ECA                            
00097ECA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097ECA                            
00097ECA                            ; sub_72850:
00097ECA                            PSGUpdateTrack:
00097ECA 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Update note timeout
00097ECE 6600                       		bne.s	@notegoing
00097ED0 0895 0004                  		bclr	#4,(a5)				; Clear 'do not attack note' bit (TrackPlaybackControl)
00097ED4 4EBA 0000                  		jsr	PSGDoNext(pc)
00097ED8 4EBA 0000                  		jsr	PSGDoNoteOn(pc)
00097EDC 6000 0000                  		bra.w	PSGDoVolFX
00097EE0                            ; ===========================================================================
00097EE0                            ; loc_72866:
00097EE0                            @notegoing:
00097EE0 4EBA F4CA                  		jsr	NoteTimeoutUpdate(pc)
00097EE4 4EBA 0000                  		jsr	PSGUpdateVolFX(pc)
00097EE8 4EBA F4EA                  		jsr	DoModulation(pc)
00097EEC 4EBA 0000                  		jsr	PSGUpdateFreq(pc)	; It would be better if this were a jmp and the rts was removed
00097EF0 4E75                       		rts
00097EF2                            ; End of function PSGUpdateTrack
00097EF2                            
00097EF2                            
00097EF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097EF2                            
00097EF2                            ; sub_72878:
00097EF2                            PSGDoNext:
00097EF2 0895 0001                  		bclr	#1,(a5)				; Clear 'track at rest' bit (TrackPlaybackControl)
00097EF6 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; Get track data pointer
00097EFA                            ; loc_72880:
00097EFA                            @noteloop:
00097EFA 7A00                       		moveq	#0,d5
00097EFC 1A1C                       		move.b	(a4)+,d5	; Get byte from track
00097EFE 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
00097F02 6500                       		blo.s	@gotnote	; Branch if not
00097F04 4EBA 0000                  		jsr	CoordFlag(pc)
00097F08 60F0                       		bra.s	@noteloop
00097F0A                            ; ===========================================================================
00097F0A                            ; loc_72890:
00097F0A                            @gotnote:
00097F0A 4A05                       		tst.b	d5		; Is it a note?
00097F0C 6A00                       		bpl.s	@gotduration	; Branch if not
00097F0E 4EBA 0000                  		jsr	PSGSetFreq(pc)
00097F12 1A1C                       		move.b	(a4)+,d5	; Get another byte
00097F14 4A05                       		tst.b	d5		; Is it a duration?
00097F16 6A00                       		bpl.s	@gotduration	; Branch if yes
00097F18 534C                       		subq.w	#1,a4		; Put byte back
00097F1A 6000 F452                  		bra.w	FinishTrackUpdate
00097F1E                            ; ===========================================================================
00097F1E                            ; loc_728A4:
00097F1E                            @gotduration:
00097F1E 4EBA F42E                  		jsr	SetDuration(pc)
00097F22 6000 F44A                  		bra.w	FinishTrackUpdate
00097F26                            ; End of function PSGDoNext
00097F26                            
00097F26                            
00097F26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097F26                            
00097F26                            ; sub_728AC:
00097F26                            PSGSetFreq:
00097F26 0405 0081                  		subi.b	#$81,d5		; Convert to 0-based index
00097F2A 6500                       		bcs.s	@restpsg	; If $80, put track at rest
00097F2C DA2D 0008                  		add.b	TrackTranspose(a5),d5 ; Add in channel transposition
00097F30 0245 007F                  		andi.w	#$7F,d5		; Clear high byte and sign bit
00097F34 E34D                       		lsl.w	#1,d5
00097F36 41FA 0000                  		lea	PSGFrequencies(pc),a0
00097F3A 3B70 5000 0010             		move.w	(a0,d5.w),TrackFreq(a5)	; Set new frequency
00097F40 6000 F42C                  		bra.w	FinishTrackUpdate
00097F44                            ; ===========================================================================
00097F44                            ; loc_728CA:
00097F44                            @restpsg:
00097F44 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00097F48 3B7C FFFF 0010             		move.w	#-1,TrackFreq(a5)	; Invalidate note frequency
00097F4E 4EBA F41E                  		jsr	FinishTrackUpdate(pc)
00097F52 6000 0000                  		bra.w	PSGNoteOff
00097F56                            ; End of function PSGSetFreq
00097F56                            
00097F56                            
00097F56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097F56                            
00097F56                            ; sub_728DC:
00097F56                            PSGDoNoteOn:
00097F56 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get note frequency
00097F5A 6B00                       		bmi.s	PSGSetRest		; If invalid, branch
00097F5C                            ; End of function PSGDoNoteOn
00097F5C                            
00097F5C                            
00097F5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097F5C                            
00097F5C                            ; sub_728E2:
00097F5C                            PSGUpdateFreq:
00097F5C 102D 001E                  		move.b	TrackDetune(a5),d0	; Get detune value
00097F60 4880                       		ext.w	d0
00097F62 DC40                       		add.w	d0,d6		; Add to frequency
00097F64 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00097F68 6600                       		bne.s	@locret		; Return if yes
00097F6A 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
00097F6E 6600                       		bne.s	@locret		; Return if yes
00097F70 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get channel bits
00097F74 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it a noise channel?
00097F78 6600                       		bne.s	@notnoise	; Branch if not
00097F7A 103C 00C0                  		move.b	#$C0,d0		; Use PSG 3 channel bits
00097F7E                            ; loc_72904:
00097F7E                            @notnoise:
00097F7E 3206                       		move.w	d6,d1
00097F80 0201 000F                  		andi.b	#$F,d1		; Low nibble of frequency
00097F84 8001                       		or.b	d1,d0		; Latch tone data to channel
00097F86 E84E                       		lsr.w	#4,d6		; Get upper 6 bits of frequency
00097F88 0206 003F                  		andi.b	#$3F,d6		; Send to latched channel
00097F8C 13C0 00C0 0011             		move.b	d0,(psg_input).l
00097F92 13C6 00C0 0011             		move.b	d6,(psg_input).l
00097F98                            ; locret_7291E:
00097F98                            @locret:
00097F98 4E75                       		rts	
00097F9A                            ; End of function PSGUpdateFreq
00097F9A                            
00097F9A                            ; ===========================================================================
00097F9A                            ; loc_72920:
00097F9A                            PSGSetRest:
00097F9A 08D5 0001                  		bset	#1,(a5)	; Set 'track at rest' bit (TrackPlaybackControl)
00097F9E 4E75                       		rts	
00097FA0                            
00097FA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097FA0                            
00097FA0                            ; sub_72926:
00097FA0                            PSGUpdateVolFX:
00097FA0 4A2D 000B                  		tst.b	TrackVoiceIndex(a5)	; Test PSG tone
00097FA4 6700 0000                  		beq.w	locret_7298A		; Return if it is zero
00097FA8                            ; loc_7292E:
00097FA8                            PSGDoVolFX:	; This can actually be made a bit more efficient, see the comments for more
00097FA8 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get volume
00097FAC 7000                       		moveq	#0,d0
00097FAE 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get PSG tone
00097FB2 6700                       		beq.s	SetPSGVolume
00097FB4 2079 0009 6F66             		movea.l	(Go_PSGIndex).l,a0
00097FBA 5340                       		subq.w	#1,d0
00097FBC E548                       		lsl.w	#2,d0
00097FBE 2070 0000                  		movea.l	(a0,d0.w),a0
00097FC2 102D 000C                  		move.b	TrackVolEnvIndex(a5),d0	; Get volume envelope index		; move.b	TrackVolEnvIndex(a5),d0
00097FC6 1030 0000                  		move.b	(a0,d0.w),d0			; Volume envelope value			; addq.b	#1,TrackVolEnvIndex(a5)
00097FCA 522D 000C                  		addq.b	#1,TrackVolEnvIndex(a5)	; Increment volume envelope index	; move.b	(a0,d0.w),d0
00097FCE 0800 0007                  		btst	#7,d0				; Is volume envelope value negative?	; <-- makes this line redundant
00097FD2 6700                       		beq.s	@gotflutter			; Branch if not				; but you gotta make this one a bpl
00097FD4 0C00 0080                  		cmpi.b	#$80,d0				; Is it the terminator?			; Since this is the only check, you can take the optimisation a step further:
00097FD8 6700                       		beq.s	VolEnvHold			; If so, branch				; Change the previous beq (bpl) to a bmi and make it branch to VolEnvHold to make these last two lines redundant
00097FDA                            ; loc_72960:
00097FDA                            @gotflutter:
00097FDA DC40                       		add.w	d0,d6		; Add volume envelope value to volume
00097FDC 0C06 0010                  		cmpi.b	#$10,d6		; Is volume $10 or higher?
00097FE0 6500                       		blo.s	SetPSGVolume	; Branch if not
00097FE2 7C0F                       		moveq	#$F,d6		; Limit to silence and fall through
00097FE4                            ; End of function PSGUpdateVolFX
00097FE4                            
00097FE4                            
00097FE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097FE4                            
00097FE4                            ; sub_7296A:
00097FE4                            SetPSGVolume:
00097FE4 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
00097FE8 6600                       		bne.s	locret_7298A	; Return if so
00097FEA 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00097FEE 6600                       		bne.s	locret_7298A	; Return if so
00097FF0 0815 0004                  		btst	#4,(a5)		; Is track set to not attack next note? (TrackPlaybackControl)
00097FF4 6600                       		bne.s	PSGCheckNoteTimeout ; Branch if yes
00097FF6                            ; loc_7297C:
00097FF6                            PSGSendVolume:
00097FF6 8C2D 0001                  		or.b	TrackVoiceControl(a5),d6 ; Add in track selector bits
00097FFA 0606 0010                  		addi.b	#$10,d6			; Mark it as a volume command
00097FFE 13C6 00C0 0011             		move.b	d6,(psg_input).l
00098004                            
00098004                            locret_7298A:
00098004 4E75                       		rts	
00098006                            ; ===========================================================================
00098006                            ; loc_7298C: PSGCheckNoteFill:
00098006                            PSGCheckNoteTimeout:
00098006 4A2D 0013                  		tst.b	TrackNoteTimeoutMaster(a5)	; Is note timeout on?
0009800A 67EA                       		beq.s	PSGSendVolume			; Branch if not
0009800C 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)		; Has note timeout expired?
00098010 66E4                       		bne.s	PSGSendVolume			; Branch if not
00098012 4E75                       		rts	
00098014                            ; End of function SetPSGVolume
00098014                            
00098014                            ; ===========================================================================
00098014                            ; loc_7299A: FlutterDone:
00098014                            VolEnvHold:
00098014 532D 000C                  		subq.b	#1,TrackVolEnvIndex(a5)	; Decrement volume envelope index
00098018 4E75                       		rts	
0009801A                            
0009801A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009801A                            
0009801A                            ; sub_729A0:
0009801A                            PSGNoteOff:
0009801A 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0009801E 6600                       		bne.s	locret_729B4	; Return if so
00098020                            ; loc_729A6:
00098020                            SendPSGNoteOff:
00098020 102D 0001                  		move.b	TrackVoiceControl(a5),d0	; PSG channel to change
00098024 0000 001F                  		ori.b	#$1F,d0				; Maximum volume attenuation
00098028 13C0 00C0 0011             		move.b	d0,(psg_input).l
0009802E                            		; DANGER! If InitMusicPlayback doesn't silence all channels, there's the
0009802E                            		; risk of music accidentally playing noise because it can't detect if
0009802E                            		; the PSG4/noise channel needs muting on track initialisation.
0009802E                            		; S&K's driver fixes it by doing this:
0009802E 0C00 00DF                  		cmpi.b	#$DF,d0				; Are stopping PSG3?
00098032 6600                       		bne.s	locret_729B4
00098034 13FC 00FF 00C0 0011        		move.b	#$FF,(psg_input).l		; If so, stop noise channel while we're at it
0009803C                            
0009803C                            locret_729B4:
0009803C 4E75                       		rts	
0009803E                            ; End of function PSGNoteOff
0009803E                            
0009803E                            
0009803E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009803E                            
0009803E                            ; sub_729B6:
0009803E                            PSGSilenceAll:
0009803E 41F9 00C0 0011             		lea	(psg_input).l,a0
00098044 10BC 009F                  		move.b	#$9F,(a0)	; Silence PSG 1
00098048 10BC 00BF                  		move.b	#$BF,(a0)	; Silence PSG 2
0009804C 10BC 00DF                  		move.b	#$DF,(a0)	; Silence PSG 3
00098050 10BC 00FF                  		move.b	#$FF,(a0)	; Silence noise channel
00098054 4E75                       		rts	
00098056                            ; End of function PSGSilenceAll
00098056                            
00098056                            ; ===========================================================================
00098056                            ; word_729CE:
00098056                            PSGFrequencies:
00098056 0356 0326 02F9 02CE 02A5+  		dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A
00098066 021A 01FB 01DF 01C4 01AB+  		dc.w $21A, $1FB, $1DF, $1C4, $1AB, $193, $17D, $167
00098076 0153 0140 012E 011D 010D+  		dc.w $153, $140, $12E, $11D, $10D,  $FE,  $EF,  $E2
00098086 00D6 00C9 00BE 00B4 00A9+  		dc.w  $D6,  $C9,  $BE,  $B4,  $A9,  $A0,  $97,  $8F
00098096 0087 007F 0078 0071 006B+  		dc.w  $87,  $7F,  $78,  $71,  $6B,  $65,  $5F,  $5A
000980A6 0055 0050 004B 0047 0043+  		dc.w  $55,  $50,  $4B,  $47,  $43,  $40,  $3C,  $39
000980B6 0036 0033 0030 002D 002B+  		dc.w  $36,  $33,  $30,  $2D,  $2B,  $28,  $26,  $24
000980C6 0022 0020 001F 001D 001B+  		dc.w  $22,  $20,  $1F,  $1D,  $1B,  $1A,  $18,  $17
000980D6 0016 0015 0013 0012 0011+  		dc.w  $16,  $15,  $13,  $12,  $11,    0
000980E2                            
000980E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000980E2                            
000980E2                            ; sub_72A5A:
000980E2                            CoordFlag:
000980E2 0445 00E0                  		subi.w	#$E0,d5
000980E6 E54D                       		lsl.w	#2,d5
000980E8 4EFB 5000                  		jmp	coordflagLookup(pc,d5.w)
000980EC                            ; End of function CoordFlag
000980EC                            
000980EC                            ; ===========================================================================
000980EC                            ; loc_72A64:
000980EC                            coordflagLookup:
000980EC 6000 0000                  		bra.w	cfPanningAMSFMS		; $E0
000980F0                            ; ===========================================================================
000980F0 6000 0000                  		bra.w	cfDetune		; $E1
000980F4                            ; ===========================================================================
000980F4 6000 0000                  		bra.w	cfSetCommunication	; $E2
000980F8                            ; ===========================================================================
000980F8 6000 0000                  		bra.w	cfJumpReturn		; $E3
000980FC                            ; ===========================================================================
000980FC 6000 0000                  		bra.w	cfFadeInToPrevious	; $E4
00098100                            ; ===========================================================================
00098100 6000 0000                  		bra.w	cfSetTempoDivider	; $E5
00098104                            ; ===========================================================================
00098104 6000 0000                  		bra.w	cfChangeFMVolume	; $E6
00098108                            ; ===========================================================================
00098108 6000 0000                  		bra.w	cfHoldNote		; $E7
0009810C                            ; ===========================================================================
0009810C 6000 0000                  		bra.w	cfNoteTimeout		; $E8
00098110                            ; ===========================================================================
00098110 6000 0000                  		bra.w	cfChangeTransposition	; $E9
00098114                            ; ===========================================================================
00098114 6000 0000                  		bra.w	cfSetTempo		; $EA
00098118                            ; ===========================================================================
00098118 6000 0000                  		bra.w	cfSetTempoDividerAll	; $EB
0009811C                            ; ===========================================================================
0009811C 6000 0000                  		bra.w	cfChangePSGVolume	; $EC
00098120                            ; ===========================================================================
00098120 6000 0000                  		bra.w	cfClearPush		; $ED
00098124                            ; ===========================================================================
00098124 6000 0000                  		bra.w	cfStopSpecialFM4	; $EE
00098128                            ; ===========================================================================
00098128 6000 0000                  		bra.w	cfSetVoice		; $EF
0009812C                            ; ===========================================================================
0009812C 6000 0000                  		bra.w	cfModulation		; $F0
00098130                            ; ===========================================================================
00098130 6000 0000                  		bra.w	cfEnableModulation	; $F1
00098134                            ; ===========================================================================
00098134 6000 0000                  		bra.w	cfStopTrack		; $F2
00098138                            ; ===========================================================================
00098138 6000 0000                  		bra.w	cfSetPSGNoise		; $F3
0009813C                            ; ===========================================================================
0009813C 6000 0000                  		bra.w	cfDisableModulation	; $F4
00098140                            ; ===========================================================================
00098140 6000 0000                  		bra.w	cfSetPSGTone		; $F5
00098144                            ; ===========================================================================
00098144 6000 0000                  		bra.w	cfJumpTo		; $F6
00098148                            ; ===========================================================================
00098148 6000 0000                  		bra.w	cfRepeatAtPos		; $F7
0009814C                            ; ===========================================================================
0009814C 6000 0000                  		bra.w	cfJumpToGosub		; $F8
00098150                            ; ===========================================================================
00098150 6000 0000                  		bra.w	cfOpF9			; $F9
00098154                            ; ===========================================================================
00098154                            ; loc_72ACC:
00098154                            cfPanningAMSFMS:
00098154 121C                       		move.b	(a4)+,d1		; New AMS/FMS/panning value
00098156 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
0009815A 6B00                       		bmi.s	locret_72AEA		; Return if yes
0009815C 102D 000A                  		move.b	TrackAMSFMSPan(a5),d0	; Get current AMS/FMS/panning
00098160 0200 0037                  		andi.b	#$37,d0			; Retain bits 0-2, 3-4 if set
00098164 8200                       		or.b	d0,d1			; Mask in new value
00098166 1B41 000A                  		move.b	d1,TrackAMSFMSPan(a5)	; Store value
0009816A 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
0009816E 6000 FC20                  		bra.w	WriteFMIorIIMain
00098172                            ; ===========================================================================
00098172                            
00098172                            locret_72AEA:
00098172 4E75                       		rts	
00098174                            ; ===========================================================================
00098174                            ; loc_72AEC: cfAlterNotes:
00098174                            cfDetune:
00098174 1B5C 001E                  		move.b	(a4)+,TrackDetune(a5)	; Set detune value
00098178 4E75                       		rts	
0009817A                            ; ===========================================================================
0009817A                            ; loc_72AF2: cfUnknown1:
0009817A                            cfSetCommunication:
0009817A 1D5C 0007                  		move.b	(a4)+,v_communication_byte(a6)	; Set otherwise unused communication byte to parameter
0009817E 4E75                       		rts	
00098180                            ; ===========================================================================
00098180                            ; loc_72AF8:
00098180                            cfJumpReturn:
00098180 7000                       		moveq	#0,d0
00098182 102D 000D                  		move.b	TrackStackPointer(a5),d0 ; Track stack pointer
00098186 2875 0000                  		movea.l	(a5,d0.w),a4		; Set track return address
0009818A 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)		; Set 'popped' value to zero
00098192 544C                       		addq.w	#2,a4			; Skip jump target address from gosub flag
00098194 5800                       		addq.b	#4,d0			; Actually 'pop' value
00098196 1B40 000D                  		move.b	d0,TrackStackPointer(a5) ; Set new stack pointer
0009819A 4E75                       		rts	
0009819C                            ; ===========================================================================
0009819C                            ; loc_72B14:
0009819C                            cfFadeInToPrevious:
0009819C 204E                       		movea.l	a6,a0
0009819E 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
000981A2 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; $220 bytes to restore: all variables and music track data
000981A6                            ; loc_72B1E:
000981A6                            @restoreramloop:
000981A6 20D9                       		move.l	(a1)+,(a0)+
000981A8 51C8 FFFC                  		dbf	d0,@restoreramloop
000981AC                            
000981AC 08EE 0002 0040             		bset	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Set 'SFX overriding' bit
000981B2 264D                       		movea.l	a5,a3
000981B4 1C3C 0028                  		move.b	#$28,d6
000981B8 9C2E 0026                  		sub.b	v_fadein_counter(a6),d6			; If fade already in progress, this adjusts track volume accordingly
000981BC 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
000981BE 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
000981C2                            ; loc_72B3A:
000981C2                            @fmloop:
000981C2 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
000981C6 6700                       		beq.s	@nextfm		; Branch if not
000981C8 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
000981CC DD2D 0009                  		add.b	d6,TrackVolume(a5) ; Apply current volume fade-in
000981D0 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000981D4 6600                       		bne.s	@nextfm		; Branch if yes
000981D6 7000                       		moveq	#0,d0
000981D8 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get voice
000981DC 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
000981E0 4EBA 0000                  		jsr	SetVoice(pc)
000981E4                            ; loc_72B5C:
000981E4                            @nextfm:
000981E4 DAFC 0030                  		adda.w	#TrackSz,a5
000981E8 51CF FFD8                  		dbf	d7,@fmloop
000981EC                            
000981EC 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
000981EE                            ; loc_72B66:
000981EE                            @psgloop:
000981EE 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
000981F2 6700                       		beq.s	@nextpsg	; Branch if not
000981F4 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
000981F8 4EBA FE20                  		jsr	PSGNoteOff(pc)
000981FC DD2D 0009                  		add.b	d6,TrackVolume(a5)	; Apply current volume fade-in
00098200                            ; loc_72B78:
00098200                            @nextpsg:
00098200 DAFC 0030                  		adda.w	#TrackSz,a5
00098204 51CF FFE8                  		dbf	d7,@psgloop
00098208                            		
00098208 2A4B                       		movea.l	a3,a5
0009820A 1D7C 0080 0024             		move.b	#$80,f_fadein_flag(a6)		; Trigger fade-in
00098210 1D7C 0028 0026             		move.b	#$28,v_fadein_counter(a6)	; Fade-in delay
00098216 422E 0027                  		clr.b	f_1up_playing(a6)
0009821A 33FC 0000 00A1 1100        		startZ80
00098222 504F                       		addq.w	#8,sp		; Tamper return value so we don't return to caller
00098224 4E75                       		rts	
00098226                            ; ===========================================================================
00098226                            ; loc_72B9E:
00098226                            cfSetTempoDivider:
00098226 1B5C 0002                  		move.b	(a4)+,TrackTempoDivider(a5)	; Set tempo divider on current track
0009822A 4E75                       		rts	
0009822C                            ; ===========================================================================
0009822C                            ; loc_72BA4: cfSetVolume:
0009822C                            cfChangeFMVolume:
0009822C 101C                       		move.b	(a4)+,d0		; Get parameter
0009822E D12D 0009                  		add.b	d0,TrackVolume(a5)	; Add to current volume
00098232 6000 0000                  		bra.w	SendVoiceTL
00098236                            ; ===========================================================================
00098236                            ; loc_72BAE: cfPreventAttack:
00098236                            cfHoldNote:
00098236 08D5 0004                  		bset	#4,(a5)		; Set 'do not attack next note' bit (TrackPlaybackControl)
0009823A 4E75                       		rts	
0009823C                            ; ===========================================================================
0009823C                            ; loc_72BB4: cfNoteFill
0009823C                            cfNoteTimeout:
0009823C 1B54 0012                  		move.b	(a4),TrackNoteTimeout(a5)		; Note fill timeout
00098240 1B5C 0013                  		move.b	(a4)+,TrackNoteTimeoutMaster(a5)	; Note fill master
00098244 4E75                       		rts	
00098246                            ; ===========================================================================
00098246                            ; loc_72BBE: cfAddKey:
00098246                            cfChangeTransposition:
00098246 101C                       		move.b	(a4)+,d0		; Get parameter
00098248 D12D 0008                  		add.b	d0,TrackTranspose(a5)	; Add to transpose value
0009824C 4E75                       		rts	
0009824E                            ; ===========================================================================
0009824E                            ; loc_72BC6:
0009824E                            cfSetTempo:
0009824E 1D54 0002                  		move.b	(a4),v_main_tempo(a6)		; Set main tempo
00098252 1D5C 0001                  		move.b	(a4)+,v_main_tempo_timeout(a6)	; And reset timeout (!)
00098256 4E75                       		rts	
00098258                            ; ===========================================================================
00098258                            ; loc_72BD0: cfSetTempoMod:
00098258                            cfSetTempoDividerAll:
00098258 41EE 0040                  		lea	v_music_track_ram(a6),a0
0009825C 101C                       		move.b	(a4)+,d0			; Get new tempo divider
0009825E 7230                       		moveq	#TrackSz,d1
00098260 7409                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d2	; 1 DAC + 6 FM + 3 PSG tracks
00098262                            ; loc_72BDA:
00098262                            @trackloop:
00098262 1140 0002                  		move.b	d0,TrackTempoDivider(a0)	; Set track's tempo divider
00098266 D0C1                       		adda.w	d1,a0
00098268 51CA FFF8                  		dbf	d2,@trackloop
0009826C                            
0009826C 4E75                       		rts	
0009826E                            ; ===========================================================================
0009826E                            ; loc_72BE6: cfChangeVolume:
0009826E                            cfChangePSGVolume:
0009826E 101C                       		move.b	(a4)+,d0		; Get volume change
00098270 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Apply it
00098274 4E75                       		rts	
00098276                            ; ===========================================================================
00098276                            ; loc_72BEE:
00098276                            cfClearPush:
00098276 422E 002C                  		clr.b	f_push_playing(a6)	; Allow push sound to be played once more
0009827A 4E75                       		rts	
0009827C                            ; ===========================================================================
0009827C                            ; loc_72BF4:
0009827C                            cfStopSpecialFM4:
0009827C 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00098280 0895 0004                  		bclr	#4,(a5)		; Clear 'do not attack next note' bit (TrackPlaybackControl)
00098284 4EBA FAF2                  		jsr	FMNoteOff(pc)
00098288 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is SFX using FM4?
0009828C 6B00                       		bmi.s	@locexit					; Branch if yes
0009828E 264D                       		movea.l	a5,a3
00098290 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00098294 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00098298 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
0009829C 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000982A0 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
000982A4 4EBA 0000                  		jsr	SetVoice(pc)
000982A8 2A4B                       		movea.l	a3,a5
000982AA                            ; loc_72C22:
000982AA                            @locexit:
000982AA 504F                       		addq.w	#8,sp		; Tamper with return value so we don't return to caller
000982AC 4E75                       		rts	
000982AE                            ; ===========================================================================
000982AE                            ; loc_72C26:
000982AE                            cfSetVoice:
000982AE 7000                       		moveq	#0,d0
000982B0 101C                       		move.b	(a4)+,d0		; Get new voice
000982B2 1B40 000B                  		move.b	d0,TrackVoiceIndex(a5)	; Store it
000982B6 0815 0002                  		btst	#2,(a5)			; Is SFX overriding this track? (TrackPlaybackControl)
000982BA 6600 0000                  		bne.w	locret_72CAA		; Return if yes
000982BE 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Music voice pointer
000982C2 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a music track?
000982C6 6700                       		beq.s	SetVoice		; If yes, branch
000982C8 226D 0020                  		movea.l	TrackVoicePtr(a5),a1	; SFX track voice pointer
000982CC 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a SFX track?
000982D0 6B00                       		bmi.s	SetVoice		; If yes, branch
000982D2 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1 ; Special SFX voice pointer
000982D6                            
000982D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000982D6                            
000982D6                            ; sub_72C4E:
000982D6                            SetVoice:
000982D6 5340                       		subq.w	#1,d0
000982D8 6B00                       		bmi.s	@havevoiceptr
000982DA 323C 0019                  		move.w	#25,d1
000982DE                            ; loc_72C56:
000982DE                            @voicemultiply:
000982DE D2C1                       		adda.w	d1,a1
000982E0 51C8 FFFC                  		dbf	d0,@voicemultiply
000982E4                            ; loc_72C5C:
000982E4                            @havevoiceptr:
000982E4 1219                       		move.b	(a1)+,d1		; feedback/algorithm
000982E6 1B41 001F                  		move.b	d1,TrackFeedbackAlgo(a5) ; Save it to track RAM
000982EA 1801                       		move.b	d1,d4
000982EC 103C 00B0                  		move.b	#$B0,d0			; Command to write feedback/algorithm
000982F0 4EBA FAAA                  		jsr	WriteFMIorII(pc)
000982F4 45FA 0000                  		lea	FMInstrumentOperatorTable(pc),a2
000982F8 7600                       		moveq	#(FMInstrumentOperatorTable_End-FMInstrumentOperatorTable)-1,d3		; Don't want to send TL yet
000982FA                            ; loc_72C72:
000982FA                            @sendvoiceloop:
000982FA 101A                       		move.b	(a2)+,d0
000982FC 1219                       		move.b	(a1)+,d1
000982FE 4EBA FA9C                  		jsr	WriteFMIorII(pc)
00098302 51CB FFF6                  		dbf	d3,@sendvoiceloop
00098306                            
00098306 7A03                       		moveq	#3,d5
00098308 0244 0007                  		andi.w	#7,d4			; Get algorithm
0009830C 183B 4000                  		move.b	FMSlotMask(pc,d4.w),d4	; Get slot mask for algorithm
00098310 162D 0009                  		move.b	TrackVolume(a5),d3	; Track volume attenuation
00098314                            ; loc_72C8C:
00098314                            @sendtlloop:
00098314 101A                       		move.b	(a2)+,d0
00098316 1219                       		move.b	(a1)+,d1
00098318 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
0009831A 6400                       		bcc.s	@sendtl		; Branch if not
0009831C D203                       		add.b	d3,d1		; Include additional attenuation
0009831E                            ; loc_72C96:
0009831E                            @sendtl:
0009831E 4EBA FA7C                  		jsr	WriteFMIorII(pc)
00098322 51CD FFF0                  		dbf	d5,@sendtlloop
00098326                            		
00098326 103C 00B4                  		move.b	#$B4,d0			; Register for AMS/FMS/Panning
0009832A 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Value to send
0009832E 4EBA FA6C                  		jsr	WriteFMIorII(pc) 	; (It would be better if this were a jmp)
00098332                            
00098332                            locret_72CAA:
00098332 4E75                       		rts	
00098334                            ; End of function SetVoice
00098334                            
00098334                            ; ===========================================================================
00098334                            ; byte_72CAC:
00098334 0808 0808 0A0E 0E0F        FMSlotMask:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0009833C                            
0009833C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009833C                            
0009833C                            ; sub_72CB4:
0009833C                            SendVoiceTL:
0009833C 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00098340 6600                       		bne.s	@locret		; Return if so
00098342 7000                       		moveq	#0,d0
00098344 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00098348 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
0009834C 4A2E 000E                  		tst.b	f_voice_selector(a6)
00098350 6700                       		beq.s	@gotvoiceptr
00098352                            		; DANGER! This uploads the wrong voice! It should have been a5 instead
00098352                            		; of a6!
00098352 226D 0020                  		movea.l	TrackVoicePtr(a5),a1
00098356 4A2E 000E                  		tst.b	f_voice_selector(a6)
0009835A 6B00                       		bmi.s	@gotvoiceptr
0009835C 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1
00098360                            ; loc_72CD8:
00098360                            @gotvoiceptr:
00098360 5340                       		subq.w	#1,d0
00098362 6B00                       		bmi.s	@gotvoice
00098364 323C 0019                  		move.w	#25,d1
00098368                            ; loc_72CE0:
00098368                            @voicemultiply:
00098368 D2C1                       		adda.w	d1,a1
0009836A 51C8 FFFC                  		dbf	d0,@voicemultiply
0009836E                            ; loc_72CE6:
0009836E                            @gotvoice:
0009836E D2FC 0015                  		adda.w	#21,a1				; Want TL
00098372 45FA 0000                  		lea	FMInstrumentTLTable(pc),a2
00098376 102D 001F                  		move.b	TrackFeedbackAlgo(a5),d0	; Get feedback/algorithm
0009837A 0240 0007                  		andi.w	#7,d0				; Want only algorithm
0009837E 183B 00B4                  		move.b	FMSlotMask(pc,d0.w),d4		; Get slot mask
00098382 162D 0009                  		move.b	TrackVolume(a5),d3		; Get track volume attenuation
00098386 6B00                       		bmi.s	@locret				; If negative, stop
00098388 7A00                       		moveq	#(FMInstrumentTLTable_End-FMInstrumentTLTable)-1,d5
0009838A                            ; loc_72D02:
0009838A                            @sendtlloop:
0009838A 101A                       		move.b	(a2)+,d0
0009838C 1219                       		move.b	(a1)+,d1
0009838E E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00098390 6400                       		bcc.s	@senttl		; Branch if not
00098392 D203                       		add.b	d3,d1		; Include additional attenuation
00098394 6500                       		bcs.s	@senttl		; Branch on overflow
00098396 4EBA FA04                  		jsr	WriteFMIorII(pc)
0009839A                            ; loc_72D12:
0009839A                            @senttl:
0009839A 51CD FFEE                  		dbf	d5,@sendtlloop
0009839E                            ; locret_72D16:
0009839E                            @locret:
0009839E 4E75                       		rts	
000983A0                            ; End of function SendVoiceTL
000983A0                            
000983A0                            ; ===========================================================================
000983A0                            ; byte_72D18:
000983A0                            FMInstrumentOperatorTable:
000983A0 30                         		dc.b  $30		; Detune/multiple operator 1
000983A1 38                         		dc.b  $38		; Detune/multiple operator 3
000983A2 34                         		dc.b  $34		; Detune/multiple operator 2
000983A3 3C                         		dc.b  $3C		; Detune/multiple operator 4
000983A4 50                         		dc.b  $50		; Rate scalling/attack rate operator 1
000983A5 58                         		dc.b  $58		; Rate scalling/attack rate operator 3
000983A6 54                         		dc.b  $54		; Rate scalling/attack rate operator 2
000983A7 5C                         		dc.b  $5C		; Rate scalling/attack rate operator 4
000983A8 60                         		dc.b  $60		; Amplitude modulation/first decay rate operator 1
000983A9 68                         		dc.b  $68		; Amplitude modulation/first decay rate operator 3
000983AA 64                         		dc.b  $64		; Amplitude modulation/first decay rate operator 2
000983AB 6C                         		dc.b  $6C		; Amplitude modulation/first decay rate operator 4
000983AC 70                         		dc.b  $70		; Secondary decay rate operator 1
000983AD 78                         		dc.b  $78		; Secondary decay rate operator 3
000983AE 74                         		dc.b  $74		; Secondary decay rate operator 2
000983AF 7C                         		dc.b  $7C		; Secondary decay rate operator 4
000983B0 80                         		dc.b  $80		; Secondary amplitude/release rate operator 1
000983B1 88                         		dc.b  $88		; Secondary amplitude/release rate operator 3
000983B2 84                         		dc.b  $84		; Secondary amplitude/release rate operator 2
000983B3 8C                         		dc.b  $8C		; Secondary amplitude/release rate operator 4
000983B4                            FMInstrumentOperatorTable_End
000983B4                            ; byte_72D2C:
000983B4                            FMInstrumentTLTable:
000983B4 40                         		dc.b  $40		; Total level operator 1
000983B5 48                         		dc.b  $48		; Total level operator 3
000983B6 44                         		dc.b  $44		; Total level operator 2
000983B7 4C                         		dc.b  $4C		; Total level operator 4
000983B8                            FMInstrumentTLTable_End
000983B8                            ; ===========================================================================
000983B8                            ; loc_72D30:
000983B8                            cfModulation:
000983B8 08D5 0003                  		bset	#3,(a5)				; Turn on modulation (TrackPlaybackControl)
000983BC 2B4C 0014                  		move.l	a4,TrackModulationPtr(a5)	; Save pointer to modulation data
000983C0 1B5C 0018                  		move.b	(a4)+,TrackModulationWait(a5)	; Modulation delay
000983C4 1B5C 0019                  		move.b	(a4)+,TrackModulationSpeed(a5)	; Modulation speed
000983C8 1B5C 001A                  		move.b	(a4)+,TrackModulationDelta(a5)	; Modulation delta
000983CC 101C                       		move.b	(a4)+,d0			; Modulation steps...
000983CE E208                       		lsr.b	#1,d0				; ... divided by 2...
000983D0 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; ... before being stored
000983D4 426D 001C                  		clr.w	TrackModulationVal(a5)		; Total accumulated modulation frequency change
000983D8 4E75                       		rts	
000983DA                            ; ===========================================================================
000983DA                            ; loc_72D52:
000983DA                            cfEnableModulation:
000983DA 08D5 0003                  		bset	#3,(a5)		; Turn on modulation (TrackPlaybackControl)
000983DE 4E75                       		rts	
000983E0                            ; ===========================================================================
000983E0                            ; loc_72D58:
000983E0                            cfStopTrack:
000983E0 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
000983E4 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
000983E8 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
000983EC 6B00                       		bmi.s	@stoppsg		; Branch if yes
000983EE 4A2E 0008                  		tst.b	f_updating_dac(a6)	; Is this the DAC we are updating?
000983F2 6B00 0000                  		bmi.w	@locexit		; Exit if yes
000983F6 4EBA F980                  		jsr	FMNoteOff(pc)
000983FA 6000                       		bra.s	@stoppedchannel
000983FC                            ; ===========================================================================
000983FC                            ; loc_72D74:
000983FC                            @stoppsg:
000983FC 4EBA FC1C                  		jsr	PSGNoteOff(pc)
00098400                            ; loc_72D78:
00098400                            @stoppedchannel:
00098400 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating SFX?
00098404 6A00 0000                  		bpl.w	@locexit		; Exit if not
00098408 4216                       		clr.b	v_sndprio(a6)		; Clear priority
0009840A 7000                       		moveq	#0,d0
0009840C 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get voice control bits
00098410 6B00                       		bmi.s	@getpsgptr		; Branch if PSG
00098412 41FA F536                  		lea	SFX_BGMChannelRAM(pc),a0
00098416 264D                       		movea.l	a5,a3
00098418 0C00 0004                  		cmpi.b	#4,d0			; Is this FM4?
0009841C 6600                       		bne.s	@getpointer		; Branch if not
0009841E 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00098422 6A00                       		bpl.s	@getpointer		; Branch if not
00098424 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00098428 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get voice pointer
0009842C 6000                       		bra.s	@gotpointer
0009842E                            ; ===========================================================================
0009842E                            ; loc_72DA8:
0009842E                            @getpointer:
0009842E 5500                       		subq.b	#2,d0		; SFX can only use FM3 and up
00098430 E508                       		lsl.b	#2,d0
00098432 2A70 0000                  		movea.l	(a0,d0.w),a5
00098436 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00098438 6A00                       		bpl.s	@novoiceupd		; Branch if not
0009843A 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get voice pointer
0009843E                            ; loc_72DB8:
0009843E                            @gotpointer:
0009843E 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX overriding' bit (TrackPlaybackControl)
00098442 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00098446 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
0009844A 4EBA FE8A                  		jsr	SetVoice(pc)
0009844E                            ; loc_72DC8:
0009844E                            @novoiceupd:
0009844E 2A4B                       		movea.l	a3,a5
00098450 6000                       		bra.s	@locexit
00098452                            ; ===========================================================================
00098452                            ; loc_72DCC:
00098452                            @getpsgptr:
00098452 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00098456 4A10                       		tst.b	(a0)		; Is track playing? (TrackPlaybackControl)
00098458 6A00                       		bpl.s	@getchannelptr	; Branch if not
0009845A 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it the noise channel?
0009845E 6700                       		beq.s	@gotchannelptr	; Branch if yes
00098460 0C00 00C0                  		cmpi.b	#$C0,d0		; Is it PSG 3?
00098464 6700                       		beq.s	@gotchannelptr	; Branch if yes
00098466                            ; loc_72DE0:
00098466                            @getchannelptr:
00098466 41FA F4E2                  		lea	SFX_BGMChannelRAM(pc),a0
0009846A E608                       		lsr.b	#3,d0
0009846C 2070 0000                  		movea.l	(a0,d0.w),a0
00098470                            ; loc_72DEA:
00098470                            @gotchannelptr:
00098470 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX overriding' bit (TrackPlaybackControl)
00098474 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00098478 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise pointer?
0009847E 6600                       		bne.s	@locexit			; Branch if not
00098480 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise tone
00098488                            ; loc_72E02:
00098488                            @locexit:
00098488 504F                       		addq.w	#8,sp		; Tamper with return value so we don't go back to caller
0009848A 4E75                       		rts	
0009848C                            ; ===========================================================================
0009848C                            ; loc_72E06:
0009848C                            cfSetPSGNoise:
0009848C 1B7C 00E0 0001             		move.b	#$E0,TrackVoiceControl(a5)	; Turn channel into noise channel
00098492 1B5C 001F                  		move.b	(a4)+,TrackPSGNoise(a5)	; Save noise tone
00098496 0815 0002                  		btst	#2,(a5)				; Is track being overridden? (TrackPlaybackControl)
0009849A 6600                       		bne.s	@locret				; Return if yes
0009849C 13EC FFFF 00C0 0011        		move.b	-1(a4),(psg_input).l		; Set tone
000984A4                            ; locret_72E1E:
000984A4                            @locret:
000984A4 4E75                       		rts	
000984A6                            ; ===========================================================================
000984A6                            ; loc_72E20:
000984A6                            cfDisableModulation:
000984A6 0895 0003                  		bclr	#3,(a5)		; Disable modulation (TrackPlaybackControl)
000984AA 4E75                       		rts	
000984AC                            ; ===========================================================================
000984AC                            ; loc_72E26:
000984AC                            cfSetPSGTone:
000984AC 1B5C 000B                  		move.b	(a4)+,TrackVoiceIndex(a5)	; Set current PSG tone
000984B0 4E75                       		rts	
000984B2                            ; ===========================================================================
000984B2                            ; loc_72E2C:
000984B2                            cfJumpTo:
000984B2 101C                       		move.b	(a4)+,d0	; High byte of offset
000984B4 E148                       		lsl.w	#8,d0		; Shift it into place
000984B6 101C                       		move.b	(a4)+,d0	; Low byte of offset
000984B8 D8C0                       		adda.w	d0,a4		; Add to current position
000984BA 534C                       		subq.w	#1,a4		; Put back one byte
000984BC 4E75                       		rts	
000984BE                            ; ===========================================================================
000984BE                            ; loc_72E38:
000984BE                            cfRepeatAtPos:
000984BE 7000                       		moveq	#0,d0
000984C0 101C                       		move.b	(a4)+,d0			; Loop index
000984C2 121C                       		move.b	(a4)+,d1			; Repeat count
000984C4 4A35 0024                  		tst.b	TrackLoopCounters(a5,d0.w)	; Has this loop already started?
000984C8 6600                       		bne.s	@loopexists			; Branch if yes
000984CA 1B81 0024                  		move.b	d1,TrackLoopCounters(a5,d0.w)	; Initialize repeat count
000984CE                            ; loc_72E48:
000984CE                            @loopexists:
000984CE 5335 0024                  		subq.b	#1,TrackLoopCounters(a5,d0.w)	; Decrease loop's repeat count
000984D2 66DE                       		bne.s	cfJumpTo			; If nonzero, branch to target
000984D4 544C                       		addq.w	#2,a4				; Skip target address
000984D6 4E75                       		rts	
000984D8                            ; ===========================================================================
000984D8                            ; loc_72E52:
000984D8                            cfJumpToGosub:
000984D8 7000                       		moveq	#0,d0
000984DA 102D 000D                  		move.b	TrackStackPointer(a5),d0	; Current stack pointer
000984DE 5900                       		subq.b	#4,d0				; Add space for another target
000984E0 2B8C 0000                  		move.l	a4,(a5,d0.w)			; Put in current address (*before* target for jump!)
000984E4 1B40 000D                  		move.b	d0,TrackStackPointer(a5)	; Store new stack pointer
000984E8 60C8                       		bra.s	cfJumpTo
000984EA                            ; ===========================================================================
000984EA                            ; loc_72E64:
000984EA                            cfOpF9:
000984EA 103C 0088                  		move.b	#$88,d0		; D1L/RR of Operator 3
000984EE 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
000984F2 4EBA F8B4                  		jsr	WriteFMI(pc)
000984F6 103C 008C                  		move.b	#$8C,d0		; D1L/RR of Operator 4
000984FA 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
000984FE 6000 F8A8                  		bra.w	WriteFMI
00098502                            ; ===========================================================================
00098502                            
00098502                            Kos_Z80:
00098502                            		incbin	"sound\z80.bin", 0, $15
00098517 00                         		dc.b ((SegaPCM&$FF8000)/$8000)&1						; Least bit of bank ID (bit 15 of address)
00098518                            		incbin	"sound\z80.bin", $16, 6
0009851E 00                         		dc.b ((SegaPCM&$FF8000)/$8000)>>1						; ... the remaining bits of bank ID (bits 16-23)
0009851F                            		incbin	"sound\z80.bin", $1D, $93
000985B2 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$7F00)>>8)|$80				; Pointer to Sega PCM, relative to start of ROM bank (i.e., little_endian($8000 + SegaPCM&$7FFF)
000985B4                            		incbin	"sound\z80.bin", $B2, 1
000985B5 0000                       		dc.w (((SegaPCM_End-SegaPCM)&$FF)<<8)+(((SegaPCM_End-SegaPCM)&$FF00)>>8)	; ... the size of the Sega PCM (little endian)
000985B7                            		incbin	"sound\z80.bin", $B5, $16AB
00099C58                            		even
00099C58                            
00099C58                            Music81:	incbin	"sound/music/Mus81 - GHZ.bin"
0009AF7C 00                         		even
0009AF7C                            Music82:	incbin	"sound/music/Mus82 - LZ.bin"
0009C804                            		even
0009C804                            Music83:	incbin	"sound/music/Mus83 - MZ.bin"
000A4184 00                         		even
000A4184                            Music84:	incbin	"sound/music/Mus84 - SLZ.bin"
000A5998 00                         		even
000A5998                            Music85:	incbin	"sound/music/Mus85 - SYZ.bin"
000A673E                            		even
000A673E                            Music86:	incbin	"sound/music/Mus86 - SBZ.bin"
000A7AF6                            		even
000A7AF6                            Music87:	incbin	"sound/music/Mus87 - Invincibility.bin"
000A83EE 00                         		even
000A83EE                            Music88:	include	"sound/music/Mus88 - Extra Life.asm"
000A83EE                            extralifejingle_Header:
000A83EE                            	smpsHeaderStartSong 1
000A83F0 0703                       	smpsHeaderChan      $07, $03
000A83F2 0100                       	smpsHeaderTempo     $01, $00
000A83F4                            
000A83F8 0000 0000                  	smpsHeaderFM        extralifejingle_FM1,	$00, $00
000A83FC 0000 0000                  	smpsHeaderFM        extralifejingle_FM2,	$00, $00
000A8400 0000 0000                  	smpsHeaderFM        extralifejingle_FM3,	$00, $00
000A8404 0000 0000                  	smpsHeaderFM        extralifejingle_FM4,	$00, $00
000A8408 0000 0000                  	smpsHeaderFM        extralifejingle_FM5,	$00, $00
000A840C 0000 0000                  	smpsHeaderFM        extralifejingle_FM6,	$00, $00
000A8422                            
000A8422                            ; DAC Data
000A8422                            extralifejingle_DAC:
000A8422 807F 55                    	dc.b	nRst, $7F, $55
000A8425 E4                         	smpsFade
000A8426                            ; PSG1 Data
000A8426                            extralifejingle_PSG1:
000A8426                            ; PSG2 Data
000A8426                            extralifejingle_PSG2:
000A8426                            ; PSG3 Data
000A8426                            extralifejingle_PSG3:
000A8426 F2                         	smpsStop
000A8427                            
000A8427                            ; FM1 Data
000A8427                            extralifejingle_FM1:
000A8427 EF00                       	smpsSetvoice        $00
000A8429 E616                       	smpsAlterVol        $16
000A842B E0C0                       	smpsPan             panCenter, $00
000A842D A61A BC13 BB12 B913 B60D+  	dc.b	nCs3, $1A, nB4, $13, nBb4, $12, nAb4, $13, nF4, $0D, nG3, $2C
000A8439 AC06 800C                  	dc.b	nG3, $06, nRst, $0C
000A843D F2                         	smpsStop
000A843E                            
000A843E                            ; FM2 Data
000A843E                            extralifejingle_FM2:
000A843E EF01                       	smpsSetvoice        $01
000A8440 E616                       	smpsAlterVol        $16
000A8442 E0C0                       	smpsPan             panCenter, $00
000A8444 B61A AD13 AB12 AA13 A60D+  	dc.b	nF4, $1A, nAb3, $13, nFs3, $12, nF3, $13, nCs3, $0D, nA2, $2C
000A8450 A206 800C                  	dc.b	nA2, $06, nRst, $0C
000A8454 F2                         	smpsStop
000A8455                            
000A8455                            ; FM3 Data
000A8455                            extralifejingle_FM3:
000A8455 EF01                       	smpsSetvoice        $01
000A8457 E616                       	smpsAlterVol        $16
000A8459 E0C0                       	smpsPan             panCenter, $00
000A845B AD0D BC13 B9B7 B60C B20D+  	dc.b	nAb3, $0D, nB4, $13, nAb4, nFs4, nF4, $0C, nCs4, $0D, nC4, $2C
000A8467 B106 800C                  	dc.b	nC4, $06, nRst, $0C
000A846B F2                         	smpsStop
000A846C                            
000A846C                            ; FM4 Data
000A846C                            extralifejingle_FM4:
000A846C EF02                       	smpsSetvoice        $02
000A846E E0C0                       	smpsPan             panCenter, $00
000A8470 8001                       	dc.b	nRst, $01
000A8472 E616                       	smpsAlterVol        $16
000A8474 BE0C B913 ABAA A60C A20D+  	dc.b	nCs5, $0C, nAb4, $13, nFs3, nF3, nCs3, $0C, nA2, $0D, nE5, $2C
000A8480 C106 800C                  	dc.b	nE5, $06, nRst, $0C
000A8484 F2                         	smpsStop
000A8485                            
000A8485                            ; FM5 Data
000A8485                            extralifejingle_FM5:
000A8485 EF03                       	smpsSetvoice        $03
000A8487 E602                       	smpsAlterVol        $02
000A8489 E0C0                       	smpsPan             panCenter, $00
000A848B 8001                       	dc.b	nRst, $01
000A848D EF05                       	smpsSetvoice        $05
000A848F E60A                       	smpsAlterVol        $0A
000A8491 E780 0CC8 06B2 07B9 06C7+  	dc.b	smpsNoAttack, nRst, $0C, nB5, $06, nCs4, $07, nAb4, $06, nBb5, nCs4, $07
000A849D B706 C5C8 B607 C206 B2BE+  	dc.b	nFs4, $06, nAb5, nB5, nF4, $07, nF5, $06, nCs4, nCs5, $07, nA5
000A84A9 06BD C1C4 07BD 06C1 C407+  	dc.b	$06, nC5, nE5, nG5, $07, nC5, $06, nE5, nG5, $07, nC5, $06
000A84B5 C1C4 80                    	dc.b	nE5, nG5, nRst
000A84B8 F2                         	smpsStop
000A84B9                            
000A84B9                            ; FM6 Data
000A84B9                            extralifejingle_FM6:
000A84B9 EF04                       	smpsSetvoice        $04
000A84BB E607                       	smpsAlterVol        $07
000A84BD E0C0                       	smpsPan             panCenter, $00
000A84BF 8001                       	dc.b	nRst, $01
000A84C1 EF06                       	smpsSetvoice        $06
000A84C3 E6F9                       	smpsAlterVol        $F9
000A84C5 A658 A72C A70C 80          	dc.b	nCs3, $58, nD3, $2C, nD3, $0C, nRst
000A84CC F2                         	smpsStop
000A84CD                            
000A84CD                            extralifejingle_Voices:
000A84CD                            ;	Voice $00
000A84CD                            ;	$3A
000A84CD                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000A84CD                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000A84CD                            	smpsVcAlgorithm     $02
000A84CD                            	smpsVcFeedback      $07
000A84CD                            	smpsVcUnusedBits    $00
000A84CD                            	smpsVcDetune        $03, $07, $07, $03
000A84CD                            	smpsVcCoarseFreq    $01, $04, $03, $04
000A84CD                            	smpsVcRateScale     $00, $00, $00, $00
000A84CD                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A84CD                            	smpsVcAmpMod        $00, $00, $00, $00
000A84CD                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000A84CD                            	smpsVcDecayRate2    $00, $00, $00, $00
000A84CD                            	smpsVcDecayLevel    $00, $00, $00, $00
000A84CD                            	smpsVcReleaseRate   $05, $03, $03, $03
000A84E6                            
000A84E6                            ;	Voice $01
000A84E6                            ;	$3A
000A84E6                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000A84E6                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000A84E6                            	smpsVcAlgorithm     $02
000A84E6                            	smpsVcFeedback      $07
000A84E6                            	smpsVcUnusedBits    $00
000A84E6                            	smpsVcDetune        $03, $07, $07, $03
000A84E6                            	smpsVcCoarseFreq    $01, $04, $03, $04
000A84E6                            	smpsVcRateScale     $00, $00, $00, $00
000A84E6                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A84E6                            	smpsVcAmpMod        $00, $00, $00, $00
000A84E6                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000A84E6                            	smpsVcDecayRate2    $00, $00, $00, $00
000A84E6                            	smpsVcDecayLevel    $00, $00, $00, $00
000A84E6                            	smpsVcReleaseRate   $05, $03, $03, $03
000A84FF                            
000A84FF                            ;	Voice $02
000A84FF                            ;	$3A
000A84FF                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000A84FF                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000A84FF                            	smpsVcAlgorithm     $02
000A84FF                            	smpsVcFeedback      $07
000A84FF                            	smpsVcUnusedBits    $00
000A84FF                            	smpsVcDetune        $03, $07, $07, $03
000A84FF                            	smpsVcCoarseFreq    $01, $04, $03, $04
000A84FF                            	smpsVcRateScale     $00, $00, $00, $00
000A84FF                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A84FF                            	smpsVcAmpMod        $00, $00, $00, $00
000A84FF                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000A84FF                            	smpsVcDecayRate2    $00, $00, $00, $00
000A84FF                            	smpsVcDecayLevel    $00, $00, $00, $00
000A84FF                            	smpsVcReleaseRate   $05, $03, $03, $03
000A8518                            
000A8518                            ;	Voice $03
000A8518                            ;	$00
000A8518                            ;	$01, $0E, $00, $00, 	$1E, $1E, $1E, $1D, 	$1A, $1C, $10, $10
000A8518                            ;	$00, $00, $00, $00, 	$FD, $FE, $F8, $F8, 	$1A, $25, $05, $00
000A8518                            	smpsVcAlgorithm     $00
000A8518                            	smpsVcFeedback      $00
000A8518                            	smpsVcUnusedBits    $00
000A8518                            	smpsVcDetune        $00, $00, $00, $00
000A8518                            	smpsVcCoarseFreq    $00, $00, $0E, $01
000A8518                            	smpsVcRateScale     $00, $00, $00, $00
000A8518                            	smpsVcAttackRate    $1D, $1E, $1E, $1E
000A8518                            	smpsVcAmpMod        $00, $00, $00, $00
000A8518                            	smpsVcDecayRate1    $10, $10, $1C, $1A
000A8518                            	smpsVcDecayRate2    $00, $00, $00, $00
000A8518                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A8518                            	smpsVcReleaseRate   $08, $08, $0E, $0D
000A8531                            
000A8531                            ;	Voice $04
000A8531                            ;	$03
000A8531                            ;	$66, $40, $40, $31, 	$1F, $1F, $1F, $1C, 	$0E, $05, $02, $01
000A8531                            ;	$01, $00, $04, $06, 	$AA, $6A, $16, $18, 	$2A, $1A, $20, $00
000A8531                            	smpsVcAlgorithm     $03
000A8531                            	smpsVcFeedback      $00
000A8531                            	smpsVcUnusedBits    $00
000A8531                            	smpsVcDetune        $03, $04, $04, $06
000A8531                            	smpsVcCoarseFreq    $01, $00, $00, $06
000A8531                            	smpsVcRateScale     $00, $00, $00, $00
000A8531                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
000A8531                            	smpsVcAmpMod        $00, $00, $00, $00
000A8531                            	smpsVcDecayRate1    $01, $02, $05, $0E
000A8531                            	smpsVcDecayRate2    $06, $04, $00, $01
000A8531                            	smpsVcDecayLevel    $01, $01, $06, $0A
000A8531                            	smpsVcReleaseRate   $08, $06, $0A, $0A
000A854A                            
000A854A                            ;	Voice $05
000A854A                            ;	$34
000A854A                            ;	$33, $7E, $01, $74, 	$9B, $1F, $5F, $1F, 	$14, $07, $07, $08
000A854A                            ;	$00, $00, $00, $00, 	$F6, $E4, $F7, $F7, 	$19, $71, $00, $00
000A854A                            	smpsVcAlgorithm     $04
000A854A                            	smpsVcFeedback      $06
000A854A                            	smpsVcUnusedBits    $00
000A854A                            	smpsVcDetune        $07, $00, $07, $03
000A854A                            	smpsVcCoarseFreq    $04, $01, $0E, $03
000A854A                            	smpsVcRateScale     $00, $01, $00, $02
000A854A                            	smpsVcAttackRate    $1F, $1F, $1F, $1B
000A854A                            	smpsVcAmpMod        $00, $00, $00, $00
000A854A                            	smpsVcDecayRate1    $08, $07, $07, $14
000A854A                            	smpsVcDecayRate2    $00, $00, $00, $00
000A854A                            	smpsVcDecayLevel    $0F, $0F, $0E, $0F
000A854A                            	smpsVcReleaseRate   $07, $07, $04, $06
000A8563                            
000A8563                            ;	Voice $06
000A8563                            ;	$30
000A8563                            ;	$01, $00, $00, $01, 	$9F, $1F, $1F, $5C, 	$0F, $0D, $10, $14
000A8563                            ;	$08, $18, $05, $08, 	$6F, $00, $0F, $18, 	$15, $1F, $19, $00
000A8563                            	smpsVcAlgorithm     $00
000A8563                            	smpsVcFeedback      $06
000A8563                            	smpsVcUnusedBits    $00
000A8563                            	smpsVcDetune        $00, $00, $00, $00
000A8563                            	smpsVcCoarseFreq    $01, $00, $00, $01
000A8563                            	smpsVcRateScale     $01, $00, $00, $02
000A8563                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
000A8563                            	smpsVcAmpMod        $00, $00, $00, $00
000A8563                            	smpsVcDecayRate1    $14, $10, $0D, $0F
000A8563                            	smpsVcDecayRate2    $08, $05, $18, $08
000A8563                            	smpsVcDecayLevel    $01, $00, $00, $06
000A8563                            	smpsVcReleaseRate   $08, $0F, $00, $0F
000A857C                            
000A857C                            
000A857C                            		even
000A857C                            Music89:	incbin	"sound/music/Mus89 - Special Stage.bin"
000A8DD4 00                         		even
000A8DD4                            Music8A:	incbin	"sound/music/Mus8A - Title Screen.bin"
000A92F4                            		even
000A92F4                            Music8B:	incbin	"sound/music/Mus8B - Ending.bin"
000A95B6 00                         		even
000A95B6                            Music8C:	incbin	"sound/music/Mus8C - Boss.bin"
000AA40E                            		even
000AA40E                            Music8D:	incbin	"sound/music/Mus8D - FZ.bin"
000AA65A 00                         		even
000AA65A                            Music8E:	incbin	"sound/music/Mus8E - Sonic Got Through.bin"
000AA990 00                         		even
000AA990                            Music8F:	incbin	"sound/music/Mus8F - Game Over.bin"
000AAB3C 00                         		even
000AAB3C                            Music90:	incbin	"sound/music/Mus90 - Continue Screen.bin"
000AAD4A 00                         		even
000AAD4A                            Music91:	incbin	"sound/music/Mus91 - Credits.bin"
000AB02E 00                         		even
000AB02E                            Music92:	incbin	"sound/music/Mus92 - Drowning.bin"
000AB75E 00                         		even
000AB75E                            Music93:	incbin	"sound/music/Mus93 - Get Emerald.bin"
000AB82C                            		even
000AB82C                            Music94:	incbin	"sound/music/Mus94 - Final Boss Pinch.bin"
000ABC9A 00                         		even
000ABC9A                            Music95:		incbin	"sound/music/Mus95 - Seaside Front.bin"
000AC790                            		even
000AC790                            Music96:		incbin	"sound/music/Mus96 - Big Water.bin"
000AD2E6                            		even
000AD2E6                            Music97:		incbin	"sound/music/Mus97 - Granada Game Over.bin"
000AE5EC 00                         		even
000AE5EC                            Music98:		include	"sound/music/Mus98 - Options Theme.asm"
000AE5EC                            PasswordEntry_Header:
000AE5EC                            	smpsHeaderStartSong 3
000AE5EE 0603                       	smpsHeaderChan      $06, $03
000AE5F0 0105                       	smpsHeaderTempo     $01, $05
000AE5F2                            
000AE5F6 0000 0013                  	smpsHeaderFM        PasswordEntry_FM1,	$00, $13
000AE5FA 0000 F40B                  	smpsHeaderFM        PasswordEntry_FM2,	$F4, $0B
000AE5FE 0000 000F                  	smpsHeaderFM        PasswordEntry_FM3,	$00, $0F
000AE602 0000 000F                  	smpsHeaderFM        PasswordEntry_FM4,	$00, $0F
000AE606 0000 001D                  	smpsHeaderFM        PasswordEntry_FM5,	$00, $1D
000AE61C                            
000AE61C                            ; FM1 Data
000AE61C                            PasswordEntry_FM1:
000AE61C EF00                       	smpsSetvoice        $00
000AE623                            
000AE623                            PasswordEntry_Jump00:
000AE623 CD30 CED0 D010 CE08 CD10+  	dc.b	nE6, $30, nF6, nG6, nG6, $10, nF6, $08, nE6, $10, nF6, $08
000AE62F C930 CBCD CE10 CD08 CB10+  	dc.b	nC6, $30, nD6, nE6, nF6, $10, nE6, $08, nD6, $10, nE6, $08
000AE63B C960 C830 C4C6 C210 C6C9+  	dc.b	nC6, $60, nB5, $30, nG5, nA5, nF5, $10, nA5, nC6, nB5, $30
000AE647 C918 CB                    	dc.b	nC6, $18, nD6
000AE64A F6FF D7                    	smpsJump            PasswordEntry_Jump00
000AE64D                            
000AE64D                            ; FM2 Data
000AE64D                            PasswordEntry_FM2:
000AE64D EF01                       	smpsSetvoice        $01
000AE64F                            
000AE64F                            PasswordEntry_Jump03:
000AE64F B118 1818 10AC 08B1 1818+  	dc.b	nC4, $18, $18, $18, $10, nG3, $08, nC4, $18, $18, $18, nB3
000AE65B AEAE AEAE 10B5 08AE 1818+  	dc.b	nA3, nA3, nA3, nA3, $10, nE4, $08, nA3, $18, $18, $18, nG3
000AE667 AAAA AAAA 1008 B518 1818+  	dc.b	nF3, nF3, nF3, nF3, $10, $08, nE4, $18, $18, $18, $10, $08
000AE673 AC18 1818 1008 1818 AEB0   	dc.b	nG3, $18, $18, $18, $10, $08, $18, $18, nA3, nB3
000AE67D F6FF D0                    	smpsJump            PasswordEntry_Jump03
000AE680                            
000AE680                            ; FM3 Data
000AE680                            PasswordEntry_FM3:
000AE680 E080                       	smpsPan             panLeft, $00
000AE682 EF02                       	smpsSetvoice        $02
000AE684                            
000AE684                            PasswordEntry_Jump02:
000AE684 C104 8014 C408 8010 C208+  	dc.b	nE5, $04, nRst, $14, nG5, $08, nRst, $10, nF5, $08, nRst, $10
000AE690 C204 8014 C104 8014 C104+  	dc.b	nF5, $04, nRst, $14, nE5, $04, nRst, $14, nE5, $04, nRst, $0C
000AE69C C204 8014 C21C 8004 C404+  	dc.b	nF5, $04, nRst, $14, nF5, $1C, nRst, $04, nG5, $04, nRst, $14
000AE6A8 C408 8010 C204 8014 C204+  	dc.b	nG5, $08, nRst, $10, nF5, $04, nRst, $14, nF5, $04, nRst, $14
000AE6B4 C108 8010 C104 800C C204+  	dc.b	nE5, $08, nRst, $10, nE5, $04, nRst, $0C, nF5, $04, nRst, $14
000AE6C0 C21C 8004 C108 8010 C108+  	dc.b	nF5, $1C, nRst, $04, nE5, $08, nRst, $10, nE5, $08, nRst, $10
000AE6CC BF08 8010 C20C 800C C408+  	dc.b	nD5, $08, nRst, $10, nF5, $0C, nRst, $0C, nG5, $08, nRst, $10
000AE6D8 C408 8010 BF08 8010 BF0C+  	dc.b	nG5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $0C, nRst, $0C
000AE6E4 BA08 8010 BD0C 800C BD0C+  	dc.b	nA4, $08, nRst, $10, nC5, $0C, nRst, $0C, nC5, $0C, nRst, $0C
000AE6F0 BD0C 800C BF08 8010 BF08+  	dc.b	nC5, $0C, nRst, $0C, nD5, $08, nRst, $10, nD5, $08, nRst, $10
000AE6FC BF08 8010 BF08 8010        	dc.b	nD5, $08, nRst, $10, nD5, $08, nRst, $10
000AE704 F6FF 7E                    	smpsJump            PasswordEntry_Jump02
000AE707                            
000AE707                            ; FM4 Data
000AE707                            PasswordEntry_FM4:
000AE707 E040                       	smpsPan             panRight, $00
000AE709 EF02                       	smpsSetvoice        $02
000AE70B                            
000AE70B                            PasswordEntry_Jump01:
000AE70B C404 8014 C104 8014 BF04+  	dc.b	nG5, $04, nRst, $14, nE5, $04, nRst, $14, nD5, $04, nRst, $14
000AE717 BF04 8014 BD04 8014 BD04+  	dc.b	nD5, $04, nRst, $14, nC5, $04, nRst, $14, nC5, $04, nRst, $0C
000AE723 BF04 8014 BF18 8008 C104+  	dc.b	nD5, $04, nRst, $14, nD5, $18, nRst, $08, nE5, $04, nRst, $14
000AE72F C104 8014 BF04 8014 BF04+  	dc.b	nE5, $04, nRst, $14, nD5, $04, nRst, $14, nD5, $04, nRst, $14
000AE73B BD04 8014 BD04 800C BF04+  	dc.b	nC5, $04, nRst, $14, nC5, $04, nRst, $0C, nD5, $04, nRst, $14
000AE747 BF1C 8004 C408 8010 C408+  	dc.b	nD5, $1C, nRst, $04, nG5, $08, nRst, $10, nG5, $08, nRst, $10
000AE753 C208 8010 BF08 8010 BF08+  	dc.b	nF5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $08, nRst, $10
000AE75F BF08 8010 BC08 8010 BC0C+  	dc.b	nD5, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $0C, nRst, $0C
000AE76B BD08 8010 BA08 8010 BA08+  	dc.b	nC5, $08, nRst, $10, nA4, $08, nRst, $10, nA4, $08, nRst, $10
000AE777 BA08 8010 BC08 8010 BC08+  	dc.b	nA4, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $08, nRst, $10
000AE783 BC08 8010 BC08 8010        	dc.b	nB4, $08, nRst, $10, nB4, $08, nRst, $10
000AE78B F6FF 7E                    	smpsJump            PasswordEntry_Jump01
000AE78E                            
000AE78E                            ; FM5 Data
000AE78E                            PasswordEntry_FM5:
000AE78E EF00                       	smpsSetvoice        $00
000AE790 E1FB                       	smpsAlterNote       $FB
000AE792 800C                       	dc.b	nRst, $0C
000AE794 F6FE 8D                    	smpsJump            PasswordEntry_Jump00
000AE797                            
000AE797                            ; PSG1 Data
000AE797                            PasswordEntry_PSG1:
000AE797 C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
000AE7A3 CD10 D038 C410 C908 CD10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nC6, $08, nE6, $10, nG6, $38
000AE7AF C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
000AE7BB CD10 D038 C410 C808 CB10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nB5, $08, nD6, $10, nG6, $38
000AE7C7 C210 C608 C910 CE18 C908+  	dc.b	nF5, $10, nA5, $08, nC6, $10, nF6, $18, nC6, $08, nA5, $10
000AE7D3 C208 C410 C808 CB10 D018+  	dc.b	nF5, $08, nG5, $10, nB5, $08, nD6, $10, nG6, $18, nD6, $08
000AE7DF C810 C408                  	dc.b	nB5, $10, nG5, $08
000AE7E3 F6FF B2                    	smpsJump            PasswordEntry_PSG1
000AE7E6                            
000AE7E6                            ; PSG2 Data
000AE7E6                            PasswordEntry_PSG2:
000AE7E6 E1FF                       	smpsAlterNote       $FF
000AE7E8 800C                       	dc.b	nRst, $0C
000AE7EA F6FF AB                    	smpsJump            PasswordEntry_PSG1
000AE7ED                            
000AE7ED                            ; PSG3 Data
000AE7ED                            PasswordEntry_PSG3:
000AE7ED F502                       	smpsPSGvoice        fTone_02
000AE7EF F3E7                       	smpsPSGform         $E7
000AE7F1 C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
000AE7FD C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
000AE809 C508 80C5 C508 C5          	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nAb5
000AE810 F503                       	smpsPSGvoice        fTone_03
000AE812 C5                         	dc.b	nAb5
000AE813 F6FF D8                    	smpsJump            PasswordEntry_PSG3
000AE816                            
000AE816                            ; DAC Data
000AE816                            PasswordEntry_DAC:
000AE816 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
000AE822 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
000AE82A F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_DAC
000AE82F 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
000AE83B 0880 0881 8210 8208        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dSnare, $08
000AE843                            
000AE843                            PasswordEntry_Loop00:
000AE843 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
000AE84F 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
000AE857 F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_Loop00
000AE85C 8118 8281 8210 8108 8108+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $08, nRst, $08
000AE868 8182 8182 8282 8889 898A   	dc.b	dKick, dSnare, dKick, dSnare, dSnare, dSnare, dHiTimpani, dMidTimpani, dMidTimpani, dLowTimpani
000AE872 F6FF A2                    	smpsJump            PasswordEntry_DAC
000AE875                            
000AE875                            PasswordEntry_Voices:
000AE875                            ;	Voice $00
000AE875                            ;	$04
000AE875                            ;	$02, $01, $01, $00, 	$1F, $10, $1F, $12, 	$09, $03, $0B, $04
000AE875                            ;	$03, $00, $00, $05, 	$EF, $FF, $2F, $0F, 	$1C, $80, $19, $80
000AE875                            	smpsVcAlgorithm     $04
000AE875                            	smpsVcFeedback      $00
000AE875                            	smpsVcUnusedBits    $00
000AE875                            	smpsVcDetune        $00, $00, $00, $00
000AE875                            	smpsVcCoarseFreq    $00, $01, $01, $02
000AE875                            	smpsVcRateScale     $00, $00, $00, $00
000AE875                            	smpsVcAttackRate    $12, $1F, $10, $1F
000AE875                            	smpsVcAmpMod        $00, $00, $00, $00
000AE875                            	smpsVcDecayRate1    $04, $0B, $03, $09
000AE875                            	smpsVcDecayRate2    $05, $00, $00, $03
000AE875                            	smpsVcDecayLevel    $00, $02, $0F, $0E
000AE875                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000AE88E                            
000AE88E                            ;	Voice $01
000AE88E                            ;	$39
000AE88E                            ;	$03, $61, $40, $00, 	$1F, $5F, $5F, $5F, 	$10, $11, $09, $09
000AE88E                            ;	$06, $00, $00, $00, 	$C8, $F8, $F8, $F8, 	$1E, $24, $20, $80
000AE88E                            	smpsVcAlgorithm     $01
000AE88E                            	smpsVcFeedback      $07
000AE88E                            	smpsVcUnusedBits    $00
000AE88E                            	smpsVcDetune        $00, $04, $06, $00
000AE88E                            	smpsVcCoarseFreq    $00, $00, $01, $03
000AE88E                            	smpsVcRateScale     $01, $01, $01, $00
000AE88E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AE88E                            	smpsVcAmpMod        $00, $00, $00, $00
000AE88E                            	smpsVcDecayRate1    $09, $09, $11, $10
000AE88E                            	smpsVcDecayRate2    $00, $00, $00, $06
000AE88E                            	smpsVcDecayLevel    $0F, $0F, $0F, $0C
000AE88E                            	smpsVcReleaseRate   $08, $08, $08, $08
000AE8A7                            
000AE8A7                            ;	Voice $02
000AE8A7                            ;	$2C
000AE8A7                            ;	$41, $00, $23, $00, 	$1F, $1F, $1F, $1F, 	$08, $0A, $0B, $0A
000AE8A7                            ;	$04, $05, $00, $05, 	$45, $56, $85, $86, 	$14, $82, $18, $82
000AE8A7                            	smpsVcAlgorithm     $04
000AE8A7                            	smpsVcFeedback      $05
000AE8A7                            	smpsVcUnusedBits    $00
000AE8A7                            	smpsVcDetune        $00, $02, $00, $04
000AE8A7                            	smpsVcCoarseFreq    $00, $03, $00, $01
000AE8A7                            	smpsVcRateScale     $00, $00, $00, $00
000AE8A7                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AE8A7                            	smpsVcAmpMod        $00, $00, $00, $00
000AE8A7                            	smpsVcDecayRate1    $0A, $0B, $0A, $08
000AE8A7                            	smpsVcDecayRate2    $05, $00, $05, $04
000AE8A7                            	smpsVcDecayLevel    $08, $08, $05, $04
000AE8A7                            	smpsVcReleaseRate   $06, $05, $06, $05
000AE8C0                            
000AE8C0                            
000AE8C0                            		even	
000AE8C0                            Music99:		include	"sound/music/Mus99 - Toxic Landfill.asm"
000AE8C0                            ToxicLandfill_Header:
000AE8C0                            	smpsHeaderStartSong 1
000AE8C2 0603                       	smpsHeaderChan      $06, $03
000AE8C4 0208                       	smpsHeaderTempo     $02, $08
000AE8C6                            
000AE8CA 0000 000A                  	smpsHeaderFM        ToxicLandfill_FM1,	$00, $0A
000AE8CE 0000 000A                  	smpsHeaderFM        ToxicLandfill_FM2,	$00, $0A	
000AE8D2 0000 0C0B                  	smpsHeaderFM        ToxicLandfill_FM3,	$0C, $0B
000AE8D6 0000 0C0B                  	smpsHeaderFM        ToxicLandfill_FM4,	$0C, $0B
000AE8DA 0000 0012                  	smpsHeaderFM        ToxicLandfill_FM5,	$00, $12
000AE8F0                            
000AE8F0                            ; DAC Data
000AE8F0                            ToxicLandfill_DAC:
000AE8F0 E0C0                       	smpsPan             panCenter, $00
000AE8F2 807F 7F22 8106 1803 0382+  	dc.b	nRst, $7F, $7F, $22, dKick, $06, $18, $03, $03, dSnare, $06, dKick
000AE8FE 8181 8281 0306 8281 0382+  	dc.b	dKick, dKick, dSnare, dKick, $03, $06, dSnare, dKick, $03, dSnare, dKick
000AE909                            
000AE909                            ToxicLandfill_Loop00:
000AE909 82                         	dc.b	dSnare
000AE90A                            
000AE90A                            ToxicLandfill_Loop01:
000AE90A 82                         	dc.b	dSnare
000AE90B                            
000AE90B                            ToxicLandfill_Jump00:
000AE90B 8106 8203 8106 0382 8181+  	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, dKick, dKick, $06, dSnare
000AE917 0381 0603                  	dc.b	$03, dKick, $06, $03
000AE91B F700 03FF EA               	smpsLoop            $00, $03, ToxicLandfill_Loop00
000AE920 8282 8206 8103 8206 8103+  	dc.b	dSnare, dSnare, dSnare, $06, dKick, $03, dSnare, $06, dKick, $03, dSnare, dKick
000AE92C 0682 0381 8281 8281        	dc.b	$06, dSnare, $03, dKick, dSnare, dKick, dSnare, dKick
000AE934 F701 02FF D2               	smpsLoop            $01, $02, ToxicLandfill_Loop01
000AE939                            
000AE939                            ToxicLandfill_Loop06:
000AE939 82                         	dc.b	dSnare
000AE93A                            
000AE93A                            ToxicLandfill_Loop02:
000AE93A 8181 8281                  	dc.b	dKick, dKick, dSnare, dKick
000AE93E F700 06FF F8               	smpsLoop            $00, $06, ToxicLandfill_Loop02
000AE943                            
000AE943                            ToxicLandfill_Loop03:
000AE943 8281 81                    	dc.b	dSnare, dKick, dKick
000AE946 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop03
000AE94B                            
000AE94B                            ToxicLandfill_Loop04:
000AE94B 8182 8181                  	dc.b	dKick, dSnare, dKick, dKick
000AE94F F700 03FF F8               	smpsLoop            $00, $03, ToxicLandfill_Loop04
000AE954 8182 81                    	dc.b	dKick, dSnare, dKick
000AE957                            
000AE957                            ToxicLandfill_Loop05:
000AE957 8102 0182 03               	dc.b	dKick, $02, $01, dSnare, $03
000AE95C F700 06FF F7               	smpsLoop            $00, $06, ToxicLandfill_Loop05
000AE961 0303 03                    	dc.b	$03, $03, $03
000AE964 F701 02FF D1               	smpsLoop            $01, $02, ToxicLandfill_Loop06
000AE969                            
000AE969                            ToxicLandfill_Loop08:
000AE969 03                         	dc.b	$03
000AE96A                            
000AE96A                            ToxicLandfill_Loop07:
000AE96A 8106 8203 8106 0382 06     	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, $06
000AE973 F700 07FF F3               	smpsLoop            $00, $07, ToxicLandfill_Loop07
000AE978 8182 0381 8282 82          	dc.b	dKick, dSnare, $03, dKick, dSnare, dSnare, dSnare
000AE97F F701 02FF E6               	smpsLoop            $01, $02, ToxicLandfill_Loop08
000AE984                            
000AE984                            ToxicLandfill_Loop0D:
000AE984 82                         	dc.b	dSnare
000AE985                            
000AE985                            ToxicLandfill_Loop09:
000AE985 8181 8281                  	dc.b	dKick, dKick, dSnare, dKick
000AE989 F700 06FF F8               	smpsLoop            $00, $06, ToxicLandfill_Loop09
000AE98E                            
000AE98E                            ToxicLandfill_Loop0A:
000AE98E 8281 81                    	dc.b	dSnare, dKick, dKick
000AE991 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop0A
000AE996                            
000AE996                            ToxicLandfill_Loop0B:
000AE996 8182 8181                  	dc.b	dKick, dSnare, dKick, dKick
000AE99A F700 03FF F8               	smpsLoop            $00, $03, ToxicLandfill_Loop0B
000AE99F 8182 81                    	dc.b	dKick, dSnare, dKick
000AE9A2                            
000AE9A2                            ToxicLandfill_Loop0C:
000AE9A2 8102 0182 03               	dc.b	dKick, $02, $01, dSnare, $03
000AE9A7 F700 06FF F7               	smpsLoop            $00, $06, ToxicLandfill_Loop0C
000AE9AC 0303 03                    	dc.b	$03, $03, $03
000AE9AF F701 02FF D1               	smpsLoop            $01, $02, ToxicLandfill_Loop0D
000AE9B4                            
000AE9B4                            ToxicLandfill_Loop0E:
000AE9B4 03                         	dc.b	$03
000AE9B5                            
000AE9B5                            ToxicLandfill_Loop0F:
000AE9B5 8106 8203 8106 0382 8181+  	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, dKick, dKick, $06, dSnare
000AE9C1 0381 0603 82               	dc.b	$03, dKick, $06, $03, dSnare
000AE9C6 F700 03FF EA               	smpsLoop            $00, $03, ToxicLandfill_Loop0E
000AE9CB 8282 0681 0382 0681 0382+  	dc.b	dSnare, dSnare, $06, dKick, $03, dSnare, $06, dKick, $03, dSnare, dKick, $06
000AE9D7 8203 8182 8182 8182        	dc.b	dSnare, $03, dKick, dSnare, dKick, dSnare, dKick, dSnare
000AE9DF F701 02FF D2               	smpsLoop            $01, $02, ToxicLandfill_Loop0F
000AE9E4                            
000AE9E4                            ToxicLandfill_Loop10:
000AE9E4 8106 8203 8106 0382 06     	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, $06
000AE9ED F700 07FF F3               	smpsLoop            $00, $07, ToxicLandfill_Loop10
000AE9F2 8182 0381 8282 8282        	dc.b	dKick, dSnare, $03, dKick, dSnare, dSnare, dSnare, dSnare
000AE9FA F701 04FF E6               	smpsLoop            $01, $04, ToxicLandfill_Loop10
000AE9FF F6FF 0A                    	smpsJump            ToxicLandfill_Jump00
000AEA02                            
000AEA02                            ; FM1 Data
000AEA02                            ToxicLandfill_FM1:
000AEA02 E0C0                       	smpsPan             panCenter, $00
000AEA04 EF00                       	smpsSetvoice        $00
000AEA06 807F 7F76 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $76, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
000AEA12 AD02 AE01 AF02 B001        	dc.b	nAb3, $02, nA3, $01, nBb3, $02, nB3, $01
000AEA1A                            
000AEA1A                            ToxicLandfill_Loop44:
000AEA1A AC09 0909 AA03 AC06 06AF+  	dc.b	nG3, $09, $09, $09, nF3, $03, nG3, $06, $06, nBb3, nG3, $09
000AEA26 0909 AA03 AC06 06B1 AC09+  	dc.b	$09, $09, nF3, $03, nG3, $06, $06, nC4, nG3, $09, $09, $09
000AEA32 AA03 AC06 06AF A709 0909+  	dc.b	nF3, $03, nG3, $06, $06, nBb3, nD3, $09, $09, $09, nC3, $03
000AEA3E A706 06AA                  	dc.b	nD3, $06, $06, nF3
000AEA42 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop44
000AEA47                            
000AEA47                            ToxicLandfill_Loop46:
000AEA47 AC12 AA36 A902 A801 A702+  	dc.b	nG3, $12, nF3, $36, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000AEA53 A502 A401 A302 A201 A102+  	dc.b	nC3, $02, nB2, $01, nBb2, $02, nA2, $01, nAb2, $02, nG2, $01
000AEA5F 9F02 9E01 9D02 9C01 9B02+  	dc.b	nFs2, $02, nF2, $01, nE2, $02, nEb2, $01, nD2, $02, nCs2, $01
000AEA6B AC12 AA2A 03A9 AAA9        	dc.b	nG3, $12, nF3, $2A, $03, nE3, nF3, nE3
000AEA73                            
000AEA73                            ToxicLandfill_Loop45:
000AEA73 AA02 A901                  	dc.b	nF3, $02, nE3, $01
000AEA77 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop45
000AEA7C AA02 A5A1 AAA5 A1          	dc.b	nF3, $02, nC3, nAb2, nF3, nC3, nAb2
000AEA83 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop46
000AEA88                            
000AEA88                            ToxicLandfill_Loop47:
000AEA88 B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3
000AEA94 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop47
000AEA99                            
000AEA99                            ToxicLandfill_Loop48:
000AEA99 B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
000AEAA4 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop48
000AEAA9 F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop47
000AEAAE                            
000AEAAE                            ToxicLandfill_Loop4A:
000AEAAE B812 B636 B502 B401 B302+  	dc.b	nG4, $12, nF4, $36, nE4, $02, nEb4, $01, nD4, $02, nCs4, $01
000AEABA B102 B001 AF02 AE01 AD02+  	dc.b	nC4, $02, nB3, $01, nBb3, $02, nA3, $01, nAb3, $02, nG3, $01
000AEAC6 AB02 AA01 A902 A801 A702+  	dc.b	nFs3, $02, nF3, $01, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000AEAD2 B812 B62A 03B5 B6B5        	dc.b	nG4, $12, nF4, $2A, $03, nE4, nF4, nE4
000AEADA                            
000AEADA                            ToxicLandfill_Loop49:
000AEADA B602 B501                  	dc.b	nF4, $02, nE4, $01
000AEADE F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop49
000AEAE3 B602 B1AD B6B1 AD          	dc.b	nF4, $02, nC4, nAb3, nF4, nC4, nAb3
000AEAEA F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop4A
000AEAEF                            
000AEAEF                            ToxicLandfill_Loop4B:
000AEAEF B809 0909 B603 B806 06BB+  	dc.b	nG4, $09, $09, $09, nF4, $03, nG4, $06, $06, nBb4, nG4, $09
000AEAFB 0909 B603 B806 06BD B809+  	dc.b	$09, $09, nF4, $03, nG4, $06, $06, nC5, nG4, $09, $09, $09
000AEB07 B603 B806 06BB B309 0909+  	dc.b	nF4, $03, nG4, $06, $06, nBb4, nD4, $09, $09, $09, nC4, $03
000AEB13 B306 06B6                  	dc.b	nD4, $06, $06, nF4
000AEB17 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop4B
000AEB1C                            
000AEB1C                            ToxicLandfill_Loop4C:
000AEB1C BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000AEB27 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop4C
000AEB2C                            
000AEB2C                            ToxicLandfill_Loop4D:
000AEB2C BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
000AEB37 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop4D
000AEB3C F701 04FF DC               	smpsLoop            $01, $04, ToxicLandfill_Loop4C
000AEB41 F6FE D7                    	smpsJump            ToxicLandfill_Loop44
000AEB44                            
000AEB44                            ; FM2 Data
000AEB44                            ToxicLandfill_FM2:
000AEB44 E0C0                       	smpsPan             panCenter, $00
000AEB46 EF00                       	smpsSetvoice        $00
000AEB48 807F 7F76 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $76, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
000AEB54 AD02 AE01 AF02 B001        	dc.b	nAb3, $02, nA3, $01, nBb3, $02, nB3, $01
000AEB5C                            
000AEB5C                            ToxicLandfill_Loop3A:
000AEB5C B109 0909 AF03 B106 06B4+  	dc.b	nC4, $09, $09, $09, nBb3, $03, nC4, $06, $06, nEb4, nC4, $09
000AEB68 0909 AF03 B106 06B6 B109+  	dc.b	$09, $09, nBb3, $03, nC4, $06, $06, nF4, nC4, $09, $09, $09
000AEB74 AF03 B106 06B4 AC09 0909+  	dc.b	nBb3, $03, nC4, $06, $06, nEb4, nG3, $09, $09, $09, nF3, $03
000AEB80 AC06 06AF                  	dc.b	nG3, $06, $06, nBb3
000AEB84 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop3A
000AEB89                            
000AEB89                            ToxicLandfill_Loop3C:
000AEB89 B112 AF36 AE02 AD01 AC02+  	dc.b	nC4, $12, nBb3, $36, nA3, $02, nAb3, $01, nG3, $02, nFs3, $01
000AEB95 AA02 A901 A802 A701 A602+  	dc.b	nF3, $02, nE3, $01, nEb3, $02, nD3, $01, nCs3, $02, nC3, $01
000AEBA1 A402 A301 A202 A101 A002+  	dc.b	nB2, $02, nBb2, $01, nA2, $02, nAb2, $01, nG2, $02, nFs2, $01
000AEBAD B112 AF2A 03AE AFAE        	dc.b	nC4, $12, nBb3, $2A, $03, nA3, nBb3, nA3
000AEBB5                            
000AEBB5                            ToxicLandfill_Loop3B:
000AEBB5 AF02 AE01                  	dc.b	nBb3, $02, nA3, $01
000AEBB9 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop3B
000AEBBE AF02 AAA6 AFAA A6          	dc.b	nBb3, $02, nF3, nCs3, nBb3, nF3, nCs3
000AEBC5 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop3C
000AEBCA                            
000AEBCA                            ToxicLandfill_Loop3D:
000AEBCA AC06 A7AA AB03 AC09 A706+  	dc.b	nG3, $06, nD3, nF3, nFs3, $03, nG3, $09, nD3, $06, nF3, nFs3
000AEBD6 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop3D
000AEBDB                            
000AEBDB                            ToxicLandfill_Loop3E:
000AEBDB ACA5 A7AA 03AC 09A5 06A7+  	dc.b	nG3, nC3, nD3, nF3, $03, nG3, $09, nC3, $06, nD3, nF3
000AEBE6 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop3E
000AEBEB F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop3D
000AEBF0                            
000AEBF0                            ToxicLandfill_Loop40:
000AEBF0 BD12 BB36 BA02 B901 B802+  	dc.b	nC5, $12, nBb4, $36, nA4, $02, nAb4, $01, nG4, $02, nFs4, $01
000AEBFC B602 B501 B402 B301 B202+  	dc.b	nF4, $02, nE4, $01, nEb4, $02, nD4, $01, nCs4, $02, nC4, $01
000AEC08 B002 AF01 AE02 AD01 AC02+  	dc.b	nB3, $02, nBb3, $01, nA3, $02, nAb3, $01, nG3, $02, nFs3, $01
000AEC14 BD12 BB2A 03BA BBBA        	dc.b	nC5, $12, nBb4, $2A, $03, nA4, nBb4, nA4
000AEC1C                            
000AEC1C                            ToxicLandfill_Loop3F:
000AEC1C BB02 BA01                  	dc.b	nBb4, $02, nA4, $01
000AEC20 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop3F
000AEC25 BB02 B6B2 BBB6 B2          	dc.b	nBb4, $02, nF4, nCs4, nBb4, nF4, nCs4
000AEC2C F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop40
000AEC31                            
000AEC31                            ToxicLandfill_Loop41:
000AEC31 BD09 0909 BB03 BD06 06C0+  	dc.b	nC5, $09, $09, $09, nBb4, $03, nC5, $06, $06, nEb5, nC5, $09
000AEC3D 0909 BB03 BD06 06C2 BD09+  	dc.b	$09, $09, nBb4, $03, nC5, $06, $06, nF5, nC5, $09, $09, $09
000AEC49 BB03 BD06 06C0 B809 0909+  	dc.b	nBb4, $03, nC5, $06, $06, nEb5, nG4, $09, $09, $09, nF4, $03
000AEC55 B806 06BB                  	dc.b	nG4, $06, $06, nBb4
000AEC59 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop41
000AEC5E B8B3 B6B7 03B8 09B3 06B6+  	dc.b	nG4, nD4, nF4, nFs4, $03, nG4, $09, nD4, $06, nF4, nFs4, nG4
000AEC6A B3B6 B703 8009 B306 B6B7+  	dc.b	nD4, nF4, nFs4, $03, nRst, $09, nD4, $06, nF4, nFs4, nG4, nC4
000AEC76 B3B6 03B8 09B1 06B3 B6B8+  	dc.b	nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4, nG4, nC4, nD4
000AEC82 B603 8009 B106 B3B6 B8B3+  	dc.b	nF4, $03, nRst, $09, nC4, $06, nD4, nF4, nG4, nD4, nF4, nFs4
000AEC8E 03B8 09B3 06B6 B7B8 B3B6+  	dc.b	$03, nG4, $09, nD4, $06, nF4, nFs4, nG4, nD4, nF4, nFs4, $03
000AEC9A 8009 B306 B6B7             	dc.b	nRst, $09, nD4, $06, nF4, nFs4
000AECA0                            
000AECA0                            ToxicLandfill_Loop42:
000AECA0 B8B1 B3B6 03B8 09B1 06B3+  	dc.b	nG4, nC4, nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4
000AECAB F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop42
000AECB0                            
000AECB0                            ToxicLandfill_Loop43:
000AECB0 B8B3 B6B7 03B8 09B3 06B6+  	dc.b	nG4, nD4, nF4, nFs4, $03, nG4, $09, nD4, $06, nF4, nFs4
000AECBB F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop43
000AECC0 F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop42
000AECC5 B8B1 B3B6 03B8 09B1 06B3+  	dc.b	nG4, nC4, nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4, nG4
000AECD1 B1B3 B603 8009 B106 B3B6   	dc.b	nC4, nD4, nF4, $03, nRst, $09, nC4, $06, nD4, nF4
000AECDB F6FE 7F                    	smpsJump            ToxicLandfill_Loop3A
000AECDE                            
000AECDE                            ; FM3 Data
000AECDE                            ToxicLandfill_FM3:
000AECDE E0C0                       	smpsPan             panCenter, $00
000AECE0 EF01                       	smpsSetvoice        $01
000AECE2                            
000AECE2                            ToxicLandfill_Loop2D:
000AECE2 9903 A580 9E80 9F80 A080+  	dc.b	nC2, $03, nC3, nRst, nF2, nRst, nFs2, nRst, nG2, nRst, nFs2, nRst
000AECEE 9E80 9C9E 9C99 9C80 9E80+  	dc.b	nF2, nRst, nEb2, nF2, nEb2, nC2, nEb2, nRst, nF2, nRst, nEb2, nRst
000AECFA 9E80 9F9E 9C9E 9C97 98     	dc.b	nF2, nRst, nFs2, nF2, nEb2, nF2, nEb2, nBb1, nB1
000AED03 F700 03FF DB               	smpsLoop            $00, $03, ToxicLandfill_Loop2D
000AED08 99A5 809E 809F 80A0 809F+  	dc.b	nC2, nC3, nRst, nF2, nRst, nFs2, nRst, nG2, nRst, nFs2, nRst, nF2
000AED14 809C 9E9C 999C 809E 809C+  	dc.b	nRst, nEb2, nF2, nEb2, nC2, nEb2, nRst, nF2, nRst, nEb2, nRst, nF2
000AED20 809F 9E9C 9D02 9E01 9F02+  	dc.b	nRst, nFs2, nF2, nEb2, nE2, $02, nF2, $01, nFs2, $02, nG2, $01
000AED2C A102 A201 A302 A401        	dc.b	nAb2, $02, nA2, $01, nBb2, $02, nB2, $01
000AED34                            
000AED34                            ToxicLandfill_Loop2E:
000AED34 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AED40 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop2E
000AED45 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nG2
000AED51 0909 0909 06A3             	dc.b	$09, $09, $09, $09, $06, nBb2
000AED57 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop2E
000AED5C                            
000AED5C                            ToxicLandfill_Loop31:
000AED5C A503 9999 A5               	dc.b	nC3, $03, nC2, nC2, nC3
000AED61                            
000AED61                            ToxicLandfill_Loop2F:
000AED61 9999 A3                    	dc.b	nC2, nC2, nBb2
000AED64 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop2F
000AED69 99A3                       	dc.b	nC2, nBb2
000AED6B                            
000AED6B                            ToxicLandfill_Loop30:
000AED6B 99A3 99                    	dc.b	nC2, nBb2, nC2
000AED6E F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop30
000AED73 99A3 A0A3 A4               	dc.b	nC2, nBb2, nG2, nBb2, nB2
000AED78 F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop31
000AED7D                            
000AED7D                            ToxicLandfill_Loop32:
000AED7D A506 06A0 A003 A309 A006+  	dc.b	nC3, $06, $06, nG2, nG2, $03, nBb2, $09, nG2, $06, nBb2, nB2
000AED89 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop32
000AED8E                            
000AED8E                            ToxicLandfill_Loop33:
000AED8E A5A5 9E9E 03A0 0906 A3A4   	dc.b	nC3, nC3, nF2, nF2, $03, nG2, $09, $06, nBb2, nB2
000AED98 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop33
000AED9D F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop32
000AEDA2                            
000AEDA2                            ToxicLandfill_Loop36:
000AEDA2 A503 9999 A5               	dc.b	nC3, $03, nC2, nC2, nC3
000AEDA7                            
000AEDA7                            ToxicLandfill_Loop34:
000AEDA7 9999 A3                    	dc.b	nC2, nC2, nBb2
000AEDAA F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop34
000AEDAF 99A3                       	dc.b	nC2, nBb2
000AEDB1                            
000AEDB1                            ToxicLandfill_Loop35:
000AEDB1 99A3 99                    	dc.b	nC2, nBb2, nC2
000AEDB4 F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop35
000AEDB9 99A3 A0A3 A4               	dc.b	nC2, nBb2, nG2, nBb2, nB2
000AEDBE F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop36
000AEDC3                            
000AEDC3                            ToxicLandfill_Loop37:
000AEDC3 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AEDCF F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop37
000AEDD4 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nG2
000AEDE0 0909 0909 06A3             	dc.b	$09, $09, $09, $09, $06, nBb2
000AEDE6 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop37
000AEDEB                            
000AEDEB                            ToxicLandfill_Loop38:
000AEDEB A5A5 A0A0 03A3 09A0 06A3+  	dc.b	nC3, nC3, nG2, nG2, $03, nBb2, $09, nG2, $06, nBb2, nB2
000AEDF6 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop38
000AEDFB                            
000AEDFB                            ToxicLandfill_Loop39:
000AEDFB A5A5 9E9E 03A0 0906 A3A4   	dc.b	nC3, nC3, nF2, nF2, $03, nG2, $09, $06, nBb2, nB2
000AEE05 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop39
000AEE0A F701 04FF DD               	smpsLoop            $01, $04, ToxicLandfill_Loop38
000AEE0F F6FF 23                    	smpsJump            ToxicLandfill_Loop2E
000AEE12                            
000AEE12                            ; FM4 Data
000AEE12                            ToxicLandfill_FM4:
000AEE12 E0C0                       	smpsPan             panCenter, $00
000AEE14 EF01                       	smpsSetvoice        $01
000AEE16                            
000AEE16                            ToxicLandfill_Loop20:
000AEE16 8D03 9980 9280 9380 9480+  	dc.b	nC1, $03, nC2, nRst, nF1, nRst, nFs1, nRst, nG1, nRst, nFs1, nRst
000AEE22 9280 9092 908D 9080 9280+  	dc.b	nF1, nRst, nEb1, nF1, nEb1, nC1, nEb1, nRst, nF1, nRst, nEb1, nRst
000AEE2E 9280 9392 9092 908B 8C     	dc.b	nF1, nRst, nFs1, nF1, nEb1, nF1, nEb1, nBb0, nB0
000AEE37 F700 03FF DB               	smpsLoop            $00, $03, ToxicLandfill_Loop20
000AEE3C 8D99 8092 8093 8094 8093+  	dc.b	nC1, nC2, nRst, nF1, nRst, nFs1, nRst, nG1, nRst, nFs1, nRst, nF1
000AEE48 8090 9290 8D90 8092 8090+  	dc.b	nRst, nEb1, nF1, nEb1, nC1, nEb1, nRst, nF1, nRst, nEb1, nRst, nF1
000AEE54 8093 9290 9293 0294 0195+  	dc.b	nRst, nFs1, nF1, nEb1, nF1, nFs1, $02, nG1, $01, nAb1, $02, nA1
000AEE60 0197 0298 01               	dc.b	$01, nBb1, $02, nB1, $01
000AEE65                            
000AEE65                            ToxicLandfill_Loop21:
000AEE65 9906 9497 9803 9909 9406+  	dc.b	nC2, $06, nG1, nBb1, nB1, $03, nC2, $09, nG1, $06, nBb1, nB1
000AEE71 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop21
000AEE76 9992 9497 0399 0992 0694+  	dc.b	nC2, nF1, nG1, nBb1, $03, nC2, $09, nF1, $06, nG1, nBb1, nG1
000AEE82 0909 0909 0697             	dc.b	$09, $09, $09, $09, $06, nBb1
000AEE88 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop21
000AEE8D                            
000AEE8D                            ToxicLandfill_Loop24:
000AEE8D 9903 8D8D 99               	dc.b	nC2, $03, nC1, nC1, nC2
000AEE92                            
000AEE92                            ToxicLandfill_Loop22:
000AEE92 8D8D 97                    	dc.b	nC1, nC1, nBb1
000AEE95 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop22
000AEE9A 8D97                       	dc.b	nC1, nBb1
000AEE9C                            
000AEE9C                            ToxicLandfill_Loop23:
000AEE9C 8D97 8D                    	dc.b	nC1, nBb1, nC1
000AEE9F F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop23
000AEEA4 8D97 9497 98               	dc.b	nC1, nBb1, nG1, nBb1, nB1
000AEEA9 F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop24
000AEEAE                            
000AEEAE                            ToxicLandfill_Loop25:
000AEEAE 9906 0694 9403 9709 9406+  	dc.b	nC2, $06, $06, nG1, nG1, $03, nBb1, $09, nG1, $06, nBb1, nB1
000AEEBA F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop25
000AEEBF                            
000AEEBF                            ToxicLandfill_Loop26:
000AEEBF 9999 9292 0394 0906 9798   	dc.b	nC2, nC2, nF1, nF1, $03, nG1, $09, $06, nBb1, nB1
000AEEC9 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop26
000AEECE F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop25
000AEED3                            
000AEED3                            ToxicLandfill_Loop29:
000AEED3 9903 8D8D 99               	dc.b	nC2, $03, nC1, nC1, nC2
000AEED8                            
000AEED8                            ToxicLandfill_Loop27:
000AEED8 8D8D 97                    	dc.b	nC1, nC1, nBb1
000AEEDB F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop27
000AEEE0 8D97                       	dc.b	nC1, nBb1
000AEEE2                            
000AEEE2                            ToxicLandfill_Loop28:
000AEEE2 8D97 8D                    	dc.b	nC1, nBb1, nC1
000AEEE5 F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop28
000AEEEA 8D97 9497 98               	dc.b	nC1, nBb1, nG1, nBb1, nB1
000AEEEF F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop29
000AEEF4                            
000AEEF4                            ToxicLandfill_Loop2A:
000AEEF4 9906 9497 9803 9909 9406+  	dc.b	nC2, $06, nG1, nBb1, nB1, $03, nC2, $09, nG1, $06, nBb1, nB1
000AEF00 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop2A
000AEF05 9992 9497 0399 0992 0694+  	dc.b	nC2, nF1, nG1, nBb1, $03, nC2, $09, nF1, $06, nG1, nBb1, nG1
000AEF11 0909 0909 0697             	dc.b	$09, $09, $09, $09, $06, nBb1
000AEF17 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop2A
000AEF1C                            
000AEF1C                            ToxicLandfill_Loop2B:
000AEF1C 9999 9494 0397 0994 0697+  	dc.b	nC2, nC2, nG1, nG1, $03, nBb1, $09, nG1, $06, nBb1, nB1
000AEF27 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop2B
000AEF2C                            
000AEF2C                            ToxicLandfill_Loop2C:
000AEF2C 9999 9292 0394 0906 9798   	dc.b	nC2, nC2, nF1, nF1, $03, nG1, $09, $06, nBb1, nB1
000AEF36 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop2C
000AEF3B F701 04FF DD               	smpsLoop            $01, $04, ToxicLandfill_Loop2B
000AEF40 F6FF 23                    	smpsJump            ToxicLandfill_Loop21
000AEF43                            
000AEF43                            ; FM5 Data
000AEF43                            ToxicLandfill_FM5:
000AEF43 E0C0                       	smpsPan             panCenter, $00
000AEF45 E6FA                       	smpsAlterVol			-$06		
000AEF47 E102                       	smpsDetune			$02	
000AEF49 EF00                       	smpsSetvoice        $00
000AEF4B 807F 7F78 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $78, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
000AEF57 AD02 AE01 AF               	dc.b	nAb3, $02, nA3, $01, nBb3
000AEF5C                            
000AEF5C                            ToxicLandfill_Jump01:
000AEF5C E701 B0                    	dc.b	smpsNoAttack, $01, nB3
000AEF5F                            
000AEF5F                            ToxicLandfill_Loop11:
000AEF5F AC09 0909 AA03 AC06 06AF+  	dc.b	nG3, $09, $09, $09, nF3, $03, nG3, $06, $06, nBb3, nG3, $09
000AEF6B 0909 AA03 AC06 06B1 AC09+  	dc.b	$09, $09, nF3, $03, nG3, $06, $06, nC4, nG3, $09, $09, $09
000AEF77 AA03 AC06 06AF A709 0909+  	dc.b	nF3, $03, nG3, $06, $06, nBb3, nD3, $09, $09, $09, nC3, $03
000AEF83 A706 06AA                  	dc.b	nD3, $06, $06, nF3
000AEF87 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop11
000AEF8C                            
000AEF8C                            ToxicLandfill_Loop13:
000AEF8C AC12 AA36 A902 A801 A702+  	dc.b	nG3, $12, nF3, $36, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000AEF98 A502 A401 A302 A201 A102+  	dc.b	nC3, $02, nB2, $01, nBb2, $02, nA2, $01, nAb2, $02, nG2, $01
000AEFA4 9F02 9E01 9D02 9C01 9B02+  	dc.b	nFs2, $02, nF2, $01, nE2, $02, nEb2, $01, nD2, $02, nCs2, $01
000AEFB0 AC12 AA2A 03A9 AAA9        	dc.b	nG3, $12, nF3, $2A, $03, nE3, nF3, nE3
000AEFB8                            
000AEFB8                            ToxicLandfill_Loop12:
000AEFB8 AA02 A901                  	dc.b	nF3, $02, nE3, $01
000AEFBC F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop12
000AEFC1 AA02 A5A1 AAA5 A1          	dc.b	nF3, $02, nC3, nAb2, nF3, nC3, nAb2
000AEFC8 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop13
000AEFCD                            
000AEFCD                            ToxicLandfill_Loop14:
000AEFCD B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3
000AEFD9 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop14
000AEFDE                            
000AEFDE                            ToxicLandfill_Loop15:
000AEFDE B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
000AEFE9 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop15
000AEFEE F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop14
000AEFF3                            
000AEFF3                            ToxicLandfill_Loop17:
000AEFF3 B812 B636 B502 B401 B302+  	dc.b	nG4, $12, nF4, $36, nE4, $02, nEb4, $01, nD4, $02, nCs4, $01
000AEFFF B102 B001 AF02 AE01 AD02+  	dc.b	nC4, $02, nB3, $01, nBb3, $02, nA3, $01, nAb3, $02, nG3, $01
000AF00B AB02 AA01 A902 A801 A702+  	dc.b	nFs3, $02, nF3, $01, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000AF017 B812 B62A 03B5 B6B5        	dc.b	nG4, $12, nF4, $2A, $03, nE4, nF4, nE4
000AF01F                            
000AF01F                            ToxicLandfill_Loop16:
000AF01F B602 B501                  	dc.b	nF4, $02, nE4, $01
000AF023 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop16
000AF028 B602 B1AD B6B1 AD          	dc.b	nF4, $02, nC4, nAb3, nF4, nC4, nAb3
000AF02F F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop17
000AF034                            
000AF034                            ToxicLandfill_Loop18:
000AF034 B809 0909 B603 B806 06BB+  	dc.b	nG4, $09, $09, $09, nF4, $03, nG4, $06, $06, nBb4, nG4, $09
000AF040 0909 B603 B806 06BD B809+  	dc.b	$09, $09, nF4, $03, nG4, $06, $06, nC5, nG4, $09, $09, $09
000AF04C B603 B806 06BB B309 0909+  	dc.b	nF4, $03, nG4, $06, $06, nBb4, nD4, $09, $09, $09, nC4, $03
000AF058 B306 06B6                  	dc.b	nD4, $06, $06, nF4
000AF05C F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop18
000AF061                            
000AF061                            ToxicLandfill_Loop19:
000AF061 BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000AF06C F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop19
000AF071                            
000AF071                            ToxicLandfill_Loop1A:
000AF071 BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
000AF07C F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1A
000AF081                            
000AF081                            ToxicLandfill_Loop1B:
000AF081 BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000AF08C F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1B
000AF091 BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4, nC5
000AF09D B6B8 BB03 BD09 B606 B8BB+  	dc.b	nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4, $02, nRst
000AF0A9 EF02                       	smpsSetvoice        $02
000AF0AB E1FE                       	smpsDetune			-$02
000AF0AD E606                       	smpsAlterVol		$06
000AF0AF                            	
000AF0AF                            ToxicLandfill_Loop1C:
000AF0AF B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3	
000AF0BB F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop1C
000AF0C0                            
000AF0C0                            ToxicLandfill_Loop1D:
000AF0C0 B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
000AF0CB F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1D
000AF0D0                            
000AF0D0                            ToxicLandfill_Loop1E:
000AF0D0 BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000AF0DB F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1E
000AF0E0                            
000AF0E0                            ToxicLandfill_Loop1F:
000AF0E0 BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
000AF0EB F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1F
000AF0F0 EF00                       	smpsSetvoice        $00
000AF0F2 E102                       	smpsDetune			$02
000AF0F4 E6FA                       	smpsAlterVol		-$06	
000AF0F6 F6FE 64                    	smpsJump            ToxicLandfill_Jump01
000AF0F9                            
000AF0F9                            ; PSG1 Data
000AF0F9                            ToxicLandfill_PSG1:
000AF0F9 807F 7F7F 03               	dc.b	nRst, $7F, $7F, $7F, $03
000AF0FE                            
000AF0FE                            ToxicLandfill_Jump04:
000AF0FE 80                         	dc.b	nRst
000AF0FF                            
000AF0FF                            ToxicLandfill_Loop57:
000AF0FF 60                         	dc.b	$60
000AF100 F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop57
000AF105                            
000AF105                            ToxicLandfill_Loop58:
000AF105 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AF111 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop58
000AF116                            
000AF116                            ToxicLandfill_Loop59:
000AF116 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2
000AF121 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop59
000AF126                            
000AF126                            ToxicLandfill_Loop5A:
000AF126 A5A0 A3A4 03A5 09A0 06A3+  	dc.b	nC3, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AF131 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5A
000AF136 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nC3
000AF142 9EA0 A303 A509 9E06 A0A3+  	dc.b	nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, $04, nRst
000AF14E                            
000AF14E                            ToxicLandfill_Loop5B:
000AF14E 6E                         	dc.b	$6E
000AF14F F700 07FF FB               	smpsLoop            $00, $07, ToxicLandfill_Loop5B
000AF154                            
000AF154                            ToxicLandfill_Loop5C:
000AF154 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AF160 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop5C
000AF165                            
000AF165                            ToxicLandfill_Loop5D:
000AF165 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2
000AF170 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5D
000AF175 F701 03FF DB               	smpsLoop            $01, $03, ToxicLandfill_Loop5C
000AF17A                            
000AF17A                            ToxicLandfill_Loop5E:
000AF17A A5A0 A3A4 03A5 09A0 06A3+  	dc.b	nC3, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AF185 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5E
000AF18A A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nC3
000AF196 9EA0 A303 A509 9E06 A0A3+  	dc.b	nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, $05, nRst
000AF1A2 01                         	dc.b	$01
000AF1A3 F6FF 59                    	smpsJump            ToxicLandfill_Jump04
000AF1A6                            
000AF1A6                            ; PSG2 Data
000AF1A6                            ToxicLandfill_PSG2:
000AF1A6 807F 7F7F 03               	dc.b	nRst, $7F, $7F, $7F, $03
000AF1AB                            
000AF1AB                            ToxicLandfill_Jump03:
000AF1AB 80                         	dc.b	nRst
000AF1AC                            
000AF1AC                            ToxicLandfill_Loop50:
000AF1AC 60                         	dc.b	$60
000AF1AD F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop50
000AF1B2 A006 9B9E 9F03 A009 9B06+  	dc.b	nG2, $06, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000AF1BE A09B 9E9F 03A0 0880 019B+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $08, nRst, $01, nD2, $06, nF2
000AF1CA 9FA0 999B 9E03 A009 9906+  	dc.b	nFs2, nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
000AF1D6 A099 9B9E 03A0 0880 0199+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2
000AF1E2 9E                         	dc.b	nF2
000AF1E3                            
000AF1E3                            ToxicLandfill_Loop51:
000AF1E3 A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000AF1EE F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop51
000AF1F3 A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, nG2
000AF1FF 999B 9E03 A008 8001 9906+  	dc.b	nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2, nF2
000AF20B 0580                       	dc.b	$05, nRst
000AF20D                            
000AF20D                            ToxicLandfill_Loop52:
000AF20D 60                         	dc.b	$60
000AF20E F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop52
000AF213 01                         	dc.b	$01
000AF214                            
000AF214                            ToxicLandfill_Loop53:
000AF214 A006 9B9E 9F03 A009 9B06+  	dc.b	nG2, $06, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000AF220 A09B 9E9F 03A0 0880 019B+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $08, nRst, $01, nD2, $06, nF2
000AF22C 9FA0 999B 9E03 A009 9906+  	dc.b	nFs2, nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
000AF238 A099 9B9E 03A0 0880 0199+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2
000AF244 9E                         	dc.b	nF2
000AF245 F700 02FF CB               	smpsLoop            $00, $02, ToxicLandfill_Loop53
000AF24A                            
000AF24A                            ToxicLandfill_Loop54:
000AF24A A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000AF255 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop54
000AF25A                            
000AF25A                            ToxicLandfill_Loop55:
000AF25A A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
000AF265 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop55
000AF26A                            
000AF26A                            ToxicLandfill_Loop56:
000AF26A A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000AF275 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop56
000AF27A A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, nG2
000AF286 999B 9E03 A009 9906 9B9E+  	dc.b	nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, $05, nRst
000AF292 01                         	dc.b	$01
000AF293 F6FF 16                    	smpsJump            ToxicLandfill_Jump03
000AF296                            
000AF296                            ; PSG3 Data
000AF296                            ToxicLandfill_PSG3:
000AF296 F3E7                       	smpsPSGform         $E7
000AF298 807F 41C6 0C0C 0C0C        	dc.b	nRst, $7F, $41, nMaxPSG, $0C, $0C, $0C, $0C
000AF2A0                            
000AF2A0                            ToxicLandfill_Loop4E:
000AF2A0 0C0C 0603 03               	dc.b	$0C, $0C, $06, $03, $03
000AF2A5 F501                       	smpsPSGvoice        fTone_01
000AF2A7 0C                         	dc.b	$0C
000AF2A8 F502                       	smpsPSGvoice        fTone_02
000AF2AA F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop4E
000AF2AF 0603 03                    	dc.b	$06, $03, $03
000AF2B2 F501                       	smpsPSGvoice        fTone_01
000AF2B4 06                         	dc.b	$06
000AF2B5 F502                       	smpsPSGvoice        fTone_02
000AF2B7 03                         	dc.b	$03
000AF2B8 F501                       	smpsPSGvoice        fTone_01
000AF2BA 0906 0606                  	dc.b	$09, $06, $06, $06
000AF2BE                            
000AF2BE                            ToxicLandfill_Jump02:
000AF2BE E77F E77F E77F E715        	dc.b	smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $15
000AF2C6 F502                       	smpsPSGvoice        fTone_02
000AF2C8 C618 1818                  	dc.b	nMaxPSG, $18, $18, $18
000AF2CC F501                       	smpsPSGvoice        fTone_01
000AF2CE 18                         	dc.b	$18
000AF2CF F502                       	smpsPSGvoice        fTone_02
000AF2D1 1806                       	dc.b	$18, $06
000AF2D3 F501                       	smpsPSGvoice        fTone_01
000AF2D5 0909 0909 0618             	dc.b	$09, $09, $09, $09, $06, $18
000AF2DB F502                       	smpsPSGvoice        fTone_02
000AF2DD 1818 18                    	dc.b	$18, $18, $18
000AF2E0 F501                       	smpsPSGvoice        fTone_01
000AF2E2 18                         	dc.b	$18
000AF2E3 F502                       	smpsPSGvoice        fTone_02
000AF2E5 1806                       	dc.b	$18, $06
000AF2E7 F501                       	smpsPSGvoice        fTone_01
000AF2E9 0909 0909 067F E77F E77F+  	dc.b	$09, $09, $09, $09, $06, $7F, smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $1B
000AF2F5 F502                       	smpsPSGvoice        fTone_02
000AF2F7 1818 18                    	dc.b	$18, $18, $18
000AF2FA F501                       	smpsPSGvoice        fTone_01
000AF2FC 18                         	dc.b	$18
000AF2FD F502                       	smpsPSGvoice        fTone_02
000AF2FF 1806                       	dc.b	$18, $06
000AF301 F501                       	smpsPSGvoice        fTone_01
000AF303 0909 0909 0618             	dc.b	$09, $09, $09, $09, $06, $18
000AF309 F502                       	smpsPSGvoice        fTone_02
000AF30B 1818 18                    	dc.b	$18, $18, $18
000AF30E F501                       	smpsPSGvoice        fTone_01
000AF310 18                         	dc.b	$18
000AF311 F502                       	smpsPSGvoice        fTone_02
000AF313 1806                       	dc.b	$18, $06
000AF315 F501                       	smpsPSGvoice        fTone_01
000AF317 0909 0909 06               	dc.b	$09, $09, $09, $09, $06
000AF31C                            
000AF31C                            ToxicLandfill_Loop4F:
000AF31C 59E7                       	dc.b	$59, smpsNoAttack
000AF31E F700 0CFF FA               	smpsLoop            $00, $0C, ToxicLandfill_Loop4F
000AF323 5A                         	dc.b	$5A
000AF324 F6FF 98                    	smpsJump            ToxicLandfill_Jump02
000AF327                            
000AF327                            
000AF327                            ToxicLandfill_Voices:
000AF327                            ;	Voice $00
000AF327                            ;	$29
000AF327                            ;	$33, $02, $02, $01, 	$1F, $1F, $1F, $19, 	$00, $02, $00, $0B
000AF327                            ;	$03, $02, $00, $03, 	$0A, $1A, $0A, $1A, 	$1A, $1D, $20, $05
000AF327                            	smpsVcAlgorithm     $01
000AF327                            	smpsVcFeedback      $05
000AF327                            	smpsVcUnusedBits    $00
000AF327                            	smpsVcDetune        $00, $00, $00, $03
000AF327                            	smpsVcCoarseFreq    $01, $02, $02, $03
000AF327                            	smpsVcRateScale     $00, $00, $00, $00
000AF327                            	smpsVcAttackRate    $19, $1F, $1F, $1F
000AF327                            	smpsVcAmpMod        $00, $00, $00, $00
000AF327                            	smpsVcDecayRate1    $0B, $00, $02, $00
000AF327                            	smpsVcDecayRate2    $03, $00, $02, $03
000AF327                            	smpsVcDecayLevel    $01, $00, $01, $00
000AF327                            	smpsVcReleaseRate   $0A, $0A, $0A, $0A
000AF340                            	
000AF340                            ;	Voice $01
000AF340                            ;	$18
000AF340                            ;	$37, $30, $30, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
000AF340                            ;	$08, $0A, $03, $05, 	$BF, $BF, $3F, $2F, 	$32, $22, $14, $00
000AF340                            	smpsVcAlgorithm     $00
000AF340                            	smpsVcFeedback      $03
000AF340                            	smpsVcUnusedBits    $00
000AF340                            	smpsVcDetune        $03, $03, $03, $03
000AF340                            	smpsVcCoarseFreq    $01, $00, $00, $07
000AF340                            	smpsVcRateScale     $02, $00, $03, $02
000AF340                            	smpsVcAttackRate    $1C, $1C, $1C, $1E
000AF340                            	smpsVcAmpMod        $00, $00, $00, $00
000AF340                            	smpsVcDecayRate1    $01, $04, $06, $0D
000AF340                            	smpsVcDecayRate2    $05, $03, $0A, $08
000AF340                            	smpsVcDecayLevel    $02, $03, $0B, $0B
000AF340                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000AF359                            
000AF359                            ;	Voice $02
000AF359                            ;	$2C
000AF359                            ;	$72, $78, $34, $34, 	$1F, $12, $1F, $12, 	$00, $0A, $00, $0A
000AF359                            ;	$00, $00, $00, $00, 	$00, $16, $00, $16, 	$16, $00, $17, $00
000AF359                            	smpsVcAlgorithm     $04
000AF359                            	smpsVcFeedback      $05
000AF359                            	smpsVcUnusedBits    $00
000AF359                            	smpsVcDetune        $03, $03, $07, $07
000AF359                            	smpsVcCoarseFreq    $04, $04, $08, $02
000AF359                            	smpsVcRateScale     $00, $00, $00, $00
000AF359                            	smpsVcAttackRate    $12, $1F, $12, $1F
000AF359                            	smpsVcAmpMod        $00, $00, $00, $00
000AF359                            	smpsVcDecayRate1    $0A, $00, $0A, $00
000AF359                            	smpsVcDecayRate2    $00, $00, $00, $00
000AF359                            	smpsVcDecayLevel    $01, $00, $01, $00
000AF359                            	smpsVcReleaseRate   $06, $00, $06, $00
000AF372                            		even			
000AF372                            Music9A:		include	"sound/music/Mus9A - RRZ2.asm"
000AF372                            RRZ2_Header:
000AF372                            	smpsHeaderStartSong 1
000AF374 0603                       	smpsHeaderChan      $06, $03
000AF376 0104                       	smpsHeaderTempo     $01, $04
000AF378                            
000AF37C 0000 0010                  	smpsHeaderFM        RRZ2_FM1,	$00, $10
000AF380 0000 0C0D                  	smpsHeaderFM        RRZ2_FM2,	$0C, $0D
000AF384 0000 0019                  	smpsHeaderFM        RRZ2_FM3,	$00, $19
000AF388 0000 0019                  	smpsHeaderFM        RRZ2_FM4,	$00, $19
000AF38C 0000 0019                  	smpsHeaderFM        RRZ2_FM5,	$00, $19
000AF3A2                            
000AF3A2                            ; FM1 Data
000AF3A2                            RRZ2_FM1:
000AF3A2 E0C0                       	smpsPan             panCenter, $00
000AF3A9 EF03                       	smpsSetvoice        $03
000AF3AB B160 BD18 B8BB 12B4 AF0C+  	dc.b	nC4, $60, nC5, $18, nG4, nBb4, $12, nEb4, nBb3, $0C, nC4, $60
000AF3B7 BD18 B8BB 12B4 C00C B160+  	dc.b	nC5, $18, nG4, nBb4, $12, nEb4, nEb5, $0C, nC4, $60, $18, nG4
000AF3C3 BD12 C0C4 0C30 C2C0 B804+  	dc.b	nC5, $12, nEb5, nG5, $0C, $30, nF5, nEb5, nG4, $04, nF4, nEb4
000AF3CF B6B4 B3B4 B3B1 AFAC AFB1+  	dc.b	nF4, nEb4, nD4, nEb4, nD4, nC4, nBb3, nG3, nBb3, nC4, $60, nRst
000AF3DB 8080                       	dc.b	nRst, nRst
000AF3DD EF00                       	smpsSetvoice        $00
000AF3DF B848 0CB1 B430 0CB3 B4BB+  	dc.b	nG4, $48, $0C, nC4, nEb4, $30, $0C, nD4, nEb4, nBb4, nA4, $30
000AF3EB B8E7 B82E 8032 B860 B130+  	dc.b	nG4, smpsNoAttack, nG4, $2E, nRst, $32, nG4, $60, nC4, $30, $18, nG4
000AF3F7 0CB4 BB30 BDBA 60B8 30B1+  	dc.b	$0C, nEb4, nBb4, $30, nC5, nA4, $60, nG4, $30, nC4, nEb4, $18
000AF403 B3AF AE0C AFB1 30B8 E7B8+  	dc.b	nD4, nBb3, nA3, $0C, nBb3, nC4, $30, nG4, smpsNoAttack, nG4, $2E, nRst
000AF40F 32B4 600C B3B4 B8BB 18BA+  	dc.b	$32, nEb4, $60, $0C, nD4, nEb4, nG4, nBb4, $18, nA4, $0C, nF4
000AF41B B818 B630 BB12 BA06 E760+  	dc.b	nG4, $18, nF4, $30, nBb4, $12, nA4, $06, smpsNoAttack, $60, nA4, $60
000AF427 C918 C4C7 14C6 10BD 0CC0+  	dc.b	nC6, $18, nG5, nBb5, $14, nA5, $10, nC5, $0C, nEb5, $2E, nRst
000AF433 3280 60                    	dc.b	$32, nRst, $60
000AF436 EF05                       	smpsSetvoice        $05
000AF438 E9F4                       	smpsAlterPitch      $F4
000AF43A B930 BDB4 60B7 30AF B260+  	dc.b	nAb4, $30, nC5, nEb4, $60, nFs4, $30, nBb3, nCs4, $60, nAb4, $30
000AF446 B4B9 C0C3 B7E7 B760        	dc.b	nEb4, nAb4, nEb5, nFs5, nFs4, smpsNoAttack, nFs4, $60
000AF44E E90C                       	smpsAlterPitch      $0C
000AF450 B160 A5B1 30AC B860 B430+  	dc.b	nC4, $60, nC3, nC4, $30, nG3, nG4, $60, nEb4, $30, nBb4, nG4
000AF45C 60B1 30AC B8B6 B460 B630+  	dc.b	$60, nC4, $30, nG3, nG4, nF4, nEb4, $60, nF4, $30, nD4, nG4
000AF468 60E7 30C0 18BF             	dc.b	$60, smpsNoAttack, $30, nEb5, $18, nD5
000AF46E F6FF 32                    	smpsJump            RRZ2_FM1
000AF471                            
000AF471                            ; FM2 Data
000AF471                            RRZ2_FM2:
000AF471 E0C0                       	smpsPan             panCenter, $00
000AF478 EF01                       	smpsSetvoice        $01
000AF47A                            
000AF47A                            RRZ2_Jump02:
000AF47A 9960 E748 0C9B 9C60 E79C+  	dc.b	nC2, $60, smpsNoAttack, $48, $0C, nD2, nEb2, $60, smpsNoAttack, nEb2, nF2, nF2
000AF486 480C 9FA0 6030 049E 9C9E+  	dc.b	$48, $0C, nFs2, nG2, $60, $30, $04, nF2, nEb2, nF2, nEb2, nD2
000AF492 9C9B 9997 9497 9908 0494+  	dc.b	nEb2, nD2, nC2, nBb1, nG1, nBb1, nC2, $08, $04, nG1, $0C, nBb1
000AF49E 9908 0480 3080 0899 0480+  	dc.b	nC2, $08, $04, nRst, $30, nRst, $08, nC2, $04, nRst, $0C, nC2
000AF4AA 8097 0480 0897 8004 970C+  	dc.b	nRst, nBb1, $04, nRst, $08, nBb1, nRst, $04, nBb1, $0C, nG1, $08
000AF4B6 9704 9908 0494 0C97 9908+  	dc.b	nBb1, $04, nC2, $08, $04, nG1, $0C, nBb1, nC2, $08, $04, nRst
000AF4C2 3080 0899 0480 0C99 8097+  	dc.b	$30, nRst, $08, nC2, $04, nRst, $0C, nC2, nRst, nBb1, $04, nRst
000AF4CE 0897 8004 9480 9410        	dc.b	$08, nBb1, nRst, $04, nG1, nRst, nG1, $10
000AF4D6                            
000AF4D6                            RRZ2_Loop07:
000AF4D6 9908 0494 0C97 9908 0480+  	dc.b	nC2, $08, $04, nG1, $0C, nBb1, nC2, $08, $04, nRst, $30, nRst
000AF4E2 0899 0480 0C99 8097 0480+  	dc.b	$08, nC2, $04, nRst, $0C, nC2, nRst, nBb1, $04, nRst, $08, nBb1
000AF4EE 8004 970C 9408 9704        	dc.b	nRst, $04, nBb1, $0C, nG1, $08, nBb1, $04
000AF4F6 F700 08FF DC               	smpsLoop            $00, $08, RRZ2_Loop07
000AF4FB                            
000AF4FB                            RRZ2_Loop08:
000AF4FB 9908 0494 0C97 9908 0480+  	dc.b	nC2, $08, $04, nG1, $0C, nBb1, nC2, $08, $04, nRst, $30, nRst
000AF507 0899 0480 0C99 8097 0480+  	dc.b	$08, nC2, $04, nRst, $0C, nC2, nRst, nBb1, $04, nRst, $08, nBb1
000AF513 8004 970C 9408 9704        	dc.b	nRst, $04, nBb1, $0C, nG1, $08, nBb1, $04
000AF51B F700 02FF DC               	smpsLoop            $00, $02, RRZ2_Loop08
000AF520 9508 9C04 A108 9C04 9508+  	dc.b	nAb1, $08, nEb2, $04, nAb2, $08, nEb2, $04, nAb1, $08, $04, nRst
000AF52C 0895 2680 0A95 04A1 1680+  	dc.b	$08, nAb1, $26, nRst, $0A, nAb1, $04, nAb2, $16, nRst, $0E, nAb2
000AF538 049C A1A6 0CA5 A19C 08A1+  	dc.b	$04, nEb2, nAb2, nCs3, $0C, nC3, nAb2, nEb2, $08, nAb2, $04, nFs1
000AF544 089A 049F 089A 0493 0804+  	dc.b	$08, nCs2, $04, nFs2, $08, nCs2, $04, nFs1, $08, $04, nRst, $08
000AF550 9304 2280 0A93 049F 8093+  	dc.b	nFs1, $04, $22, nRst, $0A, nFs1, $04, nFs2, nRst, nFs1, nRst, $08
000AF55C 9304 0C92 0893 0480 0893+  	dc.b	nFs1, $04, $0C, nF1, $08, nFs1, $04, nRst, $08, nFs1, $04, nFs1
000AF568 9A9F A408 A304 A408 A304+  	dc.b	nCs2, nFs2, nB2, $08, nBb2, $04, nB2, $08, nBb2, $04, nAb1, $08
000AF574 9C04 A108 9C04 9508 0480+  	dc.b	nEb2, $04, nAb2, $08, nEb2, $04, nAb1, $08, $04, nRst, $08, nAb1
000AF580 2680 0A95 04A1 1680 0EA1+  	dc.b	$26, nRst, $0A, nAb1, $04, nAb2, $16, nRst, $0E, nAb2, $04, nEb2
000AF58C A1A6 A5A6 ADA8 A39F 9E9F+  	dc.b	nAb2, nCs3, nC3, nCs3, nAb3, nEb3, nBb2, nFs2, nF2, nFs2, nEb2, nBb2
000AF598 9C93 089A 049F 089A 0493+  	dc.b	nEb2, nFs1, $08, nCs2, $04, nFs2, $08, nCs2, $04, nFs1, $08, $04
000AF5A4 8008 9304 2280 0A93 049F+  	dc.b	nRst, $08, nFs1, $04, $22, nRst, $0A, nFs1, $04, nFs2, nRst, nFs1
000AF5B0 8008 9304 0C92 0893 0480+  	dc.b	nRst, $08, nFs1, $04, $0C, nF1, $08, nFs1, $04, nRst, $08, nFs1
000AF5BC 0493 9A9F A408 A304 A408+  	dc.b	$04, nFs1, nCs2, nFs2, nB2, $08, nBb2, $04, nB2, $08, nBb2, $04
000AF5C8 8D08 048D 8008 8D0C 8F08+  	dc.b	nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04
000AF5D4 8008 8D0C 0408 8F04 900C+  	dc.b	nRst, $08, nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08
000AF5E0 048D 8008 8D0C 8F08 9004+  	dc.b	$04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08
000AF5EC 8D0C 0408 8F04 900C 8D08+  	dc.b	nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1
000AF5F8 8008 8D0C 8F08 9004 8008+  	dc.b	nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C
000AF604 0408 8F04 900C 8D08 048D+  	dc.b	$04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08
000AF610 8D0C 8F08 9004 8008 8D0C+  	dc.b	nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08
000AF61C 8F04 900C 8D08 048D 8008+  	dc.b	nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C
000AF628 8F08 9004 8008 8D0C 0408+  	dc.b	nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08, nD1, $04
000AF634 900C 8D08 048D 8008 8D0C+  	dc.b	nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08
000AF640 9004 8008 8D0C 0408 8F04+  	dc.b	nEb1, $04, nRst, $08, nC1, $0C, $04, $08, nD1, $04, nEb1, $0C
000AF64C 8D08 048D 8008 8D0C 8F08+  	dc.b	nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04
000AF658 8008 8D0C 0408 8F04 900C+  	dc.b	nRst, $08, nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08
000AF664 048D 8008 8D0C 8F08 9004+  	dc.b	$04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08
000AF670 8D0C 0408 8F04 900C 8D08+  	dc.b	nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1
000AF67C 8008 8D0C 8F08 9004 8008+  	dc.b	nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C
000AF688 0408 8F04 900C 8D08 048D+  	dc.b	$04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08
000AF694 8D0C 8F08 9004 8008 8D0C+  	dc.b	nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08
000AF6A0 8F04 900C 8D08 048D 8008+  	dc.b	nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C
000AF6AC 8F08 9004 8008 8D0C 0408+  	dc.b	nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08, nD1, $04
000AF6B8 900C 8D08 048D 8008 8D0C+  	dc.b	nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08
000AF6C4 9004 940C 8094 18          	dc.b	nEb1, $04, nG1, $0C, nRst, nG1, $18
000AF6CB F6FD AD                    	smpsJump            RRZ2_Jump02
000AF6CE                            
000AF6CE                            ; FM3 Data
000AF6CE                            RRZ2_FM3:
000AF6CE E080                       	smpsPan             panLeft, $00
000AF6D5                            
000AF6D5                            RRZ2_Jump01:
000AF6D5 EF02                       	smpsSetvoice        $02
000AF6D7                            
000AF6D7                            RRZ2_Loop05:
000AF6D7 B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000AF6E3 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000AF6EF 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000AF6FB 8008 B104 AF08 B104 8008+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04
000AF707 ACAF B1B8 0810             	dc.b	nG3, nBb3, nC4, nG4, $08, $10
000AF70D F700 03FF C6               	smpsLoop            $00, $03, RRZ2_Loop05
000AF712 B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000AF71E 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000AF72A 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000AF736 8008 B104 AF08 B104 B8B6+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nG4, nF4, nG4, nF4
000AF742 B4B6 B4B3 B4B3 B1AF        	dc.b	nEb4, nF4, nEb4, nD4, nEb4, nD4, nC4, nBb3
000AF74A                            
000AF74A                            RRZ2_Loop06:
000AF74A AC0C B8AC 08B6 0CAC 04B4+  	dc.b	nG3, $0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3
000AF756 08B3 0CAC 04B4 8008 AC04+  	dc.b	$08, nD4, $0C, nG3, $04, nEb4, nRst, $08, nG3, $04, nRst, $08
000AF762 B1B3 04B4 08B8 0480 08AC+  	dc.b	nC4, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nG3, $04, nC4
000AF76E 08B3 04B4 08B8 0480 08BB+  	dc.b	$08, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nBb4, $10, nG3
000AF77A 0CB8 AC08 B60C AC04 B40C+  	dc.b	$0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3, $08
000AF786 B30C AC04 B480 08B1 AC04+  	dc.b	nD4, $0C, nG3, $04, nEb4, nRst, $08, nC4, nG3, $04, nG4, $08
000AF792 B604 B408 B304 8008 B404+  	dc.b	nF4, $04, nEb4, $08, nD4, $04, nRst, $08, nEb4, $04, nF4, $08
000AF79E B404 B680 08B8 BB04 B880+  	dc.b	nEb4, $04, nF4, nRst, $08, nG4, nBb4, $04, nG4, nRst, $08
000AF7A9 F700 05FF 9D               	smpsLoop            $00, $05, RRZ2_Loop06
000AF7AE AC0C B8AC 08B6 0CAC 04B4+  	dc.b	nG3, $0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3
000AF7BA 08B3 0CAC 04B4 8008 AC04+  	dc.b	$08, nD4, $0C, nG3, $04, nEb4, nRst, $08, nG3, $04, nRst, $08
000AF7C6 B1B3 04B4 08B8 0480 08AC+  	dc.b	nC4, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nG3, $04, nC4
000AF7D2 08B3 04B4 08B8 0480 08BB+  	dc.b	$08, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nBb4, $10, nG3
000AF7DE 0CB8 AC08 B60C AC04 B40C+  	dc.b	$0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3, $08
000AF7EA B30C AC04 B480 08B1 AC04+  	dc.b	nD4, $0C, nG3, $04, nEb4, nRst, $08, nC4, nG3, $04, nG4, $08
000AF7F6 B604 B408 B304 8008 B404+  	dc.b	nF4, $04, nEb4, $08, nD4, $04, nRst, $08, nEb4, $04, nF4, $08
000AF802 B404 B680 08B8 BB04 B880+  	dc.b	nEb4, $04, nF4, nRst, $08, nG4, nBb4, $04, nG4, nRst, $08
000AF80D EF05                       	smpsSetvoice        $05
000AF80F 8060 8018 BD04 B9B4 B9B4+  	dc.b	nRst, $60, nRst, $18, nC5, $04, nAb4, nEb4, nAb4, nEb4, nC4, nEb4
000AF81B B1AD B1AD A8A1 1880 60B7+  	dc.b	nC4, nAb3, nC4, nAb3, nEb3, nAb2, $18, nRst, $60, nFs4, $04, nCs4
000AF827 AFAB AFB2 B7AF ABA6 ABAF+  	dc.b	nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3, nFs3, nBb3, nFs3, nCs3
000AF833 A39F 2480 6080 18BD 04B9+  	dc.b	nBb2, nFs2, $24, nRst, $60, nRst, $18, nC5, $04, nAb4, nEb4, nAb4
000AF83F B4B1 B4B1 ADB1 ADA8 A118+  	dc.b	nEb4, nC4, nEb4, nC4, nAb3, nC4, nAb3, nEb3, nAb2, $18, nRst, $60
000AF84B B704 B2AF ABAF B2B7 AFAB+  	dc.b	nFs4, $04, nCs4, nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3, nFs3
000AF857 AFAB A6A3 9F24             	dc.b	nBb3, nFs3, nCs3, nBb2, nFs2, $24
000AF85D E6FA                       	smpsAlterVol        $FA
000AF85F A560 E7A5 B148 0804 8008+  	dc.b	nC3, $60, smpsNoAttack, nC3, nC4, $48, $08, $04, nRst, $08, nC4, $04
000AF86B 8008 AF04 22E7 1A08 0480+  	dc.b	nRst, $08, nBb3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08, nBb3
000AF877 0480 08AD 0422 E71A 0804+  	dc.b	$04, nRst, $08, nAb3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08
000AF883 AD04 8008 AC04 240C AAA8+  	dc.b	nAb3, $04, nRst, $08, nG3, $04, $24, $0C, nF3, nEb3, nD3, nC4
000AF88F 4808 0408 0480 08B3 0422+  	dc.b	$48, $08, $04, $08, $04, nRst, $08, nD4, $04, $22, smpsNoAttack, $1A
000AF89B 0804 8008 B304 8008 B404+  	dc.b	$08, $04, nRst, $08, nD4, $04, nRst, $08, nEb4, $04, $2E, smpsNoAttack
000AF8A7 0E08 0480 08B4 0480 08B6+  	dc.b	$0E, $08, $04, nRst, $08, nEb4, $04, nRst, $08, nF4, $04, $24
000AF8B3 BB30 B860 B118 B1B4 18B3   	dc.b	nBb4, $30, nG4, $60, nC4, $18, nC4, nEb4, $18, nD4
000AF8BD E606                       	smpsAlterVol        $06
000AF8BF F6FE 14                    	smpsJump            RRZ2_Jump01
000AF8C2                            
000AF8C2                            ; FM4 Data
000AF8C2                            RRZ2_FM4:
000AF8C2 E040                       	smpsPan             panRight, $00
000AF8C9                            
000AF8C9                            RRZ2_Jump00:
000AF8C9 EF02                       	smpsSetvoice        $02
000AF8CB                            
000AF8CB                            RRZ2_Loop03:
000AF8CB AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000AF8D7 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000AF8E3 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000AF8EF AC04 AA08 AC04 8008 AC04+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3
000AF8FB ACAF 08B3 10               	dc.b	nG3, nBb3, $08, nD4, $10
000AF900 F700 03FF C7               	smpsLoop            $00, $03, RRZ2_Loop03
000AF905 AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000AF911 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000AF91D 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000AF929 AC04 AA08 AC04 B4B3 B4B3+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nEb4, nD4, nEb4, nD4, nC4, nD4
000AF935 B1AF B1AF ACAA             	dc.b	nC4, nBb3, nC4, nBb3, nG3, nF3
000AF93B                            
000AF93B                            RRZ2_Loop04:
000AF93B A00C ACA0 08AA 0CA0 04A8+  	dc.b	nG2, $0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2
000AF947 08A7 0CA0 04A8 8008 A004+  	dc.b	$08, nD3, $0C, nG2, $04, nEb3, nRst, $08, nG2, $04, nRst, $08
000AF953 A5A7 04A8 08AC 0480 08A0+  	dc.b	nC3, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nG2, $04, nC3
000AF95F 08A7 04A8 08AC 0480 08AF+  	dc.b	$08, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nBb3, $10, nG2
000AF96B 0CAC A008 AA0C A004 A80C+  	dc.b	$0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2, $08
000AF977 A70C A004 A880 08A5 A004+  	dc.b	nD3, $0C, nG2, $04, nEb3, nRst, $08, nC3, nG2, $04, nG3, $08
000AF983 AA04 A808 A704 8008 A804+  	dc.b	nF3, $04, nEb3, $08, nD3, $04, nRst, $08, nEb3, $04, nF3, $08
000AF98F A804 AA80 08AC AF04 AC80+  	dc.b	nEb3, $04, nF3, nRst, $08, nG3, nBb3, $04, nG3, nRst, $08
000AF99A F700 05FF 9D               	smpsLoop            $00, $05, RRZ2_Loop04
000AF99F A00C ACA0 08AA 0CA0 04A8+  	dc.b	nG2, $0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2
000AF9AB 08A7 0CA0 04A8 8008 A004+  	dc.b	$08, nD3, $0C, nG2, $04, nEb3, nRst, $08, nG2, $04, nRst, $08
000AF9B7 A5A7 04A8 08AC 0480 08A0+  	dc.b	nC3, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nG2, $04, nC3
000AF9C3 08A7 04A8 08AC 0480 08AF+  	dc.b	$08, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nBb3, $10, nG2
000AF9CF 0CAC A008 AA0C A004 A80C+  	dc.b	$0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2, $08
000AF9DB A70C A004 A880 08A5 A004+  	dc.b	nD3, $0C, nG2, $04, nEb3, nRst, $08, nC3, nG2, $04, nG3, $08
000AF9E7 AA04 A808 A704 8008 A804+  	dc.b	nF3, $04, nEb3, $08, nD3, $04, nRst, $08, nEb3, $04, nF3, $08
000AF9F3 A804 AA80 08AC AF04 AC08+  	dc.b	nEb3, $04, nF3, nRst, $08, nG3, nBb3, $04, nG3, $08, nRst, $04
000AF9FF EF05                       	smpsSetvoice        $05
000AFA01 8060 8018 800C BD04 B9B4+  	dc.b	nRst, $60, nRst, $18, nRst, $0C, nC5, $04, nAb4, nEb4, nAb4, nEb4
000AFA0D B1B4 B1AD B1AD A8A1 0C80+  	dc.b	nC4, nEb4, nC4, nAb3, nC4, nAb3, nEb3, nAb2, $0C, nRst, $60, nRst
000AFA19 0CB7 04B2 AFAB AFB2 B7AF+  	dc.b	$0C, nFs4, $04, nCs4, nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3
000AFA25 ABAF ABA6 E7A3 1CE7 0880+  	dc.b	nFs3, nBb3, nFs3, nCs3, smpsNoAttack, nBb2, $1C, smpsNoAttack, $08, nRst, $58, nRst
000AFA31 1880 0CBD 04B9 B4B9 B4B1+  	dc.b	$18, nRst, $0C, nC5, $04, nAb4, nEb4, nAb4, nEb4, nC4, nEb4, nC4
000AFA3D ADB1 ADA8 A10C 8060 800C+  	dc.b	nAb3, nC4, nAb3, nEb3, nAb2, $0C, nRst, $60, nRst, $0C, nFs4, $04
000AFA49 B2AF ABAF B2B7 AFAB A6AB+  	dc.b	nCs4, nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3, nFs3, nBb3, nFs3
000AFA55 A6E7 A31C                  	dc.b	nCs3, smpsNoAttack, nBb2, $1C
000AFA59 E6FA                       	smpsAlterVol        $FA
000AFA5B A060 E7A0 AC48 0804 8008+  	dc.b	nG2, $60, smpsNoAttack, nG2, nG3, $48, $08, $04, nRst, $08, nG3, $04
000AFA67 8008 AC04 22E7 1A08 0480+  	dc.b	nRst, $08, nG3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08, nG3
000AFA73 0480 08A8 0422 E71A 0804+  	dc.b	$04, nRst, $08, nEb3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08
000AFA7F A804 8008 A704 2418 A0AC+  	dc.b	nEb3, $04, nRst, $08, nD3, $04, $24, $18, nG2, nG3, $48, $08
000AFA8B 0408 0480 08AC 0422 E71A+  	dc.b	$04, $08, $04, nRst, $08, nG3, $04, $22, smpsNoAttack, $1A, $08, $04
000AFA97 8008 AC04 8008 AC04 2EE7+  	dc.b	nRst, $08, nG3, $04, nRst, $08, nG3, $04, $2E, smpsNoAttack, $0E, $08
000AFAA3 0480 08AC 0480 08AF 0424+  	dc.b	$04, nRst, $08, nG3, $04, nRst, $08, nBb3, $04, $24, nD4, $30
000AFAAF B160 AC18 ACAC 18AC        	dc.b	nC4, $60, nG3, $18, nG3, nG3, $18, nG3
000AFAB7 E606                       	smpsAlterVol        $06
000AFAB9 F6FE 0E                    	smpsJump            RRZ2_Jump00
000AFABC                            
000AFABC                            ; FM5 Data
000AFABC                            RRZ2_FM5:
000AFAC1 8010                       	dc.b	nRst, $10
000AFAC3 E101                       	smpsAlterNote       $01
000AFAC5 F6F8 DB                    	smpsJump            RRZ2_FM1
000AFAC8                            
000AFAC8                            ; PSG1 Data
000AFAC8                            RRZ2_PSG1:
000AFACD F507                       	smpsPSGvoice        stone_1D
000AFACF B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000AFADB 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000AFAE7 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000AFAF3 8008 B104 AF08 B104 8008+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04
000AFAFF ACAF B1B8 0810             	dc.b	nG3, nBb3, nC4, nG4, $08, $10
000AFB05 F700 03FF BF               	smpsLoop            $00, $03, RRZ2_PSG1
000AFB0A B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000AFB16 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000AFB22 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000AFB2E 8008 B104 AF08 B104 B8B6+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nG4, nF4, nG4, nF4
000AFB3A B4B6 B4B3 B4B3 B1AF        	dc.b	nEb4, nF4, nEb4, nD4, nEb4, nD4, nC4, nBb3
000AFB42 F507                       	smpsPSGvoice        stone_26
000AFB44 B860 E7B8 1680 4AB8 60E7+  	dc.b	nG4, $60, smpsNoAttack, nG4, $16, nRst, $4A, nG4, $60, smpsNoAttack, nG4, $16
000AFB50 804A                       	dc.b	nRst, $4A
000AFB52                            
000AFB52                            RRZ2_Loop0D:
000AFB52 B860 E7B8 1680 4ABB 60E7+  	dc.b	nG4, $60, smpsNoAttack, nG4, $16, nRst, $4A, nBb4, $60, smpsNoAttack, nBb4, $16
000AFB5E 804A                       	dc.b	nRst, $4A
000AFB60 F700 02FF EE               	smpsLoop            $00, $02, RRZ2_Loop0D
000AFB65 BA60 E7BA 1680 4AB8 60E7+  	dc.b	nA4, $60, smpsNoAttack, nA4, $16, nRst, $4A, nG4, $60, smpsNoAttack, nG4, $16
000AFB71 804A B860 E7B8 1680 4ABB+  	dc.b	nRst, $4A, nG4, $60, smpsNoAttack, nG4, $16, nRst, $4A, nBb4, $60, smpsNoAttack
000AFB7D BB16 804A                  	dc.b	nBb4, $16, nRst, $4A
000AFB81                            
000AFB81                            RRZ2_Loop0E:
000AFB81 F507                       	smpsPSGvoice        stone_23
000AFB83 B808 04B8 8008 B8B6 0480+  	dc.b	nG4, $08, $04, nG4, nRst, $08, nG4, nF4, $04, nRst, $08, nG4
000AFB8F 0480 08B8 04B6 8008 B8BB+  	dc.b	$04, nRst, $08, nG4, $04, nF4, nRst, $08, nG4, nBb4, $04, nRst
000AFB9B 08B8 0480 08B8 04B6 8008+  	dc.b	$08, nG4, $04, nRst, $08, nG4, $04, nF4, nRst, $08, nG4, nBb4
000AFBA7 0480 08B6 0680 2E          	dc.b	$04, nRst, $08, nF4, $06, nRst, $2E
000AFBAE F700 02FF CF               	smpsLoop            $00, $02, RRZ2_Loop0E
000AFBB3                            
000AFBB3                            RRZ2_Loop0F:
000AFBB3 F507                       	smpsPSGvoice        stone_1D
000AFBB5 B908 0480 08B9 0480 08B9+  	dc.b	nAb4, $08, $04, nRst, $08, nAb4, $04, nRst, $08, nAb4, $04, nRst
000AFBC1 08B9 0430 E760 B708 0480+  	dc.b	$08, nAb4, $04, $30, smpsNoAttack, $60, nFs4, $08, $04, nRst, $08, nFs4
000AFBCD 0480 08B7 0480 08B7 0430+  	dc.b	$04, nRst, $08, nFs4, $04, nRst, $08, nFs4, $04, $30, smpsNoAttack, $60
000AFBD9 F700 02FF D6               	smpsLoop            $00, $02, RRZ2_Loop0F
000AFBDE 8060 8030 B804 B1B8 BDB8+  	dc.b	nRst, $60, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000AFBEA B1B8 B10C 8030 B804 B1B8+  	dc.b	nC4, nG4, nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4
000AFBF6 BDB8 B1B8 B10C 8060 8060+  	dc.b	nC5, nG4, nC4, nG4, nC4, $0C, nRst, $60, nRst, $60, nRst, $60
000AFC02 8030 B804 B1B8 BDB8 BDB8+  	dc.b	nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4, nC4, nG4
000AFC0E B10C 8030 B804 B1B8 BDB8+  	dc.b	nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000AFC1A B1B8 B10C 8060 B618 B3AF+  	dc.b	nC4, nG4, nC4, $0C, nRst, $60, nF4, $18, nD4, nBb3, nG3, nC3
000AFC26 30AC A518 ACB4 BB          	dc.b	$30, nG3, nC3, $18, nG3, nEb4, nBb4
000AFC2D F6FE 99                    	smpsJump            RRZ2_PSG1
000AFC30                            
000AFC30                            ; PSG2 Data
000AFC30                            RRZ2_PSG2:
000AFC35 F507                       	smpsPSGvoice        stone_1D
000AFC37                            
000AFC37                            RRZ2_Loop09:
000AFC37 AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000AFC43 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000AFC4F 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000AFC5B AC04 AA08 AC04 8008 AC04+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3
000AFC67 ACAF 08B3 10               	dc.b	nG3, nBb3, $08, nD4, $10
000AFC6C F700 03FF C7               	smpsLoop            $00, $03, RRZ2_Loop09
000AFC71 AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000AFC7D 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000AFC89 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000AFC95 AC04 AA08 AC04 B4B3 B4B3+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nEb4, nD4, nEb4, nD4, nC4, nD4
000AFCA1 B1AF B1AF ACAA             	dc.b	nC4, nBb3, nC4, nBb3, nG3, nF3
000AFCA7 F507                       	smpsPSGvoice        stone_26
000AFCA9 B160 E7B1 1680 4AB1 60E7+  	dc.b	nC4, $60, smpsNoAttack, nC4, $16, nRst, $4A, nC4, $60, smpsNoAttack, nC4, $16
000AFCB5 804A                       	dc.b	nRst, $4A
000AFCB7                            
000AFCB7                            RRZ2_Loop0A:
000AFCB7 B160 E7B1 1680 4AB4 60E7+  	dc.b	nC4, $60, smpsNoAttack, nC4, $16, nRst, $4A, nEb4, $60, smpsNoAttack, nEb4, $16
000AFCC3 804A                       	dc.b	nRst, $4A
000AFCC5 F700 02FF EE               	smpsLoop            $00, $02, RRZ2_Loop0A
000AFCCA B660 E7B6 1680 4AB4 60E7+  	dc.b	nF4, $60, smpsNoAttack, nF4, $16, nRst, $4A, nEb4, $60, smpsNoAttack, nEb4, $16
000AFCD6 804A B160 E7B1 1680 4AB4+  	dc.b	nRst, $4A, nC4, $60, smpsNoAttack, nC4, $16, nRst, $4A, nEb4, $60, smpsNoAttack
000AFCE2 B416 804A                  	dc.b	nEb4, $16, nRst, $4A
000AFCE6                            
000AFCE6                            RRZ2_Loop0B:
000AFCE6 F507                       	smpsPSGvoice        stone_23
000AFCE8 B408 04B4 8008 B4B3 0480+  	dc.b	nEb4, $08, $04, nEb4, nRst, $08, nEb4, nD4, $04, nRst, $08, nEb4
000AFCF4 0480 08B4 04B3 8008 B4B8+  	dc.b	$04, nRst, $08, nEb4, $04, nD4, nRst, $08, nEb4, nG4, $04, nRst
000AFD00 08B4 0480 08B4 04B3 8008+  	dc.b	$08, nEb4, $04, nRst, $08, nEb4, $04, nD4, nRst, $08, nEb4, nG4
000AFD0C 0480 08B3 0680 2E          	dc.b	$04, nRst, $08, nD4, $06, nRst, $2E
000AFD13 F700 02FF CF               	smpsLoop            $00, $02, RRZ2_Loop0B
000AFD18                            
000AFD18                            RRZ2_Loop0C:
000AFD18 F507                       	smpsPSGvoice        stone_1D
000AFD1A B208 0480 08B2 0480 08B2+  	dc.b	nCs4, $08, $04, nRst, $08, nCs4, $04, nRst, $08, nCs4, $04, nRst
000AFD26 08B2 04B1 30E7 60B0 0804+  	dc.b	$08, nCs4, $04, nC4, $30, smpsNoAttack, $60, nB3, $08, $04, nRst, $08
000AFD32 B004 8008 B004 8008 B004+  	dc.b	nB3, $04, nRst, $08, nB3, $04, nRst, $08, nB3, $04, nBb3, $30
000AFD3E E760                       	dc.b	smpsNoAttack, $60
000AFD40 F700 02FF D4               	smpsLoop            $00, $02, RRZ2_Loop0C
000AFD45 800D                       	dc.b	nRst, $0D
000AFD47 EC02                       	smpsPSGAlterVol     $02
000AFD49 8060 8030 B804 B1B8 BDB8+  	dc.b	nRst, $60, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000AFD55 B1B8 B10C 8030 B804 B1B8+  	dc.b	nC4, nG4, nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4
000AFD61 BDB8 B1B8 B10C 8060 8060+  	dc.b	nC5, nG4, nC4, nG4, nC4, $0C, nRst, $60, nRst, $60, nRst, $60
000AFD6D 8030 B804 B1B8 BDB8 BDB8+  	dc.b	nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4, nC4, nG4
000AFD79 B10C 8030 B804 B1B8 BDB8+  	dc.b	nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000AFD85 B1B8 B10C 8060 B618 B3AF+  	dc.b	nC4, nG4, nC4, $0C, nRst, $60, nF4, $18, nD4, nBb3, nG3, nC3
000AFD91 30AC A518 ACB4 BB0B        	dc.b	$30, nG3, nC3, $18, nG3, nEb4, nBb4, $0B
000AFD99 ECFE                       	smpsPSGAlterVol     $FE
000AFD9B F6FE 93                    	smpsJump            RRZ2_PSG2
000AFD9E                            
000AFD9E                            ; PSG3 Data
000AFD9E                            RRZ2_PSG3:
000AFD9E F3E7                       	smpsPSGform         $E7
000AFDA0 8060 80                    	dc.b	nRst, $60, nRst
000AFDA3 F800 00                    	smpsCall            RRZ2_Call00
000AFDA6 F800 00                    	smpsCall            RRZ2_Call00
000AFDA9 F800 00                    	smpsCall            RRZ2_Call01
000AFDAC                            
000AFDAC                            RRZ2_Jump03:
000AFDAC F800 00                    	smpsCall            RRZ2_Call00
000AFDAF F6FF FB                    	smpsJump            RRZ2_Jump03
000AFDB2                            
000AFDB2                            RRZ2_Call00:
000AFDB2 F502                       	smpsPSGvoice        stone_0F
000AFDB4 B104 8080 B180 B1          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nC4
000AFDBB F700 10FF F3               	smpsLoop            $00, $10, RRZ2_Call00
000AFDC0 E3                         	smpsReturn
000AFDC1                            
000AFDC1                            RRZ2_Call01:
000AFDC1 F502                       	smpsPSGvoice        stone_0F
000AFDC3 B104 8080 B180 B1          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nC4
000AFDCA F502                       	smpsPSGvoice        stone_0F
000AFDCC B104 8080 B180 B1          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nC4
000AFDD3 F502                       	smpsPSGvoice        stone_0F
000AFDD5 B104 8080 B180 80          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nRst
000AFDDC F503                       	smpsPSGvoice        stone_04
000AFDDE B10C                       	dc.b	nC4, $0C
000AFDE0 F502                       	smpsPSGvoice        stone_0F
000AFDE2 B104 8080                  	dc.b	nC4, $04, nRst, nRst
000AFDE6 E3                         	smpsReturn
000AFDE7                            
000AFDE7                            ; DAC Data
000AFDE7                            RRZ2_DAC:
000AFDE7 8160 8048 810C 8181 6080+  	dc.b	dKick, $60, nRst, $48, dKick, $0C, dKick, dKick, $60, nRst, $48, dHiTimpani
000AFDF3 0488 8A8B 8B8B 8160 8048+  	dc.b	$04, dHiTimpani, dLowTimpani, dFloorTimpani, dFloorTimpani, dFloorTimpani, dKick, $60, nRst, $48, dKick, $0C
000AFDFF 8181 6080 0882 0480 8080+  	dc.b	dKick, dKick, $60, nRst, $08, dSnare, $04, nRst, nRst, nRst, dSnare, nRst
000AFE0B 8080 8080 8280 8082 8080+  	dc.b	nRst, nRst, nRst, nRst, dSnare, nRst, nRst, dSnare, nRst, nRst, dFloorTimpani, $04
000AFE17 8B8B 8B8B 8B81 0480 8080+  	dc.b	dFloorTimpani, dFloorTimpani, dFloorTimpani, dFloorTimpani, dFloorTimpani, dKick, $04, nRst, nRst, nRst, nRst, nRst
000AFE23 8280 8080 8080 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, dKick, nRst, nRst
000AFE2F 8280 8080 8080 8180 8080+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, nRst, nRst, dKick
000AFE3B 8280 8080 8081 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst, dKick, nRst, nRst
000AFE47 8280 8080 8080 8180 8080+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, nRst, nRst, nRst
000AFE53 8280 8080 8080 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, dKick, nRst, nRst
000AFE5F 8280 8080 8080 8180 8080+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, nRst, nRst, nRst
000AFE6B 8280 8080 8081 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst, dKick, nRst, nRst
000AFE77 8280 8082 8282             	dc.b	dSnare, nRst, nRst, dSnare, dSnare, dSnare
000AFE7D                            
000AFE7D                            RRZ2_Loop00:
000AFE7D 8104 8080 8080 8182 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000AFE89 8181 8080 8180 8082 8080+  	dc.b	dKick, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000AFE95 8081 8080 8080 8182 8080+  	dc.b	nRst, dKick, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000AFEA1 8081 8080 8180 8082 8080+  	dc.b	nRst, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, nRst
000AFEAD 80                         	dc.b	nRst
000AFEAE F700 07FF CB               	smpsLoop            $00, $07, RRZ2_Loop00
000AFEB3 8104 8080 8080 8182 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000AFEBF 8181 8080 8180 8082 8080+  	dc.b	dKick, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000AFECB 8081 8080 8080 8182 8080+  	dc.b	nRst, dKick, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000AFED7 8081 8181 8180 8082 8080+  	dc.b	nRst, dKick, dKick, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, dSnare, dSnare
000AFEE3 82                         	dc.b	dSnare
000AFEE4                            
000AFEE4                            RRZ2_Loop01:
000AFEE4 8104 8080 8080 8182 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000AFEF0 8181 8080 8180 8082 8080+  	dc.b	dKick, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000AFEFC 8081 8080 8080 8182 8080+  	dc.b	nRst, dKick, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000AFF08 8081 8080 8180 8082 8080+  	dc.b	nRst, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, nRst
000AFF14 80                         	dc.b	nRst
000AFF15 F700 02FF CB               	smpsLoop            $00, $02, RRZ2_Loop01
000AFF1A 8104 8080 8180 8180 8082+  	dc.b	dKick, $04, nRst, nRst, dKick, nRst, dKick, nRst, nRst, dSnare, nRst, nRst
000AFF26 8181 3081 0480 8081 8081+  	dc.b	dKick, dKick, $30, dKick, $04, nRst, nRst, dKick, nRst, dKick, nRst, nRst
000AFF32 8180 8081 8118 8181 0480+  	dc.b	dKick, nRst, nRst, dKick, dKick, $18, dKick, dKick, $04, nRst, nRst, dKick
000AFF3E 8081 8080 8280 8081 8180+  	dc.b	nRst, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, dKick, nRst, nRst, nRst
000AFF4A 8081 8280 8080 8080 8180+  	dc.b	nRst, dKick, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, dSnare, nRst
000AFF56 8080 8280 8080 8080 8180+  	dc.b	nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, dKick, dSnare
000AFF62 8080 8180 8182 8080 8104+  	dc.b	nRst, nRst, dKick, nRst, dKick, dSnare, nRst, nRst, dKick, $04, nRst, nRst
000AFF6E 8080 8082 8080 8080 8081+  	dc.b	nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000AFF7A 8180 8082 8080 8080 8081+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000AFF86 8080 8182 8080 8080 8181+  	dc.b	nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst
000AFF92 8180 8082 8080 8080 8081+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000AFF9E 8080 8082 8080 8080 8081+  	dc.b	nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000AFFAA 8180 8082 8080 8080 8081+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000AFFB6 8080 8082 8080 8080 8181+  	dc.b	nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst
000AFFC2 8180 8082 8080 8282 8281+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, dSnare, dSnare, dSnare, dKick, $04, nRst
000AFFCE 8080 8080 8280 8080 8081+  	dc.b	nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000AFFDA 8181 8080 8280 8080 8080+  	dc.b	dKick, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, $04
000AFFE6 8080 8080 8082 8080 8080+  	dc.b	nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick, nRst
000AFFF2 8081 8180 8082 8080 8A8B+  	dc.b	nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, dLowTimpani, dFloorTimpani, dFloorTimpani, dKick
000AFFFE 0480 8080 8080 8280 8080+  	dc.b	$04, nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick
000B000A 8080 8181 8080 8280 8080+  	dc.b	nRst, nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst
000B0016                            
000B0016                            RRZ2_Loop02:
000B0016 8104 8080 8080 8082 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B0022 8180 8081 8180 8082 8080+  	dc.b	dKick, nRst, nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B002E 80                         	dc.b	nRst
000B002F F700 07FF E3               	smpsLoop            $00, $07, RRZ2_Loop02
000B0034 8104 8080 8080 8082 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B0040 8180 8081 8180 8082 8080+  	dc.b	dKick, nRst, nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, nRst
000B004C 8181 1818 8204 0404 0404+  	dc.b	dKick, dKick, $18, $18, dSnare, $04, $04, $04, $04, $04, $04, $04
000B0058 0404 0404 04               	dc.b	$04, $04, $04, $04, $04
000B005D F6FD 88                    	smpsJump            RRZ2_DAC
000B0060                            
000B0060                            RRZ2_Voices:
000B0060                            ;	Voice $00
000B0060                            ;	$3A
000B0060                            ;	$3F, $73, $73, $31, 	$9F, $5F, $54, $17, 	$03, $14, $0A, $05
000B0060                            ;	$01, $05, $01, $01, 	$FF, $EF, $8F, $FF, 	$29, $39, $23, $00
000B0060                            	smpsVcAlgorithm     $02
000B0060                            	smpsVcFeedback      $07
000B0060                            	smpsVcUnusedBits    $00
000B0060                            	smpsVcDetune        $03, $07, $07, $03
000B0060                            	smpsVcCoarseFreq    $01, $03, $03, $0F
000B0060                            	smpsVcRateScale     $00, $01, $01, $02
000B0060                            	smpsVcAttackRate    $17, $14, $1F, $1F
000B0060                            	smpsVcAmpMod        $00, $00, $00, $00
000B0060                            	smpsVcDecayRate1    $05, $0A, $14, $03
000B0060                            	smpsVcDecayRate2    $01, $01, $05, $01
000B0060                            	smpsVcDecayLevel    $0F, $08, $0E, $0F
000B0060                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B0079                            
000B0079                            ;	Voice $01
000B0079                            ;	$3C
000B0079                            ;	$01, $00, $00, $00, 	$1F, $1F, $15, $1F, 	$11, $03, $12, $05
000B0079                            ;	$07, $04, $09, $02, 	$55, $3A, $25, $1A, 	$1A, $00, $07, $00
000B0079                            	smpsVcAlgorithm     $04
000B0079                            	smpsVcFeedback      $07
000B0079                            	smpsVcUnusedBits    $00
000B0079                            	smpsVcDetune        $00, $00, $00, $00
000B0079                            	smpsVcCoarseFreq    $00, $00, $00, $01
000B0079                            	smpsVcRateScale     $00, $00, $00, $00
000B0079                            	smpsVcAttackRate    $1F, $15, $1F, $1F
000B0079                            	smpsVcAmpMod        $00, $00, $00, $00
000B0079                            	smpsVcDecayRate1    $05, $12, $03, $11
000B0079                            	smpsVcDecayRate2    $02, $09, $04, $07
000B0079                            	smpsVcDecayLevel    $01, $02, $03, $05
000B0079                            	smpsVcReleaseRate   $0A, $05, $0A, $05
000B0092                            
000B0092                            ;	Voice $02
000B0092                            ;	$3A
000B0092                            ;	$73, $04, $11, $31, 	$9F, $DF, $9F, $9F, 	$05, $05, $03, $0A
000B0092                            ;	$03, $02, $03, $02, 	$6F, $6F, $5F, $7F, 	$1C, $20, $1E, $00
000B0092                            	smpsVcAlgorithm     $02
000B0092                            	smpsVcFeedback      $07
000B0092                            	smpsVcUnusedBits    $00
000B0092                            	smpsVcDetune        $03, $01, $00, $07
000B0092                            	smpsVcCoarseFreq    $01, $01, $04, $03
000B0092                            	smpsVcRateScale     $02, $02, $03, $02
000B0092                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B0092                            	smpsVcAmpMod        $00, $00, $00, $00
000B0092                            	smpsVcDecayRate1    $0A, $03, $05, $05
000B0092                            	smpsVcDecayRate2    $02, $03, $02, $03
000B0092                            	smpsVcDecayLevel    $07, $05, $06, $06
000B0092                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B00AB                            
000B00AB                            ;	Voice $03
000B00AB                            ;	$3E
000B00AB                            ;	$07, $01, $02, $0A, 	$1F, $1F, $1F, $1F, 	$03, $06, $00, $00
000B00AB                            ;	$08, $06, $07, $0C, 	$15, $0A, $0A, $0A, 	$20, $05, $06, $08
000B00AB                            	smpsVcAlgorithm     $06
000B00AB                            	smpsVcFeedback      $07
000B00AB                            	smpsVcUnusedBits    $00
000B00AB                            	smpsVcDetune        $00, $00, $00, $00
000B00AB                            	smpsVcCoarseFreq    $0A, $02, $01, $07
000B00AB                            	smpsVcRateScale     $00, $00, $00, $00
000B00AB                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B00AB                            	smpsVcAmpMod        $00, $00, $00, $00
000B00AB                            	smpsVcDecayRate1    $00, $00, $06, $03
000B00AB                            	smpsVcDecayRate2    $0C, $07, $06, $08
000B00AB                            	smpsVcDecayLevel    $00, $00, $00, $01
000B00AB                            	smpsVcReleaseRate   $0A, $0A, $0A, $05
000B00C4                            
000B00C4                            ;	Voice $04
000B00C4                            ;	$3C
000B00C4                            ;	$71, $71, $11, $11, 	$17, $1E, $19, $1E, 	$04, $01, $07, $01
000B00C4                            ;	$00, $00, $00, $00, 	$F7, $F8, $F7, $F8, 	$1E, $00, $14, $00
000B00C4                            	smpsVcAlgorithm     $04
000B00C4                            	smpsVcFeedback      $07
000B00C4                            	smpsVcUnusedBits    $00
000B00C4                            	smpsVcDetune        $01, $01, $07, $07
000B00C4                            	smpsVcCoarseFreq    $01, $01, $01, $01
000B00C4                            	smpsVcRateScale     $00, $00, $00, $00
000B00C4                            	smpsVcAttackRate    $1E, $19, $1E, $17
000B00C4                            	smpsVcAmpMod        $00, $00, $00, $00
000B00C4                            	smpsVcDecayRate1    $01, $07, $01, $04
000B00C4                            	smpsVcDecayRate2    $00, $00, $00, $00
000B00C4                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B00C4                            	smpsVcReleaseRate   $08, $07, $08, $07
000B00DD                            
000B00DD                            ;	Voice $05
000B00DD                            ;	$16
000B00DD                            ;	$7A, $74, $3C, $31, 	$1F, $1F, $1F, $1F, 	$0A, $08, $0C, $0A
000B00DD                            ;	$07, $0A, $07, $05, 	$2F, $AF, $AF, $5F, 	$14, $05, $0A, $00
000B00DD                            	smpsVcAlgorithm     $06
000B00DD                            	smpsVcFeedback      $02
000B00DD                            	smpsVcUnusedBits    $00
000B00DD                            	smpsVcDetune        $03, $03, $07, $07
000B00DD                            	smpsVcCoarseFreq    $01, $0C, $04, $0A
000B00DD                            	smpsVcRateScale     $00, $00, $00, $00
000B00DD                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B00DD                            	smpsVcAmpMod        $00, $00, $00, $00
000B00DD                            	smpsVcDecayRate1    $0A, $0C, $08, $0A
000B00DD                            	smpsVcDecayRate2    $05, $07, $0A, $07
000B00DD                            	smpsVcDecayLevel    $05, $0A, $0A, $02
000B00DD                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B00F6                            
000B00F6                            
000B00F6                            		even				
000B00F6                            Music9B:		incbin	"sound/music/Mus9B - TTZ BF US.bin"
000B0CD8                            		even
000B0CD8                            Music9C:		include	"sound/music/Mus9C - Tribute.asm"
000B0CD8                            Tribute_Header:
000B0CD8                            	smpsHeaderStartSong 3
000B0CDA 0603                       	smpsHeaderChan      $06, $03
000B0CDC 0106                       	smpsHeaderTempo     $01, $06
000B0CDE                            
000B0CE2 0000 000D                  	smpsHeaderFM        Tribute_FM1,	$00, $0D
000B0CE6 0000 0016                  	smpsHeaderFM        Tribute_FM2,	$00, $16
000B0CEA 0000 0016                  	smpsHeaderFM        Tribute_FM3,	$00, $16
000B0CEE 0000 0016                  	smpsHeaderFM        Tribute_FM4,	$00, $16
000B0CF2 0000 0C15                  	smpsHeaderFM        Tribute_FM5,	$0C, $15
000B0CF6                            ;	smpsHeaderFM        Tribute_FM6,	$0C, $17
000B0D08                            
000B0D08                            ; FM1 Data
000B0D08                            Tribute_FM1:
000B0D08 EF00                       	smpsSetvoice        $00
000B0D0A F800 00                    	smpsCall            Tribute_Call05
000B0D0D E712 9B06 8024 9B06 8080+  	dc.b	smpsNoAttack, $12, nD2, $06, nRst, $24, nD2, $06, nRst, nRst, nD2, nRst
000B0D19 9BE7 069B 06A7 9BA7 9B80+  	dc.b	nD2, smpsNoAttack, $06, nD2, $06, nD3, nD2, nD3, nD2, nRst, nD2, $0C
000B0D25 06A7 9B99 9A9B 9E          	dc.b	$06, nD3, nD2, nC2, nCs2, nD2, nF2
000B0D2C F800 00                    	smpsCall            Tribute_Call05
000B0D2F E712 9B06 8024 9B06 8080+  	dc.b	smpsNoAttack, $12, nD2, $06, nRst, $24, nD2, $06, nRst, nRst, nD2, nRst
000B0D3B 94                         	dc.b	nG1
000B0D3C EA09                       	smpsSetTempoMod     $09
000B0D3E E760 E748 8018             	dc.b	smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B0D44                            
000B0D44                            Tribute_Loop05:
000B0D44 9918 0C0C 1206 80A5 8098+  	dc.b	nC2, $18, $0C, $0C, $12, $06, nRst, nC3, nRst, nB1, smpsNoAttack, $18
000B0D50 0C0C 120C A006 940C 9618+  	dc.b	$0C, $0C, $12, $0C, nG2, $06, nG1, $0C, nA1, $18, $0C, $0C
000B0D5C 1206 80A2 8094 E70C 0C0C+  	dc.b	$12, $06, nRst, nA2, nRst, nG1, smpsNoAttack, $0C, $0C, $0C, $0C, $0C
000B0D68 0C0C 999B 180C 0C12 0680+  	dc.b	$0C, $0C, nC2, nD2, $18, $0C, $0C, $12, $06, nRst, nD3, nRst
000B0D74 97E7 0C0C 0C0C 1212 A306+  	dc.b	nBb1, smpsNoAttack, $0C, $0C, $0C, $0C, $12, $12, nBb2, $06, nRst, nA1
000B0D80 180C 0C12 0680 A280 92E7+  	dc.b	$18, $0C, $0C, $12, $06, nRst, nA2, nRst, nF1, smpsNoAttack, $0C, $0C
000B0D8C 0C0C 910C 0C0C 9B          	dc.b	$0C, $0C, nE1, $0C, $0C, $0C, nD2
000B0D93 F700 02FF AD               	smpsLoop            $00, $02, Tribute_Loop05
000B0D98 9624 9530 940C E724 9330+  	dc.b	nA1, $24, nAb1, $30, nG1, $0C, smpsNoAttack, $24, nFs1, $30, nF1, $0C
000B0DA4 E74E 8006 940C E760        	dc.b	smpsNoAttack, $4E, nRst, $06, nG1, $0C, smpsNoAttack, $60
000B0DAC F800 00                    	smpsCall            Tribute_Call00
000B0DAF F2                         	smpsStop
000B0DB0                            
000B0DB0                            Tribute_Call05:
000B0DB0 9B12 0680 249B 0680 809B+  	dc.b	nD2, $12, $06, nRst, $24, nD2, $06, nRst, nRst, nD2, nRst, nD2
000B0DBC E712 9B06 801E A706 9B80+  	dc.b	smpsNoAttack, $12, nD2, $06, nRst, $1E, nD3, $06, nD2, nRst, nRst, nD2
000B0DC8 809B                       	dc.b	nRst, nD2
000B0DCA E3                         	smpsReturn
000B0DCB                            
000B0DCB                            Tribute_Call00:
000B0DCB 8006 999B A09E 9D94 99E7+  	dc.b	nRst, $06, nC2, nD2, nG2, nF2, nE2, nG1, nC2, smpsNoAttack, $06, nG2
000B0DD7 9EA5 A0A5 A7AC E706 9E9D+  	dc.b	nF2, nC3, nG2, nC3, nD3, nG3, smpsNoAttack, $06, nF2, nE2, nC2, nF1
000B0DE3 9496 99E7 06               	dc.b	nG1, nA1, nC2, smpsNoAttack, $06
000B0DE8 E3                         	smpsReturn
000B0DE9                            
000B0DE9                            ; FM2 Data
000B0DE9                            Tribute_FM2:
000B0DE9 EF01                       	smpsSetvoice        $01
000B0DEB B512 B306                  	dc.b	nE4, $12, nD4, $06
000B0DEF E60A                       	smpsFMAlterVol      $0A
000B0DF1 0680                       	dc.b	$06, nRst
000B0DF3 E6F6                       	smpsFMAlterVol      $F6
000B0DF5 B8                         	dc.b	nG4
000B0DF6 E60A                       	smpsFMAlterVol      $0A
000B0DF8 0680                       	dc.b	$06, nRst
000B0DFA E6F6                       	smpsFMAlterVol      $F6
000B0DFC B6B5                       	dc.b	nF4, nE4
000B0DFE E60A                       	smpsFMAlterVol      $0A
000B0E00 06                         	dc.b	$06
000B0E01 E6F6                       	smpsFMAlterVol      $F6
000B0E03 B1                         	dc.b	nC4
000B0E04 E60A                       	smpsFMAlterVol      $0A
000B0E06 06                         	dc.b	$06
000B0E07 E6F6                       	smpsFMAlterVol      $F6
000B0E09 B3                         	dc.b	nD4
000B0E0A EF02                       	smpsSetvoice        $02
000B0E0C E918                       	smpsAlterPitch      $18
000B0E0E F800 00                    	smpsCall            Tribute_Call04
000B0E11 EF01                       	smpsSetvoice        $01
000B0E13 E9E8                       	smpsAlterPitch      $E8
000B0E15 F800 00                    	smpsCall            Tribute_Call04
000B0E18 B406 E712 18B6 1818        	dc.b	nEb4, $06, smpsNoAttack, $12, $18, nF4, $18, $18
000B0E20 E60A                       	smpsFMAlterVol      $0A
000B0E22 06                         	dc.b	$06
000B0E23 E6F6                       	smpsFMAlterVol      $F6
000B0E25 B512 B306                  	dc.b	nE4, $12, nD4, $06
000B0E29 E60A                       	smpsFMAlterVol      $0A
000B0E2B 0680                       	dc.b	$06, nRst
000B0E2D E6F6                       	smpsFMAlterVol      $F6
000B0E2F B8                         	dc.b	nG4
000B0E30 E60A                       	smpsFMAlterVol      $0A
000B0E32 0680                       	dc.b	$06, nRst
000B0E34 E6F6                       	smpsFMAlterVol      $F6
000B0E36 B6B5                       	dc.b	nF4, nE4
000B0E38 E60A                       	smpsFMAlterVol      $0A
000B0E3A 06                         	dc.b	$06
000B0E3B E6F6                       	smpsFMAlterVol      $F6
000B0E3D B1                         	dc.b	nC4
000B0E3E E60A                       	smpsFMAlterVol      $0A
000B0E40 06                         	dc.b	$06
000B0E41 E6F6                       	smpsFMAlterVol      $F6
000B0E43 B3                         	dc.b	nD4
000B0E44 EF02                       	smpsSetvoice        $02
000B0E46 E918                       	smpsAlterPitch      $18
000B0E48 F800 00                    	smpsCall            Tribute_Call04
000B0E4B EF01                       	smpsSetvoice        $01
000B0E4D E9E8                       	smpsAlterPitch      $E8
000B0E4F F800 00                    	smpsCall            Tribute_Call04
000B0E52 B106 E760 E748 8018        	dc.b	nC4, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B0E5A                            
000B0E5A                            Tribute_Loop04:
000B0E5A 8018 B512                  	dc.b	nRst, $18, nE4, $12
000B0E5E E60A                       	smpsFMAlterVol      $0A
000B0E60 06                         	dc.b	$06
000B0E61 E6F6                       	smpsFMAlterVol      $F6
000B0E63 B50C                       	dc.b	nE4, $0C
000B0E65 E60A                       	smpsFMAlterVol      $0A
000B0E67 06                         	dc.b	$06
000B0E68 E6F6                       	smpsFMAlterVol      $F6
000B0E6A 06                         	dc.b	$06
000B0E6B E60A                       	smpsFMAlterVol      $0A
000B0E6D 06                         	dc.b	$06
000B0E6E E6F6                       	smpsFMAlterVol      $F6
000B0E70 06                         	dc.b	$06
000B0E71 E60A                       	smpsFMAlterVol      $0A
000B0E73 06                         	dc.b	$06
000B0E74 E6F6                       	smpsFMAlterVol      $F6
000B0E76 B3E7 60                    	dc.b	nD4, smpsNoAttack, $60
000B0E79 F700 03FF DD               	smpsLoop            $00, $03, Tribute_Loop04
000B0E7E 8018 B512                  	dc.b	nRst, $18, nE4, $12
000B0E82 E60A                       	smpsFMAlterVol      $0A
000B0E84 06                         	dc.b	$06
000B0E85 E6F6                       	smpsFMAlterVol      $F6
000B0E87 B50C                       	dc.b	nE4, $0C
000B0E89 E60A                       	smpsFMAlterVol      $0A
000B0E8B 06                         	dc.b	$06
000B0E8C E6F6                       	smpsFMAlterVol      $F6
000B0E8E 06                         	dc.b	$06
000B0E8F E60A                       	smpsFMAlterVol      $0A
000B0E91 06                         	dc.b	$06
000B0E92 E6F6                       	smpsFMAlterVol      $F6
000B0E94 06                         	dc.b	$06
000B0E95 E60A                       	smpsFMAlterVol      $0A
000B0E97 06                         	dc.b	$06
000B0E98 E6F6                       	smpsFMAlterVol      $F6
000B0E9A B5E7 30B3 18B8             	dc.b	nE4, smpsNoAttack, $30, nD4, $18, nG4
000B0EA0 F701 02FF B6               	smpsLoop            $01, $02, Tribute_Loop04
000B0EA5 B51E                       	dc.b	nE4, $1E
000B0EA7 E60A                       	smpsFMAlterVol      $0A
000B0EA9 06                         	dc.b	$06
000B0EAA E6F6                       	smpsFMAlterVol      $F6
000B0EAC B62A                       	dc.b	nF4, $2A
000B0EAE E60A                       	smpsFMAlterVol      $0A
000B0EB0 06                         	dc.b	$06
000B0EB1 E6F6                       	smpsFMAlterVol      $F6
000B0EB3 B52A                       	dc.b	nE4, $2A
000B0EB5 E60A                       	smpsFMAlterVol      $0A
000B0EB7 06                         	dc.b	$06
000B0EB8 E6F6                       	smpsFMAlterVol      $F6
000B0EBA B52A                       	dc.b	nE4, $2A
000B0EBC E60A                       	smpsFMAlterVol      $0A
000B0EBE 06                         	dc.b	$06
000B0EBF E6F6                       	smpsFMAlterVol      $F6
000B0EC1 B50C E74E                  	dc.b	nE4, $0C, smpsNoAttack, $4E
000B0EC5 E60A                       	smpsFMAlterVol      $0A
000B0EC7 06                         	dc.b	$06
000B0EC8 E6F6                       	smpsFMAlterVol      $F6
000B0ECA B30C E760                  	dc.b	nD4, $0C, smpsNoAttack, $60
000B0ECE F800 00                    	smpsCall            Tribute_Call03
000B0ED1 F2                         	smpsStop
000B0ED2                            
000B0ED2                            Tribute_Call04:
000B0ED2 B506 E712 B306             	dc.b	nE4, $06, smpsNoAttack, $12, nD4, $06
000B0ED8 E60A                       	smpsFMAlterVol      $0A
000B0EDA 0680                       	dc.b	$06, nRst
000B0EDC E6F6                       	smpsFMAlterVol      $F6
000B0EDE B8                         	dc.b	nG4
000B0EDF E60A                       	smpsFMAlterVol      $0A
000B0EE1 0680                       	dc.b	$06, nRst
000B0EE3 E6F6                       	smpsFMAlterVol      $F6
000B0EE5 B6B5                       	dc.b	nF4, nE4
000B0EE7 E60A                       	smpsFMAlterVol      $0A
000B0EE9 06                         	dc.b	$06
000B0EEA E6F6                       	smpsFMAlterVol      $F6
000B0EEC B1                         	dc.b	nC4
000B0EED E60A                       	smpsFMAlterVol      $0A
000B0EEF 06                         	dc.b	$06
000B0EF0 E6F6                       	smpsFMAlterVol      $F6
000B0EF2 B3                         	dc.b	nD4
000B0EF3 E3                         	smpsReturn
000B0EF4                            
000B0EF4                            Tribute_Call03:
000B0EF4 E918                       	smpsAlterPitch      $18
000B0EF6 8006 999B A09E 9D94 99     	dc.b	nRst, $06, nC2, nD2, nG2, nF2, nE2, nG1, nC2
000B0EFF E60A                       	smpsFMAlterVol      $0A
000B0F01 06                         	dc.b	$06
000B0F02 E6F6                       	smpsFMAlterVol      $F6
000B0F04 A09E A5A0 A5A7 AC          	dc.b	nG2, nF2, nC3, nG2, nC3, nD3, nG3
000B0F0B E60A                       	smpsFMAlterVol      $0A
000B0F0D 06                         	dc.b	$06
000B0F0E E6F6                       	smpsFMAlterVol      $F6
000B0F10 9E9D 9992 9496 99          	dc.b	nF2, nE2, nC2, nF1, nG1, nA1, nC2
000B0F17 E60A                       	smpsFMAlterVol      $0A
000B0F19 06                         	dc.b	$06
000B0F1A E6F6                       	smpsFMAlterVol      $F6
000B0F1C E9E8                       	smpsAlterPitch      $E8
000B0F1E E3                         	smpsReturn
000B0F1F                            
000B0F1F                            ; FM3 Data
000B0F1F                            Tribute_FM3:
000B0F1F EF01                       	smpsSetvoice        $01
000B0F21 B112 B006                  	dc.b	nC4, $12, nB3, $06
000B0F25 E60A                       	smpsFMAlterVol      $0A
000B0F27 0680                       	dc.b	$06, nRst
000B0F29 E6F6                       	smpsFMAlterVol      $F6
000B0F2B B3                         	dc.b	nD4
000B0F2C E60A                       	smpsFMAlterVol      $0A
000B0F2E 0680                       	dc.b	$06, nRst
000B0F30 E6F6                       	smpsFMAlterVol      $F6
000B0F32 B1B1                       	dc.b	nC4, nC4
000B0F34 E60A                       	smpsFMAlterVol      $0A
000B0F36 06                         	dc.b	$06
000B0F37 E6F6                       	smpsFMAlterVol      $F6
000B0F39 AE                         	dc.b	nA3
000B0F3A E60A                       	smpsFMAlterVol      $0A
000B0F3C 06                         	dc.b	$06
000B0F3D E6F6                       	smpsFMAlterVol      $F6
000B0F3F B0                         	dc.b	nB3
000B0F40 EF02                       	smpsSetvoice        $02
000B0F42 E918                       	smpsAlterPitch      $18
000B0F44 E080                       	smpsPan             panLeft, $00
000B0F46 F800 00                    	smpsCall            Tribute_Call02
000B0F49 EF01                       	smpsSetvoice        $01
000B0F4B E9E8                       	smpsAlterPitch      $E8
000B0F4D E0C0                       	smpsPan             panCenter, $00
000B0F4F F800 00                    	smpsCall            Tribute_Call02
000B0F52 AF06 E712 18B1 1818        	dc.b	nBb3, $06, smpsNoAttack, $12, $18, nC4, $18, $18
000B0F5A E60A                       	smpsFMAlterVol      $0A
000B0F5C 06                         	dc.b	$06
000B0F5D E6F6                       	smpsFMAlterVol      $F6
000B0F5F B112 B006                  	dc.b	nC4, $12, nB3, $06
000B0F63 E60A                       	smpsFMAlterVol      $0A
000B0F65 0680                       	dc.b	$06, nRst
000B0F67 E6F6                       	smpsFMAlterVol      $F6
000B0F69 B3                         	dc.b	nD4
000B0F6A E60A                       	smpsFMAlterVol      $0A
000B0F6C 0680                       	dc.b	$06, nRst
000B0F6E E6F6                       	smpsFMAlterVol      $F6
000B0F70 B1B1                       	dc.b	nC4, nC4
000B0F72 E60A                       	smpsFMAlterVol      $0A
000B0F74 06                         	dc.b	$06
000B0F75 E6F6                       	smpsFMAlterVol      $F6
000B0F77 AE                         	dc.b	nA3
000B0F78 E60A                       	smpsFMAlterVol      $0A
000B0F7A 06                         	dc.b	$06
000B0F7B E6F6                       	smpsFMAlterVol      $F6
000B0F7D B0                         	dc.b	nB3
000B0F7E EF02                       	smpsSetvoice        $02
000B0F80 E918                       	smpsAlterPitch      $18
000B0F82 E080                       	smpsPan             panLeft, $00
000B0F84 F800 00                    	smpsCall            Tribute_Call02
000B0F87 EF01                       	smpsSetvoice        $01
000B0F89 E9E8                       	smpsAlterPitch      $E8
000B0F8B E0C0                       	smpsPan             panCenter, $00
000B0F8D F800 00                    	smpsCall            Tribute_Call02
000B0F90 AE06 E760 E748 8018        	dc.b	nA3, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B0F98                            
000B0F98                            Tribute_Loop03:
000B0F98 8018 B112                  	dc.b	nRst, $18, nC4, $12
000B0F9C E60A                       	smpsFMAlterVol      $0A
000B0F9E 06                         	dc.b	$06
000B0F9F E6F6                       	smpsFMAlterVol      $F6
000B0FA1 0C                         	dc.b	$0C
000B0FA2 E60A                       	smpsFMAlterVol      $0A
000B0FA4 06                         	dc.b	$06
000B0FA5 E6F6                       	smpsFMAlterVol      $F6
000B0FA7 06                         	dc.b	$06
000B0FA8 E60A                       	smpsFMAlterVol      $0A
000B0FAA 06                         	dc.b	$06
000B0FAB E6F6                       	smpsFMAlterVol      $F6
000B0FAD 06                         	dc.b	$06
000B0FAE E60A                       	smpsFMAlterVol      $0A
000B0FB0 06                         	dc.b	$06
000B0FB1 E6F6                       	smpsFMAlterVol      $F6
000B0FB3 B0E7 60                    	dc.b	nB3, smpsNoAttack, $60
000B0FB6 F700 02FF DE               	smpsLoop            $00, $02, Tribute_Loop03
000B0FBB 8018 B112                  	dc.b	nRst, $18, nC4, $12
000B0FBF E60A                       	smpsFMAlterVol      $0A
000B0FC1 06                         	dc.b	$06
000B0FC2 E6F6                       	smpsFMAlterVol      $F6
000B0FC4 0C                         	dc.b	$0C
000B0FC5 E60A                       	smpsFMAlterVol      $0A
000B0FC7 06                         	dc.b	$06
000B0FC8 E6F6                       	smpsFMAlterVol      $F6
000B0FCA 06                         	dc.b	$06
000B0FCB E60A                       	smpsFMAlterVol      $0A
000B0FCD 06                         	dc.b	$06
000B0FCE E6F6                       	smpsFMAlterVol      $F6
000B0FD0 06                         	dc.b	$06
000B0FD1 E60A                       	smpsFMAlterVol      $0A
000B0FD3 06                         	dc.b	$06
000B0FD4 E6F6                       	smpsFMAlterVol      $F6
000B0FD6 AFE7 6080 18B1 12          	dc.b	nBb3, smpsNoAttack, $60, nRst, $18, nC4, $12
000B0FDD E60A                       	smpsFMAlterVol      $0A
000B0FDF 06                         	dc.b	$06
000B0FE0 E6F6                       	smpsFMAlterVol      $F6
000B0FE2 0C                         	dc.b	$0C
000B0FE3 E60A                       	smpsFMAlterVol      $0A
000B0FE5 06                         	dc.b	$06
000B0FE6 E6F6                       	smpsFMAlterVol      $F6
000B0FE8 06                         	dc.b	$06
000B0FE9 E60A                       	smpsFMAlterVol      $0A
000B0FEB 06                         	dc.b	$06
000B0FEC E6F6                       	smpsFMAlterVol      $F6
000B0FEE 06                         	dc.b	$06
000B0FEF E60A                       	smpsFMAlterVol      $0A
000B0FF1 06                         	dc.b	$06
000B0FF2 E6F6                       	smpsFMAlterVol      $F6
000B0FF4 B1E7 30B0 18B3             	dc.b	nC4, smpsNoAttack, $30, nB3, $18, nD4
000B0FFA F701 02FF 9A               	smpsLoop            $01, $02, Tribute_Loop03
000B0FFF B11E                       	dc.b	nC4, $1E
000B1001 E60A                       	smpsFMAlterVol      $0A
000B1003 06                         	dc.b	$06
000B1004 E6F6                       	smpsFMAlterVol      $F6
000B1006 B12A                       	dc.b	nC4, $2A
000B1008 E60A                       	smpsFMAlterVol      $0A
000B100A 06                         	dc.b	$06
000B100B E6F6                       	smpsFMAlterVol      $F6
000B100D B12A                       	dc.b	nC4, $2A
000B100F E60A                       	smpsFMAlterVol      $0A
000B1011 06                         	dc.b	$06
000B1012 E6F6                       	smpsFMAlterVol      $F6
000B1014 B12A                       	dc.b	nC4, $2A
000B1016 E60A                       	smpsFMAlterVol      $0A
000B1018 06                         	dc.b	$06
000B1019 E6F6                       	smpsFMAlterVol      $F6
000B101B B10C E74E                  	dc.b	nC4, $0C, smpsNoAttack, $4E
000B101F E60A                       	smpsFMAlterVol      $0A
000B1021 06                         	dc.b	$06
000B1022 E6F6                       	smpsFMAlterVol      $F6
000B1024 B00C E760                  	dc.b	nB3, $0C, smpsNoAttack, $60
000B1028 E9F4                       	smpsAlterPitch      $F4
000B102A F8FE C8                    	smpsCall            Tribute_Call03
000B102D E90C                       	smpsAlterPitch      $0C
000B102F F2                         	smpsStop
000B1030                            
000B1030                            Tribute_Call02:
000B1030 B106 E712 B006             	dc.b	nC4, $06, smpsNoAttack, $12, nB3, $06
000B1036 E60A                       	smpsFMAlterVol      $0A
000B1038 0680                       	dc.b	$06, nRst
000B103A E6F6                       	smpsFMAlterVol      $F6
000B103C B3                         	dc.b	nD4
000B103D E60A                       	smpsFMAlterVol      $0A
000B103F 0680                       	dc.b	$06, nRst
000B1041 E6F6                       	smpsFMAlterVol      $F6
000B1043 B1B1                       	dc.b	nC4, nC4
000B1045 E60A                       	smpsFMAlterVol      $0A
000B1047 06                         	dc.b	$06
000B1048 E6F6                       	smpsFMAlterVol      $F6
000B104A AE                         	dc.b	nA3
000B104B E60A                       	smpsFMAlterVol      $0A
000B104D 06                         	dc.b	$06
000B104E E6F6                       	smpsFMAlterVol      $F6
000B1050 B0                         	dc.b	nB3
000B1051 E3                         	smpsReturn
000B1052                            
000B1052                            ; FM4 Data
000B1052                            Tribute_FM4:
000B1052 EF01                       	smpsSetvoice        $01
000B1054 AC12 06                    	dc.b	nG3, $12, $06
000B1057 E60A                       	smpsFMAlterVol      $0A
000B1059 0680                       	dc.b	$06, nRst
000B105B E6F6                       	smpsFMAlterVol      $F6
000B105D AF                         	dc.b	nBb3
000B105E E60A                       	smpsFMAlterVol      $0A
000B1060 0680                       	dc.b	$06, nRst
000B1062 E6F6                       	smpsFMAlterVol      $F6
000B1064 ACAC                       	dc.b	nG3, nG3
000B1066 E60A                       	smpsFMAlterVol      $0A
000B1068 06                         	dc.b	$06
000B1069 E6F6                       	smpsFMAlterVol      $F6
000B106B AA                         	dc.b	nF3
000B106C E60A                       	smpsFMAlterVol      $0A
000B106E 06                         	dc.b	$06
000B106F E6F6                       	smpsFMAlterVol      $F6
000B1071 AC                         	dc.b	nG3
000B1072 EF02                       	smpsSetvoice        $02
000B1074 E918                       	smpsAlterPitch      $18
000B1076 E040                       	smpsPan             panRight, $00
000B1078 F800 00                    	smpsCall            Tribute_Call01
000B107B EF01                       	smpsSetvoice        $01
000B107D E9E8                       	smpsAlterPitch      $E8
000B107F E0C0                       	smpsPan             panCenter, $00
000B1081 F800 00                    	smpsCall            Tribute_Call01
000B1084 AC06 E712 18AE 1818        	dc.b	nG3, $06, smpsNoAttack, $12, $18, nA3, $18, $18
000B108C E60A                       	smpsFMAlterVol      $0A
000B108E 06                         	dc.b	$06
000B108F E6F6                       	smpsFMAlterVol      $F6
000B1091 AC12 06                    	dc.b	nG3, $12, $06
000B1094 E60A                       	smpsFMAlterVol      $0A
000B1096 0680                       	dc.b	$06, nRst
000B1098 E6F6                       	smpsFMAlterVol      $F6
000B109A AF                         	dc.b	nBb3
000B109B E60A                       	smpsFMAlterVol      $0A
000B109D 0680                       	dc.b	$06, nRst
000B109F E6F6                       	smpsFMAlterVol      $F6
000B10A1 ACAC                       	dc.b	nG3, nG3
000B10A3 E60A                       	smpsFMAlterVol      $0A
000B10A5 06                         	dc.b	$06
000B10A6 E6F6                       	smpsFMAlterVol      $F6
000B10A8 AA                         	dc.b	nF3
000B10A9 E60A                       	smpsFMAlterVol      $0A
000B10AB 06                         	dc.b	$06
000B10AC E6F6                       	smpsFMAlterVol      $F6
000B10AE AC                         	dc.b	nG3
000B10AF EF02                       	smpsSetvoice        $02
000B10B1 E918                       	smpsAlterPitch      $18
000B10B3 E040                       	smpsPan             panRight, $00
000B10B5 F800 00                    	smpsCall            Tribute_Call01
000B10B8 EF01                       	smpsSetvoice        $01
000B10BA E9E8                       	smpsAlterPitch      $E8
000B10BC E0C0                       	smpsPan             panCenter, $00
000B10BE F800 00                    	smpsCall            Tribute_Call01
000B10C1 AA06 E760 E748 8018        	dc.b	nF3, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B10C9                            
000B10C9                            Tribute_Loop02:
000B10C9 8018 AC12                  	dc.b	nRst, $18, nG3, $12
000B10CD E60A                       	smpsFMAlterVol      $0A
000B10CF 06                         	dc.b	$06
000B10D0 E6F6                       	smpsFMAlterVol      $F6
000B10D2 0C                         	dc.b	$0C
000B10D3 E60A                       	smpsFMAlterVol      $0A
000B10D5 06                         	dc.b	$06
000B10D6 E6F6                       	smpsFMAlterVol      $F6
000B10D8 06                         	dc.b	$06
000B10D9 E60A                       	smpsFMAlterVol      $0A
000B10DB 06                         	dc.b	$06
000B10DC E6F6                       	smpsFMAlterVol      $F6
000B10DE 06                         	dc.b	$06
000B10DF E60A                       	smpsFMAlterVol      $0A
000B10E1 06                         	dc.b	$06
000B10E2 E6F6                       	smpsFMAlterVol      $F6
000B10E4 ACE7 60                    	dc.b	nG3, smpsNoAttack, $60
000B10E7 F700 02FF DE               	smpsLoop            $00, $02, Tribute_Loop02
000B10EC 8018 AC12                  	dc.b	nRst, $18, nG3, $12
000B10F0 E60A                       	smpsFMAlterVol      $0A
000B10F2 06                         	dc.b	$06
000B10F3 E6F6                       	smpsFMAlterVol      $F6
000B10F5 0C                         	dc.b	$0C
000B10F6 E60A                       	smpsFMAlterVol      $0A
000B10F8 06                         	dc.b	$06
000B10F9 E6F6                       	smpsFMAlterVol      $F6
000B10FB 06                         	dc.b	$06
000B10FC E60A                       	smpsFMAlterVol      $0A
000B10FE 06                         	dc.b	$06
000B10FF E6F6                       	smpsFMAlterVol      $F6
000B1101 06                         	dc.b	$06
000B1102 E60A                       	smpsFMAlterVol      $0A
000B1104 06                         	dc.b	$06
000B1105 E6F6                       	smpsFMAlterVol      $F6
000B1107 AAE7 6080 18AC 12          	dc.b	nF3, smpsNoAttack, $60, nRst, $18, nG3, $12
000B110E E60A                       	smpsFMAlterVol      $0A
000B1110 06                         	dc.b	$06
000B1111 E6F6                       	smpsFMAlterVol      $F6
000B1113 0C                         	dc.b	$0C
000B1114 E60A                       	smpsFMAlterVol      $0A
000B1116 06                         	dc.b	$06
000B1117 E6F6                       	smpsFMAlterVol      $F6
000B1119 06                         	dc.b	$06
000B111A E60A                       	smpsFMAlterVol      $0A
000B111C 06                         	dc.b	$06
000B111D E6F6                       	smpsFMAlterVol      $F6
000B111F 06                         	dc.b	$06
000B1120 E60A                       	smpsFMAlterVol      $0A
000B1122 06                         	dc.b	$06
000B1123 E6F6                       	smpsFMAlterVol      $F6
000B1125 AEE7 30AD 18B0             	dc.b	nA3, smpsNoAttack, $30, nAb3, $18, nB3
000B112B F701 02FF 9A               	smpsLoop            $01, $02, Tribute_Loop02
000B1130 AC1E                       	dc.b	nG3, $1E
000B1132 E60A                       	smpsFMAlterVol      $0A
000B1134 06                         	dc.b	$06
000B1135 E6F6                       	smpsFMAlterVol      $F6
000B1137 AD2A                       	dc.b	nAb3, $2A
000B1139 E60A                       	smpsFMAlterVol      $0A
000B113B 06                         	dc.b	$06
000B113C E6F6                       	smpsFMAlterVol      $F6
000B113E AC2A                       	dc.b	nG3, $2A
000B1140 E60A                       	smpsFMAlterVol      $0A
000B1142 06                         	dc.b	$06
000B1143 E6F6                       	smpsFMAlterVol      $F6
000B1145 AE2A                       	dc.b	nA3, $2A
000B1147 E60A                       	smpsFMAlterVol      $0A
000B1149 06                         	dc.b	$06
000B114A E6F6                       	smpsFMAlterVol      $F6
000B114C AE0C E74E                  	dc.b	nA3, $0C, smpsNoAttack, $4E
000B1150 E60A                       	smpsFMAlterVol      $0A
000B1152 06                         	dc.b	$06
000B1153 E6F6                       	smpsFMAlterVol      $F6
000B1155 AC0C E760 8060             	dc.b	nG3, $0C, smpsNoAttack, $60, nRst, $60
000B115B F2                         	smpsStop
000B115C                            
000B115C                            Tribute_Call01:
000B115C AC06 E712 AC06             	dc.b	nG3, $06, smpsNoAttack, $12, nG3, $06
000B1162 E60A                       	smpsFMAlterVol      $0A
000B1164 0680                       	dc.b	$06, nRst
000B1166 E6F6                       	smpsFMAlterVol      $F6
000B1168 AF                         	dc.b	nBb3
000B1169 E60A                       	smpsFMAlterVol      $0A
000B116B 0680                       	dc.b	$06, nRst
000B116D E6F6                       	smpsFMAlterVol      $F6
000B116F ACAC                       	dc.b	nG3, nG3
000B1171 E60A                       	smpsFMAlterVol      $0A
000B1173 06                         	dc.b	$06
000B1174 E6F6                       	smpsFMAlterVol      $F6
000B1176 AA                         	dc.b	nF3
000B1177 E60A                       	smpsFMAlterVol      $0A
000B1179 06                         	dc.b	$06
000B117A E6F6                       	smpsFMAlterVol      $F6
000B117C AC                         	dc.b	nG3
000B117D E3                         	smpsReturn
000B117E                            
000B117E                            ; FM5 Data
000B117E                            Tribute_FM5:
000B117E EF02                       	smpsSetvoice        $02
000B1180                            
000B1180                            Tribute_Jump00:
000B1180 8060 8080 800C B406 B6B8+  	dc.b	nRst, $60, nRst, nRst, nRst, $0C, nEb4, $06, nF4, nG4, nD5, $12
000B118C 800C B606 B8BA C412 8060+  	dc.b	nRst, $0C, nF4, $06, nG4, nA4, nG5, $12, nRst, $60, nRst, $60
000B1198 805A D706 CECD C9C4 CECD+  	dc.b	nRst, $5A, nD7, $06, nF6, nE6, nC6, nG5, nF6, nE6, nC6, nG5
000B11A4 C2C1 BDB8 B6B5 B1AC AA48+  	dc.b	nF5, nE5, nC5, nG4, nF4, nE4, nC4, nG3, nF3, $48, nRst, $18
000B11B0                            
000B11B0                            Tribute_Loop01:
000B11B0 8060 800C B106 B3B8 BDBF+  	dc.b	nRst, $60, nRst, $0C, nC4, $06, nD4, nG4, nC5, nD5, nG5, nC5
000B11BC BFC4 BFC4 C9C4 BF80 6080+  	dc.b	nD5, nG5, nD5, nG5, nC6, nG5, nD5, nRst, $60, nRst, $0C, nC5
000B11C8 06C4 BDBF C4C6 BDB8 BDBF+  	dc.b	$06, nG5, nC5, nD5, nG5, nA5, nC5, nG4, nC5, nD5, nG5, nC5
000B11D4 BFC4 8060 800C B806 BABD+  	dc.b	nD5, nG5, nRst, $60, nRst, $0C, nG4, $06, nA4, nC5, nA4, nC5
000B11E0 BFC4 C2BD BFB8 B3BD BF80+  	dc.b	nD5, nG5, nF5, nC5, nD5, nG4, nD4, nC5, nD5, nRst, $60, nG5
000B11EC 06C2 BDBA C4C2 BDBA C4C2+  	dc.b	$06, nF5, nC5, nA4, nG5, nF5, nC5, nA4, nG5, nF5, nD5, nB4
000B11F8 B9BA BCBF                  	dc.b	nAb4, nA4, nB4, nD5
000B11FC F700 02FF B0               	smpsLoop            $00, $02, Tribute_Loop01
000B1201 800C B806 BDBF C1C2 0C80+  	dc.b	nRst, $0C, nG4, $06, nC5, nD5, nE5, nF5, $0C, nRst, $30, nRst
000B120D 0CB8 06BD BFC1 C60C 8030+  	dc.b	$0C, nG4, $06, nC5, nD5, nE5, nA5, $0C, nRst, $30, nRst, $0C
000B1219 C6C4 C2C1 18BD 0CBF E70C+  	dc.b	nA5, nG5, nF5, nE5, $18, nC5, $0C, nD5, smpsNoAttack, $0C, nB4, nC5
000B1225 BFB3 06B8 BABF B8BA BFC4   	dc.b	nD5, nD4, $06, nG4, nA4, nD5, nG4, nA4, nD5, nG5
000B122F E918                       	smpsAlterPitch      $18
000B1231 F8FB 98                    	smpsCall            Tribute_Call00
000B1234 E9E8                       	smpsAlterPitch      $E8
000B1236 F2                         	smpsStop
000B1237                            
000B1237                            ; FM6 Data
000B1237                            Tribute_FM6:
000B1237 EF02                       	smpsSetvoice        $02
000B1239 E040                       	smpsPan             panRight, $00
000B1240 E104                       	smpsAlterNote       $04
000B1242 8006                       	dc.b	nRst, $06
000B1244 F6FF 3A                    	smpsJump            Tribute_Jump00
000B1247                            
000B1247                            ; PSG1 Data
000B1247                            Tribute_PSG1:
000B1247 F505                       	smpsPSGvoice        sTone_09
000B124E A760 E760 E760 E760 A760+  	dc.b	nD3, $60, smpsNoAttack, $60, smpsNoAttack, $60, smpsNoAttack, $60, nD3, $60, smpsNoAttack, $60
000B125A E75A AC06 E760 E748 8018   	dc.b	smpsNoAttack, $5A, nG3, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B1269 ECFD                       	smpsPSGAlterVol     $FD
000B126B                            
000B126B                            Tribute_Jump01:
000B126B F505                       	smpsPSGvoice        sTone_09
000B126D F800 00                    	smpsCall            Tribute_Call07
000B1270 E706 AAAC AEB0 02B1 B0AC+  	dc.b	smpsNoAttack, $06, nF3, nG3, nA3, nB3, $02, nC4, nB3, nG3, $06, nA3
000B127C B0B1 AEB0 B1B3 B5B6 BA     	dc.b	nB3, nC4, nA3, nB3, nC4, nD4, nE4, nF4, nA4
000B1285 F800 00                    	smpsCall            Tribute_Call07
000B1288 E70C AEB0 B106 80B3 0CB5+  	dc.b	smpsNoAttack, $0C, nA3, nB3, nC4, $06, nRst, nD4, $0C, nE4, $06, nRst
000B1294 B60C B306 80B8 1E80 06B9+  	dc.b	nF4, $0C, nD4, $06, nRst, nG4, $1E, nRst, $06, nAb4, $18, nG4
000B12A0 0680 B680 B50C E70C B3B1+  	dc.b	$06, nRst, nF4, nRst, nE4, $0C, smpsNoAttack, $0C, nD4, nC4, $06, nRst
000B12AC B318 AE0C B006 80B1 0CE7+  	dc.b	nD4, $18, nA3, $0C, nB3, $06, nRst, nC4, $0C, smpsNoAttack, $3C, nB3
000B12B8 0CB1 0680 B30C E73C B80C+  	dc.b	$0C, nC4, $06, nRst, nD4, $0C, smpsNoAttack, $3C, nG4, $0C, nD5, nG5
000B12C4 E918                       	smpsAlterPitch      $18
000B12C6 F8FB 03                    	smpsCall            Tribute_Call00
000B12C9 E9E8                       	smpsAlterPitch      $E8
000B12CB F2                         	smpsStop
000B12CC                            
000B12CC                            Tribute_Call07:
000B12CC B703 B833 8006 BC80 BDBF+  	dc.b	nFs4, $03, nG4, $33, nRst, $06, nB4, nRst, nC5, nD5, nRst, nFs4
000B12D8 03B8 03E7 3680 06B5 80B3+  	dc.b	$03, nG4, $03, smpsNoAttack, $36, nRst, $06, nE4, nRst, nD4, nC4, nRst
000B12E4 B702 B804 E736 8006 BC80+  	dc.b	nFs4, $02, nG4, $04, smpsNoAttack, $36, nRst, $06, nB4, nRst, nC5, nD5
000B12F0 80B8 E712 8006 B512 8006+  	dc.b	nRst, nG4, smpsNoAttack, $12, nRst, $06, nE4, $12, nRst, $06, nD4, $12
000B12FC 8006 B50C 8006 B1E7 3680+  	dc.b	nRst, $06, nE4, $0C, nRst, $06, nC4, smpsNoAttack, $36, nRst, $06, nC5
000B1308 80BC BD80 B1E7 3680 06BD+  	dc.b	nRst, nB4, nC5, nRst, nC4, smpsNoAttack, $36, nRst, $06, nC5, nRst, nB4
000B1314 BD80 B1E7 3CB5 0CB3 B1     	dc.b	nC5, nRst, nC4, smpsNoAttack, $3C, nE4, $0C, nD4, nC4
000B131D E3                         	smpsReturn
000B131E                            
000B131E                            ; PSG2 Data
000B131E                            Tribute_PSG2:
000B131E F505                       	smpsPSGvoice        sTone_09
000B1325 9B60 E760 E760 E760 9B60+  	dc.b	nD2, $60, smpsNoAttack, $60, smpsNoAttack, $60, smpsNoAttack, $60, nD2, $60, smpsNoAttack, $60
000B1331 E75A A006 E760 E748 8018   	dc.b	smpsNoAttack, $5A, nG2, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B133B ECFF                       	smpsPSGAlterVol     $FF
000B1342 8006                       	dc.b	nRst, $06
000B1344 F6FF 25                    	smpsJump            Tribute_Jump01
000B1347                            
000B1347                            ; PSG3 Data
000B1347                            Tribute_PSG3:
000B1347 F3E7                       	smpsPSGform         $E7
000B1349 F502                       	smpsPSGvoice        sTone_02
000B134B AF18 1818 0606 06          	dc.b	(nMaxPSG2-$23)&$FF, $18, $18, $18, $06, $06, $06
000B1352 F501                       	smpsPSGvoice        sTone_05
000B1354 0680 18                    	dc.b	$06, nRst, $18
000B1357 F502                       	smpsPSGvoice        sTone_02
000B1359 AF18 1806                  	dc.b	(nMaxPSG2-$23)&$FF, $18, $18, $06
000B135D F501                       	smpsPSGvoice        sTone_05
000B135F 06                         	dc.b	$06
000B1360 F502                       	smpsPSGvoice        sTone_02
000B1362 06                         	dc.b	$06
000B1363 F501                       	smpsPSGvoice        sTone_05
000B1365 06                         	dc.b	$06
000B1366 F502                       	smpsPSGvoice        sTone_02
000B1368 8018 AF18 1806 0606        	dc.b	nRst, $18, (nMaxPSG2-$23)&$FF, $18, $18, $06, $06, $06
000B1370 F501                       	smpsPSGvoice        sTone_05
000B1372 0680 12AF 06               	dc.b	$06, nRst, $12, (nMaxPSG2-$23)&$FF, $06
000B1377 F502                       	smpsPSGvoice        sTone_02
000B1379 06                         	dc.b	$06
000B137A F501                       	smpsPSGvoice        sTone_05
000B137C 06                         	dc.b	$06
000B137D F502                       	smpsPSGvoice        sTone_02
000B137F 06                         	dc.b	$06
000B1380 F501                       	smpsPSGvoice        sTone_05
000B1382 06                         	dc.b	$06
000B1383 F502                       	smpsPSGvoice        sTone_02
000B1385 800C AF06                  	dc.b	nRst, $0C, (nMaxPSG2-$23)&$FF, $06
000B1389 F501                       	smpsPSGvoice        sTone_05
000B138B 06                         	dc.b	$06
000B138C F502                       	smpsPSGvoice        sTone_02
000B138E 06                         	dc.b	$06
000B138F F501                       	smpsPSGvoice        sTone_05
000B1391 06                         	dc.b	$06
000B1392 F502                       	smpsPSGvoice        sTone_02
000B1394 0C                         	dc.b	$0C
000B1395 F502                       	smpsPSGvoice        sTone_02
000B1397 AF18 1818 0606 06          	dc.b	(nMaxPSG2-$23)&$FF, $18, $18, $18, $06, $06, $06
000B139E F501                       	smpsPSGvoice        sTone_05
000B13A0 06                         	dc.b	$06
000B13A1 F502                       	smpsPSGvoice        sTone_02
000B13A3 8018 AF18 1806             	dc.b	nRst, $18, (nMaxPSG2-$23)&$FF, $18, $18, $06
000B13A9 F501                       	smpsPSGvoice        sTone_05
000B13AB 06                         	dc.b	$06
000B13AC F502                       	smpsPSGvoice        sTone_02
000B13AE 06                         	dc.b	$06
000B13AF F501                       	smpsPSGvoice        sTone_05
000B13B1 06                         	dc.b	$06
000B13B2 F502                       	smpsPSGvoice        sTone_02
000B13B4 8018 AF18 1806 0606        	dc.b	nRst, $18, (nMaxPSG2-$23)&$FF, $18, $18, $06, $06, $06
000B13BC F501                       	smpsPSGvoice        sTone_05
000B13BE 0680 6080                  	dc.b	$06, nRst, $60, nRst
000B13C2                            
000B13C2                            Tribute_Loop06:
000B13C2 F800 00                    	smpsCall            Tribute_Call06
000B13C5 800C                       	dc.b	nRst, $0C
000B13C7 F502                       	smpsPSGvoice        sTone_02
000B13C9 AF0C 0C0C 0C0C 8018        	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, $0C, $0C, nRst, $18
000B13D1 F800 00                    	smpsCall            Tribute_Call06
000B13D4 800C                       	dc.b	nRst, $0C
000B13D6 F502                       	smpsPSGvoice        sTone_02
000B13D8 AF0C 0C0C 8030             	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, nRst, $30
000B13DE F700 02FF E0               	smpsLoop            $00, $02, Tribute_Loop06
000B13E3 E718                       	dc.b	smpsNoAttack, $18
000B13E5 F502                       	smpsPSGvoice        sTone_02
000B13E7 AF80 AF80 AF80 AF80 AF80+  	dc.b	(nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst
000B13F3 AF                         	dc.b	(nMaxPSG2-$23)&$FF
000B13F4 F2                         	smpsStop
000B13F5                            
000B13F5                            Tribute_Call06:
000B13F5 F502                       	smpsPSGvoice        sTone_02
000B13F7 0C0C 0C0C 0C06 0606        	dc.b	$0C, $0C, $0C, $0C, $0C, $06, $06, $06
000B13FF F501                       	smpsPSGvoice        sTone_05
000B1401 06                         	dc.b	$06
000B1402 F502                       	smpsPSGvoice        sTone_02
000B1404 06                         	dc.b	$06
000B1405 F501                       	smpsPSGvoice        sTone_05
000B1407 0680 0C                    	dc.b	$06, nRst, $0C
000B140A F502                       	smpsPSGvoice        sTone_02
000B140C AF0C 0C0C 0C0C 0C06 06     	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, $0C, $0C, $0C, $06, $06
000B1415 F502                       	smpsPSGvoice        sTone_02
000B1417 0C0C 0C0C 0C06 0606        	dc.b	$0C, $0C, $0C, $0C, $0C, $06, $06, $06
000B141F F501                       	smpsPSGvoice        sTone_05
000B1421 06                         	dc.b	$06
000B1422 F502                       	smpsPSGvoice        sTone_02
000B1424 06                         	dc.b	$06
000B1425 F501                       	smpsPSGvoice        sTone_05
000B1427 06                         	dc.b	$06
000B1428 E3                         	smpsReturn
000B1429                            
000B1429                            ; DAC Data
000B1429                            Tribute_DAC:
000B1429 8148 8218 8148 8206 8906   	dc.b	dKick, $48, dSnare, $18, dKick, $48, dSnare, $06, dMidTimpani, $06
000B1433 E690                       	smpsFMAlterVol      $90
000B1435 8A0C                       	dc.b	dLowTimpani, $0C
000B1437 E670                       	smpsFMAlterVol      $70
000B1439 8148 8218 8130 8206        	dc.b	dKick, $48, dSnare, $18, dKick, $30, dSnare, $06
000B1441 E6F9                       	smpsFMAlterVol      $F9
000B1443 88                         	dc.b	dHiTimpani
000B1444 E607                       	smpsFMAlterVol      $07
000B1446 8982                       	dc.b	dMidTimpani, dSnare
000B1448 E690                       	smpsFMAlterVol      $90
000B144A 8A                         	dc.b	dLowTimpani
000B144B E670                       	smpsFMAlterVol      $70
000B144D 8282 8281 4882 1881 4882+  	dc.b	dSnare, dSnare, dSnare, dKick, $48, dSnare, $18, dKick, $48, dSnare, $06, dMidTimpani
000B1459 06                         	dc.b	$06
000B145A E690                       	smpsFMAlterVol      $90
000B145C 8A0C                       	dc.b	dLowTimpani, $0C
000B145E E670                       	smpsFMAlterVol      $70
000B1460 8148 8218 8160 8148 8218   	dc.b	dKick, $48, dSnare, $18, dKick, $60, dKick, $48, dSnare, $18
000B146A                            
000B146A                            Tribute_Loop00:
000B146A 8118 8281 8281 8281 8281+  	dc.b	dKick, $18, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick
000B1476 8281 8281 8206             	dc.b	dSnare, dKick, dSnare, dKick, dSnare, $06
000B147C E6F9                       	smpsFMAlterVol      $F9
000B147E 88                         	dc.b	dHiTimpani
000B147F E607                       	smpsFMAlterVol      $07
000B1481 8982 8118 8281 8281 8281+  	dc.b	dMidTimpani, dSnare, dKick, $18, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick
000B148D 8281 8281 8281 06          	dc.b	dSnare, dKick, dSnare, dKick, dSnare, dKick, $06
000B1494 E607                       	smpsFMAlterVol      $07
000B1496 88                         	dc.b	dHiTimpani
000B1497 E6F9                       	smpsFMAlterVol      $F9
000B1499 8982 8182 8282             	dc.b	dMidTimpani, dSnare, dKick, dSnare, dSnare, dSnare
000B149F F700 02FF C7               	smpsLoop            $00, $02, Tribute_Loop00
000B14A4 813C 820C                  	dc.b	dKick, $3C, dSnare, $0C
000B14A8 E6F9                       	smpsFMAlterVol      $F9
000B14AA 8804                       	dc.b	dHiTimpani, $04
000B14AC E607                       	smpsFMAlterVol      $07
000B14AE 89                         	dc.b	dMidTimpani
000B14AF E690                       	smpsFMAlterVol      $90
000B14B1 8A                         	dc.b	dLowTimpani
000B14B2 E670                       	smpsFMAlterVol      $70
000B14B4 810C 813C 8206 8282 8281+  	dc.b	dKick, $0C, dKick, $3C, dSnare, $06, dSnare, dSnare, dSnare, dKick, $0C, dKick
000B14C0 6081 36                    	dc.b	$60, dKick, $36
000B14C3 E6F9                       	smpsFMAlterVol      $F9
000B14C5 8806                       	dc.b	dHiTimpani, $06
000B14C7 E607                       	smpsFMAlterVol      $07
000B14C9 89                         	dc.b	dMidTimpani
000B14CA E690                       	smpsFMAlterVol      $90
000B14CC 8A                         	dc.b	dLowTimpani
000B14CD E670                       	smpsFMAlterVol      $70
000B14CF 8282 8282 8182 8282 8282+  	dc.b	dSnare, dSnare, dSnare, dSnare, dKick, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dKick
000B14DB 8182                       	dc.b	dKick, dSnare
000B14DD E6F9                       	smpsFMAlterVol      $F9
000B14DF 88                         	dc.b	dHiTimpani
000B14E0 E607                       	smpsFMAlterVol      $07
000B14E2 8982                       	dc.b	dMidTimpani, dSnare
000B14E4 E690                       	smpsFMAlterVol      $90
000B14E6 8A                         	dc.b	dLowTimpani
000B14E7 E670                       	smpsFMAlterVol      $70
000B14E9 8281 8182 8289 82          	dc.b	dSnare, dKick, dKick, dSnare, dSnare, dMidTimpani, dSnare
000B14F0 E690                       	smpsFMAlterVol      $90
000B14F2 8A                         	dc.b	dLowTimpani
000B14F3 E670                       	smpsFMAlterVol      $70
000B14F5 8281                       	dc.b	dSnare, dKick
000B14F7 F2                         	smpsStop
000B14F8                            
000B14F8                            Tribute_Voices:
000B14F8                            ;	Voice $00
000B14F8                            ;	$3B
000B14F8                            ;	$53, $31, $02, $03, 	$DF, $9F, $5F, $9F, 	$17, $08, $0E, $07
000B14F8                            ;	$0F, $0E, $0D, $02, 	$5F, $7F, $3F, $5F, 	$0C, $16, $1F, $80
000B14F8                            	smpsVcAlgorithm     $03
000B14F8                            	smpsVcFeedback      $07
000B14F8                            	smpsVcUnusedBits    $00
000B14F8                            	smpsVcDetune        $00, $00, $03, $05
000B14F8                            	smpsVcCoarseFreq    $03, $02, $01, $03
000B14F8                            	smpsVcRateScale     $02, $01, $02, $03
000B14F8                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B14F8                            	smpsVcAmpMod        $00, $00, $00, $00
000B14F8                            	smpsVcDecayRate1    $07, $0E, $08, $17
000B14F8                            	smpsVcDecayRate2    $02, $0D, $0E, $0F
000B14F8                            	smpsVcDecayLevel    $05, $03, $07, $05
000B14F8                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1511                            
000B1511                            ;	Voice $01
000B1511                            ;	$3D
000B1511                            ;	$52, $02, $04, $01, 	$94, $19, $19, $19, 	$11, $0D, $0D, $0D
000B1511                            ;	$07, $04, $04, $04, 	$35, $1A, $1A, $1A, 	$0D, $80, $80, $80
000B1511                            	smpsVcAlgorithm     $05
000B1511                            	smpsVcFeedback      $07
000B1511                            	smpsVcUnusedBits    $00
000B1511                            	smpsVcDetune        $00, $00, $00, $05
000B1511                            	smpsVcCoarseFreq    $01, $04, $02, $02
000B1511                            	smpsVcRateScale     $00, $00, $00, $02
000B1511                            	smpsVcAttackRate    $19, $19, $19, $14
000B1511                            	smpsVcAmpMod        $00, $00, $00, $00
000B1511                            	smpsVcDecayRate1    $0D, $0D, $0D, $11
000B1511                            	smpsVcDecayRate2    $04, $04, $04, $07
000B1511                            	smpsVcDecayLevel    $01, $01, $01, $03
000B1511                            	smpsVcReleaseRate   $0A, $0A, $0A, $05
000B152A                            
000B152A                            ;	Voice $02
000B152A                            ;	$1F
000B152A                            ;	$26, $32, $07, $11, 	$9F, $9F, $9F, $9F, 	$06, $07, $09, $07
000B152A                            ;	$0D, $0F, $0D, $11, 	$9C, $9C, $9C, $9C, 	$80, $80, $80, $80
000B152A                            	smpsVcAlgorithm     $07
000B152A                            	smpsVcFeedback      $03
000B152A                            	smpsVcUnusedBits    $00
000B152A                            	smpsVcDetune        $01, $00, $03, $02
000B152A                            	smpsVcCoarseFreq    $01, $07, $02, $06
000B152A                            	smpsVcRateScale     $02, $02, $02, $02
000B152A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B152A                            	smpsVcAmpMod        $00, $00, $00, $00
000B152A                            	smpsVcDecayRate1    $07, $09, $07, $06
000B152A                            	smpsVcDecayRate2    $11, $0D, $0F, $0D
000B152A                            	smpsVcDecayLevel    $09, $09, $09, $09
000B152A                            	smpsVcReleaseRate   $0C, $0C, $0C, $0C
000B1543                            
000B1543                            
000B1544 00                         		even		
000B1544                            ; ---------------------------------------------------------------------------
000B1544                            ; Sound	effect pointers
000B1544                            ; ---------------------------------------------------------------------------
000B1544                            SoundIndex:
000B1544 0000 0000                  ptr_sndA0:	dc.l SoundA0
000B1548 0000 0000                  ptr_sndA1:	dc.l SoundA1
000B154C 0000 0000                  ptr_sndA2:	dc.l SoundA2
000B1550 0000 0000                  ptr_sndA3:	dc.l SoundA3
000B1554 0000 0000                  ptr_sndA4:	dc.l SoundA4
000B1558 0000 0000                  ptr_sndA5:	dc.l SoundA5
000B155C 0000 0000                  ptr_sndA6:	dc.l SoundA6
000B1560 0000 0000                  ptr_sndA7:	dc.l SoundA7
000B1564 0000 0000                  ptr_sndA8:	dc.l SoundA8
000B1568 0000 0000                  ptr_sndA9:	dc.l SoundA9
000B156C 0000 0000                  ptr_sndAA:	dc.l SoundAA
000B1570 0000 0000                  ptr_FireShield:	dc.l SoundAB
000B1574 0000 0000                  ptr_sndAC:	dc.l SoundAC
000B1578 0000 0000                  ptr_sndAD:	dc.l SoundAD
000B157C 0000 0000                  ptr_sndAE:	dc.l SoundAE
000B1580 0000 0000                  ptr_sndAF:	dc.l SoundAF
000B1584 0000 0000                  ptr_sndB0:	dc.l SoundB0
000B1588 0000 0000                  ptr_sndB1:	dc.l SoundB1
000B158C 0000 0000                  ptr_sndB2:	dc.l SoundB2
000B1590 0000 0000                  ptr_sndB3:	dc.l SoundB3
000B1594 0000 0000                  ptr_sndB4:	dc.l SoundB4
000B1598 0000 0000                  ptr_sndB5:	dc.l SoundB5
000B159C 0000 0000                  ptr_sndB6:	dc.l SoundB6
000B15A0 0000 0000                  ptr_sndB7:	dc.l SoundB7
000B15A4 0000 0000                  ptr_sndB8:	dc.l SoundB8
000B15A8 0000 0000                  ptr_sndB9:	dc.l SoundB9
000B15AC 0000 0000                  ptr_sndBA:	dc.l SoundBA
000B15B0 0000 0000                  ptr_sndBB:	dc.l SoundBB
000B15B4 0000 0000                  ptr_sndBC:	dc.l SoundBC
000B15B8 0000 0000                  ptr_sndBD:	dc.l SoundBD
000B15BC 0000 0000                  ptr_sndBE:	dc.l SoundBE
000B15C0 0000 0000                  ptr_sndBF:	dc.l SoundBF
000B15C4 0000 0000                  ptr_sndC0:	dc.l SoundC0
000B15C8 0000 0000                  ptr_sndC1:	dc.l SoundC1
000B15CC 0000 0000                  ptr_sndC2:	dc.l SoundC2
000B15D0 0000 0000                  ptr_sndC3:	dc.l SoundC3
000B15D4 0000 0000                  ptr_sndC4:	dc.l SoundC4
000B15D8 0000 0000                  ptr_sndC5:	dc.l SoundC5
000B15DC 0000 0000                  ptr_sndC6:	dc.l SoundC6
000B15E0 0000 0000                  ptr_sndC7:	dc.l SoundC7
000B15E4 0000 0000                  ptr_sndC8:	dc.l SoundC8
000B15E8 0000 0000                  ptr_sndC9:	dc.l SoundC9
000B15EC 0000 0000                  ptr_sndCA:	dc.l SoundCA
000B15F0 0000 0000                  ptr_sndCB:	dc.l SoundCB
000B15F4 0000 0000                  ptr_sndCC:	dc.l SoundCC
000B15F8 0000 0000                  ptr_sndCD:	dc.l SoundCD
000B15FC 0000 0000                  ptr_sndCE:	dc.l SoundCE
000B1600 0000 0000                  ptr_sndCF:	dc.l SoundCF
000B1604                            ptr_sndend
000B1604                            ; ---------------------------------------------------------------------------
000B1604                            ; Special sound effect pointers
000B1604                            ; ---------------------------------------------------------------------------
000B1604                            SpecSoundIndex:
000B1604 0000 0000                  ptr_sndD0:	dc.l SoundD0
000B1608 0000 0000                  ptr_sndD1:	dc.l SoundD1
000B160C 0000 0000                  ptr_sndD2:	dc.l SoundD2
000B1610 0000 0000                  ptr_sndD3:	dc.l SoundD3
000B1614 0000 0000                  ptr_sndD4:	dc.l SoundD4
000B1618 0000 0000                  ptr_sndD5:	dc.l SoundD5
000B161C 0000 0000                  ptr_sndD6:	dc.l SoundD6
000B1620                            ptr_specend
000B1620                            SoundA0:	include	"sound/sfx/Jump.asm"
000B1620                            SndA0_Jump_Header:
000B1620                            	smpsHeaderStartSong 1
000B1622 01                         	smpsHeaderTempoSFX  $01
000B1623 01                         	smpsHeaderChanSFX   $01
000B1624                            
000B162A                            
000B162A                            ; PSG2 Data
000B162A                            SndA0_Jump_PSG2:
000B162A F500                       	smpsPSGvoice        $00
000B162C 9E05                       	dc.b	nF2, $05
000B1633 A315                       	dc.b	nBb2, $15
000B1635 F2                         	smpsStop
000B1636                            
000B1636                            ; Song seems to not use any FM voices
000B1636                            SndA0_Jump_Voices:
000B1636                            SndA0_Jump_Voices:
000B1636                            		even
000B1636                            SoundA1:	incbin	"sound/sfx/SndA1 - Lamppost.bin"
000B1660                            		even
000B1660                            SoundA2:	include	"sound/sfx/DrowningSound.asm"
000B1660                            SndDF_Header:
000B1660                            	smpsHeaderStartSong 3
000B1662 01                         	smpsHeaderTempoSFX  $01
000B1663 01                         	smpsHeaderChanSFX   $01
000B1664                            
000B166A                            
000B166A                            ; FM5 Data
000B166A                            SndDF_FM5:
000B166A EF00                       	smpsSetvoice        $00
000B166C                            
000B166C                            SndDF_Loop00:
000B166C F800 00                    	smpsCall            SndDF_Call00
000B166F E905                       	smpsAlterPitch $05
000B1671 E608                       	smpsFMAlterVol      $08
000B1673 F701 03FF F5               	smpsLoop            $01, $03, SndDF_Loop00
000B1678 E9EC                       	smpsAlterPitch $EC
000B167A E6E0                       	smpsFMAlterVol      $E0
000B167C F2                         	smpsStop
000B167D                            
000B167D                            SndDF_Call00:
000B167D 9902                       	dc.b	nC2, $02
000B167F E901                       	smpsAlterPitch $01
000B1681 F700 0AFF F8               	smpsLoop            $00, $0A, SndDF_Call00
000B1686 E9F6                       	smpsAlterPitch $F6
000B1688 E3                         	smpsReturn
000B1689                            
000B1689                            SndDF_Voices:
000B1689                            ;	Voice $00
000B1689                            ;	$07
000B1689                            ;	$04, $04, $05, $04, 	$1F, $1F, $15, $15, 	$00, $00, $00, $00
000B1689                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$7F, $7F, $80, $80
000B1689                            	smpsVcAlgorithm     $07
000B1689                            	smpsVcFeedback      $00
000B1689                            	smpsVcUnusedBits    $00
000B1689                            	smpsVcDetune        $00, $00, $00, $00
000B1689                            	smpsVcCoarseFreq    $04, $05, $04, $04
000B1689                            	smpsVcRateScale     $00, $00, $00, $00
000B1689                            	smpsVcAttackRate    $15, $15, $1F, $1F
000B1689                            	smpsVcAmpMod        $00, $00, $00, $00
000B1689                            	smpsVcDecayRate1    $00, $00, $00, $00
000B1689                            	smpsVcDecayRate2    $00, $00, $00, $00
000B1689                            	smpsVcDecayLevel    $01, $01, $01, $01
000B1689                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B16A2                            		even
000B16A2                            SoundA3:	incbin	"sound/sfx/SndA3 - Death.bin"
000B16D4                            		even
000B16D4                            SoundA4:	incbin	"sound/sfx/SndA4 - Skid.bin"
000B1718 00                         		even
000B1718                            SoundA5:	include	"sound/sfx/LargeRingBox.asm"
000B1718                            SndD2_Header:
000B1718                            	smpsHeaderStartSong 3
000B171A 01                         	smpsHeaderTempoSFX  $01
000B171B 01                         	smpsHeaderChanSFX   $01
000B171C                            
000B1722                            
000B1722                            ; FM4 Data
000B1722                            SndD2_FM4:
000B1722 EF00                       	smpsSetvoice        $00
000B1729 C645                       	dc.b	nA5, $45
000B172B F2                         	smpsStop
000B172C                            
000B172C                            SndD2_Voices:
000B172C                            ;	Voice $00
000B172C                            ;	$04
000B172C                            ;	$27, $02, $07, $47, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
000B172C                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$1F, $80, $23, $80
000B172C                            	smpsVcAlgorithm     $04
000B172C                            	smpsVcFeedback      $00
000B172C                            	smpsVcUnusedBits    $00
000B172C                            	smpsVcDetune        $04, $00, $00, $02
000B172C                            	smpsVcCoarseFreq    $07, $07, $02, $07
000B172C                            	smpsVcRateScale     $00, $00, $00, $00
000B172C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B172C                            	smpsVcAmpMod        $00, $00, $00, $00
000B172C                            	smpsVcDecayRate1    $0D, $07, $0A, $07
000B172C                            	smpsVcDecayRate2    $0B, $00, $0B, $00
000B172C                            	smpsVcDecayLevel    $00, $01, $00, $01
000B172C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1746 00                         		even
000B1746                            SoundA6:	incbin	"sound/sfx/SndA6 - Hit Spikes.bin"
000B1776                            		even
000B1776                            SoundA7:	incbin	"sound/sfx/SndA7 - Push Block.bin"
000B17A6                            		even
000B17A6                            SoundA8:	incbin	"sound/sfx/SndA8 - SS Goal.bin"
000B17DA                            		even
000B17DA                            SoundA9:	incbin	"sound/sfx/SndA9 - SS Item.bin"
000B17EC                            		even
000B17EC                            SoundAA:	include	"sound/sfx/Splash.asm"
000B17EC                            SndA2_Header:
000B17EC                            	smpsHeaderStartSong 3
000B17EE 01                         	smpsHeaderTempoSFX  $01
000B17EF 02                         	smpsHeaderChanSFX   $02
000B17F0                            
000B17FC                            
000B17FC                            ; FM3 Data
000B17FC                            SndA2_FM3:
000B17FC EF00                       	smpsSetvoice        $00
000B1803 8106                       	dc.b	nC0, $06
000B1805                            
000B1805                            SndA2_Loop00:
000B1805 810E                       	dc.b	nC0, $0E
000B1807 E60E                       	smpsAlterVol      $0E
000B1809 F700 04FF F8               	smpsLoop            $00, $04, SndA2_Loop00
000B180E F2                         	smpsStop
000B180F                            
000B180F                            ; FM4 Data
000B180F                            SndA2_FM4:
000B180F EF01                       	smpsSetvoice        $01
000B1811 A606 14                    	dc.b	nCs3, $06, $14
000B1814 F2                         	smpsStop
000B1815                            
000B1815                            SndA2_Voices:
000B1815                            ;	Voice $00
000B1815                            ;	$F9
000B1815                            ;	$21, $30, $10, $32, 	$1C, $1F, $1F, $10, 	$05, $18, $09, $02
000B1815                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0C, $06, $04, $80
000B1815                            	smpsVcAlgorithm     $01
000B1815                            	smpsVcFeedback      $07
000B1815                            	smpsVcUnusedBits    $03
000B1815                            	smpsVcDetune        $03, $01, $03, $02
000B1815                            	smpsVcCoarseFreq    $02, $00, $00, $01
000B1815                            	smpsVcRateScale     $00, $00, $00, $00
000B1815                            	smpsVcAttackRate    $10, $1F, $1F, $1C
000B1815                            	smpsVcAmpMod        $00, $00, $00, $00
000B1815                            	smpsVcDecayRate1    $02, $09, $18, $05
000B1815                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B1815                            	smpsVcDecayLevel    $02, $04, $02, $01
000B1815                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B182E                            
000B182E                            ;	Voice $01
000B182E                            ;	$00
000B182E                            ;	$00, $03, $02, $00, 	$D9, $DF, $1F, $1F, 	$12, $11, $14, $0F
000B182E                            ;	$0A, $00, $0A, $0D, 	$FF, $FF, $FF, $FF, 	$22, $07, $27, $80
000B182E                            	smpsVcAlgorithm     $00
000B182E                            	smpsVcFeedback      $00
000B182E                            	smpsVcUnusedBits    $00
000B182E                            	smpsVcDetune        $00, $00, $00, $00
000B182E                            	smpsVcCoarseFreq    $00, $02, $03, $00
000B182E                            	smpsVcRateScale     $00, $00, $03, $03
000B182E                            	smpsVcAttackRate    $1F, $1F, $1F, $19
000B182E                            	smpsVcAmpMod        $00, $00, $00, $00
000B182E                            	smpsVcDecayRate1    $0F, $14, $11, $12
000B182E                            	smpsVcDecayRate2    $0D, $0A, $00, $0A
000B182E                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B182E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1848 00                         		even
000B1848                            SoundAB:	include	"sound/sfx/FireShield.asm"
000B1848                            Sound_3E_Header:
000B1848                            	smpsHeaderStartSong 3
000B184A 01                         	smpsHeaderTempoSFX  $01
000B184B 01                         	smpsHeaderChanSFX   $01
000B184C                            
000B1852                            
000B1852                            ; FM5 Data
000B1852                            Sound_3E_3F_40_41_FM5:
000B1852 EF00                       	smpsSetvoice        $00
000B1854 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
000B1859 F2                         	smpsStop
000B185A                            
000B185A                            Sound_3E_Voices:
000B185A                            ;	Voice $00
000B185A                            ;	$0C
000B185A                            ;	$01, $21, $31, $31, 	$1E, $0C, $0E, $1C, 	$0A, $00, $04, $00
000B185A                            ;	$08, $12, $08, $0C, 	$FF, $0F, $BF, $0F, 	$03, $80, $0D, $80
000B185A                            	smpsVcAlgorithm     $04
000B185A                            	smpsVcFeedback      $01
000B185A                            	smpsVcUnusedBits    $00
000B185A                            	smpsVcDetune        $03, $03, $02, $00
000B185A                            	smpsVcCoarseFreq    $01, $01, $01, $01
000B185A                            	smpsVcRateScale     $00, $00, $00, $00
000B185A                            	smpsVcAttackRate    $1C, $0E, $0C, $1E
000B185A                            	smpsVcAmpMod        $00, $00, $00, $00
000B185A                            	smpsVcDecayRate1    $00, $04, $00, $0A
000B185A                            	smpsVcDecayRate2    $0C, $08, $12, $08
000B185A                            	smpsVcDecayLevel    $00, $0B, $00, $0F
000B185A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1873                            
000B1873                            
000B1874 00                         		even
000B1874                            SoundAC:	incbin	"sound/sfx/SndAC - Hit Boss.bin"
000B18A8                            		even
000B18A8                            SoundAD:	incbin	"sound/sfx/SndAD - Get Bubble.bin"
000B18DE                            		even
000B18DE                            SoundAE:	include	"sound/sfx/Fireball.asm"
000B18DE                            Sound_70_Header:
000B18DE                            	smpsHeaderStartSong 3
000B18E0 01                         	smpsHeaderTempoSFX  $01
000B18E1 02                         	smpsHeaderChanSFX   $02
000B18E2                            
000B18EE                            
000B18EE                            ; FM5 Data
000B18EE                            Sound_70_FM5:
000B18EE EF00                       	smpsSetvoice        $00
000B18F0 8001                       	dc.b	nRst, $01
000B18F7 8306 8502                  	dc.b	nD0, $06, nE0, $02
000B18FB F2                         	smpsStop
000B18FC                            
000B18FC                            ; PSG3 Data
000B18FC                            Sound_70_PSG3:
000B18FC F500                       	smpsPSGvoice        sTone_0D
000B18FE 800B                       	dc.b	nRst, $0B
000B1900 F3E7                       	smpsPSGform         $E7
000B1902 C501 E7                    	dc.b	(nMaxPSG1-$D)&$FF, $01, smpsNoAttack
000B1905                            
000B1905                            Sound_70_Loop00:
000B1905 02                         	dc.b	$02
000B1906 EC01                       	smpsPSGAlterVol     $01
000B1908 E7                         	dc.b	smpsNoAttack
000B1909 F700 10FF F8               	smpsLoop            $00, $10, Sound_70_Loop00
000B190E F2                         	smpsStop
000B190F                            
000B190F                            Sound_70_Voices:
000B190F                            ;	Voice $00
000B190F                            ;	$FA
000B190F                            ;	$02, $03, $00, $05, 	$12, $11, $0F, $13, 	$05, $18, $09, $02
000B190F                            ;	$06, $0F, $06, $02, 	$1F, $2F, $4F, $2F, 	$2F, $1A, $0E, $80
000B190F                            	smpsVcAlgorithm     $02
000B190F                            	smpsVcFeedback      $07
000B190F                            	smpsVcUnusedBits    $03
000B190F                            	smpsVcDetune        $00, $00, $00, $00
000B190F                            	smpsVcCoarseFreq    $05, $00, $03, $02
000B190F                            	smpsVcRateScale     $00, $00, $00, $00
000B190F                            	smpsVcAttackRate    $13, $0F, $11, $12
000B190F                            	smpsVcAmpMod        $00, $00, $00, $00
000B190F                            	smpsVcDecayRate1    $02, $09, $18, $05
000B190F                            	smpsVcDecayRate2    $02, $06, $0F, $06
000B190F                            	smpsVcDecayLevel    $02, $04, $02, $01
000B190F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1928                            
000B1928                            
000B1928                            		even
000B1928                            SoundAF:	incbin	"sound/sfx/SndAF - Shield.bin"
000B1956                            		even
000B1956                            SoundB0:	incbin	"sound/sfx/SndB0 - Saw.bin"
000B1988                            		even
000B1988                            SoundB1:	incbin	"sound/sfx/SndB1 - Electric.bin"
000B19B4                            		even
000B19B4                            SoundB2:	incbin	"sound/sfx/SndB2 - Drown Death.bin"
000B1A04                            		even
000B1A04                            SoundB3:	incbin	"sound/sfx/SndB3 - Flamethrower.bin"
000B1A4E                            		even
000B1A4E                            SoundB4:	incbin	"sound/sfx/SndB4 - Bumper.bin"
000B1AAA                            		even
000B1AAA                            SoundB5:	incbin	"sound/sfx/SndB5 - Ring.bin"
000B1AD8                            		even
000B1AD8                            SoundB6:	include	"sound/sfx/Spikes.asm"
000B1AD8                            SpikesSFX_Header:
000B1AD8                            	smpsHeaderStartSong 3
000B1ADA 01                         	smpsHeaderTempoSFX  $01
000B1ADB 02                         	smpsHeaderChanSFX   $02
000B1ADC                            
000B1AE8                            
000B1AE8                            ; FM6 Data
000B1AE8                            SndB7_FM3:
000B1AE8 EF01                       	smpsSetvoice        $01
000B1AEF B105                       	dc.b	nC4, $05
000B1AF1 F1                         	smpsModOn
000B1AF2 E10A                       	smpsAlterNote       $0A
000B1AF4 E601                       	smpsAlterVol        $01
000B1AF6 F2                         	smpsStop
000B1AF7                            
000B1AF7                            ; FM5 Data
000B1AF7                            SndB7_FM5:
000B1AF7 8005                       	dc.b	nRst, $05			 
000B1AF9 EF00                       	smpsSetvoice        $00
000B1AFB DB01 8001 DB11             	dc.b	nFs7, $01, nRst, $01, nFs7, $11
000B1B01 F2                         	smpsStop
000B1B02                            
000B1B02                            SndB7_Voices:
000B1B02                            ;	Voice $00
000B1B02                            ;	$34
000B1B02                            ;	$09, $0F, $01, $D7, 	$1F, $1F, $1F, $1F, 	$0C, $11, $09, $0F
000B1B02                            ;	$0A, $0E, $0D, $0E, 	$35, $1A, $55, $3A, 	$0C, $80, $0F, $80
000B1B02                            	smpsVcAlgorithm     $04
000B1B02                            	smpsVcFeedback      $06
000B1B02                            	smpsVcUnusedBits    $00
000B1B02                            	smpsVcDetune        $0D, $00, $00, $00
000B1B02                            	smpsVcCoarseFreq    $07, $01, $0F, $09
000B1B02                            	smpsVcRateScale     $00, $00, $00, $00
000B1B02                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1B02                            	smpsVcAmpMod        $00, $00, $00, $00
000B1B02                            	smpsVcDecayRate1    $0F, $09, $11, $0C
000B1B02                            	smpsVcDecayRate2    $0E, $0D, $0E, $0A
000B1B02                            	smpsVcDecayLevel    $03, $05, $01, $03
000B1B02                            	smpsVcReleaseRate   $0A, $05, $0A, $05
000B1B1B                            
000B1B1B                            ;	Voice $01
000B1B1B                            ;	$FA
000B1B1B                            ;	$21, $3A, $19, $30, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
000B1B1B                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
000B1B1B                            	smpsVcAlgorithm     $02
000B1B1B                            	smpsVcFeedback      $07
000B1B1B                            	smpsVcUnusedBits    $03
000B1B1B                            	smpsVcDetune        $03, $01, $03, $02
000B1B1B                            	smpsVcCoarseFreq    $00, $09, $0A, $01
000B1B1B                            	smpsVcRateScale     $00, $00, $00, $00
000B1B1B                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1B1B                            	smpsVcAmpMod        $00, $00, $00, $00
000B1B1B                            	smpsVcDecayRate1    $02, $09, $18, $05
000B1B1B                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B1B1B                            	smpsVcDecayLevel    $02, $04, $02, $01
000B1B1B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1B34                            		even
000B1B34                            SoundB7:	incbin	"sound/sfx/SndB7 - Rumbling.bin"
000B1B70                            		even
000B1B70                            SoundB8:	include	"sound/sfx/ScoreTallying.asm"
000B1B70                            SndBD_Header:
000B1B70                            	smpsHeaderStartSong 3
000B1B72 01                         	smpsHeaderTempoSFX  $01
000B1B73 01                         	smpsHeaderChanSFX   $01
000B1B74                            
000B1B7A                            
000B1B7A                            ; FM6 Data
000B1B7A                            SndBD_FM3:
000B1B7A EF00                       	smpsSetvoice        $00
000B1B7C                            
000B1B7C                            SndBD_Loop00:
000B1B7C C009                       	dc.b	nEb5, $09
000B1B7E F700 08FF FA               	smpsLoop            $00, $08, SndBD_Loop00
000B1B83 F2                         	smpsStop
000B1B84                            
000B1B84                            SndBD_Voices:
000B1B84                            ;	Voice $00
000B1B84                            ;	$02
000B1B84                            ;	$02, $51, $20, $01, 	$1E, $1E, $1E, $1E, 	$10, $0A, $14, $13
000B1B84                            ;	$01, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$24, $0E, $1F, $80
000B1B84                            	smpsVcAlgorithm     $02
000B1B84                            	smpsVcFeedback      $00
000B1B84                            	smpsVcUnusedBits    $00
000B1B84                            	smpsVcDetune        $00, $02, $05, $00
000B1B84                            	smpsVcCoarseFreq    $01, $00, $01, $02
000B1B84                            	smpsVcRateScale     $00, $00, $00, $00
000B1B84                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
000B1B84                            	smpsVcAmpMod        $00, $00, $00, $00
000B1B84                            	smpsVcDecayRate1    $13, $14, $0A, $10
000B1B84                            	smpsVcDecayRate2    $00, $00, $00, $01
000B1B84                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B1B84                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1B9E 00                         		even
000B1B9E                            SoundB9:	include	"sound/sfx/BreakFloor.asm"
000B1B9E                            Sound_59_Header:
000B1B9E                            	smpsHeaderStartSong 3
000B1BA0 01                         	smpsHeaderTempoSFX  $01
000B1BA1 04                         	smpsHeaderChanSFX   $04
000B1BA2                            
000B1BBA                            
000B1BBA                            ; FM3 Data
000B1BBA                            Sound_59_FM3:
000B1BBA E040                       	smpsPan             panRight, $00
000B1BBC 8002                       	dc.b	nRst, $02
000B1BBE F600 00                    	smpsJump            Sound_59_FM4
000B1BC1                            
000B1BC1                            ; FM5 Data
000B1BC1                            Sound_59_FM5:
000B1BC1 E080                       	smpsPan             panLeft, $00
000B1BC3 8001                       	dc.b	nRst, $01
000B1BC5                            
000B1BC5                            ; FM4 Data
000B1BC5                            Sound_59_FM4:
000B1BC5 EF00                       	smpsSetvoice        $00
000B1BCC 8110                       	dc.b	nC0, $10
000B1BCE F2                         	smpsStop
000B1BCF                            
000B1BCF                            ; PSG3 Data
000B1BCF                            Sound_59_PSG3:
000B1BD4 F3E7                       	smpsPSGform         $E7
000B1BD6                            
000B1BD6                            Sound_59_Loop00:
000B1BD6 B018 E7                    	dc.b	nB3, $18, smpsNoAttack
000B1BD9 EC03                       	smpsPSGAlterVol     $03
000B1BDB F700 05FF F7               	smpsLoop            $00, $05, Sound_59_Loop00
000B1BE0 F2                         	smpsStop
000B1BE1                            
000B1BE1                            Sound_59_Voices:
000B1BE1                            ;	Voice $00
000B1BE1                            ;	$F9
000B1BE1                            ;	$21, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
000B1BE1                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
000B1BE1                            	smpsVcAlgorithm     $01
000B1BE1                            	smpsVcFeedback      $07
000B1BE1                            	smpsVcUnusedBits    $03
000B1BE1                            	smpsVcDetune        $03, $01, $03, $02
000B1BE1                            	smpsVcCoarseFreq    $02, $00, $00, $01
000B1BE1                            	smpsVcRateScale     $00, $00, $00, $00
000B1BE1                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1BE1                            	smpsVcAmpMod        $00, $00, $00, $00
000B1BE1                            	smpsVcDecayRate1    $02, $09, $18, $05
000B1BE1                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B1BE1                            	smpsVcDecayLevel    $02, $04, $02, $01
000B1BE1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1BFA                            
000B1BFA                            
000B1BFA                            		even
000B1BFA                            SoundBA:	incbin	"sound/sfx/SndBA - SS Glass.bin"
000B1C22                            		even
000B1C22                            SoundBB:	incbin	"sound/sfx/SndBB - Door.bin"
000B1C4E                            		even
000B1C4E                            SoundBC:	include	"sound/sfx/DashRelease.asm"
000B1C4E                            Sound_B6_Header:
000B1C4E                            	smpsHeaderStartSong 3
000B1C50 01                         	smpsHeaderTempoSFX  $01
000B1C51 02                         	smpsHeaderChanSFX   $02
000B1C52                            
000B1C5E                            
000B1C5E                            ; FM5 Data
000B1C5E                            Sound_B6_FM5:
000B1C5E EF00                       	smpsSetvoice        $00
000B1C65 CD0F                       	dc.b	nE6, $0F
000B1C67 F2                         	smpsStop
000B1C68                            
000B1C68                            ; PSG3 Data
000B1C68                            Sound_B6_PSG3:
000B1C68 F507                       	smpsPSGvoice        sTone_1D
000B1C6A 8006                       	dc.b	nRst, $06
000B1C71 F3E7                       	smpsPSGform         $E7
000B1C73 CD4F                       	dc.b	nE6, $4F
000B1C75 F2                         	smpsStop
000B1C76                            
000B1C76                            Sound_B6_Voices:
000B1C76                            ;	Voice $00
000B1C76                            ;	$3D
000B1C76                            ;	$09, $03, $00, $00, 	$1F, $1F, $1F, $1F, 	$10, $0C, $0C, $0C
000B1C76                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$09, $84, $92, $8E
000B1C76                            	smpsVcAlgorithm     $05
000B1C76                            	smpsVcFeedback      $07
000B1C76                            	smpsVcUnusedBits    $00
000B1C76                            	smpsVcDetune        $00, $00, $00, $00
000B1C76                            	smpsVcCoarseFreq    $00, $00, $03, $09
000B1C76                            	smpsVcRateScale     $00, $00, $00, $00
000B1C76                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1C76                            	smpsVcAmpMod        $00, $00, $00, $00
000B1C76                            	smpsVcDecayRate1    $0C, $0C, $0C, $10
000B1C76                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B1C76                            	smpsVcDecayLevel    $02, $04, $02, $01
000B1C76                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1C8F                            
000B1C8F                            
000B1C90 00                         		even
000B1C90                            SoundBD:	incbin	"sound/sfx/SndBD - ChainStomp.bin"
000B1CE4                            		even
000B1CE4                            SoundBE:	incbin	"sound/sfx/SndBE - Roll.bin"
000B1D1E                            		even
000B1D1E                            SoundBF:	incbin	"sound/sfx/SndBF - Get Continue.bin"
000B1D90                            		even
000B1D90                            SoundC0:	incbin	"sound/sfx/SndC0 - Basaran Flap.bin"
000B1DBE                            		even
000B1DBE                            SoundC1:	incbin	"sound/sfx/SndC1 - Break Item.bin"
000B1DF8                            		even
000B1DF8                            SoundC2:	include	"sound/sfx/DrowningWarning.asm"
000B1DF8                            SndC1_Header:
000B1DF8                            	smpsHeaderStartSong 3
000B1DFA 01                         	smpsHeaderTempoSFX  $01
000B1DFB 01                         	smpsHeaderChanSFX   $01
000B1DFC                            
000B1E02                            
000B1E02                            ; FM4 Data
000B1E02                            SndC1_FM4:
000B1E02 EF00                       	smpsSetvoice        $00
000B1E04 D506 40                    	dc.b	nC7, $06, $40
000B1E07 F2                         	smpsStop
000B1E08                            
000B1E08                            SndC1_Voices:
000B1E08                            ;	Voice $00
000B1E08                            ;	$38
000B1E08                            ;	$01, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$09, $09, $09, $0B
000B1E08                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$5C, $22, $27, $80
000B1E08                            	smpsVcAlgorithm     $00
000B1E08                            	smpsVcFeedback      $07
000B1E08                            	smpsVcUnusedBits    $00
000B1E08                            	smpsVcDetune        $00, $00, $00, $00
000B1E08                            	smpsVcCoarseFreq    $00, $00, $00, $01
000B1E08                            	smpsVcRateScale     $00, $00, $00, $00
000B1E08                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1E08                            	smpsVcAmpMod        $00, $00, $00, $00
000B1E08                            	smpsVcDecayRate1    $0B, $09, $09, $09
000B1E08                            	smpsVcDecayRate2    $00, $00, $00, $00
000B1E08                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B1E08                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1E22 00                         		even
000B1E22                            SoundC3:	incbin	"sound/sfx/SndC3 - Giant Ring.bin"
000B1E9C                            		even
000B1E9C                            SoundC4:	incbin	"sound/sfx/SndC4 - Bomb.bin"
000B1EC4                            		even
000B1EC4                            SoundC5:	include	"sound/sfx/Cash Register.asm"
000B1EC4                            Sound_B0_Header:
000B1EC4                            	smpsHeaderStartSong 3
000B1EC6 01                         	smpsHeaderTempoSFX  $01
000B1EC7 03                         	smpsHeaderChanSFX   $03
000B1EC8                            
000B1EDA                            
000B1EDA                            ; FM5 Data
000B1EDA                            Sound_B0_FM5:
000B1EDA EF00                       	smpsSetvoice        $00
000B1EDC 8A08 8002 8A08             	dc.b	nA0, $08, nRst, $02, nA0, $08
000B1EE2 F2                         	smpsStop
000B1EE3                            
000B1EE3                            ; FM4 Data
000B1EE3                            Sound_B0_FM4:
000B1EE3 EF01                       	smpsSetvoice        $01
000B1EE5 8012 C655                  	dc.b	nRst, $12, nA5, $55
000B1EE9 F2                         	smpsStop
000B1EEA                            
000B1EEA                            ; FM3 Data
000B1EEA                            Sound_B0_FM3:
000B1EEA EF02                       	smpsSetvoice        $02
000B1EEC 8002 C205 0405 04          	dc.b	nRst, $02, nF5, $05, $04, $05, $04
000B1EF3 F2                         	smpsStop
000B1EF4                            
000B1EF4                            Sound_B0_Voices:
000B1EF4                            ;	Voice $00
000B1EF4                            ;	$3B
000B1EF4                            ;	$03, $02, $03, $06, 	$18, $1A, $1A, $96, 	$17, $0E, $0A, $10
000B1EF4                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $28, $39, $80
000B1EF4                            	smpsVcAlgorithm     $03
000B1EF4                            	smpsVcFeedback      $07
000B1EF4                            	smpsVcUnusedBits    $00
000B1EF4                            	smpsVcDetune        $00, $00, $00, $00
000B1EF4                            	smpsVcCoarseFreq    $06, $03, $02, $03
000B1EF4                            	smpsVcRateScale     $02, $00, $00, $00
000B1EF4                            	smpsVcAttackRate    $16, $1A, $1A, $18
000B1EF4                            	smpsVcAmpMod        $00, $00, $00, $00
000B1EF4                            	smpsVcDecayRate1    $10, $0A, $0E, $17
000B1EF4                            	smpsVcDecayRate2    $00, $00, $00, $00
000B1EF4                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B1EF4                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1F0D                            
000B1F0D                            ;	Voice $01
000B1F0D                            ;	$04
000B1F0D                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
000B1F0D                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $80, $23, $80
000B1F0D                            	smpsVcAlgorithm     $04
000B1F0D                            	smpsVcFeedback      $00
000B1F0D                            	smpsVcUnusedBits    $00
000B1F0D                            	smpsVcDetune        $04, $07, $07, $03
000B1F0D                            	smpsVcCoarseFreq    $09, $07, $02, $07
000B1F0D                            	smpsVcRateScale     $00, $00, $00, $00
000B1F0D                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1F0D                            	smpsVcAmpMod        $00, $00, $00, $00
000B1F0D                            	smpsVcDecayRate1    $0D, $07, $0A, $07
000B1F0D                            	smpsVcDecayRate2    $0B, $00, $0B, $00
000B1F0D                            	smpsVcDecayLevel    $00, $01, $00, $01
000B1F0D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1F26                            
000B1F26                            ;	Voice $02
000B1F26                            ;	$3C
000B1F26                            ;	$0F, $00, $00, $00, 	$1F, $1A, $18, $1C, 	$17, $11, $1A, $0E
000B1F26                            ;	$00, $0F, $14, $10, 	$1F, $9F, $9F, $2F, 	$07, $80, $26, $8C
000B1F26                            	smpsVcAlgorithm     $04
000B1F26                            	smpsVcFeedback      $07
000B1F26                            	smpsVcUnusedBits    $00
000B1F26                            	smpsVcDetune        $00, $00, $00, $00
000B1F26                            	smpsVcCoarseFreq    $00, $00, $00, $0F
000B1F26                            	smpsVcRateScale     $00, $00, $00, $00
000B1F26                            	smpsVcAttackRate    $1C, $18, $1A, $1F
000B1F26                            	smpsVcAmpMod        $00, $00, $00, $00
000B1F26                            	smpsVcDecayRate1    $0E, $1A, $11, $17
000B1F26                            	smpsVcDecayRate2    $10, $14, $0F, $00
000B1F26                            	smpsVcDecayLevel    $02, $09, $09, $01
000B1F26                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1F3F                            
000B1F3F                            
000B1F40 00                         		even
000B1F40                            SoundC6:	incbin	"sound/sfx/SndC6 - Ring Loss.bin"
000B1F82                            		even
000B1F82                            SoundC7:	incbin	"sound/sfx/SndC7 - Chain Rising.bin"
000B1FB0                            		even
000B1FB0                            SoundC8:	incbin	"sound/sfx/SndC8 - Burning.bin"
000B1FC2                            		even
000B1FC2                            SoundC9:	incbin	"sound/sfx/SndC9 - Hidden Bonus.bin"
000B1FF0                            		even
000B1FF0                            SoundCA:	incbin	"sound/sfx/SndCA - Enter SS.bin"
000B201E                            		even
000B201E                            SoundCB:	incbin	"sound/sfx/SndCB - Wall Smash.bin"
000B206A                            		even
000B206A                            SoundCC:	include	"sound/sfx/Spring.asm"
000B206A                            Spring_Header:
000B206A                            	smpsHeaderStartSong 1
000B206C 01                         	smpsHeaderTempoSFX  $01
000B206D 01                         	smpsHeaderChanSFX   $01
000B206E                            
000B2074                            
000B2074                            ; FM6 Data
000B2074                            Spring_FM6:
000B2074 EF00                       	smpsSetvoice        $00
000B2076 8001                       	dc.b	nRst, $01
000B207D B006                       	dc.b	nB3, $06
000B207F F4                         	smpsModOff
000B2080 EF01                       	smpsSetvoice        $01
000B2082                            
000B2082                            Spring_Loop00:
000B2082 BD02                       	dc.b	nC5, $02
000B2084 E601                       	smpsAlterVol      $01
000B2086 E7                         	dc.b	smpsNoAttack
000B2087 F700 19FF F7               	smpsLoop            $00, $19, Spring_Loop00
000B208C F2                         	smpsStop
000B208D                            
000B208D                            Spring_Voices:
000B208D                            ;	Voice $00
000B208D                            ;	$20
000B208D                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
000B208D                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$16, $30, $13, $80
000B208D                            	smpsVcAlgorithm     $00
000B208D                            	smpsVcFeedback      $04
000B208D                            	smpsVcUnusedBits    $00
000B208D                            	smpsVcDetune        $03, $03, $03, $03
000B208D                            	smpsVcCoarseFreq    $01, $00, $05, $06
000B208D                            	smpsVcRateScale     $02, $02, $03, $03
000B208D                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B208D                            	smpsVcAmpMod        $00, $00, $00, $00
000B208D                            	smpsVcDecayRate1    $06, $09, $06, $07
000B208D                            	smpsVcDecayRate2    $08, $06, $06, $07
000B208D                            	smpsVcDecayLevel    $0F, $01, $01, $02
000B208D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B20A6                            
000B20A6                            ;	Voice $01
000B20A6                            ;	$20
000B20A6                            ;	$31, $33, $30, $31, 	$9F, $9F, $9F, $9F, 	$07, $06, $09, $06
000B20A6                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $23, $11, $80
000B20A6                            	smpsVcAlgorithm     $00
000B20A6                            	smpsVcFeedback      $04
000B20A6                            	smpsVcUnusedBits    $00
000B20A6                            	smpsVcDetune        $03, $03, $03, $03
000B20A6                            	smpsVcCoarseFreq    $01, $00, $03, $01
000B20A6                            	smpsVcRateScale     $02, $02, $02, $02
000B20A6                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B20A6                            	smpsVcAmpMod        $00, $00, $00, $00
000B20A6                            	smpsVcDecayRate1    $06, $09, $06, $07
000B20A6                            	smpsVcDecayRate2    $08, $06, $06, $07
000B20A6                            	smpsVcDecayLevel    $0F, $01, $01, $02
000B20A6                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B20C0 00                         		even
000B20C0                            SoundCD:	include	"sound/sfx/Beep.asm"
000B20C0                            Snd99_Header:
000B20C0                            	smpsHeaderStartSong 3
000B20C2 01                         	smpsHeaderTempoSFX  $01
000B20C3 01                         	smpsHeaderChanSFX   $01
000B20C4                            
000B20CA                            
000B20CA                            ; FM4 Data
000B20CA                            Snd99_FM4:
000B20CA EF00                       	smpsSetvoice        $00
000B20CC B502                       	dc.b	nE4, $02
000B20CE F2                         	smpsStop
000B20CF                            
000B20CF                            Snd99_Voices:
000B20CF                            ;	Voice $00
000B20CF                            ;	$07
000B20CF                            ;	$0A, $0A, $0A, $0A, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000B20CF                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$88, $88, $88, $88
000B20CF                            	smpsVcAlgorithm     $07
000B20CF                            	smpsVcFeedback      $00
000B20CF                            	smpsVcUnusedBits    $00
000B20CF                            	smpsVcDetune        $00, $00, $00, $00
000B20CF                            	smpsVcCoarseFreq    $0A, $0A, $0A, $0A
000B20CF                            	smpsVcRateScale     $00, $00, $00, $00
000B20CF                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B20CF                            	smpsVcAmpMod        $00, $00, $00, $00
000B20CF                            	smpsVcDecayRate1    $00, $00, $00, $00
000B20CF                            	smpsVcDecayRate2    $00, $00, $00, $00
000B20CF                            	smpsVcDecayLevel    $00, $00, $00, $00
000B20CF                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B20E8                            		even
000B20E8                            SoundCE:	incbin	"sound/sfx/SndCE - Ring Left Speaker.bin"
000B2116                            		even
000B2116                            SoundCF:	include	"sound/sfx/Signpost.asm"
000B2116                            SignpostCD_Header:
000B2116                            	smpsHeaderStartSong 3
000B2118 01                         	smpsHeaderTempoSFX  $01
000B2119 02                         	smpsHeaderChanSFX   $02
000B211A                            
000B2126                            
000B2126                            ; FM5 Data
000B2126                            Snd9D_FM5:
000B2126 8004                       	dc.b	nRst, $04
000B2128                            
000B2128                            ; FM4 Data
000B2128                            Snd9D_FM4:
000B2128 EF00                       	smpsSetvoice        $00
000B212A                            
000B212A                            Snd9D_Loop00:
000B212A B405                       	dc.b	nEb4, $05
000B212C E604                       	smpsFMAlterVol      $04
000B212E F700 08FF F8               	smpsLoop            $00, $08, Snd9D_Loop00
000B2133 F2                         	smpsStop
000B2134                            
000B2134                            Snd9D_Voices:
000B2134                            ;	Voice $00
000B2134                            ;	$F4
000B2134                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
000B2134                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$0C, $85, $00, $80
000B2134                            	smpsVcAlgorithm     $04
000B2134                            	smpsVcFeedback      $06
000B2134                            	smpsVcUnusedBits    $03
000B2134                            	smpsVcDetune        $00, $00, $00, $00
000B2134                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
000B2134                            	smpsVcRateScale     $00, $00, $00, $00
000B2134                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B2134                            	smpsVcAmpMod        $00, $00, $00, $00
000B2134                            	smpsVcDecayRate1    $0B, $0B, $00, $00
000B2134                            	smpsVcDecayRate2    $08, $05, $00, $00
000B2134                            	smpsVcDecayLevel    $0F, $0F, $00, $00
000B2134                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B214E 00                         		even
000B214E                            SoundD0:	incbin	"sound/sfx/SndD0 - Waterfall.bin"
000B2188                            		even
000B2188                            SoundD1:	include	"sound/sfx/Lightning Shield.asm"
000B2188                            Sound_41_Header:
000B2188                            	smpsHeaderStartSong 3
000B218A 01                         	smpsHeaderTempoSFX  $01
000B218B 01                         	smpsHeaderChanSFX   $01
000B218C                            
000B2192                            	
000B2192                            Sound41_FM5:
000B2192 EF00                       	smpsSetvoice        $00
000B2194 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
000B2199 F2                         	smpsStop
000B219A                            
000B219A                            Sound_41_Voices:
000B219A                            ;	Voice $00
000B219A                            ;	$36
000B219A                            ;	$07, $10, $0E, $0C, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000B219A                            ;	$00, $0D, $0D, $0E, 	$0F, $0F, $0F, $0F, 	$17, $80, $80, $80
000B219A                            	smpsVcAlgorithm     $06
000B219A                            	smpsVcFeedback      $06
000B219A                            	smpsVcUnusedBits    $00
000B219A                            	smpsVcDetune        $00, $00, $01, $00
000B219A                            	smpsVcCoarseFreq    $0C, $0E, $00, $07
000B219A                            	smpsVcRateScale     $00, $00, $00, $00
000B219A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B219A                            	smpsVcAmpMod        $00, $00, $00, $00
000B219A                            	smpsVcDecayRate1    $00, $00, $00, $00
000B219A                            	smpsVcDecayRate2    $0E, $0D, $0D, $00
000B219A                            	smpsVcDecayLevel    $00, $00, $00, $00
000B219A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B21B3                            
000B21B3                            
000B21B4 00                         		even
000B21B4                            SoundD2:	include	"sound/sfx/CD_Charge.asm"
000B21B4                            Snd9B_Header:
000B21B4                            	smpsHeaderStartSong 3
000B21B6 01                         	smpsHeaderTempoSFX  $01
000B21B7 01                         	smpsHeaderChanSFX   $01
000B21B8                            
000B21BE                            
000B21BE                            ; FM5 Data
000B21BE                            Snd9B_FM5:
000B21BE EF00                       	smpsSetvoice        $00
000B21C0 8001                       	dc.b	nRst, $01
000B21C7 CA25                       	dc.b	nCs6, $25
000B21C9 F4                         	smpsModOff
000B21CA                            
000B21CA                            Snd9B_Loop00:
000B21CA E7                         	dc.b	smpsNoAttack
000B21CB E601                       	smpsFMAlterVol      $01
000B21CD D102                       	dc.b	nAb6, $02
000B21CF F700 2AFF F7               	smpsLoop            $00, $2A, Snd9B_Loop00
000B21D4 F2                         	smpsStop
000B21D5                            
000B21D5                            Snd9B_Voices:
000B21D5                            ;	Voice $00
000B21D5                            ;	$3C
000B21D5                            ;	$00, $44, $02, $02, 	$1F, $1F, $1F, $15, 	$00, $1F, $00, $00
000B21D5                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$0D, $80, $28, $80
000B21D5                            	smpsVcAlgorithm     $04
000B21D5                            	smpsVcFeedback      $07
000B21D5                            	smpsVcUnusedBits    $00
000B21D5                            	smpsVcDetune        $00, $00, $04, $00
000B21D5                            	smpsVcCoarseFreq    $02, $02, $04, $00
000B21D5                            	smpsVcRateScale     $00, $00, $00, $00
000B21D5                            	smpsVcAttackRate    $15, $1F, $1F, $1F
000B21D5                            	smpsVcAmpMod        $00, $00, $00, $00
000B21D5                            	smpsVcDecayRate1    $00, $00, $1F, $00
000B21D5                            	smpsVcDecayRate2    $00, $00, $00, $00
000B21D5                            	smpsVcDecayLevel    $00, $00, $00, $00
000B21D5                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B21EE                            
000B21EE                            
000B21EE                            		even		
000B21EE                            SoundD3:	incbin	"sound/sfx/Peelout_Release.bin"
000B2286                            		even
000B2286                            SoundD4:	incbin	"sound/sfx/Peelout_Stop.bin"
000B2292                            		even				
000B2292                            SoundD5:	incbin	"sound/sfx/Spindash.bin"
000B22CE                            		even		
000B22CE                            SoundD6:	include	"sound/sfx/Transform.asm"
000B22CE                            Sound_9F_Header:
000B22CE                            	smpsHeaderStartSong 3
000B22D0 01                         	smpsHeaderTempoSFX  $01
000B22D1 02                         	smpsHeaderChanSFX   $02
000B22D2                            
000B22DE                            
000B22DE                            ; FM4 Data
000B22DE                            Sound_9F_FM4:
000B22DE 8003                       	dc.b	nRst, $03
000B22E0                            
000B22E0                            ; FM5 Data
000B22E0                            Sound_9F_FM5:
000B22E0 EF00                       	smpsSetvoice        $00
000B22E7 AE13                       	dc.b	nA3, $13
000B22E9 E614                       	smpsFMAlterVol      $14
000B22EB F700 05FF F1               	smpsLoop            $00, $05, Sound_9F_FM5
000B22F0 F2                         	smpsStop
000B22F1                            
000B22F1                            Sound_9F_Voices:
000B22F1                            ;	Voice $00
000B22F1                            ;	$7A
000B22F1                            ;	$1F, $1F, $04, $1F, 	$10, $1F, $18, $10, 	$10, $16, $0C, $00
000B22F1                            ;	$02, $02, $02, $02, 	$2F, $2F, $FF, $3F, 	$42, $16, $11, $80
000B22F1                            	smpsVcAlgorithm     $02
000B22F1                            	smpsVcFeedback      $07
000B22F1                            	smpsVcUnusedBits    $01
000B22F1                            	smpsVcDetune        $01, $00, $01, $01
000B22F1                            	smpsVcCoarseFreq    $0F, $04, $0F, $0F
000B22F1                            	smpsVcRateScale     $00, $00, $00, $00
000B22F1                            	smpsVcAttackRate    $10, $18, $1F, $10
000B22F1                            	smpsVcAmpMod        $00, $00, $00, $00
000B22F1                            	smpsVcDecayRate1    $00, $0C, $16, $10
000B22F1                            	smpsVcDecayRate2    $02, $02, $02, $02
000B22F1                            	smpsVcDecayLevel    $03, $0F, $02, $02
000B22F1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B230A                            
000B230A                            
000B230A                            		even			
000B230A                            		; Don't let Sega sample cross $8000-byte boundary
000B230A                            		; (DAC driver doesn't switch banks automatically)
000B8000                            SegaPCM:	incbin	"sound/dac/sega.pcm"
000BE978                            SegaPCM_End
000BE978                            		even
000BE978                            
000BE978                            
000BE978                            
000BE978                            
000BE978                            			include "_inc\Sonic 2 Options.asm"
000BE978                            ; ---------------------------------------------------------------------------
000BE978                            ; Common menu screen subroutine for transferring text to RAM
000BE978                            
000BE978                            ; ARGUMENTS:
000BE978                            ; d0 = starting art tile
000BE978                            ; a1 = data source
000BE978                            ; a2 = destination
000BE978                            ;
000BE978                            ; ---------------------------------------------------------------------------
000BE978                            MenuScreen:
000BE978 103C 0000                  		move.b	#bgm_Fade,d0
000BE97C 4EB8 12A0                  		jsr	PlaySound_Special ; fade out music
000BE980 4EB8 235A                  		jsr	PaletteFadeOut
000BE984 46FC 2700                  		move	#$2700,sr
000BE988 3038 F60C                  		move.w	($FFFFF60C).w,d0
000BE98C 0200 00BF                  		andi.b	#-$41,d0
000BE990 33C0 00C0 0004             		move.w	d0,($00C00004).l
000BE996 4EB8 11D0                  		jsr	ClearScreen
000BE99A 4DF9 00C0 0004             		lea		($00C00004).l,a6
000BE9A0 3CBC 8004                  		move.w	#$8004,(a6)
000BE9A4 3CBC 8230                  		move.w	#$8230,(a6)
000BE9A8 3CBC 8407                  		move.w	#$8407,(a6)
000BE9AC 3CBC 8230                  		move.w	#$8230,(a6)
000BE9B0 3CBC 8700                  		move.w	#$8700,(a6)
000BE9B4 3CBC 8C81                  		move.w	#$8C81,(a6)
000BE9B8 3CBC 9001                  		move.w	#$9001,(a6)
000BE9BC 43F8 AC00                  		lea	($FFFFAC00).w,a1
000BE9C0 7000                       		moveq	#0,d0
000BE9C2 323C 00FF                  		move.w	#$FF,d1
000BE9C6                            
000BE9C6                            MenuScreen_ClrObjRam:
000BE9C6 22C0                       		move.l	d0,(a1)+
000BE9C8 51C9 FFFC                  		dbf		d1,MenuScreen_ClrObjRam
000BE9CC                            
000BE9CC                            ; ===========================================================================
000BE9CC                            
000BE9CC 31FC C800 C8FC             		ResetDMAQueue
000BE9D2                            
000BE9DC 41F9 0000 0000             		lea		(Nem_MenuFont).l,a0
000BE9E2 4EB8 134E                  		jsr	NemDec
000BE9F0 41F9 0000 0000             		lea		(Nem_MenuBox).l,a0
000BE9F6 4EB8 134E                  		jsr	NemDec
000BE9FA 43F9 00FF 0000             		lea	($FF0000).l,a1
000BEA00 41F9 0000 0000             		lea	(Eni_MenuBg).l,a0 ; load SONIC/MILES mappings
000BEA06 303C 6000                  		move.w	#$6000,d0
000BEA0A 4EB8 18D8                  		jsr	EniDec
000BEA0E                            
000BEA0E 43F9 00FF 0000 203C 6000+  		copyTilemap	$FF0000,$E000,$27,$1B
000BEA22                            
000BEA22 6100 0000                  		bsr.w	MenuScreen_Options	; if yes, branch
000BEA26                            
000BEA26                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000BEA26                            
000BEA26                            ; sub_8FBE:
000BEA26                            MenuScreenTextToRAM:
000BEA26 7200                       		moveq	#0,d1
000BEA28 1219                       		move.b	(a1)+,d1
000BEA2A                            
000BEA2A                            MenuScreenTextToRAM_Cont:
000BEA2A 1019                       		move.b	(a1)+,d0
000BEA2C 34C0                       		move.w	d0,(a2)+
000BEA2E 51C9 FFFA                  		dbf	d1,MenuScreenTextToRAM_Cont
000BEA32 4E75                       		rts
000BEA34                            ; End of function MenuScreenTextToRAM
000BEA34                            
000BEA34                            ; ===========================================================================
000BEA34                            ; loc_8FCC:
000BEA34                            MenuScreen_Options:
000BEA34 43F9 00FF 0000             		lea	(v_256x256).l,a1
000BEA3A 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000BEA40 303C 0070                  		move.w	#$70,d0
000BEA44 4EB8 18D8                  		jsr	EniDec
000BEA48 43F9 00FF 0160             		lea	(v_256x256+$160).l,a1
000BEA4E 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000BEA54 303C 2070                  		move.w	#$2070,d0
000BEA58 4EB8 18D8                  		jsr	EniDec
000BEA5C 4238 FF8C                  		clr.b	(Options_menu_box).w
000BEA60 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000BEA64 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000BEA68 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000BEA6C 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000BEA70 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000BEA74 4238 FF8C                  		clr.b	(Options_menu_box).w
000BEA78 4238 F711                  		clr.b	($FFFFF711).w		
000BEA7C 4278 F7F0                  		clr.w	($FFFFF7F0).w					 
000BEA80                            ;-------------------------------------------------------------------------------
000BEA80 4278 F5B8                  		clr.w	($FFFFF5B8).w
000BEA84 45F9 0000 0000             		lea	(Sonic_Miles_Spr).l,a2 ; sonic/miles background load
000BEA8A 6100 0000                  		bsr.w	Dynamic_Menu
000BEA8E                            ;-------------------------------------------------------------------------------
000BEA8E 7013                       		moveq	#palid_Options,d0
000BEA90 4EB8 2604                  		jsr		PalLoad1
000BEA94 103C 0091                  		move.b	#$91,d0
000BEA98 4EB8 12A0                  		jsr	PlaySound_Special ; play options music
000BEA9C 42B8 F700                  		clr.l	(v_screenposx).w
000BEAA0 42B8 F704                  		clr.l	(v_screenposy).w
000BEAA4 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000BEAAA 4EB8 3C98                  		jsr	WaitForVBla
000BEAAE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000BEAB2 0000 0040                  		ori.b	#$40,d0
000BEAB6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000BEABC 4EB8 22B4                  		jsr	PaletteFadeIn
000BEAC0                            ; loc_9060:
000BEAC0                            OptionScreen_Main:
000BEAC0 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000BEAC6 4EB8 3C98                  		jsr	WaitForVBla				
000BEACA 46FC 2700                  		move	#$2700,sr
000BEACE 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000BEAD2 6100 0000                  		bsr.w	OptionScreen_Controls			
000BEAD6 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000BEADA 46FC 2300                  		move	#$2300,sr
000BEADE 45F9 0000 0000             		lea	(Sonic_Miles_Spr).l,a2 ; sonic/miles background load	
000BEAE4 6100 0000                  		bsr.w	Dynamic_Menu		
000BEAE8 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
000BEAEE                            
000BEAEE 6600                       		bne.s	OptionScreen_Select		; if yes, branch
000BEAF0 60CE                       		bra.s	OptionScreen_Main
000BEAF2                            ; ===========================================================================
000BEAF2                            ; loc_909A:
000BEAF2                            OptionScreen_Select:
000BEAF2 1038 FF8C                  		move.b	(Options_menu_box).w,d0
000BEAF6 6600                       		bne.s	OptionScreen_Select_Not1P
000BEAF8 7000                       		moveq	#0,d0
000BEAFA 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; => SegaScreen
000BEB00 4E75                       		rts
000BEB02                            ; ===========================================================================
000BEB02                            ; loc_90B6:
000BEB02                            OptionScreen_Select_Not1P:
000BEB02 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; => SegaScreen
000BEB08 4E75                       		rts
000BEB0A                            ; ===========================================================================
000BEB0A                            
000BEB0A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000BEB0A                            
000BEB0A                            ;sub_90E0:
000BEB0A                            OptionScreen_Controls:
000BEB0A 7400                       		moveq	#0,d2
000BEB0C 1438 FF8C                  		move.b	(Options_menu_box).w,d2			
000BEB10 1038 F605                  		move.b	(v_jpadpress1).w,d0		; Ctrl_1_Press
000BEB14 0800 0000                  		btst	#0,d0			; is up pressed?
000BEB18 6700                       		beq.s	Option_Controls_Down	; if not, branch
000BEB1A 5302                       		subq.b	#1,d2					; move up 1 selection
000BEB1C 6400                       		bcc.s	Option_Controls_Down
000BEB1E 143C 0001                  		move.b	#1,d2
000BEB22                            
000BEB22                            Option_Controls_Down:
000BEB22 0800 0001                  		btst	#1,d0			; is down pressed?
000BEB26 6700                       		beq.s	Option_Controls_Refresh	; if not, branch
000BEB28 5202                       		addq.b	#1,d2					; move down 1 selection
000BEB2A 0C02 0002                  		cmpi.b	#2,d2
000BEB2E 6500                       		blo.s	Option_Controls_Refresh
000BEB30 7400                       		moveq	#0,d2
000BEB32                            
000BEB32                            Option_Controls_Refresh:
000BEB32 11C2 FF8C                  		move.b	d2,(Options_menu_box).w
000BEB36 E54A                       		lsl.w	#2,d2
000BEB38 163B 2000                  		move.b	OptionScreen_Choices(pc,d2.w),d3 ; number of choices for the option
000BEB3C 227B 2000                  		movea.l	OptionScreen_Choices(pc,d2.w),a1 ; location where the choice is stored (in RAM)
000BEB40 3411                       		move.w	(a1),d2
000BEB42 0800 0002                  		btst	#2,d0				; is left pressed?
000BEB46 6700                       		beq.s	Option_Controls_Right		; if not, branch
000BEB48 5302                       		subq.b	#1,d2						; subtract 1 from sound test
000BEB4A 6400                       		bcc.s	Option_Controls_Right
000BEB4C 1403                       		move.b	d3,d2
000BEB4E                            
000BEB4E                            Option_Controls_Right:
000BEB4E 0800 0003                  		btst	#3,d0			; is right pressed?
000BEB52 6700                       		beq.s	Option_Controls_Button_A	; if not, branch
000BEB54 5202                       		addq.b	#1,d2						; add 1 to sound test
000BEB56 B403                       		cmp.b	d3,d2
000BEB58 6300                       		bls.s	Option_Controls_Button_A
000BEB5A 7400                       		moveq	#0,d2
000BEB5C                            
000BEB5C                            Option_Controls_Button_A:
000BEB5C 0800 0006                  		btst	#6,d0				; is button A pressed?
000BEB60 6700                       		beq.s	Option_Controls_Refresh2	; if not, branch
000BEB62 0602 0010                  		addi.b	#$10,d2						; add $10 to sound test
000BEB66 B403                       		cmp.b	d3,d2
000BEB68 6300                       		bls.s	Option_Controls_Refresh2
000BEB6A 7400                       		moveq	#0,d2
000BEB6C                            
000BEB6C                            Option_Controls_Refresh2:
000BEB6C 3282                       		move.w	d2,(a1)
000BEB6E                            
000BEB6E                            Option_Controls_NoMove:
000BEB6E 4E75                       		rts
000BEB70                            ; End of function OptionScreen_Controls
000BEB70                            
000BEB70                            ; ===========================================================================
000BEB70                            ; word_917A:
000BEB70                            OptionScreen_Choices:
000BEB70 0AFF FFBE                  		dc.l ($B-1)<<24|($FFFFBE&$FFFFFF)
000BEB74 01FF FF8A                  		dc.l (2-1)<<24|($FFFF8A&$FFFFFF)
000BEB78                            		even
000BEB78                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000BEB78                            
000BEB78                            
000BEB78                            OptionScreen_DrawSelected:
000BEB78 6100 0000                  		bsr.w	loc_9268
000BEB7C 7200                       		moveq	#0,d1
000BEB7E 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEB82 E749                       		lsl.w	#3,d1
000BEB84 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000BEB8A 47F3 1000                  		lea	(a3,d1.w),a3
000BEB8E 303C 6000                  		move.w	#$6000,d0
000BEB92 45F9 FFFF 0030             		lea	($FFFF0030).l,a2
000BEB98 225B                       		movea.l	(a3)+,a1
000BEB9A 6100 FE8A                  		bsr.w	MenuScreenTextToRAM
000BEB9E 45F9 FFFF 00B6             		lea	($FFFF00B6).l,a2
000BEBA4 7200                       		moveq	#0,d1
000BEBA6 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEBAA E549                       		lsl.w	#2,d1
000BEBAC 43FA FFC2                  		lea	OptionScreen_Choices(pc),a1
000BEBB0 2271 1000                  		movea.l	(a1,d1.w),a1
000BEBB4 3211                       		move.w	(a1),d1
000BEBB6 E549                       		lsl.w	#2,d1
000BEBB8                            
000BEBB8                            loc_9186:		
000BEBB8 2274 1000                  		movea.l	(a4,d1.w),a1
000BEBBC 6100 FE68                  		bsr.w	MenuScreenTextToRAM
000BEBC0                            		;cmpi.b	#2,(Options_menu_box).w
000BEBC0                            		;bne.s	loc2_9186
000BEBC0                            		;lea	($FFFF00C2).l,a2
000BEBC0                            		;bsr.w	loc_9296
000BEBC0                            
000BEBC0                            loc2_9186:		
000BEBC0 43F9 00FF 0000             		lea	(v_256x256).l,a1
000BEBC6 201B                       		move.l	(a3)+,d0
000BEBC8 7215                       		moveq	#$15,d1
000BEBCA 7407                       		moveq	#7,d2
000BEBCC 4EF8 1324                  		jmp	TilemapToVRAM
000BEBD0                            ; ===========================================================================
000BEBD0                            
000BEBD0                            OptionScreen_DrawUnselected:
000BEBD0 6100 0000                  		bsr.w	loc_9268
000BEBD4 7200                       		moveq	#0,d1
000BEBD6 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEBDA E749                       		lsl.w	#3,d1
000BEBDC 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000BEBE2 47F3 1000                  		lea	(a3,d1.w),a3
000BEBE6 7000                       		moveq	#0,d0
000BEBE8 45F9 FFFF 0190             		lea	($FFFF0190).l,a2
000BEBEE 225B                       		movea.l	(a3)+,a1
000BEBF0 6100 FE34                  		bsr.w	MenuScreenTextToRAM
000BEBF4 45F9 FFFF 0216             		lea	($FFFF0216).l,a2
000BEBFA 7200                       		moveq	#0,d1
000BEBFC                            		;cmpi.b	#2,(Options_menu_box).w
000BEBFC                            		;beq.s	loc2_91F8
000BEBFC 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEC00 E549                       		lsl.w	#2,d1
000BEC02 43FA FF6C                  		lea	OptionScreen_Choices(pc),a1
000BEC06 2271 1000                  		movea.l	(a1,d1.w),a1
000BEC0A 3211                       		move.w	(a1),d1
000BEC0C E549                       		lsl.w	#2,d1
000BEC0E                            
000BEC0E                            loc2_91F8		
000BEC0E 2274 1000                  		movea.l	(a4,d1.w),a1
000BEC12 6100 FE12                  		bsr.w	MenuScreenTextToRAM
000BEC16                            		;cmpi.b	#2,(Options_menu_box).w
000BEC16                            		;bne.s	loc3_91F8
000BEC16                            		;lea	($FFFF0222).l,a2
000BEC16                            		;bsr.w	loc_9296
000BEC16                            
000BEC16                            loc3_91F8		
000BEC16 43F9 FFFF 0160             		lea	($FFFF0160).l,a1
000BEC1C 201B                       		move.l	(a3)+,d0
000BEC1E 7215                       		moveq	#$15,d1
000BEC20 7407                       		moveq	#7,d2
000BEC22 4EF8 1324                  		jmp	TilemapToVRAM
000BEC26                            ; ===========================================================================
000BEC26                            
000BEC26                            loc_9268:
000BEC26 49F9 0000 0000             		lea	(off_92D2).l,a4
000BEC2C 4A38 FFF8                  		tst.b	(v_megadrive).w
000BEC30 6A00                       		bpl.s	loc2_9268
000BEC32 49F9 0000 0000             		lea	(off_92DE).l,a4
000BEC38                            
000BEC38                            loc2_9268:
000BEC38 4A38 FF8C                  		tst.b	(Options_menu_box).w
000BEC3C 6700                       		beq.s	loc4_9268
000BEC3E 49F9 0000 0000             		lea	(off_92EA).l,a4
000BEC44                            
000BEC44                            loc4_9268:
000BEC44 4E75                       		rts
000BEC46                            ; ===========================================================================
000BEC46                            
000BEC46                            loc_9296:
000BEC46 4E75                       		rts
000BEC48                            
000BEC48                            Dynamic_Menu:
000BEC48 5338 F5B9                                  subq.b  #$01, ($FFFFF5B9).w          ; remove 1 from frame count
000BEC4C 6A00                                       bpl.s   Exit_Dinamic_Menu            ; exit menu
000BEC4E 11FC 0007 F5B9                             move.b  #$07, ($FFFFF5B9).w          ; Set time for frame display
000BEC54 1038 F5B8                                  move.b  ($FFFFF5B8).w, D0            ; Current Frame D0
000BEC58 5238 F5B8                                  addq.b  #$01, ($FFFFF5B8).w          ; Advance frame $FFFFFFB8
000BEC5C 0240 001F                                  andi.w  #$001F, D0
000BEC60 103B 0000                                  move.b  Sonic_Miles_Frame_Select(PC, D0), D0  ; Id frame D0
000BEC64                                          ; muls.w  #$0140, D0                   ; as above
000BEC64 ED48                                       lsl.w   #$06, D0
000BEC66 4DF9 00C0 0000                             lea     ($00C00000), A6
000BEC6C 2D7C 4020 0000 0004                        move.l  #$40200000, $0004(A6)
000BEC74 43F9 0000 0000                             lea     (Sonic_Miles_Spr), A1
000BEC7A 43F1 0000                                  lea     $00(A1, D0), A1
000BEC7E 303C 0009                                  move.w  #$0009, D0                   ; load tiles
000BEC82                                            
000BEC82                            Menu_Loop_Load_Tiles:
000BEC82 2C99                                       move.l  (A1)+, (A6)
000BEC84 2C99                                       move.l  (A1)+, (A6)     
000BEC86 2C99                                       move.l  (A1)+, (A6)     
000BEC88 2C99                                       move.l  (A1)+, (A6)     
000BEC8A 2C99                                       move.l  (A1)+, (A6)     
000BEC8C 2C99                                       move.l  (A1)+, (A6)
000BEC8E 2C99                                       move.l  (A1)+, (A6)
000BEC90 2C99                                       move.l  (A1)+, (A6)
000BEC92 51C8 FFEE                                  dbra    D0, Menu_Loop_Load_Tiles
000BEC96                            Exit_Dinamic_Menu:                
000BEC96                                           
000BEC96 4E75                                       rts      
000BEC98                                                    
000BEC98                            Sonic_Miles_Frame_Select:     
000BEC98 0000 0000 0000 0000 0000+                  dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
000BECA6 050A                                       dc.b    $05, $0A
000BECA8 0F0F 0F0F 0F0F 0F0F 0F0F+                  dc.b    $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F
000BECB6 0A05                                       dc.b    $0A, $05   
000BECB8                            ; ===========================================================================
000BECB8                            ; off_92BA:
000BECB8                            OptScrBoxData:
000BECB8                            
000BECB8 0000 0000                  		dc.l TextOptScr_PlayerSelect
000BECBC 4192                       		dc.w $4192
000BECBE 0003                       		dc.w 3
000BECC0 0000 0000                  		dc.l TextOptScr_LivesSystem
000BECC4 4592                       		dc.w $4592
000BECC6 0003                       		dc.w 3
000BECC8                            
000BECC8                            off_92D2:
000BECC8 0000 0000                  		dc.l TextOptScr_Default
000BECCC 0000 0000                  		dc.l TextOptScr_Original
000BECD0 0000 0000                  		dc.l TextOptScr_Beta
000BECD4 0000 0000                  		dc.l TextOptScr_Midnight
000BECD8 0000 0000                  		dc.l TextOptScr_C2
000BECDC 0000 0000                  		dc.l TextOptScr_Clackers
000BECE0 0000 0000                  		dc.l TextOptScr_RHS
000BECE4 0000 0000                  		dc.l TextOptScr_Socket
000BECE8 0000 0000                  		dc.l TextOptScr_Cringe
000BECEC 0000 0000                  		dc.l TextOptScr_Dark	
000BECF0 0000 0000                  		dc.l TextOptScr_DeltaWooloo			
000BECF4                            off_92DE:
000BECF4 0000 0000                  		dc.l TextOptScr_Default
000BECF8 0000 0000                  		dc.l TextOptScr_Original
000BECFC 0000 0000                  		dc.l TextOptScr_Beta
000BED00 0000 0000                  		dc.l TextOptScr_Midnight
000BED04 0000 0000                  		dc.l TextOptScr_C2
000BED08 0000 0000                  		dc.l TextOptScr_Clackers
000BED0C 0000 0000                  		dc.l TextOptScr_RHS
000BED10 0000 0000                  		dc.l TextOptScr_Socket
000BED14 0000 0000                  		dc.l TextOptScr_Cringe
000BED18 0000 0000                  		dc.l TextOptScr_Dark
000BED1C 0000 0000                  		dc.l TextOptScr_DeltaWooloo		
000BED20                            off_92EA:
000BED20 0000 0000                  		dc.l TextOptScr_On
000BED24 0000 0000                  		dc.l TextOptScr_Off
000BED28                            ; ===========================================================================
000BED28                            
000BEE20                            ; ============================================================================
000BEE20                            		even
000BEE20                            Sonic_Miles_Spr:	incbin  "artunc/Sonic and Miles text.bin"
000BF320                            		even
000BF320                            Eni_MenuBg:    incbin    "tilemaps/menubgeni.bin"
000BF4D0                            		even
000BF4D0                            Nem_MenuFont:    incbin    "artnem/Standard font.bin"
000BFA3A                            		even
000BFA3A                            Nem_MenuBox:    incbin   "artnem/Menu Box.bin"
000BFABA                            		even
000BFABA                            Eni_MenuBox:    incbin    "tilemaps/menuboxeni.bin"
000BFAE6                            		even
000BFAE6                            		even
000BFAE6                            
000BFAE6                            SHC2022:    incbin "SHC22_Full_Sonic12.bin"
0013D36A                                        even
0013D36A                            
0013D36A                            Art_Dust:	incbin	artunc\spindust.bin
0013ECAA                            
0013ECAA                            ; ===============================================================
0013ECAA                            ; ==============================================================
0013ECAA                            ; --------------------------------------------------------------
0013ECAA                            ; Debugging modules
0013ECAA                            ; --------------------------------------------------------------
0013ECAA                            
0013ECAA                               include   "ErrorHandler.asm"
0013ECAA                            
0013ECAA                            ; ===============================================================
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            ; Error handling and debugging modules
0013ECAA                            ; 2016-2017, Vladikcomper
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            ; Error handler functions and calls
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            ; Error handler control flags
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            
0013ECAA                            ; Screen appearence flags
0013ECAA =00000001                  _eh_address_error	equ	$01		; use for address and bus errors only (tells error handler to display additional "Address" field)
0013ECAA =00000002                  _eh_show_sr_usp		equ	$02		; displays SR and USP registers content on error screen
0013ECAA =00000010                  _eh_disassemble		equ	$10		; disassembles the instruction where the error happened + vint and hint handlers
0013ECAA                            
0013ECAA                            ; Advanced execution flags
0013ECAA                            ; WARNING! For experts only, DO NOT USES them unless you know what you're doing
0013ECAA =00000020                  _eh_return		equ	$20
0013ECAA =00000040                  _eh_enter_console	equ	$40
0013ECAA =00000080                  _eh_align_offset	equ	$80
0013ECAA                            
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            ; Errors vector table
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            
0013ECAA                            ; Default screen configuration
0013ECAA =00000000                  _eh_default			equ	0 ;_eh_show_sr_usp
0013ECAA                            
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            
0013ECAA                            BusError:
0013ECAA 4EB9 0000 0000 4255 5320+  	__ErrorMessage "BUS ERROR", _eh_default|_eh_address_error|_eh_disassemble
0013ECBC                            
0013ECBC                            AddressError:
0013ECBC 4EB9 0000 0000 4144 4452+  	__ErrorMessage "ADDRESS ERROR", _eh_default|_eh_address_error|_eh_disassemble
0013ECD2                            
0013ECD2                            IllegalInstr:
0013ECD2 4EB9 0000 0000 494C 4C45+  	__ErrorMessage "ILLEGAL INSTRUCTION", _eh_default|_eh_disassemble
0013ECEE                            
0013ECEE                            ZeroDivide:
0013ECEE 4EB9 0000 0000 5A45 524F+  	__ErrorMessage "ZERO DIVIDE", _eh_default|_eh_disassemble
0013ED02                            
0013ED02                            ChkInstr:
0013ED02 4EB9 0000 0000 4348 4B20+  	__ErrorMessage "CHK INSTRUCTION", _eh_default|_eh_disassemble
0013ED1A                            
0013ED1A                            TrapvInstr:
0013ED1A 4EB9 0000 0000 5452 4150+  	__ErrorMessage "TRAPV INSTRUCTION", _eh_default|_eh_disassemble
0013ED34                            
0013ED34                            PrivilegeViol:
0013ED34 4EB9 0000 0000 5052 4956+  	__ErrorMessage "PRIVILEGE VIOLATION", _eh_default|_eh_disassemble
0013ED50                            
0013ED50                            Trace:
0013ED50 4EB9 0000 0000 5452 4143+  	__ErrorMessage "TRACE", _eh_default|_eh_disassemble
0013ED5E                            
0013ED5E                            Line1010Emu:
0013ED5E 4EB9 0000 0000 4C49 4E45+  	__ErrorMessage "LINE A EMULATOR", _eh_default|_eh_disassemble
0013ED76                            
0013ED76                            Line1111Emu:
0013ED76 4EB9 0000 0000 4C49 4E45+  	__ErrorMessage "LINE F EMULATOR", _eh_default|_eh_disassemble
0013ED8E                            
0013ED8E                            ErrorExcept:
0013ED8E 4EB9 0000 0000 4552 524F+  	__ErrorMessage "ERROR EXCEPTION", _eh_default|_eh_disassemble
0013EDA6                            
0013EDA6                            ; ---------------------------------------------------------------
0013EDA6                            ; Import error handler global functions
0013EDA6                            ; ---------------------------------------------------------------
0013EDA6                            
0013EDA6                            ErrorHandler.__global__error_initconsole equ ErrorHandler+$158
0013EDA6                            ErrorHandler.__global__errorhandler_setupvdp equ ErrorHandler+$25C
0013EDA6                            ErrorHandler.__global__console_loadpalette equ ErrorHandler+$AE2
0013EDA6                            ErrorHandler.__global__console_setposasxy_stack equ ErrorHandler+$B1E
0013EDA6                            ErrorHandler.__global__console_setposasxy equ ErrorHandler+$B24
0013EDA6                            ErrorHandler.__global__console_getposasxy equ ErrorHandler+$B50
0013EDA6                            ErrorHandler.__global__console_startnewline equ ErrorHandler+$B72
0013EDA6                            ErrorHandler.__global__console_setbasepattern equ ErrorHandler+$B9A
0013EDA6                            ErrorHandler.__global__console_setwidth equ ErrorHandler+$BAE
0013EDA6                            ErrorHandler.__global__console_writeline_withpattern equ ErrorHandler+$BC4
0013EDA6                            ErrorHandler.__global__console_writeline equ ErrorHandler+$BC6
0013EDA6                            ErrorHandler.__global__console_write equ ErrorHandler+$BCA
0013EDA6                            ErrorHandler.__global__console_writeline_formatted equ ErrorHandler+$C76
0013EDA6                            ErrorHandler.__global__console_write_formatted equ ErrorHandler+$C7A
0013EDA6                            ErrorHandler.__global__decode68k equ ErrorHandler+$CE6
0013EDA6                            
0013EDA6                            ; ---------------------------------------------------------------
0013EDA6                            ; Error handler external functions (compiled only when used)
0013EDA6                            ; ---------------------------------------------------------------
0013EDA6                            
0013EDA6                            
0013EDA6                            
0013EDA6                            
0013EDA6                            
0013EDA6                            ; ---------------------------------------------------------------
0013EDA6                            ; Include error handler binary module
0013EDA6                            ; ---------------------------------------------------------------
0013EDA6                            
0013EDA6                            ErrorHandler:
0013EDA6                            	incbin	ErrorHandler.bin
001407BA                            
001407BA                            ; ---------------------------------------------------------------
001407BA                            ; WARNING!
001407BA                            ;	DO NOT put any data from now on! DO NOT use ROM padding!
001407BA                            ;	Symbol data should be appended here after ROM is compiled
001407BA                            ;	by ConvSym utility, otherwise debugger modules won't be able
001407BA                            ;	to resolve symbol names.
001407BA                            ; ---------------------------------------------------------------
001407BA                            ; ---------------------------------------------------------------
001407BA                            
001407BA                            ; end of 'ROM'
001407BA                            		even
001407BA                            EndOfRom:
001407BA                            
001407BA                            
