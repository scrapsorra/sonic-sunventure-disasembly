00000000                            ;  =========================================================================
00000000                            ; |           Sonic the Hedgehog Disassembly for Sega Mega Drive            |
00000000                            ;  =========================================================================
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx, Stealth and Esrael L.G. Neto
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            	include	"_s1smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000001                  SourceDriver = 1 ; Please don't modify the value.
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000 =0000000C                  psgdelta	EQU 12
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =00000088                  smpsPitch10lo	EQU $88
00000000 =00000094                  smpsPitch09lo	EQU $94
00000000 =000000A0                  smpsPitch08lo	EQU $A0
00000000 =000000AC                  smpsPitch07lo	EQU $AC
00000000 =000000B8                  smpsPitch06lo	EQU $B8
00000000 =000000C4                  smpsPitch05lo	EQU $C4
00000000 =000000D0                  smpsPitch04lo	EQU $D0
00000000 =000000DC                  smpsPitch03lo	EQU $DC
00000000 =000000E8                  smpsPitch02lo	EQU $E8
00000000 =000000F4                  smpsPitch01lo	EQU $F4
00000000 =00000000                  smpsPitch00		EQU $00
00000000 =0000000C                  smpsPitch01hi	EQU $0C
00000000 =00000018                  smpsPitch02hi	EQU $18
00000000 =00000024                  smpsPitch03hi	EQU $24
00000000 =00000030                  smpsPitch04hi	EQU $30
00000000 =0000003C                  smpsPitch05hi	EQU $3C
00000000 =00000048                  smpsPitch06hi	EQU $48
00000000 =00000054                  smpsPitch07hi	EQU $54
00000000 =00000060                  smpsPitch08hi	EQU $60
00000000 =0000006C                  smpsPitch09hi	EQU $6C
00000000 =00000078                  smpsPitch10hi	EQU $78
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst		EQU	$80
00000000 =00000081                  nC0			EQU	$81
00000000 =00000082                  nCs0		EQU	$82
00000000 =00000083                  nD0			EQU	$83
00000000 =00000084                  nEb0		EQU	$84
00000000 =00000085                  nE0			EQU	$85
00000000 =00000086                  nF0			EQU	$86
00000000 =00000087                  nFs0		EQU	$87
00000000 =00000088                  nG0			EQU	$88
00000000 =00000089                  nAb0		EQU	$89
00000000 =0000008A                  nA0			EQU	$8A
00000000 =0000008B                  nBb0		EQU	$8B
00000000 =0000008C                  nB0			EQU	$8C
00000000 =0000008D                  nC1			EQU	$8D
00000000 =0000008E                  nCs1		EQU	$8E
00000000 =0000008F                  nD1			EQU	$8F
00000000 =00000090                  nEb1		EQU	$90
00000000 =00000091                  nE1			EQU	$91
00000000 =00000092                  nF1			EQU	$92
00000000 =00000093                  nFs1		EQU	$93
00000000 =00000094                  nG1			EQU	$94
00000000 =00000095                  nAb1		EQU	$95
00000000 =00000096                  nA1			EQU	$96
00000000 =00000097                  nBb1		EQU	$97
00000000 =00000098                  nB1			EQU	$98
00000000 =00000099                  nC2			EQU	$99
00000000 =0000009A                  nCs2		EQU	$9A
00000000 =0000009B                  nD2			EQU	$9B
00000000 =0000009C                  nEb2		EQU	$9C
00000000 =0000009D                  nE2			EQU	$9D
00000000 =0000009E                  nF2			EQU	$9E
00000000 =0000009F                  nFs2		EQU	$9F
00000000 =000000A0                  nG2			EQU	$A0
00000000 =000000A1                  nAb2		EQU	$A1
00000000 =000000A2                  nA2			EQU	$A2
00000000 =000000A3                  nBb2		EQU	$A3
00000000 =000000A4                  nB2			EQU	$A4
00000000 =000000A5                  nC3			EQU	$A5
00000000 =000000A6                  nCs3		EQU	$A6
00000000 =000000A7                  nD3			EQU	$A7
00000000 =000000A8                  nEb3		EQU	$A8
00000000 =000000A9                  nE3			EQU	$A9
00000000 =000000AA                  nF3			EQU	$AA
00000000 =000000AB                  nFs3		EQU	$AB
00000000 =000000AC                  nG3			EQU	$AC
00000000 =000000AD                  nAb3		EQU	$AD
00000000 =000000AE                  nA3			EQU	$AE
00000000 =000000AF                  nBb3		EQU	$AF
00000000 =000000B0                  nB3			EQU	$B0
00000000 =000000B1                  nC4			EQU	$B1
00000000 =000000B2                  nCs4		EQU	$B2
00000000 =000000B3                  nD4			EQU	$B3
00000000 =000000B4                  nEb4		EQU	$B4
00000000 =000000B5                  nE4			EQU	$B5
00000000 =000000B6                  nF4			EQU	$B6
00000000 =000000B7                  nFs4		EQU	$B7
00000000 =000000B8                  nG4			EQU	$B8
00000000 =000000B9                  nAb4		EQU	$B9
00000000 =000000BA                  nA4			EQU	$BA
00000000 =000000BB                  nBb4		EQU	$BB
00000000 =000000BC                  nB4			EQU	$BC
00000000 =000000BD                  nC5			EQU	$BD
00000000 =000000BE                  nCs5		EQU	$BE
00000000 =000000BF                  nD5			EQU	$BF
00000000 =000000C0                  nEb5		EQU	$C0
00000000 =000000C1                  nE5			EQU	$C1
00000000 =000000C2                  nF5			EQU	$C2
00000000 =000000C3                  nFs5		EQU	$C3
00000000 =000000C4                  nG5			EQU	$C4
00000000 =000000C5                  nAb5		EQU	$C5
00000000 =000000C6                  nA5			EQU	$C6
00000000 =000000C7                  nBb5		EQU	$C7
00000000 =000000C8                  nB5			EQU	$C8
00000000 =000000C9                  nC6			EQU	$C9
00000000 =000000CA                  nCs6		EQU	$CA
00000000 =000000CB                  nD6			EQU	$CB
00000000 =000000CC                  nEb6		EQU	$CC
00000000 =000000CD                  nE6			EQU	$CD
00000000 =000000CE                  nF6			EQU	$CE
00000000 =000000CF                  nFs6		EQU	$CF
00000000 =000000D0                  nG6			EQU	$D0
00000000 =000000D1                  nAb6		EQU	$D1
00000000 =000000D2                  nA6			EQU	$D2
00000000 =000000D3                  nBb6		EQU	$D3
00000000 =000000D4                  nB6			EQU	$D4
00000000 =000000D5                  nC7			EQU	$D5
00000000 =000000D6                  nCs7		EQU	$D6
00000000 =000000D7                  nD7			EQU	$D7
00000000 =000000D8                  nEb7		EQU	$D8
00000000 =000000D9                  nE7			EQU	$D9
00000000 =000000DA                  nF7			EQU	$DA
00000000 =000000DB                  nFs7		EQU	$DB
00000000 =000000DC                  nG7			EQU	$DC
00000000 =000000DD                  nAb7		EQU	$DD
00000000 =000000DE                  nA7			EQU	$DE
00000000 =000000DF                  nBb7		EQU	$DF
00000000                            ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
00000000                            ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
00000000                            ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
00000000                            ; and ensure that the ending note is indeed the maximum PSG frequency.
00000000 =000000C6                  nMaxPSG				EQU nA5
00000000 =000000D2                  nMaxPSG1			EQU nA5+psgdelta
00000000 =000000D2                  nMaxPSG2			EQU nA5+psgdelta
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG Flutter Equates
00000000 =00000000                  fTone_00	EQU	$00
00000000 =00000001                  fTone_01	EQU	$01
00000000 =00000002                  fTone_02	EQU	$02
00000000 =00000003                  fTone_03	EQU	$03
00000000 =00000004                  fTone_04	EQU	$04
00000000 =00000005                  fTone_05	EQU	$05
00000000 =00000006                  fTone_06	EQU	$06
00000000 =00000007                  fTone_07	EQU	$07
00000000 =00000008                  fTone_08	EQU	$08
00000000 =00000009                  fTone_09	EQU	$09
00000000 =00000007                  fTone_0A	EQU	$07
00000000 =00000005                  fTone_0B	EQU	$05
00000000 =00000000                  fTone_0C	EQU	$00
00000000                            ;fTone_0D	EQU	$00
00000000 =00000002                  sTone_01	EQU	$02
00000000 =00000002                  sTone_02	EQU	$02
00000000 =00000005                  sTone_03	EQU	$05
00000000 =00000003                  sTone_04	EQU	$03
00000000 =00000001                  sTone_05	EQU	$01
00000000 =00000003                  sTone_06	EQU	$03
00000000 =00000000                  sTone_07	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_08	EQU	$09
00000000 =00000005                  sTone_09	EQU	$05
00000000 =00000007                  sTone_0A	EQU	$07
00000000 =00000000                  sTone_0B	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_0C	EQU	$09
00000000 =00000000                  sTone_0D	EQU	$00	; This time it matches 100%
00000000 =00000002                  sTone_0E	EQU	$02	; Duplicate of 01
00000000 =00000002                  sTone_0F	EQU	$02	; Duplicate of 02
00000000 =00000000                  sTone_10	EQU	$00
00000000 =00000006                  sTone_11	EQU	$06
00000000 =00000001                  sTone_12	EQU	$01	; Duplicate of 05
00000000 =00000003                  sTone_13	EQU	$03	; Duplicate of 06
00000000 =00000000                  sTone_14	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_15	EQU	$09	; Duplicate of 08
00000000 =00000005                  sTone_16	EQU	$05	; Duplicate of 09
00000000 =00000007                  sTone_17	EQU	$07	; Duplicate of 0A
00000000 =00000000                  sTone_18	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_19	EQU	$09	; Duplicate of 0C
00000000 =00000002                  sTone_1A	EQU	$02
00000000 =00000009                  sTone_1B	EQU	$09	; Duplicate of 0C
00000000 =00000006                  sTone_1C	EQU	$06
00000000 =00000007                  sTone_1D	EQU	$07
00000000 =00000002                  sTone_1E	EQU	$02
00000000 =00000004                  sTone_1F	EQU	$04
00000000 =00000000                  sTone_20	EQU	$00	; This time it matches 100%
00000000 =00000009                  sTone_21	EQU	$09
00000000 =00000004                  sTone_22	EQU	$04
00000000 =00000007                  sTone_23	EQU	$07
00000000 =00000002                  sTone_24	EQU	$02
00000000 =00000009                  sTone_25	EQU	$09
00000000 =00000007                  sTone_26	EQU	$07
00000000 =00000003                  sTone_27	EQU	$03
00000000                            ;sTone_28	EQU	$09
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick equ $81
00000000 =00000082                  dSnare equ $82
00000000 =00000085                  dCrashCymbal equ $85
00000000 =00000088                  dHiTimpani equ $88
00000000 =00000089                  dMidTimpani equ $89
00000000 =0000008A                  dLowTimpani equ $8A
00000000 =0000008B                  dFloorTimpani equ $8B
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Conversion macros and functions
00000000                            
00000000                            ;conv0To256  macro val 
00000000                            	;if val<$01
00000000                            		;dc.b (256-val+$FF)&$FF
00000000                            	;else	
00000000                            		;dc.b (256-val)&$FF	
00000000                            	;endc
00000000                            	;endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000                            smpsHeaderStartSong macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderStartSongConvert macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro div,mod
00000000                            	dc.b	div
00000000                            tempoDivider set div
00000000                            	dc.b    mod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if (narg=2)
00000000                            		dc.b	pitch
00000000                            		if (narg=3)
00000000                            			dc.b	vol
00000000                            		else
00000000                            			dc.b	$00
00000000                            		endif
00000000                            	else
00000000                            		dc.w	$00
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
00000000                            	endif
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	if (chanid&$80)<>0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            smpsDetune macro val
00000000                            	dc.b		$E1, val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000 =000000E6                  sVol	EQU $E6
00000000                            
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000 =000000E7                  smpsNA	EQU smpsNoAttack
00000000 =000000E7                  sNA	EQU smpsNoAttack
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            	dc.b	$E8,val
00000000                            	endm
00000000                            
00000000                            ; Add xx to channel pitch
00000000                            smpsAlterPitch macro val
00000000                            	dc.b	$E9,val
00000000                            	endm
00000000                            
00000000                            smpsChangeTransposition macro val
00000000                            	if SourceDriver>=3
00000000                            		dc.b	$FF,val
00000000                            	else
00000000                            		dc.b	$E9,val
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro val
00000000                            	dc.b	$EA
00000000                            	dc.b    val
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000 =000000EC                  spVol	EQU $EC
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            	dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; EFxx - Set Voice of FM channel to xx
00000000                            smpsFMvoice macro voice
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	wait+1,speed,change,(step*speed-1)&$FF
00000000                            	else
00000000                            		dc.b	wait,speed,change,step
00000000                            	endif
00000000                            	;dc.b	speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	dc.b	$E6,val1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; S1/S2 only coordination flag
00000000                            ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
00000000                            smpsWeirdD1LRR macro
00000000                            	dc.b	$F9
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set op1
00000000                            vcDT2 set op2
00000000                            vcDT3 set op3
00000000                            vcDT4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set op1
00000000                            vcCF2 set op2
00000000                            vcCF3 set op3
00000000                            vcCF4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set op1
00000000                            vcRS2 set op2
00000000                            vcRS3 set op3
00000000                            vcRS4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set op1
00000000                            vcAR2 set op2
00000000                            vcAR3 set op3
00000000                            vcAR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set op1
00000000                            vcAM2 set op2
00000000                            vcAM3 set op3
00000000                            vcAM4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set op1
00000000                            vcD1R2 set op2
00000000                            vcD1R3 set op3
00000000                            vcD1R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set op1
00000000                            vcD2R2 set op2
00000000                            vcD2R3 set op3
00000000                            vcD2R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set op1
00000000                            vcDL2 set op2
00000000                            vcDL3 set op3
00000000                            vcDL4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set op1
00000000                            vcRR2 set op2
00000000                            vcRR3 set op3
00000000                            vcRR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set op1
00000000                            vcTL2 set op2
00000000                            vcTL3 set op3
00000000                            vcTL4 set op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            	dc.b	(vcDT4<<4)+vcCF4, (vcDT3<<4)+vcCF3, (vcDT2<<4)+vcCF2, (vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4, (vcRS3<<6)+vcAR3, (vcRS2<<6)+vcAR2, (vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4, (vcAM3<<5)+vcD1R3, (vcAM2<<5)+vcD1R2, (vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4, vcD2R3, vcD2R2, vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4, (vcDL3<<4)+vcRR3, (vcDL2<<4)+vcRR2, (vcDL1<<4)+vcRR1
00000000                            	;dc.b	vcTL4|vcTLMask4, vcTL3|vcTLMask3, vcTL2|vcTLMask2, vcTL1|vcTLMask1
00000000                            	if vcAlgorithm=7
00000000                            		dc.b	op4|$80
00000000                            	else
00000000                            		dc.b	op4
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=4
00000000                            		dc.b    op3|$80
00000000                            	else
00000000                            		dc.b    op3
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=5
00000000                            		dc.b    op2|$80
00000000                            	else
00000000                            		dc.b    op2
00000000                            	endif
00000000                            		dc.b    op1|$80
00000000                            	endm
00000000                            
00000000                            
00000000                            	include	"Constants.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00006978                  Size_of_SegaPCM:		equ $6978
00000000                            
00000000                            ; VDP addressses
00000000 =00C00000                  vdp_data_port:		equ $C00000
00000000 =00C00004                  vdp_control_port:	equ $C00004
00000000 =00C00008                  vdp_counter:		equ $C00008
00000000                            
00000000 =00C00011                  psg_input:		equ $C00011
00000000                            
00000000                            ; Z80 addresses
00000000 =00A00000                  z80_ram:		equ $A00000	; start of Z80 RAM
00000000 =00A000EA                  z80_dac3_pitch:		equ $A000EA
00000000 =00A01FFD                  z80_dac_status:		equ $A01FFD
00000000 =00A01FFF                  z80_dac_sample:		equ $A01FFF
00000000 =00A02000                  z80_ram_end:		equ $A02000	; end of non-reserved Z80 RAM
00000000 =00A10001                  z80_version:		equ $A10001
00000000 =00A10002                  z80_port_1_data:	equ $A10002
00000000 =00A10008                  z80_port_1_control:	equ $A10008
00000000 =00A1000A                  z80_port_2_control:	equ $A1000A
00000000 =00A1000C                  z80_expansion_control:	equ $A1000C
00000000 =00A11100                  z80_bus_request:	equ $A11100
00000000 =00A11200                  z80_reset:		equ $A11200
00000000 =00A04000                  ym2612_a0:		equ $A04000
00000000 =00A04001                  ym2612_d0:		equ $A04001
00000000 =00A04002                  ym2612_a1:		equ $A04002
00000000 =00A04003                  ym2612_d1:		equ $A04003
00000000                            
00000000 =00A14000                  security_addr:		equ $A14000
00000000                            
00000000                            ; Sound driver constants
00000000 =00000000                  TrackPlaybackControl:	equ 0		; All tracks
00000000 =00000001                  TrackVoiceControl:	equ 1		; All tracks
00000000 =00000002                  TrackTempoDivider:	equ 2		; All tracks
00000000 =00000004                  TrackDataPointer:	equ 4		; All tracks (4 bytes)
00000000 =00000008                  TrackTranspose:		equ 8		; FM/PSG only (sometimes written to as a word, to include TrackVolume)
00000000 =00000009                  TrackVolume:		equ 9		; FM/PSG only
00000000 =0000000A                  TrackAMSFMSPan:		equ $A		; FM/DAC only
00000000 =0000000B                  TrackVoiceIndex:	equ $B		; FM/PSG only
00000000 =0000000C                  TrackVolEnvIndex:	equ $C		; PSG only
00000000 =0000000D                  TrackStackPointer:	equ $D		; All tracks
00000000 =0000000E                  TrackDurationTimeout:	equ $E		; All tracks
00000000 =0000000F                  TrackSavedDuration:	equ $F		; All tracks
00000000 =00000010                  TrackSavedDAC:		equ $10		; DAC only
00000000 =00000010                  TrackFreq:		equ $10		; FM/PSG only (2 bytes)
00000000 =00000012                  TrackNoteTimeout:	equ $12		; FM/PSG only
00000000 =00000013                  TrackNoteTimeoutMaster:equ $13		; FM/PSG only
00000000 =00000014                  TrackModulationPtr:	equ $14		; FM/PSG only (4 bytes)
00000000 =00000018                  TrackModulationWait:	equ $18		; FM/PSG only
00000000 =00000019                  TrackModulationSpeed:	equ $19		; FM/PSG only
00000000 =0000001A                  TrackModulationDelta:	equ $1A		; FM/PSG only
00000000 =0000001B                  TrackModulationSteps:	equ $1B		; FM/PSG only
00000000 =0000001C                  TrackModulationVal:	equ $1C		; FM/PSG only (2 bytes)
00000000 =0000001E                  TrackDetune:		equ $1E		; FM/PSG only
00000000 =0000001F                  TrackPSGNoise:		equ $1F		; PSG only
00000000 =0000001F                  TrackFeedbackAlgo:	equ $1F		; FM only
00000000 =00000020                  TrackVoicePtr:		equ $20		; FM SFX only (4 bytes)
00000000 =00000024                  TrackLoopCounters:	equ $24		; All tracks (multiple bytes)
00000000                            TrackGoSubStack:	equ TrackSz	; All tracks (multiple bytes. This constant won't get to be used because of an optimisation that just uses zTrackSz)
00000000                            
00000000 =00000030                  TrackSz:	equ $30
00000000                            
00000000                            ; VRAM data
00000000 =0000C000                  vram_fg:	equ $C000	; foreground namespace
00000000 =0000E000                  vram_bg:	equ $E000	; background namespace
00000000 =0000F000                  vram_sonic:	equ $F000	; Sonic graphics
00000000 =0000F800                  vram_sprites:	equ $F800	; sprite table
00000000 =0000FC00                  vram_hscroll:	equ $FC00	; horizontal scroll table
00000000                            
00000000                            ; Game modes
00000000                            id_Sega:	equ ptr_GM_Sega-GameModeArray	; $00
00000000                            id_Title:	equ ptr_GM_Title-GameModeArray	; $04
00000000                            id_Demo:	equ ptr_GM_Demo-GameModeArray	; $08
00000000                            id_Level:	equ ptr_GM_Level-GameModeArray	; $0C
00000000                            id_Special:	equ ptr_GM_Special-GameModeArray; $10
00000000                            id_Continue:	equ ptr_GM_Cont-GameModeArray	; $14
00000000                            id_Ending:	equ ptr_GM_Ending-GameModeArray	; $18
00000000                            id_Credits:	equ ptr_GM_Credits-GameModeArray; $1C
00000000                            
00000000                            ; Levels
00000000 =00000000                  id_GHZ:		equ 0
00000000 =00000001                  id_LZ:		equ 1
00000000 =00000002                  id_MZ:		equ 2
00000000 =00000003                  id_SLZ:		equ 3
00000000 =00000004                  id_SYZ:		equ 4
00000000 =00000005                  id_SBZ:		equ 5
00000000 =00000006                  id_EndZ:	equ 6
00000000 =00000007                  id_SS:		equ 7
00000000                            
00000000                            ; colors
00000000 =00000000                  cBlack:		equ $000		; color black
00000000 =00000EEE                  cWhite:		equ $EEE		; color white
00000000 =00000E00                  cBlue:		equ $E00		; color blue
00000000 =000000E0                  cGreen:		equ $0E0		; color green
00000000 =0000000E                  cRed:		equ $00E		; color red
00000000 =000000EE                  cYellow:	equ cGreen+cRed		; color yellow
00000000 =00000EE0                  cAqua:		equ cGreen+cBlue	; color aqua
00000000 =00000E0E                  cMagenta:	equ cBlue+cRed		; color magenta
00000000                            
00000000                            ; Joypad input
00000000 =00000080                  btnStart:	equ %10000000 ; Start button	($80)
00000000 =00000040                  btnA:		equ %01000000 ; A		($40)
00000000 =00000020                  btnC:		equ %00100000 ; C		($20)
00000000 =00000010                  btnB:		equ %00010000 ; B		($10)
00000000 =00000008                  btnR:		equ %00001000 ; Right		($08)
00000000 =00000004                  btnL:		equ %00000100 ; Left		($04)
00000000 =00000002                  btnDn:		equ %00000010 ; Down		($02)
00000000 =00000001                  btnUp:		equ %00000001 ; Up		($01)
00000000 =0000000F                  btnDir:		equ %00001111 ; Any direction	($0F)
00000000 =00000070                  btnABC:		equ %01110000 ; A, B or C	($70)
00000000 =00000007                  bitStart:	equ 7
00000000 =00000006                  bitA:		equ 6
00000000 =00000005                  bitC:		equ 5
00000000 =00000004                  bitB:		equ 4
00000000 =00000003                  bitR:		equ 3
00000000 =00000002                  bitL:		equ 2
00000000 =00000001                  bitDn:		equ 1
00000000 =00000000                  bitUp:		equ 0
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000020                  obInertia:	equ $20	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000017                  obWidth:	equ $17	; width/2
00000000 =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  obActWid:	equ $14	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000023                  obRespawnNo:	equ $23	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            
00000000                            ; Object variables used by Sonic
00000000 =00000030                  flashtime:	equ $30	; time between flashes after getting hit
00000000 =00000032                  invtime:	equ $32	; time left for invincibility
00000000 =00000034                  shoetime:	equ $34	; time left for speed shoes
00000000                            
00000000                            ; Shield variables
00000000 =00000033                  shield_LastLoadedDPLC:    equ $33
00000000 =0000003C                  shield_DPLC_Address:    equ $3C
00000000 =00000038                  shield_Art_Address:    equ $38
00000000 =00000036                  shield_vram_art:    equ $36
00000000                            
00000000                            ; Object variables (Sonic 2 disassembly nomenclature)
00000000 =00000001                  render_flags:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  art_tile:	equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  mappings:	equ 4	; mappings address (4 bytes)
00000000 =00000008                  x_pos:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000C                  y_pos:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  x_vel:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  y_vel:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000016                  y_radius:	equ $16	; height/2
00000000 =00000017                  x_radius:	equ $17	; width/2
00000000 =00000018                  priority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  width_pixels:	equ $14	; action width
00000000 =0000001A                  mapping_frame:	equ $1A	; current frame displayed
00000000 =0000001B                  anim_frame:	equ $1B	; current frame in animation script
00000000 =0000001C                  anim:		equ $1C	; current animation
00000000 =0000001D                  next_anim:	equ $1D	; next animation
00000000 =0000001E                  anim_frame_duration: equ $1E ; time to next frame
00000000 =00000020                  collision_flags: equ $20 ; collision response type
00000000 =00000021                  collision_property: equ $21 ; collision extra property
00000000 =00000022                  status:		equ $22	; orientation or mode
00000000 =00000023                  respawn_index:	equ $23	; respawn list index number
00000000 =00000024                  routine:	equ $24	; routine number
00000000 =00000025                  routine_secondary: equ $25 ; secondary routine number
00000000 =00000026                  angle:		equ $26	; angle
00000000 =00000028                  subtype:	equ $28	; object subtype
00000000                            
00000000                            ; Animation flags
00000000 =000000FF                  afEnd:		equ $FF	; return to beginning of animation
00000000 =000000FE                  afBack:		equ $FE	; go back (specified number) bytes
00000000 =000000FD                  afChange:	equ $FD	; run specified animation
00000000 =000000FC                  afRoutine:	equ $FC	; increment routine counter
00000000 =000000FB                  afReset:	equ $FB	; reset animation and 2nd object routine counter
00000000 =000000FA                  af2ndRoutine:	equ $FA	; increment 2nd routine counter
00000000                            
00000000                            
00000000 =0000000B                  mainspr_mapframe    = $B
00000000 =0000000E                  mainspr_width        = $E
00000000 =0000000F                  mainspr_childsprites     = $F    ; amount of child sprites
00000000 =00000014                  mainspr_height        = $14
00000000 =00000010                  sub2_x_pos        = $10    ;x_vel
00000000 =00000012                  sub2_y_pos        = $12    ;y_vel
00000000 =00000015                  sub2_mapframe        = $15
00000000 =00000016                  sub3_x_pos        = $16    ;y_radius
00000000 =00000018                  sub3_y_pos        = $18    ;priority
00000000 =0000001B                  sub3_mapframe        = $1B    ;anim_frame
00000000 =0000001C                  sub4_x_pos        = $1C    ;anim
00000000 =0000001E                  sub4_y_pos        = $1E    ;anim_frame_duration
00000000 =00000021                  sub4_mapframe        = $21    ;collision_property
00000000 =00000022                  sub5_x_pos        = $22    ;status
00000000 =00000024                  sub5_y_pos        = $24    ;routine
00000000 =00000027                  sub5_mapframe        = $27
00000000 =00000028                  sub6_x_pos        = $28    ;subtype
00000000 =0000002A                  sub6_y_pos        = $2A
00000000 =0000002D                  sub6_mapframe        = $2D
00000000 =0000002E                  sub7_x_pos        = $2E
00000000 =00000030                  sub7_y_pos        = $30
00000000 =00000033                  sub7_mapframe        = $33
00000000 =00000034                  sub8_x_pos        = $34
00000000 =00000036                  sub8_y_pos        = $36
00000000 =00000039                  sub8_mapframe        = $39
00000000 =0000003A                  sub9_x_pos        = $3A
00000000 =0000003C                  sub9_y_pos        = $3C
00000000 =0000003F                  sub9_mapframe        = $3F
00000000 =00000006                  next_subspr       = $6
00000000                            
00000000                            ; Background music
00000000 =00000081                  bgm__First:	equ $81
00000000                            bgm_GHZ:	equ ((ptr_mus81-MusicIndex)/4)+bgm__First
00000000                            bgm_LZ:		equ ((ptr_mus82-MusicIndex)/4)+bgm__First
00000000                            bgm_MZ:		equ ((ptr_mus83-MusicIndex)/4)+bgm__First
00000000                            bgm_SLZ:	equ ((ptr_mus84-MusicIndex)/4)+bgm__First
00000000                            bgm_SYZ:	equ ((ptr_mus85-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ:	equ ((ptr_mus86-MusicIndex)/4)+bgm__First
00000000                            bgm_Invincible:	equ ((ptr_mus87-MusicIndex)/4)+bgm__First
00000000                            bgm_ExtraLife:	equ ((ptr_mus88-MusicIndex)/4)+bgm__First
00000000                            bgm_SS:		equ ((ptr_mus89-MusicIndex)/4)+bgm__First
00000000                            bgm_Title:	equ ((ptr_mus8A-MusicIndex)/4)+bgm__First
00000000                            bgm_Ending:	equ ((ptr_mus8B-MusicIndex)/4)+bgm__First
00000000                            bgm_Boss:	equ ((ptr_mus8C-MusicIndex)/4)+bgm__First
00000000                            bgm_FZ:		equ ((ptr_mus8D-MusicIndex)/4)+bgm__First
00000000                            bgm_GotThrough:	equ ((ptr_mus8E-MusicIndex)/4)+bgm__First
00000000                            bgm_GameOver:	equ ((ptr_mus8F-MusicIndex)/4)+bgm__First
00000000                            bgm_Continue:	equ ((ptr_mus90-MusicIndex)/4)+bgm__First
00000000                            bgm_Credits:	equ ((ptr_mus91-MusicIndex)/4)+bgm__First
00000000                            bgm_Drowning:	equ ((ptr_mus92-MusicIndex)/4)+bgm__First
00000000                            bgm_Emerald:	equ ((ptr_mus93-MusicIndex)/4)+bgm__First
00000000                            bgm_Pinch:		equ ((ptr_mus94-MusicIndex)/4)+bgm__First
00000000                            bgm_Seaside:	equ ((ptr_mus95-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ3:		equ ((ptr_mus96-MusicIndex)/4)+bgm__First
00000000                            bgm_TimeOver:	equ ((ptr_mus97-MusicIndex)/4)+bgm__First
00000000                            bgm_Options:	equ ((ptr_mus98-MusicIndex)/4)+bgm__First
00000000                            bgm_ToxicLandfill:	equ ((ptr_mus99-MusicIndex)/4)+bgm__First
00000000                            bgm_RRZ2:	equ ((ptr_mus9A-MusicIndex)/4)+bgm__First
00000000                            bgm_TTZBF:	equ ((ptr_mus9B-MusicIndex)/4)+bgm__First
00000000                            bgm_Tribute:	equ ((ptr_mus9C-MusicIndex)/4)+bgm__First
00000000                            bgm__Last:	equ ((ptr_musend-MusicIndex-4)/4)+bgm__First
00000000                            
00000000                            ; Sound effects
00000000 =000000A0                  sfx__First:	equ $A0
00000000                            sfx_Jump:	equ ((ptr_sndA0-SoundIndex)/4)+sfx__First
00000000                            sfx_Lamppost:	equ ((ptr_sndA1-SoundIndex)/4)+sfx__First
00000000                            sfx_A2:		equ ((ptr_sndA2-SoundIndex)/4)+sfx__First
00000000                            sfx_Death:	equ ((ptr_sndA3-SoundIndex)/4)+sfx__First
00000000                            sfx_Skid:	equ ((ptr_sndA4-SoundIndex)/4)+sfx__First
00000000                            sfx_LRingBox:	equ ((ptr_sndA5-SoundIndex)/4)+sfx__First
00000000                            sfx_HitSpikes:	equ ((ptr_sndA6-SoundIndex)/4)+sfx__First
00000000                            sfx_Push:	equ ((ptr_sndA7-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGoal:	equ ((ptr_sndA8-SoundIndex)/4)+sfx__First
00000000                            sfx_SSItem:	equ ((ptr_sndA9-SoundIndex)/4)+sfx__First
00000000                            sfx_Splash:	equ ((ptr_sndAA-SoundIndex)/4)+sfx__First
00000000                            sfx_FireShield:	equ ((ptr_FireShield-SoundIndex)/4)+sfx__First
00000000                            sfx_HitBoss:	equ ((ptr_sndAC-SoundIndex)/4)+sfx__First
00000000                            sfx_Bubble:	equ ((ptr_sndAD-SoundIndex)/4)+sfx__First
00000000                            sfx_Fireball:	equ ((ptr_sndAE-SoundIndex)/4)+sfx__First
00000000                            sfx_Shield:	equ ((ptr_sndAF-SoundIndex)/4)+sfx__First
00000000                            sfx_Saw:	equ ((ptr_sndB0-SoundIndex)/4)+sfx__First
00000000                            sfx_Electric:	equ ((ptr_sndB1-SoundIndex)/4)+sfx__First
00000000                            sfx_Drown:	equ ((ptr_sndB2-SoundIndex)/4)+sfx__First
00000000                            sfx_Flamethrower:equ ((ptr_sndB3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bumper:	equ ((ptr_sndB4-SoundIndex)/4)+sfx__First
00000000                            sfx_Ring:	equ ((ptr_sndB5-SoundIndex)/4)+sfx__First
00000000                            sfx_SpikesMove:	equ ((ptr_sndB6-SoundIndex)/4)+sfx__First
00000000                            sfx_Rumbling:	equ ((ptr_sndB7-SoundIndex)/4)+sfx__First
00000000                            sfx_B8:		equ ((ptr_sndB8-SoundIndex)/4)+sfx__First
00000000                            sfx_Collapse:	equ ((ptr_sndB9-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGlass:	equ ((ptr_sndBA-SoundIndex)/4)+sfx__First
00000000                            sfx_Door:	equ ((ptr_sndBB-SoundIndex)/4)+sfx__First
00000000                            sfx_Teleport:	equ ((ptr_sndBC-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainStomp:	equ ((ptr_sndBD-SoundIndex)/4)+sfx__First
00000000                            sfx_Roll:	equ ((ptr_sndBE-SoundIndex)/4)+sfx__First
00000000                            sfx_Continue:	equ ((ptr_sndBF-SoundIndex)/4)+sfx__First
00000000                            sfx_Basaran:	equ ((ptr_sndC0-SoundIndex)/4)+sfx__First
00000000                            sfx_BreakItem:	equ ((ptr_sndC1-SoundIndex)/4)+sfx__First
00000000                            sfx_Warning:	equ ((ptr_sndC2-SoundIndex)/4)+sfx__First
00000000                            sfx_GiantRing:	equ ((ptr_sndC3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bomb:	equ ((ptr_sndC4-SoundIndex)/4)+sfx__First
00000000                            sfx_Cash:	equ ((ptr_sndC5-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLoss:	equ ((ptr_sndC6-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainRise:	equ ((ptr_sndC7-SoundIndex)/4)+sfx__First
00000000                            sfx_Burning:	equ ((ptr_sndC8-SoundIndex)/4)+sfx__First
00000000                            sfx_Bonus:	equ ((ptr_sndC9-SoundIndex)/4)+sfx__First
00000000                            sfx_EnterSS:	equ ((ptr_sndCA-SoundIndex)/4)+sfx__First
00000000                            sfx_WallSmash:	equ ((ptr_sndCB-SoundIndex)/4)+sfx__First
00000000                            sfx_Spring:	equ ((ptr_sndCC-SoundIndex)/4)+sfx__First
00000000                            sfx_Switch:	equ ((ptr_sndCD-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLeft:	equ ((ptr_sndCE-SoundIndex)/4)+sfx__First
00000000                            sfx_Signpost:	equ ((ptr_sndCF-SoundIndex)/4)+sfx__First
00000000                            sfx__Last:	equ ((ptr_sndend-SoundIndex-4)/4)+sfx__First
00000000                            
00000000                            ; Special sound effects
00000000 =000000D0                  spec__First:	equ $D0
00000000                            sfx_Waterfall:	equ ((ptr_sndD0-SpecSoundIndex)/4)+spec__First
00000000                            sfx_LightningShield:	equ ((ptr_sndD1-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Peelout:	equ ((ptr_sndD2-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutRelease:	equ ((ptr_sndD3-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutStop:	equ ((ptr_sndD4-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Spindash:	equ ((ptr_sndD5-SpecSoundIndex)/4)+spec__First
00000000                            spec__Last:	equ ((ptr_specend-SpecSoundIndex-4)/4)+spec__First
00000000                            
00000000 =000000E0                  flg__First:	equ $E0
00000000                            bgm_Fade:	equ ((ptr_flgE0-Sound_ExIndex)/4)+flg__First
00000000                            sfx_Sega:	equ ((ptr_flgE1-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Speedup:	equ ((ptr_flgE2-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Slowdown:	equ ((ptr_flgE3-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Stop:	equ ((ptr_flgE4-Sound_ExIndex)/4)+flg__First
00000000                            flg__Last:	equ ((ptr_flgend-Sound_ExIndex-4)/4)+flg__First
00000000                            
00000000                            ; Sonic frame IDs
00000000 =00000000                  fr_Null:	equ 0
00000000 =00000001                  fr_Stand:	equ 1
00000000 =00000002                  fr_Blink:	equ 2
00000000 =00000003                  fr_Wait1:	equ 3
00000000 =00000004                  fr_Wait2:	equ 4
00000000 =00000005                  fr_Wait3:	equ 5
00000000 =00000006                  fr_Wait4:	equ 6
00000000 =00000007                  fr_Wait5:	equ 7
00000000 =00000008                  fr_Wait6:	equ 8
00000000 =00000009                  fr_Wait7:	equ 9
00000000 =0000000A                  fr_Wait8:	equ $A
00000000 =0000000B                  fr_Wait9:	equ $B
00000000 =0000000C                  fr_LookUp1:	equ $C
00000000 =0000000D                  fr_LookUp2:	equ $D
00000000 =0000000E                  fr_Walk11:	equ $E
00000000 =0000000F                  fr_Walk12:	equ $F
00000000 =00000010                  fr_Walk13:	equ $10
00000000 =00000011                  fr_Walk14:	equ $11
00000000 =00000012                  fr_Walk15:	equ $12
00000000 =00000013                  fr_Walk16:	equ $13
00000000 =00000014                  fr_Walk17:	equ $14
00000000 =00000015                  fr_Walk18:	equ $15
00000000 =00000016                  fr_Walk21:	equ $16
00000000 =00000017                  fr_Walk22:	equ $17
00000000 =00000018                  fr_Walk23:	equ $18
00000000 =00000019                  fr_Walk24:	equ $19
00000000 =0000001A                  fr_Walk25:	equ $1A
00000000 =0000001B                  fr_Walk26:	equ $1B
00000000 =0000001C                  fr_Walk27:	equ $1C
00000000 =0000001D                  fr_Walk28:	equ $1D
00000000 =0000001E                  fr_Walk31:	equ $1E
00000000 =0000001F                  fr_Walk32:	equ $1F
00000000 =00000020                  fr_Walk33:	equ $20
00000000 =00000021                  fr_Walk34:	equ $21
00000000 =00000022                  fr_Walk35:	equ $22
00000000 =00000023                  fr_Walk36:	equ $23
00000000 =00000024                  fr_Walk37:	equ $24
00000000 =00000025                  fr_Walk38:	equ $25
00000000 =00000026                  fr_Walk41:	equ $26
00000000 =00000027                  fr_Walk42:	equ $27
00000000 =00000028                  fr_Walk43:	equ $28
00000000 =00000029                  fr_Walk44:	equ $29
00000000 =0000002A                  fr_Walk45:	equ $2A
00000000 =0000002B                  fr_Walk46:	equ $2B
00000000 =0000002C                  fr_Walk47:	equ $2C
00000000 =0000002D                  fr_Walk48:	equ $2D
00000000 =0000002E                  fr_Run11:	equ $2E
00000000 =0000002F                  fr_Run12:	equ $2F
00000000 =00000030                  fr_Run13:	equ $30
00000000 =00000031                  fr_Run14:	equ $31
00000000 =00000032                  fr_Run15:	equ $32
00000000 =00000033                  fr_Run16:	equ $33
00000000 =00000034                  fr_Run17:	equ $34
00000000 =00000035                  fr_Run18:	equ $35
00000000 =00000036                  fr_Run21:	equ $36
00000000 =00000037                  fr_Run22:	equ $37
00000000 =00000038                  fr_Run23:	equ $38
00000000 =00000039                  fr_Run24:	equ $39
00000000 =0000003A                  fr_Run25:	equ $3A
00000000 =0000003B                  fr_Run26:	equ $3B
00000000 =0000003C                  fr_Run27:	equ $3C
00000000 =0000003D                  fr_Run28:	equ $3D
00000000 =0000003E                  fr_Run31:	equ $3E
00000000 =0000003F                  fr_Run32:	equ $3F
00000000 =00000040                  fr_Run33:	equ $40
00000000 =00000041                  fr_Run34:	equ $41
00000000 =00000042                  fr_Run35:	equ $42
00000000 =00000043                  fr_Run36:	equ $43
00000000 =00000044                  fr_Run37:	equ $44
00000000 =00000045                  fr_Run38:	equ $45
00000000 =00000046                  fr_Run41:	equ $46
00000000 =00000047                  fr_Run42:	equ $47
00000000 =00000048                  fr_Run43:	equ $48
00000000 =00000049                  fr_Run44:	equ $49
00000000 =0000004A                  fr_Run45:	equ $4A
00000000 =0000004B                  fr_Run46:	equ $4B
00000000 =0000004C                  fr_Run47:	equ $4C
00000000 =0000004D                  fr_Run48:	equ $4D
00000000 =0000004E                  fr_peelout11:	equ $4E
00000000 =0000004F                  fr_peelout12:	equ $4F
00000000 =00000050                  fr_peelout13:	equ $50
00000000 =00000051                  fr_peelout14:	equ $51
00000000 =00000052                  fr_peelout21:	equ $52
00000000 =00000053                  fr_peelout22:	equ $53
00000000 =00000054                  fr_peelout23:	equ $54
00000000 =00000055                  fr_peelout24:	equ $55
00000000 =00000056                  fr_peelout31:	equ $56
00000000 =00000057                  fr_peelout32:	equ $57
00000000 =00000058                  fr_peelout33:	equ $58
00000000 =00000059                  fr_peelout34:	equ $59
00000000 =0000005A                  fr_peelout41:	equ $5A
00000000 =0000005B                  fr_peelout42:	equ $5B
00000000 =0000005C                  fr_peelout43:	equ $5C
00000000 =0000005D                  fr_peelout44:	equ $5D
00000000 =0000005E                  fr_Roll1:	equ $5E
00000000 =00000060                  fr_Roll2:	equ $60
00000000 =00000062                  fr_Roll3:	equ $62
00000000 =00000064                  fr_Roll4:	equ $64
00000000 =00000066                  fr_Roll5:	equ $66
00000000 =0000005F                  fr_Roll6:	equ $5F
00000000 =00000061                  fr_Roll7:	equ $61
00000000 =00000063                  fr_Roll8:	equ $63
00000000 =00000065                  fr_Roll9:	equ $65
00000000 =00000067                  fr_Warp1:	equ $67
00000000 =00000068                  fr_Warp2:	equ $68
00000000 =00000069                  fr_Warp3:	equ $69
00000000 =0000006A                  fr_Warp4:	equ $6A
00000000 =0000006B                  fr_Stop1:	equ $6B
00000000 =0000006C                  fr_Stop2:	equ $6C
00000000 =0000006D                  fr_Stop3:	equ $6D
00000000 =0000006E                  fr_Stop4:	equ $6E
00000000 =0000006F                  fr_Leap3:	equ $6F
00000000 =00000070                  fr_Duck2:	equ $70
00000000 =00000071                  fr_Duck:	equ $71
00000000 =00000072                  fr_Balance1:	equ $72
00000000 =00000073                  fr_Balance2:	equ $73
00000000 =00000074                  fr_Balance3:	equ $74
00000000 =00000075                  fr_Balance4:	equ $75
00000000 =00000076                  fr_GetAir2:		equ $76
00000000 =00000077                  fr_VHang1:		equ $77
00000000 =00000078                  fr_VHang2:		equ $78
00000000 =00000079                  fr_Blank:		equ $79
00000000 =0000007A                  fr_Blank2:		equ $7A
00000000                            
00000000 =0000007C                  fr_Float1:	equ $7C
00000000 =0000007E                  fr_Float2:	equ $7E
00000000 =00000081                  fr_Float3:	equ $81
00000000 =00000082                  fr_Float4:	equ $82
00000000 =00000080                  fr_Float5:	equ $80
00000000 =0000007B                  fr_Float6:	equ $7B
00000000 =0000007D                  fr_float7:	equ $7D
00000000 =0000007F                  fr_float8:	equ $7F
00000000 =00000083                  fr_Spring:	equ $83
00000000 =00000084                  fr_Spring2:	equ $84
00000000 =00000085                  fr_Hang1:	equ $85
00000000 =00000086                  fr_Hang2:	equ $86
00000000 =00000087                  fr_Leap1:	equ $87
00000000 =00000088                  fr_Leap2:	equ $88
00000000 =00000089                  fr_Push1:	equ $89
00000000 =0000008A                  fr_Push2:	equ $8A
00000000 =0000008B                  fr_Push3:	equ $8B
00000000 =0000008C                  fr_Push4:	equ $8C
00000000 =0000008D                  fr_Push5:	equ $8D
00000000 =0000008E                  fr_Push6:	equ $8E
00000000 =0000008F                  fr_Push7:	equ $8F
00000000 =00000090                  fr_Push8:	equ $90
00000000 =00000091                  fr_Surf:	equ $91
00000000 =00000092                  fr_Burnt:	equ $92
00000000 =00000093                  fr_Drown:	equ $93
00000000 =00000094                  fr_Death:	equ $94
00000000 =00000095                  fr_GetAir:	equ $95
00000000 =00000096                  fr_Injury:	equ $96
00000000 =00000097                  fr_WaterSlide:	equ $97
00000000 =00000098                  fr_skele1:	equ $98
00000000 =00000099                  fr_skele2:	equ $99
00000000 =0000009A                  fr_hurtblue:	equ $9A
00000000 =0000009B                  fr_Spindash1	equ $9B
00000000 =0000009C                  fr_Spindash2	equ $9C
00000000 =0000009D                  fr_Spindash3	equ $9D
00000000 =0000009E                  fr_Spindash4	equ $9E
00000000 =0000009F                  fr_Spindash5	equ $9F
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000 =000000A1                  fr_Transform1	equ	$A1
00000000 =000000A2                  fr_Transform2	equ	$A2
00000000 =000000A3                  fr_Transform3	equ	$A3
00000000 =000000A4                  fr_Transform4	equ	$A4
00000000 =000000A5                  fr_Transform5	equ	$A5
00000000 =000000A6                  fr_Transform6	equ	$A6
00000000 =000000A7                  fr_Transform7	equ	$A7
00000000 =000000A8                  fr_Transform8	equ	$A8
00000000 =000000A9                  fr_Transform9	equ	$A9
00000000 =000000A9                  fr_Transform9	equ	$A9
00000000                            	include	"Variables.asm"
00000000                            ; Variables (v) and Flags (f)
00000000                            
00000000 =FFFFFC00                  v_regbuffer:	equ $FFFFFC00	; stores registers d0-a7 during an error event ($40 bytes)
00000000 =FFFFFC40                  v_spbuffer:	equ $FFFFFC40	; stores most recent sp address (4 bytes)
00000000 =FFFFFC44                  v_errortype:	equ $FFFFFC44	; error type
00000000                            
00000000 =00FF0000                  v_256x256:	equ   $FF0000	; 256x256 tile mappings ($A400 bytes)
00000000 =FFFFA400                  v_lvllayout:	equ $FFFFA400	; level and background layouts ($400 bytes)
00000000 =FFFFA800                  v_bgscroll_buffer:	equ	$FFFFA800	; background scroll buffer ($200 bytes)
00000000 =FFFFAA00                  v_ngfx_buffer:	equ $FFFFAA00	; Nemesis graphics decompression buffer ($200 bytes)
00000000 =FFFFAC00                  v_spritequeue:	equ $FFFFAC00	; sprite display queue, in order of priority ($400 bytes)
00000000 =FFFFB000                  v_16x16:		equ $FFFFB000	; 16x16 tile mappings
00000000 =FFFFC800                  VDP_Command_Buffer:	equ $FFFFC800
00000000                            
00000000 =FFFFC8FC                  VDP_Command_Buffer_Slot:equ VDP_Command_Buffer+7*$12*2
00000000 =FFFFC800                  v_sgfx_buffer:	equ $FFFFC800	; buffered Sonic graphics ($17 cells) ($2E0 bytes)
00000000 =FFFFCB00                  v_tracksonic:	equ $FFFFCB00	; position tracking data for Sonic ($100 bytes)
00000000 =FFFFCC00                  v_hscrolltablebuffer:	equ $FFFFCC00 ; scrolling table data (actually $380 bytes, but $400 is reserved for it)
00000000 =FFFFD000                  v_objspace:	equ $FFFFD000	; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	equ v_objspace	; object variable space for Sonic ($40 bytes)
00000000 =FFFFD800                  v_lvlobjspace:	equ $FFFFD800	; level object variable space ($1800 bytes)
00000000 =FFFFF015                  v_palmuscounter:	equ $FFFFF015
00000000 =FFFFF000                  v_snddriver_ram:	equ $FFFFF000 ; start of RAM for the sound driver data ($5C0 bytes)
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, until otherwise stated, all offsets are relative to v_snddriver_ram
00000000                            ; =================================================================================
00000000 =00000000                  v_startofvariables:	equ $000
00000000 =00000000                  v_sndprio:		equ $000	; sound priority (priority of new music/SFX must be higher or equal to this value or it won't play; bit 7 of priority being set prevents this value from changing)
00000000 =00000001                  v_main_tempo_timeout:	equ $001	; Counts down to zero; when zero, resets to next value and delays song by 1 frame
00000000 =00000002                  v_main_tempo:		equ $002	; Used for music only
00000000 =00000003                  f_pausemusic:		equ $003	; flag set to stop music when paused
00000000 =00000004                  v_fadeout_counter:	equ $004
00000000                            
00000000 =00000006                  v_fadeout_delay:	equ $006
00000000 =00000007                  v_communication_byte:	equ $007	; used in Ristar to sync with a boss' attacks; unused here
00000000 =00000008                  f_updating_dac:		equ $008	; $80 if updating DAC, $00 otherwise
00000000 =00000009                  v_sound_id:		equ $009	; sound or music copied from below
00000000 =0000000A                  v_soundqueue0:		equ $00A	; sound or music to play
00000000 =0000000B                  v_soundqueue1:		equ $00B	; special sound to play
00000000 =0000000C                  v_soundqueue2:		equ $00C	; unused sound to play
00000000                            
00000000 =0000000E                  f_voice_selector:	equ $00E	; $00 = use music voice pointer; $40 = use special voice pointer; $80 = use track voice pointer
00000000                            
00000000 =00000018                  v_voice_ptr:		equ $018	; voice data pointer (4 bytes)
00000000                            
00000000 =00000020                  v_special_voice_ptr:	equ $020	; voice data pointer for special SFX ($D0-$DF) (4 bytes)
00000000                            
00000000 =00000024                  f_fadein_flag:		equ $024	; Flag for fade in
00000000 =00000025                  v_fadein_delay:		equ $025
00000000 =00000026                  v_fadein_counter:	equ $026	; Timer for fade in/out
00000000 =00000027                  f_1up_playing:		equ $027	; flag indicating 1-up song is playing
00000000 =00000028                  v_tempo_mod:		equ $028	; music - tempo modifier
00000000 =00000029                  v_speeduptempo:		equ $029	; music - tempo modifier with speed shoes
00000000 =0000002A                  f_speedup:		equ $02A	; flag indicating whether speed shoes tempo is on ($80) or off ($00)
00000000 =0000002B                  v_ring_speaker:		equ $02B	; which speaker the "ring" sound is played in (00 = right; 01 = left)
00000000 =0000002C                  f_push_playing:		equ $02C	; if set, prevents further push sounds from playing
00000000                            
00000000 =00000040                  v_music_track_ram:	equ $040	; Start of music RAM
00000000                            
00000000 =00000040                  v_music_fmdac_tracks:	equ v_music_track_ram+TrackSz*0
00000000 =00000040                  v_music_dac_track:	equ v_music_fmdac_tracks+TrackSz*0
00000000 =00000070                  v_music_fm_tracks:	equ v_music_fmdac_tracks+TrackSz*1
00000000 =00000070                  v_music_fm1_track:	equ v_music_fm_tracks+TrackSz*0
00000000 =000000A0                  v_music_fm2_track:	equ v_music_fm_tracks+TrackSz*1
00000000 =000000D0                  v_music_fm3_track:	equ v_music_fm_tracks+TrackSz*2
00000000 =00000100                  v_music_fm4_track:	equ v_music_fm_tracks+TrackSz*3
00000000 =00000130                  v_music_fm5_track:	equ v_music_fm_tracks+TrackSz*4
00000000 =00000160                  v_music_fm6_track:	equ v_music_fm_tracks+TrackSz*5
00000000 =00000190                  v_music_fm_tracks_end:	equ v_music_fm_tracks+TrackSz*6
00000000 =00000190                  v_music_fmdac_tracks_end:	equ v_music_fm_tracks_end
00000000 =00000190                  v_music_psg_tracks:	equ v_music_fmdac_tracks_end
00000000 =00000190                  v_music_psg1_track:	equ v_music_psg_tracks+TrackSz*0
00000000 =000001C0                  v_music_psg2_track:	equ v_music_psg_tracks+TrackSz*1
00000000 =000001F0                  v_music_psg3_track:	equ v_music_psg_tracks+TrackSz*2
00000000 =00000220                  v_music_psg_tracks_end:	equ v_music_psg_tracks+TrackSz*3
00000000 =00000220                  v_music_track_ram_end:	equ v_music_psg_tracks_end
00000000                            
00000000 =00000220                  v_sfx_track_ram:	equ v_music_track_ram_end	; Start of SFX RAM, straight after the end of music RAM
00000000                            
00000000 =00000220                  v_sfx_fm_tracks:	equ v_sfx_track_ram+TrackSz*0
00000000 =00000220                  v_sfx_fm3_track:	equ v_sfx_fm_tracks+TrackSz*0
00000000 =00000250                  v_sfx_fm4_track:	equ v_sfx_fm_tracks+TrackSz*1
00000000 =00000280                  v_sfx_fm5_track:	equ v_sfx_fm_tracks+TrackSz*2
00000000 =000002B0                  v_sfx_fm_tracks_end:	equ v_sfx_fm_tracks+TrackSz*3
00000000 =000002B0                  v_sfx_psg_tracks:	equ v_sfx_fm_tracks_end
00000000 =000002B0                  v_sfx_psg1_track:	equ v_sfx_psg_tracks+TrackSz*0
00000000 =000002E0                  v_sfx_psg2_track:	equ v_sfx_psg_tracks+TrackSz*1
00000000 =00000310                  v_sfx_psg3_track:	equ v_sfx_psg_tracks+TrackSz*2
00000000 =00000340                  v_sfx_psg_tracks_end:	equ v_sfx_psg_tracks+TrackSz*3
00000000 =00000340                  v_sfx_track_ram_end:	equ v_sfx_psg_tracks_end
00000000                            
00000000 =00000340                  v_spcsfx_track_ram:	equ v_sfx_track_ram_end	; Start of special SFX RAM, straight after the end of SFX RAM
00000000                            
00000000 =00000340                  v_spcsfx_fm4_track:	equ v_spcsfx_track_ram+TrackSz*0
00000000 =00000370                  v_spcsfx_psg3_track:	equ v_spcsfx_track_ram+TrackSz*1
00000000 =000003A0                  v_spcsfx_track_ram_end:	equ v_spcsfx_track_ram+TrackSz*2
00000000                            
00000000 =000003A0                  v_1up_ram_copy:		equ v_spcsfx_track_ram_end
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, no longer relative to sound driver RAM
00000000                            ; =================================================================================
00000000                            
00000000 =FFFFF600                  v_gamemode:	equ $FFFFF600	; game mode (00=Sega; 04=Title; 08=Demo; 0C=Level; 10=SS; 14=Cont; 18=End; 1C=Credit; +8C=PreLevel)
00000000 =FFFFF602                  v_jpadhold2:	equ $FFFFF602	; joypad input - held, duplicate
00000000 =FFFFF603                  v_jpadpress2:	equ $FFFFF603	; joypad input - pressed, duplicate
00000000 =FFFFF604                  v_jpadhold1:	equ $FFFFF604	; joypad input - held
00000000 =FFFFF605                  v_jpadpress1:	equ $FFFFF605	; joypad input - pressed
00000000 =FFFFF608                  v_loadhud:		equ	$FFFFF608
00000000 =FFFFF60C                  v_vdp_buffer1:	equ $FFFFF60C	; VDP instruction buffer (2 bytes)
00000000                            
00000000 =FFFFF614                  v_demolength:	equ $FFFFF614	; the length of a demo in frames (2 bytes)
00000000 =FFFFF616                  v_scrposy_dup:	equ $FFFFF616	; screen position y (duplicate) (2 bytes)
00000000 =FFFFF618                  v_bgscrposy_dup:	equ $FFFFF618	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFF61A                  v_scrposx_dup:	equ $FFFFF61A	; screen position x (duplicate) (2 bytes)
00000000 =FFFFF61C                  v_bgscreenposx_dup_unused:	equ $FFFFF61C	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFF61E                  v_bg3screenposy_dup_unused:	equ $FFFFF61E	; (2 bytes)
00000000 =FFFFF620                  v_bg3screenposx_dup_unused:	equ $FFFFF620	; (2 bytes)
00000000                            
00000000 =FFFFF624                  v_hbla_hreg:	equ $FFFFF624	; VDP H.interrupt register buffer (8Axx) (2 bytes)
00000000 =FFFFF625                  v_hbla_line:	equ $FFFFF625	; screen line where water starts and palette is changed by HBlank
00000000 =FFFFF626                  v_pfade_start:	equ $FFFFF626	; palette fading - start position in bytes
00000000 =FFFFF627                  v_pfade_size:	equ $FFFFF627	; palette fading - number of colors
00000000 =FFFFF62A                  v_vbla_routine:	equ $FFFFF62A	; VBlank - routine counter
00000000 =FFFFF62C                  v_spritecount:	equ $FFFFF62C	; number of sprites on-screen
00000000 =FFFFF632                  v_pcyc_num:	equ $FFFFF632	; palette cycling - current reference number (2 bytes)
00000000 =FFFFF634                  v_pcyc_time:	equ $FFFFF634	; palette cycling - time until the next change (2 bytes)
00000000 =FFFFF636                  v_random:	equ $FFFFF636	; pseudo random number buffer (4 bytes)
00000000 =FFFFF63A                  f_pause:		equ $FFFFF63A	; flag set to pause the game (2 bytes)
00000000 =FFFFF640                  v_vdp_buffer2:	equ $FFFFF640	; VDP instruction buffer (2 bytes)
00000000 =FFFFF644                  f_hbla_pal:	equ $FFFFF644	; flag set to change palette during HBlank (0000 = no; 0001 = change) (2 bytes)
00000000 =FFFFF646                  v_waterpos1:	equ $FFFFF646	; water height, actual (2 bytes)
00000000 =FFFFF648                  v_waterpos2:	equ $FFFFF648	; water height, ignoring sway (2 bytes)
00000000 =FFFFF64A                  v_waterpos3:	equ $FFFFF64A	; water height, next target (2 bytes)
00000000 =FFFFF64C                  f_water:		equ $FFFFF64C	; flag set for water
00000000 =FFFFF64D                  v_wtr_routine:	equ $FFFFF64D	; water event - routine counter
00000000 =FFFFF64E                  f_wtr_state:	equ $FFFFF64E	; water palette state when water is above/below the screen (00 = partly/all dry; 01 = all underwater)
00000000                            
00000000 =FFFFF650                  v_pal_buffer:	equ $FFFFF650	; palette data buffer (used for palette cycling) ($30 bytes)
00000000 =FFFFF680                  v_plc_buffer:	equ $FFFFF680	; pattern load cues buffer (maximum $10 PLCs) ($60 bytes)
00000000 =FFFFF6E0                  v_ptrnemcode:	equ $FFFFF6E0	; pointer for nemesis decompression code ($1502 or $150C) (4 bytes)
00000000                            
00000000 =FFFFF6F8                  f_plc_execute:	equ $FFFFF6F8	; flag set for pattern load cue execution (2 bytes)
00000000                            
00000000 =FFFFF700                  v_screenposx:	equ $FFFFF700	; screen position x (2 bytes)
00000000 =FFFFF704                  v_screenposy:	equ $FFFFF704	; screen position y (2 bytes)
00000000 =FFFFF708                  v_bgscreenposx:	equ $FFFFF708	; background screen position x (2 bytes)
00000000 =FFFFF70C                  v_bgscreenposy:	equ $FFFFF70C	; background screen position y (2 bytes)
00000000 =FFFFF710                  v_bg2screenposx:	equ $FFFFF710	; 2 bytes
00000000 =FFFFF714                  v_bg2screenposy:	equ $FFFFF714	; 2 bytes
00000000 =FFFFF718                  v_bg3screenposx:	equ $FFFFF718	; 2 bytes
00000000 =FFFFF71C                  v_bg3screenposy:	equ $FFFFF71C	; 2 bytes
00000000                            
00000000 =FFFFF720                  v_limitleft1:	equ $FFFFF720	; left level boundary (2 bytes)
00000000 =FFFFF722                  v_limitright1:	equ $FFFFF722	; right level boundary (2 bytes)
00000000 =FFFFF724                  v_limittop1:	equ $FFFFF724	; top level boundary (2 bytes)
00000000 =FFFFF726                  v_limitbtm1:	equ $FFFFF726	; bottom level boundary (2 bytes)
00000000 =FFFFF728                  v_limitleft2:	equ $FFFFF728	; left level boundary (2 bytes)
00000000 =FFFFF72A                  v_limitright2:	equ $FFFFF72A	; right level boundary (2 bytes)
00000000 =FFFFF72C                  v_limittop2:	equ $FFFFF72C	; top level boundary (2 bytes)
00000000 =FFFFF72E                  v_limitbtm2:	equ $FFFFF72E	; bottom level boundary (2 bytes)
00000000                            
00000000 =FFFFF732                  v_limitleft3:	equ $FFFFF732	; left level boundary, at the end of an act (2 bytes)
00000000                            
00000000 =FFFFF73A                  v_scrshiftx:	equ $FFFFF73A	; x-screen shift (new - last) * $100
00000000 =FFFFF73C                  v_scrshifty:	equ $FFFFF73C	; y-screen shift (new - last) * $100
00000000                            
00000000 =FFFFF73E                  v_lookshift:	equ $FFFFF73E	; screen shift when Sonic looks up/down (2 bytes)
00000000 =FFFFF742                  v_dle_routine:	equ $FFFFF742	; dynamic level event - routine counter
00000000 =FFFFF744                  f_nobgscroll:	equ $FFFFF744	; flag set to cancel background scrolling
00000000                            
00000000 =FFFFF74A                  v_fg_xblock:	equ	$FFFFF74A	; foreground x-block parity (for redraw)
00000000 =FFFFF74B                  v_fg_yblock:	equ	$FFFFF74B	; foreground y-block parity (for redraw)
00000000 =FFFFF74C                  v_bg1_xblock:	equ	$FFFFF74C	; background x-block parity (for redraw)
00000000 =FFFFF74D                  v_bg1_yblock:	equ	$FFFFF74D	; background y-block parity (for redraw)
00000000 =FFFFF74E                  v_bg2_xblock:	equ	$FFFFF74E	; secondary background x-block parity (for redraw)
00000000 =FFFFF74F                  v_bg2_yblock:	equ	$FFFFF74F	; secondary background y-block parity (unused)
00000000 =FFFFF750                  v_bg3_xblock:	equ	$FFFFF750	; teritary background x-block parity (for redraw)
00000000 =FFFFF751                  v_bg3_yblock:	equ	$FFFFF751	; teritary background y-block parity (unused)
00000000                            
00000000 =FFFFF754                  v_fg_scroll_flags:	equ $FFFFF754	; screen redraw flags for foreground
00000000 =FFFFF756                  v_bg1_scroll_flags:	equ $FFFFF756	; screen redraw flags for background 1
00000000 =FFFFF758                  v_bg2_scroll_flags:	equ $FFFFF758	; screen redraw flags for background 2
00000000 =FFFFF75A                  v_bg3_scroll_flags:	equ $FFFFF75A	; screen redraw flags for background 3
00000000 =FFFFF75C                  f_bgscrollvert:	equ $FFFFF75C	; flag for vertical background scrolling
00000000 =FFFFF760                  v_sonspeedmax:	equ $FFFFF760	; Sonic's maximum speed (2 bytes)
00000000 =FFFFF762                  v_sonspeedacc:	equ $FFFFF762	; Sonic's acceleration (2 bytes)
00000000 =FFFFF764                  v_sonspeeddec:	equ $FFFFF764	; Sonic's deceleration (2 bytes)
00000000 =FFFFF766                  v_sonframenum:	equ $FFFFF766	; frame to display for Sonic
00000000 =FFFFF767                  f_sonframechg:	equ $FFFFF767	; flag set to update Sonic's sprite frame
00000000 =FFFFF768                  v_anglebuffer:	equ $FFFFF768	; angle of collision block that Sonic or object is standing on
00000000                            
00000000 =FFFFF76C                  v_opl_routine:	equ $FFFFF76C	; ObjPosLoad - routine counter
00000000 =FFFFF76E                  v_opl_screen:	equ $FFFFF76E	; ObjPosLoad - screen variable
00000000 =FFFFF770                  v_opl_data:	equ $FFFFF770	; ObjPosLoad - data buffer ($10 bytes)
00000000                            
00000000 =FFFFF780                  v_ssangle:	equ $FFFFF780	; Special Stage angle (2 bytes)
00000000 =FFFFF782                  v_ssrotate:	equ $FFFFF782	; Special Stage rotation speed (2 bytes)
00000000 =FFFFF790                  v_btnpushtime1:	equ $FFFFF790	; button push duration - in level (2 bytes)
00000000 =FFFFF792                  v_btnpushtime2:	equ $FFFFF792	; button push duration - in demo (2 bytes)
00000000 =FFFFF794                  v_palchgspeed:	equ $FFFFF794	; palette fade/transition speed (0 is fastest) (2 bytes)
00000000 =FFFFF796                  v_collindex:	equ $FFFFF796	; ROM address for collision index of current level (4 bytes)
00000000 =FFFFF79A                  v_palss_num:	equ $FFFFF79A	; palette cycling in Special Stage - reference number (2 bytes)
00000000 =FFFFF79C                  v_palss_time:	equ $FFFFF79C	; palette cycling in Special Stage - time until next change (2 bytes)
00000000                            
00000000 =FFFFF7A0                  v_camera_pan:	equ $FFFFF7A0    ; Extended Camera - how far the camera/view is panned to the left or right of Sonic (2 bytes)
00000000                            
00000000 =FFFFF7A4                  v_obj31ypos:	equ $FFFFF7A4	; y-position of object 31 (MZ stomper) (2 bytes)
00000000 =FFFFF7A7                  v_bossstatus:	equ $FFFFF7A7	; status of boss and prison capsule (01 = boss defeated; 02 = prison opened)
00000000 =FFFFF7A8                  v_trackpos:	equ $FFFFF7A8	; position tracking reference number (2 bytes)
00000000 =FFFFF7A9                  v_trackbyte:	equ $FFFFF7A9	; low byte for position tracking
00000000 =FFFFF7AA                  f_lockscreen:	equ $FFFFF7AA	; flag set to lock screen during bosses
00000000 =FFFFF7AC                  v_256loop1:	equ $FFFFF7AC	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AD                  v_256loop2:	equ $FFFFF7AD	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AE                  v_256roll1:	equ $FFFFF7AE	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7AF                  v_256roll2:	equ $FFFFF7AF	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7B0                  v_lani0_frame:	equ $FFFFF7B0	; level graphics animation 0 - current frame
00000000 =FFFFF7B1                  v_lani0_time:	equ $FFFFF7B1	; level graphics animation 0 - time until next frame
00000000 =FFFFF7B2                  v_lani1_frame:	equ $FFFFF7B2	; level graphics animation 1 - current frame
00000000 =FFFFF7B3                  v_lani1_time:	equ $FFFFF7B3	; level graphics animation 1 - time until next frame
00000000 =FFFFF7B4                  v_lani2_frame:	equ $FFFFF7B4	; level graphics animation 2 - current frame
00000000 =FFFFF7B5                  v_lani2_time:	equ $FFFFF7B5	; level graphics animation 2 - time until next frame
00000000 =FFFFF7B6                  v_lani3_frame:	equ $FFFFF7B6	; level graphics animation 3 - current frame
00000000 =FFFFF7B7                  v_lani3_time:	equ $FFFFF7B7	; level graphics animation 3 - time until next frame
00000000 =FFFFF7B8                  v_lani4_frame:	equ $FFFFF7B8	; level graphics animation 4 - current frame
00000000 =FFFFF7B9                  v_lani4_time:	equ $FFFFF7B9	; level graphics animation 4 - time until next frame
00000000 =FFFFF7BA                  v_lani5_frame:	equ $FFFFF7BA	; level graphics animation 5 - current frame
00000000 =FFFFF7BB                  v_lani5_time:	equ $FFFFF7BB	; level graphics animation 5 - time until next frame
00000000 =FFFFF7BE                  v_gfxbigring:	equ $FFFFF7BE	; settings for giant ring graphics loading (2 bytes)
00000000 =FFFFF7C0                  f_conveyrev:	equ $FFFFF7C0	; flag set to reverse conveyor belts in LZ/SBZ
00000000 =FFFFF7C1                  v_obj63:		equ $FFFFF7C1	; object 63 (LZ/SBZ platforms) variables (6 bytes)
00000000 =FFFFF7C7                  f_wtunnelmode:	equ $FFFFF7C7	; LZ water tunnel mode
00000000 =FFFFF7C8                  f_lockmulti:	equ $FFFFF7C8	; flag set to lock controls, lock Sonic's position & animation
00000000 =FFFFF7C9                  f_wtunnelallow:	equ $FFFFF7C9	; LZ water tunnels (00 = enabled; 01 = disabled)
00000000 =FFFFF7CA                  f_jumponly:	equ $FFFFF7CA	; flag set to lock controls apart from jumping
00000000 =FFFFF7CB                  v_obj6B:		equ $FFFFF7CB	; object 6B (SBZ stomper) variable
00000000 =FFFFF7CC                  f_lockctrl:	equ $FFFFF7CC	; flag set to lock controls during ending sequence
00000000 =FFFFF7CD                  f_bigring:	equ $FFFFF7CD	; flag set when Sonic collects the giant ring
00000000 =FFFFF7D0                  v_itembonus:	equ $FFFFF7D0	; item bonus from broken enemies, blocks etc. (2 bytes)
00000000 =FFFFF7D2                  v_timebonus:	equ $FFFFF7D2	; time bonus at the end of an act (2 bytes)
00000000 =FFFFF7D4                  v_ringbonus:	equ $FFFFF7D4	; ring bonus at the end of an act (2 bytes)
00000000 =FFFFF7D6                  f_endactbonus:	equ $FFFFF7D6	; time/ring bonus update flag at the end of an act
00000000 =FFFFF7D7                  v_sonicend:	equ $FFFFF7D7	; routine counter for Sonic in the ending sequence
00000000 =FFFFF7D8                  v_lz_deform:	equ	$FFFFF7D8	; LZ deformtaion offset, in units of $80 (2 bytes)
00000000 =FFFFF7E0                  f_switch:	equ $FFFFF7E0	; flags set when Sonic stands on a switch ($10 bytes)
00000000 =FFFFF7F0                  v_scroll_block_1_size:	equ $FFFFF7F0	; (2 bytes)
00000000 =FFFFF7F2                  v_scroll_block_2_size:	equ $FFFFF7F2	; unused (2 bytes)
00000000 =FFFFF7F4                  v_scroll_block_3_size:	equ $FFFFF7F4	; unused (2 bytes)
00000000 =FFFFF7F6                  v_scroll_block_4_size:	equ $FFFFF7F6	; unused (2 bytes)
00000000                            
00000000 =FFFFF800                  v_spritetablebuffer:	equ $FFFFF800 ; sprite table ($280 bytes, last $80 bytes are overwritten by v_pal_water_dup)
00000000 =FFFFFA00                  v_pal_water_dup:	equ $FFFFFA00 ; duplicate underwater palette, used for transitions ($80 bytes)
00000000 =FFFFFA80                  v_pal_water:	equ $FFFFFA80	; main underwater palette ($80 bytes)
00000000 =FFFFFB00                  v_pal_dry:	equ $FFFFFB00	; main palette ($80 bytes)
00000000 =FFFFFB80                  v_pal_dry_dup:	equ $FFFFFB80	; duplicate palette, used for transitions ($80 bytes)
00000000 =FFFFFC00                  v_objstate:	equ $FFFFFC00	; object state list ($200 bytes)
00000000                            
00000000                            
00000000 =FFFFFE00                  v_systemstack:	equ $FFFFFE00
00000000 =FFFFFE02                  f_restart:	equ $FFFFFE02	; restart level flag (2 bytes)
00000000 =FFFFFE04                  v_framecount:	equ $FFFFFE04	; frame counter (adds 1 every frame) (2 bytes)
00000000 =FFFFFE05                  v_framebyte:	equ v_framecount+1; low byte for frame counter
00000000 =FFFFFE06                  v_debugitem:	equ $FFFFFE06	; debug item currently selected (NOT the object number of the item)
00000000 =FFFFFE08                  v_debuguse:	equ $FFFFFE08	; debug mode use & routine counter (when Sonic is a ring/item) (2 bytes)
00000000 =FFFFFE0A                  v_debugxspeed:	equ $FFFFFE0A	; debug mode - horizontal speed
00000000 =FFFFFE0B                  v_debugyspeed:	equ $FFFFFE0B	; debug mode - vertical speed
00000000 =FFFFFE0C                  v_vbla_count:	equ $FFFFFE0C	; vertical interrupt counter (adds 1 every VBlank) (4 bytes)
00000000 =FFFFFE0E                  v_vbla_word:	equ v_vbla_count+2 ; low word for vertical interrupt counter (2 bytes)
00000000 =FFFFFE0F                  v_vbla_byte:	equ v_vbla_word+1	; low byte for vertical interrupt counter
00000000 =FFFFFE10                  v_zone:		equ $FFFFFE10	; current zone number
00000000 =FFFFFE11                  v_act:		equ $FFFFFE11	; current act number
00000000 =FFFFFE12                  v_lives:		equ $FFFFFE12	; number of lives
00000000 =FFFFFE14                  v_air:		equ $FFFFFE14	; air remaining while underwater (2 bytes)
00000000 =FFFFFE15                  v_airbyte:	equ v_air+1	; low byte for air
00000000 =FFFFFE16                  v_lastspecial:	equ $FFFFFE16	; last special stage number
00000000 =FFFFFE18                  v_continues:	equ $FFFFFE18	; number of continues
00000000 =FFFFFE1A                  f_timeover:	equ $FFFFFE1A	; time over flag
00000000 =FFFFFE1B                  v_lifecount:	equ $FFFFFE1B	; lives counter value (for actual number, see "v_lives")
00000000 =FFFFFE1C                  f_lifecount:	equ $FFFFFE1C	; lives counter update flag
00000000 =FFFFFE1D                  f_ringcount:	equ $FFFFFE1D	; ring counter update flag
00000000 =FFFFFE1E                  f_timecount:	equ $FFFFFE1E	; time counter update flag
00000000 =FFFFFE1F                  f_scorecount:	equ $FFFFFE1F	; score counter update flag
00000000 =FFFFFE20                  v_rings:		equ $FFFFFE20	; rings (2 bytes)
00000000 =FFFFFE21                  v_ringbyte:	equ v_rings+1	; low byte for rings
00000000 =FFFFFE22                  v_time:		equ $FFFFFE22	; time (4 bytes)
00000000 =FFFFFE23                  v_timemin:	equ $FFFFFE23	; time - minutes
00000000 =FFFFFE24                  v_timesec:	equ $FFFFFE24	; time - seconds
00000000 =FFFFFE25                  v_timecent:	equ $FFFFFE25	; time - centiseconds
00000000 =FFFFFE26                  v_score:		equ $FFFFFE26	; score (4 bytes)
00000000 =FFFFFE2C                  v_shield:	equ $FFFFFE2C	; shield status (00 = no; 01 = yes)
00000000 =FFFFFE2D                  v_invinc:	equ $FFFFFE2D	; invinciblity status (00 = no; 01 = yes)
00000000 =FFFFFE2E                  v_shoes:		equ $FFFFFE2E	; speed shoes status (00 = no; 01 = yes)
00000000 =FFFFFE30                  v_lastlamp:	equ $FFFFFE30	; number of the last lamppost you hit
00000000 =FFFFFE32                  v_lamp_xpos:	equ v_lastlamp+2	; x-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE34                  v_lamp_ypos:	equ v_lastlamp+4	; y-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE36                  v_lamp_rings:	equ v_lastlamp+6	; rings stored at lamppost (2 bytes)
00000000 =FFFFFE38                  v_lamp_time:	equ v_lastlamp+8	; time stored at lamppost (2 bytes)
00000000 =FFFFFE3C                  v_lamp_dle:	equ v_lastlamp+$C	; dynamic level event routine counter at lamppost
00000000 =FFFFFE3E                  v_lamp_limitbtm:	equ v_lastlamp+$E	; level bottom boundary at lamppost (2 bytes)
00000000 =FFFFFE40                  v_lamp_scrx:	equ v_lastlamp+$10 ; x-axis screen at lamppost (2 bytes)
00000000 =FFFFFE42                  v_lamp_scry:	equ v_lastlamp+$12 ; y-axis screen at lamppost (2 bytes)
00000000                            
00000000 =FFFFFE50                  v_lamp_wtrpos:	equ v_lastlamp+$20 ; water position at lamppost (2 bytes)
00000000 =FFFFFE52                  v_lamp_wtrrout:	equ v_lastlamp+$22 ; water routine at lamppost
00000000 =FFFFFE53                  v_lamp_wtrstat:	equ v_lastlamp+$23 ; water state at lamppost
00000000 =FFFFFE54                  v_lamp_lives:	equ v_lastlamp+$24 ; lives counter at lamppost
00000000 =FFFFFE57                  v_emeralds:	equ $FFFFFE57	; number of chaos emeralds
00000000 =FFFFFE58                  v_emldlist:	equ $FFFFFE58	; which individual emeralds you have (00 = no; 01 = yes) (6 bytes)
00000000 =FFFFFE5E                  v_oscillate:	equ $FFFFFE5E	; values which oscillate - for swinging platforms, et al ($42 bytes)
00000000 =FFFFFEC0                  v_ani0_time:	equ $FFFFFEC0	; synchronised sprite animation 0 - time until next frame (used for synchronised animations)
00000000 =FFFFFEC1                  v_ani0_frame:	equ $FFFFFEC1	; synchronised sprite animation 0 - current frame
00000000 =FFFFFEC2                  v_ani1_time:	equ $FFFFFEC2	; synchronised sprite animation 1 - time until next frame
00000000 =FFFFFEC3                  v_ani1_frame:	equ $FFFFFEC3	; synchronised sprite animation 1 - current frame
00000000 =FFFFFEC4                  v_ani2_time:	equ $FFFFFEC4	; synchronised sprite animation 2 - time until next frame
00000000 =FFFFFEC5                  v_ani2_frame:	equ $FFFFFEC5	; synchronised sprite animation 2 - current frame
00000000 =FFFFFEC6                  v_ani3_time:	equ $FFFFFEC6	; synchronised sprite animation 3 - time until next frame
00000000 =FFFFFEC7                  v_ani3_frame:	equ $FFFFFEC7	; synchronised sprite animation 3 - current frame
00000000 =FFFFFEC8                  v_ani3_buf:	equ $FFFFFEC8	; synchronised sprite animation 3 - info buffer (2 bytes)
00000000 =FFFFFEC9                  v_ani4_frame:	equ $FFFFFEC9	; synchronised sprite animation 4 - current frame
00000000 =FFFFFEF0                  v_limittopdb:	equ $FFFFFEF0	; level upper boundary, buffered for debug mode (2 bytes)
00000000 =FFFFFEF2                  v_limitbtmdb:	equ $FFFFFEF2	; level bottom boundary, buffered for debug mode (2 bytes)
00000000                            
00000000 =FFFFFF10                  v_screenposx_dup:	equ $FFFFFF10	; screen position x (duplicate) (2 bytes)
00000000 =FFFFFF14                  v_screenposy_dup:	equ $FFFFFF14	; screen position y (duplicate) (2 bytes)
00000000 =FFFFFF18                  v_bgscreenposx_dup:	equ $FFFFFF18	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFFF1C                  v_bgscreenposy_dup:	equ $FFFFFF1C	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFFF20                  v_bg2screenposx_dup:	equ $FFFFFF20	; 2 bytes
00000000 =FFFFFF24                  v_bg2screenposy_dup:	equ $FFFFFF24	; 2 bytes
00000000 =FFFFFF28                  v_bg3screenposx_dup:	equ $FFFFFF28	; 2 bytes
00000000 =FFFFFF2C                  v_bg3screenposy_dup:	equ $FFFFFF2C	; 2 bytes
00000000 =FFFFFF30                  v_fg_scroll_flags_dup:	equ $FFFFFF30
00000000 =FFFFFF32                  v_bg1_scroll_flags_dup:	equ $FFFFFF32
00000000 =FFFFFF34                  v_bg2_scroll_flags_dup:	equ $FFFFFF34
00000000 =FFFFFF36                  v_bg3_scroll_flags_dup:	equ $FFFFFF36
00000000                            
00000000 =FFFFFF80                  v_levseldelay:	equ $FFFFFF80	; level select - time until change when up/down is held (2 bytes)
00000000 =FFFFFF82                  v_levselitem:	equ $FFFFFF82	; level select - item selected (2 bytes)
00000000 =FFFFFF84                  v_levselsound:	equ $FFFFFF84	; level select - sound selected (2 bytes)
00000000 =FFFFFFB0                  Title_screen_option:	equ $FFFFFFB0
00000000 =FFFFFFC0                  v_scorecopy:	equ $FFFFFFC0	; score, duplicate (4 bytes)
00000000 =FFFFFFC0                  v_scorelife:	equ $FFFFFFC0	; points required for an extra life (4 bytes) (JP1 only)
00000000 =FFFFFFE0                  f_levselcheat:	equ $FFFFFFE0	; level select cheat flag
00000000 =FFFFFFE1                  f_slomocheat:	equ $FFFFFFE1	; slow motion & frame advance cheat flag
00000000 =FFFFFFE2                  f_debugcheat:	equ $FFFFFFE2	; debug mode cheat flag
00000000 =FFFFFFE3                  f_creditscheat:	equ $FFFFFFE3	; hidden credits & press start cheat flag
00000000 =FFFFFFE4                  v_title_dcount:	equ $FFFFFFE4	; number of times the d-pad is pressed on title screen (2 bytes)
00000000 =FFFFFFE6                  v_title_ccount:	equ $FFFFFFE6	; number of times C is pressed on title screen (2 bytes)
00000000                            
00000000 =FFFFFFF0                  f_demo:		equ $FFFFFFF0	; demo mode flag (0 = no; 1 = yes; $8001 = ending) (2 bytes)
00000000 =FFFFFFF2                  v_demonum:	equ $FFFFFFF2	; demo level number (not the same as the level number) (2 bytes)
00000000 =FFFFFFF4                  v_creditsnum:	equ $FFFFFFF4	; credits index number (2 bytes)
00000000 =FFFFFFF8                  v_megadrive:	equ $FFFFFFF8	; Megadrive machine type
00000000 =FFFFFFFA                  f_debugmode:	equ $FFFFFFFA	; debug mode flag (sometimes 2 bytes)
00000000 =FFFFFFFC                  v_init:		equ $FFFFFFFC	; 'init' text string (4 bytes)
00000000                            
00000000 =FFFFF5C3                  f_emeraldm:	equ $FFFFF5C3
00000000 =FFFFF5C4                  v_tagwater:    	equ $FFFFF5C4   ; TIS  
00000000 =FFFFFF92                  v_watersplashpos:    equ $FFFFFF92    ; TIS
00000000 =FFFFFF94                  v_watersplashposlamp:    equ $FFFFFF94    ; TIS
00000000 =FFFFFF96                  v_tagwaterlamp:	equ $FFFFFF96    ; TIS
00000000                              
00000000 =00000039                  f_spindash	= $39
00000000 =FFFFF5C6                  v_Saved_music:	equ $FFFFF5C6
00000000 =FFFFF5C8                  v_rshield:	equ $FFFFF5C8	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5C9                  v_gshield:	equ $FFFFF5C9	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5CA                  v_spshield:	equ $FFFFF5CA	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5CD                  v_homingattack:	equ $FFFFF5CD
00000000                            
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000                            
00000000 =FFFFF5D8                  Super_Sonic_palette =        $FFFFF5D8
00000000 =FFFFF5DC                  Palette_frame =        $FFFFF5DC
00000000 =FFFFF5DE                  Palette_timer =        $FFFFF5DE
00000000 =FFFFF5CD                  Palette_Frame_Count =        $FFFFF5CD
00000000 =FFFFF670                  Super_Sonic_frame_count =    $FFFFF670
00000000 =FFFFFE19                  Super_Sonic_flag =        $FFFFFE19
00000000 =FFFFFE19                  Super_Sonic_flag =        $FFFFFE19
00000000                            	include	"Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reads ASCII strings and passes them to character generator
00000000                            ; ---------------------------------------------------------------------------
00000000                            asc        macro str
00000000                            ct =    0                            ; accumulates the total num of characters
00000000                                rept narg                        ; repeat for every argumeny
00000000                            lc =        0                        ; the position in the string
00000000                            
00000000                                dc.b strlen(\str)-1                    ; put the string length before the string itself
00000000                                rept strlen(\str)                    ; repeat for each character in string
00000000                            cc         substr lc+1,lc+1,\str                ; get a single character into cc
00000000                            arg =        '\cc'                        ; convert it to a character
00000000                                        char.b arg                ; put the character into the ROM (as byte)
00000000                            
00000000                            lc =        lc+1                        ; go to the next character
00000000                            ct =        ct+1                        ; increment character count
00000000                                    endr
00000000                                shift
00000000                                endr
00000000                                endm
00000000                            
00000000                            ; translates ASCII character to proper hex value
00000000                            char        macro c
00000000                                if c=' '
00000000                                    dc.\0 0                        ; example 1: single letters
00000000                            
00000000                                elseif c='*'
00000000                                    dc.\0 $1A                        ; example 1: single letters
00000000                            
00000000                                elseif (c>='0')&(c<='9')
00000000                                    dc.\0 \c-'0'+$20                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                elseif (c>='A')&(c<='Z')
00000000                                    dc.\0 \c-$41+$1E                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                else
00000000                                    dc.\0 \c                    ; example 3: any other character
00000000                                endif
00000000                                endm	
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            align:	macro
00000000                            	if (narg=1)
00000000                            	dcb.b \1-(*%\1),0
00000000                            	else
00000000                            	dcb.b \1-(*%\1),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),(vdp_control_port).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the VRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeVRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$4000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the CRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeCRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$C000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA fill VRAM with a value
00000000                            ; input: value, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            fillVRAM:	macro value,length,loc
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.w	#$8F01,(a5)
00000000                            		move.l	#$94000000+((length&$FF00)<<8)+$9300+(length&$FF),(a5)
00000000                            		move.w	#$9780,(a5)
00000000                            		move.l	#$40000080+((loc&$3FFF)<<16)+((loc&$C000)>>14),(a5)
00000000                            		move.w	#value,(vdp_data_port).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Copy a tilemap from 68K (ROM/RAM) to the VRAM without using DMA
00000000                            ; input: source, destination, width [cells], height [cells]
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            copyTilemap:	macro source,loc,width,height
00000000                            		lea	(source).l,a1
00000000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00000000                            		moveq	#width,d1
00000000                            		moveq	#height,d2
00000000                            		jsr	TilemapToVRAM
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; stop the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            stopZ80:	macro
00000000                            		move.w	#$100,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; wait for Z80 to stop
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            waitZ80:	macro
00000000                            	@wait:	btst	#0,(z80_bus_request).l
00000000                            		bne.s	@wait
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reset the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            resetZ80:	macro
00000000                            		move.w	#$100,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            resetZ80a:	macro
00000000                            		move.w	#0,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; start the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            startZ80:	macro
00000000                            		move.w	#0,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; disable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            disable_ints:	macro
00000000                            		move	#$2700,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; enable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            enable_ints:	macro
00000000                            		move	#$2300,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; long conditional jumps
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            jhi:		macro loc
00000000                            		bls.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcc:		macro loc
00000000                            		bcs.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jhs:		macro loc
00000000                            		jcc	loc
00000000                            		endm
00000000                            
00000000                            jls:		macro loc
00000000                            		bhi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcs:		macro loc
00000000                            		bcc.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlo:		macro loc
00000000                            		jcs	loc
00000000                            		endm
00000000                            
00000000                            jeq:		macro loc
00000000                            		bne.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jne:		macro loc
00000000                            		beq.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jgt:		macro loc
00000000                            		ble.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jge:		macro loc
00000000                            		blt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jle:		macro loc
00000000                            		bgt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlt:		macro loc
00000000                            		bge.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jpl:		macro loc
00000000                            		bmi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jmi:		macro loc
00000000                            		bpl.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; check if object moves out of range
00000000                            ; input: location to jump to if out of range, x-axis pos (obX(a0) by default)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            out_of_range:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0		; approx distance between object and screen
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.\0	exit
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; play a sound effect or music
00000000                            ; input: track, terminate routine, branch or jump, move operand size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            music:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd1).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound
00000000                            		      else
00000000                            			bra.w	PlaySound
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound).l
00000000                            		      else
00000000                            			jmp	(PlaySound).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            sfx:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd2).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound_Special
00000000                            		      else
00000000                            			bra.w	PlaySound_Special
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound_Special).l
00000000                            		      else
00000000                            			jmp	(PlaySound_Special).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; bankswitch between SRAM and ROM
00000000                            ; (remember to enable SRAM in the header first!)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            gotoSRAM:	macro
00000000                            		move.b  #1,($A130F1).l
00000000                            		endm
00000000                            
00000000                            gotoROM:	macro
00000000                            		move.b  #0,($A130F1).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; compare the size of an index with ZoneCount constant
00000000                            ; (should be used immediately after the index)
00000000                            ; input: index address, element size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            zonewarning:	macro loc,elementsize
00000000                            	@end:
00000000                            		if (@end-loc)-(ZoneCount*elementsize)<>0
00000000                            		inform 1,"Size of \loc ($%h) does not match ZoneCount ($\#ZoneCount).",(@end-loc)/elementsize
00000000                            		endc
00000000                            		endm
00000000                            		endm
00000000                            	include   "Debugger.asm"
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Error handling and debugging modules
00000000                            ; 2016-2017, Vladikcomper
00000000                            ; 2020 mod - AURORA FIELDS
00000000                            ; ---------------------------------------------------------------
00000000                            ; Debugging macros definitions file
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ----------------------------
00000000                            ; Arguments formatting flags
00000000                            ; ----------------------------
00000000                            
00000000                            ; General arguments format flags
00000000 =00000080                  hex		equ		$80				; flag to display as hexadecimal number
00000000 =00000090                  dec		equ		$90				; flag to display as decimal number
00000000 =000000A0                  bin		equ		$A0				; flag to display as binary number
00000000 =000000B0                  sym		equ		$B0				; flag to display as symbol (treat as offset, decode into symbol +displacement, if present)
00000000 =000000C0                  symdisp		equ		$C0				; flag to display as symbol's displacement alone (DO NOT USE, unless complex formatting is required, see notes below)
00000000 =000000DF                  str		equ		$DF				; flag to display as string (treat as offset, insert string from that offset)
00000000 =000000D0                  asm		equ		$D0				; flag to display as code (treat as offset, decode from that offset)
00000000                            
00000000                            ; NOTES:
00000000                            ;	* By default, the "sym" flag displays both symbol and displacement (e.g.: "Map_Sonic+$2E")
00000000                            ;		In case, you need a different formatting for the displacement part (different text color and such),
00000000                            ;		use "sym|split", so the displacement won't be displayed until symdisp is met
00000000                            ;	* The "symdisp" can only be used after the "sym|split" instance, which decodes offset, otherwise, it'll
00000000                            ;		display a garbage offset.
00000000                            ;	* No other argument format flags (hex, dec, bin, str) are allowed between "sym|split" and "symdisp",
00000000                            ;		otherwise, the "symdisp" results are undefined.
00000000                            ;	* When using "str" flag, the argument should point to string offset that will be inserted.
00000000                            ;		Arguments format flags CAN NOT be used in the string (as no arguments are meant to be here),
00000000                            ;		only console control flags (see below).
00000000                            ;	* The "asm" flag will use "setpat" flag to switch text color, and will reset pattern to normal again.
00000000                            ;		you must reapply any pattern you used before yourself.
00000000                            ;	* The "asm" flag will overwrite $FF0000-$FF0080, so be careful when viewing RAM.
00000000                            
00000000                            
00000000                            ; Additional flags ...
00000000                            ; ... for number formatters (hex, dec, bin)
00000000 =00000008                  signed	equ		8				; treat number as signed (display + or - before the number depending on sign)
00000000                            
00000000                            ; ... for symbol formatter (sym)
00000000 =00000008                  split	equ		8				; DO NOT write displacement (if present), skip and wait for "symdisp" flag to write it later (optional)
00000000 =00000004                  forced	equ		4				; display "<unknown>" if symbol was not found, otherwise, plain offset is displayed by the displacement formatter
00000000                            
00000000                            ; ... for symbol displacement formatter (symdisp)
00000000 =00000008                  weak	equ		8				; DO NOT write plain offset if symbol is displayed as "<unknown>"
00000000                            
00000000                            ; Argument type flags:
00000000                            ; - DO NOT USE in formatted strings processed by macros, as these are included automatically
00000000                            ; - ONLY USE when writting down strings manually with DC.B
00000000 =00000000                  byte	equ		0
00000000 =00000001                  word	equ		1
00000000 =00000003                  long	equ		3
00000000                            
00000000                            ; -----------------------
00000000                            ; Console control flags
00000000                            ; -----------------------
00000000                            
00000000                            ; Plain control flags: no arguments following
00000000 =000000E0                  endl	equ		$E0				; "End of line": flag for line break
00000000 =000000E6                  cr	equ		$E6				; "Carriage return": jump to the beginning of the line
00000000 =000000E8                  pal0	equ		$E8				; use palette line #0
00000000 =000000EA                  pal1	equ		$EA				; use palette line #1
00000000 =000000EC                  pal2	equ		$EC				; use palette line #2
00000000 =000000EE                  pal3	equ		$EE				; use palette line #3
00000000                            
00000000                            ; Parametrized control flags: followed by 1-byte argument
00000000 =000000F0                  setw	equ		$F0				; set line width: number of characters before automatic line break
00000000 =000000F4                  setoff	equ		$F4				; set tile offset: lower byte of base pattern, which points to tile index of ASCII character 00
00000000 =000000F8                  setpat	equ		$F8				; set tile pattern: high byte of base pattern, which determines palette flags and $100-tile section id
00000000 =000000FA                  setx	equ		$FA				; set x-position
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            RaiseError &
00000000                            
00000000                            	pea	*(pc)
00000000                            	move.w	sr, -(sp)
00000000                            	__FSTRING_GenerateArgumentsCode \string
00000000                            	jsr		ErrorHandler
00000000                            	__FSTRING_GenerateDecodedString \string
00000000                            	if strlen("\console_program")						; if console program offset is specified ...
00000000                            		dc.b	\opts+_eh_enter_console|(((*&1)^1)*_eh_align_offset)	; add flag "_eh_align_offset" if the next byte is at odd offset ...
00000000                            		even								; ... to tell Error handler to skip this byte, so it'll jump to ...
00000000                            		jmp	\console_program					; ... an aligned "jmp" instruction that calls console program itself
00000000                            	else
00000000                            		dc.b	\opts+0							; otherwise, just specify \opts for error handler, +0 will generate dc.b 0 ...
00000000                            		even								; ... in case \opts argument is empty or skipped
00000000                            	endc
00000000                            	even
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            Console &
00000000                            
00000000                            	if strcmp("\0","write")|strcmp("\0","writeline")
00000000                            		move.w	sr, -(sp)
00000000                            		__FSTRING_GenerateArgumentsCode \1
00000000                            		movem.l	a0-a2/d7, -(sp)
00000000                            		if (__sp>0)
00000000                            			lea	4*4(sp), a2
00000000                            		endc
00000000                            		lea	@str\@(pc), a1
00000000                            		jsr	ErrorHandler.__global__console_\0\_formatted
00000000                            		movem.l	(sp)+, a0-a2/d7
00000000                            		if (__sp>8)
00000000                            			lea	__sp(sp), sp
00000000                            		elseif (__sp>0)
00000000                            			addq.w	#__sp, sp
00000000                            		endc
00000000                            		move.w	(sp)+, sr
00000000                            		bra.w	@instr_end\@
00000000                            	@str\@:
00000000                            		__FSTRING_GenerateDecodedString \1
00000000                            		even
00000000                            	@instr_end\@:
00000000                            
00000000                            	elseif strcmp("\0","run")
00000000                            		jsr	ErrorHandler.__extern__console_only
00000000                            		jsr	\1
00000000                            		bra.s	*
00000000                            
00000000                            	elseif strcmp("\0","setxy")
00000000                            		move.w	sr, -(sp)
00000000                            		movem.l	d0-d1, -(sp)
00000000                            		move.w	\2, -(sp)
00000000                            		move.w	\1, -(sp)
00000000                            		jsr	ErrorHandler.__global__console_setposasxy_stack
00000000                            		addq.w	#4, sp
00000000                            		movem.l	(sp)+, d0-d1
00000000                            		move.w	(sp)+, sr
00000000                            
00000000                            	elseif strcmp("\0","breakline")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr	ErrorHandler.__global__console_startnewline
00000000                            		move.w	(sp)+, sr
00000000                            
00000000                            	else
00000000                            		inform	2,"""\0"" isn't a member of ""Console"""
00000000                            
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __ErrorMessage &
00000000                            		__FSTRING_GenerateArgumentsCode \string
00000000                            		jsr		ErrorHandler
00000000                            		__FSTRING_GenerateDecodedString \string
00000000                            		dc.b	\opts+0
00000000                            		even
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateArgumentsCode &
00000000                            
00000000                            	__pos:	set 	instr(\string,'%<')				; token position
00000000                            	__stack:set	0						; size of actual stack
00000000                            	__sp:	set	0						; stack displacement
00000000                            
00000000                            	; Parse string itself
00000000                            	while (__pos)
00000000                            
00000000                            		; Retrive expression in brackets following % char
00000000                                	__endpos:	set	instr(__pos+1,\string,'>')
00000000                                	__midpos:	set	instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__substr:	substr	__pos+1+1,__endpos-1,\string		; .type ea param
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string		; .type
00000000                            
00000000                            		; Expression is an effective address (e.g. %(.w d0 hex) )
00000000                            		if "\__type">>8="."
00000000                            			__operand:	substr	__pos+1+1,__midpos-1,\string	; .type ea
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string	; param
00000000                            
00000000                            			if "\__type"=".b"
00000000                            				pushp	"move\__operand\,1(sp)"
00000000                            				pushp	"subq.w	#2, sp"
00000000                            				__stack: = __stack+2
00000000                            				__sp: = __sp+2
00000000                            
00000000                            			elseif "\__type"=".w"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+2
00000000                            
00000000                            			elseif "\__type"=".l"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+4
00000000                            
00000000                            			else
00000000                            				fatal 'Unrecognized type in string operand: %<\__substr>'
00000000                            			endc
00000000                            		endc
00000000                            
00000000                            		__pos:	set	instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            
00000000                            	; Generate stack code
00000000                            	rept __stack
00000000                            		popp	__command
00000000                            		\__command
00000000                            	endr
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateDecodedString &
00000000                            
00000000                            	__lpos:	set	1						; start position
00000000                            	__pos:	set 	instr(\string,'%<')				; token position
00000000                            
00000000                            	while (__pos)
00000000                            
00000000                            		; Write part of string before % token
00000000                            		__substr:	substr	__lpos,__pos-1,\string
00000000                            		dc.b	"\__substr"
00000000                            
00000000                            		; Retrive expression in brakets following % char
00000000                                	__endpos:	set		instr(__pos+1,\string,'>')
00000000                                	__midpos:	set		instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string		; .type
00000000                            
00000000                            		; Expression is an effective address (e.g. %<.w d0 hex> )
00000000                            		if "\__type">>8="."
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string	; param
00000000                            			if strlen("\__param")<1
00000000                            				__param: substr ,,"hex"			; if param is ommited, set it to "hex"
00000000                            			endc
00000000                            			if "\__type"=".b"
00000000                            				dc.b	\__param
00000000                            			elseif "\__type"=".w"
00000000                            				dc.b	\__param|1
00000000                            			else
00000000                            				dc.b	\__param|3
00000000                            			endc
00000000                            
00000000                            		; Expression is an inline constant (e.g. %<endl> )
00000000                            		else
00000000                            			__substr:	substr	__pos+1+1,__endpos-1,\string
00000000                            			dc.b	\__substr
00000000                            		endc
00000000                            
00000000                            		__lpos:	set	__endpos+1
00000000                            		__pos:	set	instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            
00000000                            	; Write part of string before the end
00000000                            	__substr:	substr	__lpos,,\string
00000000                            	dc.b	"\__substr"
00000000                            	dc.b	0
00000000                            	endm
00000000                            	endm
00000000                            	
00000000 =00000000                  EnableSRAM:	equ 0	; change to 1 to enable SRAM
00000000 =00000001                  BackupSRAM:	equ 1
00000000 =00000003                  AddressSRAM:	equ 3	; 0 = odd+even; 2 = even only; 3 = odd only
00000000                            
00000000                            ; Change to 0 to build the original version of the game, dubbed REV00
00000000                            ; Change to 1 to build the later vesion, dubbed REV01, which includes various bugfixes and enhancements
00000000                            ; Change to 2 to build the version from Sonic Mega Collection, dubbed REVXB, which fixes the infamous "spike bug"
00000000 =00000002                  Revision:	equ 2
00000000                            
00000000 =00000006                  ZoneCount:	equ 6	; discrete zones are: GHZ, MZ, SYZ, LZ, SLZ, and SBZ
00000000                            
00000000 =00000000                  OptimiseSound:	equ 0	; change to 1 to optimise sound queuing
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00                  Vectors:	dc.l v_systemstack&$FFFFFF	; Initial stack pointer value
00000004 0000 0000                  		dc.l EntryPoint			; Start of program
00000008 0000 0000                  		dc.l BusError			; Bus error
0000000C 0000 0000                  		dc.l AddressError		; Address error (4)
00000010 0000 0000                  		dc.l IllegalInstr		; Illegal instruction
00000014 0000 0000                  		dc.l ZeroDivide			; Division by zero
00000018 0000 0000                  		dc.l ChkInstr			; CHK exception
0000001C 0000 0000                  		dc.l TrapvInstr			; TRAPV exception (8)
00000020 0000 0000                  		dc.l PrivilegeViol		; Privilege violation
00000024 0000 0000                  		dc.l Trace				; TRACE exception
00000028 0000 0000                  		dc.l Line1010Emu		; Line-A emulator
0000002C 0000 0000                  		dc.l Line1111Emu		; Line-F emulator (12)
00000030 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000034 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000038 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000003C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (16)
00000040 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000044 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000048 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000004C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (20)
00000050 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000054 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000058 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000005C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (24)
00000060 0000 0000                  		dc.l ErrorExcept		; Spurious exception
00000064 0000 0000                  		dc.l ErrorTrap			; IRQ level 1
00000068 0000 0000                  		dc.l ErrorTrap			; IRQ level 2
0000006C 0000 0000                  		dc.l ErrorTrap			; IRQ level 3 (28)
00000070 0000 0000                  		dc.l HBlank				; IRQ level 4 (horizontal retrace interrupt)
00000074 0000 0000                  		dc.l ErrorTrap			; IRQ level 5
00000078 0000 0000                  		dc.l VBlank				; IRQ level 6 (vertical retrace interrupt)
0000007C 0000 0000                  		dc.l ErrorTrap			; IRQ level 7 (32)
00000080 0000 0000                  		dc.l ErrorTrap			; TRAP #00 exception
00000084 0000 0000                  		dc.l ErrorTrap			; TRAP #01 exception
00000088 0000 0000                  		dc.l ErrorTrap			; TRAP #02 exception
0000008C 0000 0000                  		dc.l ErrorTrap			; TRAP #03 exception (36)
00000090 0000 0000                  		dc.l ErrorTrap			; TRAP #04 exception
00000094 0000 0000                  		dc.l ErrorTrap			; TRAP #05 exception
00000098 0000 0000                  		dc.l ErrorTrap			; TRAP #06 exception
0000009C 0000 0000                  		dc.l ErrorTrap			; TRAP #07 exception (40)
000000A0 0000 0000                  		dc.l ErrorTrap			; TRAP #08 exception
000000A4 0000 0000                  		dc.l ErrorTrap			; TRAP #09 exception
000000A8 0000 0000                  		dc.l ErrorTrap			; TRAP #10 exception
000000AC 0000 0000                  		dc.l ErrorTrap			; TRAP #11 exception (44)
000000B0 0000 0000                  		dc.l ErrorTrap			; TRAP #12 exception
000000B4 0000 0000                  		dc.l ErrorTrap			; TRAP #13 exception
000000B8 0000 0000                  		dc.l ErrorTrap			; TRAP #14 exception
000000BC 0000 0000                  		dc.l ErrorTrap			; TRAP #15 exception (48)
000000C0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000CC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000DC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000E0                            loc_E0:
000000E0                            		; Relocated code from Spik_Hurt. REVXB was a nasty hex-edit.
000000E0 2628 000C                  		move.l	obY(a0),d3
000000E4 3028 0012                  		move.w	obVelY(a0),d0
000000E8 48C0                       		ext.l	d0
000000EA E180                       		asl.l	#8,d0
000000EC 4EF9 0000 0000             		jmp	(loc_D5A2).l
000000F2                            
000000F2 0000                       		dc.w ErrorTrap
000000F4 0000 0000                  		dc.l ErrorTrap
000000F8 0000 0000                  		dc.l ErrorTrap
000000FC 0000 0000                  		dc.l ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console1:	dc.b "SEGA MEGA DRIVE " ; Hardware system ID (Console name)
00000110 2843 2953 4547 4120 3139+  Date:		dc.b "(C)SEGA 1991.APR" ; Copyright holder and release date (generally year)
00000120 534F 4E49 4320 5355 4E56+  Title_Local:	dc.b "SONIC SUNVENTURE                                " ; Domestic name
00000150 534F 4E49 4320 5355 4E56+  Title_Int:	dc.b "SONIC SUNVENTURE                                " ; International name
00000180 474D 2030 3030 3034 3034+  			dc.b "GM 00004049-01" ; Serial/version number (Rev non-0)
0000018E 0000                       Checksum: dc.w $0
00000190 4A20 2020 2020 2020 2020+  		dc.b "J               " ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; Start address of ROM
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; End address of ROM
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; Start address of RAM
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; End address of RAM
000001B0 2020 2020                  		dc.l $20202020
000001B4 2020 2020                  		dc.l $20202020		; SRAM start ($200001)
000001B8 2020 2020                  		dc.l $20202020		; SRAM end ($20xxxx)
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b "                                                    " ; Notes (unused, anything can be put in this space, but it has to be 52 bytes.)
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b "JUE             " ; Region (Country code)
00000200                            EndOfHeader:
00000200                            
00000200                            ; ===========================================================================
00000200                            ; Crash/Freeze the 68000. Unlike Sonic 2, Sonic 1 uses the 68000 for playing music, so it stops too
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	(z80_port_1_control).l ; test port A & B control registers
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	(z80_expansion_control).l ; test port C control register
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	SkipSetup ; Skip the VDP and Z80 setup code if port A, B or C is ok...?
00000216 4BFA 0000                  		lea	SetupValues(pc),a5	; Load setup values array address.
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version (from $A10001)
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity	; If the console has no TMSS, skip the security stuff.
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1) ; move "SEGA" to TMSS register ($A14000)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0	; clear write-pending flag in VDP to prevent issues if the 68k has been reset in the middle of writing a command long word to the VDP.
00000236 7000                       		moveq	#0,d0	; clear d0
00000238 2C40                       		movea.l	d0,a6	; clear a6
0000023A 4E66                       		move.l	a6,usp	; set usp to $0
0000023C                            
0000023C 7217                       		moveq	#$17,d1
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248                            		
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the VRAM
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254                            
00000254 7425                       		moveq	#$25,d2
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C                            		
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)	; clear 4 bytes of RAM
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; repeat until the entire RAM is clear
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment mode
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C                            
0000026C 761F                       		moveq	#$1F,d3	; set repeat times
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)	; clear 2 palettes
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; repeat until the entire CRAM is clear
00000274 289D                       		move.l	(a5)+,(a4)	; set VDP to VSRAM write
00000276                            
00000276 7813                       		moveq	#$13,d4
00000278                            ClrVSRAMLoop:
00000278 2680                       		move.l	d0,(a3)	; clear 4 bytes of VSRAM.
0000027A 51CC FFFC                  		dbf	d4,ClrVSRAMLoop	; repeat until the entire VSRAM is clear
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop	; repeat for other channels
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear all registers
0000028E 46FC 2700                  		disable_ints
00000292                            
00000292                            SkipSetup:
00000292 6000                       		bra.s	GameProgram	; begin game
00000294                            
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; VDP register start number
00000296 3FFF                       		dc.w $3FFF		; size of RAM/4
00000298 0100                       		dc.w $100		; VDP register diff
0000029A                            
0000029A 00A0 0000                  		dc.l z80_ram		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l z80_bus_request	; Z80 bus request
000002A2 00A1 1200                  		dc.l z80_reset		; Z80 reset
000002A6 00C0 0000                  		dc.l vdp_data_port	; VDP data
000002AA 00C0 0004                  		dc.l vdp_control_port	; VDP control
000002AE                            
000002AE 04                         		dc.b 4			; VDP $80 - 8-colour mode
000002AF 14                         		dc.b $14		; VDP $81 - Megadrive mode, DMA enable
000002B0 30                         		dc.b ($C000>>10)	; VDP $82 - foreground nametable address
000002B1 3C                         		dc.b ($F000>>10)	; VDP $83 - window nametable address
000002B2 07                         		dc.b ($E000>>13)	; VDP $84 - background nametable address
000002B3 6C                         		dc.b ($D800>>9)		; VDP $85 - sprite table address
000002B4 00                         		dc.b 0			; VDP $86 - unused
000002B5 00                         		dc.b 0			; VDP $87 - background colour
000002B6 00                         		dc.b 0			; VDP $88 - unused
000002B7 00                         		dc.b 0			; VDP $89 - unused
000002B8 FF                         		dc.b 255		; VDP $8A - HBlank register
000002B9 00                         		dc.b 0			; VDP $8B - full screen scroll
000002BA 81                         		dc.b $81		; VDP $8C - 40 cell display
000002BB 37                         		dc.b ($DC00>>10)	; VDP $8D - hscroll table address
000002BC 00                         		dc.b 0			; VDP $8E - unused
000002BD 01                         		dc.b 1			; VDP $8F - VDP increment
000002BE 01                         		dc.b 1			; VDP $90 - 64 cell hscroll size
000002BF 00                         		dc.b 0			; VDP $91 - window h position
000002C0 00                         		dc.b 0			; VDP $92 - window v position
000002C1 FFFF                       		dc.w $FFFF		; VDP $93/94 - DMA length
000002C3 0000                       		dc.w 0			; VDP $95/96 - DMA source
000002C5 80                         		dc.b $80		; VDP $97 - DMA fill VRAM
000002C6 4000 0080                  		dc.l $40000080		; VRAM address 0
000002CA                            
000002CA AF                         		dc.b $AF		; xor	a
000002CB 01D9 1F                    		dc.b $01, $D9, $1F	; ld	bc,1fd9h
000002CE 1127 00                    		dc.b $11, $27, $00	; ld	de,0027h
000002D1 2126 00                    		dc.b $21, $26, $00	; ld	hl,0026h
000002D4 F9                         		dc.b $F9		; ld	sp,hl
000002D5 77                         		dc.b $77		; ld	(hl),a
000002D6 EDB0                       		dc.b $ED, $B0		; ldir
000002D8 DDE1                       		dc.b $DD, $E1		; pop	ix
000002DA FDE1                       		dc.b $FD, $E1		; pop	iy
000002DC ED47                       		dc.b $ED, $47		; ld	i,a
000002DE ED4F                       		dc.b $ED, $4F		; ld	r,a
000002E0 D1                         		dc.b $D1		; pop	de
000002E1 E1                         		dc.b $E1		; pop	hl
000002E2 F1                         		dc.b $F1		; pop	af
000002E3 08                         		dc.b $08		; ex	af,af'
000002E4 D9                         		dc.b $D9		; exx
000002E5 C1                         		dc.b $C1		; pop	bc
000002E6 D1                         		dc.b $D1		; pop	de
000002E7 E1                         		dc.b $E1		; pop	hl
000002E8 F1                         		dc.b $F1		; pop	af
000002E9 F9                         		dc.b $F9		; ld	sp,hl
000002EA F3                         		dc.b $F3		; di
000002EB ED56                       		dc.b $ED, $56		; im1
000002ED 36E9                       		dc.b $36, $E9		; ld	(hl),e9h
000002EF E9                         		dc.b $E9		; jp	(hl)
000002F0                            
000002F0 8104                       		dc.w $8104		; VDP display mode
000002F2 8F02                       		dc.w $8F02		; VDP increment
000002F4 C000 0000                  		dc.l $C0000000		; CRAM write mode
000002F8 4000 0010                  		dc.l $40000010		; VSRAM address 0
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	(vdp_control_port).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',(v_init).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#EndOfHeader,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            	@loop:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bhs.s	@loop
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare checksum in header to ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E                            
0000033E                            	CheckSumOk:
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            	@clearRAM:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($FE00-$FFFF)
0000034E                            
0000034E 1039 00A1 0001             		move.b	(z80_version).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,(v_megadrive).w ; get region setting
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',(v_init).w ; set flag so checksum won't run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            	@clearRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($0000-$FDFF)
00000376 4EB9 0000 0000                     jsr	(InitDMAQueue).l	
0000037C 6100 0000                  		bsr.w	VDPSetupGame
00000380 6100 0000                  		bsr.w	SoundDriverLoad
00000384 6100 0000                  		bsr.w	JoypadInit
00000388 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set Game Mode to Sega Screen
0000038E                            
0000038E                            MainGameLoop:
0000038E 4EB9 0000 0000             		jsr		ReadJoypads
00000394 1038 F600                  		move.b	(v_gamemode).w,d0 ; load Game Mode
00000398 0240 007C                  		andi.w	#$7C,d0	; limit Game Mode value to $1C max (change to a maximum of 7C to add more game modes)
0000039C 207B 0000                  		movea.l	GameModeArray(pc,d0.w),a0 ; jump to apt location in ROM
000003A0 4E90                       		jsr		(a0)
000003A2 60EA                       		bra.s	MainGameLoop	; loop indefinitely
000003A4                            ; ===========================================================================
000003A4                            ; ---------------------------------------------------------------------------
000003A4                            ; Main game mode array
000003A4                            ; ---------------------------------------------------------------------------
000003A4                            
000003A4                            GameModeArray:
000003A4 0000 0000                  ptr_GM_Sega:		dc.l	GM_Sega		; Sega Screen ($00)
000003A8 0000 0000                  ptr_GM_Title:		dc.l	GM_Title	; Title	Screen ($04)
000003AC 0000 0000                  ptr_GM_Demo:		dc.l	GM_Level	; Demo Mode ($08)
000003B0 0000 0000                  ptr_GM_Level:		dc.l	GM_Level	; Normal Level ($0C)
000003B4 0000 0000                  ptr_GM_Special:		dc.l	GM_Special	; Special Stage	($10)
000003B8 0000 0000                  ptr_GM_Cont:		dc.l	GM_Continue	; Continue Screen ($14)
000003BC 0000 0000                  ptr_GM_Ending:		dc.l	GM_Ending	; End of game sequence ($18)
000003C0 0000 0000                  ptr_GM_Credits:		dc.l	GM_Credits	; Credits ($1C)
000003C4 0000 0000                  ptr_GM_MenuScreen:	dc.l	MenuScreen	; Credits ($20)
000003C8 4E75                       		rts	
000003CA                            ; ===========================================================================
000003CA                            
000003CA                            CheckSumError:
000003CA 6100 0000                  		bsr.w	VDPSetupGame
000003CE 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
000003D8 7E3F                       		moveq	#$3F,d7
000003DA                            
000003DA                            	@fillred:
000003DA 33FC 000E 00C0 0000        		move.w	#cRed,(vdp_data_port).l ; fill palette with red
000003E2 51CF FFF6                  		dbf	d7,@fillred	; repeat $3F more times
000003E6                            
000003E6                            	@endlessloop:
000003E6 60FE                       		bra.s	@endlessloop
000003E8                            ; ===========================================================================
000003E8                            
000003E8                            
000003E8                            ; ===========================================================================
000003E8                            
000003E8                            loc_43A:
000003E8 46FC 2700                  		disable_ints
000003EC 544F                       		addq.w	#2,sp
000003EE 21DF FC40                  		move.l	(sp)+,(v_spbuffer).w
000003F2 544F                       		addq.w	#2,sp
000003F4 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
000003FA 6100 0000                  		bsr.w	ShowErrorMessage
000003FE 202F 0002                  		move.l	2(sp),d0
00000402 6100 0000                  		bsr.w	ShowErrorValue
00000406 2038 FC40                  		move.l	(v_spbuffer).w,d0
0000040A 6100 0000                  		bsr.w	ShowErrorValue
0000040E 6000                       		bra.s	loc_478
00000410                            ; ===========================================================================
00000410                            
00000410                            loc_462:
00000410 46FC 2700                  		disable_ints
00000414 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
0000041A 6100 0000                  		bsr.w	ShowErrorMessage
0000041E 202F 0002                  		move.l	2(sp),d0
00000422 6100 0000                  		bsr.w	ShowErrorValue
00000426                            
00000426                            loc_478:
00000426 6100 0000                  		bsr.w	ErrorWaitForC
0000042A 4CF8 FFFF FC00             		movem.l	(v_regbuffer).w,d0-a7
00000430 46FC 2300                  		enable_ints
00000434 4E73                       		rte	
00000436                            
00000436                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000436                            
00000436                            
00000436                            ShowErrorMessage:
00000436 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00000446 41F9 0000 0000             		lea	(Art_Text).l,a0
0000044C 323C 027F                  		move.w	#$27F,d1
00000450                            	@loadgfx:
00000450 3C98                       		move.w	(a0)+,(a6)
00000452 51C9 FFFC                  		dbf	d1,@loadgfx
00000456                            
00000456 7000                       		moveq	#0,d0		; clear	d0
00000458 1038 FC44                  		move.b	(v_errortype).w,d0 ; load error code
0000045C 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000460 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
0000046E 7212                       		moveq	#$12,d1		; number of characters (minus 1)
00000470                            
00000470                            	@showchars:
00000470 7000                       		moveq	#0,d0
00000472 1018                       		move.b	(a0)+,d0
00000474 0640 0790                  		addi.w	#$790,d0
00000478 3C80                       		move.w	d0,(a6)
0000047A 51C9 FFF4                  		dbf	d1,@showchars	; repeat for number of characters
0000047E 4E75                       		rts	
00000480                            ; End of function ShowErrorMessage
00000480                            
00000480                            ; ===========================================================================
00000480 0000 0000                  ErrorText:	dc.w @exception-ErrorText, @bus-ErrorText
00000484 0000 0000                  		dc.w @address-ErrorText, @illinstruct-ErrorText
00000488 0000 0000                  		dc.w @zerodivide-ErrorText, @chkinstruct-ErrorText
0000048C 0000 0000                  		dc.w @trapv-ErrorText, @privilege-ErrorText
00000490 0000 0000                  		dc.w @trace-ErrorText, @line1010-ErrorText
00000494 0000                       		dc.w @line1111-ErrorText
00000496 4552 524F 5220 4558 4345+  @exception:	dc.b "ERROR EXCEPTION    "
000004A9 4255 5320 4552 524F 5220+  @bus:		dc.b "BUS ERROR          "
000004BC 4144 4452 4553 5320 4552+  @address:	dc.b "ADDRESS ERROR      "
000004CF 494C 4C45 4741 4C20 494E+  @illinstruct:	dc.b "ILLEGAL INSTRUCTION"
000004E2 4045 524F 2044 4956 4944+  @zerodivide:	dc.b "@ERO DIVIDE        "
000004F5 4348 4B20 494E 5354 5255+  @chkinstruct:	dc.b "CHK INSTRUCTION    "
00000508 5452 4150 5620 494E 5354+  @trapv:		dc.b "TRAPV INSTRUCTION  "
0000051B 5052 4956 494C 4547 4520+  @privilege:	dc.b "PRIVILEGE VIOLATION"
0000052E 5452 4143 4520 2020 2020+  @trace:		dc.b "TRACE              "
00000541 4C49 4E45 2031 3031 3020+  @line1010:	dc.b "LINE 1010 EMULATOR "
00000554 4C49 4E45 2031 3131 3120+  @line1111:	dc.b "LINE 1111 EMULATOR "
00000568 00                         		even
00000568                            
00000568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000568                            
00000568                            
00000568                            ShowErrorValue:
00000568 3CBC 07CA                  		move.w	#$7CA,(a6)	; display "$" symbol
0000056C 7407                       		moveq	#7,d2
0000056E                            
0000056E                            	@loop:
0000056E E998                       		rol.l	#4,d0
00000570 6100                       		bsr.s	@shownumber	; display 8 numbers
00000572 51CA FFFA                  		dbf	d2,@loop
00000576 4E75                       		rts	
00000578                            ; End of function ShowErrorValue
00000578                            
00000578                            
00000578                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000578                            
00000578                            
00000578                            @shownumber:
00000578 3200                       		move.w	d0,d1
0000057A 0241 000F                  		andi.w	#$F,d1
0000057E 0C41 000A                  		cmpi.w	#$A,d1
00000582 6500                       		blo.s	@chars0to9
00000584 5E41                       		addq.w	#7,d1		; add 7 for characters A-F
00000586                            
00000586                            	@chars0to9:
00000586 0641 07C0                  		addi.w	#$7C0,d1
0000058A 3C81                       		move.w	d1,(a6)
0000058C 4E75                       		rts	
0000058E                            ; End of function sub_5CA
0000058E                            
0000058E                            
0000058E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000058E                            
0000058E                            
0000058E                            ErrorWaitForC:
0000058E 6100 0000                  		bsr.w	ReadJoypads
00000592 0C38 0020 F605             		cmpi.b	#btnC,(v_jpadpress1).w ; is button C pressed?
00000598 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000059C 4E75                       		rts	
0000059E                            ; End of function ErrorWaitForC
0000059E                            
0000059E                            ; ===========================================================================
0000059E                            
0000059E                            Art_Text:	incbin	"artunc\menutext.bin" ; text used in level select and debug mode
00000ABE                            		even
00000ABE                            
00000ABE                            ; ---------------------------------------------------------------------------
00000ABE                            ; Vertical interrupt
00000ABE                            ; ---------------------------------------------------------------------------
00000ABE                            
00000ABE                            VBlank:
00000ABE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AC2 4A38 F62A                  		tst.b	(v_vbla_routine).w
00000AC6 6700                       		beq.s	VBla_00
00000AC8 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000ACE 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00000AD8 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l ; send screen y-axis pos. to VSRAM
00000AE0 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000AE6 6700                       		beq.s	@notPAL		; if not, branch
00000AE8                            
00000AE8 303C 0700                  		move.w	#$700,d0
00000AEC                            	@waitPAL:
00000AEC 51C8 FFFE                  		dbf	d0,@waitPAL ; wait here in a loop doing nothing for a while...
00000AF0                            
00000AF0                            	@notPAL:
00000AF0 1038 F62A                  		move.b	(v_vbla_routine).w,d0
00000AF4 11FC 0000 F62A             		move.b	#0,(v_vbla_routine).w
00000AFA 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w
00000B00 0240 003E                  		andi.w	#$3E,d0
00000B04 303B 0000                  		move.w	VBla_Index(pc,d0.w),d0
00000B08 4EBB 0000                  		jsr	VBla_Index(pc,d0.w)
00000B0C                            
00000B0C                            VBla_Music:
00000B0C 4EB9 0000 0000             		jsr	(UpdateMusic).l
00000B12                            
00000B12                            VBla_Exit:
00000B12 52B8 FE0C                  		addq.l	#1,(v_vbla_count).w
00000B16 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B1A 4E73                       		rte	
00000B1C                            ; ===========================================================================
00000B1C 0000 0000                  VBla_Index:	dc.w VBla_00-VBla_Index, VBla_02-VBla_Index
00000B20 0000 0000                  		dc.w VBla_04-VBla_Index, VBla_06-VBla_Index
00000B24 0000 0000                  		dc.w VBla_08-VBla_Index, VBla_0A-VBla_Index
00000B28 0000 0000                  		dc.w VBla_0C-VBla_Index, VBla_0E-VBla_Index
00000B2C 0000 0000                  		dc.w VBla_10-VBla_Index, VBla_12-VBla_Index
00000B30 0000 0000                  		dc.w VBla_14-VBla_Index, VBla_16-VBla_Index
00000B34 0000                       		dc.w VBla_0C-VBla_Index
00000B36                            ; ===========================================================================
00000B36                            
00000B36                            VBla_00:
00000B36 0C38 0000 F600             		cmpi.b	#$80+id_Level,(v_gamemode).w
00000B3C 6700                       		beq.s	@islevel
00000B3E 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w ; is game on a level?
00000B44 6600 FFC6                  		bne.w	VBla_Music	; if not, branch
00000B48                            
00000B48                            	@islevel:
00000B48 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ ?
00000B4E 6600 FFBC                  		bne.w	VBla_Music	; if not, branch
00000B52                            
00000B52 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000B58 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000B5E 6700                       		beq.s	@notPAL		; if not, branch
00000B60                            
00000B60 303C 0700                  		move.w	#$700,d0
00000B64                            	@waitPAL:
00000B64 51C8 FFFE                  		dbf	d0,@waitPAL
00000B68                            
00000B68                            	@notPAL:
00000B68 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w ; set HBlank flag
00000B6E 33FC 0100 00A1 1100        		stopZ80
00000B76 0839 0000 00A1 1100 66F6   		waitZ80
00000B80 4A38 F64E                  		tst.b	(f_wtr_state).w	; is water above top of screen?
00000B84 6600                       		bne.s	@waterabove 	; if yes, branch
00000B86                            
00000B86 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000BAA 6000                       		bra.s	@waterbelow
00000BAC                            
00000BAC                            @waterabove:
00000BAC 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000BD0                            
00000BD0                            	@waterbelow:
00000BD0 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000BD4 33FC 0000 00A1 1100        		startZ80
00000BDC 6000 FF2E                  		bra.w	VBla_Music
00000BE0                            ; ===========================================================================
00000BE0                            
00000BE0                            VBla_02:
00000BE0 6100 0000                  		bsr.w	sub_106E
00000BE4                            
00000BE4                            VBla_14:
00000BE4 4A78 F614                  		tst.w	(v_demolength).w
00000BE8 6700 0000                  		beq.w	@end
00000BEC 5378 F614                  		subq.w	#1,(v_demolength).w
00000BF0                            
00000BF0                            	@end:
00000BF0 4E75                       		rts	
00000BF2                            ; ===========================================================================
00000BF2                            
00000BF2                            VBla_04:
00000BF2 6100 0000                  		bsr.w	sub_106E
00000BF6 6100 0000                  		bsr.w	LoadTilesAsYouMove_BGOnly
00000BFA 4EB9 0000 0000             		jsr 	ProcessDMAQueue		
00000C00 6100 0000                  		bsr.w	sub_1642
00000C04 4A78 F614                  		tst.w	(v_demolength).w
00000C08 6700 0000                  		beq.w	@end
00000C0C 5378 F614                  		subq.w	#1,(v_demolength).w
00000C10                            
00000C10                            	@end:
00000C10 4E75                       		rts	
00000C12                            ; ===========================================================================
00000C12                            
00000C12                            VBla_06:
00000C12 6100 0000                  		bsr.w	sub_106E
00000C16 4E75                       		rts	
00000C18                            ; ===========================================================================
00000C18                            
00000C18                            VBla_10:
00000C18 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game on special stage?
00000C1E 6700 0000                  		beq.w	VBla_0A		; if yes, branch
00000C22                            
00000C22                            VBla_08:
00000C22 33FC 0100 00A1 1100        		stopZ80
00000C2A 0839 0000 00A1 1100 66F6   		waitZ80
00000C34 6100 0000                  		bsr.w	ReadJoypads
00000C38 4A38 F64E                  		tst.b	(f_wtr_state).w
00000C3C 6600                       		bne.s	@waterabove
00000C3E                            
00000C3E 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000C62 6000                       		bra.s	@waterbelow
00000C64                            
00000C64                            @waterabove:
00000C64 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000C88                            
00000C88                            	@waterbelow:
00000C88 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000C8C                            
00000C8C 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000CB0 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000CD4 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000CDA                            
00000CDA                            	@nochg:
00000CDA 33FC 0000 00A1 1100        		startZ80
00000CE2 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000CE8 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000CEE 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000CF4 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000CFA 0C38 0060 F625             		cmpi.b	#96,(v_hbla_line).w
00000D00 6400                       		bhs.s	Demo_Time
00000D02 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D08 588F                       		addq.l	#4,sp
00000D0A 6000 FE06                  		bra.w	VBla_Exit
00000D0E                            
00000D0E                            ; ---------------------------------------------------------------------------
00000D0E                            ; Subroutine to	run a demo for an amount of time
00000D0E                            ; ---------------------------------------------------------------------------
00000D0E                            
00000D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D0E                            
00000D0E                            
00000D0E                            Demo_Time:
00000D0E 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D12 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000D18 4EB9 0000 0000             		jsr	(HUD_Update).l
00000D1E 6100 0000                  		bsr.w	ProcessDPLC2
00000D22 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00000D26 6700 0000                  		beq.w	@end		; if not, branch
00000D2A 5378 F614                  		subq.w	#1,(v_demolength).w ; subtract 1 from time left
00000D2E                            
00000D2E                            	@end:
00000D2E 4E75                       		rts	
00000D30                            ; End of function Demo_Time
00000D30                            
00000D30                            ; ===========================================================================
00000D30                            
00000D30                            VBla_0A:
00000D30 33FC 0100 00A1 1100        		stopZ80
00000D38 0839 0000 00A1 1100 66F6   		waitZ80
00000D42 6100 0000                  		bsr.w	ReadJoypads
00000D46 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000D6A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000D8E 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000DB2 33FC 0000 00A1 1100        		startZ80
00000DBA 6100 0000                  		bsr.w	PalCycle_SS
00000DBE 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000DC4                            
00000DC4                            	@nochg:
00000DC4 4A78 F614                  		tst.w	(v_demolength).w	; is there time left on the demo?
00000DC8 6700 0000                  		beq.w	@end	; if not, return
00000DCC 5378 F614                  		subq.w	#1,(v_demolength).w	; subtract 1 from time left in demo
00000DD0                            
00000DD0                            	@end:
00000DD0 4E75                       		rts	
00000DD2                            ; ===========================================================================
00000DD2                            
00000DD2                            VBla_0C:
00000DD2 33FC 0100 00A1 1100        		stopZ80
00000DDA 0839 0000 00A1 1100 66F6   		waitZ80
00000DE4 6100 0000                  		bsr.w	ReadJoypads
00000DE8 4A38 F64E                  		tst.b	(f_wtr_state).w
00000DEC 6600                       		bne.s	@waterabove
00000DEE                            
00000DEE 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000E12 6000                       		bra.s	@waterbelow
00000E14                            
00000E14                            @waterabove:
00000E14 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000E38                            
00000E38                            	@waterbelow:
00000E38 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000E3C 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000E60 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000E84 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000E8A                            
00000E8A                            	@nochg:
00000E8A 33FC 0000 00A1 1100        		startZ80
00000E92 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000E98 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000E9E 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000EA4 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000EAA 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000EAE 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000EB4 4EB9 0000 0000             		jsr	(HUD_Update).l
00000EBA 6100 0000                  		bsr.w	sub_1642
00000EBE 4E75                       		rts	
00000EC0                            ; ===========================================================================
00000EC0                            
00000EC0                            VBla_0E:
00000EC0 6100 0000                  		bsr.w	sub_106E
00000EC4 5238 F628                  		addq.b	#1,($FFFFF628).w
00000EC8 11FC 000E F62A             		move.b	#$E,(v_vbla_routine).w
00000ECE 4E75                       		rts	
00000ED0                            ; ===========================================================================
00000ED0                            
00000ED0                            VBla_12:
00000ED0 6100 0000                  		bsr.w	sub_106E
00000ED4 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000ED8 6000 0000                  		bra.w	sub_1642
00000EDC                            ; ===========================================================================
00000EDC                            
00000EDC                            VBla_16:
00000EDC 33FC 0100 00A1 1100        		stopZ80
00000EE4 0839 0000 00A1 1100 66F6   		waitZ80
00000EEE 6100 0000                  		bsr.w	ReadJoypads
00000EF2 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000F16 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000F3A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000F5E 33FC 0000 00A1 1100        		startZ80
00000F66 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000F6C                            	@nochg:
00000F6C 4A78 F614                  		tst.w	(v_demolength).w
00000F70 6700 0000                  		beq.w	@end
00000F74 5378 F614                  		subq.w	#1,(v_demolength).w
00000F78                            
00000F78                            	@end:
00000F78 4E75                       		rts	
00000F7A                            
00000F7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F7A                            
00000F7A                            
00000F7A                            sub_106E:
00000F7A 33FC 0100 00A1 1100        		stopZ80
00000F82 0839 0000 00A1 1100 66F6   		waitZ80
00000F8C 6100 0000                  		bsr.w	ReadJoypads
00000F90 4A38 F64E                  		tst.b	(f_wtr_state).w ; is water above top of screen?
00000F94 6600                       		bne.s	@waterabove	; if yes, branch
00000F96 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000FBA 6000                       		bra.s	@waterbelow
00000FBC                            
00000FBC                            	@waterabove:
00000FBC 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000FE0                            
00000FE0                            	@waterbelow:
00000FE0 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00001004 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00001028 33FC 0000 00A1 1100        		startZ80
00001030 4E75                       		rts	
00001032                            ; End of function sub_106E
00001032                            
00001032                            ; ---------------------------------------------------------------------------
00001032                            ; Horizontal interrupt
00001032                            ; ---------------------------------------------------------------------------
00001032                            
00001032                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001032                            
00001032                            
00001032                            HBlank:
00001032 46FC 2700                  		disable_ints
00001036 4A78 F644                  		tst.w	(f_hbla_pal).w	; is palette set to change?
0000103A 6700                       		beq.s	@nochg		; if not, branch
0000103C 31FC 0000 F644             		move.w	#0,(f_hbla_pal).w
00001042 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001046 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
0000104C 41F8 FA80                  		lea	(v_pal_water).w,a0 ; get palette from RAM
00001050 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001058 2298                       		move.l	(a0)+,(a1)	; move palette to CRAM
0000105A 2298                       		move.l	(a0)+,(a1)
0000105C 2298                       		move.l	(a0)+,(a1)
0000105E 2298                       		move.l	(a0)+,(a1)
00001060 2298                       		move.l	(a0)+,(a1)
00001062 2298                       		move.l	(a0)+,(a1)
00001064 2298                       		move.l	(a0)+,(a1)
00001066 2298                       		move.l	(a0)+,(a1)
00001068 2298                       		move.l	(a0)+,(a1)
0000106A 2298                       		move.l	(a0)+,(a1)
0000106C 2298                       		move.l	(a0)+,(a1)
0000106E 2298                       		move.l	(a0)+,(a1)
00001070 2298                       		move.l	(a0)+,(a1)
00001072 2298                       		move.l	(a0)+,(a1)
00001074 2298                       		move.l	(a0)+,(a1)
00001076 2298                       		move.l	(a0)+,(a1)
00001078 2298                       		move.l	(a0)+,(a1)
0000107A 2298                       		move.l	(a0)+,(a1)
0000107C 2298                       		move.l	(a0)+,(a1)
0000107E 2298                       		move.l	(a0)+,(a1)
00001080 2298                       		move.l	(a0)+,(a1)
00001082 2298                       		move.l	(a0)+,(a1)
00001084 2298                       		move.l	(a0)+,(a1)
00001086 2298                       		move.l	(a0)+,(a1)
00001088 2298                       		move.l	(a0)+,(a1)
0000108A 2298                       		move.l	(a0)+,(a1)
0000108C 2298                       		move.l	(a0)+,(a1)
0000108E 2298                       		move.l	(a0)+,(a1)
00001090 2298                       		move.l	(a0)+,(a1)
00001092 2298                       		move.l	(a0)+,(a1)
00001094 2298                       		move.l	(a0)+,(a1)
00001096 2298                       		move.l	(a0)+,(a1)
00001098 337C 8ADF 0004             		move.w	#$8A00+223,4(a1) ; reset HBlank register
0000109E 4CDF 0300                  		movem.l	(sp)+,a0-a1
000010A2 4A38 F64F                  		tst.b	($FFFFF64F).w
000010A6 6600                       		bne.s	loc_119E
000010A8                            
000010A8                            	@nochg:
000010A8 4E73                       		rte	
000010AA                            ; ===========================================================================
000010AA                            
000010AA                            loc_119E:
000010AA 4238 F64F                  		clr.b	($FFFFF64F).w
000010AE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000010B2 6100 FC5A                  		bsr.w	Demo_Time
000010B6 4EB9 0000 0000             		jsr	(UpdateMusic).l
000010BC 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000010C0 4E73                       		rte	
000010C2                            ; End of function HBlank
000010C2                            
000010C2                            ; ---------------------------------------------------------------------------
000010C2                            ; Subroutine to	initialise joypads
000010C2                            ; ---------------------------------------------------------------------------
000010C2                            
000010C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010C2                            
000010C2                            
000010C2                            JoypadInit:
000010C2 33FC 0100 00A1 1100        		stopZ80
000010CA 0839 0000 00A1 1100 66F6   		waitZ80
000010D4 7040                       		moveq	#$40,d0
000010D6 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000010DC 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000010E2 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (expansion/extra)
000010E8 33FC 0000 00A1 1100        		startZ80
000010F0 4E75                       		rts	
000010F2                            ; End of function JoypadInit
000010F2                            
000010F2                            ; ---------------------------------------------------------------------------
000010F2                            ; Subroutine to	read joypad input, and send it to the RAM
000010F2                            ; ---------------------------------------------------------------------------
000010F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010F2                            
000010F2                            
000010F2                            ReadJoypads:
000010F2 41F8 F604                  		lea	(v_jpadhold1).w,a0 ; address where joypad states are written
000010F6 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000010FC 6100                       		bsr.s	@read		; do the first joypad
000010FE 5449                       		addq.w	#2,a1		; do the second	joypad
00001100                            
00001100                            	@read:
00001100 12BC 0000                  		move.b	#0,(a1)
00001104 4E71                       		nop	
00001106 4E71                       		nop	
00001108 1011                       		move.b	(a1),d0
0000110A E508                       		lsl.b	#2,d0
0000110C 0200 00C0                  		andi.b	#$C0,d0
00001110 12BC 0040                  		move.b	#$40,(a1)
00001114 4E71                       		nop	
00001116 4E71                       		nop	
00001118 1211                       		move.b	(a1),d1
0000111A 0201 003F                  		andi.b	#$3F,d1
0000111E 8001                       		or.b	d1,d0
00001120 4600                       		not.b	d0
00001122 1210                       		move.b	(a0),d1
00001124 B101                       		eor.b	d0,d1
00001126 10C0                       		move.b	d0,(a0)+
00001128 C200                       		and.b	d0,d1
0000112A 10C1                       		move.b	d1,(a0)+
0000112C 4E75                       		rts	
0000112E                            ; End of function ReadJoypads
0000112E                            
0000112E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000112E                            
0000112E                            
0000112E                            VDPSetupGame:
0000112E 41F9 00C0 0004             		lea	(vdp_control_port).l,a0
00001134 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
0000113A 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001140 7E12                       		moveq	#$12,d7
00001142                            
00001142                            	@setreg:
00001142 309A                       		move.w	(a2)+,(a0)
00001144 51CF FFFC                  		dbf	d7,@setreg	; set the VDP registers
00001148                            
00001148 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
0000114E 31C0 F60C                  		move.w	d0,(v_vdp_buffer1).w
00001152 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w	; H-INT every 224th scanline
00001158 7000                       		moveq	#0,d0
0000115A 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
00001164 3E3C 003F                  		move.w	#$3F,d7
00001168                            
00001168                            	@clrCRAM:
00001168 3280                       		move.w	d0,(a1)
0000116A 51CF FFFC                  		dbf	d7,@clrCRAM	; clear	the CRAM
0000116E                            
0000116E 42B8 F616                  		clr.l	(v_scrposy_dup).w
00001172 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00001176 2F01                       		move.l	d1,-(sp)
00001178 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFFF,0
0000119A                            
0000119A                            	@waitforDMA:
0000119A 3215                       		move.w	(a5),d1
0000119C 0801 0001                  		btst	#1,d1		; is DMA (fillVRAM) still running?
000011A0 66F8                       		bne.s	@waitforDMA	; if yes, branch
000011A2                            
000011A2 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment size
000011A6 221F                       		move.l	(sp)+,d1
000011A8 4E75                       		rts	
000011AA                            ; End of function VDPSetupGame
000011AA                            
000011AA                            ; ===========================================================================
000011AA 8004                       VDPSetupArray:	dc.w $8004		; 8-colour mode
000011AC 8134                       		dc.w $8134		; enable V.interrupts, enable DMA
000011AE 8230                       		dc.w $8200+(vram_fg>>10) ; set foreground nametable address
000011B0 8328                       		dc.w $8300+($A000>>10)	; set window nametable address
000011B2 8407                       		dc.w $8400+(vram_bg>>13) ; set background nametable address
000011B4 857C                       		dc.w $8500+(vram_sprites>>9) ; set sprite table address
000011B6 8600                       		dc.w $8600		; unused
000011B8 8700                       		dc.w $8700		; set background colour (palette entry 0)
000011BA 8800                       		dc.w $8800		; unused
000011BC 8900                       		dc.w $8900		; unused
000011BE 8A00                       		dc.w $8A00		; default H.interrupt register
000011C0 8B00                       		dc.w $8B00		; full-screen vertical scrolling
000011C2 8C81                       		dc.w $8C81		; 40-cell display mode
000011C4 8D3F                       		dc.w $8D00+(vram_hscroll>>10) ; set background hscroll address
000011C6 8E00                       		dc.w $8E00		; unused
000011C8 8F02                       		dc.w $8F02		; set VDP increment size
000011CA 9001                       		dc.w $9001		; 64-cell hscroll size
000011CC 9100                       		dc.w $9100		; window horizontal position
000011CE 9200                       		dc.w $9200		; window vertical position
000011D0                            
000011D0                            ; ---------------------------------------------------------------------------
000011D0                            ; Subroutine to	clear the screen
000011D0                            ; ---------------------------------------------------------------------------
000011D0                            
000011D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011D0                            
000011D0                            
000011D0                            ClearScreen:
000011D0 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_fg ; clear foreground namespace
000011F2                            
000011F2                            	@wait1:
000011F2 3215                       		move.w	(a5),d1
000011F4 0801 0001                  		btst	#1,d1
000011F8 66F8                       		bne.s	@wait1
000011FA                            
000011FA 3ABC 8F02                  		move.w	#$8F02,(a5)
000011FE 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_bg ; clear background namespace
00001220                            
00001220                            	@wait2:
00001220 3215                       		move.w	(a5),d1
00001222 0801 0001                  		btst	#1,d1
00001226 66F8                       		bne.s	@wait2
00001228                            
00001228 3ABC 8F02                  		move.w	#$8F02,(a5)
0000122C 42B8 F616                  		clr.l	(v_scrposy_dup).w
00001230 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00001234                            
00001234 43F8 F800                  		lea	(v_spritetablebuffer).w,a1
00001238 7000                       		moveq	#0,d0
0000123A 323C 00A0                  		move.w	#($280/4),d1	; This should be ($280/4)-1, leading to a slight bug (first bit of v_pal_water is cleared)
0000123E                            
0000123E                            	@clearsprites:
0000123E 22C0                       		move.l	d0,(a1)+
00001240 51C9 FFFC                  		dbf	d1,@clearsprites ; clear sprite table (in RAM)
00001244                            
00001244 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00001248 7000                       		moveq	#0,d0
0000124A 323C 0100                  		move.w	#($400/4),d1	; This should be ($400/4)-1, leading to a slight bug (first bit of the Sonic object's RAM is cleared)
0000124E                            
0000124E                            	@clearhscroll:
0000124E 22C0                       		move.l	d0,(a1)+
00001250 51C9 FFFC                  		dbf	d1,@clearhscroll ; clear hscroll table (in RAM)
00001254 4E75                       		rts	
00001256                            ; End of function ClearScreen
00001256                            
00001256                            ; ---------------------------------------------------------------------------
00001256                            ; Subroutine to	load the sound driver
00001256                            ; ---------------------------------------------------------------------------
00001256                            
00001256                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001256                            
00001256                            
00001256                            SoundDriverLoad:
00001256 4E71                       		nop	
00001258 33FC 0100 00A1 1100        		stopZ80
00001260 33FC 0100 00A1 1200        		resetZ80
00001268 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000126E 43F9 00A0 0000             		lea	(z80_ram).l,a1	; target Z80 RAM
00001274 6100 0000                  		bsr.w	KosDec		; decompress
00001278 33FC 0000 00A1 1200        		resetZ80a
00001280 4E71                       		nop	
00001282 4E71                       		nop	
00001284 4E71                       		nop	
00001286 4E71                       		nop	
00001288 33FC 0100 00A1 1200        		resetZ80
00001290 33FC 0000 00A1 1100        		startZ80
00001298 4E75                       		rts	
0000129A                            ; End of function SoundDriverLoad
0000129A                            
0000129A                            		include	"_incObj\sub PlaySound.asm"
0000129A                            ; ---------------------------------------------------------------------------
0000129A                            ; Subroutine to	play a music track
0000129A                            
0000129A                            ; input:
0000129A                            ;	d0 = track to play
0000129A                            ; ---------------------------------------------------------------------------
0000129A                            
0000129A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000129A                            
0000129A                            
0000129A                            PlaySound:
0000129A 11C0 F00A                  		move.b	d0,(v_snddriver_ram+v_soundqueue0).w
0000129E 4E75                       		rts	
000012A0                            ; End of function PlaySound
000012A0                            
000012A0                            ; ---------------------------------------------------------------------------
000012A0                            ; Subroutine to	play a sound effect
000012A0                            ; ---------------------------------------------------------------------------
000012A0                            
000012A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012A0                            
000012A0                            
000012A0                            PlaySound_Special:
000012A0 11C0 F00B                  		move.b	d0,(v_snddriver_ram+v_soundqueue1).w
000012A4 4E75                       		rts	
000012A6                            ; End of function PlaySound_Special
000012A6                            
000012A6                            ; ===========================================================================
000012A6                            ; ---------------------------------------------------------------------------
000012A6                            ; Unused sound/music subroutine
000012A6                            ; ---------------------------------------------------------------------------
000012A6                            
000012A6                            PlaySound_Unused:
000012A6 11C0 F00C                  		move.b	d0,(v_snddriver_ram+v_soundqueue2).w
000012AA 4E75                       		rts	
000012AA 4E75                       		rts	
000012AC                            		include	"_inc\PauseGame.asm"
000012AC                            ; ---------------------------------------------------------------------------
000012AC                            ; Subroutine to	pause the game
000012AC                            ; ---------------------------------------------------------------------------
000012AC                            
000012AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012AC                            
000012AC                            
000012AC                            PauseGame:
000012AC 4E71                       		nop	
000012AE 4A38 FE12                  		tst.b	(v_lives).w	; do you have any lives	left?
000012B2 6700                       		beq.s	Unpause		; if not, branch
000012B4 4A78 F63A                  		tst.w	(f_pause).w	; is game already paused?
000012B8 6600                       		bne.s	Pause_StopGame	; if yes, branch
000012BA 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
000012C0 6700                       		beq.s	Pause_DoNothing	; if not, branch
000012C2                            
000012C2                            Pause_StopGame:
000012C2 31FC 0001 F63A             		move.w	#1,(f_pause).w	; freeze time
000012C8 11FC 0001 F003             		move.b	#1,(v_snddriver_ram+f_pausemusic).w ; pause music
000012CE                            
000012CE                            Pause_Loop:
000012CE 11FC 0010 F62A             		move.b	#$10,(v_vbla_routine).w
000012D4 6100 0000                  		bsr.w	WaitForVBla
000012D8 4A38 FFE1                  		tst.b	(f_slomocheat).w ; is slow-motion cheat on?
000012DC 6700                       		beq.s	Pause_ChkStart	; if not, branch
000012DE 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
000012E4 6700                       		beq.s	Pause_ChkBC	; if not, branch
000012E6 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; set game mode to 4 (title screen)
000012EC 4E71                       		nop	
000012EE 6000                       		bra.s	Pause_EndMusic
000012F0                            ; ===========================================================================
000012F0                            
000012F0                            Pause_ChkBC:
000012F0 0838 0004 F604             		btst	#bitB,(v_jpadhold1).w ; is button B pressed?
000012F6 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000012F8 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000012FE 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001300                            
00001300                            Pause_ChkStart:
00001300 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00001306 67C6                       		beq.s	Pause_Loop	; if not, branch
00001308                            
00001308                            Pause_EndMusic:
00001308 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; unpause the music
0000130E                            
0000130E                            Unpause:
0000130E 31FC 0000 F63A             		move.w	#0,(f_pause).w	; unpause the game
00001314                            
00001314                            Pause_DoNothing:
00001314 4E75                       		rts	
00001316                            ; ===========================================================================
00001316                            
00001316                            Pause_SlowMo:
00001316 31FC 0001 F63A             		move.w	#1,(f_pause).w
0000131C 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; Unpause the music
00001322 4E75                       		rts	
00001324                            ; End of function PauseGame
00001324                            ; End of function PauseGame
00001324                            
00001324                            ; ---------------------------------------------------------------------------
00001324                            ; Subroutine to	copy a tile map from RAM to VRAM namespace
00001324                            
00001324                            ; input:
00001324                            ;	a1 = tile map address
00001324                            ;	d0 = VRAM address
00001324                            ;	d1 = width (cells)
00001324                            ;	d2 = height (cells)
00001324                            ; ---------------------------------------------------------------------------
00001324                            
00001324                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001324                            
00001324                            
00001324                            TilemapToVRAM:
00001324 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000132A 283C 0080 0000             		move.l	#$800000,d4
00001330                            
00001330                            	Tilemap_Line:
00001330 2D40 0004                  		move.l	d0,4(a6)	; move d0 to VDP_control_port
00001334 3601                       		move.w	d1,d3
00001336                            
00001336                            	Tilemap_Cell:
00001336 3C99                       		move.w	(a1)+,(a6)	; write value to namespace
00001338 51CB FFFC                  		dbf	d3,Tilemap_Cell	; next tile
0000133C D084                       		add.l	d4,d0		; goto next line
0000133E 51CA FFF0                  		dbf	d2,Tilemap_Line	; next line
00001342 4E75                       		rts	
00001344                            ; End of function TilemapToVRAM
00001344                            
00001344                            		include	"_inc\Nemesis Decompression.asm"
00001344                            ; ==============================================================================
00001344                            ; ------------------------------------------------------------------------------
00001344                            ; Nemesis decompression routine
00001344                            ; ------------------------------------------------------------------------------
00001344                            ; Optimized by vladikcomper
00001344                            ; ------------------------------------------------------------------------------
00001344                             
00001344                            NemDec_RAM:
00001344 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001348 47FA 0000                      lea NemDec_WriteRowToRAM(pc),a3
0000134C 6000                           bra.s   NemDec_Main
0000134E                             
0000134E                            ; ------------------------------------------------------------------------------
0000134E                            NemDec:
0000134E 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001352 49F9 00C0 0000                 lea $C00000,a4      ; load VDP Data Port     
00001358 47FA 0000                      lea NemPCD_WriteRowToVDP(pc),a3
0000135C                             
0000135C                            NemDec_Main:
0000135C 43F8 AA00                      lea $FFFFAA00,a1        ; load Nemesis decompression buffer
00001360 3418                           move.w  (a0)+,d2        ; get number of patterns
00001362 6A00                           bpl.s   @0          ; are we in Mode 0?
00001364 47EB 000A                      lea $A(a3),a3       ; if not, use Mode 1
00001368 E74A                       @0  lsl.w   #3,d2
0000136A 3A42                           movea.w d2,a5
0000136C 7607                           moveq   #7,d3
0000136E 7400                           moveq   #0,d2
00001370 7800                           moveq   #0,d4
00001372 6100 0000                      bsr.w   NemDec_BuildCodeTable
00001376 1A18                           move.b  (a0)+,d5        ; get first byte of compressed data
00001378 E145                           asl.w   #8,d5           ; shift up by a byte
0000137A 1A18                           move.b  (a0)+,d5        ; get second byte of compressed data
0000137C 3C3C 0010                      move.w  #$10,d6         ; set initial shift value
00001380 6100                           bsr.s   NemDec2
00001382 4CDF 7BFF                      movem.l (sp)+,d0-a1/a3-a6
00001386 4E75                           rts
00001388                             
00001388                            ; ---------------------------------------------------------------------------
00001388                            ; Part of the Nemesis decompressor, processes the actual compressed data
00001388                            ; ---------------------------------------------------------------------------
00001388                             
00001388                            NemDec2:
00001388 3E06                           move.w  d6,d7
0000138A 5147                           subq.w  #8,d7           ; get shift value
0000138C 3205                           move.w  d5,d1
0000138E EE69                           lsr.w   d7,d1           ; shift so that high bit of the code is in bit position 7
00001390 0C01 00FC                      cmpi.b  #%11111100,d1       ; are the high 6 bits set?
00001394 6400                           bcc.s   NemDec_InlineData   ; if they are, it signifies inline data
00001396 0241 00FF                      andi.w  #$FF,d1
0000139A D241                           add.w   d1,d1
0000139C 9C31 1000                      sub.b   (a1,d1.w),d6        ; ~~ subtract from shift value so that the next code is read next time around
000013A0 0C46 0009                      cmpi.w  #9,d6           ; does a new byte need to be read?
000013A4 6400                           bcc.s   @0          ; if not, branch
000013A6 5046                           addq.w  #8,d6
000013A8 E145                           asl.w   #8,d5
000013AA 1A18                           move.b  (a0)+,d5        ; read next byte
000013AC 1231 1001                  @0  move.b  1(a1,d1.w),d1
000013B0 3001                           move.w  d1,d0
000013B2 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
000013B6 0240 00F0                      andi.w  #$F0,d0
000013BA                             
000013BA                            NemDec_GetRepeatCount:
000013BA E848                           lsr.w   #4,d0           ; get repeat count
000013BC                             
000013BC                            NemDec_WritePixel:
000013BC E98C                           lsl.l   #4,d4           ; shift up by a nybble
000013BE 8801                           or.b    d1,d4           ; write pixel
000013C0 51CB 0000                      dbf d3,NemDec_WritePixelLoop; ~~
000013C4 4ED3                           jmp (a3)            ; otherwise, write the row to its destination
000013C6                            ; ---------------------------------------------------------------------------
000013C6                             
000013C6                            NemPCD_NewRow:
000013C6 7800                           moveq   #0,d4           ; reset row
000013C8 7607                           moveq   #7,d3           ; reset nybble counter
000013CA                             
000013CA                            NemDec_WritePixelLoop:
000013CA 51C8 FFF0                      dbf d0,NemDec_WritePixel
000013CE 60B8                           bra.s   NemDec2
000013D0                            ; ---------------------------------------------------------------------------
000013D0                             
000013D0                            NemDec_InlineData:
000013D0 5D46                           subq.w  #6,d6           ; 6 bits needed to signal inline data
000013D2 0C46 0009                      cmpi.w  #9,d6
000013D6 6400                           bcc.s   @0
000013D8 5046                           addq.w  #8,d6
000013DA E145                           asl.w   #8,d5
000013DC 1A18                           move.b  (a0)+,d5
000013DE 5F46                       @0  subq.w  #7,d6           ; and 7 bits needed for the inline data itself
000013E0 3205                           move.w  d5,d1
000013E2 EC69                           lsr.w   d6,d1           ; shift so that low bit of the code is in bit position 0
000013E4 3001                           move.w  d1,d0
000013E6 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
000013EA 0240 0070                      andi.w  #$70,d0         ; high nybble is repeat count for pixel
000013EE 0C46 0009                      cmpi.w  #9,d6
000013F2 64C6                           bcc.s   NemDec_GetRepeatCount
000013F4 5046                           addq.w  #8,d6
000013F6 E145                           asl.w   #8,d5
000013F8 1A18                           move.b  (a0)+,d5
000013FA 60BE                           bra.s   NemDec_GetRepeatCount
000013FC                             
000013FC                            ; ---------------------------------------------------------------------------
000013FC                            ; Subroutines to output decompressed entry
000013FC                            ; Selected depending on current decompression mode
000013FC                            ; ---------------------------------------------------------------------------
000013FC                             
000013FC                            NemPCD_WriteRowToVDP:
000013FC                            loc_1502:
000013FC 2884                           move.l  d4,(a4)         ; write 8-pixel row
000013FE 534D                           subq.w  #1,a5
00001400 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
00001402 66C2                           bne.s   NemPCD_NewRow         ; if not, branch
00001404 4E75                           rts
00001406                            ; ---------------------------------------------------------------------------
00001406                             
00001406                            NemPCD_WriteRowToVDP_XOR:
00001406 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
00001408 2882                           move.l  d2,(a4)         ; and write the result
0000140A 534D                           subq.w  #1,a5
0000140C 380D                           move.w  a5,d4
0000140E 66B6                           bne.s   NemPCD_NewRow
00001410 4E75                           rts
00001412                            ; ---------------------------------------------------------------------------
00001412                             
00001412                            NemDec_WriteRowToRAM:
00001412 28C4                           move.l  d4,(a4)+        ; write 8-pixel row
00001414 534D                           subq.w  #1,a5
00001416 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
00001418 66AC                           bne.s   NemPCD_NewRow         ; if not, branch
0000141A 4E75                           rts
0000141C                            ; ---------------------------------------------------------------------------
0000141C                             
0000141C                            NemDec_WriteRowToRAM_XOR:
0000141C B982                           eor.l   d4,d2           ; XOR the previous row by the current row
0000141E 28C2                           move.l  d2,(a4)+        ; and write the result
00001420 534D                           subq.w  #1,a5
00001422 380D                           move.w  a5,d4
00001424 66A0                           bne.s   NemPCD_NewRow
00001426 4E75                           rts
00001428                             
00001428                            ; ---------------------------------------------------------------------------
00001428                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
00001428                            ; ---------------------------------------------------------------------------
00001428                             
00001428                            NemDec_BuildCodeTable:
00001428 1018                           move.b  (a0)+,d0        ; read first byte
0000142A                             
0000142A                            @ChkEnd:
0000142A 0C00 00FF                      cmpi.b  #$FF,d0         ; has the end of the code table description been reached?
0000142E 6600                           bne.s   @NewPalIndex        ; if not, branch
00001430 4E75                           rts
00001432                            ; ---------------------------------------------------------------------------
00001432                             
00001432                            @NewPalIndex:
00001432 3E00                           move.w  d0,d7
00001434                             
00001434                            @ItemLoop:
00001434 1018                           move.b  (a0)+,d0        ; read next byte
00001436 6BF2                           bmi.s   @ChkEnd         ; ~~
00001438 1200                           move.b  d0,d1
0000143A 0247 000F                      andi.w  #$F,d7          ; get palette index
0000143E 0241 0070                      andi.w  #$70,d1         ; get repeat count for palette index
00001442 8E41                           or.w    d1,d7           ; combine the two
00001444 0240 000F                      andi.w  #$F,d0          ; get the length of the code in bits
00001448 1200                           move.b  d0,d1
0000144A E149                           lsl.w   #8,d1
0000144C 8E41                           or.w    d1,d7           ; combine with palette index and repeat count to form code table entry
0000144E 7208                           moveq   #8,d1
00001450 9240                           sub.w   d0,d1           ; is the code 8 bits long?
00001452 6600                           bne.s   @ItemShortCode      ; if not, a bit of extra processing is needed
00001454 1018                           move.b  (a0)+,d0        ; get code
00001456 D040                           add.w   d0,d0           ; each code gets a word-sized entry in the table
00001458 3387 0000                      move.w  d7,(a1,d0.w)        ; store the entry for the code
0000145C 60D6                           bra.s   @ItemLoop       ; repeat
0000145E                            ; ---------------------------------------------------------------------------
0000145E                             
0000145E                            @ItemShortCode:
0000145E 1018                           move.b  (a0)+,d0        ; get code
00001460 E368                           lsl.w   d1,d0           ; shift so that high bit is in bit position 7
00001462 D040                           add.w   d0,d0           ; get index into code table
00001464 7A01                           moveq   #1,d5
00001466 E36D                           lsl.w   d1,d5
00001468 5345                           subq.w  #1,d5           ; d5 = 2^d1 - 1
0000146A 4DF1 0000                      lea (a1,d0.w),a6        ; ~~
0000146E                             
0000146E                            @ItemShortCodeLoop:
0000146E 3CC7                           move.w  d7,(a6)+        ; ~~ store entry
00001470 51CD FFFC                      dbf d5,@ItemShortCodeLoop   ; repeat for required number of entries
00001474 60BE                           bra.s   @ItemLoop
00001474 60BE                           bra.s   @ItemLoop
00001476                            
00001476                              
00001476                                pusho	; buffer local label symbol config
00001476                                opt ws+  ; change local label symbol to '.'
00001476                            
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; MACRO ResetDMAQueue
00001476                            ; Clears the DMA queue, discarding all previously-queued DMAs.
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; ROUTINE Process_DMA_Queue / ProcessDMAQueue
00001476                            ; Performs all queued DMA transfers and clears the DMA queue.
00001476                            ;
00001476                            ; Output:
00001476                            ; 	a1,a5	trashed
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; ROUTINE InitDMAQueue
00001476                            ; Pre-initializes the DMA queue with VDP register numbers in alternating bytes.
00001476                            ; Must be called before the queue is used, and the queue expects that only it
00001476                            ; write to this region of RAM.
00001476                            ;
00001476                            ; Output:
00001476                            ; 	a0,d0,d1	trashed
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; ROUTINE Add_To_DMA_Queue / QueueDMATransfer
00001476                            ; Queues a DMA with parameters given in registers.
00001476                            ;
00001476                            ; Options:
00001476                            ; 	AssumeSourceAddressInBytes (default 1)
00001476                            ; 	AssumeSourceAddressIsRAMSafe (default 0)
00001476                            ; 	UseRAMSourceSafeDMA (default 1&(AssumeSourceAddressIsRAMSafe=0))
00001476                            ; 	Use128kbSafeDMA (default 0)
00001476                            ; 	UseVIntSafeDMA (default 0)
00001476                            ; Input:
00001476                            ; 	d1	Source address (in bytes, or in words if AssumeSourceAddressInBytes is
00001476                            ; 		set to 0)
00001476                            ; 	d2	Destination address
00001476                            ; 	d3	Transfer length (in words)
00001476                            ; Output:
00001476                            ; 	d0,d1,d2,d3,a1	trashed
00001476                            ;
00001476                            ; With the default settings, runs in:
00001476                            ; * 48(11/0) cycles if queue is full (DMA discarded)
00001476                            ; * 184(29/9) cycles otherwise (DMA queued)
00001476                            ;
00001476                            ; With Use128kbSafeDMA = 1, runs in:
00001476                            ; * 48(11/0) cycles if queue is full at the start (DMA discarded)
00001476                            ; * 200(32/9) cycles if the DMA does not cross a 128kB boundary (DMA queued)
00001476                            ; * 226(38/9) cycles if the DMA crosses a 128kB boundary, and the first piece
00001476                            ;   fills the queue (second piece is discarded)
00001476                            ; * 338(56/17) cycles if the DMA crosses a 128kB boundary, and the queue has
00001476                            ;   space for both pieces (both pieces queued)
00001476                            ;
00001476                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to all times.
00001476                            ;
00001476                            ; Setting AssumeSourceAddressInBytes to 0 reduces all times by 10(1/0) cycles,
00001476                            ; but only if the DMA is not entirely discarded. However, all callers must be
00001476                            ; edited to make sure the adresss given is correct.
00001476                            ;
00001476                            ; Setting AssumeSourceAddressIsRAMSafe to 1, or UseRAMSourceSafeDMA to 0,
00001476                            ; reduces all times by 14(2/0) cycles, but only if the DMA is not entirely
00001476                            ; discarded. However, all callers must be edited to make sure the adresss given
00001476                            ; in the correct form. You can use the dmaSource function for that.
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; MACRO QueueStaticDMA
00001476                            ; Directly queues a DMA on the spot. Requires all parameters to be known at
00001476                            ; assembly time; that is, no registers. Gives assembly errors when the DMA
00001476                            ; crosses a 128kB boundary, is at an odd ROM location, or is zero length.
00001476                            ;
00001476                            ; Options:
00001476                            ; 	UseVIntSafeDMA (default 0)
00001476                            ; Input:
00001476                            ; 	Source address (in bytes), transfer length (in bytes), destination address
00001476                            ; Output:
00001476                            ; 	d0,a1	trashed
00001476                            ;
00001476                            ; With the default settings, runs in:
00001476                            ; * 32(7/0) cycles if queue is full (DMA discarded)
00001476                            ; * 122(21/8) cycles otherwise (DMA queued)
00001476                            ;
00001476                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to both cases.
00001476                            ; ===========================================================================
00001476                            ; option: AssumeSourceAddressInBytes
00001476                            ;
00001476                            ; This option makes the function work as a drop-in replacement of the original
00001476                            ; functions. If you modify all callers to supply a position in words instead of
00001476                            ; bytes (i.e., divide source address by 2) you can set this to 0 to gain 10(1/0)
00001476 =00000001                  AssumeSourceAddressInBytes = 1
00001476                            ; ===========================================================================
00001476                            ; option: AssumeSourceAddressIsRAMSafe
00001476                            ;
00001476                            ; This option (which is disabled by default) makes the DMA queue assume that the
00001476                            ; source address is given to the function in a way that makes them safe to use
00001476                            ; with RAM sources. You need to edit all callers to ensure this.
00001476                            ; Enabling this option turns off UseRAMSourceSafeDMA, and saves 14(2/0).
00001476 =00000000                  AssumeSourceAddressIsRAMSafe = 0
00001476                            ; ===========================================================================
00001476                            ; option: UseRAMSourceSafeDMA
00001476                            ;
00001476                            ; This option (which is enabled by default) makes source addresses in RAM safe
00001476                            ; at the cost of 14(2/0). If you modify all callers so as to clear the top byte
00001476                            ; of source addresses (i.e., by ANDing them with $FFFFFF).
00001476 =00000001                  UseRAMSourceSafeDMA = 1&(AssumeSourceAddressIsRAMSafe=0)
00001476                            ; ===========================================================================
00001476                            ; option: Use128kbSafeDMA
00001476                            ;
00001476                            ; This option breaks DMA transfers that crosses a 128kB block into two. It is
00001476                            ; disabled by default because you can simply align the art in ROM and avoid the
00001476                            ; issue altogether. It is here so that you have a high-performance routine to do
00001476                            ; the job in situations where you can't align it in ROM.
00001476 =00000001                  Use128kbSafeDMA = 1
00001476                            ; ===========================================================================
00001476                            ; option UseVIntSafeDMA
00001476                            ;
00001476                            ; Option to mask interrupts while updating the DMA queue. This fixes many race
00001476                            ; conditions in the DMA funcion, but it costs 46(6/1) cycles. The better way to
00001476                            ; handle these race conditions would be to make unsafe callers (such as S3&K's
00001476                            ; KosM decoder) prevent these by masking off interrupts before calling and then
00001476                            ; restore interrupts after.
00001476 =00000000                  UseVIntSafeDMA = 0
00001476                            ; ===========================================================================
00001476                            
00001476                            
00001476                            ; Convenience macros, for increased maintainability of the code.
00001476 =00000027                  DMA = %100111
00001476 =00000021                  VRAM = %100001
00001476                            ; Like vdpComm, but starting from an address contained in a register
00001476 =00000001                  vdpCommReg_defined = 1
00001476                            vdpCommReg macro reg,type,rwd,clr
00001476                            	lsl.l	#2,\reg							; Move high bits into (word-swapped) position, accidentally moving everything else
00001476                            	if ((\type&\rwd)&3)<>0
00001476                            		addq.w	#((\type&\rwd)&3),\reg			; Add upper access type bits
00001476                            	endif
00001476                            	ror.w	#2,\reg							; Put upper access type bits into place, also moving all other bits into their correct (word-swapped) places
00001476                            	swap	\reg								; Put all bits in proper places
00001476                            	if \clr <> 0
00001476                            		andi.w	#3,\reg						; Strip whatever junk was in upper word of reg
00001476                            	endif
00001476                            	if ((\type&\rwd)&$FC)=$20
00001476                            		tas.b	\reg							; Add in the DMA flag -- tas fails on memory, but works on registers
00001476                            	elseif ((\type&\rwd)&$FC)<>0
00001476                            		ori.w	#(((\type&\rwd)&$FC)<<2),\reg	; Add in missing access type bits
00001476                            	endif
00001476                            	endm
00001476                            ; ---------------------------------------------------------------------------
00001476 =00000001                  intMacros_defined = 1
00001476                            enableInts macro
00001476                            	move	#$2300,sr
00001476                            	endm
00001476                            
00001476                            disableInts macro
00001476                            	move	#$2700,sr
00001476                            	endm
00001476                            ; ---------------------------------------------------------------------------
00001476 =00000001                  DMAEntry_defined = 1
00001476                                    rsreset
00001476 =00000000                  DMAEntry.Reg94:		rs.b	1
00001476                            			  
00001476 =00000001                  DMAEntry.Size:      rs.b    0
00001476 =00000001                  DMAEntry.SizeH:		rs.b	1
00001476 =00000002                  DMAEntry.Reg93:		rs.b	1
00001476 =00000003                  DMAEntry.Source:    rs.b    0
00001476 =00000003                  DMAEntry.SizeL:		rs.b	1
00001476 =00000004                  DMAEntry.Reg97:		rs.b	1
00001476 =00000005                  DMAEntry.SrcH:		rs.b	1
00001476 =00000006                  DMAEntry.Reg96:		rs.b	1
00001476 =00000007                  DMAEntry.SrcM:		rs.b	1
00001476 =00000008                  DMAEntry.Reg95:		rs.b	1
00001476 =00000009                  DMAEntry.SrcL:		rs.b	1
00001476 =0000000A                  DMAEntry.Command:	rs.l	1
00001476 =0000000E                  DMAEntry.len:   rs.w    0
00001476                            ; ---------------------------------------------------------------------------
00001476 =00000012                  QueueSlotCount = (VDP_Command_Buffer_Slot-VDP_Command_Buffer)/DMAEntry.len
00001476                            ; ---------------------------------------------------------------------------
00001476                            						
00001476                            										   
00001476                            									   
00001476                            	  
00001476                            																			 
00001476                            							  
00001476 =00000001                  QueueStaticDMA_defined = 1
00001476                            ; Expects source address and DMA length in bytes. Also, expects source, size, and dest to be known
00001476                            ; at assembly time. Gives errors if DMA starts at an odd address, transfers
00001476                            ; crosses a 128kB boundary, or has size 0.
00001476                            QueueStaticDMA macro src,length,dest
00001476                                local   len
00001476                            		if ((\src)&1)<>0
00001476                            			inform 3,"DMA queued from odd source \1!"
00001476                            		endif
00001476                            		if ((\length)&1)<>0
00001476                            			inform 3,"DMA an odd number of bytes \2!"
00001476                            		endif
00001476                            		if (\length)=0
00001476                            			inform 3,"DMA transferring 0 bytes (becomes a 128kB transfer). If you really mean it, pass 128kB instead."
00001476                            		endif
00001476                            		if (((\src)+(\length)-1)>>17)<>((\src)>>17)
00001476                            			inform 3,"DMA crosses a 128kB boundary. You should either split the DMA manually or align the source adequately."
00001476                            		endif
00001476                            	  
00001476                            	if UseVIntSafeDMA=1
00001476                            		move.w	sr,-(sp)										; Save current interrupt mask
00001476                            		disableInts												; Mask off interrupts
00001476                            	endif ; UseVIntSafeDMA=1
00001476                            	movea.w	(VDP_Command_Buffer_Slot).w,a1
00001476                            	cmpa.w	#VDP_Command_Buffer_Slot,a1
00001476                            	beq.s	.done												; Return if there's no more room in the buffer
00001476                            	len: = ((length>>1)&$7FFF)
00001476                                move.b	#(len>>8)&$FF,DMAEntry.SizeH(a1)		; Write top byte of size/2
00001476                            	move.l	#((len&$FF)<<24)|((src>>1)&$7FFFFF),d0	; Set d0 to bottom byte of size/2 and the low 3 bytes of source/2
00001476                            	movep.l	d0,DMAEntry.SizeL(a1)								; Write it all to the queue
00001476                            	lea	DMAEntry.Command(a1),a1									; Seek to correct RAM address to store VDP DMA command
00001476                            	move.l	#$40000080,(a1)+						; Write VDP DMA command for destination address
00001476                            	move.w	a1,(VDP_Command_Buffer_Slot).w						; Write next queue slot
00001476                            .done:
00001476                            	if UseVIntSafeDMA=1
00001476                            		move.w	(sp)+,sr										; Restore interrupts to previous state
00001476                            	endif ;UseVIntSafeDMA=1
00001476                            	endm
00001476                            
00001476                                
00001476                            
00001476                            ; ---------------------------------------------------------------------------
00001476                            ResetDMAQueue: macro
00001476                            	move.w	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
00001476                            	endm
00001476                            ; ===========================================================================
00001476                            
00001476                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001476                            
00001476                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand:
00001476                            Add_To_DMA_Queue:
00001476                            QueueDMATransfer:
00001476 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
0000147A B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
0000147E 6700                       	beq.s	.done											; Return if there's no more room in the buffer
00001480                            
00001480 E289                       		lsr.l	#1,d1										; Source address is in words for the VDP registers
00001482 0881 0017                  		bclr.l	#23,d1										; Make sure bit 23 is clear (68k->VDP DMA flag)
00001486 03C9 0003                  	movep.l	d1,DMAEntry.Source(a1)							; Write source address; the useless top byte will be overwritten later
0000148A 7000                       	moveq	#0,d0											; We need a zero on d0
0000148C                            
0000148C                            		; Detect if transfer crosses 128KB boundary
0000148C                            		; Using sub+sub instead of move+add handles the following edge cases:
0000148C                            		; (1) d3.w = 0 => 128kB transfer
0000148C                            		;   (a) d1.w = 0 => no carry, don't split the DMA
0000148C                            		;   (b) d1.w != 0 => carry, need to split the DMA
0000148C                            		; (2) d3.w != 0
0000148C                            		;   (a) if there is carry on d1.w + d3.w
0000148C                            		;     (* ) if d1.w + d3.w = 0 => transfer comes entirely from current 128kB block, don't split the DMA
0000148C                            		;     (**) if d1.w + d3.w != 0 => need to split the DMA
0000148C                            		;   (b) if there is no carry on d1.w + d3.w => don't split the DMA
0000148C                            		; The reason this works is that carry on d1.w + d3.w means that
0000148C                            		; d1.w + d3.w >= $10000, whereas carry on (-d3.w) - (d1.w) means that
0000148C                            		; d1.w + d3.w > $10000.
0000148C 9043                       		sub.w	d3,d0										; Using sub instead of move and add allows checking edge cases
0000148E 9041                       		sub.w	d1,d0										; Does the transfer cross over to the next 128kB block?
00001490 6500                       		bcs.s	.doubletransfer								; Branch if yes
00001492                            	; It does not cross a 128kB boundary. So just finish writing it.
00001492 0789 0001                  	movep.w	d3,DMAEntry.Size(a1)							; Write DMA length, overwriting useless top byte of source address
00001496                            
00001496                            .finishxfer:
00001496                            	; Command to specify destination address and begin DMA
00001496 3002                       	move.w	d2,d0											; Use the fact that top word of d0 is zero to avoid clearing on vdpCommReg
000014A2 43E9 000A                  	lea	DMAEntry.Command(a1),a1								; Seek to correct RAM address to store VDP DMA command
000014A6 22C0                       	move.l	d0,(a1)+										; Write VDP DMA command for destination address
000014A8 31C9 C8FC                  	move.w	a1,(VDP_Command_Buffer_Slot).w					; Write next queue slot
000014AC                            
000014AC                            .done:
000014AC 4E75                       	rts
000014AE                            ; ---------------------------------------------------------------------------
000014AE                            .doubletransfer:
000014AE                            		; We need to split the DMA into two parts, since it crosses a 128kB block
000014AE D043                       		add.w	d3,d0										; Set d0 to the number of words until end of current 128kB block
000014B0 0189 0001                  		movep.w	d0,DMAEntry.Size(a1)						; Write DMA length of first part, overwriting useless top byte of source addres
000014B4                            
000014B4 B2FC C8EE                  		cmpa.w	#VDP_Command_Buffer_Slot-DMAEntry.len,a1	; Does the queue have enough space for both parts?
000014B8 67DC                       		beq.s	.finishxfer									; Branch if not
000014BA                            
000014BA                            		; Get second transfer's source, destination, and length
000014BA 9640                       		sub.w	d0,d3										; Set d3 to the number of words remaining
000014BC D280                       		add.l	d0,d1										; Offset the source address of the second part by the length of the first part
000014BE D040                       		add.w	d0,d0										; Convert to number of bytes
000014C0 D042                       		add.w	d2,d0										; Set d0 to the VRAM destination of the second part
000014C2                            
000014C2                            		; If we know top word of d2 is clear, the following vdpCommReg can be set to not
000014C2                            		; clear it. There is, unfortunately, no faster way to clear it than this.
000014D0 2342 000A                  		move.l	d2,DMAEntry.Command(a1)						; Write VDP DMA command for destination address of first part
000014D4                            
000014D4                            		; Do second transfer
000014D4 03C9 0011                  		movep.l	d1,DMAEntry.len+DMAEntry.Source(a1)			; Write source address of second part; useless top byte will be overwritten later
000014D8 0789 000F                  		movep.w	d3,DMAEntry.len+DMAEntry.Size(a1)			; Write DMA length of second part, overwriting useless top byte of source addres
000014DC                            
000014DC                            		; Command to specify destination address and begin DMA
000014E6 43E9 0018                  		lea	DMAEntry.len+DMAEntry.Command(a1),a1			; Seek to correct RAM address to store VDP DMA command of second part
000014EA 22C0                       		move.l	d0,(a1)+									; Write VDP DMA command for destination address of second part
000014EC                            
000014EC 31C9 C8FC                  		move.w	a1,(VDP_Command_Buffer_Slot).w				; Write next queue slot
000014F0 4E75                       		rts
000014F2                            ; End of function QueueDMATransfer
000014F2                            ; ===========================================================================
000014F2                            
000014F2                            ; ---------------------------------------------------------------------------
000014F2                            ; Subroutine for issuing all VDP commands that were queued
000014F2                            ; (by earlier calls to QueueDMATransfer)
000014F2                            ; Resets the queue when it's done
000014F2                            ; ---------------------------------------------------------------------------
000014F2                            
000014F2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000014F2                            
000014F2                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA:
000014F2                            Process_DMA_Queue:
000014F2                            ProcessDMAQueue:
000014F2 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
000014F6 4EE9 0000                  	jmp	.jump_table-VDP_Command_Buffer(a1)
000014FA                            ; ---------------------------------------------------------------------------
000014FA                            .jump_table:
000014FA 4E75                       	rts
000014FC                            	rept 6
000014FC                            		trap	#0											; Just in case
000014FC 4E40 4E40 4E40 4E40 4E40+  	endr
00001508                            ; ---------------------------------------------------------------------------
00001508 =00000001                      c: = 1
00001508                            	rept QueueSlotCount
00001508                            		lea	(vdp_control_port).l,a5
00001508                            		lea	(VDP_Command_Buffer).w,a1
00001508                            		if c<>QueueSlotCount
00001508                            			bra.w	.jump0 - c*8
00001508                            		endif
00001508                                c: = c + 1
00001600                            ; ---------------------------------------------------------------------------
00001600                            	rept QueueSlotCount
00001600                            		move.l	(a1)+,(a5)									; Transfer length
00001600                            		move.l	(a1)+,(a5)									; Source address high
00001600                            		move.l	(a1)+,(a5)									; Source address low + destination high
00001600                            		move.w	(a1)+,(a5)									; Destination low, trigger DMA
00001600 2A99 2A99 2A99 3A99 2A99+  	endr
00001690                            
00001690                            .jump0:
00001690 31FC C800 C8FC             	ResetDMAQueue
00001696 4E75                       	rts
00001698                            ; End of function ProcessDMAQueue
00001698                            ; ===========================================================================
00001698                            
00001698                            ; ---------------------------------------------------------------------------
00001698                            ; Subroutine for initializing the DMA queue.
00001698                            ; ---------------------------------------------------------------------------
00001698                            
00001698                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001698                            
00001698                            InitDMAQueue:
00001698 41F8 C800                  	lea	(VDP_Command_Buffer).w,a0
0000169C 7094                       	moveq	#-$6C,d0				; fast-store $94 (sign-extended) in d0
0000169E 223C 9397 9695             	move.l	#$93979695,d1
000016A4 =00000000                      c: = 0
000016A4                            	rept QueueSlotCount
000016A4                            		move.b	d0,c + DMAEntry.Reg94(a0)
000016A4                            		movep.l	d1,c + DMAEntry.Reg93(a0)
000016A4                                c: = c + DMAEntry.len
000016A4 1080 03C8 0002 1140 000E+  	endr
00001732                            
00001732 31FC C800 C8FC             	ResetDMAQueue
00001738 4E75                       	rts
0000173A                            ; End of function ProcessDMAQueue
0000173A                            ; ===========================================================================
0000173A                            
0000173A                            
0000173A                                popo	; buffer local label symbol config
0000173A                            
0000173A                            
0000173A                            ; ---------------------------------------------------------------------------
0000173A                            ; Subroutine to load pattern load cues (aka to queue pattern load requests)
0000173A                            ; ---------------------------------------------------------------------------
0000173A                            
0000173A                            ; ARGUMENTS
0000173A                            ; d0 = index of PLC list
0000173A                            ; ---------------------------------------------------------------------------
0000173A                            
0000173A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000173A                            
0000173A                            ; LoadPLC:
0000173A                            AddPLC:
0000173A 48E7 0060                  		movem.l	a1-a2,-(sp)
0000173E 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001744 D040                       		add.w	d0,d0
00001746 3031 0000                  		move.w	(a1,d0.w),d0
0000174A 43F1 0000                  		lea	(a1,d0.w),a1		; jump to relevant PLC
0000174E 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space
00001752                            
00001752                            	@findspace:
00001752 4A92                       		tst.l	(a2)		; is space available in RAM?
00001754 6700                       		beq.s	@copytoRAM	; if yes, branch
00001756 5C4A                       		addq.w	#6,a2		; if not, try next space
00001758 60F8                       		bra.s	@findspace
0000175A                            ; ===========================================================================
0000175A                            
0000175A                            @copytoRAM:
0000175A 3019                       		move.w	(a1)+,d0	; get length of PLC
0000175C 6B00                       		bmi.s	@skip
0000175E                            
0000175E                            	@loop:
0000175E 24D9                       		move.l	(a1)+,(a2)+
00001760 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
00001762 51C8 FFFA                  		dbf	d0,@loop	; repeat for length of PLC
00001766                            
00001766                            	@skip:
00001766 4CDF 0600                  		movem.l	(sp)+,a1-a2 ; a1=object
0000176A 4E75                       		rts	
0000176C                            ; End of function AddPLC
0000176C                            
0000176C                            
0000176C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000176C                            ; Queue pattern load requests, but clear the PLQ first
0000176C                            
0000176C                            ; ARGUMENTS
0000176C                            ; d0 = index of PLC list (see ArtLoadCues)
0000176C                            
0000176C                            ; NOTICE: This subroutine does not check for buffer overruns. The programmer
0000176C                            ;	  (or hacker) is responsible for making sure that no more than
0000176C                            ;	  16 load requests are copied into the buffer.
0000176C                            ;	  _________DO NOT PUT MORE THAN 16 LOAD REQUESTS IN A LIST!__________
0000176C                            ;         (or if you change the size of Plc_Buffer, the limit becomes (Plc_Buffer_Only_End-Plc_Buffer)/6)
0000176C                            
0000176C                            ; LoadPLC2:
0000176C                            NewPLC:
0000176C 48E7 0060                  		movem.l	a1-a2,-(sp)
00001770 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001776 D040                       		add.w	d0,d0
00001778 3031 0000                  		move.w	(a1,d0.w),d0
0000177C 43F1 0000                  		lea	(a1,d0.w),a1	; jump to relevant PLC
00001780 6100                       		bsr.s	ClearPLC	; erase any data in PLC buffer space
00001782 45F8 F680                  		lea	(v_plc_buffer).w,a2
00001786 3019                       		move.w	(a1)+,d0	; get length of PLC
00001788 6B00                       		bmi.s	@skip		; if it's negative, skip the next loop
0000178A                            
0000178A                            	@loop:
0000178A 24D9                       		move.l	(a1)+,(a2)+
0000178C 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
0000178E 51C8 FFFA                  		dbf	d0,@loop		; repeat for length of PLC
00001792                            
00001792                            	@skip:
00001792 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001796 4E75                       		rts	
00001798                            ; End of function NewPLC
00001798                            
00001798                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001798                            
00001798                            ; ---------------------------------------------------------------------------
00001798                            ; Subroutine to	clear the pattern load cues
00001798                            ; ---------------------------------------------------------------------------
00001798                            
00001798                            ; Clear the pattern load queue ($FFF680 - $FFF700)
00001798                            
00001798                            
00001798                            ClearPLC:
00001798 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space in RAM
0000179C 701F                       		moveq	#$1F,d0	; bytesToLcnt(v_plc_buffer_end-v_plc_buffer)
0000179E                            
0000179E                            	@loop:
0000179E 429A                       		clr.l	(a2)+
000017A0 51C8 FFFC                  		dbf	d0,@loop
000017A4 4E75                       		rts	
000017A6                            ; End of function ClearPLC
000017A6                            
000017A6                            ; ---------------------------------------------------------------------------
000017A6                            ; Subroutine to	use graphics listed in a pattern load cue
000017A6                            ; ---------------------------------------------------------------------------
000017A6                            
000017A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A6                            
000017A6                            
000017A6                            RunPLC:
000017A6 4AB8 F680                  		tst.l	(v_plc_buffer).w
000017AA 6700                       		beq.s	Rplc_Exit
000017AC 4A78 F6F8                  		tst.w	(f_plc_execute).w
000017B0 6600                       		bne.s	Rplc_Exit
000017B2 2078 F680                  		movea.l	(v_plc_buffer).w,a0
000017B6 47F9 0000 13FC             		lea	(NemPCD_WriteRowToVDP).l,a3
000017BC 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
000017C0 3418                       		move.w	(a0)+,d2
000017C2 6A00                       		bpl.s	loc_160E
000017C4 D6FC 000A                  		adda.w	#$A,a3
000017C8                            
000017C8                            loc_160E:
000017C8 0242 7FFF                  		andi.w	#$7FFF,d2
000017CC 31C2 F6F8                  		move.w	d2,(f_plc_execute).w
000017D0 6100 FC56                  		bsr.w	NemDec_BuildCodeTable
000017D4 1A18                       		move.b	(a0)+,d5
000017D6 E145                       		asl.w	#8,d5
000017D8 1A18                       		move.b	(a0)+,d5
000017DA 7C10                       		moveq	#$10,d6
000017DC 7000                       		moveq	#0,d0
000017DE 21C8 F680                  		move.l	a0,(v_plc_buffer).w
000017E2 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
000017E6 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000017EA 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
000017EE 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000017F2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000017F6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000017FA                            
000017FA                            Rplc_Exit:
000017FA 4E75                       		rts	
000017FC                            ; End of function RunPLC
000017FC                            
000017FC                            
000017FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017FC                            
000017FC                            
000017FC                            sub_1642:
000017FC 4A78 F6F8                  		tst.w	(f_plc_execute).w
00001800 6700 0000                  		beq.w	locret_16DA
00001804 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
0000180A 7000                       		moveq	#0,d0
0000180C 3038 F684                  		move.w	($FFFFF684).w,d0
00001810 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001816 6000                       		bra.s	loc_1676
00001818                            ; End of function sub_1642
00001818                            
00001818                            
00001818                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001818                            
00001818                            
00001818                            ; sub_165E:
00001818                            ProcessDPLC2:
00001818 4A78 F6F8                  		tst.w	(f_plc_execute).w
0000181C 6700                       		beq.s	locret_16DA
0000181E 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001824 7000                       		moveq	#0,d0
00001826 3038 F684                  		move.w	($FFFFF684).w,d0
0000182A 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001830                            
00001830                            loc_1676:
00001830 49F9 00C0 0004             		lea	(vdp_control_port).l,a4
00001836 E588                       		lsl.l	#2,d0
00001838 E448                       		lsr.w	#2,d0
0000183A 0040 4000                  		ori.w	#$4000,d0
0000183E 4840                       		swap	d0
00001840 2880                       		move.l	d0,(a4)
00001842 594C                       		subq.w	#4,a4
00001844 2078 F680                  		movea.l	(v_plc_buffer).w,a0
00001848 2678 F6E0                  		movea.l	(v_ptrnemcode).w,a3
0000184C 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001850 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001854 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001858 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
0000185C 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001860 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00001864                            
00001864                            loc_16AA:
00001864 3A7C 0008                  		movea.w	#8,a5
00001868 6100 FB5C                  		bsr.w	NemPCD_NewRow
0000186C 5378 F6F8                  		subq.w	#1,(f_plc_execute).w
00001870 6700                       		beq.s	loc_16DC
00001872 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00001876 66EC                       		bne.s	loc_16AA
00001878 21C8 F680                  		move.l	a0,(v_plc_buffer).w
0000187C 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
00001880 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001884 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001888 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
0000188C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001890 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001894                            
00001894                            locret_16DA:
00001894 4E75                       		rts	
00001896                            ; ===========================================================================
00001896                            
00001896                            loc_16DC:
00001896 41F8 F680                  		lea	(v_plc_buffer).w,a0
0000189A 7015                       		moveq	#$15,d0
0000189C                            
0000189C                            loc_16E2:
0000189C 20E8 0006                  		move.l	6(a0),(a0)+
000018A0 51C8 FFFA                  		dbf	d0,loc_16E2
000018A4 4E75                       		rts	
000018A6                            ; End of function ProcessDPLC2
000018A6                            
000018A6                            ; ---------------------------------------------------------------------------
000018A6                            ; Subroutine to	execute	the pattern load cue
000018A6                            ; ---------------------------------------------------------------------------
000018A6                            
000018A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018A6                            
000018A6                            
000018A6                            QuickPLC:
000018A6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000018AC D040                       		add.w	d0,d0
000018AE 3031 0000                  		move.w	(a1,d0.w),d0
000018B2 43F1 0000                  		lea	(a1,d0.w),a1
000018B6 3219                       		move.w	(a1)+,d1	; get length of PLC
000018B8                            
000018B8                            	Qplc_Loop:
000018B8 2059                       		movea.l	(a1)+,a0	; get art pointer
000018BA 7000                       		moveq	#0,d0
000018BC 3019                       		move.w	(a1)+,d0	; get VRAM address
000018BE E588                       		lsl.l	#2,d0
000018C0 E448                       		lsr.w	#2,d0
000018C2 0040 4000                  		ori.w	#$4000,d0
000018C6 4840                       		swap	d0
000018C8 23C0 00C0 0004             		move.l	d0,(vdp_control_port).l ; converted VRAM address to VDP format
000018CE 6100 FA7E                  		bsr.w	NemDec		; decompress
000018D2 51C9 FFE4                  		dbf	d1,Qplc_Loop	; repeat for length of PLC
000018D6 4E75                       		rts	
000018D8                            ; End of function QuickPLC
000018D8                            
000018D8                            		include	"_inc\Enigma Decompression.asm"
000018D8                            ; ---------------------------------------------------------------------------
000018D8                            ; Enigma decompression algorithm
000018D8                            
000018D8                            ; input:
000018D8                            ;	d0 = starting art tile (added to each 8x8 before writing to destination)
000018D8                            ;	a0 = source address
000018D8                            ;	a1 = destination address
000018D8                            
000018D8                            ; usage:
000018D8                            ;	lea	(source).l,a0
000018D8                            ;	lea	(destination).l,a1
000018D8                            ;	move.w	#arttile,d0
000018D8                            ;	bsr.w	EniDec
000018D8                            
000018D8                            ; See http://www.segaretro.org/Enigma_compression for format description
000018D8                            ; ---------------------------------------------------------------------------
000018D8                            
000018D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018D8                            
000018D8                            
000018D8                            EniDec:
000018D8 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
000018DC 3640                       		movea.w	d0,a3		; store starting art tile
000018DE 1018                       		move.b	(a0)+,d0
000018E0 4880                       		ext.w	d0
000018E2 3A40                       		movea.w	d0,a5		; store number of bits in inline copy value
000018E4 1818                       		move.b	(a0)+,d4
000018E6 E70C                       		lsl.b	#3,d4		; store PCCVH flags bitfield
000018E8 3458                       		movea.w	(a0)+,a2
000018EA D4CB                       		adda.w	a3,a2		; store incremental copy word
000018EC 3858                       		movea.w	(a0)+,a4
000018EE D8CB                       		adda.w	a3,a4		; store literal copy word
000018F0 1A18                       		move.b	(a0)+,d5
000018F2 E145                       		asl.w	#8,d5
000018F4 1A18                       		move.b	(a0)+,d5	; get first word in format list
000018F6 7C10                       		moveq	#16,d6		; initial shift value
000018F8                            ; loc_173E:
000018F8                            Eni_Loop:
000018F8 7007                       		moveq	#7,d0		; assume a format list entry is 7 bits
000018FA 3E06                       		move.w	d6,d7
000018FC 9E40                       		sub.w	d0,d7
000018FE 3205                       		move.w	d5,d1
00001900 EE69                       		lsr.w	d7,d1
00001902 0241 007F                  		andi.w	#$7F,d1		; get format list entry
00001906 3401                       		move.w	d1,d2		; and copy it
00001908 0C41 0040                  		cmpi.w	#$40,d1		; is the high bit of the entry set?
0000190C 6400                       		bhs.s	@sevenbitentry
0000190E 7006                       		moveq	#6,d0		; if it isn't, the entry is actually 6 bits
00001910 E24A                       		lsr.w	#1,d2
00001912                            ; loc_1758:
00001912                            @sevenbitentry:
00001912 6100 0000                  		bsr.w	EniDec_FetchByte
00001916 0242 000F                  		andi.w	#$F,d2		; get repeat count
0000191A E849                       		lsr.w	#4,d1
0000191C D241                       		add.w	d1,d1
0000191E 4EFB 1000                  		jmp	EniDec_Index(pc,d1.w)
00001922                            ; End of function EniDec
00001922                            
00001922                            ; ===========================================================================
00001922                            ; loc_1768:
00001922                            EniDec_00:
00001922 32CA                       @loop:		move.w	a2,(a1)+	; copy incremental copy word
00001924 524A                       		addq.w	#1,a2		; increment it
00001926 51CA FFFA                  		dbf	d2,@loop	; repeat
0000192A 60CC                       		bra.s	Eni_Loop
0000192C                            ; ===========================================================================
0000192C                            ; loc_1772:
0000192C                            EniDec_01:
0000192C 32CC                       @loop:		move.w	a4,(a1)+	; copy literal copy word
0000192E 51CA FFFC                  		dbf	d2,@loop	; repeat
00001932 60C4                       		bra.s	Eni_Loop
00001934                            ; ===========================================================================
00001934                            ; loc_177A:
00001934                            EniDec_100:
00001934 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001938                            ; loc_177E:
00001938 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
0000193A 51CA FFFC                  		dbf	d2,@loop	; repeat
0000193E                            
0000193E 60B8                       		bra.s	Eni_Loop
00001940                            ; ===========================================================================
00001940                            ; loc_1786:
00001940                            EniDec_101:
00001940 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001944                            ; loc_178A:
00001944 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001946 5241                       		addq.w	#1,d1		; increment
00001948 51CA FFFA                  		dbf	d2,@loop	; repeat
0000194C                            
0000194C 60AA                       		bra.s	Eni_Loop
0000194E                            ; ===========================================================================
0000194E                            ; loc_1794:
0000194E                            EniDec_110:
0000194E 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001952                            ; loc_1798:
00001952 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001954 5341                       		subq.w	#1,d1		; decrement
00001956 51CA FFFA                  		dbf	d2,@loop	; repeat
0000195A                            
0000195A 609C                       		bra.s	Eni_Loop
0000195C                            ; ===========================================================================
0000195C                            ; loc_17A2:
0000195C                            EniDec_111:
0000195C 0C42 000F                  		cmpi.w	#$F,d2
00001960 6700                       		beq.s	EniDec_Done
00001962                            ; loc_17A8:
00001962 6100 0000                  @loop:		bsr.w	EniDec_FetchInlineValue	; fetch new inline value
00001966 32C1                       		move.w	d1,(a1)+	; copy it
00001968 51CA FFF8                  		dbf	d2,@loop	; and repeat
0000196C                            
0000196C 608A                       		bra.s	Eni_Loop
0000196E                            ; ===========================================================================
0000196E                            ; loc_17B4:
0000196E                            EniDec_Index:
0000196E 60B2                       		bra.s	EniDec_00
00001970 60B0                       		bra.s	EniDec_00
00001972 60B8                       		bra.s	EniDec_01
00001974 60B6                       		bra.s	EniDec_01
00001976 60BC                       		bra.s	EniDec_100
00001978 60C6                       		bra.s	EniDec_101
0000197A 60D2                       		bra.s	EniDec_110
0000197C 60DE                       		bra.s	EniDec_111
0000197E                            ; ===========================================================================
0000197E                            ; loc_17C4:
0000197E                            EniDec_Done:
0000197E 5348                       		subq.w	#1,a0		; go back by one byte
00001980 0C46 0010                  		cmpi.w	#16,d6		; were we going to start on a completely new byte?
00001984 6600                       		bne.s	@notnewbyte	; if not, branch
00001986 5348                       		subq.w	#1,a0		; and another one if needed
00001988                            ; loc_17CE:
00001988                            @notnewbyte:
00001988 3008                       		move.w	a0,d0
0000198A E248                       		lsr.w	#1,d0		; are we on an odd byte?
0000198C 6400                       		bcc.s	@evenbyte	; if not, branch
0000198E 5248                       		addq.w	#1,a0		; ensure we're on an even byte
00001990                            ; loc_17D6:
00001990                            @evenbyte:
00001990 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001994 4E75                       		rts	
00001996                            
00001996                            ; ---------------------------------------------------------------------------
00001996                            ; Part of the Enigma decompressor
00001996                            ; Fetches an inline copy value and stores it in d1
00001996                            ; ---------------------------------------------------------------------------
00001996                            
00001996                            ; =============== S U B R O U T I N E =======================================
00001996                            
00001996                            ; loc_17DC:
00001996                            EniDec_FetchInlineValue:
00001996 360B                       		move.w	a3,d3		; copy starting art tile
00001998 1204                       		move.b	d4,d1		; copy PCCVH bitfield
0000199A D201                       		add.b	d1,d1		; is the priority bit set?
0000199C 6400                       		bcc.s	@skippriority	; if not, branch
0000199E 5346                       		subq.w	#1,d6
000019A0 0D05                       		btst	d6,d5		; is the priority bit set in the inline render flags?
000019A2 6700                       		beq.s	@skippriority	; if not, branch
000019A4 0043 8000                  		ori.w	#$8000,d3	; otherwise set priority bit in art tile
000019A8                            ; loc_17EE:
000019A8                            @skippriority:
000019A8 D201                       		add.b	d1,d1		; is the high palette line bit set?
000019AA 6400                       		bcc.s	@skiphighpal	; if not, branch
000019AC 5346                       		subq.w	#1,d6
000019AE 0D05                       		btst	d6,d5
000019B0 6700                       		beq.s	@skiphighpal
000019B2 0643 4000                  		addi.w	#$4000,d3	; set second palette line bit
000019B6                            ; loc_17FC:
000019B6                            @skiphighpal:
000019B6 D201                       		add.b	d1,d1		; is the low palette line bit set?
000019B8 6400                       		bcc.s	@skiplowpal	; if not, branch
000019BA 5346                       		subq.w	#1,d6
000019BC 0D05                       		btst	d6,d5
000019BE 6700                       		beq.s	@skiplowpal
000019C0 0643 2000                  		addi.w	#$2000,d3	; set first palette line bit
000019C4                            ; loc_180A:
000019C4                            @skiplowpal:
000019C4 D201                       		add.b	d1,d1		; is the vertical flip flag set?
000019C6 6400                       		bcc.s	@skipyflip	; if not, branch
000019C8 5346                       		subq.w	#1,d6
000019CA 0D05                       		btst	d6,d5
000019CC 6700                       		beq.s	@skipyflip
000019CE 0043 1000                  		ori.w	#$1000,d3	; set Y-flip bit
000019D2                            ; loc_1818:
000019D2                            @skipyflip:
000019D2 D201                       		add.b	d1,d1		; is the horizontal flip flag set?
000019D4 6400                       		bcc.s	@skipxflip	; if not, branch
000019D6 5346                       		subq.w	#1,d6
000019D8 0D05                       		btst	d6,d5
000019DA 6700                       		beq.s	@skipxflip
000019DC 0043 0800                  		ori.w	#$800,d3	; set X-flip bit
000019E0                            ; loc_1826:
000019E0                            @skipxflip:
000019E0 3205                       		move.w	d5,d1
000019E2 3E06                       		move.w	d6,d7
000019E4 9E4D                       		sub.w	a5,d7		; subtract length in bits of inline copy value
000019E6 6400                       		bcc.s	@enoughbits	; branch if a new word doesn't need to be read
000019E8 3C07                       		move.w	d7,d6
000019EA 0646 0010                  		addi.w	#16,d6
000019EE 4447                       		neg.w	d7		; calculate bit deficit
000019F0 EF69                       		lsl.w	d7,d1		; and make space for that many bits
000019F2 1A10                       		move.b	(a0),d5		; get next byte
000019F4 EF3D                       		rol.b	d7,d5		; and rotate the required bits into the lowest positions
000019F6 DE47                       		add.w	d7,d7
000019F8 CA7B 7000                  		and.w	EniDec_Masks-2(pc,d7.w),d5
000019FC D245                       		add.w	d5,d1		; combine upper bits with lower bits
000019FE                            ; loc_1844:
000019FE                            @maskvalue:
000019FE 300D                       		move.w	a5,d0		; get length in bits of inline copy value
00001A00 D040                       		add.w	d0,d0
00001A02 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; mask value appropriately
00001A06 D243                       		add.w	d3,d1		; add starting art tile
00001A08 1A18                       		move.b	(a0)+,d5
00001A0A E14D                       		lsl.w	#8,d5
00001A0C 1A18                       		move.b	(a0)+,d5	; get next word
00001A0E 4E75                       		rts	
00001A10                            ; ===========================================================================
00001A10                            ; loc_1856:
00001A10                            @enoughbits:
00001A10 6700                       		beq.s	@justenough	; if the word has been exactly exhausted, branch
00001A12 EE69                       		lsr.w	d7,d1	; get inline copy value
00001A14 300D                       		move.w	a5,d0
00001A16 D040                       		add.w	d0,d0
00001A18 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; and mask it appropriately
00001A1C D243                       		add.w	d3,d1	; add starting art tile
00001A1E 300D                       		move.w	a5,d0
00001A20 6000                       		bra.s	EniDec_FetchByte
00001A22                            ; ===========================================================================
00001A22                            ; loc_1868:
00001A22                            @justenough:
00001A22 7C10                       		moveq	#16,d6	; reset shift value
00001A24 60D8                       		bra.s	@maskvalue
00001A26                            ; ===========================================================================
00001A26                            ; word_186C:
00001A26                            EniDec_Masks:
00001A26 0001 0003 0007 000F        		dc.w	 1,    3,    7,   $F
00001A2E 001F 003F 007F 00FF        		dc.w   $1F,  $3F,  $7F,  $FF
00001A36 01FF 03FF 07FF 0FFF        		dc.w  $1FF, $3FF, $7FF, $FFF
00001A3E 1FFF 3FFF 7FFF FFFF        		dc.w $1FFF,$3FFF,$7FFF,$FFFF
00001A46                            
00001A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A46                            
00001A46                            ; sub_188C:
00001A46                            EniDec_FetchByte:
00001A46 9C40                       		sub.w	d0,d6	; subtract length of current entry from shift value so that next entry is read next time around
00001A48 0C46 0009                  		cmpi.w	#9,d6	; does a new byte need to be read?
00001A4C 6400                       		bhs.s	@locret	; if not, branch
00001A4E 5046                       		addq.w	#8,d6
00001A50 E145                       		asl.w	#8,d5
00001A52 1A18                       		move.b	(a0)+,d5
00001A54                            @locret:
00001A54 4E75                       		rts	
00001A56                            ; End of function EniDec_FetchByte
00001A56                            ; End of function EniDec_FetchByte
00001A56                            		include	"_inc\Kosinski Decompression.asm"
00001A56                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001A56                            ; ---------------------------------------------------------------------------
00001A56                            ; KOSINSKI DECOMPRESSION PROCEDURE
00001A56                            ; (sometimes called KOZINSKI decompression)
00001A56                            ;
00001A56                            ; ARGUMENTS:
00001A56                            ; a0 = source address
00001A56                            ; a1 = destination address
00001A56                            ;
00001A56                            ; For format explanation see http://info.sonicretro.org/Kosinski@compression
00001A56                            ; New faster version by written by vladikcomper, with additional improvements by
00001A56                            ; MarkeyJester and Flamewing
00001A56                            ; Converted to ASM68K by Beta Filter.
00001A56                            ; ---------------------------------------------------------------------------
00001A56 =00000001                  Kos_UseLUT: equ 1
00001A56 =00000003                  Kos_LoopUnroll: equ 3
00001A56 =00000001                  Kos_ExtremeUnrolling: equ 1
00001A56                            
00001A56                            Kos_RunBitStream macro
00001A56                                dbra    d2,@skip\@
00001A56                                moveq   #7,d2                   ; Set repeat count to 8.
00001A56                                move.b  d1,d0                   ; Use the remaining 8 bits.
00001A56                                not.w   d3                      ; Have all 16 bits been used up?
00001A56                                bne.s   @skip\@                   ; Branch if not.
00001A56                                move.b  (a0)+,d0                ; Get desc field low-byte.
00001A56                                move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A56                                if Kos_UseLUT=1
00001A56                                move.b  (a4,d0.w),d0            ; Invert bit order...
00001A56                                move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A56                                endif
00001A56                            @skip\@
00001A56                                endm
00001A56                            
00001A56                            Kos_ReadBit macro
00001A56                                if Kos_UseLUT=1
00001A56                                add.b   d0,d0                   ; Get a bit from the bitstream.
00001A56                                else
00001A56                                lsr.b   #1,d0                   ; Get a bit from the bitstream.
00001A56                                endif
00001A56                                endm
00001A56                            ; ===========================================================================
00001A56                            ; KozDec@193A:
00001A56                            KosDec:
00001A56 7E07                           moveq   #(1<<Kos_LoopUnroll)-1,d7
00001A58 7000                           moveq   #0,d0
00001A5A 7200                           moveq   #0,d1
00001A5C 49FA 0000                      lea KosDec_ByteMap(pc),a4       ; Load LUT pointer.
00001A60 1018                           move.b  (a0)+,d0                ; Get desc field low-byte.
00001A62 1218                           move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A64 1034 0000                      move.b  (a4,d0.w),d0            ; Invert bit order...
00001A68 1234 1000                      move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A6C 7407                           moveq   #7,d2                   ; Set repeat count to 8.
00001A6E 7600                           moveq   #0,d3                   ; d3 will be desc field switcher.
00001A70 6000                           bra.s   @FetchNewCode
00001A72                            ; ---------------------------------------------------------------------------
00001A72                            @FetchCodeLoop:
00001A72                                ; Code 1 (Uncompressed byte).
00001A8A 12D8                           move.b  (a0)+,(a1)+
00001A8C                            
00001A8C                            @FetchNewCode:
00001A8E 65E2                           bcs.s   @FetchCodeLoop          ; If code = 1, branch.
00001A90                            
00001A90                                ; Codes 00 and 01.
00001A90 7AFF                           moveq   #-1,d5
00001A92 4BD1                           lea (a1),a5
00001AAE 6500 0000                      bcs.w   @Code_01
00001AB2                            
00001AB2                                ; Code 00 (Dictionary ref. short).
00001ACC 6500                           bcs.s   @Copy45
00001AE8 6500                           bcs.s   @Copy3
00001B02 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B04 DAC5                           adda.w  d5,a5
00001B06 12DD                           move.b  (a5)+,(a1)+
00001B08 12DD                           move.b  (a5)+,(a1)+
00001B0A 6080                           bra.s   @FetchNewCode
00001B0C                            ; ---------------------------------------------------------------------------
00001B0C                            @Copy3:
00001B24 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B26 DAC5                           adda.w  d5,a5
00001B28 12DD                           move.b  (a5)+,(a1)+
00001B2A 12DD                           move.b  (a5)+,(a1)+
00001B2C 12DD                           move.b  (a5)+,(a1)+
00001B2E 6000 FF5C                      bra.w   @FetchNewCode
00001B32                            ; ---------------------------------------------------------------------------
00001B32                            @Copy45:
00001B4C 6500                           bcs.s   @Copy5
00001B66 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B68 DAC5                           adda.w  d5,a5
00001B6A 12DD                           move.b  (a5)+,(a1)+
00001B6C 12DD                           move.b  (a5)+,(a1)+
00001B6E 12DD                           move.b  (a5)+,(a1)+
00001B70 12DD                           move.b  (a5)+,(a1)+
00001B72 6000 FF18                      bra.w   @FetchNewCode
00001B76                            ; ---------------------------------------------------------------------------
00001B76                            @Copy5:
00001B8E 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B90 DAC5                           adda.w  d5,a5
00001B92 12DD                           move.b  (a5)+,(a1)+
00001B94 12DD                           move.b  (a5)+,(a1)+
00001B96 12DD                           move.b  (a5)+,(a1)+
00001B98 12DD                           move.b  (a5)+,(a1)+
00001B9A 12DD                           move.b  (a5)+,(a1)+
00001B9C 6000 FEEE                      bra.w   @FetchNewCode
00001BA0                            ; ---------------------------------------------------------------------------
00001BA0                            ; ---------------------------------------------------------------------------
00001BA0                            @Code_01:
00001BA0 7800                           moveq   #0,d4                   ; d4 will contain copy count.
00001BA2                                ; Code 01 (Dictionary ref. long / special).
00001BBA 1C18                           move.b  (a0)+,d6                ; d6 = %LLLLLLLL.
00001BBC 1818                           move.b  (a0)+,d4                ; d4 = %HHHHHCCC.
00001BBE 1A04                           move.b  d4,d5                   ; d5 = %11111111 HHHHHCCC.
00001BC0 EB4D                           lsl.w   #5,d5                   ; d5 = %111HHHHH CCC00000.
00001BC2 1A06                           move.b  d6,d5                   ; d5 = %111HHHHH LLLLLLLL.
00001BC4 C847                           and.w   d7,d4                   ; d4 = %00000CCC.
00001BC6 6600                           bne.s   @StreamCopy             ; if CCC=0, branch.
00001BC8                            
00001BC8                                ; special mode (extended counter)
00001BC8 1818                           move.b  (a0)+,d4                ; Read cnt
00001BCA 6700                           beq.s   @Quit                   ; If cnt=0, quit decompression.
00001BCC 5304                           subq.b  #1,d4
00001BCE 6700 FEBC                      beq.w   @FetchNewCode           ; If cnt=1, fetch a new code.
00001BD2                            
00001BD2 DAC5                           adda.w  d5,a5
00001BD4 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001BD6 3C04                           move.w  d4,d6
00001BD8 4646                           not.w   d6
00001BDA CC47                           and.w   d7,d6
00001BDC DC46                           add.w   d6,d6
00001BDE E64C                           lsr.w   #Kos_LoopUnroll,d4
00001BE0 4EFB 6000                      jmp @largecopy(pc,d6.w)
00001BE4                            ; ---------------------------------------------------------------------------
00001BE4                            @largecopy:
00001BE4                                rept (1<<Kos_LoopUnroll)
00001BE4                                move.b  (a5)+,(a1)+
00001BE4 12DD 12DD 12DD 12DD 12DD+      endr
00001BF4 51CC FFEE                      dbra    d4,@largecopy
00001BF8 6000 FE92                      bra.w   @FetchNewCode
00001BFC                            ; ---------------------------------------------------------------------------
00001BFC                            @StreamCopy:
00001BFC DAC5                           adda.w  d5,a5
00001BFE 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001C00 BF44                           eor.w   d7,d4
00001C02 D844                           add.w   d4,d4
00001C04 4EFB 4000                      jmp @mediumcopy(pc,d4.w)
00001C08                            ; ---------------------------------------------------------------------------
00001C08                            @mediumcopy:
00001C08                                rept 8
00001C08                                move.b  (a5)+,(a1)+
00001C08 12DD 12DD 12DD 12DD 12DD+      endr
00001C18 6000 FE72                      bra.w   @FetchNewCode
00001C1C                            ; ---------------------------------------------------------------------------
00001C1C                            @Quit:
00001C1C 4E75                           rts                             ; End of function KosDec.
00001C1E                            ; ===========================================================================
00001C1E                            KosDec_ByteMap:
00001C1E 0080 40C0 20A0 60E0 1090+      dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
00001C2E 0888 48C8 28A8 68E8 1898+      dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
00001C3E 0484 44C4 24A4 64E4 1494+      dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
00001C4E 0C8C 4CCC 2CAC 6CEC 1C9C+      dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
00001C5E 0282 42C2 22A2 62E2 1292+      dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
00001C6E 0A8A 4ACA 2AAA 6AEA 1A9A+      dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
00001C7E 0686 46C6 26A6 66E6 1696+      dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
00001C8E 0E8E 4ECE 2EAE 6EEE 1E9E+      dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
00001C9E 0181 41C1 21A1 61E1 1191+      dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
00001CAE 0989 49C9 29A9 69E9 1999+      dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00001CBE 0585 45C5 25A5 65E5 1595+      dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00001CCE 0D8D 4DCD 2DAD 6DED 1D9D+      dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00001CDE 0383 43C3 23A3 63E3 1393+      dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00001CEE 0B8B 4BCB 2BAB 6BEB 1B9B+      dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00001CFE 0787 47C7 27A7 67E7 1797+      dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00001D0E 0F8F 4FCF 2FAF 6FEF 1F9F+      dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00001D1E                            ; ===========================================================================
00001D1E                            ; ===========================================================================
00001D1E                            
00001D1E                            		include	"_inc\PaletteCycle.asm"
00001D1E                            ; ---------------------------------------------------------------------------
00001D1E                            ; Palette cycling routine loading subroutine
00001D1E                            ; ---------------------------------------------------------------------------
00001D1E                            
00001D1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D1E                            
00001D1E                            
00001D1E                            PaletteCycle:
00001D1E 6100 0000                  		bsr.w	PalCycle_SuperSonic	
00001D22 7400                       		moveq	#0,d2
00001D24 7000                       		moveq	#0,d0
00001D26 1038 FE10                  		move.b	(v_zone).w,d0	; get level number
00001D2A D040                       		add.w	d0,d0
00001D2C 303B 0000                  		move.w	PCycle_Index(pc,d0.w),d0
00001D30 4EFB 0000                  		jmp	PCycle_Index(pc,d0.w) ; jump to relevant palette routine
00001D34                            ; End of function PaletteCycle
00001D34                            
00001D34                            ; ===========================================================================
00001D34                            ; ---------------------------------------------------------------------------
00001D34                            ; Palette cycling routines
00001D34                            ; ---------------------------------------------------------------------------
00001D34 0000                       PCycle_Index:	dc.w PCycle_GHZ-PCycle_Index
00001D36 0000                       		dc.w PCycle_LZ-PCycle_Index
00001D38 0000                       		dc.w PCycle_MZ-PCycle_Index
00001D3A 0000                       		dc.w PalCycle_SLZ-PCycle_Index
00001D3C 0000                       		dc.w PalCycle_SYZ-PCycle_Index
00001D3E 0000                       		dc.w PalCycle_SBZ-PCycle_Index
00001D40 0000                       		dc.w PCycle_GHZ-PCycle_Index	; Ending
00001D42                            
00001D42                            
00001D42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D42                            
00001D42                            
00001D42                            PCycle_Title:
00001D42 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001D48 6000                       		bra.s	PCycGHZ_Go
00001D4A                            ; ===========================================================================
00001D4A                            
00001D4A                            PCycle_GHZ:
00001D4A 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001D50                            
00001D50                            PCycGHZ_Go:
00001D50 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D54 6A00                       		bpl.s	PCycGHZ_Skip	; if time remains, branch
00001D56                            
00001D56 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 5 frames
00001D5C 3038 F632                  		move.w	(v_pcyc_num).w,d0 ; get cycle number
00001D60 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D64 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D68 E748                       		lsl.w	#3,d0
00001D6A 43F8 FB50                  		lea	(v_pal_dry+$50).w,a1
00001D6E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D72 22B0 0004                  		move.l	4(a0,d0.w),(a1)	; copy palette data to RAM
00001D76                            
00001D76                            PCycGHZ_Skip:
00001D76 4E75                       		rts	
00001D78                            ; End of function PCycle_GHZ
00001D78                            
00001D78                            
00001D78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D78                            
00001D78                            
00001D78                            PCycle_LZ:
00001D78                            ; Waterfalls
00001D78 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D7C 6A00                       		bpl.s	PCycLZ_Skip1	; if time remains, branch
00001D7E                            
00001D7E 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 2 frames
00001D84 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001D88 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D8C 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D90 E748                       		lsl.w	#3,d0
00001D92 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001D98 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; check if level is SBZ3
00001D9E 6600                       		bne.s	PCycLZ_NotSBZ3
00001DA0 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	palette instead
00001DA6                            
00001DA6                            	PCycLZ_NotSBZ3:
00001DA6 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001DAA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001DAE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001DB2 43F8 FAD6                  		lea	(v_pal_water+$56).w,a1
00001DB6 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001DBA 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001DBE                            
00001DBE                            PCycLZ_Skip1:
00001DBE                            ; Conveyor belts
00001DBE                            		;move.w	(v_framecount).w,d0
00001DBE                            		;andi.w	#7,d0
00001DBE                            		;move.b	PCycLZ_Seq(pc,d0.w),d0 ; get byte from palette sequence
00001DBE                            		;beq.s	PCycLZ_Skip2	; if byte is 0, branch
00001DBE                            		;moveq	#1,d1
00001DBE                            		;tst.b	(f_conveyrev).w	; have conveyor belts been reversed?
00001DBE                            		;beq.s	PCycLZ_NoRev	; if not, branch
00001DBE                            		;neg.w	d1
00001DBE                            
00001DBE                            	;PCycLZ_NoRev:
00001DBE                            		;move.w	(v_pal_buffer).w,d0
00001DBE                            		;andi.w	#3,d0
00001DBE                            		;add.w	d1,d0
00001DBE                            		;cmpi.w	#3,d0
00001DBE                            		;bcs.s	loc_1A0A
00001DBE                            		;move.w	d0,d1
00001DBE                            		;moveq	#0,d0
00001DBE                            		;tst.w	d1
00001DBE                            		;bpl.s	loc_1A0A
00001DBE                            		;moveq	#2,d0
00001DBE                            
00001DBE                            ;loc_1A0A:
00001DBE                            		;move.w	d0,(v_pal_buffer).w
00001DBE                            		;add.w	d0,d0
00001DBE                            		;move.w	d0,d1
00001DBE                            		;add.w	d0,d0
00001DBE                            		;add.w	d1,d0
00001DBE                            		;lea	(Pal_LZCyc2).l,a0
00001DBE                            		;lea	(v_pal_dry+$76).w,a1
00001DBE                            		;move.l	(a0,d0.w),(a1)+
00001DBE                            		;move.w	4(a0,d0.w),(a1)
00001DBE                            		;lea	(Pal_LZCyc3).l,a0
00001DBE                            		;lea	(v_pal_water+$76).w,a1
00001DBE                            		;move.l	(a0,d0.w),(a1)+
00001DBE                            		;move.w	4(a0,d0.w),(a1)
00001DBE                            
00001DBE                            ;PCycLZ_Skip2:
00001DBE 4E75                       		rts	
00001DC0                            ; End of function PCycle_LZ
00001DC0                            
00001DC0                            ; ===========================================================================
00001DC0 0100 0001 0000 0100        PCycLZ_Seq:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001DC8                            ; ===========================================================================
00001DC8                            
00001DC8                            PCycle_MZ:
00001DC8 4E75                       		rts	
00001DCA                            
00001DCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DCA                            
00001DCA                            
00001DCA                            PalCycle_SLZ:
00001DCA 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001DCE 6A00                       		bpl.s	locret_1A80
00001DD0 31FC 0007 F634             		move.w	#7,(v_pcyc_time).w
00001DD6 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001DDA 5240                       		addq.w	#1,d0
00001DDC 0C40 0006                  		cmpi.w	#6,d0
00001DE0 6500                       		bcs.s	loc_1A60
00001DE2 7000                       		moveq	#0,d0
00001DE4                            
00001DE4                            loc_1A60:
00001DE4 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001DE8 3200                       		move.w	d0,d1
00001DEA D241                       		add.w	d1,d1
00001DEC D041                       		add.w	d1,d0
00001DEE D040                       		add.w	d0,d0
00001DF0 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001DF6 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001DFA 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001DFE 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001E04                            
00001E04                            locret_1A80:
00001E04 4E75                       		rts	
00001E06                            ; End of function PalCycle_SLZ
00001E06                            
00001E06                            
00001E06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E06                            
00001E06                            
00001E06                            PalCycle_SYZ:
00001E06 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E0A 6A00                       		bpl.s	locret_1AC6
00001E0C 31FC 0005 F634             		move.w	#5,(v_pcyc_time).w
00001E12 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001E16 5278 F632                  		addq.w	#1,(v_pcyc_num).w
00001E1A 0240 0003                  		andi.w	#3,d0
00001E1E E548                       		lsl.w	#2,d0
00001E20 3200                       		move.w	d0,d1
00001E22 D040                       		add.w	d0,d0
00001E24 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001E2A 43F8 FB6E                  		lea	(v_pal_dry+$6E).w,a1
00001E2E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001E32 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001E36 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001E3C 43F8 FB76                  		lea	(v_pal_dry+$76).w,a1
00001E40 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001E44 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001E4A                            
00001E4A                            locret_1AC6:
00001E4A 4E75                       		rts	
00001E4C                            ; End of function PalCycle_SYZ
00001E4C                            
00001E4C                            
00001E4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E4C                            
00001E4C                            
00001E4C                            PalCycle_SBZ:
00001E4C 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001E52 4A38 FE11                  		tst.b	(v_act).w
00001E56 6700                       		beq.s	loc_1ADA
00001E58 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001E5E                            
00001E5E                            loc_1ADA:
00001E5E 43F8 F650                  		lea	(v_pal_buffer).w,a1
00001E62 321A                       		move.w	(a2)+,d1
00001E64                            
00001E64                            loc_1AE0:
00001E64 5311                       		subq.b	#1,(a1)
00001E66 6B00                       		bmi.s	loc_1AEA
00001E68 5489                       		addq.l	#2,a1
00001E6A 5C8A                       		addq.l	#6,a2
00001E6C 6000                       		bra.s	loc_1B06
00001E6E                            ; ===========================================================================
00001E6E                            
00001E6E                            loc_1AEA:
00001E6E 12DA                       		move.b	(a2)+,(a1)+
00001E70 1011                       		move.b	(a1),d0
00001E72 5200                       		addq.b	#1,d0
00001E74 B01A                       		cmp.b	(a2)+,d0
00001E76 6500                       		bcs.s	loc_1AF6
00001E78 7000                       		moveq	#0,d0
00001E7A                            
00001E7A                            loc_1AF6:
00001E7A 12C0                       		move.b	d0,(a1)+
00001E7C 0240 000F                  		andi.w	#$F,d0
00001E80 D040                       		add.w	d0,d0
00001E82 305A                       		movea.w	(a2)+,a0
00001E84 365A                       		movea.w	(a2)+,a3
00001E86 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001E8A                            
00001E8A                            loc_1B06:
00001E8A 51C9 FFD8                  		dbf	d1,loc_1AE0
00001E8E 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E92 6A00                       		bpl.s	locret_1B64
00001E94 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001E9A 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w
00001EA0 4A38 FE11                  		tst.b	(v_act).w
00001EA4 6700                       		beq.s	loc_1B2E
00001EA6 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001EAC 31FC 0002 F634             		move.w	#2,(v_pcyc_time).w
00001EB2                            
00001EB2                            loc_1B2E:
00001EB2 72FF                       		moveq	#-1,d1
00001EB4 4A38 F7C0                  		tst.b	(f_conveyrev).w
00001EB8 6700                       		beq.s	loc_1B38
00001EBA 4441                       		neg.w	d1
00001EBC                            
00001EBC                            loc_1B38:
00001EBC 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001EC0 0240 0003                  		andi.w	#3,d0
00001EC4 D041                       		add.w	d1,d0
00001EC6 0C40 0003                  		cmpi.w	#3,d0
00001ECA 6500                       		bcs.s	loc_1B52
00001ECC 3200                       		move.w	d0,d1
00001ECE 7000                       		moveq	#0,d0
00001ED0 4A41                       		tst.w	d1
00001ED2 6A00                       		bpl.s	loc_1B52
00001ED4 7002                       		moveq	#2,d0
00001ED6                            
00001ED6                            loc_1B52:
00001ED6 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001EDA D040                       		add.w	d0,d0
00001EDC 43F8 FB58                  		lea	(v_pal_dry+$58).w,a1
00001EE0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001EE4 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001EE8                            
00001EE8                            locret_1B64:
00001EE8 4E75                       		rts	
00001EEA                            ; End of function PalCycle_SBZ
00001EEA                            
00001EEA                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001EEA                            
00001EEA                            ; sub_213E:
00001EEA                            PalCycle_SuperSonic:
00001EEA 7000                       		moveq	#0,d0
00001EEC 1038 F5D8                  		move.b	(Super_Sonic_palette).w,d0
00001EF0 6700                       		beq.s	PalCycle_SuperSonic_return	; rts	; return, if Sonic isn't super
00001EF2 6B00 0000                  		bmi.w	PalCycle_SuperSonic_normal	; branch, if fade-in is done
00001EF6 5300                       		subq.b	#1,d0
00001EF8 6600                       		bne.s	PalCycle_SuperSonic_revert	; branch for values greater than 1
00001EFA                            
00001EFA                            		; fade from Sonic's to Super Sonic's palette
00001EFA                            		; run frame timer
00001EFA 5338 F5DE                  		subq.b	#1,(Palette_timer).w
00001EFE 6A00                       		bpl.s	PalCycle_SuperSonic_return	; rts
00001F00 11FC 0003 F5DE             		move.b	#3,(Palette_timer).w
00001F06                            
00001F06                            		; increment palette frame and update Sonic's palette
00001F06 41F9 0000 0000             		lea	(CyclingPal_SSTransformation).l,a0
00001F0C 3038 F5DC                  		move.w	(Palette_frame).w,d0
00001F10 5078 F5DC                  		addq.w	#8,(Palette_frame).w	; 1 palette entry = 1 word, Sonic uses 4 shades of blue
00001F14 0C78 0030 F5DC             		cmpi.w	#$30,(Palette_frame).w	; has palette cycle reached the 6th frame?
00001F1A 6500                       		blo.s	PalCycle_SuperSonic_palettes			; if not, branch
00001F1C 11FC 00FF F5D8             		move.b	#-1,(Super_Sonic_palette).w	; mark fade-in as done
00001F22 11FC 0000 F7C8             		move.b	#0,($FFFFF7C8).w ; unfreeze Sonic	
00001F28 6000                       		bra.s		PalCycle_SuperSonic_palettes
00001F2A                            
00001F2A                            PalCycle_SuperSonic_return:
00001F2A 4E75                       		rts
00001F2C                            ; ===========================================================================
00001F2C                            ; loc_2188:
00001F2C                            PalCycle_SuperSonic_revert:	; runs the fade in transition backwards
00001F2C                            		; run frame timer
00001F2C 5338 F5DE                  		subq.b	#1,(Palette_timer).w
00001F30 6AF8                       		bpl.s	PalCycle_SuperSonic_return	; rts
00001F32 11FC 0003 F5DE             		move.b	#3,(Palette_timer).w
00001F38                            
00001F38                            		; decrement palette frame and update Sonic's palette
00001F38 41F9 0000 0000             		lea	(CyclingPal_SSTransformation).l,a0
00001F3E 3038 F5DC                  		move.w	(Palette_frame).w,d0
00001F42 5178 F5DC                  		subq.w	#8,(Palette_frame).w	; previous frame
00001F46 6400                       		bcc.s	PalCycle_SuperSonic_palettes			; branch, if it isn't the first frame
00001F48 31FC 0000 F5DC             		move.w	#0,(Palette_frame).w
00001F4E 11FC 0000 F5D8             		move.b	#0,(Super_Sonic_palette).w	; stop palette cycle
00001F54                            
00001F54                            PalCycle_SuperSonic_palettes:
00001F54 43F8 FB04                  		lea	(v_pal_dry+4).w,a1
00001F58 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001F5C 22B0 0004                  		move.l	4(a0,d0.w),(a1)	
00001F60 4E75                       		rts
00001F62                            ; ===========================================================================
00001F62                            ; loc_21E6:
00001F62                            PalCycle_SuperSonic_normal:
00001F62                            		; run frame timer
00001F62 5338 F5DE                  		subq.b	#1,(Palette_timer).w
00001F66 6AC2                       		bpl.s	PalCycle_SuperSonic_return	; rts
00001F68 11FC 0007 F5DE             		move.b	#7,(Palette_timer).w
00001F6E                            
00001F6E                            		; increment palette frame and update Sonic's palette
00001F6E 41F9 0000 0000             		lea	(CyclingPal_SSTransformation).l,a0
00001F74 3038 F5DC                  		move.w	(Palette_frame).w,d0
00001F78 5078 F5DC                  		addq.w	#8,(Palette_frame).w	; next frame
00001F7C 0C78 0078 F5DC             		cmpi.w	#$78,(Palette_frame).w	; is it the last frame?
00001F82 63D0                       		bls.s	PalCycle_SuperSonic_palettes			; if not, branch
00001F84 31FC 0030 F5DC             		move.w	#$30,(Palette_frame).w	; reset frame counter (Super Sonic's normal palette cycle starts at $30. Everything before that is for the palette fade)
00001F8A 60C8                       		bra.s	PalCycle_SuperSonic_palettes
00001F8C 4E75                       		rts
00001F8E                            ; End of function PalCycle_SuperSonic
00001F8E                            
00001F8E                            
00001F8E                            CyclingPal_SSTransformation:	incbin	"palette/Super.bin"
00001F8E                            CyclingPal_SSTransformation:	incbin	"palette/Super.bin"
0000200E                            
0000200E                            Pal_TitleCyc:	incbin	"palette\Cycle - Title Screen Water.bin"
0000202E                            Pal_GHZCyc:	incbin	"palette\Cycle - GHZ.bin"
0000204E                            Pal_LZCyc1:	incbin	"palette\Cycle - LZ Waterfall.bin"
0000206E                            Pal_LZCyc2:	incbin	"palette\Cycle - LZ Conveyor Belt.bin"
00002080                            Pal_LZCyc3:	incbin	"palette\Cycle - LZ Conveyor Belt Underwater.bin"
00002092                            Pal_SBZ3Cyc1:	incbin	"palette\Cycle - SBZ3 Waterfall.bin"
000020FA                            Pal_SLZCyc:	incbin	"palette\Cycle - SLZ.bin"
0000211E                            Pal_SYZCyc1:	incbin	"palette\Cycle - SYZ1.bin"
0000213E                            Pal_SYZCyc2:	incbin	"palette\Cycle - SYZ2.bin"
0000214E                            Pal_SYZCyc1_2:	incbin	"palette\Cycle - SYZ1 Act 2.bin"
0000216E                            Pal_SYZCyc2_2:	incbin	"palette\Cycle - SYZ2 Act 2.bin"
0000217E                            Pal_SYZCyc1_3:	incbin	"palette\Cycle - SYZ1 Act 3.bin"
0000219E                            Pal_SYZCyc2_3:	incbin	"palette\Cycle - SYZ2 Act 3.bin"
000021AE                            
000021AE                            		include	"_inc\SBZ Palette Scripts.asm"
000021AE                            ; ---------------------------------------------------------------------------
000021AE                            ; Scrap Brain Zone palette cycling script
000021AE                            ; ---------------------------------------------------------------------------
000021AE                            
000021AE                            mSBZp:	macro duration,colors,paladdress,ramaddress
000021AE                            	dc.b duration, colors
000021AE                            	dc.w paladdress, ramaddress
000021AE                            	endm
000021AE                            
000021AE                            ; duration in frames, number of colors, palette address, RAM address
000021AE                            
000021AE                            Pal_SBZCycList1:
000021AE 0000                       	dc.w ((end_SBZCycList1-Pal_SBZCycList1-2)/6)-1
000021B0 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
000021B6 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
000021BC 0E08 0000 FB6E             	mSBZp	$E,8,Pal_SBZCyc3,v_pal_dry+$6E
000021C2 0B08 0000 FB70             	mSBZp	$B,8,Pal_SBZCyc5,v_pal_dry+$70
000021C8 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
000021CE 1C10 0000 FB7E             	mSBZp	$1C,$10,Pal_SBZCyc7,v_pal_dry+$7E
000021D4 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
000021DA 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
000021E0 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
000021E6                            end_SBZCycList1:
000021E6                            	even
000021E6                            
000021E6                            Pal_SBZCycList2:
000021E6 0000                       	dc.w ((end_SBZCycList2-Pal_SBZCycList2-2)/6)-1
000021E8 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
000021EE 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
000021F4 0908 0000 FB70             	mSBZp	9,8,Pal_SBZCyc9,v_pal_dry+$70
000021FA 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00002200 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
00002206 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
0000220C 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
00002212                            end_SBZCycList2:
00002212                            	even
00002212                            	even
00002212                            
00002212                            Pal_SBZCyc1:	incbin	"palette\Cycle - SBZ 1.bin"
00002222                            Pal_SBZCyc2:	incbin	"palette\Cycle - SBZ 2.bin"
00002232                            Pal_SBZCyc3:	incbin	"palette\Cycle - SBZ 3.bin"
00002242                            Pal_SBZCyc4:	incbin	"palette\Cycle - SBZ 4.bin"
0000224E                            Pal_SBZCyc5:	incbin	"palette\Cycle - SBZ 5.bin"
0000225E                            Pal_SBZCyc6:	incbin	"palette\Cycle - SBZ 6.bin"
0000226E                            Pal_SBZCyc7:	incbin	"palette\Cycle - SBZ 7.bin"
0000228E                            Pal_SBZCyc8:	incbin	"palette\Cycle - SBZ 8.bin"
00002298                            Pal_SBZCyc9:	incbin	"palette\Cycle - SBZ 9.bin"
000022A8                            Pal_SBZCyc10:	incbin	"palette\Cycle - SBZ 10.bin"
000022B4                            ; ---------------------------------------------------------------------------
000022B4                            ; Subroutine to	fade in from black
000022B4                            ; ---------------------------------------------------------------------------
000022B4                            
000022B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022B4                            
000022B4                            
000022B4                            PaletteFadeIn:
000022B4 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; set start position = 0; size = $40
000022BA                            
000022BA                            PalFadeIn_Alt:				; start position and size are already set
000022BA 7000                       		moveq	#0,d0
000022BC 41F8 FB00                  		lea	(v_pal_dry).w,a0
000022C0 1038 F626                  		move.b	(v_pfade_start).w,d0
000022C4 D0C0                       		adda.w	d0,a0
000022C6 7200                       		moveq	#cBlack,d1
000022C8 1038 F627                  		move.b	(v_pfade_size).w,d0
000022CC                            
000022CC                            	@fill:
000022CC 30C1                       		move.w	d1,(a0)+
000022CE 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with black
000022D2                            
000022D2 383C 0015                  		move.w	#$15,d4
000022D6                            
000022D6                            	@mainloop:
000022D6 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
000022DC 6100 0000                  		bsr.w	WaitForVBla
000022E0 6100                       		bsr.s	FadeIn_FromBlack
000022E2 6100 F4C2                  		bsr.w	RunPLC
000022E6 51CC FFEE                  		dbf	d4,@mainloop
000022EA 4E75                       		rts	
000022EC                            ; End of function PaletteFadeIn
000022EC                            
000022EC                            
000022EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022EC                            
000022EC                            
000022EC                            FadeIn_FromBlack:
000022EC 7000                       		moveq	#0,d0
000022EE 41F8 FB00                  		lea	(v_pal_dry).w,a0
000022F2 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
000022F6 1038 F626                  		move.b	(v_pfade_start).w,d0
000022FA D0C0                       		adda.w	d0,a0
000022FC D2C0                       		adda.w	d0,a1
000022FE 1038 F627                  		move.b	(v_pfade_size).w,d0
00002302                            
00002302                            	@addcolour:
00002302 6100                       		bsr.s	FadeIn_AddColour ; increase colour
00002304 51C8 FFFC                  		dbf	d0,@addcolour	; repeat for size of palette
00002308                            
00002308 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
0000230E 6600                       		bne.s	@exit		; if not, branch
00002310                            
00002310 7000                       		moveq	#0,d0
00002312 41F8 FA80                  		lea	(v_pal_water).w,a0
00002316 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
0000231A 1038 F626                  		move.b	(v_pfade_start).w,d0
0000231E D0C0                       		adda.w	d0,a0
00002320 D2C0                       		adda.w	d0,a1
00002322 1038 F627                  		move.b	(v_pfade_size).w,d0
00002326                            
00002326                            	@addcolour2:
00002326 6100                       		bsr.s	FadeIn_AddColour ; increase colour again
00002328 51C8 FFFC                  		dbf	d0,@addcolour2 ; repeat
0000232C                            
0000232C                            @exit:
0000232C 4E75                       		rts	
0000232E                            ; End of function FadeIn_FromBlack
0000232E                            
0000232E                            
0000232E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000232E                            
0000232E                            
0000232E                            FadeIn_AddColour:
0000232E                            @addblue:
0000232E 3419                       		move.w	(a1)+,d2
00002330 3610                       		move.w	(a0),d3
00002332 B642                       		cmp.w	d2,d3		; is colour already at threshold level?
00002334 6700                       		beq.s	@next		; if yes, branch
00002336 3203                       		move.w	d3,d1
00002338 0641 0200                  		addi.w	#$200,d1	; increase blue	value
0000233C B242                       		cmp.w	d2,d1		; has blue reached threshold level?
0000233E 6200                       		bhi.s	@addgreen	; if yes, branch
00002340 30C1                       		move.w	d1,(a0)+	; update palette
00002342 4E75                       		rts	
00002344                            ; ===========================================================================
00002344                            
00002344                            @addgreen:
00002344 3203                       		move.w	d3,d1
00002346 0641 0020                  		addi.w	#$20,d1		; increase green value
0000234A B242                       		cmp.w	d2,d1
0000234C 6200                       		bhi.s	@addred
0000234E 30C1                       		move.w	d1,(a0)+	; update palette
00002350 4E75                       		rts	
00002352                            ; ===========================================================================
00002352                            
00002352                            @addred:
00002352 5458                       		addq.w	#2,(a0)+	; increase red value
00002354 4E75                       		rts	
00002356                            ; ===========================================================================
00002356                            
00002356                            @next:
00002356 5448                       		addq.w	#2,a0		; next colour
00002358 4E75                       		rts	
0000235A                            ; End of function FadeIn_AddColour
0000235A                            
0000235A                            
0000235A                            ; ---------------------------------------------------------------------------
0000235A                            ; Subroutine to fade out to black
0000235A                            ; ---------------------------------------------------------------------------
0000235A                            
0000235A                            
0000235A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000235A                            
0000235A                            
0000235A                            PaletteFadeOut:
0000235A 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00002360 383C 0015                  		move.w	#$15,d4
00002364                            
00002364                            	@mainloop:
00002364 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
0000236A 6100 0000                  		bsr.w	WaitForVBla
0000236E 6100                       		bsr.s	FadeOut_ToBlack
00002370 6100 F434                  		bsr.w	RunPLC
00002374 51CC FFEE                  		dbf	d4,@mainloop
00002378 4E75                       		rts	
0000237A                            ; End of function PaletteFadeOut
0000237A                            
0000237A                            
0000237A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000237A                            
0000237A                            
0000237A                            FadeOut_ToBlack:
0000237A 7000                       		moveq	#0,d0
0000237C 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002380 1038 F626                  		move.b	(v_pfade_start).w,d0
00002384 D0C0                       		adda.w	d0,a0
00002386 1038 F627                  		move.b	(v_pfade_size).w,d0
0000238A                            
0000238A                            	@decolour:
0000238A 6100                       		bsr.s	FadeOut_DecColour ; decrease colour
0000238C 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
00002390                            
00002390 7000                       		moveq	#0,d0
00002392 41F8 FA80                  		lea	(v_pal_water).w,a0
00002396 1038 F626                  		move.b	(v_pfade_start).w,d0
0000239A D0C0                       		adda.w	d0,a0
0000239C 1038 F627                  		move.b	(v_pfade_size).w,d0
000023A0                            
000023A0                            	@decolour2:
000023A0 6100                       		bsr.s	FadeOut_DecColour
000023A2 51C8 FFFC                  		dbf	d0,@decolour2
000023A6 4E75                       		rts	
000023A8                            ; End of function FadeOut_ToBlack
000023A8                            
000023A8                            
000023A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000023A8                            
000023A8                            
000023A8                            FadeOut_DecColour:
000023A8                            @dered:
000023A8 3410                       		move.w	(a0),d2
000023AA 6700                       		beq.s	@next
000023AC 3202                       		move.w	d2,d1
000023AE 0241 000E                  		andi.w	#$E,d1
000023B2 6700                       		beq.s	@degreen
000023B4 5558                       		subq.w	#2,(a0)+	; decrease red value
000023B6 4E75                       		rts	
000023B8                            ; ===========================================================================
000023B8                            
000023B8                            @degreen:
000023B8 3202                       		move.w	d2,d1
000023BA 0241 00E0                  		andi.w	#$E0,d1
000023BE 6700                       		beq.s	@deblue
000023C0 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000023C4 4E75                       		rts	
000023C6                            ; ===========================================================================
000023C6                            
000023C6                            @deblue:
000023C6 3202                       		move.w	d2,d1
000023C8 0241 0E00                  		andi.w	#$E00,d1
000023CC 6700                       		beq.s	@next
000023CE 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000023D2 4E75                       		rts	
000023D4                            ; ===========================================================================
000023D4                            
000023D4                            @next:
000023D4 5448                       		addq.w	#2,a0
000023D6 4E75                       		rts	
000023D8                            ; End of function FadeOut_DecColour
000023D8                            
000023D8                            ; ---------------------------------------------------------------------------
000023D8                            ; Subroutine to	fade in from white (Special Stage)
000023D8                            ; ---------------------------------------------------------------------------
000023D8                            
000023D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000023D8                            
000023D8                            
000023D8                            PaletteWhiteIn:
000023D8 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
000023DE 7000                       		moveq	#0,d0
000023E0 41F8 FB00                  		lea	(v_pal_dry).w,a0
000023E4 1038 F626                  		move.b	(v_pfade_start).w,d0
000023E8 D0C0                       		adda.w	d0,a0
000023EA 323C 0EEE                  		move.w	#cWhite,d1
000023EE 1038 F627                  		move.b	(v_pfade_size).w,d0
000023F2                            
000023F2                            	@fill:
000023F2 30C1                       		move.w	d1,(a0)+
000023F4 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with white
000023F8                            
000023F8 383C 0015                  		move.w	#$15,d4
000023FC                            
000023FC                            	@mainloop:
000023FC 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002402 6100 0000                  		bsr.w	WaitForVBla
00002406 6100                       		bsr.s	WhiteIn_FromWhite
00002408 6100 F39C                  		bsr.w	RunPLC
0000240C 51CC FFEE                  		dbf	d4,@mainloop
00002410 4E75                       		rts	
00002412                            ; End of function PaletteWhiteIn
00002412                            
00002412                            
00002412                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002412                            
00002412                            
00002412                            WhiteIn_FromWhite:
00002412 7000                       		moveq	#0,d0
00002414 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002418 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
0000241C 1038 F626                  		move.b	(v_pfade_start).w,d0
00002420 D0C0                       		adda.w	d0,a0
00002422 D2C0                       		adda.w	d0,a1
00002424 1038 F627                  		move.b	(v_pfade_size).w,d0
00002428                            
00002428                            	@decolour:
00002428 6100                       		bsr.s	WhiteIn_DecColour ; decrease colour
0000242A 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
0000242E                            
0000242E 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
00002434 6600                       		bne.s	@exit		; if not, branch
00002436 7000                       		moveq	#0,d0
00002438 41F8 FA80                  		lea	(v_pal_water).w,a0
0000243C 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00002440 1038 F626                  		move.b	(v_pfade_start).w,d0
00002444 D0C0                       		adda.w	d0,a0
00002446 D2C0                       		adda.w	d0,a1
00002448 1038 F627                  		move.b	(v_pfade_size).w,d0
0000244C                            
0000244C                            	@decolour2:
0000244C 6100                       		bsr.s	WhiteIn_DecColour
0000244E 51C8 FFFC                  		dbf	d0,@decolour2
00002452                            
00002452                            	@exit:
00002452 4E75                       		rts	
00002454                            ; End of function WhiteIn_FromWhite
00002454                            
00002454                            
00002454                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002454                            
00002454                            
00002454                            WhiteIn_DecColour:
00002454                            @deblue:
00002454 3419                       		move.w	(a1)+,d2
00002456 3610                       		move.w	(a0),d3
00002458 B642                       		cmp.w	d2,d3
0000245A 6700                       		beq.s	@next
0000245C 3203                       		move.w	d3,d1
0000245E 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002462 6500                       		blo.s	@degreen
00002464 B242                       		cmp.w	d2,d1
00002466 6500                       		blo.s	@degreen
00002468 30C1                       		move.w	d1,(a0)+
0000246A 4E75                       		rts	
0000246C                            ; ===========================================================================
0000246C                            
0000246C                            @degreen:
0000246C 3203                       		move.w	d3,d1
0000246E 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002472 6500                       		blo.s	@dered
00002474 B242                       		cmp.w	d2,d1
00002476 6500                       		blo.s	@dered
00002478 30C1                       		move.w	d1,(a0)+
0000247A 4E75                       		rts	
0000247C                            ; ===========================================================================
0000247C                            
0000247C                            @dered:
0000247C 5558                       		subq.w	#2,(a0)+	; decrease red value
0000247E 4E75                       		rts	
00002480                            ; ===========================================================================
00002480                            
00002480                            @next:
00002480 5448                       		addq.w	#2,a0
00002482 4E75                       		rts	
00002484                            ; End of function WhiteIn_DecColour
00002484                            
00002484                            ; ---------------------------------------------------------------------------
00002484                            ; Subroutine to fade to white (Special Stage)
00002484                            ; ---------------------------------------------------------------------------
00002484                            
00002484                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002484                            
00002484                            
00002484                            PaletteWhiteOut:
00002484 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
0000248A 383C 0015                  		move.w	#$15,d4
0000248E                            
0000248E                            	@mainloop:
0000248E 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002494 6100 0000                  		bsr.w	WaitForVBla
00002498 6100                       		bsr.s	WhiteOut_ToWhite
0000249A 6100 F30A                  		bsr.w	RunPLC
0000249E 51CC FFEE                  		dbf	d4,@mainloop
000024A2 4E75                       		rts	
000024A4                            ; End of function PaletteWhiteOut
000024A4                            
000024A4                            
000024A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000024A4                            
000024A4                            
000024A4                            WhiteOut_ToWhite:
000024A4 7000                       		moveq	#0,d0
000024A6 41F8 FB00                  		lea	(v_pal_dry).w,a0
000024AA 1038 F626                  		move.b	(v_pfade_start).w,d0
000024AE D0C0                       		adda.w	d0,a0
000024B0 1038 F627                  		move.b	(v_pfade_size).w,d0
000024B4                            
000024B4                            	@addcolour:
000024B4 6100                       		bsr.s	WhiteOut_AddColour
000024B6 51C8 FFFC                  		dbf	d0,@addcolour
000024BA                            
000024BA 7000                       		moveq	#0,d0
000024BC 41F8 FA80                  		lea	(v_pal_water).w,a0
000024C0 1038 F626                  		move.b	(v_pfade_start).w,d0
000024C4 D0C0                       		adda.w	d0,a0
000024C6 1038 F627                  		move.b	(v_pfade_size).w,d0
000024CA                            
000024CA                            	@addcolour2:
000024CA 6100                       		bsr.s	WhiteOut_AddColour
000024CC 51C8 FFFC                  		dbf	d0,@addcolour2
000024D0 4E75                       		rts	
000024D2                            ; End of function WhiteOut_ToWhite
000024D2                            
000024D2                            
000024D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000024D2                            
000024D2                            
000024D2                            WhiteOut_AddColour:
000024D2                            @addred:
000024D2 3410                       		move.w	(a0),d2
000024D4 0C42 0EEE                  		cmpi.w	#cWhite,d2
000024D8 6700                       		beq.s	@next
000024DA 3202                       		move.w	d2,d1
000024DC 0241 000E                  		andi.w	#$E,d1
000024E0 0C41 000E                  		cmpi.w	#cRed,d1
000024E4 6700                       		beq.s	@addgreen
000024E6 5458                       		addq.w	#2,(a0)+	; increase red value
000024E8 4E75                       		rts	
000024EA                            ; ===========================================================================
000024EA                            
000024EA                            @addgreen:
000024EA 3202                       		move.w	d2,d1
000024EC 0241 00E0                  		andi.w	#$E0,d1
000024F0 0C41 00E0                  		cmpi.w	#cGreen,d1
000024F4 6700                       		beq.s	@addblue
000024F6 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000024FA 4E75                       		rts	
000024FC                            ; ===========================================================================
000024FC                            
000024FC                            @addblue:
000024FC 3202                       		move.w	d2,d1
000024FE 0241 0E00                  		andi.w	#$E00,d1
00002502 0C41 0E00                  		cmpi.w	#cBlue,d1
00002506 6700                       		beq.s	@next
00002508 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
0000250C 4E75                       		rts	
0000250E                            ; ===========================================================================
0000250E                            
0000250E                            @next:
0000250E 5448                       		addq.w	#2,a0
00002510 4E75                       		rts	
00002512                            ; End of function WhiteOut_AddColour
00002512                            
00002512                            ; ---------------------------------------------------------------------------
00002512                            ; Palette cycling routine - Sega logo
00002512                            ; ---------------------------------------------------------------------------
00002512                            
00002512                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002512                            
00002512                            
00002512                            PalCycle_Sega:
00002512 4A38 F635                  		tst.b	(v_pcyc_time+1).w
00002516 6600                       		bne.s	loc_206A
00002518 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
0000251C 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002522 7205                       		moveq	#5,d1
00002524 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002528                            
00002528                            loc_2020:
00002528 6A00                       		bpl.s	loc_202A
0000252A 5448                       		addq.w	#2,a0
0000252C 5341                       		subq.w	#1,d1
0000252E 5440                       		addq.w	#2,d0
00002530 60F6                       		bra.s	loc_2020
00002532                            ; ===========================================================================
00002532                            
00002532                            loc_202A:
00002532 3400                       		move.w	d0,d2
00002534 0242 001E                  		andi.w	#$1E,d2
00002538 6600                       		bne.s	loc_2034
0000253A 5440                       		addq.w	#2,d0
0000253C                            
0000253C                            loc_2034:
0000253C 0C40 0060                  		cmpi.w	#$60,d0
00002540 6400                       		bhs.s	loc_203E
00002542 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002546                            
00002546                            loc_203E:
00002546 5440                       		addq.w	#2,d0
00002548 51C9 FFE8                  		dbf	d1,loc_202A
0000254C                            
0000254C 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002550 5440                       		addq.w	#2,d0
00002552 3400                       		move.w	d0,d2
00002554 0242 001E                  		andi.w	#$1E,d2
00002558 6600                       		bne.s	loc_2054
0000255A 5440                       		addq.w	#2,d0
0000255C                            
0000255C                            loc_2054:
0000255C 0C40 0064                  		cmpi.w	#$64,d0
00002560 6D00                       		blt.s	loc_2062
00002562 31FC 0401 F634             		move.w	#$401,(v_pcyc_time).w
00002568 70F4                       		moveq	#-$C,d0
0000256A                            
0000256A                            loc_2062:
0000256A 31C0 F632                  		move.w	d0,(v_pcyc_num).w
0000256E 7001                       		moveq	#1,d0
00002570 4E75                       		rts	
00002572                            ; ===========================================================================
00002572                            
00002572                            loc_206A:
00002572 5338 F634                  		subq.b	#1,(v_pcyc_time).w
00002576 6A00                       		bpl.s	loc_20BC
00002578 11FC 0004 F634             		move.b	#4,(v_pcyc_time).w
0000257E 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002582 0640 000C                  		addi.w	#$C,d0
00002586 0C40 0030                  		cmpi.w	#$30,d0
0000258A 6500                       		blo.s	loc_2088
0000258C 7000                       		moveq	#0,d0
0000258E 4E75                       		rts	
00002590                            ; ===========================================================================
00002590                            
00002590                            loc_2088:
00002590 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00002594 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000259A 41F0 0000                  		lea	(a0,d0.w),a0
0000259E 43F8 FB04                  		lea	(v_pal_dry+$04).w,a1
000025A2 22D8                       		move.l	(a0)+,(a1)+
000025A4 22D8                       		move.l	(a0)+,(a1)+
000025A6 3298                       		move.w	(a0)+,(a1)
000025A8 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
000025AC 7000                       		moveq	#0,d0
000025AE 722C                       		moveq	#$2C,d1
000025B0                            
000025B0                            loc_20A8:
000025B0 3400                       		move.w	d0,d2
000025B2 0242 001E                  		andi.w	#$1E,d2
000025B6 6600                       		bne.s	loc_20B2
000025B8 5440                       		addq.w	#2,d0
000025BA                            
000025BA                            loc_20B2:
000025BA 3390 0000                  		move.w	(a0),(a1,d0.w)
000025BE 5440                       		addq.w	#2,d0
000025C0 51C9 FFEE                  		dbf	d1,loc_20A8
000025C4                            
000025C4                            loc_20BC:
000025C4 7001                       		moveq	#1,d0
000025C6 4E75                       		rts	
000025C8                            ; End of function PalCycle_Sega
000025C8                            
000025C8                            ; ===========================================================================
000025C8                            
000025C8                            Pal_Sega1:	incbin	"palette\Sega1.bin"
000025D4                            Pal_Sega2:	incbin	"palette\Sega2.bin"
00002604                            
00002604                            ; ---------------------------------------------------------------------------
00002604                            ; Subroutines to load palettes
00002604                            
00002604                            ; input:
00002604                            ;	d0 = index number for palette
00002604                            ; ---------------------------------------------------------------------------
00002604                            
00002604                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002604                            
00002604                            
00002604                            ; ---------------------------------------------------------------------------
00002604                            ; Subroutines to load pallets
00002604                            ; ---------------------------------------------------------------------------
00002604                            
00002604                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002604                            
00002604                            PalLoad1:
00002604 1238 FE11                  		move.b ($FFFFFE11),d1
00002608 43F9 0000 0000             		lea (PalPointers).l,a1
0000260E 0C01 0000                  		cmp.b #0,d1
00002612 6700 0000                  		beq.w PalLoad1_Continue
00002616 43F9 0000 0000             		lea (PalPointers2).l,a1
0000261C 0C01 0001                  		cmp.b #1,d1
00002620 6700 0000                  		beq.w PalLoad1_Continue
00002624 43F9 0000 0000             		lea (PalPointers3).l,a1
0000262A                            
0000262A                            PalLoad1_Continue:
0000262A E748                       		lsl.w #3,d0
0000262C D2C0                       		adda.w d0,a1
0000262E 2459                       		movea.l (a1)+,a2
00002630 3659                       		movea.w (a1)+,a3
00002632 D6FC 0080                  		adda.w #$80,a3
00002636 3E19                       		move.w (a1)+,d7
00002638                            
00002638                            loc_2110:
00002638 26DA                       		move.l (a2)+,(a3)+
0000263A 51CF FFFC                  		dbf d7,loc_2110
0000263E 4E75                       		rts
00002640                             ; End of function PalLoad1
00002640                            
00002640                            
00002640                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002640                            
00002640                            PalLoad2:
00002640 1238 FE11                  		move.b ($FFFFFE11),d1
00002644 43F9 0000 0000             		lea (PalPointers).l,a1
0000264A 0C01 0000                  		cmp.b #0,d1
0000264E 6700 0000                  		beq.w PalLoad2_Continue
00002652 43F9 0000 0000             		lea (PalPointers2).l,a1
00002658 0C01 0001                  		cmp.b #1,d1
0000265C 6700 0000                  		beq.w PalLoad2_Continue
00002660 43F9 0000 0000             		lea (PalPointers3).l,a1
00002666                            
00002666                            
00002666                            PalLoad2_Continue:
00002666 E748                       		lsl.w #3,d0
00002668 D2C0                       		adda.w d0,a1
0000266A 2459                       		movea.l (a1)+,a2
0000266C 3659                       		movea.w (a1)+,a3
0000266E 3E19                       		move.w (a1)+,d7
00002670                            
00002670                            loc_2128:
00002670 26DA                       		move.l (a2)+,(a3)+
00002672 51CF FFFC                  		dbf d7,loc_2128
00002676 4E75                       		rts
00002678                            ; End of function PalLoad2
00002678                            
00002678                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00002678                            
00002678                            
00002678                            PalLoad_Loop: ;Quick load - TIS
00002678                                    
00002678 34D9                               move.w    (a1)+,(a2)+              ;Copy pallete data to RAM
0000267A 51C8 FFFC                          dbf    d0,PalLoad_Loop               ;Loop d0 (length)
0000267E 4E75                               rts
00002680                            
00002680                            ; ---------------------------------------------------------------------------
00002680                            ; Underwater pallet loading subroutine
00002680                            ; ---------------------------------------------------------------------------
00002680                            
00002680                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002680                            
00002680                            PalLoad3_Water:
00002680 1238 FE11                  		move.b ($FFFFFE11),d1
00002684 43F9 0000 0000             		lea (PalPointers).l,a1
0000268A 0C01 0000                  		cmp.b #0,d1
0000268E 6700 0000                  		beq.w PalLoad3_Continue
00002692 43F9 0000 0000             		lea (PalPointers2).l,a1
00002698 0C01 0001                  		cmp.b #1,d1
0000269C 6700 0000                  		beq.w PalLoad3_Continue
000026A0 43F9 0000 0000             		lea (PalPointers3).l,a1
000026A6                            
000026A6                            PalLoad3_Continue:
000026A6 E748                       		lsl.w #3,d0
000026A8 D2C0                       		adda.w d0,a1
000026AA 2459                       		movea.l (a1)+,a2
000026AC 3659                       		movea.w (a1)+,a3
000026AE 96FC 0080                  		suba.w #$80,a3
000026B2 3E19                       		move.w (a1)+,d7
000026B4                            
000026B4                            loc_2144:
000026B4 26DA                       		move.l (a2)+,(a3)+
000026B6 51CF FFFC                  		dbf d7,loc_2144
000026BA 4E75                       		rts
000026BC                            ; End of function PalLoad3_Water
000026BC                            
000026BC                            
000026BC                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000026BC                            
000026BC                            
000026BC                            PalLoad4_Water:
000026BC 1238 FE11                  		move.b ($FFFFFE11),d1
000026C0 43F9 0000 0000             		lea (PalPointers).l,a1
000026C6 0C01 0000                  		cmp.b #0,d1
000026CA 6700 0000                  		beq.w PalLoad4_Continue
000026CE 43F9 0000 0000             		lea (PalPointers2).l,a1
000026D4 0C01 0001                  		cmp.b #1,d1
000026D8 6700 0000                  		beq.w PalLoad4_Continue
000026DC 43F9 0000 0000             		lea (PalPointers3).l,a1
000026E2                            
000026E2                            PalLoad4_Continue:
000026E2 E748                       		lsl.w #3,d0
000026E4 D2C0                       		adda.w d0,a1
000026E6 2459                       		movea.l (a1)+,a2
000026E8 3659                       		movea.w (a1)+,a3
000026EA 96FC 0100                  		suba.w #$100,a3
000026EE 3E19                       		move.w (a1)+,d7
000026F0                            loc_2160:
000026F0 26DA                       		move.l (a2)+,(a3)+
000026F2 51CF FFFC                  		dbf d7,loc_2160
000026F6 4E75                       		rts
000026F8                             ; End of function PalLoad4_Water
000026F8                            
000026F8                            ; ===========================================================================
000026F8                            
000026F8                            		include	"_inc\Palette Pointers.asm"
000026F8                            ; ---------------------------------------------------------------------------
000026F8                            ; Palette pointers
000026F8                            ; ---------------------------------------------------------------------------
000026F8                            
000026F8                            palp:	macro paladdress,ramaddress,colors
000026F8                            	dc.l paladdress
000026F8                            	dc.w ramaddress, (colors>>1)-1
000026F8                            	endm
000026F8                            
000026F8                            PalPointers:
000026F8                            
000026F8                            ; palette address, RAM address, colors
000026F8                            
000026F8 0000 0000 FB00 001F        ptr_Pal_SegaBG:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002700 0000 0000 FB00 001F        ptr_Pal_Title:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002708 0000 0000 FB00 001F        ptr_Pal_LevelSel:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002710 0000 0000 FB00 0007        ptr_Pal_Sonic:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002718                            Pal_Levels:
00002718 0000 0000 FB20 0017        ptr_Pal_GHZ:		palp	Pal_GHZ,v_pal_dry+$20, $30		; 4 - GHZ
00002720 0000 0000 FB20 0017        ptr_Pal_LZ:		palp	Pal_LZ,v_pal_dry+$20,$30		; 5 - LZ
00002728 0000 0000 FB20 0017        ptr_Pal_MZ:		palp	Pal_MZ,v_pal_dry+$20,$30		; 6 - MZ
00002730 0000 0000 FB20 0017        ptr_Pal_SLZ:		palp	Pal_SLZ,v_pal_dry+$20,$30		; 7 - SLZ
00002738 0000 0000 FB20 0017        ptr_Pal_SYZ:		palp	Pal_SYZ,v_pal_dry+$20,$30		; 8 - SYZ
00002740 0000 0000 FB20 0017        ptr_Pal_SBZ1:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002748 0000 0000 FB00 001F        ptr_Pal_Special:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002750 0000 0000 FB00 001F        ptr_Pal_LZWater:	palp	Pal_LZWater,v_pal_dry,$40		; $B (11) - LZ underwater
00002758 0000 0000 FB20 0017        ptr_Pal_SBZ3:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002760 0000 0000 FB00 001F        ptr_Pal_SBZ3Water:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002768 0000 0000 FB20 0017        ptr_Pal_SBZ2:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002770 0000 0000 FB00 0007        ptr_Pal_LZSonWater:	palp	Pal_LZSonWater,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002778 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002780 0000 0000 FB00 001F        ptr_Pal_SSResult:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002788 0000 0000 FB00 000F        ptr_Pal_Continue:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002790 0000 0000 FB00 001F        ptr_Pal_Options:		palp	Pal_Options,v_pal_dry,$40		; $14 (20) - options screen
00002798 0000 0000 FB00 001F        ptr_Pal_Ending2:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
000027A0 0000 0000 FB00 001F        ptr_Pal_Ending:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
000027A8 0000 0000 FB00 0007        ptr_Pal_Sonic2:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (20) - Sonic (Sonic 1)
000027B0 0000 0000 FB00 0007        ptr_Pal_Sonic3:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (21) - Sonic (Beta)
000027B8 0000 0000 FB00 0007        ptr_Pal_Sonic4:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (22) - Sonic (Midnight)
000027C0 0000 0000 FB00 0007        ptr_Pal_Sonic5:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (23) - Sonic (C2)
000027C8 0000 0000 FB00 0007        ptr_Pal_Sonic6:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (24) - Sonic (Crackers)
000027D0 0000 0000 FB00 0007        ptr_Pal_Sonic7:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (25) - Sonic (RHS)
000027D8 0000 0000 FB00 0007        ptr_Pal_Sonic8:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (26) - Sonic (Socket)
000027E0 0000 0000 FB00 0007        ptr_Pal_Sonic9:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (27) - Sonic (Cringe)
000027E8 0000 0000 FB00 0007        ptr_Pal_Sonic10:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
000027F0 0000 0000 FB00 0007        ptr_Pal_Sonic11:		palp	Pal_Sonic11,v_pal_dry,$10		; $1E (29) - Sonic (DeltaWooloo)
000027F8 0000 0000 FB00 0007        ptr_Pal_SonWater2:		palp	Pal_SonWater2,v_pal_dry,$10		; $1F (30) - Sonic Underwater (Sonic 1)
00002800 0000 0000 FB00 0007        ptr_Pal_SonWater3:		palp	Pal_SonWater3,v_pal_dry,$10		; $20 (31) - Sonic Underwater (Beta)
00002808 0000 0000 FB00 0007        ptr_Pal_SonWater4:		palp	Pal_SonWater4,v_pal_dry,$10		; $21 (32) - Sonic Underwater (Midnight)
00002810 0000 0000 FB00 0007        ptr_Pal_SonWater5:		palp	Pal_SonWater5,v_pal_dry,$10		; $22 (33) - Sonic Underwater (C2)
00002818 0000 0000 FB00 0007        ptr_Pal_SonWater6:		palp	Pal_SonWater6,v_pal_dry,$10		; $23 (34) - Sonic Underwater (Crackers)
00002820 0000 0000 FB00 0007        ptr_Pal_SonWater7:		palp	Pal_SonWater7,v_pal_dry,$10		; $24 (35) - Sonic Underwater (RHS)
00002828 0000 0000 FB00 0007        ptr_Pal_SonWater8:		palp	Pal_SonWater8,v_pal_dry,$10		; $25 (36) - Sonic Underwater (Socket)
00002830 0000 0000 FB00 0007        ptr_Pal_SonWater9:		palp	Pal_SonWater9,v_pal_dry,$10		; $26 (37) - Sonic Underwater (Cringe)
00002838 0000 0000 FB00 0007        ptr_Pal_SonWater10:		palp	Pal_SonWater10,v_pal_dry,$10		; $27 (38) - Sonic Underwater (Darker)
00002840 0000 0000 FB00 0007        ptr_Pal_SonWater11:		palp	Pal_SonWater11,v_pal_dry,$10		; $28 (39) - Sonic Underwater (Darker)
00002848 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $28 (40) - Sonic Underwater (Sonic 1)
00002850 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $29 (41) - Sonic Underwater (Beta)
00002858 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $2A (42) - Sonic Underwater (Midnight)
00002860 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $2B (43) - Sonic Underwater (C2)
00002868 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $2C (44) - Sonic Underwater (Crackers)
00002870 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $2D (45) - Sonic Underwater (RHS)
00002878 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $2E (46) - Sonic Underwater (Socket)
00002880 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $2F (47) - Sonic Underwater (Cringe)
00002888 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $30 (48) - Sonic Underwater (Darker)
00002890 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat11:	palp	Pal_SBZ3SonWat11,v_pal_dry,$10	; $31 (49) - Sonic Underwater (DeltaWooloo)
00002898                            			even
00002898                            
00002898                            PalPointers2:
00002898                            
00002898                            ; palette address, RAM address, colors
00002898                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
00002898 0000 0000 FB00 001F        ptr_Pal_SegaBG_D:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
000028A0 0000 0000 FB00 001F        ptr_Pal_Title_D:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
000028A8 0000 0000 FB00 001F        ptr_Pal_LevelSel_D:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
000028B0 0000 0000 FB00 0007        ptr_Pal_SonicD:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
000028B8                            Pal_Levels_2:
000028B8 0000 0000 FB20 0017        ptr_Pal_GHZ2:		palp	Pal_GHZ2,v_pal_dry+$20, $30		; 4 - GHZ
000028C0 0000 0000 FB20 0017        ptr_Pal_LZ2:		palp	Pal_LZ2,v_pal_dry+$20,$30		; 5 - LZ
000028C8 0000 0000 FB20 0017        ptr_Pal_MZ2:		palp	Pal_MZ2,v_pal_dry+$20,$30		; 6 - MZ
000028D0 0000 0000 FB20 0017        ptr_Pal_SLZ2:		palp	Pal_SLZ2,v_pal_dry+$20,$30		; 7 - SLZ
000028D8 0000 0000 FB20 0017        ptr_Pal_SYZ2:		palp	Pal_SYZ2,v_pal_dry+$20,$30		; 8 - SYZ
000028E0 0000 0000 FB20 0017        ptr_Pal_SBZ1_D:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
000028E8 0000 0000 FB00 001F        ptr_Pal_Special_D:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
000028F0 0000 0000 FB00 001F        ptr_Pal_LZWatr2:	palp	Pal_LZWatr2,v_pal_dry,$40		; $B (11) - LZ underwater
000028F8 0000 0000 FB20 0017        ptr_Pal_SBZ3_D:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002900 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_D:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002908 0000 0000 FB20 0017        ptr_Pal_SBZ2_D:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002910 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002918 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_D:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002920 0000 0000 FB00 001F        ptr_Pal_SSResult_D:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002928 0000 0000 FB00 000F        ptr_Pal_Continue_D:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002930 0000 0000 FB00 001F        ptr_Pal_Options_D:		palp	Pal_Options,v_pal_dry,$40		; $13 (20) - options screen
00002938 0000 0000 FB00 001F        ptr_Pal_Ending2_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
00002940 0000 0000 FB00 001F        ptr_Pal_Ending_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
00002948 0000 0000 FB00 0007        ptr_Pal_Sonic2_D:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
00002950 0000 0000 FB00 0007        ptr_Pal_Sonic3_D:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
00002958 0000 0000 FB00 0007        ptr_Pal_Sonic4_D:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
00002960 0000 0000 FB00 0007        ptr_Pal_Sonic5_D:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
00002968 0000 0000 FB00 0007        ptr_Pal_Sonic6_D:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
00002970 0000 0000 FB00 0007        ptr_Pal_Sonic7_D:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
00002978 0000 0000 FB00 0007        ptr_Pal_Sonic8_D:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002980 0000 0000 FB00 0007        ptr_Pal_Sonic9_D:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002988 0000 0000 FB00 0007        ptr_Pal_Sonic10_D:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
00002990 0000 0000 FB00 0007        ptr_Pal_Sonic11_D:		palp	Pal_Sonic11,v_pal_dry,$10		; $1E (29) - Sonic (DeltaWooloo)
00002998 0000 0000 FB00 0007        ptr_Pal_SonWater2_D:		palp	Pal_SonWater2,v_pal_dry,$10		; $1F (30) - Sonic Underwater (Sonic 1)
000029A0 0000 0000 FB00 0007        ptr_Pal_SonWater3_D:		palp	Pal_SonWater3,v_pal_dry,$10		; $20 (31) - Sonic Underwater (Beta)
000029A8 0000 0000 FB00 0007        ptr_Pal_SonWater4_D:		palp	Pal_SonWater4,v_pal_dry,$10		; $21 (32) - Sonic Underwater (Midnight)
000029B0 0000 0000 FB00 0007        ptr_Pal_SonWater5_D:		palp	Pal_SonWater5,v_pal_dry,$10		; $22 (33) - Sonic Underwater (C2)
000029B8 0000 0000 FB00 0007        ptr_Pal_SonWater6_D:		palp	Pal_SonWater6,v_pal_dry,$10		; $23 (34) - Sonic Underwater (Crackers)
000029C0 0000 0000 FB00 0007        ptr_Pal_SonWater7_D:		palp	Pal_SonWater7,v_pal_dry,$10		; $24 (35) - Sonic Underwater (RHS)
000029C8 0000 0000 FB00 0007        ptr_Pal_SonWater8_D:		palp	Pal_SonWater8,v_pal_dry,$10		; $25 (36) - Sonic Underwater (Socket)
000029D0 0000 0000 FB00 0007        ptr_Pal_SonWater9_D:		palp	Pal_SonWater9,v_pal_dry,$10		; $26 (37) - Sonic Underwater (Cringe)
000029D8 0000 0000 FB00 0007        ptr_Pal_SonWater10_D:		palp	Pal_SonWater10,v_pal_dry,$10		; $27 (38) - Sonic Underwater (Darker)
000029E0 0000 0000 FB00 0007        ptr_Pal_SonWater11_D:		palp	Pal_SonWater11,v_pal_dry,$10		; $28 (39) - Sonic Underwater (Darker)
000029E8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2_D:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $28 (40) - Sonic Underwater (Sonic 1)
000029F0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3_D:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $29 (41) - Sonic Underwater (Beta)
000029F8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4_D:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $2A (42) - Sonic Underwater (Midnight)
00002A00 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5_D:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $2B (43) - Sonic Underwater (C2)
00002A08 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6_D:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $2C (44) - Sonic Underwater (Crackers)
00002A10 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7_D:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $2D (45) - Sonic Underwater (RHS)
00002A18 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8_D:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $2E (46) - Sonic Underwater (Socket)
00002A20 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9_D:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $2F (47) - Sonic Underwater (Cringe)
00002A28 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10_D:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $30 (48) - Sonic Underwater (Darker)
00002A30 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat11_D:	palp	Pal_SBZ3SonWat11,v_pal_dry,$10	; $31 (49) - Sonic Underwater (DeltaWooloo)
00002A38                            			even
00002A38                            			
00002A38                            PalPointers3:
00002A38                            			
00002A38                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
00002A38 0000 0000 FB00 001F        ptr_Pal_SegaBG_E:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002A40 0000 0000 FB00 001F        ptr_Pal_Title_E:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002A48 0000 0000 FB00 001F        ptr_Pal_LevelSel_E:		palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002A50 0000 0000 FB00 0007        ptr_Pal_SonicE:			palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002A58                            Pal_Levels_3:
00002A58 0000 0000 FB20 0017        ptr_Pal_GHZ3:		palp	Pal_GHZ3,v_pal_dry+$20, $30		; 4 - GHZ
00002A60 0000 0000 FB20 0017        ptr_Pal_LZ3:		palp	Pal_LZ3,v_pal_dry+$20,$30		; 5 - LZ
00002A68 0000 0000 FB20 0017        ptr_Pal_MZ3:		palp	Pal_MZ3,v_pal_dry+$20,$30		; 6 - MZ
00002A70 0000 0000 FB20 0017        ptr_Pal_SLZ3:		palp	Pal_SLZ3,v_pal_dry+$20,$30		; 7 - SLZ
00002A78 0000 0000 FB20 0017        ptr_Pal_SYZ3:		palp	Pal_SYZ3,v_pal_dry+$20,$30		; 8 - SYZ
00002A80 0000 0000 FB20 0017        ptr_Pal_SBZ1_E:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002A88 0000 0000 FB00 001F        ptr_Pal_Special_E:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002A90 0000 0000 FB00 001F        ptr_Pal_LZWatr3:	palp	Pal_LZWatr3,v_pal_dry,$40		; $B (11) - LZ underwater
00002A98 0000 0000 FB20 0017        ptr_Pal_SBZ3_E:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002AA0 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_E:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002AA8 0000 0000 FB20 0017        ptr_Pal_SBZ2_E:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002AB0 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2E:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002AB8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_E:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002AC0 0000 0000 FB00 001F        ptr_Pal_SSResult_E:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002AC8 0000 0000 FB00 000F        ptr_Pal_Continue_E:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002AD0 0000 0000 FB00 001F        ptr_Pal_Options_E:		palp	Pal_Options,v_pal_dry,$40		; $14 (21) - options screen
00002AD8 0000 0000 FB00 001F        ptr_Pal_Ending2_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
00002AE0 0000 0000 FB00 001F        ptr_Pal_Ending_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
00002AE8 0000 0000 FB00 0007        ptr_Pal_Sonic2_E:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
00002AF0 0000 0000 FB00 0007        ptr_Pal_Sonic3_E:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
00002AF8 0000 0000 FB00 0007        ptr_Pal_Sonic4_E:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
00002B00 0000 0000 FB00 0007        ptr_Pal_Sonic5_E:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
00002B08 0000 0000 FB00 0007        ptr_Pal_Sonic6_E:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
00002B10 0000 0000 FB00 0007        ptr_Pal_Sonic7_E:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
00002B18 0000 0000 FB00 0007        ptr_Pal_Sonic8_E:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002B20 0000 0000 FB00 0007        ptr_Pal_Sonic9_E:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002B28 0000 0000 FB00 0007        ptr_Pal_Sonic10_E:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
00002B30 0000 0000 FB00 0007        ptr_Pal_Sonic11_E:		palp	Pal_Sonic11,v_pal_dry,$10		; $1E (29) - Sonic (DeltaWooloo)
00002B38 0000 0000 FB00 0007        ptr_Pal_SonWater2_E:		palp	Pal_SonWater2,v_pal_dry,$10		; $1F (30) - Sonic Underwater (Sonic 1)
00002B40 0000 0000 FB00 0007        ptr_Pal_SonWater3_E:		palp	Pal_SonWater3,v_pal_dry,$10		; $20 (31) - Sonic Underwater (Beta)
00002B48 0000 0000 FB00 0007        ptr_Pal_SonWater4_E:		palp	Pal_SonWater4,v_pal_dry,$10		; $21 (32) - Sonic Underwater (Midnight)
00002B50 0000 0000 FB00 0007        ptr_Pal_SonWater5_E:		palp	Pal_SonWater5,v_pal_dry,$10		; $22 (33) - Sonic Underwater (C2)
00002B58 0000 0000 FB00 0007        ptr_Pal_SonWater6_E:		palp	Pal_SonWater6,v_pal_dry,$10		; $23 (34) - Sonic Underwater (Crackers)
00002B60 0000 0000 FB00 0007        ptr_Pal_SonWater7_E:		palp	Pal_SonWater7,v_pal_dry,$10		; $24 (35) - Sonic Underwater (RHS)
00002B68 0000 0000 FB00 0007        ptr_Pal_SonWater8_E:		palp	Pal_SonWater8,v_pal_dry,$10		; $25 (36) - Sonic Underwater (Socket)
00002B70 0000 0000 FB00 0007        ptr_Pal_SonWater9_E:		palp	Pal_SonWater9,v_pal_dry,$10		; $26 (37) - Sonic Underwater (Cringe)
00002B78 0000 0000 FB00 0007        ptr_Pal_SonWater10_E:		palp	Pal_SonWater10,v_pal_dry,$10		; $27 (38) - Sonic Underwater (Darker)
00002B80 0000 0000 FB00 0007        ptr_Pal_SonWater11_E:		palp	Pal_SonWater11,v_pal_dry,$10		; $28 (39) - Sonic Underwater (Darker)
00002B88 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2_E:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $28 (40) - Sonic Underwater (Sonic 1)
00002B90 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3_E:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $29 (41) - Sonic Underwater (Beta)
00002B98 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4_E:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $2A (42) - Sonic Underwater (Midnight)
00002BA0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5_E:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $2B (43) - Sonic Underwater (C2)
00002BA8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6_E:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $2C (44) - Sonic Underwater (Crackers)
00002BB0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7_E:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $2D (45) - Sonic Underwater (RHS)
00002BB8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8_E:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $2E (46) - Sonic Underwater (Socket)
00002BC0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9_E:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $2F (47) - Sonic Underwater (Cringe)
00002BC8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10_E:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $30 (48) - Sonic Underwater (Darker)
00002BD0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat11_E:	palp	Pal_SBZ3SonWat11,v_pal_dry,$10	; $31 (49) - Sonic Underwater (DeltaWooloo)
00002BD8                            			even
00002BD8                            
00002BD8                            
00002BD8 =00000000                  palid_SegaBG:		equ (ptr_Pal_SegaBG-PalPointers)/8
00002BD8 =00000001                  palid_Title:		equ (ptr_Pal_Title-PalPointers)/8
00002BD8 =00000002                  palid_LevelSel:		equ (ptr_Pal_LevelSel-PalPointers)/8
00002BD8 =00000003                  palid_Sonic:		equ (ptr_Pal_Sonic-PalPointers)/8
00002BD8 =00000004                  palid_GHZ:		equ (ptr_Pal_GHZ-PalPointers)/8
00002BD8 =00000005                  palid_LZ:		equ (ptr_Pal_LZ-PalPointers)/8
00002BD8 =00000006                  palid_MZ:		equ (ptr_Pal_MZ-PalPointers)/8
00002BD8 =00000007                  palid_SLZ:		equ (ptr_Pal_SLZ-PalPointers)/8
00002BD8 =00000008                  palid_SYZ:		equ (ptr_Pal_SYZ-PalPointers)/8
00002BD8 =00000009                  palid_SBZ1:		equ (ptr_Pal_SBZ1-PalPointers)/8
00002BD8 =0000000A                  palid_Special:		equ (ptr_Pal_Special-PalPointers)/8
00002BD8 =0000000B                  palid_LZWater:		equ (ptr_Pal_LZWater-PalPointers)/8
00002BD8 =0000000C                  palid_SBZ3:		equ (ptr_Pal_SBZ3-PalPointers)/8
00002BD8 =0000000D                  palid_SBZ3Water:	equ (ptr_Pal_SBZ3Water-PalPointers)/8
00002BD8 =0000000E                  palid_SBZ2:		equ (ptr_Pal_SBZ2-PalPointers)/8
00002BD8 =0000000F                  palid_LZSonWater:	equ (ptr_Pal_LZSonWater-PalPointers)/8
00002BD8 =00000010                  palid_SBZ3SonWat:	equ (ptr_Pal_SBZ3SonWat-PalPointers)/8
00002BD8 =00000011                  palid_SSResult:		equ (ptr_Pal_SSResult-PalPointers)/8
00002BD8 =00000012                  palid_Continue:		equ (ptr_Pal_Continue-PalPointers)/8
00002BD8 =00000013                  palid_Options:		equ (ptr_Pal_Options-PalPointers)/8
00002BD8 =00000015                  palid_Ending2:		equ (ptr_Pal_Ending-PalPointers)/8
00002BD8 =00000015                  palid_Ending:		equ (ptr_Pal_Ending-PalPointers)/8
00002BD8 =00000004                  palid_GHZ2:		equ (ptr_Pal_GHZ-PalPointers)/8
00002BD8 =00000005                  palid_LZ2:		equ (ptr_Pal_LZ-PalPointers)/8
00002BD8 =00000006                  palid_MZ2:		equ (ptr_Pal_MZ-PalPointers)/8
00002BD8 =00000007                  palid_SLZ2:		equ (ptr_Pal_SLZ-PalPointers)/8
00002BD8 =00000008                  palid_SYZ2:		equ (ptr_Pal_SYZ-PalPointers)/8
00002BD8 =0000003F                  palid_LZWatr2:		equ (ptr_Pal_LZWatr2-PalPointers)/8
00002BD8 =0000000F                  palid_LZSonWatr2:	equ (ptr_Pal_LZSonWater-PalPointers)/8
00002BD8 =0000006C                  palid_GHZ3:		equ (ptr_Pal_GHZ3-PalPointers)/8
00002BD8 =0000006D                  palid_LZ3:		equ (ptr_Pal_LZ3-PalPointers)/8
00002BD8 =0000006E                  palid_MZ3:		equ (ptr_Pal_MZ3-PalPointers)/8
00002BD8 =0000006F                  palid_SLZ3:		equ (ptr_Pal_SLZ3-PalPointers)/8
00002BD8 =00000070                  palid_SYZ3:		equ (ptr_Pal_SYZ3-PalPointers)/8
00002BD8 =00000073                  palid_LZWatr3:		equ (ptr_Pal_LZWatr3-PalPointers)/8
00002BD8 =0000000F                  palid_LZSonWatr3:	equ (ptr_Pal_LZSonWater-PalPointers)/8
00002BD8 =00000016                  palid_Sonic2:		equ (ptr_Pal_Sonic2-PalPointers)/8
00002BD8 =00000017                  palid_Sonic3:		equ (ptr_Pal_Sonic3-PalPointers)/8
00002BD8 =00000018                  palid_Sonic4:		equ (ptr_Pal_Sonic4-PalPointers)/8
00002BD8 =00000019                  palid_Sonic5:		equ (ptr_Pal_Sonic5-PalPointers)/8
00002BD8 =0000001A                  palid_Sonic6:		equ (ptr_Pal_Sonic6-PalPointers)/8
00002BD8 =0000001B                  palid_Sonic7:		equ (ptr_Pal_Sonic7-PalPointers)/8
00002BD8 =0000001C                  palid_Sonic8:		equ (ptr_Pal_Sonic8-PalPointers)/8
00002BD8 =0000001D                  palid_Sonic9:		equ (ptr_Pal_Sonic9-PalPointers)/8
00002BD8 =0000001E                  palid_Sonic10:		equ (ptr_Pal_Sonic10-PalPointers)/8
00002BD8 =0000001F                  palid_Sonic11:		equ (ptr_Pal_Sonic11-PalPointers)/8
00002BD8 =00000020                  palid_SonWater2:		equ (ptr_Pal_SonWater2-PalPointers)/8
00002BD8 =00000021                  palid_SonWater3:		equ (ptr_Pal_SonWater3-PalPointers)/8
00002BD8 =00000022                  palid_SonWater4:		equ (ptr_Pal_SonWater4-PalPointers)/8
00002BD8 =00000023                  palid_SonWater5:		equ (ptr_Pal_SonWater5-PalPointers)/8
00002BD8 =00000024                  palid_SonWater6:		equ (ptr_Pal_SonWater6-PalPointers)/8
00002BD8 =00000025                  palid_SonWater7:		equ (ptr_Pal_SonWater7-PalPointers)/8
00002BD8 =00000026                  palid_SonWater8:		equ (ptr_Pal_SonWater8-PalPointers)/8
00002BD8 =00000027                  palid_SonWater9:		equ (ptr_Pal_SonWater9-PalPointers)/8
00002BD8 =00000028                  palid_SonWater10:		equ (ptr_Pal_SonWater10-PalPointers)/8
00002BD8 =00000029                  palid_SonWater11:		equ (ptr_Pal_SonWater11-PalPointers)/8
00002BD8 =0000002A                  palid_SBZ3SonWat2:		equ (ptr_Pal_SBZ3SonWat2-PalPointers)/8
00002BD8 =0000002B                  palid_SBZ3SonWat3:		equ (ptr_Pal_SBZ3SonWat3-PalPointers)/8
00002BD8 =0000002C                  palid_SBZ3SonWat4:		equ (ptr_Pal_SBZ3SonWat4-PalPointers)/8
00002BD8 =0000002D                  palid_SBZ3SonWat5:		equ (ptr_Pal_SBZ3SonWat5-PalPointers)/8
00002BD8 =0000002E                  palid_SBZ3SonWat6:		equ (ptr_Pal_SBZ3SonWat6-PalPointers)/8
00002BD8 =0000002F                  palid_SBZ3SonWat7:		equ (ptr_Pal_SBZ3SonWat7-PalPointers)/8
00002BD8 =00000030                  palid_SBZ3SonWat8:		equ (ptr_Pal_SBZ3SonWat8-PalPointers)/8
00002BD8 =00000031                  palid_SBZ3SonWat9:		equ (ptr_Pal_SBZ3SonWat9-PalPointers)/8
00002BD8 =00000032                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
00002BD8 =00000033                  palid_SBZ3SonWat11:		equ (ptr_Pal_SBZ3SonWat11-PalPointers)/8
00002BD8 =00000033                  palid_SBZ3SonWat11:		equ (ptr_Pal_SBZ3SonWat11-PalPointers)/8
00002BD8                            		
00002BD8                            		;include	"_inc\Palette Pointers2.asm"
00002BD8                            		
00002BD8                            		;include	"_inc\Palette Pointers3.asm"
00002BD8                            		
00002BD8                            
00002BD8                            ; ---------------------------------------------------------------------------
00002BD8                            ; Palette data
00002BD8                            ; ---------------------------------------------------------------------------
00002BD8                            Pal_SegaBG:	incbin	"palette\Sega Background.bin"
00002C58                            Pal_Title:	incbin	"palette\Title Screen.bin"
00002CD8                            Pal_LevelSel:	incbin	"palette\Level Select.bin"
00002D58                            Pal_Sonic:	incbin	"palette\Sonic Pal\01 Default.bin"
00002D78                            Pal_GHZ:	incbin	"palette\Green Hill Zone.bin"
00002DD8                            Pal_GHZ2:	incbin	"palette\Green Hill Zone2.bin"
00002E38                            Pal_GHZ3:	incbin	"palette\Green Hill Zone3.bin"
00002E98                            Pal_LZ:		incbin	"palette\Labyrinth Zone.bin"
00002EF8                            Pal_LZ2:	incbin	"palette\Labyrinth Zone2.bin"
00002F58                            Pal_LZ3:	incbin	"palette\Labyrinth Zone3.bin"
00002FB8                            Pal_LZWater:	incbin	"palette\Labyrinth Zone Underwater.bin"
00003038                            Pal_LZWatr2:	incbin	"palette\Labyrinth Zone Underwater2.bin"
000030B8                            Pal_LZWatr3:	incbin	"palette\Labyrinth Zone Underwater3.bin"
00003138                            Pal_MZ:		incbin	"palette\Marble Zone.bin"
00003198                            Pal_MZ2:	incbin	"palette\Marble Zone2.bin"
000031F8                            Pal_MZ3:	incbin	"palette\Marble Zone3.bin"
00003258                            Pal_SLZ:	incbin	"palette\Star Light Zone.bin"
000032B8                            Pal_SLZ2:	incbin	"palette\Star Light Zone2.bin"
00003318                            Pal_SLZ3:	incbin	"palette\Star Light Zone3.bin"
00003378                            Pal_SYZ:	incbin	"palette\Spring Yard Zone.bin"
000033D8                            Pal_SYZ2:	incbin	"palette\Spring Yard Zone2.bin"
00003438                            Pal_SYZ3:	incbin	"palette\Spring Yard Zone3.bin"
00003498                            Pal_SBZ1:	incbin	"palette\SBZ Act 1.bin"
000034F8                            Pal_SBZ2:	incbin	"palette\SBZ Act 2.bin"
00003558                            Pal_Special:	incbin	"palette\Special Stage.bin"
000035D8                            Pal_SBZ3:	incbin	"palette\SBZ Act 3.bin"
00003638                            Pal_SBZ3Water:	incbin	"palette\SBZ Act 3 Underwater.bin"
000036B8                            Pal_LZSonWater:	incbin	"palette\Sonic - LZ Underwater.bin"
000036D8                            Pal_LZSonWatr2:	incbin	"palette\Sonic - LZ2 Underwater.bin"
000036F8                            Pal_SBZ3SonWat:	incbin	"palette\Sonic - SBZ3 Underwater.bin"
00003718                            Pal_SSResult:	incbin	"palette\Special Stage Results.bin"
00003798                            Pal_Continue:	incbin	"palette\Special Stage Continue Bonus.bin"
000037D8                            Pal_Ending:	incbin	"palette\Ending.bin"
00003858                            Pal_Options:	incbin	"palette\Options.bin"
000038D8                            Pal_Sonic2:	incbin	"palette\Sonic Pal\02 Sonic 1.bin"
000038F8                            Pal_Sonic3:	incbin	"palette\Sonic Pal\03 Beta.bin"
00003918                            Pal_Sonic4:	incbin	"palette\Sonic Pal\04 Midnight.bin"
00003938                            Pal_Sonic5:	incbin	"palette\Sonic Pal\05 C2.bin"
00003958                            Pal_Sonic6:	incbin	"palette\Sonic Pal\06 Clacker.bin"
00003978                            Pal_Sonic7:	incbin	"palette\Sonic Pal\07 Red Hot.bin"
00003998                            Pal_Sonic8:	incbin	"palette\Sonic Pal\08 Socket.bin"
000039B8                            Pal_Sonic9:	incbin	"palette\Sonic Pal\09 Cringe.bin"
000039D8                            Pal_Sonic10:	incbin	"palette\Sonic Pal\10 Dark.bin"
000039F8                            Pal_Sonic11:	incbin	"palette\Sonic Pal\11 DeltaWooloo.bin"
00003A18                            Pal_SonWater2:	incbin	"palette\Sonic Pal\02 Sonic 1 Underwater.bin"
00003A38                            Pal_SonWater3:	incbin	"palette\Sonic Pal\03 Beta Underwater.bin"
00003A58                            Pal_SonWater4:	incbin	"palette\Sonic Pal\04 Midnight Underwater.bin"
00003A78                            Pal_SonWater5:	incbin	"palette\Sonic Pal\05 C2 Underwater.bin"
00003A98                            Pal_SonWater6:	incbin	"palette\Sonic Pal\06 Clacker Underwater.bin"
00003AB8                            Pal_SonWater7:	incbin	"palette\Sonic Pal\07 Red Hot Underwater.bin"
00003AD8                            Pal_SonWater8:	incbin	"palette\Sonic Pal\08 Socket Underwater.bin"
00003AF8                            Pal_SonWater9:	incbin	"palette\Sonic Pal\09 Cringe Underwater.bin"
00003B18                            Pal_SonWater10:	incbin	"palette\Sonic Pal\10 Dark Underwater.bin"
00003B38                            Pal_SonWater11:	incbin	"palette\Sonic Pal\11 DeltaWooloo Underwater.bin"
00003B58                            Pal_SBZ3SonWat2:	incbin	"palette\Sonic Pal\02 Sonic 1 SBZ3.bin"
00003B78                            Pal_SBZ3SonWat3:	incbin	"palette\Sonic Pal\03 Beta SBZ3.bin"
00003B98                            Pal_SBZ3SonWat4:	incbin	"palette\Sonic Pal\04 Midnight SBZ3.bin"
00003BB8                            Pal_SBZ3SonWat5:	incbin	"palette\Sonic Pal\05 C2 SBZ3.bin"
00003BD8                            Pal_SBZ3SonWat6:	incbin	"palette\Sonic Pal\06 Clacker SBZ3.bin"
00003BF8                            Pal_SBZ3SonWat7:	incbin	"palette\Sonic Pal\07 Red Hot SBZ3.bin"
00003C18                            Pal_SBZ3SonWat8:	incbin	"palette\Sonic Pal\08 Socket SBZ3.bin"
00003C38                            Pal_SBZ3SonWat9:	incbin	"palette\Sonic Pal\09 Cringe SBZ3.bin"
00003C58                            Pal_SBZ3SonWat10:	incbin	"palette\Sonic Pal\10 Dark SBZ3.bin"
00003C78                            Pal_SBZ3SonWat11:	incbin	"palette\Sonic Pal\11 DeltaWooloo SBZ3.bin"
00003C98                            ; ---------------------------------------------------------------------------
00003C98                            ; Subroutine to	wait for VBlank routines to complete
00003C98                            ; ---------------------------------------------------------------------------
00003C98                            
00003C98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003C98                            
00003C98                            
00003C98                            WaitForVBla:
00003C98 46FC 2300                  		enable_ints
00003C9C                            
00003C9C                            	@wait:
00003C9C 4A38 F62A                  		tst.b	(v_vbla_routine).w ; has VBlank routine finished?
00003CA0 66FA                       		bne.s	@wait		; if not, branch
00003CA2 4E75                       		rts	
00003CA4                            ; End of function WaitForVBla
00003CA4                            
00003CA4                            		include	"_incObj\sub RandomNumber.asm"
00003CA4                            ; ---------------------------------------------------------------------------
00003CA4                            ; Subroutine to	generate a pseudo-random number	in d0
00003CA4                            ; ---------------------------------------------------------------------------
00003CA4                            
00003CA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003CA4                            
00003CA4                            
00003CA4                            RandomNumber:
00003CA4 2238 F636                  		move.l	(v_random).w,d1
00003CA8 6600                       		bne.s	@scramble	; if d1 is not 0, branch
00003CAA 223C 2A6D 365A             		move.l	#$2A6D365A,d1	; if d1 is 0, use seed number
00003CB0                            
00003CB0                            	@scramble:
00003CB0 2001                       		move.l	d1,d0
00003CB2 E581                       		asl.l	#2,d1
00003CB4 D280                       		add.l	d0,d1
00003CB6 E781                       		asl.l	#3,d1
00003CB8 D280                       		add.l	d0,d1
00003CBA 3001                       		move.w	d1,d0
00003CBC 4841                       		swap	d1
00003CBE D041                       		add.w	d1,d0
00003CC0 3200                       		move.w	d0,d1
00003CC2 4841                       		swap	d1
00003CC4 21C1 F636                  		move.l	d1,(v_random).w
00003CC8 4E75                       		rts	
00003CC8 4E75                       		rts	
00003CCA                            		include	"_incObj\sub CalcSine.asm"
00003CCA                            ; ---------------------------------------------------------------------------
00003CCA                            ; Subroutine calculate a sine
00003CCA                            
00003CCA                            ; input:
00003CCA                            ;	d0 = angle
00003CCA                            
00003CCA                            ; output:
00003CCA                            ;	d0 = sine
00003CCA                            ;	d1 = cosine
00003CCA                            ; ---------------------------------------------------------------------------
00003CCA                            
00003CCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003CCA                            
00003CCA                            
00003CCA                            CalcSine:
00003CCA 0240 00FF                          andi.w  #$FF,d0
00003CCE 5040                               addq.w  #8,d0
00003CD0 D040                               add.w   d0,d0
00003CD2 323B 0000                          move.w  Sine_Data+($40*2)-16(pc,d0.w),d1
00003CD6 303B 0000                          move.w  Sine_Data-16(pc,d0.w),d0
00003CDA 4E75                               rts
00003CDC                            ; End of function CalcSine
00003CDC                            
00003CDC                            ; ===========================================================================
00003CDC                            
00003CDC                            Sine_Data:	incbin	"misc\sinewave.bin"	; values for a 360° sine wave
00003F5C                            
00003F5C                            ; ===========================================================================
00003F5C                            ; ===========================================================================
00003F5C                            		include	"_incObj\sub CalcAngle.asm"
00003F5C                            ; ---------------------------------------------------------------------------
00003F5C                            ; Subroutine calculate an angle
00003F5C                            
00003F5C                            ; input:
00003F5C                            ;	d1 = x-axis distance
00003F5C                            ;	d2 = y-axis distance
00003F5C                            
00003F5C                            ; output:
00003F5C                            ;	d0 = angle
00003F5C                            ; ---------------------------------------------------------------------------
00003F5C                            
00003F5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F5C                            
00003F5C                            
00003F5C                            CalcAngle:
00003F5C 48E7 1800                  		movem.l	d3-d4,-(sp)
00003F60 7600                       		moveq	#0,d3
00003F62 7800                       		moveq	#0,d4
00003F64 3601                       		move.w	d1,d3
00003F66 3802                       		move.w	d2,d4
00003F68 8843                       		or.w	d3,d4
00003F6A 6700                       		beq.s	loc_2D04
00003F6C 3802                       		move.w	d2,d4
00003F6E 4A43                       		tst.w	d3
00003F70 6A00 0000                  		bpl.w	loc_2CC2
00003F74 4443                       		neg.w	d3
00003F76                            
00003F76                            loc_2CC2:
00003F76 4A44                       		tst.w	d4
00003F78 6A00 0000                  		bpl.w	loc_2CCA
00003F7C 4444                       		neg.w	d4
00003F7E                            
00003F7E                            loc_2CCA:
00003F7E B843                       		cmp.w	d3,d4
00003F80 6400 0000                  		bcc.w	loc_2CDC
00003F84 E18C                       		lsl.l	#8,d4
00003F86 88C3                       		divu.w	d3,d4
00003F88 7000                       		moveq	#0,d0
00003F8A 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003F8E 6000                       		bra.s	loc_2CE6
00003F90                            ; ===========================================================================
00003F90                            
00003F90                            loc_2CDC:
00003F90 E18B                       		lsl.l	#8,d3
00003F92 86C4                       		divu.w	d4,d3
00003F94 7040                       		moveq	#$40,d0
00003F96 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003F9A                            
00003F9A                            loc_2CE6:
00003F9A 4A41                       		tst.w	d1
00003F9C 6A00 0000                  		bpl.w	loc_2CF2
00003FA0 4440                       		neg.w	d0
00003FA2 0640 0080                  		addi.w	#$80,d0
00003FA6                            
00003FA6                            loc_2CF2:
00003FA6 4A42                       		tst.w	d2
00003FA8 6A00 0000                  		bpl.w	loc_2CFE
00003FAC 4440                       		neg.w	d0
00003FAE 0640 0100                  		addi.w	#$100,d0
00003FB2                            
00003FB2                            loc_2CFE:
00003FB2 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003FB6 4E75                       		rts	
00003FB8                            ; ===========================================================================
00003FB8                            
00003FB8                            loc_2D04:
00003FB8 303C 0040                  		move.w	#$40,d0
00003FBC 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003FC0 4E75                       		rts	
00003FC2                            ; End of function CalcAngle
00003FC2                            
00003FC2                            ; ===========================================================================
00003FC2                            
00003FC2                            Angle_Data:	incbin	"misc\angles.bin"
000040C4                            
000040C4                            ; ===========================================================================
000040C4                            ; ===========================================================================
000040C4                            
000040C4                            ; ---------------------------------------------------------------------------
000040C4                            ; Sega screen
000040C4                            ; ---------------------------------------------------------------------------
000040C4                            
000040C4                            GM_Sega:
000040CC 6100 D6CA                  		bsr.w	ClearPLC
000040D0 6100 E288                  		bsr.w	PaletteFadeOut
000040D4 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000040DA 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
000040DE 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000040E2 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000040E6 3CBC 8700                  		move.w	#$8700,(a6)	; set background colour (palette entry 0)
000040EA 3CBC 8B00                  		move.w	#$8B00,(a6)	; full-screen vertical scrolling
000040EE 4238 F64E                  		clr.b	(f_wtr_state).w
000040F2 46FC 2700                  		disable_ints
000040F6 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000040FA 0200 00BF                  		andi.b	#$BF,d0
000040FE 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00004104 6100 D0CA                  		bsr.w	ClearScreen
00004112 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00004118 6100 D234                  		bsr.w	NemDec
0000411C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004122 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00004128 303C 0000                  		move.w	#0,d0
0000412C 6100 D7AA                  		bsr.w	EniDec
00004130                            
00004130 43F9 00FF 0000 203C 6510+  		copyTilemap	$FF0000,$E510,$17,7
00004144 43F9 00FF 0180 203C 4000+  		copyTilemap	$FF0180,$C000,$27,$1B
00004158                            
00004158 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
0000415C 6B00                       			bmi.s   @loadpal
0000415E 43F9 00FF 0A40 203C 453A+  			copyTilemap	$FF0A40,$C53A,2,1 ; hide "TM" with a white rectangle
00004172                            
00004172                            	@loadpal:
00004172 7000                       		moveq	#palid_SegaBG,d0
00004174 6100 E4CA                  		bsr.w	PalLoad2	; load Sega logo palette
00004178 47F9 FFFF FB80                     lea        ($FFFFFB80).l,a3
0000417E 7E3F                               moveq    #$3F,d7
00004180                             
00004180                                .loop:
00004180 36FC 0000                          move.w    #cBlack,(a3)+    ; move data to RAM
00004184 51CF FFFA                          dbf        d7,.loop
00004188 6100 E12A                          bsr.w     PaletteFadeIn ; added to allow fade in			
0000418C 31FC FFF6 F632             		move.w	#-$A,(v_pcyc_num).w
00004192 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w
00004198 31FC 0000 F662             		move.w	#0,(v_pal_buffer+$12).w
0000419E 31FC 0000 F660             		move.w	#0,(v_pal_buffer+$10).w
000041A4 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000041A8 0000 0040                  		ori.b	#$40,d0
000041AC 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000041B2                            
000041B2                            Sega_WaitPal:
000041B2 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
000041B8 6100 FADE                  		bsr.w	WaitForVBla
000041BC 6100 E354                  		bsr.w	PalCycle_Sega
000041C0 66F0                       		bne.s	Sega_WaitPal
000041C2                            
000041CA 11FC 0014 F62A             		move.b	#$14,(v_vbla_routine).w
000041D0 6100 FAC6                  		bsr.w	WaitForVBla
000041D4 31FC 001E F614             		move.w	#$1E,(v_demolength).w
000041DA                            
000041DA                            Sega_WaitEnd:
000041DA 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
000041E0 6100 FAB6                  		bsr.w	WaitForVBla
000041E4 4A78 F614                  		tst.w	(v_demolength).w
000041E8 6700                       		beq.s	Sega_GotoTitle
000041EA 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
000041F0 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
000041F2                            
000041F2                            Sega_GotoTitle:
000041F2 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
000041F8 4E75                       		rts	
000041FA                            ; ===========================================================================
000041FA                            
000041FA                            ; ---------------------------------------------------------------------------
000041FA                            ; Title	screen
000041FA                            ; ---------------------------------------------------------------------------
000041FA                            
000041FA                            GM_Title:
00004202 6100 D594                  		bsr.w	ClearPLC
00004206 6100 E152                  		bsr.w	PaletteFadeOut
0000420A 46FC 2700                  		disable_ints
0000420E 6100 D046                  		bsr.w	SoundDriverLoad
00004212 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00004218 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
0000421C 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00004220 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00004224 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00004228 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
0000422C 3CBC 8B03                  		move.w	#$8B03,(a6)
00004230 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (palette line 2, entry 0)
00004234 4238 F64E                  		clr.b	(f_wtr_state).w
00004238 6100 CF96                  		bsr.w	ClearScreen
0000423C                            		;jsr		SHC2022 
0000423C                            
0000423C 43F8 D000                  		lea	(v_objspace).w,a1
00004240 7000                       		moveq	#0,d0
00004242 323C 07FF                  		move.w	#$7FF,d1
00004246                            
00004246                            	Tit_ClrObj1:
00004246 22C0                       		move.l	d0,(a1)+
00004248 51C9 FFFC                  		dbf	d1,Tit_ClrObj1	; fill object space ($D000-$EFFF) with 0
0000424C                            
0000424C 6100 E066                  		bsr.w	PaletteFadeIn
00004250 46FC 2700                  		disable_ints
0000425E 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00004264 6100 D0E8                  		bsr.w	NemDec
00004272 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00004278 6100 D0D4                  		bsr.w	NemDec
00004286 41F9 0000 0000             		lea (Nem_TitleMenu).l,a0 ; Load Menu Text/Characters pattern
0000428C 6100 D0C0                  		bsr.w 	NemDec
00004290 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000429E 4BF9 0000 059E             		lea	(Art_Text).l,a5	; load level select font
000042A4 323C 028F                  		move.w	#$28F,d1
000042A8                            
000042A8                            	Tit_LoadText:
000042A8 3C9D                       		move.w	(a5)+,(a6)
000042AA 51C9 FFFC                  		dbf	d1,Tit_LoadText	; load level select font
000042AE                            
000042AE 11FC 0000 FE30             		move.b	#0,(v_lastlamp).w ; clear lamppost counter
000042B4 31FC 0000 FE08             		move.w	#0,(v_debuguse).w ; disable debug item placement mode
000042BA 31FC 0000 FFF0             		move.w	#0,(f_demo).w	; disable debug mode
000042C0 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w ; unused variable
000042C6 31FC 0000 FE10             		move.w	#(id_GHZ<<8),(v_zone).w	; set level to GHZ (00)
000042CC 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w ; disable palette cycling
000042D2 6100 0000                  		bsr.w	LevelSizeLoad
000042D6 6100 0000                  		bsr.w	DeformLayers
000042DA 43F8 B000                  		lea	(v_16x16).w,a1
000042DE 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load	GHZ 16x16 mappings
000042E4 303C 0000                  		move.w	#0,d0
000042E8 6100 D5EE                  		bsr.w	EniDec
000042EC 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load GHZ 256x256 mappings
000042F2 43F9 00FF 0000             		lea	(v_256x256).l,a1
000042F8 6100 D75C                  		bsr.w	KosDec
000042FC 6100 0000                  		bsr.w	LevelLayoutLoad
00004300 6100 E058                  		bsr.w	PaletteFadeOut
00004304 46FC 2700                  		disable_ints
00004308 6100 CEC6                  		bsr.w	ClearScreen
0000430C 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00004312 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004318 47F8 F708                  		lea	(v_bgscreenposx).w,a3
0000431C 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00004320 343C 6000                  		move.w	#$6000,d2
00004324 6100 0000                  		bsr.w	DrawChunks
00004328 43F9 00FF 0000             		lea	($FF0000).l,a1
0000432E 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00004334 303C 0000                  		move.w	#0,d0
00004338 6100 D59E                  		bsr.w	EniDec
0000433C                            
0000433C 43F9 00FF 0000 203C 4206+  		copyTilemap	$FF0000,$C206,$21,$15
00004350                            
0000435A 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0 ; load title screen patterns
00004360 6100 CFEC                  		bsr.w	NemDec
00004364 7001                       		moveq	#palid_Title,d0	; load title screen palette
00004366 6100 E29C                  		bsr.w	PalLoad1
00004372 11FC 0000 FFFA             		move.b	#0,(f_debugmode).w ; disable debug mode
00004378 31FC 0900 F614             		move.w	#$900,(v_demolength).w ; run title screen for $178 frames
0000437E 43F8 D080                  		lea	(v_objspace+$80).w,a1
00004382 7000                       		moveq	#0,d0
00004384 323C 0007                  		move.w	#7,d1
00004388                            
00004388                            	Tit_ClrObj2:
00004388 22C0                       		move.l	d0,(a1)+
0000438A 51C9 FFFC                  		dbf	d1,Tit_ClrObj2
0000438E                            
0000438E 11FC 0000 D040             		move.b	#id_TitleSonic,(v_objspace+$40).w ; load big Sonic object
00004394 11FC 0000 D080             		move.b	#id_PSBTM,(v_objspace+$80).w ; load "PRESS START BUTTON" object
0000439A 4238 D0A4                  		clr.b	(v_objspace+$80+obRoutine).w ; The 'Mega Games 10' version of Sonic 1 added this line, to fix the 'PRESS START BUTTON' object not appearing
0000439E                            
0000439E 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
000043A2 6A00                       			bpl.s   @isjap		; if yes, branch
000043A4                            
000043A4 11FC 0000 D0C0             		move.b	#id_PSBTM,(v_objspace+$C0).w ; load "TM" object
000043AA 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
000043B0                            	@isjap:
000043B0 11FC 0000 D100             		move.b	#id_PSBTM,(v_objspace+$100).w ; load object which hides part of Sonic
000043B6 11FC 0002 D11A             		move.b	#2,(v_objspace+$100+obFrame).w
000043BC 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000043C2 6100 0000                  		bsr.w	DeformLayers
000043C6 4EB9 0000 0000             		jsr	(BuildSprites).l
000043CC 7000                       		moveq	#plcid_Main,d0
000043CE 6100 D39C                  		bsr.w	NewPLC
000043D2 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w
000043D8 31FC 0000 FFE6             		move.w	#0,(v_title_ccount).w
000043DE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000043E2 0000 0040                  		ori.b	#$40,d0
000043E6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000043EC 6100 DEC6                  		bsr.w	PaletteFadeIn
000043F0                            
000043F0                            Tit_MainLoop:
000043F0 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000043F6 6100 F8A0                  		bsr.w	WaitForVBla
000043FA 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004400 6100 0000                  		bsr.w	DeformLayers
00004404 4EB9 0000 0000             		jsr	(BuildSprites).l
0000440A 6100 D936                  		bsr.w	PCycle_Title
0000440E 6100 D396                  		bsr.w	RunPLC
00004412 3038 D008                  		move.w	(v_objspace+obX).w,d0
00004416 5440                       		addq.w	#2,d0
00004418 31C0 D008                  		move.w	d0,(v_objspace+obX).w ; move Sonic to the right
0000441C 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed $1C00 on x-axis?
00004420 6500                       		blo.s	Tit_ChkRegion	; if not, branch
00004422                            
00004422 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004428 4E75                       		rts	
0000442A                            ; ===========================================================================
0000442A                            
0000442A                            Tit_ChkRegion:
0000442A 4A38 FFF8                  		tst.b	(v_megadrive).w	; check	if the machine is US or	Japanese
0000442E 6A00                       		bpl.s	Tit_RegionJap	; if Japanese, branch
00004430                            
00004430 41F9 0000 0000             		lea	(LevSelCode_US).l,a0 ; load US code
00004436 6000                       		bra.s	Tit_EnterCheat
00004438                            
00004438                            	Tit_RegionJap:
00004438 41F9 0000 0000             		lea	(LevSelCode_J).l,a0 ; load J code
0000443E                            
0000443E                            Tit_EnterCheat:
0000443E 3038 FFE4                  		move.w	(v_title_dcount).w,d0
00004442 D0C0                       		adda.w	d0,a0
00004444 1038 F605                  		move.b	(v_jpadpress1).w,d0 ; get button press
00004448 0200 000F                  		andi.b	#btnDir,d0	; read only UDLR buttons
0000444C B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
0000444E 6600                       		bne.s	Tit_ResetCheat	; if not, branch
00004450 5278 FFE4                  		addq.w	#1,(v_title_dcount).w ; next button press
00004454 4A00                       		tst.b	d0
00004456 6600                       		bne.s	Tit_CountC
00004458 41F8 FFE0                  		lea	(f_levselcheat).w,a0
0000445C 3238 FFE6                  		move.w	(v_title_ccount).w,d1
00004460 E249                       		lsr.w	#1,d1
00004462 0241 0003                  		andi.w	#3,d1
00004466 6700                       		beq.s	Tit_PlayRing
00004468 4A38 FFF8                  		tst.b	(v_megadrive).w
0000446C 6A00                       		bpl.s	Tit_PlayRing
0000446E 7201                       		moveq	#1,d1
00004470 1181 1001                  		move.b	d1,1(a0,d1.w)	; cheat depends on how many times C is pressed
00004474                            
00004474                            	Tit_PlayRing:
00004474 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00004482 6000                       		bra.s	Tit_CountC
00004484                            ; ===========================================================================
00004484                            
00004484                            Tit_ResetCheat:
00004484 4A00                       		tst.b	d0
00004486 6700                       		beq.s	Tit_CountC
00004488 0C78 0009 FFE4             		cmpi.w	#9,(v_title_dcount).w
0000448E 6700                       		beq.s	Tit_CountC
00004490 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w ; reset UDLR counter
00004496                            
00004496                            Tit_CountC:
00004496 1038 F605                  		move.b	(v_jpadpress1).w,d0
0000449A 0200 0020                  		andi.b	#btnC,d0	; is C button pressed?
0000449E 6700                       		beq.s	loc_3230	; if not, branch
000044A0 5278 FFE6                  		addq.w	#1,(v_title_ccount).w ; increment C counter
000044A4                            		
000044A4                            loc_3230:
000044A4 4A78 F614                  		tst.w	(v_demolength).w
000044A8 6700 0000                  		beq.w	GotoDemo
000044AC 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
000044B2 6700 FF3C                  		beq.w	Tit_MainLoop	; if not, branch
000044B6                            
000044B6                            Tit_ChkLevSel:
000044B6 4A38 FFE0                  		tst.b	(f_levselcheat).w ; check if level select code is on
000044BA 6700 0000                  		beq.w	@cont	; if not, play level
000044BE 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; check if A is pressed
000044C4 6700 0000                  		beq.w	@cont	; if not, play level
000044C8 6000 0000                  		bra.w	Tit_LevelSelect
000044CC                            
000044CC                            	@cont:		
000044CC 0C38 0006 D0A4             		cmp.b	#6,($FFFFD0A4).w   ; is Title Menu on
000044D2 6700 FF1C                  		beq.w	Tit_MainLoop         ; if it not was deleted, branch  	
000044D6 7400                       		moveq	#0,d2
000044D8 1438 FFB0                  		move.b	(Title_screen_option).w,d2   ; load the choice
000044DC D442                       		add.w	d2,d2            ; multiply by 2
000044DE 343B 2000                  		move.w	Tit_Menu_Choice(pc,d2.w),d2
000044E2 4EFB 2000                  		jmp   Tit_Menu_Choice(pc,d2.w)   ; jump to the choice code
000044E6                            
000044E6                            ; ===========================================================================
000044E6                            Tit_Menu_Choice:
000044E6 0000                       		dc.w PlayLevel-Tit_Menu_Choice   ; 0
000044E8 0000                       		dc.w Menu_Options-Tit_Menu_Choice  ; 2
000044EA                            ; ===========================================================================
000044EA                            
000044EA                            Menu_Options:
000044EA 11FC 0020 F600             		move.b	#$20,(v_gamemode).w
000044F0 4E75                       		rts
000044F2                            
000044F2                            Tit_LevelSelect:	
000044F2 7002                       		moveq	#palid_LevelSel,d0
000044F4 6100 E14A                  		bsr.w	PalLoad2	; load level select palette
000044F8 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000044FC 7000                       		moveq	#0,d0
000044FE 323C 00DF                  		move.w	#$DF,d1
00004502                            
00004502                            	Tit_ClrScroll1:
00004502 22C0                       		move.l	d0,(a1)+
00004504 51C9 FFFC                  		dbf	d1,Tit_ClrScroll1 ; clear scroll data (in RAM)
00004508                            
00004508 21C0 F616                  		move.l	d0,(v_scrposy_dup).w
0000450C 46FC 2700                  		disable_ints
00004510 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004520 323C 03FF                  		move.w	#$3FF,d1
00004524                            
00004524                            	Tit_ClrScroll2:
00004524 2C80                       		move.l	d0,(a6)
00004526 51C9 FFFC                  		dbf	d1,Tit_ClrScroll2 ; clear scroll data (in VRAM)
0000452A                            
0000452A 6100 0000                  		bsr.w	LevSelTextLoad
0000452E                            
0000452E                            ; ---------------------------------------------------------------------------
0000452E                            ; Level	Select
0000452E                            ; ---------------------------------------------------------------------------
0000452E                            
0000452E                            LevelSelect:
0000452E 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00004534 6100 F762                  		bsr.w	WaitForVBla
00004538 6100 0000                  		bsr.w	LevSelControls
0000453C 6100 D268                  		bsr.w	RunPLC
00004540 4AB8 F680                  		tst.l	(v_plc_buffer).w
00004544 66E8                       		bne.s	LevelSelect
00004546 0238 00F0 F605             		andi.b	#btnABC+btnStart,(v_jpadpress1).w ; is A, B, C, or Start pressed?
0000454C 67E0                       		beq.s	LevelSelect	; if not, branch
0000454E 3038 FF82                  		move.w	(v_levselitem).w,d0
00004552 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00004556 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00004558 3038 FF84                  		move.w	(v_levselsound).w,d0
0000455C 0640 0080                  		addi.w	#$80,d0
00004560                            		;cmpi.w	#$9F,d0		; is sound $9F being played?
00004560                            		;beq.s	LevSel_Ending	; if yes, branch
00004560                            		;cmpi.w	#$9E,d0		; is sound $9E being played?
00004560                            		;beq.s	LevSel_Credits	; if yes, branch
00004560                            
00004560                            LevSel_PlaySnd:
00004560 6100 CD3E                  		bsr.w	PlaySound_Special
00004564 60C8                       		bra.s	LevelSelect
00004566                            ; ===========================================================================
00004566                            
00004566                            LevSel_Ending:
00004566 11FC 0000 F600             		move.b	#id_Ending,(v_gamemode).w ; set screen mode to $18 (Ending)
0000456C 31FC 0600 FE10             		move.w	#(id_EndZ<<8),(v_zone).w ; set level to 0600 (Ending)
00004572 4E75                       		rts	
00004574                            ; ===========================================================================
00004574                            
00004574                            LevSel_Credits:
00004574 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; set screen mode to $1C (Credits)
00004582 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w
00004588 4E75                       		rts	
0000458A                            ; ===========================================================================
0000458A                            
0000458A                            LevSel_Level_SS:
0000458A D040                       		add.w	d0,d0
0000458C 303B 0000                  		move.w	LevSel_Ptrs(pc,d0.w),d0 ; load level number
00004590 6B00 FF9C                  		bmi.w	LevelSelect
00004594 0C40 0700                  		cmpi.w	#id_SS*$100,d0	; check	if level is 0700 (Special Stage)
00004598 6600                       		bne.s	LevSel_Level	; if not, branch
0000459A 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
000045A0 4278 FE10                  		clr.w	(v_zone).w	; clear	level
000045A4 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000045AA 7000                       		moveq	#0,d0
000045AC 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000045B0 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000045B4 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000045B8 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000045C0 4E75                       		rts	
000045C2                            ; ===========================================================================
000045C2                            
000045C2                            LevSel_Level:
000045C2 0240 3FFF                  		andi.w	#$3FFF,d0
000045C6 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
000045CA                            
000045CA                            PlayLevel:
000045CA 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
000045D0 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000045D6 7000                       		moveq	#0,d0
000045D8 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000045DC 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000045E0 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000045E4 11C0 FE16                  		move.b	d0,(v_lastspecial).w ; clear special stage number
000045E8 11C0 FE57                  		move.b	d0,(v_emeralds).w ; clear emeralds
000045EC 21C0 FE58                  		move.l	d0,(v_emldlist).w ; clear emeralds
000045F0 21C0 FE5C                  		move.l	d0,(v_emldlist+4).w ; clear emeralds
000045F4 11FC 0001 FE18             		move.b	#1,(v_continues).w ; set continues to 1
000045FA 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
0000460A 4E75                       		rts	
0000460C                            ; ===========================================================================
0000460C                            ; ---------------------------------------------------------------------------
0000460C                            ; Level	select - level pointers
0000460C                            ; ---------------------------------------------------------------------------
0000460C                            		; correct level order
0000460C 0000                       		dc.b id_GHZ, 0
0000460E 0001                       		dc.b id_GHZ, 1
00004610 0002                       		dc.b id_GHZ, 2
00004612 0200                       		dc.b id_MZ, 0
00004614 0201                       		dc.b id_MZ, 1
00004616 0202                       		dc.b id_MZ, 2
00004618 0400                       		dc.b id_SYZ, 0
0000461A 0401                       		dc.b id_SYZ, 1
0000461C 0402                       		dc.b id_SYZ, 2
0000461E 0100                       		dc.b id_LZ, 0
00004620 0101                       		dc.b id_LZ, 1
00004622 0102                       		dc.b id_LZ, 2
00004624 0300                       		dc.b id_SLZ, 0
00004626 0301                       		dc.b id_SLZ, 1
00004628 0302                       		dc.b id_SLZ, 2
0000462A 0500                       		dc.b id_SBZ, 0
0000462C 0501                       		dc.b id_SBZ, 1
0000462E 0103                       		dc.b id_LZ, 3
00004630 0502                       		dc.b id_SBZ, 2
00004632 0700                       		dc.b id_SS, 0		; Special Stage
00004634 8000                       		dc.w $8000		; Sound Test
00004636                            		even
00004636                            ; ---------------------------------------------------------------------------
00004636                            ; Level	select codes
00004636                            ; ---------------------------------------------------------------------------
00004636 0102 0202 0408 00FF        		dc.b btnUp,btnDn,btnDn,btnDn,btnL,btnR,0,$FF
0000463E                            		even
0000463E                            
0000463E 0102 0408 00FF             LevSelCode_US:	dc.b btnUp,btnDn,btnL,btnR,0,$FF
00004644                            		even
00004644                            ; ===========================================================================
00004644                            
00004644                            ; ---------------------------------------------------------------------------
00004644                            ; Demo mode
00004644                            ; ---------------------------------------------------------------------------
00004644                            
00004644                            GotoDemo:
00004644 31FC 001E F614             		move.w	#$1E,(v_demolength).w
0000464A                            
0000464A                            loc_33B6:
0000464A 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00004650 6100 F646                  		bsr.w	WaitForVBla
00004654 6100 0000                  		bsr.w	DeformLayers
00004658 6100 D6C4                  		bsr.w	PaletteCycle
0000465C 6100 D148                  		bsr.w	RunPLC
00004660 3038 D008                  		move.w	(v_objspace+obX).w,d0
00004664 5440                       		addq.w	#2,d0
00004666 31C0 D008                  		move.w	d0,(v_objspace+obX).w
0000466A 0C40 1C00                  		cmpi.w	#$1C00,d0
0000466E 6500                       		blo.s	loc_33E4
00004670 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
00004676 4E75                       		rts	
00004678                            ; ===========================================================================
00004678                            
00004678                            loc_33E4:
00004678 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
0000467E 6600 FE36                  		bne.w	Tit_ChkLevSel	; if yes, branch
00004682 4A78 F614                  		tst.w	(v_demolength).w
00004686 6600 FFC2                  		bne.w	loc_33B6
00004692 3038 FFF2                  		move.w	(v_demonum).w,d0 ; load	demo number
00004696 0240 0007                  		andi.w	#7,d0
0000469A D040                       		add.w	d0,d0
0000469C 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000046A0 31C0 FE10                  		move.w	d0,(v_zone).w
000046A4 5278 FFF2                  		addq.w	#1,(v_demonum).w ; add 1 to demo number
000046A8 0C78 0004 FFF2             		cmpi.w	#4,(v_demonum).w ; is demo number less than 4?
000046AE 6500                       		blo.s	loc_3422	; if yes, branch
000046B0 31FC 0000 FFF2             		move.w	#0,(v_demonum).w ; reset demo number to	0
000046B6                            
000046B6                            loc_3422:
000046B6 31FC 0001 FFF0             		move.w	#1,(f_demo).w	; turn demo mode on
000046BC 11FC 0000 F600             		move.b	#id_Demo,(v_gamemode).w ; set screen mode to 08 (demo)
000046C2 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000046C6 6600                       		bne.s	Demo_Level	; if not, branch
000046C8 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
000046CE 4278 FE10                  		clr.w	(v_zone).w	; clear	level number
000046D2 4238 FE16                  		clr.b	(v_lastspecial).w ; clear special stage number
000046D6                            
000046D6                            Demo_Level:
000046D6 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000046DC 7000                       		moveq	#0,d0
000046DE 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000046E2 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000046E6 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000046EA 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000046F2 4E75                       		rts	
000046F4                            ; ===========================================================================
000046F4                            ; ---------------------------------------------------------------------------
000046F4                            ; Levels used in demos
000046F4                            ; ---------------------------------------------------------------------------
000046F4                            Demo_Levels:	incbin	"misc\Demo Level Order - Intro.bin"
000046FC                            		even
000046FC                            
000046FC                            ; ---------------------------------------------------------------------------
000046FC                            ; Subroutine to	change what you're selecting in the level select
000046FC                            ; ---------------------------------------------------------------------------
000046FC                            
000046FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000046FC                            
000046FC                            
000046FC                            LevSelControls:
000046FC 1238 F605                  		move.b	(v_jpadpress1).w,d1
00004700 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed and held?
00004704 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00004706 5378 FF80                  		subq.w	#1,(v_levseldelay).w ; subtract 1 from time to next move
0000470A 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
0000470C                            
0000470C                            LevSel_UpDown:
0000470C 31FC 000B FF80             		move.w	#$B,(v_levseldelay).w ; reset time delay
00004712 1238 F604                  		move.b	(v_jpadhold1).w,d1
00004716 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed?
0000471A 6700                       		beq.s	LevSel_SndTest	; if not, branch
0000471C 3038 FF82                  		move.w	(v_levselitem).w,d0
00004720 0801 0000                  		btst	#bitUp,d1	; is up	pressed?
00004724 6700                       		beq.s	LevSel_Down	; if not, branch
00004726 5340                       		subq.w	#1,d0		; move up 1 selection
00004728 6400                       		bhs.s	LevSel_Down
0000472A 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
0000472C                            
0000472C                            LevSel_Down:
0000472C 0801 0001                  		btst	#bitDn,d1	; is down pressed?
00004730 6700                       		beq.s	LevSel_Refresh	; if not, branch
00004732 5240                       		addq.w	#1,d0		; move down 1 selection
00004734 0C40 0015                  		cmpi.w	#$15,d0
00004738 6500                       		blo.s	LevSel_Refresh
0000473A 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
0000473C                            
0000473C                            LevSel_Refresh:
0000473C 31C0 FF82                  		move.w	d0,(v_levselitem).w ; set new selection
00004740 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00004744 4E75                       		rts	
00004746                            ; ===========================================================================
00004746                            
00004746                            LevSel_SndTest:
00004746 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w ; is item $14 selected?
0000474C 6600                       		bne.s	LevSel_NoMove	; if not, branch
0000474E 1238 F605                  		move.b	(v_jpadpress1).w,d1
00004752 0201 000C                  		andi.b	#btnR+btnL,d1	; is left/right	pressed?
00004756 6700                       		beq.s	LevSel_NoMove	; if not, branch
00004758 3038 FF84                  		move.w	(v_levselsound).w,d0
0000475C 0801 0002                  		btst	#bitL,d1	; is left pressed?
00004760 6700                       		beq.s	LevSel_Right	; if not, branch
00004762 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00004764 6400                       		bhs.s	LevSel_Right
00004766 7055                       		moveq	#$55,d0		; if sound test	moves below 0, set to $55
00004768                            
00004768                            LevSel_Right:
00004768 0801 0003                  		btst	#bitR,d1	; is right pressed?
0000476C 6700                       		beq.s	LevSel_Refresh2	; if not, branch
0000476E 5240                       		addq.w	#1,d0		; add 1	to sound test
00004770 0C40 0056                  		cmpi.w	#$56,d0
00004774 6500                       		blo.s	LevSel_Refresh2
00004776 7000                       		moveq	#0,d0		; if sound test	moves above $55, set to	0
00004778                            
00004778                            LevSel_Refresh2:
00004778 31C0 FF84                  		move.w	d0,(v_levselsound).w ; set sound test number
0000477C 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00004780                            
00004780                            LevSel_NoMove:
00004780 4E75                       		rts	
00004782                            ; End of function LevSelControls
00004782                            
00004782                            ; ---------------------------------------------------------------------------
00004782                            ; Subroutine to load level select text
00004782                            ; ---------------------------------------------------------------------------
00004782                            
00004782                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004782                            
00004782                            
00004782                            LevSelTextLoad:
00004782                            
00004782 =62100003                  	textpos:	= ($40000000+(($E210&$3FFF)<<16)+(($E210&$C000)>>14))
00004782                            					; $E210 is a VRAM address
00004782                            
00004782 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004788 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000478E 283C 6210 0003             		move.l	#textpos,d4	; text position on screen
00004794 363C E680                  		move.w	#$E680,d3	; VRAM setting (4th palette, $680th tile)
00004798 7214                       		moveq	#$14,d1		; number of lines of text
0000479A                            
0000479A                            	LevSel_DrawAll:
0000479A 2D44 0004                  		move.l	d4,4(a6)
0000479E 6100 0000                  		bsr.w	LevSel_ChgLine	; draw line of text
000047A2 0684 0080 0000             		addi.l	#$800000,d4	; jump to next line
000047A8 51C9 FFF0                  		dbf	d1,LevSel_DrawAll
000047AC                            
000047AC 7000                       		moveq	#0,d0
000047AE 3038 FF82                  		move.w	(v_levselitem).w,d0
000047B2 3200                       		move.w	d0,d1
000047B4 283C 6210 0003             		move.l	#textpos,d4
000047BA EF48                       		lsl.w	#7,d0
000047BC 4840                       		swap	d0
000047BE D880                       		add.l	d0,d4
000047C0 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000047C6 E749                       		lsl.w	#3,d1
000047C8 3001                       		move.w	d1,d0
000047CA D241                       		add.w	d1,d1
000047CC D240                       		add.w	d0,d1
000047CE D2C1                       		adda.w	d1,a1
000047D0 363C C680                  		move.w	#$C680,d3	; VRAM setting (3rd palette, $680th tile)
000047D4 2D44 0004                  		move.l	d4,4(a6)
000047D8 6100 0000                  		bsr.w	LevSel_ChgLine	; recolour selected line
000047DC 363C E680                  		move.w	#$E680,d3
000047E0 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w
000047E6 6600                       		bne.s	LevSel_DrawSnd
000047E8 363C C680                  		move.w	#$C680,d3
000047EC                            
000047EC                            LevSel_DrawSnd:
000047F6 3038 FF84                  		move.w	(v_levselsound).w,d0
000047FA 0640 0080                  		addi.w	#$80,d0
000047FE 1400                       		move.b	d0,d2
00004800 E808                       		lsr.b	#4,d0
00004802 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 1st digit
00004806 1002                       		move.b	d2,d0
00004808 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 2nd digit
0000480C 4E75                       		rts	
0000480E                            ; End of function LevSelTextLoad
0000480E                            
0000480E                            
0000480E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000480E                            
0000480E                            
0000480E                            LevSel_ChgSnd:
0000480E 0240 000F                  		andi.w	#$F,d0
00004812 0C00 000A                  		cmpi.b	#$A,d0		; is digit $A-$F?
00004816 6500                       		blo.s	LevSel_Numb	; if not, branch
00004818 5E00                       		addi.b	#7,d0		; use alpha characters
0000481A                            
0000481A                            	LevSel_Numb:
0000481A D043                       		add.w	d3,d0
0000481C 3C80                       		move.w	d0,(a6)
0000481E 4E75                       		rts	
00004820                            ; End of function LevSel_ChgSnd
00004820                            
00004820                            
00004820                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004820                            
00004820                            
00004820                            LevSel_ChgLine:
00004820 7417                       		moveq	#$17,d2		; number of characters per line
00004822                            
00004822                            	LevSel_LineLoop:
00004822 7000                       		moveq	#0,d0
00004824 1019                       		move.b	(a1)+,d0	; get character
00004826 6A00                       		bpl.s	LevSel_CharOk	; branch if valid
00004828 3CBC 0000                  		move.w	#0,(a6)		; use blank character
0000482C 51CA FFF4                  		dbf	d2,LevSel_LineLoop
00004830 4E75                       		rts	
00004832                            
00004832                            
00004832                            	LevSel_CharOk:
00004832 D043                       		add.w	d3,d0		; combine char with VRAM setting
00004834 3C80                       		move.w	d0,(a6)		; send to VRAM
00004836 51CA FFEA                  		dbf	d2,LevSel_LineLoop
0000483A 4E75                       		rts	
0000483C                            ; End of function LevSel_ChgLine
0000483C                            
0000483C                            ; ===========================================================================
0000483C                            ; ---------------------------------------------------------------------------
0000483C                            ; Level	select menu text
0000483C                            ; ---------------------------------------------------------------------------
0000483C                            		incbin	"misc\Level Select Text (JP1).bin"
00004A34                            		even
00004A34                            ; ---------------------------------------------------------------------------
00004A34                            ; Music	playlist
00004A34                            ; ---------------------------------------------------------------------------
00004A34                            MusicList:
00004A34 00                         			dc.b bgm_GHZ    ; GHZ1
00004A35 00                                 	dc.b bgm_LZ    ; GHZ2
00004A36 00                                 	dc.b bgm_Stop   ; GHZ3
00004A37 00                                 	dc.b bgm_LZ    ; GHZ4
00004A38 00                                 	dc.b bgm_Stop    ; LZ1
00004A39 00                                 	dc.b bgm_Stop   ; LZ2
00004A3A 00                                 	dc.b bgm_Stop    ; LZ3
00004A3B 00                                 	dc.b bgm_SBZ3    ; LZ4
00004A3C 00                                 	dc.b bgm_MZ    ; MZ1
00004A3D 00                                 	dc.b bgm_SBZ    ; MZ2
00004A3E 00                                 	dc.b bgm_RRZ2   ; MZ3
00004A3F 00                                 	dc.b bgm_SBZ    ; MZ4
00004A40 00                                 	dc.b bgm_LZ    ; SLZ1
00004A41 00                                 	dc.b bgm_LZ    ; SLZ2
00004A42 00                                 	dc.b bgm_LZ    ; SLZ3
00004A43 00                                 	dc.b bgm_LZ    ; SLZ4
00004A44 00                                 	dc.b bgm_SYZ    ; SYZ1
00004A45 00                                 	dc.b bgm_SLZ    ; SYZ2
00004A46 00                                 	dc.b bgm_SLZ    ; SYZ3
00004A47 00                                 	dc.b bgm_SLZ    ; SYZ4
00004A48 00                                 	dc.b bgm_SBZ    ; SBZ1
00004A49 00                                 	dc.b bgm_SBZ    ; SBZ2
00004A4A 00                                 	dc.b bgm_FZ		; SBZ3
00004A4B 00                                 	dc.b bgm_SBZ    ; SBZ4
00004A4C 00                                 	dc.b bgm_GHZ    ; GHZ1
00004A4D 00                                 	dc.b bgm_GHZ    ; GHZ1
00004A4E 00                                 	dc.b bgm_GHZ    ; GHZ1
00004A4F 00                                 	dc.b bgm_GHZ    ; GHZ1
00004A50                                    	even
00004A50                            ; ===========================================================================
00004A50                            
00004A50                            ; ---------------------------------------------------------------------------
00004A50                            ; Level
00004A50                            ; ---------------------------------------------------------------------------
00004A50                            
00004A50                            GM_Level:
00004A50 08F8 0007 F600             		bset	#7,(v_gamemode).w ; add $80 to screen mode (for pre level sequence)
00004A56 4A78 FFF0                  		tst.w	(f_demo).w
00004A5A 6B00                       		bmi.s	Level_NoMusicFade
00004A64                            
00004A64                            	Level_NoMusicFade:
00004A64 6100 CD32                  		bsr.w	ClearPLC
00004A68 6100 D8F0                  		bsr.w	PaletteFadeOut
00004A6C 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
00004A70 6B00                       		bmi.s	Level_ClrRam	; if yes, branch
00004A72 46FC 2700                  		disable_ints
00004A80 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004A86 6100 C8C6                  		bsr.w	NemDec
00004A8A 46FC 2300                  		enable_ints
00004A8E 7000                       		moveq	#0,d0
00004A90 1038 FE10                  		move.b	(v_zone).w,d0
00004A94 E948                       		lsl.w	#4,d0
00004A96 45F9 0000 0000             		lea	(LevelHeaders).l,a2
00004A9C 45F2 0000                  		lea	(a2,d0.w),a2
00004AA0 7000                       		moveq	#0,d0
00004AA2 1012                       		move.b	(a2),d0
00004AA4 6700                       		beq.s	loc_37FC
00004AA6 6100 CC92                  		bsr.w	AddPLC		; load level patterns
00004AAA                            
00004AAA                            loc_37FC:
00004AAA 7000                       		moveq	#plcid_Main2,d0
00004AAC 6100 CC8C                  		bsr.w	AddPLC		; load standard	patterns
00004AB0 4EB9 0000 0000             		jsr		LoadLifeIcon
00004AB6                            		
00004AB6                            Level_ClrRam:
00004AB6 43F8 D000                  		lea	(v_objspace).w,a1
00004ABA 7000                       		moveq	#0,d0
00004ABC 323C 07FF                  		move.w	#$7FF,d1
00004AC0                            
00004AC0                            	Level_ClrObjRam:
00004AC0 22C0                       		move.l	d0,(a1)+
00004AC2 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00004AC6                            
00004AC6 43F8 F628                  		lea	($FFFFF628).w,a1
00004ACA 7000                       		moveq	#0,d0
00004ACC 323C 0015                  		move.w	#$15,d1
00004AD0                            
00004AD0                            	Level_ClrVars1:
00004AD0 22C0                       		move.l	d0,(a1)+
00004AD2 51C9 FFFC                  		dbf	d1,Level_ClrVars1 ; clear misc variables
00004AD6                            
00004AD6 43F8 F700                  		lea	(v_screenposx).w,a1
00004ADA 7000                       		moveq	#0,d0
00004ADC 323C 003F                  		move.w	#$3F,d1
00004AE0                            
00004AE0                            	Level_ClrVars2:
00004AE0 22C0                       		move.l	d0,(a1)+
00004AE2 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00004AE6                            
00004AE6 43F8 FE60                  		lea	(v_oscillate+2).w,a1
00004AEA 7000                       		moveq	#0,d0
00004AEC 323C 0047                  		move.w	#$47,d1
00004AF0                            
00004AF0                            	Level_ClrVars3:
00004AF0 22C0                       		move.l	d0,(a1)+
00004AF2 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00004AF6                            
00004AF6 46FC 2700                  		disable_ints
00004AFA 6100 C6D4                  		bsr.w	ClearScreen
00004AFE 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00004B04 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00004B08 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00004B0C 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00004B10 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
00004B14 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00004B18 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
00004B1C 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00004B20 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
00004B26 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
00004B2A 31FC C800 C8FC             		ResetDMAQueue	
00004B30 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004B36 6600                       		bne.s	Level_LoadPal	; if not, branch
00004B38                            
00004B38 3CBC 8014                  		move.w	#$8014,(a6)	; enable H-interrupts
00004B3C 7000                       		moveq	#0,d0
00004B3E 1038 FE11                  		move.b	(v_act).w,d0
00004B42 D040                       		add.w	d0,d0
00004B44 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00004B4A 3031 0000                  		move.w	(a1,d0.w),d0
00004B4E 31C0 F646                  		move.w	d0,(v_waterpos1).w ; set water heights
00004B52 31C0 F648                  		move.w	d0,(v_waterpos2).w
00004B56 31C0 F64A                  		move.w	d0,(v_waterpos3).w
00004B5A 4238 F64D                  		clr.b	(v_wtr_routine).w ; clear water routine counter
00004B5E 4238 F64E                  		clr.b	(f_wtr_state).w	; clear	water state
00004B62 11FC 0001 F64C             		move.b	#1,(f_water).w	; enable water
00004B68                            
00004B68                            Level_LoadPal:
00004B68 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00004B6E 46FC 2300                  		move	#$2300,sr
00004B72 4EB9 0000 0000             		jsr		LoadPlayerPal
00004B78 6100 DAC6                  		bsr.w	PalLoad2	; load Sonic's pallet line
00004B7C 0C38 0001 F64C             		cmp.b	#1,(f_water).w ; Is water enabled?
00004B82 6600                       		bne.s	Level_GetBgm	; if not, branch
00004B84 4EB9 0000 0000             		jsr		LoadPlayerWaterPal
00004B8A 6100 DAF4                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00004B8E 4A38 FE30                  		tst.b	($FFFFFE30).w
00004B92 6700                       		beq.s	Level_GetBgm
00004B94 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00004B9A                            
00004B9A                            	Level_GetBgm:
00004B9A 4A78 FFF0                  		tst.w	(f_demo).w
00004B9E 6B00                               	bmi.s	Level_SkipTtlCard
00004BA0 7000                               	moveq	#0,d0
00004BA2 3038 FE10                  		move.w	(v_zone).w,d0
00004BA6 E418                       		ror.b	#2,d0
00004BA8 EC48                       		lsr.w   #6,d0
00004BAA 43F9 0000 4A34                     	lea	(MusicList).l,a1 ; load    music playlist
00004BB0 1031 0000                          	move.b	(a1,d0.w),d0
00004BB4 11C0 F5C6                  		move.b	d0,((v_Saved_music)).w
00004BB8 6100 C6E0                          	bsr.w	PlaySound    ; play music
00004BBC 11FC 0000 D080                     	move.b	#id_TitleCard,(v_objspace+$80).w ; load title card object
00004BC2                            
00004BC2                            
00004BC2                            Level_TtlCardLoop:
00004BC2 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00004BC8 6100 F0CE                  		bsr.w	WaitForVBla
00004BCC 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004BD2 4EB9 0000 0000             		jsr	(BuildSprites).l
00004BD8 6100 CBCC                  		bsr.w	RunPLC
00004BDC 3038 D108                  		move.w	(v_objspace+$108).w,d0
00004BE0 B078 D130                  		cmp.w	(v_objspace+$130).w,d0 ; has title card sequence finished?
00004BE4 66DC                       		bne.s	Level_TtlCardLoop ; if not, branch
00004BE6 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are there any items in the pattern load cue?
00004BEA 66D6                       		bne.s	Level_TtlCardLoop ; if yes, branch
00004BEC 4EB9 0000 0000             		jsr	(Hud_Base).l	; load basic HUD gfx
00004BF2                            
00004BF2                            	Level_SkipTtlCard:
00004BF2 4EB9 0000 0000             		jsr		LoadPlayerPal
00004BF8 6100 DA0A                  		bsr.w	PalLoad1	; load Sonic's palette
00004BFC 6100 0000                  		bsr.w	LevelSizeLoad
00004C00 6100 0000                  		bsr.w	DeformLayers
00004C04 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
00004C0A 6100 0000                  		bsr.w	LevelDataLoad ; load block mappings and palettes
00004C0E 6100 0000                  		bsr.w	LoadTilesFromStart
00004C12 4EB9 0000 0000             		jsr	(FloorLog_Unk).l
00004C18 6100 0000                  		bsr.w	ColIndexLoad
00004C1C 6100 0000                  		bsr.w	LZWaterFeatures
00004C20 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00004C26 4A78 FFF0                  		tst.w	(f_demo).w
00004C2A 6B00                       		bmi.s	Level_ChkDebug
00004C2C 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
00004C32                            
00004C32                            Level_ChkDebug:
00004C32 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
00004C36 6700                       		beq.s	Level_ChkWater	; if not, branch
00004C38 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button held?
00004C3E 6700                       		beq.s	Level_ChkWater	; if not, branch
00004C40 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00004C46                            
00004C46                            Level_ChkWater:
00004C46 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
00004C4C 31FC 0000 F604             		move.w	#0,(v_jpadhold1).w
00004C52 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004C58 6600                       		bne.s	Level_LoadObj	; if not, branch
00004C5A 11FC 0000 D780             		move.b	#id_WaterSurface,(v_objspace+$780).w ; load water surface object
00004C60 31FC 0060 D788             		move.w	#$60,(v_objspace+$780+obX).w
00004C66 11FC 0000 D7C0             		move.b	#id_WaterSurface,(v_objspace+$7C0).w
00004C6C 31FC 0120 D7C8             		move.w	#$120,(v_objspace+$7C0+obX).w
00004C72                            
00004C72                            Level_LoadObj:
00004C72 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004C78 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004C7E 4EB9 0000 0000             		jsr	(BuildSprites).l
00004C84 7000                       		moveq	#0,d0
00004C86 4A38 FE30                  		tst.b	(v_lastlamp).w	; are you starting from	a lamppost?
00004C8A 6600                       		bne.s	Level_SkipClr	; if yes, branch
00004C8C 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004C90 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004C94 11C0 FE1B                  		move.b	d0,(v_lifecount).w ; clear lives counter
00004C98 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS - reset water state
00004C9E                            
00004C9E                            	Level_SkipClr:
00004C9E 11C0 FE1A                  		move.b	d0,(f_timeover).w
00004CA2 11C0 FE2C                  		move.b	d0,(v_shield).w	; clear shield
00004CA6 11C0 F5C8                  		move.b	d0,(v_rshield).w; clear red shield
00004CAA 11C0 F5C9                  		move.b	d0,(v_gshield).w; clear gold shield
00004CAE 11C0 F5CA                  		move.b	d0,(v_spshield).w; clear gold shield
00004CB2 11C0 FE2D                  		move.b	d0,(v_invinc).w	; clear invincibility
00004CB6 11C0 FE2E                  		move.b	d0,(v_shoes).w	; clear speed shoes
00004CBA 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00004CBE 31C0 FE08                  		move.w	d0,(v_debuguse).w
00004CC2 31C0 FE02                  		move.w	d0,(f_restart).w
00004CC6 31C0 FE04                  		move.w	d0,(v_framecount).w
00004CCA 6100 0000                  		bsr.w	OscillateNumInit
00004CCE 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00004CD4 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00004CDA 11FC 0001 FE1E             		move.b	#1,(f_timecount).w ; update time counter
00004CE0 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
00004CE6 43F9 0000 0000             		lea	(DemoDataPtr).l,a1 ; load demo data
00004CEC 7000                       		moveq	#0,d0
00004CEE 1038 FE10                  		move.b	(v_zone).w,d0
00004CF2 E548                       		lsl.w	#2,d0
00004CF4 2271 0000                  		movea.l	(a1,d0.w),a1
00004CF8 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004CFC 6A00                       		bpl.s	Level_Demo	; if yes, branch
00004CFE 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1 ; load ending demo data
00004D04 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00004D08 5340                       		subq.w	#1,d0
00004D0A E548                       		lsl.w	#2,d0
00004D0C 2271 0000                  		movea.l	(a1,d0.w),a1
00004D10                            
00004D10                            Level_Demo:
00004D10 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w ; load key press duration
00004D16 5338 F792                  		subq.b	#1,(v_btnpushtime2).w ; subtract 1 from duration
00004D1A 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00004D20 4A78 FFF0                  		tst.w	(f_demo).w
00004D24 6A00                       		bpl.s	Level_ChkWaterPal
00004D26 31FC 021C F614             		move.w	#540,(v_demolength).w
00004D2C 0C78 0004 FFF4             		cmpi.w	#4,(v_creditsnum).w
00004D32 6600                       		bne.s	Level_ChkWaterPal
00004D34 31FC 01FE F614             		move.w	#510,(v_demolength).w
00004D3A                            
00004D3A                            Level_ChkWaterPal:
00004D3A 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ/SBZ3?
00004D40 6600                       		bne.s	Level_Delay	; if not, branch
00004D42 700B                       		moveq	#palid_LZWater,d0 ; palette $B (LZ underwater)
00004D44 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; is level SBZ3?
00004D4A 6600                       		bne.s	Level_WtrNotSbz	; if not, branch
00004D4C 700D                       		moveq	#palid_SBZ3Water,d0 ; palette $D (SBZ3 underwater)
00004D4E                            
00004D4E                            	Level_WtrNotSbz:
00004D4E 6100 D96C                  		bsr.w	PalLoad4_Water
00004D52                            
00004D52                            Level_Delay:
00004D52 323C 0003                  		move.w	#3,d1
00004D56                            
00004D56                            	Level_DelayLoop:
00004D56 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004D5C 6100 EF3A                  		bsr.w	WaitForVBla
00004D60 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004D64                            
00004D64 31FC 202F F626             		move.w	#$202F,(v_pfade_start).w ; fade in 2nd, 3rd & 4th palette lines
00004D6A 6100 D54E                  		bsr.w	PalFadeIn_Alt
00004D6E 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
00004D72 6B00                       		bmi.s	Level_ClrCardArt ; if yes, branch
00004D74 5438 D0A4                  		addq.b	#2,(v_objspace+$80+obRoutine).w ; make title card move
00004D78 5838 D0E4                  		addq.b	#4,(v_objspace+$C0+obRoutine).w
00004D7C 5838 D124                  		addq.b	#4,(v_objspace+$100+obRoutine).w
00004D80 5838 D164                  		addq.b	#4,(v_objspace+$140+obRoutine).w
00004D84 6000                       		bra.s	Level_StartGame
00004D86                            ; ===========================================================================
00004D86                            
00004D86                            Level_ClrCardArt:
00004D86 7000                       		moveq	#plcid_Explode,d0
00004D88 4EB9 0000 173A             		jsr	(AddPLC).l	; load explosion gfx
00004D8E 7000                       		moveq	#0,d0
00004D90 1038 FE10                  		move.b	(v_zone).w,d0
00004D94 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
00004D98 4EB9 0000 173A             		jsr	(AddPLC).l	; load animal gfx (level no. + $15)
00004D9E                            
00004D9E                            Level_StartGame:
00004D9E 08B8 0007 F600             		bclr	#7,(v_gamemode).w ; subtract $80 from mode to end pre-level stuff
00004DA4                            
00004DA4                            ; ---------------------------------------------------------------------------
00004DA4                            ; Main level loop (when	all title card and loading sequences are finished)
00004DA4                            ; ---------------------------------------------------------------------------
00004DA4                            
00004DA4                            Level_MainLoop:
00004DA4 6100 C506                  		bsr.w	PauseGame
00004DA8 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004DAE 6100 EEE8                  		bsr.w	WaitForVBla
00004DB2 5278 FE04                  		addq.w	#1,(v_framecount).w ; add 1 to level timer
00004DB6 6100 0000                  		bsr.w	MoveSonicInDemo
00004DBA 6100 0000                  		bsr.w	LZWaterFeatures
00004DBE 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004DC4 4A78 FE02                  			tst.w   (f_restart).w
00004DC8 6600 FC86                  			bne     GM_Level
00004DCC 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00004DD0 6600                       		bne.s	Level_DoScroll	; if yes, branch
00004DD2 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004DD8 6400                       		bhs.s	Level_SkipScroll ; if yes, branch
00004DDA                            
00004DDA                            	Level_DoScroll:
00004DDA 6100 0000                  		bsr.w	DeformLayers
00004DDE                            
00004DDE                            	Level_SkipScroll:
00004DDE 4EB9 0000 0000             		jsr	(BuildSprites).l
00004DE4 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004DEA 6100 CF32                  		bsr.w	PaletteCycle
00004DEE 6100 C9B6                  		bsr.w	RunPLC
00004DF2 6100 0000                  		bsr.w	OscillateNumDo
00004DF6 6100 0000                  		bsr.w	SynchroAnimate
00004DFA 6100 0000                  		bsr.w	SignpostArtLoad
00004DFE                            
00004DFE 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004E04 6700                       		beq.s	Level_ChkDemo	; if mode is 8 (demo), branch
00004E06 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w
00004E0C 6700 FF96                  		beq.w	Level_MainLoop	; if mode is $C (level), branch
00004E10 4E75                       		rts	
00004E12                            ; ===========================================================================
00004E12                            
00004E12                            Level_ChkDemo:
00004E12 4A78 FE02                  		tst.w	(f_restart).w	; is level set to restart?
00004E16 6600                       		bne.s	Level_EndDemo	; if yes, branch
00004E18 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00004E1C 6700                       		beq.s	Level_EndDemo	; if not, branch
00004E1E 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004E24 6700 FF7E                  		beq.w	Level_MainLoop	; if mode is 8 (demo), branch
00004E28 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004E2E 4E75                       		rts	
00004E30                            ; ===========================================================================
00004E30                            
00004E30                            Level_EndDemo:
00004E30 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004E36 6600                       		bne.s	Level_FadeDemo	; if mode is 8 (demo), branch
00004E38 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004E3E 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on & not ending sequence?
00004E42 6A00                       		bpl.s	Level_FadeDemo	; if yes, branch
00004E44 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; go to credits
00004E4A                            
00004E4A                            Level_FadeDemo:
00004E4A 31FC 003C F614             		move.w	#$3C,(v_demolength).w
00004E50 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00004E56 4278 F794                  		clr.w	(v_palchgspeed).w
00004E5A                            
00004E5A                            	Level_FDLoop:
00004E5A 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004E60 6100 EE36                  		bsr.w	WaitForVBla
00004E64 6100 0000                  		bsr.w	MoveSonicInDemo
00004E68 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004E6E 4EB9 0000 0000             		jsr	(BuildSprites).l
00004E74 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004E7A 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00004E7E 6A00                       		bpl.s	loc_3BC8
00004E80 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00004E86 6100 D4F2                  		bsr.w	FadeOut_ToBlack
00004E8A                            
00004E8A                            loc_3BC8:
00004E8A 4A78 F614                  		tst.w	(v_demolength).w
00004E8E 66CA                       		bne.s	Level_FDLoop
00004E90 4E75                       		rts	
00004E92                            ; ===========================================================================
00004E92                            
00004E92                            		include	"_inc\LZWaterFeatures.asm"
00004E92                            ; ---------------------------------------------------------------------------
00004E92                            ; Subroutine to	do special water effects in Labyrinth Zone
00004E92                            ; ---------------------------------------------------------------------------
00004E92                            
00004E92                            LZWaterFeatures:
00004E92 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00004E98 6600                       		bne.s	@notlabyrinth	; if not, branch
00004E9A 4A38 F744                  			tst.b   (f_nobgscroll).w
00004E9E 6600                       			bne.s	@setheight
00004EA0 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004EA6 6400                       		bcc.s	@setheight	; if yes, skip other effects
00004EA8                            
00004EA8 6100 0000                  		bsr.w	LZWindTunnels
00004EAC 6100 0000                  		bsr.w	LZWaterSlides
00004EB0 6100 0000                  		bsr.w	LZDynamicWater
00004EB4                            
00004EB4                            @setheight:
00004EB4 4238 F64E                  		clr.b	(f_wtr_state).w
00004EB8 7000                       		moveq	#0,d0
00004EBA 1038 FE60                  		move.b	(v_oscillate+2).w,d0
00004EBE E248                       		lsr.w	#1,d0
00004EC0 D078 F648                  		add.w	(v_waterpos2).w,d0
00004EC4 31C0 F646                  		move.w	d0,(v_waterpos1).w
00004EC8 3038 F646                  		move.w	(v_waterpos1).w,d0
00004ECC 9078 F704                  		sub.w	(v_screenposy).w,d0
00004ED0 6400                       		bcc.s	@isbelow
00004ED2 4A40                       		tst.w	d0
00004ED4 6A00                       		bpl.s	@isbelow	; if water is below top of screen, branch
00004ED6                            
00004ED6 11FC 00DF F625             		move.b	#223,(v_hbla_line).w
00004EDC 11FC 0001 F64E             		move.b	#1,(f_wtr_state).w ; screen is all underwater
00004EE2                            
00004EE2                            	@isbelow:
00004EE2 0C40 00DF                  		cmpi.w	#223,d0		; is water within 223 pixels of top of screen?
00004EE6 6500                       		bcs.s	@isvisible	; if yes, branch
00004EE8 303C 00DF                  		move.w	#223,d0
00004EEC                            
00004EEC                            	@isvisible:
00004EEC 11C0 F625                  		move.b	d0,(v_hbla_line).w ; set water surface as on-screen
00004EF0                            
00004EF0                            @notlabyrinth:
00004EF0 4E75                       		rts	
00004EF2                            ; ===========================================================================
00004EF2                            ; ---------------------------------------------------------------------------
00004EF2                            ; Initial water heights
00004EF2                            ; ---------------------------------------------------------------------------
00004EF2 0420                       WaterHeight:	dc.w $420	; Labyrinth 1
00004EF4 0328                       		dc.w $328	; Labyrinth 2
00004EF6 0900                       		dc.w $900	; Labyrinth 3
00004EF8 0228                       		dc.w $228	; Scrap Brain 3
00004EFA                            		even
00004EFA                            ; ===========================================================================
00004EFA                            
00004EFA                            ; ---------------------------------------------------------------------------
00004EFA                            ; Labyrinth dynamic water routines
00004EFA                            ; ---------------------------------------------------------------------------
00004EFA                            
00004EFA                            LZDynamicWater:
00004EFA 7000                       		moveq	#0,d0
00004EFC 1038 FE11                  		move.b	(v_act).w,d0
00004F00 D040                       		add.w	d0,d0
00004F02 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004F06 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004F0A 7200                       		moveq	#0,d1
00004F0C 1238 F64C                  		move.b	(f_water).w,d1
00004F10 3038 F64A                  		move.w	(v_waterpos3).w,d0
00004F14 9078 F648                  		sub.w	(v_waterpos2).w,d0
00004F18 6700                       		beq.s	@exit		; if water level is correct, branch
00004F1A 6400                       		bcc.s	@movewater	; if water level is too high, branch
00004F1C 4441                       		neg.w	d1		; set water to move up instead
00004F1E                            
00004F1E                            	@movewater:
00004F1E D378 F648                  		add.w	d1,(v_waterpos2).w ; move water up/down
00004F22                            
00004F22                            	@exit:
00004F22 4E75                       		rts	
00004F24                            ; ===========================================================================
00004F24 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004F26 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004F28 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004F2A 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004F2C                            ; ===========================================================================
00004F2C                            
00004F2C                            DynWater_LZ1:
00004F2C 4E75                       		rts	
00004F2E                            ; ===========================================================================
00004F2E                            
00004F2E                            DynWater_LZ2:
00004F2E 3038 F700                  		move.w	(v_screenposx).w,d0
00004F32 323C 0328                  		move.w	#$328,d1
00004F36 0C40 0500                  		cmpi.w	#$500,d0
00004F3A 6500                       		bcs.s	@setwater
00004F3C 323C 03C8                  		move.w	#$3C8,d1
00004F40 0C40 0B00                  		cmpi.w	#$B00,d0
00004F44 6500                       		bcs.s	@setwater
00004F46 323C 0428                  		move.w	#$428,d1
00004F4A                            
00004F4A                            	@setwater:
00004F4A 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004F4E 4E75                       		rts	
00004F50                            ; ===========================================================================
00004F50                            
00004F50                            DynWater_LZ3:
00004F50 3038 F700                  		move.w	(v_screenposx).w,d0
00004F54 1438 F64D                  		move.b	(v_wtr_routine).w,d2
00004F58 6600                       		bne.s	@routine2
00004F5A                            
00004F5A 323C 0900                  		move.w	#$900,d1
00004F5E 0C40 0600                  		cmpi.w	#$600,d0	; has screen reached position?
00004F62 6500                       		bcs.s	@setwaterlz3	; if not, branch
00004F64 0C78 03C0 D00C             		cmpi.w	#$3C0,(v_player+obY).w
00004F6A 6500                       		bcs.s	@setwaterlz3
00004F6C 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic in a y-axis range?
00004F72 6400                       		bcc.s	@setwaterlz3	; if not, branch
00004F74                            
00004F74 323C 04C8                  		move.w	#$4C8,d1	; set new water height
00004F78 11FC 004B A506             		move.b	#$4B,(v_lvllayout+$106).w ; update level layout
00004F7E 11FC 0001 F64D             		move.b	#1,(v_wtr_routine).w ; use second routine next
00004F8C                            
00004F8C                            	@setwaterlz3:
00004F8C 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004F90 31C1 F648                  		move.w	d1,(v_waterpos2).w ; change water height instantly
00004F94 4E75                       		rts	
00004F96                            ; ===========================================================================
00004F96                            
00004F96                            @routine2:
00004F96 5302                       		subq.b	#1,d2
00004F98 6600                       		bne.s	@routine3
00004F9A 323C 04C8                  		move.w	#$4C8,d1
00004F9E 0C40 0770                  		cmpi.w	#$770,d0
00004FA2 6500                       		bcs.s	@setwater2
00004FA4 323C 0308                  		move.w	#$308,d1
00004FA8 0C40 1400                  		cmpi.w	#$1400,d0
00004FAC 6500                       		bcs.s	@setwater2
00004FAE 0C78 0508 F64A             		cmpi.w	#$508,(v_waterpos3).w
00004FB4 6700                       		beq.s	@sonicislow
00004FB6 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic below $600 y-axis?
00004FBC 6400                       		bcc.s	@sonicislow	; if yes, branch
00004FBE 0C78 0280 D00C             		cmpi.w	#$280,(v_player+obY).w
00004FC4 6400                       		bcc.s	@setwater2
00004FC6                            
00004FC6                            @sonicislow:
00004FC6 323C 0508                  		move.w	#$508,d1
00004FCA 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004FCE 0C40 1770                  		cmpi.w	#$1770,d0
00004FD2 6500                       		bcs.s	@setwater2
00004FD4 11FC 0002 F64D             		move.b	#2,(v_wtr_routine).w
00004FDA                            
00004FDA                            	@setwater2:
00004FDA 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004FDE 4E75                       		rts	
00004FE0                            ; ===========================================================================
00004FE0                            
00004FE0                            @routine3:
00004FE0 5302                       		subq.b	#1,d2
00004FE2 6600                       		bne.s	@routine4
00004FE4 323C 0508                  		move.w	#$508,d1
00004FE8 0C40 1860                  		cmpi.w	#$1860,d0
00004FEC 6500                       		bcs.s	@setwater3
00004FEE 323C 0188                  		move.w	#$188,d1
00004FF2 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004FF6 6400                       		bcc.s	@loc_3DC6
00004FF8 B278 F648                  		cmp.w	(v_waterpos2).w,d1
00004FFC 6600                       		bne.s	@setwater3
00004FFE                            
00004FFE                            	@loc_3DC6:
00004FFE 11FC 0003 F64D             		move.b	#3,(v_wtr_routine).w
00005004                            
00005004                            	@setwater3:
00005004 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00005008 4E75                       		rts	
0000500A                            ; ===========================================================================
0000500A                            
0000500A                            @routine4:
0000500A 5302                       		subq.b	#1,d2
0000500C 6600                       		bne.s	@routine5
0000500E 323C 0188                  		move.w	#$188,d1
00005012 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00005016 6500                       		bcs.s	@setwater4
00005018 323C 0900                  		move.w	#$900,d1
0000501C 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00005020 6500                       		bcs.s	@setwater4
00005022 11FC 0004 F64D             		move.b	#4,(v_wtr_routine).w
00005028 31FC 0608 F64A             		move.w	#$608,(v_waterpos3).w
0000502E 31FC 07C0 F648             		move.w	#$7C0,(v_waterpos2).w
00005034 11FC 0001 F7E8             		move.b	#1,(f_switch+8).w
0000503A 4E75                       		rts	
0000503C                            ; ===========================================================================
0000503C                            
0000503C                            @setwater4:
0000503C 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00005040 31C1 F648                  		move.w	d1,(v_waterpos2).w
00005044 4E75                       		rts	
00005046                            ; ===========================================================================
00005046                            
00005046                            @routine5:
00005046 0C40 1E00                  		cmpi.w	#$1E00,d0	; has screen passed final position?
0000504A 6500                       		bcs.s	@dontset	; if not, branch
0000504C 31FC 0128 F64A             		move.w	#$128,(v_waterpos3).w
00005052                            
00005052                            	@dontset:
00005052 4E75                       		rts	
00005054                            ; ===========================================================================
00005054                            
00005054                            DynWater_SBZ3:
00005054                            	;	move.w	#$228,d1
00005054                            	;	cmpi.w	#$F00,(v_screenposx).w
00005054                            	;	bcs.s	@setwater
00005054                            	;	move.w	#$4C8,d1
00005054                            
00005054                            	;@setwater:
00005054                            		;move.w	d1,(v_waterpos3).w
00005054 4E75                       		rts
00005056                            
00005056                            ; ---------------------------------------------------------------------------
00005056                            ; Labyrinth Zone "wind tunnels"	subroutine
00005056                            ; ---------------------------------------------------------------------------
00005056                            
00005056                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005056                            
00005056                            
00005056                            LZWindTunnels:
00005056 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0000505A 6600 0000                  		bne.w	@quit	; if yes, branch
0000505E 45F9 0000 0000             		lea	(LZWind_Data+8).l,a2
00005064 7000                       		moveq	#0,d0
00005066 1038 FE11                  		move.b	(v_act).w,d0	; get act number
0000506A E748                       		lsl.w	#3,d0		; multiply by 8
0000506C D4C0                       		adda.w	d0,a2		; add to address for data
0000506E 7200                       		moveq	#0,d1
00005070 4A38 FE11                  		tst.b	(v_act).w	; is act number 1?
00005074 6600                       		bne.s	@notact1	; if not, branch
00005076 7201                       		moveq	#1,d1
00005078 514A                       		subq.w	#8,a2		; use different data for act 1
0000507A                            
0000507A                            	@notact1:
0000507A 43F8 D000                  		lea	(v_player).w,a1
0000507E                            
0000507E                            @chksonic:
0000507E 3029 0008                  		move.w	obX(a1),d0
00005082 B052                       		cmp.w	(a2),d0
00005084 6500 0000                  		bcs.w	@chknext
00005088 B06A 0004                  		cmp.w	4(a2),d0
0000508C 6400 0000                  		bcc.w	@chknext
00005090 3429 000C                  		move.w	obY(a1),d2
00005094 B46A 0002                  		cmp.w	2(a2),d2
00005098 6500                       		bcs.s	@chknext
0000509A B46A 0006                  		cmp.w	6(a2),d2
0000509E 6400                       		bcc.s	@chknext	; branch if Sonic is outside a range
000050A0 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000050A4 0200 003F                  		andi.b	#$3F,d0		; does VInt counter fall on 0, $40, $80 or $C0?
000050A8 6600                       		bne.s	@skipsound	; if not, branch
000050B4                            
000050B4                            	@skipsound:
000050B4 4A38 F7C9                  		tst.b	(f_wtunnelallow).w ; are wind tunnels disabled?
000050B8 6600 0000                  		bne.w	@quit	; if yes, branch
000050BC 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1) ; is Sonic hurt/dying?
000050C2 6400                       		bcc.s	@clrquit	; if yes, branch
000050C4 11FC 0001 F7C7             		move.b	#1,(f_wtunnelmode).w
000050CA 0440 0080                  		subi.w	#$80,d0
000050CE B052                       		cmp.w	(a2),d0
000050D0 6400                       		bcc.s	@movesonic
000050D2 7002                       		moveq	#2,d0
000050D4 0C38 0001 FE11             		cmpi.b	#1,(v_act).w	; is act number 2?
000050DA 6600                       		bne.s	@notact2	; if not, branch
000050DC 4440                       		neg.w	d0
000050DE                            
000050DE                            	@notact2:
000050DE D169 000C                  		add.w	d0,obY(a1)	; adjust Sonic's y-axis for curve of tunnel
000050E2                            
000050E2                            @movesonic:
000050E2 5869 0008                  		addq.w	#4,obX(a1)
000050E6 337C 0400 0010             		move.w	#$400,obVelX(a1) ; move Sonic horizontally
000050EC 337C 0000 0012             		move.w	#0,obVelY(a1)
000050F2 137C 0000 001C             		move.b	#id_Float2,obAnim(a1)	; use floating animation
000050F8 08E9 0001 0022             		bset	#1,obStatus(a1)
000050FE 0838 0000 F602             		btst	#0,(v_jpadhold2).w ; is up pressed?
00005104 6700                       		beq.s	@down		; if not, branch
00005106 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up on pole
0000510A                            
0000510A                            	@down:
0000510A 0838 0001 F602             		btst	#1,(v_jpadhold2).w ; is down being pressed?
00005110 6700                       		beq.s	@end		; if not, branch
00005112 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down on pole
00005116                            
00005116                            	@end:
00005116 4E75                       		rts	
00005118                            ; ===========================================================================
00005118                            
00005118                            @chknext:
00005118 504A                       		addq.w	#8,a2		; use second set of values (act 1 only)
0000511A 51C9 FF62                  		dbf	d1,@chksonic	; on act 1, repeat for a second tunnel
0000511E 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic still in a tunnel?
00005122 6700                       		beq.s	@quit		; if yes, branch
00005124 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
0000512A                            
0000512A                            @clrquit:
0000512A 4238 F7C7                  		clr.b	(f_wtunnelmode).w ; finish tunnel
0000512E                            
0000512E                            @quit:
0000512E 4E75                       		rts	
00005130                            ; End of function LZWindTunnels
00005130                            
00005130                            ; ===========================================================================
00005130                            
00005130                            		;    left, top,  right, bottom boundaries
00005130 0A80 0300 0C10 0380        LZWind_Data:	dc.w $A80, $300, $C10,  $380 ; act 1 values (set 1)
00005138 0F80 0100 1410 0180        		dc.w $F80, $100, $1410,	$180 ; act 1 values (set 2)
00005140 0460 0400 0710 0480        		dc.w $460, $400, $710,  $480 ; act 2 values
00005148 0A20 0600 1610 06E0        		dc.w $A20, $600, $1610, $6E0 ; act 3 values
00005150 0C80 0600 13D0 0780        		dc.w $C80, $600, $13D0, $780 ; SBZ act 3 values
00005158                            		even
00005158                            
00005158                            ; ---------------------------------------------------------------------------
00005158                            ; Labyrinth Zone water slide subroutine
00005158                            ; ---------------------------------------------------------------------------
00005158                            
00005158                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005158                            
00005158                            
00005158                            LZWaterSlides:
00005158 43F8 D000                  		lea	(v_player).w,a1
0000515C 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic jumping?
00005162 6600                       		bne.s	loc_3F6A	; if not, branch
00005164 3029 000C                  		move.w	obY(a1),d0
00005168 E248                       		lsr.w	#1,d0
0000516A 0240 0380                  		andi.w	#$380,d0
0000516E 1229 0008                  		move.b	obX(a1),d1
00005172 0241 007F                  		andi.w	#$7F,d1
00005176 D041                       		add.w	d1,d0
00005178 45F8 A400                  		lea	(v_lvllayout).w,a2
0000517C 1032 0000                  		move.b	(a2,d0.w),d0
00005180 45FA 0000                  		lea	Slide_Chunks_End(pc),a2
00005184 7200                       		moveq	#Slide_Chunks_End-Slide_Chunks-1,d1
00005186                            
00005186                            loc_3F62:
00005186 B022                       		cmp.b	-(a2),d0
00005188 57C9 FFFC                  		dbeq	d1,loc_3F62
0000518C 6700                       		beq.s	LZSlide_Move
0000518E                            
0000518E                            loc_3F6A:
0000518E 4A38 F7CA                  		tst.b	(f_jumponly).w
00005192 6700                       		beq.s	locret_3F7A
00005194 337C 0005 003E             		move.w	#5,$3E(a1)
0000519A 4238 F7CA                  		clr.b	(f_jumponly).w
0000519E                            
0000519E                            locret_3F7A:
0000519E 4E75                       		rts	
000051A0                            ; ===========================================================================
000051A0                            
000051A0                            LZSlide_Move:
000051A0 0C41 0003                  		cmpi.w	#3,d1
000051A4 6400                       		bcc.s	loc_3F84
000051A6 4E71                       		nop	
000051A8                            
000051A8                            loc_3F84:
000051A8 08A9 0000 0022             		bclr	#0,obStatus(a1)
000051AE 103B 1000                  		move.b	Slide_Speeds(pc,d1.w),d0
000051B2 1340 0020                  		move.b	d0,obInertia(a1)
000051B6 6A00                       		bpl.s	loc_3F9A
000051B8 08E9 0000 0022             		bset	#0,obStatus(a1)
000051BE                            
000051BE                            loc_3F9A:
000051BE 4229 0021                  		clr.b	obInertia+1(a1)
000051C2 137C 0000 001C             		move.b	#id_WaterSlide,obAnim(a1) ; use Sonic's "sliding" animation
000051C8 11FC 0001 F7CA             		move.b	#1,(f_jumponly).w ; lock controls (except jumping)
000051CE 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000051D2 0200 001F                  		andi.b	#$1F,d0
000051D6 6600                       		bne.s	locret_3FBE
000051E2                            
000051E2                            locret_3FBE:
000051E2 4E75                       		rts	
000051E4                            ; End of function LZWaterSlides
000051E4                            
000051E4                            ; ===========================================================================
000051E4                            ; byte_3FC0:
000051E4                            Slide_Speeds:
000051E4 0AF5 0AF6 F5F4 0B          		dc.b $A, $F5, $A, $F6, $F5, $F4, $B
000051EC 00                         		even
000051EC                            
000051EC                            Slide_Chunks:
000051EC 54                         		dc.b $54 ;2, 7, 3, $4C, $4B, 8, 4
000051ED                            ; byte_3FCF
000051ED                            Slide_Chunks_End
000051EE 00                         		even
000051EE 00                         		even
000051EE                            		include	"_inc\MoveSonicInDemo.asm"
000051EE                            ; ---------------------------------------------------------------------------
000051EE                            ; Subroutine to	move Sonic in demo mode
000051EE                            ; ---------------------------------------------------------------------------
000051EE                            
000051EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000051EE                            
000051EE                            
000051EE                            MoveSonicInDemo:
000051EE 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
000051F2 6600                       		bne.s	MDemo_On	; if yes, branch
000051F4 4E75                       		rts	
000051F6                            ; ===========================================================================
000051F6                            
000051F6                            ; This is an unused subroutine for recording a demo
000051F6                            
000051F6                            DemoRecorder:
000051F6 43F9 0008 0000             		lea	($80000).l,a1
000051FC 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00005200 D2C0                       		adda.w	d0,a1
00005202 1038 F604                  		move.b	(v_jpadhold1).w,d0
00005206 B011                       		cmp.b	(a1),d0
00005208 6600                       		bne.s	@next
0000520A 5229 0001                  		addq.b	#1,1(a1)
0000520E 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00005214 6700                       		beq.s	@next
00005216 4E75                       		rts	
00005218                            
00005218                            	@next:
00005218 1340 0002                  		move.b	d0,2(a1)
0000521C 137C 0000 0003             		move.b	#0,3(a1)
00005222 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
00005226 0278 03FF F790             		andi.w	#$3FF,(v_btnpushtime1).w
0000522C 4E75                       		rts	
0000522E                            ; ===========================================================================
0000522E                            
0000522E                            MDemo_On:
0000522E 4A38 F604                  		tst.b	(v_jpadhold1).w	; is start button pressed?
00005232 6A00                       		bpl.s	@dontquit	; if not, branch
00005234 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
00005238 6B00                       		bmi.s	@dontquit	; if yes, branch
0000523A 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00005240                            
00005240                            	@dontquit:
00005240 43F9 0000 0000             		lea	(DemoDataPtr).l,a1
00005246 7000                       		moveq	#0,d0
00005248 1038 FE10                  		move.b	(v_zone).w,d0
0000524C 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is this a special stage?
00005252 6600                       		bne.s	@notspecial	; if not, branch
00005254 7006                       		moveq	#6,d0		; use demo #6
00005256                            
00005256                            	@notspecial:
00005256 E548                       		lsl.w	#2,d0
00005258 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for demo data
0000525C 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
00005260 6A00                       		bpl.s	@notcredits	; if not, branch
00005262 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1
00005268 3038 FFF4                  		move.w	(v_creditsnum).w,d0
0000526C 5340                       		subq.w	#1,d0
0000526E E548                       		lsl.w	#2,d0
00005270 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for credits demo
00005274                            
00005274                            	@notcredits:
00005274 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00005278 D2C0                       		adda.w	d0,a1
0000527A 1011                       		move.b	(a1),d0
0000527C 41F8 F604                  		lea	(v_jpadhold1).w,a0
00005280 1200                       		move.b	d0,d1
00005282 7400                       			moveq	#0,d2
00005284 B500                       		eor.b	d2,d0
00005286 10C1                       		move.b	d1,(a0)+
00005288 C001                       		and.b	d1,d0
0000528A 10C0                       		move.b	d0,(a0)+
0000528C 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
00005290 6400                       		bcc.s	@end
00005292 11E9 0003 F792             		move.b	3(a1),(v_btnpushtime2).w
00005298 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
0000529C                            
0000529C                            	@end:
0000529C 4E75                       		rts	
0000529E                            ; End of function MoveSonicInDemo
0000529E                            
0000529E                            ; ===========================================================================
0000529E                            ; ---------------------------------------------------------------------------
0000529E                            ; Demo sequence	pointers
0000529E                            ; ---------------------------------------------------------------------------
0000529E 0000 0000                  DemoDataPtr:	dc.l Demo_GHZ		; demos run after the title screen
000052A2 0000 0000                  		dc.l Demo_GHZ
000052A6 0000 0000                  		dc.l Demo_MZ
000052AA 0000 0000                  		dc.l Demo_MZ
000052AE 0000 0000                  		dc.l Demo_SYZ
000052B2 0000 0000                  		dc.l Demo_SYZ
000052B6 0000 0000                  		dc.l Demo_SS
000052BA 0000 0000                  		dc.l Demo_SS
000052BE                            
000052BE 0000 0000                  DemoEndDataPtr:	dc.l Demo_EndGHZ1	; demos run during the credits
000052C2 0000 0000                  		dc.l Demo_EndMZ
000052C6 0000 0000                  		dc.l Demo_EndSYZ
000052CA 0000 0000                  		dc.l Demo_EndLZ
000052CE 0000 0000                  		dc.l Demo_EndSLZ
000052D2 0000 0000                  		dc.l Demo_EndSBZ1
000052D6 0000 0000                  		dc.l Demo_EndSBZ2
000052DA 0000 0000                  		dc.l Demo_EndGHZ2
000052DE                            
000052DE 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000052EE 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000052FE 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
0000530E                            		even
0000530E                            		even
0000530E                            
0000530E                            ; ---------------------------------------------------------------------------
0000530E                            ; Collision index pointer loading subroutine
0000530E                            ; ---------------------------------------------------------------------------
0000530E                            
0000530E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000530E                            
0000530E                            
0000530E                            ColIndexLoad:
0000530E 7000                       		moveq	#0,d0
00005310 1038 FE10                  		move.b	(v_zone).w,d0
00005314 E548                       		lsl.w	#2,d0
00005316 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),(v_collindex).w
0000531C 4E75                       		rts	
0000531E                            ; End of function ColIndexLoad
0000531E                            
0000531E                            ; ===========================================================================
0000531E                            ; ---------------------------------------------------------------------------
0000531E                            ; Collision index pointers
0000531E                            ; ---------------------------------------------------------------------------
0000531E 0000 0000                  ColPointers:	dc.l Col_GHZ
00005322 0000 0000                  		dc.l Col_LZ
00005326 0000 0000                  		dc.l Col_MZ
0000532A 0000 0000                  		dc.l Col_SLZ
0000532E 0000 0000                  		dc.l Col_SYZ
00005332 0000 0000                  		dc.l Col_SBZ
00005336                            ;		dc.l Col_GHZ ; Pointer for Ending is missing by default.
00005336                            
00005336                            		include	"_inc\Oscillatory Routines.asm"
00005336                            ; ---------------------------------------------------------------------------
00005336                            ; Oscillating number subroutines
00005336                            ; ---------------------------------------------------------------------------
00005336                            
00005336                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005336                            
00005336                            ; Initialise the values
00005336                            
00005336                            OscillateNumInit:
00005336 43F8 FE5E                  		lea	(v_oscillate).w,a1
0000533A 45F9 0000 0000             		lea	(@baselines).l,a2
00005340 7220                       		moveq	#$20,d1
00005342                            
00005342                            	@loop:
00005342 32DA                       		move.w	(a2)+,(a1)+	; copy baseline values to RAM
00005344 51C9 FFFC                  		dbf	d1,@loop
00005348 4E75                       		rts	
0000534A                            
0000534A                            
0000534A                            ; ===========================================================================
0000534A 007C                       @baselines:	dc.w %0000000001111100	; oscillation direction bitfield
0000534C 0080 0000                  		dc.w $80, 0
00005350 0080 0000                  		dc.w $80, 0
00005354 0080 0000                  		dc.w $80, 0
00005358 0080 0000                  		dc.w $80, 0
0000535C 0080 0000                  		dc.w $80, 0
00005360 0080 0000                  		dc.w $80, 0
00005364 0080 0000                  		dc.w $80, 0
00005368 0080 0000                  		dc.w $80, 0
0000536C 0080 0000                  		dc.w $80, 0
00005370 50F0 011E                  		dc.w $50F0, $11E
00005374 2080 00B4                  		dc.w $2080, $B4
00005378 3080 010E                  		dc.w $3080, $10E
0000537C 5080 01C2                  		dc.w $5080, $1C2
00005380 7080 0276                  		dc.w $7080, $276
00005384 0080 0000                  		dc.w $80, 0
00005388 0080 0000                  		dc.w $80, 0
0000538C                            		even
0000538C                            
0000538C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000538C                            
0000538C                            ; Oscillate values
0000538C                            
0000538C                            OscillateNumDo:
0000538C 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00005392 6400                       		bcc.s	@end		; if yes, branch
00005394 43F8 FE5E                  		lea	(v_oscillate).w,a1
00005398 45F9 0000 0000             		lea	(@settings).l,a2
0000539E 3619                       		move.w	(a1)+,d3	; get oscillation direction bitfield
000053A0 720F                       		moveq	#$F,d1
000053A2                            
000053A2                            @loop:
000053A2 341A                       		move.w	(a2)+,d2	; get frequency
000053A4 381A                       		move.w	(a2)+,d4	; get amplitude
000053A6 0303                       		btst	d1,d3		; check oscillation direction
000053A8 6600                       		bne.s	@down		; branch if 1
000053AA                            
000053AA                            	@up:
000053AA 3029 0002                  		move.w	2(a1),d0	; get current rate
000053AE D042                       		add.w	d2,d0		; add frequency
000053B0 3340 0002                  		move.w	d0,2(a1)
000053B4 D151                       		add.w	d0,0(a1)	; add rate to value
000053B6 B811                       		cmp.b	0(a1),d4
000053B8 6200                       		bhi.s	@next
000053BA 03C3                       		bset	d1,d3
000053BC 6000                       		bra.s	@next
000053BE                            
000053BE                            	@down:
000053BE 3029 0002                  		move.w	2(a1),d0
000053C2 9042                       		sub.w	d2,d0
000053C4 3340 0002                  		move.w	d0,2(a1)
000053C8 D151                       		add.w	d0,0(a1)
000053CA B811                       		cmp.b	0(a1),d4
000053CC 6300                       		bls.s	@next
000053CE 0383                       		bclr	d1,d3
000053D0                            
000053D0                            	@next:
000053D0 5849                       		addq.w	#4,a1
000053D2 51C9 FFCE                  		dbf	d1,@loop
000053D6 31C3 FE5E                  		move.w	d3,(v_oscillate).w
000053DA                            
000053DA                            @end:
000053DA 4E75                       		rts	
000053DC                            ; End of function OscillateNumDo
000053DC                            
000053DC                            ; ===========================================================================
000053DC 0002 0010                  @settings:	dc.w 2,	$10	; frequency, amplitude
000053E0 0002 0018                  		dc.w 2,	$18
000053E4 0002 0020                  		dc.w 2,	$20
000053E8 0002 0030                  		dc.w 2,	$30
000053EC 0004 0020                  		dc.w 4,	$20
000053F0 0008 0008                  		dc.w 8,	8
000053F4 0008 0040                  		dc.w 8,	$40
000053F8 0004 0040                  		dc.w 4,	$40
000053FC 0002 0050                  		dc.w 2,	$50
00005400 0002 0050                  		dc.w 2,	$50
00005404 0002 0020                  		dc.w 2,	$20
00005408 0003 0030                  		dc.w 3,	$30
0000540C 0005 0050                  		dc.w 5,	$50
00005410 0007 0070                  		dc.w 7,	$70
00005414 0002 0010                  		dc.w 2,	$10
00005418 0002 0010                  		dc.w 2,	$10
0000541C                            		even
0000541C                            		even
0000541C                            
0000541C                            ; ---------------------------------------------------------------------------
0000541C                            ; Subroutine to	change synchronised animation variables (rings, giant rings)
0000541C                            ; ---------------------------------------------------------------------------
0000541C                            
0000541C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000541C                            
0000541C                            
0000541C                            SynchroAnimate:
0000541C                            
0000541C                            ; Used for GHZ spiked log
0000541C                            Sync1:
0000541C 5338 FEC0                  		subq.b	#1,(v_ani0_time).w ; has timer reached 0?
00005420 6A00                       		bpl.s	Sync2		; if not, branch
00005422 11FC 000B FEC0             		move.b	#$B,(v_ani0_time).w ; reset timer
00005428 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w ; next frame
0000542C 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w ; max frame is 7
00005432                            
00005432                            ; Used for rings and giant rings
00005432                            Sync2:
00005432 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
00005436 6A00                       		bpl.s	Sync3
00005438 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0000543E 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
00005442 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
00005448                            
00005448                            ; Used for nothing
00005448                            Sync3:
00005448 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0000544C 6A00                       		bpl.s	Sync4
0000544E 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
00005454 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
00005458 0C38 0006 FEC5             		cmpi.b	#6,(v_ani2_frame).w
0000545E 6500                       		blo.s	Sync4
00005460 11FC 0000 FEC5             		move.b	#0,(v_ani2_frame).w
00005466                            
00005466                            ; Used for bouncing rings
00005466                            Sync4:
00005466 4A38 FEC6                  		tst.b	(v_ani3_time).w
0000546A 6700                       		beq.s	SyncEnd
0000546C 7000                       		moveq	#0,d0
0000546E 1038 FEC6                  		move.b	(v_ani3_time).w,d0
00005472 D078 FEC8                  		add.w	(v_ani3_buf).w,d0
00005476 31C0 FEC8                  		move.w	d0,(v_ani3_buf).w
0000547A EF58                       		rol.w	#7,d0
0000547C 0240 0003                  		andi.w	#3,d0
00005480 11C0 FEC7                  		move.b	d0,(v_ani3_frame).w
00005484 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
00005488                            
00005488                            SyncEnd:
00005488 4E75                       		rts	
0000548A                            ; End of function SynchroAnimate
0000548A                            
0000548A                            ; ---------------------------------------------------------------------------
0000548A                            ; End-of-act signpost pattern loading subroutine
0000548A                            ; ---------------------------------------------------------------------------
0000548A                            
0000548A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000548A                            
0000548A                            
0000548A                            SignpostArtLoad:
0000548A 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0000548E 6600 0000                  		bne.w	@exit		; if yes, branch
00005492 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; is act number 02 (act 3)?
00005498 6700                       		beq.s	@exit		; if yes, branch
0000549A                            
0000549A 3038 F700                  		move.w	(v_screenposx).w,d0
0000549E 3238 F72A                  		move.w	(v_limitright2).w,d1
000054A2 0441 0100                  		subi.w	#$100,d1
000054A6 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000054A8 6D00                       		blt.s	@exit		; if not, branch
000054AA 4A38 FE1E                  		tst.b	(f_timecount).w
000054AE 6700                       		beq.s	@exit
000054B0 B278 F728                  		cmp.w	(v_limitleft2).w,d1
000054B4 6700                       		beq.s	@exit
000054B6 31C1 F728                  		move.w	d1,(v_limitleft2).w ; move left boundary to current screen position
000054BA 7000                       		moveq	#plcid_Signpost,d0
000054BC 6000 C2AE                  		bra.w	NewPLC		; load signpost	patterns
000054C0                            
000054C0                            	@exit:
000054C0 4E75                       		rts	
000054C2                            ; End of function SignpostArtLoad
000054C2                            
000054C2                            ; ===========================================================================
000054C2                            Demo_GHZ:	incbin	"demodata\Intro - GHZ.bin"
00005542                            Demo_MZ:	incbin	"demodata\Intro - MZ.bin"
00005672                            Demo_SYZ:	incbin	"demodata\Intro - SYZ.bin"
000056F2                            Demo_SS:	incbin	"demodata\Intro - Special Stage.bin"
000057F2                            ; ===========================================================================
000057F2                            
000057F2                            ; ---------------------------------------------------------------------------
000057F2                            ; Special Stage
000057F2                            ; ---------------------------------------------------------------------------
000057F2                            
000057F2                            GM_Special:
000057FA 6100 CC88                  		bsr.w	PaletteWhiteOut
000057FE 46FC 2700                  		disable_ints
00005802 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005808 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
0000580C 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
00005810 31FC 8AAF F624             		move.w	#$8A00+175,(v_hbla_hreg).w
00005816 3CBC 9011                  		move.w	#$9011,(a6)	; 128-cell hscroll size
0000581A 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
0000581E 0200 00BF                  		andi.b	#$BF,d0
00005822 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005828 6100 B9A6                  		bsr.w	ClearScreen
0000582C 46FC 2300                  		enable_ints
00005830 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$6FFF,$5000
00005852                            
00005852                            	SS_WaitForDMA:
00005852 3215                       		move.w	(a5),d1		; read control port ($C00004)
00005854 0801 0001                  		btst	#1,d1		; is DMA running?
00005858 66F8                       		bne.s	SS_WaitForDMA	; if yes, branch
0000585A 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment to 2 bytes
0000585E 6100 0000                  		bsr.w	SS_BGLoad
00005862 7000                       		moveq	#plcid_SpecialStage,d0
00005864 6100 C040                  		bsr.w	QuickPLC	; load special stage patterns
00005868                            
00005868 43F8 D000                  		lea	(v_objspace).w,a1
0000586C 7000                       		moveq	#0,d0
0000586E 323C 07FF                  		move.w	#$7FF,d1
00005872                            	SS_ClrObjRam:
00005872 22C0                       		move.l	d0,(a1)+
00005874 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00005878                            
00005878 43F8 F700                  		lea	(v_screenposx).w,a1
0000587C 7000                       		moveq	#0,d0
0000587E 323C 003F                  		move.w	#$3F,d1
00005882                            	SS_ClrRam1:
00005882 22C0                       		move.l	d0,(a1)+
00005884 51C9 FFFC                  		dbf	d1,SS_ClrRam1	; clear	variables
00005888                            
00005888 43F8 FE60                  		lea	(v_oscillate+2).w,a1
0000588C 7000                       		moveq	#0,d0
0000588E 323C 0027                  		move.w	#$27,d1
00005892                            	SS_ClrRam2:
00005892 22C0                       		move.l	d0,(a1)+
00005894 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00005898                            
00005898 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
0000589C 7000                       		moveq	#0,d0
0000589E 323C 007F                  		move.w	#$7F,d1
000058A2                            	SS_ClrNemRam:
000058A2 22C0                       		move.l	d0,(a1)+
000058A4 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
000058A8                            
000058A8 4238 F64E                  		clr.b	(f_wtr_state).w
000058AC 4278 FE02                  		clr.w	(f_restart).w
000058B0 700A                       		moveq	#palid_Special,d0
000058B2 6100 CD50                  		bsr.w	PalLoad1	; load special stage palette
000058B6 4EB9 0000 0000             		jsr	(SS_Load).l		; load SS layout data
000058BC 21FC 0000 0000 F700        		move.l	#0,(v_screenposx).w
000058C4 21FC 0000 0000 F704        		move.l	#0,(v_screenposy).w
000058CC 11FC 0000 D000             		move.b	#id_SonicSpecial,(v_player).w ; load special stage Sonic object
000058D2 6100 0000                  		bsr.w	PalCycle_SS
000058D6 4278 F780                  		clr.w	(v_ssangle).w	; set stage angle to "upright"
000058DA 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set stage rotation speed
000058E8 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
000058EE 43F9 0000 529E             		lea	(DemoDataPtr).l,a1
000058F4 7006                       		moveq	#6,d0
000058F6 E548                       		lsl.w	#2,d0
000058F8 2271 0000                  		movea.l	(a1,d0.w),a1
000058FC 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w
00005902 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
00005906 4278 FE20                  		clr.w	(v_rings).w
0000590A 4238 FE1B                  		clr.b	(v_lifecount).w
0000590E 31FC 0000 FE08             		move.w	#0,(v_debuguse).w
00005914 31FC 0708 F614             		move.w	#1800,(v_demolength).w
0000591A 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
0000591E 6700                       		beq.s	SS_NoDebug	; if not, branch
00005920 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button pressed?
00005926 6700                       		beq.s	SS_NoDebug	; if not, branch
00005928 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
0000592E                            
0000592E                            	SS_NoDebug:
0000592E 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005932 0000 0040                  		ori.b	#$40,d0
00005936 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000593C 6100 CA9A                  		bsr.w	PaletteWhiteIn
00005940                            
00005940                            ; ---------------------------------------------------------------------------
00005940                            ; Main Special Stage loop
00005940                            ; ---------------------------------------------------------------------------
00005940                            
00005940                            SS_MainLoop:
00005940 6100 B96A                  		bsr.w	PauseGame
00005944 11FC 000A F62A             		move.b	#$A,(v_vbla_routine).w
0000594A 6100 E34C                  		bsr.w	WaitForVBla
0000594E 6100 F89E                  		bsr.w	MoveSonicInDemo
00005952 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
00005958 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000595E 4EB9 0000 0000             		jsr	(BuildSprites).l
00005964 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
0000596A 6100 0000                  		bsr.w	SS_BGAnimate
0000596E 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00005972 6700                       		beq.s	SS_ChkEnd	; if not, branch
00005974 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00005978 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
0000597C                            
0000597C                            	SS_ChkEnd:
0000597C 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
00005982 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00005986                            
00005986 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
0000598A 6600 0000                  		bne.w	SS_ToLevel
0000598E 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005994 0C78 0503 FE10             		cmpi.w	#(id_SBZ<<8)+3,(v_zone).w ; is level number higher than FZ?
0000599A 6500                       		blo.s	SS_Finish	; if not, branch
0000599C 4278 FE10                  		clr.w	(v_zone).w	; set to GHZ1
000059A0                            
000059A0                            SS_Finish:
000059A0 31FC 003C F614             		move.w	#60,(v_demolength).w ; set delay time to 1 second
000059A6 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
000059AC 4278 F794                  		clr.w	(v_palchgspeed).w
000059B0                            
000059B0                            	SS_FinLoop:
000059B0 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000059B6 6100 E2E0                  		bsr.w	WaitForVBla
000059BA 6100 F832                  		bsr.w	MoveSonicInDemo
000059BE 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
000059C4 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000059CA 4EB9 0000 0000             		jsr	(BuildSprites).l
000059D0 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
000059D6 6100 0000                  		bsr.w	SS_BGAnimate
000059DA 5378 F794                  		subq.w	#1,(v_palchgspeed).w
000059DE 6A00                       		bpl.s	loc_47D4
000059E0 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
000059E6 6100 CABC                  		bsr.w	WhiteOut_ToWhite
000059EA                            
000059EA                            loc_47D4:
000059EA 4A78 F614                  		tst.w	(v_demolength).w
000059EE 66C0                       		bne.s	SS_FinLoop
000059F0                            
000059F0 46FC 2700                  		disable_ints
000059F4 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000059FA 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000059FE 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00005A02 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00005A06 6100 B7C8                  		bsr.w	ClearScreen
00005A14 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005A1A 6100 B932                  		bsr.w	NemDec
00005A1E 4EB9 0000 0000             		jsr	(Hud_Base).l
00005A24 31FC C800 C8FC             		ResetDMAQueue	
00005A2A 46FC 2300                  		enable_ints
00005A2E 7011                       		moveq	#palid_SSResult,d0
00005A30 6100 CC0E                  		bsr.w	PalLoad2	; load results screen palette
00005A34 7000                       		moveq	#plcid_Main,d0
00005A36 6100 BD34                  		bsr.w	NewPLC
00005A3A 7000                       		moveq	#plcid_SSResult,d0
00005A3C 6100 BCFC                  		bsr.w	AddPLC		; load results screen patterns
00005A40 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00005A46 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; update ring bonus counter
00005A4C 3038 FE20                  		move.w	(v_rings).w,d0
00005A50 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00005A54 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set rings bonus
00005A62                            
00005A62 43F8 D000                  		lea	(v_objspace).w,a1
00005A66 7000                       		moveq	#0,d0
00005A68 323C 07FF                  		move.w	#$7FF,d1
00005A6C                            	SS_EndClrObjRam:
00005A6C 22C0                       		move.l	d0,(a1)+
00005A6E 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00005A72                            
00005A72 11FC 0000 D5C0             		move.b	#id_SSResult,(v_objspace+$5C0).w ; load results screen object
00005A78                            
00005A78                            SS_NormalExit:
00005A78 6100 B832                  		bsr.w	PauseGame
00005A7C 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00005A82 6100 E214                  		bsr.w	WaitForVBla
00005A86 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005A8C 4EB9 0000 0000             		jsr	(BuildSprites).l
00005A92 6100 BD12                  		bsr.w	RunPLC
00005A96 4A78 FE02                  		tst.w	(f_restart).w
00005A9A 67DC                       		beq.s	SS_NormalExit
00005A9C 4AB8 F680                  		tst.l	(v_plc_buffer).w
00005AA0 66D6                       		bne.s	SS_NormalExit
00005AAA 6100 C9D8                  		bsr.w	PaletteWhiteOut
00005AAE 4E75                       		rts	
00005AB0                            ; ===========================================================================
00005AB0                            
00005AB0                            SS_ToSegaScreen:
00005AB0 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00005AB6 4E75                       		rts
00005AB8                            
00005AB8 0C38 0000 F600             SS_ToLevel:	cmpi.b	#id_Level,(v_gamemode).w
00005ABE 67F0                       		beq.s	SS_ToSegaScreen
00005AC0 4E75                       		rts
00005AC2                            
00005AC2                            ; ---------------------------------------------------------------------------
00005AC2                            ; Special stage	background loading subroutine
00005AC2                            ; ---------------------------------------------------------------------------
00005AC2                            
00005AC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005AC2                            
00005AC2                            
00005AC2                            SS_BGLoad:
00005AC2 43F9 00FF 0000             		lea	($FF0000).l,a1
00005AC8 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00005ACE 303C 4051                  		move.w	#$4051,d0
00005AD2 6100 BE04                  		bsr.w	EniDec
00005AD6 263C 5000 0001             		move.l	#$50000001,d3
00005ADC 45F9 00FF 0080             		lea	($FF0080).l,a2
00005AE2 7E06                       		moveq	#6,d7
00005AE4                            
00005AE4                            loc_48BE:
00005AE4 2003                       		move.l	d3,d0
00005AE6 7C03                       		moveq	#3,d6
00005AE8 7800                       		moveq	#0,d4
00005AEA 0C47 0003                  		cmpi.w	#3,d7
00005AEE 6400                       		bhs.s	loc_48CC
00005AF0 7801                       		moveq	#1,d4
00005AF2                            
00005AF2                            loc_48CC:
00005AF2 7A07                       		moveq	#7,d5
00005AF4                            
00005AF4                            loc_48CE:
00005AF4 224A                       		movea.l	a2,a1
00005AF6 0A04 0001                  		eori.b	#1,d4
00005AFA 6600                       		bne.s	loc_48E2
00005AFC 0C47 0006                  		cmpi.w	#6,d7
00005B00 6600                       		bne.s	loc_48F2
00005B02 43F9 00FF 0000             		lea	($FF0000).l,a1
00005B08                            
00005B08                            loc_48E2:
00005B08 48E7 F800                  		movem.l	d0-d4,-(sp)
00005B0C 7207                       		moveq	#7,d1
00005B0E 7407                       		moveq	#7,d2
00005B10 6100 B812                  		bsr.w	TilemapToVRAM
00005B14 4CDF 001F                  		movem.l	(sp)+,d0-d4
00005B18                            
00005B18                            loc_48F2:
00005B18 0680 0010 0000             		addi.l	#$100000,d0
00005B1E 51CD FFD4                  		dbf	d5,loc_48CE
00005B22 0680 0380 0000             		addi.l	#$3800000,d0
00005B28 0A04 0001                  		eori.b	#1,d4
00005B2C 51CE FFC4                  		dbf	d6,loc_48CC
00005B30 0683 1000 0000             		addi.l	#$10000000,d3
00005B36 6A00                       		bpl.s	loc_491C
00005B38 4843                       		swap	d3
00005B3A 0683 0000 C000             		addi.l	#$C000,d3
00005B40 4843                       		swap	d3
00005B42                            
00005B42                            loc_491C:
00005B42 D4FC 0080                  		adda.w	#$80,a2
00005B46 51CF FF9C                  		dbf	d7,loc_48BE
00005B4A 43F9 00FF 0000             		lea	($FF0000).l,a1
00005B50 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00005B56 303C 4000                  		move.w	#$4000,d0
00005B5A 6100 BD7C                  		bsr.w	EniDec
00005B5E 43F9 00FF 0000             		lea	($FF0000).l,a1
00005B64 203C 4000 0003             		move.l	#$40000003,d0
00005B6A 723F                       		moveq	#$3F,d1
00005B6C 741F                       		moveq	#$1F,d2
00005B6E 6100 B7B4                  		bsr.w	TilemapToVRAM
00005B72 43F9 00FF 0000             		lea	($FF0000).l,a1
00005B78 203C 5000 0003             		move.l	#$50000003,d0
00005B7E 723F                       		moveq	#$3F,d1
00005B80 743F                       		moveq	#$3F,d2
00005B82 6100 B7A0                  		bsr.w	TilemapToVRAM
00005B86 4E75                       		rts	
00005B88                            ; End of function SS_BGLoad
00005B88                            
00005B88                            ; ---------------------------------------------------------------------------
00005B88                            ; Palette cycling routine - special stage
00005B88                            ; ---------------------------------------------------------------------------
00005B88                            
00005B88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005B88                            
00005B88                            
00005B88                            PalCycle_SS:
00005B88 4A78 F63A                  		tst.w	(f_pause).w
00005B8C 6600                       		bne.s	locret_49E6
00005B8E 5378 F79C                  		subq.w	#1,(v_palss_time).w
00005B92 6A00                       		bpl.s	locret_49E6
00005B94 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005B9A 3038 F79A                  		move.w	(v_palss_num).w,d0
00005B9E 5278 F79A                  		addq.w	#1,(v_palss_num).w
00005BA2 0240 001F                  		andi.w	#$1F,d0
00005BA6 E548                       		lsl.w	#2,d0
00005BA8 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00005BAE D0C0                       		adda.w	d0,a0
00005BB0 1018                       		move.b	(a0)+,d0
00005BB2 6A00                       		bpl.s	loc_4992
00005BB4 303C 01FF                  		move.w	#$1FF,d0
00005BB8                            
00005BB8                            loc_4992:
00005BB8 31C0 F79C                  		move.w	d0,(v_palss_time).w
00005BBC 7000                       		moveq	#0,d0
00005BBE 1018                       		move.b	(a0)+,d0
00005BC0 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00005BC4 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00005BCA 43F1 0000                  		lea	(a1,d0.w),a1
00005BCE 303C 8200                  		move.w	#-$7E00,d0
00005BD2 1019                       		move.b	(a1)+,d0
00005BD4 3C80                       		move.w	d0,(a6)
00005BD6 11D1 F616                  		move.b	(a1),(v_scrposy_dup).w
00005BDA 303C 8400                  		move.w	#-$7C00,d0
00005BDE 1018                       		move.b	(a0)+,d0
00005BE0 3C80                       		move.w	d0,(a6)
00005BE2 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00005BEC 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l
00005BF4 7000                       		moveq	#0,d0
00005BF6 1018                       		move.b	(a0)+,d0
00005BF8 6B00                       		bmi.s	loc_49E8
00005BFA 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00005C00 D2C0                       		adda.w	d0,a1
00005C02 45F8 FB4E                  		lea	(v_pal_dry+$4E).w,a2
00005C06 24D9                       		move.l	(a1)+,(a2)+
00005C08 24D9                       		move.l	(a1)+,(a2)+
00005C0A 24D9                       		move.l	(a1)+,(a2)+
00005C0C                            
00005C0C                            locret_49E6:
00005C0C 4E75                       		rts	
00005C0E                            ; ===========================================================================
00005C0E                            
00005C0E                            loc_49E8:
00005C0E 3238 F79E                  		move.w	($FFFFF79E).w,d1
00005C12 0C40 008A                  		cmpi.w	#$8A,d0
00005C16 6500                       		blo.s	loc_49F4
00005C18 5241                       		addq.w	#1,d1
00005C1A                            
00005C1A                            loc_49F4:
00005C1A C2FC 002A                  		mulu.w	#$2A,d1
00005C1E 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00005C24 D2C1                       		adda.w	d1,a1
00005C26 0240 007F                  		andi.w	#$7F,d0
00005C2A 0880 0000                  		bclr	#0,d0
00005C2E 6700                       		beq.s	loc_4A18
00005C30 45F8 FB6E                  		lea	(v_pal_dry+$6E).w,a2
00005C34 24D1                       		move.l	(a1),(a2)+
00005C36 24E9 0004                  		move.l	4(a1),(a2)+
00005C3A 24E9 0008                  		move.l	8(a1),(a2)+
00005C3E                            
00005C3E                            loc_4A18:
00005C3E D2FC 000C                  		adda.w	#$C,a1
00005C42 45F8 FB5A                  		lea	(v_pal_dry+$5A).w,a2
00005C46 0C40 000A                  		cmpi.w	#$A,d0
00005C4A 6500                       		blo.s	loc_4A2E
00005C4C 0440 000A                  		subi.w	#$A,d0
00005C50 45F8 FB7A                  		lea	(v_pal_dry+$7A).w,a2
00005C54                            
00005C54                            loc_4A2E:
00005C54 3200                       		move.w	d0,d1
00005C56 D040                       		add.w	d0,d0
00005C58 D041                       		add.w	d1,d0
00005C5A D2C0                       		adda.w	d0,a1
00005C5C 24D9                       		move.l	(a1)+,(a2)+
00005C5E 34D9                       		move.w	(a1)+,(a2)+
00005C60 4E75                       		rts	
00005C62                            ; End of function PalCycle_SS
00005C62                            
00005C62                            ; ===========================================================================
00005C62 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00005C72                            
00005C72 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00005C82 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00005C92 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00005CA2 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00005CB2 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00005CC2 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00005CD2 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005CE2                            		even
00005CE2 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005CF0                            		even
00005CF0                            
00005CF0                            Pal_SSCyc1:	incbin	"palette\Cycle - Special Stage 1.bin"
00005D38                            		even
00005D38                            Pal_SSCyc2:	incbin	"palette\Cycle - Special Stage 2.bin"
00005E0A                            		even
00005E0A                            
00005E0A                            ; ---------------------------------------------------------------------------
00005E0A                            ; Subroutine to	make the special stage background animated
00005E0A                            ; ---------------------------------------------------------------------------
00005E0A                            
00005E0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005E0A                            
00005E0A                            
00005E0A                            SS_BGAnimate:
00005E0A 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005E0E 6600                       		bne.s	loc_4BF6
00005E10 31FC 0000 F70C             		move.w	#0,(v_bgscreenposy).w
00005E16 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005E1C                            
00005E1C                            loc_4BF6:
00005E1C 0C40 0008                  		cmpi.w	#8,d0
00005E20 6400                       		bhs.s	loc_4C4E
00005E22 0C40 0006                  		cmpi.w	#6,d0
00005E26 6600                       		bne.s	loc_4C10
00005E28 5278 F718                  		addq.w	#1,(v_bg3screenposx).w
00005E2C 5278 F70C                  		addq.w	#1,(v_bgscreenposy).w
00005E30 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005E36                            
00005E36                            loc_4C10:
00005E36 7000                       		moveq	#0,d0
00005E38 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00005E3C 4440                       		neg.w	d0
00005E3E 4840                       		swap	d0
00005E40 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005E46 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005E4A 7609                       		moveq	#9,d3
00005E4C                            
00005E4C                            loc_4C26:
00005E4C 302B 0002                  		move.w	2(a3),d0
00005E50 6100 DE78                  		bsr.w	CalcSine
00005E54 7400                       		moveq	#0,d2
00005E56 1419                       		move.b	(a1)+,d2
00005E58 C1C2                       		muls.w	d2,d0
00005E5A E080                       		asr.l	#8,d0
00005E5C 36C0                       		move.w	d0,(a3)+
00005E5E 1419                       		move.b	(a1)+,d2
00005E60 4882                       		ext.w	d2
00005E62 D55B                       		add.w	d2,(a3)+
00005E64 51CB FFE6                  		dbf	d3,loc_4C26
00005E68 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005E6C 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005E72 6000                       		bra.s	loc_4C7E
00005E74                            ; ===========================================================================
00005E74                            
00005E74                            loc_4C4E:
00005E74 0C40 000C                  		cmpi.w	#$C,d0
00005E78 6600                       		bne.s	loc_4C74
00005E7A 5378 F718                  		subq.w	#1,(v_bg3screenposx).w
00005E7E 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005E82 243C 0001 8000             		move.l	#$18000,d2
00005E88 7206                       		moveq	#6,d1
00005E8A                            
00005E8A                            loc_4C64:
00005E8A 2013                       		move.l	(a3),d0
00005E8C 9082                       		sub.l	d2,d0
00005E8E 26C0                       		move.l	d0,(a3)+
00005E90 0482 0000 2000             		subi.l	#$2000,d2
00005E96 51C9 FFF2                  		dbf	d1,loc_4C64
00005E9A                            
00005E9A                            loc_4C74:
00005E9A 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005E9E 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005EA4                            
00005EA4                            loc_4C7E:
00005EA4 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00005EA8 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00005EAC 4440                       		neg.w	d0
00005EAE 4840                       		swap	d0
00005EB0 7600                       		moveq	#0,d3
00005EB2 161A                       		move.b	(a2)+,d3
00005EB4 3438 F70C                  		move.w	(v_bgscreenposy).w,d2
00005EB8 4442                       		neg.w	d2
00005EBA 0242 00FF                  		andi.w	#$FF,d2
00005EBE E54A                       		lsl.w	#2,d2
00005EC0                            
00005EC0                            loc_4C9A:
00005EC0 301B                       		move.w	(a3)+,d0
00005EC2 544B                       		addq.w	#2,a3
00005EC4 7200                       		moveq	#0,d1
00005EC6 121A                       		move.b	(a2)+,d1
00005EC8 5341                       		subq.w	#1,d1
00005ECA                            
00005ECA                            loc_4CA4:
00005ECA 2380 2000                  		move.l	d0,(a1,d2.w)
00005ECE 5842                       		addq.w	#4,d2
00005ED0 0242 03FC                  		andi.w	#$3FC,d2
00005ED4 51C9 FFF4                  		dbf	d1,loc_4CA4
00005ED8 51CB FFE6                  		dbf	d3,loc_4C9A
00005EDC 4E75                       		rts	
00005EDE                            ; End of function SS_BGAnimate
00005EDE                            
00005EDE                            ; ===========================================================================
00005EDE 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005EEA                            		even
00005EEA 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005EF2                            		even
00005EF2 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005F06                            		even
00005F06                            
00005F06                            ; ===========================================================================
00005F06                            
00005F06                            ; ---------------------------------------------------------------------------
00005F06                            ; Continue screen
00005F06                            ; ---------------------------------------------------------------------------
00005F06                            
00005F06                            GM_Continue:
00005F06 6100 C452                  		bsr.w	PaletteFadeOut
00005F0A 46FC 2700                  		disable_ints
00005F0E 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005F12 0200 00BF                  		andi.b	#$BF,d0
00005F16 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005F1C 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005F22 3CBC 8004                  		move.w	#$8004,(a6)	; 8 colour mode
00005F26 3CBC 8700                  		move.w	#$8700,(a6)	; background colour
00005F2A 6100 B2A4                  		bsr.w	ClearScreen
00005F2E 31FC C800 C8FC             		ResetDMAQueue
00005F34 43F8 D000                  		lea	(v_objspace).w,a1
00005F38 7000                       		moveq	#0,d0
00005F3A 323C 07FF                  		move.w	#$7FF,d1
00005F3E                            	Cont_ClrObjRam:
00005F3E 22C0                       		move.l	d0,(a1)+
00005F40 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005F44                            
00005F4E 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005F54 6100 B3F8                  		bsr.w	NemDec
00005F62 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005F68 6100 B3E4                  		bsr.w	NemDec
00005F76 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005F7C 6100 B3D0                  		bsr.w	NemDec
00005F80 720A                       		moveq	#10,d1
00005F82 4EB9 0000 0000             		jsr	(ContScrCounter).l	; run countdown	(start from 10)
00005F88 7012                       		moveq	#palid_Continue,d0
00005F8A 6100 C678                  		bsr.w	PalLoad1	; load continue	screen palette
00005F96 31FC 0293 F614             		move.w	#659,(v_demolength).w ; set time delay to 11 seconds
00005F9C 42B8 F700                  		clr.l	(v_screenposx).w
00005FA0 21FC 0100 0000 F704        		move.l	#$1000000,(v_screenposy).w
00005FA8 11FC 0000 D000             		move.b	#id_ContSonic,(v_player).w ; load Sonic object
00005FAE 11FC 0000 D040             		move.b	#id_ContScrItem,(v_objspace+$40).w ; load continue screen objects
00005FB4 11FC 0000 D080             		move.b	#id_ContScrItem,(v_objspace+$80).w
00005FBA 11FC 0003 D098             		move.b	#3,(v_objspace+$80+obPriority).w
00005FC0 11FC 0004 D09A             		move.b	#4,(v_objspace+$80+obFrame).w
00005FC6 11FC 0000 D0C0             		move.b	#id_ContScrItem,(v_objspace+$C0).w
00005FCC 11FC 0004 D0E4             		move.b	#4,(v_objspace+$C0+obRoutine).w
00005FD2 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005FD8 4EB9 0000 0000             		jsr	(BuildSprites).l
00005FDE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005FE2 0000 0040                  		ori.b	#$40,d0
00005FE6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005FEC 6100 C2C6                  		bsr.w	PaletteFadeIn
00005FF0                            
00005FF0                            ; ---------------------------------------------------------------------------
00005FF0                            ; Continue screen main loop
00005FF0                            ; ---------------------------------------------------------------------------
00005FF0                            
00005FF0                            Cont_MainLoop:
00005FF0 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00005FF6 6100 DCA0                  		bsr.w	WaitForVBla
00005FFA 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00006000 6400                       		bhs.s	loc_4DF2
00006002 46FC 2700                  		disable_ints
00006006 3238 F614                  		move.w	(v_demolength).w,d1
0000600A 82FC 003C                  		divu.w	#$3C,d1
0000600E 0281 0000 000F             		andi.l	#$F,d1
00006014 4EB9 0000 0000             		jsr	(ContScrCounter).l
0000601A 46FC 2300                  		enable_ints
0000601E                            
0000601E                            loc_4DF2:
0000601E 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006024 4EB9 0000 0000             		jsr	(BuildSprites).l
0000602A 0C78 0180 D008             		cmpi.w	#$180,(v_player+obX).w ; has Sonic run off screen?
00006030 6400                       		bhs.s	Cont_GotoLevel	; if yes, branch
00006032 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00006038 64B6                       		bhs.s	Cont_MainLoop
0000603A 4A78 F614                  		tst.w	(v_demolength).w
0000603E 6600 FFB0                  		bne.w	Cont_MainLoop
00006042 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00006048 4E75                       		rts	
0000604A                            ; ===========================================================================
0000604A                            
0000604A                            Cont_GotoLevel:
0000604A 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00006050 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00006056 7000                       		moveq	#0,d0
00006058 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
0000605C 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00006060 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00006064 11C0 FE30                  		move.b	d0,(v_lastlamp).w ; clear lamppost count
00006068 5338 FE18                  		subq.b	#1,(v_continues).w ; subtract 1 from continues
0000606C 4E75                       		rts	
0000606E                            ; ===========================================================================
0000606E                            
0000606E                            		include	"_incObj\80 Continue Screen Elements.asm"
0000606E                            ; ---------------------------------------------------------------------------
0000606E                            ; Object 80 - Continue screen elements
0000606E                            ; ---------------------------------------------------------------------------
0000606E                            
0000606E                            ContScrItem:
0000606E 7000                       		moveq	#0,d0
00006070 1028 0024                  		move.b	$24(a0),d0
00006074 323B 0000                  		move.w	CSI_Index(pc,d0.w),d1
00006078 4EFB 1000                  		jmp	CSI_Index(pc,d1.w)
0000607C                            ; ===========================================================================
0000607C 0000                       CSI_Index:	dc.w CSI_Main-CSI_Index
0000607E 0000                       		dc.w CSI_Display-CSI_Index
00006080 0000                       		dc.w CSI_MakeMiniSonic-CSI_Index
00006082 0000                       		dc.w CSI_ChkDel-CSI_Index
00006084                            ; ===========================================================================
00006084                            
00006084                            CSI_Main:	; Routine 0
00006084 5428 0024                  		addq.b	#2,obRoutine(a0)
00006088 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00006090 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00006096 117C 0000 0001             		move.b	#0,obRender(a0)
0000609C 117C 003C 0014             		move.b	#$3C,obActWid(a0)
000060A2 317C 0120 0008             		move.w	#$120,obX(a0)
000060A8 317C 00C0 000A             		move.w	#$C0,obScreenY(a0)
000060AE 31FC 0000 FE20             		move.w	#0,(v_rings).w	; clear rings
000060B4                            
000060B4                            CSI_Display:	; Routine 2
000060B4 4EF9 0000 0000             		jmp	(DisplaySprite).l
000060BA                            ; ===========================================================================
000060BA                            
000060BA                            	CSI_MiniSonicPos:
000060BA 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000060CC 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000060D8                            
000060D8                            CSI_MakeMiniSonic:
000060D8                            		; Routine 4
000060D8 2248                       		movea.l	a0,a1
000060DA 45F9 0000 60BA             		lea	(CSI_MiniSonicPos).l,a2
000060E0 7200                       		moveq	#0,d1
000060E2 1238 FE18                  		move.b	(v_continues).w,d1
000060E6 5501                       		subq.b	#2,d1
000060E8 6400                       		bcc.s	CSI_MoreThan1
000060EA 4EF9 0000 0000             		jmp	(DeleteObject).l	; cancel if you have 0-1 continues
000060F0                            
000060F0                            	CSI_MoreThan1:
000060F0 7601                       		moveq	#1,d3
000060F2 0C01 000E                  		cmpi.b	#14,d1		; do you have fewer than 16 continues
000060F6 6500                       		bcs.s	CSI_FewerThan16	; if yes, branch
000060F8                            
000060F8 7600                       		moveq	#0,d3
000060FA 720E                       		moveq	#14,d1		; cap at 15 mini-Sonics
000060FC                            
000060FC                            	CSI_FewerThan16:
000060FC 1401                       		move.b	d1,d2
000060FE 0202 0001                  		andi.b	#1,d2
00006102                            
00006102                            CSI_MiniSonicLoop:
00006102 12BC 0000                  		move.b	#id_ContScrItem,0(a1) ; load mini-Sonic object
00006106 335A 0008                  		move.w	(a2)+,obX(a1)	; use above data for x-axis position
0000610A 4A02                       		tst.b	d2		; do you have an even number of continues?
0000610C 6700                       		beq.s	CSI_Even	; if yes, branch
0000610E 0469 000A 0008             		subi.w	#$A,obX(a1)	; shift mini-Sonics slightly to the right
00006114                            
00006114                            	CSI_Even:
00006114 337C 00D0 000A             		move.w	#$D0,obScreenY(a1)
0000611A 137C 0006 001A             		move.b	#6,obFrame(a1)
00006120 137C 0006 0024             		move.b	#6,obRoutine(a1)
00006126 237C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a1)
0000612E 337C 8551 0002             		move.w	#$8551,obGfx(a1)
00006134 137C 0000 0001             		move.b	#0,obRender(a1)
0000613A 43E9 0040                  		lea	$40(a1),a1
0000613E 51C9 FFC2                  		dbf	d1,CSI_MiniSonicLoop ; repeat for number of continues
00006142                            
00006142 43E9 FFC0                  		lea	-$40(a1),a1
00006146 1343 0028                  		move.b	d3,obSubtype(a1)
0000614A                            
0000614A                            CSI_ChkDel:	; Routine 6
0000614A 4A28 0028                  		tst.b	obSubtype(a0)	; do you have 16 or more continues?
0000614E 6700                       		beq.s	CSI_Animate	; if yes, branch
00006150 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic running?
00006156 6500                       		bcs.s	CSI_Animate	; if not, branch
00006158 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000615C 0200 0001                  		andi.b	#1,d0
00006160 6600                       		bne.s	CSI_Animate
00006162 4A78 D010                  		tst.w	(v_player+obVelX).w ; is Sonic running?
00006166 6600                       		bne.s	CSI_Delete	; if yes, goto delete
00006168 4E75                       		rts	
0000616A                            
0000616A                            CSI_Animate:
0000616A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000616E 0200 000F                  		andi.b	#$F,d0
00006172 6600                       		bne.s	CSI_Display2
00006174 0868 0000 001A             		bchg	#0,obFrame(a0)
0000617A                            
0000617A                            	CSI_Display2:
0000617A 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006180                            ; ===========================================================================
00006180                            
00006180                            CSI_Delete:
00006180 4EF9 0000 0000             		jmp	(DeleteObject).l
00006180 4EF9 0000 0000             		jmp	(DeleteObject).l
00006186                            		include	"_incObj\81 Continue Screen Sonic.asm"
00006186                            ; ---------------------------------------------------------------------------
00006186                            ; Object 81 - Sonic on the continue screen
00006186                            ; ---------------------------------------------------------------------------
00006186                            
00006186                            ContSonic:
00006186 7000                       		moveq	#0,d0
00006188 1028 0024                  		move.b	obRoutine(a0),d0
0000618C 323B 0000                  		move.w	CSon_Index(pc,d0.w),d1
00006190 4EBB 1000                  		jsr	CSon_Index(pc,d1.w)
00006194 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000619A                            ; ===========================================================================
0000619A 0000                       CSon_Index:	dc.w CSon_Main-CSon_Index
0000619C 0000                       		dc.w CSon_ChkLand-CSon_Index
0000619E 0000                       		dc.w CSon_Animate-CSon_Index
000061A0 0000                       		dc.w CSon_Run-CSon_Index
000061A2                            ; ===========================================================================
000061A2                            
000061A2                            CSon_Main:	; Routine 0
000061A2 5428 0024                  		addq.b	#2,obRoutine(a0)
000061A6 317C 00A0 0008             		move.w	#$A0,obX(a0)
000061AC 317C 00C0 000C             		move.w	#$C0,obY(a0)
000061B2 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
000061BA 317C 0780 0002             		move.w	#$780,obGfx(a0)
000061C0 117C 0004 0001             		move.b	#4,obRender(a0)
000061C6 317C 0100 0018             		move.w	#$100,obPriority(a0)
000061CC 117C 0000 001C             		move.b	#id_Float3,obAnim(a0) ; use "floating" animation
000061D2 317C 0400 0012             		move.w	#$400,obVelY(a0) ; make Sonic fall from above
000061D8                            
000061D8                            CSon_ChkLand:	; Routine 2
000061D8 0C68 01A0 000C             		cmpi.w	#$1A0,obY(a0)	; has Sonic landed yet?
000061DE 6600                       		bne.s	CSon_ShowFall	; if not, branch
000061E0                            
000061E0 5428 0024                  		addq.b	#2,obRoutine(a0)
000061E4 4268 0012                  		clr.w	obVelY(a0)	; stop Sonic falling
000061E8 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
000061F0 317C 8500 0002             		move.w	#$8500,obGfx(a0)
000061F6 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000061FC 6000                       		bra.s	CSon_Animate
000061FE                            
000061FE                            CSon_ShowFall:
000061FE 4EB9 0000 0000             		jsr	(SpeedToPos).l
00006204 4EB9 0000 0000             		jsr	(Sonic_Animate).l
0000620A 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00006210                            ; ===========================================================================
00006210                            
00006210                            CSon_Animate:	; Routine 4
00006210 4A38 F605                  		tst.b	(v_jpadpress1).w ; is Start button pressed?
00006214 6B00                       		bmi.s	CSon_GetUp	; if yes, branch
00006216 43F9 0000 0000             		lea	(AniScript_CSon).l,a1
0000621C 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006222                            
00006222                            CSon_GetUp:
00006222 5428 0024                  		addq.b	#2,obRoutine(a0)
00006226 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0000622E 317C 0780 0002             		move.w	#$780,obGfx(a0)
00006234 117C 0000 001C             		move.b	#id_Float4,obAnim(a0) ; use "getting up" animation
0000623A 4268 0020                  		clr.w	obInertia(a0)
0000623E 5168 000C                  		subq.w	#8,obY(a0)
0000624A                            
0000624A                            CSon_Run:	; Routine 6
0000624A 0C68 0800 0020             		cmpi.w	#$800,obInertia(a0) ; check Sonic's inertia
00006250 6600                       		bne.s	CSon_AddInertia	; if too low, branch
00006252 317C 1000 0010             		move.w	#$1000,obVelX(a0) ; move Sonic to the right
00006258 6000                       		bra.s	CSon_ShowRun
0000625A                            
0000625A                            CSon_AddInertia:
0000625A 0668 0020 0020             		addi.w	#$20,obInertia(a0) ; increase inertia
00006260                            
00006260                            CSon_ShowRun:
00006260 4EB9 0000 0000             		jsr	(SpeedToPos).l
00006266 4EB9 0000 0000             		jsr	(Sonic_Animate).l
0000626C 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
0000626C 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00006272                            		include	"_anim\Continue Screen Sonic.asm"
00006272                            ; ---------------------------------------------------------------------------
00006272                            ; Animation script - Sonic on the continue screen
00006272                            ; ---------------------------------------------------------------------------
00006272 0000                       AniScript_CSon:	dc.w A_CSon_1-AniScript_CSon
00006274 0401 0101 0302 0203 03FF   A_CSon_1:	dc.b 4,	1, 1, 1, 3, 2, 2, 3, 3, afEnd
0000627E                            		even
0000627E                            		even
0000627E                            Map_ContScr:	include	"_maps\Continue Screen.asm"
0000627E                            ; --------------------------------------------------------------------------------
0000627E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000627E                            ; --------------------------------------------------------------------------------
0000627E                            
0000627E                            SME_phED7:	
0000627E 0000 0000                  		dc.w SME_phED7_10-SME_phED7, SME_phED7_48-SME_phED7	
00006282 0000 0000                  		dc.w SME_phED7_58-SME_phED7, SME_phED7_68-SME_phED7	
00006286 0000 0000                  		dc.w SME_phED7_78-SME_phED7, SME_phED7_83-SME_phED7	
0000628A 0000 0000                  		dc.w SME_phED7_89-SME_phED7, SME_phED7_8F-SME_phED7	
0000628E 0B                         SME_phED7_10:	dc.b $B	
0000628F F805 0088 C4               		dc.b $F8, 5, 0, $88, $C4	
00006294 F805 00B2 D4               		dc.b $F8, 5, 0, $B2, $D4	
00006299 F805 00AE E4               		dc.b $F8, 5, 0, $AE, $E4	
0000629E F805 00C2 F4               		dc.b $F8, 5, 0, $C2, $F4	
000062A3 F801 00A0 04               		dc.b $F8, 1, 0, $A0, 4	
000062A8 F805 00AE 0C               		dc.b $F8, 5, 0, $AE, $C	
000062AD F805 00C6 1C               		dc.b $F8, 5, 0, $C6, $1C	
000062B2 F805 0090 2C               		dc.b $F8, 5, 0, $90, $2C	
000062B7 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8	
000062BC 3805 2021 08               		dc.b $38, 5, $20, $21, 8	
000062C1 3605 01FC F8               		dc.b $36, 5, 1, $FC, $F8	
000062C6 03                         SME_phED7_48:	dc.b 3	
000062C7 0405 0015 FB               		dc.b 4, 5, 0, $15, $FB	
000062CC F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
000062D1 F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
000062D6 03                         SME_phED7_58:	dc.b 3	
000062D7 0405 0019 FB               		dc.b 4, 5, 0, $19, $FB	
000062DC F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
000062E1 F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
000062E6 03                         SME_phED7_68:	dc.b 3	
000062E7 0405 001D FB               		dc.b 4, 5, 0, $1D, $FB	
000062EC F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
000062F1 F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
000062F6 02                         SME_phED7_78:	dc.b 2	
000062F7 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8	
000062FC 6009 2800 00               		dc.b $60, 9, $28, 0, 0	
00006301 01                         SME_phED7_83:	dc.b 1	
00006302 0006 0012 00               		dc.b 0, 6, 0, $12, 0	
00006307 01                         SME_phED7_89:	dc.b 1	
00006308 0006 0012 00               		dc.b 0, 6, 0, $12, 0	
0000630D 01                         SME_phED7_8F:	dc.b 1	
0000630E 0006 0018 00               		dc.b 0, 6, 0, $18, 0	
00006314 00                         		even
00006314 00                         		even
00006314                            
00006314                            ; ===========================================================================
00006314                            ; ---------------------------------------------------------------------------
00006314                            ; Ending sequence in Green Hill	Zone
00006314                            ; ---------------------------------------------------------------------------
00006314                            
00006314                            GM_Ending:
0000631C 6100 C03C                  		bsr.w	PaletteFadeOut
00006320                            
00006320 43F8 D000                  		lea	(v_objspace).w,a1
00006324 7000                       		moveq	#0,d0
00006326 323C 07FF                  		move.w	#$7FF,d1
0000632A                            	End_ClrObjRam:
0000632A 22C0                       		move.l	d0,(a1)+
0000632C 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00006330                            
00006330 43F8 F628                  		lea	($FFFFF628).w,a1
00006334 7000                       		moveq	#0,d0
00006336 323C 0015                  		move.w	#$15,d1
0000633A                            	End_ClrRam1:
0000633A 22C0                       		move.l	d0,(a1)+
0000633C 51C9 FFFC                  		dbf	d1,End_ClrRam1	; clear	variables
00006340                            
00006340 43F8 F700                  		lea	(v_screenposx).w,a1
00006344 7000                       		moveq	#0,d0
00006346 323C 003F                  		move.w	#$3F,d1
0000634A                            	End_ClrRam2:
0000634A 22C0                       		move.l	d0,(a1)+
0000634C 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00006350                            
00006350 43F8 FE60                  		lea	(v_oscillate+2).w,a1
00006354 7000                       		moveq	#0,d0
00006356 323C 0047                  		move.w	#$47,d1
0000635A                            	End_ClrRam3:
0000635A 22C0                       		move.l	d0,(a1)+
0000635C 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00006360                            
00006360 46FC 2700                  		disable_ints
00006364 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00006368 0200 00BF                  		andi.b	#$BF,d0
0000636C 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00006372 6100 AE5C                  		bsr.w	ClearScreen
00006376 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
0000637C 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00006380 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00006384 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00006388 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
0000638C 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00006390 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
00006394 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00006398 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
0000639E 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
000063A2 31FC 001E FE14             		move.w	#30,(v_air).w
000063A8 31FC 0600 FE10             		move.w	#id_EndZ<<8,(v_zone).w ; set level number to 0600 (extra flowers)
000063AE 0C38 0000 FE57             		cmpi.b	#0,(v_emeralds).w ; do you have all 6 emeralds?
000063B4 6700                       		beq.s	End_LoadData	; if yes, branch
000063B6 31FC 0601 FE10             		move.w	#(id_EndZ<<8)+1,(v_zone).w ; set level number to 0601 (no flowers)
000063BC                            
000063BC                            End_LoadData:
000063BC 7000                       		moveq	#plcid_Ending,d0
000063BE 6100 B4E6                  		bsr.w	QuickPLC	; load ending sequence patterns
000063C2 4EB9 0000 0000             		jsr	(Hud_Base).l
000063C8 6100 0000                  		bsr.w	LevelSizeLoad
000063CC 6100 0000                  		bsr.w	DeformLayers
000063D0 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
000063D6 6100 0000                  		bsr.w	LevelDataLoad
000063DA 6100 0000                  		bsr.w	LoadTilesFromStart
000063DE 21FC 0000 0000 F796        		move.l	#Col_GHZ,(v_collindex).w ; load collision index
000063E6 46FC 2300                  		enable_ints
000063EA 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000063F0 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000063F4 6100 B660                  		bsr.w	KosDec
000063F8 4EB9 0000 0000             		jsr		LoadPlayerPal
000063FE 6100 C204                  		bsr.w	PalLoad1	; load Sonic's palette
0000640A 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
00006410 6700                       		beq.s	End_LoadSonic	; if not, branch
00006412 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00006418                            
00006418                            End_LoadSonic:
00006418 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
0000641E 08F8 0000 D022             		bset	#0,(v_player+obStatus).w ; make Sonic face left
00006424 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0000642A 31FC 0400 F602             		move.w	#(btnL<<8),(v_jpadhold2).w ; move Sonic to the left
00006430 31FC F600 D020             		move.w	#$F600,(v_player+obInertia).w ; set Sonic's speed
00006436 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
0000643C 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006442 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006448 4EB9 0000 0000             		jsr	(BuildSprites).l
0000644E 7000                       		moveq	#0,d0
00006450 31C0 FE20                  		move.w	d0,(v_rings).w
00006454 21C0 FE22                  		move.l	d0,(v_time).w
00006458 11C0 FE1B                  		move.b	d0,(v_lifecount).w
0000645C 11C0 FE2C                  		move.b	d0,(v_shield).w
00006460 11C0 FE2D                  		move.b	d0,(v_invinc).w
00006464 11C0 FE2E                  		move.b	d0,(v_shoes).w
00006468 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000646C 31C0 FE08                  		move.w	d0,(v_debuguse).w
00006470 31C0 FE02                  		move.w	d0,(f_restart).w
00006474 31C0 FE04                  		move.w	d0,(v_framecount).w
00006478 6100 EEBC                  		bsr.w	OscillateNumInit
0000647C 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w
00006482 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w
00006488 11FC 0000 FE1E             		move.b	#0,(f_timecount).w
0000648E 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00006494 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
0000649A 6100 D7FC                  		bsr.w	WaitForVBla
0000649E 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000064A2 0000 0040                  		ori.b	#$40,d0
000064A6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000064AC 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
000064B2 6100 BE00                  		bsr.w	PaletteFadeIn
000064B6                            
000064B6                            ; ---------------------------------------------------------------------------
000064B6                            ; Main ending sequence loop
000064B6                            ; ---------------------------------------------------------------------------
000064B6                            
000064B6                            End_MainLoop:
000064B6 6100 ADF4                  		bsr.w	PauseGame
000064BA 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
000064C0 6100 D7D6                  		bsr.w	WaitForVBla
000064C4 5278 FE04                  		addq.w	#1,(v_framecount).w
000064C8 6100 0000                  		bsr.w	End_MoveSonic
000064CC 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000064D2 6100 0000                  		bsr.w	DeformLayers
000064D6 4EB9 0000 0000             		jsr	(BuildSprites).l
000064DC 4EB9 0000 0000             		jsr	(ObjPosLoad).l
000064E2 6100 B83A                  		bsr.w	PaletteCycle
000064E6 6100 EEA4                  		bsr.w	OscillateNumDo
000064EA 6100 EF30                  		bsr.w	SynchroAnimate
000064EE 0C38 0000 F600             		cmpi.b	#id_Ending,(v_gamemode).w ; is game mode $18 (ending)?
000064F4 6700                       		beq.s	End_ChkEmerald	; if yes, branch
000064F6                            
000064F6 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; goto credits
000064FC 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w ; set credits index number to 0
00006502 4E75                       		rts	
00006504                            ; ===========================================================================
00006504                            
00006504                            End_ChkEmerald:
00006504 4A78 FE02                  		tst.w	(f_restart).w	; has Sonic released the emeralds?
00006508 6700 FFAC                  		beq.w	End_MainLoop	; if not, branch
0000650C                            
0000650C 4278 FE02                  		clr.w	(f_restart).w
00006510 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00006516 4278 F794                  		clr.w	(v_palchgspeed).w
0000651A                            
0000651A                            	End_AllEmlds:
0000651A 6100 AD90                  		bsr.w	PauseGame
0000651E 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006524 6100 D772                  		bsr.w	WaitForVBla
00006528 5278 FE04                  		addq.w	#1,(v_framecount).w
0000652C 6100 0000                  		bsr.w	End_MoveSonic
00006530 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006536 6100 0000                  		bsr.w	DeformLayers
0000653A 4EB9 0000 0000             		jsr	(BuildSprites).l
00006540 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006546 6100 EE44                  		bsr.w	OscillateNumDo
0000654A 6100 EED0                  		bsr.w	SynchroAnimate
0000654E 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00006552 6A00                       		bpl.s	End_SlowFade
00006554 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
0000655A 6100 BF48                  		bsr.w	WhiteOut_ToWhite
0000655E                            
0000655E                            	End_SlowFade:
0000655E 4A78 FE02                  		tst.w	(f_restart).w
00006562 6700 FFB6                  		beq.w	End_AllEmlds
00006566 4278 FE02                  		clr.w	(f_restart).w
0000656A 31FC 2829 A480             		move.w	#$2829,(v_lvllayout+$80).w ; modify level layout
00006570 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00006576 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000657C 47F8 F700                  		lea	(v_screenposx).w,a3
00006580 49F8 A400                  		lea	(v_lvllayout).w,a4
00006584 343C 4000                  		move.w	#$4000,d2
00006588 6100 0000                  		bsr.w	DrawChunks
0000658C 7015                       		moveq	#palid_Ending,d0
0000658E 6100 C074                  		bsr.w	PalLoad1	; load ending palette
00006592 6100 BE44                  		bsr.w	PaletteWhiteIn
00006596 6000 FF1E                  		bra.w	End_MainLoop
0000659A                            
0000659A                            ; ---------------------------------------------------------------------------
0000659A                            ; Subroutine controlling Sonic on the ending sequence
0000659A                            ; ---------------------------------------------------------------------------
0000659A                            
0000659A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000659A                            
0000659A                            
0000659A                            End_MoveSonic:
0000659A 1038 F7D7                  		move.b	(v_sonicend).w,d0
0000659E 6600                       		bne.s	End_MoveSon2
000065A0 0C78 0090 D008             		cmpi.w	#$90,(v_player+obX).w ; has Sonic passed $90 on x-axis?
000065A6 6400                       		bhs.s	End_MoveSonExit	; if not, branch
000065A8                            
000065A8 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000065AC 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock player's controls
000065B2 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; move Sonic to the right
000065B8 4E75                       		rts	
000065BA                            ; ===========================================================================
000065BA                            
000065BA                            End_MoveSon2:
000065BA 5500                       		subq.b	#2,d0
000065BC 6600                       		bne.s	End_MoveSon3
000065BE 0C78 00A0 D008             		cmpi.w	#$A0,(v_player+obX).w ; has Sonic passed $A0 on x-axis?
000065C4 6500                       		blo.s	End_MoveSonExit	; if not, branch
000065C6                            
000065C6 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000065CA 7000                       		moveq	#0,d0
000065CC 11C0 F7CC                  		move.b	d0,(f_lockctrl).w
000065D0 31C0 F602                  		move.w	d0,(v_jpadhold2).w ; stop Sonic moving
000065D4 31C0 D020                  		move.w	d0,(v_player+obInertia).w
000065D8 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls & position
000065DE 11FC 0003 D01A             		move.b	#3,(v_player+obFrame).w
000065E4 31FC 0000 D01C             		move.w	#(id_Wait<<8)+id_Wait,(v_player+obAnim).w ; use "standing" animation
000065EA 11FC 0003 D01E             		move.b	#3,(v_player+obTimeFrame).w
000065F0 4E75                       		rts	
000065F2                            ; ===========================================================================
000065F2                            
000065F2                            End_MoveSon3:
000065F2 5500                       		subq.b	#2,d0
000065F4 6600                       		bne.s	End_MoveSonExit
000065F6 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000065FA 31FC 00A0 D008             		move.w	#$A0,(v_player+obX).w
00006600 11FC 0000 D000             		move.b	#id_EndSonic,(v_player).w ; load Sonic ending sequence object
00006606 4278 D024                  		clr.w	(v_player+obRoutine).w
0000660A                            
0000660A                            End_MoveSonExit:
0000660A 4E75                       		rts	
0000660C                            ; End of function End_MoveSonic
0000660C                            
0000660C                            ; ===========================================================================
0000660C                            
0000660C                            		include	"_incObj\87 Ending Sequence Sonic.asm"
0000660C                            ; ---------------------------------------------------------------------------
0000660C                            ; Object 87 - Sonic on ending sequence
0000660C                            ; ---------------------------------------------------------------------------
0000660C                            
0000660C                            EndSonic:
0000660C 7000                       		moveq	#0,d0
0000660E 1028 0025                  		move.b	ob2ndRout(a0),d0
00006612 323B 0000                  		move.w	ESon_Index(pc,d0.w),d1
00006616 4EBB 1000                  		jsr	ESon_Index(pc,d1.w)
0000661A 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006620                            ; ===========================================================================
00006620 0000 0000                  ESon_Index:	dc.w ESon_Main-ESon_Index, ESon_MakeEmeralds-ESon_Index
00006624 0000 0000                  		dc.w Obj87_Animate-ESon_Index,	Obj87_LookUp-ESon_Index
00006628 0000 0000                  		dc.w Obj87_ClrObjRam-ESon_Index, Obj87_Animate-ESon_Index
0000662C 0000 0000                  		dc.w Obj87_MakeLogo-ESon_Index, Obj87_Animate-ESon_Index
00006630 0000 0000                  		dc.w Obj87_Leap-ESon_Index, Obj87_Animate-ESon_Index
00006634                            
00006634 =00000030                  eson_time:	equ $30	; time to wait between events
00006634                            ; ===========================================================================
00006634                            
00006634                            ESon_Main:	; Routine 0
00006634 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
0000663A 6700                       		beq.s	ESon_Main2	; if yes, branch
0000663C 0628 0010 0025             		addi.b	#$10,ob2ndRout(a0) ; else, skip emerald sequence
00006642 317C 00D8 0030             		move.w	#216,eson_time(a0)
00006648 4E75                       		rts	
0000664A                            ; ===========================================================================
0000664A                            
0000664A                            ESon_Main2:
0000664A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000664E 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
00006656 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
0000665C 117C 0004 0001             		move.b	#4,obRender(a0)
00006662 4228 0022                  		clr.b	obStatus(a0)
00006666 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000666C 117C 0000 001A             		move.b	#0,obFrame(a0)
00006672 317C 0050 0030             		move.w	#80,eson_time(a0) ; set duration for Sonic to pause
00006678                            
00006678                            ESon_MakeEmeralds:
00006678                            		; Routine 2
00006678 5368 0030                  		subq.w	#1,eson_time(a0) ; subtract 1 from duration
0000667C 6600                       		bne.s	ESon_Wait
0000667E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006682 317C 0001 001C             		move.w	#1,obAnim(a0)
00006688 11FC 0000 D400             		move.b	#id_EndChaos,(v_objspace+$400).w ; load chaos emeralds objects
0000668E                            
0000668E                            	ESon_Wait:
0000668E 4E75                       		rts	
00006690                            ; ===========================================================================
00006690                            
00006690                            Obj87_LookUp:	; Routine 6
00006690 0C79 2000 00FF D43C        		cmpi.w	#$2000,((v_objspace&$FFFFFF)+$400+$3C).l
00006698 6600                       		bne.s	locret_5480
0000669A 31FC 0001 FE02             		move.w	#1,(f_restart).w ; set level to	restart	(causes	flash)
000066A0 317C 005A 0030             		move.w	#90,eson_time(a0)
000066A6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000066AA                            
000066AA                            locret_5480:
000066AA 4E75                       		rts	
000066AC                            ; ===========================================================================
000066AC                            
000066AC                            Obj87_ClrObjRam:
000066AC                            		; Routine 8
000066AC 5368 0030                  		subq.w	#1,eson_time(a0)
000066B0 6600                       		bne.s	ESon_Wait2
000066B2 43F8 D400                  		lea	(v_objspace+$400).w,a1
000066B6 323C 00FF                  		move.w	#$FF,d1
000066BA                            
000066BA                            Obj87_ClrLoop:
000066BA 4299                       		clr.l	(a1)+
000066BC 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000066C0 31FC 0001 FE02             		move.w	#1,(f_restart).w
000066C6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000066CA 117C 0001 001C             		move.b	#1,obAnim(a0)
000066D0 317C 003C 0030             		move.w	#60,eson_time(a0)
000066D6                            
000066D6                            ESon_Wait2:
000066D6 4E75                       		rts	
000066D8                            ; ===========================================================================
000066D8                            
000066D8                            Obj87_MakeLogo:	; Routine $C
000066D8 5368 0030                  		subq.w	#1,eson_time(a0)
000066DC 6600                       		bne.s	ESon_Wait3
000066DE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000066E2 317C 00B4 0030             		move.w	#180,eson_time(a0)
000066E8 117C 0002 001C             		move.b	#2,obAnim(a0)
000066EE 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
000066F4                            
000066F4                            ESon_Wait3:
000066F4 4E75                       		rts	
000066F6                            ; ===========================================================================
000066F6                            
000066F6                            Obj87_Animate:	; Rountine 4, $A, $E, $12
000066F6 43F9 0000 0000             		lea	(AniScript_ESon).l,a1
000066FC 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006702                            ; ===========================================================================
00006702                            
00006702                            Obj87_Leap:	; Routine $10
00006702 5368 0030                  		subq.w	#1,eson_time(a0)
00006706 6600                       		bne.s	ESon_Wait4
00006708 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000670C 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
00006714 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
0000671A 117C 0004 0001             		move.b	#4,obRender(a0)
00006720 4228 0022                  		clr.b	obStatus(a0)
00006724 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000672A 117C 0005 001A             		move.b	#5,obFrame(a0)
00006730 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "leaping"	animation
00006736 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
0000673C 60B8                       		bra.s	Obj87_Animate
0000673E                            ; ===========================================================================
0000673E                            
0000673E                            ESon_Wait4:
0000673E 4E75                       		rts	
0000673E 4E75                       		rts	
00006740                            		include "_anim\Ending Sequence Sonic.asm"
00006740                            ; ---------------------------------------------------------------------------
00006740                            ; Animation script - Sonic on the ending sequence
00006740                            ; ---------------------------------------------------------------------------
00006740 0000                       AniScript_ESon:	dc.w byte_551C-AniScript_ESon
00006742 0000                       		dc.w byte_552A-AniScript_ESon
00006744 0000                       		dc.w byte_5534-AniScript_ESon
00006746 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00006754 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
0000675E 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00006766                            		even
00006766                            		even
00006766                            		include	"_incObj\88 Ending Sequence Emeralds.asm"
00006766                            ; ---------------------------------------------------------------------------
00006766                            ; Object 88 - chaos emeralds on	the ending sequence
00006766                            ; ---------------------------------------------------------------------------
00006766                            
00006766                            EndChaos:
00006766 7000                       		moveq	#0,d0
00006768 1028 0024                  		move.b	obRoutine(a0),d0
0000676C 323B 0000                  		move.w	ECha_Index(pc,d0.w),d1
00006770 4EBB 1000                  		jsr	ECha_Index(pc,d1.w)
00006774 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000677A                            ; ===========================================================================
0000677A 0000                       ECha_Index:	dc.w ECha_Main-ECha_Index
0000677C 0000                       		dc.w ECha_Move-ECha_Index
0000677E                            
0000677E =00000038                  echa_origX:	equ $38	; x-axis centre of emerald circle (2 bytes)
0000677E =0000003A                  echa_origY:	equ $3A	; y-axis centre of emerald circle (2 bytes)
0000677E =0000003C                  echa_radius:	equ $3C	; radius (2 bytes)
0000677E =0000003E                  echa_angle:	equ $3E	; angle for rotation (2 bytes)
0000677E                            ; ===========================================================================
0000677E                            
0000677E                            ECha_Main:	; Routine 0
0000677E 0C38 0002 D01A             		cmpi.b	#2,(v_player+obFrame).w
00006784 6700                       		beq.s	ECha_CreateEms
00006786 588F                       		addq.l	#4,sp
00006788 4E75                       		rts	
0000678A                            ; ===========================================================================
0000678A                            
0000678A                            ECha_CreateEms:
0000678A 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0) ; match X position with Sonic
00006790 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0) ; match Y position with Sonic
00006796 2248                       		movea.l	a0,a1
00006798 7600                       		moveq	#0,d3
0000679A 7401                       		moveq	#1,d2
0000679C 7205                       		moveq	#5,d1
0000679E                            
0000679E                            	ECha_LoadLoop:
0000679E 12BC 0000                  		move.b	#id_EndChaos,(a1) ; load chaos emerald object
000067A2 5429 0024                  		addq.b	#2,obRoutine(a1)
000067A6 237C 0000 0000 0004        		move.l	#Map_ECha,obMap(a1)
000067AE 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
000067B4 137C 0004 0001             		move.b	#4,obRender(a1)
000067BA 337C 0080 0018             		move.w	#$80,obPriority(a1)
000067C0 3368 0008 0038             		move.w	obX(a0),echa_origX(a1)
000067C6 3368 000C 003A             		move.w	obY(a0),echa_origY(a1)
000067CC 1342 001C                  		move.b	d2,obAnim(a1)
000067D0 1342 001A                  		move.b	d2,obFrame(a1)
000067D4 5202                       		addq.b	#1,d2
000067D6 1343 0026                  		move.b	d3,obAngle(a1)
000067DA 0603 002A                  		addi.b	#$100/6,d3	; angle between each emerald
000067DE 43E9 0040                  		lea	$40(a1),a1
000067E2 51C9 FFBA                  		dbf	d1,ECha_LoadLoop ; repeat 5 more times
000067E6                            
000067E6                            ECha_Move:	; Routine 2
000067E6 3028 003E                  		move.w	echa_angle(a0),d0
000067EA D168 0026                  		add.w	d0,obAngle(a0)
000067EE 1028 0026                  		move.b	obAngle(a0),d0
000067F2 4EB9 0000 3CCA             		jsr	(CalcSine).l
000067F8 7800                       		moveq	#0,d4
000067FA 1828 003C                  		move.b	echa_radius(a0),d4
000067FE C3C4                       		muls.w	d4,d1
00006800 E081                       		asr.l	#8,d1
00006802 C1C4                       		muls.w	d4,d0
00006804 E080                       		asr.l	#8,d0
00006806 D268 0038                  		add.w	echa_origX(a0),d1
0000680A D068 003A                  		add.w	echa_origY(a0),d0
0000680E 3141 0008                  		move.w	d1,obX(a0)
00006812 3140 000C                  		move.w	d0,obY(a0)
00006816                            
00006816                            	ECha_Expand:
00006816 0C68 2000 003C             		cmpi.w	#$2000,echa_radius(a0)
0000681C 6700                       		beq.s	ECha_Rotate
0000681E 0668 0020 003C             		addi.w	#$20,echa_radius(a0) ; expand circle of emeralds
00006824                            
00006824                            	ECha_Rotate:
00006824 0C68 2000 003E             		cmpi.w	#$2000,echa_angle(a0)
0000682A 6700                       		beq.s	ECha_Rise
0000682C 0668 0020 003E             		addi.w	#$20,echa_angle(a0) ; move emeralds around the centre
00006832                            
00006832                            	ECha_Rise:
00006832 0C68 0140 003A             		cmpi.w	#$140,echa_origY(a0)
00006838 6700                       		beq.s	ECha_End
0000683A 5368 003A                  		subq.w	#1,echa_origY(a0) ; make circle rise
0000683E                            
0000683E                            ECha_End:
0000683E 4E75                       		rts	
0000683E 4E75                       		rts	
00006840                            		include	"_incObj\89 Ending Sequence STH.asm"
00006840                            ; ---------------------------------------------------------------------------
00006840                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00006840                            ; ---------------------------------------------------------------------------
00006840                            
00006840                            EndSTH:
00006840 7000                       		moveq	#0,d0
00006842 1028 0024                  		move.b	$24(a0),d0
00006846 323B 0000                  		move.w	ESth_Index(pc,d0.w),d1
0000684A 4EBB 1000                  		jsr	ESth_Index(pc,d1.w)
0000684E 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006854                            ; ===========================================================================
00006854 0000                       ESth_Index:	dc.w ESth_Main-ESth_Index
00006856 0000                       		dc.w ESth_Move-ESth_Index
00006858 0000                       		dc.w ESth_GotoCredits-ESth_Index
0000685A                            
0000685A =00000030                  esth_time:	equ $30		; time until exit
0000685A                            ; ===========================================================================
0000685A                            
0000685A                            ESth_Main:	; Routine 0
0000685A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000685E 317C FFE0 0008             		move.w	#-$20,obX(a0)	; object starts	outside	the level boundary
00006864 317C 00D8 000A             		move.w	#$D8,obScreenY(a0)
0000686A 217C 0000 0000 0004        		move.l	#Map_ESTH,obMap(a0)
00006872 317C 05C5 0002             		move.w	#$5C5,obGfx(a0)
00006878 117C 0000 0001             		move.b	#0,obRender(a0)
0000687E 317C 0000 0018             		move.w	#0,obPriority(a0)
00006884                            
00006884                            ESth_Move:	; Routine 2
00006884 0C68 00C0 0008             		cmpi.w	#$C0,obX(a0)	; has object reached $C0?
0000688A 6700                       		beq.s	ESth_Delay	; if yes, branch
0000688C 0668 0010 0008             		addi.w	#$10,obX(a0)	; move object to the right
00006892 4E75                       		rts
00006894                            
00006894                            ESth_Delay:
00006894 5428 0024                  		addq.b	#2,obRoutine(a0)
00006898 317C 012C 0030             		move.w	#300,esth_time(a0) ; set duration for delay (5 seconds)
0000689E                            
0000689E                            ESth_GotoCredits:
0000689E                            		; Routine 4
0000689E 5368 0030                  		subq.w	#1,esth_time(a0) ; subtract 1 from duration
000068A2 6A00                       		bpl.s	ESth_Wait
000068A4 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; exit to credits
000068AA                            
000068AA                            	ESth_Wait:
000068AA 4E75                       		rts
000068AC                            Map_ESon:	include	"_maps\Ending Sequence Sonic.asm"
000068AC                            ; --------------------------------------------------------------------------------
000068AC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000068AC                            ; --------------------------------------------------------------------------------
000068AC                            
000068AC                            SME_6jV7R:	
000068AC 0000 0000                  		dc.w SME_6jV7R_10-SME_6jV7R, SME_6jV7R_1B-SME_6jV7R	
000068B0 0000 0000                  		dc.w SME_6jV7R_2B-SME_6jV7R, SME_6jV7R_36-SME_6jV7R	
000068B4 0000 0000                  		dc.w SME_6jV7R_4B-SME_6jV7R, SME_6jV7R_60-SME_6jV7R	
000068B8 0000 0000                  		dc.w SME_6jV7R_70-SME_6jV7R, SME_6jV7R_94-SME_6jV7R	
000068BC 02                         SME_6jV7R_10:	dc.b 2	
000068BD EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	
000068C2 0C0C 000C F0               		dc.b $C, $C, 0, $C, $F0	
000068C7 03                         SME_6jV7R_1B:	dc.b 3	
000068C8 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0	
000068CD EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	
000068D2 0C0C 000C F0               		dc.b $C, $C, 0, $C, $F0	
000068D7 02                         SME_6jV7R_2B:	dc.b 2	
000068D8 EC09 0018 F8               		dc.b $EC, 9, 0, $18, $F8	
000068DD FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0	
000068E2 04                         SME_6jV7R_36:	dc.b 4	
000068E3 F40B 002A F8               		dc.b $F4, $B, 0, $2A, $F8	
000068E8 EC08 0036 F8               		dc.b $EC, 8, 0, $36, $F8	
000068ED E404 0039 00               		dc.b $E4, 4, 0, $39, 0	
000068F2 EC02 003B 10               		dc.b $EC, 2, 0, $3B, $10	
000068F7 04                         SME_6jV7R_4B:	dc.b 4	
000068F8 F40B 002A F8               		dc.b $F4, $B, 0, $2A, $F8	
000068FD EC08 0036 F8               		dc.b $EC, 8, 0, $36, $F8	
00006902 E404 0039 00               		dc.b $E4, 4, 0, $39, 0	
00006907 EC02 003B 10               		dc.b $EC, 2, 0, $3B, $10	
0000690C 03                         SME_6jV7R_60:	dc.b 3	
0000690D EC06 004C F0               		dc.b $EC, 6, 0, $4C, $F0	
00006912 EC06 084C 00               		dc.b $EC, 6, 8, $4C, 0	
00006917 040D 0052 F0               		dc.b 4, $D, 0, $52, $F0	
0000691C 07                         SME_6jV7R_70:	dc.b 7	
0000691D B20C 005A F8               		dc.b $B2, $C, 0, $5A, $F8	
00006922 BA0F 005E F0               		dc.b $BA, $F, 0, $5E, $F0	
00006927 BA05 006E 10               		dc.b $BA, 5, 0, $6E, $10	
0000692C CA02 0072 10               		dc.b $CA, 2, 0, $72, $10	
00006931 DA0C 0075 F0               		dc.b $DA, $C, 0, $75, $F0	
00006936 E208 0079 F8               		dc.b $E2, 8, 0, $79, $F8	
0000693B EA05 007C F8               		dc.b $EA, 5, 0, $7C, $F8	
00006940 18                         SME_6jV7R_94:	dc.b $18	
00006941 800F 0080 F8               		dc.b $80, $F, 0, $80, $F8	
00006946 900B 0090 E0               		dc.b $90, $B, 0, $90, $E0	
0000694B 900B 009C 18               		dc.b $90, $B, 0, $9C, $18	
00006950 980B 00A8 30               		dc.b $98, $B, 0, $A8, $30	
00006955 A00F 00B4 58               		dc.b $A0, $F, 0, $B4, $58	
0000695A 8800 00C4 F0               		dc.b $88, 0, 0, $C4, $F0	
0000695F 8005 00C5 18               		dc.b $80, 5, 0, $C5, $18	
00006964 A00F 00C9 F8               		dc.b $A0, $F, 0, $C9, $F8	
00006969 B00B 00D9 E0               		dc.b $B0, $B, 0, $D9, $E0	
0000696E B80F 00E5 38               		dc.b $B8, $F, 0, $E5, $38	
00006973 A805 00F5 48               		dc.b $A8, 5, 0, $F5, $48	
00006978 C002 00F9 58               		dc.b $C0, 2, 0, $F9, $58	
0000697D C00F 00FC F8               		dc.b $C0, $F, 0, $FC, $F8	
00006982 B80F 010C 18               		dc.b $B8, $F, 1, $C, $18	
00006987 B008 011C 18               		dc.b $B0, 8, 1, $1C, $18	
0000698C D80D 011F 30               		dc.b $D8, $D, 1, $1F, $30	
00006991 D808 0127 18               		dc.b $D8, 8, 1, $27, $18	
00006996 D80F 012A D8               		dc.b $D8, $F, 1, $2A, $D8	
0000699B E00D 013A F8               		dc.b $E0, $D, 1, $3A, $F8	
000069A0 E000 0142 28               		dc.b $E0, 0, 1, $42, $28	
000069A5 D004 0143 E0               		dc.b $D0, 4, 1, $43, $E0	
000069AA E805 0145 C8               		dc.b $E8, 5, 1, $45, $C8	
000069AF F80C 0149 C8               		dc.b $F8, $C, 1, $49, $C8	
000069B4 F006 014D F8               		dc.b $F0, 6, 1, $4D, $F8	
000069BA 00                         		even
000069BA 00                         		even
000069BA                            Map_ECha:	include	"_maps\Ending Sequence Emeralds.asm"
000069BA                            ; --------------------------------------------------------------------------------
000069BA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000069BA                            ; --------------------------------------------------------------------------------
000069BA                            
000069BA                            SME_0ZTmS:	
000069BA 0000 0000                  		dc.w SME_0ZTmS_E-SME_0ZTmS, SME_0ZTmS_14-SME_0ZTmS	
000069BE 0000 0000                  		dc.w SME_0ZTmS_1A-SME_0ZTmS, SME_0ZTmS_20-SME_0ZTmS	
000069C2 0000 0000                  		dc.w SME_0ZTmS_26-SME_0ZTmS, SME_0ZTmS_2C-SME_0ZTmS	
000069C6 0000                       		dc.w SME_0ZTmS_32-SME_0ZTmS	
000069C8 01                         SME_0ZTmS_E:	dc.b 1	
000069C9 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
000069CE 01                         SME_0ZTmS_14:	dc.b 1	
000069CF F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
000069D4 01                         SME_0ZTmS_1A:	dc.b 1	
000069D5 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
000069DA 01                         SME_0ZTmS_20:	dc.b 1	
000069DB F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8	
000069E0 01                         SME_0ZTmS_26:	dc.b 1	
000069E1 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8	
000069E6 01                         SME_0ZTmS_2C:	dc.b 1	
000069E7 F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
000069EC 01                         SME_0ZTmS_32:	dc.b 1	
000069ED F805 000C F8               		dc.b $F8, 5, 0, $C, $F8	
000069F2                            		even
000069F2                            		even
000069F2                            Map_ESth:	include	"_maps\Ending Sequence STH.asm"
000069F2                            ; --------------------------------------------------------------------------------
000069F2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000069F2                            ; --------------------------------------------------------------------------------
000069F2                            
000069F2                            SME_WuUDZ:	
000069F2 0000                       		dc.w SME_WuUDZ_2-SME_WuUDZ	
000069F4 03                         SME_WuUDZ_2:	dc.b 3	
000069F5 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0	
000069FA F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0	
000069FF F00F 0020 10               		dc.b $F0, $F, 0, $20, $10	
00006A04                            		even
00006A04                            		even
00006A04                            
00006A04                            ; ===========================================================================
00006A04                            ; ---------------------------------------------------------------------------
00006A04                            ; Credits ending sequence
00006A04                            ; ---------------------------------------------------------------------------
00006A04                            
00006A04                            GM_Credits:
00006A04                            		
00006A04 6100 AD92                  		bsr.w	ClearPLC
00006A08 6100 B950                  		bsr.w	PaletteFadeOut
00006A0C 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00006A12 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
00006A16 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00006A1A 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00006A1E 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00006A22 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
00006A26 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00006A2A 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (line 3; colour 0)
00006A2E 4238 F64E                  		clr.b	(f_wtr_state).w
00006A32 6100 A79C                  		bsr.w	ClearScreen
00006A36                            
00006A36 43F8 D000                  		lea	(v_objspace).w,a1
00006A3A 7000                       		moveq	#0,d0
00006A3C 323C 07FF                  		move.w	#$7FF,d1
00006A40                            	TryAg_ClrObjRam:
00006A40 22C0                       		move.l	d0,(a1)+
00006A42 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00006A46                            
00006A46 7000                       		moveq	#plcid_TryAgain,d0
00006A48 6100 AE5C                  		bsr.w	QuickPLC	; load "TRY AGAIN" or "END" patterns
00006A4C                            
00006A4C 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00006A50 7000                       		moveq	#0,d0
00006A52 323C 001F                  		move.w	#$1F,d1
00006A56                            	TryAg_ClrPal:
00006A56 22C0                       		move.l	d0,(a1)+
00006A58 51C9 FFFC                  		dbf	d1,TryAg_ClrPal ; fill palette with black
00006A5C                            
00006A5C 7015                       		moveq	#palid_Ending,d0
00006A5E 6100 BBA4                  		bsr.w	PalLoad1	; load ending palette
00006A62 4278 FBC0                  		clr.w	(v_pal_dry_dup+$40).w
00006A66 11FC 0000 D080             		move.b	#id_EndEggman,(v_objspace+$80).w ; load Eggman object
00006A6C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006A72 4EB9 0000 0000             		jsr	(BuildSprites).l
00006A78 31FC 0B40 F614             		move.w	#2880,(v_demolength).w ; show screen for 48 seconds
00006A7E 6100 B834                  		bsr.w	PaletteFadeIn
00006A82                            
00006A82                            ; ---------------------------------------------------------------------------
00006A82                            ; "TRY AGAIN" and "END"	screen main loop
00006A82                            ; ---------------------------------------------------------------------------
00006A82                            TryAg_MainLoop:
00006A82 6100 A828                  		bsr.w	PauseGame
00006A86 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00006A8C 6100 D20A                  		bsr.w	WaitForVBla
00006A90 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006A96 4EB9 0000 0000             		jsr	(BuildSprites).l
00006A9C 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00006AA2 6600                       		bne.s	TryAg_Exit	; if yes, branch
00006AA4 4A78 F614                  		tst.w	(v_demolength).w ; has 30 seconds elapsed?
00006AA8 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006AAA 0C38 0000 F600             		cmpi.b	#id_Credits,(v_gamemode).w
00006AB0 67D0                       		beq.s	TryAg_MainLoop
00006AB2                            
00006AB2                            TryAg_Exit:
00006AB2 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00006AB8 4E75                       		rts	
00006ABA                            
00006ABA                            ; ===========================================================================
00006ABA                            
00006ABA                            		include	"_incObj\8B Try Again & End Eggman.asm"
00006ABA                            ; ---------------------------------------------------------------------------
00006ABA                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006ABA                            ; ---------------------------------------------------------------------------
00006ABA                            
00006ABA                            EndEggman:
00006ABA 7000                       		moveq	#0,d0
00006ABC 1028 0024                  		move.b	obRoutine(a0),d0
00006AC0 323B 0000                  		move.w	EEgg_Index(pc,d0.w),d1
00006AC4 4EBB 1000                  		jsr	EEgg_Index(pc,d1.w)
00006AC8 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006ACE                            ; ===========================================================================
00006ACE 0000                       EEgg_Index:	dc.w EEgg_Main-EEgg_Index
00006AD0 0000                       		dc.w EEgg_Animate-EEgg_Index
00006AD2 0000                       		dc.w EEgg_Juggle-EEgg_Index
00006AD4 0000                       		dc.w EEgg_Wait-EEgg_Index
00006AD6                            
00006AD6 =00000030                  eegg_time:	equ $30		; time between juggle motions
00006AD6                            ; ===========================================================================
00006AD6                            
00006AD6                            EEgg_Main:	; Routine 0
00006AD6 5428 0024                  		addq.b	#2,obRoutine(a0)
00006ADA 317C 0120 0008             		move.w	#$120,obX(a0)
00006AE0 317C 00F4 000A             		move.w	#$F4,obScreenY(a0)
00006AE6 217C 0000 0000 0004        		move.l	#Map_EEgg,obMap(a0)
00006AEE 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
00006AF4 117C 0000 0001             		move.b	#0,obRender(a0)
00006AFA 317C 0100 0018             		move.w	#$100,obPriority(a0)
00006B00 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "END" animation
00006B06 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
00006B0C 6700                       		beq.s	EEgg_Animate	; if yes, branch
00006B0E                            
00006B0E 11FC 0000 D0C0             		move.b	#id_CreditsText,(v_objspace+$C0).w ; load credits object
00006B14 31FC 0009 FFF4             		move.w	#9,(v_creditsnum).w ; use "TRY AGAIN" text
00006B1A 11FC 0000 D800             		move.b	#id_TryChaos,(v_objspace+$800).w ; load emeralds object on "TRY AGAIN" screen
00006B20 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "TRY AGAIN" animation
00006B26                            
00006B26                            EEgg_Animate:	; Routine 2
00006B26 43F9 0000 0000             		lea	(Ani_EEgg).l,a1
00006B2C 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006B32                            ; ===========================================================================
00006B32                            
00006B32                            EEgg_Juggle:	; Routine 4
00006B32 5428 0024                  		addq.b	#2,obRoutine(a0)
00006B36 7002                       		moveq	#2,d0
00006B38 0828 0000 001C             		btst	#0,obAnim(a0)
00006B3E 6700                       		beq.s	@noflip
00006B40 4440                       		neg.w	d0
00006B42                            
00006B42                            	@noflip:
00006B42 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; get RAM address for emeralds
00006B46 7205                       		moveq	#5,d1
00006B48                            
00006B48                            @emeraldloop:
00006B48 1340 003E                  		move.b	d0,$3E(a1)
00006B4C 3400                       		move.w	d0,d2
00006B4E E742                       		asl.w	#3,d2
00006B50 D529 0026                  		add.b	d2,obAngle(a1)
00006B54 43E9 0040                  		lea	$40(a1),a1
00006B58 51C9 FFEE                  		dbf	d1,@emeraldloop
00006B5C 5228 001A                  		addq.b	#1,obFrame(a0)
00006B60 317C 0070 0030             		move.w	#112,eegg_time(a0)
00006B66                            
00006B66                            EEgg_Wait:	; Routine 6
00006B66 5368 0030                  		subq.w	#1,eegg_time(a0) ; decrement timer
00006B6A 6A00                       		bpl.s	@nochg		; branch if time remains
00006B6C 0868 0000 001C             		bchg	#0,obAnim(a0)
00006B72 117C 0002 0024             		move.b	#2,obRoutine(a0) ; goto EEgg_Animate next
00006B78                            
00006B78                            	@nochg:
00006B78 4E75                       		rts	
00006B78 4E75                       		rts	
00006B7A                            		include "_anim\Try Again & End Eggman.asm"
00006B7A                            ; ---------------------------------------------------------------------------
00006B7A                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00006B7A                            ; ---------------------------------------------------------------------------
00006B7A 0000                       Ani_EEgg:	dc.w @tryagain1-Ani_EEgg
00006B7C 0000                       		dc.w @tryagain2-Ani_EEgg
00006B7E 0000                       		dc.w @end-Ani_EEgg
00006B80 0500 FC01                  @tryagain1:	dc.b 5,	0, afRoutine, 1
00006B84 0502 FC03                  @tryagain2:	dc.b 5,	2, afRoutine, 3
00006B88 0704 0506 0504 0506 0504+  @end:		dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	afEnd
00006B9A                            		even
00006B9A                            		even
00006B9A                            		include	"_incObj\8C Try Again Emeralds.asm"
00006B9A                            ; ---------------------------------------------------------------------------
00006B9A                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006B9A                            ; ---------------------------------------------------------------------------
00006B9A                            
00006B9A                            TryChaos:
00006B9A 7000                       		moveq	#0,d0
00006B9C 1028 0024                  		move.b	obRoutine(a0),d0
00006BA0 323B 0000                  		move.w	TCha_Index(pc,d0.w),d1
00006BA4 4EBB 1000                  		jsr	TCha_Index(pc,d1.w)
00006BA8 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006BAE                            ; ===========================================================================
00006BAE 0000                       TCha_Index:	dc.w TCha_Main-TCha_Index
00006BB0 0000                       		dc.w TCha_Move-TCha_Index
00006BB2                            ; ===========================================================================
00006BB2                            
00006BB2                            TCha_Main:	; Routine 0
00006BB2 2248                       		movea.l	a0,a1
00006BB4 7400                       		moveq	#0,d2
00006BB6 7600                       		moveq	#0,d3
00006BB8 7205                       		moveq	#5,d1
00006BBA 9238 FE57                  		sub.b	(v_emeralds).w,d1
00006BBE                            
00006BBE                            @makeemerald:
00006BBE 12BC 0000                  		move.b	#id_TryChaos,(a1) ; load emerald object
00006BC2 5429 0024                  		addq.b	#2,obRoutine(a1)
00006BC6 237C 0000 69BA 0004        		move.l	#Map_ECha,obMap(a1)
00006BCE 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
00006BD4 137C 0000 0001             		move.b	#0,obRender(a1)
00006BDA 337C 0080 0018             		move.w	#$80,obPriority(a1)
00006BE0 337C 0104 0008             		move.w	#$104,obX(a1)
00006BE6 337C 0120 0038             		move.w	#$120,$38(a1)
00006BEC 337C 00EC 000A             		move.w	#$EC,obScreenY(a1)
00006BF2 3369 000A 003A             		move.w	obScreenY(a1),$3A(a1)
00006BF8 137C 001C 003C             		move.b	#$1C,$3C(a1)
00006BFE 47F8 FE58                  		lea	(v_emldlist).w,a3
00006C02                            
00006C02                            	@chkemerald:
00006C02 7000                       		moveq	#0,d0
00006C04 1038 FE57                  		move.b	(v_emeralds).w,d0
00006C08 5340                       		subq.w	#1,d0
00006C0A 6500                       		bcs.s	@loc_5B42
00006C0C                            
00006C0C                            	@chkloop:
00006C0C B433 0000                  		cmp.b	(a3,d0.w),d2
00006C10 6600                       		bne.s	@notgot
00006C12 5202                       		addq.b	#1,d2
00006C14 60EC                       		bra.s	@chkemerald
00006C16                            ; ===========================================================================
00006C16                            
00006C16                            	@notgot:
00006C16 51C8 FFF4                  		dbf	d0,@chkloop
00006C1A                            
00006C1A                            @loc_5B42:
00006C1A 1342 001A                  		move.b	d2,obFrame(a1)
00006C1E 5229 001A                  		addq.b	#1,obFrame(a1)
00006C22 5202                       		addq.b	#1,d2
00006C24 137C 0080 0026             		move.b	#$80,obAngle(a1)
00006C2A 1343 001E                  		move.b	d3,obTimeFrame(a1)
00006C2E 1343 001F                  		move.b	d3,obDelayAni(a1)
00006C32 0643 000A                  		addi.w	#10,d3
00006C36 43E9 0040                  		lea	$40(a1),a1
00006C3A 51C9 FF82                  		dbf	d1,@makeemerald	; repeat 5 times
00006C3E                            
00006C3E                            TCha_Move:	; Routine 2
00006C3E 4A68 003E                  		tst.w	$3E(a0)
00006C42 6700                       		beq.s	locret_5BBA
00006C44 4A28 001E                  		tst.b	obTimeFrame(a0)
00006C48 6700                       		beq.s	loc_5B78
00006C4A 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00006C4E 6600                       		bne.s	loc_5B80
00006C50                            
00006C50                            loc_5B78:
00006C50 3028 003E                  		move.w	$3E(a0),d0
00006C54 D168 0026                  		add.w	d0,obAngle(a0)
00006C58                            
00006C58                            loc_5B80:
00006C58 1028 0026                  		move.b	obAngle(a0),d0
00006C5C 6700                       		beq.s	loc_5B8C
00006C5E 0C00 0080                  		cmpi.b	#$80,d0
00006C62 6600                       		bne.s	loc_5B96
00006C64                            
00006C64                            loc_5B8C:
00006C64 4268 003E                  		clr.w	$3E(a0)
00006C68 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00006C6E                            
00006C6E                            loc_5B96:
00006C6E 4EB9 0000 3CCA             		jsr	(CalcSine).l
00006C74 7800                       		moveq	#0,d4
00006C76 1828 003C                  		move.b	$3C(a0),d4
00006C7A C3C4                       		muls.w	d4,d1
00006C7C E081                       		asr.l	#8,d1
00006C7E C1C4                       		muls.w	d4,d0
00006C80 E080                       		asr.l	#8,d0
00006C82 D268 0038                  		add.w	$38(a0),d1
00006C86 D068 003A                  		add.w	$3A(a0),d0
00006C8A 3141 0008                  		move.w	d1,obX(a0)
00006C8E 3140 000A                  		move.w	d0,obScreenY(a0)
00006C92                            
00006C92                            locret_5BBA:
00006C92 4E75                       		rts	
00006C92 4E75                       		rts	
00006C94                            Map_EEgg:	include	"_maps\Try Again & End Eggman.asm"
00006C94                            ; ---------------------------------------------------------------------------
00006C94                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006C94                            ; ---------------------------------------------------------------------------
00006C94                            Map_EEgg_internal:
00006C94 0000                       		dc.w M_EEgg_Try1-Map_EEgg_internal
00006C96 0000                       		dc.w M_EEgg_Try2-Map_EEgg_internal
00006C98 0000                       		dc.w M_EEgg_Try3-Map_EEgg_internal
00006C9A 0000                       		dc.w M_EEgg_Try4-Map_EEgg_internal
00006C9C 0000                       		dc.w M_EEgg_End1-Map_EEgg_internal
00006C9E 0000                       		dc.w M_EEgg_End2-Map_EEgg_internal
00006CA0 0000                       		dc.w M_EEgg_End3-Map_EEgg_internal
00006CA2 0000                       		dc.w M_EEgg_End4-Map_EEgg_internal
00006CA4 08                         M_EEgg_Try1:	dc.b 8
00006CA5 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006CAA F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006CAF E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006CB4 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006CB9 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006CBE 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006CC3 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006CC8 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006CCD 08                         M_EEgg_Try2:	dc.b 8
00006CCE E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006CD3 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006CD8 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006CDD F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006CE2 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006CE7 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006CEC 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006CF1 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006CF6 08                         M_EEgg_Try3:	dc.b 8
00006CF7 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006CFC F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006D01 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006D06 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006D0B 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006D10 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006D15 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006D1A 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006D1F 08                         M_EEgg_Try4:	dc.b 8
00006D20 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006D25 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006D2A E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006D2F F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006D34 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006D39 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006D3E 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006D43 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006D48 0C                         M_EEgg_End1:	dc.b $C
00006D49 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006D4E F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006D53 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006D58 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006D5D ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00006D62 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006D67 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006D6C 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006D71 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006D76 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006D7B 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006D80 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006D85 0A                         M_EEgg_End2:	dc.b $A
00006D86 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006D8B DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006D90 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006D95 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006D9A DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006D9F F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006DA4 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006DA9 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006DAE 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006DB3 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006DB8 0A                         M_EEgg_End3:	dc.b $A
00006DB9 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006DBE E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006DC3 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006DC8 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006DCD E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006DD2 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006DD7 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006DDC 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006DE1 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006DE6 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006DEB 0C                         M_EEgg_End4:	dc.b $C
00006DEC F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006DF1 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006DF6 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006DFB 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006E00 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006E05 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006E0A 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006E0F 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006E14 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006E19 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006E1E 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006E23 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006E28                            		even
00006E28                            		even
00006E28                            
00006E28                            ; ---------------------------------------------------------------------------
00006E28                            ; Ending sequence demos
00006E28                            ; ---------------------------------------------------------------------------
00006E28                            Demo_EndGHZ1:	incbin	"demodata\Ending - GHZ1.bin"
00006E56                            		even
00006E56                            Demo_EndMZ:	incbin	"demodata\Ending - MZ.bin"
00006E96                            		even
00006E96                            Demo_EndSYZ:	incbin	"demodata\Ending - SYZ.bin"
00006EC6                            		even
00006EC6                            Demo_EndLZ:	incbin	"demodata\Ending - LZ.bin"
00006EF6                            		even
00006EF6                            Demo_EndSLZ:	incbin	"demodata\Ending - SLZ.bin"
00006F16                            		even
00006F16                            Demo_EndSBZ1:	incbin	"demodata\Ending - SBZ1.bin"
00006F36                            		even
00006F36                            Demo_EndSBZ2:	incbin	"demodata\Ending - SBZ2.bin"
00006F66                            		even
00006F66                            Demo_EndGHZ2:	incbin	"demodata\Ending - GHZ2.bin"
00006F96                            		even
00006F96                            
00006F96                            		include	"_inc\LevelSizeLoad & BgScrollSpeed (JP1).asm"
00006F96                            ; ---------------------------------------------------------------------------
00006F96                            ; Subroutine to	load level boundaries and start	locations
00006F96                            ; ---------------------------------------------------------------------------
00006F96                            
00006F96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F96                            
00006F96                            
00006F96                            LevelSizeLoad:
00006F96 7000                       		moveq	#0,d0
00006F98 11C0 F740                  		move.b	d0,($FFFFF740).w
00006F9C 11C0 F741                  		move.b	d0,($FFFFF741).w
00006FA0 11C0 F746                  		move.b	d0,($FFFFF746).w
00006FA4 11C0 F748                  		move.b	d0,($FFFFF748).w
00006FA8 11C0 F742                  		move.b	d0,(v_dle_routine).w
00006FAC 3038 FE10                  		move.w	(v_zone).w,d0
00006FB0 ED08                       		lsl.b	#6,d0
00006FB2 E848                       		lsr.w	#4,d0
00006FB4 3200                       		move.w	d0,d1
00006FB6 D040                       		add.w	d0,d0
00006FB8 D041                       		add.w	d1,d0
00006FBA 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006FBE 3018                       		move.w	(a0)+,d0
00006FC0 31C0 F730                  		move.w	d0,($FFFFF730).w
00006FC4 2018                       		move.l	(a0)+,d0
00006FC6 21C0 F728                  		move.l	d0,(v_limitleft2).w
00006FCA 21C0 F720                  		move.l	d0,(v_limitleft1).w
00006FCE 2018                       		move.l	(a0)+,d0
00006FD0 21C0 F72C                  		move.l	d0,(v_limittop2).w
00006FD4 21C0 F724                  		move.l	d0,(v_limittop1).w
00006FD8 3038 F728                  		move.w	(v_limitleft2).w,d0
00006FDC 0640 0240                  		addi.w	#$240,d0
00006FE0 31C0 F732                  		move.w	d0,(v_limitleft3).w
00006FE4 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006FEA 3018                       		move.w	(a0)+,d0
00006FEC 31C0 F73E                  		move.w	d0,(v_lookshift).w
00006FF0 31FC 00A0 F7A0             		move.w    #160,(v_camera_pan).w    ; reset the horizontal camera pan value to 160 pixels
00006FF6 6000 0000                  		bra.w	LevSz_ChkLamp
00006FFA                            
00006FFA                            ; ===========================================================================
00006FFA                            ; ---------------------------------------------------------------------------
00006FFA                            ; Level size array
00006FFA                            ; ---------------------------------------------------------------------------
00006FFA                            LevelSizeArray:
00006FFA                            		; GHZ
00006FFA 0004 0000 4470 0000 0400+  		dc.w $0004, $0000, $4470, $0000, $0400, $0060
00007006 0004 0000 2E60 0000 0300+  		dc.w $0004, $0000, $2E60, $0000, $0300, $0060
00007012 0004 0000 2960 0000 0300+  		dc.w $0004, $0000, $2960, $0000, $0300, $0060
0000701E 0004 0000 7EC0 0000 0400+  		dc.w $0004, $0000, $7EC0, $0000, $0400, $0060
0000702A                            		; LZ
0000702A 0004 0000 19AF 0000 0530+  		dc.w $0004, $0000, $19AF, $0000, $0530, $0060
00007036 0004 0000 10AF 0000 0720+  		dc.w $0004, $0000, $10AF, $0000, $0720, $0060
00007042 0004 0000 202F FF00 0800+  		dc.w $0004, $0000, $202F, $FF00, $0800, $0060
0000704E 0004 0000 20BF 0000 0720+  		dc.w $0004, $0000, $20BF, $0000, $0720, $0060
0000705A                            		; MZ
0000705A 0004 0000 21C0 0000 0520+  		dc.w $0004, $0000, $21C0, $0000, $0520, $0060
00007066 0004 0000 2DE0 0000 0520+  		dc.w $0004, $0000, $2DE0, $0000, $0520, $0060
00007072 0004 0000 1800 0000 0720+  		dc.w $0004, $0000, $1800, $0000, $0720, $0060
0000707E 0004 0000 16BF 0000 0720+  		dc.w $0004, $0000, $16BF, $0000, $0720, $0060
0000708A                            		; SLZ
0000708A 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00007096 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
000070A2 0004 0000 2000 0000 0640+  		dc.w $0004, $0000, $2000, $0000, $0640, $0060
000070AE 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
000070BA                            		; SYZ
000070BA 0004 0000 1B00 0000 0520+  		dc.w $0004, $0000, $1B00, $0000, $0520, $0060
000070C6 0004 0000 1B60 0000 0520+  		dc.w $0004, $0000, $1B60, $0000, $0520, $0060
000070D2 0004 0000 2C00 0000 0620+  		dc.w $0004, $0000, $2C00, $0000, $0620, $0060
000070DE 0004 0000 2EC0 0000 0620+  		dc.w $0004, $0000, $2EC0, $0000, $0620, $0060
000070EA                            		; SBZ
000070EA 0004 0000 21C0 0000 0720+  		dc.w $0004, $0000, $21C0, $0000, $0720, $0060
000070F6 0004 0000 1E40 0000 0800+  		dc.w $0004, $0000, $1E40, $0000, $0800, $0060
00007102 0004 2080 2460 0510 0510+  		dc.w $0004, $2080, $2460, $0510, $0510, $0060
0000710E 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
0000711A                            		; Ending
0000711A 0004 0000 0500 0110 0110+  		dc.w $0004, $0000, $0500, $0110, $0110, $0060
00007126 0004 0000 0DC0 0110 0110+  		dc.w $0004, $0000, $0DC0, $0110, $0110, $0060
00007132 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
0000713E 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
0000714A                            
0000714A                            ; ---------------------------------------------------------------------------
0000714A                            ; Ending start location array
0000714A                            ; ---------------------------------------------------------------------------
0000714A                            EndingStLocArray:
0000714A                            		include	"_inc\Start Location Array - Ending.asm"
0000714A                            ; ---------------------------------------------------------------------------
0000714A                            ; Ending start location array
0000714A                            ; ---------------------------------------------------------------------------
0000714A                            
0000714A                            		incbin	"startpos\ghz1 (Credits demo 1).bin"
0000714E                            		incbin	"startpos\mz2 (Credits demo).bin"
00007152                            		incbin	"startpos\syz3 (Credits demo).bin"
00007156                            		incbin	"startpos\lz3 (Credits demo).bin"
0000715A                            		incbin	"startpos\slz3 (Credits demo).bin"
0000715E                            		incbin	"startpos\sbz1 (Credits demo).bin"
00007162                            		incbin	"startpos\sbz2 (Credits demo).bin"
00007166                            		incbin	"startpos\ghz1 (Credits demo 2).bin"
0000716A                            		even
0000716A                            		even
0000716A                            
0000716A                            ; ===========================================================================
0000716A                            
0000716A                            LevSz_ChkLamp:
0000716A 4A38 FE30                  		tst.b	(v_lastlamp).w	; have any lampposts been hit?
0000716E 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00007170                            
00007170 4EB9 0000 0000             		jsr	(Lamp_LoadInfo).l
00007176 3238 D008                  		move.w	(v_player+obX).w,d1
0000717A 3038 D00C                  		move.w	(v_player+obY).w,d0
0000717E 6000                       		bra.s	LevSz_SkipStartPos
00007180                            ; ===========================================================================
00007180                            
00007180                            LevSz_StartLoc:
00007180 3038 FE10                  		move.w	(v_zone).w,d0
00007184 ED08                       		lsl.b	#6,d0
00007186 E848                       		lsr.w	#4,d0
00007188 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
0000718C 4A78 FFF0                  		tst.w	(f_demo).w	; is ending demo mode on?
00007190 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00007192                            
00007192 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00007196 5340                       		subq.w	#1,d0
00007198 E548                       		lsl.w	#2,d0
0000719A 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
0000719E                            
0000719E                            LevSz_SonicPos:
0000719E 7200                       		moveq	#0,d1
000071A0 3219                       		move.w	(a1)+,d1
000071A2 31C1 D008                  		move.w	d1,(v_player+obX).w ; set Sonic's position on x-axis
000071A6 7000                       		moveq	#0,d0
000071A8 3011                       		move.w	(a1),d0
000071AA 31C0 D00C                  		move.w	d0,(v_player+obY).w ; set Sonic's position on y-axis
000071AE                            
000071AE                            SetScreen:
000071AE                            	LevSz_SkipStartPos:
000071AE 4278 F7A8                  		clr.w (v_trackpos).w ; reset Sonic's position tracking index 
000071B2 45F8 CB00                  		lea (v_tracksonic).w,a2 ; load the tracking array into a2 
000071B6 743F                       		moveq #63,d2 ; begin a 64-step loop 
000071B8                            @looppoint: 
000071B8 34C1                       		move.w d1,(a2)+ ; fill in X 
000071BA 34C0                       		move.w d0,(a2)+ ; fill in Y 
000071BC 51CA FFFA                  		dbf d2,@looppoint ; loop	
000071C0 0441 00A0                  		subi.w	#160,d1		; is Sonic more than 160px from left edge?
000071C4 6400                       		bcc.s	SetScr_WithinLeft ; if yes, branch
000071C6 7200                       		moveq	#0,d1
000071C8                            
000071C8                            	SetScr_WithinLeft:
000071C8 3438 F72A                  		move.w	(v_limitright2).w,d2
000071CC B242                       		cmp.w	d2,d1		; is Sonic inside the right edge?
000071CE 6500                       		bcs.s	SetScr_WithinRight ; if yes, branch
000071D0 3202                       		move.w	d2,d1
000071D2                            
000071D2                            	SetScr_WithinRight:
000071D2 31C1 F700                  		move.w	d1,(v_screenposx).w ; set horizontal screen position
000071D6                            
000071D6 0440 0060                  		subi.w	#96,d0		; is Sonic within 96px of upper edge?
000071DA 6400                       		bcc.s	SetScr_WithinTop ; if yes, branch
000071DC 7000                       		moveq	#0,d0
000071DE                            
000071DE                            	SetScr_WithinTop:
000071DE B078 F72E                  		cmp.w	(v_limitbtm2).w,d0 ; is Sonic above the bottom edge?
000071E2 6D00                       		blt.s	SetScr_WithinBottom ; if yes, branch
000071E4 3038 F72E                  		move.w	(v_limitbtm2).w,d0
000071E8                            
000071E8                            	SetScr_WithinBottom:
000071E8 31C0 F704                  		move.w	d0,(v_screenposy).w ; set vertical screen position
000071EC 6100 0000                  		bsr.w	BgScrollSpeed
000071F0 7000                       		moveq	#0,d0
000071F2 1038 FE10                  		move.b	(v_zone).w,d0
000071F6 E508                       		lsl.b	#2,d0
000071F8 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),(v_256loop1).w
000071FE 4E75                       		rts
00007200                            ; ===========================================================================
00007200                            ; ---------------------------------------------------------------------------
00007200                            ; Sonic start location array
00007200                            ; ---------------------------------------------------------------------------
00007200                            StartLocArray:	include	"_inc\Start Location Array - Levels.asm"
00007200                            ; ---------------------------------------------------------------------------
00007200                            ; Sonic start location array
00007200                            ; ---------------------------------------------------------------------------
00007200                            
00007200                            		incbin	"startpos\ghz1.bin"
00007204                            		incbin	"startpos\ghz2.bin"
00007208                            		incbin	"startpos\ghz3.bin"
0000720C 0080 00A8                  		dc.w	$80,$A8
00007210                            
00007210                            		incbin	"startpos\lz1.bin"
00007214                            		incbin	"startpos\lz2.bin"
00007218                            		incbin	"startpos\lz3.bin"
0000721C                            		incbin	"startpos\sbz3.bin"
00007220                            
00007220                            		incbin	"startpos\mz1.bin"
00007224                            		incbin	"startpos\mz2.bin"
00007228                            		incbin	"startpos\mz3.bin"
0000722C 0080 00A8                  		dc.w	$80,$A8
00007230                            
00007230                            		incbin	"startpos\slz1.bin"
00007234                            		incbin	"startpos\slz2.bin"
00007238                            		incbin	"startpos\slz3.bin"
0000723C 0080 00A8                  		dc.w	$80,$A8
00007240                            
00007240                            		incbin	"startpos\syz1.bin"
00007244                            		incbin	"startpos\syz2.bin"
00007248                            		incbin	"startpos\syz3.bin"
0000724C 0080 00A8                  		dc.w	$80,$A8
00007250                            
00007250                            		incbin	"startpos\sbz1.bin"
00007254                            		incbin	"startpos\sbz2.bin"
00007258                            		incbin	"startpos\fz.bin"
0000725C 0080 00A8                  		dc.w	$80,$A8
00007260                            
00007260                            
00007260                            		incbin	"startpos\end1.bin"
00007264                            		incbin	"startpos\end2.bin"
00007268 0080 00A8                  		dc.w	$80,$A8
0000726C 0080 00A8                  		dc.w	$80,$A8
00007270                            
00007270                            		even
00007270                            		even
00007270                            
00007270                            ; ---------------------------------------------------------------------------
00007270                            ; Which	256x256	tiles contain loops or roll-tunnels
00007270                            ; ---------------------------------------------------------------------------
00007270                            
00007270                            LoopTileNums:
00007270                            
00007270                            ; 		loop	loop	tunnel	tunnel
00007270                            
00007270 B5C0 1F20                  	dc.b	$B5,	$C0,	$1F,	$20	; Green Hill
00007274 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Labyrinth
00007278 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Marble
0000727C AAB4 7F7F                  	dc.b	$AA,	$B4,	$7F,	$7F	; Star Light
00007280 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Spring Yard
00007284 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Scrap Brain
00007288 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Ending (Green Hill)
0000728C                            
0000728C                            		even
0000728C                            
0000728C                            ; ---------------------------------------------------------------------------
0000728C                            ; Subroutine to	set scroll speed of some backgrounds
0000728C                            ; ---------------------------------------------------------------------------
0000728C                            
0000728C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000728C                            
0000728C                            
0000728C                            BgScrollSpeed:
0000728C 4A38 FE30                  		tst.b	(v_lastlamp).w
00007290 6600                       		bne.s	loc_6206
00007292 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007296 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
0000729A 31C1 F708                  		move.w	d1,(v_bgscreenposx).w
0000729E 31C1 F710                  		move.w	d1,(v_bg2screenposx).w
000072A2 31C1 F718                  		move.w	d1,(v_bg3screenposx).w
000072A6                            
000072A6                            loc_6206:
000072A6 7400                       		moveq	#0,d2
000072A8 1438 FE10                  		move.b	(v_zone).w,d2
000072AC D442                       		add.w	d2,d2
000072AE 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000072B2 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000072B6                            ; End of function BgScrollSpeed
000072B6                            
000072B6                            ; ===========================================================================
000072B6 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000072BA 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
000072BE 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
000072C2 0000                       		dc.w BgScroll_End-BgScroll_Index
000072C4                            ; ===========================================================================
000072C4                            
000072C4                            BgScroll_GHZ:
000072C4 42B8 F708                  		clr.l	(v_bgscreenposx).w
000072C8 42B8 F70C                  		clr.l	(v_bgscreenposy).w
000072CC 42B8 F714                  		clr.l	(v_bg2screenposy).w
000072D0 42B8 F71C                  		clr.l	(v_bg3screenposy).w
000072D4 45F8 A800                  		lea	($FFFFA800).w,a2
000072D8 429A                       		clr.l	(a2)+
000072DA 429A                       		clr.l	(a2)+
000072DC 429A                       		clr.l	(a2)+
000072DE 4E75                       		rts
000072E0                            ; ===========================================================================
000072E0                            
000072E0                            BgScroll_LZ:
000072E0 E280                       		asr.l	#1,d0
000072E2 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000072E6 4E75                       		rts	
000072E8                            ; ===========================================================================
000072E8                            
000072E8                            BgScroll_MZ:
000072E8 4E75                       		rts	
000072EA                            ; ===========================================================================
000072EA                            
000072EA                            BgScroll_SLZ:
000072EA E280                       		asr.l	#1,d0
000072EC 0640 00C0                  		addi.w	#$C0,d0
000072F0 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000072F4 42B8 F708                  		clr.l	(v_bgscreenposx).w
000072F8 4E75                       		rts	
000072FA                            ; ===========================================================================
000072FA                            
000072FA                            BgScroll_SYZ:
000072FA E980                       		asl.l	#4,d0
000072FC 2400                       		move.l	d0,d2
000072FE E380                       		asl.l	#1,d0
00007300 D082                       		add.l	d2,d0
00007302 E080                       		asr.l	#8,d0
00007304 5240                       		addq.w	#1,d0
00007306 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
0000730A 42B8 F708                  		clr.l	(v_bgscreenposx).w
0000730E 4E75                       		rts	
00007310                            ; ===========================================================================
00007310                            
00007310                            BgScroll_SBZ:
00007310 0240 07F8                  		andi.w	#$7F8,d0
00007314 E640                       		asr.w	#3,d0
00007316 5240                       		addq.w	#1,d0
00007318 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
0000731C 4E75                       		rts	
0000731E                            ; ===========================================================================
0000731E                            
0000731E                            BgScroll_End:
0000731E 3038 F700                  		move.w	(v_screenposx).w,d0
00007322 E240                       		asr.w	#1,d0
00007324 31C0 F708                  		move.w	d0,(v_bgscreenposx).w
00007328 31C0 F710                  		move.w	d0,(v_bg2screenposx).w
0000732C E440                       		asr.w	#2,d0
0000732E 3200                       		move.w	d0,d1
00007330 D040                       		add.w	d0,d0
00007332 D041                       		add.w	d1,d0
00007334 31C0 F718                  		move.w	d0,(v_bg3screenposx).w
00007338 42B8 F70C                  		clr.l	(v_bgscreenposy).w
0000733C 42B8 F714                  		clr.l	(v_bg2screenposy).w
00007340 42B8 F71C                  		clr.l	(v_bg3screenposy).w
00007344 45F8 A800                  		lea	($FFFFA800).w,a2
00007348 429A                       		clr.l	(a2)+
0000734A 429A                       		clr.l	(a2)+
0000734C 429A                       		clr.l	(a2)+
0000734E 4E75                       		rts
0000734E 4E75                       		rts
00007350                            		include	"_inc\DeformLayers (JP1).asm"
00007350                            ; ---------------------------------------------------------------------------
00007350                            ; Background layer deformation subroutines
00007350                            ; ---------------------------------------------------------------------------
00007350                            
00007350                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007350                            
00007350                            
00007350                            DeformLayers:
00007350 4A38 F744                  		tst.b	(f_nobgscroll).w
00007354 6700                       		beq.s	@bgscroll
00007356 4E75                       		rts	
00007358                            ; ===========================================================================
00007358                            
00007358                            	@bgscroll:
00007358 4278 F754                  		clr.w	(v_fg_scroll_flags).w
0000735C 4278 F756                  		clr.w	(v_bg1_scroll_flags).w
00007360 4278 F758                  		clr.w	(v_bg2_scroll_flags).w
00007364 4278 F75A                  		clr.w	(v_bg3_scroll_flags).w
00007368 6100 0000                  		bsr.w	ScrollHoriz
0000736C 6100 0000                  		bsr.w	ScrollVertical
00007370 6100 0000                  		bsr.w	DynamicLevelEvents
00007374 31F8 F704 F616             		move.w	(v_screenposy).w,(v_scrposy_dup).w
0000737A 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007380 7000                       		moveq	#0,d0
00007382 1038 FE10                  		move.b	(v_zone).w,d0
00007386 D040                       		add.w	d0,d0
00007388 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
0000738C 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00007390                            ; End of function DeformLayers
00007390                            
00007390                            ; ===========================================================================
00007390                            ; ---------------------------------------------------------------------------
00007390                            ; Offset index for background layer deformation	code
00007390                            ; ---------------------------------------------------------------------------
00007390 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00007394 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00007398 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
0000739C 0000                       		dc.w Deform_GHZ-Deform_Index
0000739E                            ; ---------------------------------------------------------------------------
0000739E                            ; Green	Hill Zone background layer deformation code
0000739E                            ; ---------------------------------------------------------------------------
0000739E                            
0000739E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000739E                            
0000739E                            
0000739E                            Deform_GHZ:
0000739E                            	;cmpi.b    #id_Title,(v_gamemode).w
0000739E                            	;beq.w    Deform_Title
0000739E                            
0000739E                            ;Deform_GHZ_Stage:
0000739E                            	; block 3 - distant mountains
0000739E 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000073A2 48C4                       		ext.l	d4
000073A4 EB84                       		asl.l	#5,d4
000073A6 2204                       		move.l	d4,d1
000073A8 E384                       		asl.l	#1,d4
000073AA D881                       		add.l	d1,d4
000073AC 7C00                       		moveq	#0,d6
000073AE 6100 0000                  		bsr.w	BGScroll_Block3
000073B2                            	; block 2 - hills & waterfalls
000073B2 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000073B6 48C4                       		ext.l	d4
000073B8 EF84                       		asl.l	#7,d4
000073BA 7C00                       		moveq	#0,d6
000073BC 6100 0000                  		bsr.w	BGScroll_Block2
000073C0                            	; calculate Y position
000073C0 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000073C4 3038 F704                  		move.w	(v_screenposy).w,d0
000073C8 0240 07FF                  		andi.w	#$7FF,d0
000073CC EA48                       		lsr.w	#5,d0
000073CE 4440                       		neg.w	d0
000073D0 0640 0020                  		addi.w	#$20,d0
000073D4 6A00                       		bpl.s	@limitY
000073D6 7000                       		moveq	#0,d0
000073D8                            	@limitY:
000073D8 3800                       		move.w	d0,d4
000073DA 31C0 F618                  		move.w	d0,(v_bgscrposy_dup).w
000073DE 3038 F700                  		move.w	(v_screenposx).w,d0
000073E2 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
000073E8 6600                       		bne.s	@notTitle
000073EA 7000                       		moveq	#0,d0	; reset foreground position in title screen
000073EC                            	@notTitle:
000073EC 4440                       		neg.w	d0
000073EE 4840                       		swap	d0
000073F0                            	; auto-scroll clouds
000073F0 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
000073F4 069A 0001 0000             		addi.l	#$10000,(a2)+
000073FA 069A 0000 C000             		addi.l	#$C000,(a2)+
00007400 069A 0000 8000             		addi.l	#$8000,(a2)+
00007406                            	; calculate background scroll	
00007406 3038 A800                  		move.w	(v_bgscroll_buffer).w,d0
0000740A D078 F718                  		add.w	(v_bg3screenposx).w,d0
0000740E 4440                       		neg.w	d0
00007410 323C 001F                  		move.w	#$1F,d1
00007414 9244                       		sub.w	d4,d1
00007416 6500                       		bcs.s	@gotoCloud2
00007418                            	@cloudLoop1:		; upper cloud (32px)
00007418 22C0                       		move.l	d0,(a1)+
0000741A 51C9 FFFC                  		dbf	d1,@cloudLoop1
0000741E                            
0000741E                            	@gotoCloud2:
0000741E 3038 A804                  		move.w	(v_bgscroll_buffer+4).w,d0
00007422 D078 F718                  		add.w	(v_bg3screenposx).w,d0
00007426 4440                       		neg.w	d0
00007428 323C 000F                  		move.w	#$F,d1
0000742C                            	@cloudLoop2:		; middle cloud (16px)
0000742C 22C0                       		move.l	d0,(a1)+
0000742E 51C9 FFFC                  		dbf	d1,@cloudLoop2
00007432                            
00007432 3038 A808                  		move.w	(v_bgscroll_buffer+8).w,d0
00007436 D078 F718                  		add.w	(v_bg3screenposx).w,d0
0000743A 4440                       		neg.w	d0
0000743C 323C 000F                  		move.w	#$F,d1
00007440                            	@cloudLoop3:		; lower cloud (16px)
00007440 22C0                       		move.l	d0,(a1)+
00007442 51C9 FFFC                  		dbf	d1,@cloudLoop3
00007446                            
00007446 323C 002F                  		move.w	#$2F,d1
0000744A 3038 F718                  		move.w	(v_bg3screenposx).w,d0
0000744E 4440                       		neg.w	d0
00007450                            	@mountainLoop:		; distant mountains (48px)
00007450 22C0                       		move.l	d0,(a1)+
00007452 51C9 FFFC                  		dbf	d1,@mountainLoop
00007456                            
00007456 323C 0027                  		move.w	#$27,d1
0000745A 3038 F710                  		move.w	(v_bg2screenposx).w,d0
0000745E 4440                       		neg.w	d0
00007460                            	@hillLoop:			; hills & waterfalls (40px)
00007460 22C0                       		move.l	d0,(a1)+
00007462 51C9 FFFC                  		dbf	d1,@hillLoop
00007466                            
00007466 3038 F710                  		move.w	(v_bg2screenposx).w,d0
0000746A 3438 F700                  		move.w	(v_screenposx).w,d2
0000746E 9440                       		sub.w	d0,d2
00007470 48C2                       		ext.l	d2
00007472 E182                       		asl.l	#8,d2
00007474 85FC 0068                  		divs.w	#$68,d2
00007478 48C2                       		ext.l	d2
0000747A E182                       		asl.l	#8,d2
0000747C 7600                       		moveq	#0,d3
0000747E 3600                       		move.w	d0,d3
00007480 323C 0047                  		move.w	#$47,d1
00007484 D244                       		add.w	d4,d1
00007486                            	@waterLoop:			; water deformation
00007486 3003                       		move.w	d3,d0
00007488 4440                       		neg.w	d0
0000748A 22C0                       		move.l	d0,(a1)+
0000748C 4843                       		swap	d3
0000748E D682                       		add.l	d2,d3
00007490 4843                       		swap	d3
00007492 51C9 FFF2                  		dbf	d1,@waterLoop
00007496 4E75                       		rts
00007498                            ; End of function Deform_GHZ
00007498                            
00007498                            Deform_Title:
00007498 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000749C 48C4                       		ext.l	d4
0000749E EB84                       		asl.l	#5,d4
000074A0 2204                       		move.l	d4,d1
000074A2 E384                       		asl.l	#1,d4
000074A4 D881                       		add.l	d1,d4
000074A6 7A00                       		moveq	#0,d5
000074A8 6100 0000                  		bsr.w	BGScroll_Block1
000074AC 6100 0000                  		bsr.w	BGScroll_Block3
000074B0 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000074B4 3038 F704                  		move.w	(v_screenposy).w,d0
000074B8 0240 07FF                  		andi.w	#$7FF,d0
000074BC EA48                       		lsr.w	#5,d0
000074BE 4440                       		neg.w	d0
000074C0 0640 0026                  		addi.w	#$26,d0
000074C4 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
000074C8 3800                       		move.w	d0,d4
000074CA 6100 0000                  		bsr.w	BGScroll_Block3
000074CE 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000074D4 323C 006F                  		move.w	#$6F,d1
000074D8 9244                       		sub.w	d4,d1
000074DA 3038 F700                  		move.w	(v_screenposx).w,d0
000074DE 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
000074E4 6600                       		bne.s	loc_633C
000074E6 7000                       		moveq	#0,d0
000074E8                            
000074E8                            loc_633C:
000074E8 4440                       		neg.w	d0
000074EA 4840                       		swap	d0
000074EC 3038 F708                  		move.w	(v_bgscreenposx).w,d0
000074F0 4440                       		neg.w	d0
000074F2                            
000074F2                            loc_6346:
000074F2 22C0                       		move.l	d0,(a1)+
000074F4 51C9 FFFC                  		dbf	d1,loc_6346
000074F8 323C 0027                  		move.w	#$27,d1
000074FC 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007500 4440                       		neg.w	d0
00007502                            
00007502                            loc_6356:
00007502 22C0                       		move.l	d0,(a1)+
00007504 51C9 FFFC                  		dbf	d1,loc_6356
00007508 3038 F710                  		move.w	(v_bg2screenposx).w,d0
0000750C 0640 0000                  		addi.w	#0,d0
00007510 3438 F700                  		move.w	(v_screenposx).w,d2
00007514 0642 FE00                  		addi.w	#-$200,d2
00007518 9440                       		sub.w	d0,d2
0000751A 48C2                       		ext.l	d2
0000751C E182                       		asl.l	#8,d2
0000751E 85FC 0068                  		divs.w	#$68,d2
00007522 48C2                       		ext.l	d2
00007524 E182                       		asl.l	#8,d2
00007526 7600                       		moveq	#0,d3
00007528 3600                       		move.w	d0,d3
0000752A 323C 0047                  		move.w	#$47,d1
0000752E D244                       		add.w	d4,d1
00007530                            
00007530                            loc_6384:
00007530 3003                       		move.w	d3,d0
00007532 4440                       		neg.w	d0
00007534 22C0                       		move.l	d0,(a1)+
00007536 4843                       		swap	d3
00007538 D682                       		add.l	d2,d3
0000753A 4843                       		swap	d3
0000753C 51C9 FFF2                  		dbf	d1,loc_6384
00007540 4E75                       		rts	
00007542                            
00007542                            ; ===========================================================================
00007542                            ; ---------------------------------------------------------------------------
00007542                            ; Labyrinth Zone background layer deformation code
00007542                            ; ---------------------------------------------------------------------------
00007542                            
00007542                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007542                            
00007542                            
00007542                            Deform_LZ:
00007542                            	; plain background scroll
00007542 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007546 48C4                       		ext.l	d4
00007548 EF84                       		asl.l	#7,d4
0000754A 3A38 F73C                  		move.w	(v_scrshifty).w,d5
0000754E 48C5                       		ext.l	d5
00007550 EF85                       		asl.l	#7,d5
00007552 6100 0000                  		bsr.w	BGScroll_XY
00007556                            
00007556 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000755C 47F9 0000 0000             		lea	(Lz_Scroll_Data).l,a3
00007562 45F9 0000 0000             		lea	(Drown_WobbleData).l,a2
00007568 1438 F7D8                  		move.b	(v_lz_deform).w,d2
0000756C 1602                       		move.b	d2,d3
0000756E 0678 0080 F7D8             		addi.w	#$80,(v_lz_deform).w
00007574                            
00007574 D478 F70C                  		add.w	(v_bgscreenposy).w,d2
00007578 0242 00FF                  		andi.w	#$FF,d2
0000757C D678 F704                  		add.w	(v_screenposy).w,d3
00007580 0243 00FF                  		andi.w	#$FF,d3
00007584 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007588 323C 00DF                  		move.w	#$DF,d1
0000758C 3038 F700                  		move.w	(v_screenposx).w,d0
00007590 4440                       		neg.w	d0
00007592 3C00                       		move.w	d0,d6
00007594 4840                       		swap	d0
00007596 3038 F708                  		move.w	(v_bgscreenposx).w,d0
0000759A 4440                       		neg.w	d0
0000759C 3838 F646                  		move.w	(v_waterpos1).w,d4
000075A0 3A38 F704                  		move.w	(v_screenposy).w,d5
000075A4                            	; write normal scroll before meeting water position
000075A4                            	@normalLoop:		
000075A4 BA44                       		cmp.w	d4,d5	; is current y >= water y?
000075A6 6C00                       		bge.s	@underwaterLoop	; if yes, branch
000075A8 22C0                       		move.l	d0,(a1)+
000075AA 5245                       		addq.w	#1,d5
000075AC 5202                       		addq.b	#1,d2
000075AE 5203                       		addq.b	#1,d3
000075B0 51C9 FFF2                  		dbf	d1,@normalLoop
000075B4 4E75                       		rts
000075B6                            	; apply water deformation when underwater
000075B6                            	@underwaterLoop:
000075B6 1833 3000                  		move.b	(a3,d3),d4
000075BA 4884                       		ext.w	d4
000075BC D846                       		add.w	d6,d4
000075BE 32C4                       		move.w	d4,(a1)+
000075C0 1832 2000                  		move.b	(a2,d2),d4
000075C4 4884                       		ext.w	d4
000075C6 D840                       		add.w	d0,d4
000075C8 32C4                       		move.w	d4,(a1)+
000075CA 5202                       		addq.b	#1,d2
000075CC 5203                       		addq.b	#1,d3
000075CE 51C9 FFE6                  		dbf	d1,@underwaterLoop
000075D2 4E75                       		rts
000075D4                            
000075D4                            Lz_Scroll_Data:
000075D4 0101 0202 0303 0303 0202+  		dc.b $01,$01,$02,$02,$03,$03,$03,$03,$02,$02,$01,$01,$00,$00,$00,$00
000075E4 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000075F4 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007604 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007614 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007624 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007634 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007644 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007654 FFFF FEFE FDFD FDFD FEFE+  		dc.b $FF,$FF,$FE,$FE,$FD,$FD,$FD,$FD,$FE,$FE,$FF,$FF,$00,$00,$00,$00
00007664 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007674 0101 0202 0303 0303 0202+  		dc.b $01,$01,$02,$02,$03,$03,$03,$03,$02,$02,$01,$01,$00,$00,$00,$00
00007684 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007694 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000076A4 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000076B4 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000076C4 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000076D4                            ; End of function Deform_LZ
000076D4                            
000076D4                            ; ---------------------------------------------------------------------------
000076D4                            ; Marble Zone background layer deformation code
000076D4                            ; ---------------------------------------------------------------------------
000076D4                            
000076D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076D4                            
000076D4                            
000076D4                            Deform_MZ:
000076D4                            	; block 1 - dungeon interior
000076D4 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000076D8 48C4                       		ext.l	d4
000076DA ED84                       		asl.l	#6,d4
000076DC 2204                       		move.l	d4,d1
000076DE E384                       		asl.l	#1,d4
000076E0 D881                       		add.l	d1,d4
000076E2 7C02                       		moveq	#2,d6
000076E4 6100 0000                  		bsr.w	BGScroll_Block1
000076E8                            	; block 3 - mountains
000076E8 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000076EC 48C4                       		ext.l	d4
000076EE ED84                       		asl.l	#6,d4
000076F0 7C06                       		moveq	#6,d6
000076F2 6100 0000                  		bsr.w	BGScroll_Block3
000076F6                            	; block 2 - bushes & antique buildings
000076F6 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000076FA 48C4                       		ext.l	d4
000076FC EF84                       		asl.l	#7,d4
000076FE 7C04                       		moveq	#4,d6
00007700 6100 0000                  		bsr.w	BGScroll_Block2
00007704                            	; calculate y-position of background
00007704 303C 0200                  		move.w	#$200,d0	; start with 512px, ignoring 2 chunks
00007708 3238 F704                  		move.w	(v_screenposy).w,d1
0000770C 0441 01C8                  		subi.w	#$1C8,d1	; 0% scrolling when y <= 56px 
00007710 6500                       		bcs.s	@noYscroll
00007712 3401                       		move.w	d1,d2
00007714 D241                       		add.w	d1,d1
00007716 D242                       		add.w	d2,d1
00007718 E441                       		asr.w	#2,d1
0000771A D041                       		add.w	d1,d0
0000771C                            	@noYscroll:
0000771C 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007720 31C0 F71C                  		move.w	d0,(v_bg3screenposy).w
00007724 6100 0000                  		bsr.w	BGScroll_YAbsolute
00007728 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000772E                            	; do something with redraw flags
0000772E 1038 F756                  		move.b	(v_bg1_scroll_flags).w,d0
00007732 8038 F758                  		or.b	(v_bg2_scroll_flags).w,d0
00007736 8138 F75A                  		or.b	d0,(v_bg3_scroll_flags).w
0000773A 4238 F756                  		clr.b	(v_bg1_scroll_flags).w
0000773E 4238 F758                  		clr.b	(v_bg2_scroll_flags).w
00007742                            	; calculate background scroll buffer
00007742 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007746 3438 F700                  		move.w	(v_screenposx).w,d2
0000774A 4442                       		neg.w	d2
0000774C 3002                       		move.w	d2,d0
0000774E E440                       		asr.w	#2,d0
00007750 9042                       		sub.w	d2,d0
00007752 48C0                       		ext.l	d0
00007754 E780                       		asl.l	#3,d0
00007756 81FC 0005                  		divs.w	#5,d0
0000775A 48C0                       		ext.l	d0
0000775C E980                       		asl.l	#4,d0
0000775E E180                       		asl.l	#8,d0
00007760 7600                       		moveq	#0,d3
00007762 3602                       		move.w	d2,d3
00007764 E243                       		asr.w	#1,d3
00007766 323C 0004                  		move.w	#4,d1
0000776A                            	@cloudLoop:		
0000776A 32C3                       		move.w	d3,(a1)+
0000776C 4843                       		swap	d3
0000776E D680                       		add.l	d0,d3
00007770 4843                       		swap	d3
00007772 51C9 FFF6                  		dbf	d1,@cloudLoop
00007776                            
00007776 3038 F718                  		move.w	(v_bg3screenposx).w,d0
0000777A 4440                       		neg.w	d0
0000777C 323C 0001                  		move.w	#1,d1
00007780                            	@mountainLoop:		
00007780 32C0                       		move.w	d0,(a1)+
00007782 51C9 FFFC                  		dbf	d1,@mountainLoop
00007786                            
00007786 3038 F710                  		move.w	(v_bg2screenposx).w,d0
0000778A 4440                       		neg.w	d0
0000778C 323C 0008                  		move.w	#8,d1
00007790                            	@bushLoop:		
00007790 32C0                       		move.w	d0,(a1)+
00007792 51C9 FFFC                  		dbf	d1,@bushLoop
00007796                            
00007796 3038 F708                  		move.w	(v_bgscreenposx).w,d0
0000779A 4440                       		neg.w	d0
0000779C 323C 000F                  		move.w	#$F,d1
000077A0                            	@interiorLoop:		
000077A0 32C0                       		move.w	d0,(a1)+
000077A2 51C9 FFFC                  		dbf	d1,@interiorLoop
000077A6                            
000077A6 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
000077AA 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
000077AE 0440 0200                  		subi.w	#$200,d0	; subtract 512px (unused 2 chunks)
000077B2 3400                       		move.w	d0,d2
000077B4 0C40 0100                  		cmpi.w	#$100,d0
000077B8 6500                       		bcs.s	@limitY
000077BA 303C 0100                  		move.w	#$100,d0
000077BE                            	@limitY:
000077BE 0240 01F0                  		andi.w	#$1F0,d0
000077C2 E648                       		lsr.w	#3,d0
000077C4 45F2 0000                  		lea	(a2,d0),a2
000077C8 6000 0000                  		bra.w	Bg_Scroll_X
000077CC                            ; End of function Deform_MZ
000077CC                            
000077CC                            ; ---------------------------------------------------------------------------
000077CC                            ; Star Light Zone background layer deformation code
000077CC                            ; ---------------------------------------------------------------------------
000077CC                            
000077CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000077CC                            
000077CC                            
000077CC                            Deform_SLZ:
000077CC                            	; vertical scrolling
000077CC 3A38 F73C                  		move.w	(v_scrshifty).w,d5
000077D0 48C5                       		ext.l	d5
000077D2 EF85                       		asl.l	#7,d5
000077D4 6100 0000                  		bsr.w	Bg_Scroll_Y
000077D8 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000077DE                            	; calculate background scroll buffer
000077DE 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
000077E2 3438 F700                  		move.w	(v_screenposx).w,d2
000077E6 4442                       		neg.w	d2
000077E8 3002                       		move.w	d2,d0
000077EA E640                       		asr.w	#3,d0
000077EC 9042                       		sub.w	d2,d0
000077EE 48C0                       		ext.l	d0
000077F0 E980                       		asl.l	#4,d0
000077F2 81FC 001C                  		divs.w	#$1C,d0
000077F6 48C0                       		ext.l	d0
000077F8 E980                       		asl.l	#4,d0
000077FA E180                       		asl.l	#8,d0
000077FC 7600                       		moveq	#0,d3
000077FE 3602                       		move.w	d2,d3
00007800 323C 001B                  		move.w	#$1B,d1
00007804                            	@starLoop:		
00007804 32C3                       		move.w	d3,(a1)+
00007806 4843                       		swap	d3
00007808 D680                       		add.l	d0,d3
0000780A 4843                       		swap	d3
0000780C 51C9 FFF6                  		dbf	d1,@starLoop
00007810                            
00007810 3002                       		move.w	d2,d0
00007812 E640                       		asr.w	#3,d0
00007814 3200                       		move.w	d0,d1
00007816 E241                       		asr.w	#1,d1
00007818 D041                       		add.w	d1,d0
0000781A 323C 0004                  		move.w	#4,d1
0000781E                            	@buildingLoop1:		; distant black buildings
0000781E 32C0                       		move.w	d0,(a1)+
00007820 51C9 FFFC                  		dbf	d1,@buildingLoop1
00007824                            
00007824 3002                       		move.w	d2,d0
00007826 E440                       		asr.w	#2,d0
00007828 323C 0004                  		move.w	#4,d1
0000782C                            	@buildingLoop2:		; closer buildings
0000782C 32C0                       		move.w	d0,(a1)+
0000782E 51C9 FFFC                  		dbf	d1,@buildingLoop2
00007832                            
00007832 3002                       		move.w	d2,d0
00007834 E240                       		asr.w	#1,d0
00007836 323C 001D                  		move.w	#$1D,d1
0000783A                            	@bottomLoop:		; bottom part of background
0000783A 32C0                       		move.w	d0,(a1)+
0000783C 51C9 FFFC                  		dbf	d1,@bottomLoop
00007840                            
00007840 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007844 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007848 3400                       		move.w	d0,d2
0000784A 0440 00C0                  		subi.w	#$C0,d0
0000784E 0240 03F0                  		andi.w	#$3F0,d0
00007852 E648                       		lsr.w	#3,d0
00007854 45F2 0000                  		lea	(a2,d0),a2
00007858                            ;-------------------------------------------------------------------------------
00007858                            ;-------------------------------------------------------------------------------
00007858                            Bg_Scroll_X:
00007858 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
0000785C 323C 000E                  		move.w	#$E,d1
00007860 3038 F700                  		move.w	(v_screenposx).w,d0
00007864 4440                       		neg.w	d0
00007866 4840                       		swap	d0
00007868 0242 000F                  		andi.w	#$F,d2
0000786C D442                       		add.w	d2,d2
0000786E 301A                       		move.w	(a2)+,d0
00007870 4EFB 2000                  		jmp	@pixelJump(pc,d2.w)		; skip pixels for first row
00007874                            	@blockLoop:
00007874 301A                       		move.w	(a2)+,d0
00007876                            	@pixelJump:		
00007876 22C0                       		move.l	d0,(a1)+
00007878 22C0                       		move.l	d0,(a1)+
0000787A 22C0                       		move.l	d0,(a1)+
0000787C 22C0                       		move.l	d0,(a1)+
0000787E 22C0                       		move.l	d0,(a1)+
00007880 22C0                       		move.l	d0,(a1)+
00007882 22C0                       		move.l	d0,(a1)+
00007884 22C0                       		move.l	d0,(a1)+
00007886 22C0                       		move.l	d0,(a1)+
00007888 22C0                       		move.l	d0,(a1)+
0000788A 22C0                       		move.l	d0,(a1)+
0000788C 22C0                       		move.l	d0,(a1)+
0000788E 22C0                       		move.l	d0,(a1)+
00007890 22C0                       		move.l	d0,(a1)+
00007892 22C0                       		move.l	d0,(a1)+
00007894 22C0                       		move.l	d0,(a1)+
00007896 51C9 FFDC                  		dbf	d1,@blockLoop
0000789A 4E75                       		rts
0000789C                            
0000789C                            ; ---------------------------------------------------------------------------
0000789C                            ; Spring Yard Zone background layer deformation	code
0000789C                            ; ---------------------------------------------------------------------------
0000789C                            
0000789C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000789C                            
0000789C                            
0000789C                            Deform_SYZ:
0000789C                            	; vertical scrolling
0000789C 3A38 F73C                  		move.w	(v_scrshifty).w,d5
000078A0 48C5                       		ext.l	d5
000078A2 E985                       		asl.l	#4,d5
000078A4 2205                       		move.l	d5,d1
000078A6 E385                       		asl.l	#1,d5
000078A8 DA81                       		add.l	d1,d5
000078AA 6100 0000                  		bsr.w	Bg_Scroll_Y
000078AE 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000078B4                            	; calculate background scroll buffer
000078B4 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
000078B8 3438 F700                  		move.w	(v_screenposx).w,d2
000078BC 4442                       		neg.w	d2
000078BE 3002                       		move.w	d2,d0
000078C0 E640                       		asr.w	#3,d0
000078C2 9042                       		sub.w	d2,d0
000078C4 48C0                       		ext.l	d0
000078C6 E780                       		asl.l	#3,d0
000078C8 81FC 0008                  		divs.w	#8,d0
000078CC 48C0                       		ext.l	d0
000078CE E980                       		asl.l	#4,d0
000078D0 E180                       		asl.l	#8,d0
000078D2 7600                       		moveq	#0,d3
000078D4 3602                       		move.w	d2,d3
000078D6 E243                       		asr.w	#1,d3
000078D8 323C 0007                  		move.w	#7,d1
000078DC                            	@cloudLoop:		
000078DC 32C3                       		move.w	d3,(a1)+
000078DE 4843                       		swap	d3
000078E0 D680                       		add.l	d0,d3
000078E2 4843                       		swap	d3
000078E4 51C9 FFF6                  		dbf	d1,@cloudLoop
000078E8                            
000078E8 3002                       		move.w	d2,d0
000078EA E640                       		asr.w	#3,d0
000078EC 323C 0004                  		move.w	#4,d1
000078F0                            	@mountainLoop:		
000078F0 32C0                       		move.w	d0,(a1)+
000078F2 51C9 FFFC                  		dbf	d1,@mountainLoop
000078F6                            
000078F6 3002                       		move.w	d2,d0
000078F8 E440                       		asr.w	#2,d0
000078FA 323C 0005                  		move.w	#5,d1
000078FE                            	@buildingLoop:		
000078FE 32C0                       		move.w	d0,(a1)+
00007900 51C9 FFFC                  		dbf	d1,@buildingLoop
00007904                            
00007904 3002                       		move.w	d2,d0
00007906 3202                       		move.w	d2,d1
00007908 E241                       		asr.w	#1,d1
0000790A 9041                       		sub.w	d1,d0
0000790C 48C0                       		ext.l	d0
0000790E E980                       		asl.l	#4,d0
00007910 81FC 000E                  		divs.w	#$E,d0
00007914 48C0                       		ext.l	d0
00007916 E980                       		asl.l	#4,d0
00007918 E180                       		asl.l	#8,d0
0000791A 7600                       		moveq	#0,d3
0000791C 3602                       		move.w	d2,d3
0000791E E243                       		asr.w	#1,d3
00007920 323C 000D                  		move.w	#$D,d1
00007924                            	@bushLoop:		
00007924 32C3                       		move.w	d3,(a1)+
00007926 4843                       		swap	d3
00007928 D680                       		add.l	d0,d3
0000792A 4843                       		swap	d3
0000792C 51C9 FFF6                  		dbf	d1,@bushLoop
00007930                            
00007930 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007934 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007938 3400                       		move.w	d0,d2
0000793A 0240 01F0                  		andi.w	#$1F0,d0
0000793E E648                       		lsr.w	#3,d0
00007940 45F2 0000                  		lea	(a2,d0),a2
00007944 6000 FF12                  		bra.w	Bg_Scroll_X
00007948                            ; End of function Deform_SYZ
00007948                            
00007948                            ; ---------------------------------------------------------------------------
00007948                            ; Scrap	Brain Zone background layer deformation	code
00007948                            ; ---------------------------------------------------------------------------
00007948                            
00007948                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007948                            
00007948                            
00007948                            Deform_SBZ:
00007948 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000794C 48C4                       		ext.l	d4
0000794E ED84                       		asl.l	#6,d4
00007950 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007954 48C5                       		ext.l	d5
00007956 E985                       		asl.l	#4,d5
00007958 E385                       		asl.l	#1,d5
0000795A 6100 0000                  		bsr.w	BGScroll_XY
0000795E 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007964 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007968 323C 00DF                  		move.w	#223,d1
0000796C 3038 F700                  		move.w	(v_screenposx).w,d0
00007970 4440                       		neg.w	d0
00007972 4840                       		swap	d0
00007974 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007978 4440                       		neg.w	d0
0000797A                            
0000797A                            loc_6576:
0000797A 22C0                       		move.l	d0,(a1)+
0000797C 51C9 FFFC                  		dbf	d1,loc_6576
00007980 4E75                       		rts	
00007982                            ;-------------------------------------------------------------------------------
00007982                            Deform_SBZ2:;loc_68A2:
00007982 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007986 48C4                       		ext.l	d4
00007988 ED84                       		asl.l	#6,d4
0000798A 3A38 F73C                  		move.w	(v_scrshifty).w,d5
0000798E 48C5                       		ext.l	d5
00007990 E985                       		asl.l	#4,d5
00007992 E385                       		asl.l	#1,d5
00007994 6100 0000                  		bsr.w	BGScroll_XY
00007998 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000799E 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000079A2 323C 00DF                  		move.w	#223,d1
000079A6 3038 F700                  		move.w	(v_screenposx).w,d0
000079AA 4440                       		neg.w	d0
000079AC 4840                       		swap	d0
000079AE 3038 F708                  		move.w	(v_bgscreenposx).w,d0
000079B2 4440                       		neg.w	d0
000079B4                            
000079B4                            loc_6577:
000079B4 22C0                       		move.l	d0,(a1)+
000079B6 51C9 FFFC                  		dbf	d1,loc_6577
000079BA 4E75                       		rts	
000079BC                            
000079BC                            ; ---------------------------------------------------------------------------
000079BC                            ; Subroutine to	scroll the level horizontally as Sonic moves
000079BC                            ; ---------------------------------------------------------------------------
000079BC                            
000079BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079BC                            
000079BC                            
000079BC                            ScrollHoriz:
000079BC 3838 F700                  		move.w	(v_screenposx).w,d4 ; save old screen position
000079C0 6100                       		bsr.s	MoveScreenHoriz
000079C2 3038 F700                  		move.w	(v_screenposx).w,d0
000079C6 0240 0010                  		andi.w	#$10,d0
000079CA 1238 F74A                  		move.b	(v_fg_xblock).w,d1
000079CE B300                       		eor.b	d1,d0
000079D0 6600                       		bne.s	@return
000079D2 0A38 0010 F74A             		eori.b	#$10,(v_fg_xblock).w
000079D8 3038 F700                  		move.w	(v_screenposx).w,d0
000079DC 9044                       		sub.w	d4,d0		; compare new with old screen position
000079DE 6A00                       		bpl.s	@scrollRight
000079E0                            
000079E0 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w ; screen moves backward
000079E6 4E75                       		rts	
000079E8                            
000079E8                            	@scrollRight:
000079E8 08F8 0003 F754             		bset	#3,(v_fg_scroll_flags).w ; screen moves forward
000079EE                            
000079EE                            	@return:
000079EE 4E75                       		rts	
000079F0                            ; End of function ScrollHoriz
000079F0                            
000079F0                            
000079F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079F0                            
000079F0                            MoveScreenHoriz:
000079F0 4A38 FF8B                  		tst.b	($FFFFFF8B).w
000079F4 6700 0000                  		beq.w	@cont		
000079F8 4EF9 0000 0000             		jmp	MoveScreenHorizEXT
000079FE                            		
000079FE                            	@cont:		
000079FE 3238 C904                  		move.w	($FFFFC904).w,d1
00007A02 6700                       		beq.s	@cont1
00007A04 0441 0100                  		sub.w	#$100,d1
00007A08 31C1 C904                  		move.w	d1,($FFFFC904).w
00007A0C 7200                       		moveq	#0,d1
00007A0E 1238 C904                  		move.b	($FFFFC904).w,d1
00007A12 E509                       		lsl.b	#2,d1
00007A14 5801                       		addq.b	#4,d1
00007A16 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007A1A 9001                       		sub.b	d1,d0
00007A1C 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007A20 3031 0000                  		move.w	(a1,d0.w),d0
00007A24 0240 3FFF                  		and.w	#$3FFF,d0
00007A28 6000                       		bra.s	@cont2
00007A2A                            		
00007A2A                            @cont1:
00007A2A 3038 D008                  		move.w	($FFFFD008).w,d0
00007A2E                            		
00007A2E                            @cont2:
00007A2E 9078 F700                  		sub.w	($FFFFF700).w,d0
00007A32 0440 0090                          subi.w    #144,d0        ; is distance less than 144px?
00007A36 6500                               bcs.s    SH_BehindMid    ; if yes, branch
00007A38 0440 0010                          subi.w    #16,d0        ; is distance more than 160px?
00007A3C 6400                               bcc.s    SH_AheadOfMid    ; if yes, branch
00007A3E 4278 F73A                          clr.w    (v_scrshiftx).w
00007A42 4E75                               rts 
00007A44                            ; ===========================================================================
00007A44                            
00007A44                            SH_AheadOfMid:
00007A44 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007A48 6500                               bcs.s    SH_Ahead16    ; if yes, branch
00007A4A 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007A4E                            
00007A4E                                SH_Ahead16:
00007A4E D078 F700                          add.w    (v_screenposx).w,d0
00007A52 B078 F72A                          cmp.w    (v_limitright2).w,d0
00007A56 6D00                               blt.s    SH_SetScreen
00007A58 3038 F72A                          move.w    (v_limitright2).w,d0
00007A5C                            
00007A5C                            SH_SetScreen:
00007A5C 3200                               move.w    d0,d1
00007A5E 9278 F700                          sub.w    (v_screenposx).w,d1
00007A62 E141                               asl.w    #8,d1
00007A64 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007A68 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007A6C 4E75                               rts 
00007A6E                            ; ===========================================================================
00007A6E                            
00007A6E                            SH_BehindMid:
00007A6E 0C40 FFF0                  		cmpi.w	#-$10,d0
00007A72 6400                       		bcc.s	@cont
00007A74 303C FFF0                  		move.w	#-$10,d0	
00007A78                            
00007A78                            @cont:
00007A78 D078 F700                  		add.w	(v_screenposx).w,d0
00007A7C B078 F728                  		cmp.w	(v_limitleft2).w,d0
00007A80 6EDA                       		bgt.s	SH_SetScreen
00007A82 3038 F728                  		move.w	(v_limitleft2).w,d0
00007A86 60D4                       		bra.s	SH_SetScreen
00007A88                            ; End of function MoveScreenHoriz
00007A88                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00007A88                            
00007A88                            MoveScreenHorizEXT:
00007A88 3238 C904                  		move.w	($FFFFC904).w,d1
00007A8C 6700                       		beq.s	@cont1
00007A8E 0441 0100                  		sub.w	#$100,d1
00007A92 31C1 C904                  		move.w	d1,($FFFFC904).w
00007A96 7200                       		moveq	#0,d1
00007A98 1238 C904                  		move.b	($FFFFC904).w,d1
00007A9C E509                       		lsl.b	#2,d1
00007A9E 5801                       		addq.b	#4,d1
00007AA0 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007AA4 9001                       		sub.b	d1,d0
00007AA6 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007AAA 3031 0000                  		move.w	(a1,d0.w),d0
00007AAE 0240 3FFF                  		and.w	#$3FFF,d0
00007AB2 6000                       		bra.s	@cont2
00007AB4                            		
00007AB4                            @cont1:
00007AB4 3038 D008                  		move.w	($FFFFD008).w,d0
00007AB8                            		
00007AB8                            @cont2:
00007AB8 9078 F700                  		sub.w	($FFFFF700).w,d0
00007ABC 9078 F7A0                          sub.w    (v_camera_pan).w,d0    ; Horizontal camera pan value
00007AC0 6700                               beq.s    SHEXT_ProperlyFramed    ; if zero, branch
00007AC2 6500                               bcs.s    SHEXT_BehindMid    ; if less than, branch
00007AC4 6000                               bra.s    SHEXT_AheadOfMid    ; branch
00007AC6                            ; ===========================================================================
00007AC6                            
00007AC6                            SHEXT_ProperlyFramed:
00007AC6 4278 F73A                          clr.w    (v_scrshiftx).w
00007ACA 4E75                               rts 
00007ACC                            ; ===========================================================================
00007ACC                            
00007ACC                            SHEXT_AheadOfMid:
00007ACC 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007AD0 6D00                               blt.s    SHEXT_Ahead16    ; if yes, branch
00007AD2 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007AD6                            
00007AD6                            SHEXT_Ahead16:
00007AD6 D078 F700                          add.w    (v_screenposx).w,d0
00007ADA B078 F72A                          cmp.w    (v_limitright2).w,d0
00007ADE 6D00                               blt.s    SHEXT_SetScreen
00007AE0 3038 F72A                          move.w    (v_limitright2).w,d0
00007AE4                            
00007AE4                            SHEXT_SetScreen:
00007AE4 3200                               move.w    d0,d1
00007AE6 9278 F700                          sub.w    (v_screenposx).w,d1
00007AEA E141                               asl.w    #8,d1
00007AEC 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007AF0 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007AF4 4E75                               rts
00007AF6                            
00007AF6                            ; ===========================================================================
00007AF6                            
00007AF6                            SHEXT_BehindMid:
00007AF6 0C40 FFF0                          cmpi.w    #-16,d0        ; is Sonic within 16px of middle area?
00007AFA 6C00                               bge.s    SHEXT_Behind16    ; if no, branch
00007AFC 303C FFF0                          move.w    #-16,d0        ; set to -16 if less
00007B00                            
00007B00                            SHEXT_Behind16:
00007B00 D078 F700                          add.w    (v_screenposx).w,d0
00007B04 B078 F728                          cmp.w    (v_limitleft2).w,d0
00007B08 6EDA                               bgt.s    SHEXT_SetScreen
00007B0A 3038 F728                          move.w    (v_limitleft2).w,d0
00007B0E 60D4                               bra.s    SHEXT_SetScreen
00007B10                                  
00007B10                            ; End of function MoveScreenHoriz
00007B10                            
00007B10                            
00007B10                            ; ---------------------------------------------------------------------------
00007B10                            ; Subroutine to	scroll the level vertically as Sonic moves
00007B10                            ; ---------------------------------------------------------------------------
00007B10                            
00007B10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B10                            
00007B10                            
00007B10                            ScrollVertical:
00007B10 7200                       		moveq	#0,d1
00007B12 3038 D00C                  		move.w	(v_player+obY).w,d0
00007B16 9078 F704                  		sub.w	(v_screenposy).w,d0 ; Sonic's distance from top of screen
00007B1A 0838 0002 D022             		btst	#2,(v_player+obStatus).w ; is Sonic rolling?
00007B20 6700                       		beq.s	SV_NotRolling	; if not, branch
00007B22 5B40                       		subq.w	#5,d0
00007B24                            
00007B24                            	SV_NotRolling:
00007B24 0838 0001 D022             		btst	#1,(v_player+obStatus).w ; is Sonic jumping?
00007B2A 6700                       		beq.s	loc_664A	; if not, branch
00007B2C                            
00007B2C 0640 0020                  		addi.w	#32,d0
00007B30 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007B34 6500                       		bcs.s	loc_6696
00007B36 0440 0040                  		subi.w	#64,d0
00007B3A 6400                       		bcc.s	loc_6696
00007B3C 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007B40 6600                       		bne.s	loc_66A8
00007B42 6000                       		bra.s	loc_6656
00007B44                            ; ===========================================================================
00007B44                            
00007B44                            loc_664A:
00007B44 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007B48 6600                       		bne.s	loc_665C
00007B4A 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007B4E 6600                       		bne.s	loc_66A8
00007B50                            
00007B50                            loc_6656:
00007B50 4278 F73C                  		clr.w	(v_scrshifty).w
00007B54 4E75                       		rts	
00007B56                            ; ===========================================================================
00007B56                            
00007B56                            loc_665C:
00007B56 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w
00007B5C 6600                       		bne.s	loc_6684
00007B5E 3238 D020                  		move.w	(v_player+obInertia).w,d1
00007B62 6A00                       		bpl.s	loc_666C
00007B64 4441                       		neg.w	d1
00007B66                            
00007B66                            loc_666C:
00007B66 0C41 0800                  		cmpi.w	#$800,d1
00007B6A 6400                       		bcc.s	loc_6696
00007B6C 323C 0600                  		move.w	#$600,d1
00007B70 0C40 0006                  		cmpi.w	#6,d0
00007B74 6E00                       		bgt.s	loc_66F6
00007B76 0C40 FFFA                  		cmpi.w	#-6,d0
00007B7A 6D00                       		blt.s	loc_66C0
00007B7C 6000                       		bra.s	loc_66AE
00007B7E                            ; ===========================================================================
00007B7E                            
00007B7E                            loc_6684:
00007B7E 323C 0200                  		move.w	#$200,d1
00007B82 0C40 0002                  		cmpi.w	#2,d0
00007B86 6E00                       		bgt.s	loc_66F6
00007B88 0C40 FFFE                  		cmpi.w	#-2,d0
00007B8C 6D00                       		blt.s	loc_66C0
00007B8E 6000                       		bra.s	loc_66AE
00007B90                            ; ===========================================================================
00007B90                            
00007B90                            loc_6696:
00007B90 323C 1000                  		move.w	#$1000,d1
00007B94 0C40 0010                  		cmpi.w	#$10,d0
00007B98 6E00                       		bgt.s	loc_66F6
00007B9A 0C40 FFF0                  		cmpi.w	#-$10,d0
00007B9E 6D00                       		blt.s	loc_66C0
00007BA0 6000                       		bra.s	loc_66AE
00007BA2                            ; ===========================================================================
00007BA2                            
00007BA2                            loc_66A8:
00007BA2 7000                       		moveq	#0,d0
00007BA4 11C0 F75C                  		move.b	d0,(f_bgscrollvert).w
00007BA8                            
00007BA8                            loc_66AE:
00007BA8 7200                       		moveq	#0,d1
00007BAA 3200                       		move.w	d0,d1
00007BAC D278 F704                  		add.w	(v_screenposy).w,d1
00007BB0 4A40                       		tst.w	d0
00007BB2 6A00 0000                  		bpl.w	loc_6700
00007BB6 6000 0000                  		bra.w	loc_66CC
00007BBA                            ; ===========================================================================
00007BBA                            
00007BBA                            loc_66C0:
00007BBA 4441                       		neg.w	d1
00007BBC 48C1                       		ext.l	d1
00007BBE E181                       		asl.l	#8,d1
00007BC0 D2B8 F704                  		add.l	(v_screenposy).w,d1
00007BC4 4841                       		swap	d1
00007BC6                            
00007BC6                            loc_66CC:
00007BC6 B278 F72C                  		cmp.w	(v_limittop2).w,d1
00007BCA 6E00                       		bgt.s	loc_6724
00007BCC 0C41 FF00                  		cmpi.w	#-$100,d1
00007BD0 6E00                       		bgt.s	loc_66F0
00007BD2 0241 07FF                  		andi.w	#$7FF,d1
00007BD6 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00007BDC 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
00007BE2 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00007BE8 6000                       		bra.s	loc_6724
00007BEA                            ; ===========================================================================
00007BEA                            
00007BEA                            loc_66F0:
00007BEA 3238 F72C                  		move.w	(v_limittop2).w,d1
00007BEE 6000                       		bra.s	loc_6724
00007BF0                            ; ===========================================================================
00007BF0                            
00007BF0                            loc_66F6:
00007BF0 48C1                       		ext.l	d1
00007BF2 E181                       		asl.l	#8,d1
00007BF4 D2B8 F704                  		add.l	(v_screenposy).w,d1
00007BF8 4841                       		swap	d1
00007BFA                            
00007BFA                            loc_6700:
00007BFA B278 F72E                  		cmp.w	(v_limitbtm2).w,d1
00007BFE 6D00                       		blt.s	loc_6724
00007C00 0441 0800                  		subi.w	#$800,d1
00007C04 6500                       		bcs.s	loc_6720
00007C06 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00007C0C 0478 0800 F704             		subi.w	#$800,(v_screenposy).w
00007C12 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00007C18 6000                       		bra.s	loc_6724
00007C1A                            ; ===========================================================================
00007C1A                            
00007C1A                            loc_6720:
00007C1A 3238 F72E                  		move.w	(v_limitbtm2).w,d1
00007C1E                            
00007C1E                            loc_6724:
00007C1E 3838 F704                  		move.w	(v_screenposy).w,d4
00007C22 4841                       		swap	d1
00007C24 2601                       		move.l	d1,d3
00007C26 96B8 F704                  		sub.l	(v_screenposy).w,d3
00007C2A E09B                       		ror.l	#8,d3
00007C2C 31C3 F73C                  		move.w	d3,(v_scrshifty).w
00007C30 21C1 F704                  		move.l	d1,(v_screenposy).w
00007C34 3038 F704                  		move.w	(v_screenposy).w,d0
00007C38 0240 0010                  		andi.w	#$10,d0
00007C3C 1238 F74B                  		move.b	(v_fg_yblock).w,d1
00007C40 B300                       		eor.b	d1,d0
00007C42 6600                       		bne.s	@return
00007C44 0A38 0010 F74B             		eori.b	#$10,(v_fg_yblock).w
00007C4A 3038 F704                  		move.w	(v_screenposy).w,d0
00007C4E 9044                       		sub.w	d4,d0
00007C50 6A00                       		bpl.s	@scrollBottom
00007C52 08F8 0000 F754             		bset	#0,(v_fg_scroll_flags).w
00007C58 4E75                       		rts	
00007C5A                            ; ===========================================================================
00007C5A                            
00007C5A                            	@scrollBottom:
00007C5A 08F8 0001 F754             		bset	#1,(v_fg_scroll_flags).w
00007C60                            
00007C60                            	@return:
00007C60 4E75                       		rts	
00007C62                            ; End of function ScrollVertical
00007C62                            
00007C62                            
00007C62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C62                            ; Scrolls background and sets redraw flags.
00007C62                            ; d4 - background x offset * $10000
00007C62                            ; d5 - background y offset * $10000
00007C62                            
00007C62                            BGScroll_XY:
00007C62 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00007C66 2002                       		move.l	d2,d0
00007C68 D084                       		add.l	d4,d0
00007C6A 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00007C6E 2200                       		move.l	d0,d1
00007C70 4841                       		swap	d1
00007C72 0241 0010                  		andi.w	#$10,d1
00007C76 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00007C7A B701                       		eor.b	d3,d1
00007C7C 6600                       		bne.s	BGScroll_YRelative	; no change in Y
00007C7E 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00007C84 9082                       		sub.l	d2,d0	; new - old
00007C86 6A00                       		bpl.s	@scrollRight
00007C88 08F8 0002 F756             		bset	#2,(v_bg1_scroll_flags).w
00007C8E 6000                       		bra.s	BGScroll_YRelative
00007C90                            	@scrollRight:
00007C90 08F8 0003 F756             		bset	#3,(v_bg1_scroll_flags).w
00007C96                            BGScroll_YRelative:
00007C96 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00007C9A 2003                       		move.l	d3,d0
00007C9C D085                       		add.l	d5,d0
00007C9E 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00007CA2 2200                       		move.l	d0,d1
00007CA4 4841                       		swap	d1
00007CA6 0241 0010                  		andi.w	#$10,d1
00007CAA 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007CAE B501                       		eor.b	d2,d1
00007CB0 6600                       		bne.s	@return
00007CB2 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007CB8 9083                       		sub.l	d3,d0
00007CBA 6A00                       		bpl.s	@scrollBottom
00007CBC 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00007CC2 4E75                       		rts
00007CC4                            	@scrollBottom:
00007CC4 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00007CCA                            	@return:
00007CCA 4E75                       		rts
00007CCC                            ; End of function BGScroll_XY
00007CCC                            
00007CCC                            Bg_Scroll_Y:
00007CCC 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00007CD0 2003                       		move.l	d3,d0
00007CD2 D085                       		add.l	d5,d0
00007CD4 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00007CD8 2200                       		move.l	d0,d1
00007CDA 4841                       		swap	d1
00007CDC 0241 0010                  		andi.w	#$10,d1
00007CE0 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007CE4 B501                       		eor.b	d2,d1
00007CE6 6600                       		bne.s	@return
00007CE8 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007CEE 9083                       		sub.l	d3,d0
00007CF0 6A00                       		bpl.s	@scrollBottom
00007CF2 08F8 0004 F756             		bset	#4,(v_bg1_scroll_flags).w
00007CF8 4E75                       		rts
00007CFA                            	@scrollBottom:
00007CFA 08F8 0005 F756             		bset	#5,(v_bg1_scroll_flags).w
00007D00                            	@return:
00007D00 4E75                       		rts
00007D02                            
00007D02                            
00007D02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D02                            
00007D02                            
00007D02                            BGScroll_YAbsolute:
00007D02 3638 F70C                  		move.w	(v_bgscreenposy).w,d3
00007D06 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007D0A 3200                       		move.w	d0,d1
00007D0C 0241 0010                  		andi.w	#$10,d1
00007D10 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007D14 B501                       		eor.b	d2,d1
00007D16 6600                       		bne.s	@return
00007D18 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007D1E 9043                       		sub.w	d3,d0
00007D20 6A00                       		bpl.s	@scrollBottom
00007D22 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00007D28 4E75                       		rts
00007D2A                            	@scrollBottom:
00007D2A 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00007D30                            	@return:
00007D30 4E75                       		rts
00007D32                            ; End of function BGScroll_YAbsolute
00007D32                            
00007D32                            
00007D32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D32                            ; d6 - bit to set for redraw
00007D32                            
00007D32                            BGScroll_Block1:
00007D32 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00007D36 2002                       		move.l	d2,d0
00007D38 D084                       		add.l	d4,d0
00007D3A 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00007D3E 2200                       		move.l	d0,d1
00007D40 4841                       		swap	d1
00007D42 0241 0010                  		andi.w	#$10,d1
00007D46 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00007D4A B701                       		eor.b	d3,d1
00007D4C 6600                       		bne.s	@return
00007D4E 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00007D54 9082                       		sub.l	d2,d0
00007D56 6A00                       		bpl.s	@scrollRight
00007D58 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00007D5C 6000                       		bra.s	@return
00007D5E                            	@scrollRight:
00007D5E 5206                       		addq.b	#1,d6
00007D60 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00007D64                            	@return:
00007D64 4E75                       		rts
00007D66                            ; End of function BGScroll_Block1
00007D66                            
00007D66                            
00007D66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D66                            
00007D66                            
00007D66                            BGScroll_Block2:
00007D66 2438 F710                  		move.l	(v_bg2screenposx).w,d2
00007D6A 2002                       		move.l	d2,d0
00007D6C D084                       		add.l	d4,d0
00007D6E 21C0 F710                  		move.l	d0,(v_bg2screenposx).w
00007D72 2200                       		move.l	d0,d1
00007D74 4841                       		swap	d1
00007D76 0241 0010                  		andi.w	#$10,d1
00007D7A 1638 F74E                  		move.b	(v_bg2_xblock).w,d3
00007D7E B701                       		eor.b	d3,d1
00007D80 6600                       		bne.s	@return
00007D82 0A38 0010 F74E             		eori.b	#$10,(v_bg2_xblock).w
00007D88 9082                       		sub.l	d2,d0
00007D8A 6A00                       		bpl.s	@scrollRight
00007D8C 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00007D90 6000                       		bra.s	@return
00007D92                            	@scrollRight:
00007D92 5206                       		addq.b	#1,d6
00007D94 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00007D98                            	@return:
00007D98 4E75                       		rts
00007D9A                            ;-------------------------------------------------------------------------------
00007D9A                            BGScroll_Block3:
00007D9A 2438 F718                  		move.l	(v_bg3screenposx).w,d2
00007D9E 2002                       		move.l	d2,d0
00007DA0 D084                       		add.l	d4,d0
00007DA2 21C0 F718                  		move.l	d0,(v_bg3screenposx).w
00007DA6 2200                       		move.l	d0,d1
00007DA8 4841                       		swap	d1
00007DAA 0241 0010                  		andi.w	#$10,d1
00007DAE 1638 F750                  		move.b	(v_bg3_xblock).w,d3
00007DB2 B701                       		eor.b	d3,d1
00007DB4 6600                       		bne.s	@return
00007DB6 0A38 0010 F750             		eori.b	#$10,(v_bg3_xblock).w
00007DBC 9082                       		sub.l	d2,d0
00007DBE 6A00                       		bpl.s	@scrollRight
00007DC0 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00007DC4 6000                       		bra.s	@return
00007DC6                            	@scrollRight:
00007DC6 5206                       		addq.b	#1,d6
00007DC8 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00007DCC                            	@return:
00007DCC 4E75                       		rts
00007DCC 4E75                       		rts
00007DCE                            
00007DCE                            
00007DCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DCE                            
00007DCE                            ; sub_6886:
00007DCE                            LoadTilesAsYouMove_BGOnly:
00007DCE 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00007DD4 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00007DDA 45F8 F756                  		lea	(v_bg1_scroll_flags).w,a2
00007DDE 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00007DE2 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00007DE6 343C 6000                  		move.w	#$6000,d2
00007DEA 6100 0000                  		bsr.w	DrawBGScrollBlock1
00007DEE 45F8 F758                  		lea	(v_bg2_scroll_flags).w,a2
00007DF2 47F8 F710                  		lea	(v_bg2screenposx).w,a3
00007DF6 6000 0000                  		bra.w	DrawBGScrollBlock2
00007DFA                            ; End of function sub_6886
00007DFA                            
00007DFA                            ; ---------------------------------------------------------------------------
00007DFA                            ; Subroutine to	display	correct	tiles as you move
00007DFA                            ; ---------------------------------------------------------------------------
00007DFA                            
00007DFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DFA                            
00007DFA                            
00007DFA                            LoadTilesAsYouMove:
00007DFA 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00007E00 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00007E06                            		; First, update the background
00007E06 45F8 FF32                  		lea	(v_bg1_scroll_flags_dup).w,a2	; Scroll block 1 scroll flags
00007E0A 47F8 FF18                  		lea	(v_bgscreenposx_dup).w,a3	; Scroll block 1 X coordinate
00007E0E 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00007E12 343C 6000                  		move.w	#$6000,d2			; VRAM thing for selecting Plane B
00007E16 6100 0000                  		bsr.w	DrawBGScrollBlock1
00007E1A 45F8 FF34                  		lea	(v_bg2_scroll_flags_dup).w,a2	; Scroll block 2 scroll flags
00007E1E 47F8 FF20                  		lea	(v_bg2screenposx_dup).w,a3	; Scroll block 2 X coordinate
00007E22 6100 0000                  		bsr.w	DrawBGScrollBlock2
00007E26                            		; REV01 added a third scroll block, though, technically,
00007E26                            		; the RAM for it was already there in REV00
00007E26 45F8 FF36                  		lea	(v_bg3_scroll_flags_dup).w,a2	; Scroll block 3 scroll flags
00007E2A 47F8 FF28                  		lea	(v_bg3screenposx_dup).w,a3	; Scroll block 3 X coordinate
00007E2E 6100 0000                  		bsr.w	DrawBGScrollBlock3
00007E32                            		; Then, update the foreground
00007E32 45F8 FF30                  		lea	(v_fg_scroll_flags_dup).w,a2	; Foreground scroll flags
00007E36 47F8 FF10                  		lea	(v_screenposx_dup).w,a3		; Foreground X coordinate
00007E3A 49F8 A400                  		lea	(v_lvllayout).w,a4
00007E3E 343C 4000                  		move.w	#$4000,d2			; VRAM thing for selecting Plane A
00007E42                            		; The FG's update function is inlined here
00007E42 4A12                       		tst.b	(a2)
00007E44 6700                       		beq.s	locret_6952	; If there are no flags set, nothing needs updating
00007E46 0892 0000                  		bclr	#0,(a2)
00007E4A 6700                       		beq.s	loc_6908
00007E4C                            		; Draw new tiles at the top
00007E4C 78F0                       		moveq	#-16,d4	; Y coordinate. Note that 16 is the size of a block in pixels
00007E4E 7AF0                       		moveq	#-16,d5 ; X coordinate
00007E50 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007E54 78F0                       		moveq	#-16,d4 ; Y coordinate
00007E56 7AF0                       		moveq	#-16,d5 ; X coordinate
00007E58 6100 0000                  		bsr.w	DrawBlocks_LR
00007E5C                            
00007E5C                            loc_6908:
00007E5C 0892 0001                  		bclr	#1,(a2)
00007E60 6700                       		beq.s	loc_6922
00007E62                            		; Draw new tiles at the bottom
00007E62 383C 00E0                  		move.w	#224,d4	; Start at bottom of the screen. Since this draws from top to bottom, we don't need 224+16
00007E66 7AF0                       		moveq	#-16,d5
00007E68 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007E6C 383C 00E0                  		move.w	#224,d4
00007E70 7AF0                       		moveq	#-16,d5
00007E72 6100 0000                  		bsr.w	DrawBlocks_LR
00007E76                            
00007E76                            loc_6922:
00007E76 0892 0002                  		bclr	#2,(a2)
00007E7A 6700                       		beq.s	loc_6938
00007E7C                            		; Draw new tiles on the left
00007E7C 78F0                       		moveq	#-16,d4
00007E7E 7AF0                       		moveq	#-16,d5
00007E80 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007E84 78F0                       		moveq	#-16,d4
00007E86 7AF0                       		moveq	#-16,d5
00007E88 6100 0000                  		bsr.w	DrawBlocks_TB
00007E8C                            
00007E8C                            loc_6938:
00007E8C 0892 0003                  		bclr	#3,(a2)
00007E90 6700                       		beq.s	locret_6952
00007E92                            		; Draw new tiles on the right
00007E92 78F0                       		moveq	#-16,d4
00007E94 3A3C 0140                  		move.w	#320,d5
00007E98 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007E9C 78F0                       		moveq	#-16,d4
00007E9E 3A3C 0140                  		move.w	#320,d5
00007EA2 6100 0000                  		bsr.w	DrawBlocks_TB
00007EA6                            
00007EA6                            locret_6952:
00007EA6 4E75                       		rts	
00007EA8                            ; End of function LoadTilesAsYouMove
00007EA8                            
00007EA8                            
00007EA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007EA8                            
00007EA8                            ; sub_6954:
00007EA8                            DrawBGScrollBlock1:
00007EA8 4A12                       		tst.b	(a2)
00007EAA 6700 0000                  		beq.w	locret_69F2
00007EAE 0892 0000                  		bclr	#0,(a2)
00007EB2 6700                       		beq.s	loc_6972
00007EB4                            		; Draw new tiles at the top
00007EB4 78F0                       		moveq	#-16,d4
00007EB6 7AF0                       		moveq	#-16,d5
00007EB8 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007EBC 78F0                       		moveq	#-16,d4
00007EBE 7AF0                       		moveq	#-16,d5
00007EC0 6100 0000                  			bsr.w	DrawBlocks_LR
00007EC4                            
00007EC4                            loc_6972:
00007EC4 0892 0001                  		bclr	#1,(a2)
00007EC8 6700                       		beq.s	loc_698E
00007ECA                            		; Draw new tiles at the top
00007ECA 383C 00E0                  		move.w	#224,d4
00007ECE 7AF0                       		moveq	#-16,d5
00007ED0 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007ED4 383C 00E0                  		move.w	#224,d4
00007ED8 7AF0                       		moveq	#-16,d5
00007EDA 6100 0000                  			bsr.w	DrawBlocks_LR
00007EDE                            
00007EDE                            loc_698E:
00007EDE 0892 0002                  		bclr	#2,(a2)
00007EE2                            
00007EE2                            
00007EE2 6700                       			beq.s	locj_6D56
00007EE4                            			; Draw new tiles on the left
00007EE4 78F0                       			moveq	#-16,d4
00007EE6 7AF0                       			moveq	#-16,d5
00007EE8 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007EEC 78F0                       			moveq	#-16,d4
00007EEE 7AF0                       			moveq	#-16,d5
00007EF0 6100 0000                  			bsr.w	DrawBlocks_TB
00007EF4                            	locj_6D56:
00007EF4                            
00007EF4 0892 0003                  			bclr	#3,(a2)
00007EF8 6700                       			beq.s	locj_6D70
00007EFA                            			; Draw new tiles on the right
00007EFA 78F0                       			moveq	#-16,d4
00007EFC 3A3C 0140                  			move.w	#320,d5
00007F00 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007F04 78F0                       			moveq	#-16,d4
00007F06 3A3C 0140                  			move.w	#320,d5
00007F0A 6100 0000                  			bsr.w	DrawBlocks_TB
00007F0E                            	locj_6D70:
00007F0E                            
00007F0E 0892 0004                  			bclr	#4,(a2)
00007F12 6700                       			beq.s	locj_6D88
00007F14                            			; Draw entire row at the top
00007F14 78F0                       			moveq	#-16,d4
00007F16 7A00                       			moveq	#0,d5
00007F18 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00007F1C 78F0                       			moveq	#-16,d4
00007F1E 7A00                       			moveq	#0,d5
00007F20 7C1F                       			moveq	#(512/16)-1,d6
00007F22 6100 0000                  			bsr.w	DrawBlocks_LR_3
00007F26                            	locj_6D88:
00007F26                            
00007F26 0892 0005                  			bclr	#5,(a2)
00007F2A 6700                       			beq.s	locret_69F2
00007F2C                            			; Draw entire row at the bottom
00007F2C 383C 00E0                  			move.w	#224,d4
00007F30 7A00                       			moveq	#0,d5
00007F32 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00007F36 383C 00E0                  			move.w	#224,d4
00007F3A 7A00                       			moveq	#0,d5
00007F3C 7C1F                       			moveq	#(512/16)-1,d6
00007F3E 6100 0000                  			bsr.w	DrawBlocks_LR_3
00007F42                            
00007F42                            locret_69F2:
00007F42 4E75                       		rts	
00007F44                            ; End of function DrawBGScrollBlock1
00007F44                            
00007F44                            
00007F44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F44                            
00007F44                            ; Essentially, this draws everything that isn't scroll block 1
00007F44                            ; sub_69F4:
00007F44                            DrawBGScrollBlock2:
00007F44                            
00007F44 4A12                       			tst.b	(a2)
00007F46 6700 0000                  			beq.w	locj_6DF2
00007F4A 0C38 0005 FE10             			cmpi.b	#id_SBZ,(v_zone).w
00007F50 6700 0000                  			beq.w	Draw_SBz
00007F54 0892 0000                  			bclr	#0,(a2)
00007F58 6700                       			beq.s	locj_6DD2
00007F5A                            			; Draw new tiles on the left
00007F5A 383C 0070                  			move.w	#224/2,d4	; Draw the bottom half of the screen
00007F5E 7AF0                       			moveq	#-16,d5
00007F60 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007F64 383C 0070                  			move.w	#224/2,d4
00007F68 7AF0                       			moveq	#-16,d5
00007F6A 7C02                       			moveq	#3-1,d6		; Draw three rows... could this be a repurposed version of the above unused code?
00007F6C 6100 0000                  			bsr.w	DrawBlocks_TB_2
00007F70                            	locj_6DD2:
00007F70 0892 0001                  			bclr	#1,(a2)
00007F74 6700                       			beq.s	locj_6DF2
00007F76                            			; Draw new tiles on the right
00007F76 383C 0070                  			move.w	#224/2,d4
00007F7A 3A3C 0140                  			move.w	#320,d5
00007F7E 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007F82 383C 0070                  			move.w	#224/2,d4
00007F86 3A3C 0140                  			move.w	#320,d5
00007F8A 7C02                       			moveq	#3-1,d6
00007F8C 6100 0000                  			bsr.w	DrawBlocks_TB_2
00007F90                            	locj_6DF2:
00007F90 4E75                       			rts
00007F92                            ;===============================================================================
00007F92                            	locj_6DF4:
00007F92 0000 0000 0006 0606 0606+  			dc.b $00,$00,$00,$00,$00,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$04
00007FA2 0404 0404 0404 0202 0202+  			dc.b $04,$04,$04,$04,$04,$04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00007FB2 0200                       			dc.b $02,$00						
00007FB4                            ;===============================================================================
00007FB4                            	Draw_SBz:
00007FB4 78F0                       			moveq	#-16,d4
00007FB6 0892 0000                  			bclr	#0,(a2)
00007FBA 6600                       			bne.s	locj_6E28
00007FBC 0892 0001                  			bclr	#1,(a2)
00007FC0 6700                       			beq.s	locj_6E72
00007FC2 383C 00E0                  			move.w	#224,d4
00007FC6                            	locj_6E28:
00007FC6 41F9 0000 7F93             			lea	(locj_6DF4+1).l,a0
00007FCC 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00007FD0 D044                       			add.w	d4,d0
00007FD2 0240 01F0                  			andi.w	#$1F0,d0
00007FD6 E848                       			lsr.w	#4,d0
00007FD8 1030 0000                  			move.b	(a0,d0.w),d0
00007FDC 47F9 0000 0000             			lea	(locj_6FE4).l,a3
00007FE2 3673 0000                  			movea.w	(a3,d0.w),a3
00007FE6 6700                       			beq.s	locj_6E5E
00007FE8 7AF0                       			moveq	#-16,d5
00007FEA 48E7 0C00                  			movem.l	d4/d5,-(sp)
00007FEE 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007FF2 4CDF 0030                  			movem.l	(sp)+,d4/d5
00007FF6 6100 0000                  			bsr.w	DrawBlocks_LR
00007FFA 6000                       			bra.s	locj_6E72
00007FFC                            ;===============================================================================
00007FFC                            	locj_6E5E:
00007FFC 7A00                       			moveq	#0,d5
00007FFE 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008002 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008006 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000800A 7C1F                       			moveq	#(512/16)-1,d6
0000800C 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008010                            	locj_6E72:
00008010 4A12                       			tst.b	(a2)
00008012 6600                       			bne.s	locj_6E78
00008014 4E75                       			rts
00008016                            ;===============================================================================			
00008016                            	locj_6E78:
00008016 78F0                       			moveq	#-16,d4
00008018 7AF0                       			moveq	#-16,d5
0000801A 1012                       			move.b	(a2),d0
0000801C 0200 00A8                  			andi.b	#$A8,d0
00008020 6700                       			beq.s	locj_6E8C
00008022 E208                       			lsr.b	#1,d0
00008024 1480                       			move.b	d0,(a2)
00008026 3A3C 0140                  			move.w	#320,d5
0000802A                            	locj_6E8C:
0000802A 41F9 0000 7F92             			lea	(locj_6DF4).l,a0
00008030 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008034 0240 01F0                  			andi.w	#$1F0,d0
00008038 E848                       			lsr.w	#4,d0
0000803A 41F0 0000                  			lea	(a0,d0.w),a0
0000803E 6000 0000                  			bra.w	locj_6FEC						
00008042                            ;===============================================================================
00008042                            
00008042                            
00008042                            	; locj_6EA4:
00008042                            	DrawBGScrollBlock3:
00008042 4A12                       			tst.b	(a2)
00008044 6700 0000                  			beq.w	locj_6EF0
00008048 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
0000804E 6700 0000                  			beq.w	Draw_Mz
00008052 0892 0000                  			bclr	#0,(a2)
00008056 6700                       			beq.s	locj_6ED0
00008058                            			; Draw new tiles on the left
00008058 383C 0040                  			move.w	#$40,d4
0000805C 7AF0                       			moveq	#-16,d5
0000805E 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008062 383C 0040                  			move.w	#$40,d4
00008066 7AF0                       			moveq	#-16,d5
00008068 7C02                       			moveq	#3-1,d6
0000806A 6100 0000                  			bsr.w	DrawBlocks_TB_2
0000806E                            	locj_6ED0:
0000806E 0892 0001                  			bclr	#1,(a2)
00008072 6700                       			beq.s	locj_6EF0
00008074                            			; Draw new tiles on the right
00008074 383C 0040                  			move.w	#$40,d4
00008078 3A3C 0140                  			move.w	#320,d5
0000807C 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008080 383C 0040                  			move.w	#$40,d4
00008084 3A3C 0140                  			move.w	#320,d5
00008088 7C02                       			moveq	#3-1,d6
0000808A 6100 0000                  			bsr.w	DrawBlocks_TB_2
0000808E                            	locj_6EF0:
0000808E 4E75                       			rts
00008090                            	locj_6EF2:
00008090 0000 0000 0000 0606 0404+  			dc.b $00,$00,$00,$00,$00,$00,$06,$06,$04,$04,$04,$04,$04,$04,$04,$04
000080A0 0402 0202 0202 0202 0202+  			dc.b $04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000080B0 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000080C0 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000080D0 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000080E0 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000080F0 0200                       			dc.b $02,$00
000080F2                            ;===============================================================================
000080F2                            	Draw_Mz:
000080F2 78F0                       			moveq	#-16,d4
000080F4 0892 0000                  			bclr	#0,(a2)
000080F8 6600                       			bne.s	locj_6F66
000080FA 0892 0001                  			bclr	#1,(a2)
000080FE 6700                       			beq.s	locj_6FAE
00008100 383C 00E0                  			move.w	#224,d4
00008104                            	locj_6F66:
00008104 41F9 0000 8091             			lea	(locj_6EF2+1).l,a0
0000810A 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
0000810E 0440 0200                  			subi.w	#$200,d0
00008112 D044                       			add.w	d4,d0
00008114 0240 07F0                  			andi.w	#$7F0,d0
00008118 E848                       			lsr.w	#4,d0
0000811A 1030 0000                  			move.b	(a0,d0.w),d0
0000811E 367B 0000                  			movea.w	locj_6FE4(pc,d0.w),a3
00008122 6700                       			beq.s	locj_6F9A
00008124 7AF0                       			moveq	#-16,d5
00008126 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000812A 6100 0000                  			bsr.w	Calc_VRAM_Pos
0000812E 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008132 6100 0000                  			bsr.w	DrawBlocks_LR
00008136 6000                       			bra.s	locj_6FAE
00008138                            ;===============================================================================
00008138                            	locj_6F9A:
00008138 7A00                       			moveq	#0,d5
0000813A 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000813E 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008142 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008146 7C1F                       			moveq	#(512/16)-1,d6
00008148 6100 0000                  			bsr.w	DrawBlocks_LR_3
0000814C                            	locj_6FAE:
0000814C 4A12                       			tst.b	(a2)
0000814E 6600                       			bne.s	locj_6FB4
00008150 4E75                       			rts
00008152                            ;===============================================================================			
00008152                            	locj_6FB4:
00008152 78F0                       			moveq	#-16,d4
00008154 7AF0                       			moveq	#-16,d5
00008156 1012                       			move.b	(a2),d0
00008158 0200 00A8                  			andi.b	#$A8,d0
0000815C 6700                       			beq.s	locj_6FC8
0000815E E208                       			lsr.b	#1,d0
00008160 1480                       			move.b	d0,(a2)
00008162 3A3C 0140                  			move.w	#320,d5
00008166                            	locj_6FC8:
00008166 41F9 0000 8090             			lea	(locj_6EF2).l,a0
0000816C 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008170 0440 0200                  			subi.w	#$200,d0
00008174 0240 07F0                  			andi.w	#$7F0,d0
00008178 E848                       			lsr.w	#4,d0
0000817A 41F0 0000                  			lea	(a0,d0.w),a0
0000817E 6000 0000                  			bra.w	locj_6FEC
00008182                            ;===============================================================================			
00008182                            	locj_6FE4:
00008182 FF18 FF18 FF20 FF28        			dc.w v_bgscreenposx_dup, v_bgscreenposx_dup, v_bg2screenposx_dup, v_bg3screenposx_dup
0000818A                            	locj_6FEC:
0000818A 7C0F                       			moveq	#((224+16+16)/16)-1,d6
0000818C 2E3C 0080 0000             			move.l	#$800000,d7
00008192                            	locj_6FF4:			
00008192 7000                       			moveq	#0,d0
00008194 1018                       			move.b	(a0)+,d0
00008196 0112                       			btst	d0,(a2)
00008198 6700                       			beq.s	locj_701C
0000819A 367B 00E6                  			move.w	locj_6FE4(pc,d0.w),a3
0000819E 48E7 0C80                  			movem.l	d4/d5/a0,-(sp)
000081A2 48E7 0C00                  			movem.l	d4/d5,-(sp)
000081A6 6100 0000                  			bsr.w	GetBlockData
000081AA 4CDF 0030                  			movem.l	(sp)+,d4/d5
000081AE 6100 0000                  			bsr.w	Calc_VRAM_Pos
000081B2 6100 0000                  			bsr.w	DrawBlock
000081B6 4CDF 0130                  			movem.l	(sp)+,d4/d5/a0
000081BA                            	locj_701C:
000081BA 0644 0010                  			addi.w	#16,d4
000081BE 51CE FFD2                  			dbf	d6,locj_6FF4
000081C2 4212                       			clr.b	(a2)
000081C4 4E75                       			rts			
000081C6                            
000081C6                            
000081C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081C6                            
000081C6                            ; Don't be fooled by the name: this function's for drawing from left to right
000081C6                            ; when the camera's moving up or down
000081C6                            ; DrawTiles_LR:
000081C6                            DrawBlocks_LR:
000081C6 7C15                       		moveq	#((320+16+16)/16)-1,d6	; Draw the entire width of the screen + two extra columns
000081C8                            ; DrawTiles_LR_2:
000081C8                            DrawBlocks_LR_2:
000081C8 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
000081CE 2200                       		move.l	d0,d1
000081D0                            
000081D0                            	@loop:
000081D0 48E7 0C00                  		movem.l	d4-d5,-(sp)
000081D4 6100 0000                  		bsr.w	GetBlockData
000081D8 2001                       		move.l	d1,d0
000081DA 6100 0000                  		bsr.w	DrawBlock
000081DE 5801                       		addq.b	#4,d1		; Two tiles ahead
000081E0 0201 007F                  		andi.b	#$7F,d1		; Wrap around row
000081E4 4CDF 0030                  		movem.l	(sp)+,d4-d5
000081E8 0645 0010                  		addi.w	#16,d5		; Move X coordinate one block ahead
000081EC 51CE FFE2                  		dbf	d6,@loop
000081F0 4E75                       		rts
000081F2                            ; End of function DrawBlocks_LR
000081F2                            
000081F2                            ; DrawTiles_LR_3:
000081F2                            DrawBlocks_LR_3:
000081F2 2E3C 0080 0000             		move.l	#$800000,d7
000081F8 2200                       		move.l	d0,d1
000081FA                            
000081FA                            	@loop:
000081FA 48E7 0C00                  		movem.l	d4-d5,-(sp)
000081FE 6100 0000                  		bsr.w	GetBlockData_2
00008202 2001                       		move.l	d1,d0
00008204 6100 0000                  		bsr.w	DrawBlock
00008208 5801                       		addq.b	#4,d1
0000820A 0201 007F                  		andi.b	#$7F,d1
0000820E 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008212 0645 0010                  		addi.w	#16,d5
00008216 51CE FFE2                  		dbf	d6,@loop
0000821A 4E75                       		rts	
0000821C                            ; End of function DrawBlocks_LR_3
0000821C                            
0000821C                            
0000821C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000821C                            
0000821C                            ; Don't be fooled by the name: this function's for drawing from top to bottom
0000821C                            ; when the camera's moving left or right
0000821C                            ; DrawTiles_TB:
0000821C                            DrawBlocks_TB:
0000821C 7C0F                       		moveq	#((224+16+16)/16)-1,d6	; Draw the entire height of the screen + two extra rows
0000821E                            ; DrawTiles_TB_2:
0000821E                            DrawBlocks_TB_2:
0000821E 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
00008224 2200                       		move.l	d0,d1
00008226                            
00008226                            	@loop:
00008226 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000822A 6100 0000                  		bsr.w	GetBlockData
0000822E 2001                       		move.l	d1,d0
00008230 6100 0000                  		bsr.w	DrawBlock
00008234 0641 0100                  		addi.w	#$100,d1	; Two rows ahead
00008238 0241 0FFF                  		andi.w	#$FFF,d1	; Wrap around plane
0000823C 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008240 0644 0010                  		addi.w	#16,d4		; Move X coordinate one block ahead
00008244 51CE FFE0                  		dbf	d6,@loop
00008248 4E75                       		rts	
0000824A                            ; End of function DrawBlocks_TB_2
0000824A                            
0000824A                            
0000824A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000824A                            
0000824A                            ; Draws a block's worth of tiles
0000824A                            ; Parameters:
0000824A                            ; a0 = Pointer to block metadata (block index and X/Y flip)
0000824A                            ; a1 = Pointer to block
0000824A                            ; a5 = Pointer to VDP command port
0000824A                            ; a6 = Pointer to VDP data port
0000824A                            ; d0 = VRAM command to access plane
0000824A                            ; d2 = VRAM plane A/B specifier
0000824A                            ; d7 = Plane row delta
0000824A                            ; DrawTiles:
0000824A                            DrawBlock:
0000824A 8042                       		or.w	d2,d0	; OR in that plane A/B specifier to the VRAM command
0000824C 4840                       		swap	d0
0000824E 0810 0004                  		btst	#4,(a0)	; Check Y-flip bit
00008252 6600                       		bne.s	DrawFlipY
00008254 0810 0003                  		btst	#3,(a0)	; Check X-flip bit
00008258 6600                       		bne.s	DrawFlipX
0000825A 2A80                       		move.l	d0,(a5)
0000825C 2C99                       		move.l	(a1)+,(a6)	; Write top two tiles
0000825E D087                       		add.l	d7,d0		; Next row
00008260 2A80                       		move.l	d0,(a5)
00008262 2C99                       		move.l	(a1)+,(a6)	; Write bottom two tiles
00008264 4E75                       		rts	
00008266                            ; ===========================================================================
00008266                            
00008266                            DrawFlipX:
00008266 2A80                       		move.l	d0,(a5)
00008268 2819                       		move.l	(a1)+,d4
0000826A 0A84 0800 0800             		eori.l	#$8000800,d4	; Invert X-flip bits of each tile
00008270 4844                       		swap	d4		; Swap the tiles around
00008272 2C84                       		move.l	d4,(a6)		; Write top two tiles
00008274 D087                       		add.l	d7,d0		; Next row
00008276 2A80                       		move.l	d0,(a5)
00008278 2819                       		move.l	(a1)+,d4
0000827A 0A84 0800 0800             		eori.l	#$8000800,d4
00008280 4844                       		swap	d4
00008282 2C84                       		move.l	d4,(a6)		; Write bottom two tiles
00008284 4E75                       		rts	
00008286                            ; ===========================================================================
00008286                            
00008286                            DrawFlipY:
00008286 0810 0003                  		btst	#3,(a0)
0000828A 6600                       		bne.s	DrawFlipXY
0000828C 2A80                       		move.l	d0,(a5)
0000828E 2A19                       		move.l	(a1)+,d5
00008290 2819                       		move.l	(a1)+,d4
00008292 0A84 1000 1000             		eori.l	#$10001000,d4
00008298 2C84                       		move.l	d4,(a6)
0000829A D087                       		add.l	d7,d0
0000829C 2A80                       		move.l	d0,(a5)
0000829E 0A85 1000 1000             		eori.l	#$10001000,d5
000082A4 2C85                       		move.l	d5,(a6)
000082A6 4E75                       		rts	
000082A8                            ; ===========================================================================
000082A8                            
000082A8                            DrawFlipXY:
000082A8 2A80                       		move.l	d0,(a5)
000082AA 2A19                       		move.l	(a1)+,d5
000082AC 2819                       		move.l	(a1)+,d4
000082AE 0A84 1800 1800             		eori.l	#$18001800,d4
000082B4 4844                       		swap	d4
000082B6 2C84                       		move.l	d4,(a6)
000082B8 D087                       		add.l	d7,d0
000082BA 2A80                       		move.l	d0,(a5)
000082BC 0A85 1800 1800             		eori.l	#$18001800,d5
000082C2 4845                       		swap	d5
000082C4 2C85                       		move.l	d5,(a6)
000082C6 4E75                       		rts	
000082C8                            ; End of function DrawBlocks
000082C8                            
000082C8                            ; ===========================================================================
000082C8                            ; unused garbage
000082C8                            
000082C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082C8                            
000082C8                            ; Gets address of block at a certain coordinate
000082C8                            ; Parameters:
000082C8                            ; a4 = Pointer to level layout
000082C8                            ; d4 = Relative Y coordinate
000082C8                            ; d5 = Relative X coordinate
000082C8                            ; Returns:
000082C8                            ; a0 = Address of block metadata
000082C8                            ; a1 = Address of block
000082C8                            ; DrawBlocks:
000082C8                            GetBlockData:
000082C8 DA53                       			add.w	(a3),d5
000082CA                            	GetBlockData_2:
000082CA D86B 0004                  			add.w	4(a3),d4
000082CE 43F8 B000                  			lea	(v_16x16).w,a1
000082D2                            		; Turn Y coordinate into index into level layout
000082D2 3604                       		move.w	d4,d3
000082D4 E24B                       		lsr.w	#1,d3
000082D6 0243 0380                  		andi.w	#$380,d3
000082DA                            		; Turn X coordinate into index into level layout
000082DA E64D                       		lsr.w	#3,d5
000082DC 3005                       		move.w	d5,d0
000082DE EA48                       		lsr.w	#5,d0
000082E0 0240 007F                  		andi.w	#$7F,d0
000082E4                            		; Get chunk from level layout
000082E4 D043                       		add.w	d3,d0
000082E6 76FF                       		moveq	#-1,d3
000082E8 1634 0000                  		move.b	(a4,d0.w),d3
000082EC 6700                       		beq.s	locret_6C1E	; If chunk 00, just return a pointer to the first block (expected to be empty)
000082EE                            		; Turn chunk ID into index into chunk table
000082EE 5303                       		subq.b	#1,d3
000082F0 0243 007F                  		andi.w	#$7F,d3
000082F4 EE5B                       		ror.w	#7,d3
000082F6                            		; Turn Y coordinate into index into chunk
000082F6 D844                       		add.w	d4,d4
000082F8 0244 01E0                  		andi.w	#$1E0,d4
000082FC                            		; Turn X coordinate into index into chunk
000082FC 0245 001E                  		andi.w	#$1E,d5
00008300                            		; Get block metadata from chunk
00008300 D644                       		add.w	d4,d3
00008302 D645                       		add.w	d5,d3
00008304 2043                       		movea.l	d3,a0
00008306 3610                       		move.w	(a0),d3
00008308                            		; Turn block ID into address
00008308 0243 03FF                  		andi.w	#$3FF,d3
0000830C E74B                       		lsl.w	#3,d3
0000830E D2C3                       		adda.w	d3,a1
00008310                            
00008310                            locret_6C1E:
00008310 4E75                       		rts	
00008312                            ; End of function GetBlockData
00008312                            
00008312                            
00008312                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008312                            
00008312                            ; Produces a VRAM plane access command from coordinates
00008312                            ; Parameters:
00008312                            ; d4 = Relative Y coordinate
00008312                            ; d5 = Relative X coordinate
00008312                            ; Returns VDP command in d0
00008312                            Calc_VRAM_Pos:
00008312 DA53                       			add.w	(a3),d5
00008314                            	Calc_VRAM_Pos_2:
00008314 D86B 0004                  			add.w	4(a3),d4
00008318                            		; Floor the coordinates to the nearest pair of tiles (the size of a block).
00008318                            		; Also note that this wraps the value to the size of the plane:
00008318                            		; The plane is 64*8 wide, so wrap at $100, and it's 32*8 tall, so wrap at $200
00008318 0244 00F0                  		andi.w	#$F0,d4
0000831C 0245 01F0                  		andi.w	#$1F0,d5
00008320                            		; Transform the adjusted coordinates into a VDP command
00008320 E94C                       		lsl.w	#4,d4
00008322 E44D                       		lsr.w	#2,d5
00008324 D845                       		add.w	d5,d4
00008326 7003                       		moveq	#3,d0	; Highest bits of plane VRAM address
00008328 4840                       		swap	d0
0000832A 3004                       		move.w	d4,d0
0000832C 4E75                       		rts	
0000832E                            ; End of function Calc_VRAM_Pos
0000832E                            
0000832E                            
0000832E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000832E                            ; not used
0000832E                            
0000832E                            ; This is just like Calc_VRAM_Pos, but seemingly for an earlier
0000832E                            ; VRAM layout: the only difference is the high bits of the
0000832E                            ; plane's VRAM address, which are 10 instead of 11.
0000832E                            ; Both the foreground and background are at $C000 and $E000
0000832E                            ; respectively, so this one starting at $8000 makes no sense.
0000832E                            ; sub_6C3C:
0000832E                            Calc_VRAM_Pos_Unknown:
0000832E D86B 0004                  		add.w	4(a3),d4
00008332 DA53                       		add.w	(a3),d5
00008334 0244 00F0                  		andi.w	#$F0,d4
00008338 0245 01F0                  		andi.w	#$1F0,d5
0000833C E94C                       		lsl.w	#4,d4
0000833E E44D                       		lsr.w	#2,d5
00008340 D845                       		add.w	d5,d4
00008342 7002                       		moveq	#2,d0
00008344 4840                       		swap	d0
00008346 3004                       		move.w	d4,d0
00008348 4E75                       		rts	
0000834A                            ; End of function Calc_VRAM_Pos_Unknown
0000834A                            
0000834A                            ; ---------------------------------------------------------------------------
0000834A                            ; Subroutine to	load tiles as soon as the level	appears
0000834A                            ; ---------------------------------------------------------------------------
0000834A                            
0000834A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000834A                            
0000834A                            
0000834A                            LoadTilesFromStart:
0000834A 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00008350 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00008356 47F8 F700                  		lea	(v_screenposx).w,a3
0000835A 49F8 A400                  		lea	(v_lvllayout).w,a4
0000835E 343C 4000                  		move.w	#$4000,d2
00008362 6100                       		bsr.s	DrawChunks
00008364 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00008368 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
0000836C 343C 6000                  		move.w	#$6000,d2
00008370 4A38 FE10                  			tst.b	(v_zone).w
00008374 6700 0000                  			beq.w	Draw_GHz_Bg
00008378 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
0000837E 6700 0000                  			beq.w	Draw_Mz_Bg
00008382 0C78 0500 FE10             			cmpi.w	#(id_SBZ<<8)+0,(v_zone).w
00008388 6700 0000                  			beq.w	Draw_SBz_Bg
0000838C 0C38 0006 FE10             			cmpi.b	#id_EndZ,(v_zone).w
00008392 6700 0000                  			beq.w	Draw_GHz_Bg
00008396                            ; End of function LoadTilesFromStart
00008396                            
00008396                            
00008396                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008396                            
00008396                            
00008396                            DrawChunks:
00008396 78F0                       		moveq	#-16,d4
00008398 7C0F                       		moveq	#((224+16+16)/16)-1,d6
0000839A                            
0000839A                            	@loop:
0000839A 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000839E 7A00                       		moveq	#0,d5
000083A0 3204                       		move.w	d4,d1
000083A2 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
000083A6 3801                       		move.w	d1,d4
000083A8 7A00                       		moveq	#0,d5
000083AA 7C1F                       		moveq	#(512/16)-1,d6
000083AC 6100 FE1A                  		bsr.w	DrawBlocks_LR_2
000083B0 4CDF 0070                  		movem.l	(sp)+,d4-d6
000083B4 0644 0010                  		addi.w	#16,d4
000083B8 51CE FFE0                  		dbf	d6,@loop
000083BC 4E75                       		rts	
000083BE                            ; End of function DrawChunks
000083BE                            
000083BE                            	Draw_GHz_Bg:
000083BE 7800                       			moveq	#0,d4
000083C0 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000083C2                            	locj_7224:			
000083C2 48E7 0E00                  			movem.l	d4-d6,-(sp)
000083C6 41F9 0000 0000             			lea	(locj_724a),a0
000083CC 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000083D0 D044                       			add.w	d4,d0
000083D2 0240 00F0                  			andi.w	#$F0,d0
000083D6 6100 0000                  			bsr.w	locj_72Ba
000083DA 4CDF 0070                  			movem.l	(sp)+,d4-d6
000083DE 0644 0010                  			addi.w	#16,d4
000083E2 51CE FFDE                  			dbf	d6,locj_7224
000083E6 4E75                       			rts
000083E8                            	locj_724a:
000083E8 0000 0000 0606 0604 0404+  			dc.b $00,$00,$00,$00,$06,$06,$06,$04,$04,$04,$00,$00,$00,$00,$00,$00
000083F8                            ;-------------------------------------------------------------------------------
000083F8                            	Draw_Mz_Bg:;locj_725a:
000083F8 78F0                       			moveq	#-16,d4
000083FA 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000083FC                            	locj_725E:			
000083FC 48E7 0E00                  			movem.l	d4-d6,-(sp)
00008400 41FA FC8F                  			lea	(locj_6EF2+1),a0
00008404 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008408 0440 0200                  			subi.w	#$200,d0
0000840C D044                       			add.w	d4,d0
0000840E 0240 07F0                  			andi.w	#$7F0,d0
00008412 6100 0000                  			bsr.w	locj_72Ba
00008416 4CDF 0070                  			movem.l	(sp)+,d4-d6
0000841A 0644 0010                  			addi.w	#16,d4
0000841E 51CE FFDC                  			dbf	d6,locj_725E
00008422 4E75                       			rts
00008424                            ;-------------------------------------------------------------------------------
00008424                            	Draw_SBz_Bg:;locj_7288:
00008424 78F0                       			moveq	#-16,d4
00008426 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008428                            	locj_728C:			
00008428 48E7 0E00                  			movem.l	d4-d6,-(sp)
0000842C 41F8 7F93                  			lea	(locj_6DF4+1),a0
00008430 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008434 D044                       			add.w	d4,d0
00008436 0240 01F0                  			andi.w	#$1F0,d0
0000843A 6100 0000                  			bsr.w	locj_72Ba
0000843E 4CDF 0070                  			movem.l	(sp)+,d4-d6
00008442 0644 0010                  			addi.w	#16,d4
00008446 51CE FFE0                  			dbf	d6,locj_728C
0000844A 4E75                       			rts
0000844C                            ;-------------------------------------------------------------------------------
0000844C                            	locj_72B2:
0000844C F708 F708 F710 F718        			dc.w v_bgscreenposx, v_bgscreenposx, v_bg2screenposx, v_bg3screenposx
00008454                            	locj_72Ba:
00008454 E848                       			lsr.w	#4,d0
00008456 1030 0000                  			move.b	(a0,d0.w),d0
0000845A 367B 00F0                  			movea.w	locj_72B2(pc,d0.w),a3
0000845E 6700                       			beq.s	locj_72da
00008460 7AF0                       			moveq	#-16,d5
00008462 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008466 6100 FEAA                  			bsr.w	Calc_VRAM_Pos
0000846A 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000846E 6100 FD56                  			bsr.w	DrawBlocks_LR
00008472 6000                       			bra.s	locj_72EE
00008474                            	locj_72da:
00008474 7A00                       			moveq	#0,d5
00008476 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000847A 6100 FE98                  			bsr.w	Calc_VRAM_Pos_2
0000847E 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008482 7C1F                       			moveq	#(512/16)-1,d6
00008484 6100 FD6C                  			bsr.w	DrawBlocks_LR_3
00008488                            	locj_72EE:
00008488 4E75                       			rts
0000848A                            
0000848A                            ; ---------------------------------------------------------------------------
0000848A                            ; Subroutine to load basic level data
0000848A                            ; ---------------------------------------------------------------------------
0000848A                            
0000848A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000848A                            
0000848A                            
0000848A                            LevelDataLoad:
0000848A 7000                       		moveq	#0,d0
0000848C 1038 FE10                  		move.b	(v_zone).w,d0
00008490 E948                       		lsl.w	#4,d0
00008492 45F9 0000 0000             		lea	(LevelHeaders).l,a2
00008498 45F2 0000                  		lea	(a2,d0.w),a2
0000849C 2F0A                       		move.l	a2,-(sp)
0000849E 588A                       		addq.l	#4,a2
000084A0 205A                       		movea.l	(a2)+,a0
000084A2 43F8 B000                  		lea	(v_16x16).w,a1	; RAM address for 16x16 mappings
000084A6 303C 0000                  		move.w	#0,d0
000084AA 6100 942C                  		bsr.w	EniDec
000084AE 205A                       		movea.l	(a2)+,a0
000084B0 43F9 00FF 0000             		lea	(v_256x256).l,a1 ; RAM address for 256x256 mappings
000084B6 6100 959E                  		bsr.w	KosDec
000084BA 6100 0000                  		bsr.w	LevelLayoutLoad
000084BE 301A                       		move.w	(a2)+,d0
000084C0 3012                       		move.w	(a2),d0
000084C2 0240 00FF                  		andi.w	#$FF,d0
000084C6 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; is level SBZ3 (LZ4) ?
000084CC 6600                       		bne.s	@notSBZ3	; if not, branch
000084CE 700C                       		moveq	#palid_SBZ3,d0	; use SB3 palette
000084D0                            
000084D0                            	@notSBZ3:
000084D0 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2?
000084D6 6700                       		beq.s	@isSBZorFZ	; if yes, branch
000084D8 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; is level FZ?
000084DE 6600                       		bne.s	@normalpal	; if not, branch
000084E0                            
000084E0                            	@isSBZorFZ:
000084E0 700E                       		moveq	#palid_SBZ2,d0	; use SBZ2/FZ palette
000084E2                            
000084E2                            	@normalpal:
000084E2 6100 A120                  		bsr.w	PalLoad1	; load palette (based on d0)
000084E6 245F                       		movea.l	(sp)+,a2
000084E8 584A                       		addq.w	#4,a2		; read number for 2nd PLC
000084EA 7000                       		moveq	#0,d0
000084EC 1012                       		move.b	(a2),d0
000084EE 6700                       		beq.s	@skipPLC	; if 2nd PLC is 0 (i.e. the ending sequence), branch
000084F0 6100 9248                  		bsr.w	AddPLC		; load pattern load cues
000084F4                            
000084F4                            	@skipPLC:
000084F4 4E75                       		rts	
000084F6                            ; End of function LevelDataLoad
000084F6                            
000084F6                            ; ---------------------------------------------------------------------------
000084F6                            ; Level	layout loading subroutine
000084F6                            ; ---------------------------------------------------------------------------
000084F6                            
000084F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084F6                            
000084F6                            
000084F6                            LevelLayoutLoad:
000084F6 47F8 A400                  		lea	(v_lvllayout).w,a3
000084FA 323C 01FF                  		move.w	#$1FF,d1
000084FE 7000                       		moveq	#0,d0
00008500                            
00008500                            LevLoad_ClrRam:
00008500 26C0                       		move.l	d0,(a3)+
00008502 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($A400-A7FF)
00008506                            
00008506 47F8 A400                  		lea	(v_lvllayout).w,a3 ; RAM address for level layout
0000850A 7200                       		moveq	#0,d1
0000850C 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00008510 47F8 A440                  		lea	(v_lvllayout+$40).w,a3 ; RAM address for background layout
00008514 7202                       		moveq	#2,d1
00008516                            ; End of function LevelLayoutLoad
00008516                            
00008516                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00008516                            
00008516                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008516                            
00008516                            
00008516                            LevelLayoutLoad2:
00008516 3038 FE10                  		move.w	(v_zone).w,d0
0000851A ED08                       		lsl.b	#6,d0
0000851C EA48                       		lsr.w	#5,d0
0000851E 3400                       		move.w	d0,d2
00008520 D040                       		add.w	d0,d0
00008522 D042                       		add.w	d2,d0
00008524 D041                       		add.w	d1,d0
00008526 43F9 0000 0000             		lea	(Level_Index).l,a1
0000852C 3031 0000                  		move.w	(a1,d0.w),d0
00008530 43F1 0000                  		lea	(a1,d0.w),a1
00008534 7200                       		moveq	#0,d1
00008536 3401                       		move.w	d1,d2
00008538 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
0000853A 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
0000853C                            
0000853C                            LevLoad_NumRows:
0000853C 3001                       		move.w	d1,d0
0000853E 204B                       		movea.l	a3,a0
00008540                            
00008540                            LevLoad_Row:
00008540 10D9                       		move.b	(a1)+,(a0)+
00008542 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00008546 47EB 0080                  		lea	$80(a3),a3	; do next row
0000854A 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
0000854E 4E75                       		rts	
00008550                            ; End of function LevelLayoutLoad2
00008550                            
00008550                            		include	"_inc\DynamicLevelEvents.asm"
00008550                            ; ---------------------------------------------------------------------------
00008550                            ; Dynamic level events
00008550                            ; ---------------------------------------------------------------------------
00008550                            
00008550                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008550                            
00008550                            
00008550                            DynamicLevelEvents:
00008550 7000                       		moveq	#0,d0
00008552 1038 FE10                  		move.b	(v_zone).w,d0
00008556 D040                       		add.w	d0,d0
00008558 303B 0000                  		move.w	DLE_Index(pc,d0.w),d0
0000855C 4EBB 0000                  		jsr	DLE_Index(pc,d0.w) ; run level-specific events
00008560 7202                       		moveq	#2,d1
00008562 3038 F726                  		move.w	(v_limitbtm1).w,d0
00008566 9078 F72E                  		sub.w	(v_limitbtm2).w,d0 ; has lower level boundary changed recently?
0000856A 6700                       		beq.s	DLE_NoChg	; if not, branch
0000856C 6400                       		bcc.s	loc_6DAC
0000856E                            
0000856E 4441                       		neg.w	d1
00008570 3038 F704                  		move.w	(v_screenposy).w,d0
00008574 B078 F726                  		cmp.w	(v_limitbtm1).w,d0
00008578 6300                       		bls.s	loc_6DA0
0000857A 31C0 F72E                  		move.w	d0,(v_limitbtm2).w
0000857E 0278 FFFE F72E             		andi.w	#$FFFE,(v_limitbtm2).w
00008584                            
00008584                            loc_6DA0:
00008584 D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008588 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
0000858E                            
0000858E                            DLE_NoChg:
0000858E 4E75                       		rts	
00008590                            ; ===========================================================================
00008590                            
00008590                            loc_6DAC:
00008590 3038 F704                  		move.w	(v_screenposy).w,d0
00008594 5040                       		addq.w	#8,d0
00008596 B078 F72E                  		cmp.w	(v_limitbtm2).w,d0
0000859A 6500                       		bcs.s	loc_6DC4
0000859C 0838 0001 D022             		btst	#1,(v_player+obStatus).w
000085A2 6700                       		beq.s	loc_6DC4
000085A4 D241                       		add.w	d1,d1
000085A6 D241                       		add.w	d1,d1
000085A8                            
000085A8                            loc_6DC4:
000085A8 D378 F72E                  		add.w	d1,(v_limitbtm2).w
000085AC 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
000085B2 4E75                       		rts	
000085B4                            ; End of function DynamicLevelEvents
000085B4                            
000085B4                            ; ===========================================================================
000085B4                            ; ---------------------------------------------------------------------------
000085B4                            ; Offset index for dynamic level events
000085B4                            ; ---------------------------------------------------------------------------
000085B4 0000 0000                  DLE_Index:	dc.w DLE_GHZ-DLE_Index, DLE_LZ-DLE_Index
000085B8 0000 0000                  		dc.w DLE_MZ-DLE_Index, DLE_SLZ-DLE_Index
000085BC 0000 0000                  		dc.w DLE_SYZ-DLE_Index, DLE_SBZ-DLE_Index
000085C0 0000                       		dc.w DLE_Ending-DLE_Index
000085C2                            ; ===========================================================================
000085C2                            ; ---------------------------------------------------------------------------
000085C2                            ; Green	Hill Zone dynamic level events
000085C2                            ; ---------------------------------------------------------------------------
000085C2                            
000085C2                            DLE_GHZ:
000085C2 7000                       		moveq	#0,d0
000085C4 1038 FE11                  		move.b	(v_act).w,d0
000085C8 D040                       		add.w	d0,d0
000085CA 303B 0000                  		move.w	DLE_GHZx(pc,d0.w),d0
000085CE 4EFB 0000                  		jmp	DLE_GHZx(pc,d0.w)
000085D2                            ; ===========================================================================
000085D2 0000                       DLE_GHZx:	dc.w DLE_GHZ1-DLE_GHZx
000085D4 0000                       		dc.w DLE_GHZ2-DLE_GHZx
000085D6 0000                       		dc.w DLE_GHZ3-DLE_GHZx
000085D8                            ; ===========================================================================
000085D8                            
000085D8                            DLE_GHZ1:
000085D8 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
000085DE 6600                       		bne.s	gohere
000085E0 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
000085E6 4E75                       		rts
000085E8                            gohere:
000085E8 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
000085EE 0C78 1680 F700             		cmpi.w	#$1680,(v_screenposx).w ; has the camera reached $1780 on x-axis?
000085F4 6500                       		bcs.s	locret_6E08	; if not, branch
000085F6 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w ; set lower y-boundary
000085FC                            
000085FC                            locret_6E08:
000085FC 4E75                       		rts	
000085FE                            ; ===========================================================================
000085FE                            
000085FE                            DLE_GHZ2:
000085FE 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008604 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
0000860A 6500                       		bcs.s	locret_6E3A
0000860C 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
00008612 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008618 6500                       		bcs.s	locret_6E3A
0000861A 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008620 6500                       		bcs.s	loc_6E9A
00008622 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
00008628 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
0000862E 6400                       		bcc.s	loc_6E8F
00008630 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
00008636 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
0000863C                            
0000863C                            loc_6E8F:
0000863C 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008642 6400                       		bcc.s	loc_6E9A
00008644                            
00008644                            locret_6E3A:
00008644 4E75                       		rts	
00008646                            ; ===========================================================================
00008646                            
00008646                            loc_6E9A:
00008646 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
0000864C 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008650 4E75                       		rts		
00008652                            ; ===========================================================================
00008652                            
00008652                            DLE_GHZ3:
00008652 7000                       		moveq	#0,d0
00008654 1038 F742                  		move.b	(v_dle_routine).w,d0
00008658 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
0000865C 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00008660                            ; ===========================================================================
00008660 0000                       off_6E4A:	dc.w DLE_GHZ3main-off_6E4A
00008662 0000                       		dc.w DLE_GHZ3boss-off_6E4A
00008664 0000                       		dc.w DLE_GHZ3end-off_6E4A
00008666                            ; ===========================================================================
00008666                            
00008666                            DLE_GHZ3main:
00008666 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
0000866C 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
00008672 6500                       		bcs.s	locret_6E96
00008674 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
0000867A 0C78 0860 F700             		cmpi.w	#$860,(v_screenposx).w
00008680 6500                       		bcs.s	locret_6E96
00008682 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008688 6500                       		bcs.s	loc_6E98
0000868A 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
00008690 0C78 1380 F700             		cmpi.w	#$1380,(v_screenposx).w
00008696 6400                       		bcc.s	loc_6E8E
00008698 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
0000869E 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
000086A4                            
000086A4                            loc_6E8E:
000086A4 0C78 1300 F700             		cmpi.w	#$1300,(v_screenposx).w
000086AA 6400                       		bcc.s	loc_6E98
000086AC                            
000086AC                            locret_6E96:
000086AC 4E75                       		rts	
000086AE                            ; ===========================================================================
000086AE                            
000086AE                            loc_6E98:
000086AE 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
000086B4 5438 F742                  		addq.b	#2,(v_dle_routine).w
000086B8 4E75                       		rts	
000086BA                            ; ===========================================================================
000086BA                            
000086BA                            DLE_GHZ3boss:
000086BA 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
000086C0 6400                       		bcc.s	loc_6EB0
000086C2 5538 F742                  		subq.b	#2,(v_dle_routine).w
000086C6                            
000086C6                            loc_6EB0:
000086C6 0C78 2960 F700             		cmpi.w	#$2960,(v_screenposx).w
000086CC 6500                       		bcs.s	locret_6EE8
000086CE 6100 0000                  		bsr.w	FindFreeObj
000086D2 6600                       		bne.s	loc_6ED0
000086D4 12BC 0000                  		move.b	#id_BossGreenHill,0(a1) ; load GHZ boss	object
000086D8 337C 2A60 0008             		move.w	#$2A60,obX(a1)
000086DE 337C 0280 000C             		move.w	#$280,obY(a1)
000086E4                            
000086E4                            loc_6ED0:
000086EC 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000086F2 5438 F742                  		addq.b	#2,(v_dle_routine).w
000086F6 7000                       		moveq	#plcid_Boss,d0
000086F8 6000 9040                  		bra.w	AddPLC		; load boss patterns
000086FC                            ; ===========================================================================
000086FC                            
000086FC                            locret_6EE8:
000086FC 4E75                       		rts	
000086FE                            ; ===========================================================================
000086FE                            
000086FE                            DLE_GHZ3end:
000086FE 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008704 4E75                       		rts	
00008706                            ; ===========================================================================
00008706                            ; ---------------------------------------------------------------------------
00008706                            ; Labyrinth Zone dynamic level events
00008706                            ; ---------------------------------------------------------------------------
00008706                            
00008706                            DLE_LZ:
00008706 7000                       		moveq	#0,d0
00008708 1038 FE11                  		move.b	(v_act).w,d0
0000870C D040                       		add.w	d0,d0
0000870E 303B 0000                  		move.w	DLE_LZx(pc,d0.w),d0
00008712 4EFB 0000                  		jmp	DLE_LZx(pc,d0.w)
00008716                            ; ===========================================================================
00008716 0000                       DLE_LZx:	dc.w DLE_LZ12-DLE_LZx
00008718 0000                       		dc.w DLE_LZ12-DLE_LZx
0000871A 0000                       		dc.w DLE_LZ3-DLE_LZx
0000871C 0000                       		dc.w DLE_SBZ3-DLE_LZx
0000871E                            ; ===========================================================================
0000871E                            
0000871E                            DLE_LZ12:
0000871E 4E75                       		rts	
00008720                            ; ===========================================================================
00008720                            
00008720                            DLE_LZ3:
00008720 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch $F	been pressed?
00008724 6700                       		beq.s	loc_6F28	; if not, branch
00008726 43F8 A506                  		lea	(v_lvllayout+$106).w,a1
0000872A 0C11 0007                  		cmpi.b	#7,(a1)
0000872E 6700                       		beq.s	loc_6F28
00008730 12BC 0007                  		move.b	#7,(a1)		; modify level layout
0000873C                            
0000873C                            loc_6F28:
0000873C 4A38 F742                  		tst.b	(v_dle_routine).w
00008740 6600                       		bne.s	locret_6F64
00008742 0C78 1CA0 F700             		cmpi.w	#$1CA0,(v_screenposx).w
00008748 6500                       		bcs.s	locret_6F62
0000874A 0C78 0600 F704             		cmpi.w	#$600,(v_screenposy).w
00008750 6400                       		bcc.s	locret_6F62
00008752 6100 0000                  		bsr.w	FindFreeObj
00008756 6600                       		bne.s	loc_6F4A
00008758 12BC 0000                  		move.b	#id_BossLabyrinth,0(a1) ; load LZ boss object
0000875C                            
0000875C                            loc_6F4A:
00008764 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
0000876A 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000876E 7000                       		moveq	#plcid_Boss,d0
00008770 6000 8FC8                  		bra.w	AddPLC		; load boss patterns
00008774                            ; ===========================================================================
00008774                            
00008774                            locret_6F62:
00008774 4E75                       		rts	
00008776                            ; ===========================================================================
00008776                            
00008776                            locret_6F64:
00008776 4E75                       		rts	
00008778                            ; ===========================================================================
00008778                            
00008778                            DLE_SBZ3:
00008778 4A38 F742                          tst.b	(v_dle_routine).w
0000877C 6600                               bne.s   loc_6C28
0000877E 4A38 F7E1                  		tst.b	(f_switch+$1).w	; has switch $F	been pressed?
00008782 6700                       		beq.s	loc_6C28	; if not, branch
0000878C 11FC 0001 F742             		move.b	#1, (v_dle_routine).w
00008792                            loc_6C28:
00008792 0C78 0D00 F700             		cmpi.w	#$D00,(v_screenposx).w
00008798 6500                       		bcs.s	locret_6F8C
0000879A 0C78 0018 D00C             		cmpi.w	#$18,(v_player+obY).w ; has Sonic reached the top of the level?
000087A0 6400                       		bcc.s	locret_6F8C	; if not, branch
000087A2 4238 FE30                  		clr.b	(v_lastlamp).w
000087A6 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
000087AC 31FC 0502 FE10             		move.w	#(id_SBZ<<8)+2,(v_zone).w ; set level number to 0502 (FZ)
000087B2 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; freeze Sonic
000087B8                            
000087B8                            locret_6F8C:
000087B8 4E75                       		rts	
000087BA                            ; ===========================================================================
000087BA                            ; ---------------------------------------------------------------------------
000087BA                            ; Marble Zone dynamic level events
000087BA                            ; ---------------------------------------------------------------------------
000087BA                            
000087BA                            DLE_MZ:
000087BA 7000                       		moveq	#0,d0
000087BC 1038 FE11                  		move.b	(v_act).w,d0
000087C0 D040                       		add.w	d0,d0
000087C2 303B 0000                  		move.w	DLE_MZx(pc,d0.w),d0
000087C6 4EFB 0000                  		jmp	DLE_MZx(pc,d0.w)
000087CA                            ; ===========================================================================
000087CA 0000                       DLE_MZx:	dc.w DLE_MZ1-DLE_MZx
000087CC 0000                       		dc.w DLE_MZ2-DLE_MZx
000087CE 0000                       		dc.w DLE_MZ3-DLE_MZx
000087D0                            ; ===========================================================================
000087D0                            
000087D0                            DLE_MZ1:
000087D0 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
000087D6 0C78 1F40 F700             		cmpi.w	#$1F40,(v_screenposx).w
000087DC 6500                       		bcs.s	locret_6FE8
000087DE 31FC 0220 F726             		move.w	#$220,(v_limitbtm1).w
000087E4                            
000087E4                            locret_6FE8:
000087E4 4E75                       		rts	
000087E6                            
000087E6                            ; ===========================================================================
000087E6                            
000087E6                            DLE_MZ2:
000087E6 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
000087EC 0C78 2110 F700             		cmpi.w	#$2110,(v_screenposx).w
000087F2 6500                       		bcs.s	locret_6FE9
000087F4 31FC 0110 F726             		move.w	#$110,(v_limitbtm1).w
000087FA                            		
000087FA                            locret_6FE9:
000087FA 4E75                       		rts	
000087FC                            ; ===========================================================================
000087FC                            
000087FC                            DLE_MZ3:
000087FC 7000                       		moveq	#0,d0
000087FE 1038 F742                  		move.b	(v_dle_routine).w,d0
00008802 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00008806 4EFB 0000                  		jmp	off_7098(pc,d0.w)
0000880A                            ; ===========================================================================
0000880A 0000                       off_7098:	dc.w DLE_MZ3boss-off_7098
0000880C 0000                       		dc.w DLE_MZ3cutscene-off_7098
0000880E 0000                       		dc.w DLE_MZ3boss2-off_7098
00008810 0000                       		dc.w DLE_MZ3end-off_7098
00008812                            ; ===========================================================================
00008812                            
00008812                            DLE_MZ3boss:
00008812 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008818 0C78 0E00 F700             		cmpi.w	#$0E00,(v_screenposx).w
0000881E 6500                       		bcs.s	locret_70E8
00008820 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008826 0C78 17F0 F700             		cmpi.w	#$17F0,(v_screenposx).w
0000882C 6500                       		bcs.s	locret_70E8
0000882E 6100 0000                  		bsr.w	FindFreeObj
00008832 6600                       		bne.s	loc_70D0
00008834 12BC 0000                  		move.b	#id_BossMarble,0(a1) ; load MZ boss object
00008838 337C 19F0 0008             		move.w	#$19F0,obX(a1)
0000883E 337C 022C 000C             		move.w	#$22C,obY(a1)
00008844                            
00008844                            loc_70D0:
0000884C 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008852 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008856 7000                       		moveq	#plcid_Boss,d0
00008858 6000 8EE0                  		bra.w	AddPLC		; load boss patterns
0000885C                            ; ===========================================================================
0000885C                            
0000885C                            locret_70E8:
0000885C 4E75                       		rts	
0000885E                            		
0000885E                            DLE_MZ3cutscene:
0000885E 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008864 0C78 19B0 F700             		cmpi.w	#$19B0,(v_screenposx).w
0000886A 6500                       		bcs.s	locret_8298
0000886C 6100 0000                  		bsr.w	FindFreeObj
00008870 6600                       		bne.s	locret_8298
00008872 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
00008876 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000887A 7000                       		moveq	#plcid_EggmanSBZ2,d0
0000887C 6000 8EBC                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008880                            ; ===========================================================================
00008880                            
00008880                            locret_8298:
00008880 4E75                       		rts	
00008882                            ; ===========================================================================
00008882                            
00008882                            DLE_MZ3boss2:
00008882 0C78 1A60 F700             		cmpi.w	#$1A60,(v_screenposx).w
00008888 6500                       		bcs.s	loc_72C6
0000888A 6100 0000                  		bsr.w	FindFreeObj
0000888E 6600                       		bne.s	loc_72C0
00008890 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
00008894 5438 F742                  		addq.b	#2,(v_dle_routine).w
000088A0                            
000088A0                            loc_72C0:
000088A0 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000088A6                            
000088A6                            loc_72C6:
000088A6 6000                       		bra.s	loc_72D2
000088A8                            ; ===========================================================================
000088A8                            
000088A8                            DLE_MZ3end:
000088A8 0C78 1B50 F700             		cmpi.w	#$1B50,(v_screenposx).w
000088AE 6500                       		bcs.s	loc_72D2
000088B0 4E75                       		rts	
000088B2                            ; ===========================================================================
000088B2                            
000088B2                            loc_72D2:
000088B2 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
000088B8 4E75                       		rts
000088BA                            
000088BA                            
000088BA                            ; ===========================================================================
000088BA                            ; ---------------------------------------------------------------------------
000088BA                            ; Star Light Zone dynamic level events
000088BA                            ; ---------------------------------------------------------------------------
000088BA                            
000088BA                            DLE_SLZ:
000088BA 7000                       		moveq	#0,d0
000088BC 1038 FE11                  		move.b	(v_act).w,d0
000088C0 D040                       		add.w	d0,d0
000088C2 303B 0000                  		move.w	DLE_SLZx(pc,d0.w),d0
000088C6 4EFB 0000                  		jmp	DLE_SLZx(pc,d0.w)
000088CA                            ; ===========================================================================
000088CA 0000                       DLE_SLZx:	dc.w DLE_SLZ12-DLE_SLZx
000088CC 0000                       		dc.w DLE_SLZ12-DLE_SLZx
000088CE 0000                       		dc.w DLE_SLZ3-DLE_SLZx
000088D0                            ; ===========================================================================
000088D0                            
000088D0                            DLE_SLZ12:
000088D0 4E75                       		rts	
000088D2                            ; ===========================================================================
000088D2                            
000088D2                            DLE_SLZ3:
000088D2 7000                       		moveq	#0,d0
000088D4 1038 F742                  		move.b	(v_dle_routine).w,d0
000088D8 303B 0000                  		move.w	off_7118(pc,d0.w),d0
000088DC 4EFB 0000                  		jmp	off_7118(pc,d0.w)
000088E0                            ; ===========================================================================
000088E0 0000                       off_7118:	dc.w DLE_SLZ3main-off_7118
000088E2 0000                       		dc.w DLE_SLZ3boss-off_7118
000088E4 0000                       		dc.w DLE_SLZ3end-off_7118
000088E6                            ; ===========================================================================
000088E6                            
000088E6                            DLE_SLZ3main:
000088E6 0C78 1E70 F700             		cmpi.w	#$1E70,(v_screenposx).w
000088EC 6500                       		bcs.s	locret_7130
000088EE 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
000088F4 5438 F742                  		addq.b	#2,(v_dle_routine).w
000088F8                            
000088F8                            locret_7130:
000088F8 4E75                       		rts	
000088FA                            ; ===========================================================================
000088FA                            
000088FA                            DLE_SLZ3boss:
000088FA 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008900 6500                       		bcs.s	locret_715C
00008902 6100 0000                  		bsr.w	FindFreeObj
00008906 6600                       		bne.s	loc_7144
00008908 12BC 0000                  		move.b	#id_BossStarLight,(a1) ; load SLZ boss object
0000890C                            
0000890C                            loc_7144:
00008914 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
0000891A 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000891E 7000                       		moveq	#plcid_Boss,d0
00008920 6000 8E18                  		bra.w	AddPLC		; load boss patterns
00008924                            ; ===========================================================================
00008924                            
00008924                            locret_715C:
00008924 4E75                       		rts	
00008926                            ; ===========================================================================
00008926                            
00008926                            DLE_SLZ3end:
00008926 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
0000892C 4E75                       		rts
0000892E 4E75                       		rts
00008930                            ; ===========================================================================
00008930                            ; ---------------------------------------------------------------------------
00008930                            ; Spring Yard Zone dynamic level events
00008930                            ; ---------------------------------------------------------------------------
00008930                            
00008930                            DLE_SYZ:
00008930 7000                       		moveq	#0,d0
00008932 1038 FE11                  		move.b	(v_act).w,d0
00008936 D040                       		add.w	d0,d0
00008938 303B 0000                  		move.w	DLE_SYZx(pc,d0.w),d0
0000893C 4EFB 0000                  		jmp	DLE_SYZx(pc,d0.w)
00008940                            ; ===========================================================================
00008940 0000                       DLE_SYZx:	dc.w DLE_SYZ1-DLE_SYZx
00008942 0000                       		dc.w DLE_SYZ2-DLE_SYZx
00008944 0000                       		dc.w DLE_SYZ3-DLE_SYZx
00008946                            ; ===========================================================================
00008946                            
00008946                            DLE_SYZ1:
00008946 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
0000894C 0C78 1600 F700             		cmpi.w	#$1600,(v_screenposx).w
00008952 6500                       		bcs.s	locret_71A2
00008954 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
0000895A 4E75                       		rts	
0000895C                            ; ===========================================================================
0000895C                            
0000895C                            DLE_SYZ2:
0000895C 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008962 0C78 25A0 F700             		cmpi.w	#$25A0,(v_screenposx).w
00008968 6500                       		bcs.s	locret_71A2
0000896A 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
00008970 0C78 04D0 D00C             		cmpi.w	#$4D0,(v_player+obY).w
00008976 6500                       		bcs.s	locret_71A2
00008978 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
0000897E                            
0000897E                            locret_71A2:
0000897E 4E75                       		rts	
00008980                            ; ===========================================================================
00008980                            
00008980                            DLE_SYZ3:
00008980 7000                       		moveq	#0,d0
00008982 1038 F742                  		move.b	(v_dle_routine).w,d0
00008986 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
0000898A 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
0000898E                            ; ===========================================================================
0000898E 0000                       off_71B2:	dc.w DLE_SYZ3main-off_71B2
00008990 0000                       		dc.w DLE_SYZ3boss-off_71B2
00008992 0000                       		dc.w DLE_SYZ3end-off_71B2
00008994                            ; ===========================================================================
00008994                            
00008994                            DLE_SYZ3main:
00008994 0C78 2AC0 F700             		cmpi.w	#$2AC0,(v_screenposx).w
0000899A 6500                       		bcs.s	locret_71CE
0000899C 6100 0000                  		bsr.w	FindFreeObj
000089A0 6600                       		bne.s	locret_71CE
000089A2 12BC 0000                  		move.b	#id_BossBlock,(a1) ; load blocks that boss picks up
000089A6 5438 F742                  		addq.b	#2,(v_dle_routine).w
000089AA                            
000089AA                            locret_71CE:
000089AA 4E75                       		rts	
000089AC                            ; ===========================================================================
000089AC                            
000089AC                            DLE_SYZ3boss:
000089AC 0C78 2C00 F700             		cmpi.w	#$2C00,(v_screenposx).w
000089B2 6500                       		bcs.s	locret_7200
000089B4 31FC 04CC F726             		move.w	#$4CC,(v_limitbtm1).w
000089BA 6100 0000                  		bsr.w	FindFreeObj
000089BE 6600                       		bne.s	loc_71EC
000089C0 12BC 0000                  		move.b	#id_BossSpringYard,(a1) ; load SYZ boss	object
000089C4 5438 F742                  		addq.b	#2,(v_dle_routine).w
000089C8                            
000089C8                            loc_71EC:
000089D0 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000089D6 7000                       		moveq	#plcid_Boss,d0
000089D8 6000 8D60                  		bra.w	AddPLC		; load boss patterns
000089DC                            ; ===========================================================================
000089DC                            
000089DC                            locret_7200:
000089DC 4E75                       		rts	
000089DE                            ; ===========================================================================
000089DE                            
000089DE                            DLE_SYZ3end:
000089DE 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
000089E4 4E75                       		rts	
000089E6                            ; ===========================================================================
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            ; Scrap	Brain Zone dynamic level events
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            
000089E6                            DLE_SBZ:
000089E6 7000                       		moveq	#0,d0
000089E8 1038 FE11                  		move.b	(v_act).w,d0
000089EC D040                       		add.w	d0,d0
000089EE 303B 0000                  		move.w	DLE_SBZx(pc,d0.w),d0
000089F2 4EFB 0000                  		jmp	DLE_SBZx(pc,d0.w)
000089F6                            ; ===========================================================================
000089F6 0000                       DLE_SBZx:	dc.w DLE_SBZ1-DLE_SBZx
000089F8 0000                       		dc.w DLE_SBZ2-DLE_SBZx
000089FA 0000                       		dc.w DLE_FZ-DLE_SBZx
000089FC                            ; ===========================================================================
000089FC                            
000089FC                            DLE_SBZ1:
000089FC 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00008A02 0C78 1880 F700             		cmpi.w	#$1880,(v_screenposx).w
00008A08 6500                       		bcs.s	locret_7242
00008A0A 31FC 0620 F726             		move.w	#$620,(v_limitbtm1).w
00008A10 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008A16 6500                       		bcs.s	locret_7242
00008A18 31FC 02A0 F726             		move.w	#$2A0,(v_limitbtm1).w
00008A1E                            
00008A1E                            locret_7242:
00008A1E 4E75                       		rts	
00008A20                            ; ===========================================================================
00008A20                            
00008A20                            DLE_SBZ2:
00008A20 7000                       		moveq	#0,d0
00008A22 1038 F742                  		move.b	(v_dle_routine).w,d0
00008A26 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008A2A 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008A2E                            ; ===========================================================================
00008A2E 0000                       off_7252:	dc.w DLE_SBZ2main-off_7252
00008A30 0000                       		dc.w DLE_SBZ2boss-off_7252
00008A32 0000                       		dc.w DLE_SBZ2boss2-off_7252
00008A34 0000                       		dc.w DLE_SBZ2end-off_7252
00008A36                            ; ===========================================================================
00008A36                            
00008A36                            DLE_SBZ2main:
00008A36 31FC 0800 F726             		move.w	#$800,(v_limitbtm1).w
00008A3C 0C78 1800 F700             		cmpi.w	#$1800,(v_screenposx).w
00008A42 6500                       		bcs.s	locret_727A
00008A44 31FC 0510 F726             		move.w	#$510,(v_limitbtm1).w
00008A4A 0C78 1E00 F700             		cmpi.w	#$1E00,(v_screenposx).w
00008A50 6500                       		bcs.s	locret_727A
00008A52 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008A56                            
00008A56                            locret_727A:
00008A56 4E75                       		rts	
00008A58                            ; ===========================================================================
00008A58                            
00008A58                            DLE_SBZ2boss:
00008A58 0C78 1EB0 F700             		cmpi.w	#$1EB0,(v_screenposx).w
00008A5E 6500                       		bcs.s	locret_7298
00008A60 6100 0000                  		bsr.w	FindFreeObj
00008A64 6600                       		bne.s	locret_7298
00008A66 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
00008A6A 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008A6E 7000                       		moveq	#plcid_EggmanSBZ2,d0
00008A70 6000 8CC8                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008A74                            ; ===========================================================================
00008A74                            
00008A74                            locret_7298:
00008A74 4E75                       		rts	
00008A76                            ; ===========================================================================
00008A76                            
00008A76                            DLE_SBZ2boss2:
00008A76 0C78 1F60 F700             		cmpi.w	#$1F60,(v_screenposx).w
00008A7C 6500                       		bcs.s	loc_72B6
00008A7E 6100 0000                  		bsr.w	FindFreeObj
00008A82 6600                       		bne.s	loc_72B0
00008A84 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
00008A88 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008A8C                            
00008A8C                            loc_72B0:
00008A8C 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008A92                            
00008A92                            loc_72B6:
00008A92 6000                       		bra.s	loc_72C2
00008A94                            ; ===========================================================================
00008A94                            
00008A94                            DLE_SBZ2end:
00008A94 0C78 2050 F700             		cmpi.w	#$2050,(v_screenposx).w
00008A9A 6500                       		bcs.s	loc_72C2
00008A9C 4E75                       		rts	
00008A9E                            ; ===========================================================================
00008A9E                            
00008A9E                            loc_72C2:
00008A9E 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008AA4 4E75                       		rts	
00008AA6                            ; ===========================================================================
00008AA6                            
00008AA6                            DLE_FZ:
00008AA6 7000                       		moveq	#0,d0
00008AA8 1038 F742                  		move.b	(v_dle_routine).w,d0
00008AAC 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00008AB0 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00008AB4                            ; ===========================================================================
00008AB4 0000 0000                  off_72D8:	dc.w DLE_FZmain-off_72D8, DLE_FZboss-off_72D8
00008AB8 0000 0000                  		dc.w DLE_FZend-off_72D8, locret_7322-off_72D8
00008ABC 0000                       		dc.w DLE_FZend2-off_72D8
00008ABE                            ; ===========================================================================
00008ABE                            
00008ABE                            DLE_FZmain:
00008ABE 0C78 2148 F700             		cmpi.w	#$2148,(v_screenposx).w
00008AC4 6500                       		bcs.s	loc_72F4
00008AC6 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008ACA 7000                       		moveq	#plcid_FZBoss,d0
00008ACC 6100 8C6C                  		bsr.w	AddPLC		; load FZ boss patterns
00008AD0                            
00008AD0                            loc_72F4:
00008AD0 60CC                       		bra.s	loc_72C2
00008AD2                            ; ===========================================================================
00008AD2                            
00008AD2                            DLE_FZboss:
00008AD2 0C78 2300 F700             		cmpi.w	#$2300,(v_screenposx).w
00008AD8 6500                       		bcs.s	loc_7312
00008ADA 6100 0000                  		bsr.w	FindFreeObj
00008ADE 6600                       		bne.s	loc_7312
00008AE0 12BC 0000                  		move.b	#id_BossFinal,(a1) ; load FZ boss object
00008AE4 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008AE8 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008AEE                            
00008AEE                            loc_7312:
00008AEE 60AE                       		bra.s	loc_72C2
00008AF0                            ; ===========================================================================
00008AF0                            
00008AF0                            DLE_FZend:
00008AF0 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
00008AF6 6500                       		bcs.s	loc_7320
00008AF8 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008AFC                            
00008AFC                            loc_7320:
00008AFC 60A0                       		bra.s	loc_72C2
00008AFE                            ; ===========================================================================
00008AFE                            
00008AFE                            locret_7322:
00008AFE 4E75                       		rts	
00008B00                            ; ===========================================================================
00008B00                            
00008B00                            DLE_FZend2:
00008B00 609C                       		bra.s	loc_72C2
00008B02                            ; ===========================================================================
00008B02                            ; ---------------------------------------------------------------------------
00008B02                            ; Ending sequence dynamic level events (empty)
00008B02                            ; ---------------------------------------------------------------------------
00008B02                            
00008B02                            DLE_Ending:
00008B02 4E75                       		rts	
00008B02 4E75                       		rts	
00008B04                            
00008B04                            		include	"_incObj\11 Bridge (part 1).asm"
00008B04                            ; ---------------------------------------------------------------------------
00008B04                            ; Object 11 - GHZ bridge
00008B04                            ; ---------------------------------------------------------------------------
00008B04                            
00008B04                            Bridge:
00008B04 7000                       		moveq	#0,d0
00008B06 1028 0024                  		move.b	obRoutine(a0),d0
00008B0A 323B 0000                  		move.w	Bri_Index(pc,d0.w),d1
00008B0E 4EFB 1000                  		jmp	Bri_Index(pc,d1.w)
00008B12                            ; ===========================================================================
00008B12 0000 0000                  Bri_Index:	dc.w Bri_Main-Bri_Index, Bri_Action-Bri_Index
00008B16 0000 0000                  		dc.w Bri_Platform-Bri_Index, Bri_Delete-Bri_Index
00008B1A 0000 0000                  		dc.w Bri_Delete-Bri_Index, Bri_Display-Bri_Index
00008B1E                            ; ===========================================================================
00008B1E                            
00008B1E                            Bri_Main:	; Routine 0
00008B1E 5428 0024                  		addq.b	#2,obRoutine(a0)
00008B22 217C 0000 0000 0004        		move.l	#Map_Bri,obMap(a0)
00008B2A 317C 438E 0002             		move.w	#$438E,obGfx(a0)
00008B30 117C 0004 0001             		move.b	#4,obRender(a0)
00008B36 317C 0180 0018             		move.w	#$180,obPriority(a0)
00008B3C 117C 0080 0014             		move.b	#$80,obActWid(a0)
00008B42 3428 000C                  		move.w	obY(a0),d2
00008B46 3628 0008                  		move.w	obX(a0),d3
00008B4A 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008B4C 45E8 0028                  		lea	obSubtype(a0),a2
00008B50 7200                       		moveq	#0,d1
00008B52 1212                       		move.b	(a2),d1		; copy bridge length to d1
00008B54 14FC 0000                  		move.b	#0,(a2)+	; clear bridge length
00008B58 3001                       		move.w	d1,d0
00008B5A E248                       		lsr.w	#1,d0
00008B5C E948                       		lsl.w	#4,d0
00008B5E 9640                       		sub.w	d0,d3		; d3 is position of leftmost log
00008B60 5501                       		subq.b	#2,d1
00008B62 6500                       		bcs.s	Bri_Action	; don't make more if bridge has only 1 log
00008B64                            
00008B64                            @buildloop:
00008B64 6100 0000                  		bsr.w	FindFreeObj
00008B68 6600                       		bne.s	Bri_Action
00008B6A 5228 0028                  		addq.b	#1,obSubtype(a0)
00008B6E B668 0008                  		cmp.w	obX(a0),d3	; is this log the leftmost one?
00008B72 6600                       		bne.s	@notleftmost	; if not, branch
00008B74                            
00008B74 0643 0010                  		addi.w	#$10,d3
00008B78 3142 000C                  		move.w	d2,obY(a0)
00008B7C 3142 003C                  		move.w	d2,$3C(a0)
00008B80 3A08                       		move.w	a0,d5
00008B82 0445 D000                  		subi.w	#$D000,d5
00008B86 EC4D                       		lsr.w	#6,d5
00008B88 0245 007F                  		andi.w	#$7F,d5
00008B8C 14C5                       		move.b	d5,(a2)+
00008B8E 5228 0028                  		addq.b	#1,obSubtype(a0)
00008B92                            
00008B92                            	@notleftmost:
00008B92 3A09                       		move.w	a1,d5
00008B94 0445 D000                  		subi.w	#$D000,d5
00008B98 EC4D                       		lsr.w	#6,d5
00008B9A 0245 007F                  		andi.w	#$7F,d5
00008B9E 14C5                       		move.b	d5,(a2)+
00008BA0 137C 000A 0024             		move.b	#$A,obRoutine(a1)
00008BA6 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00008BA8 3342 000C                  		move.w	d2,obY(a1)
00008BAC 3342 003C                  		move.w	d2,$3C(a1)
00008BB0 3343 0008                  		move.w	d3,obX(a1)
00008BB4 237C 0000 0000 0004        		move.l	#Map_Bri,obMap(a1)
00008BBC 337C 438E 0002             		move.w	#$438E,obGfx(a1)
00008BC2 137C 0004 0001             		move.b	#4,obRender(a1)
00008BC8 337C 0180 0018             		move.w	#$180,obPriority(a1)
00008BCE 137C 0008 0014             		move.b	#8,obActWid(a1)
00008BD4 0643 0010                  		addi.w	#$10,d3
00008BD8 51C9 FF8A                  		dbf	d1,@buildloop ; repeat d1 times (length of bridge)
00008BDC                            
00008BDC                            Bri_Action:	; Routine 2
00008BDC 6100                       		bsr.s	Bri_Solid
00008BDE 4A28 003E                  		tst.b	$3E(a0)
00008BE2 6700                       		beq.s	@display
00008BE4 5928 003E                  		subq.b	#4,$3E(a0)
00008BE8 6100 0000                  		bsr.w	Bri_Bend
00008BEC                            
00008BEC                            	@display:
00008BEC 6100 0000                  		bsr.w	DisplaySprite
00008BF0 6000 0000                  		bra.w	Bri_ChkDel
00008BF4                            
00008BF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008BF4                            
00008BF4                            
00008BF4                            Bri_Solid:
00008BF4 7200                       		moveq	#0,d1
00008BF6 1228 0028                  		move.b	obSubtype(a0),d1
00008BFA E749                       		lsl.w	#3,d1
00008BFC 3401                       		move.w	d1,d2
00008BFE 5041                       		addq.w	#8,d1
00008C00 D442                       		add.w	d2,d2
00008C02 43F8 D000                  		lea	(v_player).w,a1
00008C06 4A69 0012                  		tst.w	obVelY(a1)
00008C0A 6B00 0000                  		bmi.w	Plat_Exit
00008C0E 3029 0008                  		move.w	obX(a1),d0
00008C12 9068 0008                  		sub.w	obX(a0),d0
00008C16 D041                       		add.w	d1,d0
00008C18 6B00 0000                  		bmi.w	Plat_Exit
00008C1C B042                       		cmp.w	d2,d0
00008C1E 6400 0000                  		bcc.w	Plat_Exit
00008C22 6000                       		bra.s	Plat_NoXCheck
00008C24                            ; End of function Bri_Solid
00008C24                            ; End of function Bri_Solid
00008C24                            
00008C24                            ; ---------------------------------------------------------------------------
00008C24                            ; Platform subroutine
00008C24                            ; ---------------------------------------------------------------------------
00008C24                            
00008C24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C24                            
00008C24                            PlatformObject:
00008C24 43F8 D000                  		lea	(v_player).w,a1
00008C28 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving up/jumping?
00008C2C 6B00 0000                  		bmi.w	Plat_Exit	; if yes, branch
00008C30                            
00008C30                            ;		perform x-axis range check
00008C30 3029 0008                  		move.w	obX(a1),d0
00008C34 9068 0008                  		sub.w	obX(a0),d0
00008C38 D041                       		add.w	d1,d0
00008C3A 6B00 0000                  		bmi.w	Plat_Exit
00008C3E D241                       		add.w	d1,d1
00008C40 B041                       		cmp.w	d1,d0
00008C42 6400 0000                  		bhs.w	Plat_Exit
00008C46                            
00008C46                            	Plat_NoXCheck:
00008C46 3028 000C                  		move.w	obY(a0),d0
00008C4A 5140                       		subq.w	#8,d0
00008C4C                            
00008C4C                            Platform3:
00008C4C                            ;		perform y-axis range check
00008C4C 3429 000C                  		move.w	obY(a1),d2
00008C50 1229 0016                  		move.b	obHeight(a1),d1
00008C54 4881                       		ext.w	d1
00008C56 D242                       		add.w	d2,d1
00008C58 5841                       		addq.w	#4,d1
00008C5A 9041                       		sub.w	d1,d0
00008C5C 6200 0000                  		bhi.w	Plat_Exit
00008C60 0C40 FFF0                  		cmpi.w	#-$10,d0
00008C64 6500 0000                  		blo.w	Plat_Exit
00008C68                            
00008C68 4A38 F7C8                  		tst.b	(f_lockmulti).w
00008C6C 6B00 0000                  		bmi.w	Plat_Exit
00008C70 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00008C76 6400 0000                  		bhs.w	Plat_Exit
00008C7A D440                       		add.w	d0,d2
00008C7C 5642                       		addq.w	#3,d2
00008C7E 3342 000C                  		move.w	d2,obY(a1)
00008C82 5428 0024                  		addq.b	#2,obRoutine(a0)
00008C86                            
00008C86                            loc_74AE:
00008C86 0829 0003 0022             		btst	#3,obStatus(a1)
00008C8C 6700                       		beq.s	loc_74DC
00008C8E 7000                       		moveq	#0,d0
00008C90 1029 003D                  		move.b	$3D(a1),d0
00008C94 ED48                       		lsl.w	#6,d0
00008C96 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008C9C 2440                       		movea.l	d0,a2
00008C9E 08AA 0003 0022             		bclr	#3,obStatus(a2)
00008CA4 422A 0025                  		clr.b	ob2ndRout(a2)
00008CA8 0C2A 0004 0024             		cmpi.b	#4,obRoutine(a2)
00008CAE 6600                       		bne.s	loc_74DC
00008CB0 552A 0024                  		subq.b	#2,obRoutine(a2)
00008CB4                            
00008CB4                            loc_74DC:
00008CB4 3008                       		move.w	a0,d0
00008CB6 0440 D000                  		subi.w	#-$3000,d0
00008CBA EC48                       		lsr.w	#6,d0
00008CBC 0240 007F                  		andi.w	#$7F,d0
00008CC0 1340 003D                  		move.b	d0,$3D(a1)
00008CC4 137C 0000 0026             		move.b	#0,obAngle(a1)
00008CCA 337C 0000 0012             		move.w	#0,obVelY(a1)
00008CD0 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00008CD6 0829 0001 0022             		btst	#1,obStatus(a1)
00008CDC 6700                       		beq.s	loc_7512
00008CDE 2F08                       		move.l	a0,-(sp)
00008CE0 2049                       		movea.l	a1,a0
00008CE2 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l
00008CE8 205F                       		movea.l	(sp)+,a0
00008CEA                            
00008CEA                            loc_7512:
00008CEA 08E9 0003 0022             		bset	#3,obStatus(a1)
00008CF0 08E8 0003 0022             		bset	#3,obStatus(a0)
00008CF6                            
00008CF6                            Plat_Exit:
00008CF6 4E75                       		rts	
00008CF8                            ; End of function PlatformObject
00008CF8                            
00008CF8                            ; ---------------------------------------------------------------------------
00008CF8                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00008CF8                            ; ---------------------------------------------------------------------------
00008CF8                            
00008CF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008CF8                            
00008CF8                            
00008CF8                            SlopeObject:
00008CF8 43F8 D000                  		lea	(v_player).w,a1
00008CFC 4A69 0012                  		tst.w	obVelY(a1)
00008D00 6B00 FFF4                  		bmi.w	Plat_Exit
00008D04 3029 0008                  		move.w	obX(a1),d0
00008D08 9068 0008                  		sub.w	obX(a0),d0
00008D0C D041                       		add.w	d1,d0
00008D0E 6BE6                       		bmi.s	Plat_Exit
00008D10 D241                       		add.w	d1,d1
00008D12 B041                       		cmp.w	d1,d0
00008D14 64E0                       		bhs.s	Plat_Exit
00008D16 0828 0000 0001             		btst	#0,obRender(a0)
00008D1C 6700                       		beq.s	loc_754A
00008D1E 4640                       		not.w	d0
00008D20 D041                       		add.w	d1,d0
00008D22                            
00008D22                            loc_754A:
00008D22 E248                       		lsr.w	#1,d0
00008D24 7600                       		moveq	#0,d3
00008D26 1632 0000                  		move.b	(a2,d0.w),d3
00008D2A 3028 000C                  		move.w	obY(a0),d0
00008D2E 9043                       		sub.w	d3,d0
00008D30 6000 FF1A                  		bra.w	Platform3
00008D34                            ; End of function SlopeObject
00008D34                            
00008D34                            
00008D34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D34                            
00008D34                            
00008D34                            Swing_Solid:
00008D34 43F8 D000                  		lea	(v_player).w,a1
00008D38 4A69 0012                  		tst.w	obVelY(a1)
00008D3C 6B00 FFB8                  		bmi.w	Plat_Exit
00008D40 3029 0008                  		move.w	obX(a1),d0
00008D44 9068 0008                  		sub.w	obX(a0),d0
00008D48 D041                       		add.w	d1,d0
00008D4A 6B00 FFAA                  		bmi.w	Plat_Exit
00008D4E D241                       		add.w	d1,d1
00008D50 B041                       		cmp.w	d1,d0
00008D52 6400 FFA2                  		bhs.w	Plat_Exit
00008D56 3028 000C                  		move.w	obY(a0),d0
00008D5A 9043                       		sub.w	d3,d0
00008D5C 6000 FEEE                  		bra.w	Platform3
00008D60                            ; End of function Obj15_Solid
00008D60                            
00008D60                            ; ===========================================================================
00008D60                            
00008D60                            		include	"_incObj\11 Bridge (part 2).asm"
00008D60                            
00008D60                            Bri_Platform:	; Routine 4
00008D60 6100                       		bsr.s	Bri_WalkOff
00008D62 6100 0000                  		bsr.w	DisplaySprite
00008D66 6000 0000                  		bra.w	Bri_ChkDel
00008D6A                            
00008D6A                            ; ---------------------------------------------------------------------------
00008D6A                            ; Subroutine allowing Sonic to walk off a bridge
00008D6A                            ; ---------------------------------------------------------------------------
00008D6A                            
00008D6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D6A                            
00008D6A                            
00008D6A                            Bri_WalkOff:
00008D6A 7200                       		moveq	#0,d1
00008D6C 1228 0028                  		move.b	obSubtype(a0),d1
00008D70 E749                       		lsl.w	#3,d1
00008D72 3401                       		move.w	d1,d2
00008D74 5041                       		addq.w	#8,d1
00008D76 6100                       		bsr.s	ExitPlatform2
00008D78 6400                       		bcc.s	locret_75BE
00008D7A E848                       		lsr.w	#4,d0
00008D7C 1140 003F                  		move.b	d0,$3F(a0)
00008D80 1028 003E                  		move.b	$3E(a0),d0
00008D84 0C00 0040                  		cmpi.b	#$40,d0
00008D88 6700                       		beq.s	loc_75B6
00008D8A 5828 003E                  		addq.b	#4,$3E(a0)
00008D8E                            
00008D8E                            loc_75B6:
00008D8E 6100 0000                  		bsr.w	Bri_Bend
00008D92 6100 0000                  		bsr.w	Bri_MoveSonic
00008D96                            
00008D96                            locret_75BE:
00008D96 4E75                       		rts	
00008D98                            ; End of function Bri_WalkOff
00008D98                            ; End of function Bri_WalkOff
00008D98                            
00008D98                            ; ---------------------------------------------------------------------------
00008D98                            ; Subroutine allowing Sonic to walk or jump off	a platform
00008D98                            ; ---------------------------------------------------------------------------
00008D98                            
00008D98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D98                            
00008D98                            
00008D98                            ExitPlatform:
00008D98 3401                       		move.w	d1,d2
00008D9A                            
00008D9A                            ExitPlatform2:
00008D9A D442                       		add.w	d2,d2
00008D9C 43F8 D000                  		lea	(v_player).w,a1
00008DA0 0829 0001 0022             		btst	#1,obStatus(a1)
00008DA6 6600                       		bne.s	loc_75E0
00008DA8 3029 0008                  		move.w	obX(a1),d0
00008DAC 9068 0008                  		sub.w	obX(a0),d0
00008DB0 D041                       		add.w	d1,d0
00008DB2 6B00                       		bmi.s	loc_75E0
00008DB4 B042                       		cmp.w	d2,d0
00008DB6 6500                       		blo.s	locret_75F2
00008DB8                            
00008DB8                            loc_75E0:
00008DB8 08A9 0003 0022             		bclr	#3,obStatus(a1)
00008DBE 117C 0002 0024             		move.b	#2,obRoutine(a0)
00008DC4 08A8 0003 0022             		bclr	#3,obStatus(a0)
00008DCA                            
00008DCA                            locret_75F2:
00008DCA 4E75                       		rts	
00008DCC                            ; End of function ExitPlatform
00008DCC                            
00008DCC                            		include	"_incObj\11 Bridge (part 3).asm"
00008DCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008DCC                            
00008DCC                            
00008DCC                            Bri_MoveSonic:
00008DCC 7000                       		moveq	#0,d0
00008DCE 1028 003F                  		move.b	$3F(a0),d0
00008DD2 1030 0029                  		move.b	$29(a0,d0.w),d0
00008DD6 ED48                       		lsl.w	#6,d0
00008DD8 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008DDE 2440                       		movea.l	d0,a2
00008DE0 43F8 D000                  		lea	(v_player).w,a1
00008DE4 302A 000C                  		move.w	obY(a2),d0
00008DE8 5140                       		subq.w	#8,d0
00008DEA 7200                       		moveq	#0,d1
00008DEC 1229 0016                  		move.b	obHeight(a1),d1
00008DF0 9041                       		sub.w	d1,d0
00008DF2 3340 000C                  		move.w	d0,obY(a1)	; change Sonic's position on y-axis
00008DF6 4E75                       		rts	
00008DF8                            ; End of function Bri_MoveSonic
00008DF8                            
00008DF8                            
00008DF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008DF8                            
00008DF8                            
00008DF8                            Bri_Bend:
00008DF8 1028 003E                  		move.b	$3E(a0),d0
00008DFC 6100 AECC                  		bsr.w	CalcSine
00008E00 3800                       		move.w	d0,d4
00008E02 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00008E08 7000                       		moveq	#0,d0
00008E0A 1028 0028                  		move.b	obSubtype(a0),d0
00008E0E E948                       		lsl.w	#4,d0
00008E10 7600                       		moveq	#0,d3
00008E12 1628 003F                  		move.b	$3F(a0),d3
00008E16 3403                       		move.w	d3,d2
00008E18 D640                       		add.w	d0,d3
00008E1A 7A00                       		moveq	#0,d5
00008E1C 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00008E22 1A35 3000                  		move.b	(a5,d3.w),d5
00008E26 0243 000F                  		andi.w	#$F,d3
00008E2A E94B                       		lsl.w	#4,d3
00008E2C 47F4 3000                  		lea	(a4,d3.w),a3
00008E30 45E8 0029                  		lea	$29(a0),a2
00008E34                            
00008E34                            loc_765C:
00008E34 7000                       		moveq	#0,d0
00008E36 101A                       		move.b	(a2)+,d0
00008E38 ED48                       		lsl.w	#6,d0
00008E3A 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008E40 2240                       		movea.l	d0,a1
00008E42 7000                       		moveq	#0,d0
00008E44 101B                       		move.b	(a3)+,d0
00008E46 5240                       		addq.w	#1,d0
00008E48 C0C5                       		mulu.w	d5,d0
00008E4A C0C4                       		mulu.w	d4,d0
00008E4C 4840                       		swap	d0
00008E4E D069 003C                  		add.w	$3C(a1),d0
00008E52 3340 000C                  		move.w	d0,obY(a1)
00008E56 51CA FFDC                  		dbf	d2,loc_765C
00008E5A 7000                       		moveq	#0,d0
00008E5C 1028 0028                  		move.b	obSubtype(a0),d0
00008E60 7600                       		moveq	#0,d3
00008E62 1628 003F                  		move.b	$3F(a0),d3
00008E66 5203                       		addq.b	#1,d3
00008E68 9600                       		sub.b	d0,d3
00008E6A 4403                       		neg.b	d3
00008E6C 6B00                       		bmi.s	locret_76CA
00008E6E 3403                       		move.w	d3,d2
00008E70 E94B                       		lsl.w	#4,d3
00008E72 47F4 3000                  		lea	(a4,d3.w),a3
00008E76 D6C2                       		adda.w	d2,a3
00008E78 5342                       		subq.w	#1,d2
00008E7A 6500                       		bcs.s	locret_76CA
00008E7C                            
00008E7C                            loc_76A4:
00008E7C 7000                       		moveq	#0,d0
00008E7E 101A                       		move.b	(a2)+,d0
00008E80 ED48                       		lsl.w	#6,d0
00008E82 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008E88 2240                       		movea.l	d0,a1
00008E8A 7000                       		moveq	#0,d0
00008E8C 1023                       		move.b	-(a3),d0
00008E8E 5240                       		addq.w	#1,d0
00008E90 C0C5                       		mulu.w	d5,d0
00008E92 C0C4                       		mulu.w	d4,d0
00008E94 4840                       		swap	d0
00008E96 D069 003C                  		add.w	$3C(a1),d0
00008E9A 3340 000C                  		move.w	d0,obY(a1)
00008E9E 51CA FFDC                  		dbf	d2,loc_76A4
00008EA2                            
00008EA2                            locret_76CA:
00008EA2 4E75                       		rts	
00008EA4                            ; End of function Bri_Bend
00008EA4                            
00008EA4                            ; ===========================================================================
00008EA4                            ; ---------------------------------------------------------------------------
00008EA4                            ; GHZ bridge-bending data
00008EA4                            ; (Defines how the bridge bends	when Sonic walks across	it)
00008EA4                            ; ---------------------------------------------------------------------------
00008EA4                            Obj11_BendData:	incbin	"misc\ghzbend1.bin"
00008FB4                            		even
00008FB4                            Obj11_BendData2:incbin	"misc\ghzbend2.bin"
000090B4                            		even
000090B4                            
000090B4                            ; ===========================================================================
000090B4                            
000090B4                            Bri_ChkDel:
000090D2 4E75                       		rts	
000090D4                            ; ===========================================================================
000090D4                            
000090D4                            @deletebridge:
000090D4 7400                       		moveq	#0,d2
000090D6 45E8 0028                  		lea	obSubtype(a0),a2 ; load bridge length
000090DA 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
000090DC 5302                       		subq.b	#1,d2		; subtract 1
000090DE 6500                       		bcs.s	@delparent
000090E0                            
000090E0                            	@loop:
000090E0 7000                       		moveq	#0,d0
000090E2 101A                       		move.b	(a2)+,d0
000090E4 ED48                       		lsl.w	#6,d0
000090E6 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000090EC 2240                       		movea.l	d0,a1
000090EE B048                       		cmp.w	a0,d0
000090F0 6700                       		beq.s	@skipdel
000090F2 6100 0000                  		bsr.w	DeleteChild
000090F6                            
000090F6                            	@skipdel:
000090F6 51CA FFE8                  		dbf	d2,@loop ; repeat d2 times (bridge length)
000090FA                            
000090FA                            @delparent:
000090FA 6100 0000                  		bsr.w	DeleteObject
000090FE 4E75                       		rts	
00009100                            ; ===========================================================================
00009100                            
00009100                            Bri_Delete:	; Routine 6, 8
00009100 6100 0000                  		bsr.w	DeleteObject
00009104 4E75                       		rts	
00009106                            ; ===========================================================================
00009106                            
00009106                            Bri_Display:	; Routine $A
00009106 6100 0000                  		bsr.w	DisplaySprite
0000910A 4E75                       		rts	
0000910A 4E75                       		rts	
0000910C                            Map_Bri:	include	"_maps\Bridge.asm"
0000910C                            ; ---------------------------------------------------------------------------
0000910C                            ; Sprite mappings - GHZ	bridge
0000910C                            ; ---------------------------------------------------------------------------
0000910C                            Map_Bri_internal:
0000910C 0000                       		dc.w M_Bri_Log-Map_Bri_internal
0000910E 0000                       		dc.w M_Bri_Stump-Map_Bri_internal
00009110 0000                       		dc.w M_Bri_Rope-Map_Bri_internal
00009112 01                         M_Bri_Log:	dc.b 1
00009113 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; log
00009118 02                         M_Bri_Stump:	dc.b 2
00009119 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0	; stump & rope
0000911E 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00009123 01                         M_Bri_Rope:	dc.b 1
00009124 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8	; rope only
0000912A 00                         		even
0000912A 00                         		even
0000912A                            
0000912A                            		include	"_incObj\15 Swinging Platforms (part 1).asm"
0000912A                            ; ---------------------------------------------------------------------------
0000912A                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
0000912A                            ;	    - spiked ball on a chain (SBZ)
0000912A                            ; ---------------------------------------------------------------------------
0000912A                            
0000912A                            SwingingPlatform:
0000912A 7000                       		moveq	#0,d0
0000912C 1028 0024                  		move.b	obRoutine(a0),d0
00009130 323B 0000                  		move.w	Swing_Index(pc,d0.w),d1
00009134 4EFB 1000                  		jmp	Swing_Index(pc,d1.w)
00009138                            ; ===========================================================================
00009138 0000 0000                  Swing_Index:	dc.w Swing_Main-Swing_Index, Swing_SetSolid-Swing_Index
0000913C 0000 0000                  		dc.w Swing_Action2-Swing_Index,	Swing_Delete-Swing_Index
00009140 0000 0000                  		dc.w Swing_Delete-Swing_Index, Swing_Display-Swing_Index
00009144 0000                       		dc.w Swing_Action-Swing_Index
00009146                            
00009146 =0000003A                  swing_origX:	equ $3A		; original x-axis position
00009146 =00000038                  swing_origY:	equ $38		; original y-axis position
00009146                            ; ===========================================================================
00009146                            
00009146                            Swing_Main:	; Routine 0
00009146 5428 0024                  		addq.b	#2,obRoutine(a0)
0000914A 217C 0000 0000 0004        		move.l	#Map_Swing_GHZ,obMap(a0) ; GHZ and MZ specific code
00009152 317C 4380 0002             		move.w	#$4380,obGfx(a0)
00009158 117C 0004 0001             		move.b	#4,obRender(a0)
0000915E 317C 0180 0018             		move.w	#$180,obPriority(a0)
00009164 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000916A 117C 0008 0016             		move.b	#8,obHeight(a0)
00009170 3168 000C 0038             		move.w	obY(a0),swing_origY(a0)
00009176 3168 0008 003A             		move.w	obX(a0),swing_origX(a0)
0000917C 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009182 6600                       		bne.s	@notSLZ
00009184                            
00009184 217C 0000 0000 0004        		move.l	#Map_Swing_SLZ,obMap(a0) ; SLZ specific code
0000918C 317C 43DC 0002             		move.w	#$43DC,obGfx(a0)
00009192 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009198 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000919E 117C 0099 0020             		move.b	#$99,obColType(a0)
000091A4                            
000091A4                            	@notSLZ:
000091A4 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
000091AA 6600                       		bne.s	@length
000091AC                            
000091AC 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0) ; SBZ specific code
000091B4 317C 0391 0002             		move.w	#$391,obGfx(a0)
000091BA 117C 0018 0014             		move.b	#$18,obActWid(a0)
000091C0 117C 0018 0016             		move.b	#$18,obHeight(a0)
000091C6 117C 0086 0020             		move.b	#$86,obColType(a0)
000091CC 117C 000C 0024             		move.b	#$C,obRoutine(a0) ; goto Swing_Action next
000091D2                            
000091D2                            @length:
000091D2 1810                       		move.b	0(a0),d4
000091D4 7200                       		moveq	#0,d1
000091D6 45E8 0028                  		lea	obSubtype(a0),a2 ; move chain length to a2
000091DA 1212                       		move.b	(a2),d1		; move a2 to d1
000091DC 3F01                       		move.w	d1,-(sp)
000091DE 0241 000F                  		andi.w	#$F,d1
000091E2 14FC 0000                  		move.b	#0,(a2)+
000091E6 3601                       		move.w	d1,d3
000091E8 E94B                       		lsl.w	#4,d3
000091EA 5003                       		addq.b	#8,d3
000091EC 1143 003C                  		move.b	d3,$3C(a0)
000091F0 5103                       		subq.b	#8,d3
000091F2 4A28 001A                  		tst.b	obFrame(a0)
000091F6 6700                       		beq.s	@makechain
000091F8 5003                       		addq.b	#8,d3
000091FA 5341                       		subq.w	#1,d1
000091FC                            
000091FC                            @makechain:
000091FC 6100 0000                  		bsr.w	FindFreeObj
00009200 6600                       		bne.s	@fail
00009202 5228 0028                  		addq.b	#1,obSubtype(a0)
00009206 3A09                       		move.w	a1,d5
00009208 0445 D000                  		subi.w	#$D000,d5
0000920C EC4D                       		lsr.w	#6,d5
0000920E 0245 007F                  		andi.w	#$7F,d5
00009212 14C5                       		move.b	d5,(a2)+
00009214 137C 000A 0024             		move.b	#$A,obRoutine(a1) ; goto Swing_Display next
0000921A 1284                       		move.b	d4,0(a1)	; load swinging	object
0000921C 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00009222 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009228 08A9 0006 0002             		bclr	#6,obGfx(a1)
0000922E 137C 0004 0001             		move.b	#4,obRender(a1)
00009234 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000923A 137C 0008 0014             		move.b	#8,obActWid(a1)
00009240 137C 0001 001A             		move.b	#1,obFrame(a1)
00009246 1343 003C                  		move.b	d3,$3C(a1)
0000924A 0403 0010                  		subi.b	#$10,d3
0000924E 6400                       		bcc.s	@notanchor
00009250 137C 0002 001A             		move.b	#2,obFrame(a1)
00009256 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000925C 08E9 0006 0002             		bset	#6,obGfx(a1)
00009262                            
00009262                            	@notanchor:
00009262 51C9 FF98                  		dbf	d1,@makechain ; repeat d1 times (chain length)
00009266                            
00009266                            	@fail:
00009266 3A08                       		move.w	a0,d5
00009268 0445 D000                  		subi.w	#$D000,d5
0000926C EC4D                       		lsr.w	#6,d5
0000926E 0245 007F                  		andi.w	#$7F,d5
00009272 14C5                       		move.b	d5,(a2)+
00009274 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0000927A 317C FE00 003E             		move.w	#-$200,$3E(a0)
00009280 321F                       		move.w	(sp)+,d1
00009282 0801 0004                  		btst	#4,d1		; is object type $1X ?
00009286 6700                       		beq.s	@not1X	; if not, branch
00009288 217C 0000 0000 0004        		move.l	#Map_GBall,obMap(a0) ; use GHZ ball mappings
00009290 317C 43AA 0002             		move.w	#$43AA,obGfx(a0)
00009296 117C 0001 001A             		move.b	#1,obFrame(a0)
0000929C 317C 0100 0018             		move.w	#$100,obPriority(a0)
000092A2 117C 0081 0020             		move.b	#$81,obColType(a0) ; make object hurt when touched
000092A8                            
000092A8                            	@not1X:
000092A8 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; is zone SBZ?
000092AE 6700                       		beq.s	Swing_Action	; if yes, branch
000092B0                            
000092B0                            Swing_SetSolid:	; Routine 2
000092B0 7200                       		moveq	#0,d1
000092B2 1228 0014                  		move.b	obActWid(a0),d1
000092B6 7600                       		moveq	#0,d3
000092B8 1628 0016                  		move.b	obHeight(a0),d3
000092BC 6100 FA76                  		bsr.w	Swing_Solid
000092C0                            
000092C0                            Swing_Action:	; Routine $C
000092C0 6100 0000                  		bsr.w	Swing_Move
000092C4 6100 0000                  		bsr.w	DisplaySprite
000092C8 6000 0000                  		bra.w	Swing_ChkDel
000092CC                            ; ===========================================================================
000092CC                            
000092CC                            Swing_Action2:	; Routine 4
000092CC 7200                       		moveq	#0,d1
000092CE 1228 0014                  		move.b	obActWid(a0),d1
000092D2 6100 FAC4                  		bsr.w	ExitPlatform
000092D6 3F28 0008                  		move.w	obX(a0),-(sp)
000092DA 6100 0000                  		bsr.w	Swing_Move
000092DE 341F                       		move.w	(sp)+,d2
000092E0 7600                       		moveq	#0,d3
000092E2 1628 0016                  		move.b	obHeight(a0),d3
000092E6 5203                       		addq.b	#1,d3
000092E8 6100 0000                  		bsr.w	MvSonicOnPtfm
000092EC 6100 0000                  		bsr.w	DisplaySprite
000092F0 6000 0000                  		bra.w	Swing_ChkDel
000092F4                            
000092F4 4E75                       		rts
000092F4 4E75                       		rts
000092F6                            
000092F6                            ; ---------------------------------------------------------------------------
000092F6                            ; Subroutine to	change Sonic's position with a platform
000092F6                            ; ---------------------------------------------------------------------------
000092F6                            
000092F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000092F6                            
000092F6                            
000092F6                            MvSonicOnPtfm:
000092F6 43F8 D000                  		lea	(v_player).w,a1
000092FA 3028 000C                  		move.w	obY(a0),d0
000092FE 9043                       		sub.w	d3,d0
00009300 6000                       		bra.s	MvSonic2
00009302                            ; End of function MvSonicOnPtfm
00009302                            
00009302                            ; ---------------------------------------------------------------------------
00009302                            ; Subroutine to	change Sonic's position with a platform
00009302                            ; ---------------------------------------------------------------------------
00009302                            
00009302                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009302                            
00009302                            
00009302                            MvSonicOnPtfm2:
00009302 43F8 D000                  		lea	(v_player).w,a1
00009306 3028 000C                  		move.w	obY(a0),d0
0000930A 0440 0009                  		subi.w	#9,d0
0000930E                            
0000930E                            MvSonic2:
0000930E 4A38 F7C8                  		tst.b	(f_lockmulti).w
00009312 6B00                       		bmi.s	locret_7B62
00009314 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000931A 6400                       		bhs.s	locret_7B62
0000931C 4A78 FE08                  		tst.w	(v_debuguse).w
00009320 6600                       		bne.s	locret_7B62
00009322 7200                       		moveq	#0,d1
00009324 1229 0016                  		move.b	obHeight(a1),d1
00009328 9041                       		sub.w	d1,d0
0000932A 3340 000C                  		move.w	d0,obY(a1)
0000932E 9468 0008                  		sub.w	obX(a0),d2
00009332 9569 0008                  		sub.w	d2,obX(a1)
00009336                            
00009336                            locret_7B62:
00009336 4E75                       		rts	
00009338                            ; End of function MvSonicOnPtfm2
00009338                            
00009338                            		include	"_incObj\15 Swinging Platforms (part 2).asm"
00009338                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009338                            
00009338                            
00009338                            Swing_Move:
00009338 1038 FE78                  		move.b	(v_oscillate+$1A).w,d0
0000933C 323C 0080                  		move.w	#$80,d1
00009340 0828 0000 0022             		btst	#0,obStatus(a0)
00009346 6700                       		beq.s	loc_7B78
00009348 4440                       		neg.w	d0
0000934A D041                       		add.w	d1,d0
0000934C                            
0000934C                            loc_7B78:
0000934C 6000                       		bra.s	Swing_Move2
0000934E                            ; End of function Swing_Move
0000934E                            
0000934E                            
0000934E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000934E                            
0000934E                            
0000934E                            Obj48_Move:
0000934E 4A28 003D                  		tst.b	$3D(a0)
00009352 6600                       		bne.s	loc_7B9C
00009354 3028 003E                  		move.w	$3E(a0),d0
00009358 5040                       		addq.w	#8,d0
0000935A 3140 003E                  		move.w	d0,$3E(a0)
0000935E D168 0026                  		add.w	d0,obAngle(a0)
00009362 0C40 0200                  		cmpi.w	#$200,d0
00009366 6600                       		bne.s	loc_7BB6
00009368 117C 0001 003D             		move.b	#1,$3D(a0)
0000936E 6000                       		bra.s	loc_7BB6
00009370                            ; ===========================================================================
00009370                            
00009370                            loc_7B9C:
00009370 3028 003E                  		move.w	$3E(a0),d0
00009374 5140                       		subq.w	#8,d0
00009376 3140 003E                  		move.w	d0,$3E(a0)
0000937A D168 0026                  		add.w	d0,obAngle(a0)
0000937E 0C40 FE00                  		cmpi.w	#-$200,d0
00009382 6600                       		bne.s	loc_7BB6
00009384 117C 0000 003D             		move.b	#0,$3D(a0)
0000938A                            
0000938A                            loc_7BB6:
0000938A 1028 0026                  		move.b	obAngle(a0),d0
0000938E                            ; End of function Obj48_Move
0000938E                            
0000938E                            
0000938E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000938E                            
0000938E                            
0000938E                            Swing_Move2:
0000938E 6100 A93A                  		bsr.w	CalcSine
00009392 3428 0038                  		move.w	$38(a0),d2
00009396 3628 003A                  		move.w	$3A(a0),d3
0000939A 45E8 0028                  		lea	obSubtype(a0),a2
0000939E 7C00                       		moveq	#0,d6
000093A0 1C1A                       		move.b	(a2)+,d6
000093A2                            
000093A2                            loc_7BCE:
000093A2 7800                       		moveq	#0,d4
000093A4 181A                       		move.b	(a2)+,d4
000093A6 ED4C                       		lsl.w	#6,d4
000093A8 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
000093AE 2244                       		movea.l	d4,a1
000093B0 7800                       		moveq	#0,d4
000093B2 1829 003C                  		move.b	$3C(a1),d4
000093B6 2A04                       		move.l	d4,d5
000093B8 C9C0                       		muls.w	d0,d4
000093BA E084                       		asr.l	#8,d4
000093BC CBC1                       		muls.w	d1,d5
000093BE E085                       		asr.l	#8,d5
000093C0 D842                       		add.w	d2,d4
000093C2 DA43                       		add.w	d3,d5
000093C4 3344 000C                  		move.w	d4,obY(a1)
000093C8 3345 0008                  		move.w	d5,obX(a1)
000093CC 51CE FFD4                  		dbf	d6,loc_7BCE
000093D0 4E75                       		rts	
000093D2                            ; End of function Swing_Move2
000093D2                            
000093D2                            ; ===========================================================================
000093D2                            
000093D2                            Swing_ChkDel:
000093F0 4E75                       		rts	
000093F2                            ; ===========================================================================
000093F2                            
000093F2                            Swing_DelAll:
000093F2 7400                       		moveq	#0,d2
000093F4 45E8 0028                  		lea	obSubtype(a0),a2
000093F8 141A                       		move.b	(a2)+,d2
000093FA                            
000093FA                            Swing_DelLoop:
000093FA 7000                       		moveq	#0,d0
000093FC 101A                       		move.b	(a2)+,d0
000093FE ED48                       		lsl.w	#6,d0
00009400 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009406 2240                       		movea.l	d0,a1
00009408 6100 0000                  		bsr.w	DeleteChild
0000940C 51CA FFEC                  		dbf	d2,Swing_DelLoop ; repeat for length of	chain
00009410 4E75                       		rts	
00009412                            ; ===========================================================================
00009412                            
00009412                            Swing_Delete:	; Routine 6, 8
00009412 6100 0000                  		bsr.w	DeleteObject
00009416 4E75                       		rts	
00009418                            ; ===========================================================================
00009418                            
00009418                            Swing_Display:	; Routine $A
00009418 6000 0000                  		bra.w	DisplaySprite
00009418 6000 0000                  		bra.w	DisplaySprite
0000941C                            Map_Swing_GHZ:	include	"_maps\Swinging Platforms (GHZ).asm"
0000941C                            ; ---------------------------------------------------------------------------
0000941C                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000941C                            ; ---------------------------------------------------------------------------
0000941C                            Map_Swing_GHZ_internal:
0000941C 0000                       		dc.w @block-Map_Swing_GHZ_internal
0000941E 0000                       		dc.w @chain-Map_Swing_GHZ_internal
00009420 0000                       		dc.w @anchor-Map_Swing_GHZ_internal
00009422 02                         @block:		dc.b 2
00009423 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00009428 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
0000942D 01                         @chain:		dc.b 1
0000942E F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00009433 01                         @anchor:	dc.b 1
00009434 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000943A 00                         		even
0000943A 00                         		even
0000943A                            Map_Swing_SLZ:	include	"_maps\Swinging Platforms (SLZ).asm"
0000943A                            ; ---------------------------------------------------------------------------
0000943A                            ; Sprite mappings - SLZ	swinging platforms
0000943A                            ; ---------------------------------------------------------------------------
0000943A                            Map_Swing_SLZ_internal:
0000943A 0000                       		dc.w @block-Map_Swing_SLZ_internal
0000943C 0000                       		dc.w @chain-Map_Swing_SLZ_internal
0000943E 0000                       		dc.w @anchor-Map_Swing_SLZ_internal
00009440 08                         @block:		dc.b 8
00009441 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00009446 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000944B F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00009450 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00009455 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
0000945A 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
0000945F 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00009464 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00009469 01                         @chain:		dc.b 1
0000946A F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
0000946F 01                         @anchor:	dc.b 1
00009470 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00009476 00                         		even
00009476 00                         		even
00009476                            		include	"_incObj\17 Spiked Pole Helix.asm"
00009476                            ; ---------------------------------------------------------------------------
00009476                            ; Object 17 - helix of spikes on a pole	(GHZ)
00009476                            ; ---------------------------------------------------------------------------
00009476                            
00009476                            Helix:
00009476 7000                       		moveq	#0,d0
00009478 1028 0024                  		move.b	obRoutine(a0),d0
0000947C 323B 0000                  		move.w	Hel_Index(pc,d0.w),d1
00009480 4EFB 1000                  		jmp	Hel_Index(pc,d1.w)
00009484                            ; ===========================================================================
00009484 0000                       Hel_Index:	dc.w Hel_Main-Hel_Index
00009486 0000                       		dc.w Hel_Action-Hel_Index
00009488 0000                       		dc.w Hel_Action-Hel_Index
0000948A 0000                       		dc.w Hel_Delete-Hel_Index
0000948C 0000                       		dc.w Hel_Display-Hel_Index
0000948E                            
0000948E =0000003E                  hel_frame:	equ $3E		; start frame (different for each spike)
0000948E                            
0000948E                            ;		$29-38 are used for child object addresses
0000948E                            ; ===========================================================================
0000948E                            
0000948E                            Hel_Main:	; Routine 0
0000948E 5428 0024                  		addq.b	#2,obRoutine(a0)
00009492 217C 0000 0000 0004        		move.l	#Map_Hel,obMap(a0)
0000949A 317C 4398 0002             		move.w	#$4398,obGfx(a0)
000094A0 117C 0007 0022             		move.b	#7,obStatus(a0)
000094A6 117C 0004 0001             		move.b	#4,obRender(a0)
000094AC 317C 0180 0018             		move.w	#$180,obPriority(a0)
000094B2 117C 0008 0014             		move.b	#8,obActWid(a0)
000094B8 3428 000C                  		move.w	obY(a0),d2
000094BC 3628 0008                  		move.w	obX(a0),d3
000094C0 1810                       		move.b	0(a0),d4
000094C2 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
000094C6 7200                       		moveq	#0,d1
000094C8 1212                       		move.b	(a2),d1		; move helix length to d1
000094CA 14FC 0000                  		move.b	#0,(a2)+	; clear subtype
000094CE 3001                       		move.w	d1,d0
000094D0 E248                       		lsr.w	#1,d0
000094D2 E948                       		lsl.w	#4,d0
000094D4 9640                       		sub.w	d0,d3		; d3 is x-axis position of leftmost spike
000094D6 5501                       		subq.b	#2,d1
000094D8 6500                       		bcs.s	Hel_Action	; skip to action if length is only 1
000094DA 7C00                       		moveq	#0,d6
000094DC                            
000094DC                            Hel_Build:
000094DC 6100 0000                  		bsr.w	FindFreeObj
000094E0 6600                       		bne.s	Hel_Action
000094E2 5228 0028                  		addq.b	#1,obSubtype(a0)
000094E6 3A09                       		move.w	a1,d5
000094E8 0445 D000                  		subi.w	#$D000,d5
000094EC EC4D                       		lsr.w	#6,d5
000094EE 0245 007F                  		andi.w	#$7F,d5
000094F2 14C5                       		move.b	d5,(a2)+	; copy child address to parent RAM
000094F4 137C 0008 0024             		move.b	#8,obRoutine(a1)
000094FA 1284                       		move.b	d4,0(a1)
000094FC 3342 000C                  		move.w	d2,ObY(a1)
00009500 3343 0008                  		move.w	d3,obX(a1)
00009504 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
0000950A 337C 4398 0002             		move.w	#$4398,obGfx(a1)
00009510 137C 0004 0001             		move.b	#4,obRender(a1)
00009516 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000951C 137C 0008 0014             		move.b	#8,obActWid(a1)
00009522 1346 003E                  		move.b	d6,hel_frame(a1)
00009526 5206                       		addq.b	#1,d6
00009528 0206 0007                  		andi.b	#7,d6
0000952C 0643 0010                  		addi.w	#$10,d3
00009530 B668 0008                  		cmp.w	obX(a0),d3	; is this spike in the centre?
00009534 6600                       		bne.s	Hel_NotCentre	; if not, branch
00009536                            
00009536 1146 003E                  		move.b	d6,hel_frame(a0) ; set parent spike frame
0000953A 5206                       		addq.b	#1,d6
0000953C 0206 0007                  		andi.b	#7,d6
00009540 0643 0010                  		addi.w	#$10,d3		; skip to next spike
00009544 5228 0028                  		addq.b	#1,obSubtype(a0)
00009548                            
00009548                            	Hel_NotCentre:
00009548 51C9 FF92                  		dbf	d1,Hel_Build ; repeat d1 times (helix length)
0000954C                            
0000954C                            Hel_Action:	; Routine 2, 4
0000954C 6100 0000                  		bsr.w	Hel_RotateSpikes
00009550 6100 0000                  		bsr.w	DisplaySprite
00009554 6000 0000                  		bra.w	Hel_ChkDel
00009558                            
00009558                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009558                            
00009558                            
00009558                            Hel_RotateSpikes:
00009558 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0000955C 117C 0000 0020             		move.b	#0,obColType(a0) ; make object harmless
00009562 D028 003E                  		add.b	hel_frame(a0),d0
00009566 0200 0007                  		andi.b	#7,d0
0000956A 1140 001A                  		move.b	d0,obFrame(a0)	; change current frame
0000956E 6600                       		bne.s	locret_7DA6
00009570 117C 0084 0020             		move.b	#$84,obColType(a0) ; make object harmful
00009576                            
00009576                            locret_7DA6:
00009576 4E75                       		rts	
00009578                            ; End of function Hel_RotateSpikes
00009578                            
00009578                            ; ===========================================================================
00009578                            
00009578                            Hel_ChkDel:
00009596 4E75                       		rts	
00009598                            ; ===========================================================================
00009598                            
00009598                            Hel_DelAll:
00009598 7400                       		moveq	#0,d2
0000959A 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
0000959E 141A                       		move.b	(a2)+,d2	; move helix length to d2
000095A0 5502                       		subq.b	#2,d2
000095A2 6500                       		bcs.s	Hel_Delete
000095A4                            
000095A4                            	Hel_DelLoop:
000095A4 7000                       		moveq	#0,d0
000095A6 101A                       		move.b	(a2)+,d0
000095A8 ED48                       		lsl.w	#6,d0
000095AA 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000095B0 2240                       		movea.l	d0,a1		; get child address
000095B2 6100 0000                  		bsr.w	DeleteChild	; delete object
000095B6 51CA FFEC                  		dbf	d2,Hel_DelLoop ; repeat d2 times (helix length)
000095BA                            
000095BA                            Hel_Delete:	; Routine 6
000095BA 6100 0000                  		bsr.w	DeleteObject
000095BE 4E75                       		rts	
000095C0                            ; ===========================================================================
000095C0                            
000095C0                            Hel_Display:	; Routine 8
000095C0 6100 FF96                  		bsr.w	Hel_RotateSpikes
000095C4 6000 0000                  		bra.w	DisplaySprite
000095C4 6000 0000                  		bra.w	DisplaySprite
000095C8                            Map_Hel:	include	"_maps\Spiked Pole Helix.asm"
000095C8                            ; ---------------------------------------------------------------------------
000095C8                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000095C8                            ; ---------------------------------------------------------------------------
000095C8                            Map_Hel_internal:
000095C8 0000                       		dc.w byte_7E08-Map_Hel_internal
000095CA 0000                       		dc.w byte_7E0E-Map_Hel_internal
000095CC 0000                       		dc.w byte_7E14-Map_Hel_internal
000095CE 0000                       		dc.w byte_7E1A-Map_Hel_internal
000095D0 0000                       		dc.w byte_7E20-Map_Hel_internal
000095D2 0000                       		dc.w byte_7E26-Map_Hel_internal
000095D4 0000                       		dc.w byte_7E2E-Map_Hel_internal
000095D6 0000                       		dc.w byte_7E2C-Map_Hel_internal
000095D8 01                         byte_7E08:	dc.b 1
000095D9 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC	; points straight up (harmful)
000095DE 01                         byte_7E0E:	dc.b 1
000095DF F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8	; 45 degree
000095E4 01                         byte_7E14:	dc.b 1
000095E5 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8	; 90 degree
000095EA 01                         byte_7E1A:	dc.b 1
000095EB FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8	; 45 degree
000095F0 01                         byte_7E20:	dc.b 1
000095F1 0001 000E FC               		dc.b 0,	1, 0, $E, $FC	; straight down
000095F6 01                         byte_7E26:	dc.b 1
000095F7 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD	; 45 degree
000095FC 01                         byte_7E2C:	dc.b 1
000095FD F4                         		dc.b $F4
000095FE                            byte_7E2E:	; reads the 0 below	; not visible
000095FE 0000 11FD                  		dc.b 0, 0,	$11, $FD ; 45 degree
00009602                            		even
00009602                            		even
00009602                            		include	"_incObj\18 Platforms.asm"
00009602                            ; ---------------------------------------------------------------------------
00009602                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00009602                            ; ---------------------------------------------------------------------------
00009602                            
00009602                            BasicPlatform:
00009602 7000                       		moveq	#0,d0
00009604 1028 0024                  		move.b	obRoutine(a0),d0
00009608 323B 0000                  		move.w	Plat_Index(pc,d0.w),d1
0000960C 4EFB 1000                  		jmp	Plat_Index(pc,d1.w)
00009610                            ; ===========================================================================
00009610 0000                       Plat_Index:	dc.w Plat_Main-Plat_Index
00009612 0000                       		dc.w Plat_Solid-Plat_Index
00009614 0000                       		dc.w Plat_Action2-Plat_Index
00009616 0000                       		dc.w Plat_Delete-Plat_Index
00009618 0000                       		dc.w Plat_Action-Plat_Index
0000961A                            ; ===========================================================================
0000961A                            
0000961A                            Plat_Main:	; Routine 0
0000961A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000961E 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009624 217C 0000 0000 0004        		move.l	#Map_Plat_GHZ,obMap(a0)
0000962C 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009632 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SYZ
00009638 6600                       		bne.s	@notSYZ
0000963A                            
0000963A 217C 0000 0000 0004        		move.l	#Map_Plat_SYZ,obMap(a0) ; SYZ specific code
00009642 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009648                            
00009648                            	@notSYZ:
00009648 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
0000964E 6600                       		bne.s	@notSLZ
00009650 217C 0000 0000 0004        		move.l	#Map_Plat_SLZ,obMap(a0) ; SLZ specific code
00009658 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000965E 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009664 117C 0003 0028             		move.b	#3,obSubtype(a0)
0000966A                            
0000966A                            	@notSLZ:
0000966A 117C 0004 0001             		move.b	#4,obRender(a0)
00009670 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009676 3168 000C 002C             		move.w	obY(a0),$2C(a0)
0000967C 3168 000C 0034             		move.w	obY(a0),$34(a0)
00009682 3168 0008 0032             		move.w	obX(a0),$32(a0)
00009688 317C 0080 0026             		move.w	#$80,obAngle(a0)
0000968E 7200                       		moveq	#0,d1
00009690 1028 0028                  		move.b	obSubtype(a0),d0
00009694 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00009698 6600                       		bne.s	@setframe	; if not, branch
0000969A 5201                       		addq.b	#1,d1		; use frame #1
0000969C 117C 0020 0014             		move.b	#$20,obActWid(a0) ; set width
000096A2                            
000096A2                            	@setframe:
000096A2 1141 001A                  		move.b	d1,obFrame(a0)	; set frame to d1
000096A6                            
000096A6                            Plat_Solid:	; Routine 2
000096A6 4A28 0038                  		tst.b	$38(a0)
000096AA 6700                       		beq.s	loc_7EE0
000096AC 5928 0038                  		subq.b	#4,$38(a0)
000096B0                            
000096B0                            	loc_7EE0:
000096B0 7200                       		moveq	#0,d1
000096B2 1228 0014                  		move.b	obActWid(a0),d1
000096B6 6100 F56C                  		bsr.w	PlatformObject
000096BA                            
000096BA                            Plat_Action:	; Routine 8
000096BA 6100 0000                  		bsr.w	Plat_Move
000096BE 6100 0000                  		bsr.w	Plat_Nudge
000096C2 6100 0000                  		bsr.w	DisplaySprite
000096C6 6000 0000                  		bra.w	Plat_ChkDel
000096CA                            ; ===========================================================================
000096CA                            
000096CA                            Plat_Action2:	; Routine 4
000096CA 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
000096D0 6700                       		beq.s	loc_7F06
000096D2 5828 0038                  		addq.b	#4,$38(a0)
000096D6                            
000096D6                            	loc_7F06:
000096D6 7200                       		moveq	#0,d1
000096D8 1228 0014                  		move.b	obActWid(a0),d1
000096DC 6100 F6BA                  		bsr.w	ExitPlatform
000096E0 3F28 0008                  		move.w	obX(a0),-(sp)
000096E4 6100 0000                  		bsr.w	Plat_Move
000096E8 6100 0000                  		bsr.w	Plat_Nudge
000096EC 341F                       		move.w	(sp)+,d2
000096EE 6100 FC12                  		bsr.w	MvSonicOnPtfm2
000096F2 6100 0000                  		bsr.w	DisplaySprite
000096F6 6000 0000                  		bra.w	Plat_ChkDel
000096FA                            
000096FA 4E75                       		rts
000096FC                            
000096FC                            ; ---------------------------------------------------------------------------
000096FC                            ; Subroutine to	move platform slightly when you	stand on it
000096FC                            ; ---------------------------------------------------------------------------
000096FC                            
000096FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000096FC                            
000096FC                            
000096FC                            Plat_Nudge:
000096FC 1028 0038                  		move.b	$38(a0),d0
00009700 6100 A5C8                  		bsr.w	CalcSine
00009704 323C 0400                  		move.w	#$400,d1
00009708 C1C1                       		muls.w	d1,d0
0000970A 4840                       		swap	d0
0000970C D068 002C                  		add.w	$2C(a0),d0
00009710 3140 000C                  		move.w	d0,obY(a0)
00009714 4E75                       		rts	
00009716                            ; End of function Plat_Nudge
00009716                            
00009716                            ; ---------------------------------------------------------------------------
00009716                            ; Subroutine to	move platforms
00009716                            ; ---------------------------------------------------------------------------
00009716                            
00009716                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009716                            
00009716                            
00009716                            Plat_Move:
00009716 7000                       		moveq	#0,d0
00009718 1028 0028                  		move.b	obSubtype(a0),d0
0000971C 0240 000F                  		andi.w	#$F,d0
00009720 D040                       		add.w	d0,d0
00009722 323B 0000                  		move.w	@index(pc,d0.w),d1
00009726 4EFB 1000                  		jmp	@index(pc,d1.w)
0000972A                            ; End of function Plat_Move
0000972A                            
0000972A                            ; ===========================================================================
0000972A 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
0000972E 0000 0000                  		dc.w @type02-@index, @type03-@index
00009732 0000 0000                  		dc.w @type04-@index, @type05-@index
00009736 0000 0000                  		dc.w @type06-@index, @type07-@index
0000973A 0000 0000                  		dc.w @type08-@index, @type00-@index
0000973E 0000 0000                  		dc.w @type0A-@index, @type0B-@index
00009742 0000                       		dc.w @type0C-@index
00009744                            ; ===========================================================================
00009744                            
00009744                            @type00:
00009744 4E75                       		rts			; platform 00 doesn't move
00009746                            ; ===========================================================================
00009746                            
00009746                            @type05:
00009746 3028 0032                  		move.w	$32(a0),d0
0000974A 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
0000974E 4401                       		neg.b	d1		; reverse platform-motion
00009750 0601 0040                  		addi.b	#$40,d1
00009754 6000                       		bra.s	@type01_move
00009756                            ; ===========================================================================
00009756                            
00009756                            @type01:
00009756 3028 0032                  		move.w	$32(a0),d0
0000975A 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
0000975E 0401 0040                  		subi.b	#$40,d1
00009762                            
00009762                            	@type01_move:
00009762 4881                       		ext.w	d1
00009764 D041                       		add.w	d1,d0
00009766 3140 0008                  		move.w	d0,obX(a0)	; change position on x-axis
0000976A 6000 0000                  		bra.w	@chgmotion
0000976E                            ; ===========================================================================
0000976E                            
0000976E                            @type0C:
0000976E 3028 0034                  		move.w	$34(a0),d0
00009772 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00009776 4401                       		neg.b	d1		; reverse platform-motion
00009778 0601 0030                  		addi.b	#$30,d1
0000977C 6000                       		bra.s	@type02_move
0000977E                            ; ===========================================================================
0000977E                            
0000977E                            @type0B:
0000977E 3028 0034                  		move.w	$34(a0),d0
00009782 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00009786 0401 0030                  		subi.b	#$30,d1
0000978A 6000                       		bra.s	@type02_move
0000978C                            ; ===========================================================================
0000978C                            
0000978C                            @type06:
0000978C 3028 0034                  		move.w	$34(a0),d0
00009790 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009794 4401                       		neg.b	d1		; reverse platform-motion
00009796 0601 0040                  		addi.b	#$40,d1
0000979A 6000                       		bra.s	@type02_move
0000979C                            ; ===========================================================================
0000979C                            
0000979C                            @type02:
0000979C 3028 0034                  		move.w	$34(a0),d0
000097A0 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
000097A4 0401 0040                  		subi.b	#$40,d1
000097A8                            
000097A8                            	@type02_move:
000097A8 4881                       		ext.w	d1
000097AA D041                       		add.w	d1,d0
000097AC 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000097B0 6000 0000                  		bra.w	@chgmotion
000097B4                            ; ===========================================================================
000097B4                            
000097B4                            @type03:
000097B4 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000097B8 6600                       		bne.s	@type03_wait	; if yes, branch
000097BA 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the platform?
000097C0 6700                       		beq.s	@type03_nomove	; if not, branch
000097C2 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
000097C8                            
000097C8                            	@type03_nomove:
000097C8 4E75                       		rts	
000097CA                            
000097CA                            	@type03_wait:
000097CA 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000097CE 66F8                       		bne.s	@type03_nomove	; if time is > 0, branch
000097D0 317C 0020 003A             		move.w	#32,$3A(a0)
000097D6 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 04 (falling)
000097DA 4E75                       		rts	
000097DC                            ; ===========================================================================
000097DC                            
000097DC                            @type04:
000097DC 4A68 003A                  		tst.w	$3A(a0)
000097E0 6700                       		beq.s	@loc_8048
000097E2 5368 003A                  		subq.w	#1,$3A(a0)
000097E6 6600                       		bne.s	@loc_8048
000097E8 0828 0003 0022             		btst	#3,obStatus(a0)
000097EE 6700                       		beq.s	@loc_8042
000097F0 08E9 0001 0022             		bset	#1,obStatus(a1)
000097F6 08A9 0003 0022             		bclr	#3,obStatus(a1)
000097FC 137C 0002 0024             		move.b	#2,obRoutine(a1)
00009802 08A8 0003 0022             		bclr	#3,obStatus(a0)
00009808 4228 0025                  		clr.b	$25(a0)
0000980C 3368 0012 0012             		move.w	obVelY(a0),obVelY(a1)
00009812                            
00009812                            	@loc_8042:
00009812 117C 0008 0024             		move.b	#8,obRoutine(a0)
00009818                            
00009818                            	@loc_8048:
00009818 2628 002C                  		move.l	$2C(a0),d3
0000981C 3028 0012                  		move.w	obVelY(a0),d0
00009820 48C0                       		ext.l	d0
00009822 E180                       		asl.l	#8,d0
00009824 D680                       		add.l	d0,d3
00009826 2143 002C                  		move.l	d3,$2C(a0)
0000982A 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00009830 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00009834 0640 00E0                  		addi.w	#$E0,d0
00009838 B068 002C                  		cmp.w	$2C(a0),d0
0000983C 6400                       		bcc.s	@locret_8074
0000983E 117C 0006 0024             		move.b	#6,obRoutine(a0)
00009844                            
00009844                            	@locret_8074:
00009844 4E75                       		rts	
00009846                            ; ===========================================================================
00009846                            
00009846                            @type07:
00009846 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000984A 6600                       		bne.s	@type07_wait	; if yes, branch
0000984C 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
00009850 7000                       		moveq	#0,d0
00009852 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type ($x7) to d0
00009856 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00009858 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
0000985C 6700                       		beq.s	@type07_nomove	; if not, branch
0000985E 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00009864                            
00009864                            	@type07_nomove:
00009864 4E75                       		rts	
00009866                            
00009866                            	@type07_wait:
00009866 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0000986A 66F8                       		bne.s	@type07_nomove	; if time is > 0, branch
0000986C 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 08
00009870 4E75                       		rts	
00009872                            ; ===========================================================================
00009872                            
00009872                            @type08:
00009872 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00009876 3028 0034                  		move.w	$34(a0),d0
0000987A 0440 0200                  		subi.w	#$200,d0
0000987E B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00009882 6600                       		bne.s	@type08_nostop	; if not, branch
00009884 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (stop moving)
00009888                            
00009888                            	@type08_nostop:
00009888 4E75                       		rts	
0000988A                            ; ===========================================================================
0000988A                            
0000988A                            @type0A:
0000988A 3028 0034                  		move.w	$34(a0),d0
0000988E 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009892 0401 0040                  		subi.b	#$40,d1
00009896 4881                       		ext.w	d1
00009898 E241                       		asr.w	#1,d1
0000989A D041                       		add.w	d1,d0
0000989C 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000098A0                            
000098A0                            @chgmotion:
000098A0 1178 FE78 0026             		move.b	(v_oscillate+$1A).w,$26(a0) ; update platform-movement variable
000098A6 4E75                       		rts	
000098A8                            ; ===========================================================================
000098A8                            
000098A8                            Plat_ChkDel:
000098C4 4E75                       		rts	
000098C6                            ; ===========================================================================
000098C6                            
000098C6                            Plat_Delete:	; Routine 6
000098C6 6000 0000                  		bra.w	DeleteObject
000098C6 6000 0000                  		bra.w	DeleteObject
000098CA                            Map_Plat_Unused:include	"_maps\Platforms (unused).asm"
000098CA                            ; ---------------------------------------------------------------------------
000098CA                            ; Sprite mappings - unused
000098CA                            ; ---------------------------------------------------------------------------
000098CA                            Map_Plat_Unused_internal:
000098CA 0000                       		dc.w @small-Map_Plat_Unused_internal
000098CC 0000                       		dc.w @large-Map_Plat_Unused_internal
000098CE 02                         @small:		dc.b 2
000098CF F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
000098D4 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
000098D9 0A                         @large:		dc.b $A
000098DA F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
000098DF 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
000098E4 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
000098E9 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
000098EE 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
000098F3 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
000098F8 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
000098FD 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00009902 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00009907 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
0000990C                            		even
0000990C                            		even
0000990C                            Map_Plat_GHZ:	include	"_maps\Platforms (GHZ).asm"
0000990C                            ; ---------------------------------------------------------------------------
0000990C                            ; Sprite mappings - GHZ	platforms
0000990C                            ; ---------------------------------------------------------------------------
0000990C                            Map_Plat_GHZ_internal:
0000990C 0000                       		dc.w @small-Map_Plat_GHZ_internal
0000990E 0000                       		dc.w @large-Map_Plat_GHZ_internal
00009910 04                         @small:		dc.b 4
00009911 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00009916 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
0000991B F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00009920 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00009925 0A                         @large:		dc.b $A
00009926 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
0000992B 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009930 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00009935 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
0000993A 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
0000993F F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00009944 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00009949 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
0000994E 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00009953 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00009958                            		even
00009958                            		even
00009958                            Map_Plat_SYZ:	include	"_maps\Platforms (SYZ).asm"
00009958                            ; ---------------------------------------------------------------------------
00009958                            ; Sprite mappings - SYZ	platforms
00009958                            ; ---------------------------------------------------------------------------
00009958                            Map_Plat_SYZ_internal:
00009958 0000                       		dc.w @platform-Map_Plat_SYZ_internal
0000995A 03                         @platform:	dc.b 3
0000995B F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00009960 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00009965 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
0000996A                            		even
0000996A                            		even
0000996A                            Map_Plat_SLZ:	include	"_maps\Platforms (SLZ).asm"
0000996A                            ; ---------------------------------------------------------------------------
0000996A                            ; Sprite mappings - SLZ	platforms
0000996A                            ; ---------------------------------------------------------------------------
0000996A                            Map_Plat_SLZ_internal:
0000996A 0000                       		dc.w @platform-Map_Plat_SLZ_internal
0000996C 02                         @platform:	dc.b 2
0000996D F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00009972 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00009978 00                         		even
00009978 00                         		even
00009978                            Map_GBall:	include	"_maps\GHZ Ball.asm"
00009978                            ; ---------------------------------------------------------------------------
00009978                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009978                            ; ---------------------------------------------------------------------------
00009978                            Map_GBall_internal:
00009978 0000                       		dc.w @shiny-Map_GBall_internal
0000997A 0000                       		dc.w @check1-Map_GBall_internal
0000997C 0000                       		dc.w @check2-Map_GBall_internal
0000997E 0000                       		dc.w @check3-Map_GBall_internal
00009980 06                         @shiny:		dc.b 6
00009981 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009986 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
0000998B E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00009990 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00009995 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
0000999A 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0000999F 04                         @check1:	dc.b 4
000099A0 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
000099A5 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
000099AA 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
000099AF 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
000099B4 04                         @check2:	dc.b 4
000099B5 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000099BA E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000099BF 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000099C4 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000099C9 04                         @check3:	dc.b 4
000099CA E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000099CF E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000099D4 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000099D9 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000099DE                            		even
000099DE                            		even
000099DE                            		include	"_incObj\1A Collapsing Ledge (part 1).asm"
000099DE                            ; ---------------------------------------------------------------------------
000099DE                            ; Object 1A - GHZ collapsing ledge
000099DE                            ; ---------------------------------------------------------------------------
000099DE                            
000099DE                            CollapseLedge:
000099DE 7000                       		moveq	#0,d0
000099E0 1028 0024                  		move.b	obRoutine(a0),d0
000099E4 323B 0000                  		move.w	Ledge_Index(pc,d0.w),d1
000099E8 4EFB 1000                  		jmp	Ledge_Index(pc,d1.w)
000099EC                            ; ===========================================================================
000099EC 0000 0000                  Ledge_Index:	dc.w Ledge_Main-Ledge_Index, Ledge_Touch-Ledge_Index
000099F0 0000 0000                  		dc.w Ledge_Collapse-Ledge_Index, Ledge_Display-Ledge_Index
000099F4 0000 0000                  		dc.w Ledge_Delete-Ledge_Index, Ledge_WalkOff-Ledge_Index
000099F8                            
000099F8 =00000038                  ledge_timedelay:	equ $38		; time between touching the ledge and it collapsing
000099F8 =0000003A                  ledge_collapse_flag:	equ $3A		; collapse flag
000099F8                            ; ===========================================================================
000099F8                            
000099F8                            Ledge_Main:	; Routine 0
000099F8 5428 0024                  		addq.b	#2,obRoutine(a0)
000099FC 217C 0000 0000 0004        		move.l	#Map_Ledge,obMap(a0)
00009A04 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009A0A 0028 0004 0001             		ori.b	#4,obRender(a0)
00009A10 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009A16 117C 0007 0038             		move.b	#7,ledge_timedelay(a0) ; set time delay for collapse
00009A1C 117C 0064 0014             		move.b	#$64,obActWid(a0)
00009A22 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00009A28 117C 0038 0016             		move.b	#$38,obHeight(a0)
00009A2E 08E8 0004 0001             		bset	#4,obRender(a0)
00009A34                            
00009A34                            Ledge_Touch:	; Routine 2
00009A34 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009A38 6700                       		beq.s	@slope		; if not, branch
00009A3A 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time reached zero?
00009A3E 6700 0000                  		beq.w	Ledge_Fragment	; if yes, branch
00009A42 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009A46                            
00009A46                            	@slope:
00009A46 323C 0030                  		move.w	#$30,d1
00009A4A 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009A50 6100 F2A6                  		bsr.w	SlopeObject
00009A54 6000 0000                  		bra.w	RememberState
00009A58                            ; ===========================================================================
00009A58                            
00009A58                            Ledge_Collapse:	; Routine 4
00009A58 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009A5C 6700 0000                  		beq.w	loc_847A
00009A60 117C 0001 003A             		move.b	#1,ledge_collapse_flag(a0)	; set collapse flag
00009A66 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009A6A                            
00009A6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009A6A                            
00009A6A                            
00009A6A                            Ledge_WalkOff:	; Routine $A
00009A6A 323C 0030                  		move.w	#$30,d1
00009A6E 6100 F328                  		bsr.w	ExitPlatform
00009A72 323C 0030                  		move.w	#$30,d1
00009A76 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009A7C 3428 0008                  		move.w	obX(a0),d2
00009A80 6100 0000                  		bsr.w	SlopeObject2
00009A84 6000 0000                  		bra.w	RememberState
00009A88                            ; End of function Ledge_WalkOff
00009A88                            
00009A88                            ; ===========================================================================
00009A88                            
00009A88                            Ledge_Display:	; Routine 6
00009A88 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time delay reached zero?
00009A8C 6700                       		beq.s	Ledge_TimeZero	; if yes, branch
00009A8E 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009A92 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009A96 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009A9A 6000 0000                  		bra.w	DisplaySprite
00009A9E                            ; ===========================================================================
00009A9E                            
00009A9E                            loc_82D0:
00009A9E 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009AA2 6100 FFC6                  		bsr.w	Ledge_WalkOff
00009AA6 43F8 D000                  		lea	(v_player).w,a1
00009AAA 0829 0003 0022             		btst	#3,obStatus(a1)
00009AB0 6700                       		beq.s	loc_82FC
00009AB2 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009AB6 6600                       		bne.s	locret_8308
00009AB8 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009ABE 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009AC4 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009ACA                            
00009ACA                            loc_82FC:
00009ACA 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009AD0 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "Ledge_Display" routine
00009AD6                            
00009AD6                            locret_8308:
00009AD6 4E75                       		rts	
00009AD8                            ; ===========================================================================
00009AD8                            
00009AD8                            Ledge_TimeZero:
00009AD8 6100 0000                  		bsr.w	ObjectFall
00009ADC 6100 0000                  		bsr.w	DisplaySprite
00009AE0 4A28 0001                  		tst.b	obRender(a0)
00009AE4 6A00                       		bpl.s	Ledge_Delete
00009AE6 4E75                       		rts	
00009AE8                            ; ===========================================================================
00009AE8                            
00009AE8                            Ledge_Delete:	; Routine 8
00009AE8 6100 0000                  		bsr.w	DeleteObject
00009AEC 4E75                       		rts	
00009AEC 4E75                       		rts	
00009AEE                            		include	"_incObj\53 Collapsing Floors.asm"
00009AEE                            ; ---------------------------------------------------------------------------
00009AEE                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00009AEE                            ; ---------------------------------------------------------------------------
00009AEE                            
00009AEE                            CollapseFloor:
00009AEE 7000                       		moveq	#0,d0
00009AF0 1028 0024                  		move.b	obRoutine(a0),d0
00009AF4 323B 0000                  		move.w	CFlo_Index(pc,d0.w),d1
00009AF8 4EFB 1000                  		jmp	CFlo_Index(pc,d1.w)
00009AFC                            ; ===========================================================================
00009AFC 0000 0000                  CFlo_Index:	dc.w CFlo_Main-CFlo_Index, CFlo_Touch-CFlo_Index
00009B00 0000 0000                  		dc.w CFlo_Collapse-CFlo_Index, CFlo_Display-CFlo_Index
00009B04 0000 0000                  		dc.w CFlo_Delete-CFlo_Index, CFlo_WalkOff-CFlo_Index
00009B08                            
00009B08 =00000038                  cflo_timedelay:		equ $38
00009B08 =0000003A                  cflo_collapse_flag:	equ $3A
00009B08                            ; ===========================================================================
00009B08                            
00009B08                            CFlo_Main:	; Routine 0
00009B08 5428 0024                  		addq.b	#2,obRoutine(a0)
00009B0C 217C 0000 0000 0004        		move.l	#Map_CFlo,obMap(a0)
00009B14 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00009B1A 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009B20 6600                       		bne.s	@notSLZ
00009B22                            
00009B22 317C 44E0 0002             		move.w	#$44E0,obGfx(a0) ; SLZ specific code
00009B28 5428 001A                  		addq.b	#2,obFrame(a0)
00009B2C                            
00009B2C                            	@notSLZ:
00009B2C 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SBZ
00009B32 6600                       		bne.s	@notSBZ
00009B34 317C 43C2 0002             		move.w	#$43C2,obGfx(a0) ; SBZ specific code
00009B3A                            
00009B3A                            	@notSBZ:
00009B3A 0028 0004 0001             		ori.b	#4,obRender(a0)
00009B40 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009B46 117C 0007 0038             		move.b	#7,cflo_timedelay(a0)
00009B4C 117C 0044 0014             		move.b	#$44,obActWid(a0)
00009B52                            
00009B52                            CFlo_Touch:	; Routine 2
00009B52 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009B56 6700                       		beq.s	@solid		; if not, branch
00009B58 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009B5C 6700 0000                  		beq.w	CFlo_Fragment	; if yes, branch
00009B60 5328 0038                  		subq.b	#1,cflo_timedelay(a0) ; subtract 1 from time
00009B64                            
00009B64                            	@solid:
00009B64 323C 0020                  		move.w	#$20,d1
00009B68 6100 F0BA                  		bsr.w	PlatformObject
00009B6C 4A28 0028                  		tst.b	obSubtype(a0)
00009B70 6A00                       		bpl.s	@remstate
00009B72 0829 0003 0022             		btst	#3,obStatus(a1)
00009B78 6700                       		beq.s	@remstate
00009B7A 08A8 0000 0001             		bclr	#0,obRender(a0)
00009B80 3029 0008                  		move.w	obX(a1),d0
00009B84 9068 0008                  		sub.w	obX(a0),d0
00009B88 6400                       		bcc.s	@remstate
00009B8A 08E8 0000 0001             		bset	#0,obRender(a0)
00009B90                            
00009B90                            	@remstate:
00009B90 6000 0000                  		bra.w	RememberState
00009B94                            ; ===========================================================================
00009B94                            
00009B94                            CFlo_Collapse:	; Routine 4
00009B94 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009B98 6700 0000                  		beq.w	loc_8458
00009B9C 117C 0001 003A             		move.b	#1,cflo_collapse_flag(a0)	; set object as	"touched"
00009BA2 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009BA6                            
00009BA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009BA6                            
00009BA6                            
00009BA6                            CFlo_WalkOff:	; Routine $A
00009BA6 323C 0020                  		move.w	#$20,d1
00009BAA 6100 F1EC                  		bsr.w	ExitPlatform
00009BAE 3428 0008                  		move.w	obX(a0),d2
00009BB2 6100 F74E                  		bsr.w	MvSonicOnPtfm2
00009BB6 6000 0000                  		bra.w	RememberState
00009BBA                            ; End of function CFlo_WalkOff
00009BBA                            
00009BBA                            ; ===========================================================================
00009BBA                            
00009BBA                            CFlo_Display:	; Routine 6
00009BBA 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009BBE 6700                       		beq.s	CFlo_TimeZero	; if yes, branch
00009BC0 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009BC4 6600 0000                  		bne.w	loc_8402	; if yes, branch
00009BC8 5328 0038                  		subq.b	#1,cflo_timedelay(a0); subtract 1 from time
00009BCC 6000 0000                  		bra.w	DisplaySprite
00009BD0                            ; ===========================================================================
00009BD0                            
00009BD0                            loc_8402:
00009BD0 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009BD4 6100 FFD0                  		bsr.w	CFlo_WalkOff
00009BD8 43F8 D000                  		lea	(v_player).w,a1
00009BDC 0829 0003 0022             		btst	#3,obStatus(a1)
00009BE2 6700                       		beq.s	loc_842E
00009BE4 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009BE8 6600                       		bne.s	locret_843A
00009BEA 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009BF0 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009BF6 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009BFC                            
00009BFC                            loc_842E:
00009BFC 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00009C02 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "CFlo_Display" routine
00009C08                            
00009C08                            locret_843A:
00009C08 4E75                       		rts	
00009C0A                            ; ===========================================================================
00009C0A                            
00009C0A                            CFlo_TimeZero:
00009C0A 6100 0000                  		bsr.w	ObjectFall
00009C0E 6100 0000                  		bsr.w	DisplaySprite
00009C12 4A28 0001                  		tst.b	obRender(a0)
00009C16 6A00                       		bpl.s	CFlo_Delete
00009C18 4E75                       		rts	
00009C1A                            ; ===========================================================================
00009C1A                            
00009C1A                            CFlo_Delete:	; Routine 8
00009C1A 6100 0000                  		bsr.w	DeleteObject
00009C1E 4E75                       		rts	
00009C20                            ; ===========================================================================
00009C20                            
00009C20                            CFlo_Fragment:
00009C20 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00009C26                            
00009C26                            loc_8458:
00009C26 49F9 0000 0000             		lea	(CFlo_Data2).l,a4
00009C2C 0828 0000 0028             		btst	#0,obSubtype(a0)
00009C32 6700                       		beq.s	loc_846C
00009C34 49F9 0000 0000             		lea	(CFlo_Data3).l,a4
00009C3A                            
00009C3A                            loc_846C:
00009C3A 7207                       		moveq	#7,d1
00009C3C 5228 001A                  		addq.b	#1,obFrame(a0)
00009C40 6000                       		bra.s	loc_8486
00009C40 6000                       		bra.s	loc_8486
00009C42                            
00009C42                            ; ===========================================================================
00009C42                            
00009C42                            Ledge_Fragment:
00009C42 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009C48                            
00009C48                            loc_847A:
00009C48 49F9 0000 0000             		lea	(CFlo_Data1).l,a4
00009C4E 7218                       		moveq	#$18,d1
00009C50 5428 001A                  		addq.b	#2,obFrame(a0)
00009C54                            
00009C54                            loc_8486:
00009C54 7000                       		moveq	#0,d0
00009C56 1028 001A                  		move.b	obFrame(a0),d0
00009C5A D040                       		add.w	d0,d0
00009C5C 2668 0004                  		movea.l	obMap(a0),a3
00009C60 D6F3 0000                  		adda.w	(a3,d0.w),a3
00009C64 524B                       		addq.w	#1,a3
00009C66 08E8 0005 0001             		bset	#5,obRender(a0)
00009C6C 1810                       		move.b	0(a0),d4
00009C6E 1A28 0001                  		move.b	obRender(a0),d5
00009C72 2248                       		movea.l	a0,a1
00009C74 137C 0006 0024             		move.b	#6,obRoutine(a1)
00009C7A 1284                       		move.b	d4,0(a1)
00009C7C 234B 0004                  		move.l	a3,obMap(a1)
00009C80 1345 0001                  		move.b	d5,obRender(a1)
00009C84 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009C8A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00009C90 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009C96 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00009C9C 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00009CA2 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
00009CA6 5341                       		subq.w	#1,d1
00009CA8 43F8 D800                  		lea		(v_lvlobjspace).w,a1
00009CAC 303C 005F                  		move.w	#$5F,d0
00009CB0                            ; ===========================================================================
00009CB0                            
00009CB0                            loc_84AA:
00009CB0 4A11                       		tst.b	(a1)
00009CB2 6700                       		beq.s	@cont		
00009CB4 43E9 0040                  		lea		$40(a1),a1
00009CB8 51C8 FFF6                  		dbf		d0,loc_84AA	
00009CBC 6600                       		bne.s	loc_84F2	
00009CBE                            	@cont:
00009CBE 5A4B                       		addq.w	#5,a3
00009CC0                            
00009CC0                            loc_84B2:
00009CC0 137C 0006 0024             		move.b	#6,obRoutine(a1)
00009CC6 1284                       		move.b	d4,0(a1)
00009CC8 234B 0004                  		move.l	a3,obMap(a1)
00009CCC 1345 0001                  		move.b	d5,obRender(a1)
00009CD0 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009CD6 3368 000C 000C             		move.w	obY(a0),obY(a1)
00009CDC 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009CE2 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00009CE8 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00009CEE 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
00009CF2 6100 0000                  		bsr.w	DisplaySprite1
00009CF6                            
00009CF6                            loc_84EE:
00009CF6 51C9 FFB8                  		dbf	d1,loc_84AA
00009CFA                            
00009CFA                            loc_84F2:
00009CFA 6100 0000                  		bsr.w	DisplaySprite
00009D08                            ; ===========================================================================
00009D08                            ; ---------------------------------------------------------------------------
00009D08                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00009D08                            ; ---------------------------------------------------------------------------
00009D08 1C18 1410 1A16 120E 0A06+  CFlo_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00009D18 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00009D22 1E16 0E06 1A12 0A02        CFlo_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00009D2A 161E 1A12 060E 0A02        CFlo_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00009D32                            
00009D32                            ; ---------------------------------------------------------------------------
00009D32                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00009D32                            ; ---------------------------------------------------------------------------
00009D32                            
00009D32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009D32                            
00009D32                            
00009D32                            SlopeObject2:
00009D32 43F8 D000                  		lea	(v_player).w,a1
00009D36 0829 0003 0022             		btst	#3,obStatus(a1)
00009D3C 6700                       		beq.s	locret_856E
00009D3E 3029 0008                  		move.w	obX(a1),d0
00009D42 9068 0008                  		sub.w	obX(a0),d0
00009D46 D041                       		add.w	d1,d0
00009D48 E248                       		lsr.w	#1,d0
00009D4A 0828 0000 0001             		btst	#0,obRender(a0)
00009D50 6700                       		beq.s	loc_854E
00009D52 4640                       		not.w	d0
00009D54 D041                       		add.w	d1,d0
00009D56                            
00009D56                            loc_854E:
00009D56 7200                       		moveq	#0,d1
00009D58 1232 0000                  		move.b	(a2,d0.w),d1
00009D5C 3028 000C                  		move.w	obY(a0),d0
00009D60 9041                       		sub.w	d1,d0
00009D62 7200                       		moveq	#0,d1
00009D64 1229 0016                  		move.b	obHeight(a1),d1
00009D68 9041                       		sub.w	d1,d0
00009D6A 3340 000C                  		move.w	d0,obY(a1)
00009D6E 9468 0008                  		sub.w	obX(a0),d2
00009D72 9569 0008                  		sub.w	d2,obX(a1)
00009D76                            
00009D76                            locret_856E:
00009D76 4E75                       		rts	
00009D78                            ; End of function SlopeObject2
00009D78                            
00009D78                            ; ===========================================================================
00009D78                            ; ---------------------------------------------------------------------------
00009D78                            ; Collision data for GHZ collapsing ledge
00009D78                            ; ---------------------------------------------------------------------------
00009D78                            Ledge_SlopeData:
00009D78                            		incbin	"misc\GHZ Collapsing Ledge Heightmap.bin"
00009DA8                            		even
00009DA8                            
00009DA8                            Map_Ledge:	include	"_maps\Collapsing Ledge.asm"
00009DA8                            ; ---------------------------------------------------------------------------
00009DA8                            ; Sprite mappings - GHZ	collapsing ledge
00009DA8                            ; ---------------------------------------------------------------------------
00009DA8                            Map_Ledge_internal:
00009DA8 0000                       		dc.w @left-Map_Ledge_internal
00009DAA 0000                       		dc.w @right-Map_Ledge_internal
00009DAC 0000                       		dc.w @leftsmash-Map_Ledge_internal
00009DAE 0000                       		dc.w @rightsmash-Map_Ledge_internal
00009DB0 10                         @left:		dc.b $10
00009DB1 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00009DB6 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009DBB E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009DC0 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009DC5 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009DCA D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009DCF F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009DD4 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009DD9 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009DDE F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009DE3 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009DE8 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009DED 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009DF2 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009DF7 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009DFC 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009E01 10                         @right:		dc.b $10
00009E02 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00009E07 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009E0C E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009E11 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009E16 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009E1B D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009E20 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009E25 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009E2A F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009E2F F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009E34 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009E39 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009E3E 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009E43 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009E48 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009E4D 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009E52 19                         @leftsmash:	dc.b $19
00009E53 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00009E58 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009E5D D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009E62 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009E67 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009E6C E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009E71 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009E76 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009E7B D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009E80 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009E85 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009E8A F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009E8F F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009E94 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009E99 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009E9E F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009EA3 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009EA8 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009EAD 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009EB2 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009EB7 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009EBC 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009EC1 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009EC6 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009ECB 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009ED0 19                         @rightsmash:	dc.b $19
00009ED1 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00009ED6 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009EDB D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009EE0 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009EE5 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009EEA E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009EEF E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009EF4 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009EF9 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009EFE D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009F03 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009F08 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009F0D F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009F12 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009F17 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009F1C F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009F21 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009F26 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009F2B 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009F30 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009F35 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009F3A 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009F3F 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009F44 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009F49 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009F4E                            		even
00009F4E                            		even
00009F4E                            Map_CFlo:	include	"_maps\Collapsing Floors.asm"
00009F4E                            ; --------------------------------------------------------------------------------
00009F4E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00009F4E                            ; --------------------------------------------------------------------------------
00009F4E                            
00009F4E                            SME_WNa9T:	
00009F4E 0000 0000                  		dc.w SME_WNa9T_8-SME_WNa9T, SME_WNa9T_31-SME_WNa9T	
00009F52 0000 0000                  		dc.w SME_WNa9T_5A-SME_WNa9T, SME_WNa9T_6F-SME_WNa9T	
00009F56 08                         SME_WNa9T_8:	dc.b 8	
00009F57 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
00009F5C 0805 0004 E0               		dc.b 8, 5, 0, 4, $E0	
00009F61 F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
00009F66 0805 0004 F0               		dc.b 8, 5, 0, 4, $F0	
00009F6B F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
00009F70 0805 0004 00               		dc.b 8, 5, 0, 4, 0	
00009F75 F805 0000 10               		dc.b $F8, 5, 0, 0, $10	
00009F7A 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
00009F7F 08                         SME_WNa9T_31:	dc.b 8	
00009F80 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
00009F85 0805 0004 E0               		dc.b 8, 5, 0, 4, $E0	
00009F8A F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
00009F8F 0805 0004 F0               		dc.b 8, 5, 0, 4, $F0	
00009F94 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
00009F99 0805 0004 00               		dc.b 8, 5, 0, 4, 0	
00009F9E F805 0000 10               		dc.b $F8, 5, 0, 0, $10	
00009FA3 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
00009FA8 04                         SME_WNa9T_5A:	dc.b 4	
00009FA9 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
00009FAE 080D 0008 E0               		dc.b 8, $D, 0, 8, $E0	
00009FB3 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
00009FB8 080D 0008 00               		dc.b 8, $D, 0, 8, 0	
00009FBD 08                         SME_WNa9T_6F:	dc.b 8	
00009FBE F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
00009FC3 F805 0004 F0               		dc.b $F8, 5, 0, 4, $F0	
00009FC8 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
00009FCD F805 0004 10               		dc.b $F8, 5, 0, 4, $10	
00009FD2 0805 0008 E0               		dc.b 8, 5, 0, 8, $E0	
00009FD7 0805 000C F0               		dc.b 8, 5, 0, $C, $F0	
00009FDC 0805 0008 00               		dc.b 8, 5, 0, 8, 0	
00009FE1 0805 000C 10               		dc.b 8, 5, 0, $C, $10	
00009FE6                            		even
00009FE6                            		even
00009FE6                            
00009FE6                            		include	"_incObj\1C Scenery.asm"
00009FE6                            ; ---------------------------------------------------------------------------
00009FE6                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00009FE6                            ; ---------------------------------------------------------------------------
00009FE6                            
00009FE6                            Scenery:
00009FE6 7000                       		moveq	#0,d0
00009FE8 1028 0024                  		move.b	obRoutine(a0),d0
00009FEC 323B 0000                  		move.w	Scen_Index(pc,d0.w),d1
00009FF0 4EFB 1000                  		jmp	Scen_Index(pc,d1.w)
00009FF4                            ; ===========================================================================
00009FF4 0000                       Scen_Index:	dc.w Scen_Main-Scen_Index
00009FF6 0000                       		dc.w Scen_ChkDel-Scen_Index
00009FF8                            ; ===========================================================================
00009FF8                            
00009FF8                            Scen_Main:	; Routine 0
00009FF8 5428 0024                  		addq.b	#2,obRoutine(a0)
00009FFC 7000                       		moveq	#0,d0
00009FFE 1028 0028                  		move.b	obSubtype(a0),d0 ; copy object subtype to d0
0000A002 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000A006 43FB 0000                  		lea	Scen_Values(pc,d0.w),a1
0000A00A 2159 0004                  		move.l	(a1)+,obMap(a0)
0000A00E 3159 0002                  		move.w	(a1)+,obGfx(a0)
0000A012 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A018 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000A01C 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000A020 1159 0018                  		move.b	(a1)+,obPriority(a0)
0000A024 3028 0018                  		move.w obPriority(a0),d0 
0000A028 E248                       		lsr.w #1,d0 
0000A02A 0240 0380                  		andi.w #$380,d0 
0000A02E 3140 0018                  		move.w d0,obPriority(a0)		
0000A032 1159 0020                  		move.b	(a1)+,obColType(a0)
0000A036                            
0000A036                            Scen_ChkDel:	; Routine 2
0000A054 6000 0000                  		bra.w	DisplaySprite
0000A058                            ; ===========================================================================
0000A058                            ; ---------------------------------------------------------------------------
0000A058                            ; Variables for	object $1C are stored in an array
0000A058                            ; ---------------------------------------------------------------------------
0000A058 0000 0000                  Scen_Values:	dc.l Map_Scen		; mappings address
0000A05C 44D8                       		dc.w $44D8		; VRAM setting
0000A05E 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0000A062 0000 0000                  		dc.l Map_Scen
0000A066 44D8                       		dc.w $44D8
0000A068 0008 0200                  		dc.b 0,	8, 2, 0
0000A06C 0000 0000                  		dc.l Map_Scen
0000A070 44D8                       		dc.w $44D8
0000A072 0008 0200                  		dc.b 0,	8, 2, 0
0000A076 0000 910C                  		dc.l Map_Bri
0000A07A 438E                       		dc.w $438E
0000A07C 0110 0100                  		dc.b 1,	$10, 1,	0
0000A080                            		even
0000A080                            		even
0000A080                            Map_Scen:	include	"_maps\Scenery.asm"
0000A080                            ; ---------------------------------------------------------------------------
0000A080                            ; Sprite mappings - SLZ	lava thrower
0000A080                            ; ---------------------------------------------------------------------------
0000A080                            Map_Scen_internal:
0000A080 0000                       		dc.w byte_8858-Map_Scen_internal
0000A082 01                         byte_8858:	dc.b 1
0000A083 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000A088                            		even
0000A088                            		even
0000A088                            
0000A088                            		include	"_incObj\1D Water Switcher.asm"
0000A088                            ; ----------------------------------------------------------------------------
0000A088                            ; Object 1D - Water Switcher
0000A088                            ; ----------------------------------------------------------------------------
0000A088                            ; Sprite_1FCDC:
0000A088                            WaterSwitcher:
0000A088 7000                       		moveq	#0,d0
0000A08A 1028 0024                  		move.b	obRoutine(a0),d0
0000A08E 323B 0000                  		move.w	PSwapper_Index(pc,d0.w),d1
0000A092 4EFB 1000                  		jmp	PSwapper_Index(pc,d1.w) ;TIS Don't Delete if out of range
0000A096                            	;if DebugPathSwappers
0000A096                            		;tst.w	(f_debugcheat).w
0000A096                            		;bne.w	RememberState
0000A096                            	;endif
0000A096                            		; like RememberState, but doesn't display (Sonic 2's MarkObjGone3)
0000A096                            		;out_of_range	@offscreen
0000A096                            		;rts
0000A096                            
0000A096                            	;@offscreen:
0000A096                            		;lea	(v_objstate).w,a2
0000A096                            		;moveq	#0,d0
0000A096                            		;move.b	obRespawnNo(a0),d0
0000A096                            		;beq.s	@delete
0000A096                            		;bclr	#7,2(a2,d0.w)
0000A096                            
0000A096                            	;@delete:
0000A096                            		;bra.w	DeleteObject
0000A096                            ; ===========================================================================
0000A096                            ; off_1FCF0:
0000A096                            PSwapper_Index:
0000A096 0000                       		dc.w PSwapper_Init-PSwapper_Index	; 0
0000A098 0000                       		dc.w PSwapper_MainX-PSwapper_Index	; 2
0000A09A 0000                       		dc.w PSwapper_MainY-PSwapper_Index	; 4
0000A09C                            ; ===========================================================================
0000A09C                            ; loc_1FCF6:
0000A09C                            PSwapper_Init:
0000A09C 5428 0024                  		addq.b	#2,obRoutine(a0) ; => PSwapper_MainX
0000A0A0 217C 0000 0000 0004        		move.l	#Map_WaterSwitcher,obMap(a0)
0000A0A8 317C 27B2 0002             		move.w	#$27B2,obGfx(a0)
0000A0AE 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A0B4 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000A0BA 117C 0005 0018             		move.b	#5,obPriority(a0)
0000A0C0 1028 0028                  		move.b	obSubtype(a0),d0
0000A0C4 0800 0002                  		btst	#2,d0
0000A0C8 6700                       		beq.s	PSwapper_Init_CheckX
0000A0CA                            ;PSwapper_Init_CheckY:
0000A0CA 5428 0024                  		addq.b	#2,obRoutine(a0) ; => PSwapper_MainY
0000A0CE 0240 0007                  		andi.w	#7,d0
0000A0D2 1140 001A                  		move.b	d0,obFrame(a0)
0000A0D6 0240 0003                  		andi.w	#3,d0
0000A0DA D040                       		add.w	d0,d0
0000A0DC 317B 0000 0032             		move.w	word_1FD68(pc,d0.w),$32(a0)
0000A0E2 3228 000C                  		move.w	obY(a0),d1
0000A0E6 43F8 D000                  		lea	(v_player).w,a1 ; a1=character
0000A0EA B269 000C                  		cmp.w	obY(a1),d1
0000A0EE 6400 0000                  		bhs.w	PSwapper_MainY
0000A0F2 117C 0001 0034             		move.b	#1,$34(a0)
0000A0F8 6000 0000                  		bra.w	PSwapper_MainY
0000A0FC                            ; ===========================================================================
0000A0FC                            word_1FD68:
0000A0FC 0020                       	dc.w   $20
0000A0FE 0040                       	dc.w   $40	; 1
0000A100 0080                       	dc.w   $80	; 2
0000A102 0100                       	dc.w  $100	; 3
0000A104                            ; ===========================================================================
0000A104                            ; loc_1FD70:
0000A104                            PSwapper_Init_CheckX:
0000A104 0240 0003                  		andi.w	#3,d0
0000A108 1140 001A                  		move.b	d0,obFrame(a0)
0000A10C D040                       		add.w	d0,d0
0000A10E 317B 00EC 0032             		move.w	word_1FD68(pc,d0.w),$32(a0)
0000A114 3228 0008                  		move.w	obX(a0),d1
0000A118 43F8 D000                  		lea	(v_player).w,a1 ; a1=character
0000A11C B269 0008                  		cmp.w	obX(a1),d1
0000A120 6400                       		bhs.s	@jump
0000A122 117C 0001 0034             		move.b	#1,$34(a0)
0000A128                            @jump:
0000A128                            
0000A128                            ; loc_1FDA4:
0000A128                            PSwapper_MainX:
0000A128 4A78 FE08                  		tst.w	(v_debuguse).w
0000A12C 6600 0000                  		bne.w	@locret
0000A130 3228 0008                  		move.w	obX(a0),d1
0000A134 45E8 0034                  		lea	$34(a0),a2
0000A138 43F8 D000                  		lea	(v_player).w,a1 ; a1=character
0000A13C 4A1A                       		tst.b	(a2)+
0000A13E 6600 0000                  		bne.w	PSwapper_MainX_Alt
0000A142 B269 0008                  		cmp.w	obX(a1),d1
0000A146 6200 0000                  		bhi.w	@locret	;TIS
0000A14A 157C 0001 FFFF             		move.b	#1,-1(a2)
0000A150 3428 000C                  		move.w	obY(a0),d2
0000A154 3602                       		move.w	d2,d3
0000A156 3828 0032                  		move.w	$32(a0),d4
0000A15A 9444                       		sub.w	d4,d2
0000A15C D644                       		add.w	d4,d3
0000A15E 3829 000C                  		move.w	obY(a1),d4
0000A162 B842                       		cmp.w	d2,d4
0000A164 6D00                       		blt.s	@locret
0000A166 B843                       		cmp.w	d3,d4
0000A168 6C00                       		bge.s	@locret
0000A16A 1028 0028                  		move.b	obSubtype(a0),d0
0000A16E 6A00                       		bpl.s	@jump
0000A170 0829 0001 0022             		btst	#1,obStatus(a1)
0000A176 6600                       		bne.s	@locret
0000A178                            @jump:
0000A178 0828 0000 0001             		btst	#0,obRender(a0)
0000A17E 6600                       		bne.s	@jump2
0000A180 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0000A186                            
0000A186                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A186                            		;lea    (Pal_Sonic),a1  ;Palette location
0000A186                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A186                            		;jsr	Palload_Loop
0000A186                            
0000A186                            
0000A186 0800 0003                  		btst	#3,d0
0000A18A 6700                       		beq.s	@jump2
0000A18C                            		
0000A18C                            
0000A18C 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0000A192                            
0000A192                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A192                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
0000A192                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A192                            		;jsr	Palload_Loop
0000A192                            
0000A192                            @jump2:
0000A192 0269 7FFF 0002             		andi.w	#$7FFF,obGfx(a1)
0000A198 0800 0005                  		btst	#5,d0
0000A19C 6700                       		beq.s	@jump3
0000A19E 0069 8000 0002             		ori.w	#(1<<15),obGfx(a1)
0000A1A4                            @jump3:
0000A1A4                            	;if DebugPathSwappers
0000A1A4                            		;tst.b	(f_debugcheat).w
0000A1A4                            		;beq.s	@locret
0000A1A4                            		;sfx	sfx_Lamppost,1,0,1
0000A1A4                            	;endif
0000A1A4                            @locret:
0000A1A4 4E75                       		rts
0000A1A6                            ; ===========================================================================
0000A1A6                            ; loc_1FE38:
0000A1A6                            PSwapper_MainX_Alt:
0000A1A6 B269 0008                  		cmp.w	obX(a1),d1
0000A1AA 6300                       		bls.s	@locret
0000A1AC 157C 0000 FFFF             		move.b	#0,-1(a2)
0000A1B2 3428 000C                  		move.w	obY(a0),d2
0000A1B6 3602                       		move.w	d2,d3
0000A1B8 3828 0032                  		move.w	$32(a0),d4
0000A1BC 9444                       		sub.w	d4,d2
0000A1BE D644                       		add.w	d4,d3
0000A1C0 3829 000C                  		move.w	obY(a1),d4
0000A1C4 B842                       		cmp.w	d2,d4
0000A1C6 6D00                       		blt.s	@locret
0000A1C8 B843                       		cmp.w	d3,d4
0000A1CA 6C00                       		bge.s	@locret
0000A1CC 1028 0028                  		move.b	obSubtype(a0),d0
0000A1D0 6A00                       		bpl.s	@jump
0000A1D2 0829 0001 0022             		btst	#1,obStatus(a1)
0000A1D8 6600                       		bne.s	@locret
0000A1DA                            @jump:
0000A1DA 0828 0000 0001             		btst	#0,obRender(a0)
0000A1E0 6600                       		bne.s	@jump2
0000A1E2                            		
0000A1E2                            
0000A1E2                            
0000A1E2 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0000A1E8                            
0000A1E8                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A1E8                            		;lea    (Pal_Sonic),a1  ;Palette location
0000A1E8                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A1E8                            		;jsr	Palload_Loop
0000A1E8                            
0000A1E8 0800 0004                  		btst	#4,d0
0000A1EC 6700                       		beq.s	@jump2
0000A1EE                            		
0000A1EE 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0000A1F4                            
0000A1F4                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A1F4                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
0000A1F4                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A1F4                            		;jsr	Palload_Loop
0000A1F4                            
0000A1F4                            @jump2:
0000A1F4 0269 7FFF 0002             		andi.w	#$7FFF,obGfx(a1)
0000A1FA 0800 0006                  		btst	#6,d0
0000A1FE 6700                       		beq.s	@jump3
0000A200 0069 8000 0002             		ori.w	#(1<<15),obGfx(a1)
0000A206                            @jump3:
0000A206                            	;if DebugPathSwappers
0000A206                            		;tst.b	(f_debugcheat).w
0000A206                            		;beq.s	@locret
0000A206                            		;sfx	sfx_Lamppost,1,0,1
0000A206                            	;endif
0000A206                            @locret:
0000A206 4E75                       		rts
0000A208                            ; ===========================================================================
0000A208                            
0000A208                            PSwapper_MainY:
0000A208 4A78 FE08                  		tst.w	(v_debuguse).w
0000A20C 6600 0000                  		bne.w	@locret
0000A210 3228 000C                  		move.w	obY(a0),d1
0000A214 45E8 0034                  		lea	$34(a0),a2
0000A218 43F8 D000                  		lea	(v_player).w,a1 ; a1=character
0000A21C 4A1A                       		tst.b	(a2)+
0000A21E 6600 0000                  		bne.w	PSwapper_MainY_Alt	;TIS
0000A222 B269 000C                  		cmp.w	obY(a1),d1
0000A226 6200                       		bhi.s	@locret
0000A228 157C 0001 FFFF             		move.b	#1,-1(a2)
0000A22E 3428 0008                  		move.w	obX(a0),d2
0000A232 3602                       		move.w	d2,d3
0000A234 3828 0032                  		move.w	$32(a0),d4
0000A238 9444                       		sub.w	d4,d2
0000A23A D644                       		add.w	d4,d3
0000A23C 3829 0008                  		move.w	obX(a1),d4
0000A240 B842                       		cmp.w	d2,d4
0000A242 6D00                       		blt.s	@locret
0000A244 B843                       		cmp.w	d3,d4
0000A246 6C00                       		bge.s	@locret
0000A248 1028 0028                  		move.b	obSubtype(a0),d0
0000A24C 6A00                       		bpl.s	@jump
0000A24E 0829 0001 0022             		btst	#1,obStatus(a1)
0000A254 6600                       		bne.s	@locret
0000A256                            @jump:
0000A256 0828 0000 0001             		btst	#0,obRender(a0)
0000A25C 6600                       		bne.s	@jump2
0000A25E                            		
0000A25E 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0000A264                            
0000A264                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A264                            		;lea    (Pal_Sonic),a1  ;Palette location
0000A264                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A264                            		;jsr	Palload_Loop
0000A264                            
0000A264 0800 0003                  		btst	#3,d0
0000A268 6700                       		beq.s	@jump2
0000A26A                            		
0000A26A 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0000A270                            
0000A270                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A270                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
0000A270                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A270                            		;jsr	Palload_Loop
0000A270                            
0000A270                            @jump2:
0000A270 0269 7FFF 0002             		andi.w	#$7FFF,obGfx(a1)
0000A276 0800 0005                  		btst	#5,d0
0000A27A 6700                       		beq.s	@jump3
0000A27C 0069 8000 0002             		ori.w	#(1<<15),obGfx(a1)
0000A282                            @jump3:
0000A282                            	;if DebugPathSwappers
0000A282                            		;tst.b	(f_debugcheat).w
0000A282                            		;beq.s	@locret
0000A282                            		;sfx	sfx_Lamppost,1,0,1
0000A282                            	;endif
0000A282                            @locret:
0000A282 4E75                       		rts
0000A284                            ; ===========================================================================
0000A284                            ; loc_1FF42:
0000A284                            PSwapper_MainY_Alt:
0000A284 B269 000C                  		cmp.w	obY(a1),d1
0000A288 6300                       		bls.s	@locret
0000A28A 157C 0000 FFFF             		move.b	#0,-1(a2)
0000A290 3428 0008                  		move.w	obX(a0),d2
0000A294 3602                       		move.w	d2,d3
0000A296 3828 0032                  		move.w	$32(a0),d4
0000A29A 9444                       		sub.w	d4,d2
0000A29C D644                       		add.w	d4,d3
0000A29E 3829 0008                  		move.w	obX(a1),d4
0000A2A2 B842                       		cmp.w	d2,d4
0000A2A4 6D00                       		blt.s	@locret
0000A2A6 B843                       		cmp.w	d3,d4
0000A2A8 6C00                       		bge.s	@locret
0000A2AA 1028 0028                  		move.b	obSubtype(a0),d0
0000A2AE 6A00                       		bpl.s	@jump
0000A2B0 0829 0001 0022             		btst	#1,obStatus(a1)
0000A2B6 6600                       		bne.s	@locret
0000A2B8                            @jump:
0000A2B8 0828 0000 0001             		btst	#0,obRender(a0)
0000A2BE 6600                       		bne.s	@jump2
0000A2C0                            		
0000A2C0 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0000A2C6                            
0000A2C6                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A2C6                            		;lea    (Pal_Sonic),a1  ;Palette location
0000A2C6                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A2C6                            		;jsr	Palload_Loop
0000A2C6                            
0000A2C6 0800 0004                  		btst	#4,d0
0000A2CA 6700                       		beq.s	@jump2
0000A2CC                            
0000A2CC                            		
0000A2CC 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0000A2D2                            
0000A2D2                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A2D2                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
0000A2D2                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A2D2                            		;jsr	Palload_Loop
0000A2D2                            
0000A2D2                            @jump2:
0000A2D2 0269 7FFF 0002             		andi.w	#$7FFF,obGfx(a1)
0000A2D8 0800 0006                  		btst	#6,d0
0000A2DC 6700                       		beq.s	@jump3
0000A2DE 0069 8000 0002             		ori.w	#(1<<15),obGfx(a1)
0000A2E4                            @jump3:
0000A2E4                            	;if DebugPathSwappers
0000A2E4                            		;tst.b	(f_debugcheat).w
0000A2E4                            		;beq.s	@locret
0000A2E4                            		;sfx	sfx_Lamppost,1,0,1
0000A2E4                            	;endif
0000A2E4                            @locret:
0000A2E4 4E75                       		rts
0000A2E6                            ; ===========================================================================
0000A2E6                            ; -------------------------------------------------------------------------------
0000A2E6                            ; sprite mappings
0000A2E6                            ; -------------------------------------------------------------------------------
0000A2E6                            Map_WaterSwitcher:	include "_maps\WaterSwitcher.asm"
0000A2E6                            WaterSwitcher_Map:
0000A2E6 0000                       	dc.w	WaterSwitcher_0010-WaterSwitcher
0000A2E8 0000                       	dc.w	WaterSwitcher_0032-WaterSwitcher
0000A2EA 0000                       	dc.w	WaterSwitcher_0054-WaterSwitcher
0000A2EC 0000                       	dc.w	WaterSwitcher_0054-WaterSwitcher
0000A2EE 0000                       	dc.w	WaterSwitcher_0076-WaterSwitcher
0000A2F0 0000                       	dc.w	WaterSwitcher_0098-WaterSwitcher
0000A2F2 0000                       	dc.w	WaterSwitcher_00BA-WaterSwitcher
0000A2F4 0000                       	dc.w	WaterSwitcher_00BA-WaterSwitcher
0000A2F6                            
0000A2F6 04                         WaterSwitcher_0010:	dc.b 4
0000A2F7 E005 0000 F8               	dc.b $E0, 5, 0, 0, $F8
0000A2FC F005 0000 F8               	dc.b $F0, 5, 0, 0, $F8
0000A301 0005 0000 F8               	dc.b 0, 5, 0, 0, $F8
0000A306 1005 0000 F8               	dc.b $10, 5, 0, 0, $F8
0000A30B                            
0000A30B 04                         WaterSwitcher_0032:	dc.b 4
0000A30C C005 0000 F8               	dc.b $C0, 5, 0, 0, $F8
0000A311 E005 0000 F8               	dc.b $E0, 5, 0, 0, $F8
0000A316 0005 0000 F8               	dc.b 0, 5, 0, 0, $F8
0000A31B 3005 0000 F8               	dc.b $30, 5, 0, 0, $F8
0000A320                            
0000A320 04                         WaterSwitcher_0054:	dc.b 4
0000A321 8005 0000 F8               	dc.b $80, 5, 0, 0, $F8
0000A326 E005 0000 F8               	dc.b $E0, 5, 0, 0, $F8
0000A32B 0005 0000 F8               	dc.b 0, 5, 0, 0, $F8
0000A330 7005 0000 F8               	dc.b $70, 5, 0, 0, $F8
0000A335                            
0000A335 04                         WaterSwitcher_0076:	dc.b 4
0000A336 F805 0000 E0               	dc.b $F8, 5, 0, 0, $E0
0000A33B F805 0000 F0               	dc.b $F8, 5, 0, 0, $F0
0000A340 F805 0000 00               	dc.b $F8, 5, 0, 0, 0
0000A345 F805 0000 10               	dc.b $F8, 5, 0, 0, $10
0000A34A                            
0000A34A 04                         WaterSwitcher_0098:	dc.b 4
0000A34B F805 0000 C0               	dc.b $F8, 5, 0, 0, $C0
0000A350 F805 0000 E0               	dc.b $F8, 5, 0, 0, $E0
0000A355 F805 0000 00               	dc.b $F8, 5, 0, 0, 0
0000A35A F805 0000 30               	dc.b $F8, 5, 0, 0, $30
0000A35F                            
0000A35F 04                         WaterSwitcher_00BA:	dc.b 4
0000A360 F805 0000 80               	dc.b $F8, 5, 0, 0, $80
0000A365 F805 0000 E0               	dc.b $F8, 5, 0, 0, $E0
0000A36A F805 0000 00               	dc.b $F8, 5, 0, 0, 0
0000A36F F805 0000 70               	dc.b $F8, 5, 0, 0, $70
0000A374                            
0000A374                            	even
0000A374                            	even
0000A374                            ; ===========================================================================
0000A374                            ; ===========================================================================
0000A374                            Map_Swi:	include	"_maps\Unused Switch.asm"
0000A374                            ; ---------------------------------------------------------------------------
0000A374                            ; Sprite mappings - Unused switch thingy
0000A374                            ; ---------------------------------------------------------------------------
0000A374                            Map_Swi_internal:
0000A374 0000                       		dc.w byte_891E-Map_Swi_internal
0000A376 04                         byte_891E:	dc.b 4
0000A377 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000A37C 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000A381 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000A386 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000A38C 00                         		even
0000A38C 00                         		even
0000A38C                            
0000A38C                            		include	"_incObj\2A SBZ Small Door.asm"
0000A38C                            ; ---------------------------------------------------------------------------
0000A38C                            ; Object 2A - small vertical door (SBZ)
0000A38C                            ; ---------------------------------------------------------------------------
0000A38C                            
0000A38C                            AutoDoor:
0000A38C 7000                       		moveq	#0,d0
0000A38E 1028 0024                  		move.b	obRoutine(a0),d0
0000A392 323B 0000                  		move.w	ADoor_Index(pc,d0.w),d1
0000A396 4EFB 1000                  		jmp	ADoor_Index(pc,d1.w)
0000A39A                            ; ===========================================================================
0000A39A 0000                       ADoor_Index:	dc.w ADoor_Main-ADoor_Index
0000A39C 0000                       		dc.w ADoor_OpenShut-ADoor_Index
0000A39E                            ; ===========================================================================
0000A39E                            
0000A39E                            ADoor_Main:	; Routine 0
0000A39E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A3A2 217C 0000 0000 0004        		move.l	#Map_ADoor,obMap(a0)
0000A3AA 317C 42EA 0002             		move.w	#$42EA,obGfx(a0)
0000A3B0 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A3B6 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A3BC                            		;move.b	#4,obPriority(a0)
0000A3BC                            
0000A3BC                            ADoor_OpenShut:	; Routine 2
0000A3BC 323C 0040                  		move.w	#$40,d1		; set range for door detection
0000A3C0 4228 001C                  		clr.b	obAnim(a0)	; use "closing"	animation
0000A3C4 3038 D008                  		move.w	(v_player+obX).w,d0
0000A3C8 D041                       		add.w	d1,d0
0000A3CA B068 0008                  		cmp.w	obX(a0),d0
0000A3CE 6500                       		bcs.s	ADoor_Animate
0000A3D0 9041                       		sub.w	d1,d0
0000A3D2 9041                       		sub.w	d1,d0
0000A3D4 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic > $40 pixels from door?
0000A3D8 6400                       		bcc.s	ADoor_Animate	; close door
0000A3DA D041                       		add.w	d1,d0
0000A3DC B068 0008                  		cmp.w	obX(a0),d0	; is Sonic left of the door?
0000A3E0 6400                       		bcc.s	loc_899A	; if yes, branch
0000A3E2 0828 0000 0022             		btst	#0,obStatus(a0)
0000A3E8 6600                       		bne.s	ADoor_Animate
0000A3EA 6000                       		bra.s	ADoor_Open
0000A3EC                            ; ===========================================================================
0000A3EC                            
0000A3EC                            loc_899A:
0000A3EC 0828 0000 0022             		btst	#0,obStatus(a0)
0000A3F2 6700                       		beq.s	ADoor_Animate
0000A3F4                            
0000A3F4                            ADoor_Open:
0000A3F4 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "opening"	animation
0000A3FA                            
0000A3FA                            ADoor_Animate:
0000A3FA 43F9 0000 0000             		lea	(Ani_ADoor).l,a1
0000A400 6100 0000                  		bsr.w	AnimateSprite
0000A404 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
0000A408 6600                       		bne.s	@remember	; if yes, branch
0000A40A 323C 0011                  		move.w	#$11,d1
0000A40E 343C 0020                  		move.w	#$20,d2
0000A412 3602                       		move.w	d2,d3
0000A414 5243                       		addq.w	#1,d3
0000A416 3828 0008                  		move.w	obX(a0),d4
0000A41A 6100 0000                  		bsr.w	SolidObject
0000A41E                            
0000A41E                            	@remember:
0000A41E 6000 0000                  		bra.w	RememberState
0000A41E 6000 0000                  		bra.w	RememberState
0000A422                            		include	"_anim\SBZ Small Door.asm"
0000A422                            ; ---------------------------------------------------------------------------
0000A422                            ; Animation script - doors (SBZ)
0000A422                            ; ---------------------------------------------------------------------------
0000A422 0000                       Ani_ADoor:	dc.w @close-Ani_ADoor
0000A424 0000                       		dc.w @open-Ani_ADoor
0000A426 0008 0706 0504 0302 0100+  @close:		dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, afBack, 1
0000A432 0000 0102 0304 0506 0708+  @open:		dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, afBack, 1
0000A43E                            		even
0000A43E                            		even
0000A43E                            Map_ADoor:	include	"_maps\SBZ Small Door.asm"
0000A43E                            ; --------------------------------------------------------------------------------
0000A43E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A43E                            ; --------------------------------------------------------------------------------
0000A43E                            
0000A43E                            SME_YnmwF:	
0000A43E 0000 0000                  		dc.w SME_YnmwF_12-SME_YnmwF, SME_YnmwF_1D-SME_YnmwF	
0000A442 0000 0000                  		dc.w SME_YnmwF_28-SME_YnmwF, SME_YnmwF_33-SME_YnmwF	
0000A446 0000 0000                  		dc.w SME_YnmwF_3E-SME_YnmwF, SME_YnmwF_49-SME_YnmwF	
0000A44A 0000 0000                  		dc.w SME_YnmwF_54-SME_YnmwF, SME_YnmwF_5F-SME_YnmwF	
0000A44E 0000                       		dc.w SME_YnmwF_6A-SME_YnmwF	
0000A450 02                         SME_YnmwF_12:	dc.b 2	
0000A451 E007 0800 F8               		dc.b $E0, 7, 8, 0, $F8	
0000A456 0007 0800 F8               		dc.b 0, 7, 8, 0, $F8	
0000A45B 02                         SME_YnmwF_1D:	dc.b 2	
0000A45C DC07 0800 F8               		dc.b $DC, 7, 8, 0, $F8	
0000A461 0407 0800 F8               		dc.b 4, 7, 8, 0, $F8	
0000A466 02                         SME_YnmwF_28:	dc.b 2	
0000A467 D807 0800 F8               		dc.b $D8, 7, 8, 0, $F8	
0000A46C 0807 0800 F8               		dc.b 8, 7, 8, 0, $F8	
0000A471 02                         SME_YnmwF_33:	dc.b 2	
0000A472 D407 0800 F8               		dc.b $D4, 7, 8, 0, $F8	
0000A477 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8	
0000A47C 02                         SME_YnmwF_3E:	dc.b 2	
0000A47D D007 0800 F8               		dc.b $D0, 7, 8, 0, $F8	
0000A482 1007 0800 F8               		dc.b $10, 7, 8, 0, $F8	
0000A487 02                         SME_YnmwF_49:	dc.b 2	
0000A488 CC07 0800 F8               		dc.b $CC, 7, 8, 0, $F8	
0000A48D 1407 0800 F8               		dc.b $14, 7, 8, 0, $F8	
0000A492 02                         SME_YnmwF_54:	dc.b 2	
0000A493 C807 0800 F8               		dc.b $C8, 7, 8, 0, $F8	
0000A498 1807 0800 F8               		dc.b $18, 7, 8, 0, $F8	
0000A49D 02                         SME_YnmwF_5F:	dc.b 2	
0000A49E C407 0800 F8               		dc.b $C4, 7, 8, 0, $F8	
0000A4A3 1C07 0800 F8               		dc.b $1C, 7, 8, 0, $F8	
0000A4A8 02                         SME_YnmwF_6A:	dc.b 2	
0000A4A9 C007 0800 F8               		dc.b $C0, 7, 8, 0, $F8	
0000A4AE 2007 0800 F8               		dc.b $20, 7, 8, 0, $F8	
0000A4B4 00                         		even
0000A4B4 00                         		even
0000A4B4                            
0000A4B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A4B4                            
0000A4B4                            
0000A4B4                            Obj44_SolidWall:
0000A4B4 6100 0000                  		bsr.w	Obj44_SolidWall2
0000A4B8 6700                       		beq.s	loc_8AA8
0000A4BA 6B00 0000                  		bmi.w	loc_8AC4
0000A4BE 4A40                       		tst.w	d0
0000A4C0 6700 0000                  		beq.w	loc_8A92
0000A4C4 6B00                       		bmi.s	loc_8A7C
0000A4C6 4A69 0010                  		tst.w	obVelX(a1)
0000A4CA 6B00                       		bmi.s	loc_8A92
0000A4CC 6000                       		bra.s	loc_8A82
0000A4CE                            ; ===========================================================================
0000A4CE                            
0000A4CE                            loc_8A7C:
0000A4CE 4A69 0010                  		tst.w	obVelX(a1)
0000A4D2 6A00                       		bpl.s	loc_8A92
0000A4D4                            
0000A4D4                            loc_8A82:
0000A4D4 9169 0008                  		sub.w	d0,obX(a1)
0000A4D8 337C 0000 0020             		move.w	#0,obInertia(a1)
0000A4DE 337C 0000 0010             		move.w	#0,obVelX(a1)
0000A4E4                            
0000A4E4                            loc_8A92:
0000A4E4 0829 0001 0022             		btst	#1,obStatus(a1)
0000A4EA 6600                       		bne.s	loc_8AB6
0000A4EC 08E9 0005 0022             		bset	#5,obStatus(a1)
0000A4F2 08E8 0005 0022             		bset	#5,obStatus(a0)
0000A4F8 4E75                       		rts	
0000A4FA                            ; ===========================================================================
0000A4FA                            
0000A4FA                            loc_8AA8:
0000A4FA 0828 0005 0022             		btst	#5,obStatus(a0)
0000A500 6700                       		beq.s	locret_8AC2
0000A502 337C 0000 001C             		move.w	#id_Run,obAnim(a1)
0000A508                            
0000A508                            loc_8AB6:
0000A508 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000A50E 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A514                            
0000A514                            locret_8AC2:
0000A514 4E75                       		rts	
0000A516                            ; ===========================================================================
0000A516                            
0000A516                            loc_8AC4:
0000A516 4A69 0012                  		tst.w	obVelY(a1)
0000A51A 6A00                       		bpl.s	locret_8AD8
0000A51C 4A43                       		tst.w	d3
0000A51E 6A00                       		bpl.s	locret_8AD8
0000A520 9769 000C                  		sub.w	d3,obY(a1)
0000A524 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A52A                            
0000A52A                            locret_8AD8:
0000A52A 4E75                       		rts	
0000A52C                            ; End of function Obj44_SolidWall
0000A52C                            
0000A52C                            
0000A52C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A52C                            
0000A52C                            
0000A52C                            Obj44_SolidWall2:
0000A52C 43F8 D000                  		lea	(v_player).w,a1
0000A530 3029 0008                  		move.w	obX(a1),d0
0000A534 9068 0008                  		sub.w	obX(a0),d0
0000A538 D041                       		add.w	d1,d0
0000A53A 6B00                       		bmi.s	loc_8B48
0000A53C 3601                       		move.w	d1,d3
0000A53E D643                       		add.w	d3,d3
0000A540 B043                       		cmp.w	d3,d0
0000A542 6200                       		bhi.s	loc_8B48
0000A544 1629 0016                  		move.b	obHeight(a1),d3
0000A548 4883                       		ext.w	d3
0000A54A D443                       		add.w	d3,d2
0000A54C 3629 000C                  		move.w	obY(a1),d3
0000A550 9668 000C                  		sub.w	obY(a0),d3
0000A554 D642                       		add.w	d2,d3
0000A556 6B00                       		bmi.s	loc_8B48
0000A558 3802                       		move.w	d2,d4
0000A55A D844                       		add.w	d4,d4
0000A55C B644                       		cmp.w	d4,d3
0000A55E 6400                       		bhs.s	loc_8B48
0000A560 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000A564 6B00                       		bmi.s	loc_8B48
0000A566 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000A56C 6400                       		bhs.s	loc_8B48
0000A56E 4A78 FE08                  		tst.w	(v_debuguse).w
0000A572 6600                       		bne.s	loc_8B48
0000A574 3A00                       		move.w	d0,d5
0000A576 B240                       		cmp.w	d0,d1
0000A578 6400                       		bhs.s	loc_8B30
0000A57A D241                       		add.w	d1,d1
0000A57C 9041                       		sub.w	d1,d0
0000A57E 3A00                       		move.w	d0,d5
0000A580 4445                       		neg.w	d5
0000A582                            
0000A582                            loc_8B30:
0000A582 3203                       		move.w	d3,d1
0000A584 B443                       		cmp.w	d3,d2
0000A586 6400                       		bhs.s	loc_8B3C
0000A588 9644                       		sub.w	d4,d3
0000A58A 3203                       		move.w	d3,d1
0000A58C 4441                       		neg.w	d1
0000A58E                            
0000A58E                            loc_8B3C:
0000A58E BA41                       		cmp.w	d1,d5
0000A590 6200                       		bhi.s	loc_8B44
0000A592 7801                       		moveq	#1,d4
0000A594 4E75                       		rts	
0000A596                            ; ===========================================================================
0000A596                            
0000A596                            loc_8B44:
0000A596 78FF                       		moveq	#-1,d4
0000A598 4E75                       		rts	
0000A59A                            ; ===========================================================================
0000A59A                            
0000A59A                            loc_8B48:
0000A59A 7800                       		moveq	#0,d4
0000A59C 4E75                       		rts	
0000A59E                            ; End of function Obj44_SolidWall2
0000A59E                            
0000A59E                            ; ===========================================================================
0000A59E                            
0000A59E                            		include	"_incObj\1E Ball Hog.asm"
0000A59E                            ; ---------------------------------------------------------------------------
0000A59E                            ; Object 1E - Ball Hog enemy (SBZ)
0000A59E                            ; ---------------------------------------------------------------------------
0000A59E                            
0000A59E                            BallHog:
0000A59E 7000                       		moveq	#0,d0
0000A5A0 1028 0024                  		move.b	obRoutine(a0),d0
0000A5A4 323B 0000                  		move.w	Hog_Index(pc,d0.w),d1
0000A5A8 4EFB 1000                  		jmp	Hog_Index(pc,d1.w)
0000A5AC                            ; ===========================================================================
0000A5AC 0000                       Hog_Index:	dc.w Hog_Main-Hog_Index
0000A5AE 0000                       		dc.w Hog_Action-Hog_Index
0000A5B0                            
0000A5B0 =00000032                  hog_launchflag:	equ $32		; 0 to launch a cannonball
0000A5B0                            ; ===========================================================================
0000A5B0                            
0000A5B0                            Hog_Main:	; Routine 0
0000A5B0 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000A5B6 117C 0008 0017             		move.b	#8,obWidth(a0)
0000A5BC 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A5C4 317C 0302 0002             		move.w	#$302,obGfx(a0)
0000A5CA 117C 0004 0001             		move.b	#4,obRender(a0)
0000A5D0 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000A5D6 117C 0005 0020             		move.b	#5,obColType(a0)
0000A5DC 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A5E2 6100 0000                  		bsr.w	ObjectFall
0000A5E6 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000A5EC 4A41                       		tst.w	d1
0000A5EE 6A00                       		bpl.s	@floornotfound
0000A5F0 D368 000C                  		add.w	d1,obY(a0)
0000A5F4 317C 0000 0012             		move.w	#0,obVelY(a0)
0000A5FA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A5FE                            
0000A5FE                            	@floornotfound:
0000A5FE 4E75                       		rts	
0000A600                            ; ===========================================================================
0000A600                            
0000A600                            Hog_Action:	; Routine 2
0000A600 43F9 0000 0000             		lea	(Ani_Hog).l,a1
0000A606 6100 0000                  		bsr.w	AnimateSprite
0000A60A 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is final frame (01) displayed?
0000A610 6600                       		bne.s	@setlaunchflag	; if not, branch
0000A612 4A28 0032                  		tst.b	hog_launchflag(a0)	; is it	set to launch cannonball?
0000A616 6700                       		beq.s	@makeball	; if yes, branch
0000A618 6000                       		bra.s	@remember
0000A61A                            ; ===========================================================================
0000A61A                            
0000A61A                            @setlaunchflag:
0000A61A 4228 0032                  		clr.b	hog_launchflag(a0)	; set to launch	cannonball
0000A61E                            
0000A61E                            @remember:
0000A61E 6000 0000                  		bra.w	RememberState
0000A622                            ; ===========================================================================
0000A622                            
0000A622                            @makeball:
0000A622 117C 0001 0032             		move.b	#1,hog_launchflag(a0)
0000A628 6100 0000                  		bsr.w	FindFreeObj
0000A62C 6600                       		bne.s	@fail
0000A62E 12BC 0000                  		move.b	#id_Cannonball,0(a1) ; load cannonball object ($20)
0000A632 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A638 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A63E 337C FF00 0010             		move.w	#-$100,obVelX(a1) ; cannonball bounces to the left
0000A644 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A64A 70FC                       		moveq	#-4,d0
0000A64C 0828 0000 0022             		btst	#0,obStatus(a0)	; is Ball Hog facing right?
0000A652 6700                       		beq.s	@noflip		; if not, branch
0000A654 4440                       		neg.w	d0
0000A656 4469 0010                  		neg.w	obVelX(a1)	; cannonball bounces to	the right
0000A65A                            
0000A65A                            	@noflip:
0000A65A D169 0008                  		add.w	d0,obX(a1)
0000A65E 0669 000C 000C             		addi.w	#$C,obY(a1)
0000A664 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1) ; copy object type from Ball Hog
0000A66A                            
0000A66A                            	@fail:
0000A66A 60B2                       		bra.s	@remember
0000A66A 60B2                       		bra.s	@remember
0000A66C                            		include	"_incObj\20 Cannonball.asm"
0000A66C                            ; ---------------------------------------------------------------------------
0000A66C                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000A66C                            ; ---------------------------------------------------------------------------
0000A66C                            
0000A66C                            Cannonball:
0000A66C 7000                       		moveq	#0,d0
0000A66E 1028 0024                  		move.b	obRoutine(a0),d0
0000A672 323B 0000                  		move.w	Cbal_Index(pc,d0.w),d1
0000A676 4EFB 1000                  		jmp	Cbal_Index(pc,d1.w)
0000A67A                            ; ===========================================================================
0000A67A 0000                       Cbal_Index:	dc.w Cbal_Main-Cbal_Index
0000A67C 0000                       		dc.w Cbal_Bounce-Cbal_Index
0000A67E                            
0000A67E =00000030                  cbal_time:	equ $30		; time until the cannonball explodes (2 bytes)
0000A67E                            ; ===========================================================================
0000A67E                            
0000A67E                            Cbal_Main:	; Routine 0
0000A67E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A682 117C 0007 0016             		move.b	#7,obHeight(a0)
0000A688 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A690 317C 2302 0002             		move.w	#$2302,obGfx(a0)
0000A696 117C 0004 0001             		move.b	#4,obRender(a0)
0000A69C 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000A6A2 117C 0087 0020             		move.b	#$87,obColType(a0)
0000A6A8 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A6AE 7000                       		moveq	#0,d0
0000A6B0 1028 0028                  		move.b	obSubtype(a0),d0 ; move subtype to d0
0000A6B4 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000A6B8 3140 0030                  		move.w	d0,cbal_time(a0) ; set explosion time
0000A6BC 117C 0004 001A             		move.b	#4,obFrame(a0)
0000A6C2                            
0000A6C2                            Cbal_Bounce:	; Routine 2
0000A6C2 4EB9 0000 0000             		jsr	(ObjectFall).l
0000A6C8 4A68 0012                  		tst.w	obVelY(a0)
0000A6CC 6B00                       		bmi.s	Cbal_ChkExplode
0000A6CE 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A6D4 4A41                       		tst.w	d1		; has ball hit the floor?
0000A6D6 6A00                       		bpl.s	Cbal_ChkExplode	; if not, branch
0000A6D8                            
0000A6D8 D368 000C                  		add.w	d1,obY(a0)
0000A6DC 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; bounce
0000A6E2 4A03                       		tst.b	d3
0000A6E4 6700                       		beq.s	Cbal_ChkExplode
0000A6E6 6B00                       		bmi.s	loc_8CA4
0000A6E8 4A68 0010                  		tst.w	obVelX(a0)
0000A6EC 6A00                       		bpl.s	Cbal_ChkExplode
0000A6EE 4468 0010                  		neg.w	obVelX(a0)
0000A6F2 6000                       		bra.s	Cbal_ChkExplode
0000A6F4                            ; ===========================================================================
0000A6F4                            
0000A6F4                            loc_8CA4:
0000A6F4 4A68 0010                  		tst.w	obVelX(a0)
0000A6F8 6B00                       		bmi.s	Cbal_ChkExplode
0000A6FA 4468 0010                  		neg.w	obVelX(a0)
0000A6FE                            
0000A6FE                            Cbal_ChkExplode:
0000A6FE 5368 0030                  		subq.w	#1,cbal_time(a0) ; subtract 1 from explosion time
0000A702 6A00                       		bpl.s	Cbal_Animate	; if time is > 0, branch
0000A704                            
0000A704                            	Cbal_Explode:
0000A704 10BC 0000                  		move.b	#id_MissileDissolve,0(a0)
0000A708 10BC 0000                  		move.b	#id_ExplosionBomb,0(a0)	; change object	to an explosion	($3F)
0000A70C 117C 0000 0024             		move.b	#0,obRoutine(a0) ; reset routine counter
0000A712 6000 0000                  		bra.w	ExplosionBomb	; jump to explosion code
0000A716                            ; ===========================================================================
0000A716                            
0000A716                            Cbal_Animate:
0000A716 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A71A 6A00                       		bpl.s	Cbal_Display
0000A71C 117C 0005 001E             		move.b	#5,obTimeFrame(a0) ; set frame duration to 5 frames
0000A722 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
0000A728                            
0000A728                            Cbal_Display:
0000A728 6100 0000                  		bsr.w	DisplaySprite
0000A72C 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000A730 0640 00E0                  		addi.w	#$E0,d0
0000A734 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen off	the level?
0000A738 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A73C 4E75                       		rts	
0000A73C 4E75                       		rts	
0000A73E                            		include	"_incObj\24, 27 & 3F Explosions.asm"
0000A73E                            ; ---------------------------------------------------------------------------
0000A73E                            ; Object 24 - buzz bomber missile vanishing (unused?)
0000A73E                            ; ---------------------------------------------------------------------------
0000A73E                            
0000A73E                            MissileDissolve:
0000A73E 7000                       		moveq	#0,d0
0000A740 1028 0024                  		move.b	obRoutine(a0),d0
0000A744 323B 0000                  		move.w	MDis_Index(pc,d0.w),d1
0000A748 4EFB 1000                  		jmp	MDis_Index(pc,d1.w)
0000A74C                            ; ===========================================================================
0000A74C 0000                       MDis_Index:	dc.w MDis_Main-MDis_Index
0000A74E 0000                       		dc.w MDis_Animate-MDis_Index
0000A750                            ; ===========================================================================
0000A750                            
0000A750                            MDis_Main:	; Routine 0
0000A750 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A754 217C 0000 0000 0004        		move.l	#Map_MisDissolve,obMap(a0)
0000A75C 317C 041C 0002             		move.w	#$41C,obGfx(a0)
0000A762 117C 0004 0001             		move.b	#4,obRender(a0)
0000A768 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A76E 117C 0000 0020             		move.b	#0,obColType(a0)
0000A774 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A77A 117C 0009 001E             		move.b	#9,obTimeFrame(a0)
0000A780 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A790                            
0000A790                            MDis_Animate:	; Routine 2
0000A790 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A794 6A00                       		bpl.s	@display
0000A796 117C 0009 001E             		move.b	#9,obTimeFrame(a0) ; set frame duration to 9 frames
0000A79C 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A7A0 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has animation completed?
0000A7A6 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A7AA                            
0000A7AA                            	@display:
0000A7AA 6000 0000                  		bra.w	DisplaySprite
0000A7AE                            ; ===========================================================================
0000A7AE                            
0000A7AE                            ; ---------------------------------------------------------------------------
0000A7AE                            ; Object 27 - explosion	from a destroyed enemy or monitor
0000A7AE                            ; ---------------------------------------------------------------------------
0000A7AE                            
0000A7AE                            ExplosionItem:
0000A7AE 7000                       		moveq	#0,d0
0000A7B0 1028 0024                  		move.b	obRoutine(a0),d0
0000A7B4 323B 0000                  		move.w	ExItem_Index(pc,d0.w),d1
0000A7B8 4EFB 1000                  		jmp	ExItem_Index(pc,d1.w)
0000A7BC                            ; ===========================================================================
0000A7BC 0000                       ExItem_Index:	dc.w ExItem_Animal-ExItem_Index
0000A7BE 0000                       		dc.w ExItem_Main-ExItem_Index
0000A7C0 0000                       		dc.w ExItem_Animate-ExItem_Index
0000A7C2                            ; ===========================================================================
0000A7C2                            
0000A7C2                            ExItem_Animal:	; Routine 0
0000A7C2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A7C6 6100 0000                  		bsr.w	FindFreeObj
0000A7CA 6600                       		bne.s	ExItem_Main
0000A7CC 12BC 0000                  		move.b	#id_Animals,0(a1) ; load animal object
0000A7D0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A7D6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A7DC 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000A7E2                            
0000A7E2                            ExItem_Main:	; Routine 2
0000A7E2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A7E6 217C 0000 0000 0004        		move.l	#Map_ExplodeItem,obMap(a0)
0000A7EE 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A7F4 117C 0004 0001             		move.b	#4,obRender(a0)
0000A7FA 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A800 117C 0000 0020             		move.b	#0,obColType(a0)
0000A806 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A80C 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000A812 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A822                            
0000A822                            ExItem_Animate:	; Routine 4 (2 for ExplosionBomb)
0000A822 5528 001E                  		subq.b	#2,obTimeFrame(a0) ; subtract 1 from frame duration
0000A826 6A00                       		bpl.s	@display
0000A828 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000A82E 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A832 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is the final frame (05) displayed?
0000A838 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A83C                            
0000A83C                            	@display:
0000A83C 6000 0000                  		bra.w	DisplaySprite
0000A840                            ; ===========================================================================
0000A840                            ; ---------------------------------------------------------------------------
0000A840                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000A840                            ; ---------------------------------------------------------------------------
0000A840                            
0000A840                            ExplosionBomb:
0000A840 7000                       		moveq	#0,d0
0000A842 1028 0024                  		move.b	obRoutine(a0),d0
0000A846 323B 0000                  		move.w	ExBom_Index(pc,d0.w),d1
0000A84A 4EFB 1000                  		jmp	ExBom_Index(pc,d1.w)
0000A84E                            ; ===========================================================================
0000A84E 0000                       ExBom_Index:	dc.w ExBom_Main-ExBom_Index
0000A850 FFD4                       		dc.w ExItem_Animate-ExBom_Index
0000A852                            ; ===========================================================================
0000A852                            
0000A852                            ExBom_Main:	; Routine 0
0000A852 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A856 217C 0000 0000 0004        		move.l	#Map_ExplodeBomb,obMap(a0)
0000A85E 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A864 117C 0004 0001             		move.b	#4,obRender(a0)
0000A86A 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A870 117C 0000 0020             		move.b	#0,obColType(a0)
0000A876 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A87C 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000A882 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A892                            		include	"_anim\Ball Hog.asm"
0000A892                            ; ---------------------------------------------------------------------------
0000A892                            ; Animation script - doors (SBZ)
0000A892                            ; ---------------------------------------------------------------------------
0000A892 0000                       Ani_Hog:	dc.w @hog-Ani_Hog
0000A894 0900 0002 0203 0200 0002+  @hog:		dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, afEnd
0000A8AC 00                         		even
0000A8AC 00                         		even
0000A8AC                            Map_Hog:	include	"_maps\Ball Hog.asm"
0000A8AC                            ; --------------------------------------------------------------------------------
0000A8AC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A8AC                            ; --------------------------------------------------------------------------------
0000A8AC                            
0000A8AC                            SME_ZER01:	
0000A8AC 0000 0000                  		dc.w SME_ZER01_C-SME_ZER01, SME_ZER01_17-SME_ZER01	
0000A8B0 0000 0000                  		dc.w SME_ZER01_22-SME_ZER01, SME_ZER01_2D-SME_ZER01	
0000A8B4 0000 0000                  		dc.w SME_ZER01_38-SME_ZER01, SME_ZER01_3E-SME_ZER01	
0000A8B8 02                         SME_ZER01_C:	dc.b 2	
0000A8B9 EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000A8BE FF0A 2006 F4               		dc.b $FF, $A, $20, 6, $F4	
0000A8C3 02                         SME_ZER01_17:	dc.b 2	
0000A8C4 EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000A8C9 FF0A 200F F4               		dc.b $FF, $A, $20, $F, $F4	
0000A8CE 02                         SME_ZER01_22:	dc.b 2	
0000A8CF F409 2000 F4               		dc.b $F4, 9, $20, 0, $F4	
0000A8D4 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000A8D9 02                         SME_ZER01_2D:	dc.b 2	
0000A8DA E409 2000 F4               		dc.b $E4, 9, $20, 0, $F4	
0000A8DF F40A 201E F4               		dc.b $F4, $A, $20, $1E, $F4	
0000A8E4 01                         SME_ZER01_38:	dc.b 1	
0000A8E5 F805 0027 F8               		dc.b $F8, 5, 0, $27, $F8	
0000A8EA 01                         SME_ZER01_3E:	dc.b 1	
0000A8EB F805 602B F8               		dc.b $F8, 5, $60, $2B, $F8	
0000A8F0                            		even
0000A8F0                            		even
0000A8F0                            Map_MisDissolve:include	"_maps\Buzz Bomber Missile Dissolve.asm"
0000A8F0                            ; ---------------------------------------------------------------------------
0000A8F0                            ; Sprite mappings - buzz bomber missile vanishing
0000A8F0                            ; ---------------------------------------------------------------------------
0000A8F0                            Map_MisDissolve_internal:
0000A8F0 0000                       		dc.w byte_8EAE-Map_MisDissolve_internal
0000A8F2 0000                       		dc.w byte_8EB4-Map_MisDissolve_internal
0000A8F4 0000                       		dc.w byte_8EBA-Map_MisDissolve_internal
0000A8F6 0000                       		dc.w byte_8EC0-Map_MisDissolve_internal
0000A8F8 01                         byte_8EAE:	dc.b 1
0000A8F9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000A8FE 01                         byte_8EB4:	dc.b 1
0000A8FF F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000A904 01                         byte_8EBA:	dc.b 1
0000A905 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000A90A 01                         byte_8EC0:	dc.b 1
0000A90B F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000A910                            		even
0000A910                            		even
0000A910                            		include	"_maps\Explosions.asm"
0000A910                            ; ---------------------------------------------------------------------------
0000A910                            ; Sprite mappings - explosion from a badnik or monitor
0000A910                            ; ---------------------------------------------------------------------------
0000A910 0000 0000                  Map_ExplodeItem:dc.w byte_8ED0-Map_ExplodeItem, byte_8ED6-Map_ExplodeItem
0000A914 0000 0000                  		dc.w byte_8EDC-Map_ExplodeItem, byte_8EE2-Map_ExplodeItem
0000A918 0000                       		dc.w byte_8EF7-Map_ExplodeItem
0000A91A 01                         byte_8ED0:	dc.b 1
0000A91B F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000A920 01                         byte_8ED6:	dc.b 1
0000A921 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000A926 01                         byte_8EDC:	dc.b 1
0000A927 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000A92C 04                         byte_8EE2:	dc.b 4
0000A92D EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000A932 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000A937 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000A93C FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000A941 04                         byte_8EF7:	dc.b 4
0000A942 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000A947 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000A94C 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000A951 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000A956                            		even
0000A956                            ; ---------------------------------------------------------------------------
0000A956                            ; Sprite mappings - explosion from when	a boss is destroyed
0000A956                            ; ---------------------------------------------------------------------------
0000A956 FFC4                       Map_ExplodeBomb:dc.w byte_8ED0-Map_ExplodeBomb
0000A958 0000                       		dc.w byte_8F16-Map_ExplodeBomb
0000A95A 0000                       		dc.w byte_8F1C-Map_ExplodeBomb
0000A95C FFD6                       		dc.w byte_8EE2-Map_ExplodeBomb
0000A95E FFEB                       		dc.w byte_8EF7-Map_ExplodeBomb
0000A960 01                         byte_8F16:	dc.b 1
0000A961 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000A966 01                         byte_8F1C:	dc.b 1
0000A967 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000A96C                            		even
0000A96C                            		even
0000A96C                            
0000A96C                            		include	"_incObj\28 Animals.asm"
0000A96C                            ; ---------------------------------------------------------------------------
0000A96C                            ; Object 28 - animals
0000A96C                            ; ---------------------------------------------------------------------------
0000A96C                            
0000A96C                            Animals:
0000A96C 7000                       		moveq	#0,d0
0000A96E 1028 0024                  		move.b	obRoutine(a0),d0
0000A972 323B 0000                  		move.w	Anml_Index(pc,d0.w),d1
0000A976 4EFB 1000                  		jmp	Anml_Index(pc,d1.w)
0000A97A                            ; ===========================================================================
0000A97A 0000 0000                  Anml_Index:	dc.w Anml_Ending-Anml_Index, loc_912A-Anml_Index
0000A97E 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000A982 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9184-Anml_Index
0000A986 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000A98A 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9240-Anml_Index
0000A98E 0000 0000                  		dc.w loc_9260-Anml_Index, loc_9260-Anml_Index
0000A992 0000 0000                  		dc.w loc_9280-Anml_Index, loc_92BA-Anml_Index
0000A996 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000A99A 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000A99E 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9370-Anml_Index
0000A9A2 0000                       		dc.w loc_92D6-Anml_Index
0000A9A4                            
0000A9A4 0005 0203 0603 0405 0401+  Anml_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000A9B0                            
0000A9B0 FE00 FC00                  Anml_Variables:	dc.w $FE00, $FC00
0000A9B4 0000 0000                  		dc.l Map_Animal1
0000A9B8 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000A9BC 0000 0000                  		dc.l Map_Animal2	; mappings address
0000A9C0 FE80 FD00                  		dc.w $FE80, $FD00
0000A9C4 0000 0000                  		dc.l Map_Animal1
0000A9C8 FEC0 FE80                  		dc.w $FEC0, $FE80
0000A9CC 0000 0000                  		dc.l Map_Animal2
0000A9D0 FE40 FD00                  		dc.w $FE40, $FD00
0000A9D4 0000 0000                  		dc.l Map_Animal3
0000A9D8 FD00 FC00                  		dc.w $FD00, $FC00
0000A9DC 0000 0000                  		dc.l Map_Animal2
0000A9E0 FD80 FC80                  		dc.w $FD80, $FC80
0000A9E4 0000 0000                  		dc.l Map_Animal3
0000A9E8                            
0000A9E8 FBC0 FC00 FBC0 FC00 FBC0+  Anml_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000A9F8 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000AA08 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000AA14                            
0000AA14 0000 0000 0000 0000 0000+  Anml_EndMap:	dc.l Map_Animal2, Map_Animal2, Map_Animal2, Map_Animal1, Map_Animal1
0000AA28 0000 0000 0000 0000 0000+  		dc.l Map_Animal1, Map_Animal1, Map_Animal2, Map_Animal3, Map_Animal2
0000AA3C 0000 0000                  		dc.l Map_Animal3
0000AA40                            
0000AA40 05A5 05A5 05A5 0553 0553+  Anml_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000AA52 0565 05B3                  		dc.w $565, $5B3
0000AA56                            ; ===========================================================================
0000AA56                            
0000AA56                            Anml_Ending:	; Routine 0
0000AA56 4A28 0028                  		tst.b	obSubtype(a0)	; did animal come from a destroyed enemy?
0000AA5A 6700 0000                  		beq.w	Anml_FromEnemy	; if yes, branch
0000AA5E 7000                       		moveq	#0,d0
0000AA60 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type to d0
0000AA64 D040                       		add.w	d0,d0		; multiply d0 by 2
0000AA66 1140 0024                  		move.b	d0,obRoutine(a0) ; move d0 to routine counter
0000AA6A 0440 0014                  		subi.w	#$14,d0
0000AA6E 317B 00D0 0002             		move.w	Anml_EndVram(pc,d0.w),obGfx(a0)
0000AA74 D040                       		add.w	d0,d0
0000AA76 217B 009C 0004             		move.l	Anml_EndMap(pc,d0.w),obMap(a0)
0000AA7C 43FA FF6A                  		lea	Anml_EndSpeed(pc),a1
0000AA80 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000AA86 3171 0000 0010             		move.w	(a1,d0.w),obVelX(a0)
0000AA8C 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000AA92 3171 0002 0012             		move.w	2(a1,d0.w),obVelY(a0)
0000AA98 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000AA9E 117C 0004 0001             		move.b	#4,obRender(a0)
0000AAA4 08E8 0000 0001             		bset	#0,obRender(a0)
0000AAAA 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000AAB0 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AAB6 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AABC 6000 0000                  		bra.w	DisplaySprite
0000AAC0                            ; ===========================================================================
0000AAC0                            
0000AAC0                            Anml_FromEnemy:
0000AAC0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AAC4 6100 91DE                  		bsr.w	RandomNumber
0000AAC8 0240 0001                  		andi.w	#1,d0
0000AACC 7200                       		moveq	#0,d1
0000AACE 1238 FE10                  		move.b	(v_zone).w,d1
0000AAD2 D241                       		add.w	d1,d1
0000AAD4 D240                       		add.w	d0,d1
0000AAD6 43FA FECC                  		lea	Anml_VarIndex(pc),a1
0000AADA 1031 1000                  		move.b	(a1,d1.w),d0
0000AADE 1140 0030                  		move.b	d0,$30(a0)
0000AAE2 E748                       		lsl.w	#3,d0
0000AAE4 43FA FECA                  		lea	Anml_Variables(pc),a1
0000AAE8 D2C0                       		adda.w	d0,a1
0000AAEA 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000AAEE 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000AAF2 2159 0004                  		move.l	(a1)+,obMap(a0)	; load mappings
0000AAF6 317C 0580 0002             		move.w	#$580,obGfx(a0)	; VRAM setting for 1st animal
0000AAFC 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000AB02 6700                       		beq.s	loc_90C0	; if yes, branch
0000AB04 317C 0592 0002             		move.w	#$592,obGfx(a0)	; VRAM setting for 2nd animal
0000AB0A                            
0000AB0A                            loc_90C0:
0000AB0A 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000AB10 117C 0004 0001             		move.b	#4,obRender(a0)
0000AB16 08E8 0000 0001             		bset	#0,obRender(a0)
0000AB1C 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000AB22 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AB28 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AB2E 117C 0002 001A             		move.b	#2,obFrame(a0)
0000AB34 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000AB3A 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000AB3E 6600                       		bne.s	loc_911C
0000AB40 6100 0000                  		bsr.w	FindFreeObj
0000AB44 6600                       		bne.s	Anml_Display
0000AB46 12BC 0000                  		move.b	#id_Points,0(a1) ; load points object
0000AB4A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000AB50 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000AB56 3028 003E                  		move.w	$3E(a0),d0
0000AB5A E248                       		lsr.w	#1,d0
0000AB5C 1340 001A                  		move.b	d0,obFrame(a1)
0000AB60                            
0000AB60                            Anml_Display:
0000AB60 6000 0000                  		bra.w	DisplaySprite
0000AB64                            ; ===========================================================================
0000AB64                            
0000AB64                            loc_911C:
0000AB64 117C 0012 0024             		move.b	#$12,obRoutine(a0)
0000AB6A 4268 0010                  		clr.w	obVelX(a0)
0000AB6E 6000 0000                  		bra.w	DisplaySprite
0000AB72                            ; ===========================================================================
0000AB72                            
0000AB72                            loc_912A:
0000AB72 4A28 0001                  		tst.b	obRender(a0)
0000AB76 6A00 0000                  		bpl.w	DeleteObject
0000AB7A 6100 0000                  		bsr.w	ObjectFall
0000AB7E 4A68 0012                  		tst.w	obVelY(a0)
0000AB82 6B00                       		bmi.s	loc_9180
0000AB84 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AB8A 4A41                       		tst.w	d1
0000AB8C 6A00                       		bpl.s	loc_9180
0000AB8E D368 000C                  		add.w	d1,obY(a0)
0000AB92 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AB98 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AB9E 117C 0001 001A             		move.b	#1,obFrame(a0)
0000ABA4 1028 0030                  		move.b	$30(a0),d0
0000ABA8 D000                       		add.b	d0,d0
0000ABAA 5800                       		addq.b	#4,d0
0000ABAC 1140 0024                  		move.b	d0,obRoutine(a0)
0000ABB0 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000ABB4 6700                       		beq.s	loc_9180
0000ABB6 0838 0004 FE0F             		btst	#4,(v_vbla_byte).w
0000ABBC 6700                       		beq.s	loc_9180
0000ABBE 4468 0010                  		neg.w	obVelX(a0)
0000ABC2 0868 0000 0001             		bchg	#0,obRender(a0)
0000ABC8                            
0000ABC8                            loc_9180:
0000ABC8 6000 0000                  		bra.w	DisplaySprite
0000ABCC                            ; ===========================================================================
0000ABCC                            
0000ABCC                            loc_9184:
0000ABCC 6100 0000                  		bsr.w	ObjectFall
0000ABD0 117C 0001 001A             		move.b	#1,obFrame(a0)
0000ABD6 4A68 0012                  		tst.w	obVelY(a0)
0000ABDA 6B00                       		bmi.s	loc_91AE
0000ABDC 117C 0000 001A             		move.b	#0,obFrame(a0)
0000ABE2 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000ABE8 4A41                       		tst.w	d1
0000ABEA 6A00                       		bpl.s	loc_91AE
0000ABEC D368 000C                  		add.w	d1,obY(a0)
0000ABF0 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ABF6                            
0000ABF6                            loc_91AE:
0000ABF6 4A28 0028                  		tst.b	obSubtype(a0)
0000ABFA 6600                       		bne.s	loc_9224
0000ABFC 4A28 0001                  		tst.b	obRender(a0)
0000AC00 6A00 0000                  		bpl.w	DeleteObject
0000AC04 6000 0000                  		bra.w	DisplaySprite
0000AC08                            ; ===========================================================================
0000AC08                            
0000AC08                            loc_91C0:
0000AC08 6100 0000                  		bsr.w	SpeedToPos
0000AC0C 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AC12 4A68 0012                  		tst.w	obVelY(a0)
0000AC16 6B00                       		bmi.s	loc_91FC
0000AC18 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AC1E 4A41                       		tst.w	d1
0000AC20 6A00                       		bpl.s	loc_91FC
0000AC22 D368 000C                  		add.w	d1,obY(a0)
0000AC26 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AC2C 4A28 0028                  		tst.b	obSubtype(a0)
0000AC30 6700                       		beq.s	loc_91FC
0000AC32 0C28 000A 0028             		cmpi.b	#$A,obSubtype(a0)
0000AC38 6700                       		beq.s	loc_91FC
0000AC3A 4468 0010                  		neg.w	obVelX(a0)
0000AC3E 0868 0000 0001             		bchg	#0,obRender(a0)
0000AC44                            
0000AC44                            loc_91FC:
0000AC44 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AC48 6A00                       		bpl.s	loc_9212
0000AC4A 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AC50 5228 001A                  		addq.b	#1,obFrame(a0)
0000AC54 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AC5A                            
0000AC5A                            loc_9212:
0000AC5A 4A28 0028                  		tst.b	obSubtype(a0)
0000AC5E 6600                       		bne.s	loc_9224
0000AC60 4A28 0001                  		tst.b	obRender(a0)
0000AC64 6A00 0000                  		bpl.w	DeleteObject
0000AC68 6000 0000                  		bra.w	DisplaySprite
0000AC6C                            ; ===========================================================================
0000AC6C                            
0000AC6C                            loc_9224:
0000AC6C 3028 0008                  		move.w	obX(a0),d0
0000AC70 9078 D008                  		sub.w	(v_player+obX).w,d0
0000AC74 6500                       		bcs.s	loc_923C
0000AC76 0440 0180                  		subi.w	#$180,d0
0000AC7A 6A00                       		bpl.s	loc_923C
0000AC7C 4A28 0001                  		tst.b	obRender(a0)
0000AC80 6A00 0000                  		bpl.w	DeleteObject
0000AC84                            
0000AC84                            loc_923C:
0000AC84 6000 0000                  		bra.w	DisplaySprite
0000AC88                            ; ===========================================================================
0000AC88                            
0000AC88                            loc_9240:
0000AC88 4A28 0001                  		tst.b	obRender(a0)
0000AC8C 6A00 0000                  		bpl.w	DeleteObject
0000AC90 5368 0036                  		subq.w	#1,$36(a0)
0000AC94 6600 0000                  		bne.w	loc_925C
0000AC98 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000AC9E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000ACA4                            
0000ACA4                            loc_925C:
0000ACA4 6000 0000                  		bra.w	DisplaySprite
0000ACA8                            ; ===========================================================================
0000ACA8                            
0000ACA8                            loc_9260:
0000ACA8 6100 0000                  		bsr.w	sub_9404
0000ACAC 6400                       		bcc.s	loc_927C
0000ACAE 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000ACB4 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ACBA 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000ACC0 6000 FF46                  		bra.w	loc_91C0
0000ACC4                            ; ===========================================================================
0000ACC4                            
0000ACC4                            loc_927C:
0000ACC4 6000 FFA6                  		bra.w	loc_9224
0000ACC8                            ; ===========================================================================
0000ACC8                            
0000ACC8                            loc_9280:
0000ACC8 6100 0000                  		bsr.w	sub_9404
0000ACCC 6A00                       		bpl.s	loc_92B6
0000ACCE 4268 0010                  		clr.w	obVelX(a0)
0000ACD2 4268 0032                  		clr.w	$32(a0)
0000ACD6 6100 0000                  		bsr.w	SpeedToPos
0000ACDA 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000ACE0 6100 0000                  		bsr.w	loc_93C4
0000ACE4 6100 0000                  		bsr.w	loc_93EC
0000ACE8 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000ACEC 6A00                       		bpl.s	loc_92B6
0000ACEE 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000ACF4 5228 001A                  		addq.b	#1,obFrame(a0)
0000ACF8 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000ACFE                            
0000ACFE                            loc_92B6:
0000ACFE 6000 FF6C                  		bra.w	loc_9224
0000AD02                            ; ===========================================================================
0000AD02                            
0000AD02                            loc_92BA:
0000AD02 6100 0000                  		bsr.w	sub_9404
0000AD06 6A00                       		bpl.s	loc_9310
0000AD08 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AD0E 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AD14 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000AD1A 6000 FEB0                  		bra.w	loc_9184
0000AD1E                            ; ===========================================================================
0000AD1E                            
0000AD1E                            loc_92D6:
0000AD1E 6100 0000                  		bsr.w	ObjectFall
0000AD22 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AD28 4A68 0012                  		tst.w	obVelY(a0)
0000AD2C 6B00                       		bmi.s	loc_9310
0000AD2E 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AD34 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AD3A 4A41                       		tst.w	d1
0000AD3C 6A00                       		bpl.s	loc_9310
0000AD3E 4628 0029                  		not.b	$29(a0)
0000AD42 6600                       		bne.s	loc_9306
0000AD44 4468 0010                  		neg.w	obVelX(a0)
0000AD48 0868 0000 0001             		bchg	#0,obRender(a0)
0000AD4E                            
0000AD4E                            loc_9306:
0000AD4E D368 000C                  		add.w	d1,obY(a0)
0000AD52 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AD58                            
0000AD58                            loc_9310:
0000AD58 6000 FF12                  		bra.w	loc_9224
0000AD5C                            ; ===========================================================================
0000AD5C                            
0000AD5C                            loc_9314:
0000AD5C 6100 0000                  		bsr.w	sub_9404
0000AD60 6A00                       		bpl.s	loc_932E
0000AD62 4268 0010                  		clr.w	obVelX(a0)
0000AD66 4268 0032                  		clr.w	$32(a0)
0000AD6A 6100 0000                  		bsr.w	ObjectFall
0000AD6E 6100 0000                  		bsr.w	loc_93C4
0000AD72 6100 0000                  		bsr.w	loc_93EC
0000AD76                            
0000AD76                            loc_932E:
0000AD76 6000 FEF4                  		bra.w	loc_9224
0000AD7A                            ; ===========================================================================
0000AD7A                            
0000AD7A                            loc_9332:
0000AD7A 6100 0000                  		bsr.w	sub_9404
0000AD7E 6A00                       		bpl.s	loc_936C
0000AD80 6100 0000                  		bsr.w	ObjectFall
0000AD84 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AD8A 4A68 0012                  		tst.w	obVelY(a0)
0000AD8E 6B00                       		bmi.s	loc_936C
0000AD90 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AD96 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AD9C 4A41                       		tst.w	d1
0000AD9E 6A00                       		bpl.s	loc_936C
0000ADA0 4468 0010                  		neg.w	obVelX(a0)
0000ADA4 0868 0000 0001             		bchg	#0,obRender(a0)
0000ADAA D368 000C                  		add.w	d1,obY(a0)
0000ADAE 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ADB4                            
0000ADB4                            loc_936C:
0000ADB4 6000 FEB6                  		bra.w	loc_9224
0000ADB8                            ; ===========================================================================
0000ADB8                            
0000ADB8                            loc_9370:
0000ADB8 6100 0000                  		bsr.w	sub_9404
0000ADBC 6A00                       		bpl.s	loc_93C0
0000ADBE 6100 0000                  		bsr.w	SpeedToPos
0000ADC2 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000ADC8 4A68 0012                  		tst.w	obVelY(a0)
0000ADCC 6B00                       		bmi.s	loc_93AA
0000ADCE 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000ADD4 4A41                       		tst.w	d1
0000ADD6 6A00                       		bpl.s	loc_93AA
0000ADD8 4628 0029                  		not.b	$29(a0)
0000ADDC 6600                       		bne.s	loc_93A0
0000ADDE 4468 0010                  		neg.w	obVelX(a0)
0000ADE2 0868 0000 0001             		bchg	#0,obRender(a0)
0000ADE8                            
0000ADE8                            loc_93A0:
0000ADE8 D368 000C                  		add.w	d1,obY(a0)
0000ADEC 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ADF2                            
0000ADF2                            loc_93AA:
0000ADF2 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000ADF6 6A00                       		bpl.s	loc_93C0
0000ADF8 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000ADFE 5228 001A                  		addq.b	#1,obFrame(a0)
0000AE02 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AE08                            
0000AE08                            loc_93C0:
0000AE08 6000 FE62                  		bra.w	loc_9224
0000AE0C                            ; ===========================================================================
0000AE0C                            
0000AE0C                            loc_93C4:
0000AE0C 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AE12 4A68 0012                  		tst.w	obVelY(a0)
0000AE16 6B00                       		bmi.s	locret_93EA
0000AE18 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AE1E 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AE24 4A41                       		tst.w	d1
0000AE26 6A00                       		bpl.s	locret_93EA
0000AE28 D368 000C                  		add.w	d1,obY(a0)
0000AE2C 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AE32                            
0000AE32                            locret_93EA:
0000AE32 4E75                       		rts	
0000AE34                            ; ===========================================================================
0000AE34                            
0000AE34                            loc_93EC:
0000AE34 08E8 0000 0001             		bset	#0,obRender(a0)
0000AE3A 3028 0008                  		move.w	obX(a0),d0
0000AE3E 9078 D008                  		sub.w	(v_player+obX).w,d0
0000AE42 6400                       		bcc.s	locret_9402
0000AE44 08A8 0000 0001             		bclr	#0,obRender(a0)
0000AE4A                            
0000AE4A                            locret_9402:
0000AE4A 4E75                       		rts	
0000AE4C                            
0000AE4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AE4C                            
0000AE4C                            
0000AE4C                            sub_9404:
0000AE4C 3038 D008                  		move.w	(v_player+obX).w,d0
0000AE50 9068 0008                  		sub.w	obX(a0),d0
0000AE54 0440 00B8                  		subi.w	#$B8,d0
0000AE58 4E75                       		rts	
0000AE5A                            ; End of function sub_9404
0000AE5A                            ; End of function sub_9404
0000AE5A                            		include	"_incObj\29 Points.asm"
0000AE5A                            ; ---------------------------------------------------------------------------
0000AE5A                            ; Object 29 - points that appear when you destroy something
0000AE5A                            ; ---------------------------------------------------------------------------
0000AE5A                            
0000AE5A                            Points:
0000AE5A 7000                       		moveq	#0,d0
0000AE5C 1028 0024                  		move.b	obRoutine(a0),d0
0000AE60 323B 0000                  		move.w	Poi_Index(pc,d0.w),d1
0000AE64 4EBB 1000                  		jsr	Poi_Index(pc,d1.w)
0000AE68 6000 0000                  		bra.w	DisplaySprite
0000AE6C                            ; ===========================================================================
0000AE6C 0000                       Poi_Index:	dc.w Poi_Main-Poi_Index
0000AE6E 0000                       		dc.w Poi_Slower-Poi_Index
0000AE70                            ; ===========================================================================
0000AE70                            
0000AE70                            Poi_Main:	; Routine 0
0000AE70 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AE74 217C 0000 0000 0004        		move.l	#Map_Poi,obMap(a0)
0000AE7C 317C 256D 0002             		move.w	#$256D,obGfx(a0)
0000AE82 117C 0004 0001             		move.b	#4,obRender(a0)
0000AE88 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000AE8E 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AE94 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; move object upwards
0000AE9A                            
0000AE9A                            Poi_Slower:	; Routine 2
0000AE9A 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000AE9E 6A00 0000                  		bpl.w	DeleteObject	; if not, delete
0000AEA2 6100 0000                  		bsr.w	SpeedToPos
0000AEA6 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000AEAC 4E75                       		rts	
0000AEAC 4E75                       		rts	
0000AEAE                            Map_Animal1:	include	"_maps\Animals 1.asm"
0000AEAE                            ; ---------------------------------------------------------------------------
0000AEAE                            ; Sprite mappings - animals
0000AEAE                            ; ---------------------------------------------------------------------------
0000AEAE                            Map_Animal1_internal:
0000AEAE 0000                       		dc.w byte_9472-Map_Animal1_internal
0000AEB0 0000                       		dc.w byte_9478-Map_Animal1_internal
0000AEB2 0000                       		dc.w byte_946C-Map_Animal1_internal
0000AEB4 01                         byte_946C:	dc.b 1
0000AEB5 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AEBA 01                         byte_9472:	dc.b 1
0000AEBB F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000AEC0 01                         byte_9478:	dc.b 1
0000AEC1 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000AEC6                            		even
0000AEC6                            		even
0000AEC6                            Map_Animal2:	include	"_maps\Animals 2.asm"
0000AEC6                            ; ---------------------------------------------------------------------------
0000AEC6                            ; Sprite mappings - animals
0000AEC6                            ; ---------------------------------------------------------------------------
0000AEC6                            Map_Animal2_internal:
0000AEC6 0000                       		dc.w byte_948A-Map_Animal2_internal
0000AEC8 0000                       		dc.w byte_9490-Map_Animal2_internal
0000AECA 0000                       		dc.w byte_9484-Map_Animal2_internal
0000AECC 01                         byte_9484:	dc.b 1
0000AECD F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AED2 01                         byte_948A:	dc.b 1
0000AED3 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000AED8 01                         byte_9490:	dc.b 1
0000AED9 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000AEDE                            		even
0000AEDE                            		even
0000AEDE                            Map_Animal3:	include	"_maps\Animals 3.asm"
0000AEDE                            ; ---------------------------------------------------------------------------
0000AEDE                            ; Sprite mappings - animals
0000AEDE                            ; ---------------------------------------------------------------------------
0000AEDE                            Map_Animal3_internal:
0000AEDE 0000                       		dc.w byte_94A2-Map_Animal3_internal
0000AEE0 0000                       		dc.w byte_94A8-Map_Animal3_internal
0000AEE2 0000                       		dc.w byte_949C-Map_Animal3_internal
0000AEE4 01                         byte_949C:	dc.b 1
0000AEE5 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AEEA 01                         byte_94A2:	dc.b 1
0000AEEB FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000AEF0 01                         byte_94A8:	dc.b 1
0000AEF1 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000AEF6                            		even
0000AEF6                            		even
0000AEF6                            Map_Poi:	include	"_maps\Points.asm"
0000AEF6                            ; --------------------------------------------------------------------------------
0000AEF6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000AEF6                            ; --------------------------------------------------------------------------------
0000AEF6                            
0000AEF6                            SME_yDUNR:	
0000AEF6 0000 0000                  		dc.w SME_yDUNR_E-SME_yDUNR, SME_yDUNR_19-SME_yDUNR	
0000AEFA 0000 0000                  		dc.w SME_yDUNR_24-SME_yDUNR, SME_yDUNR_2F-SME_yDUNR	
0000AEFE 0000 0000                  		dc.w SME_yDUNR_3A-SME_yDUNR, SME_yDUNR_40-SME_yDUNR	
0000AF02 0000                       		dc.w SME_yDUNR_55-SME_yDUNR	
0000AF04 02                         SME_yDUNR_E:	dc.b 2	
0000AF05 FC00 0003 FC               		dc.b $FC, 0, 0, 3, $FC	
0000AF0A FC00 0000 00               		dc.b $FC, 0, 0, 0, 0	
0000AF0F 02                         SME_yDUNR_19:	dc.b 2	
0000AF10 FC00 0001 F8               		dc.b $FC, 0, 0, 1, $F8	
0000AF15 FC00 0000 00               		dc.b $FC, 0, 0, 0, 0	
0000AF1A 02                         SME_yDUNR_24:	dc.b 2	
0000AF1B FC00 0002 F8               		dc.b $FC, 0, 0, 2, $F8	
0000AF20 FC00 0000 00               		dc.b $FC, 0, 0, 0, 0	
0000AF25 02                         SME_yDUNR_2F:	dc.b 2	
0000AF26 FC00 0003 F8               		dc.b $FC, 0, 0, 3, $F8	
0000AF2B FC00 0000 00               		dc.b $FC, 0, 0, 0, 0	
0000AF30 01                         SME_yDUNR_3A:	dc.b 1	
0000AF31 FC00 0003 FC               		dc.b $FC, 0, 0, 3, $FC	
0000AF36 04                         SME_yDUNR_40:	dc.b 4	
0000AF37 FC04 0007 05               		dc.b $FC, 4, 0, 7, 5	
0000AF3C FC00 0003 F4               		dc.b $FC, 0, 0, 3, $F4	
0000AF41 FC00 0000 F8               		dc.b $FC, 0, 0, 0, $F8	
0000AF46 FC00 0000 FC               		dc.b $FC, 0, 0, 0, $FC	
0000AF4B 02                         SME_yDUNR_55:	dc.b 2	
0000AF4C FC08 0003 F4               		dc.b $FC, 8, 0, 3, $F4	
0000AF51 FC04 0007 06               		dc.b $FC, 4, 0, 7, 6	
0000AF56                            		even
0000AF56                            		even
0000AF56                            
0000AF56                            		include	"_incObj\1F Crabmeat.asm"
0000AF56                            ; ---------------------------------------------------------------------------
0000AF56                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000AF56                            ; ---------------------------------------------------------------------------
0000AF56                            
0000AF56                            Crabmeat:
0000AF56 7000                       		moveq	#0,d0
0000AF58 1028 0024                  		move.b	obRoutine(a0),d0
0000AF5C 323B 0000                  		move.w	Crab_Index(pc,d0.w),d1
0000AF60 4EFB 1000                  		jmp	Crab_Index(pc,d1.w)
0000AF64                            ; ===========================================================================
0000AF64                            Crab_Index:
0000AF64 0000                       ptr_Crab_Main:		dc.w Crab_Main-Crab_Index
0000AF66 0000                       ptr_Crab_Action:	dc.w Crab_Action-Crab_Index
0000AF68 0000                       ptr_Crab_Delete:	dc.w Crab_Delete-Crab_Index
0000AF6A 0000                       ptr_Crab_BallMain:	dc.w Crab_BallMain-Crab_Index
0000AF6C 0000                       ptr_Crab_BallMove:	dc.w Crab_BallMove-Crab_Index
0000AF6E                            
0000AF6E =00000000                  id_Crab_Main:		equ ptr_Crab_Main-Crab_Index	; 0
0000AF6E =00000002                  id_Crab_Action:		equ ptr_Crab_Action-Crab_Index	; 2
0000AF6E =00000004                  id_Crab_Delete:		equ ptr_Crab_Delete-Crab_Index	; 4
0000AF6E =00000006                  id_Crab_BallMain:	equ ptr_Crab_BallMain-Crab_Index	; 6
0000AF6E =00000008                  id_Crab_BallMove:	equ ptr_Crab_BallMove-Crab_Index	; 8
0000AF6E                            
0000AF6E =00000030                  crab_timedelay:	equ $30
0000AF6E =00000032                  crab_mode:	equ $32
0000AF6E                            ; ===========================================================================
0000AF6E                            
0000AF6E                            Crab_Main:	; Routine 0
0000AF6E 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000AF74 117C 0008 0017             		move.b	#8,obWidth(a0)
0000AF7A 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000AF82 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000AF88 117C 0004 0001             		move.b	#4,obRender(a0)
0000AF8E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000AF94 117C 0006 0020             		move.b	#6,obColType(a0)
0000AF9A 117C 0015 0014             		move.b	#$15,obActWid(a0)
0000AFA0 6100 0000                  		bsr.w	ObjectFall
0000AFA4 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000AFAA 4A41                       		tst.w	d1
0000AFAC 6A00                       		bpl.s	@floornotfound
0000AFAE D368 000C                  		add.w	d1,obY(a0)
0000AFB2 1143 0026                  		move.b	d3,obAngle(a0)
0000AFB6 317C 0000 0012             		move.w	#0,obVelY(a0)
0000AFBC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AFC0                            
0000AFC0                            	@floornotfound:
0000AFC0 4E75                       		rts	
0000AFC2                            ; ===========================================================================
0000AFC2                            
0000AFC2                            Crab_Action:	; Routine 2
0000AFC2 7000                       		moveq	#0,d0
0000AFC4 1028 0025                  		move.b	ob2ndRout(a0),d0
0000AFC8 323B 0000                  		move.w	@index(pc,d0.w),d1
0000AFCC 4EBB 1000                  		jsr	@index(pc,d1.w)
0000AFD0 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000AFD6 6100 0000                  		bsr.w	AnimateSprite
0000AFDA 6000 0000                  		bra.w	RememberState
0000AFDE                            ; ===========================================================================
0000AFDE 0000                       @index:		dc.w @waittofire-@index
0000AFE0 0000                       		dc.w @walkonfloor-@index
0000AFE2                            ; ===========================================================================
0000AFE2                            
0000AFE2                            @waittofire:
0000AFE2 5368 0030                  		subq.w	#1,crab_timedelay(a0) ; subtract 1 from time delay
0000AFE6 6A00                       		bpl.s	@dontmove
0000AFE8 4A28 0001                  		tst.b	obRender(a0)
0000AFEC 6A00                       		bpl.s	@movecrab
0000AFEE 0868 0001 0032             		bchg	#1,crab_mode(a0)
0000AFF4 6600                       		bne.s	@fire
0000AFF6                            
0000AFF6                            	@movecrab:
0000AFF6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000AFFA 317C 007F 0030             		move.w	#127,crab_timedelay(a0) ; set time delay to approx 2 seconds
0000B000 317C 0080 0010             		move.w	#$80,obVelX(a0)	; move Crabmeat	to the right
0000B006 6100 0000                  		bsr.w	Crab_SetAni
0000B00A 5600                       		addq.b	#3,d0
0000B00C 1140 001C                  		move.b	d0,obAnim(a0)
0000B010 0868 0000 0022             		bchg	#0,obStatus(a0)
0000B016 6600                       		bne.s	@noflip
0000B018 4468 0010                  		neg.w	obVelX(a0)	; change direction
0000B01C                            
0000B01C                            	@dontmove:
0000B01C                            	@noflip:
0000B01C 4E75                       		rts	
0000B01E                            ; ===========================================================================
0000B01E                            
0000B01E                            @fire:
0000B01E 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B024 117C 0006 001C             		move.b	#6,obAnim(a0)	; use firing animation
0000B02A 6100 0000                  		bsr.w	FindFreeObj
0000B02E 6600                       		bne.s	@failleft
0000B030 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load left fireball
0000B034 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B03A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B040 0469 0010 0008             		subi.w	#$10,obX(a1)
0000B046 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B04C 337C FF00 0010             		move.w	#-$100,obVelX(a1)
0000B052                            
0000B052                            	@failleft:
0000B052 6100 0000                  		bsr.w	FindFreeObj
0000B056 6600                       		bne.s	@failright
0000B058 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load right fireball
0000B05C 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B062 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B068 0669 0010 0008             		addi.w	#$10,obX(a1)
0000B06E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B074 337C 0100 0010             		move.w	#$100,obVelX(a1)
0000B07A                            
0000B07A                            	@failright:
0000B07A 4E75                       		rts	
0000B07C                            ; ===========================================================================
0000B07C                            
0000B07C                            @walkonfloor:
0000B07C 5368 0030                  		subq.w	#1,crab_timedelay(a0)
0000B080 6B00                       		bmi.s	loc_966E
0000B082 6100 0000                  		bsr.w	SpeedToPos
0000B086 0868 0000 0032             		bchg	#0,crab_mode(a0)
0000B08C 6600                       		bne.s	loc_9654
0000B08E 3628 0008                  		move.w	obX(a0),d3
0000B092 0643 0010                  		addi.w	#$10,d3
0000B096 0828 0000 0022             		btst	#0,obStatus(a0)
0000B09C 6700                       		beq.s	loc_9640
0000B09E 0443 0020                  		subi.w	#$20,d3
0000B0A2                            
0000B0A2                            loc_9640:
0000B0A2 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000B0A8 0C41 FFF8                  		cmpi.w	#-8,d1
0000B0AC 6D00                       		blt.s	loc_966E
0000B0AE 0C41 000C                  		cmpi.w	#$C,d1
0000B0B2 6C00                       		bge.s	loc_966E
0000B0B4 4E75                       		rts	
0000B0B6                            ; ===========================================================================
0000B0B6                            
0000B0B6                            loc_9654:
0000B0B6 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B0BC D368 000C                  		add.w	d1,obY(a0)
0000B0C0 1143 0026                  		move.b	d3,obAngle(a0)
0000B0C4 6100 0000                  		bsr.w	Crab_SetAni
0000B0C8 5600                       		addq.b	#3,d0
0000B0CA 1140 001C                  		move.b	d0,obAnim(a0)
0000B0CE 4E75                       		rts	
0000B0D0                            ; ===========================================================================
0000B0D0                            
0000B0D0                            loc_966E:
0000B0D0 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B0D4 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B0DA 317C 0000 0010             		move.w	#0,obVelX(a0)
0000B0E0 6100 0000                  		bsr.w	Crab_SetAni
0000B0E4 1140 001C                  		move.b	d0,obAnim(a0)
0000B0E8 4E75                       		rts	
0000B0EA                            ; ---------------------------------------------------------------------------
0000B0EA                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000B0EA                            ; ---------------------------------------------------------------------------
0000B0EA                            
0000B0EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B0EA                            
0000B0EA                            
0000B0EA                            Crab_SetAni:
0000B0EA 7000                       		moveq	#0,d0
0000B0EC 1628 0026                  		move.b	obAngle(a0),d3
0000B0F0 6B00                       		bmi.s	loc_96A4
0000B0F2 0C03 0006                  		cmpi.b	#6,d3
0000B0F6 6500                       		bcs.s	locret_96A2
0000B0F8 7001                       		moveq	#1,d0
0000B0FA 0828 0000 0022             		btst	#0,obStatus(a0)
0000B100 6600                       		bne.s	locret_96A2
0000B102 7002                       		moveq	#2,d0
0000B104                            
0000B104                            locret_96A2:
0000B104 4E75                       		rts	
0000B106                            ; ===========================================================================
0000B106                            
0000B106                            loc_96A4:
0000B106 0C03 00FA                  		cmpi.b	#-6,d3
0000B10A 6200                       		bhi.s	locret_96B6
0000B10C 7002                       		moveq	#2,d0
0000B10E 0828 0000 0022             		btst	#0,obStatus(a0)
0000B114 6600                       		bne.s	locret_96B6
0000B116 7001                       		moveq	#1,d0
0000B118                            
0000B118                            locret_96B6:
0000B118 4E75                       		rts	
0000B11A                            ; End of function Crab_SetAni
0000B11A                            
0000B11A                            ; ===========================================================================
0000B11A                            
0000B11A                            Crab_Delete:	; Routine 4
0000B11A 6100 0000                  		bsr.w	DeleteObject
0000B11E 4E75                       		rts	
0000B120                            ; ===========================================================================
0000B120                            ; ---------------------------------------------------------------------------
0000B120                            ; Sub-object - missile that the	Crabmeat throws
0000B120                            ; ---------------------------------------------------------------------------
0000B120                            
0000B120                            Crab_BallMain:	; Routine 6
0000B120 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B124 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000B12C 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000B132 117C 0004 0001             		move.b	#4,obRender(a0)
0000B138 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B13E 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B144 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B14A 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000B150 117C 0007 001C             		move.b	#7,obAnim(a0)
0000B156                            
0000B156                            Crab_BallMove:	; Routine 8
0000B156 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000B15C 6100 0000                  		bsr.w	AnimateSprite
0000B160 6100 0000                  		bsr.w	ObjectFall
0000B164 6100 0000                  		bsr.w	DisplaySprite
0000B168 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B16C 0640 00E0                  		addi.w	#$E0,d0
0000B170 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B174 6500                       		bcs.s	@delete		; if yes, branch
0000B176 4E75                       		rts	
0000B178                            
0000B178                            	@delete:
0000B178 6000 0000                  		bra.w	DeleteObject
0000B178 6000 0000                  		bra.w	DeleteObject
0000B17C                            		include	"_anim\Crabmeat.asm"
0000B17C                            ; ---------------------------------------------------------------------------
0000B17C                            ; Animation script - Crabmeat enemy
0000B17C                            ; ---------------------------------------------------------------------------
0000B17C 0000 0000 0000             Ani_Crab:	dc.w @stand-Ani_Crab, @standslope-Ani_Crab, @standsloperev-Ani_Crab
0000B182 0000 0000 0000             		dc.w @walk-Ani_Crab, @walkslope-Ani_Crab, @walksloperev-Ani_Crab
0000B188 0000 0000                  		dc.w @firing-Ani_Crab, @ball-Ani_Crab
0000B18C 0F00 FF                    @stand:		dc.b $F, 0, afEnd
0000B190 00                         		even
0000B190 0F02 FF                    @standslope:	dc.b $F, 2, afEnd
0000B194 00                         		even
0000B194 0F22 FF                    @standsloperev:	dc.b $F, $22, afEnd
0000B198 00                         		even
0000B198 0F01 2100 FF               @walk:		dc.b $F, 1, $21, 0, afEnd
0000B19E 00                         		even
0000B19E 0F21 0302 FF               @walkslope:	dc.b $F, $21, 3, 2, afEnd
0000B1A4 00                         		even
0000B1A4 0F01 2322 FF               @walksloperev:	dc.b $F, 1, $23, $22, afEnd
0000B1AA 00                         		even
0000B1AA 0F04 FF                    @firing:	dc.b $F, 4, afEnd
0000B1AE 00                         		even
0000B1AE 0105 06FF                  @ball:		dc.b 1,	5, 6, afEnd
0000B1B2                            		even
0000B1B2                            		even
0000B1B2                            Map_Crab:	include	"_maps\Crabmeat.asm"
0000B1B2                            ; ---------------------------------------------------------------------------
0000B1B2                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000B1B2                            ; ---------------------------------------------------------------------------
0000B1B2                            Map_Crab_internal:
0000B1B2 0000                       		dc.w @stand-Map_Crab_internal
0000B1B4 0000                       		dc.w @walk-Map_Crab_internal
0000B1B6 0000                       		dc.w @slope1-Map_Crab_internal
0000B1B8 0000                       		dc.w @slope2-Map_Crab_internal
0000B1BA 0000                       		dc.w @firing-Map_Crab_internal
0000B1BC 0000                       		dc.w @ball1-Map_Crab_internal
0000B1BE 0000                       		dc.w @ball2-Map_Crab_internal
0000B1C0 04                         @stand:		dc.b 4
0000B1C1 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8	; standing/middle walking frame
0000B1C6 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000B1CB 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000B1D0 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000B1D5 04                         @walk:		dc.b 4
0000B1D6 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8	; walking
0000B1DB F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000B1E0 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000B1E5 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000B1EA 04                         @slope1:	dc.b 4
0000B1EB EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8	; walking on slope
0000B1F0 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000B1F5 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000B1FA FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000B1FF 04                         @slope2:	dc.b 4
0000B200 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8	; walking on slope
0000B205 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000B20A FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000B20F FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000B214 06                         @firing:	dc.b 6
0000B215 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0 ; firing projectiles
0000B21A F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000B21F F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000B224 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000B229 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000B22E 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000B233 01                         @ball1:		dc.b 1
0000B234 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8 ; projectile
0000B239 01                         @ball2:		dc.b 1
0000B23A F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8 ; projectile
0000B240 00                         		even
0000B240 00                         		even
0000B240                            		include	"_incObj\06 Mozzietron.asm"
0000B240                            ; ===========================================================================
0000B240                            ; ---------------------------------------------------------------------------
0000B240                            ; Object 06 - Mozzietron enemy	(GHZ)
0000B240                            ; ---------------------------------------------------------------------------
0000B240                            
0000B240                            Mozzietron:					; XREF: Obj_Index
0000B240 7000                       		moveq	#0,d0
0000B242 1028 0024                  		move.b	$24(a0),d0
0000B246 323B 0000                  		move.w	MozIndex(pc,d0.w),d1
0000B24A 4EFB 1000                  		jmp	MozIndex(pc,d1.w)
0000B24E                            ; ===========================================================================
0000B24E 0000                       MozIndex:	dc.w MozMain-MozIndex
0000B250 0000                       		dc.w MozAction-MozIndex
0000B252 0000                       		dc.w MozDelete-MozIndex
0000B254                            ; ===========================================================================
0000B254                            
0000B254                            MozMain:				; XREF: MozIndex
0000B254 5428 0024                  		addq.b	#2,$24(a0)
0000B258 217C 0000 0000 0004        		move.l	#Map_Mozzietron,4(a0)
0000B260 317C 0444 0002             		move.w	#$444,2(a0)
0000B266 117C 0004 0001             		move.b	#4,1(a0)
0000B26C 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B272 117C 0005 0020             		move.b	#5,$20(a0) ; hit box
0000B278 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B27E                            MozAction:				; XREF: MozIndex
0000B27E 7000                       		moveq	#0,d0
0000B280 1028 0025                  		move.b	$25(a0),d0
0000B284 323B 0000                  		move.w	MozIndex2(pc,d0.w),d1
0000B288 4EBB 1000                  		jsr	MozIndex2(pc,d1.w)
0000B28C 43F9 0000 0000             		lea	(Ani_Mozzietron).l,a1
0000B292 6100 0000                  		bsr.w	AnimateSprite
0000B296 6000 0000                  		bra.w	RememberState
0000B29A                            ; ===========================================================================
0000B29A 0000                       MozIndex2:	dc.w MozMove-MozIndex2
0000B29C 0000                       		dc.w MozChkNrSonic-MozIndex2
0000B29E 0000                       		dc.w MozPinned-MozIndex2
0000B2A0                            ; ===========================================================================
0000B2A0                            
0000B2A0                            MozMove:				; XREF: MozIndex2
0000B2A0 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B2A4 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000B2A6 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000B2AC 6600                       		bne.s	MozFire	; if yes, branch
0000B2AE 5428 0025                  		addq.b	#2,$25(a0)
0000B2B2 317C 0064 0032             		move.w	#100,$32(a0)	; set time delay to just over 2	seconds
0000B2B8 317C 0100 0010             		move.w	#$100,$10(a0)	; move Buzz Bomber to the right
0000B2BE 117C 0000 001C             		move.b	#0,$1C(a0)	; use "flying" animation
0000B2C4 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000B2CA 6600                       		bne.s	locret_986C	; if not, branch
0000B2CC 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000B2D0                            
0000B2D0                            locret_986C:
0000B2D0 4E75                       		rts	
0000B2D2                            ; ===========================================================================
0000B2D2                            
0000B2D2                            MozFire:				; XREF: MozMove
0000B2D2 117C 0002 001C             		move.b	#2,$1C(a0)	; use "diving" animation
0000B2D8 6100 0000                  		bsr.w	ObjectFall
0000B2DC 4EB9 0000 0000             		jsr     ObjFloorDist ; check distance between object and floor
0000B2E2 4A41                       		tst.w	d1 ; is floor distance positive? 
0000B2E4 6A00                       		bpl.s   @return ; if yes, branch 
0000B2E6 303C 00B6                  		move.w    #$B6,d0
0000B2EA 4EB9 0000 12A0             		jsr    (PlaySound_Special).l ;    play "spikes moving" sound
0000B2F0 117C 0004 0025             		move.b #4,$25(a0) ; set 2nd state to pinned
0000B2F6 D368 000C                  		add.w	d1,$C(a0) ; snap to the ground
0000B2FA 4268 0012                  		clr.w	$12(a0) ; clear Y Velocity 
0000B2FE 4228 0015                  		clr.b	$15(a0) ; $15(a0) is unused in this object, except this line
0000B302                            		@return:
0000B302 4E75                       	    		rts
0000B304                            		
0000B304                            
0000B304                            ; ===========================================================================
0000B304                            
0000B304                            MozPinned:
0000B304 4E75                               rts
0000B306                                    
0000B306                            ; ===========================================================================
0000B306                            
0000B306                            MozChkDel:				; XREF: Obj55_DropFly
0000B306 4A28 0001                  		tst.b	1(a0)
0000B30A 6A00 0000                  		bpl.w	DeleteObject
0000B30E 4E75                       		rts	
0000B310                            ; ===========================================================================
0000B310                            
0000B310                            MozChkNrSonic:			; XREF: MozIndex2
0000B310                            ;		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B310 6B00                       		bmi.s	MozChgDir
0000B312 6100 0000                  		bsr.w	SpeedToPos
0000B316 4A28 0034                  		tst.b	$34(a0)
0000B31A 6600                       		bne.s	locret_992A
0000B31C 3038 D008                  		move.w	($FFFFD008).w,d0
0000B320 9068 0008                  		sub.w	8(a0),d0
0000B324 6A00                       		bpl.s	MozSetNrSonic
0000B326 4440                       		neg.w	d0
0000B328                            
0000B328                            MozSetNrSonic:
0000B328 0C40 0005                  		cmpi.w	#$05,d0		; is Buzz Bomber within	$05 pixels of Sonic?
0000B32C 6400                       		bcc.s	locret_992A	; if not, branch
0000B32E 4A28 0001                  		tst.b	1(a0)
0000B332 6A00                       		bpl.s	locret_992A
0000B334 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000B33A 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000B340 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000B346 6000                       		bra.s	MozStop
0000B348                            ; ===========================================================================
0000B348                            
0000B348                            MozChgDir:				; XREF: MozChkNrSonic
0000B348 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000B34E 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000B354 317C 003B 0032             		move.w	#59,$32(a0)
0000B35A                            
0000B35A                            MozStop:				; XREF: MozSetNrSonic
0000B35A 5528 0025                  		subq.b	#2,$25(a0)	; run "MozFire" routine
0000B35E 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000B364 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000B36A                            
0000B36A                            locret_992A:
0000B36A 4E75                       		rts	
0000B36C                            ; ===========================================================================
0000B36C                            
0000B36C                            MozDelete:				; XREF: MozIndex
0000B36C 6100 0000                  		bsr.w	DeleteObject
0000B370 4E75                       		rts	
0000B370 4E75                       		rts	
0000B372                            		include	"_incObj\22 Buzz Bomber.asm"
0000B372                            ; ===========================================================================
0000B372                            ; ---------------------------------------------------------------------------
0000B372                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000B372                            ; ---------------------------------------------------------------------------
0000B372                            
0000B372                            BuzzBomber:
0000B372 7000                       		moveq	#0,d0
0000B374 1028 0024                  		move.b	obRoutine(a0),d0
0000B378 323B 0000                  		move.w	Buzz_Index(pc,d0.w),d1
0000B37C 4EFB 1000                  		jmp	Buzz_Index(pc,d1.w)
0000B380                            ; ===========================================================================
0000B380 0000                       Buzz_Index:	dc.w Buzz_Main-Buzz_Index
0000B382 0000                       		dc.w Buzz_Action-Buzz_Index
0000B384 0000                       		dc.w Buzz_Delete-Buzz_Index
0000B386                            
0000B386 =00000032                  buzz_timedelay:	equ $32
0000B386 =00000034                  buzz_buzzstatus:	equ $34
0000B386 =0000003C                  buzz_parent:	equ $3C
0000B386                            ; ===========================================================================
0000B386                            
0000B386                            Buzz_Main:	; Routine 0
0000B386 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B38A 217C 0000 0000 0004        		move.l	#Map_Buzz,obMap(a0)
0000B392 317C 0444 0002             		move.w	#$444,obGfx(a0)
0000B398 117C 0004 0001             		move.b	#4,obRender(a0)
0000B39E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B3A4 117C 0008 0020             		move.b	#8,obColType(a0)
0000B3AA 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B3B0                            
0000B3B0                            Buzz_Action:	; Routine 2
0000B3B0 7000                       		moveq	#0,d0
0000B3B2 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B3B6 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B3BA 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B3BE 43F9 0000 0000             		lea	(Ani_Buzz).l,a1
0000B3C4 6100 0000                  		bsr.w	AnimateSprite
0000B3C8 6000 0000                  		bra.w	RememberState
0000B3CC                            ; ===========================================================================
0000B3CC 0000                       @index:		dc.w @move-@index
0000B3CE 0000                       		dc.w @chknearsonic-@index
0000B3D0                            ; ===========================================================================
0000B3D0                            
0000B3D0                            @move:
0000B3D0 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B3D4 6A00                       		bpl.s	@noflip		; if time remains, branch
0000B3D6 0828 0001 0034             		btst	#1,buzz_buzzstatus(a0) ; is Buzz Bomber near Sonic?
0000B3DC 6600                       		bne.s	@fire		; if yes, branch
0000B3DE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B3E2 317C 007F 0032             		move.w	#127,buzz_timedelay(a0) ; set time delay to just over 2 seconds
0000B3E8 317C 0400 0010             		move.w	#$400,obVelX(a0) ; move Buzz Bomber to the right
0000B3EE 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "flying" animation
0000B3F4 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B3FA 6600                       		bne.s	@noflip		; if not, branch
0000B3FC 4468 0010                  		neg.w	obVelX(a0)	; move Buzz Bomber to the left
0000B400                            
0000B400                            	@noflip:
0000B400 4E75                       		rts	
0000B402                            ; ===========================================================================
0000B402                            
0000B402                            	@fire:
0000B402 6100 0000                  		bsr.w	FindFreeObj
0000B406 6600                       		bne.s	@fail
0000B408 12BC 0000                  		move.b	#id_Missile,0(a1) ; load missile object
0000B40C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B412 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B418 0669 001C 000C             		addi.w	#$1C,obY(a1)
0000B41E 337C 0200 0012             		move.w	#$200,obVelY(a1) ; move missile downwards
0000B424 337C 0200 0010             		move.w	#$200,obVelX(a1) ; move missile to the right
0000B42A 303C 0018                  		move.w	#$18,d0
0000B42E 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B434 6600                       		bne.s	@noflip2	; if not, branch
0000B436 4440                       		neg.w	d0
0000B438 4469 0010                  		neg.w	obVelX(a1)	; move missile to the left
0000B43C                            
0000B43C                            	@noflip2:
0000B43C D169 0008                  		add.w	d0,obX(a1)
0000B440 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0000B446 337C 000E 0032             		move.w	#$E,buzz_timedelay(a1)
0000B44C 2348 003C                  		move.l	a0,buzz_parent(a1)
0000B450 117C 0001 0034             		move.b	#1,buzz_buzzstatus(a0) ; set to "already fired" to prevent refiring
0000B456 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B45C 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "firing" animation
0000B462                            
0000B462                            	@fail:
0000B462 4E75                       		rts	
0000B464                            ; ===========================================================================
0000B464                            
0000B464                            @chknearsonic:
0000B464 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B468 6B00                       		bmi.s	@chgdirection
0000B46A 6100 0000                  		bsr.w	SpeedToPos
0000B46E 4A28 0034                  		tst.b	buzz_buzzstatus(a0)
0000B472 6600                       		bne.s	@keepgoing
0000B474 3038 D008                  		move.w	(v_player+obX).w,d0
0000B478 9068 0008                  		sub.w	obX(a0),d0
0000B47C 6A00                       		bpl.s	@isleft
0000B47E 4440                       		neg.w	d0
0000B480                            
0000B480                            	@isleft:
0000B480 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000B484 6400                       		bcc.s	@keepgoing	; if not, branch
0000B486 4A28 0001                  		tst.b	obRender(a0)
0000B48A 6A00                       		bpl.s	@keepgoing
0000B48C 117C 0002 0034             		move.b	#2,buzz_buzzstatus(a0) ; set Buzz Bomber to "near Sonic"
0000B492 317C 001D 0032             		move.w	#29,buzz_timedelay(a0) ; set time delay to half a second
0000B498 6000                       		bra.s	@stop
0000B49A                            ; ===========================================================================
0000B49A                            
0000B49A                            	@chgdirection:
0000B49A 117C 0000 0034             		move.b	#0,buzz_buzzstatus(a0) ; set Buzz Bomber to "normal"
0000B4A0 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction
0000B4A6 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B4AC                            
0000B4AC                            	@stop:
0000B4AC 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B4B0 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Buzz Bomber moving
0000B4B6 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "hovering" animation
0000B4BC                            
0000B4BC                            @keepgoing:
0000B4BC 4E75                       		rts	
0000B4BE                            ; ===========================================================================
0000B4BE                            
0000B4BE                            Buzz_Delete:	; Routine 4
0000B4BE 6100 0000                  		bsr.w	DeleteObject
0000B4C2 4E75                       		rts	
0000B4C2 4E75                       		rts	
0000B4C4                            		include	"_incObj\23 Buzz Bomber Missile.asm"
0000B4C4                            ; ---------------------------------------------------------------------------
0000B4C4                            ; Object 23 - missile that Buzz	Bomber throws
0000B4C4                            ; ---------------------------------------------------------------------------
0000B4C4                            
0000B4C4                            Missile:
0000B4C4 7000                       		moveq	#0,d0
0000B4C6 1028 0024                  		move.b	obRoutine(a0),d0
0000B4CA 323B 0000                  		move.w	Msl_Index(pc,d0.w),d1
0000B4CE 4EFB 1000                  		jmp	Msl_Index(pc,d1.w)
0000B4D2                            ; ===========================================================================
0000B4D2 0000                       Msl_Index:	dc.w Msl_Main-Msl_Index
0000B4D4 0000                       		dc.w Msl_Animate-Msl_Index
0000B4D6 0000                       		dc.w Msl_FromBuzz-Msl_Index
0000B4D8 0000                       		dc.w Msl_Delete-Msl_Index
0000B4DA 0000                       		dc.w Msl_FromNewt-Msl_Index
0000B4DC                            
0000B4DC =0000003C                  msl_parent:	equ $3C
0000B4DC                            ; ===========================================================================
0000B4DC                            
0000B4DC                            Msl_Main:	; Routine 0
0000B4DC 5368 0032                  		subq.w	#1,$32(a0)
0000B4E0 6A00                       		bpl.s	Msl_ChkCancel
0000B4E2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B4E6 217C 0000 0000 0004        		move.l	#Map_Missile,obMap(a0)
0000B4EE 317C 2444 0002             		move.w	#$2444,obGfx(a0)
0000B4F4 117C 0004 0001             		move.b	#4,obRender(a0)
0000B4FA 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B500 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B506 0228 0003 0022             		andi.b	#3,obStatus(a0)
0000B50C 4A28 0028                  		tst.b	obSubtype(a0)	; was object created by	a Newtron?
0000B510 6700                       		beq.s	Msl_Animate	; if not, branch
0000B512                            
0000B512 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Msl_FromNewt" routine
0000B518 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B51E 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B524 6000                       		bra.s	Msl_Animate2
0000B526                            ; ===========================================================================
0000B526                            
0000B526                            Msl_Animate:	; Routine 2
0000B526 6100                       		bsr.s	Msl_ChkCancel
0000B528 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B52E 6100 0000                  		bsr.w	AnimateSprite
0000B532 6000 0000                  		bra.w	DisplaySprite
0000B536                            
0000B536                            ; ---------------------------------------------------------------------------
0000B536                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000B536                            ; destroyed, and if it has, then cancel	the missile
0000B536                            ; ---------------------------------------------------------------------------
0000B536                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B536                            
0000B536                            
0000B536                            Msl_ChkCancel:
0000B536 2268 003C                  		movea.l	msl_parent(a0),a1
0000B53A 0C11 0000                  		cmpi.b	#id_ExplosionItem,0(a1) ; has Buzz Bomber been destroyed?
0000B53E 6700                       		beq.s	Msl_Delete	; if yes, branch
0000B540 4E75                       		rts	
0000B542                            ; End of function Msl_ChkCancel
0000B542                            
0000B542                            ; ===========================================================================
0000B542                            
0000B542                            Msl_FromBuzz:	; Routine 4
0000B542 0828 0007 0022             		btst	#7,obStatus(a0)
0000B548 6600                       		bne.s	@explode
0000B54A 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B550 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B556 6100 0000                  		bsr.w	SpeedToPos
0000B55A 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B560 6100 0000                  		bsr.w	AnimateSprite
0000B564 6100 0000                  		bsr.w	DisplaySprite
0000B568 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B56C 0640 00E0                  		addi.w	#$E0,d0
0000B570 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B574 6500                       		bcs.s	Msl_Delete	; if yes, branch
0000B576 4E75                       		rts	
0000B578                            ; ===========================================================================
0000B578                            
0000B578                            	@explode:
0000B578 10BC 0000                  		move.b	#id_MissileDissolve,0(a0) ; change object to an explosion (Obj24)
0000B57C 117C 0000 0024             		move.b	#0,obRoutine(a0)
0000B582 6000 F1BA                  		bra.w	MissileDissolve
0000B586                            ; ===========================================================================
0000B586                            
0000B586                            Msl_Delete:	; Routine 6
0000B586 6100 0000                  		bsr.w	DeleteObject
0000B58A 4E75                       		rts	
0000B58C                            ; ===========================================================================
0000B58C                            
0000B58C                            Msl_FromNewt:	; Routine 8
0000B58C 4A28 0001                  		tst.b	obRender(a0)
0000B590 6AF4                       		bpl.s	Msl_Delete
0000B592 6100 0000                  		bsr.w	SpeedToPos
0000B596                            
0000B596                            Msl_Animate2:
0000B596 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B59C 6100 0000                  		bsr.w	AnimateSprite
0000B5A0 6100 0000                  		bsr.w	DisplaySprite
0000B5A4 4E75                       		rts	
0000B5A4 4E75                       		rts	
0000B5A6                            		include	"_anim\Mozzietron.asm"
0000B5A6                            ; ---------------------------------------------------------------------------
0000B5A6                            ; Animation script - Buzz Bomber enemy
0000B5A6                            ; ---------------------------------------------------------------------------
0000B5A6 0000                       Ani_Mozzietron:	dc.w byte_9A1E-Ani_Mozzietron;0
0000B5A8 0000                       		dc.w byte_9A22-Ani_Mozzietron;1
0000B5AA 0000                       		dc.w byte_9A26-Ani_Mozzietron;2
0000B5AC 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000B5B0 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000B5B4 0502 0304 05FE 01          byte_9A26:	dc.b 5, 2, 3, 4, 5, $FE, 1
0000B5BC 00                         		even
0000B5BC 00                         		even
0000B5BC                            		include	"_anim\Buzz Bomber.asm"
0000B5BC                            ; ---------------------------------------------------------------------------
0000B5BC                            ; Animation script - Buzz Bomber enemy
0000B5BC                            ; ---------------------------------------------------------------------------
0000B5BC 0000                       Ani_Buzz:	dc.w @fly1-Ani_Buzz
0000B5BE 0000                       		dc.w @fly2-Ani_Buzz
0000B5C0 0000                       		dc.w @fires-Ani_Buzz
0000B5C2 0100 01FF                  @fly1:		dc.b 1,	0, 1, afEnd
0000B5C6 0102 03FF                  @fly2:		dc.b 1,	2, 3, afEnd
0000B5CA 0104 05FF                  @fires:		dc.b 1,	4, 5, afEnd
0000B5CE                            		even
0000B5CE                            		even
0000B5CE                            		include	"_anim\Buzz Bomber Missile.asm"
0000B5CE                            ; ---------------------------------------------------------------------------
0000B5CE                            ; Animation script - missile that Buzz Bomber throws
0000B5CE                            ; ---------------------------------------------------------------------------
0000B5CE 0000                       Ani_Missile:	dc.w @flare-Ani_Missile
0000B5D0 0000                       		dc.w @missile-Ani_Missile
0000B5D2 0700 01FC                  @flare:		dc.b 7,	0, 1, afRoutine
0000B5D6 0102 03FF                  @missile:	dc.b 1,	2, 3, afEnd
0000B5DA                            		even
0000B5DA                            		even
0000B5DA                            Map_Mozzietron:	include	"_maps\Mozzietron.asm"
0000B5DA                            ; --------------------------------------------------------------------------------
0000B5DA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B5DA                            ; --------------------------------------------------------------------------------
0000B5DA                            
0000B5DA                            SME_qvHIs:	
0000B5DA 0000 0000                  		dc.w SME_qvHIs_C-SME_qvHIs, SME_qvHIs_17-SME_qvHIs	
0000B5DE 0000 0000                  		dc.w SME_qvHIs_1D-SME_qvHIs, SME_qvHIs_28-SME_qvHIs	
0000B5E2 0000 0000                  		dc.w SME_qvHIs_38-SME_qvHIs, SME_qvHIs_4D-SME_qvHIs	
0000B5E6 02                         SME_qvHIs_C:	dc.b 2	
0000B5E7 FD0C 2000 F0               		dc.b $FD, $C, $20, 0, $F0	
0000B5EC ED09 2004 F8               		dc.b $ED, 9, $20, 4, $F8	
0000B5F1 01                         SME_qvHIs_17:	dc.b 1	
0000B5F2 F80D 200A F0               		dc.b $F8, $D, $20, $A, $F0	
0000B5F7 02                         SME_qvHIs_1D:	dc.b 2	
0000B5F8 E90A 2012 F8               		dc.b $E9, $A, $20, $12, $F8	
0000B5FD F901 201B F0               		dc.b $F9, 1, $20, $1B, $F0	
0000B602 03                         SME_qvHIs_28:	dc.b 3	
0000B603 DF07 2025 FB               		dc.b $DF, 7, $20, $25, $FB	
0000B608 E700 2030 0B               		dc.b $E7, 0, $20, $30, $B	
0000B60D FF00 002D FB               		dc.b $FF, 0, 0, $2D, $FB	
0000B612 04                         SME_qvHIs_38:	dc.b 4	
0000B613 E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B618 F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B61D F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B622 F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B627 04                         SME_qvHIs_4D:	dc.b 4	
0000B628 E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B62D F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B632 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B637 F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B63C                            		even
0000B63C                            		even
0000B63C                            Map_Buzz:	include	"_maps\Buzz Bomber.asm"
0000B63C                            ; --------------------------------------------------------------------------------
0000B63C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B63C                            ; --------------------------------------------------------------------------------
0000B63C                            
0000B63C                            SME_yccqJ:	
0000B63C 0000 0000                  		dc.w SME_yccqJ_C-SME_yccqJ, SME_yccqJ_2B-SME_yccqJ	
0000B640 0000 0000                  		dc.w SME_yccqJ_4A-SME_yccqJ, SME_yccqJ_69-SME_yccqJ	
0000B644 0000 0000                  		dc.w SME_yccqJ_88-SME_yccqJ, SME_yccqJ_AC-SME_yccqJ	
0000B648 06                         SME_yccqJ_C:	dc.b 6	
0000B649 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B64E F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B653 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B658 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B65D EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B662 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B667 06                         SME_yccqJ_2B:	dc.b 6	
0000B668 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B66D F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B672 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B677 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B67C F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B681 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B686 06                         SME_yccqJ_4A:	dc.b 6	
0000B687 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B68C F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B691 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B696 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B69B EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B6A0 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B6A5 06                         SME_yccqJ_69:	dc.b 6	
0000B6A6 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B6AB F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B6B0 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B6B5 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B6BA F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B6BF F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B6C4 07                         SME_yccqJ_88:	dc.b 7	
0000B6C5 F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B6CA 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B6CF 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B6D4 EE04 201D 04               		dc.b $EE, 4, $20, $1D, 4	
0000B6D9 0C00 200E FC               		dc.b $C, 0, $20, $E, $FC	
0000B6DE 0C00 200D F4               		dc.b $C, 0, $20, $D, $F4	
0000B6E3 EE08 201A EC               		dc.b $EE, 8, $20, $1A, $EC	
0000B6E8 04                         SME_yccqJ_AC:	dc.b 4	
0000B6E9 F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B6EE 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B6F3 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B6F8 0C04 200D F4               		dc.b $C, 4, $20, $D, $F4	
0000B6FE 00                         		even
0000B6FE 00                         		even
0000B6FE                            Map_Missile:	include	"_maps\Buzz Bomber Missile.asm"
0000B6FE                            ; ---------------------------------------------------------------------------
0000B6FE                            ; Sprite mappings - missile that Buzz Bomber throws
0000B6FE                            ; ---------------------------------------------------------------------------
0000B6FE                            Map_Missile_internal:
0000B6FE 0000                       		dc.w @Flare1-Map_Missile_internal
0000B700 0000                       		dc.w @Flare2-Map_Missile_internal
0000B702 0000                       		dc.w @Ball1-Map_Missile_internal
0000B704 0000                       		dc.w @Ball2-Map_Missile_internal
0000B706 01                         @Flare1:	dc.b 1
0000B707 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8 ; buzz bomber firing flare
0000B70C 01                         @Flare2:	dc.b 1
0000B70D F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000B712 01                         @Ball1:		dc.b 1
0000B713 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8 ; missile itself
0000B718 01                         @Ball2:		dc.b 1
0000B719 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000B71E                            		even
0000B71E                            		even
0000B71E                            
0000B71E                            		include	"_incObj\25 & 37 Rings.asm"
0000B71E                            ; ---------------------------------------------------------------------------
0000B71E                            ; Object 25 - rings
0000B71E                            ; ---------------------------------------------------------------------------
0000B71E                            
0000B71E                            Rings:
0000B71E 7000                       		moveq	#0,d0
0000B720 1028 0024                  		move.b	obRoutine(a0),d0
0000B724 323B 0000                  		move.w	Ring_Index(pc,d0.w),d1
0000B728 4EFB 1000                  		jmp	Ring_Index(pc,d1.w)
0000B72C                            ; ===========================================================================
0000B72C                            Ring_Index:
0000B72C 0000                       ptr_Ring_Main:		dc.w Ring_Main-Ring_Index
0000B72E 0000                       ptr_Ring_Animate:	dc.w Ring_Animate-Ring_Index
0000B730 0000                       ptr_Ring_Collect:	dc.w Ring_Collect-Ring_Index
0000B732 0000                       ptr_Ring_Sparkle:	dc.w Ring_Sparkle-Ring_Index
0000B734 0000                       ptr_Ring_Delete:	dc.w Ring_Delete-Ring_Index
0000B736 0000                       ptr_Ring_Attract:	dc.w Ring_Attract-Ring_Index
0000B738 0000                       ptr_Ring_Collect1:	dc.w Ring_Collect-Ring_Index
0000B73A 0000                       ptr_Ring_Sparkle1:	dc.w Ring_Sparkle-Ring_Index
0000B73C 0000                       ptr_Ring_Delete1:	dc.w Ring_Delete-Ring_Index
0000B73E                            
0000B73E =00000000                  id_Ring_Main:			equ ptr_Ring_Main-Ring_Index	; 0
0000B73E =00000002                  id_Ring_Animate:		equ ptr_Ring_Animate-Ring_Index	; 2
0000B73E =00000004                  id_Ring_Collect:		equ ptr_Ring_Collect-Ring_Index	; 4
0000B73E =00000006                  id_Ring_Sparkle:		equ ptr_Ring_Sparkle-Ring_Index	; 6
0000B73E =00000008                  id_Ring_Delete:			equ ptr_Ring_Delete-Ring_Index	; 8
0000B73E =0000000A                  id_Ring_Attract:		equ ptr_Ring_Attract-Ring_Index	; $A
0000B73E =00000004                  id_Ring_Collect1:		equ ptr_Ring_Collect-Ring_Index	; $C
0000B73E =00000006                  id_Ring_Sparkle1:		equ ptr_Ring_Sparkle-Ring_Index	; $E
0000B73E =00000008                  id_Ring_Delete1:		equ ptr_Ring_Delete-Ring_Index	; $10
0000B73E                            ; ---------------------------------------------------------------------------
0000B73E                            ; Distances between rings (format: horizontal, vertical)
0000B73E                            ; ---------------------------------------------------------------------------
0000B73E 1000                       Ring_PosData:	dc.b $10, 0		; horizontal tight
0000B740 1800                       		dc.b $18, 0		; horizontal normal
0000B742 2000                       		dc.b $20, 0		; horizontal wide
0000B744 0010                       		dc.b 0,	$10		; vertical tight
0000B746 0018                       		dc.b 0,	$18		; vertical normal
0000B748 0020                       		dc.b 0,	$20		; vertical wide
0000B74A 1010                       		dc.b $10, $10		; diagonal
0000B74C 1818                       		dc.b $18, $18
0000B74E 2020                       		dc.b $20, $20
0000B750 F010                       		dc.b $F0, $10
0000B752 E818                       		dc.b $E8, $18
0000B754 E020                       		dc.b $E0, $20
0000B756 1008                       		dc.b $10, 8
0000B758 1810                       		dc.b $18, $10
0000B75A F008                       		dc.b $F0, 8
0000B75C E810                       		dc.b $E8, $10
0000B75E                            ; ===========================================================================
0000B75E                            
0000B75E                            Ring_Main:	; Routine 0
0000B75E 45F8 FC00                  		lea	(v_objstate).w,a2
0000B762 7000                       		moveq	#0,d0
0000B764 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B768 45F2 0002                  		lea	2(a2,d0.w),a2
0000B76C 1812                       		move.b	(a2),d4
0000B76E 1228 0028                  		move.b	obSubtype(a0),d1
0000B772 1001                       		move.b	d1,d0
0000B774 0241 0007                  		andi.w	#7,d1
0000B778 0C41 0007                  		cmpi.w	#7,d1
0000B77C 6600                       		bne.s	loc_9B80
0000B77E 7206                       		moveq	#6,d1
0000B780                            
0000B780                            	loc_9B80:
0000B780 4841                       		swap	d1
0000B782 323C 0000                  		move.w	#0,d1
0000B786 E808                       		lsr.b	#4,d0
0000B788 D040                       		add.w	d0,d0
0000B78A 1A3B 00B2                  		move.b	Ring_PosData(pc,d0.w),d5 ; load ring spacing data
0000B78E 4885                       		ext.w	d5
0000B790 1C3B 00AD                  		move.b	Ring_PosData+1(pc,d0.w),d6
0000B794 4886                       		ext.w	d6
0000B796 2248                       		movea.l	a0,a1
0000B798 3428 0008                  		move.w	obX(a0),d2
0000B79C 3628 000C                  		move.w	obY(a0),d3
0000B7A0 E20C                       		lsr.b	#1,d4
0000B7A2 6500                       		bcs.s	loc_9C02
0000B7A4 0892 0007                  		bclr	#7,(a2)
0000B7A8 6000                       		bra.s	loc_9BBA
0000B7AA                            ; ===========================================================================
0000B7AA                            
0000B7AA                            Ring_MakeRings:
0000B7AA 4841                       		swap	d1
0000B7AC E20C                       		lsr.b	#1,d4
0000B7AE 6500                       		bcs.s	loc_9C02
0000B7B0 0892 0007                  		bclr	#7,(a2)
0000B7B4 6100 0000                  		bsr.w	FindFreeObj
0000B7B8 6600                       		bne.s	loc_9C0E
0000B7BA                            
0000B7BA                            loc_9BBA:
0000B7BA 12BC 0000                  		move.b	#id_Rings,0(a1)	; load ring object
0000B7BE 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B7C2 3342 0008                  		move.w	d2,obX(a1)	; set x-axis position based on d2
0000B7C6 3368 0008 0032             		move.w	obX(a0),$32(a1)
0000B7CC 3343 000C                  		move.w	d3,obY(a1)	; set y-axis position based on d3
0000B7D0 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B7D8 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B7DE 137C 0004 0001             		move.b	#4,obRender(a1)
0000B7E4 337C 0100 0018             		move.w	#$100,obPriority(a1)
0000B7EA 137C 0047 0020             		move.b	#$47,obColType(a1)
0000B7F0 137C 0008 0014             		move.b	#8,obActWid(a1)
0000B7F6 1368 0023 0023             		move.b	obRespawnNo(a0),obRespawnNo(a1)
0000B7FC 1341 0034                  		move.b	d1,$34(a1)
0000B800                            
0000B800                            loc_9C02:
0000B800 5241                       		addq.w	#1,d1
0000B802 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000B804 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000B806 4841                       		swap	d1
0000B808 51C9 FFA0                  		dbf	d1,Ring_MakeRings ; repeat for	number of rings
0000B80C                            
0000B80C                            loc_9C0E:
0000B80C 0812 0000                  		btst	#0,(a2)
0000B810 6600 0000                  		bne.w	DeleteObject
0000B814                            
0000B814                            Ring_Animate:	; Routine 2
0000B814 4A38 FE2C                  		tst.b	(v_shield).w
0000B818 6700                       		beq.s	@skip
0000B81A 4A28 0001                  		tst.b	obRender(a0)
0000B81E 6A00                       		bpl.s	@skip
0000B820                            		
0000B820 43F8 D000                  		lea (v_player).w,a1
0000B824                            		
0000B824 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000B828 9068 0008                  		sub.w	obX(a0),d0
0000B82C 6A00                       		bpl.s	@a1
0000B82E 4440                       		neg.w	d0
0000B830                            		
0000B830                            	@a1:
0000B830 0C40 0040                  		cmpi.w	#$40,d0
0000B834 6200                       		bhi.s	@skip
0000B836                            		
0000B836 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000B83A 9068 000C                  		sub.w	obY(a0),d0
0000B83E 6A00                       		bpl.s	@a2
0000B840 4440                       		neg.w	d0
0000B842                            		
0000B842                            	@a2:
0000B842 0C40 0040                  		cmpi.w	#$40,d0
0000B846 6200                       		bhi.s	@skip
0000B848                            		
0000B848 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000B84E 45F8 FC00                  		lea	(v_objstate).w,a2
0000B852 7000                       		moveq	#0,d0
0000B854 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B858 1228 0034                  		move.b	$34(a0),d1
0000B85C 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B860                            		
0000B860                            	@skip:
0000B860 1178 FEC5 001A             		move.b	(v_ani2_frame).w,obFrame(a0) ; set frame
0000B866 6100 0000                  		bsr.w	DisplaySprite
0000B886 4E75                       		rts	
0000B888                            ; ===========================================================================
0000B888                            
0000B888                            Ring_Collect:	; Routine 4
0000B888 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B88C 117C 0000 0020             		move.b	#0,obColType(a0)
0000B892 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000B898 6100 0000                  		bsr.w	CollectRing
0000B89C 45F8 FC00                  		lea	(v_objstate).w,a2
0000B8A0 7000                       		moveq	#0,d0
0000B8A2 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B8A6 1228 0034                  		move.b	$34(a0),d1
0000B8AA 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B8AE                            
0000B8AE                            Ring_Sparkle:	; Routine 6
0000B8AE 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000B8B4 6100 0000                  		bsr.w	AnimateSprite
0000B8B8 6000 0000                  		bra.w	DisplaySprite
0000B8BC                            ; ===========================================================================
0000B8BC                            
0000B8BC                            Ring_Delete:	; Routine 8
0000B8BC 6000 0000                  		bra.w	DeleteObject
0000B8C0                            
0000B8C0                            Ring_Attract:	; Routine $A
0000B8C0 4A38 FE2C                  		tst.b	(v_shield).w
0000B8C4 6600                       		bne.s	@skip
0000B8C6 10BC 0000                  		move.b	#id_RingLoss,0(a0)
0000B8CA 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000B8D0 11FC 00FF FEC6             		move.b	#-1,(v_ani3_time).w
0000B8D6 6000                       		bra.s	@display
0000B8D8                            		
0000B8D8                            	@skip:
0000B8D8 323C 0030                  		move.w	#$30,d1	; horizontal
0000B8DC 3038 D008                  		move.w	(v_player+obX).w,d0
0000B8E0 B068 0008                  		cmp.w	obX(a0),d0
0000B8E4 6400                       		bcc.s	@a1
0000B8E6 4441                       		neg.w	d1
0000B8E8 4A68 0010                  		tst.w	obVelX(a0)
0000B8EC 6B00                       		bmi.s	@a2
0000B8EE D241                       		add.w	d1,d1
0000B8F0 D241                       		add.w	d1,d1
0000B8F2 6000                       		bra.s	@a2
0000B8F4                            
0000B8F4                            	@a1:
0000B8F4 4A68 0010                  		tst.w	obVelX(a0)
0000B8F8 6A00                       		bpl.s	@a2
0000B8FA D241                       		add.w	d1,d1
0000B8FC D241                       		add.w	d1,d1
0000B8FE                            
0000B8FE                            	@a2:
0000B8FE D368 0010                  		add.w	d1,obVelX(a0)
0000B902 323C 0030                  		move.w	#$30,d1	; vertical
0000B906 3038 D00C                  		move.w	(v_player+obY).w,d0
0000B90A B068 000C                  		cmp.w	obY(a0),d0
0000B90E 6400                       		bcc.s	@a3
0000B910 4441                       		neg.w	d1
0000B912 4A68 0012                  		tst.w	obVelY(a0)
0000B916 6B00                       		bmi.s	@a4
0000B918 D241                       		add.w	d1,d1
0000B91A D241                       		add.w	d1,d1
0000B91C 6000                       		bra.s	@a4
0000B91E                            
0000B91E                            	@a3:
0000B91E 4A68 0012                  		tst.w	obVelY(a0)
0000B922 6A00                       		bpl.s	@a4
0000B924 D241                       		add.w	d1,d1
0000B926 D241                       		add.w	d1,d1
0000B928                            
0000B928                            	@a4:
0000B928 D368 0012                  		add.w	d1,obVelY(a0)
0000B92C 6100 0000                  		bsr.w	SpeedToPos
0000B930                            		
0000B930                            	@display:
0000B930 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0) ; set frame
0000B936 6000 0000                  		bra.w	DisplaySprite
0000B93A                            
0000B93A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B93A                            
0000B93A                            
0000B93A                            CollectRing:
0000B93A 5278 FE20                  		addq.w	#1,(v_rings).w	; add 1 to rings
0000B93E 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the rings counter
0000B944 303C 0000                  		move.w	#sfx_Ring,d0	; play ring sound
0000B948 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; do you have < 100 rings?
0000B94E 6500                       		bcs.s	@playsnd	; if yes, branch
0000B950 08F8 0001 FE1B             		bset	#1,(v_lifecount).w ; update lives counter
0000B956 6700                       		beq.s	@got100
0000B958 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; do you have < 200 rings?
0000B95E 6500                       		bcs.s	@playsnd	; if yes, branch
0000B960 08F8 0002 FE1B             		bset	#2,(v_lifecount).w ; update lives counter
0000B966 6600                       		bne.s	@playsnd
0000B968                            
0000B968                            	@got100:
0000B968 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000B96C 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000B970 303C 0000                  		move.w	#bgm_ExtraLife,d0 ; play extra life music
0000B974                            		
0000B974                            
0000B974                            	@playsnd:
0000B974 4EF9 0000 12A0             		jmp	(PlaySound_Special).l
0000B97A                            ; End of function CollectRing
0000B97A                            
0000B97A                            ; ===========================================================================
0000B97A                            ; ---------------------------------------------------------------------------
0000B97A                            ; Object 37 - rings flying out of Sonic	when he's hit
0000B97A                            ; ---------------------------------------------------------------------------
0000B97A                            
0000B97A                            RingLoss:
0000B97A 7000                       		moveq	#0,d0
0000B97C 1028 0024                  		move.b	obRoutine(a0),d0
0000B980 323B 0000                  		move.w	RLoss_Index(pc,d0.w),d1
0000B984 4EFB 1000                  		jmp	RLoss_Index(pc,d1.w)
0000B988                            ; ===========================================================================
0000B988 0000                       RLoss_Index:	dc.w RLoss_Count-RLoss_Index
0000B98A 0000                       		dc.w RLoss_Bounce-RLoss_Index
0000B98C 0000                       		dc.w RLoss_Collect-RLoss_Index
0000B98E 0000                       		dc.w RLoss_Sparkle-RLoss_Index
0000B990 0000                       		dc.w RLoss_Delete-RLoss_Index
0000B992                            ; ===========================================================================
0000B992                            
0000B992                            RLoss_Count:	; Routine 0
0000B992 2248                       		movea.l	a0,a1
0000B994 7A00                       		moveq	#0,d5
0000B996 3A38 FE20                  		move.w	(v_rings).w,d5	; check number of rings you have
0000B99A 47F9 0000 0000                     lea     SpillRingData,a3        ; load the address of the array in a3
0000B9A0 7018                               moveq   #24,d0                  ; lose a max of 24 rings
0000B9A2 45F8 D000                          lea     (v_player).w,a2    ; a2=character
0000B9A6 082A 0006 0022                     btst    #6,obStatus(a2)           ; is Sonic underwater?
0000B9AC 6700                               beq.s   @cont                       ; if not, branch
0000B9AE 47F9 0000 0000                     lea    SpillRingData_Water,a3        ; load the UNDERWATER address of the array in a3
0000B9B4 7010                               moveq   #16,d0                   ; lose a max of 16 rings underwater
0000B9B6                            @cont:
0000B9B6 BA40                               cmp.w   d0,d5
0000B9B8 6500                               bcs.s   @belowmax
0000B9BA 3A00                               move.w  d0,d5
0000B9BC                            
0000B9BC                            @belowmax:
0000B9BC 5345                               subq.w  #1,d5
0000B9BE 383C 0288                          move.w  #$288,d4
0000B9C2 6000                       		bra.s	@makerings
0000B9C4                            ; ===========================================================================
0000B9C4                            
0000B9C4                            	@loop:
0000B9C4 6100 0000                  		bsr.w	FindFreeObj
0000B9C8 6600 0000                  		bne.w	@resetcounter
0000B9CC                            
0000B9CC                            @makerings:
0000B9CC 12BC 0000                  		move.b	#id_RingLoss,0(a1) ; load bouncing ring object
0000B9D0 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B9D4 137C 0008 0016             		move.b	#8,obHeight(a1)
0000B9DA 137C 0008 0017             		move.b	#8,obWidth(a1)
0000B9E0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B9E6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B9EC 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B9F4 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B9FA 137C 0004 0001             		move.b	#4,obRender(a1)
0000BA00 137C 0047 0020             		move.b	#$47,obColType(a1)
0000BA06 137C 0008 0014             		move.b	#8,obActWid(a1)
0000BA0C 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000BA10 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000BA12 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000BA16 BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000BA1A 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000BA1C E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000BA1E E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000BA20                            @skiphalvingvel:
0000BA20 335B 0010                  		move.w  (a3)+,obVelX(a1)         ; move the data contained in the array to the x velocity and increment the address in a3
0000BA24 335B 0012                  		move.w  (a3)+,obVelY(a1)         ; move the data contained in the array to the y velocity and increment the address in a3	
0000BA28 51CD FF9A                  		dbf	d5,@loop	; repeat for number of rings (max 31)
0000BA2C                            
0000BA2C                            @resetcounter:
0000BA2C 31FC 0000 FE20             		move.w	#0,(v_rings).w	; reset number of rings to zero
0000BA32 11FC 0080 FE1D             		move.b	#$80,(f_ringcount).w ; update ring counter
0000BA38 11FC 0000 FE1B             		move.b	#0,(v_lifecount).w
0000BA3E 70FF                               moveq   #-1,d0                  ; Move #-1 to d0
0000BA40 1140 001F                          move.b  d0,obDelayAni(a0)       ; Move d0 to new timer
0000BA44 11C0 FEC6                          move.b  d0,(v_ani3_time).w      ; Move d0 to old timer (for animated purposes)
0000BA52                            
0000BA52                            RLoss_Bounce:	; Routine 2
0000BA52 1178 FEC7 001A             		move.b	(v_ani3_frame).w,obFrame(a0)
0000BA58 6100 0000                  		bsr.w	SpeedToPos
0000BA5C 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000BA62 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000BA66 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000BA68 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000BA6C BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000BA70 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000BA72 0468 000E 0012             		subi.w	#$E,obVelY(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000BA78                            	@skipbounceslow:
0000BA78 6B00                       		bmi.s	@chkdel
0000BA7A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000BA7E D007                       		add.b	d7,d0
0000BA80 0200 0003                  		andi.b	#3,d0
0000BA84 6600                       		bne.s	@chkdel
0000BA86 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000BA8C 4A41                       		tst.w	d1
0000BA8E 6A00                       		bpl.s	@chkdel
0000BA90 D368 000C                  		add.w	d1,obY(a0)
0000BA94 3028 0012                  		move.w	obVelY(a0),d0
0000BA98 E440                       		asr.w	#2,d0
0000BA9A 9168 0012                  		sub.w	d0,obVelY(a0)
0000BA9E 4468 0012                  		neg.w	obVelY(a0)
0000BAA2                            
0000BAA2                            	@chkdel:
0000BAA2 5328 001F                  		subq.b  #1,obDelayAni(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000BAA6 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000BAAA 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000BAAE 0640 00E0                  		addi.w	#$E0,d0
0000BAB2 B068 000C                  		cmp.w	obY(a0),d0	   ; has object moved below level boundary?
0000BAB6 6500 0000                  		bcs.w	RLoss_Delete	   ; if yes, branch
0000BABA 4A38 FE2C                  		tst.b	(v_shield).w
0000BABE 6700                       		beq.s	@skip
0000BAC0 4A28 0001                  		tst.b	obRender(a0)
0000BAC4 6A00                       		bpl.s	@skip
0000BAC6                            		
0000BAC6 43F8 D000                  		lea (v_player).w,a1
0000BACA                            		
0000BACA 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000BACE 9068 0008                  		sub.w	obX(a0),d0
0000BAD2 6A00                       		bpl.s	@a1
0000BAD4 4440                       		neg.w	d0
0000BAD6                            		
0000BAD6                            	@a1:
0000BAD6 0C40 00A0                  		cmpi.w	#$A0,d0
0000BADA 6200                       		bhi.s	@skip
0000BADC                            		
0000BADC 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000BAE0 9068 000C                  		sub.w	obY(a0),d0
0000BAE4 6A00                       		bpl.s	@a2
0000BAE6 4440                       		neg.w	d0
0000BAE8                            		
0000BAE8                            	@a2:
0000BAE8 0C40 00A0                  		cmpi.w	#$A0,d0
0000BAEC 6200                       		bhi.s	@skip
0000BAEE                            		
0000BAEE 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000BAF4 10BC 0000                  		move.b	#id_Rings,0(a0)
0000BAF8                            		
0000BAF8                            	@skip:		
0000BAF8 43F8 AD80                          lea     v_spritequeue+$180,a1
0000BAFC D2FC 0080                          adda.w  #$80,a1
0000BB00 0C51 007E                          cmpi.w  #$7E,(a1)
0000BB04 6400                               bcc.s   @cont
0000BB06 5451                               addq.w  #2,(a1)
0000BB08 D2D1                               adda.w  (a1),a1
0000BB0A 3288                               move.w  a0,(a1)
0000BB0C                            		
0000BB0C                            	@cont:
0000BB0C 4E75                               rts		
0000BB0E                            ; ===========================================================================
0000BB0E                            
0000BB0E                            RLoss_Collect:	; Routine 4
0000BB0E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BB12 117C 0000 0020             		move.b	#0,obColType(a0)
0000BB18 6100 FE20                  		bsr.w	CollectRing
0000BB1C                            
0000BB1C                            RLoss_Sparkle:	; Routine 6
0000BB1C 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000BB22 6100 0000                  		bsr.w	AnimateSprite
0000BB26 43F8 AD80                  		lea     v_spritequeue+$180,a1
0000BB2A 0C51 007E                          cmpi.w  #$7E,(a1)
0000BB2E 6400                               bcc.s   @cont
0000BB30 5451                               addq.w  #2,(a1)
0000BB32 D2D1                               adda.w  (a1),a1
0000BB34 3288                               move.w  a0,(a1)
0000BB36                            			
0000BB36                            	@cont:
0000BB36 4E75                               rts
0000BB38                            ; ===========================================================================
0000BB38                            
0000BB38                            RLoss_Delete:	; Routine 8
0000BB38 6000 0000                  		bra.w	DeleteObject
0000BB3C                            
0000BB3C                            ; ----------------------------------------------------------------------------------------------
0000BB3C                            ; Ring Spawn Array 
0000BB3C                            ; ----------------------------------------------------------------------------------------------
0000BB3C                            
0000BB3C FF3C FC14 00C4 FC14 FDC8+  SpillRingData:  dc.w    $FF3C,$FC14, $00C4,$FC14, $FDC8,$FCB0, $0238,$FCB0 ; 4
0000BB4C FCB0 FDC8 0350 FDC8 FC14+                  dc.w    $FCB0,$FDC8, $0350,$FDC8, $FC14,$FF3C, $03EC,$FF3C ; 8
0000BB5C FC14 00C4 03EC 00C4 FCB0+                  dc.w    $FC14,$00C4, $03EC,$00C4, $FCB0,$0238, $0350,$0238 ; 12
0000BB6C FDC8 0350 0238 0350 FF3C+                  dc.w    $FDC8,$0350, $0238,$0350, $FF3C,$03EC, $00C4,$03EC ; 16
0000BB7C FF9E FE0A 0062 FE0A FEE4+                  dc.w    $FF9E,$FE0A, $0062,$FE0A, $FEE4,$FE58, $011C,$FE58 ; 20
0000BB8C FE58 FEE4 01A8 FEE4 FE0A+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE0A,$FF9E, $01F6,$FF9E ; 24
0000BB9C FE0A 0062 01F6 0062 FE58+                  dc.w    $FE0A,$0062, $01F6,$0062, $FE58,$011C, $01A8,$011C ; 28
0000BBAC FEE4 01A8 011C 01A8 FF9E+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9E,$0156, $0062,$0156 ; 32
0000BBBC                                            even
0000BBBC                            ; ===========================================================================
0000BBBC                            ; -------------------------------------------------------------------------------------
0000BBBC                            ; Ring Spawn Array - Underwater - same thing as I said above. Edit at your own risk!!!
0000BBBC                            ; -------------------------------------------------------------------------------------
0000BBBC                            
0000BBBC                            SpillRingData_Water:
0000BBBC FF9C FE08 0064 FE08 FEE4+  				dc.w    $FF9C,$FE08, $0064,$FE08, $FEE4,$FE58, $011C,$FE58 ; 4
0000BBCC FE58 FEE4 01A8 FEE4 FE08+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE08,$FF9C, $01F8,$FF9C ; 8
0000BBDC FE08 0060 01F8 0060 FE58+                  dc.w    $FE08,$0060, $01F8,$0060, $FE58,$011C, $01A8,$011C ; 12
0000BBEC FEE4 01A8 011C 01A8 FF9C+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9C,$01F4, $0064,$01F4 ; 16
0000BBFC FFCE FF04 0032 FF04 FF72+                  dc.w    $FFCE,$FF04, $0032,$FF04, $FF72,$FF2C, $008E,$FF2C ; 20
0000BC0C FF2C FF72 00D4 FF72 FF04+                  dc.w    $FF2C,$FF72, $00D4,$FF72, $FF04,$FFCE, $00FC,$FFCE ; 24
0000BC1C FF04 0030 00FC 0030 FF2C+                  dc.w    $FF04,$0030, $00FC,$0030, $FF2C,$008E, $00D4,$008E ; 28
0000BC2C FF72 00D4 008E 00D4 FFCE+                  dc.w    $FF72,$00D4, $008E,$00D4, $FFCE,$00FA, $0032,$00FA ; 32
0000BC3C                                            even
0000BC3C                            ; ===========================================================================				
0000BC3C                            ; ===========================================================================				
0000BC3C                            		include	"_incObj\4B Giant Ring.asm"
0000BC3C                            ; ---------------------------------------------------------------------------
0000BC3C                            ; Object 4B - giant ring for entry to special stage
0000BC3C                            ; ---------------------------------------------------------------------------
0000BC3C                            
0000BC3C                            GiantRing:
0000BC3C 7000                       		moveq	#0,d0
0000BC3E 1028 0024                  		move.b	obRoutine(a0),d0
0000BC42 323B 0000                  		move.w	GRing_Index(pc,d0.w),d1
0000BC46 4EFB 1000                  		jmp	GRing_Index(pc,d1.w)
0000BC4A                            ; ===========================================================================
0000BC4A 0000                       GRing_Index:	dc.w GRing_Main-GRing_Index
0000BC4C 0000                       		dc.w GRing_Animate-GRing_Index
0000BC4E 0000                       		dc.w GRing_Collect-GRing_Index
0000BC50 0000                       		dc.w GRing_Delete-GRing_Index
0000BC52                            ; ===========================================================================
0000BC52                            
0000BC52                            GRing_Main:    ; Routine 0
0000BC52 217C 0000 0000 0004        		move.l	#Map_GRing,obMap(a0)
0000BC5A 317C 2400 0002             		move.w	#$2400,obGfx(a0)
0000BC60 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BC66 117C 0040 0014             		move.b	#$40,obActWid(a0)
0000BC6C 4A28 0001                  		tst.b	obRender(a0)
0000BC70 6A00                       		bpl.s	GRing_Animate
0000BC72 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have 6 emeralds?
0000BC78 6700 0000                  		beq.w	GRing_Delete    ; if yes, branch
0000BC7C 0C38 0002 F5C3             		cmpi.b	#2,(f_emeraldm).w    ;TIS Did you  hit the S-Monitor?
0000BC82 6700                       		beq.s	GRing_Okay    ; if yes, branch
0000BC84                            
0000BC84 4E75                       		rts    
0000BC86                            ; ===========================================================================
0000BC86                            
0000BC86                            GRing_Okay:
0000BC86 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BC8A 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000BC90 117C 0052 0020             		move.b	#$52,obColType(a0)
0000BC96 31FC 0C40 F7BE             		move.w	#$C40,(v_gfxbigring).w	; Signal that Art_BigRing should be loaded ($C40 is the size of Art_BigRing)
0000BC9C                            
0000BC9C                            GRing_Animate:	; Routine 2
0000BC9C 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0)
0000BCC0 6000 0000                  		bra.w	DisplaySprite
0000BCC4                            ; ===========================================================================
0000BCC4                            
0000BCC4                            GRing_Collect:	; Routine 4
0000BCC4 5528 0024                  		subq.b	#2,obRoutine(a0)
0000BCC8 117C 0000 0020             		move.b	#0,obColType(a0)
0000BCCE 6100 0000                  		bsr.w	FindFreeObj
0000BCD2 6600 0000                  		bne.w	GRing_PlaySnd
0000BCD6 12BC 0000                  		move.b	#id_RingFlash,0(a1) ; load giant ring flash object
0000BCDA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BCE0 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BCE6 2348 003C                  		move.l	a0,$3C(a1)
0000BCEA 3038 D008                  		move.w	(v_player+obX).w,d0
0000BCEE B068 0008                  		cmp.w	obX(a0),d0	; has Sonic come from the left?
0000BCF2 6500                       		bcs.s	GRing_PlaySnd	; if yes, branch
0000BCF4 08E9 0000 0001             		bset	#0,obRender(a1)	; reverse flash	object	
0000BCFA 11FC 0001 FE57             		move.b  #1,(v_emeralds).w
0000BD00 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000BD06                            		
0000BD06                            GRing_PlaySnd:
0000BD10 608A                       		bra.s	GRing_Animate
0000BD12                            ; ===========================================================================
0000BD12                            
0000BD12                            GRing_Delete:	; Routine 6
0000BD12 6000 0000                  		bra.w	DeleteObject
0000BD12 6000 0000                  		bra.w	DeleteObject
0000BD16                            		include	"_incObj\7C Ring Flash.asm"
0000BD16                            ; ---------------------------------------------------------------------------
0000BD16                            ; Object 7C - flash effect when	you collect the	giant ring
0000BD16                            ; ---------------------------------------------------------------------------
0000BD16                            
0000BD16                            RingFlash:
0000BD16 7000                       		moveq	#0,d0
0000BD18 1028 0024                  		move.b	obRoutine(a0),d0
0000BD1C 323B 0000                  		move.w	Flash_Index(pc,d0.w),d1
0000BD20 4EFB 1000                  		jmp	Flash_Index(pc,d1.w)
0000BD24                            ; ===========================================================================
0000BD24 0000                       Flash_Index:	dc.w Flash_Main-Flash_Index
0000BD26 0000                       		dc.w Flash_ChkDel-Flash_Index
0000BD28 0000                       		dc.w Flash_Delete-Flash_Index
0000BD2A                            ; ===========================================================================
0000BD2A                            
0000BD2A                            Flash_Main:	; Routine 0
0000BD2A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BD2E 217C 0000 0000 0004        		move.l	#Map_Flash,obMap(a0)
0000BD36 317C 2462 0002             		move.w	#$2462,obGfx(a0)
0000BD3C 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BD42 317C 0000 0018             		move.w	#0,obPriority(a0)
0000BD48 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000BD4E 117C 00FF 001A             		move.b	#$FF,obFrame(a0)
0000BD54                            
0000BD54                            Flash_ChkDel:	; Routine 2
0000BD54 6100                       		bsr.s	Flash_Collect
0000BD74 6000 0000                  		bra.w	DisplaySprite
0000BD78                            
0000BD78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BD78                            
0000BD78                            
0000BD78                            Flash_Collect:
0000BD78 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000BD7C 6A00                       		bpl.s	locret_9F76
0000BD7E 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000BD84 5228 001A                  		addq.b	#1,obFrame(a0)
0000BD88 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)	; has animation	finished?
0000BD8E 6400                       		bcc.s	Flash_End	; if yes, branch
0000BD90 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is 3rd frame displayed?
0000BD96 6600                       		bne.s	locret_9F76	; if not, branch
0000BD98 2268 003C                  		movea.l	$3C(a0),a1	; get parent object address
0000BD9C 137C 0006 0024             		move.b	#6,obRoutine(a1) ; delete parent object
0000BDA2 11FC 0000 D01C             		move.b	#id_Null,(v_player+obAnim).w ; make Sonic invisible
0000BDA8 11FC 0001 F7CD             		move.b	#1,(f_bigring).w ; stop	Sonic getting bonuses
0000BDAE 4238 FE2D                  		clr.b	(v_invinc).w	; remove invincibility
0000BDB2 4238 FE2C                  		clr.b	(v_shield).w	; remove shield
0000BDB6                            
0000BDB6                            locret_9F76:
0000BDB6 4E75                       		rts	
0000BDB8                            ; ===========================================================================
0000BDB8                            
0000BDB8                            Flash_End:
0000BDB8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BDBC 31FC 0000 D000             		move.w	#0,(v_player).w ; remove Sonic object
0000BDC2 588F                       		addq.l	#4,sp
0000BDC4 4E75                       		rts	
0000BDC6                            ; End of function Flash_Collect
0000BDC6                            
0000BDC6                            ; ===========================================================================
0000BDC6                            
0000BDC6                            Flash_Delete:	; Routine 4
0000BDC6 6000 0000                  		bra.w	DeleteObject
0000BDC6 6000 0000                  		bra.w	DeleteObject
0000BDCA                            
0000BDCA                            		include	"_anim\Rings.asm"
0000BDCA                            ; ---------------------------------------------------------------------------
0000BDCA                            ; Animation script - ring
0000BDCA                            ; ---------------------------------------------------------------------------
0000BDCA 0000                       Ani_Ring:	dc.w @ring-Ani_Ring
0000BDCC 0706 0708 09FC             @ring:		dc.b 7,	6, 7, 8, 9, afRoutine
0000BDD2                            		even
0000BDD2                            		even
0000BDD2                            Map_Ring:		include	"_maps\Rings (JP1).asm"
0000BDD2                            ; --------------------------------------------------------------------------------
0000BDD2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BDD2                            ; --------------------------------------------------------------------------------
0000BDD2                            
0000BDD2                            SME_aSMQh:	
0000BDD2 0000 0000                  		dc.w SME_aSMQh_14-SME_aSMQh, SME_aSMQh_1A-SME_aSMQh	
0000BDD6 0000 0000                  		dc.w SME_aSMQh_20-SME_aSMQh, SME_aSMQh_26-SME_aSMQh	
0000BDDA 0000 0000                  		dc.w SME_aSMQh_2C-SME_aSMQh, SME_aSMQh_32-SME_aSMQh	
0000BDDE 0000 0000                  		dc.w SME_aSMQh_38-SME_aSMQh, SME_aSMQh_3E-SME_aSMQh	
0000BDE2 0000 0000                  		dc.w SME_aSMQh_44-SME_aSMQh, SME_aSMQh_4A-SME_aSMQh	
0000BDE6 01                         SME_aSMQh_14:	dc.b 1	
0000BDE7 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
0000BDEC 01                         SME_aSMQh_1A:	dc.b 1	
0000BDED F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
0000BDF2 01                         SME_aSMQh_20:	dc.b 1	
0000BDF3 F805 000A F8               		dc.b $F8, 5, 0, $A, $F8	
0000BDF8 01                         SME_aSMQh_26:	dc.b 1	
0000BDF9 F801 0008 FC               		dc.b $F8, 1, 0, 8, $FC	
0000BDFE 01                         SME_aSMQh_2C:	dc.b 1	
0000BDFF F805 080A F8               		dc.b $F8, 5, 8, $A, $F8	
0000BE04 01                         SME_aSMQh_32:	dc.b 1	
0000BE05 F805 0804 F8               		dc.b $F8, 5, 8, 4, $F8	
0000BE0A 01                         SME_aSMQh_38:	dc.b 1	
0000BE0B F805 0010 F8               		dc.b $F8, 5, 0, $10, $F8	
0000BE10 01                         SME_aSMQh_3E:	dc.b 1	
0000BE11 F805 1810 F8               		dc.b $F8, 5, $18, $10, $F8	
0000BE16 01                         SME_aSMQh_44:	dc.b 1	
0000BE17 F805 0810 F8               		dc.b $F8, 5, 8, $10, $F8	
0000BE1C 01                         SME_aSMQh_4A:	dc.b 1	
0000BE1D F805 1010 F8               		dc.b $F8, 5, $10, $10, $F8	
0000BE22                            		even
0000BE22                            		even
0000BE22                            Map_GRing:	include	"_maps\Giant Ring.asm"
0000BE22                            ; ---------------------------------------------------------------------------
0000BE22                            ; Sprite mappings - giant ring
0000BE22                            ; ---------------------------------------------------------------------------
0000BE22                            Map_GRing_internal:
0000BE22 0000                       		dc.w byte_9FDA-Map_GRing_internal
0000BE24 0000                       		dc.w byte_A00D-Map_GRing_internal
0000BE26 0000                       		dc.w byte_A036-Map_GRing_internal
0000BE28 0000                       		dc.w byte_A04B-Map_GRing_internal
0000BE2A 0A                         byte_9FDA:	dc.b $A
0000BE2B E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8	; ring front
0000BE30 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000BE35 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000BE3A E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000BE3F F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000BE44 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000BE49 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000BE4E 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000BE53 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000BE58 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000BE5D 08                         byte_A00D:	dc.b 8
0000BE5E E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0 ; ring angle
0000BE63 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000BE68 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000BE6D F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000BE72 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000BE77 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000BE7C 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000BE81 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000BE86 04                         byte_A036:	dc.b 4
0000BE87 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4 ; ring perpendicular
0000BE8C E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000BE91 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000BE96 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000BE9B 08                         byte_A04B:	dc.b 8
0000BE9C E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0 ; ring angle
0000BEA1 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000BEA6 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000BEAB F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000BEB0 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000BEB5 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000BEBA 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000BEBF 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000BEC4                            		even
0000BEC4                            		even
0000BEC4                            Map_Flash:	include	"_maps\Ring Flash.asm"
0000BEC4                            ; ---------------------------------------------------------------------------
0000BEC4                            ; Sprite mappings - flash effect when you collect the giant ring
0000BEC4                            ; ---------------------------------------------------------------------------
0000BEC4                            Map_Flash_internal:
0000BEC4 0000                       		dc.w byte_A084-Map_Flash_internal
0000BEC6 0000                       		dc.w byte_A08F-Map_Flash_internal
0000BEC8 0000                       		dc.w byte_A0A4-Map_Flash_internal
0000BECA 0000                       		dc.w byte_A0B9-Map_Flash_internal
0000BECC 0000                       		dc.w byte_A0CE-Map_Flash_internal
0000BECE 0000                       		dc.w byte_A0E3-Map_Flash_internal
0000BED0 0000                       		dc.w byte_A0F8-Map_Flash_internal
0000BED2 0000                       		dc.w byte_A103-Map_Flash_internal
0000BED4 02                         byte_A084:	dc.b 2
0000BED5 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000BEDA 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000BEDF 04                         byte_A08F:	dc.b 4
0000BEE0 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000BEE5 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000BEEA 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000BEEF 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000BEF4 04                         byte_A0A4:	dc.b 4
0000BEF5 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000BEFA E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000BEFF 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000BF04 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000BF09 04                         byte_A0B9:	dc.b 4
0000BF0A E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000BF0F E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000BF14 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000BF19 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000BF1E 04                         byte_A0CE:	dc.b 4
0000BF1F E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000BF24 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000BF29 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000BF2E 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000BF33 04                         byte_A0E3:	dc.b 4
0000BF34 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000BF39 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000BF3E 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000BF43 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000BF48 02                         byte_A0F8:	dc.b 2
0000BF49 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000BF4E 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000BF53 04                         byte_A103:	dc.b 4
0000BF54 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000BF59 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000BF5E 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000BF63 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000BF68                            		even
0000BF68                            		even
0000BF68                            		include	"_incObj\26 Monitor.asm"
0000BF68                            ; ---------------------------------------------------------------------------
0000BF68                            ; Object 26 - monitors
0000BF68                            ; ---------------------------------------------------------------------------
0000BF68                            
0000BF68                            Monitor:
0000BF68 7000                       		moveq	#0,d0
0000BF6A 1028 0024                  		move.b	obRoutine(a0),d0
0000BF6E 323B 0000                  		move.w	Mon_Index(pc,d0.w),d1
0000BF72 4EFB 1000                  		jmp	Mon_Index(pc,d1.w)
0000BF76                            ; ===========================================================================
0000BF76 0000                       Mon_Index:	dc.w Mon_Main-Mon_Index
0000BF78 0000                       		dc.w Mon_Solid-Mon_Index
0000BF7A 0000                       		dc.w Mon_BreakOpen-Mon_Index
0000BF7C 0000                       		dc.w Mon_Animate-Mon_Index
0000BF7E 0000                       		dc.w Mon_Display-Mon_Index
0000BF80                            ; ===========================================================================
0000BF80                            
0000BF80                            Mon_Main:	; Routine 0
0000BF80 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BF84 117C 000E 0016             		move.b	#$E,obHeight(a0)
0000BF8A 117C 000E 0017             		move.b	#$E,obWidth(a0)
0000BF90 217C 0000 0000 0004        		move.l	#Map_Monitor,obMap(a0)
0000BF98 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000BF9E 117C 0004 0001             		move.b	#4,obRender(a0)
0000BFA4 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000BFAA 117C 000F 0014             		move.b	#$F,obActWid(a0)
0000BFB0 45F8 FC00                  		lea	(v_objstate).w,a2
0000BFB4 7000                       		moveq	#0,d0
0000BFB6 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BFBA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000BFC0 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000BFC6 6700                       		beq.s	@notbroken	; if not, branch
0000BFC8 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Mon_Display" routine
0000BFCE 117C 000B 001A             		move.b	#$B,obFrame(a0)	; use broken monitor frame
0000BFD4 4E75                       		rts	
0000BFD6                            ; ===========================================================================
0000BFD6                            
0000BFD6                            	@notbroken:
0000BFD6 117C 0046 0020             		move.b	#$46,obColType(a0)
0000BFDC 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0)
0000BFE2                            
0000BFE2                            Mon_Solid:	; Routine 2
0000BFE2 1028 0025                  		move.b	ob2ndRout(a0),d0 ; is monitor set to fall?
0000BFE6 6700                       		beq.s	@normal		; if not, branch
0000BFE8 5500                       		subq.b	#2,d0
0000BFEA 6600                       		bne.s	@fall
0000BFEC                            
0000BFEC                            		; 2nd Routine 2
0000BFEC 7200                       		moveq	#0,d1
0000BFEE 1228 0014                  		move.b	obActWid(a0),d1
0000BFF2 0641 000B                  		addi.w	#$B,d1
0000BFF6 6100 CDA0                  		bsr.w	ExitPlatform
0000BFFA 0829 0003 0022             		btst	#3,obStatus(a1) ; is Sonic on top of the monitor?
0000C000 6600 0000                  		bne.w	@ontop		; if yes, branch
0000C004 4228 0025                  		clr.b	ob2ndRout(a0)
0000C008 6000 0000                  		bra.w	Mon_Animate
0000C00C                            ; ===========================================================================
0000C00C                            
0000C00C                            	@ontop:
0000C00C 363C 0010                  		move.w	#$10,d3
0000C010 3428 0008                  		move.w	obX(a0),d2
0000C014 6100 D2E0                  		bsr.w	MvSonicOnPtfm
0000C018 6000 0000                  		bra.w	Mon_Animate
0000C01C                            ; ===========================================================================
0000C01C                            
0000C01C                            @fall:		; 2nd Routine 4
0000C01C 6100 0000                  		bsr.w	ObjectFall
0000C020 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000C026 4A41                       		tst.w	d1
0000C028 6A00 0000                  		bpl.w	Mon_Animate
0000C02C D368 000C                  		add.w	d1,obY(a0)
0000C030 4268 0012                  		clr.w	obVelY(a0)
0000C034 4228 0025                  		clr.b	ob2ndRout(a0)
0000C038 6000 0000                  		bra.w	Mon_Animate
0000C03C                            ; ===========================================================================
0000C03C                            
0000C03C                            @normal:	; 2nd Routine 0
0000C03C 323C 001A                  		move.w	#$1A,d1
0000C040 343C 000F                  		move.w	#$F,d2
0000C044 6100 0000                  		bsr.w	Mon_SolidSides
0000C048 6700 0000                  		beq.w	loc_A25C
0000C04C 4A69 0012                  		tst.w	obVelY(a1)
0000C050 6B00                       		bmi.s	loc_A20A
0000C052 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000C058 6700                       		beq.s	loc_A25C	; if yes, branch
0000C05A 0C29 0000 001C             		cmpi.b	#id_SpinDash,obAnim(a1) ; is Sonic Spindashing?
0000C060 6700                       		beq.s	loc_A25C	; if yes, branch
0000C062 0C29 0000 001C             		cmpi.b	#id_Peelout,obAnim(a1) ; is Sonic Spindashing?
0000C068 6700                       		beq.s	loc_A25C	; if yes, branch
0000C06A                            
0000C06A                            loc_A20A:
0000C06A 4A41                       		tst.w	d1
0000C06C 6A00                       		bpl.s	loc_A220
0000C06E 9769 000C                  		sub.w	d3,obY(a1)
0000C072 6100 CC12                  		bsr.w	loc_74AE
0000C076 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
0000C07C 6000 0000                  		bra.w	Mon_Animate
0000C080                            ; ===========================================================================
0000C080                            
0000C080                            loc_A220:
0000C080 4A40                       		tst.w	d0
0000C082 6700 0000                  		beq.w	loc_A246
0000C086 6B00                       		bmi.s	loc_A230
0000C088 4A69 0010                  		tst.w	obVelX(a1)
0000C08C 6B00                       		bmi.s	loc_A246
0000C08E 6000                       		bra.s	loc_A236
0000C090                            ; ===========================================================================
0000C090                            
0000C090                            loc_A230:
0000C090 4A69 0010                  		tst.w	obVelX(a1)
0000C094 6A00                       		bpl.s	loc_A246
0000C096                            
0000C096                            loc_A236:
0000C096 9169 0008                  		sub.w	d0,obX(a1)
0000C09A 337C 0000 0020             		move.w	#0,obInertia(a1)
0000C0A0 337C 0000 0010             		move.w	#0,obVelX(a1)
0000C0A6                            
0000C0A6                            loc_A246:
0000C0A6 0829 0001 0022             		btst	#1,obStatus(a1)
0000C0AC 6600                       		bne.s	loc_A26A
0000C0AE 08E9 0005 0022             		bset	#5,obStatus(a1)
0000C0B4 08E8 0005 0022             		bset	#5,obStatus(a0)
0000C0BA 6000                       		bra.s	Mon_Animate
0000C0BC                            ; ===========================================================================
0000C0BC                            
0000C0BC                            loc_A25C:
0000C0BC 0828 0005 0022             		btst	#5,obStatus(a0)
0000C0C2 6700                       		beq.s	Mon_Animate
0000C0C4 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
0000C0CA 6700                       		beq.s	loc_A26A	; if so, branch
0000C0CC 337C 0001 001C             		move.w	#1,obAnim(a1)	; clear obAnim and set obNextAni to 1, putting Sonic in his walking animation
0000C0D2                            
0000C0D2                            loc_A26A:
0000C0D2 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000C0D8 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000C0DE                            
0000C0DE                            Mon_Animate:	; Routine 6
0000C0DE 43F9 0000 0000             		lea	(Ani_Monitor).l,a1
0000C0E4 6100 0000                  		bsr.w	AnimateSprite
0000C0E8                            
0000C0E8                            Mon_Display:	; Routine 8
0000C0E8 6100 0000                  		bsr.w	DisplaySprite
0000C10A 4E75                       		rts	
0000C10C                            ; ===========================================================================
0000C10C                            
0000C10C                            Mon_BreakOpen:	; Routine 4
0000C10C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C110 117C 0000 0020             		move.b	#0,obColType(a0)
0000C116 6100 0000                  		bsr.w	FindFreeObj
0000C11A 6600                       		bne.s	Mon_Explode
0000C11C 12BC 0000                  		move.b	#id_PowerUp,0(a1) ; load monitor contents object
0000C120 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C126 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C12C 1368 001C 001C             		move.b	obAnim(a0),obAnim(a1)
0000C132                            
0000C132                            Mon_Explode:
0000C132 6100 0000                  		bsr.w	FindFreeObj
0000C136 6600                       		bne.s	@fail
0000C138 12BC 0000                  		move.b	#id_ExplosionItem,0(a1) ; load explosion object
0000C13C 5429 0024                  		addq.b	#2,obRoutine(a1) ; don't create an animal
0000C140 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C146 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C14C                            
0000C14C                            	@fail:
0000C14C 45F8 FC00                  		lea	(v_objstate).w,a2
0000C150 7000                       		moveq	#0,d0
0000C152 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C156 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C15C 117C 0009 001C             		move.b	#9,obAnim(a0)	; set monitor type to broken
0000C162 6000 0000                  		bra.w	DisplaySprite
0000C162 6000 0000                  		bra.w	DisplaySprite
0000C166                            		include	"_incObj\2E Monitor Content Power-Up.asm"
0000C166                            ; ---------------------------------------------------------------------------
0000C166                            ; Object 2E - contents of monitors
0000C166                            ; ---------------------------------------------------------------------------
0000C166                            
0000C166                            PowerUp:
0000C166 7000                       		moveq	#0,d0
0000C168 1028 0024                  		move.b	obRoutine(a0),d0
0000C16C 323B 0000                  		move.w	Pow_Index(pc,d0.w),d1
0000C170 4EBB 1000                  		jsr	Pow_Index(pc,d1.w)
0000C174 6000 0000                  		bra.w	DisplaySprite
0000C178                            ; ===========================================================================
0000C178 0000                       Pow_Index:	dc.w Pow_Main-Pow_Index
0000C17A 0000                       		dc.w Pow_Move-Pow_Index
0000C17C 0000                       		dc.w Pow_Delete-Pow_Index
0000C17E                            ; ===========================================================================
0000C17E                            
0000C17E                            Pow_Main:	; Routine 0
0000C17E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C182 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000C188 117C 0024 0001             		move.b	#$24,obRender(a0)
0000C18E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000C194 117C 0008 0014             		move.b	#8,obActWid(a0)
0000C19A 317C FD00 0012             		move.w	#-$300,obVelY(a0)
0000C1A0 7000                       		moveq	#0,d0
0000C1A2 1028 001C                  		move.b	obAnim(a0),d0	; get subtype
0000C1A6 5400                       		addq.b	#2,d0
0000C1A8 1140 001A                  		move.b	d0,obFrame(a0)	; use correct frame
0000C1AC 227C 0000 0000             		movea.l	#Map_Monitor,a1
0000C1B2 D000                       		add.b	d0,d0
0000C1B4 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000C1B8 5249                       		addq.w	#1,a1
0000C1BA 2149 0004                  		move.l	a1,obMap(a0)
0000C1BE                            
0000C1BE                            Pow_Move:	; Routine 2
0000C1BE 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000C1C2 6A00 0000                  		bpl.w	Pow_Checks	; if not, branch
0000C1C6 6100 0000                  		bsr.w	SpeedToPos
0000C1CA 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000C1D0 4E75                       		rts	
0000C1D2                            ; ===========================================================================
0000C1D2                            
0000C1D2                            Pow_Checks:
0000C1D2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C1D6 317C 001D 001E             		move.w	#29,obTimeFrame(a0) ; display icon for half a second
0000C1DC                            
0000C1DC                            Pow_ChkEggman:
0000C1DC 1028 001C                  		move.b	obAnim(a0),d0
0000C1E0 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000C1E4 6600                       		bne.s	Pow_ChkSonic
0000C1E6                            		
0000C1E6 4EF9 0000 0000             		jmp	Spik_Hurt
0000C1EC                            		
0000C1EC 4E75                       		rts
0000C1EE                            ; ===========================================================================
0000C1EE                            
0000C1EE                            Pow_ChkSonic:
0000C1EE 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000C1F2 6600                       		bne.s	Pow_ChkShoes
0000C1F4                            
0000C1F4                            	ExtraLife:
0000C1F4 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000C1F8 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000C206                            
0000C206                            ; ===========================================================================
0000C206                            
0000C206                            Pow_ChkShoes:
0000C206 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000C20A 6600                       		bne.s	Pow_ChkShield
0000C20C 0C38 0001 FE19             		cmpi.b #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
0000C212 6700 0000                  		beq 	Pow_NoMus
0000C216 11FC 0001 FE2E             		move.b	#1,(v_shoes).w	; speed up the BG music
0000C21C 31FC 04B0 D034             		move.w	#$4B0,(v_player+$34).w	; time limit for the power-up
0000C222 31FC 0C00 F760             		move.w	#$C00,(v_sonspeedmax).w ; change Sonic's top speed
0000C228 31FC 0018 F762             		move.w	#$18,(v_sonspeedacc).w	; change Sonic's acceleration
0000C22E 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w	; change Sonic's deceleration
0000C234 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C238 6600                       		bne.s	Pow_NoMus	; if yes, branch
0000C23A 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C240 6300                       			bls.s	Pow_NoMus
0000C24C                            ; ===========================================================================
0000C24C                            
0000C24C                            Pow_NoMus:
0000C24C 4E75                       		rts	
0000C24E                            ; ===========================================================================
0000C24E                            
0000C24E                            Pow_ChkShield:
0000C24E 0C00 0004                          cmpi.b    #4,d0        ; does monitor contain a shield?
0000C252 6600                               bne.s    Pow_ChkInvinc
0000C254                            
0000C254 11FC 0001 FE2C                     move.b    #1,(v_shield).w    ; give Sonic a shield
0000C25A 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove red shield
0000C260 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C266 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C26C 11FC 0000 D180                     move.b    #id_ShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C272 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C276 303C 0000                          move.w    #sfx_Shield,d0
0000C27A 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000C280                            ; ===========================================================================
0000C280                            
0000C280                            Pow_ChkInvinc:
0000C280 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000C284 6600                       		bne.s	Pow_ChkRings
0000C286 0C38 0001 FE19             		cmpi.b #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
0000C28C 6700 0000                  		beq 	Pow_NoMusic
0000C290 11FC 0001 FE2D             		move.b	#1,(v_invinc).w	; make Sonic invincible
0000C296 31FC 0560 D032             		move.w	#$560,(v_player+$32).w ; time limit for the power-up
0000C29C 11FC 0000 D200             		move.b	#id_InvStars,(v_objspace+$200).w ; load stars object ($3801)
0000C2A2 11FC 0001 D21C             		move.b	#1,(v_objspace+$200+obAnim).w
0000C2A8 11FC 0000 D240             		move.b	#id_InvStars,(v_objspace+$240).w ; load stars object ($3802)
0000C2AE 11FC 0002 D25C             		move.b	#2,(v_objspace+$240+obAnim).w
0000C2B4 11FC 0000 D280             		move.b	#id_InvStars,(v_objspace+$280).w ; load stars object ($3803)
0000C2BA 11FC 0003 D29C             		move.b	#3,(v_objspace+$280+obAnim).w
0000C2C0 11FC 0000 D2C0             		move.b	#id_InvStars,(v_objspace+$2C0).w ; load stars object ($3804)
0000C2C6 11FC 0004 D2DC             		move.b	#4,(v_objspace+$2C0+obAnim).w
0000C2CC 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C2D0 6600                       		bne.s	Pow_NoMusic	; if yes, branch
0000C2D2 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C2D8 6300                       			bls.s	Pow_NoMusic
0000C2E4                            ; ===========================================================================
0000C2E4                            
0000C2E4                            Pow_NoMusic:
0000C2E4 4E75                       		rts	
0000C2E6                            ; ===========================================================================
0000C2E6                            
0000C2E6                            Pow_ChkRings:
0000C2E6 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000C2EA 6600                       		bne.s	Pow_ChkS
0000C2EC                            
0000C2EC 0678 000A FE20             		addi.w	#10,(v_rings).w	; add 10 rings to the number of rings you have
0000C2F2 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the ring counter
0000C2F8 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C2FE 6500                       		bcs.s	Pow_RingSound
0000C300 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C306 6700 FEEC                  		beq.w	ExtraLife
0000C30A 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C310 6500                       		bcs.s	Pow_RingSound
0000C312 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C318 6700 FEDA                  		beq.w	ExtraLife
0000C31C                            
0000C31C                            	Pow_RingSound:
0000C326                            ; ===========================================================================
0000C326                            
0000C326                            Pow_ChkS:
0000C326 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'?
0000C32A 6600                       		bne.s	Pow_ChkSRing
0000C32C                            		
0000C32C 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0000C332 6700                       		beq.s	PowS2	; if yes, branch
0000C334 0404 003B                  		subi.b	#$3B,d4
0000C338 7000                       		moveq	#0,d0
0000C33A 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000C340 11FC 0001 F5C3             		move.b	#1,(f_emeraldm).w
0000C346 6000                       		bra.s	PowSPlay
0000C348                            
0000C348                            PowS2:
0000C348 0678 0032 FE20             		addi.w	#50,(v_rings).w	; add 50 rings to the number of rings you have
0000C34E 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000C354 0038 0005 FE1D             		ori.b	#5,(f_ringcount).w ; update the ring counter
0000C35A 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C360 6500                       		bcs.s	PowSPlay
0000C362 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C368 6700 FE8A                  		beq.w	ExtraLife
0000C36C 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C372 6500                       		bcs.s	PowSPlay
0000C374 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C37A 6700 FE78                  		beq.w	ExtraLife	
0000C37E                            
0000C37E                            PowSPlay:
0000C388                            
0000C388                            		
0000C388                            
0000C388                            
0000C388                            Pow_ChkSRing:
0000C388 0C00 0008                  		cmpi.b	#8,d0		; does monitor contain 'S'?
0000C38C 6600                       		bne.s	Pow_ChkRShield
0000C38E                            
0000C38E                            		
0000C38E 0678 0014 FE20             		addi.w	#20,(v_rings).w	; add 20 rings to the number of rings you have
0000C394 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C39A 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C3A0 6500                       		bcs.s	Pow_ChkSRingSound
0000C3A2 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C3A8 6700 FE4A                  		beq.w	ExtraLife
0000C3AC 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C3B2 6500                       		bcs.s	Pow_ChkSRingSound
0000C3B4 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C3BA 6700 FE38                  		beq.w	ExtraLife	
0000C3BE                            
0000C3BE                            Pow_ChkSRingSound:
0000C3C8                            
0000C3C8                            
0000C3C8                            Pow_ChkRShield:
0000C3C8 0C00 000A                          cmpi.b    #10,d0        ; does monitor contain a shield?
0000C3CC 6600                               bne.s    Pow_ChkGShield
0000C3CE                            
0000C3CE 11FC 0002 F5C8                     move.b    #2,(v_rshield).w    ; give Sonic a shield
0000C3D4 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove red shield
0000C3DA 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C3E0 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C3E6 11FC 0000 D180                     move.b    #id_RShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C3EC 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C3F0 303C 0000                          move.w    #sfx_FireShield,d0
0000C3F4 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000C3FA                            
0000C3FA                            Pow_ChkGShield:
0000C3FA 0C00 000B                          cmpi.b    #11,d0        ; does monitor contain a shield?
0000C3FE 6600                               bne.s    Pow_ChkSpShield
0000C400                            
0000C400 11FC 0001 F5C9                     move.b    #1,(v_gshield).w    ; give Sonic a shield
0000C406 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove red shield
0000C40C 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove g shield
0000C412 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C418 11FC 0000 D180                     move.b    #id_GShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C41E 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C422 303C 0000                          move.w    #sfx_LightningShield,d0
0000C426 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000C42C                            
0000C42C                            Pow_ChkSpShield:
0000C42C 0C00 000C                         cmpi.b    #12,d0        ; does monitor contain a shield?
0000C430 66FA                               bne.s    Pow_ChkSpShield
0000C432                            
0000C432 11FC 0001 F5CA                     move.b    #1,(v_spshield).w    ; give Sonic a shield
0000C438 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove red shield
0000C43E 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove g shield
0000C444 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove s shield
0000C44A 11FC 0000 D180                     move.b    #id_SpShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C450 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C454 303C 0000                          move.w    #sfx_SpikesMove,d0
0000C458 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000C45E                            
0000C45E                            Pow_ChkEnd:
0000C45E 4E75                       		rts
0000C460                            ; ===========================================================================
0000C460                            
0000C460                            Pow_Delete:	; Routine 4
0000C460 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0000C464 6B00 0000                  		bmi.w	DeleteObject	; delete after half a second
0000C468 4E75                       		rts	
0000C468 4E75                       		rts	
0000C46A                            		include	"_incObj\26 Monitor (SolidSides subroutine).asm"
0000C46A                            ; ---------------------------------------------------------------------------
0000C46A                            ; Subroutine to	make the sides of a monitor solid
0000C46A                            ; ---------------------------------------------------------------------------
0000C46A                            
0000C46A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C46A                            
0000C46A                            
0000C46A                            Mon_SolidSides:
0000C46A 43F8 D000                  		lea	(v_player).w,a1
0000C46E 3029 0008                  		move.w	obX(a1),d0
0000C472 9068 0008                  		sub.w	obX(a0),d0
0000C476 D041                       		add.w	d1,d0
0000C478 6B00                       		bmi.s	loc_A4E6
0000C47A 3601                       		move.w	d1,d3
0000C47C D643                       		add.w	d3,d3
0000C47E B043                       		cmp.w	d3,d0
0000C480 6200                       		bhi.s	loc_A4E6
0000C482 1629 0016                  		move.b	obHeight(a1),d3
0000C486 4883                       		ext.w	d3
0000C488 D443                       		add.w	d3,d2
0000C48A 3629 000C                  		move.w	obY(a1),d3
0000C48E 9668 000C                  		sub.w	obY(a0),d3
0000C492 D642                       		add.w	d2,d3
0000C494 6B00                       		bmi.s	loc_A4E6
0000C496 D442                       		add.w	d2,d2
0000C498 B642                       		cmp.w	d2,d3
0000C49A 6400                       		bcc.s	loc_A4E6
0000C49C 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000C4A0 6B00                       		bmi.s	loc_A4E6
0000C4A2 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000C4A8 6400                       		bcc.s	loc_A4E6
0000C4AA 4A78 FE08                  		tst.w	(v_debuguse).w
0000C4AE 6600                       		bne.s	loc_A4E6
0000C4B0 B240                       		cmp.w	d0,d1
0000C4B2 6400                       		bcc.s	loc_A4DC
0000C4B4 D241                       		add.w	d1,d1
0000C4B6 9041                       		sub.w	d1,d0
0000C4B8                            
0000C4B8                            loc_A4DC:
0000C4B8 0C43 0010                  		cmpi.w	#$10,d3
0000C4BC 6500                       		bcs.s	loc_A4EA
0000C4BE                            
0000C4BE                            loc_A4E2:
0000C4BE 7201                       		moveq	#1,d1
0000C4C0 4E75                       		rts	
0000C4C2                            ; ===========================================================================
0000C4C2                            
0000C4C2                            loc_A4E6:
0000C4C2 7200                       		moveq	#0,d1
0000C4C4 4E75                       		rts	
0000C4C6                            ; ===========================================================================
0000C4C6                            
0000C4C6                            loc_A4EA:
0000C4C6 7200                       		moveq	#0,d1
0000C4C8 1228 0014                  		move.b	obActWid(a0),d1
0000C4CC 5841                       		addq.w	#4,d1
0000C4CE 3401                       		move.w	d1,d2
0000C4D0 D442                       		add.w	d2,d2
0000C4D2 D269 0008                  		add.w	obX(a1),d1
0000C4D6 9268 0008                  		sub.w	obX(a0),d1
0000C4DA 6BE2                       		bmi.s	loc_A4E2
0000C4DC B242                       		cmp.w	d2,d1
0000C4DE 64DE                       		bcc.s	loc_A4E2
0000C4E0 72FF                       		moveq	#-1,d1
0000C4E2 4E75                       		rts	
0000C4E4                            ; End of function Obj26_SolidSides
0000C4E4                            ; End of function Obj26_SolidSides
0000C4E4                            		include	"_anim\Monitor.asm"
0000C4E4                            ; ---------------------------------------------------------------------------
0000C4E4                            ; Animation script - monitors
0000C4E4                            ; ---------------------------------------------------------------------------
0000C4E4 0000 0000 0000             Ani_Monitor:	dc.w @static-Ani_Monitor, @eggman-Ani_Monitor, @sonic-Ani_Monitor
0000C4EA 0000 0000 0000             		dc.w @shoes-Ani_Monitor, @shield-Ani_Monitor, @invincible-Ani_Monitor
0000C4F0 0000 0000 0000             		dc.w @rings-Ani_Monitor, @s-Ani_Monitor, @goggles-Ani_Monitor
0000C4F6 0000 0000 0000             		dc.w @breaking-Ani_Monitor, @rshield-Ani_Monitor, @yshield-Ani_Monitor
0000C4FC 0000                       		dc.w @spshield-Ani_Monitor
0000C4FE                            		
0000C4FE 0100 0102 FF               @static:	dc.b 1,	0, 1, 2, afEnd
0000C504 00                         		even
0000C504 0100 0303 0103 0302 0303+  @eggman:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, afEnd
0000C510 00                         		even
0000C510 0100 0404 0104 0402 0404+  @sonic:		dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, afEnd
0000C51C 00                         		even
0000C51C 0100 0505 0105 0502 0505+  @shoes:		dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, afEnd
0000C528 00                         		even
0000C528 0100 0606 0106 0602 0606+  @shield:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, afEnd
0000C534 00                         		even
0000C534 0100 0707 0107 0702 0707+  @invincible:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, afEnd
0000C540 00                         		even
0000C540 0100 0808 0108 0802 0808+  @rings:		dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, afEnd
0000C54C 00                         		even
0000C54C 0100 0909 0109 0902 0909+  @s:		dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, afEnd
0000C558 00                         		even
0000C558 0100 0A0A 010A 0A02 0A0A+  @goggles:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, afEnd
0000C564 00                         		even
0000C564 0200 0102 0BFE 01          @breaking:	dc.b 2,	0, 1, 2, $B, afBack, 1
0000C56C 00                         		even
0000C56C 0100 0C0C 010C 0C02 0C0C+  @rshield:	dc.b 1,	0, $C, $C, 1, $C, $C, 2, $C, $C, afEnd
0000C578 00                         		even
0000C578 0100 0D0D 010D 0D02 0D0D+  @yshield:	dc.b 1,	0, $D, $D, 1, $D, $D, 2, $D, $D, afEnd
0000C584 00                         		even
0000C584 0100 0E0E 010E 0E02 0E0E+  @spshield:	dc.b 1,	0, $E, $E, 1, $E, $E, 2, $E, $E, afEnd
0000C590 00                         		even
0000C590 00                         		even
0000C590                            Map_Monitor:	include	"_maps\Monitor.asm"
0000C590                            ; --------------------------------------------------------------------------------
0000C590                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C590                            ; --------------------------------------------------------------------------------
0000C590                            
0000C590                            SME_0IgQe:	
0000C590 0000 0000                  		dc.w SME_0IgQe_1E-SME_0IgQe, SME_0IgQe_24-SME_0IgQe	
0000C594 0000 0000                  		dc.w SME_0IgQe_2F-SME_0IgQe, SME_0IgQe_3A-SME_0IgQe	
0000C598 0000 0000                  		dc.w SME_0IgQe_45-SME_0IgQe, SME_0IgQe_50-SME_0IgQe	
0000C59C 0000 0000                  		dc.w SME_0IgQe_5B-SME_0IgQe, SME_0IgQe_66-SME_0IgQe	
0000C5A0 0000 0000                  		dc.w SME_0IgQe_71-SME_0IgQe, SME_0IgQe_7C-SME_0IgQe	
0000C5A4 0000 0000                  		dc.w SME_0IgQe_87-SME_0IgQe, SME_0IgQe_92-SME_0IgQe	
0000C5A8 0000 0000                  		dc.w SME_0IgQe_AC-SME_0IgQe, SME_0IgQe_B7-SME_0IgQe	
0000C5AC 0000                       		dc.w SME_0IgQe_C2-SME_0IgQe	
0000C5AE 01                         SME_0IgQe_1E:	dc.b 1	
0000C5AF F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5B4 02                         SME_0IgQe_24:	dc.b 2	
0000C5B5 F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000C5BA F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5BF 02                         SME_0IgQe_2F:	dc.b 2	
0000C5C0 F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000C5C5 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5CA 02                         SME_0IgQe_3A:	dc.b 2	
0000C5CB F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000C5D0 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5D5 02                         SME_0IgQe_45:	dc.b 2	
0000C5D6 F505 0154 F8               		dc.b $F5, 5, 1, $54, $F8	
0000C5DB F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5E0 02                         SME_0IgQe_50:	dc.b 2	
0000C5E1 F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000C5E6 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5EB 02                         SME_0IgQe_5B:	dc.b 2	
0000C5EC F505 2028 F8               		dc.b $F5, 5, $20, $28, $F8	
0000C5F1 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5F6 02                         SME_0IgQe_66:	dc.b 2	
0000C5F7 F505 002C F8               		dc.b $F5, 5, 0, $2C, $F8	
0000C5FC F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C601 02                         SME_0IgQe_71:	dc.b 2	
0000C602 F505 2030 F8               		dc.b $F5, 5, $20, $30, $F8	
0000C607 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C60C 02                         SME_0IgQe_7C:	dc.b 2	
0000C60D F505 0034 F8               		dc.b $F5, 5, 0, $34, $F8	
0000C612 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C617 02                         SME_0IgQe_87:	dc.b 2	
0000C618 F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000C61D F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C622 05                         SME_0IgQe_92:	dc.b 5	
0000C623 010C 0038 F0               		dc.b 1, $C, 0, $38, $F0	
0000C628 0900 0003 F0               		dc.b 9, 0, 0, 3, $F0	
0000C62D 0900 0007 F8               		dc.b 9, 0, 0, 7, $F8	
0000C632 0900 000B 00               		dc.b 9, 0, 0, $B, 0	
0000C637 0900 000F 08               		dc.b 9, 0, 0, $F, 8	
0000C63C 02                         SME_0IgQe_AC:	dc.b 2	
0000C63D F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000C642 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C647 02                         SME_0IgQe_B7:	dc.b 2	
0000C648 F505 201C F8               		dc.b $F5, 5, $20, $1C, $F8	
0000C64D F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C652 02                         SME_0IgQe_C2:	dc.b 2	
0000C653 F505 003C F8               		dc.b $F5, 5, 0, $3C, $F8	
0000C658 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C65E 00                         		even
0000C65E 00                         		even
0000C65E                            
0000C65E                            		include	"_incObj\0E Title Screen Sonic.asm"
0000C65E                            ; ---------------------------------------------------------------------------
0000C65E                            ; Object 0E - Sonic on the title screen
0000C65E                            ; ---------------------------------------------------------------------------
0000C65E                            
0000C65E                            TitleSonic:
0000C65E 7000                       		moveq	#0,d0
0000C660 1028 0024                  		move.b	obRoutine(a0),d0
0000C664 323B 0000                  		move.w	TSon_Index(pc,d0.w),d1
0000C668 4EFB 1000                  		jmp	TSon_Index(pc,d1.w)
0000C66C                            ; ===========================================================================
0000C66C 0000                       TSon_Index:	dc.w TSon_Main-TSon_Index
0000C66E 0000                       		dc.w TSon_Delay-TSon_Index
0000C670 0000                       		dc.w TSon_Move-TSon_Index
0000C672 0000                       		dc.w TSon_Animate-TSon_Index
0000C674                            ; ===========================================================================
0000C674                            
0000C674                            TSon_Main:	; Routine 0
0000C674 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C678 317C 00F0 0008             		move.w	#$F0,obX(a0)
0000C67E 317C 00DE 000A             		move.w	#$DE,obScreenY(a0) ; position is fixed to screen
0000C684 217C 0000 0000 0004        		move.l	#Map_TSon,obMap(a0)
0000C68C 317C 2348 0002             		move.w	#$2348,obGfx(a0)
0000C692 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000C698 117C 001D 001F             		move.b	#29,obDelayAni(a0) ; set time delay to 0.5 seconds
0000C69E 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C6A4 6100 0000                  		bsr.w	AnimateSprite
0000C6A8                            
0000C6A8                            TSon_Delay:	;Routine 2
0000C6A8 5328 001F                  		subq.b	#1,obDelayAni(a0) ; subtract 1 from time delay
0000C6AC 6A00                       		bpl.s	@wait		; if time remains, branch
0000C6AE 5428 0024                  		addq.b	#2,obRoutine(a0) ; go to next routine
0000C6B2 6000 0000                  		bra.w	DisplaySprite
0000C6B6                            
0000C6B6                            	@wait:
0000C6B6 4E75                       		rts	
0000C6B8                            ; ===========================================================================
0000C6B8                            
0000C6B8                            TSon_Move:	; Routine 4
0000C6B8 5168 000A                  		subq.w	#8,obScreenY(a0) ; move Sonic up
0000C6BC 0C68 0096 000A             		cmpi.w	#$96,obScreenY(a0) ; has Sonic reached final position?
0000C6C2 6600                       		bne.s	@display	; if not, branch
0000C6C4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C6C8                            
0000C6C8                            	@display:
0000C6C8 6000 0000                  		bra.w	DisplaySprite
0000C6CC                            
0000C6CC 4E75                       		rts	
0000C6CE                            ; ===========================================================================
0000C6CE                            
0000C6CE                            TSon_Animate:	; Routine 6
0000C6CE 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C6D4 6100 0000                  		bsr.w	AnimateSprite
0000C6D8 6000 0000                  		bra.w	DisplaySprite
0000C6DC                            
0000C6DC 4E75                       		rts	
0000C6DC 4E75                       		rts	
0000C6DE                            		include	"_incObj\0F Press Start and TM.asm"
0000C6DE                            ; ---------------------------------------------------------------------------
0000C6DE                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000C6DE                            ; ---------------------------------------------------------------------------
0000C6DE                            
0000C6DE                            PSBTM:
0000C6DE 7000                       		moveq	#0,d0
0000C6E0 1028 0024                  		move.b	obRoutine(a0),d0
0000C6E4 323B 0000                  		move.w	PSB_Index(pc,d0.w),d1
0000C6E8 4EBB 1000                  		jsr	PSB_Index(pc,d1.w)
0000C6EC 6000 0000                  		bra.w	DisplaySprite
0000C6F0                            ; ===========================================================================
0000C6F0 0000                       PSB_Index:	dc.w PSB_Main-PSB_Index
0000C6F2 0000                       		dc.w PSB_PrsStart-PSB_Index
0000C6F4 0000                       		dc.w PSB_Exit-PSB_Index
0000C6F6 0000                       		dc.w PSB_Menu-PSB_Index		
0000C6F8                            ; ===========================================================================
0000C6F8                            
0000C6F8                            PSB_Main:	; Routine 0
0000C6F8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C6FC 317C 00D0 0008             		move.w	#$D0,obX(a0)
0000C702 317C 0130 000A             		move.w	#$130,obScreenY(a0)
0000C708 217C 0000 0000 0004        		move.l	#Map_PSB,obMap(a0)
0000C710 317C 0200 0002             		move.w	#$200,obGfx(a0)
0000C716 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)	; is object "PRESS START"?
0000C71C 6500                       		bcs.s	PSB_PrsStart	; if yes, branch
0000C71E                            
0000C71E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C722 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is the object	"TM"?
0000C728 6600                       		bne.s	PSB_Exit	; if not, branch
0000C72A                            
0000C72A 317C 2510 0002             		move.w	#$2510,obGfx(a0) ; "TM" specific code
0000C730 317C 0170 0008             		move.w	#$170,obX(a0)
0000C736 317C 00F8 000A             		move.w	#$F8,obScreenY(a0)
0000C73C                            
0000C73C                            PSB_Exit:	; Routine 4
0000C73C 4E75                       		rts	
0000C73E                            ; ===========================================================================
0000C73E                            
0000C73E                            PSB_PrsStart:	; Routine 2
0000C73E 0838 0007 F605             		btst   #7,(v_jpadpress1).w   ; check if Start is pressed
0000C744 6700                       		beq.s   PSB_PrsStart_Show   ; if not, branch
0000C746 5828 0024                  		addq.b   #4,obRoutine(a0)      ; go to Menu in next frame
0000C74A 303C 00A1                  		move.w   #$A1,d0 
0000C74E 4EB8 12A0                  		jsr   PlaySound_Special
0000C752 317C 056F 0002             		move.w   #$56F,obGfx(a0)
0000C758 217C 0000 0000 0004        		move.l   #Map_TitleMenu,obMap(a0) 
0000C760 317C 00F8 0008             		move.w	#$F8,obX(a0)
0000C766 317C 0150 000A             		move.w	#$150,obScreenY(a0)
0000C76C 4E75                       		rts
0000C76E                            
0000C76E                            PSB_PrsStart_Show:
0000C76E 43F9 0000 0000             		lea	(Ani_PSBTM).l,a1
0000C774 6000 0000                  		bra.w	AnimateSprite	; "PRESS START" is animated
0000C778                            
0000C778                            PSB_Menu:
0000C778 7400                             moveq   #0,d2
0000C77A 1438 FFB0                        move.b   (Title_screen_option).w,d2
0000C77E 1038 F605                        move.b   (v_jpadpress1).w,d0
0000C782 0800 0000                        btst   #0,d0
0000C786 6700                             beq.s   MAIN2
0000C788 5302                             subq.b   #1,d2
0000C78A 6400                             bcc.s   MAIN2
0000C78C 143C 0001                        move.b   #1,d2
0000C790                            
0000C790                            MAIN2:
0000C790 0800 0001                        btst   #1,d0
0000C794 6700                             beq.s   MAIN3
0000C796 5202                             addq.b   #1,d2
0000C798 0C02 0002                        cmpi.b   #2,d2
0000C79C 6500                             blo.s   MAIN3
0000C79E 7400                             moveq   #0,d2
0000C7A0                            
0000C7A0                            MAIN3:
0000C7A0 1142 001A                        move.b   d2,$1A(a0)
0000C7A4 11C2 FFB0                        move.b   d2,(Title_screen_option).w
0000C7A8 0200 0003                        andi.b   #3,d0
0000C7AC 6700                             beq.s   MAIN4   
0000C7AE 303C 00CD                        move.w   #$CD,d0 ; selection blip sound
0000C7B2 4EB8 12A0                        jsr   PlaySound_Special
0000C7B6                            
0000C7B6                            MAIN4:
0000C7B6 0838 0007 F605                   btst   #7,(v_jpadpress1).w   ; check if Start is pressed
0000C7BC 6700                             beq.s   MENURTS   ; if not, branch
0000C7BE 4EF9 0000 0000                   jmp   DeleteObject   ; if yes, delete the Title Screen Menu
0000C7C4                            
0000C7C4                            MENURTS:
0000C7C4 4E75                             rts															 
0000C7C6                            ; ===========================================================================
0000C7C6                            
0000C7C6                            
0000C7C6                            Map_TitleMenu:
0000C7C6                            		include "_maps\Title Screen Menu.asm"		
0000C7C6                            ; --------------------------------------------------------------------------------
0000C7C6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C7C6                            ; --------------------------------------------------------------------------------
0000C7C6                            
0000C7C6                            SME_g2Qfx:	
0000C7C6 0000 0000                  		dc.w SME_g2Qfx_6-SME_g2Qfx, SME_g2Qfx_6B-SME_g2Qfx	
0000C7CA 10                         SME_g2Qfx_6:	dc.b $10	
0000C7CB E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C7D0 E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C7D5 E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C7DA E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C7DF E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C7E4 E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C7E9 E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C7EE E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C7F3 F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C7F8 F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C7FD F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C802 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000C807 F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000C80C F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000C811 F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000C816 E004 0028 E0               		dc.b $E0, 4, 0, $28, $E0	
0000C81B 10                         SME_g2Qfx_6B:	dc.b $10	
0000C81C E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C821 E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C826 E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C82B E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C830 E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C835 E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C83A E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C83F E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C844 F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C849 F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C84E F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C853 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000C858 F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000C85D F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000C862 F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000C867 F004 0028 E0               		dc.b $F0, 4, 0, $28, $E0
0000C86C                            		even
0000C86C                            		even
0000C86C                            		even
0000C86C                            
0000C86C                            		include	"_anim\Title Screen Sonic.asm"
0000C86C                            ; ---------------------------------------------------------------------------
0000C86C                            ; Animation script - Sonic on the title screen
0000C86C                            ; ---------------------------------------------------------------------------
0000C86C 0000                       Ani_TSon:	dc.w byte_A706-Ani_TSon
0000C86E 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	afBack, 2
0000C87A 00                         		even
0000C87A 00                         		even
0000C87A                            		include	"_anim\Press Start and TM.asm"
0000C87A                            ; ---------------------------------------------------------------------------
0000C87A                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000C87A                            ; ---------------------------------------------------------------------------
0000C87A 0000                       Ani_PSBTM:	dc.w @flash-Ani_PSBTM
0000C87C 1F00 01FF                  @flash:		dc.b $1F, 0, 1,	afEnd
0000C880                            		even
0000C880                            		even
0000C880                            
0000C880                            		include	"_incObj\sub AnimateSprite.asm"
0000C880                            ; ---------------------------------------------------------------------------
0000C880                            ; Subroutine to	animate	a sprite using an animation script
0000C880                            ; ---------------------------------------------------------------------------
0000C880                            
0000C880                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C880                            
0000C880                            
0000C880                            AnimateSprite:
0000C880 7000                       		moveq	#0,d0
0000C882 1028 001C                  		move.b	obAnim(a0),d0	; move animation number	to d0
0000C886 B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
0000C88A 6700                       		beq.s	Anim_Run	; if not, branch
0000C88C                            
0000C88C 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
0000C890 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C896 117C 0000 001E             		move.b	#0,obTimeFrame(a0) ; reset frame duration
0000C89C                            
0000C89C                            Anim_Run:
0000C89C 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000C8A0 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000C8A2 D040                       		add.w	d0,d0
0000C8A4 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000C8A8 1151 001E                  		move.b	(a1),obTimeFrame(a0) ; load frame duration
0000C8AC 7200                       		moveq	#0,d1
0000C8AE 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0000C8B2 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000C8B6 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000C8B8                            
0000C8B8                            Anim_Next:
0000C8B8 1200                       		move.b	d0,d1
0000C8BA 0200 001F                  		andi.b	#$1F,d0
0000C8BE 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0000C8C2 1028 0022                  		move.b	obStatus(a0),d0
0000C8C6 E719                       		rol.b	#3,d1
0000C8C8 B101                       		eor.b	d0,d1
0000C8CA 0201 0003                  		andi.b	#3,d1
0000C8CE 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0000C8D4 8328 0001                  		or.b	d1,obRender(a0)
0000C8D8 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
0000C8DC                            
0000C8DC                            Anim_Wait:
0000C8DC 4E75                       		rts	
0000C8DE                            ; ===========================================================================
0000C8DE                            
0000C8DE                            Anim_End_FF:
0000C8DE 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000C8E0 6600                       		bne.s	Anim_End_FE	; if not, branch
0000C8E2 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; restart the animation
0000C8E8 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000C8EC 60CA                       		bra.s	Anim_Next
0000C8EE                            ; ===========================================================================
0000C8EE                            
0000C8EE                            Anim_End_FE:
0000C8EE 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000C8F0 6600                       		bne.s	Anim_End_FD	; if not, branch
0000C8F2 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000C8F6 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0000C8FA 9200                       		sub.b	d0,d1
0000C8FC 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000C900 60B6                       		bra.s	Anim_Next
0000C902                            ; ===========================================================================
0000C902                            
0000C902                            Anim_End_FD:
0000C902 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000C904 6600                       		bne.s	Anim_End_FC	; if not, branch
0000C906 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
0000C90C                            
0000C90C                            Anim_End_FC:
0000C90C 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000C90E 6600                       		bne.s	Anim_End_FB	; if not, branch
0000C910 5428 0024                  		addq.b	#2,obRoutine(a0) ; jump to next routine
0000C914                            
0000C914                            Anim_End_FB:
0000C914 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000C916 6600                       		bne.s	Anim_End_FA	; if not, branch
0000C918 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C91E 4228 0025                  		clr.b	ob2ndRout(a0)	; reset	2nd routine counter
0000C922                            
0000C922                            Anim_End_FA:
0000C922 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000C924 6600                       		bne.s	Anim_End	; if not, branch
0000C926 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; jump to next routine
0000C92A                            
0000C92A                            Anim_End:
0000C92A 4E75                       		rts	
0000C92C                            ; End of function AnimateSprite
0000C92C                            ; End of function AnimateSprite
0000C92C                            
0000C92C                            Map_PSB:	include	"_maps\Press Start and TM.asm"
0000C92C                            ; ---------------------------------------------------------------------------
0000C92C                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000C92C                            ; ---------------------------------------------------------------------------
0000C92C                            Map_PSB_internal:
0000C92C 0000                       		dc.w byte_A7CD-Map_PSB_internal
0000C92E 0000                       		dc.w M_PSB_PSB-Map_PSB_internal
0000C930 0000                       		dc.w M_PSB_Limiter-Map_PSB_internal
0000C932 0000                       		dc.w M_PSB_TM-Map_PSB_internal
0000C934 06                         M_PSB_PSB:	dc.b 6			; "PRESS START BUTTON"
0000C935 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000C93A 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000C93F 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000C944 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000C949 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000C94E 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000C953 1E                         M_PSB_Limiter:	dc.b $1E		; sprite line limiter
0000C954 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C959 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C95E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C963 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C968 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C96D B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C972 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C977 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C97C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C981 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C986 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C98B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C990 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C995 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C99A D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C99F D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C9A4 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C9A9 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C9AE D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C9B3 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C9B8 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9BD F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9C2 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9C7 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9CC F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9D1 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9D6 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9DB F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9E0 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9E5 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9EA 01                         M_PSB_TM:	dc.b 1			; "TM"
0000C9EB FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000C9F0                            		even
0000C9F0                            		even
0000C9F0                            Map_TSon:	include	"_maps\Title Screen Sonic.asm"
0000C9F0                            ; ---------------------------------------------------------------------------
0000C9F0                            ; Sprite mappings - Sonic on the title screen
0000C9F0                            ; ---------------------------------------------------------------------------
0000C9F0                            Map_TSon_internal:
0000C9F0 0000                       		dc.w byte_A898-Map_TSon_internal
0000C9F2 0000                       		dc.w byte_A8CB-Map_TSon_internal
0000C9F4 0000                       		dc.w byte_A917-Map_TSon_internal
0000C9F6 0000                       		dc.w byte_A96D-Map_TSon_internal
0000C9F8 0000                       		dc.w byte_A9AF-Map_TSon_internal
0000C9FA 0000                       		dc.w byte_A9E7-Map_TSon_internal
0000C9FC 0000                       		dc.w byte_AA47-Map_TSon_internal
0000C9FE 0000                       		dc.w byte_AAB1-Map_TSon_internal
0000CA00 0A                         byte_A898:	dc.b $A
0000CA01 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000CA06 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000CA0B 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000CA10 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000CA15 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000CA1A 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000CA1F 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000CA24 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000CA29 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000CA2E 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000CA33 0F                         byte_A8CB:	dc.b $F
0000CA34 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000CA39 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000CA3E 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000CA43 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000CA48 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000CA4D 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000CA52 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000CA57 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000CA5C 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000CA61 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000CA66 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000CA6B 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000CA70 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000CA75 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000CA7A 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000CA7F 11                         byte_A917:	dc.b $11
0000CA80 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000CA85 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000CA8A 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000CA8F 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000CA94 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000CA99 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000CA9E 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000CAA3 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000CAA8 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000CAAD 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000CAB2 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000CAB7 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000CABC 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000CAC1 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000CAC6 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000CACB 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000CAD0 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000CAD5 0D                         byte_A96D:	dc.b $D
0000CAD6 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000CADB 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000CAE0 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000CAE5 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000CAEA 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000CAEF 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000CAF4 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000CAF9 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000CAFE 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000CB03 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000CB08 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000CB0D 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000CB12 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000CB17 0B                         byte_A9AF:	dc.b $B
0000CB18 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000CB1D 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000CB22 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000CB27 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000CB2C 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000CB31 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000CB36 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000CB3B 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000CB40 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000CB45 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000CB4A 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000CB4F 13                         byte_A9E7:	dc.b $13
0000CB50 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CB55 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CB5A 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CB5F 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CB64 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CB69 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CB6E 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CB73 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CB78 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CB7D 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CB82 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CB87 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CB8C 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CB91 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CB96 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CB9B 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CBA0 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CBA5 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CBAA 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CBAF 15                         byte_AA47:	dc.b $15
0000CBB0 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CBB5 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CBBA 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CBBF 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CBC4 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CBC9 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CBCE 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CBD3 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CBD8 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CBDD 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CBE2 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CBE7 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CBEC 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CBF1 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CBF6 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CBFB 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CC00 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CC05 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CC0A 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CC0F 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CC14 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CC19 16                         byte_AAB1:	dc.b $16
0000CC1A 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000CC1F 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000CC24 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000CC29 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000CC2E 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000CC33 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CC38 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CC3D 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CC42 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CC47 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CC4C 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CC51 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CC56 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CC5B 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CC60 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CC65 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CC6A 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CC6F 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CC74 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CC79 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CC7E 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CC83 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CC88                            		even
0000CC88                            		even
0000CC88                            
0000CC88                            		include	"_incObj\2B Chopper.asm"
0000CC88                            ; ---------------------------------------------------------------------------
0000CC88                            ; Object 2B - Chopper enemy (GHZ)
0000CC88                            ; ---------------------------------------------------------------------------
0000CC88                            
0000CC88                            Chopper:
0000CC88 7000                       		moveq	#0,d0
0000CC8A 1028 0024                  		move.b	obRoutine(a0),d0
0000CC8E 323B 0000                  		move.w	Chop_Index(pc,d0.w),d1
0000CC92 4EBB 1000                  		jsr	Chop_Index(pc,d1.w)
0000CC96 6000 0000                  		bra.w	RememberState
0000CC9A                            ; ===========================================================================
0000CC9A 0000                       Chop_Index:	dc.w Chop_Main-Chop_Index
0000CC9C 0000                       		dc.w Chop_ChgSpeed-Chop_Index
0000CC9E                            
0000CC9E =00000030                  chop_origY:	equ $30
0000CC9E                            ; ===========================================================================
0000CC9E                            
0000CC9E                            Chop_Main:	; Routine 0
0000CC9E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CCA2 217C 0000 0000 0004        		move.l	#Map_Chop,obMap(a0)
0000CCAA 317C 047B 0002             		move.w	#$47B,obGfx(a0)
0000CCB0 117C 0004 0001             		move.b	#4,obRender(a0)
0000CCB6 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CCBC 117C 0009 0020             		move.b	#9,obColType(a0)
0000CCC2 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CCC8 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CCCE 3168 000C 0030             		move.w	obY(a0),chop_origY(a0) ; save original position
0000CCD4                            
0000CCD4                            Chop_ChgSpeed:	; Routine 2
0000CCD4 43F9 0000 0000             		lea	(Ani_Chop).l,a1
0000CCDA 6100 FBA4                  		bsr.w	AnimateSprite
0000CCDE 6100 0000                  		bsr.w	SpeedToPos
0000CCE2 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce speed
0000CCE8 3028 0030                  		move.w	chop_origY(a0),d0
0000CCEC B068 000C                  		cmp.w	obY(a0),d0	; has Chopper returned to its original position?
0000CCF0 6400                       		bcc.s	@chganimation	; if not, branch
0000CCF2 3140 000C                  		move.w	d0,obY(a0)
0000CCF6 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CCFC                            
0000CCFC                            	@chganimation:
0000CCFC 117C 0001 001C             		move.b	#1,obAnim(a0)	; use fast animation
0000CD02 0440 00C0                  		subi.w	#$C0,d0
0000CD06 B068 000C                  		cmp.w	obY(a0),d0
0000CD0A 6400                       		bcc.s	@nochg
0000CD0C 117C 0000 001C             		move.b	#0,obAnim(a0)	; use slow animation
0000CD12 4A68 0012                  		tst.w	obVelY(a0)	; is Chopper at	its highest point?
0000CD16 6B00                       		bmi.s	@nochg		; if not, branch
0000CD18 117C 0002 001C             		move.b	#2,obAnim(a0)	; use stationary animation
0000CD1E                            
0000CD1E                            	@nochg:
0000CD1E 4E75                       		rts	
0000CD1E 4E75                       		rts	
0000CD20                            		include	"_anim\Chopper.asm"
0000CD20                            ; ---------------------------------------------------------------------------
0000CD20                            ; Animation script - Chopper enemy
0000CD20                            ; ---------------------------------------------------------------------------
0000CD20 0000                       Ani_Chop:	dc.w @slow-Ani_Chop
0000CD22 0000                       		dc.w @fast-Ani_Chop
0000CD24 0000                       		dc.w @still-Ani_Chop
0000CD26 0700 01FF                  @slow:		dc.b 7,	0, 1, afEnd
0000CD2A 0300 01FF                  @fast:		dc.b 3,	0, 1, afEnd
0000CD2E 0700 FF                    @still:		dc.b 7,	0, afEnd
0000CD32 00                         		even
0000CD32 00                         		even
0000CD32                            Map_Chop:	include	"_maps\Chopper.asm"
0000CD32                            ; ---------------------------------------------------------------------------
0000CD32                            ; Sprite mappings - Chopper enemy (GHZ)
0000CD32                            ; ---------------------------------------------------------------------------
0000CD32                            Map_Chop_internal:
0000CD32 0000                       		dc.w @mouthshut-Map_Chop_internal
0000CD34 0000                       		dc.w @mouthopen-Map_Chop_internal
0000CD36 01                         @mouthshut:	dc.b 1
0000CD37 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000CD3C 01                         @mouthopen:	dc.b 1
0000CD3D F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000CD42                            		even
0000CD42                            		even
0000CD42                            		include	"_incObj\2C Jaws.asm"
0000CD42                            ; ---------------------------------------------------------------------------
0000CD42                            ; Object 2C - Jaws enemy (LZ)
0000CD42                            ; ---------------------------------------------------------------------------
0000CD42                            
0000CD42                            Jaws:
0000CD42 7000                       		moveq	#0,d0
0000CD44 1028 0024                  		move.b	obRoutine(a0),d0
0000CD48 323B 0000                  		move.w	Jaws_Index(pc,d0.w),d1
0000CD4C 4EFB 1000                  		jmp	Jaws_Index(pc,d1.w)
0000CD50                            ; ===========================================================================
0000CD50 0000                       Jaws_Index:	dc.w Jaws_Main-Jaws_Index
0000CD52 0000                       		dc.w Jaws_Turn-Jaws_Index
0000CD54                            
0000CD54 =00000030                  jaws_timecount:	equ $30
0000CD54 =00000032                  jaws_timedelay:	equ $32
0000CD54                            ; ===========================================================================
0000CD54                            
0000CD54                            Jaws_Main:	; Routine 0
0000CD54 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CD58 217C 0000 0000 0004        		move.l	#Map_Jaws,obMap(a0)
0000CD60 317C 2486 0002             		move.w	#$2486,obGfx(a0)
0000CD66 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CD6C 117C 000A 0020             		move.b	#$A,obColType(a0)
0000CD72 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CD78 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CD7E 7000                       		moveq	#0,d0
0000CD80 1028 0028                  		move.b	obSubtype(a0),d0 ; load object subtype number
0000CD84 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000CD86 5340                       		subq.w	#1,d0
0000CD88 3140 0030                  		move.w	d0,jaws_timecount(a0) ; set turn delay time
0000CD8C 3140 0032                  		move.w	d0,jaws_timedelay(a0)
0000CD90 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move Jaws to the left
0000CD96 0828 0000 0022             		btst	#0,obStatus(a0)	; is Jaws facing left?
0000CD9C 6700                       		beq.s	Jaws_Turn	; if yes, branch
0000CD9E 4468 0010                  		neg.w	obVelX(a0)	; move Jaws to the right
0000CDA2                            
0000CDA2                            Jaws_Turn:	; Routine 2
0000CDA2 5368 0030                  		subq.w	#1,jaws_timecount(a0) ; subtract 1 from turn delay time
0000CDA6 6A00                       		bpl.s	@animate	; if time remains, branch
0000CDA8 3168 0032 0030             		move.w	jaws_timedelay(a0),jaws_timecount(a0) ; reset turn delay time
0000CDAE 4468 0010                  		neg.w	obVelX(a0)	; change speed direction
0000CDB2 0868 0000 0022             		bchg	#0,obStatus(a0)	; change Jaws facing direction
0000CDB8 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000CDBE                            
0000CDBE                            	@animate:
0000CDBE 43F9 0000 0000             		lea	(Ani_Jaws).l,a1
0000CDC4 6100 FABA                  		bsr.w	AnimateSprite
0000CDC8 6100 0000                  		bsr.w	SpeedToPos
0000CDCC 6000 0000                  		bra.w	RememberState
0000CDCC 6000 0000                  		bra.w	RememberState
0000CDD0                            		include	"_anim\Jaws.asm"
0000CDD0                            ; ---------------------------------------------------------------------------
0000CDD0                            ; Animation script - Jaws enemy
0000CDD0                            ; ---------------------------------------------------------------------------
0000CDD0 0000                       Ani_Jaws:	dc.w @swim-Ani_Jaws
0000CDD2 0700 0102 03FF             @swim:		dc.b 7,	0, 1, 2, 3, afEnd
0000CDD8                            		even
0000CDD8                            		even
0000CDD8                            Map_Jaws:	include	"_maps\Jaws.asm"
0000CDD8                            ; --------------------------------------------------------------------------------
0000CDD8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CDD8                            ; --------------------------------------------------------------------------------
0000CDD8                            
0000CDD8                            SME_O5C0c:	
0000CDD8 0000 0000                  		dc.w SME_O5C0c_8-SME_O5C0c, SME_O5C0c_13-SME_O5C0c	
0000CDDC 0000 0000                  		dc.w SME_O5C0c_1E-SME_O5C0c, SME_O5C0c_29-SME_O5C0c	
0000CDE0 02                         SME_O5C0c_8:	dc.b 2	
0000CDE1 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CDE6 F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CDEB 02                         SME_O5C0c_13:	dc.b 2	
0000CDEC F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CDF1 F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CDF6 02                         SME_O5C0c_1E:	dc.b 2	
0000CDF7 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CDFC F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CE01 02                         SME_O5C0c_29:	dc.b 2	
0000CE02 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CE07 F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CE0C                            		even
0000CE0C                            		even
0000CE0C                            		include	"_incObj\2D Burrobot.asm"
0000CE0C                            ; ---------------------------------------------------------------------------
0000CE0C                            ; Object 2D - Burrobot enemy (LZ)
0000CE0C                            ; ---------------------------------------------------------------------------
0000CE0C                            
0000CE0C                            Burrobot:
0000CE0C 7000                       		moveq	#0,d0
0000CE0E 1028 0024                  		move.b	obRoutine(a0),d0
0000CE12 323B 0000                  		move.w	Burro_Index(pc,d0.w),d1
0000CE16 4EFB 1000                  		jmp	Burro_Index(pc,d1.w)
0000CE1A                            ; ===========================================================================
0000CE1A 0000                       Burro_Index:	dc.w Burro_Main-Burro_Index
0000CE1C 0000                       		dc.w Burro_Action-Burro_Index
0000CE1E                            
0000CE1E =00000030                  burro_timedelay:	equ $30		; time between direction changes
0000CE1E                            ; ===========================================================================
0000CE1E                            
0000CE1E                            Burro_Main:	; Routine 0
0000CE1E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CE22 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000CE28 117C 0008 0017             		move.b	#8,obWidth(a0)
0000CE2E 217C 0000 0000 0004        		move.l	#Map_Burro,obMap(a0)
0000CE36 317C 04A6 0002             		move.w	#$4A6,obGfx(a0)
0000CE3C 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CE42 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CE48 117C 0005 0020             		move.b	#5,obColType(a0)
0000CE4E 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000CE54 5C28 0025                  		addq.b	#6,ob2ndRout(a0) ; run "Burro_ChkSonic" routine
0000CE58 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CE5E                            
0000CE5E                            Burro_Action:	; Routine 2
0000CE5E 7000                       		moveq	#0,d0
0000CE60 1028 0025                  		move.b	ob2ndRout(a0),d0
0000CE64 323B 0000                  		move.w	@index(pc,d0.w),d1
0000CE68 4EBB 1000                  		jsr	@index(pc,d1.w)
0000CE6C 43F9 0000 0000             		lea	(Ani_Burro).l,a1
0000CE72 6100 FA0C                  		bsr.w	AnimateSprite
0000CE76 6000 0000                  		bra.w	RememberState
0000CE7A                            ; ===========================================================================
0000CE7A 0000                       @index:		dc.w @changedir-@index
0000CE7C 0000                       		dc.w Burro_Move-@index
0000CE7E 0000                       		dc.w Burro_Jump-@index
0000CE80 0000                       		dc.w Burro_ChkSonic-@index
0000CE82                            ; ===========================================================================
0000CE82                            
0000CE82                            @changedir:
0000CE82 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CE86 6A00                       		bpl.s	@nochg
0000CE88 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CE8C 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CE92 317C 0080 0010             		move.w	#$80,obVelX(a0)
0000CE98 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CE9E 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction the Burrobot	is facing
0000CEA4 6700                       		beq.s	@nochg
0000CEA6 4468 0010                  		neg.w	obVelX(a0)	; change direction the Burrobot	is moving
0000CEAA                            
0000CEAA                            	@nochg:
0000CEAA 4E75                       		rts	
0000CEAC                            ; ===========================================================================
0000CEAC                            
0000CEAC                            Burro_Move:
0000CEAC 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CEB0 6B00                       		bmi.s	loc_AD84
0000CEB2 6100 0000                  		bsr.w	SpeedToPos
0000CEB6 0868 0000 0032             		bchg	#0,$32(a0)
0000CEBC 6600                       		bne.s	loc_AD78
0000CEBE 3628 0008                  		move.w	obX(a0),d3
0000CEC2 0643 000C                  		addi.w	#$C,d3
0000CEC6 0828 0000 0022             		btst	#0,obStatus(a0)
0000CECC 6600                       		bne.s	loc_AD6A
0000CECE 0443 0018                  		subi.w	#$18,d3
0000CED2                            
0000CED2                            loc_AD6A:
0000CED2 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000CED8 0C41 000C                  		cmpi.w	#$C,d1
0000CEDC 6C00                       		bge.s	loc_AD84
0000CEDE 4E75                       		rts	
0000CEE0                            ; ===========================================================================
0000CEE0                            
0000CEE0                            loc_AD78:
0000CEE0 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CEE6 D368 000C                  		add.w	d1,obY(a0)
0000CEEA 4E75                       		rts	
0000CEEC                            ; ===========================================================================
0000CEEC                            
0000CEEC                            loc_AD84:
0000CEEC 0838 0002 FE0F             		btst	#2,(v_vbla_byte).w
0000CEF2 6700                       		beq.s	loc_ADA4
0000CEF4 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CEF8 317C 003B 0030             		move.w	#59,burro_timedelay(a0)
0000CEFE 317C 0000 0010             		move.w	#0,obVelX(a0)
0000CF04 117C 0000 001C             		move.b	#0,obAnim(a0)
0000CF0A 4E75                       		rts	
0000CF0C                            ; ===========================================================================
0000CF0C                            
0000CF0C                            loc_ADA4:
0000CF0C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CF10 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000CF16 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CF1C 4E75                       		rts	
0000CF1E                            ; ===========================================================================
0000CF1E                            
0000CF1E                            Burro_Jump:
0000CF1E 6100 0000                  		bsr.w	SpeedToPos
0000CF22 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000CF28 6B00                       		bmi.s	locret_ADF0
0000CF2A 117C 0003 001C             		move.b	#3,obAnim(a0)
0000CF30 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CF36 4A41                       		tst.w	d1
0000CF38 6A00                       		bpl.s	locret_ADF0
0000CF3A D368 000C                  		add.w	d1,obY(a0)
0000CF3E 317C 0000 0012             		move.w	#0,obVelY(a0)
0000CF44 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CF4A 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CF50 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CF54 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CF58                            
0000CF58                            locret_ADF0:
0000CF58 4E75                       		rts	
0000CF5A                            ; ===========================================================================
0000CF5A                            
0000CF5A                            Burro_ChkSonic:
0000CF5A 343C 0060                  		move.w	#$60,d2
0000CF5E 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CF62 6400                       		bcc.s	locret_AE20
0000CF64 3038 D00C                  		move.w	(v_player+obY).w,d0
0000CF68 9068 000C                  		sub.w	obY(a0),d0
0000CF6C 6400                       		bcc.s	locret_AE20
0000CF6E 0C40 FF80                  		cmpi.w	#-$80,d0
0000CF72 6500                       		bcs.s	locret_AE20
0000CF74 4A78 FE08                  		tst.w	(v_debuguse).w
0000CF78 6600                       		bne.s	locret_AE20
0000CF7A 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CF7E 3141 0010                  		move.w	d1,obVelX(a0)
0000CF82 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000CF88                            
0000CF88                            locret_AE20:
0000CF88 4E75                       		rts	
0000CF8A                            
0000CF8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CF8A                            
0000CF8A                            
0000CF8A                            Burro_ChkSonic2:
0000CF8A 323C 0080                  		move.w	#$80,d1
0000CF8E 08E8 0000 0022             		bset	#0,obStatus(a0)
0000CF94 3038 D008                  		move.w	(v_player+obX).w,d0
0000CF98 9068 0008                  		sub.w	obX(a0),d0
0000CF9C 6400                       		bcc.s	loc_AE40
0000CF9E 4440                       		neg.w	d0
0000CFA0 4441                       		neg.w	d1
0000CFA2 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000CFA8                            
0000CFA8                            loc_AE40:
0000CFA8 B042                       		cmp.w	d2,d0
0000CFAA 4E75                       		rts	
0000CFAC                            ; End of function Burro_ChkSonic2
0000CFAC                            ; End of function Burro_ChkSonic2
0000CFAC                            		include	"_anim\Burrobot.asm"
0000CFAC                            ; ---------------------------------------------------------------------------
0000CFAC                            ; Animation script - Burrobot enemy
0000CFAC                            ; ---------------------------------------------------------------------------
0000CFAC 0000                       Ani_Burro:	dc.w @walk1-Ani_Burro
0000CFAE 0000                       		dc.w @walk2-Ani_Burro
0000CFB0 0000                       		dc.w @digging-Ani_Burro
0000CFB2 0000                       		dc.w @fall-Ani_Burro
0000CFB4 0300 06FF                  @walk1:		dc.b 3,	0, 6, afEnd
0000CFB8 0300 01FF                  @walk2:		dc.b 3,	0, 1, afEnd
0000CFBC 0302 03FF                  @digging:	dc.b 3,	2, 3, afEnd
0000CFC0 0304 FF                    @fall:		dc.b 3,	4, afEnd
0000CFC4 00                         		even
0000CFC4 00                         		even
0000CFC4                            Map_Burro:	include	"_maps\Burrobot.asm"
0000CFC4                            ; --------------------------------------------------------------------------------
0000CFC4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CFC4                            ; --------------------------------------------------------------------------------
0000CFC4                            
0000CFC4                            SME_Ag_86:	
0000CFC4 0000 0000                  		dc.w SME_Ag_86_E-SME_Ag_86, SME_Ag_86_19-SME_Ag_86	
0000CFC8 0000 0000                  		dc.w SME_Ag_86_24-SME_Ag_86, SME_Ag_86_2F-SME_Ag_86	
0000CFCC 0000 0000                  		dc.w SME_Ag_86_3A-SME_Ag_86, SME_Ag_86_45-SME_Ag_86	
0000CFD0 0000                       		dc.w SME_Ag_86_50-SME_Ag_86	
0000CFD2 02                         SME_Ag_86_E:	dc.b 2	
0000CFD3 EC0A 2000 F0               		dc.b $EC, $A, $20, 0, $F0	
0000CFD8 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000CFDD 02                         SME_Ag_86_19:	dc.b 2	
0000CFDE EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000CFE3 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000CFE8 02                         SME_Ag_86_24:	dc.b 2	
0000CFE9 E80A 201E F4               		dc.b $E8, $A, $20, $1E, $F4	
0000CFEE 000A 2027 F4               		dc.b 0, $A, $20, $27, $F4	
0000CFF3 02                         SME_Ag_86_2F:	dc.b 2	
0000CFF4 E80A 2030 F4               		dc.b $E8, $A, $20, $30, $F4	
0000CFF9 000A 2039 F4               		dc.b 0, $A, $20, $39, $F4	
0000CFFE 02                         SME_Ag_86_3A:	dc.b 2	
0000CFFF E80A 200F F0               		dc.b $E8, $A, $20, $F, $F0	
0000D004 000A 2042 F4               		dc.b 0, $A, $20, $42, $F4	
0000D009 02                         SME_Ag_86_45:	dc.b 2	
0000D00A F406 204B E8               		dc.b $F4, 6, $20, $4B, $E8	
0000D00F F40A 2051 F8               		dc.b $F4, $A, $20, $51, $F8	
0000D014 02                         SME_Ag_86_50:	dc.b 2	
0000D015 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000D01A 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000D020 00                         		even
0000D020 00                         		even
0000D020                            
0000D020                            		include	"_incObj\2F MZ Large Grassy Platforms.asm"
0000D020                            ; ---------------------------------------------------------------------------
0000D020                            ; Object 2F - large grass-covered platforms (MZ)
0000D020                            ; ---------------------------------------------------------------------------
0000D020                            
0000D020                            LargeGrass:
0000D020 7000                       		moveq	#0,d0
0000D022 1028 0024                  		move.b	obRoutine(a0),d0
0000D026 323B 0000                  		move.w	LGrass_Index(pc,d0.w),d1
0000D02A 4EFB 1000                  		jmp	LGrass_Index(pc,d1.w)
0000D02E                            ; ===========================================================================
0000D02E 0000                       LGrass_Index:	dc.w LGrass_Main-LGrass_Index
0000D030 0000                       		dc.w LGrass_Action-LGrass_Index
0000D032                            
0000D032 =0000002A                  lgrass_origX:	equ $2A
0000D032 =0000002C                  lgrass_origY:	equ $2C
0000D032                            
0000D032 0000                       LGrass_Data:	dc.w LGrass_Data1-LGrass_Data 	; collision angle data
0000D034 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000D036 0000                       		dc.w LGrass_Data3-LGrass_Data
0000D038 0140                       		dc.b 1,	$40
0000D03A 0000                       		dc.w LGrass_Data2-LGrass_Data
0000D03C 0220                       		dc.b 2,	$20
0000D03E                            ; ===========================================================================
0000D03E                            
0000D03E                            LGrass_Main:	; Routine 0
0000D03E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D042 217C 0000 0000 0004        		move.l	#Map_LGrass,obMap(a0)
0000D04A 317C C000 0002             		move.w	#$C000,obGfx(a0)
0000D050 117C 0004 0001             		move.b	#4,obRender(a0)
0000D056 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000D05C 3168 000C 002C             		move.w	obY(a0),lgrass_origY(a0)
0000D062 3168 0008 002A             		move.w	obX(a0),lgrass_origX(a0)
0000D068 7000                       		moveq	#0,d0
0000D06A 1028 0028                  		move.b	obSubtype(a0),d0
0000D06E E448                       		lsr.w	#2,d0
0000D070 0240 001C                  		andi.w	#$1C,d0
0000D074 43FB 00BC                  		lea	LGrass_Data(pc,d0.w),a1
0000D078 3019                       		move.w	(a1)+,d0
0000D07A 45FB 00B6                  		lea	LGrass_Data(pc,d0.w),a2
0000D07E 214A 0030                  		move.l	a2,$30(a0)
0000D082 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000D086 1151 0014                  		move.b	(a1),obActWid(a0)
0000D08A 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000D090 117C 0040 0016             		move.b	#$40,obHeight(a0)
0000D096 08E8 0004 0001             		bset	#4,1(a0)
0000D09C                            
0000D09C                            LGrass_Action:	; Routine 2
0000D09C 6100 0000                  		bsr.w	LGrass_Types
0000D0A0 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D0A4 6700                       		beq.s	LGrass_Solid
0000D0A6 7200                       		moveq	#0,d1
0000D0A8 1228 0014                  		move.b	obActWid(a0),d1
0000D0AC 0641 000B                  		addi.w	#$B,d1
0000D0B0 6100 BCE6                  		bsr.w	ExitPlatform
0000D0B4 0829 0003 0022             		btst	#3,obStatus(a1)
0000D0BA 6600 0000                  		bne.w	LGrass_Slope
0000D0BE 4228 0025                  		clr.b	ob2ndRout(a0)
0000D0C2 6000                       		bra.s	LGrass_Display
0000D0C4                            ; ===========================================================================
0000D0C4                            
0000D0C4                            LGrass_Slope:
0000D0C4 7200                       		moveq	#0,d1
0000D0C6 1228 0014                  		move.b	obActWid(a0),d1
0000D0CA 0641 000B                  		addi.w	#$B,d1
0000D0CE 2468 0030                  		movea.l	$30(a0),a2
0000D0D2 3428 0008                  		move.w	obX(a0),d2
0000D0D6 6100 CC5A                  		bsr.w	SlopeObject2
0000D0DA 6000                       		bra.s	LGrass_Display
0000D0DC                            ; ===========================================================================
0000D0DC                            
0000D0DC                            LGrass_Solid:
0000D0DC 7200                       		moveq	#0,d1
0000D0DE 1228 0014                  		move.b	obActWid(a0),d1
0000D0E2 0641 000B                  		addi.w	#$B,d1
0000D0E6 343C 0020                  		move.w	#$20,d2
0000D0EA 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000D0F0 6600                       		bne.s	loc_AF8E
0000D0F2 343C 0030                  		move.w	#$30,d2
0000D0F6                            
0000D0F6                            loc_AF8E:
0000D0F6 2468 0030                  		movea.l	$30(a0),a2
0000D0FA 6100 0000                  		bsr.w	SolidObject2F
0000D0FE                            
0000D0FE                            LGrass_Display:
0000D0FE 6100 0000                  		bsr.w	DisplaySprite
0000D102 6000 0000                  		bra.w	LGrass_ChkDel
0000D106                            
0000D106                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D106                            
0000D106                            
0000D106                            LGrass_Types:
0000D106 7000                       		moveq	#0,d0
0000D108 1028 0028                  		move.b	obSubtype(a0),d0
0000D10C 0240 0007                  		andi.w	#7,d0
0000D110 D040                       		add.w	d0,d0
0000D112 323B 0000                  		move.w	LGrass_TypeIndex(pc,d0.w),d1
0000D116 4EFB 1000                  		jmp	LGrass_TypeIndex(pc,d1.w)
0000D11A                            ; End of function LGrass_Types
0000D11A                            
0000D11A                            ; ===========================================================================
0000D11A 0000                       LGrass_TypeIndex:dc.w LGrass_Type00-LGrass_TypeIndex
0000D11C 0000                       		dc.w LGrass_Type01-LGrass_TypeIndex
0000D11E 0000                       		dc.w LGrass_Type02-LGrass_TypeIndex
0000D120 0000                       		dc.w LGrass_Type03-LGrass_TypeIndex
0000D122 0000                       		dc.w LGrass_Type04-LGrass_TypeIndex
0000D124 0000                       		dc.w LGrass_Type05-LGrass_TypeIndex
0000D126                            ; ===========================================================================
0000D126                            
0000D126                            LGrass_Type00:
0000D126 4E75                       		rts			; type 00 platform doesn't move
0000D128                            ; ===========================================================================
0000D128                            
0000D128                            LGrass_Type01:
0000D128 1038 FE60                  		move.b	(v_oscillate+2).w,d0
0000D12C 323C 0020                  		move.w	#$20,d1
0000D130 6000                       		bra.s	LGrass_Move
0000D132                            ; ===========================================================================
0000D132                            
0000D132                            LGrass_Type02:
0000D132 1038 FE64                  		move.b	(v_oscillate+6).w,d0
0000D136 323C 0030                  		move.w	#$30,d1
0000D13A 6000                       		bra.s	LGrass_Move
0000D13C                            ; ===========================================================================
0000D13C                            
0000D13C                            LGrass_Type03:
0000D13C 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0000D140 323C 0040                  		move.w	#$40,d1
0000D144 6000                       		bra.s	LGrass_Move
0000D146                            ; ===========================================================================
0000D146                            
0000D146                            LGrass_Type04:
0000D146 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0000D14A 323C 0060                  		move.w	#$60,d1
0000D14E                            
0000D14E                            LGrass_Move:
0000D14E 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D154 6700                       		beq.s	loc_AFF2
0000D156 4440                       		neg.w	d0
0000D158 D041                       		add.w	d1,d0
0000D15A                            
0000D15A                            loc_AFF2:
0000D15A 3228 002C                  		move.w	lgrass_origY(a0),d1
0000D15E 9240                       		sub.w	d0,d1
0000D160 3141 000C                  		move.w	d1,obY(a0)	; update position on y-axis
0000D164 4E75                       		rts	
0000D166                            ; ===========================================================================
0000D166                            
0000D166                            LGrass_Type05:
0000D166 1028 0034                  		move.b	$34(a0),d0
0000D16A 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D16E 6600                       		bne.s	loc_B010
0000D170 5500                       		subq.b	#2,d0
0000D172 6400                       		bcc.s	loc_B01C
0000D174 7000                       		moveq	#0,d0
0000D176 6000                       		bra.s	loc_B01C
0000D178                            ; ===========================================================================
0000D178                            
0000D178                            loc_B010:
0000D178 5800                       		addq.b	#4,d0
0000D17A 0C00 0040                  		cmpi.b	#$40,d0
0000D17E 6500                       		bcs.s	loc_B01C
0000D180 103C 0040                  		move.b	#$40,d0
0000D184                            
0000D184                            loc_B01C:
0000D184 1140 0034                  		move.b	d0,$34(a0)
0000D188 4EB9 0000 3CCA             		jsr	(CalcSine).l
0000D18E E848                       		lsr.w	#4,d0
0000D190 3200                       		move.w	d0,d1
0000D192 D068 002C                  		add.w	lgrass_origY(a0),d0
0000D196 3140 000C                  		move.w	d0,obY(a0)
0000D19A 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000D1A0 6600                       		bne.s	loc_B07A
0000D1A2 4A28 0035                  		tst.b	$35(a0)
0000D1A6 6600                       		bne.s	loc_B07A
0000D1A8 117C 0001 0035             		move.b	#1,$35(a0)
0000D1AE 6100 0000                  		bsr.w	FindNextFreeObj
0000D1B2 6600                       		bne.s	loc_B07A
0000D1B4 12BC 0000                  		move.b	#id_GrassFire,0(a1) ; load sitting flame object
0000D1B8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D1BE 3368 002C 002C             		move.w	lgrass_origY(a0),lgrass_origY(a1)
0000D1C4 5069 002C                  		addq.w	#8,lgrass_origY(a1)
0000D1C8 5769 002C                  		subq.w	#3,lgrass_origY(a1)
0000D1CC 0469 0040 0008             		subi.w	#$40,obX(a1)
0000D1D2 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000D1D8 2348 0038                  		move.l	a0,$38(a1)
0000D1DC 2448                       		movea.l	a0,a2
0000D1DE 6100                       		bsr.s	sub_B09C
0000D1E0                            
0000D1E0                            loc_B07A:
0000D1E0 7400                       		moveq	#0,d2
0000D1E2 45E8 0036                  		lea	$36(a0),a2
0000D1E6 141A                       		move.b	(a2)+,d2
0000D1E8 5302                       		subq.b	#1,d2
0000D1EA 6500                       		bcs.s	locret_B09A
0000D1EC                            
0000D1EC                            loc_B086:
0000D1EC 7000                       		moveq	#0,d0
0000D1EE 101A                       		move.b	(a2)+,d0
0000D1F0 ED48                       		lsl.w	#6,d0
0000D1F2 0640 D000                  		addi.w	#$D000,d0
0000D1F6 3240                       		movea.w	d0,a1
0000D1F8 3341 003C                  		move.w	d1,$3C(a1)
0000D1FC 51CA FFEE                  		dbf	d2,loc_B086
0000D200                            
0000D200                            locret_B09A:
0000D200 4E75                       		rts	
0000D202                            
0000D202                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D202                            
0000D202                            
0000D202                            sub_B09C:
0000D202 45EA 0036                  		lea	$36(a2),a2
0000D206 7000                       		moveq	#0,d0
0000D208 1012                       		move.b	(a2),d0
0000D20A 5212                       		addq.b	#1,(a2)
0000D20C 45F2 0001                  		lea	1(a2,d0.w),a2
0000D210 3009                       		move.w	a1,d0
0000D212 0440 D000                  		subi.w	#$D000,d0
0000D216 EC48                       		lsr.w	#6,d0
0000D218 0240 007F                  		andi.w	#$7F,d0
0000D21C 1480                       		move.b	d0,(a2)
0000D21E 4E75                       		rts	
0000D220                            ; End of function sub_B09C
0000D220                            
0000D220                            ; ===========================================================================
0000D220                            
0000D220                            LGrass_ChkDel:
0000D220 4A28 0035                  		tst.b	$35(a0)
0000D224 6700                       		beq.s	loc_B0C6
0000D226 4A28 0001                  		tst.b	obRender(a0)
0000D22A 6A00                       		bpl.s	LGrass_DelFlames
0000D22C                            
0000D22C                            loc_B0C6:
0000D24A 4E75                       		rts	
0000D24C                            ; ===========================================================================
0000D24C                            
0000D24C                            LGrass_DelFlames:
0000D24C 7400                       		moveq	#0,d2
0000D24E                            
0000D24E                            loc_B0E8:
0000D24E 45E8 0036                  		lea	$36(a0),a2
0000D252 1412                       		move.b	(a2),d2
0000D254 421A                       		clr.b	(a2)+
0000D256 5302                       		subq.b	#1,d2
0000D258 6500                       		bcs.s	locret_B116
0000D25A                            
0000D25A                            loc_B0F4:
0000D25A 7000                       		moveq	#0,d0
0000D25C 1012                       		move.b	(a2),d0
0000D25E 421A                       		clr.b	(a2)+
0000D260 ED48                       		lsl.w	#6,d0
0000D262 0640 D000                  		addi.w	#$D000,d0
0000D266 3240                       		movea.w	d0,a1
0000D268 6100 0000                  		bsr.w	DeleteChild
0000D26C 51CA FFEC                  		dbf	d2,loc_B0F4
0000D270 117C 0000 0035             		move.b	#0,$35(a0)
0000D276 117C 0000 0034             		move.b	#0,$34(a0)
0000D27C                            
0000D27C                            locret_B116:
0000D27C 4E75                       		rts	
0000D27E                            ; ===========================================================================
0000D27E                            ; ---------------------------------------------------------------------------
0000D27E                            ; Collision data for large moving platforms (MZ)
0000D27E                            ; ---------------------------------------------------------------------------
0000D27E                            LGrass_Data1:	incbin	"misc\mz_pfm1.bin"
0000D2CA                            		even
0000D2CA                            LGrass_Data2:	incbin	"misc\mz_pfm2.bin"
0000D2F6                            		even
0000D2F6                            LGrass_Data3:	incbin	"misc\mz_pfm3.bin"
0000D342                            		even
0000D342                            		even
0000D342                            		include	"_incObj\35 Burning Grass.asm"
0000D342                            ; ---------------------------------------------------------------------------
0000D342                            ; Object 35 - fireball that sits on the	floor (MZ)
0000D342                            ; (appears when	you walk on sinking platforms)
0000D342                            ; ---------------------------------------------------------------------------
0000D342                            
0000D342                            GrassFire:
0000D342 7000                       		moveq	#0,d0
0000D344 1028 0024                  		move.b	obRoutine(a0),d0
0000D348 323B 0000                  		move.w	GFire_Index(pc,d0.w),d1
0000D34C 4EFB 1000                  		jmp	GFire_Index(pc,d1.w)
0000D350                            ; ===========================================================================
0000D350 0000                       GFire_Index:	dc.w GFire_Main-GFire_Index
0000D352 0000                       		dc.w loc_B238-GFire_Index
0000D354 0000                       		dc.w GFire_Move-GFire_Index
0000D356                            
0000D356 =0000002A                  gfire_origX:	equ $2A
0000D356                            ; ===========================================================================
0000D356                            
0000D356                            GFire_Main:	; Routine 0
0000D356 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D35A 217C 0000 0000 0004        		move.l	#Map_Fire,obMap(a0)
0000D362 317C 0345 0002             		move.w	#$345,obGfx(a0)
0000D368 3168 0008 002A             		move.w	obX(a0),gfire_origX(a0)
0000D36E 117C 0004 0001             		move.b	#4,obRender(a0)
0000D374 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000D37A 117C 008B 0020             		move.b	#$8B,obColType(a0)
0000D380 117C 0008 0014             		move.b	#8,obActWid(a0)
0000D390 4A28 0028                  		tst.b	obSubtype(a0)
0000D394 6700                       		beq.s	loc_B238
0000D396 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D39A 6000 0000                  		bra.w	GFire_Move
0000D39E                            ; ===========================================================================
0000D39E                            
0000D39E                            loc_B238:	; Routine 2
0000D39E 2268 0030                  		movea.l	$30(a0),a1
0000D3A2 3228 0008                  		move.w	obX(a0),d1
0000D3A6 9268 002A                  		sub.w	gfire_origX(a0),d1
0000D3AA 0641 000C                  		addi.w	#$C,d1
0000D3AE 3001                       		move.w	d1,d0
0000D3B0 E248                       		lsr.w	#1,d0
0000D3B2 1031 0000                  		move.b	(a1,d0.w),d0
0000D3B6 4440                       		neg.w	d0
0000D3B8 D068 002C                  		add.w	$2C(a0),d0
0000D3BC 3400                       		move.w	d0,d2
0000D3BE D068 003C                  		add.w	$3C(a0),d0
0000D3C2 3140 000C                  		move.w	d0,obY(a0)
0000D3C6 0C41 0084                  		cmpi.w	#$84,d1
0000D3CA 6400                       		bcc.s	loc_B2B0
0000D3CC 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000D3D4 0C41 0080                  		cmpi.w	#$80,d1
0000D3D8 6400                       		bcc.s	loc_B2B0
0000D3DA 2028 0008                  		move.l	obX(a0),d0
0000D3DE 0680 0008 0000             		addi.l	#$80000,d0
0000D3E4 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000D3EA 6600                       		bne.s	loc_B2B0
0000D3EC 6100 0000                  		bsr.w	FindNextFreeObj
0000D3F0 6600                       		bne.s	loc_B2B0
0000D3F2 12BC 0000                  		move.b	#id_GrassFire,0(a1)
0000D3F6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D3FC 3342 002C                  		move.w	d2,$2C(a1)
0000D400 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000D406 137C 0001 0028             		move.b	#1,obSubtype(a1)
0000D40C 2468 0038                  		movea.l	$38(a0),a2
0000D410 6100 FDF0                  		bsr.w	sub_B09C
0000D414                            
0000D414                            loc_B2B0:
0000D414 6000                       		bra.s	GFire_Animate
0000D416                            ; ===========================================================================
0000D416                            
0000D416                            GFire_Move:	; Routine 4
0000D416 3028 002C                  		move.w	$2C(a0),d0
0000D41A D068 003C                  		add.w	$3C(a0),d0
0000D41E 3140 000C                  		move.w	d0,obY(a0)
0000D422                            
0000D422                            GFire_Animate:
0000D422 43F9 0000 0000             		lea	(Ani_GFire).l,a1
0000D428 6100 F456                  		bsr.w	AnimateSprite
0000D42C 6000 0000                  		bra.w	DisplaySprite
0000D42C 6000 0000                  		bra.w	DisplaySprite
0000D430                            		include	"_anim\Burning Grass.asm"
0000D430                            ; ---------------------------------------------------------------------------
0000D430                            ; Animation script - burning grass that sits on the floor (MZ)
0000D430                            ; ---------------------------------------------------------------------------
0000D430 0000                       Ani_GFire:	dc.w @burn-Ani_GFire
0000D432 0500 2001 21FF             @burn:		dc.b 5,	0, $20,	1, $21,	afEnd
0000D438                            		even
0000D438                            		even
0000D438                            Map_LGrass:	include	"_maps\MZ Large Grassy Platforms.asm"
0000D438                            ; ---------------------------------------------------------------------------
0000D438                            ; Sprite mappings - large moving grass-covered platforms (MZ)
0000D438                            ; ---------------------------------------------------------------------------
0000D438                            Map_LGrass_internal:
0000D438 0000                       		dc.w @wide-Map_LGrass_internal
0000D43A 0000                       		dc.w @sloped-Map_LGrass_internal
0000D43C 0000                       		dc.w @narrow-Map_LGrass_internal
0000D43E 0D                         @wide:		dc.b $D
0000D43F D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0 ; wide platform
0000D444 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000D449 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D44E D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000D453 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000D458 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D45D D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000D462 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000D467 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000D46C F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D471 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000D476 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000D47B F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000D480 0A                         @sloped:	dc.b $A
0000D481 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0 ; sloped platform (catches fire)
0000D486 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000D48B 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D490 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000D495 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000D49A F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D49F C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000D4A4 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000D4A9 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000D4AE E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000D4B3 06                         @narrow:	dc.b 6
0000D4B4 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0 ; narrow platform
0000D4B9 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D4BE 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000D4C3 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000D4C8 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D4CD 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000D4D2                            		even
0000D4D2                            		even
0000D4D2                            Map_Fire:	include	"_maps\Fireballs.asm"
0000D4D2                            ; --------------------------------------------------------------------------------
0000D4D2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D4D2                            ; --------------------------------------------------------------------------------
0000D4D2                            
0000D4D2                            SME_gyvTV:	
0000D4D2 0000 0000                  		dc.w SME_gyvTV_C-SME_gyvTV, SME_gyvTV_12-SME_gyvTV	
0000D4D6 0000 0000                  		dc.w SME_gyvTV_18-SME_gyvTV, SME_gyvTV_1E-SME_gyvTV	
0000D4DA 0000 0000                  		dc.w SME_gyvTV_24-SME_gyvTV, SME_gyvTV_2A-SME_gyvTV	
0000D4DE 01                         SME_gyvTV_C:	dc.b 1	
0000D4DF E807 6000 F8               		dc.b $E8, 7, $60, 0, $F8	
0000D4E4 01                         SME_gyvTV_12:	dc.b 1	
0000D4E5 E807 6008 F8               		dc.b $E8, 7, $60, 8, $F8	
0000D4EA 01                         SME_gyvTV_18:	dc.b 1	
0000D4EB F006 6010 F8               		dc.b $F0, 6, $60, $10, $F8	
0000D4F0 01                         SME_gyvTV_1E:	dc.b 1	
0000D4F1 F80D 6016 E8               		dc.b $F8, $D, $60, $16, $E8	
0000D4F6 01                         SME_gyvTV_24:	dc.b 1	
0000D4F7 F80D 601E E8               		dc.b $F8, $D, $60, $1E, $E8	
0000D4FC 01                         SME_gyvTV_2A:	dc.b 1	
0000D4FD F809 6026 F0               		dc.b $F8, 9, $60, $26, $F0	
0000D502                            		even
0000D502                            		even
0000D502                            		include	"_incObj\30 MZ Large Green Glass Blocks.asm"
0000D502                            ; ---------------------------------------------------------------------------
0000D502                            ; Object 30 - large green glass blocks (MZ)
0000D502                            ; ---------------------------------------------------------------------------
0000D502                            
0000D502                            GlassBlock:
0000D502 7000                       		moveq	#0,d0
0000D504 1028 0024                  		move.b	obRoutine(a0),d0
0000D508 323B 0000                  		move.w	Glass_Index(pc,d0.w),d1
0000D50C 4EBB 1000                  		jsr	Glass_Index(pc,d1.w)
0000D52E 6000 0000                  		bra.w	DisplaySprite
0000D532                            ; ===========================================================================
0000D532                            
0000D532                            Glass_Delete:
0000D532 6000 0000                  		bra.w	DeleteObject
0000D536                            ; ===========================================================================
0000D536 0000                       Glass_Index:	dc.w Glass_Main-Glass_Index
0000D538 0000                       		dc.w Glass_Block012-Glass_Index
0000D53A 0000                       		dc.w Glass_Reflect012-Glass_Index
0000D53C 0000                       		dc.w Glass_Block34-Glass_Index
0000D53E 0000                       		dc.w Glass_Reflect34-Glass_Index
0000D540                            
0000D540 =00000032                  glass_dist:	equ $32		; distance block moves when switch is pressed
0000D540 =0000003C                  glass_parent:	equ $3C		; address of parent object
0000D540                            
0000D540 0200 00                    Glass_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000D543 0400 01                    		dc.b 4,	0, 1
0000D546 0600 02                    Glass_Vars2:	dc.b 6,	0, 2
0000D549 0800 01                    		dc.b 8,	0, 1
0000D54C                            ; ===========================================================================
0000D54C                            
0000D54C                            Glass_Main:	; Routine 0
0000D54C 45F9 0000 D540             		lea	(Glass_Vars1).l,a2
0000D552 7201                       		moveq	#1,d1
0000D554 117C 0048 0016             		move.b	#$48,obHeight(a0)
0000D55A 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object type 0/1/2 ?
0000D560 6500                       		bcs.s	@IsType012	; if yes, branch
0000D562                            
0000D562 45F9 0000 D546             		lea	(Glass_Vars2).l,a2
0000D568 7201                       		moveq	#1,d1
0000D56A 117C 0038 0016             		move.b	#$38,obHeight(a0)
0000D570                            
0000D570                            	@IsType012:
0000D570 2248                       		movea.l	a0,a1
0000D572 6000                       		bra.s	@Load		; load main object
0000D574                            ; ===========================================================================
0000D574                            
0000D574                            	@Repeat:
0000D574 6100 0000                  		bsr.w	FindNextFreeObj
0000D578 6600                       		bne.s	@Fail
0000D57A                            
0000D57A                            @Load:
0000D57A 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D57E 12BC 0000                  		move.b	#id_GlassBlock,0(a1)
0000D582 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D588 101A                       		move.b	(a2)+,d0
0000D58A 4880                       		ext.w	d0
0000D58C D068 000C                  		add.w	obY(a0),d0
0000D590 3340 000C                  		move.w	d0,obY(a1)
0000D594 237C 0000 0000 0004        		move.l	#Map_Glass,obMap(a1)
0000D59C 337C C38E 0002             		move.w	#$C38E,obGfx(a1)
0000D5A2 137C 0004 0001             		move.b	#4,obRender(a1)
0000D5A8 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D5AE 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D5B4 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000D5BA 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D5C0 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D5C4 2348 003C                  		move.l	a0,glass_parent(a1)
0000D5C8 51C9 FFAA                  		dbf	d1,@Repeat	; repeat once to load "reflection object"
0000D5CC                            
0000D5CC 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D5D2 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D5D8 5029 0028                  		addq.b	#8,obSubtype(a1)
0000D5DC 0229 000F 0028             		andi.b	#$F,obSubtype(a1)
0000D5E2                            
0000D5E2                            	@Fail:
0000D5E2 317C 0090 0032             		move.w	#$90,glass_dist(a0)
0000D5E8 08E8 0004 0001             		bset	#4,obRender(a0)
0000D5EE                            
0000D5EE                            Glass_Block012:	; Routine 2
0000D5EE 6100 0000                  		bsr.w	Glass_Types
0000D5F2 323C 002B                  		move.w	#$2B,d1
0000D5F6 343C 0048                  		move.w	#$48,d2
0000D5FA 363C 0049                  		move.w	#$49,d3
0000D5FE 3828 0008                  		move.w	obX(a0),d4
0000D602 6000 0000                  		bra.w	SolidObject
0000D606                            ; ===========================================================================
0000D606                            
0000D606                            Glass_Reflect012:
0000D606                            		; Routine 4
0000D606 2268 003C                  		movea.l	$3C(a0),a1
0000D60A 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D610 6000 0000                  		bra.w	Glass_Types
0000D614                            ; ===========================================================================
0000D614                            
0000D614                            Glass_Block34:	; Routine 6
0000D614 6100 0000                  		bsr.w	Glass_Types
0000D618 323C 002B                  		move.w	#$2B,d1
0000D61C 343C 0038                  		move.w	#$38,d2
0000D620 363C 0039                  		move.w	#$39,d3
0000D624 3828 0008                  		move.w	obX(a0),d4
0000D628 6000 0000                  		bra.w	SolidObject
0000D62C                            ; ===========================================================================
0000D62C                            
0000D62C                            Glass_Reflect34:
0000D62C                            		; Routine 8
0000D62C 2268 003C                  		movea.l	$3C(a0),a1
0000D630 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D636 3169 000C 0030             		move.w	obY(a1),$30(a0)
0000D63C 6000 0000                  		bra.w	Glass_Types
0000D640                            
0000D640                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D640                            
0000D640                            
0000D640                            Glass_Types:
0000D640 7000                       		moveq	#0,d0
0000D642 1028 0028                  		move.b	obSubtype(a0),d0
0000D646 0240 0007                  		andi.w	#7,d0
0000D64A D040                       		add.w	d0,d0
0000D64C 323B 0000                  		move.w	Glass_TypeIndex(pc,d0.w),d1
0000D650 4EFB 1000                  		jmp	Glass_TypeIndex(pc,d1.w)
0000D654                            ; End of function Glass_Types
0000D654                            
0000D654                            ; ===========================================================================
0000D654 0000                       Glass_TypeIndex:dc.w Glass_Type00-Glass_TypeIndex
0000D656 0000                       		dc.w Glass_Type01-Glass_TypeIndex
0000D658 0000                       		dc.w Glass_Type02-Glass_TypeIndex
0000D65A 0000                       		dc.w Glass_Type03-Glass_TypeIndex
0000D65C 0000                       		dc.w Glass_Type04-Glass_TypeIndex
0000D65E                            ; ===========================================================================
0000D65E                            
0000D65E                            Glass_Type00:
0000D65E 4E75                       		rts	
0000D660                            ; ===========================================================================
0000D660                            
0000D660                            Glass_Type01:
0000D660 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D664 323C 0040                  		move.w	#$40,d1
0000D668 6000                       		bra.s	loc_B514
0000D66A                            ; ===========================================================================
0000D66A                            
0000D66A                            Glass_Type02:
0000D66A 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D66E 323C 0040                  		move.w	#$40,d1
0000D672 4440                       		neg.w	d0
0000D674 D041                       		add.w	d1,d0
0000D676                            
0000D676                            loc_B514:
0000D676 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D67C 6700                       		beq.s	loc_B526
0000D67E 4440                       		neg.w	d0
0000D680 D041                       		add.w	d1,d0
0000D682 E208                       		lsr.b	#1,d0
0000D684 0640 0020                  		addi.w	#$20,d0
0000D688                            
0000D688                            loc_B526:
0000D688 6000 0000                  		bra.w	loc_B5EE
0000D68C                            ; ===========================================================================
0000D68C                            
0000D68C                            Glass_Type03:
0000D68C 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D692 6700                       		beq.s	loc_B53E
0000D694 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D698 0440 0010                  		subi.w	#$10,d0
0000D69C 6000 0000                  		bra.w	loc_B5EE
0000D6A0                            ; ===========================================================================
0000D6A0                            
0000D6A0                            loc_B53E:
0000D6A0 0828 0003 0022             		btst	#3,obStatus(a0)
0000D6A6 6600                       		bne.s	loc_B54E
0000D6A8 08A8 0000 0034             		bclr	#0,$34(a0)
0000D6AE 6000                       		bra.s	loc_B582
0000D6B0                            ; ===========================================================================
0000D6B0                            
0000D6B0                            loc_B54E:
0000D6B0 4A28 0034                  		tst.b	$34(a0)
0000D6B4 6600                       		bne.s	loc_B582
0000D6B6 117C 0001 0034             		move.b	#1,$34(a0)
0000D6BC 08E8 0000 0035             		bset	#0,$35(a0)
0000D6C2 6700                       		beq.s	loc_B582
0000D6C4 08E8 0007 0034             		bset	#7,$34(a0)
0000D6CA 317C 0010 0036             		move.w	#$10,$36(a0)
0000D6D0 117C 000A 0038             		move.b	#$A,$38(a0)
0000D6D6 0C68 0040 0032             		cmpi.w	#$40,glass_dist(a0)
0000D6DC 6600                       		bne.s	loc_B582
0000D6DE 317C 0040 0036             		move.w	#$40,$36(a0)
0000D6E4                            
0000D6E4                            loc_B582:
0000D6E4 4A28 0034                  		tst.b	$34(a0)
0000D6E8 6A00                       		bpl.s	loc_B5AA
0000D6EA 4A28 0038                  		tst.b	$38(a0)
0000D6EE 6700                       		beq.s	loc_B594
0000D6F0 5328 0038                  		subq.b	#1,$38(a0)
0000D6F4 6600                       		bne.s	loc_B5AA
0000D6F6                            
0000D6F6                            loc_B594:
0000D6F6 4A68 0032                  		tst.w	glass_dist(a0)
0000D6FA 6700                       		beq.s	loc_B5A4
0000D6FC 5368 0032                  		subq.w	#1,glass_dist(a0)
0000D700 5368 0036                  		subq.w	#1,$36(a0)
0000D704 6600                       		bne.s	loc_B5AA
0000D706                            
0000D706                            loc_B5A4:
0000D706 08A8 0007 0034             		bclr	#7,$34(a0)
0000D70C                            
0000D70C                            loc_B5AA:
0000D70C 3028 0032                  		move.w	glass_dist(a0),d0
0000D710 6000                       		bra.s	loc_B5EE
0000D712                            ; ===========================================================================
0000D712                            
0000D712                            Glass_Type04:
0000D712 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D718 6700                       		beq.s	Glass_ChkSwitch
0000D71A 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D71E 0440 0010                  		subi.w	#$10,d0
0000D722 6000                       		bra.s	loc_B5EE
0000D724                            ; ===========================================================================
0000D724                            
0000D724                            Glass_ChkSwitch:
0000D724 4A28 0034                  		tst.b	$34(a0)
0000D728 6600                       		bne.s	loc_B5E0
0000D72A 45F8 F7E0                  		lea	(f_switch).w,a2
0000D72E 7000                       		moveq	#0,d0
0000D730 1028 0028                  		move.b	obSubtype(a0),d0 ; load object type number
0000D734 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000D736 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000D73A 6700                       		beq.s	loc_B5EA	; if not, branch
0000D73C 117C 0001 0034             		move.b	#1,$34(a0)
0000D742                            
0000D742                            loc_B5E0:
0000D742 4A68 0032                  		tst.w	glass_dist(a0)
0000D746 6700                       		beq.s	loc_B5EA
0000D748 5568 0032                  		subq.w	#2,glass_dist(a0)
0000D74C                            
0000D74C                            loc_B5EA:
0000D74C 3028 0032                  		move.w	glass_dist(a0),d0
0000D750                            
0000D750                            loc_B5EE:
0000D750 3228 0030                  		move.w	$30(a0),d1
0000D754 9240                       		sub.w	d0,d1
0000D756 3141 000C                  		move.w	d1,obY(a0)
0000D75A 4E75                       		rts	
0000D75A 4E75                       		rts	
0000D75C                            Map_Glass:	include	"_maps\MZ Large Green Glass Blocks.asm"
0000D75C                            ; --------------------------------------------------------------------------------
0000D75C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D75C                            ; --------------------------------------------------------------------------------
0000D75C                            
0000D75C                            SME_NEyTf:	
0000D75C 0000 0000                  		dc.w SME_NEyTf_6-SME_NEyTf, SME_NEyTf_43-SME_NEyTf	
0000D760 0000                       		dc.w SME_NEyTf_4E-SME_NEyTf	
0000D762 0C                         SME_NEyTf_6:	dc.b $C	
0000D763 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0	
0000D768 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0	
0000D76D C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0	
0000D772 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0	
0000D777 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0	
0000D77C E00F 0804 00               		dc.b $E0, $F, 8, 4, 0	
0000D781 000F 0004 E0               		dc.b 0, $F, 0, 4, $E0	
0000D786 000F 0804 00               		dc.b 0, $F, 8, 4, 0	
0000D78B 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0	
0000D790 200F 0804 00               		dc.b $20, $F, 8, 4, 0	
0000D795 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0	
0000D79A 400C 1800 00               		dc.b $40, $C, $18, 0, 0	
0000D79F 02                         SME_NEyTf_43:	dc.b 2	
0000D7A0 0806 6014 F0               		dc.b 8, 6, $60, $14, $F0	
0000D7A5 0006 6014 00               		dc.b 0, 6, $60, $14, 0	
0000D7AA 0A                         SME_NEyTf_4E:	dc.b $A	
0000D7AB C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0	
0000D7B0 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0	
0000D7B5 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0	
0000D7BA D00F 0804 00               		dc.b $D0, $F, 8, 4, 0	
0000D7BF F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0	
0000D7C4 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0	
0000D7C9 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0	
0000D7CE 100F 0804 00               		dc.b $10, $F, 8, 4, 0	
0000D7D3 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0	
0000D7D8 300C 1800 00               		dc.b $30, $C, $18, 0, 0	
0000D7DE 00                         		even
0000D7DE 00                         		even
0000D7DE                            		include	"_incObj\31 Chained Stompers.asm"
0000D7DE                            ; ---------------------------------------------------------------------------
0000D7DE                            ; Object 31 - stomping metal blocks on chains (MZ)
0000D7DE                            ; ---------------------------------------------------------------------------
0000D7DE                            
0000D7DE                            ChainStomp:
0000D7DE 7000                       		moveq	#0,d0
0000D7E0 1028 0024                  		move.b	obRoutine(a0),d0
0000D7E4 323B 0000                  		move.w	CStom_Index(pc,d0.w),d1
0000D7E8 4EFB 1000                  		jmp	CStom_Index(pc,d1.w)
0000D7EC                            ; ===========================================================================
0000D7EC 0000                       CStom_Index:	dc.w CStom_Main-CStom_Index
0000D7EE 0000                       		dc.w loc_B798-CStom_Index
0000D7F0 0000                       		dc.w loc_B7FE-CStom_Index
0000D7F2 0000                       		dc.w CStom_Display2-CStom_Index
0000D7F4 0000                       		dc.w loc_B7E2-CStom_Index
0000D7F6                            
0000D7F6 =0000003A                  CStom_switch:	equ $3A			; switch number for the current stomper
0000D7F6                            
0000D7F6 0000                       CStom_SwchNums:	dc.b 0,	0		; switch number, obj number
0000D7F8 0100                       		dc.b 1,	0
0000D7FA                            
0000D7FA 0200 00                    CStom_Var:	dc.b 2,	0, 0		; routine number, y-position, frame number
0000D7FD 041C 01                    		dc.b 4,	$1C, 1
0000D800 08CC 03                    		dc.b 8,	$CC, 3
0000D803 06F0 02                    		dc.b 6,	$F0, 2
0000D806                            
0000D806 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000D80A 5000 7800                  		dc.w $5000, $7800
0000D80E 3800 5800                  		dc.w $3800, $5800
0000D812 B800                       		dc.w $B800
0000D814                            ; ===========================================================================
0000D814                            
0000D814                            CStom_Main:	; Routine 0
0000D814 7000                       		moveq	#0,d0
0000D816 1028 0028                  		move.b	obSubtype(a0),d0
0000D81A 6A00                       		bpl.s	loc_B6CE
0000D81C 0240 007F                  		andi.w	#$7F,d0
0000D820 D040                       		add.w	d0,d0
0000D822 45FB 00D2                  		lea	CStom_SwchNums(pc,d0.w),a2
0000D826 115A 003A                  		move.b	(a2)+,CStom_switch(a0)
0000D82A 101A                       		move.b	(a2)+,d0
0000D82C 1140 0028                  		move.b	d0,obSubtype(a0)
0000D830                            
0000D830                            loc_B6CE:
0000D830 0200 000F                  		andi.b	#$F,d0
0000D834 D040                       		add.w	d0,d0
0000D836 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000D83A 4A40                       		tst.w	d0
0000D83C 6600                       		bne.s	loc_B6E0
0000D83E 3142 0032                  		move.w	d2,$32(a0)
0000D842                            
0000D842                            loc_B6E0:
0000D842 45F9 0000 D7FA             		lea	(CStom_Var).l,a2
0000D848 2248                       		movea.l	a0,a1
0000D84A 7203                       		moveq	#3,d1
0000D84C 6000                       		bra.s	CStom_MakeStomper
0000D84E                            ; ===========================================================================
0000D84E                            
0000D84E                            CStom_Loop:
0000D84E 6100 0000                  		bsr.w	FindNextFreeObj
0000D852 6600 0000                  		bne.w	CStom_SetSize
0000D856                            
0000D856                            CStom_MakeStomper:
0000D856 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D85A 12BC 0000                  		move.b	#id_ChainStomp,0(a1)
0000D85E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D864 101A                       		move.b	(a2)+,d0
0000D866 4880                       		ext.w	d0
0000D868 D068 000C                  		add.w	obY(a0),d0
0000D86C 3340 000C                  		move.w	d0,obY(a1)
0000D870 237C 0000 0000 0004        		move.l	#Map_CStom,obMap(a1)
0000D878 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000D87E 137C 0004 0001             		move.b	#4,obRender(a1)
0000D884 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D88A 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D890 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D896 3342 0034                  		move.w	d2,$34(a1)
0000D89A 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D8A0 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D8A4 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0000D8AA 6600                       		bne.s	loc_B76A
0000D8AC 5341                       		subq.w	#1,d1
0000D8AE 1028 0028                  		move.b	obSubtype(a0),d0
0000D8B2 0240 00F0                  		andi.w	#$F0,d0
0000D8B6 0C40 0020                  		cmpi.w	#$20,d0
0000D8BA 679A                       		beq.s	CStom_MakeStomper
0000D8BC 137C 0038 0014             		move.b	#$38,obActWid(a1)
0000D8C2 137C 0090 0020             		move.b	#$90,obColType(a1)
0000D8C8 5241                       		addq.w	#1,d1
0000D8CA                            
0000D8CA                            loc_B76A:
0000D8CA 2348 003C                  		move.l	a0,$3C(a1)
0000D8CE 51C9 FF7E                  		dbf	d1,CStom_Loop
0000D8D2                            
0000D8D2 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D8D8                            
0000D8D8                            CStom_SetSize:
0000D8D8 7000                       		moveq	#0,d0
0000D8DA 1028 0028                  		move.b	obSubtype(a0),d0
0000D8DE E648                       		lsr.w	#3,d0
0000D8E0 0200 000E                  		andi.b	#$E,d0
0000D8E4 45FB 0000                  		lea	CStom_Var2(pc,d0.w),a2
0000D8E8 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000D8EC 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000D8F0 6000                       		bra.s	loc_B798
0000D8F2                            ; ===========================================================================
0000D8F2 3800                       CStom_Var2:	dc.b $38, 0		; width, frame number
0000D8F4 3009                       		dc.b $30, 9
0000D8F6 100A                       		dc.b $10, $A
0000D8F8                            ; ===========================================================================
0000D8F8                            
0000D8F8                            loc_B798:	; Routine 2
0000D8F8 6100 0000                  		bsr.w	CStom_Types
0000D8FC 31E8 000C F7A4             		move.w	obY(a0),(v_obj31ypos).w
0000D902 7200                       		moveq	#0,d1
0000D904 1228 0014                  		move.b	obActWid(a0),d1
0000D908 0641 000B                  		addi.w	#$B,d1
0000D90C 343C 000C                  		move.w	#$C,d2
0000D910 363C 000D                  		move.w	#$D,d3
0000D914 3828 0008                  		move.w	obX(a0),d4
0000D918 6100 0000                  		bsr.w	SolidObject
0000D91C 0828 0003 0022             		btst	#3,obStatus(a0)
0000D922 6700                       		beq.s	CStom_Display
0000D924 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D92A 6400                       		bcc.s	CStom_Display
0000D92C 2448                       		movea.l	a0,a2
0000D92E 41F8 D000                  		lea	(v_player).w,a0
0000D932 4EB9 0000 0000             		jsr	(KillSonic).l
0000D938 204A                       		movea.l	a2,a0
0000D93A                            
0000D93A                            CStom_Display:
0000D93A 6100 0000                  		bsr.w	DisplaySprite
0000D93E 6000 0000                  		bra.w	CStom_ChkDel
0000D942                            ; ===========================================================================
0000D942                            
0000D942                            loc_B7E2:	; Routine 8
0000D942 117C 0080 0016             		move.b	#$80,obHeight(a0)
0000D948 08E8 0004 0001             		bset	#4,obRender(a0)
0000D94E 2268 003C                  		movea.l	$3C(a0),a1
0000D952 1029 0032                  		move.b	$32(a1),d0
0000D956 EA08                       		lsr.b	#5,d0
0000D958 5600                       		addq.b	#3,d0
0000D95A 1140 001A                  		move.b	d0,obFrame(a0)
0000D95E                            
0000D95E                            loc_B7FE:	; Routine 4
0000D95E 2268 003C                  		movea.l	$3C(a0),a1
0000D962 7000                       		moveq	#0,d0
0000D964 1029 0032                  		move.b	$32(a1),d0
0000D968 D068 0030                  		add.w	$30(a0),d0
0000D96C 3140 000C                  		move.w	d0,obY(a0)
0000D970                            
0000D970                            CStom_Display2:	; Routine 6
0000D970 6100 0000                  		bsr.w	DisplaySprite
0000D974                            
0000D974                            CStom_ChkDel:
0000D992 4E75                       		rts	
0000D994                            ; ===========================================================================
0000D994                            
0000D994                            CStom_Types:
0000D994 1028 0028                  		move.b	obSubtype(a0),d0
0000D998 0240 000F                  		andi.w	#$F,d0
0000D99C D040                       		add.w	d0,d0
0000D99E 323B 0000                  		move.w	CStom_TypeIndex(pc,d0.w),d1
0000D9A2 4EFB 1000                  		jmp	CStom_TypeIndex(pc,d1.w)
0000D9A6                            ; ===========================================================================
0000D9A6 0000                       CStom_TypeIndex:dc.w CStom_Type00-CStom_TypeIndex
0000D9A8 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D9AA 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D9AC 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000D9AE 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D9B0 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000D9B2 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D9B4                            ; ===========================================================================
0000D9B4                            
0000D9B4                            CStom_Type00:
0000D9B4 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
0000D9B8 7000                       		moveq	#0,d0
0000D9BA 1028 003A                  		move.b	CStom_switch(a0),d0 ; move number 0 or 1 to d0
0000D9BE 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000D9C2 6700                       		beq.s	loc_B8A8	; if not, branch
0000D9C4 4A78 F7A4                  		tst.w	(v_obj31ypos).w
0000D9C8 6A00                       		bpl.s	loc_B872
0000D9CA 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D9D0 6700                       		beq.s	loc_B8A0
0000D9D2                            
0000D9D2                            loc_B872:
0000D9D2 4A68 0032                  		tst.w	$32(a0)
0000D9D6 6700                       		beq.s	loc_B8A0
0000D9D8 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000D9DC 0200 000F                  		andi.b	#$F,d0
0000D9E0 6600                       		bne.s	loc_B892
0000D9E2 4A28 0001                  		tst.b	1(a0)
0000D9E6 6A00                       		bpl.s	loc_B892
0000D9F2                            
0000D9F2                            loc_B892:
0000D9F2 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D9F8 6400                       		bcc.s	CStom_Restart
0000D9FA 317C 0000 0032             		move.w	#0,$32(a0)
0000DA00                            
0000DA00                            loc_B8A0:
0000DA00 317C 0000 0012             		move.w	#0,obVelY(a0)
0000DA06 6000                       		bra.s	CStom_Restart
0000DA08                            ; ===========================================================================
0000DA08                            
0000DA08                            loc_B8A8:
0000DA08 3228 0034                  		move.w	$34(a0),d1
0000DA0C B268 0032                  		cmp.w	$32(a0),d1
0000DA10 6700                       		beq.s	CStom_Restart
0000DA12 3028 0012                  		move.w	obVelY(a0),d0
0000DA16 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000DA1C D168 0032                  		add.w	d0,$32(a0)
0000DA20 B268 0032                  		cmp.w	$32(a0),d1
0000DA24 6200                       		bhi.s	CStom_Restart
0000DA26 3141 0032                  		move.w	d1,$32(a0)
0000DA2A 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000DA30 4A28 0001                  		tst.b	obRender(a0)
0000DA34 6A00                       		bpl.s	CStom_Restart
0000DA40                            
0000DA40                            CStom_Restart:
0000DA40 7000                       		moveq	#0,d0
0000DA42 1028 0032                  		move.b	$32(a0),d0
0000DA46 D068 0030                  		add.w	$30(a0),d0
0000DA4A 3140 000C                  		move.w	d0,obY(a0)
0000DA4E 4E75                       		rts	
0000DA50                            ; ===========================================================================
0000DA50                            
0000DA50                            CStom_Type01:
0000DA50 4A68 0036                  		tst.w	$36(a0)
0000DA54 6700                       		beq.s	loc_B938
0000DA56 4A68 0038                  		tst.w	$38(a0)
0000DA5A 6700                       		beq.s	loc_B902
0000DA5C 5368 0038                  		subq.w	#1,$38(a0)
0000DA60 6000                       		bra.s	loc_B97C
0000DA62                            ; ===========================================================================
0000DA62                            
0000DA62                            loc_B902:
0000DA62 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000DA66 0200 000F                  		andi.b	#$F,d0
0000DA6A 6600                       		bne.s	loc_B91C
0000DA6C 4A28 0001                  		tst.b	obRender(a0)
0000DA70 6A00                       		bpl.s	loc_B91C
0000DA7C                            
0000DA7C                            loc_B91C:
0000DA7C 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DA82 6400                       		bcc.s	loc_B97C
0000DA84 317C 0000 0032             		move.w	#0,$32(a0)
0000DA8A 317C 0000 0012             		move.w	#0,obVelY(a0)
0000DA90 317C 0000 0036             		move.w	#0,$36(a0)
0000DA96 6000                       		bra.s	loc_B97C
0000DA98                            ; ===========================================================================
0000DA98                            
0000DA98                            loc_B938:
0000DA98 3228 0034                  		move.w	$34(a0),d1
0000DA9C B268 0032                  		cmp.w	$32(a0),d1
0000DAA0 6700                       		beq.s	loc_B97C
0000DAA2 3028 0012                  		move.w	obVelY(a0),d0
0000DAA6 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000DAAC D168 0032                  		add.w	d0,$32(a0)
0000DAB0 B268 0032                  		cmp.w	$32(a0),d1
0000DAB4 6200                       		bhi.s	loc_B97C
0000DAB6 3141 0032                  		move.w	d1,$32(a0)
0000DABA 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000DAC0 317C 0001 0036             		move.w	#1,$36(a0)
0000DAC6 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DACC 4A28 0001                  		tst.b	obRender(a0)
0000DAD0 6A00                       		bpl.s	loc_B97C
0000DADC                            
0000DADC                            loc_B97C:
0000DADC 6000 FF62                  		bra.w	CStom_Restart
0000DAE0                            ; ===========================================================================
0000DAE0                            
0000DAE0                            CStom_Type03:
0000DAE0 3038 D008                  		move.w	(v_player+obX).w,d0
0000DAE4 9068 0008                  		sub.w	obX(a0),d0
0000DAE8 6400                       		bcc.s	loc_B98C
0000DAEA 4440                       		neg.w	d0
0000DAEC                            
0000DAEC                            loc_B98C:
0000DAEC 0C40 0090                  		cmpi.w	#$90,d0
0000DAF0 6400                       		bcc.s	loc_B996
0000DAF2 5228 0028                  		addq.b	#1,obSubtype(a0)
0000DAF6                            
0000DAF6                            loc_B996:
0000DAF6 6000 FF48                  		bra.w	CStom_Restart
0000DAF6 6000 FF48                  		bra.w	CStom_Restart
0000DAFA                            		include	"_incObj\45 Sideways Stomper.asm"
0000DAFA                            ; ---------------------------------------------------------------------------
0000DAFA                            ; Object 45 - spiked metal block from beta version (MZ)
0000DAFA                            ; ---------------------------------------------------------------------------
0000DAFA                            
0000DAFA                            SideStomp:
0000DAFA 7000                       		moveq	#0,d0
0000DAFC 1028 0024                  		move.b	obRoutine(a0),d0
0000DB00 323B 0000                  		move.w	SStom_Index(pc,d0.w),d1
0000DB04 4EFB 1000                  		jmp	SStom_Index(pc,d1.w)
0000DB08                            ; ===========================================================================
0000DB08 0000                       SStom_Index:	dc.w SStom_Main-SStom_Index
0000DB0A 0000                       		dc.w SStom_Solid-SStom_Index
0000DB0C 0000                       		dc.w loc_BA8E-SStom_Index
0000DB0E 0000                       		dc.w SStom_Display-SStom_Index
0000DB10 0000                       		dc.w SStom_Pole-SStom_Index
0000DB12                            
0000DB12                            		;	routine		frame
0000DB12                            		;		 xpos
0000DB12 0204 00                    SStom_Var:	dc.b	2,  	 4,	0	; main block
0000DB15 04E4 01                    		dc.b	4,	-$1C,	1	; spikes
0000DB18 0834 03                    		dc.b	8,	 $34,	3	; pole
0000DB1B 0628 02                    		dc.b	6,	 $28,	2	; wall bracket
0000DB1E                            
0000DB1E                            ;word_B9BE:	; Note that this indicates three subtypes
0000DB1E 3800                       SStom_Len:	dc.w $3800	; short
0000DB20 A000                       		dc.w $A000	; long
0000DB22 5000                       		dc.w $5000	; medium
0000DB24                            ; ===========================================================================
0000DB24                            
0000DB24                            SStom_Main:	; Routine 0
0000DB24 7000                       		moveq	#0,d0
0000DB26 1028 0028                  		move.b	obSubtype(a0),d0
0000DB2A D040                       		add.w	d0,d0
0000DB2C 343B 00F0                  		move.w	SStom_Len(pc,d0.w),d2
0000DB30 45F9 0000 DB12             		lea	(SStom_Var).l,a2
0000DB36 2248                       		movea.l	a0,a1
0000DB38 7203                       		moveq	#3,d1
0000DB3A 6000                       		bra.s	@load
0000DB3C                            
0000DB3C                            	@loop:
0000DB3C 6100 0000                  		bsr.w	FindNextFreeObj
0000DB40 6600                       		bne.s	@fail
0000DB42                            
0000DB42                            	@load:
0000DB42 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000DB46 12BC 0000                  		move.b	#id_SideStomp,0(a1)
0000DB4A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000DB50 101A                       		move.b	(a2)+,d0
0000DB52 4880                       		ext.w	d0
0000DB54 D068 0008                  		add.w	obX(a0),d0
0000DB58 3340 0008                  		move.w	d0,obX(a1)
0000DB5C 237C 0000 0000 0004        		move.l	#Map_SStom,obMap(a1)
0000DB64 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000DB6A 137C 0004 0001             		move.b	#4,obRender(a1)
0000DB70 3369 0008 0030             		move.w	obX(a1),$30(a1)
0000DB76 3368 0008 003A             		move.w	obX(a0),$3A(a1)
0000DB7C 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000DB82 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000DB88 3342 0034                  		move.w	d2,$34(a1)
0000DB8C 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000DB92 0C12 0001                  		cmpi.b	#1,(a2)		; is subobject spikes?
0000DB96 6600                       		bne.s	@notspikes	; if not, branch
0000DB98 137C 0091 0020             		move.b	#$91,obColType(a1) ; use harmful collision type
0000DB9E                            
0000DB9E                            	@notspikes:
0000DB9E 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000DBA2 2348 003C                  		move.l	a0,$3C(a1)
0000DBA6 51C9 FF94                  		dbf	d1,@loop	; repeat 3 times
0000DBAA                            
0000DBAA 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000DBB0                            
0000DBB0                            	@fail:
0000DBB0 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DBB6                            
0000DBB6                            SStom_Solid:	; Routine 2
0000DBB6 3F28 0008                  		move.w	obX(a0),-(sp)
0000DBBA 6100 0000                  		bsr.w	SStom_Move
0000DBBE 323C 0017                  		move.w	#$17,d1
0000DBC2 343C 0020                  		move.w	#$20,d2
0000DBC6 363C 0020                  		move.w	#$20,d3
0000DBCA 381F                       		move.w	(sp)+,d4
0000DBCC 6100 0000                  		bsr.w	SolidObject
0000DBD0 6100 0000                  		bsr.w	DisplaySprite
0000DBD4 6000 0000                  		bra.w	SStom_ChkDel
0000DBD8                            ; ===========================================================================
0000DBD8                            
0000DBD8                            SStom_Pole:	; Routine 8
0000DBD8 2268 003C                  		movea.l	$3C(a0),a1
0000DBDC 1029 0032                  		move.b	$32(a1),d0
0000DBE0 0600 0010                  		addi.b	#$10,d0
0000DBE4 EA08                       		lsr.b	#5,d0
0000DBE6 5600                       		addq.b	#3,d0
0000DBE8 1140 001A                  		move.b	d0,obFrame(a0)
0000DBEC                            
0000DBEC                            loc_BA8E:	; Routine 4
0000DBEC 2268 003C                  		movea.l	$3C(a0),a1
0000DBF0 7000                       		moveq	#0,d0
0000DBF2 1029 0032                  		move.b	$32(a1),d0
0000DBF6 4440                       		neg.w	d0
0000DBF8 D068 0030                  		add.w	$30(a0),d0
0000DBFC 3140 0008                  		move.w	d0,obX(a0)
0000DC00                            
0000DC00                            SStom_Display:	; Routine 6
0000DC00 6100 0000                  		bsr.w	DisplaySprite
0000DC04                            
0000DC04                            SStom_ChkDel:
0000DC22 4E75                       		rts	
0000DC24                            
0000DC24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC24                            
0000DC24                            
0000DC24                            SStom_Move:
0000DC24 7000                       		moveq	#0,d0
0000DC26 1028 0028                  		move.b	obSubtype(a0),d0
0000DC2A D040                       		add.w	d0,d0
0000DC2C 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000DC30 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000DC34                            ; End of function SStom_Move
0000DC34                            
0000DC34                            ; ===========================================================================
0000DC34                            		; This indicates only two subtypes... that do the same thing
0000DC34                            		; Compare to SStom_Len. This breaks subtype 02
0000DC34 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000DC36 0000                       		dc.w loc_BADA-off_BAD6
0000DC38                            ; ===========================================================================
0000DC38                            
0000DC38                            loc_BADA:
0000DC38 4A68 0036                  		tst.w	$36(a0)
0000DC3C 6700                       		beq.s	loc_BB08
0000DC3E 4A68 0038                  		tst.w	$38(a0)
0000DC42 6700                       		beq.s	loc_BAEC
0000DC44 5368 0038                  		subq.w	#1,$38(a0)
0000DC48 6000                       		bra.s	loc_BB3C
0000DC4A                            ; ===========================================================================
0000DC4A                            
0000DC4A                            loc_BAEC:
0000DC4A 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DC50 6400                       		bcc.s	loc_BB3C
0000DC52 317C 0000 0032             		move.w	#0,$32(a0)
0000DC58 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DC5E 317C 0000 0036             		move.w	#0,$36(a0)
0000DC64 6000                       		bra.s	loc_BB3C
0000DC66                            ; ===========================================================================
0000DC66                            
0000DC66                            loc_BB08:
0000DC66 3228 0034                  		move.w	$34(a0),d1
0000DC6A B268 0032                  		cmp.w	$32(a0),d1
0000DC6E 6700                       		beq.s	loc_BB3C
0000DC70 3028 0010                  		move.w	obVelX(a0),d0
0000DC74 0668 0070 0010             		addi.w	#$70,obVelX(a0)
0000DC7A D168 0032                  		add.w	d0,$32(a0)
0000DC7E B268 0032                  		cmp.w	$32(a0),d1
0000DC82 6200                       		bhi.s	loc_BB3C
0000DC84 3141 0032                  		move.w	d1,$32(a0)
0000DC88 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DC8E 317C 0001 0036             		move.w	#1,$36(a0)
0000DC94 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DC9A                            
0000DC9A                            loc_BB3C:
0000DC9A 7000                       		moveq	#0,d0
0000DC9C 1028 0032                  		move.b	$32(a0),d0
0000DCA0 4440                       		neg.w	d0
0000DCA2 D068 0030                  		add.w	$30(a0),d0
0000DCA6 3140 0008                  		move.w	d0,obX(a0)
0000DCAA 4E75                       		rts	
0000DCAA 4E75                       		rts	
0000DCAC                            Map_CStom:	include	"_maps\Chained Stompers.asm"
0000DCAC                            ; ---------------------------------------------------------------------------
0000DCAC                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000DCAC                            ; ---------------------------------------------------------------------------
0000DCAC                            Map_CStom_internal:
0000DCAC 0000                       		dc.w @wideblock-Map_CStom_internal
0000DCAE 0000                       		dc.w @spikes-Map_CStom_internal
0000DCB0 0000                       		dc.w @ceiling-Map_CStom_internal
0000DCB2 0000                       		dc.w @chain1-Map_CStom_internal
0000DCB4 0000                       		dc.w @chain2-Map_CStom_internal
0000DCB6 0000                       		dc.w @chain3-Map_CStom_internal
0000DCB8 0000                       		dc.w @chain4-Map_CStom_internal
0000DCBA 0000                       		dc.w @chain5-Map_CStom_internal
0000DCBC 0000                       		dc.w @chain5-Map_CStom_internal
0000DCBE 0000                       		dc.w @mediumblock-Map_CStom_internal
0000DCC0 0000                       		dc.w @smallblock-Map_CStom_internal
0000DCC2 05                         @wideblock:	dc.b 5
0000DCC3 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000DCC8 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000DCCD EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DCD2 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000DCD7 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000DCDC 05                         @spikes:	dc.b 5
0000DCDD F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000DCE2 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000DCE7 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000DCEC F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000DCF1 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000DCF6 01                         @ceiling:	dc.b 1
0000DCF7 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000DCFC 02                         @chain1:	dc.b 2
0000DCFD 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DD02 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DD07 04                         @chain2:	dc.b 4
0000DD08 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DD0D F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DD12 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DD17 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DD1C 06                         @chain3:	dc.b 6
0000DD1D C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DD22 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DD27 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DD2C F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DD31 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DD36 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DD3B 08                         @chain4:	dc.b 8
0000DD3C A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DD41 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DD46 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DD4B D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DD50 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DD55 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DD5A 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DD5F 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DD64 0A                         @chain5:	dc.b $A
0000DD65 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000DD6A 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000DD6F A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DD74 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DD79 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DD7E D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DD83 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DD88 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DD8D 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DD92 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DD97 05                         @mediumblock:	dc.b 5
0000DD98 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000DD9D F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000DDA2 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000DDA7 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000DDAC EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DDB1 01                         @smallblock:	dc.b 1
0000DDB2 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000DDB8 00                         		even
0000DDB8 00                         		even
0000DDB8                            Map_SStom:	include	"_maps\Sideways Stomper.asm"
0000DDB8                            ; ---------------------------------------------------------------------------
0000DDB8                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000DDB8                            ; ---------------------------------------------------------------------------
0000DDB8                            Map_SStom_internal:
0000DDB8 0000                       		dc.w @block-Map_SStom_internal
0000DDBA 0000                       		dc.w @spikes-Map_SStom_internal
0000DDBC 0000                       		dc.w @wallbracket-Map_SStom_internal
0000DDBE 0000                       		dc.w @pole1-Map_SStom_internal
0000DDC0 0000                       		dc.w @pole2-Map_SStom_internal
0000DDC2 0000                       		dc.w @pole3-Map_SStom_internal
0000DDC4 0000                       		dc.w @pole4-Map_SStom_internal
0000DDC6 0000                       		dc.w @pole5-Map_SStom_internal
0000DDC8 0000                       		dc.w @pole5-Map_SStom_internal
0000DDCA 03                         @block:		dc.b 3
0000DDCB E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4 ; main metal block
0000DDD0 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000DDD5 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000DDDA 03                         @spikes:	dc.b 3
0000DDDB E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0 ; three spikes
0000DDE0 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000DDE5 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000DDEA 01                         @wallbracket:	dc.b 1
0000DDEB F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC ; thing holding it to the wall
0000DDF0 02                         @pole1:		dc.b 2
0000DDF1 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0 ; poles of various lengths
0000DDF6 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DDFB 04                         @pole2:		dc.b 4
0000DDFC F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DE01 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DE06 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DE0B F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DE10 06                         @pole3:		dc.b 6
0000DE11 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DE16 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DE1B F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DE20 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DE25 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DE2A F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DE2F 08                         @pole4:		dc.b 8
0000DE30 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DE35 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DE3A F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DE3F F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DE44 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DE49 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DE4E F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DE53 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DE58 08                         @pole5:		dc.b 8		; Incorrect: this should be $A
0000DE59 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DE5E F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DE63 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DE68 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DE6D F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DE72 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DE77 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DE7C F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DE81 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000DE86 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000DE8B                            		; @pole6 should be here, but it isn't...
0000DE8C 00                         		even
0000DE8C 00                         		even
0000DE8C                            
0000DE8C                            		include	"_incObj\32 Button.asm"
0000DE8C                            ; ---------------------------------------------------------------------------
0000DE8C                            ; Object 32 - buttons (MZ, SYZ, LZ, SBZ)
0000DE8C                            ; ---------------------------------------------------------------------------
0000DE8C                            
0000DE8C                            Button:
0000DE8C 7000                       		moveq	#0,d0
0000DE8E 1028 0024                  		move.b	obRoutine(a0),d0
0000DE92 323B 0000                  		move.w	But_Index(pc,d0.w),d1
0000DE96 4EFB 1000                  		jmp	But_Index(pc,d1.w)
0000DE9A                            ; ===========================================================================
0000DE9A 0000                       But_Index:	dc.w But_Main-But_Index
0000DE9C 0000                       		dc.w But_Pressed-But_Index
0000DE9E                            ; ===========================================================================
0000DE9E                            
0000DE9E                            But_Main:	; Routine 0
0000DE9E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000DEA2 217C 0000 0000 0004        		move.l	#Map_But,obMap(a0)
0000DEAA 317C 4513 0002             		move.w	#$4513,obGfx(a0) ; MZ specific code
0000DEB0 0C38 0002 FE10             		cmpi.b	#id_MZ,(v_zone).w ; is level Marble Zone?
0000DEB6 6700                       		beq.s	But_IsMZ	; if yes, branch
0000DEB8                            
0000DEB8 317C 0513 0002             		move.w	#$513,obGfx(a0)	; SYZ, LZ and SBZ specific code
0000DEBE                            
0000DEBE                            	But_IsMZ:
0000DEBE 117C 0004 0001             		move.b	#4,obRender(a0)
0000DEC4 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DECA 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000DED0 5668 000C                  		addq.w	#3,obY(a0)
0000DED4                            
0000DED4                            But_Pressed:	; Routine 2
0000DED4 4A28 0001                  		tst.b	obRender(a0)
0000DED8 6A00                       		bpl.s	But_Display
0000DEDA 323C 001B                  		move.w	#$1B,d1
0000DEDE 343C 0005                  		move.w	#5,d2
0000DEE2 363C 0005                  		move.w	#5,d3
0000DEE6 3828 0008                  		move.w	obX(a0),d4
0000DEEA 6100 0000                  		bsr.w	SolidObject
0000DEEE 08A8 0000 001A             		bclr	#0,obFrame(a0)	; use "unpressed" frame
0000DEF4 1028 0028                  		move.b	obSubtype(a0),d0
0000DEF8 0240 000F                  		andi.w	#$F,d0
0000DEFC 47F8 F7E0                  		lea	(f_switch).w,a3
0000DF00 47F3 0000                  		lea	(a3,d0.w),a3
0000DF04 7600                       		moveq	#0,d3
0000DF06 0828 0006 0028             		btst	#6,obSubtype(a0)
0000DF0C 6700                       		beq.s	loc_BDB2
0000DF0E 7607                       		moveq	#7,d3
0000DF10                            
0000DF10                            loc_BDB2:
0000DF10 4A28 0028                  		tst.b	obSubtype(a0)
0000DF14 6A00                       		bpl.s	loc_BDBE
0000DF16 6100 0000                  		bsr.w	But_MZBlock
0000DF1A 6600                       		bne.s	loc_BDC8
0000DF1C                            
0000DF1C                            loc_BDBE:
0000DF1C 4A28 0025                  		tst.b	ob2ndRout(a0)
0000DF20 6600                       		bne.s	loc_BDC8
0000DF22 0793                       		bclr	d3,(a3)
0000DF24 6000                       		bra.s	loc_BDDE
0000DF26                            ; ===========================================================================
0000DF26                            
0000DF26                            loc_BDC8:
0000DF26 4A13                       		tst.b	(a3)
0000DF28 6600                       		bne.s	loc_BDD6
0000DF34                            
0000DF34                            loc_BDD6:
0000DF34 07D3                       		bset	d3,(a3)
0000DF36 08E8 0000 001A             		bset	#0,obFrame(a0)	; use "pressed"	frame
0000DF3C                            
0000DF3C                            loc_BDDE:
0000DF3C 0828 0005 0028             		btst	#5,obSubtype(a0)
0000DF42 6700                       		beq.s	But_Display
0000DF44 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000DF48 6A00                       		bpl.s	But_Display
0000DF4A 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000DF50 0868 0001 001A             		bchg	#1,obFrame(a0)
0000DF56                            
0000DF56                            But_Display:
0000DF56 6100 0000                  		bsr.w	DisplaySprite
0000DF78 4E75                       		rts	
0000DF7A                            ; ===========================================================================
0000DF7A                            
0000DF7A                            But_Delete:
0000DF7A 6100 0000                  		bsr.w	DeleteObject
0000DF7E 4E75                       		rts	
0000DF80                            
0000DF80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF80                            
0000DF80                            
0000DF80                            But_MZBlock:
0000DF80 3F03                       		move.w	d3,-(sp)
0000DF82 3428 0008                  		move.w	obX(a0),d2
0000DF86 3628 000C                  		move.w	obY(a0),d3
0000DF8A 0442 0010                  		subi.w	#$10,d2
0000DF8E 5143                       		subq.w	#8,d3
0000DF90 383C 0020                  		move.w	#$20,d4
0000DF94 3A3C 0010                  		move.w	#$10,d5
0000DF98 43F8 D800                  		lea	(v_lvlobjspace).w,a1 ; begin checking object RAM
0000DF9C 3C3C 005F                  		move.w	#$5F,d6
0000DFA0                            
0000DFA0                            But_MZLoop:
0000DFA0 4A29 0001                  		tst.b	obRender(a1)
0000DFA4 6A00                       		bpl.s	loc_BE4E
0000DFA6 0C11 0000                  		cmpi.b	#id_PushBlock,(a1) ; is the object a green MZ block?
0000DFAA 6700                       		beq.s	loc_BE5E	; if yes, branch
0000DFAC                            
0000DFAC                            loc_BE4E:
0000DFAC 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000DFB0 51CE FFEE                  		dbf	d6,But_MZLoop	; repeat $5F times
0000DFB4                            
0000DFB4 361F                       		move.w	(sp)+,d3
0000DFB6 7000                       		moveq	#0,d0
0000DFB8                            
0000DFB8                            locret_BE5A:
0000DFB8 4E75                       		rts	
0000DFBA                            ; ===========================================================================
0000DFBA 1010                       But_MZData:	dc.b $10, $10
0000DFBC                            ; ===========================================================================
0000DFBC                            
0000DFBC                            loc_BE5E:
0000DFBC 7001                       		moveq	#1,d0
0000DFBE 0240 003F                  		andi.w	#$3F,d0
0000DFC2 D040                       		add.w	d0,d0
0000DFC4 45FB 00F2                  		lea	But_MZData-2(pc,d0.w),a2
0000DFC8 121A                       		move.b	(a2)+,d1
0000DFCA 4881                       		ext.w	d1
0000DFCC 3029 0008                  		move.w	obX(a1),d0
0000DFD0 9041                       		sub.w	d1,d0
0000DFD2 9042                       		sub.w	d2,d0
0000DFD4 6400                       		bcc.s	loc_BE80
0000DFD6 D241                       		add.w	d1,d1
0000DFD8 D041                       		add.w	d1,d0
0000DFDA 6500                       		bcs.s	loc_BE84
0000DFDC 60CE                       		bra.s	loc_BE4E
0000DFDE                            ; ===========================================================================
0000DFDE                            
0000DFDE                            loc_BE80:
0000DFDE B044                       		cmp.w	d4,d0
0000DFE0 62CA                       		bhi.s	loc_BE4E
0000DFE2                            
0000DFE2                            loc_BE84:
0000DFE2 121A                       		move.b	(a2)+,d1
0000DFE4 4881                       		ext.w	d1
0000DFE6 3029 000C                  		move.w	obY(a1),d0
0000DFEA 9041                       		sub.w	d1,d0
0000DFEC 9043                       		sub.w	d3,d0
0000DFEE 6400                       		bcc.s	loc_BE9A
0000DFF0 D241                       		add.w	d1,d1
0000DFF2 D041                       		add.w	d1,d0
0000DFF4 6500                       		bcs.s	loc_BE9E
0000DFF6 60B4                       		bra.s	loc_BE4E
0000DFF8                            ; ===========================================================================
0000DFF8                            
0000DFF8                            loc_BE9A:
0000DFF8 B045                       		cmp.w	d5,d0
0000DFFA 62B0                       		bhi.s	loc_BE4E
0000DFFC                            
0000DFFC                            loc_BE9E:
0000DFFC 361F                       		move.w	(sp)+,d3
0000DFFE 7001                       		moveq	#1,d0
0000E000 4E75                       		rts	
0000E002                            ; End of function But_MZBlock
0000E002                            ; End of function But_MZBlock
0000E002                            Map_But:	include	"_maps\Button.asm"
0000E002                            ; ---------------------------------------------------------------------------
0000E002                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000E002                            ; ---------------------------------------------------------------------------
0000E002                            Map_But_internal:
0000E002 0000                       		dc.w byte_BEAC-Map_But_internal
0000E004 0000                       		dc.w byte_BEB7-Map_But_internal
0000E006 0000                       		dc.w byte_BEC2-Map_But_internal
0000E008 0000                       		dc.w byte_BEB7-Map_But_internal
0000E00A 02                         byte_BEAC:	dc.b 2
0000E00B F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000E010 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000E015 02                         byte_BEB7:	dc.b 2
0000E016 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000E01B F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000E020 02                         byte_BEC2:	dc.b 2
0000E021 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000E026 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000E02B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000E030                            		even
0000E030                            		even
0000E030                            
0000E030                            		include	"_incObj\33 Pushable Blocks.asm"
0000E030                            ; ---------------------------------------------------------------------------
0000E030                            ; Object 33 - pushable blocks (MZ, LZ)
0000E030                            ; ---------------------------------------------------------------------------
0000E030                            
0000E030                            PushBlock:
0000E030 7000                       		moveq	#0,d0
0000E032 1028 0024                  		move.b	obRoutine(a0),d0
0000E036 323B 0000                  		move.w	PushB_Index(pc,d0.w),d1
0000E03A 4EFB 1000                  		jmp	PushB_Index(pc,d1.w)
0000E03E                            ; ===========================================================================
0000E03E 0000                       PushB_Index:	dc.w PushB_Main-PushB_Index
0000E040 0000                       		dc.w loc_BF6E-PushB_Index
0000E042 0000                       		dc.w loc_C02C-PushB_Index
0000E044                            
0000E044 1000                       PushB_Var:	dc.b $10, 0	; object width,	frame number
0000E046 4001                       		dc.b $40, 1
0000E048                            ; ===========================================================================
0000E048                            
0000E048                            PushB_Main:	; Routine 0
0000E048 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E04C 117C 000F 0016             		move.b	#$F,obHeight(a0)
0000E052 117C 000F 0017             		move.b	#$F,obWidth(a0)
0000E058 217C 0000 0000 0004        		move.l	#Map_Push,obMap(a0)
0000E060 317C 42B8 0002             		move.w	#$42B8,obGfx(a0) ; MZ specific code
0000E066 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w
0000E06C 6600                       		bne.s	@notLZ
0000E06E 317C 43DE 0002             		move.w	#$43DE,obGfx(a0) ; LZ specific code
0000E074                            
0000E074                            	@notLZ:
0000E074 117C 0004 0001             		move.b	#4,obRender(a0)
0000E07A 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000E080 3168 0008 0034             		move.w	obX(a0),$34(a0)
0000E086 3168 000C 0036             		move.w	obY(a0),$36(a0)
0000E08C 7000                       		moveq	#0,d0
0000E08E 1028 0028                  		move.b	obSubtype(a0),d0
0000E092 D040                       		add.w	d0,d0
0000E094 0240 000E                  		andi.w	#$E,d0
0000E098 45FB 00AA                  		lea	PushB_Var(pc,d0.w),a2
0000E09C 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000E0A0 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000E0A4 4A28 0028                  		tst.b	obSubtype(a0)
0000E0A8 6700                       		beq.s	@chkgone
0000E0AA 317C C2B8 0002             		move.w	#$C2B8,obGfx(a0)
0000E0B0                            
0000E0B0                            	@chkgone:
0000E0B0 45F8 FC00                  		lea	(v_objstate).w,a2
0000E0B4 7000                       		moveq	#0,d0
0000E0B6 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E0BA 6700                       		beq.s	loc_BF6E
0000E0BC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E0C2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000E0C8 6600 0000                  		bne.w	DeleteObject
0000E0CC                            
0000E0CC                            loc_BF6E:	; Routine 2
0000E0CC 4A28 0032                  		tst.b	$32(a0)
0000E0D0 6600 0000                  		bne.w	loc_C046
0000E0D4 7200                       		moveq	#0,d1
0000E0D6 1228 0014                  		move.b	obActWid(a0),d1
0000E0DA 0641 000B                  		addi.w	#$B,d1
0000E0DE 343C 0010                  		move.w	#$10,d2
0000E0E2 363C 0011                  		move.w	#$11,d3
0000E0E6 3828 0008                  		move.w	obX(a0),d4
0000E0EA 6100 0000                  		bsr.w	loc_C186
0000E0EE 0C78 0200 FE10             		cmpi.w	#(id_MZ<<8)+0,(v_zone).w ; is the level MZ act 1?
0000E0F4 6600                       		bne.s	loc_BFC6	; if not, branch
0000E0F6 08A8 0007 0028             		bclr	#7,obSubtype(a0)
0000E0FC 3028 0008                  		move.w	obX(a0),d0
0000E100 0C40 0A20                  		cmpi.w	#$A20,d0
0000E104 6500                       		bcs.s	loc_BFC6
0000E106 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000E10A 6400                       		bcc.s	loc_BFC6
0000E10C 3038 F7A4                  		move.w	(v_obj31ypos).w,d0
0000E110 0440 001C                  		subi.w	#$1C,d0
0000E114 3140 000C                  		move.w	d0,obY(a0)
0000E118 08F8 0007 F7A4             		bset	#7,(v_obj31ypos).w
0000E11E 08E8 0007 0028             		bset	#7,obSubtype(a0)
0000E124                            
0000E124                            	loc_BFC6:
0000E140 6000 0000                  		bra.w	DisplaySprite
0000E144                            ; ===========================================================================
0000E144                            
0000E144                            loc_ppppp:
0000E160 3168 0034 0008             		move.w	$34(a0),obX(a0)
0000E166 3168 0036 000C             		move.w	$36(a0),obY(a0)
0000E16C 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000E172 6000                       		bra.s	loc_C02C
0000E174                            ; ===========================================================================
0000E174                            
0000E174                            loc_C016:
0000E174 45F8 FC00                  		lea	(v_objstate).w,a2
0000E178 7000                       		moveq	#0,d0
0000E17A 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E17E 6700                       		beq.s	loc_C028
0000E180 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000E186                            
0000E186                            loc_C028:
0000E186 6000 0000                  		bra.w	DeleteObject
0000E18A                            ; ===========================================================================
0000E18A                            
0000E18A                            loc_C02C:	; Routine 4
0000E18A 6100 0000                  		bsr.w	ChkPartiallyVisible
0000E18E 6700                       		beq.s	locret_C044
0000E190 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000E196 4228 0032                  		clr.b	$32(a0)
0000E19A 4268 0010                  		clr.w	obVelX(a0)
0000E19E 4268 0012                  		clr.w	obVelY(a0)
0000E1A2                            
0000E1A2                            locret_C044:
0000E1A2 4E75                       		rts	
0000E1A4                            ; ===========================================================================
0000E1A4                            
0000E1A4                            loc_C046:
0000E1A4 3F28 0008                  		move.w	obX(a0),-(sp)
0000E1A8 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0000E1AE 6400                       		bcc.s	loc_C056
0000E1B0 6100 0000                  		bsr.w	SpeedToPos
0000E1B4                            
0000E1B4                            loc_C056:
0000E1B4 0828 0001 0022             		btst	#1,obStatus(a0)
0000E1BA 6700                       		beq.s	loc_C0A0
0000E1BC 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E1C2 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E1C8 4A41                       		tst.w	d1
0000E1CA 6A00 0000                  		bpl.w	loc_C09E
0000E1CE D368 000C                  		add.w	d1,obY(a0)
0000E1D2 4268 0012                  		clr.w	obVelY(a0)
0000E1D6 08A8 0001 0022             		bclr	#1,obStatus(a0)
0000E1DC 3011                       		move.w	(a1),d0
0000E1DE 0240 03FF                  		andi.w	#$3FF,d0
0000E1E2 0C40 016A                  		cmpi.w	#$16A,d0
0000E1E6 6500                       		bcs.s	loc_C09E
0000E1E8 3028 0030                  		move.w	$30(a0),d0
0000E1EC E640                       		asr.w	#3,d0
0000E1EE 3140 0010                  		move.w	d0,obVelX(a0)
0000E1F2 117C 0001 0032             		move.b	#1,$32(a0)
0000E1F8 4268 000E                  		clr.w	$E(a0)
0000E1FC                            
0000E1FC                            loc_C09E:
0000E1FC 6000                       		bra.s	loc_C0E6
0000E1FE                            ; ===========================================================================
0000E1FE                            
0000E1FE                            loc_C0A0:
0000E1FE 4A68 0010                  		tst.w	obVelX(a0)
0000E202 6700 0000                  		beq.w	loc_C0D6
0000E206 6B00                       		bmi.s	loc_C0BC
0000E208 7600                       		moveq	#0,d3
0000E20A 1628 0014                  		move.b	obActWid(a0),d3
0000E20E 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E214 4A41                       		tst.w	d1		; has block touched a wall?
0000E216 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E218 6000                       		bra.s	loc_C0E6
0000E21A                            ; ===========================================================================
0000E21A                            
0000E21A                            loc_C0BC:
0000E21A 7600                       		moveq	#0,d3
0000E21C 1628 0014                  		move.b	obActWid(a0),d3
0000E220 4643                       		not.w	d3
0000E222 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E228 4A41                       		tst.w	d1		; has block touched a wall?
0000E22A 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E22C 6000                       		bra.s	loc_C0E6
0000E22E                            ; ===========================================================================
0000E22E                            
0000E22E                            PushB_StopPush:
0000E22E 4268 0010                  		clr.w	obVelX(a0)		; stop block moving
0000E232 6000                       		bra.s	loc_C0E6
0000E234                            ; ===========================================================================
0000E234                            
0000E234                            loc_C0D6:
0000E234 06A8 0000 2001 000C        		addi.l	#$2001,obY(a0)
0000E23C 0C28 00A0 000F             		cmpi.b	#$A0,obY+3(a0)
0000E242 6400                       		bcc.s	loc_C104
0000E244                            
0000E244                            loc_C0E6:
0000E244 7200                       		moveq	#0,d1
0000E246 1228 0014                  		move.b	obActWid(a0),d1
0000E24A 0641 000B                  		addi.w	#$B,d1
0000E24E 343C 0010                  		move.w	#$10,d2
0000E252 363C 0011                  		move.w	#$11,d3
0000E256 381F                       		move.w	(sp)+,d4
0000E258 6100 0000                  		bsr.w	loc_C186
0000E25C 6100                       		bsr.s	PushB_ChkLava
0000E25E 6000 FEC4                  		bra.w	loc_BFC6
0000E262                            ; ===========================================================================
0000E262                            
0000E262                            loc_C104:
0000E262 381F                       		move.w	(sp)+,d4
0000E264 43F8 D000                  		lea	(v_player).w,a1
0000E268 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000E26E 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000E274 6000 FECE                  		bra.w	loc_ppppp
0000E278                            ; ===========================================================================
0000E278                            
0000E278                            PushB_ChkLava:
0000E278 0C78 0201 FE10             		cmpi.w	#(id_MZ<<8)+1,(v_zone).w ; is the level MZ act 2?
0000E27E 6600                       		bne.s	PushB_ChkLava2	; if not, branch
0000E280 343C FFE0                  		move.w	#-$20,d2
0000E284 0C68 0DD0 0008             		cmpi.w	#$DD0,obX(a0)
0000E28A 6700                       		beq.s	PushB_LoadLava
0000E28C 0C68 0CC0 0008             		cmpi.w	#$CC0,obX(a0)
0000E292 6700                       		beq.s	PushB_LoadLava
0000E294 0C68 0BA0 0008             		cmpi.w	#$BA0,obX(a0)
0000E29A 6700                       		beq.s	PushB_LoadLava
0000E29C 4E75                       		rts	
0000E29E                            ; ===========================================================================
0000E29E                            
0000E29E                            PushB_ChkLava2:
0000E29E 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is the level MZ act 3?
0000E2A4 6600                       		bne.s	PushB_NoLava	; if not, branch
0000E2A6 343C 0020                  		move.w	#$20,d2
0000E2AA 0C68 0560 0008             		cmpi.w	#$560,obX(a0)
0000E2B0 6700                       		beq.s	PushB_LoadLava
0000E2B2 0C68 05C0 0008             		cmpi.w	#$5C0,obX(a0)
0000E2B8 6700                       		beq.s	PushB_LoadLava
0000E2BA                            
0000E2BA                            PushB_NoLava:
0000E2BA 4E75                       		rts	
0000E2BC                            ; ===========================================================================
0000E2BC                            
0000E2BC                            PushB_LoadLava:
0000E2BC 6100 0000                  		bsr.w	FindFreeObj
0000E2C0 6600                       		bne.s	locret_C184
0000E2C2 12BC 0000                  		move.b	#id_GeyserMaker,0(a1) ; load lava geyser object
0000E2C6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000E2CC D569 0008                  		add.w	d2,obX(a1)
0000E2D0 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000E2D6 0669 0010 000C             		addi.w	#$10,obY(a1)
0000E2DC 2348 003C                  		move.l	a0,$3C(a1)
0000E2E0                            
0000E2E0                            locret_C184:
0000E2E0 4E75                       		rts	
0000E2E2                            ; ===========================================================================
0000E2E2                            
0000E2E2                            loc_C186:
0000E2E2 1028 0025                  		move.b	ob2ndRout(a0),d0
0000E2E6 6700 0000                  		beq.w	loc_C218
0000E2EA 5500                       		subq.b	#2,d0
0000E2EC 6600                       		bne.s	loc_C1AA
0000E2EE 6100 AAA8                  		bsr.w	ExitPlatform
0000E2F2 0829 0003 0022             		btst	#3,obStatus(a1)
0000E2F8 6600                       		bne.s	loc_C1A4
0000E2FA 4228 0025                  		clr.b	ob2ndRout(a0)
0000E2FE 4E75                       		rts	
0000E300                            ; ===========================================================================
0000E300                            
0000E300                            loc_C1A4:
0000E300 3404                       		move.w	d4,d2
0000E302 6000 AFF2                  		bra.w	MvSonicOnPtfm
0000E306                            ; ===========================================================================
0000E306                            
0000E306                            loc_C1AA:
0000E306 5500                       		subq.b	#2,d0
0000E308 6600                       		bne.s	loc_C1F2
0000E30A 6100 0000                  		bsr.w	SpeedToPos
0000E30E 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E314 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E31A 4A41                       		tst.w	d1
0000E31C 6A00 0000                  		bpl.w	locret_C1F0
0000E320 D368 000C                  		add.w	d1,obY(a0)
0000E324 4268 0012                  		clr.w	obVelY(a0)
0000E328 4228 0025                  		clr.b	ob2ndRout(a0)
0000E32C 3011                       		move.w	(a1),d0
0000E32E 0240 03FF                  		andi.w	#$3FF,d0
0000E332 0C40 016A                  		cmpi.w	#$16A,d0
0000E336 6500                       		bcs.s	locret_C1F0
0000E338 3028 0030                  		move.w	$30(a0),d0
0000E33C E640                       		asr.w	#3,d0
0000E33E 3140 0010                  		move.w	d0,obVelX(a0)
0000E342 117C 0001 0032             		move.b	#1,$32(a0)
0000E348 4268 000E                  		clr.w	obY+2(a0)
0000E34C                            
0000E34C                            locret_C1F0:
0000E34C 4E75                       		rts	
0000E34E                            ; ===========================================================================
0000E34E                            
0000E34E                            loc_C1F2:
0000E34E 6100 0000                  		bsr.w	SpeedToPos
0000E352 3028 0008                  		move.w	obX(a0),d0
0000E356 0240 000C                  		andi.w	#$C,d0
0000E35A 6600 0000                  		bne.w	locret_C2E4
0000E35E 0268 FFF0 0008             		andi.w	#-$10,obX(a0)
0000E364 3168 0010 0030             		move.w	obVelX(a0),$30(a0)
0000E36A 4268 0010                  		clr.w	obVelX(a0)
0000E36E 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000E372 4E75                       		rts	
0000E374                            ; ===========================================================================
0000E374                            
0000E374                            loc_C218:
0000E374 6100 0000                  		bsr.w	Solid_ChkEnter
0000E378 4A44                       		tst.w	d4
0000E37A 6700 0000                  		beq.w	locret_C2E4
0000E37E 6B00 0000                  		bmi.w	locret_C2E4
0000E382 4A28 0032                  		tst.b	$32(a0)
0000E386 6700                       		beq.s	loc_C230
0000E388 6000 0000                  		bra.w	locret_C2E4
0000E38C                            ; ===========================================================================
0000E38C                            
0000E38C                            loc_C230:
0000E38C 4A40                       		tst.w	d0
0000E38E 6700 0000                  		beq.w	locret_C2E4
0000E392 6B00                       		bmi.s	loc_C268
0000E394 0829 0000 0022             		btst	#0,obStatus(a1)
0000E39A 6600 0000                  		bne.w	locret_C2E4
0000E39E 3F00                       		move.w	d0,-(sp)
0000E3A0 7600                       		moveq	#0,d3
0000E3A2 1628 0014                  		move.b	obActWid(a0),d3
0000E3A6 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E3AC 301F                       		move.w	(sp)+,d0
0000E3AE 4A41                       		tst.w	d1
0000E3B0 6B00 0000                  		bmi.w	locret_C2E4
0000E3B4 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000E3BC 7001                       		moveq	#1,d0
0000E3BE 323C 0040                  		move.w	#$40,d1
0000E3C2 6000                       		bra.s	loc_C294
0000E3C4                            ; ===========================================================================
0000E3C4                            
0000E3C4                            loc_C268:
0000E3C4 0829 0000 0022             		btst	#0,obStatus(a1)
0000E3CA 6700                       		beq.s	locret_C2E4
0000E3CC 3F00                       		move.w	d0,-(sp)
0000E3CE 7600                       		moveq	#0,d3
0000E3D0 1628 0014                  		move.b	obActWid(a0),d3
0000E3D4 4643                       		not.w	d3
0000E3D6 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E3DC 301F                       		move.w	(sp)+,d0
0000E3DE 4A41                       		tst.w	d1
0000E3E0 6B00                       		bmi.s	locret_C2E4
0000E3E2 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
0000E3EA 70FF                       		moveq	#-1,d0
0000E3EC 323C FFC0                  		move.w	#-$40,d1
0000E3F0                            
0000E3F0                            loc_C294:
0000E3F0 43F8 D000                  		lea	(v_player).w,a1
0000E3F4 D169 0008                  		add.w	d0,obX(a1)
0000E3F8 3341 0020                  		move.w	d1,obInertia(a1)
0000E3FC 337C 0000 0010             		move.w	#0,obVelX(a1)
0000E402 3F00                       		move.w	d0,-(sp)
0000E40E 301F                       		move.w	(sp)+,d0
0000E410 4A28 0028                  		tst.b	obSubtype(a0)
0000E414 6B00                       		bmi.s	locret_C2E4
0000E416 3F00                       		move.w	d0,-(sp)
0000E418 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E41E 301F                       		move.w	(sp)+,d0
0000E420 0C41 0004                  		cmpi.w	#4,d1
0000E424 6F00                       		ble.s	loc_C2E0
0000E426 317C 0400 0010             		move.w	#$400,obVelX(a0)
0000E42C 4A40                       		tst.w	d0
0000E42E 6A00                       		bpl.s	loc_C2D8
0000E430 4468 0010                  		neg.w	obVelX(a0)
0000E434                            
0000E434                            loc_C2D8:
0000E434 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0000E43A 6000                       		bra.s	locret_C2E4
0000E43C                            ; ===========================================================================
0000E43C                            
0000E43C                            loc_C2E0:
0000E43C D368 000C                  		add.w	d1,obY(a0)
0000E440                            
0000E440                            locret_C2E4:
0000E440 4E75                       		rts	
0000E440 4E75                       		rts	
0000E442                            Map_Push:	include	"_maps\Pushable Blocks.asm"
0000E442                            ; ---------------------------------------------------------------------------
0000E442                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000E442                            ; ---------------------------------------------------------------------------
0000E442                            Map_Push_internal:
0000E442 0000                       		dc.w @single-Map_Push_internal
0000E444 0000                       		dc.w @four-Map_Push_internal
0000E446 01                         @single:	dc.b 1
0000E447 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000E44C 04                         @four:		dc.b 4
0000E44D F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000E452 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000E457 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000E45C F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000E462 00                         		even
0000E462 00                         		even
0000E462                            
0000E462                            		include	"_incObj\34 Title Cards.asm"
0000E462                            ; ---------------------------------------------------------------------------
0000E462                            ; Object 34 - zone title cards
0000E462                            ; ---------------------------------------------------------------------------
0000E462                            
0000E462                            TitleCard:
0000E462 7000                       		moveq	#0,d0
0000E464 1028 0024                  		move.b	obRoutine(a0),d0
0000E468 323B 0000                  		move.w	Card_Index(pc,d0.w),d1
0000E46C 4EFB 1000                  		jmp	Card_Index(pc,d1.w)
0000E470                            ; ===========================================================================
0000E470 0000                       Card_Index:	dc.w Card_CheckSBZ3-Card_Index
0000E472 0000                       		dc.w Card_ChkPos-Card_Index
0000E474 0000                       		dc.w Card_Wait-Card_Index
0000E476 0000                       		dc.w Card_Wait-Card_Index
0000E478                            
0000E478 =00000030                  card_mainX:	equ $30		; position for card to display on
0000E478 =00000032                  card_finalX:	equ $32		; position for card to finish on
0000E478                            ; ===========================================================================
0000E478                            
0000E478                            Card_CheckSBZ3:	; Routine 0
0000E478 2248                       		movea.l	a0,a1
0000E47A 7000                       		moveq	#0,d0
0000E47C 1038 FE10                  		move.b	(v_zone).w,d0
0000E480 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; check if level is SBZ 3
0000E486 6600                       		bne.s	Card_CheckFZ
0000E488 7001                       		moveq	#1,d0		; load title card number 6 (FZ)
0000E48A                            
0000E48A                            	Card_CheckFZ:
0000E48A 3400                       		move.w	d0,d2
0000E48C 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; check if level is FZ
0000E492 6600                       		bne.s	Card_LoadConfig
0000E494 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000E496 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000E498                            
0000E498                            	Card_LoadConfig:
0000E498 47F9 0000 0000             		lea	(Card_ConData).l,a3
0000E49E E948                       		lsl.w	#4,d0
0000E4A0 D6C0                       		adda.w	d0,a3
0000E4A2 45F9 0000 0000             		lea	(Card_ItemData).l,a2
0000E4A8 7203                       		moveq	#3,d1
0000E4AA                            
0000E4AA                            Card_Loop:
0000E4AA 12BC 0000                  		move.b	#id_TitleCard,0(a1)
0000E4AE 3353 0008                  		move.w	(a3),obX(a1)	; load start x-position
0000E4B2 335B 0032                  		move.w	(a3)+,card_finalX(a1) ; load finish x-position (same as start)
0000E4B6 335B 0030                  		move.w	(a3)+,card_mainX(a1) ; load main x-position
0000E4BA 335A 000A                  		move.w	(a2)+,obScreenY(a1)
0000E4BE 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E4C2 101A                       		move.b	(a2)+,d0
0000E4C4 6600                       		bne.s	Card_ActNumber
0000E4C6 1002                       		move.b	d2,d0
0000E4C8                            
0000E4C8                            	Card_ActNumber:
0000E4C8 0C00 0007                  		cmpi.b	#7,d0
0000E4CC 6600                       		bne.s	Card_MakeSprite
0000E4CE D038 FE11                  		add.b	(v_act).w,d0
0000E4D2 0C38 0003 FE11             		cmpi.b	#3,(v_act).w
0000E4D8 6600                       		bne.s	Card_MakeSprite
0000E4DA 5300                       		subq.b	#1,d0
0000E4DC                            
0000E4DC                            	Card_MakeSprite:
0000E4DC 1340 001A                  		move.b	d0,obFrame(a1)	; display frame	number d0
0000E4E0 237C 0000 0000 0004        		move.l	#Map_Card,obMap(a1)
0000E4E8 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E4EE 137C 0078 0014             		move.b	#$78,obActWid(a1)
0000E4F4 137C 0000 0001             		move.b	#0,obRender(a1)
0000E4FA 337C 0000 0018             		move.w	#0,obPriority(a1)
0000E500 337C 003C 001E             		move.w	#60,obTimeFrame(a1) ; set time delay to 1 second
0000E506 43E9 0040                  		lea	$40(a1),a1	; next object
0000E50A 51C9 FF9E                  		dbf	d1,Card_Loop	; repeat sequence another 3 times
0000E50E                            
0000E50E                            Card_ChkPos:	; Routine 2
0000E50E 7210                       		moveq	#$10,d1		; set horizontal speed
0000E510 3028 0030                  		move.w	card_mainX(a0),d0
0000E514 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the target position?
0000E518 6700                       		beq.s	Card_NoMove	; if yes, branch
0000E51A 6C00                       		bge.s	Card_Move
0000E51C 4441                       		neg.w	d1
0000E51E                            
0000E51E                            Card_Move:
0000E51E D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E522                            
0000E522                            Card_NoMove:
0000E522 3028 0008                  		move.w	obX(a0),d0
0000E526 6B00                       		bmi.s	locret_C3D8
0000E528 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E52C 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000E52E 6000 0000                  		bra.w	DisplaySprite
0000E532                            ; ===========================================================================
0000E532                            
0000E532                            locret_C3D8:
0000E532 4E75                       		rts	
0000E534                            ; ===========================================================================
0000E534                            
0000E534                            Card_Wait:	; Routine 4/6
0000E534 4A68 001E                  		tst.w	obTimeFrame(a0)	; is time remaining zero?
0000E538 6700                       		beq.s	Card_ChkPos2	; if yes, branch
0000E53A 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time
0000E53E 6000 0000                  		bra.w	DisplaySprite
0000E542                            ; ===========================================================================
0000E542                            
0000E542                            Card_ChkPos2:
0000E542 4A28 0001                  		tst.b	obRender(a0)
0000E546 6A00                       		bpl.s	Card_ChangeArt
0000E548 7220                       		moveq	#$20,d1
0000E54A 3028 0032                  		move.w	card_finalX(a0),d0
0000E54E B068 0008                  		cmp.w	obX(a0),d0	; has item reached the finish position?
0000E552 6700                       		beq.s	Card_ChangeArt	; if yes, branch
0000E554 6C00                       		bge.s	Card_Move2
0000E556 4441                       		neg.w	d1
0000E558                            
0000E558                            Card_Move2:
0000E558 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E55C 3028 0008                  		move.w	obX(a0),d0
0000E560 6B00                       		bmi.s	locret_C412
0000E562 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E566 6400                       		bcc.s	locret_C412	; if yes, branch
0000E568 6000 0000                  		bra.w	DisplaySprite
0000E56C                            ; ===========================================================================
0000E56C                            
0000E56C                            locret_C412:
0000E56C 4E75                       		rts	
0000E56E                            ; ===========================================================================
0000E56E                            
0000E56E                            Card_ChangeArt:
0000E56E 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000E574 6600                       		bne.s	Card_Delete
0000E576 7000                       		moveq	#plcid_Explode,d0
0000E578 4EB9 0000 173A             		jsr	(AddPLC).l	; load explosion patterns
0000E57E 7000                       		moveq	#0,d0
0000E580 1038 FE10                  		move.b	(v_zone).w,d0
0000E584 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
0000E588 4EB9 0000 173A             		jsr	(AddPLC).l	; load animal patterns
0000E58E                            
0000E58E                            Card_Delete:
0000E58E 6000 0000                  		bra.w	DeleteObject
0000E592                            ; ===========================================================================
0000E592 00D0                       Card_ItemData:	dc.w $D0	; y-axis position
0000E594 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000E596 00E4                       		dc.w $E4
0000E598 0206                       		dc.b 2,	6
0000E59A 00EA                       		dc.w $EA
0000E59C 0207                       		dc.b 2,	7
0000E59E 00E0                       		dc.w $E0
0000E5A0 020A                       		dc.b 2,	$A
0000E5A2                            ; ---------------------------------------------------------------------------
0000E5A2                            ; Title	card configuration data
0000E5A2                            ; Format:
0000E5A2                            ; 4 bytes per item (YYYY XXXX)
0000E5A2                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000E5A2                            ; ---------------------------------------------------------------------------
0000E5A2 0000 0120 FEFC 013C 0414+  Card_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000E5B2 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000E5C2 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000E5D2 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000E5E2 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000E5F2 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000E602 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000E612                            ; ===========================================================================
0000E612                            ; ===========================================================================
0000E612                            		include	"_incObj\39 Game Over.asm"
0000E612                            ; ---------------------------------------------------------------------------
0000E612                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000E612                            ; ---------------------------------------------------------------------------
0000E612                            
0000E612                            GameOverCard:
0000E612 7000                       		moveq	#0,d0
0000E614 1028 0024                  		move.b	obRoutine(a0),d0
0000E618 323B 0000                  		move.w	Over_Index(pc,d0.w),d1
0000E61C 4EFB 1000                  		jmp	Over_Index(pc,d1.w)
0000E620                            ; ===========================================================================
0000E620 0000                       Over_Index:	dc.w Over_ChkPLC-Over_Index
0000E622 0000                       		dc.w Over_Move-Over_Index
0000E624 0000                       		dc.w Over_Wait-Over_Index
0000E626                            ; ===========================================================================
0000E626                            
0000E626                            Over_ChkPLC:	; Routine 0
0000E626 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E62A 6700                       		beq.s	Over_Main	; if yes, branch
0000E62C 4E75                       		rts	
0000E62E                            ; ===========================================================================
0000E62E                            
0000E62E                            Over_Main:
0000E62E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E632 317C 0050 0008             		move.w	#$50,obX(a0)	; set x-position
0000E638 0828 0000 001A             		btst	#0,obFrame(a0)	; is the object	"OVER"?
0000E63E 6700                       		beq.s	Over_1stWord	; if not, branch
0000E640 317C 01F0 0008             		move.w	#$1F0,obX(a0)	; set x-position for "OVER"
0000E646                            
0000E646                            	Over_1stWord:
0000E646 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0000E64C 217C 0000 0000 0004        		move.l	#Map_Over,obMap(a0)
0000E654 317C 855E 0002             		move.w	#$855E,obGfx(a0)
0000E65A 117C 0000 0001             		move.b	#0,obRender(a0)
0000E660 317C 0000 0018             		move.w	#0,obPriority(a0)
0000E666                            
0000E666                            Over_Move:	; Routine 2
0000E666 7210                       		moveq	#$10,d1		; set horizontal speed
0000E668 0C68 0120 0008             		cmpi.w	#$120,obX(a0)	; has item reached its target position?
0000E66E 6700                       		beq.s	Over_SetWait	; if yes, branch
0000E670 6500                       		bcs.s	Over_UpdatePos
0000E672 4441                       		neg.w	d1
0000E674                            
0000E674                            	Over_UpdatePos:
0000E674 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E678 6000 0000                  		bra.w	DisplaySprite
0000E67C                            ; ===========================================================================
0000E67C                            
0000E67C                            Over_SetWait:
0000E67C 317C 02D0 001E             		move.w	#720,obTimeFrame(a0) ; set time delay to 12 seconds
0000E682 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E686 4E75                       		rts	
0000E688                            ; ===========================================================================
0000E688                            
0000E688                            Over_Wait:	; Routine 4
0000E688 1038 F605                  		move.b	(v_jpadpress1).w,d0
0000E68C 0200 0070                  		andi.b	#btnABC,d0	; is button A, B or C pressed?
0000E690 6600                       		bne.s	Over_ChgMode	; if yes, branch
0000E692 0828 0000 001A             		btst	#0,obFrame(a0)
0000E698 6600                       		bne.s	Over_Display
0000E69A 4A68 001E                  		tst.w	obTimeFrame(a0)	; has time delay reached zero?
0000E69E 6700                       		beq.s	Over_ChgMode	; if yes, branch
0000E6A0 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E6A4 6000 0000                  		bra.w	DisplaySprite
0000E6A8                            ; ===========================================================================
0000E6A8                            
0000E6A8                            Over_ChgMode:
0000E6A8 4A38 FE1A                  		tst.b	(f_timeover).w	; is time over flag set?
0000E6AC 6600                       		bne.s	Over_ResetLvl	; if yes, branch
0000E6AE 11FC 0000 F600             		move.b	#id_Continue,(v_gamemode).w ; set mode to $14 (continue screen)
0000E6B4 4A38 FE18                  		tst.b	(v_continues).w	; do you have any continues?
0000E6B8 6600                       		bne.s	Over_Display	; if yes, branch
0000E6BA 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set mode to 0 (Sega screen)
0000E6C0 6000                       		bra.s	Over_Display
0000E6C2                            ; ===========================================================================
0000E6C2                            
0000E6C2                            Over_ResetLvl:
0000E6C2 42B8 FE38                  			clr.l	(v_lamp_time).w
0000E6C6 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E6CC                            
0000E6CC                            Over_Display:
0000E6CC 6000 0000                  		bra.w	DisplaySprite
0000E6CC 6000 0000                  		bra.w	DisplaySprite
0000E6D0                            		include	"_incObj\3A Got Through Card.asm"
0000E6D0                            ; ---------------------------------------------------------------------------
0000E6D0                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000E6D0                            ; ---------------------------------------------------------------------------
0000E6D0                            
0000E6D0                            GotThroughCard:
0000E6D0 7000                       		moveq	#0,d0
0000E6D2 1028 0024                  		move.b	obRoutine(a0),d0
0000E6D6 323B 0000                  		move.w	Got_Index(pc,d0.w),d1
0000E6DA 4EFB 1000                  		jmp	Got_Index(pc,d1.w)
0000E6DE                            ; ===========================================================================
0000E6DE 0000                       Got_Index:	dc.w Got_ChkPLC-Got_Index
0000E6E0 0000                       		dc.w Got_Move-Got_Index
0000E6E2 0000                       		dc.w Got_Wait-Got_Index
0000E6E4 0000                       		dc.w Got_TimeBonus-Got_Index
0000E6E6 0000                       		dc.w Got_Wait-Got_Index
0000E6E8 0000                       		dc.w Got_NextLevel-Got_Index
0000E6EA 0000                       		dc.w Got_Wait-Got_Index
0000E6EC 0000                       		dc.w Got_Move2-Got_Index
0000E6EE 0000                       		dc.w loc_C766-Got_Index
0000E6F0                            
0000E6F0 =00000030                  got_mainX:	equ $30		; position for card to display on
0000E6F0 =00000032                  got_finalX:	equ $32		; position for card to finish on
0000E6F0                            ; ===========================================================================
0000E6F0                            
0000E6F0                            Got_ChkPLC:	; Routine 0
0000E6F0 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E6F4 6700                       		beq.s	Got_Main	; if yes, branch
0000E6F6 4E75                       		rts	
0000E6F8                            ; ===========================================================================
0000E6F8                            
0000E6F8                            Got_Main:
0000E6F8 2248                       		movea.l	a0,a1
0000E6FA 45F9 0000 0000             		lea	(Got_Config).l,a2
0000E700 7206                       		moveq	#6,d1
0000E702                            
0000E702                            Got_Loop:
0000E702 12BC 0000                  		move.b	#id_GotThroughCard,0(a1)
0000E706 3352 0008                  		move.w	(a2),obX(a1)	; load start x-position
0000E70A 335A 0032                  		move.w	(a2)+,got_finalX(a1) ; load finish x-position (same as start)
0000E70E 335A 0030                  		move.w	(a2)+,got_mainX(a1) ; load main x-position
0000E712 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E716 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E71A 101A                       		move.b	(a2)+,d0
0000E71C 0C00 0006                  		cmpi.b	#6,d0
0000E720 6600                       		bne.s	loc_C5CA
0000E722 D038 FE11                  		add.b	(v_act).w,d0	; add act number to frame number
0000E726                            
0000E726                            	loc_C5CA:
0000E726 1340 001A                  		move.b	d0,obFrame(a1)
0000E72A 237C 0000 0000 0004        		move.l	#Map_Got,obMap(a1)
0000E732 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E738 137C 0000 0001             		move.b	#0,obRender(a1)
0000E73E 43E9 0040                  		lea	$40(a1),a1
0000E742 51C9 FFBE                  		dbf	d1,Got_Loop	; repeat 6 times
0000E746                            
0000E746                            Got_Move:	; Routine 2
0000E746 7210                       		moveq	#$10,d1		; set horizontal speed
0000E748 3028 0030                  		move.w	got_mainX(a0),d0
0000E74C B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E750 6700                       		beq.s	loc_C61A	; if yes, branch
0000E752 6C00                       		bge.s	Got_ChgPos
0000E754 4441                       		neg.w	d1
0000E756                            
0000E756                            	Got_ChgPos:
0000E756 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E75A                            
0000E75A                            	loc_C5FE:
0000E75A 3028 0008                  		move.w	obX(a0),d0
0000E75E 6B00                       		bmi.s	locret_C60E
0000E760 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E764 6400                       		bcc.s	locret_C60E	; if yes, branch
0000E766 6000 0000                  		bra.w	DisplaySprite
0000E76A                            ; ===========================================================================
0000E76A                            
0000E76A                            locret_C60E:
0000E76A 4E75                       		rts	
0000E76C                            ; ===========================================================================
0000E76C                            
0000E76C                            loc_C610:
0000E76C 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000E772 6000 0000                  		bra.w	Got_Move2
0000E776                            ; ===========================================================================
0000E776                            
0000E776                            loc_C61A:
0000E776 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000E77C 67EE                       		beq.s	loc_C610
0000E77E 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E784 66D4                       		bne.s	loc_C5FE
0000E786 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E78A 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E790                            		;move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E790                            
0000E790                            Got_Wait:	; Routine 4, 8, $C
0000E790 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E794 6600                       		bne.s	Got_Display
0000E796 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E79A                            
0000E79A                            Got_Display:
0000E79A 6000 0000                  		bra.w	DisplaySprite
0000E79E                            ; ===========================================================================
0000E79E                            
0000E79E                            Got_TimeBonus:	; Routine 6
0000E79E 6100 0000                  		bsr.w	DisplaySprite
0000E7A2 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set time/ring bonus update flag
0000E7A8 7000                       		moveq	#0,d0
0000E7AA 4A78 F7D2                  		tst.w	(v_timebonus).w	; is time bonus	= zero?
0000E7AE 6700                       		beq.s	Got_RingBonus	; if yes, branch
0000E7B0 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E7B4 0478 000A F7D2             		subi.w	#10,(v_timebonus).w ; subtract 10 from time bonus
0000E7BA                            
0000E7BA                            Got_RingBonus:
0000E7BA 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E7BE 6700                       		beq.s	Got_ChkBonus	; if yes, branch
0000E7C0 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E7C4 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E7CA                            
0000E7CA                            Got_ChkBonus:
0000E7CA 4A40                       		tst.w	d0		; is there any bonus?
0000E7CC 6600                       		bne.s	Got_AddBonus	; if yes, branch
0000E7D8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E7DC 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w
0000E7E2 6600                       		bne.s	Got_SetDelay
0000E7E4 5828 0024                  		addq.b	#4,obRoutine(a0)
0000E7E8                            
0000E7E8                            Got_SetDelay:
0000E7E8 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E7EE                            
0000E7EE                            locret_C692:
0000E7EE 4E75                       		rts	
0000E7F0                            ; ===========================================================================
0000E7F0                            
0000E7F0                            Got_AddBonus:
0000E7F0 4EB9 0000 0000             		jsr	(AddPoints).l
0000E7F6 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E7FA 0200 0003                  		andi.b	#3,d0
0000E7FE 66EE                       		bne.s	locret_C692
0000E80A                            ; ===========================================================================
0000E80A                            
0000E80A                            Got_NextLevel:	; Routine $A
0000E80A 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E810 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E816 1038 FE10                  		move.b	(v_zone).w,d0
0000E81A 0240 0007                  		andi.w	#7,d0
0000E81E E748                       		lsl.w	#3,d0
0000E820 1238 FE11                  		move.b	(v_act).w,d1
0000E824 0241 0003                  		andi.w	#3,d1
0000E828 D241                       		add.w	d1,d1
0000E82A D041                       		add.w	d1,d0
0000E82C 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000E830 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
0000E834 4A40                       		tst.w	d0
0000E836 6600                       		bne.s	Got_ChkSS
0000E838 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
0000E83E 6000                       		bra.s	Got_Display2
0000E840                            ; ===========================================================================
0000E840                            
0000E840                            Got_ChkSS:	
0000E840 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
0000E844                            		;tst.b	(f_emeraldm).w
0000E844                            		;beq.s	VBla_08A
0000E844                            		;addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0000E844                            		;sfx		bgm_Emerald,1,0,0 ;	play emerald music
0000E844                            		;bra.s	Got_Display2
0000E844 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E84A                            		
0000E84A                            ; ===========================================================================
0000E84A                            
0000E84A                            VBla_08A:
0000E84A 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E850                            
0000E850                            Got_Display2:
0000E850 6000 0000                  		bra.w	DisplaySprite
0000E854                            ; ===========================================================================
0000E854                            ; ---------------------------------------------------------------------------
0000E854                            ; Level	order array
0000E854                            ; ---------------------------------------------------------------------------
0000E854                            LevelOrder:
0000E854                            		; Green Hill Zone
0000E854 0001                       		dc.b id_GHZ, 1	; Act 2
0000E856 0002                       		dc.b id_GHZ, 2	; Act 2
0000E858 0400                       		dc.b id_SYZ, 0	; Act 3
0000E85A 0000                       		dc.b 0, 0
0000E85C                            
0000E85C                            		; Labyrinth Zone
0000E85C 0101                       		dc.b id_LZ, 1	; Act 1
0000E85E 0102                       		dc.b id_LZ, 2	; Act 2
0000E860 0000                       		dc.b id_GHZ, 0 	; Act 3
0000E862 0502                       		dc.b id_SBZ, 2	; Scrap Brain Zone Act 3
0000E864                            
0000E864                            		; Marble Zone
0000E864 0201                       		dc.b id_MZ, 1	; Act 1
0000E866 0202                       		dc.b id_MZ, 2	; Act 2
0000E868 0502                       		dc.b id_SBZ, 2	; Act 3
0000E86A 0000                       		dc.b 0, 0
0000E86C                            
0000E86C                            		; Star Light Zone
0000E86C 0301                       		dc.b id_SLZ, 1	; Act 1
0000E86E 0302                       		dc.b id_SLZ, 2	; Act 2
0000E870 0500                       		dc.b id_SBZ, 0	; Act 3
0000E872 0000                       		dc.b 0, 0
0000E874                            
0000E874                            		; Spring Yard Zone
0000E874 0401                       		dc.b id_SYZ, 1	; Act 1
0000E876 0200                       		dc.b id_MZ,  0	; Act 2
0000E878 0200                       		dc.b id_MZ,	 0	; Act 3
0000E87A 0000                       		dc.b 0, 0
0000E87C                            
0000E87C                            		; Scrap Brain Zone
0000E87C 0501                       		dc.b id_SBZ, 1	; Act 1
0000E87E 0103                       		dc.b id_LZ, 3	; Act 2
0000E880 0000                       		dc.b 0, 0	; Final Zone
0000E882 0000                       		dc.b 0, 0
0000E884                            		even
0000E884                            ; ===========================================================================
0000E884                            
0000E884                            Got_Move2:	; Routine $E
0000E884 7220                       		moveq	#$20,d1		; set horizontal speed
0000E886 3028 0032                  		move.w	got_finalX(a0),d0
0000E88A B068 0008                  		cmp.w	obX(a0),d0	; has item reached its finish position?
0000E88E 6700                       		beq.s	Got_SBZ2	; if yes, branch
0000E890 6C00                       		bge.s	Got_ChgPos2
0000E892 4441                       		neg.w	d1
0000E894                            
0000E894                            	Got_ChgPos2:
0000E894 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E898 3028 0008                  		move.w	obX(a0),d0
0000E89C 6B00                       		bmi.s	locret_C748
0000E89E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E8A2 6400                       		bcc.s	locret_C748	; if yes, branch
0000E8A4 6000 0000                  		bra.w	DisplaySprite
0000E8A8                            ; ===========================================================================
0000E8A8                            
0000E8A8                            locret_C748:
0000E8A8 4E75                       		rts	
0000E8AA                            ; ===========================================================================
0000E8AA                            
0000E8AA                            Got_SBZ2:
0000E8AA 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E8B0 6600 0000                  		bne.w	DeleteObject
0000E8B4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E8B8 4238 F7CC                  		clr.b	(f_lockctrl).w	; unlock controls
0000E8BC 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E8C2                            ; ===========================================================================
0000E8C2                            
0000E8C2                            loc_C766:	; Routine $10
0000E8C2 5478 F72A                  		addq.w	#2,(v_limitright2).w
0000E8C6 0C78 2100 F72A             		cmpi.w	#$2100,(v_limitright2).w
0000E8CC 6700 0000                  		beq.w	DeleteObject
0000E8D0 4E75                       		rts	
0000E8D2                            ; ===========================================================================
0000E8D2                            		;    x-start,	x-main,	y-main,
0000E8D2                            		;				routine, frame number
0000E8D2                            
0000E8D2 0004 0124 00BC             Got_Config:	dc.w 4,		$124,	$BC			; "SONIC HAS"
0000E8D8 0200                       		dc.b 				2,	0
0000E8DA                            
0000E8DA FEE0 0120 00D0             		dc.w -$120,	$120,	$D0			; "PASSED"
0000E8E0 0201                       		dc.b 				2,	1
0000E8E2                            
0000E8E2 040C 014C 00D6             		dc.w $40C,	$14C,	$D6			; "ACT" 1/2/3
0000E8E8 0206                       		dc.b 				2,	6
0000E8EA                            
0000E8EA 0520 0120 0112             		dc.w $520,	$120,	$112			; score
0000E8F0 0202                       		dc.b 				2,	2
0000E8F2                            
0000E8F2 0540 0120 00F2             		dc.w $540,	$120,	$F2			; time bonus
0000E8F8 0203                       		dc.b 				2,	3
0000E8FA                            
0000E8FA 0560 0120 0102             		dc.w $560,	$120,	$102			; ring bonus
0000E900 0204                       		dc.b 				2,	4
0000E902                            
0000E902 020C 014C 00CC             		dc.w $20C,	$14C,	$CC			; oval
0000E908 0205                       		dc.b 				2,	5
0000E908 0205                       		dc.b 				2,	5
0000E90A                            		include	"_incObj\7E Special Stage Results.asm"
0000E90A                            ; ---------------------------------------------------------------------------
0000E90A                            ; Object 7E - special stage results screen
0000E90A                            ; ---------------------------------------------------------------------------
0000E90A                            
0000E90A                            SSResult:
0000E90A 7000                       		moveq	#0,d0
0000E90C 1028 0024                  		move.b	obRoutine(a0),d0
0000E910 323B 0000                  		move.w	SSR_Index(pc,d0.w),d1
0000E914 4EFB 1000                  		jmp	SSR_Index(pc,d1.w)
0000E918                            ; ===========================================================================
0000E918 0000                       SSR_Index:	dc.w SSR_ChkPLC-SSR_Index
0000E91A 0000                       		dc.w SSR_Move-SSR_Index
0000E91C 0000                       		dc.w SSR_Wait-SSR_Index
0000E91E 0000                       		dc.w SSR_RingBonus-SSR_Index
0000E920 0000                       		dc.w SSR_Wait-SSR_Index
0000E922 0000                       		dc.w SSR_Exit-SSR_Index
0000E924 0000                       		dc.w SSR_Wait-SSR_Index
0000E926 0000                       		dc.w SSR_Continue-SSR_Index
0000E928 0000                       		dc.w SSR_Wait-SSR_Index
0000E92A 0000                       		dc.w SSR_Exit-SSR_Index
0000E92C 0000                       		dc.w loc_C91A-SSR_Index
0000E92E                            
0000E92E =00000030                  ssr_mainX:	equ $30		; position for card to display on
0000E92E                            ; ===========================================================================
0000E92E                            
0000E92E                            SSR_ChkPLC:	; Routine 0
0000E92E 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E932 6700                       		beq.s	SSR_Main	; if yes, branch
0000E934 4E75                       		rts	
0000E936                            ; ===========================================================================
0000E936                            
0000E936                            SSR_Main:
0000E936 2248                       		movea.l	a0,a1
0000E938 45F9 0000 0000             		lea	(SSR_Config).l,a2
0000E93E 7203                       		moveq	#3,d1
0000E940 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have 50 or more rings?
0000E946 6500                       		bcs.s	SSR_Loop	; if no, branch
0000E948 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000E94A                            
0000E94A                            	SSR_Loop:
0000E94A 12BC 0000                  		move.b	#id_SSResult,0(a1)
0000E94E 335A 0008                  		move.w	(a2)+,obX(a1)	; load start x-position
0000E952 335A 0030                  		move.w	(a2)+,ssr_mainX(a1) ; load main x-position
0000E956 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E95A 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E95E 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000E962 237C 0000 0000 0004        		move.l	#Map_SSR,obMap(a1)
0000E96A 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E970 137C 0000 0001             		move.b	#0,obRender(a1)
0000E976 43E9 0040                  		lea	$40(a1),a1
0000E97A 51C9 FFCE                  		dbf	d1,SSR_Loop	; repeat sequence 3 or 4 times
0000E97E                            
0000E97E 7007                       		moveq	#7,d0
0000E980 1238 FE57                  		move.b	(v_emeralds).w,d1
0000E984 6700                       		beq.s	loc_C842
0000E986 7000                       		moveq	#0,d0
0000E988 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000E98C 6600                       		bne.s	loc_C842	; if not, branch
0000E98E 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000E990 317C 0018 0008             		move.w	#$18,obX(a0)
0000E996 317C 0118 0030             		move.w	#$118,ssr_mainX(a0) ; change position of text
0000E99C                            
0000E99C                            loc_C842:
0000E99C 1140 001A                  		move.b	d0,obFrame(a0)
0000E9A0                            
0000E9A0                            SSR_Move:	; Routine 2
0000E9A0 7210                       		moveq	#$10,d1		; set horizontal speed
0000E9A2 3028 0030                  		move.w	ssr_mainX(a0),d0
0000E9A6 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E9AA 6700                       		beq.s	loc_C86C	; if yes, branch
0000E9AC 6C00                       		bge.s	SSR_ChgPos
0000E9AE 4441                       		neg.w	d1
0000E9B0                            
0000E9B0                            SSR_ChgPos:
0000E9B0 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E9B4                            
0000E9B4                            loc_C85A:
0000E9B4 3028 0008                  		move.w	obX(a0),d0
0000E9B8 6B00                       		bmi.s	locret_C86A
0000E9BA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E9BE 6400                       		bcc.s	locret_C86A	; if yes, branch
0000E9C0 6000 0000                  		bra.w	DisplaySprite
0000E9C4                            ; ===========================================================================
0000E9C4                            
0000E9C4                            locret_C86A:
0000E9C4 4E75                       		rts	
0000E9C6                            ; ===========================================================================
0000E9C6                            
0000E9C6                            loc_C86C:
0000E9C6 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000E9CC 66E6                       		bne.s	loc_C85A
0000E9CE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E9D2 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E9D8 11FC 0000 D800             		move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E9DE                            
0000E9DE                            SSR_Wait:	; Routine 4, 8, $C, $10
0000E9DE 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E9E2 6600                       		bne.s	SSR_Display
0000E9E4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E9E8                            
0000E9E8                            SSR_Display:
0000E9E8 6000 0000                  		bra.w	DisplaySprite
0000E9EC                            ; ===========================================================================
0000E9EC                            
0000E9EC                            SSR_RingBonus:	; Routine 6
0000E9EC 6100 0000                  		bsr.w	DisplaySprite
0000E9F0 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set ring bonus update flag
0000E9F6 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E9FA 6700                       		beq.s	loc_C8C4	; if yes, branch
0000E9FC 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000EA02 700A                       		moveq	#10,d0		; add 10 to score
0000EA04 4EB9 0000 0000             		jsr	(AddPoints).l
0000EA0A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000EA0E 0200 0003                  		andi.b	#3,d0
0000EA12 6600                       		bne.s	locret_C8EA
0000EA1E                            ; ===========================================================================
0000EA1E                            
0000EA1E                            loc_C8C4:
0000EA28 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EA2C 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000EA32 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have at least 50 rings?
0000EA38 6500                       		bcs.s	locret_C8EA	; if not, branch
0000EA3A 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time delay to 1 second
0000EA40 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto "SSR_Continue" routine
0000EA44                            
0000EA44                            locret_C8EA:
0000EA44 4E75                       		rts	
0000EA46                            ; ===========================================================================
0000EA46                            
0000EA46                            SSR_Exit:	; Routine $A, $12
0000EA46 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000EA4C 6000 0000                  		bra.w	DisplaySprite
0000EA50                            ; ===========================================================================
0000EA50                            
0000EA50                            SSR_Continue:	; Routine $E
0000EA50 11FC 0004 D6DA             		move.b	#4,(v_objspace+$6C0+obFrame).w
0000EA56 11FC 0014 D6E4             		move.b	#$14,(v_objspace+$6C0+obRoutine).w
0000EA66 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EA6A 317C 0168 001E             		move.w	#360,obTimeFrame(a0) ; set time delay to 6 seconds
0000EA70 6000 0000                  		bra.w	DisplaySprite
0000EA74                            ; ===========================================================================
0000EA74                            
0000EA74                            loc_C91A:	; Routine $14
0000EA74 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000EA78 0200 000F                  		andi.b	#$F,d0
0000EA7C 6600                       		bne.s	SSR_Display2
0000EA7E 0868 0000 001A             		bchg	#0,obFrame(a0)
0000EA84                            
0000EA84                            SSR_Display2:
0000EA84 6000 0000                  		bra.w	DisplaySprite
0000EA88                            ; ===========================================================================
0000EA88 0020 0120 00C4             SSR_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000EA8E 0200                       		dc.b 2,	0		; rountine number, frame number
0000EA90 0320 0120 0118             		dc.w $320, $120, $118
0000EA96 0201                       		dc.b 2,	1
0000EA98 0360 0120 0128             		dc.w $360, $120, $128
0000EA9E 0202                       		dc.b 2,	2
0000EAA0 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000EAA6 0203                       		dc.b 2,	3
0000EAA8 03A0 0120 0138             		dc.w $3A0, $120, $138
0000EAAE 0206                       		dc.b 2,	6
0000EAAE 0206                       		dc.b 2,	6
0000EAB0                            		include	"_incObj\7F SS Result Chaos Emeralds.asm"
0000EAB0                            ; ---------------------------------------------------------------------------
0000EAB0                            ; Object 7F - chaos emeralds from the special stage results screen
0000EAB0                            ; ---------------------------------------------------------------------------
0000EAB0                            
0000EAB0                            SSRChaos:
0000EAB0 7000                       		moveq	#0,d0
0000EAB2 1028 0024                  		move.b	obRoutine(a0),d0
0000EAB6 323B 0000                  		move.w	SSRC_Index(pc,d0.w),d1
0000EABA 4EFB 1000                  		jmp	SSRC_Index(pc,d1.w)
0000EABE                            ; ===========================================================================
0000EABE 0000                       SSRC_Index:	dc.w SSRC_Main-SSRC_Index
0000EAC0 0000                       		dc.w SSRC_Flash-SSRC_Index
0000EAC2                            
0000EAC2                            ; ---------------------------------------------------------------------------
0000EAC2                            ; X-axis positions for chaos emeralds
0000EAC2                            ; ---------------------------------------------------------------------------
0000EAC2 0110 0128 00F8 0140 00E0+  SSRC_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000EACE                            ; ===========================================================================
0000EACE                            
0000EACE                            SSRC_Main:	; Routine 0
0000EACE 2248                       		movea.l	a0,a1
0000EAD0 45F9 0000 EAC2             		lea	(SSRC_PosData).l,a2
0000EAD6 7400                       		moveq	#0,d2
0000EAD8 7200                       		moveq	#0,d1
0000EADA 1238 FE57                  		move.b	(v_emeralds).w,d1 ; d1 is number of emeralds
0000EADE 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000EAE0 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000EAE4                            
0000EAE4                            	SSRC_Loop:
0000EAE4 12BC 0000                  		move.b	#id_SSRChaos,0(a1)
0000EAE8 335A 0008                  		move.w	(a2)+,obX(a1)	; set x-position
0000EAEC 337C 00F0 000A             		move.w	#$F0,obScreenY(a1) ; set y-position
0000EAF2 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0000EAF6 1633 2000                  		move.b	(a3,d2.w),d3
0000EAFA 1343 001A                  		move.b	d3,obFrame(a1)
0000EAFE 1343 001C                  		move.b	d3,obAnim(a1)
0000EB02 5202                       		addq.b	#1,d2
0000EB04 5429 0024                  		addq.b	#2,obRoutine(a1)
0000EB08 237C 0000 0000 0004        		move.l	#Map_SSRC,obMap(a1)
0000EB10 337C 8541 0002             		move.w	#$8541,obGfx(a1)
0000EB16 137C 0000 0001             		move.b	#0,obRender(a1)
0000EB1C 43E9 0040                  		lea	$40(a1),a1	; next object
0000EB20 51C9 FFC2                  		dbf	d1,SSRC_Loop	; loop for d1 number of	emeralds
0000EB24                            
0000EB24                            SSRC_Flash:	; Routine 2
0000EB24 1028 001A                  		move.b	obFrame(a0),d0
0000EB28 117C 0006 001A             		move.b	#6,obFrame(a0)	; load 6th frame (blank)
0000EB2E 0C00 0006                  		cmpi.b	#6,d0
0000EB32 6600                       		bne.s	SSRC_Display
0000EB34 1168 001C 001A             		move.b	obAnim(a0),obFrame(a0) ; load visible frame
0000EB3A                            
0000EB3A                            	SSRC_Display:
0000EB3A 6000 0000                  		bra.w	DisplaySprite
0000EB3A 6000 0000                  		bra.w	DisplaySprite
0000EB3E                            
0000EB3E                            ; ---------------------------------------------------------------------------
0000EB3E                            ; Sprite mappings - zone title cards
0000EB3E                            ; ---------------------------------------------------------------------------
0000EB3E 0000                       Map_Card:	dc.w M_Card_GHZ-Map_Card
0000EB40 0000                       		dc.w M_Card_LZ-Map_Card
0000EB42 0000                       		dc.w M_Card_MZ-Map_Card
0000EB44 0000                       		dc.w M_Card_SLZ-Map_Card
0000EB46 0000                       		dc.w M_Card_SYZ-Map_Card
0000EB48 0000                       		dc.w M_Card_SBZ-Map_Card
0000EB4A 0000                       		dc.w M_Card_Zone-Map_Card
0000EB4C 0000                       		dc.w M_Card_Act1-Map_Card
0000EB4E 0000                       		dc.w M_Card_Act2-Map_Card
0000EB50 0000                       		dc.w M_Card_Act3-Map_Card
0000EB52 0000                       		dc.w M_Card_Oval-Map_Card
0000EB54 0000                       		dc.w M_Card_FZ-Map_Card
0000EB56 09                         M_Card_GHZ:	dc.b 9 			; GREEN HILL
0000EB57 F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000EB5C F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000EB61 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000EB66 F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000EB6B F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000EB70 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000EB75 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000EB7A F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000EB7F F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000EB84                            		even
0000EB84 0D                         M_Card_LZ:	dc.b $D	;  LABYRINTH | ROBOTIC ABYSS
0000EB85 F805 003A 9C               		dc.b $F8, 5, 0, $3A, $9C	; R
0000EB8A F805 0032 AC               		dc.b $F8, 5, 0, $32, $AC	; O
0000EB8F F805 0004 BC               		dc.b $F8, 5, 0, 4, $BC		; B
0000EB94 F805 0032 CC               		dc.b $F8, 5, 0, $32, $CC	; O
0000EB99 F805 0042 DC               		dc.b $F8, 5, 0, $42, $DC	; T
0000EB9E F801 0020 EC               		dc.b $F8, 1, 0, $20, $EC	; I
0000EBA3 F805 0008 F4               		dc.b $F8, 5, 0, 8, $F4		; C
0000EBA8 F800 0056 04               		dc.b $F8, 0, 0, $56, $4	; Space
0000EBAD F805 0000 14               		dc.b $F8, 5, 0, 0, $14		; A
0000EBB2 F805 0004 24               		dc.b $F8, 5, 0, 4, $24		; B
0000EBB7 F805 004A 34               		dc.b $F8, 5, 0, $4A, $34	; Y
0000EBBC F805 003E 44               		dc.b $F8, 5, 0, $3E, $44	; S
0000EBC1 F805 003E 54               		dc.b $F8, 5, 0, $3E, $54	; S
0000EBC6 0B                         M_Card_MZ:	dc.b $B	;  MARBLE | SCRAP RUINS
0000EBC7 F805 003E A4               		dc.b $F8, 5, 0, $3E, $A4	; S
0000EBCC F805 0008 B4               		dc.b $F8, 5, 0, 8, $B4		; C
0000EBD1 F805 003A C4               		dc.b $F8, 5, 0, $3A, $C4	; R
0000EBD6 F805 0000 D4               		dc.b $F8, 5, 0, 0, $D4		; A
0000EBDB F805 0036 E4               		dc.b $F8, 5, 0, $36, $E4	; P
0000EBE0 F800 0056 F4               		dc.b $F8, 0, 0, $56, $F4	; Space
0000EBE5 F805 003A 04               		dc.b $F8, 5, 0, $3A, $4	; R
0000EBEA F805 0046 14               		dc.b $F8, 5, 0, $46, $14	; U
0000EBEF F801 0020 24               		dc.b $F8, 1, 0, $20, $24	; I
0000EBF4 F805 002E 2C               		dc.b $F8, 5, 0, $2E, $2C	; N
0000EBF9 F805 003E 3C               		dc.b $F8, 5, 0, $3E, $3C	; S
0000EBFE 09                         M_Card_SLZ:	dc.b 9			; STAR LIGHT
0000EBFF F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000EC04 F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000EC09 F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000EC0E F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000EC13 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000EC18 F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000EC1D F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000EC22 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000EC27 F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000EC2C                            		even
0000EC2C 0A                         M_Card_SYZ:	dc.b $A	;  SPRING YARD | FUTURE BAY
0000EC2D F805 0014 AC               		dc.b $F8, 5, 0, $14, $AC	; F
0000EC32 F805 0046 BC               		dc.b $F8, 5, 0, $46, $BC	; U
0000EC37 F805 0042 CC               		dc.b $F8, 5, 0, $42, $CC	; T
0000EC3C F805 0046 DC               		dc.b $F8, 5, 0, $46, $DC	; U
0000EC41 F805 003A EC               		dc.b $F8, 5, 0, $3A, $EC	; R
0000EC46 F805 0010 FC               		dc.b $F8, 5, 0, $10, $FC	; E
0000EC4B F800 0056 0C               		dc.b $F8, 0, 0, $56, $C	; Space
0000EC50 F805 0004 1C               		dc.b $F8, 5, 0, 4, $1C		; B
0000EC55 F805 0000 2C               		dc.b $F8, 5, 0, 0, $2C		; A
0000EC5A F805 004A 3C               		dc.b $F8, 5, 0, $4A, $3C	; Y
0000EC5F 0A                         M_Card_SBZ:	dc.b $A			; SCRAP BRAIN
0000EC60 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000EC65 F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000EC6A F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000EC6F F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000EC74 F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000EC79 F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000EC7E F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000EC83 F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000EC88 F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000EC8D F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000EC92                            		even
0000EC92 04                         M_Card_Zone:	dc.b 4			; ZONE
0000EC93 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000EC98 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000EC9D F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000ECA2 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000ECA8 00                         		even
0000ECA8 02                         M_Card_Act1:	dc.b 2			; ACT 1
0000ECA9 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000ECAE F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000ECB3 02                         M_Card_Act2:	dc.b 2			; ACT 2
0000ECB4 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000ECB9 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000ECBE 02                         M_Card_Act3:	dc.b 2			; ACT 3
0000ECBF 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000ECC4 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000ECC9 0D                         M_Card_Oval:	dc.b $D			; Oval
0000ECCA E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000ECCF E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000ECD4 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000ECD9 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000ECDE 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000ECE3 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000ECE8 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000ECED FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000ECF2 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000ECF7 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000ECFC FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000ED01 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000ED06 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000ED0C 00                         		even
0000ED0C 05                         M_Card_FZ:	dc.b 5			; FINAL
0000ED0D F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000ED12 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000ED17 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000ED1C F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000ED21 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000ED26                            		even
0000ED26                            
0000ED26                            Map_Over:	include	"_maps\Game Over.asm"
0000ED26                            ; ---------------------------------------------------------------------------
0000ED26                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000ED26                            ; ---------------------------------------------------------------------------
0000ED26                            Map_Over_internal:
0000ED26 0000                       		dc.w byte_CBAC-Map_Over_internal
0000ED28 0000                       		dc.w byte_CBB7-Map_Over_internal
0000ED2A 0000                       		dc.w byte_CBC2-Map_Over_internal
0000ED2C 0000                       		dc.w byte_CBCD-Map_Over_internal
0000ED2E 02                         byte_CBAC:	dc.b 2			; GAME
0000ED2F F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000ED34 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000ED39 02                         byte_CBB7:	dc.b 2			; OVER
0000ED3A F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000ED3F F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000ED44 02                         byte_CBC2:	dc.b 2			; TIME
0000ED45 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000ED4A F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000ED4F 02                         byte_CBCD:	dc.b 2			; OVER
0000ED50 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000ED55 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000ED5A                            		even
0000ED5A                            		even
0000ED5A                            
0000ED5A                            ; ---------------------------------------------------------------------------
0000ED5A                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000ED5A                            ; ---------------------------------------------------------------------------
0000ED5A 0000                       Map_Got:	dc.w M_Got_SonicHas-Map_Got
0000ED5C 0000                       		dc.w M_Got_Passed-Map_Got
0000ED5E 0000                       		dc.w M_Got_Score-Map_Got
0000ED60 0000                       		dc.w M_Got_TBonus-Map_Got
0000ED62 0000                       		dc.w M_Got_RBonus-Map_Got
0000ED64 FF6F                       		dc.w M_Card_Oval-Map_Got
0000ED66 FF4E                       		dc.w M_Card_Act1-Map_Got
0000ED68 FF59                       		dc.w M_Card_Act2-Map_Got
0000ED6A FF64                       		dc.w M_Card_Act3-Map_Got
0000ED6C 08                         M_Got_SonicHas:	dc.b 8			; SONIC HAS
0000ED6D F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000ED72 F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000ED77 F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000ED7C F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000ED81 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000ED86 F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000ED8B F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000ED90 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000ED95 06                         M_Got_Passed:	dc.b 6			; PASSED
0000ED96 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000ED9B F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000EDA0 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000EDA5 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000EDAA F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EDAF F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000EDB4 06                         M_Got_Score:	dc.b 6			; SCORE
0000EDB5 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000EDBA F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EDBF F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EDC4 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EDC9 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EDCE FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EDD3 07                         M_Got_TBonus:	dc.b 7			; TIME BONUS
0000EDD4 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000EDD9 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EDDE F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EDE3 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EDE8 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EDED F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000EDF2 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EDF7 07                         M_Got_RBonus:	dc.b 7			; RING BONUS
0000EDF8 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EDFD F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EE02 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EE07 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EE0C FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EE11 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EE16 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EE1C 00                         		even
0000EE1C                            ; ---------------------------------------------------------------------------
0000EE1C                            ; Sprite mappings - special stage results screen
0000EE1C                            ; ---------------------------------------------------------------------------
0000EE1C 0000                       Map_SSR:	dc.w M_SSR_Chaos-Map_SSR
0000EE1E 0000                       		dc.w M_SSR_Score-Map_SSR
0000EE20 0000                       		dc.w byte_CD0D-Map_SSR
0000EE22 FEAD                       		dc.w M_Card_Oval-Map_SSR
0000EE24 0000                       		dc.w byte_CD31-Map_SSR
0000EE26 0000                       		dc.w byte_CD46-Map_SSR
0000EE28 0000                       		dc.w byte_CD5B-Map_SSR
0000EE2A 0000                       		dc.w byte_CD6B-Map_SSR
0000EE2C 0000                       		dc.w byte_CDA8-Map_SSR
0000EE2E 0D                         M_SSR_Chaos:	dc.b $D			; "CHAOS EMERALDS"
0000EE2F F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000EE34 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000EE39 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000EE3E F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000EE43 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000EE48 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000EE4D F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000EE52 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EE57 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000EE5C F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000EE61 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000EE66 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000EE6B F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000EE70 06                         M_SSR_Score:	dc.b 6			; "SCORE"
0000EE71 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000EE76 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EE7B F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EE80 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EE85 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EE8A FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EE8F 07                         byte_CD0D:	dc.b 7
0000EE90 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EE95 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EE9A F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EE9F F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EEA4 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EEA9 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EEAE F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EEB3 04                         byte_CD31:	dc.b 4
0000EEB4 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EEB9 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EEBE F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EEC3 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000EEC8 04                         byte_CD46:	dc.b 4
0000EEC9 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EECE F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EED3 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EED8 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000EEDD 03                         byte_CD5B:	dc.b 3
0000EEDE F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EEE3 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EEE8 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EEED 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000EEEE F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000EEF3 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000EEF8 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000EEFD F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000EF02 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000EF07 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000EF0C F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000EF11 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000EF16 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000EF1B F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000EF20 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000EF25 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000EF2A 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000EF2B F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000EF30 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000EF35 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000EF3A F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000EF3F F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000EF44 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000EF49 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000EF4E F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000EF53 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000EF58 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000EF5D F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000EF62 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000EF67 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000EF6C F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000EF71 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000EF76                            		even
0000EF76                            
0000EF76                            Map_SSRC:	include	"_maps\SS Result Chaos Emeralds.asm"
0000EF76                            ; ---------------------------------------------------------------------------
0000EF76                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000EF76                            ; ---------------------------------------------------------------------------
0000EF76                            Map_SSRC_internal:
0000EF76 0000                       		dc.w byte_CE02-Map_SSRC_internal
0000EF78 0000                       		dc.w byte_CE08-Map_SSRC_internal
0000EF7A 0000                       		dc.w byte_CE0E-Map_SSRC_internal
0000EF7C 0000                       		dc.w byte_CE14-Map_SSRC_internal
0000EF7E 0000                       		dc.w byte_CE1A-Map_SSRC_internal
0000EF80 0000                       		dc.w byte_CE20-Map_SSRC_internal
0000EF82 0000                       		dc.w byte_CE26-Map_SSRC_internal
0000EF84 01                         byte_CE02:	dc.b 1
0000EF85 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000EF8A 01                         byte_CE08:	dc.b 1
0000EF8B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000EF90 01                         byte_CE0E:	dc.b 1
0000EF91 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000EF96 01                         byte_CE14:	dc.b 1
0000EF97 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000EF9C 01                         byte_CE1A:	dc.b 1
0000EF9D F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000EFA2 01                         byte_CE20:	dc.b 1
0000EFA3 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000EFA8 00                         byte_CE26:	dc.b 0			; Blank frame
0000EFAA 00                         		even
0000EFAA 00                         		even
0000EFAA                            
0000EFAA                            		include	"_incObj\36 Spikes.asm"
0000EFAA                            ; ---------------------------------------------------------------------------
0000EFAA                            ; Object 36 - spikes
0000EFAA                            ; ---------------------------------------------------------------------------
0000EFAA                            
0000EFAA                            Spikes:
0000EFAA 7000                       		moveq	#0,d0
0000EFAC 1028 0024                  		move.b	obRoutine(a0),d0
0000EFB0 323B 0000                  		move.w	Spik_Index(pc,d0.w),d1
0000EFB4 4EFB 1000                  		jmp	Spik_Index(pc,d1.w)
0000EFB8                            ; ===========================================================================
0000EFB8 0000                       Spik_Index:	dc.w Spik_Main-Spik_Index
0000EFBA 0000                       		dc.w Spik_Solid-Spik_Index
0000EFBC                            
0000EFBC =00000030                  spik_origX:	equ $30		; start X position
0000EFBC =00000032                  spik_origY:	equ $32		; start Y position
0000EFBC                            
0000EFBC 0014                       Spik_Var:	dc.b 0,	$14		; frame	number,	object width
0000EFBE 0110                       		dc.b 1,	$10
0000EFC0 0204                       		dc.b 2,	4
0000EFC2 031C                       		dc.b 3,	$1C
0000EFC4 0440                       		dc.b 4,	$40
0000EFC6 0510                       		dc.b 5,	$10
0000EFC8                            ; ===========================================================================
0000EFC8                            
0000EFC8                            Spik_Main:	; Routine 0
0000EFC8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EFCC 217C 0000 0000 0004        		move.l	#Map_Spike,obMap(a0)
0000EFD4 317C 051B 0002             		move.w	#$51B,obGfx(a0)
0000EFDA 0028 0004 0001             		ori.b	#4,obRender(a0)
0000EFE0 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000EFE6 1028 0028                  		move.b	obSubtype(a0),d0
0000EFEA 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000EFF0 0240 00F0                  		andi.w	#$F0,d0
0000EFF4 43F9 0000 EFBC             		lea	(Spik_Var).l,a1
0000EFFA E648                       		lsr.w	#3,d0
0000EFFC D2C0                       		adda.w	d0,a1
0000EFFE 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000F002 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000F006 3168 0008 0030             		move.w	obX(a0),spik_origX(a0)
0000F00C 3168 000C 0032             		move.w	obY(a0),spik_origY(a0)
0000F012                            
0000F012                            Spik_Solid:	; Routine 2
0000F012 6100 0000                  		bsr.w	Spik_Type0x	; make the object move
0000F016 343C 0004                  		move.w	#4,d2
0000F01A 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is object type $5x ?
0000F020 6700                       		beq.s	Spik_SideWays	; if yes, branch
0000F022 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is object type $1x ?
0000F028 6600                       		bne.s	Spik_Upright	; if not, branch
0000F02A 343C 0014                  		move.w	#$14,d2
0000F02E                            
0000F02E                            ; Spikes types $1x and $5x face	sideways
0000F02E                            
0000F02E                            Spik_SideWays:
0000F02E 323C 001B                  		move.w	#$1B,d1
0000F032 3602                       		move.w	d2,d3
0000F034 5243                       		addq.w	#1,d3
0000F036 3828 0008                  		move.w	obX(a0),d4
0000F03A 6100 0000                  		bsr.w	SolidObject
0000F03E 0828 0003 0022             		btst	#3,obStatus(a0)
0000F044 6600                       		bne.s	Spik_Display
0000F046 0C44 0001                  		cmpi.w	#1,d4
0000F04A 6700                       		beq.s	Spik_Hurt
0000F04C 6000                       		bra.s	Spik_Display
0000F04E                            ; ===========================================================================
0000F04E                            
0000F04E                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000F04E                            
0000F04E                            Spik_Upright:
0000F04E 7200                       		moveq	#0,d1
0000F050 1228 0014                  		move.b	obActWid(a0),d1
0000F054 0641 000B                  		addi.w	#$B,d1
0000F058 343C 0010                  		move.w	#$10,d2
0000F05C 363C 0011                  		move.w	#$11,d3
0000F060 3828 0008                  		move.w	obX(a0),d4
0000F064 6100 0000                  		bsr.w	SolidObject
0000F068 0828 0003 0022             		btst	#3,obStatus(a0)
0000F06E 6600                       		bne.s	Spik_Hurt
0000F070 4A44                       		tst.w	d4
0000F072 6A00                       		bpl.s	Spik_Display
0000F074                            
0000F074                            Spik_Hurt:
0000F074 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0000F078 6600                       		bne.s	Spik_Display	; if yes, branch
0000F07A 4A78 D030                  		tst.w	(v_player+$30).w ; +++ is Sonic invulnerable?
0000F07E 6600                       		bne.s	Spik_Display	; +++ if yes, branch
0000F080 2F08                       		move.l	a0,-(sp)
0000F082 2448                       		movea.l	a0,a2
0000F084 41F8 D000                  		lea	(v_player).w,a0
0000F088 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000F08E 6400                       		bcc.s	loc_CF20
0000F090                            		; This fixes the infamous "spike bug"
0000F090 4A68 0030                  		tst.w	flashtime(a0)	; Is Sonic flashing after being hurt?
0000F094 6600                       		bne.s	loc_CF20	; If so, skip getting hurt
0000F096 4EF9 0000 00E0             		jmp	(loc_E0).l	; This is a copy of the above code that was pushed aside for this
0000F09C                            loc_D5A2:
0000F09C 9680                       		sub.l	d0,d3
0000F09E 2143 000C                  		move.l	d3,obY(a0)
0000F0A2 4EB9 0000 0000             		jsr	(HurtSonic).l
0000F0A8                            
0000F0A8                            loc_CF20:
0000F0A8 205F                       		movea.l	(sp)+,a0
0000F0AA                            
0000F0AA                            Spik_Display:
0000F0AA 6100 0000                  		bsr.w	DisplaySprite
0000F0CC 4E75                       		rts	
0000F0CE                            ; ===========================================================================
0000F0CE                            
0000F0CE                            Spik_Type0x:
0000F0CE 7000                       		moveq	#0,d0
0000F0D0 1028 0028                  		move.b	obSubtype(a0),d0
0000F0D4 D040                       		add.w	d0,d0
0000F0D6 323B 0000                  		move.w	Spik_TypeIndex(pc,d0.w),d1
0000F0DA 4EFB 1000                  		jmp	Spik_TypeIndex(pc,d1.w)
0000F0DE                            ; ===========================================================================
0000F0DE 0000                       Spik_TypeIndex:	dc.w Spik_Type00-Spik_TypeIndex
0000F0E0 0000                       		dc.w Spik_Type01-Spik_TypeIndex
0000F0E2 0000                       		dc.w Spik_Type02-Spik_TypeIndex
0000F0E4                            ; ===========================================================================
0000F0E4                            
0000F0E4                            Spik_Type00:
0000F0E4 4E75                       		rts			; don't move the object
0000F0E6                            ; ===========================================================================
0000F0E6                            
0000F0E6                            Spik_Type01:
0000F0E6 6100 0000                  		bsr.w	Spik_Wait
0000F0EA 7000                       		moveq	#0,d0
0000F0EC 1028 0034                  		move.b	$34(a0),d0
0000F0F0 D068 0032                  		add.w	spik_origY(a0),d0
0000F0F4 3140 000C                  		move.w	d0,obY(a0)	; move the object vertically
0000F0F8 4E75                       		rts	
0000F0FA                            ; ===========================================================================
0000F0FA                            
0000F0FA                            Spik_Type02:
0000F0FA 6100 0000                  		bsr.w	Spik_Wait
0000F0FE 7000                       		moveq	#0,d0
0000F100 1028 0034                  		move.b	$34(a0),d0
0000F104 D068 0030                  		add.w	spik_origX(a0),d0
0000F108 3140 0008                  		move.w	d0,obX(a0)	; move the object horizontally
0000F10C 4E75                       		rts	
0000F10E                            ; ===========================================================================
0000F10E                            
0000F10E                            Spik_Wait:
0000F10E 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000F112 6700                       		beq.s	loc_CFA4	; if yes, branch
0000F114 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000F118 6600                       		bne.s	locret_CFE6
0000F11A 4A28 0001                  		tst.b	obRender(a0)
0000F11E 6A00                       		bpl.s	locret_CFE6
0000F12A 6000                       		bra.s	locret_CFE6
0000F12C                            ; ===========================================================================
0000F12C                            
0000F12C                            loc_CFA4:
0000F12C 4A68 0036                  		tst.w	$36(a0)
0000F130 6700                       		beq.s	loc_CFC6
0000F132 0468 0800 0034             		subi.w	#$800,$34(a0)
0000F138 6400                       		bcc.s	locret_CFE6
0000F13A 317C 0000 0034             		move.w	#0,$34(a0)
0000F140 317C 0000 0036             		move.w	#0,$36(a0)
0000F146 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F14C 6000                       		bra.s	locret_CFE6
0000F14E                            ; ===========================================================================
0000F14E                            
0000F14E                            loc_CFC6:
0000F14E 0668 0800 0034             		addi.w	#$800,$34(a0)
0000F154 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000F15A 6500                       		bcs.s	locret_CFE6
0000F15C 317C 2000 0034             		move.w	#$2000,$34(a0)
0000F162 317C 0001 0036             		move.w	#1,$36(a0)
0000F168 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F16E                            
0000F16E                            locret_CFE6:
0000F16E 4E75                       		rts	
0000F16E 4E75                       		rts	
0000F170                            Map_Spike:	include	"_maps\Spikes.asm"
0000F170                            ; --------------------------------------------------------------------------------
0000F170                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000F170                            ; --------------------------------------------------------------------------------
0000F170                            
0000F170                            SME_XgeaQ:	
0000F170 0000 0000                  		dc.w SME_XgeaQ_C-SME_XgeaQ, SME_XgeaQ_1C-SME_XgeaQ	
0000F174 0000 0000                  		dc.w SME_XgeaQ_2C-SME_XgeaQ, SME_XgeaQ_32-SME_XgeaQ	
0000F178 0000 0000                  		dc.w SME_XgeaQ_42-SME_XgeaQ, SME_XgeaQ_61-SME_XgeaQ	
0000F17C 03                         SME_XgeaQ_C:	dc.b 3	
0000F17D F003 2004 EC               		dc.b $F0, 3, $20, 4, $EC	
0000F182 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F187 F003 2004 0C               		dc.b $F0, 3, $20, 4, $C	
0000F18C 03                         SME_XgeaQ_1C:	dc.b 3	
0000F18D EC0C 2000 F0               		dc.b $EC, $C, $20, 0, $F0	
0000F192 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F197 0C0C 2000 F0               		dc.b $C, $C, $20, 0, $F0	
0000F19C 01                         SME_XgeaQ_2C:	dc.b 1	
0000F19D F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F1A2 03                         SME_XgeaQ_32:	dc.b 3	
0000F1A3 F003 2004 E4               		dc.b $F0, 3, $20, 4, $E4	
0000F1A8 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F1AD F003 2004 14               		dc.b $F0, 3, $20, 4, $14	
0000F1B2 06                         SME_XgeaQ_42:	dc.b 6	
0000F1B3 F003 2004 C0               		dc.b $F0, 3, $20, 4, $C0	
0000F1B8 F003 2004 D8               		dc.b $F0, 3, $20, 4, $D8	
0000F1BD F003 2004 F0               		dc.b $F0, 3, $20, 4, $F0	
0000F1C2 F003 2004 08               		dc.b $F0, 3, $20, 4, 8	
0000F1C7 F003 2004 20               		dc.b $F0, 3, $20, 4, $20	
0000F1CC F003 2004 38               		dc.b $F0, 3, $20, 4, $38	
0000F1D1 01                         SME_XgeaQ_61:	dc.b 1	
0000F1D2 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F1D8 00                         		even
0000F1D8 00                         		even
0000F1D8                            		include	"_incObj\3B Purple Rock.asm"
0000F1D8                            ; ---------------------------------------------------------------------------
0000F1D8                            ; Object 3B - purple rock (GHZ)
0000F1D8                            ; ---------------------------------------------------------------------------
0000F1D8                            
0000F1D8                            PurpleRock:
0000F1D8 7000                       		moveq	#0,d0
0000F1DA 1028 0024                  		move.b	obRoutine(a0),d0
0000F1DE 323B 0000                  		move.w	Rock_Index(pc,d0.w),d1
0000F1E2 4EFB 1000                  		jmp	Rock_Index(pc,d1.w)
0000F1E6                            ; ===========================================================================
0000F1E6 0000                       Rock_Index:	dc.w Rock_Main-Rock_Index
0000F1E8 0000                       		dc.w Rock_Solid-Rock_Index
0000F1EA                            ; ===========================================================================
0000F1EA                            
0000F1EA                            Rock_Main:	; Routine 0
0000F1EA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F1EE 217C 0000 0000 0004        		move.l	#Map_PRock,obMap(a0)
0000F1F6 317C 63D0 0002             		move.w	#$63D0,obGfx(a0)
0000F1FC 117C 0004 0001             		move.b	#4,obRender(a0)
0000F202 117C 0013 0014             		move.b	#$13,obActWid(a0)
0000F208 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F20E                            
0000F20E                            Rock_Solid:	; Routine 2
0000F20E 323C 001B                  		move.w	#$1B,d1
0000F212 343C 0010                  		move.w	#$10,d2
0000F216 363C 0010                  		move.w	#$10,d3
0000F21A 3828 0008                  		move.w	obX(a0),d4
0000F21E 6100 0000                  		bsr.w	SolidObject
0000F222 6100 0000                  		bsr.w	DisplaySprite
0000F244 4E75                       		rts	
0000F244 4E75                       		rts	
0000F246                            		include	"_incObj\49 Waterfall Sound.asm"
0000F246                            ; ---------------------------------------------------------------------------
0000F246                            ; Object 49 - waterfall	sound effect (GHZ)
0000F246                            ; ---------------------------------------------------------------------------
0000F246                            
0000F246                            WaterSound:
0000F246 7000                       		moveq	#0,d0
0000F248 1028 0024                  		move.b	obRoutine(a0),d0
0000F24C 323B 0000                  		move.w	WSnd_Index(pc,d0.w),d1
0000F250 4EFB 1000                  		jmp	WSnd_Index(pc,d1.w)
0000F254                            ; ===========================================================================
0000F254 0000                       WSnd_Index:	dc.w WSnd_Main-WSnd_Index
0000F256 0000                       		dc.w WSnd_PlaySnd-WSnd_Index
0000F258                            ; ===========================================================================
0000F258                            
0000F258                            WSnd_Main:	; Routine 0
0000F258 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F25C 117C 0004 0001             		move.b	#4,obRender(a0)
0000F262                            
0000F262                            WSnd_PlaySnd:	; Routine 2
0000F262 1038 FE0F                  		move.b	(v_vbla_byte).w,d0 ; get low byte of VBlank counter
0000F266 0200 003F                  		andi.b	#$3F,d0
0000F26A 6600                       		bne.s	WSnd_ChkDel
0000F276                            
0000F276                            	WSnd_ChkDel:
0000F294 4E75                       		rts	
0000F294 4E75                       		rts	
0000F296                            Map_PRock:	include	"_maps\Purple Rock.asm"
0000F296                            ; ---------------------------------------------------------------------------
0000F296                            ; Sprite mappings - purple rock	(GHZ)
0000F296                            ; ---------------------------------------------------------------------------
0000F296                            Map_PRock_internal:
0000F296 0000                       		dc.w byte_D110-Map_PRock_internal
0000F298 02                         byte_D110:	dc.b 2
0000F299 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F29E F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000F2A4 00                         		even
0000F2A4 00                         		even
0000F2A4                            		include	"_incObj\3C Smashable Wall.asm"
0000F2A4                            ; ---------------------------------------------------------------------------
0000F2A4                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000F2A4                            ; ---------------------------------------------------------------------------
0000F2A4                            
0000F2A4                            SmashWall:
0000F2A4 7000                       		moveq	#0,d0
0000F2A6 1028 0024                  		move.b	obRoutine(a0),d0
0000F2AA 323B 0000                  		move.w	Smash_Index(pc,d0.w),d1
0000F2AE 4EBB 1000                  		jsr	Smash_Index(pc,d1.w)
0000F2B2 6000 0000                  		bra.w	RememberState
0000F2B6                            ; ===========================================================================
0000F2B6 0000                       Smash_Index:	dc.w Smash_Main-Smash_Index
0000F2B8 0000                       		dc.w Smash_Solid-Smash_Index
0000F2BA 0000                       		dc.w Smash_FragMove-Smash_Index
0000F2BC                            
0000F2BC =00000030                  smash_speed:	equ $30		; Sonic's horizontal speed
0000F2BC                            ; ===========================================================================
0000F2BC                            
0000F2BC                            Smash_Main:	; Routine 0
0000F2BC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F2C0 217C 0000 0000 0004        		move.l	#Map_Smash,obMap(a0)
0000F2C8 317C 450F 0002             		move.w	#$450F,obGfx(a0)
0000F2CE 117C 0004 0001             		move.b	#4,obRender(a0)
0000F2D4 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000F2DA 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F2E0 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0000F2E6                            
0000F2E6                            Smash_Solid:	; Routine 2
0000F2E6 3178 D010 0030             		move.w	(v_player+obVelX).w,smash_speed(a0) ; load Sonic's horizontal speed
0000F2EC 323C 001B                  		move.w	#$1B,d1
0000F2F0 343C 0020                  		move.w	#$20,d2
0000F2F4 363C 0020                  		move.w	#$20,d3
0000F2F8 3828 0008                  		move.w	obX(a0),d4
0000F2FC 6100 0000                  		bsr.w	SolidObject	
0000F300 4A04                       		tst.b	d4
0000F302 6E00 0000                  		bgt.w	@chkroll	
0000F306 6700 0000                  		beq.w	@donothing								
0000F30A 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing against the wall?
0000F310 6700 0000                  		beq.w	@donothing	; if yes, branch
0000F314                            ; ===========================================================================
0000F314                            
0000F314                            @chkroll:
0000F314 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000F31A 6600                       		bne.s	@donothing	; if not, branch	
0000F31C 3028 0030                  		move.w	smash_speed(a0),d0
0000F320 6A00                       		bpl.s	@chkspeed
0000F322 4440                       		neg.w	d0
0000F324                            
0000F324                            	@chkspeed:
0000F324 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000F328 6500                       		bcs.s	@donothing	; if not, branch	
0000F32A                            		
0000F32A                            	@continue:	
0000F32A 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000F330 3368 0030 0010             		move.w	smash_speed(a0),obVelX(a1)
0000F336 49F9 0000 0000             		lea	(Smash_FragSpd1).l,a4 ;	use fragments that move	right
0000F33C 3028 0008                  		move.w	obX(a0),d0
0000F340 B069 0008                  		cmp.w	obX(a1),d0	; is Sonic to the right	of the block?
0000F344 6500                       		bcs.s	@smash		; if yes, branch
0000F346 49F9 0000 0000             		lea	(Smash_FragSpd2).l,a4 ;	use fragments that move	left
0000F34C                            
0000F34C                            	@smash:
0000F34C 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000F352 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000F358 7206                       		moveq	#6,d1		; load 7 fragments
0000F35A 343C 0070                  		move.w	#$70,d2
0000F35E 6100                       		bsr.s	SmashObject
0000F360                            
0000F360                            @donothing:
0000F360 4E75                       		rts	
0000F362                            
0000F362                            Smash_FragMove:	; Routine 4
0000F362 588F                       		addq.l	#4,sp
0000F364 6100 0000                  		bsr.w	SpeedToPos
0000F368 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make fragment	fall faster
0000F36E 4A28 0001                  		tst.b	obRender(a0)
0000F372 6A00 0000                  		bpl.w	DeleteObject
0000F376 6000 0000                  		bra.w	DisplaySprite
0000F37A                            
0000F37A                            
0000F37A                            
0000F37A                            		include	"_incObj\sub SmashObject.asm"
0000F37A                            ; ---------------------------------------------------------------------------
0000F37A                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000F37A                            ; ---------------------------------------------------------------------------
0000F37A                            
0000F37A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F37A                            
0000F37A                            
0000F37A                            SmashObject:
0000F37A 7000                       		moveq	#0,d0
0000F37C 1028 001A                  		move.b	obFrame(a0),d0
0000F380 D040                       		add.w	d0,d0
0000F382 2668 0004                  		movea.l	obMap(a0),a3
0000F386 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000F38A 524B                       		addq.w	#1,a3
0000F38C 08E8 0005 0001             		bset	#5,obRender(a0)
0000F392 1810                       		move.b	0(a0),d4
0000F394 1A28 0001                  		move.b	obRender(a0),d5
0000F398 2248                       		movea.l	a0,a1
0000F39A 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F3A0 1284                       		move.b	d4,0(a1)
0000F3A2 234B 0004                  		move.l	a3,obMap(a1)
0000F3A6 1345 0001                  		move.b	d5,obRender(a1)
0000F3AA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F3B0 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F3B6 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F3BC 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F3C2 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F3C8 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F3CC 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F3D0 5341                       		subq.w #1,d1
0000F3D2 43F8 D800                  		lea (v_lvlobjspace).w,a1
0000F3D6 303C 005F                  		move.w #$5F,d0
0000F3DA                            ; ===========================================================================
0000F3DA                            
0000F3DA                            Smash_Loop:
0000F3DA 4A11                       		tst.b	(a1)
0000F3DC 6700                       		beq.s	@cont
0000F3DE 43E9 0040                  		lea		$40(a1),a1
0000F3E2 51C8 FFF6                  		dbf 	d0,Smash_Loop 
0000F3E6 6600                       		bne.s	Smash_PlaySnd
0000F3E8                            
0000F3E8                            	@cont:
0000F3E8 5A4B                       		addq.w #5,a3
0000F3EA                            
0000F3EA                            Smash_LoadFrag:				; XREF: SmashObject
0000F3EA 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F3F0 1284                       		move.b	d4,0(a1)
0000F3F2 234B 0004                  		move.l	a3,obMap(a1)
0000F3F6 1345 0001                  		move.b	d5,obRender(a1)
0000F3FA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F400 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F406 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F40C 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F412 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F418 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F41C 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F420 51C9 FFB8                  		dbf	d1,Smash_Loop
0000F424                            
0000F424                            Smash_PlaySnd:
0000F424 303C 0000                  		move.w	#sfx_WallSmash,d0
0000F428 4EF9 0000 12A0             		jmp	(PlaySound_Special).l ; play smashing sound
0000F42E                            
0000F42E                            ; End of function SmashObject
0000F42E                            ; End of function SmashObject
0000F42E                            
0000F42E                            ; ===========================================================================
0000F42E                            ; Smashed block	fragment speeds
0000F42E                            ;
0000F42E 0400 FB00                  Smash_FragSpd1:	dc.w $400, -$500	; x-move speed,	y-move speed
0000F432 0600 FF00                  		dc.w $600, -$100
0000F436 0600 0100                  		dc.w $600, $100
0000F43A 0400 0500                  		dc.w $400, $500
0000F43E 0600 FA00                  		dc.w $600, -$600
0000F442 0800 FE00                  		dc.w $800, -$200
0000F446 0800 0200                  		dc.w $800, $200
0000F44A 0600 0600                  		dc.w $600, $600
0000F44E                            
0000F44E FA00 FA00                  Smash_FragSpd2:	dc.w -$600, -$600
0000F452 F800 FE00                  		dc.w -$800, -$200
0000F456 F800 0200                  		dc.w -$800, $200
0000F45A FA00 0600                  		dc.w -$600, $600
0000F45E FC00 FB00                  		dc.w -$400, -$500
0000F462 FA00 FF00                  		dc.w -$600, -$100
0000F466 FA00 0100                  		dc.w -$600, $100
0000F46A FC00 0500                  		dc.w -$400, $500
0000F46E                            
0000F46E                            Map_Smash:	include	"_maps\Smashable Walls.asm"
0000F46E                            ; ---------------------------------------------------------------------------
0000F46E                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000F46E                            ; ---------------------------------------------------------------------------
0000F46E                            Map_Smash_internal:
0000F46E 0000                       		dc.w @left-Map_Smash_internal
0000F470 0000                       		dc.w @middle-Map_Smash_internal
0000F472 0000                       		dc.w @right-Map_Smash_internal
0000F474 08                         @left:		dc.b 8
0000F475 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000F47A F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000F47F 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000F484 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000F489 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F48E F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F493 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F498 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F49D 08                         @middle:	dc.b 8
0000F49E E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F4A3 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F4A8 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F4AD 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F4B2 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F4B7 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F4BC 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F4C1 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F4C6 08                         @right:		dc.b 8
0000F4C7 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F4CC F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F4D1 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F4D6 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F4DB E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000F4E0 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000F4E5 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000F4EA 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000F4F0 00                         		even
0000F4F0 00                         		even
0000F4F0                            
0000F4F0                            ; ---------------------------------------------------------------------------
0000F4F0                            ; Object code execution subroutine
0000F4F0                            ; ---------------------------------------------------------------------------
0000F4F0                            
0000F4F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F4F0                            
0000F4F0                            
0000F4F0                            
0000F4F0                            ExecuteObjects: ; XREF: GM_Title; et al
0000F4F0 41F8 D000                  		lea (v_objspace).w,a0 ; set address for object RAM
0000F4F4 7E7F                       		moveq #$7F,d7
0000F4F6 7000                       		moveq #0,d0
0000F4F8 0C38 0006 D024             		cmpi.b #6,(v_player+obRoutine).w
0000F4FE 6400                       		bcc.s loc_D362
0000F500                            
0000F500                            loc_D348:
0000F500 1010                       		move.b (a0),d0 ; load object number from RAM
0000F502 6700                       		beq.s loc_D358
0000F504 D040                       		add.w d0,d0
0000F506 D040                       		add.w d0,d0
0000F508 227B 0000                  		movea.l Obj_Index-4(pc,d0.w),a1
0000F50C 4E91                       		jsr (a1) ; run the object's code
0000F50E 7000                       		moveq #0,d0
0000F510                            
0000F510                            loc_D358:
0000F510 41E8 0040                  		lea $40(a0),a0 ; next object
0000F514 51CF FFEA                  		dbf d7,loc_D348
0000F518 4E75                       		rts
0000F51A                            ; ===========================================================================
0000F51A                            
0000F51A                            loc_D362:
0000F51A 7E1F                       		moveq #$1F,d7
0000F51C 61E2                       		bsr.s loc_D348
0000F51E 7E5F                       		moveq #$5F,d7
0000F520                            
0000F520                            loc_D368:
0000F520 7000                       		moveq #0,d0 ; Clear d0 quickly
0000F522 1010                       		move.b (a0),d0 ; get the object's ID
0000F524 6700                       		beq.s loc_D37C ; if it's obj00, skip it
0000F526 4A28 0001                  		tst.b obRender(a0) ; should we render it?
0000F52A 6A00                       		bpl.s loc_D37C ; if not, skip it
0000F52C 3028 0018                  		move.w obpriority(a0),d0 ; move object's priority to d0
0000F530 0828 0006 0001             		btst #6,obRender(a0) ; is the compound sprites flag set?
0000F536 6700                       		beq.s loc_D378 ; if not, branch
0000F538 303C 0200                  		move.w #$200,d0 ; move $200 to d0
0000F53C                            
0000F53C                            loc_D378:
0000F53C 6100 0000                  		bsr.w DisplaySprite2
0000F540                            		
0000F540                            loc_D37C:
0000F540 41E8 0040                  		lea $40(a0),a0
0000F544 51CF FFDA                  		dbf d7,loc_D368
0000F548 4E75                       		rts
0000F54A                            ; End of function ExecuteObjects
0000F54A                            
0000F54A                            ; ===========================================================================
0000F54A                            ; ---------------------------------------------------------------------------
0000F54A                            ; Object pointers
0000F54A                            ; ---------------------------------------------------------------------------
0000F54A                            Obj_Index:
0000F54A                            		include	"_inc\Object Pointers.asm"
0000F54A                            ; ---------------------------------------------------------------------------
0000F54A                            ; Object pointers
0000F54A                            ; ---------------------------------------------------------------------------
0000F54A 0000 0000                  ptr_SonicPlayer:	dc.l SonicPlayer	; $01
0000F54E 0000 0000                  ptr_Obj02:			dc.l ObjectFall
0000F552 0000 0000                  ptr_Obj03:			dc.l Obj03
0000F556 0000 0000                  ptr_GShieldItem:	dc.l GShieldItem
0000F55A 0000 0000                  ptr_Obj05:		dc.l Spindash_dust
0000F55E 0000 B240                  ptr_Mozzietron:		dc.l Mozzietron
0000F562 0000 0000                  ptr_RShieldItem:	dc.l RShieldItem	
0000F566 0000 0000                  ptr_Splash:		dc.l Splash		; $08
0000F56A 0000 0000                  ptr_SonicSpecial:	dc.l SonicSpecial
0000F56E 0000 0000                  ptr_DrownCount:		dc.l DrownCount
0000F572 0000 0000                  ptr_Pole:		dc.l Pole
0000F576 0000 0000                  ptr_FlapDoor:		dc.l FlapDoor
0000F57A 0000 0000                  ptr_Signpost:		dc.l Signpost
0000F57E 0000 C65E                  ptr_TitleSonic:		dc.l TitleSonic
0000F582 0000 C6DE                  ptr_PSBTM:		dc.l PSBTM
0000F586 0000 0000                  ptr_Obj10:		dc.l Obj10		; $10
0000F58A 0000 8B04                  ptr_Bridge:		dc.l Bridge
0000F58E 0000 0000                  ptr_SpinningLight:	dc.l SpinningLight
0000F592 0000 0000                  ptr_LavaMaker:		dc.l LavaMaker
0000F596 0000 0000                  ptr_LavaBall:		dc.l LavaBall
0000F59A 0000 912A                  ptr_SwingingPlatform:	dc.l SwingingPlatform
0000F59E 0000 0000                  ptr_Harpoon:		dc.l Harpoon
0000F5A2 0000 9476                  ptr_Helix:		dc.l Helix
0000F5A6 0000 9602                  ptr_BasicPlatform:	dc.l BasicPlatform	; $18
0000F5AA 0000 0000                  ptr_InvStars:		dc.l InvStarsObj
0000F5AE 0000 99DE                  ptr_CollapseLedge:	dc.l CollapseLedge
0000F5B2 0000 0000                  ptr_WaterSurface:	dc.l WaterSurface
0000F5B6 0000 9FE6                  ptr_Scenery:		dc.l Scenery
0000F5BA 0000 A088                  ptr_WaterSwitcher:	dc.l WaterSwitcher
0000F5BE 0000 A59E                  ptr_BallHog:		dc.l BallHog
0000F5C2 0000 AF56                  ptr_Crabmeat:		dc.l Crabmeat
0000F5C6 0000 A66C                  ptr_Cannonball:		dc.l Cannonball		; $20
0000F5CA 0000 0000                  ptr_HUD:		dc.l HUD
0000F5CE 0000 B372                  ptr_BuzzBomber:		dc.l BuzzBomber
0000F5D2 0000 B4C4                  ptr_Missile:		dc.l Missile
0000F5D6 0000 A73E                  ptr_MissileDissolve:	dc.l MissileDissolve
0000F5DA 0000 B71E                  ptr_Rings:		dc.l Rings
0000F5DE 0000 BF68                  ptr_Monitor:		dc.l Monitor
0000F5E2 0000 A7AE                  ptr_ExplosionItem:	dc.l ExplosionItem
0000F5E6 0000 A96C                  ptr_Animals:		dc.l Animals		; $28
0000F5EA 0000 AE5A                  ptr_Points:		dc.l Points
0000F5EE 0000 A38C                  ptr_AutoDoor:		dc.l AutoDoor
0000F5F2 0000 CC88                  ptr_Chopper:		dc.l Chopper
0000F5F6 0000 CD42                  ptr_Jaws:		dc.l Jaws
0000F5FA 0000 CE0C                  ptr_Burrobot:		dc.l Burrobot
0000F5FE 0000 C166                  ptr_PowerUp:		dc.l PowerUp
0000F602 0000 D020                  ptr_LargeGrass:		dc.l LargeGrass
0000F606 0000 D502                  ptr_GlassBlock:		dc.l GlassBlock		; $30
0000F60A 0000 D7DE                  ptr_ChainStomp:		dc.l ChainStomp
0000F60E 0000 DE8C                  ptr_Button:		dc.l Button
0000F612 0000 E030                  ptr_PushBlock:		dc.l PushBlock
0000F616 0000 E462                  ptr_TitleCard:		dc.l TitleCard
0000F61A 0000 D342                  ptr_GrassFire:		dc.l GrassFire
0000F61E 0000 EFAA                  ptr_Spikes:		dc.l Spikes
0000F622 0000 B97A                  ptr_RingLoss:		dc.l RingLoss
0000F626 0000 0000                  ptr_ShieldItem:		dc.l ShieldItem		; $38
0000F62A 0000 E612                  ptr_GameOverCard:	dc.l GameOverCard
0000F62E 0000 E6D0                  ptr_GotThroughCard:	dc.l GotThroughCard
0000F632 0000 F1D8                  ptr_PurpleRock:		dc.l PurpleRock
0000F636 0000 F2A4                  ptr_SmashWall:		dc.l SmashWall
0000F63A 0000 0000                  ptr_BossGreenHill:	dc.l BossGreenHill
0000F63E 0000 0000                  ptr_Prison:		dc.l Prison
0000F642 0000 A840                  ptr_ExplosionBomb:	dc.l ExplosionBomb
0000F646 0000 0000                  ptr_MotoBug:		dc.l MotoBug		; $40
0000F64A 0000 0000                  ptr_Springs:		dc.l Springs
0000F64E 0000 0000                  ptr_Newtron:		dc.l Newtron
0000F652 0000 0000                  ptr_Roller:		dc.l Roller
0000F656 0000 0000                  ptr_EdgeWalls:		dc.l EdgeWalls
0000F65A 0000 DAFA                  ptr_SideStomp:		dc.l SideStomp
0000F65E 0000 0000                  ptr_MarbleBrick:	dc.l MarbleBrick
0000F662 0000 0000                  ptr_Bumper:		dc.l Bumper
0000F666 0000 0000                  ptr_BossBall:		dc.l BossBall		; $48
0000F66A 0000 F246                  ptr_WaterSound:		dc.l WaterSound
0000F66E 0000 0000                  ptr_VanishSonic:	dc.l VanishSonic
0000F672 0000 BC3C                  ptr_GiantRing:		dc.l GiantRing
0000F676 0000 0000                  ptr_GeyserMaker:	dc.l GeyserMaker
0000F67A 0000 0000                  ptr_LavaGeyser:		dc.l LavaGeyser
0000F67E 0000 0000                  ptr_SpShieldItem:	dc.l SpShieldItem
0000F682 0000 0000                  ptr_Obj4F:		dc.l Obj4F
0000F686 0000 0000                  ptr_Yadrin:		dc.l Yadrin		; $50
0000F68A 0000 0000                  ptr_SmashBlock:		dc.l SmashBlock
0000F68E 0000 0000                  ptr_MovingBlock:	dc.l MovingBlock
0000F692 0000 9AEE                  ptr_CollapseFloor:	dc.l CollapseFloor
0000F696 0000 0000                  ptr_LavaTag:		dc.l LavaTag
0000F69A 0000 0000                  ptr_Basaran:		dc.l Basaran
0000F69E 0000 0000                  ptr_FloatingBlock:	dc.l FloatingBlock
0000F6A2 0000 0000                  ptr_SpikeBall:		dc.l SpikeBall
0000F6A6 0000 0000                  ptr_BigSpikeBall:	dc.l BigSpikeBall	; $58
0000F6AA 0000 0000                  ptr_Elevator:		dc.l Elevator
0000F6AE 0000 0000                  ptr_CirclingPlatform:	dc.l CirclingPlatform
0000F6B2 0000 0000                  ptr_Staircase:		dc.l Staircase
0000F6B6 0000 0000                  ptr_Pylon:		dc.l Pylon
0000F6BA 0000 0000                  ptr_Fan:		dc.l Fan
0000F6BE 0000 0000                  ptr_Seesaw:		dc.l Seesaw
0000F6C2 0000 0000                  ptr_Bomb:		dc.l Bomb
0000F6C6 0000 0000                  ptr_Orbinaut:		dc.l Orbinaut		; $60
0000F6CA 0000 0000                  ptr_LabyrinthBlock:	dc.l LabyrinthBlock
0000F6CE 0000 0000                  ptr_Gargoyle:		dc.l Gargoyle
0000F6D2 0000 0000                  ptr_LabyrinthConvey:	dc.l LabyrinthConvey
0000F6D6 0000 0000                  ptr_Bubble:		dc.l Bubble
0000F6DA 0000 0000                  ptr_Waterfall:		dc.l Waterfall
0000F6DE 0000 0000                  ptr_Junction:		dc.l Junction
0000F6E2 0000 0000                  ptr_RunningDisc:	dc.l RunningDisc
0000F6E6 0000 0000                  ptr_Conveyor:		dc.l Conveyor		; $68
0000F6EA 0000 0000                  ptr_SpinPlatform:	dc.l SpinPlatform
0000F6EE 0000 0000                  ptr_Saws:		dc.l Saws
0000F6F2 0000 0000                  ptr_ScrapStomp:		dc.l ScrapStomp
0000F6F6 0000 0000                  ptr_VanishPlatform:	dc.l VanishPlatform
0000F6FA 0000 0000                  ptr_Flamethrower:	dc.l Flamethrower
0000F6FE 0000 0000                  ptr_Electro:		dc.l Electro
0000F702 0000 0000                  ptr_SpinConvey:		dc.l SpinConvey
0000F706 0000 0000                  ptr_Girder:		dc.l Girder		; $70
0000F70A 0000 0000                  ptr_Invisibarrier:	dc.l Invisibarrier
0000F70E 0000 0000                  ptr_Teleport:		dc.l Teleport
0000F712 0000 0000                  ptr_BossMarble:		dc.l BossMarble
0000F716 0000 0000                  ptr_BossFire:		dc.l BossFire
0000F71A 0000 0000                  ptr_BossSpringYard:	dc.l BossSpringYard
0000F71E 0000 0000                  ptr_BossBlock:		dc.l BossBlock
0000F722 0000 0000                  ptr_BossLabyrinth:	dc.l BossLabyrinth
0000F726 0000 0000                  ptr_Caterkiller:	dc.l Caterkiller	; $78
0000F72A 0000 0000                  ptr_Lamppost:		dc.l Lamppost
0000F72E 0000 0000                  ptr_BossStarLight:	dc.l BossStarLight
0000F732 0000 0000                  ptr_BossSpikeball:	dc.l BossSpikeball
0000F736 0000 BD16                  ptr_RingFlash:		dc.l RingFlash
0000F73A 0000 0000                  ptr_HiddenBonus:	dc.l HiddenBonus
0000F73E 0000 E90A                  ptr_SSResult:		dc.l SSResult
0000F742 0000 EAB0                  ptr_SSRChaos:		dc.l SSRChaos
0000F746 0000 606E                  ptr_ContScrItem:	dc.l ContScrItem	; $80
0000F74A 0000 6186                  ptr_ContSonic:		dc.l ContSonic
0000F74E 0000 0000                  ptr_ScrapEggman:	dc.l ScrapEggman
0000F752 0000 0000                  ptr_FalseFloor:		dc.l FalseFloor
0000F756 0000 0000                  ptr_EggmanCylinder:	dc.l EggmanCylinder
0000F75A 0000 0000                  ptr_BossFinal:		dc.l BossFinal
0000F75E 0000 0000                  ptr_BossPlasma:		dc.l BossPlasma
0000F762 0000 660C                  ptr_EndSonic:		dc.l EndSonic
0000F766 0000 6766                  ptr_EndChaos:		dc.l EndChaos		; $88
0000F76A 0000 6840                  ptr_EndSTH:		dc.l EndSTH
0000F76E 0000 0000                  ptr_CreditsText:	dc.l CreditsText
0000F772 0000 6ABA                  ptr_EndEggman:		dc.l EndEggman
0000F776 0000 6B9A                  ptr_TryChaos:		dc.l TryChaos
0000F77A 0000 0000                  ptr_SuperStars:		dc.l SuperStars
0000F77E                            
0000F77E                            NullObject:
0000F77E                            		;jmp	(DeleteObject).l	; It would be safer to have this instruction here, but instead it just falls through to ObjectFall
0000F77E                            
0000F77E =00000001                  id_SonicPlayer:		equ ((ptr_SonicPlayer-Obj_Index)/4)+1		; $01
0000F77E =00000002                  id_Obj02:		equ ((ptr_Obj02-Obj_Index)/4)+1
0000F77E =00000003                  id_Obj03:		equ ((ptr_Obj03-Obj_Index)/4)+1
0000F77E =00000004                  id_GShielditem:		equ ((ptr_GShieldItem-Obj_Index)/4)+1
0000F77E =00000005                  id_Obj05:		equ ((ptr_Obj05-Obj_Index)/4)+1
0000F77E =00000006                  id_Mozzietron:		equ ((ptr_Mozzietron-Obj_Index)/4)+1
0000F77E =00000007                  id_RShieldItem:		equ ((ptr_RShieldItem-Obj_Index)/4)+1	
0000F77E =00000008                  id_Splash:		equ ((ptr_Splash-Obj_Index)/4)+1		; $08
0000F77E =00000009                  id_SonicSpecial:	equ ((ptr_SonicSpecial-Obj_Index)/4)+1
0000F77E =0000000A                  id_DrownCount:		equ ((ptr_DrownCount-Obj_Index)/4)+1
0000F77E =0000000B                  id_Pole:		equ ((ptr_Pole-Obj_Index)/4)+1
0000F77E =0000000C                  id_FlapDoor:		equ ((ptr_FlapDoor-Obj_Index)/4)+1
0000F77E =0000000D                  id_Signpost:		equ ((ptr_Signpost-Obj_Index)/4)+1
0000F77E =0000000E                  id_TitleSonic:		equ ((ptr_TitleSonic-Obj_Index)/4)+1
0000F77E =0000000F                  id_PSBTM:		equ ((ptr_PSBTM-Obj_Index)/4)+1
0000F77E =00000010                  id_Obj10:		equ ((ptr_Obj10-Obj_Index)/4)+1			; $10
0000F77E =00000011                  id_Bridge:		equ ((ptr_Bridge-Obj_Index)/4)+1
0000F77E =00000012                  id_SpinningLight:	equ ((ptr_SpinningLight-Obj_Index)/4)+1
0000F77E =00000013                  id_LavaMaker:		equ ((ptr_LavaMaker-Obj_Index)/4)+1
0000F77E =00000014                  id_LavaBall:		equ ((ptr_LavaBall-Obj_Index)/4)+1
0000F77E =00000015                  id_SwingingPlatform:	equ ((ptr_SwingingPlatform-Obj_Index)/4)+1
0000F77E =00000016                  id_Harpoon:		equ ((ptr_Harpoon-Obj_Index)/4)+1
0000F77E =00000017                  id_Helix:		equ ((ptr_Helix-Obj_Index)/4)+1
0000F77E =00000018                  id_BasicPlatform:	equ ((ptr_BasicPlatform-Obj_Index)/4)+1		; $18
0000F77E =00000019                  id_InvStars:		equ ((ptr_InvStars-Obj_Index)/4)+1
0000F77E =0000001A                  id_CollapseLedge:	equ ((ptr_CollapseLedge-Obj_Index)/4)+1
0000F77E =0000001B                  id_WaterSurface:	equ ((ptr_WaterSurface-Obj_Index)/4)+1
0000F77E =0000001C                  id_Scenery:		equ ((ptr_Scenery-Obj_Index)/4)+1
0000F77E =0000001D                  id_WaterSwitcher:		equ ((ptr_WaterSwitcher-Obj_Index)/4)+1
0000F77E =0000001E                  id_BallHog:		equ ((ptr_BallHog-Obj_Index)/4)+1
0000F77E =0000001F                  id_Crabmeat:		equ ((ptr_Crabmeat-Obj_Index)/4)+1
0000F77E =00000020                  id_Cannonball:		equ ((ptr_Cannonball-Obj_Index)/4)+1		; $20
0000F77E =00000021                  id_HUD:			equ ((ptr_HUD-Obj_Index)/4)+1
0000F77E =00000022                  id_BuzzBomber:		equ ((ptr_BuzzBomber-Obj_Index)/4)+1
0000F77E =00000023                  id_Missile:		equ ((ptr_Missile-Obj_Index)/4)+1
0000F77E =00000024                  id_MissileDissolve:	equ ((ptr_MissileDissolve-Obj_Index)/4)+1
0000F77E =00000025                  id_Rings:		equ ((ptr_Rings-Obj_Index)/4)+1
0000F77E =00000026                  id_Monitor:		equ ((ptr_Monitor-Obj_Index)/4)+1
0000F77E =00000027                  id_ExplosionItem:	equ ((ptr_ExplosionItem-Obj_Index)/4)+1
0000F77E =00000028                  id_Animals:		equ ((ptr_Animals-Obj_Index)/4)+1		; $28
0000F77E =00000029                  id_Points:		equ ((ptr_Points-Obj_Index)/4)+1
0000F77E =0000002A                  id_AutoDoor:		equ ((ptr_AutoDoor-Obj_Index)/4)+1
0000F77E =0000002B                  id_Chopper:		equ ((ptr_Chopper-Obj_Index)/4)+1
0000F77E =0000002C                  id_Jaws:		equ ((ptr_Jaws-Obj_Index)/4)+1
0000F77E =0000002D                  id_Burrobot:		equ ((ptr_Burrobot-Obj_Index)/4)+1
0000F77E =0000002E                  id_PowerUp:		equ ((ptr_PowerUp-Obj_Index)/4)+1
0000F77E =0000002F                  id_LargeGrass:		equ ((ptr_LargeGrass-Obj_Index)/4)+1
0000F77E =00000030                  id_GlassBlock:		equ ((ptr_GlassBlock-Obj_Index)/4)+1		; $30
0000F77E =00000031                  id_ChainStomp:		equ ((ptr_ChainStomp-Obj_Index)/4)+1
0000F77E =00000032                  id_Button:		equ ((ptr_Button-Obj_Index)/4)+1
0000F77E =00000033                  id_PushBlock:		equ ((ptr_PushBlock-Obj_Index)/4)+1
0000F77E =00000034                  id_TitleCard:		equ ((ptr_TitleCard-Obj_Index)/4)+1
0000F77E =00000035                  id_GrassFire:		equ ((ptr_GrassFire-Obj_Index)/4)+1
0000F77E =00000036                  id_Spikes:		equ ((ptr_Spikes-Obj_Index)/4)+1
0000F77E =00000037                  id_RingLoss:		equ ((ptr_RingLoss-Obj_Index)/4)+1
0000F77E =00000038                  id_ShieldItem:		equ ((ptr_ShieldItem-Obj_Index)/4)+1		; $38
0000F77E =00000039                  id_GameOverCard:	equ ((ptr_GameOverCard-Obj_Index)/4)+1
0000F77E =0000003A                  id_GotThroughCard:	equ ((ptr_GotThroughCard-Obj_Index)/4)+1
0000F77E =0000003B                  id_PurpleRock:		equ ((ptr_PurpleRock-Obj_Index)/4)+1
0000F77E =0000003C                  id_SmashWall:		equ ((ptr_SmashWall-Obj_Index)/4)+1
0000F77E =0000003D                  id_BossGreenHill:	equ ((ptr_BossGreenHill-Obj_Index)/4)+1
0000F77E =0000003E                  id_Prison:		equ ((ptr_Prison-Obj_Index)/4)+1
0000F77E =0000003F                  id_ExplosionBomb:	equ ((ptr_ExplosionBomb-Obj_Index)/4)+1
0000F77E =00000040                  id_MotoBug:		equ ((ptr_MotoBug-Obj_Index)/4)+1		; $40
0000F77E =00000041                  id_Springs:		equ ((ptr_Springs-Obj_Index)/4)+1
0000F77E =00000042                  id_Newtron:		equ ((ptr_Newtron-Obj_Index)/4)+1
0000F77E =00000043                  id_Roller:		equ ((ptr_Roller-Obj_Index)/4)+1
0000F77E =00000044                  id_EdgeWalls:		equ ((ptr_EdgeWalls-Obj_Index)/4)+1
0000F77E =00000045                  id_SideStomp:		equ ((ptr_SideStomp-Obj_Index)/4)+1
0000F77E =00000046                  id_MarbleBrick:		equ ((ptr_MarbleBrick-Obj_Index)/4)+1
0000F77E =00000047                  id_Bumper:		equ ((ptr_Bumper-Obj_Index)/4)+1
0000F77E =00000048                  id_BossBall:		equ ((ptr_BossBall-Obj_Index)/4)+1		; $48
0000F77E =00000049                  id_WaterSound:		equ ((ptr_WaterSound-Obj_Index)/4)+1
0000F77E =0000004A                  id_VanishSonic:		equ ((ptr_VanishSonic-Obj_Index)/4)+1
0000F77E =0000004B                  id_GiantRing:		equ ((ptr_GiantRing-Obj_Index)/4)+1
0000F77E =0000004C                  id_GeyserMaker:		equ ((ptr_GeyserMaker-Obj_Index)/4)+1
0000F77E =0000004D                  id_LavaGeyser:		equ ((ptr_LavaGeyser-Obj_Index)/4)+1
0000F77E =0000004E                  id_SpShieldItem:		equ ((ptr_SpShieldItem-Obj_Index)/4)+1
0000F77E =0000004F                  id_Obj4F:		equ ((ptr_Obj4F-Obj_Index)/4)+1
0000F77E =00000050                  id_Yadrin:		equ ((ptr_Yadrin-Obj_Index)/4)+1		; $50
0000F77E =00000051                  id_SmashBlock:		equ ((ptr_SmashBlock-Obj_Index)/4)+1
0000F77E =00000052                  id_MovingBlock:		equ ((ptr_MovingBlock-Obj_Index)/4)+1
0000F77E =00000053                  id_CollapseFloor:	equ ((ptr_CollapseFloor-Obj_Index)/4)+1
0000F77E =00000054                  id_LavaTag:		equ ((ptr_LavaTag-Obj_Index)/4)+1
0000F77E =00000055                  id_Basaran:		equ ((ptr_Basaran-Obj_Index)/4)+1
0000F77E =00000056                  id_FloatingBlock:	equ ((ptr_FloatingBlock-Obj_Index)/4)+1
0000F77E =00000057                  id_SpikeBall:		equ ((ptr_SpikeBall-Obj_Index)/4)+1
0000F77E =00000058                  id_BigSpikeBall:	equ ((ptr_BigSpikeBall-Obj_Index)/4)+1		; $58
0000F77E =00000059                  id_Elevator:		equ ((ptr_Elevator-Obj_Index)/4)+1
0000F77E =0000005A                  id_CirclingPlatform:	equ ((ptr_CirclingPlatform-Obj_Index)/4)+1
0000F77E =0000005B                  id_Staircase:		equ ((ptr_Staircase-Obj_Index)/4)+1
0000F77E =0000005C                  id_Pylon:		equ ((ptr_Pylon-Obj_Index)/4)+1
0000F77E =0000005D                  id_Fan:			equ ((ptr_Fan-Obj_Index)/4)+1
0000F77E =0000005E                  id_Seesaw:		equ ((ptr_Seesaw-Obj_Index)/4)+1
0000F77E =0000005F                  id_Bomb:		equ ((ptr_Bomb-Obj_Index)/4)+1
0000F77E =00000060                  id_Orbinaut:		equ ((ptr_Orbinaut-Obj_Index)/4)+1		; $60
0000F77E =00000061                  id_LabyrinthBlock:	equ ((ptr_LabyrinthBlock-Obj_Index)/4)+1
0000F77E =00000062                  id_Gargoyle:		equ ((ptr_Gargoyle-Obj_Index)/4)+1
0000F77E =00000063                  id_LabyrinthConvey:	equ ((ptr_LabyrinthConvey-Obj_Index)/4)+1
0000F77E =00000064                  id_Bubble:		equ ((ptr_Bubble-Obj_Index)/4)+1
0000F77E =00000065                  id_Waterfall:		equ ((ptr_Waterfall-Obj_Index)/4)+1
0000F77E =00000066                  id_Junction:		equ ((ptr_Junction-Obj_Index)/4)+1
0000F77E =00000067                  id_RunningDisc:		equ ((ptr_RunningDisc-Obj_Index)/4)+1
0000F77E =00000068                  id_Conveyor:		equ ((ptr_Conveyor-Obj_Index)/4)+1		; $68
0000F77E =00000069                  id_SpinPlatform:	equ ((ptr_SpinPlatform-Obj_Index)/4)+1
0000F77E =0000006A                  id_Saws:		equ ((ptr_Saws-Obj_Index)/4)+1
0000F77E =0000006B                  id_ScrapStomp:		equ ((ptr_ScrapStomp-Obj_Index)/4)+1
0000F77E =0000006C                  id_VanishPlatform:	equ ((ptr_VanishPlatform-Obj_Index)/4)+1
0000F77E =0000006D                  id_Flamethrower:	equ ((ptr_Flamethrower-Obj_Index)/4)+1
0000F77E =0000006E                  id_Electro:		equ ((ptr_Electro-Obj_Index)/4)+1
0000F77E =0000006F                  id_SpinConvey:		equ ((ptr_SpinConvey-Obj_Index)/4)+1
0000F77E =00000070                  id_Girder:		equ ((ptr_Girder-Obj_Index)/4)+1		; $70
0000F77E =00000071                  id_Invisibarrier:	equ ((ptr_Invisibarrier-Obj_Index)/4)+1
0000F77E =00000072                  id_Teleport:		equ ((ptr_Teleport-Obj_Index)/4)+1
0000F77E =00000073                  id_BossMarble:		equ ((ptr_BossMarble-Obj_Index)/4)+1
0000F77E =00000074                  id_BossFire:		equ ((ptr_BossFire-Obj_Index)/4)+1
0000F77E =00000075                  id_BossSpringYard:	equ ((ptr_BossSpringYard-Obj_Index)/4)+1
0000F77E =00000076                  id_BossBlock:		equ ((ptr_BossBlock-Obj_Index)/4)+1
0000F77E =00000077                  id_BossLabyrinth:	equ ((ptr_BossLabyrinth-Obj_Index)/4)+1
0000F77E =00000078                  id_Caterkiller:		equ ((ptr_Caterkiller-Obj_Index)/4)+1		; $78
0000F77E =00000079                  id_Lamppost:		equ ((ptr_Lamppost-Obj_Index)/4)+1
0000F77E =0000007A                  id_BossStarLight:	equ ((ptr_BossStarLight-Obj_Index)/4)+1
0000F77E =0000007B                  id_BossSpikeball:	equ ((ptr_BossSpikeball-Obj_Index)/4)+1
0000F77E =0000007C                  id_RingFlash:		equ ((ptr_RingFlash-Obj_Index)/4)+1
0000F77E =0000007D                  id_HiddenBonus:		equ ((ptr_HiddenBonus-Obj_Index)/4)+1
0000F77E =0000007E                  id_SSResult:		equ ((ptr_SSResult-Obj_Index)/4)+1
0000F77E =0000007F                  id_SSRChaos:		equ ((ptr_SSRChaos-Obj_Index)/4)+1
0000F77E =00000080                  id_ContScrItem:		equ ((ptr_ContScrItem-Obj_Index)/4)+1		; $80
0000F77E =00000081                  id_ContSonic:		equ ((ptr_ContSonic-Obj_Index)/4)+1
0000F77E =00000082                  id_ScrapEggman:		equ ((ptr_ScrapEggman-Obj_Index)/4)+1
0000F77E =00000083                  id_FalseFloor:		equ ((ptr_FalseFloor-Obj_Index)/4)+1
0000F77E =00000084                  id_EggmanCylinder:	equ ((ptr_EggmanCylinder-Obj_Index)/4)+1
0000F77E =00000085                  id_BossFinal:		equ ((ptr_BossFinal-Obj_Index)/4)+1
0000F77E =00000086                  id_BossPlasma:		equ ((ptr_BossPlasma-Obj_Index)/4)+1
0000F77E =00000087                  id_EndSonic:		equ ((ptr_EndSonic-Obj_Index)/4)+1
0000F77E =00000088                  id_EndChaos:		equ ((ptr_EndChaos-Obj_Index)/4)+1		; $88
0000F77E =00000089                  id_EndSTH:		equ ((ptr_EndSTH-Obj_Index)/4)+1
0000F77E =0000008A                  id_CreditsText:		equ ((ptr_CreditsText-Obj_Index)/4)+1
0000F77E =0000008B                  id_EndEggman:		equ ((ptr_EndEggman-Obj_Index)/4)+1
0000F77E =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F77E =0000008D                  id_SuperStars:		equ ((ptr_SuperStars-Obj_Index)/4)+1
0000F77E =0000008D                  id_SuperStars:		equ ((ptr_SuperStars-Obj_Index)/4)+1
0000F77E                            
0000F77E                            		include	"_incObj\sub ObjectFall.asm"
0000F77E                            ; ---------------------------------------------------------------------------
0000F77E                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000F77E                            ; ---------------------------------------------------------------------------
0000F77E                            
0000F77E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F77E                            
0000F77E                            
0000F77E                            ObjectFall:
0000F77E 0C28 0050 0012             		cmpi.b	#$50,obVelY(a0)
0000F784 6700                       		beq.s	@donothing
0000F786 3028 0010                  		move.w	obVelX(a0),d0
0000F78A 48C0                       		ext.l	d0
0000F78C E188                       		lsl.l	#8,d0
0000F78E D1A8 0008                  		add.l	d0,obX(a0)
0000F792 0C68 0FC8 0012                     cmp.w   #$FC8,obVelY(a0)   ; check if Sonic's Y speed is lower than this value
0000F798 6F00                               ble.s   @skipline       ; if yes, branch
0000F79A 317C 0FC8 0012                     move.w  #$FC8,obVelY(a0)    ; alter Sonic's Y speed
0000F7A0                                @skipline:		
0000F7A0 3028 0012                  		move.w	obVelY(a0),d0
0000F7A4 0668 0038 0012             		addi.w	#$38,obVelY(a0)	; increase vertical speed
0000F7AA 48C0                       		ext.l	d0
0000F7AC E188                       		lsl.l	#8,d0
0000F7AE D1A8 000C                  		add.l	d0,obY(a0)
0000F7B2 4E75                       		rts	
0000F7B4                            	
0000F7B4                            	@donothing:
0000F7B4 4E75                       		rts
0000F7B6                            
0000F7B6                            ; End of function ObjectFall
0000F7B6                            ; End of function ObjectFall
0000F7B6                            		include	"_incObj\sub SpeedToPos.asm"
0000F7B6                            ; ---------------------------------------------------------------------------
0000F7B6                            ; Subroutine translating object	speed to update	object position
0000F7B6                            ; ---------------------------------------------------------------------------
0000F7B6                            
0000F7B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F7B6                            
0000F7B6                            
0000F7B6                            SpeedToPos:
0000F7B6 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0000F7BC E188                       		lsl.l	#8,d0
0000F7BE D1A8 0008                  		add.l	d0,obX(a0)
0000F7C2 E18A                       		lsl.l	#8,d2
0000F7C4 D5A8 000C                  		add.l	d2,obY(a0)
0000F7C8 4E75                       		rts
0000F7CA                            ; End of function SpeedToPos
0000F7CA                            ; End of function SpeedToPos
0000F7CA                            		include	"_incObj\sub DisplaySprite.asm"
0000F7CA                            ; ---------------------------------------------------------------------------
0000F7CA                            ; Subroutine to    display    a sprite/object, when a0 is the    object RAM
0000F7CA                            ; ---------------------------------------------------------------------------
0000F7CA                            
0000F7CA                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F7CA                            
0000F7CA                            
0000F7CA                            DisplaySprite:
0000F7CA 43F8 AC00                          lea    (v_spritequeue).w,a1
0000F7CE D2E8 0018                          adda.w  obpriority(a0),a1 ; get sprite priority
0000F7D2 0C51 007E                          cmpi.w    #$7E,(a1)    ; is this part of the queue full?
0000F7D6 6400                               bcc.s    DSpr_Full    ; if yes, branch
0000F7D8 5451                               addq.w    #2,(a1)        ; increment sprite count
0000F7DA D2D1                               adda.w    (a1),a1        ; jump to empty position
0000F7DC 3288                               move.w    a0,(a1)        ; insert RAM address for object
0000F7DE                            
0000F7DE                                DSpr_Full:
0000F7DE 4E75                               rts    
0000F7E0                            
0000F7E0                            ; End of function DisplaySprite
0000F7E0                            
0000F7E0                            
0000F7E0                            ; ---------------------------------------------------------------------------
0000F7E0                            ; Subroutine to    display    a 2nd sprite/object, when a1 is    the object RAM
0000F7E0                            ; ---------------------------------------------------------------------------
0000F7E0                            
0000F7E0                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F7E0                            
0000F7E0                            
0000F7E0                            DisplaySprite1:
0000F7E0 45F8 AC00                          lea    (v_spritequeue).w,a2
0000F7E4 D4E9 0018                          adda.w  obpriority(a1),a2
0000F7E8 0C52 007E                          cmpi.w    #$7E,(a2)
0000F7EC 6400                               bcc.s    DSpr1_Full
0000F7EE 5452                               addq.w    #2,(a2)
0000F7F0 D4D2                               adda.w    (a2),a2
0000F7F2 3489                               move.w    a1,(a2)
0000F7F4                            
0000F7F4                                DSpr1_Full:
0000F7F4 4E75                               rts    
0000F7F6                            
0000F7F6                            ; End of function DisplaySprite1
0000F7F6                            
0000F7F6                            ; ---------------------------------------------------------------------------
0000F7F6                            ; Subroutine to display a sprite/object, when a0 is the object RAM
0000F7F6                            ; and d0 is already (priority/2)&$380
0000F7F6                            ; ---------------------------------------------------------------------------
0000F7F6                            
0000F7F6                            ; loc_16530:
0000F7F6                            DisplaySprite2:
0000F7F6 43F8 AC00                      lea    (v_spritequeue).w,a1
0000F7FA D2C0                           adda.w    d0,a1
0000F7FC 0C51 007E                      cmpi.w    #$7E,(a1)
0000F800 6400                           bhs.s    return_16542
0000F802 5451                           addq.w    #2,(a1)
0000F804 D2D1                           adda.w    (a1),a1
0000F806 3288                           move.w    a0,(a1)
0000F808                            
0000F808                            return_16542:
0000F808 4E75                           rts
0000F808 4E75                           rts
0000F80A                            		include	"_incObj\sub DeleteObject.asm"
0000F80A                            ; ---------------------------------------------------------------------------
0000F80A                            ; Subroutine to	delete an object
0000F80A                            ; ---------------------------------------------------------------------------
0000F80A                            
0000F80A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F80A                            
0000F80A                            
0000F80A                            DeleteObject:
0000F80A 2248                       		movea.l	a0,a1		; move object RAM address to (a1)
0000F80C                            
0000F80C                            DeleteChild:				; child objects are already in (a1)
0000F80C 7200                       		moveq	#0,d1
0000F80E 700F                       		moveq	#$F,d0
0000F810                            
0000F810                            	DelObj_Loop:
0000F810 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000F812 51C8 FFFC                  		dbf	d0,DelObj_Loop	; repeat for length of object RAM
0000F816 4E75                       		rts	
0000F818                            
0000F818                            ; End of function DeleteObject
0000F818                            ; End of function DeleteObject
0000F818                            
0000F818                            ; ===========================================================================
0000F818 0000 0000                  BldSpr_ScrPos:	dc.l 0				; blank
0000F81C 00FF F700                  		dc.l v_screenposx&$FFFFFF	; main screen x-position
0000F820 00FF F708                  		dc.l v_bgscreenposx&$FFFFFF	; background x-position	1
0000F824 00FF F718                  		dc.l v_bg3screenposx&$FFFFFF	; background x-position	2
0000F828                            ; ---------------------------------------------------------------------------
0000F828                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000F828                            ; ---------------------------------------------------------------------------
0000F828                            
0000F828                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F828                            BuildSprites:                ; XREF: TitleScreen; et al
0000F828 45F8 F800                  		lea	(v_spritetablebuffer).w,a2 ; set address for sprite table
0000F82C 7A00                       		moveq	#0,d5
0000F82E 49F8 AC00                  		lea	(v_spritequeue).w,a4
0000F832 7E07                       		moveq	#7,d7
0000F834                            		
0000F834                            loc_D66A:
0000F834 4A54                       		tst.w	(a4)
0000F836 6700 0000                  		beq.w	loc_D72E
0000F83A 7C02                       		moveq	#2,d6
0000F83C                            
0000F83C                            loc_D672:
0000F83C 3074 6000                          movea.w    (a4,d6.w),a0
0000F840 4A10                               tst.b    (a0)
0000F842 6700 0000                          beq.w    loc_D726
0000F846 08A8 0007 0001                     bclr    #7,1(a0)
0000F84C 1028 0001                          move.b    1(a0),d0
0000F850 1800                               move.b    d0,d4
0000F852 0C10 0001                          cmpi.b    #1,(a0)    ; is this object is Sonic
0000F856 6700                               beq.s    @skip    ; if it is, branch
0000F858 0800 0006                          btst    #6,d0    ; is the multi-draw flag set?
0000F85C 6600 0000                          bne.w   BuildSprites_MultiDraw    ; if it is, branch
0000F860                               @skip:
0000F860 0240 000C                  		andi.w	#$C,d0
0000F864 6700                       		beq.s	loc_D6DE
0000F866 227B 00B0                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000F86A 7000                       		moveq	#0,d0
0000F86C 1028 0014                  		move.b	width_pixels(a0),d0
0000F870 3628 0008                  		move.w	8(a0),d3
0000F874 9651                       		sub.w	(a1),d3
0000F876 3203                       		move.w	d3,d1
0000F878 D240                       		add.w	d0,d1
0000F87A 6B00 0000                  		bmi.w	loc_D726
0000F87E 3203                       		move.w	d3,d1
0000F880 9240                       		sub.w	d0,d1
0000F882 0C41 0140                  		cmpi.w	#$140,d1
0000F886 6C00                       		bge.s	loc_D726
0000F888 0643 0080                  		addi.w	#$80,d3
0000F88C 0804 0004                  		btst	#4,d4
0000F890 6700                       		beq.s	loc_D6E8
0000F892 7000                       		moveq	#0,d0
0000F894 1028 0016                  		move.b	$16(a0),d0
0000F898 3428 000C                  		move.w	$C(a0),d2
0000F89C 9469 0004                  		sub.w	4(a1),d2
0000F8A0 3202                       		move.w	d2,d1
0000F8A2 D240                       		add.w	d0,d1
0000F8A4 6B00                       		bmi.s	loc_D726
0000F8A6 3202                       		move.w	d2,d1
0000F8A8 9240                       		sub.w	d0,d1
0000F8AA 0C41 00E0                  		cmpi.w	#$E0,d1
0000F8AE 6C00                       		bge.s	loc_D726
0000F8B0 0642 0080                  		addi.w	#$80,d2
0000F8B4 6000                       		bra.s	loc_D700
0000F8B6                            ; ===========================================================================
0000F8B6                            
0000F8B6                            loc_D6DE:
0000F8B6 3428 000A                  		move.w	$A(a0),d2
0000F8BA 3628 0008                  		move.w	8(a0),d3
0000F8BE 6000                       		bra.s	loc_D700
0000F8C0                            ; ===========================================================================
0000F8C0                            
0000F8C0                            loc_D6E8:
0000F8C0 3428 000C                  		move.w	$C(a0),d2
0000F8C4 9469 0004                  		sub.w	4(a1),d2
0000F8C8 0642 0080                  		addi.w	#$80,d2
0000F8CC 0C42 0060                  		cmpi.w	#$60,d2
0000F8D0 6500                       		bcs.s	loc_D726
0000F8D2 0C42 0180                  		cmpi.w	#$180,d2
0000F8D6 6400                       		bcc.s	loc_D726
0000F8D8                            
0000F8D8                            loc_D700:
0000F8D8 2268 0004                  		movea.l	4(a0),a1
0000F8DC 7200                       		moveq	#0,d1
0000F8DE 0804 0005                  		btst	#5,d4
0000F8E2 6600                       		bne.s	loc_D71C
0000F8E4 1228 001A                  		move.b	$1A(a0),d1
0000F8E8 D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000F8EA D2F1 1000                  		adda.w	(a1,d1.w),a1
0000F8EE 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000F8F0 1219                       		move.b	(a1)+,d1
0000F8F2 5301                       		subq.b	#1,d1
0000F8F4 6B00                       		bmi.s	loc_D720
0000F8F6                            
0000F8F6                            loc_D71C:
0000F8F6 4EB9 0000 0000             		jsr	sub_D750
0000F8FC                            
0000F8FC                            loc_D720:
0000F8FC 08E8 0007 0001             		bset	#7,1(a0)
0000F902                            
0000F902                            loc_D726:
0000F902 5446                       		addq.w	#2,d6
0000F904 5554                       		subq.w	#2,(a4)
0000F906 6600 FF34                  		bne.w	loc_D672
0000F90A                            
0000F90A                            loc_D72E:
0000F90A 49EC 0080                  		lea	$80(a4),a4
0000F90E 51CF FF24                  		dbf	d7,loc_D66A
0000F912 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000F916 0C05 0050                  		cmpi.b	#$50,d5
0000F91A 6700                       		beq.s	loc_D748
0000F91C 24BC 0000 0000             		move.l	#0,(a2)
0000F922 4E75                       		rts	
0000F924                            ; ===========================================================================
0000F924                            
0000F924                            loc_D748:
0000F924 157C 0000 FFFB             		move.b	#0,-5(a2)
0000F92A 4E75                       		rts	
0000F92C                            ; End of function BuildSprites
0000F92C                            
0000F92C                            BuildSprites_MultiDraw:
0000F92C 2F0C                       	move.l	a4,-(sp)
0000F92E 49F8 F700                  	lea	($FFFFF700).w,a4
0000F932 3668 0002                  	movea.w	art_tile(a0),a3
0000F936 2A68 0004                  	movea.l	mappings(a0),a5
0000F93A 7000                       	moveq	#0,d0
0000F93C                            
0000F93C                            	; check if object is within X bounds
0000F93C 1028 000E                  	move.b	mainspr_width(a0),d0	; load pixel width
0000F940 3628 0008                  	move.w	x_pos(a0),d3
0000F944 9654                       	sub.w	(a4),d3
0000F946 3203                       	move.w	d3,d1                            
0000F948 D240                       	add.w	d0,d1                            ; is the object right edge to the left of the screen? 
0000F94A 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000F94E 3203                       	move.w	d3,d1
0000F950 9240                       	sub.w	d0,d1
0000F952 0C41 0140                  	cmpi.w	#320,d1                          ; is the object left edge to the right of the screen?
0000F956 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000F95A 0643 0080                  	addi.w	#128,d3
0000F95E                            
0000F95E                            	; check if object is within Y bounds
0000F95E 0804 0004                  	btst	#4,d4                            ; is the accurate Y check flag set?
0000F962 6700                       	beq.s	BuildSpritesMulti_ApproxYCheck
0000F964 7000                       	moveq	#0,d0
0000F966 1028 0014                  	move.b	mainspr_height(a0),d0	         ; load pixel height
0000F96A 3428 000C                  	move.w	y_pos(a0),d2
0000F96E 946C 0004                  	sub.w	4(a4),d2
0000F972 3202                       	move.w	d2,d1
0000F974 D240                       	add.w	d0,d1
0000F976 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj  ; if the object is above the screen
0000F97A 3202                       	move.w	d2,d1
0000F97C 9240                       	sub.w	d0,d1
0000F97E 0C41 00E0                  	cmpi.w	#224,d1
0000F982 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj  ; if the object is below the screen
0000F986 0642 0080                  	addi.w	#128,d2
0000F98A 6000                       	bra.s	BuildSpritesMulti_DrawSprite
0000F98C                            BuildSpritesMulti_ApproxYCheck:
0000F98C 3428 000C                  	move.w	y_pos(a0),d2
0000F990 946C 0004                  	sub.w	4(a4),d2
0000F994 0642 0080                  	addi.w	#128,d2
0000F998 0242 07FF                  	andi.w	#$7FF,d2
0000F99C 0C42 0060                  	cmpi.w	#-32+128,d2
0000F9A0 6500                       	blo.s	BuildSprites_MultiDraw_NextObj
0000F9A2 0C42 0180                  	cmpi.w	#32+128+224,d2
0000F9A6 6400                       	bhs.s	BuildSprites_MultiDraw_NextObj
0000F9A8                            BuildSpritesMulti_DrawSprite:
0000F9A8 7200                       	moveq	#0,d1
0000F9AA 1228 000B                  	move.b	mainspr_mapframe(a0),d1	         ; get current frame
0000F9AE 6700                       	beq.s	.noparenttodraw
0000F9B0 D241                       	add.w	d1,d1
0000F9B2 224D                       	movea.l	a5,a1                            ; a5 is mappings(a0), copy to a1
0000F9B4 D2F1 1000                  	adda.w	(a1,d1.w),a1
0000F9B8 7200                       	moveq	#0,d1
0000F9BA 1219                       	move.b	(a1)+,d1
0000F9BC 5301                       	subq.b	#1,d1                            ; get number of pieces
0000F9BE 6B00                       	bmi.s	.noparenttodraw                  ; if there are 0 pieces, branch
0000F9C0 3F04                       	move.w	d4,-(sp)
0000F9C2 4EB9 0000 0000             	jsr	ChkDrawSprite	                 ; draw the sprite
0000F9C8 381F                       	move.w	(sp)+,d4
0000F9CA                            .noparenttodraw:
0000F9CA 0028 0080 0001             	ori.b	#$80,render_flags(a0)	         ; set onscreen flag
0000F9D0 4DE8 0010                  	lea	sub2_x_pos(a0),a6                ; address of first child sprite info
0000F9D4 7000                       	moveq	#0,d0
0000F9D6 1028 000F                  	move.b	mainspr_childsprites(a0),d0	 ; get child sprite count
0000F9DA 5340                       	subq.w	#1,d0		                 ; if there are 0, go to next object
0000F9DC 6500                       	bcs.s	BuildSprites_MultiDraw_NextObj
0000F9DE                            
0000F9DE                            @drawchildloop:
0000F9DE 4840                       	swap	d0
0000F9E0 361E                       	move.w	(a6)+,d3	                 ; get X pos
0000F9E2 9654                       	sub.w	(a4),d3                          ; subtract the screen's x position
0000F9E4 0643 0080                  	addi.w	#128,d3
0000F9E8 341E                       	move.w	(a6)+,d2	                 ; get Y pos
0000F9EA 946C 0004                  	sub.w	4(a4),d2   ; subtract the screen's y position
0000F9EE 0642 0080                  	addi.w	#128,d2
0000F9F2 0242 07FF                  	andi.w	#$7FF,d2
0000F9F6 524E                       	addq.w	#1,a6
0000F9F8 7200                       	moveq	#0,d1
0000F9FA 121E                       	move.b	(a6)+,d1	                 ; get mapping frame
0000F9FC D241                       	add.w	d1,d1
0000F9FE 224D                       	movea.l	a5,a1
0000FA00 D2F1 1000                  	adda.w	(a1,d1.w),a1
0000FA04 7200                       	moveq	#0,d1
0000FA06 1219                       	move.b	(a1)+,d1
0000FA08 5301                       	subq.b	#1,d1                            ; get number of pieces
0000FA0A 6B00                       	bmi.s	@nochildleft                     ; if there are 0 pieces, branch
0000FA0C 3F04                       	move.w	d4,-(sp)
0000FA0E 4EB9 0000 0000             	jsr	ChkDrawSprite
0000FA14 381F                       	move.w	(sp)+,d4
0000FA16                            @nochildleft:
0000FA16 4840                       	swap	d0
0000FA18 51C8 FFC4                  	dbf	d0,@drawchildloop	         ; repeat for number of child sprites
0000FA1C                            ; loc_16804:
0000FA1C                            BuildSprites_MultiDraw_NextObj:
0000FA1C 285F                       	movea.l	(sp)+,a4
0000FA1E 6000 FEE2                  	bra.w	loc_D726; End of function BuildSprites
0000FA22                            
0000FA22                            
0000FA22                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000FA22                            
0000FA22                            ; sub_1680A:
0000FA22                            ChkDrawSprite:
0000FA22 0C05 0050                  	cmpi.b	#80,d5		; has the sprite limit been reached?
0000FA26 6500                       	blo.s	loc_1681C	; if it hasn't, branch
0000FA28 4E75                       	rts	; otherwise, return
0000FA2A                            
0000FA2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FA2A                            
0000FA2A                            
0000FA2A                            sub_D750:				; XREF: BuildSprites
0000FA2A 3668 0002                  		movea.w	2(a0),a3
0000FA2E                            loc_1681C:
0000FA2E 0804 0000                  		btst	#0,d4
0000FA32 6600                       		bne.s	loc_D796
0000FA34 0804 0001                  		btst	#1,d4
0000FA38 6600 0000                  		bne.w	loc_D7E4
0000FA3C                            ; End of function sub_D750
0000FA3C                            
0000FA3C                            
0000FA3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FA3C                            
0000FA3C                            
0000FA3C                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000FA3C 0C05 0050                  		cmpi.b	#$50,d5
0000FA40 6700                       		beq.s	locret_D794
0000FA42                            sub_D762_2:				; XREF: sub_D762; SS_ShowLayout
0000FA42 1019                       		move.b	(a1)+,d0
0000FA44 4880                       		ext.w	d0
0000FA46 D042                       		add.w	d2,d0
0000FA48 34C0                       		move.w	d0,(a2)+
0000FA4A 14D9                       		move.b	(a1)+,(a2)+
0000FA4C 5205                       		addq.b	#1,d5
0000FA4E 14C5                       		move.b	d5,(a2)+
0000FA50 1019                       		move.b	(a1)+,d0
0000FA52 E148                       		lsl.w	#8,d0
0000FA54 1019                       		move.b	(a1)+,d0
0000FA56 D04B                       		add.w	a3,d0
0000FA58 34C0                       		move.w	d0,(a2)+
0000FA5A 1019                       		move.b	(a1)+,d0
0000FA5C 4880                       		ext.w	d0
0000FA5E D043                       		add.w	d3,d0
0000FA60 0240 01FF                  		andi.w	#$1FF,d0
0000FA64 6600                       		bne.s	loc_D78E
0000FA66 5240                       		addq.w	#1,d0
0000FA68                            
0000FA68                            loc_D78E:
0000FA68 34C0                       		move.w	d0,(a2)+
0000FA6A 51C9 FFD0                  		dbf	d1,sub_D762
0000FA6E                            
0000FA6E                            locret_D794:
0000FA6E 4E75                       		rts
0000FA70                            ; End of function sub_D762
0000FA70                            
0000FA70                            ; ===========================================================================
0000FA70                            
0000FA70                            loc_D796:
0000FA70 0804 0001                  		btst	#1,d4
0000FA74 6600 0000                  		bne.w	loc_D82A
0000FA78                            
0000FA78                            loc_D79E:
0000FA78 0C05 0050                  		cmpi.b	#$50,d5
0000FA7C 6700                       		beq.s	locret_D7E2
0000FA7E 1019                       		move.b	(a1)+,d0
0000FA80 4880                       		ext.w	d0
0000FA82 D042                       		add.w	d2,d0
0000FA84 34C0                       		move.w	d0,(a2)+
0000FA86 1819                       		move.b	(a1)+,d4
0000FA88 14C4                       		move.b	d4,(a2)+
0000FA8A 5205                       		addq.b	#1,d5
0000FA8C 14C5                       		move.b	d5,(a2)+
0000FA8E 1019                       		move.b	(a1)+,d0
0000FA90 E148                       		lsl.w	#8,d0
0000FA92 1019                       		move.b	(a1)+,d0
0000FA94 D04B                       		add.w	a3,d0
0000FA96 0A40 0800                  		eori.w	#$800,d0
0000FA9A 34C0                       		move.w	d0,(a2)+
0000FA9C 1019                       		move.b	(a1)+,d0
0000FA9E 4880                       		ext.w	d0
0000FAA0 4440                       		neg.w	d0
0000FAA2 D804                       		add.b	d4,d4
0000FAA4 0244 0018                  		andi.w	#$18,d4
0000FAA8 5044                       		addq.w	#8,d4
0000FAAA 9044                       		sub.w	d4,d0
0000FAAC D043                       		add.w	d3,d0
0000FAAE 0240 01FF                  		andi.w	#$1FF,d0
0000FAB2 6600                       		bne.s	loc_D7DC
0000FAB4 5240                       		addq.w	#1,d0
0000FAB6                            
0000FAB6                            loc_D7DC:
0000FAB6 34C0                       		move.w	d0,(a2)+
0000FAB8 51C9 FFBE                  		dbf	d1,loc_D79E
0000FABC                            
0000FABC                            locret_D7E2:
0000FABC 4E75                       		rts
0000FABE                            ; ===========================================================================
0000FABE                            
0000FABE                            loc_D7E4:				; XREF: sub_D750
0000FABE 0C05 0050                  		cmpi.b	#$50,d5
0000FAC2 6700                       		beq.s	locret_D828
0000FAC4 1019                       		move.b	(a1)+,d0
0000FAC6 1811                       		move.b	(a1),d4
0000FAC8 4880                       		ext.w	d0
0000FACA 4440                       		neg.w	d0
0000FACC E70C                       		lsl.b	#3,d4
0000FACE 0244 0018                  		andi.w	#$18,d4
0000FAD2 5044                       		addq.w	#8,d4
0000FAD4 9044                       		sub.w	d4,d0
0000FAD6 D042                       		add.w	d2,d0
0000FAD8 34C0                       		move.w	d0,(a2)+
0000FADA 14D9                       		move.b	(a1)+,(a2)+
0000FADC 5205                       		addq.b	#1,d5
0000FADE 14C5                       		move.b	d5,(a2)+
0000FAE0 1019                       		move.b	(a1)+,d0
0000FAE2 E148                       		lsl.w	#8,d0
0000FAE4 1019                       		move.b	(a1)+,d0
0000FAE6 D04B                       		add.w	a3,d0
0000FAE8 0A40 1000                  		eori.w	#$1000,d0
0000FAEC 34C0                       		move.w	d0,(a2)+
0000FAEE 1019                       		move.b	(a1)+,d0
0000FAF0 4880                       		ext.w	d0
0000FAF2 D043                       		add.w	d3,d0
0000FAF4 0240 01FF                  		andi.w	#$1FF,d0
0000FAF8 6600                       		bne.s	loc_D822
0000FAFA 5240                       		addq.w	#1,d0
0000FAFC                            
0000FAFC                            loc_D822:
0000FAFC 34C0                       		move.w	d0,(a2)+
0000FAFE 51C9 FFBE                  		dbf	d1,loc_D7E4
0000FB02                            
0000FB02                            locret_D828:
0000FB02 4E75                       		rts
0000FB04                            ; ===========================================================================
0000FB04                            
0000FB04                            loc_D82A:
0000FB04 0C05 0050                  		cmpi.b	#$50,d5
0000FB08 6700                       		beq.s	locret_D87C
0000FB0A 1019                       		move.b	(a1)+,d0
0000FB0C 1811                       		move.b	(a1),d4
0000FB0E 4880                       		ext.w	d0
0000FB10 4440                       		neg.w	d0
0000FB12 E70C                       		lsl.b	#3,d4
0000FB14 0244 0018                  		andi.w	#$18,d4
0000FB18 5044                       		addq.w	#8,d4
0000FB1A 9044                       		sub.w	d4,d0
0000FB1C D042                       		add.w	d2,d0
0000FB1E 34C0                       		move.w	d0,(a2)+
0000FB20 1819                       		move.b	(a1)+,d4
0000FB22 14C4                       		move.b	d4,(a2)+
0000FB24 5205                       		addq.b	#1,d5
0000FB26 14C5                       		move.b	d5,(a2)+
0000FB28 1019                       		move.b	(a1)+,d0
0000FB2A E148                       		lsl.w	#8,d0
0000FB2C 1019                       		move.b	(a1)+,d0
0000FB2E D04B                       		add.w	a3,d0
0000FB30 0A40 1800                  		eori.w	#$1800,d0
0000FB34 34C0                       		move.w	d0,(a2)+
0000FB36 1019                       		move.b	(a1)+,d0
0000FB38 4880                       		ext.w	d0
0000FB3A 4440                       		neg.w	d0
0000FB3C D804                       		add.b	d4,d4
0000FB3E 0244 0018                  		andi.w	#$18,d4
0000FB42 5044                       		addq.w	#8,d4
0000FB44 9044                       		sub.w	d4,d0
0000FB46 D043                       		add.w	d3,d0
0000FB48 0240 01FF                  		andi.w	#$1FF,d0
0000FB4C 6600                       		bne.s	loc_D876
0000FB4E 5240                       		addq.w	#1,d0
0000FB50                            
0000FB50                            loc_D876:
0000FB50 34C0                       		move.w	d0,(a2)+
0000FB52 51C9 FFB0                  		dbf	d1,loc_D82A
0000FB56                            
0000FB56                            locret_D87C:
0000FB56 4E75                       		rts
0000FB58                            ; End of function BuildSpr_Normal
0000FB58                            
0000FB58                            ; ===========================================================================
0000FB58                            
0000FB58                            		include	"_incObj\sub ChkObjectVisible.asm"
0000FB58                            ; ---------------------------------------------------------------------------
0000FB58                            ; Subroutine to	check if an object is off screen
0000FB58                            
0000FB58                            ; output:
0000FB58                            ;	d0 = flag set if object is off screen
0000FB58                            ; ---------------------------------------------------------------------------
0000FB58                            
0000FB58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FB58                            
0000FB58                            
0000FB58                            ChkObjectVisible:
0000FB58 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000FB5C 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000FB60 6B00                       		bmi.s	@offscreen
0000FB62 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000FB66 6C00                       		bge.s	@offscreen	; if not, branch
0000FB68                            
0000FB68 3228 000C                  		move.w	obY(a0),d1	; get object y-position
0000FB6C 9278 F704                  		sub.w	(v_screenposy).w,d1 ; subtract screen y-position
0000FB70 6B00                       		bmi.s	@offscreen
0000FB72 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000FB76 6C00                       		bge.s	@offscreen	; if not, branch
0000FB78                            
0000FB78 7000                       		moveq	#0,d0		; set flag to 0
0000FB7A 4E75                       		rts	
0000FB7C                            
0000FB7C                            	@offscreen:
0000FB7C 7001                       		moveq	#1,d0		; set flag to 1
0000FB7E 4E75                       		rts	
0000FB80                            ; End of function ChkObjectVisible
0000FB80                            
0000FB80                            ; ---------------------------------------------------------------------------
0000FB80                            ; Subroutine to	check if an object is off screen
0000FB80                            ; More precise than above subroutine, taking width into account
0000FB80                            
0000FB80                            ; output:
0000FB80                            ;	d0 = flag set if object is off screen
0000FB80                            ; ---------------------------------------------------------------------------
0000FB80                            
0000FB80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FB80                            
0000FB80                            
0000FB80                            ChkPartiallyVisible:
0000FB80 7200                       		moveq	#0,d1
0000FB82 1228 0014                  		move.b	obActWid(a0),d1
0000FB86 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000FB8A 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000FB8E D041                       		add.w	d1,d0		; add object width
0000FB90 6B00                       		bmi.s	@offscreen2
0000FB92 D241                       		add.w	d1,d1
0000FB94 9041                       		sub.w	d1,d0
0000FB96 0C40 0140                  		cmpi.w	#320,d0
0000FB9A 6C00                       		bge.s	@offscreen2
0000FB9C                            
0000FB9C 3228 000C                  		move.w	obY(a0),d1
0000FBA0 9278 F704                  		sub.w	(v_screenposy).w,d1
0000FBA4 6B00                       		bmi.s	@offscreen2
0000FBA6 0C41 00E0                  		cmpi.w	#224,d1
0000FBAA 6C00                       		bge.s	@offscreen2
0000FBAC                            
0000FBAC 7000                       		moveq	#0,d0
0000FBAE 4E75                       		rts	
0000FBB0                            
0000FBB0                            	@offscreen2:
0000FBB0 7001                       		moveq	#1,d0
0000FBB2 4E75                       		rts	
0000FBB4                            ; End of function ChkPartiallyVisible
0000FBB4                            ; End of function ChkPartiallyVisible
0000FBB4                            
0000FBB4                            ; ---------------------------------------------------------------------------
0000FBB4                            ; Subroutine to	load a level's objects
0000FBB4                            ; ---------------------------------------------------------------------------
0000FBB4                            
0000FBB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FBB4                            
0000FBB4                            
0000FBB4                            ObjPosLoad:
0000FBB4 7000                       		moveq	#0,d0
0000FBB6 1038 F76C                  		move.b	(v_opl_routine).w,d0
0000FBBA 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000FBBE 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000FBC2                            ; End of function ObjPosLoad
0000FBC2                            
0000FBC2                            ; ===========================================================================
0000FBC2 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000FBC4 0000                       		dc.w OPL_Next-OPL_Index
0000FBC6                            ; ===========================================================================
0000FBC6                            
0000FBC6                            OPL_Main:
0000FBC6 5438 F76C                  		addq.b	#2,(v_opl_routine).w
0000FBCA 3038 FE10                  		move.w	(v_zone).w,d0
0000FBCE ED08                       		lsl.b	#6,d0
0000FBD0 E848                       		lsr.w	#4,d0
0000FBD2 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000FBD8 2248                       		movea.l	a0,a1
0000FBDA D0F0 0000                  		adda.w	(a0,d0.w),a0
0000FBDE 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FBE2 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FBE6 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000FBEA 21C9 F778                  		move.l	a1,(v_opl_data+8).w
0000FBEE 21C9 F77C                  		move.l	a1,(v_opl_data+$C).w
0000FBF2 45F8 FC00                  		lea	(v_objstate).w,a2
0000FBF6 34FC 0101                  		move.w	#$101,(a2)+
0000FBFA 303C 005E                  		move.w	#$5E,d0
0000FBFE                            
0000FBFE                            OPL_ClrList:
0000FBFE 429A                       		clr.l	(a2)+
0000FC00 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000FC04                            
0000FC04 45F8 FC00                  		lea	(v_objstate).w,a2
0000FC08 7400                       		moveq	#0,d2
0000FC0A 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FC0E 0446 0080                  		subi.w	#$80,d6
0000FC12 6400                       		bhs.s	loc_D93C
0000FC14 7C00                       		moveq	#0,d6
0000FC16                            
0000FC16                            loc_D93C:
0000FC16 0246 FF80                  		andi.w	#$FF80,d6
0000FC1A 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FC1E                            
0000FC1E                            loc_D944:
0000FC1E BC50                       		cmp.w	(a0),d6
0000FC20 6300                       		bls.s	loc_D956
0000FC22 4A28 0004                  		tst.b	4(a0)
0000FC26 6A00                       		bpl.s	loc_D952
0000FC28 1412                       		move.b	(a2),d2
0000FC2A 5212                       		addq.b	#1,(a2)
0000FC2C                            
0000FC2C                            loc_D952:
0000FC2C 5C48                       		addq.w	#6,a0
0000FC2E 60EE                       		bra.s	loc_D944
0000FC30                            ; ===========================================================================
0000FC30                            
0000FC30                            loc_D956:
0000FC30 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FC34 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FC38 0446 0080                  		subi.w	#$80,d6
0000FC3C 6500                       		blo.s	loc_D976
0000FC3E                            
0000FC3E                            loc_D964:
0000FC3E BC50                       		cmp.w	(a0),d6
0000FC40 6300                       		bls.s	loc_D976
0000FC42 4A28 0004                  		tst.b	4(a0)
0000FC46 6A00                       		bpl.s	loc_D972
0000FC48 522A 0001                  		addq.b	#1,1(a2)
0000FC4C                            
0000FC4C                            loc_D972:
0000FC4C 5C48                       		addq.w	#6,a0
0000FC4E 60EE                       		bra.s	loc_D964
0000FC50                            ; ===========================================================================
0000FC50                            
0000FC50                            loc_D976:
0000FC50 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FC54 31FC FFFF F76E             		move.w	#-1,(v_opl_screen).w
0000FC5A                            
0000FC5A                            OPL_Next:
0000FC5A 45F8 FC00                  		lea	(v_objstate).w,a2
0000FC5E 7400                       		moveq	#0,d2
0000FC60 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FC64 0246 FF80                  		andi.w	#$FF80,d6
0000FC68 BC78 F76E                  		cmp.w	(v_opl_screen).w,d6
0000FC6C 6700 0000                  		beq.w	locret_DA3A
0000FC70 6C00                       		bge.s	loc_D9F6
0000FC72 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FC76 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FC7A 0446 0080                  		subi.w	#$80,d6
0000FC7E 6500                       		blo.s	loc_D9D2
0000FC80                            
0000FC80                            loc_D9A6:
0000FC80 BC68 FFFA                  		cmp.w	-6(a0),d6
0000FC84 6C00                       		bge.s	loc_D9D2
0000FC86 5D48                       		subq.w	#6,a0
0000FC88 4A28 0004                  		tst.b	4(a0)
0000FC8C 6A00                       		bpl.s	loc_D9BC
0000FC8E 532A 0001                  		subq.b	#1,1(a2)
0000FC92 142A 0001                  		move.b	1(a2),d2
0000FC96                            
0000FC96                            loc_D9BC:
0000FC96 6100 0000                  		bsr.w	loc_DA3C
0000FC9A 6600                       		bne.s	loc_D9C6
0000FC9C 5D48                       		subq.w	#6,a0
0000FC9E 60E0                       		bra.s	loc_D9A6
0000FCA0                            ; ===========================================================================
0000FCA0                            
0000FCA0                            loc_D9C6:
0000FCA0 4A28 0004                  		tst.b	4(a0)
0000FCA4 6A00                       		bpl.s	loc_D9D0
0000FCA6 522A 0001                  		addq.b	#1,1(a2)
0000FCAA                            
0000FCAA                            loc_D9D0:
0000FCAA 5C48                       		addq.w	#6,a0
0000FCAC                            
0000FCAC                            loc_D9D2:
0000FCAC 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FCB0 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FCB4 0646 0300                  		addi.w	#$300,d6
0000FCB8                            
0000FCB8                            loc_D9DE:
0000FCB8 BC68 FFFA                  		cmp.w	-6(a0),d6
0000FCBC 6E00                       		bgt.s	loc_D9F0
0000FCBE 4A28 FFFE                  		tst.b	-2(a0)
0000FCC2 6A00                       		bpl.s	loc_D9EC
0000FCC4 5312                       		subq.b	#1,(a2)
0000FCC6                            
0000FCC6                            loc_D9EC:
0000FCC6 5D48                       		subq.w	#6,a0
0000FCC8 60EE                       		bra.s	loc_D9DE
0000FCCA                            ; ===========================================================================
0000FCCA                            
0000FCCA                            loc_D9F0:
0000FCCA 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FCCE 4E75                       		rts	
0000FCD0                            ; ===========================================================================
0000FCD0                            
0000FCD0                            loc_D9F6:
0000FCD0 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FCD4 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FCD8 0646 0280                  		addi.w	#$280,d6
0000FCDC                            
0000FCDC                            loc_DA02:
0000FCDC BC50                       		cmp.w	(a0),d6
0000FCDE 6300                       		bls.s	loc_DA16
0000FCE0 4A28 0004                  		tst.b	4(a0)
0000FCE4 6A00                       		bpl.s	loc_DA10
0000FCE6 1412                       		move.b	(a2),d2
0000FCE8 5212                       		addq.b	#1,(a2)
0000FCEA                            
0000FCEA                            loc_DA10:
0000FCEA 6100 0000                  		bsr.w	loc_DA3C
0000FCEE 67EC                       		beq.s	loc_DA02
0000FCF0                            
0000FCF0                            loc_DA16:
0000FCF0 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FCF4 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FCF8 0446 0300                  		subi.w	#$300,d6
0000FCFC 6500                       		blo.s	loc_DA36
0000FCFE                            
0000FCFE                            loc_DA24:
0000FCFE BC50                       		cmp.w	(a0),d6
0000FD00 6300                       		bls.s	loc_DA36
0000FD02 4A28 0004                  		tst.b	4(a0)
0000FD06 6A00                       		bpl.s	loc_DA32
0000FD08 522A 0001                  		addq.b	#1,1(a2)
0000FD0C                            
0000FD0C                            loc_DA32:
0000FD0C 5C48                       		addq.w	#6,a0
0000FD0E 60EE                       		bra.s	loc_DA24
0000FD10                            ; ===========================================================================
0000FD10                            
0000FD10                            loc_DA36:
0000FD10 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FD14                            
0000FD14                            locret_DA3A:
0000FD14 4E75                       		rts	
0000FD16                            ; ===========================================================================
0000FD16                            
0000FD16                            loc_DA3C:
0000FD16 4A28 0004                  		tst.b	4(a0)
0000FD1A 6A00                       		bpl.s	OPL_MakeItem
0000FD1C 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000FD22 6700                       		beq.s	OPL_MakeItem
0000FD24 5C48                       		addq.w	#6,a0
0000FD26 7000                       		moveq	#0,d0
0000FD28 4E75                       		rts	
0000FD2A                            ; ===========================================================================
0000FD2A                            
0000FD2A                            OPL_MakeItem:
0000FD2A 6100 0000                  		bsr.w	FindFreeObj
0000FD2E 6600                       		bne.s	locret_DA8A
0000FD30 3358 0008                  		move.w	(a0)+,obX(a1)
0000FD34 3018                       		move.w	(a0)+,d0
0000FD36 3200                       		move.w	d0,d1
0000FD38 0240 0FFF                  		andi.w	#$FFF,d0
0000FD3C 3340 000C                  		move.w	d0,obY(a1)
0000FD40 E559                       		rol.w	#2,d1
0000FD42 0201 0003                  		andi.b	#3,d1
0000FD46 1341 0001                  		move.b	d1,obRender(a1)
0000FD4A 1341 0022                  		move.b	d1,obStatus(a1)
0000FD4E 1018                       		move.b	(a0)+,d0
0000FD50 6A00                       		bpl.s	loc_DA80
0000FD52 0200 007F                  		andi.b	#$7F,d0
0000FD56 1342 0023                  		move.b	d2,obRespawnNo(a1)
0000FD5A                            
0000FD5A                            loc_DA80:
0000FD5A 1280                       		move.b	d0,0(a1)
0000FD5C 1358 0028                  		move.b	(a0)+,obSubtype(a1)
0000FD60 7000                       		moveq	#0,d0
0000FD62                            
0000FD62                            locret_DA8A:
0000FD62 4E75                       		rts	
0000FD64                            
0000FD64                            		include	"_incObj\sub FindFreeObj.asm"
0000FD64                            ; ---------------------------------------------------------------------------
0000FD64                            ; Subroutine to find a free object space
0000FD64                            
0000FD64                            ; output:
0000FD64                            ;	a1 = free position in object RAM
0000FD64                            ; ---------------------------------------------------------------------------
0000FD64                            
0000FD64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FD64                            
0000FD64                            
0000FD64                            FindFreeObj:
0000FD64 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; start address for object RAM
0000FD68 303C 005F                  		move.w	#$5F,d0
0000FD6C                            
0000FD6C                            	FFree_Loop:
0000FD6C 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000FD6E 6700                       		beq.s	FFree_Found	; if yes, branch
0000FD70 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000FD74 51C8 FFF6                  		dbf	d0,FFree_Loop	; repeat $5F times
0000FD78                            
0000FD78                            	FFree_Found:
0000FD78 4E75                       		rts	
0000FD7A                            
0000FD7A                            ; End of function FindFreeObj
0000FD7A                            
0000FD7A                            
0000FD7A                            ; ---------------------------------------------------------------------------
0000FD7A                            ; Subroutine to find a free object space AFTER the current one
0000FD7A                            
0000FD7A                            ; output:
0000FD7A                            ;	a1 = free position in object RAM
0000FD7A                            ; ---------------------------------------------------------------------------
0000FD7A                            
0000FD7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FD7A                            
0000FD7A                            
0000FD7A                            FindNextFreeObj:
0000FD7A 2248                       		movea.l	a0,a1
0000FD7C 303C F000                  		move.w	#$F000,d0
0000FD80 9048                       		sub.w	a0,d0
0000FD82 EC48                       		lsr.w	#6,d0
0000FD84 5340                       		subq.w	#1,d0
0000FD86 6500                       		bcs.s	NFree_Found
0000FD88                            
0000FD88                            	NFree_Loop:
0000FD88 4A11                       		tst.b	(a1)
0000FD8A 6700                       		beq.s	NFree_Found
0000FD8C 43E9 0040                  		lea	$40(a1),a1
0000FD90 51C8 FFF6                  		dbf	d0,NFree_Loop
0000FD94                            
0000FD94                            	NFree_Found:
0000FD94 4E75                       		rts	
0000FD96                            
0000FD96                            ; End of function FindNextFreeObj
0000FD96                            ; End of function FindNextFreeObj
0000FD96                            		include	"_incObj\41 Springs.asm"
0000FD96                            ; ---------------------------------------------------------------------------
0000FD96                            ; Object 41 - springs
0000FD96                            ; ---------------------------------------------------------------------------
0000FD96                            
0000FD96                            Springs:
0000FD96 7000                       		moveq	#0,d0
0000FD98 1028 0024                  		move.b	obRoutine(a0),d0
0000FD9C 323B 0000                  		move.w	Spring_Index(pc,d0.w),d1
0000FDA0 4EBB 1000                  		jsr	Spring_Index(pc,d1.w)
0000FDA4 6100 FA24                  		bsr.w	DisplaySprite
0000FDC6 4E75                       		rts	
0000FDC8                            ; ===========================================================================
0000FDC8 0000                       Spring_Index:	dc.w Spring_Main-Spring_Index
0000FDCA 0000                       		dc.w Spring_Up-Spring_Index
0000FDCC 0000                       		dc.w Spring_AniUp-Spring_Index
0000FDCE 0000                       		dc.w Spring_ResetUp-Spring_Index
0000FDD0 0000                       		dc.w Spring_LR-Spring_Index
0000FDD2 0000                       		dc.w Spring_AniLR-Spring_Index
0000FDD4 0000                       		dc.w Spring_ResetLR-Spring_Index
0000FDD6 0000                       		dc.w Spring_Dwn-Spring_Index
0000FDD8 0000                       		dc.w Spring_AniDwn-Spring_Index
0000FDDA 0000                       		dc.w Spring_ResetDwn-Spring_Index
0000FDDC                            
0000FDDC =00000030                  spring_pow:	equ $30			; power of current spring
0000FDDC                            
0000FDDC F000                       Spring_Powers:	dc.w -$1000		; power	of red spring
0000FDDE F600                       		dc.w -$A00		; power	of yellow spring
0000FDE0                            ; ===========================================================================
0000FDE0                            
0000FDE0                            Spring_Main:	; Routine 0
0000FDE0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FDE4 217C 0000 0000 0004        		move.l	#Map_Spring,obMap(a0)
0000FDEC 317C 0523 0002             		move.w	#$523,obGfx(a0)
0000FDF2 0028 0004 0001             		ori.b	#4,obRender(a0)
0000FDF8 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000FDFE 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FE04 1028 0028                  		move.b	obSubtype(a0),d0
0000FE08 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000FE0C 6700                       		beq.s	Spring_NotLR	; if not, branch
0000FE0E                            
0000FE0E 117C 0008 0024             		move.b	#8,obRoutine(a0) ; use "Spring_LR" routine
0000FE14 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FE1A 117C 0003 001A             		move.b	#3,obFrame(a0)
0000FE20 317C 0533 0002             		move.w	#$533,obGfx(a0)
0000FE26 117C 0008 0014             		move.b	#8,obActWid(a0)
0000FE2C                            
0000FE2C                            	Spring_NotLR:
0000FE2C 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000FE30 6700                       		beq.s	Spring_NotDwn	; if not, branch
0000FE32                            
0000FE32 117C 000E 0024             		move.b	#$E,obRoutine(a0) ; use "Spring_Dwn" routine
0000FE38 08E8 0001 0022             		bset	#1,obStatus(a0)
0000FE3E                            
0000FE3E                            	Spring_NotDwn:
0000FE3E 0800 0001                  		btst	#1,d0
0000FE42 6700                       		beq.s	loc_DB72
0000FE44 08E8 0005 0002             		bset	#5,obGfx(a0)
0000FE4A                            
0000FE4A                            loc_DB72:
0000FE4A 0240 000F                  		andi.w	#$F,d0
0000FE4E 317B 008C 0030             		move.w	Spring_Powers(pc,d0.w),spring_pow(a0)
0000FE54 4E75                       		rts	
0000FE56                            ; ===========================================================================
0000FE56                            
0000FE56                            Spring_Up:	; Routine 2
0000FE56 323C 001B                  		move.w	#$1B,d1
0000FE5A 343C 0008                  		move.w	#8,d2
0000FE5E 363C 0010                  		move.w	#$10,d3
0000FE62 3828 0008                  		move.w	obX(a0),d4
0000FE66 6100 0000                  		bsr.w	SolidObject
0000FE6A 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic on top of the spring?
0000FE6E 6600                       		bne.s	Spring_BounceUp	; if yes, branch
0000FE70 4E75                       		rts	
0000FE72                            ; ===========================================================================
0000FE72                            
0000FE72                            Spring_BounceUp:
0000FE72 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FE76 5069 000C                  		addq.w	#8,obY(a1)
0000FE7A 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1) ; move Sonic upwards
0000FE80 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FE86 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FE8C 137C 0000 001C             		move.b	#id_Spring,obAnim(a1) ; use "bouncing" animation
0000FE92 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FE98 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FE9E 4228 0025                  		clr.b	obSolid(a0)
0000FEAC                            
0000FEAC                            Spring_AniUp:	; Routine 4
0000FEAC 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FEB2 6000 C9CC                  		bra.w	AnimateSprite
0000FEB6                            ; ===========================================================================
0000FEB6                            
0000FEB6                            Spring_ResetUp:	; Routine 6
0000FEB6 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FEBC 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Up" routine
0000FEC0 4E75                       		rts	
0000FEC2                            ; ===========================================================================
0000FEC2                            
0000FEC2                            Spring_LR:	; Routine 8
0000FEC2 323C 0013                  		move.w	#$13,d1
0000FEC6 343C 000E                  		move.w	#$E,d2
0000FECA 363C 000F                  		move.w	#$F,d3
0000FECE 3828 0008                  		move.w	obX(a0),d4
0000FED2 6100 0000                  		bsr.w	SolidObject
0000FED6 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FEDC 6600                       		bne.s	loc_DC0C
0000FEDE 117C 0008 0024             		move.b	#8,obRoutine(a0)
0000FEE4                            
0000FEE4                            loc_DC0C:
0000FEE4 0828 0005 0022             		btst	#5,obStatus(a0)
0000FEEA 6600                       		bne.s	Spring_BounceLR
0000FEEC 4E75                       		rts	
0000FEEE                            ; ===========================================================================
0000FEEE                            
0000FEEE                            Spring_BounceLR:
0000FEEE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FEF2 3368 0030 0010             		move.w	spring_pow(a0),obVelX(a1) ; move Sonic to the left
0000FEF8 5069 0008                  		addq.w	#8,obX(a1)
0000FEFC 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
0000FF02 6600                       		bne.s	Spring_Flipped	; if yes, branch
0000FF04 0469 0010 0008             		subi.w	#$10,obX(a1)
0000FF0A 4469 0010                  		neg.w	obVelX(a1)	; move Sonic to	the right
0000FF0E                            
0000FF0E                            	Spring_Flipped:
0000FF0E 337C 000F 003E             		move.w	#$F,$3E(a1)
0000FF14 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000FF1A 0869 0000 0022             		bchg	#0,obStatus(a1)
0000FF20 0829 0002 0022             		btst	#2,obStatus(a1)
0000FF26 6600                       		bne.s	loc_DC56
0000FF28 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
0000FF2E                            
0000FF2E                            loc_DC56:
0000FF2E 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000FF34 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000FF44                            
0000FF44                            Spring_AniLR:	; Routine $A
0000FF44 4278 C904                  		clr.w ($FFFFC904).w	; clear screen delay counter
0000FF48 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FF4E 6000 C930                  		bra.w	AnimateSprite
0000FF52                            ; ===========================================================================
0000FF52                            
0000FF52                            Spring_ResetLR:	; Routine $C
0000FF52 117C 0002 001D             		move.b	#2,obNextAni(a0) ; reset animation
0000FF58 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_LR" routine
0000FF5C 4E75                       		rts	
0000FF5E                            ; ===========================================================================
0000FF5E                            
0000FF5E                            Spring_Dwn:	; Routine $E
0000FF5E 323C 001B                  		move.w	#$1B,d1
0000FF62 343C 0008                  		move.w	#8,d2
0000FF66 363C 0010                  		move.w	#$10,d3
0000FF6A 3828 0008                  		move.w	obX(a0),d4
0000FF6E 6100 0000                  		bsr.w	SolidObject
0000FF72 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FF78 6600                       		bne.s	loc_DCA4
0000FF7A 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000FF80                            
0000FF80                            loc_DCA4:
0000FF80 4A28 0025                  		tst.b	obSolid(a0)
0000FF84 6600                       		bne.s	locret_DCAE
0000FF86 4A44                       		tst.w	d4
0000FF88 6B00                       		bmi.s	Spring_BounceDwn
0000FF8A                            
0000FF8A                            locret_DCAE:
0000FF8A 4E75                       		rts	
0000FF8C                            ; ===========================================================================
0000FF8C                            
0000FF8C                            Spring_BounceDwn:
0000FF8C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FF90 5169 000C                  		subq.w	#8,obY(a1)
0000FF94 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1)
0000FF9A 4469 0012                  		neg.w	obVelY(a1)	; move Sonic downwards
0000FF9E 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FFA4 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FFAA 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FFB0 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FFB6 4228 0025                  		clr.b	obSolid(a0)
0000FFC4                            
0000FFC4                            Spring_AniDwn:	; Routine $10
0000FFC4 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FFCA 6000 C8B4                  		bra.w	AnimateSprite
0000FFCE                            ; ===========================================================================
0000FFCE                            
0000FFCE                            Spring_ResetDwn:
0000FFCE                            		; Routine $12
0000FFCE 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FFD4 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Dwn" routine
0000FFD8 4E75                       		rts	
0000FFD8 4E75                       		rts	
0000FFDA                            		include	"_anim\Springs.asm"
0000FFDA                            ; ---------------------------------------------------------------------------
0000FFDA                            ; Animation script - springs
0000FFDA                            ; ---------------------------------------------------------------------------
0000FFDA 0000                       Ani_Spring:	dc.w byte_DD02-Ani_Spring
0000FFDC 0000                       		dc.w byte_DD0E-Ani_Spring
0000FFDE 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, afRoutine
0000FFEA 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, afRoutine
0000FFF6                            		even
0000FFF6                            		even
0000FFF6                            Map_Spring:	include	"_maps\Springs.asm"
0000FFF6                            ; ---------------------------------------------------------------------------
0000FFF6                            ; Sprite mappings - springs
0000FFF6                            ; ---------------------------------------------------------------------------
0000FFF6                            Map_Spring_internal:
0000FFF6 0000                       		dc.w M_Spg_Up-Map_Spring_internal
0000FFF8 0000                       		dc.w M_Spg_UpFlat-Map_Spring_internal
0000FFFA 0000                       		dc.w M_Spg_UpExt-Map_Spring_internal
0000FFFC 0000                       		dc.w M_Spg_Left-Map_Spring_internal
0000FFFE 0000                       		dc.w M_Spg_LeftFlat-Map_Spring_internal
00010000 0000                       		dc.w M_Spg_LeftExt-Map_Spring_internal
00010002 02                         M_Spg_Up:	dc.b 2			; facing up
00010003 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
00010008 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0001000D 01                         M_Spg_UpFlat:	dc.b 1			; facing up, flattened
0001000E 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
00010013 03                         M_Spg_UpExt:	dc.b 3			; facing up, extended
00010014 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
00010019 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0001001E 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
00010023 01                         M_Spg_Left:	dc.b 1			; facing left
00010024 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00010029 01                         M_Spg_LeftFlat:	dc.b 1			; facing left, flattened
0001002A F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0001002F 04                         M_Spg_LeftExt:	dc.b 4			; facing left, extended
00010030 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
00010035 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0001003A F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0001003F 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
00010044                            		even
00010044                            		even
00010044                            
00010044                            		include	"_incObj\42 Newtron.asm"
00010044                            ; ---------------------------------------------------------------------------
00010044                            ; Object 42 - Newtron enemy (GHZ)
00010044                            ; ---------------------------------------------------------------------------
00010044                            
00010044                            Newtron:
00010044 7000                       		moveq	#0,d0
00010046 1028 0024                  		move.b	obRoutine(a0),d0
0001004A 323B 0000                  		move.w	Newt_Index(pc,d0.w),d1
0001004E 4EFB 1000                  		jmp	Newt_Index(pc,d1.w)
00010052                            ; ===========================================================================
00010052 0000                       Newt_Index:	dc.w Newt_Main-Newt_Index
00010054 0000                       		dc.w Newt_Action-Newt_Index
00010056 0000                       		dc.w Newt_Delete-Newt_Index
00010058                            ; ===========================================================================
00010058                            
00010058                            Newt_Main:	; Routine 0
00010058 5428 0024                  		addq.b	#2,obRoutine(a0)
0001005C 217C 0000 0000 0004        		move.l	#Map_Newt,obMap(a0)
00010064 317C 049B 0002             		move.w	#$49B,obGfx(a0)
0001006A 117C 0004 0001             		move.b	#4,obRender(a0)
00010070 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010076 117C 0014 0014             		move.b	#$14,obActWid(a0)
0001007C 117C 0010 0016             		move.b	#$10,obHeight(a0)
00010082 117C 0008 0017             		move.b	#8,obWidth(a0)
00010088                            
00010088                            Newt_Action:	; Routine 2
00010088 7000                       		moveq	#0,d0
0001008A 1028 0025                  		move.b	ob2ndRout(a0),d0
0001008E 323B 0000                  		move.w	@index(pc,d0.w),d1
00010092 4EBB 1000                  		jsr	@index(pc,d1.w)
00010096 43F9 0000 0000             		lea	(Ani_Newt).l,a1
0001009C 6100 C7E2                  		bsr.w	AnimateSprite
000100A0 6000 0000                  		bra.w	RememberState
000100A4                            ; ===========================================================================
000100A4 0000                       @index:		dc.w @chkdistance-@index
000100A6 0000                       		dc.w @type00-@index
000100A8 0000                       		dc.w @matchfloor-@index
000100AA 0000                       		dc.w @speed-@index
000100AC 0000                       		dc.w @type01-@index
000100AE                            ; ===========================================================================
000100AE                            
000100AE                            @chkdistance:
000100AE 08E8 0000 0022             		bset	#0,obStatus(a0)
000100B4 3038 D008                  		move.w	(v_player+obX).w,d0
000100B8 9068 0008                  		sub.w	obX(a0),d0
000100BC 6400                       		bcc.s	@sonicisright
000100BE 4440                       		neg.w	d0
000100C0 08A8 0000 0022             		bclr	#0,obStatus(a0)
000100C6                            
000100C6                            	@sonicisright:
000100C6 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
000100CA 6400                       		bcc.s	@outofrange	; if not, branch
000100CC 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @type00 next
000100D0 117C 0001 001C             		move.b	#1,obAnim(a0)
000100D6 4A28 0028                  		tst.b	obSubtype(a0)	; check	object type
000100DA 6700                       		beq.s	@istype00	; if type is 00, branch
000100DC                            
000100DC 317C 249B 0002             		move.w	#$249B,obGfx(a0)
000100E2 117C 0008 0025             		move.b	#8,ob2ndRout(a0) ; goto @type01 next
000100E8 117C 0004 001C             		move.b	#4,obAnim(a0)	; use different	animation
000100EE                            
000100EE                            	@outofrange:
000100EE                            	@istype00:
000100EE 4E75                       		rts	
000100F0                            ; ===========================================================================
000100F0                            
000100F0                            @type00:
000100F0 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has "appearing" animation finished?
000100F6 6400                       		bcc.s	@fall		; is yes, branch
000100F8 08E8 0000 0022             		bset	#0,obStatus(a0)
000100FE 3038 D008                  		move.w	(v_player+obX).w,d0
00010102 9068 0008                  		sub.w	obX(a0),d0
00010106 6400                       		bcc.s	@sonicisright2
00010108 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001010E                            
0001010E                            	@sonicisright2:
0001010E 4E75                       		rts	
00010110                            ; ===========================================================================
00010110                            
00010110                            	@fall:
00010110 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
00010116 6600                       		bne.s	@loc_DE42
00010118 117C 000C 0020             		move.b	#$C,obColType(a0)
0001011E                            
0001011E                            	@loc_DE42:
0001011E 6100 F65E                  		bsr.w	ObjectFall
00010122 4EB9 0000 0000             		jsr		ObjFloorDist
00010128 4A41                       		tst.w	d1		; has newtron hit the floor?
0001012A 6A00                       		bpl.s	@keepfalling	; if not, branch
0001012C                            
0001012C D368 000C                  		add.w	d1,obY(a0)
00010130 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop newtron falling
00010136 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001013A 117C 0002 001C             		move.b	#2,obAnim(a0)
00010140 0828 0005 0002             		btst	#5,obGfx(a0)
00010146 6700                       		beq.s	@pppppppp
00010148 5228 001C                  		addq.b	#1,obAnim(a0)
0001014C                            
0001014C                            	@pppppppp:
0001014C 117C 000D 0020             		move.b	#$D,obColType(a0)
00010152 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move newtron horizontally
00010158 0828 0000 0022             		btst	#0,obStatus(a0)
0001015E 6600                       		bne.s	@keepfalling
00010160 4468 0010                  		neg.w	obVelX(a0)
00010164                            
00010164                            	@keepfalling:
00010164 4E75                       		rts	
00010166                            ; ===========================================================================
00010166                            
00010166                            @matchfloor:
00010166 6100 F64E                  		bsr.w	SpeedToPos
0001016A 4EB9 0000 0000             		jsr		ObjFloorDist
00010170 0C41 FFF8                  		cmpi.w	#-8,d1
00010174 6D00                       		blt.s	@nextroutine
00010176 0C41 000C                  		cmpi.w	#$C,d1
0001017A 6C00                       		bge.s	@nextroutine
0001017C D368 000C                  		add.w	d1,obY(a0)	; match	newtron's position with floor
00010180 4E75                       		rts	
00010182                            ; ===========================================================================
00010182                            
00010182                            	@nextroutine:
00010182 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @speed next
00010186 4E75                       		rts	
00010188                            ; ===========================================================================
00010188                            
00010188                            @speed:
00010188 6100 F62C                  		bsr.w	SpeedToPos
0001018C 4E75                       		rts	
0001018E                            ; ===========================================================================
0001018E                            
0001018E                            @type01:
0001018E 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
00010194 6600                       		bne.s	@firemissile
00010196 117C 000C 0020             		move.b	#$C,obColType(a0)
0001019C                            
0001019C                            	@firemissile:
0001019C 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
000101A2 6600                       		bne.s	@fail
000101A4 4A28 0032                  		tst.b	$32(a0)
000101A8 6600                       		bne.s	@fail
000101AA 117C 0001 0032             		move.b	#1,$32(a0)
000101B0 6100 FBB2                  		bsr.w	FindFreeObj
000101B4 6600                       		bne.s	@fail
000101B6 12BC 0023                  		move.b	#id_Missile,0(a1) ; load missile object
000101BA 3368 0008 0008             		move.w	obX(a0),obX(a1)
000101C0 3368 000C 000C             		move.w	obY(a0),obY(a1)
000101C6 5169 000C                  		subq.w	#8,obY(a1)
000101CA 337C 0200 0010             		move.w	#$200,obVelX(a1)
000101D0 303C 0014                  		move.w	#$14,d0
000101D4 0828 0000 0022             		btst	#0,obStatus(a0)
000101DA 6600                       		bne.s	@noflip
000101DC 4440                       		neg.w	d0
000101DE 4469 0010                  		neg.w	obVelX(a1)
000101E2                            
000101E2                            	@noflip:
000101E2 D169 0008                  		add.w	d0,obX(a1)
000101E6 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
000101EC 137C 0001 0028             		move.b	#1,obSubtype(a1)
000101F2                            
000101F2                            	@fail:
000101F2 4E75                       		rts	
000101F4                            ; ===========================================================================
000101F4                            
000101F4                            Newt_Delete:	; Routine 4
000101F4 6000 F614                  		bra.w	DeleteObject
000101F4 6000 F614                  		bra.w	DeleteObject
000101F8                            		include	"_anim\Newtron.asm"
000101F8                            ; ---------------------------------------------------------------------------
000101F8                            ; Animation script - Newtron enemy
000101F8                            ; ---------------------------------------------------------------------------
000101F8 0000                       Ani_Newt:	dc.w A_Newt_Blank-Ani_Newt
000101FA 0000                       		dc.w A_Newt_Drop-Ani_Newt
000101FC 0000                       		dc.w A_Newt_Fly1-Ani_Newt
000101FE 0000                       		dc.w A_Newt_Fly2-Ani_Newt
00010200 0000                       		dc.w A_Newt_Fires-Ani_Newt
00010202 0F0A FF                    A_Newt_Blank:	dc.b $F, $A, afEnd
00010206 00                         		even
00010206 1300 0103 0405 FE01        A_Newt_Drop:	dc.b $13, 0, 1,	3, 4, 5, afBack, 1
0001020E 0206 07FF                  A_Newt_Fly1:	dc.b 2,	6, 7, afEnd
00010212 0208 09FF                  A_Newt_Fly2:	dc.b 2,	8, 9, afEnd
00010216 1300 0101 0201 0100 FC     A_Newt_Fires:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, afRoutine
00010220 00                         		even
00010220 00                         		even
00010220                            Map_Newt:	include	"_maps\Newtron.asm"
00010220                            ; ---------------------------------------------------------------------------
00010220                            ; Sprite mappings - Newtron enemy (GHZ)
00010220                            ; ---------------------------------------------------------------------------
00010220                            Map_Newt_internal:
00010220 0000                       		dc.w M_Newt_Trans-Map_Newt_internal
00010222 0000                       		dc.w M_Newt_Norm-Map_Newt_internal
00010224 0000                       		dc.w M_Newt_Fires-Map_Newt_internal
00010226 0000                       		dc.w M_Newt_Drop1-Map_Newt_internal
00010228 0000                       		dc.w M_Newt_Drop2-Map_Newt_internal
0001022A 0000                       		dc.w M_Newt_Drop3-Map_Newt_internal
0001022C 0000                       		dc.w M_Newt_Fly1a-Map_Newt_internal
0001022E 0000                       		dc.w M_Newt_Fly1b-Map_Newt_internal
00010230 0000                       		dc.w M_Newt_Fly2a-Map_Newt_internal
00010232 0000                       		dc.w M_Newt_Fly2b-Map_Newt_internal
00010234 0000                       		dc.w M_Newt_Blank-Map_Newt_internal
00010236 03                         M_Newt_Trans:	dc.b 3
00010237 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC	; partially visible
0001023C F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
00010241 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
00010246 03                         M_Newt_Norm:	dc.b 3
00010247 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC ; visible
0001024C EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00010251 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00010256 03                         M_Newt_Fires:	dc.b 3
00010257 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC ; open mouth, firing
0001025C EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00010261 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00010266 04                         M_Newt_Drop1:	dc.b 4
00010267 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC ; dropping
0001026C EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00010271 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
00010276 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0001027B 03                         M_Newt_Drop2:	dc.b 3
0001027C F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
00010281 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
00010286 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0001028B 02                         M_Newt_Drop3:	dc.b 2
0001028C F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010291 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010296 03                         M_Newt_Fly1a:	dc.b 3
00010297 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC ; flying
0001029C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000102A1 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
000102A6 03                         M_Newt_Fly1b:	dc.b 3
000102A7 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
000102AC F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000102B1 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
000102B6 03                         M_Newt_Fly2a:	dc.b 3
000102B7 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
000102BC F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000102C1 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
000102C6 03                         M_Newt_Fly2b:	dc.b 3
000102C7 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
000102CC F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000102D1 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
000102D6 00                         M_Newt_Blank:	dc.b 0
000102D8 00                         		even
000102D8 00                         		even
000102D8                            		include	"_incObj\43 Roller.asm"
000102D8                            ; ---------------------------------------------------------------------------
000102D8                            ; Object 43 - Roller enemy (SYZ)
000102D8                            ; ---------------------------------------------------------------------------
000102D8                            
000102D8                            Roller:
000102D8 7000                       		moveq	#0,d0
000102DA 1028 0024                  		move.b	obRoutine(a0),d0
000102DE 323B 0000                  		move.w	Roll_Index(pc,d0.w),d1
000102E2 4EFB 1000                  		jmp	Roll_Index(pc,d1.w)
000102E6                            ; ===========================================================================
000102E6 0000                       Roll_Index:	dc.w Roll_Main-Roll_Index
000102E8 0000                       		dc.w Roll_Action-Roll_Index
000102EA                            ; ===========================================================================
000102EA                            
000102EA                            Roll_Main:	; Routine 0
000102EA 117C 000E 0016             		move.b	#$E,obHeight(a0)
000102F0 117C 0008 0017             		move.b	#8,obWidth(a0)
000102F6 6100 F486                  		bsr.w	ObjectFall
000102FA 4EB9 0000 0000             		jsr	ObjFloorDist
00010300 4A41                       		tst.w	d1
00010302 6A00                       		bpl.s	locret_E052
00010304 D368 000C                  		add.w	d1,obY(a0)	; match	roller's position with the floor
00010308 317C 0000 0012             		move.w	#0,obVelY(a0)
0001030E 5428 0024                  		addq.b	#2,obRoutine(a0)
00010312 217C 0000 0000 0004        		move.l	#Map_Roll,obMap(a0)
0001031A 317C 04B8 0002             		move.w	#$4B8,obGfx(a0)
00010320 117C 0004 0001             		move.b	#4,obRender(a0)
00010326 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001032C 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010332                            
00010332                            	locret_E052:
00010332 4E75                       		rts	
00010334                            ; ===========================================================================
00010334                            
00010334                            Roll_Action:	; Routine 2
00010334 7000                       		moveq	#0,d0
00010336 1028 0025                  		move.b	ob2ndRout(a0),d0
0001033A 323B 0000                  		move.w	Roll_Index2(pc,d0.w),d1
0001033E 4EBB 1000                  		jsr	Roll_Index2(pc,d1.w)
00010342 43F9 0000 0000             		lea	(Ani_Roll).l,a1
00010348 6100 C536                  		bsr.w	AnimateSprite
0001034C 3028 0008                  		move.w	obX(a0),d0
00010350 0240 FF80                  		andi.w	#$FF80,d0
00010354 3238 F700                  		move.w	(v_screenposx).w,d1
00010358 0441 0080                  		subi.w	#$80,d1
0001035C 0241 FF80                  		andi.w	#$FF80,d1
00010360 9041                       		sub.w	d1,d0
00010362 0C40 0280                  		cmpi.w	#$280,d0
00010366 6E00 0000                  		bgt.w	Roll_ChkGone
0001036A 6000 F45E                  		bra.w	DisplaySprite
0001036E                            ; ===========================================================================
0001036E                            
0001036E                            Roll_ChkGone:
0001036E 45F8 FC00                  		lea	(v_objstate).w,a2
00010372 7000                       		moveq	#0,d0
00010374 1028 0023                  		move.b	obRespawnNo(a0),d0
00010378 6700                       		beq.s	Roll_Delete
0001037A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010380                            
00010380                            Roll_Delete:
00010380 6000 F488                  		bra.w	DeleteObject
00010384                            ; ===========================================================================
00010384 0000                       Roll_Index2:	dc.w Roll_RollChk-Roll_Index2
00010386 0000                       		dc.w Roll_RollNoChk-Roll_Index2
00010388 0000                       		dc.w Roll_ChkJump-Roll_Index2
0001038A 0000                       		dc.w Roll_MatchFloor-Roll_Index2
0001038C                            ; ===========================================================================
0001038C                            
0001038C                            Roll_RollChk:
0001038C 3038 D008                  		move.w	(v_player+obX).w,d0
00010390 0440 0100                  		subi.w	#$100,d0
00010394 6500                       		bcs.s	loc_E0D2
00010396 9068 0008                  		sub.w	obX(a0),d0	; check	distance between Roller	and Sonic
0001039A 6500                       		bcs.s	loc_E0D2
0001039C 5828 0025                  		addq.b	#4,ob2ndRout(a0)
000103A0 117C 0002 001C             		move.b	#2,obAnim(a0)
000103A6 317C 0700 0010             		move.w	#$700,obVelX(a0) ; move Roller horizontally
000103AC 117C 008E 0020             		move.b	#$8E,obColType(a0) ; make Roller invincible
000103B2                            
000103B2                            loc_E0D2:
000103B2 588F                       		addq.l	#4,sp
000103B4 4E75                       		rts	
000103B6                            ; ===========================================================================
000103B6                            
000103B6                            Roll_RollNoChk:
000103B6 0C28 0002 001C             		cmpi.b	#2,obAnim(a0)
000103BC 6700                       		beq.s	loc_E0F8
000103BE 5368 0030                  		subq.w	#1,$30(a0)
000103C2 6A00                       		bpl.s	locret_E0F6
000103C4 117C 0001 001C             		move.b	#1,obAnim(a0)
000103CA 317C 0700 0010             		move.w	#$700,obVelX(a0)
000103D0 117C 008E 0020             		move.b	#$8E,obColType(a0)
000103D6                            
000103D6                            locret_E0F6:
000103D6 4E75                       		rts	
000103D8                            ; ===========================================================================
000103D8                            
000103D8                            loc_E0F8:
000103D8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000103DC 4E75                       		rts	
000103DE                            ; ===========================================================================
000103DE                            
000103DE                            Roll_ChkJump:
000103DE 6100 0000                  		bsr.w	Roll_Stop
000103E2 6100 F3D2                  		bsr.w	SpeedToPos
000103E6 4EB9 0000 0000             		jsr	ObjFloorDist
000103EC 0C41 FFF8                  		cmpi.w	#-8,d1
000103F0 6D00                       		blt.s	Roll_Jump
000103F2 0C41 000C                  		cmpi.w	#$C,d1
000103F6 6C00                       		bge.s	Roll_Jump
000103F8 D368 000C                  		add.w	d1,obY(a0)
000103FC 4E75                       		rts	
000103FE                            ; ===========================================================================
000103FE                            
000103FE                            Roll_Jump:
000103FE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00010402 08E8 0000 0032             		bset	#0,$32(a0)
00010408 6700                       		beq.s	locret_E12E
0001040A 317C FA00 0012             		move.w	#-$600,obVelY(a0)	; move Roller vertically
00010410                            
00010410                            locret_E12E:
00010410 4E75                       		rts	
00010412                            ; ===========================================================================
00010412                            
00010412                            Roll_MatchFloor:
00010412 6100 F36A                  		bsr.w	ObjectFall
00010416 4A68 0012                  		tst.w	obVelY(a0)
0001041A 6B00                       		bmi.s	locret_E150
0001041C 4EB9 0000 0000             		jsr	ObjFloorDist
00010422 4A41                       		tst.w	d1
00010424 6A00                       		bpl.s	locret_E150
00010426 D368 000C                  		add.w	d1,obY(a0)	; match	Roller's position with the floor
0001042A 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001042E 317C 0000 0012             		move.w	#0,obVelY(a0)
00010434                            
00010434                            locret_E150:
00010434 4E75                       		rts	
00010436                            
00010436                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010436                            
00010436                            
00010436                            Roll_Stop:
00010436 4A28 0032                  		tst.b	$32(a0)
0001043A 6B00                       		bmi.s	locret_E188
0001043C 3038 D008                  		move.w	(v_player+obX).w,d0
00010440 0440 0030                  		subi.w	#$30,d0
00010444 9068 0008                  		sub.w	obX(a0),d0
00010448 6400                       		bcc.s	locret_E188
0001044A 117C 0000 001C             		move.b	#0,obAnim(a0)
00010450 117C 000E 0020             		move.b	#$E,obColType(a0)
00010456 4268 0010                  		clr.w	obVelX(a0)
0001045A 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
00010460 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
00010466 08E8 0007 0032             		bset	#7,$32(a0)
0001046C                            
0001046C                            locret_E188:
0001046C 4E75                       		rts	
0001046E                            ; End of function Roll_Stop
0001046E                            ; End of function Roll_Stop
0001046E                            		include	"_anim\Roller.asm"
0001046E                            ; ---------------------------------------------------------------------------
0001046E                            ; Animation script - Roller enemy
0001046E                            ; ---------------------------------------------------------------------------
0001046E 0000                       Ani_Roll:	dc.w A_Roll_Unfold-Ani_Roll
00010470 0000                       		dc.w A_Roll_Fold-Ani_Roll
00010472 0000                       		dc.w A_Roll_Roll-Ani_Roll
00010474 0F02 0100 FE01             A_Roll_Unfold:	dc.b $F, 2, 1, 0, afBack, 1
0001047A 0F01 02FD 02               A_Roll_Fold:	dc.b $F, 1, 2, afChange, 2
00010480 00                         		even
00010480 0303 0402 FF               A_Roll_Roll:	dc.b 3,	3, 4, 2, afEnd
00010486 00                         		even
00010486 00                         		even
00010486                            Map_Roll:	include	"_maps\Roller.asm"
00010486                            ; --------------------------------------------------------------------------------
00010486                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010486                            ; --------------------------------------------------------------------------------
00010486                            
00010486                            SME_q3BmU:	
00010486 0000 0000                  		dc.w SME_q3BmU_A-SME_q3BmU, SME_q3BmU_15-SME_q3BmU	
0001048A 0000 0000                  		dc.w SME_q3BmU_20-SME_q3BmU, SME_q3BmU_26-SME_q3BmU	
0001048E 0000                       		dc.w SME_q3BmU_2C-SME_q3BmU	
00010490 02                         SME_q3BmU_A:	dc.b 2	
00010491 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0	
00010496 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0	
0001049B 02                         SME_q3BmU_15:	dc.b 2	
0001049C E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
000104A1 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0	
000104A6 01                         SME_q3BmU_20:	dc.b 1	
000104A7 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0	
000104AC 01                         SME_q3BmU_26:	dc.b 1	
000104AD F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0	
000104B2 01                         SME_q3BmU_2C:	dc.b 1	
000104B3 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0	
000104B8                            		even
000104B8                            		even
000104B8                            
000104B8                            		include	"_incObj\44 GHZ Edge Walls.asm"
000104B8                            ; ---------------------------------------------------------------------------
000104B8                            ; Object 44 - edge walls (GHZ)
000104B8                            ; ---------------------------------------------------------------------------
000104B8                            
000104B8                            EdgeWalls:
000104B8 7000                       		moveq	#0,d0
000104BA 1028 0024                  		move.b	obRoutine(a0),d0
000104BE 323B 0000                  		move.w	Edge_Index(pc,d0.w),d1
000104C2 4EFB 1000                  		jmp	Edge_Index(pc,d1.w)
000104C6                            ; ===========================================================================
000104C6 0000                       Edge_Index:	dc.w Edge_Main-Edge_Index
000104C8 0000                       		dc.w Edge_Solid-Edge_Index
000104CA 0000                       		dc.w Edge_Display-Edge_Index
000104CC                            ; ===========================================================================
000104CC                            
000104CC                            Edge_Main:	; Routine 0
000104CC 5428 0024                  		addq.b	#2,obRoutine(a0)
000104D0 217C 0000 0000 0004        		move.l	#Map_Edge,obMap(a0)
000104D8 317C 434C 0002             		move.w	#$434C,obGfx(a0)
000104DE 0028 0004 0001             		ori.b	#4,obRender(a0)
000104E4 117C 0008 0014             		move.b	#8,obActWid(a0)
000104EA 317C 0300 0018             		move.w	#$300,obPriority(a0)
000104F0 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0) ; copy object type number to frame number
000104F6 08A8 0004 001A             		bclr	#4,obFrame(a0)	; clear	4th bit	(deduct	$10)
000104FC 6700                       		beq.s	Edge_Solid	; make object solid if 4th bit = 0
000104FE 5428 0024                  		addq.b	#2,obRoutine(a0)
00010502 6000                       		bra.s	Edge_Display	; don't make it solid if 4th bit = 1
00010504                            ; ===========================================================================
00010504                            
00010504                            Edge_Solid:	; Routine 2
00010504 323C 0013                  		move.w	#$13,d1
00010508 343C 0028                  		move.w	#$28,d2
0001050C 6100 9FA6                  		bsr.w	Obj44_SolidWall
00010510                            
00010510                            Edge_Display:	; Routine 4
00010510 6100 F2B8                  		bsr.w	DisplaySprite
00010532 4E75                       		rts	
00010532 4E75                       		rts	
00010534                            Map_Edge:	include	"_maps\GHZ Edge Walls.asm"
00010534                            ; ---------------------------------------------------------------------------
00010534                            ; Sprite mappings - walls (GHZ)
00010534                            ; ---------------------------------------------------------------------------
00010534                            Map_Edge_internal:
00010534 0000                       		dc.w M_Edge_Shadow-Map_Edge_internal
00010536 0000                       		dc.w M_Edge_Light-Map_Edge_internal
00010538 0000                       		dc.w M_Edge_Dark-Map_Edge_internal
0001053A 04                         M_Edge_Shadow:	dc.b 4
0001053B E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8	; light with shadow
00010540 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
00010545 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0001054A 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0001054F 04                         M_Edge_Light:	dc.b 4
00010550 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8	; light with no shadow
00010555 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0001055A 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0001055F 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
00010564 04                         M_Edge_Dark:	dc.b 4
00010565 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8	; all shadow
0001056A F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0001056F 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
00010574 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0001057A 00                         		even
0001057A 00                         		even
0001057A                            
0001057A                            		include	"_incObj\13 Lava Ball Maker.asm"
0001057A                            ; ---------------------------------------------------------------------------
0001057A                            ; Object 13 - lava ball	maker (MZ, SLZ)
0001057A                            ; ---------------------------------------------------------------------------
0001057A                            
0001057A                            LavaMaker:
0001057A 7000                       		moveq	#0,d0
0001057C 1028 0024                  		move.b	obRoutine(a0),d0
00010580 323B 0000                  		move.w	LavaM_Index(pc,d0.w),d1
00010584 4EBB 1000                  		jsr	LavaM_Index(pc,d1.w)
00010588 6000 0000                  		bra.w	LBall_ChkDel
0001058C                            ; ===========================================================================
0001058C 0000                       LavaM_Index:	dc.w LavaM_Main-LavaM_Index
0001058E 0000                       		dc.w LavaM_MakeLava-LavaM_Index
00010590                            ; ---------------------------------------------------------------------------
00010590                            ;
00010590                            ; Lava ball production rates
00010590                            ;
00010590 1E3C 5A78 96B4             LavaM_Rates:	dc.b 30, 60, 90, 120, 150, 180
00010596                            ; ===========================================================================
00010596                            
00010596                            LavaM_Main:	; Routine 0
00010596 5428 0024                  		addq.b	#2,obRoutine(a0)
0001059A 1028 0028                  		move.b	obSubtype(a0),d0
0001059E E848                       		lsr.w	#4,d0
000105A0 0240 000F                  		andi.w	#$F,d0
000105A4 117B 00EA 001F             		move.b	LavaM_Rates(pc,d0.w),obDelayAni(a0)
000105AA 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; set time delay for lava balls
000105B0 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
000105B6                            
000105B6                            LavaM_MakeLava:	; Routine 2
000105B6 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from time delay
000105BA 6600                       		bne.s	LavaM_Wait	; if time still	remains, branch
000105BC 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset time delay
000105C2 6100 F594                  		bsr.w	ChkObjectVisible
000105C6 6600                       		bne.s	LavaM_Wait
000105C8 6100 F79A                  		bsr.w	FindFreeObj
000105CC 6600                       		bne.s	LavaM_Wait
000105CE 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
000105D2 3368 0008 0008             		move.w	obX(a0),obX(a1)
000105D8 3368 000C 000C             		move.w	obY(a0),obY(a1)
000105DE 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
000105E4                            
000105E4                            	LavaM_Wait:
000105E4 4E75                       		rts	
000105E4 4E75                       		rts	
000105E6                            		include	"_incObj\14 Lava Ball.asm"
000105E6                            ; ---------------------------------------------------------------------------
000105E6                            ; Object 14 - lava balls (MZ, SLZ)
000105E6                            ; ---------------------------------------------------------------------------
000105E6                            
000105E6                            LavaBall:
000105E6 7000                       		moveq	#0,d0
000105E8 1028 0024                  		move.b	obRoutine(a0),d0
000105EC 323B 0000                  		move.w	LBall_Index(pc,d0.w),d1
000105F0 4EBB 1000                  		jsr	LBall_Index(pc,d1.w)
000105F4 6000 F1D4                  		bra.w	DisplaySprite
000105F8                            ; ===========================================================================
000105F8 0000                       LBall_Index:	dc.w LBall_Main-LBall_Index
000105FA 0000                       		dc.w LBall_Action-LBall_Index
000105FC 0000                       		dc.w LBall_Delete-LBall_Index
000105FE                            
000105FE FC00 FB00 FA00 F900 FE00   LBall_Speeds:	dc.w -$400, -$500, -$600, -$700, -$200
00010608 0200 FE00 0200 0000        		dc.w $200, -$200, $200,	0
00010610                            ; ===========================================================================
00010610                            
00010610                            LBall_Main:	; Routine 0
00010610 5428 0024                  		addq.b	#2,obRoutine(a0)
00010614 117C 0008 0016             		move.b	#8,obHeight(a0)
0001061A 117C 0008 0017             		move.b	#8,obWidth(a0)
00010620 217C 0000 D4D2 0004        		move.l	#Map_Fire,obMap(a0)
00010628 317C 0345 0002             		move.w	#$345,obGfx(a0)
0001062E 0C38 0003 FE10             		cmpi.b	#3,(v_zone).w	; check if level is SLZ
00010634 6600                       		bne.s	@notSLZ
00010636 317C 0480 0002             		move.w	#$480,obGfx(a0)	; SLZ specific code
0001063C                            
0001063C                            	@notSLZ:
0001063C 117C 0004 0001             		move.b	#4,obRender(a0)
00010642 317C 0180 0018             		move.w	#$180,obPriority(a0)
00010648 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001064E 3168 000C 0030             		move.w	obY(a0),$30(a0)
00010654 4A28 0029                  		tst.b	$29(a0)
00010658 6700                       		beq.s	@speed
0001065A 5428 0018                  		addq.b	#2,obPriority(a0)
0001065E                            
0001065E                            	@speed:
0001065E 7000                       		moveq	#0,d0
00010660 1028 0028                  		move.b	obSubtype(a0),d0
00010664 D040                       		add.w	d0,d0
00010666 317B 0096 0012             		move.w	LBall_Speeds(pc,d0.w),obVelY(a0) ; load object speed (vertical)
0001066C 117C 0008 0014             		move.b	#8,obActWid(a0)
00010672 0C28 0006 0028             		cmpi.b	#6,obSubtype(a0) ; is object type below $6 ?
00010678 6500                       		bcs.s	@sound		; if yes, branch
0001067A                            
0001067A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010680 117C 0002 001C             		move.b	#2,obAnim(a0)	; use horizontal animation
00010686 3168 0012 0010             		move.w	obVelY(a0),obVelX(a0) ; set horizontal speed
0001068C 317C 0000 0012             		move.w	#0,obVelY(a0)	; delete vertical speed
00010692                            
00010692                            	@sound:
0001069C                            
0001069C                            LBall_Action:	; Routine 2
0001069C 7000                       		moveq	#0,d0
0001069E 1028 0028                  		move.b	obSubtype(a0),d0
000106A2 D040                       		add.w	d0,d0
000106A4 323B 0000                  		move.w	LBall_TypeIndex(pc,d0.w),d1
000106A8 4EBB 1000                  		jsr	LBall_TypeIndex(pc,d1.w)
000106AC 6100 F108                  		bsr.w	SpeedToPos
000106B0 43F9 0000 0000             		lea	(Ani_Fire).l,a1
000106B6 6100 C1C8                  		bsr.w	AnimateSprite
000106BA                            
000106BA                            LBall_ChkDel:
000106D8 4E75                       		rts	
000106DA                            ; ===========================================================================
000106DA 0000 0000                  LBall_TypeIndex:dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
000106DE 0000 0000                  		dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
000106E2 0000 0000                  		dc.w LBall_Type04-LBall_TypeIndex, LBall_Type05-LBall_TypeIndex
000106E6 0000 0000                  		dc.w LBall_Type06-LBall_TypeIndex, LBall_Type07-LBall_TypeIndex
000106EA 0000                       		dc.w LBall_Type08-LBall_TypeIndex
000106EC                            ; ===========================================================================
000106EC                            ; lavaball types 00-03 fly up and fall back down
000106EC                            
000106EC                            LBall_Type00:
000106EC 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's downward speed
000106F2 3028 0030                  		move.w	$30(a0),d0
000106F6 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen back to its	original position?
000106FA 6400                       		bcc.s	loc_E41E	; if not, branch
000106FC 5428 0024                  		addq.b	#2,obRoutine(a0)	; goto "LBall_Delete" routine
00010700                            
00010700                            loc_E41E:
00010700 08A8 0001 0022             		bclr	#1,obStatus(a0)
00010706 4A68 0012                  		tst.w	obVelY(a0)
0001070A 6A00                       		bpl.s	locret_E430
0001070C 08E8 0001 0022             		bset	#1,obStatus(a0)
00010712                            
00010712                            locret_E430:
00010712 4E75                       		rts	
00010714                            ; ===========================================================================
00010714                            ; lavaball type	04 flies up until it hits the ceiling
00010714                            
00010714                            LBall_Type04:
00010714 08E8 0001 0022             		bset	#1,obStatus(a0)
0001071A 4EB9 0000 0000             		jsr	ObjHitCeiling
00010720 4A41                       		tst.w	d1
00010722 6A00                       		bpl.s	locret_E452
00010724 117C 0008 0028             		move.b	#8,obSubtype(a0)
0001072A 117C 0001 001C             		move.b	#1,obAnim(a0)
00010730 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the ceiling
00010736                            
00010736                            locret_E452:
00010736 4E75                       		rts	
00010738                            ; ===========================================================================
00010738                            ; lavaball type	05 falls down until it hits the	floor
00010738                            
00010738                            LBall_Type05:
00010738 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001073E 4EB9 0000 0000             		jsr	ObjFloorDist
00010744 4A41                       		tst.w	d1
00010746 6A00                       		bpl.s	locret_E474
00010748 117C 0008 0028             		move.b	#8,obSubtype(a0)
0001074E 117C 0001 001C             		move.b	#1,obAnim(a0)
00010754 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the floor
0001075A                            
0001075A                            locret_E474:
0001075A 4E75                       		rts	
0001075C                            ; ===========================================================================
0001075C                            ; lavaball types 06-07 move sideways
0001075C                            
0001075C                            LBall_Type06:
0001075C 08E8 0000 0022             		bset	#0,obStatus(a0)
00010762 76F8                       		moveq	#-8,d3
00010764 4EB9 0000 0000             		jsr	ObjHitWallLeft
0001076A 4A41                       		tst.w	d1
0001076C 6A00                       		bpl.s	locret_E498
0001076E 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010774 117C 0003 001C             		move.b	#3,obAnim(a0)
0001077A 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
00010780                            
00010780                            locret_E498:
00010780 4E75                       		rts	
00010782                            ; ===========================================================================
00010782                            
00010782                            LBall_Type07:
00010782 08A8 0000 0022             		bclr	#0,obStatus(a0)
00010788 7608                       		moveq	#8,d3
0001078A 4EB9 0000 0000             		jsr	ObjHitWallRight
00010790 4A41                       		tst.w	d1
00010792 6A00                       		bpl.s	locret_E4BC
00010794 117C 0008 0028             		move.b	#8,obSubtype(a0)
0001079A 117C 0003 001C             		move.b	#3,obAnim(a0)
000107A0 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
000107A6                            
000107A6                            locret_E4BC:
000107A6 4E75                       		rts	
000107A8                            ; ===========================================================================
000107A8                            
000107A8                            LBall_Type08:
000107A8 4E75                       		rts	
000107AA                            ; ===========================================================================
000107AA                            
000107AA                            LBall_Delete:
000107AA 6000 F05E                  		bra.w	DeleteObject
000107AA 6000 F05E                  		bra.w	DeleteObject
000107AE                            		include	"_anim\Fireballs.asm"
000107AE                            ; ---------------------------------------------------------------------------
000107AE                            ; Animation script - lava balls
000107AE                            ; ---------------------------------------------------------------------------
000107AE 0000                       Ani_Fire:	dc.w @vertical-Ani_Fire
000107B0 0000                       		dc.w @vertcollide-Ani_Fire
000107B2 0000                       		dc.w @horizontal-Ani_Fire
000107B4 0000                       		dc.w @horicollide-Ani_Fire
000107B6 0500 2001 21FF             @vertical:	dc.b 5,	0, $20,	1, $21,	afEnd
000107BC 0502 FC                    @vertcollide:	dc.b 5,	2, afRoutine
000107C0 00                         		even
000107C0 0503 4304 44FF             @horizontal:	dc.b 5,	3, $43,	4, $44,	afEnd
000107C6 0505 FC                    @horicollide:	dc.b 5,	5, afRoutine
000107CA 00                         		even
000107CA 00                         		even
000107CA                            
000107CA                            		include	"_incObj\6D Flamethrower.asm"
000107CA                            ; ---------------------------------------------------------------------------
000107CA                            ; Object 6D - flame thrower (SBZ)
000107CA                            ; ---------------------------------------------------------------------------
000107CA                            
000107CA                            Flamethrower:
000107CA 7000                       		moveq	#0,d0
000107CC 1028 0024                  		move.b	obRoutine(a0),d0
000107D0 323B 0000                  		move.w	Flame_Index(pc,d0.w),d1
000107D4 4EFB 1000                  		jmp	Flame_Index(pc,d1.w)
000107D8                            ; ===========================================================================
000107D8 0000                       Flame_Index:	dc.w Flame_Main-Flame_Index
000107DA 0000                       		dc.w Flame_Action-Flame_Index
000107DC                            ; ===========================================================================
000107DC                            
000107DC                            Flame_Main:	; Routine 0
000107DC 5428 0024                  		addq.b	#2,obRoutine(a0)
000107E0 217C 0000 0000 0004        		move.l	#Map_Flame,obMap(a0)
000107E8 317C 83D9 0002             		move.w	#$83D9,obGfx(a0)
000107EE 0028 0004 0001             		ori.b	#4,obRender(a0)
000107F4 317C 0080 0018             		move.w	#$80,obPriority(a0)
000107FA 3168 000C 0030             		move.w	obY(a0),$30(a0)	; store obY (gets overwritten later though)
00010800 117C 000C 0014             		move.b	#$C,obActWid(a0)
00010806 1028 0028                  		move.b	obSubtype(a0),d0
0001080A 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0001080E D040                       		add.w	d0,d0		; multiply by 2
00010810 3140 0030                  		move.w	d0,$30(a0)
00010814 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
00010818 1028 0028                  		move.b	obSubtype(a0),d0
0001081C 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
00010820 EB48                       		lsl.w	#5,d0		; multiply by $20
00010822 3140 0034                  		move.w	d0,$34(a0)	; set pause time
00010826 117C 000A 0036             		move.b	#$A,$36(a0)
0001082C 0828 0001 0022             		btst	#1,obStatus(a0)
00010832 6700                       		beq.s	Flame_Action
00010834 117C 0002 001C             		move.b	#2,obAnim(a0)
0001083A 117C 0015 0036             		move.b	#$15,$36(a0)
00010840                            
00010840                            Flame_Action:	; Routine 2
00010840 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00010844 6A00                       		bpl.s	loc_E57A	; if time remains, branch
00010846 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0001084C 0868 0000 001C             		bchg	#0,obAnim(a0)
00010852 6700                       		beq.s	loc_E57A
00010854 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
00010864                            
00010864                            loc_E57A:
00010864 43F9 0000 0000             		lea	(Ani_Flame).l,a1
0001086A 6100 C014                  		bsr.w	AnimateSprite
0001086E 117C 0000 0020             		move.b	#0,obColType(a0)
00010874 1028 0036                  		move.b	$36(a0),d0
00010878 B028 001A                  		cmp.b	obFrame(a0),d0
0001087C 6600                       		bne.s	Flame_ChkDel
0001087E 117C 00A3 0020             		move.b	#$A3,obColType(a0)
00010884                            
00010884                            Flame_ChkDel:
000108A2 6000 EF26                  		bra.w	DisplaySprite
000108A2 6000 EF26                  		bra.w	DisplaySprite
000108A6                            		include	"_anim\Flamethrower.asm"
000108A6                            ; ---------------------------------------------------------------------------
000108A6                            ; Animation script - flamethrower (SBZ)
000108A6                            ; ---------------------------------------------------------------------------
000108A6 0000                       Ani_Flame:	dc.w @pipe1-Ani_Flame
000108A8 0000                       		dc.w @pipe2-Ani_Flame
000108AA 0000                       		dc.w @valve1-Ani_Flame
000108AC 0000                       		dc.w @valve2-Ani_Flame
000108AE 0300 0102 0304 0506 0708+  @pipe1:		dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, afBack, 2
000108BC 0009 0705 0301 00FE 01     @pipe2:		dc.b 0,	9, 7, 5, 3, 1, 0, afBack, 1
000108C6 00                         		even
000108C6 030B 0C0D 0E0F 1011 1213+  @valve1:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, afBack, 2
000108D4 0014 1211 0F0D 0BFE 01     @valve2:	dc.b 0,	$14, $12, $11, $F, $D, $B, afBack, 1
000108DE 00                         		even
000108DE 00                         		even
000108DE                            Map_Flame:	include	"_maps\Flamethrower.asm"
000108DE                            ; ---------------------------------------------------------------------------
000108DE                            ; Sprite mappings - flame thrower (SBZ)
000108DE                            ; ---------------------------------------------------------------------------
000108DE                            Map_Flame_internal:
000108DE 0000                       		dc.w @pipe1-Map_Flame_internal
000108E0 0000                       		dc.w @pipe2-Map_Flame_internal
000108E2 0000                       		dc.w @pipe3-Map_Flame_internal
000108E4 0000                       		dc.w @pipe4-Map_Flame_internal
000108E6 0000                       		dc.w @pipe5-Map_Flame_internal
000108E8 0000                       		dc.w @pipe6-Map_Flame_internal
000108EA 0000                       		dc.w @pipe7-Map_Flame_internal
000108EC 0000                       		dc.w @pipe8-Map_Flame_internal
000108EE 0000                       		dc.w @pipe9-Map_Flame_internal
000108F0 0000                       		dc.w @pipe10-Map_Flame_internal
000108F2 0000                       		dc.w @pipe11-Map_Flame_internal
000108F4 0000                       		dc.w @valve1-Map_Flame_internal
000108F6 0000                       		dc.w @valve2-Map_Flame_internal
000108F8 0000                       		dc.w @valve3-Map_Flame_internal
000108FA 0000                       		dc.w @valve4-Map_Flame_internal
000108FC 0000                       		dc.w @valve5-Map_Flame_internal
000108FE 0000                       		dc.w @valve6-Map_Flame_internal
00010900 0000                       		dc.w @valve7-Map_Flame_internal
00010902 0000                       		dc.w @valve8-Map_Flame_internal
00010904 0000                       		dc.w @valve9-Map_Flame_internal
00010906 0000                       		dc.w @valve10-Map_Flame_internal
00010908 0000                       		dc.w @valve11-Map_Flame_internal
0001090A 01                         @pipe1:		dc.b 1
0001090B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB ; broken pipe style flamethrower
00010910 02                         @pipe2:		dc.b 2
00010911 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010916 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001091B 02                         @pipe3:		dc.b 2
0001091C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010921 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010926 03                         @pipe4:		dc.b 3
00010927 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001092C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010931 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010936 03                         @pipe5:		dc.b 3
00010937 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001093C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010941 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010946 04                         @pipe6:		dc.b 4
00010947 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001094C 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010951 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010956 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001095B 04                         @pipe7:		dc.b 4
0001095C 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010961 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010966 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001096B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010970 05                         @pipe8:		dc.b 5
00010971 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010976 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001097B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010980 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010985 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001098A 05                         @pipe9:		dc.b 5
0001098B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010990 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010995 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001099A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001099F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109A4 06                         @pipe10:	dc.b 6
000109A5 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
000109AA F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
000109AF 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000109B4 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
000109B9 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000109BE 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109C3 06                         @pipe11:	dc.b 6
000109C4 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
000109C9 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000109CE 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
000109D3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000109D8 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000109DD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109E2 01                         @valve1:	dc.b 1
000109E3 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9 ; valve style flamethrower
000109E8 02                         @valve2:	dc.b 2
000109E9 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000109EE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000109F3 02                         @valve3:	dc.b 2
000109F4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000109F9 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000109FE 03                         @valve4:	dc.b 3
000109FF 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010A04 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A09 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A0E 03                         @valve5:	dc.b 3
00010A0F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010A14 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A19 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A1E 04                         @valve6:	dc.b 4
00010A1F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010A24 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010A29 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A2E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A33 04                         @valve7:	dc.b 4
00010A34 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010A39 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010A3E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A43 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A48 05                         @valve8:	dc.b 5
00010A49 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010A4E 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010A53 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010A58 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A5D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A62 05                         @valve9:	dc.b 5
00010A63 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010A68 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010A6D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010A72 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A77 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A7C 06                         @valve10:	dc.b 6
00010A7D E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010A82 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010A87 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010A8C 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010A91 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A96 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A9B 06                         @valve11:	dc.b 6
00010A9C E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010AA1 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010AA6 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010AAB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010AB0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010AB5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010ABA                            		even
00010ABA                            		even
00010ABA                            
00010ABA                            		include	"_incObj\46 MZ Bricks.asm"
00010ABA                            ; ---------------------------------------------------------------------------
00010ABA                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
00010ABA                            ; ---------------------------------------------------------------------------
00010ABA                            
00010ABA                            MarbleBrick:
00010ABA 7000                       		moveq	#0,d0
00010ABC 1028 0024                  		move.b	obRoutine(a0),d0
00010AC0 323B 0000                  		move.w	Brick_Index(pc,d0.w),d1
00010AC4 4EFB 1000                  		jmp	Brick_Index(pc,d1.w)
00010AC8                            ; ===========================================================================
00010AC8 0000                       Brick_Index:	dc.w Brick_Main-Brick_Index
00010ACA 0000                       		dc.w Brick_Action-Brick_Index
00010ACC                            
00010ACC =00000030                  brick_origY:	equ $30
00010ACC                            ; ===========================================================================
00010ACC                            
00010ACC                            Brick_Main:	; Routine 0
00010ACC 5428 0024                  		addq.b	#2,obRoutine(a0)
00010AD0 117C 000F 0016             		move.b	#$F,obHeight(a0)
00010AD6 117C 000F 0017             		move.b	#$F,obWidth(a0)
00010ADC 217C 0000 0000 0004        		move.l	#Map_Brick,obMap(a0)
00010AE4 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00010AEA 117C 0004 0001             		move.b	#4,obRender(a0)
00010AF0 317C 0180 0018             		move.w	#$180,obPriority(a0)
00010AF6 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010AFC 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010B02 317C 05C0 0032             		move.w	#$5C0,$32(a0)
00010B08                            
00010B08                            Brick_Action:	; Routine 2
00010B08 4A28 0001                  		tst.b	obRender(a0)
00010B0C 6A00                       		bpl.s	@chkdel
00010B0E 7000                       		moveq	#0,d0
00010B10 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00010B14 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
00010B18 D040                       		add.w	d0,d0
00010B1A 323B 0000                  		move.w	Brick_TypeIndex(pc,d0.w),d1
00010B1E 4EBB 1000                  		jsr	Brick_TypeIndex(pc,d1.w)
00010B22 323C 001B                  		move.w	#$1B,d1
00010B26 343C 0010                  		move.w	#$10,d2
00010B2A 363C 0011                  		move.w	#$11,d3
00010B2E 3828 0008                  		move.w	obX(a0),d4
00010B32 6100 0000                  		bsr.w	SolidObject
00010B36                            
00010B36                            	@chkdel:
00010B54 6000 EC74                  			bra.w	DisplaySprite
00010B58                            ; ===========================================================================
00010B58 0000                       Brick_TypeIndex:dc.w Brick_Type00-Brick_TypeIndex
00010B5A 0000                       		dc.w Brick_Type01-Brick_TypeIndex
00010B5C 0000                       		dc.w Brick_Type02-Brick_TypeIndex
00010B5E 0000                       		dc.w Brick_Type03-Brick_TypeIndex
00010B60 0000                       		dc.w Brick_Type04-Brick_TypeIndex
00010B62                            ; ===========================================================================
00010B62                            
00010B62                            Brick_Type00:
00010B62 4E75                       		rts	
00010B64                            ; ===========================================================================
00010B64                            
00010B64                            Brick_Type02:
00010B64 3038 D008                  		move.w	(v_player+obX).w,d0
00010B68 9068 0008                  		sub.w	obX(a0),d0
00010B6C 6400                       		bcc.s	loc_E888
00010B6E 4440                       		neg.w	d0
00010B70                            
00010B70                            loc_E888:
00010B70 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00010B74 6400                       		bcc.s	Brick_Type01	; if not, resume wobbling
00010B76 117C 0003 0028             		move.b	#3,obSubtype(a0)	; if yes, make the block fall
00010B7C                            
00010B7C                            Brick_Type01:
00010B7C 7000                       		moveq	#0,d0
00010B7E 1038 FE74                  		move.b	(v_oscillate+$16).w,d0
00010B82 0828 0003 0028             		btst	#3,obSubtype(a0)
00010B88 6700                       		beq.s	loc_E8A8
00010B8A 4440                       		neg.w	d0
00010B8C 0640 0010                  		addi.w	#$10,d0
00010B90                            
00010B90                            loc_E8A8:
00010B90 3228 0030                  		move.w	brick_origY(a0),d1
00010B94 9240                       		sub.w	d0,d1
00010B96 3141 000C                  		move.w	d1,obY(a0)	; update the block's position to make it wobble
00010B9A 4E75                       		rts	
00010B9C                            ; ===========================================================================
00010B9C                            
00010B9C                            Brick_Type03:
00010B9C 6100 EC18                  		bsr.w	SpeedToPos
00010BA0 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase falling speed
00010BA6 6100 0000                  		bsr.w	ObjFloorDist
00010BAA 4A41                       		tst.w	d1		; has the block	hit the	floor?
00010BAC 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
00010BB0 D368 000C                  		add.w	d1,obY(a0)
00010BB4 4268 0012                  		clr.w	obVelY(a0)	; stop the block falling
00010BB8 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010BBE 117C 0004 0028             		move.b	#4,obSubtype(a0)
00010BC4 3011                       		move.w	(a1),d0
00010BC6 0240 03FF                  		andi.w	#$3FF,d0
00010BCA 0C40 016A                  			cmpi.w	#$16A,d0
00010BCE 6400                       		bcc.s	locret_E8EE
00010BD0 117C 0000 0028             		move.b	#0,obSubtype(a0)
00010BD6                            
00010BD6                            locret_E8EE:
00010BD6 4E75                       		rts	
00010BD8                            ; ===========================================================================
00010BD8                            
00010BD8                            Brick_Type04:
00010BD8 7000                       		moveq	#0,d0
00010BDA 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
00010BDE E648                       		lsr.w	#3,d0
00010BE0 3228 0030                  		move.w	brick_origY(a0),d1
00010BE4 9240                       		sub.w	d0,d1
00010BE6 3141 000C                  		move.w	d1,obY(a0)	; make the block wobble
00010BEA 4E75                       		rts	
00010BEA 4E75                       		rts	
00010BEC                            Map_Brick:	include	"_maps\MZ Bricks.asm"
00010BEC                            ; ---------------------------------------------------------------------------
00010BEC                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
00010BEC                            ; ---------------------------------------------------------------------------
00010BEC                            Map_Brick_internal:
00010BEC 0000                       		dc.w @brick-Map_Brick_internal
00010BEE 01                         @brick:		dc.b 1
00010BEF F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
00010BF4                            		even
00010BF4                            		even
00010BF4                            
00010BF4                            		include	"_incObj\12 Light.asm"
00010BF4                            ; ---------------------------------------------------------------------------
00010BF4                            ; Object 12 - lamp (SYZ)
00010BF4                            ; ---------------------------------------------------------------------------
00010BF4                            
00010BF4                            SpinningLight:
00010BF4 7000                       		moveq	#0,d0
00010BF6 1028 0024                  		move.b	obRoutine(a0),d0
00010BFA 323B 0000                  		move.w	Light_Index(pc,d0.w),d1
00010BFE 4EFB 1000                  		jmp	Light_Index(pc,d1.w)
00010C02                            ; ===========================================================================
00010C02 0000                       Light_Index:	dc.w Light_Main-Light_Index
00010C04 0000                       		dc.w Light_Animate-Light_Index
00010C06                            ; ===========================================================================
00010C06                            
00010C06                            Light_Main:	; Routine 0
00010C06 5428 0024                  		addq.b	#2,obRoutine(a0)
00010C0A 217C 0000 0000 0004        		move.l	#Map_Light,obMap(a0)
00010C12 317C 0000 0002             		move.w	#0,obGfx(a0)
00010C18 117C 0004 0001             		move.b	#4,obRender(a0)
00010C1E 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010C24 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010C2A                            
00010C2A                            Light_Animate:	; Routine 2
00010C2A 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00010C2E 6A00                       		bpl.s	@chkdel
00010C30 117C 000C 001E             		move.b	#12,obTimeFrame(a0)
00010C36 5228 001A                  		addq.b	#1,obFrame(a0)
00010C3A 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
00010C40 6500                       		bcs.s	@chkdel
00010C42 117C 0000 001A             		move.b	#0,obFrame(a0)
00010C48                            
00010C48                            	@chkdel:
00010C66 6000 EB62                  		bra.w	DisplaySprite
00010C66 6000 EB62                  		bra.w	DisplaySprite
00010C6A                            Map_Light	include	"_maps\Light.asm"
00010C6A                            ; --------------------------------------------------------------------------------
00010C6A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010C6A                            ; --------------------------------------------------------------------------------
00010C6A                            
00010C6A                            SME_FBl1X:	
00010C6A 0000 0000                  		dc.w SME_FBl1X_8-SME_FBl1X, SME_FBl1X_22-SME_FBl1X	
00010C6E 0000 0000                  		dc.w SME_FBl1X_3C-SME_FBl1X, SME_FBl1X_5B-SME_FBl1X	
00010C72 05                         SME_FBl1X_8:	dc.b 5	
00010C73 E004 006D 00               		dc.b $E0, 4, 0, $6D, 0	
00010C78 E80C 006F F8               		dc.b $E8, $C, 0, $6F, $F8	
00010C7D F00C 0073 F8               		dc.b $F0, $C, 0, $73, $F8	
00010C82 F800 0090 00               		dc.b $F8, 0, 0, $90, 0	
00010C87 F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010C8C 05                         SME_FBl1X_22:	dc.b 5	
00010C8D E004 0077 00               		dc.b $E0, 4, 0, $77, 0	
00010C92 E804 0079 00               		dc.b $E8, 4, 0, $79, 0	
00010C97 E800 007B 10               		dc.b $E8, 0, 0, $7B, $10	
00010C9C F008 007C F8               		dc.b $F0, 8, 0, $7C, $F8	
00010CA1 F804 0091 00               		dc.b $F8, 4, 0, $91, 0	
00010CA6 06                         SME_FBl1X_3C:	dc.b 6	
00010CA7 E000 007F 00               		dc.b $E0, 0, 0, $7F, 0	
00010CAC E000 0078 08               		dc.b $E0, 0, 0, $78, 8	
00010CB1 E80C 0080 F8               		dc.b $E8, $C, 0, $80, $F8	
00010CB6 F00C 0084 F8               		dc.b $F0, $C, 0, $84, $F8	
00010CBB F800 0093 08               		dc.b $F8, 0, 0, $93, 8	
00010CC0 F800 0091 00               		dc.b $F8, 0, 0, $91, 0	
00010CC5 05                         SME_FBl1X_5B:	dc.b 5	
00010CC6 E004 0088 00               		dc.b $E0, 4, 0, $88, 0	
00010CCB E808 008A F8               		dc.b $E8, 8, 0, $8A, $F8	
00010CD0 F008 008D 00               		dc.b $F0, 8, 0, $8D, 0	
00010CD5 F800 0094 00               		dc.b $F8, 0, 0, $94, 0	
00010CDA F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010CE0 00                         		even
00010CE0 00                         		even
00010CE0                            		include	"_incObj\47 Bumper.asm"
00010CE0                            ; ---------------------------------------------------------------------------
00010CE0                            ; Object 47 - pinball bumper (SYZ)
00010CE0                            ; ---------------------------------------------------------------------------
00010CE0                            
00010CE0                            Bumper:
00010CE0 7000                       		moveq	#0,d0
00010CE2 1028 0024                  		move.b	obRoutine(a0),d0
00010CE6 323B 0000                  		move.w	Bump_Index(pc,d0.w),d1
00010CEA 4EFB 1000                  		jmp	Bump_Index(pc,d1.w)
00010CEE                            ; ===========================================================================
00010CEE 0000                       Bump_Index:	dc.w Bump_Main-Bump_Index
00010CF0 0000                       		dc.w Bump_Hit-Bump_Index
00010CF2                            ; ===========================================================================
00010CF2                            
00010CF2                            Bump_Main:	; Routine 0
00010CF2 5428 0024                  		addq.b	#2,obRoutine(a0)
00010CF6 217C 0000 0000 0004        		move.l	#Map_Bump,obMap(a0)
00010CFE 317C 0380 0002             		move.w	#$380,obGfx(a0)
00010D04 117C 0004 0001             		move.b	#4,obRender(a0)
00010D0A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010D10 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010D16 117C 00D7 0020             		move.b	#$D7,obColType(a0)
00010D1C                            
00010D1C                            Bump_Hit:	; Routine 2
00010D1C 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	bumper?
00010D20 6700 0000                  		beq.w	@display	; if not, branch
00010D24 4228 0021                  		clr.b	obColProp(a0)
00010D28 43F8 D000                  		lea	(v_player).w,a1
00010D2C 3228 0008                  		move.w	obX(a0),d1
00010D30 3428 000C                  		move.w	obY(a0),d2
00010D34 9269 0008                  		sub.w	obX(a1),d1
00010D38 9469 000C                  		sub.w	obY(a1),d2
00010D3C 4EB9 0000 3F5C             		jsr	(CalcAngle).l
00010D42 4EB9 0000 3CCA             		jsr	(CalcSine).l
00010D48 C3FC F900                  		muls.w	#-$700,d1
00010D4C E081                       		asr.l	#8,d1
00010D4E 3341 0010                  		move.w	d1,obVelX(a1)	; bounce Sonic away
00010D52 C1FC F900                  		muls.w	#-$700,d0
00010D56 E080                       		asr.l	#8,d0
00010D58 3340 0012                  		move.w	d0,obVelY(a1)	; bounce Sonic away
00010D5C 08E9 0001 0022             		bset	#1,obStatus(a1)
00010D62 08A9 0004 0022             		bclr	#4,obStatus(a1)
00010D68 08A9 0005 0022             		bclr	#5,obStatus(a1)
00010D6E 4229 003C                  		clr.b	$3C(a1)
00010D72 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "hit" animation
00010D82 45F8 FC00                  		lea	(v_objstate).w,a2
00010D86 7000                       		moveq	#0,d0
00010D88 1028 0023                  		move.b	obRespawnNo(a0),d0
00010D8C 6700                       		beq.s	@addscore
00010D8E 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit 10 times?
00010D94 6400                       		bcc.s	@display	; if yes, Sonic	gets no	points
00010D96 5232 0002                  		addq.b	#1,2(a2,d0.w)
00010D9A                            
00010D9A                            	@addscore:
00010D9A 7001                       		moveq	#1,d0
00010D9C 4EB9 0000 0000             		jsr	(AddPoints).l	; add 10 to score
00010DA2 6100 EFC0                  		bsr.w	FindFreeObj
00010DA6 6600                       		bne.s	@display
00010DA8 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00010DAC 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010DB2 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010DB8 137C 0004 001A             		move.b	#4,obFrame(a1)
00010DBE                            
00010DBE                            	@display:
00010DBE 43F9 0000 0000             		lea	(Ani_Bump).l,a1
00010DC4 6100 BABA                  		bsr.w	AnimateSprite
00010DE4 6000 E9E4                  		bra.w	DisplaySprite
00010DE8                            ; ===========================================================================
00010DE8                            
00010DE8                            @resetcount:
00010DE8 45F8 FC00                  		lea	(v_objstate).w,a2
00010DEC 7000                       		moveq	#0,d0
00010DEE 1028 0023                  		move.b	obRespawnNo(a0),d0
00010DF2 6700                       		beq.s	@delete
00010DF4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010DFA                            
00010DFA                            	@delete:
00010DFA 6000 EA0E                  		bra.w	DeleteObject
00010DFA 6000 EA0E                  		bra.w	DeleteObject
00010DFE                            		include	"_anim\Bumper.asm"
00010DFE                            ; ---------------------------------------------------------------------------
00010DFE                            ; Animation script - flamethrower (SBZ)
00010DFE                            ; ---------------------------------------------------------------------------
00010DFE 0000                       Ani_Bump:	dc.w byte_EAF4-Ani_Bump
00010E00 0000                       		dc.w byte_EAF8-Ani_Bump
00010E02 0F00 FF                    byte_EAF4:	dc.b $F, 0, afEnd
00010E06 00                         		even
00010E06 0301 0201 02FD 00          byte_EAF8:	dc.b 3,	1, 2, 1, 2, afChange, 0
00010E0E 00                         		even
00010E0E 00                         		even
00010E0E                            Map_Bump:	include	"_maps\Bumper.asm"
00010E0E                            ; ---------------------------------------------------------------------------
00010E0E                            ; Sprite mappings - pinball bumper (SYZ)
00010E0E                            ; ---------------------------------------------------------------------------
00010E0E                            Map_Bump_internal:
00010E0E 0000                       		dc.w @normal-Map_Bump_internal
00010E10 0000                       		dc.w @bumped1-Map_Bump_internal
00010E12 0000                       		dc.w @bumped2-Map_Bump_internal
00010E14 02                         @normal:	dc.b 2
00010E15 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
00010E1A F007 0800 00               		dc.b $F0, 7, 8,	0, 0
00010E1F 02                         @bumped1:	dc.b 2
00010E20 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
00010E25 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
00010E2A 02                         @bumped2:	dc.b 2
00010E2B F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
00010E30 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
00010E36 00                         		even
00010E36 00                         		even
00010E36                            
00010E36                            		include	"_incObj\0D Signpost.asm" ; includes "GotThroughAct" subroutine
00010E36                            ; ---------------------------------------------------------------------------
00010E36                            ; Object 0D - signpost at the end of a level
00010E36                            ; ---------------------------------------------------------------------------
00010E36                            
00010E36                            Signpost:
00010E36 7000                       		moveq	#0,d0
00010E38 1028 0024                  		move.b	obRoutine(a0),d0
00010E3C 323B 0000                  		move.w	Sign_Index(pc,d0.w),d1
00010E40 4EBB 1000                  		jsr	Sign_Index(pc,d1.w)
00010E44 43F9 0000 0000             		lea	(Ani_Sign).l,a1
00010E4A 6100 BA34                  		bsr.w	AnimateSprite
00010E4E 6100 E97A                  		bsr.w	DisplaySprite
00010E70 4E75                       		rts	
00010E72                            ; ===========================================================================
00010E72 0000                       Sign_Index:	dc.w Sign_Main-Sign_Index
00010E74 0000                       		dc.w Sign_Touch-Sign_Index
00010E76 0000                       		dc.w Sign_Spin-Sign_Index
00010E78 0000                       		dc.w Sign_SonicRun-Sign_Index
00010E7A 0000                       		dc.w Sign_Exit-Sign_Index
00010E7C                            
00010E7C =00000030                  spintime:	equ $30		; time for signpost to spin
00010E7C =00000032                  sparkletime:	equ $32		; time between sparkles
00010E7C =00000034                  sparkle_id:	equ $34		; counter to keep track of sparkles
00010E7C                            ; ===========================================================================
00010E7C                            
00010E7C                            Sign_Main:	; Routine 0
00010E7C 5428 0024                  		addq.b	#2,obRoutine(a0)
00010E80 217C 0000 0000 0004        		move.l	#Map_Sign,obMap(a0)
00010E88 317C 0680 0002             		move.w	#$680,obGfx(a0)
00010E8E 117C 0004 0001             		move.b	#4,obRender(a0)
00010E94 117C 0018 0014             		move.b	#$18,obActWid(a0)
00010E9A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010EA0                            
00010EA0                            Sign_Touch:	; Routine 2
00010EA0 3038 D008                  		move.w	(v_player+obX).w,d0
00010EA4 9068 0008                  		sub.w	obX(a0),d0
00010EA8 6500                       		bcs.s	@notouch
00010EAA 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00010EAE 6400                       		bcc.s	@notouch	; if not, branch
00010EB0 11FC 0001 F7AA             		move.b  #1,($FFFFF7AA).w ; Lock the screen
00010EC0 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010EC4 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w ; lock screen position
00010ECA 5428 0024                  		addq.b	#2,obRoutine(a0)
00010ECE                            		;cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is level MZ3?
00010ECE                            		;beq.s	@normal
00010ECE                            		;move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010ECE                            
00010ECE                            	@normal:
00010ECE 4A38 F5C3                  		tst.b	(f_emeraldm).w
00010ED2 6700                       		beq.s	@notouch
00010ED4 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
00010EE2                            
00010EE2                            	@notouch:
00010EE2 4E75                       		rts	
00010EE4                            	
00010EE4                            ; ===========================================================================
00010EE4                            
00010EE4                            Sign_Spin:	; Routine 4
00010EE4 4238 FE19                  		clr.b (Super_Sonic_Flag).w ; Revert Sonic to Normal
00010EE8 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w
00010EEE 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w
00010EF4 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w
00010EFA 5368 0030                  		subq.w	#1,spintime(a0)	; subtract 1 from spin time
00010EFE 6A00                       		bpl.s	@chksparkle	; if time remains, branch
00010F00 317C 003C 0030             		move.w	#60,spintime(a0) ; set spin cycle time to 1 second
00010F06 5228 001C                  		addq.b	#1,obAnim(a0)	; next spin cycle
00010F0A 0C28 0003 001C             		cmpi.b	#3,obAnim(a0)	; have 3 spin cycles completed?
00010F10 6600                       		bne.s	@chksparkle	; if not, branch
00010F12 5428 0024                  		addq.b	#2,obRoutine(a0)
00010F16                            
00010F16                            	@chksparkle:
00010F16 5368 0032                  		subq.w	#1,sparkletime(a0) ; subtract 1 from time delay
00010F1A 6A00                       		bpl.s	@fail		; if time remains, branch
00010F1C 317C 000B 0032             		move.w	#$B,sparkletime(a0) ; set time between sparkles to $B frames
00010F22 7000                       		moveq	#0,d0
00010F24 1028 0034                  		move.b	sparkle_id(a0),d0 ; get sparkle id
00010F28 5428 0034                  		addq.b	#2,sparkle_id(a0) ; increment sparkle counter
00010F2C 0228 000E 0034             		andi.b	#$E,sparkle_id(a0)
00010F32 45FB 0000                  		lea	Sign_SparkPos(pc,d0.w),a2 ; load sparkle position data
00010F36 6100 EE2C                  		bsr.w	FindFreeObj
00010F3A 6600                       		bne.s	@fail
00010F3C 12BC 0025                  		move.b	#id_Rings,0(a1)	; load rings object
00010F40 137C 0006 0024             		move.b	#id_Ring_Sparkle,obRoutine(a1) ; jump to ring sparkle subroutine
00010F46 101A                       		move.b	(a2)+,d0
00010F48 4880                       		ext.w	d0
00010F4A D068 0008                  		add.w	obX(a0),d0
00010F4E 3340 0008                  		move.w	d0,obX(a1)
00010F52 101A                       		move.b	(a2)+,d0
00010F54 4880                       		ext.w	d0
00010F56 D068 000C                  		add.w	obY(a0),d0
00010F5A 3340 000C                  		move.w	d0,obY(a1)
00010F5E 237C 0000 BDD2 0004        		move.l	#Map_Ring,obMap(a1)
00010F66 337C 2798 0002             		move.w	#$2798,obGfx(a1)
00010F6C 137C 0004 0001             		move.b	#4,obRender(a1)
00010F72 337C 0100 0018             		move.w	#$100,obPriority(a1)
00010F78 137C 0008 0014             		move.b	#8,obActWid(a1)
00010F7E                            
00010F7E                            	@fail:
00010F7E 4E75                       		rts	
00010F80                            ; ===========================================================================
00010F80 E8F0                       Sign_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00010F82 0808                       		dc.b	8,   8
00010F84 F000                       		dc.b -$10,   0
00010F86 18F8                       		dc.b  $18,  -8
00010F88 00F8                       		dc.b	0,  -8
00010F8A 1000                       		dc.b  $10,   0
00010F8C E808                       		dc.b -$18,   8
00010F8E 1810                       		dc.b  $18, $10
00010F90                            ; ===========================================================================
00010F90                            
00010F90                            Sign_SonicRun:	; Routine 6
00010F90 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00010F94 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
00010F98                            		;move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010F98                            		
00010F98                            
00010F98                            	loc_EC86:
00010F98 5428 0024                  		addq.b	#2,obRoutine(a0)
00010F9C                            
00010F9C                            ; ---------------------------------------------------------------------------
00010F9C                            ; Subroutine to	set up bonuses at the end of an	act
00010F9C                            ; ---------------------------------------------------------------------------
00010F9C                            
00010F9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010F9C                            
00010F9C                            
00010F9C                            GotThroughAct:
00010F9C 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00010FA0 6600                       		bne.s	locret_ECEE
00010FA2 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00010FA8 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00010FAC 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00010FB0 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010FB4 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00010FBA 7000                       		moveq	#plcid_TitleCard,d0
00010FBC 4EB9 0000 176C             		jsr	(NewPLC).l	; load title card patterns
00010FC2 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00010FC8 7000                       		moveq	#0,d0
00010FCA 1038 FE23                  		move.b	(v_timemin).w,d0
00010FCE C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010FD2 7200                       		moveq	#0,d1
00010FD4 1238 FE24                  		move.b	(v_timesec).w,d1
00010FD8 D041                       		add.w	d1,d0		; add up your time
00010FDA 80FC 000F                  		divu.w	#15,d0		; divide by 15
00010FDE 7214                       		moveq	#$14,d1
00010FE0 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010FE2 6500                       		bcs.s	hastimebonus	; if not, branch
00010FE4 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010FE6                            
00010FE6                            	hastimebonus:
00010FE6 D040                       		add.w	d0,d0
00010FE8 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),(v_timebonus).w ; set time bonus
00010FEE 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00010FF2 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00010FF6 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00011004 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
0001100A                            
0001100A                            locret_ECEE:
0001100A 4E75                       		rts	
0001100C                            
0001100C                            ; End of function GotThroughAct
0001100C                            
0001100C                            ; ===========================================================================
0001100C 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00011020 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00011036                            ; ===========================================================================
00011036                            
00011036                            Sign_Exit:	; Routine 8
00011036 4E75                       		rts	
00011038                            
00011038                            ; ---------------------------------------------------------------------------
00011038                            ; Subroutine to	set up bonuses at the end of an	zone
00011038                            ; ---------------------------------------------------------------------------
00011038                            
00011038                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011038                            
00011038                            
00011038                            GotThroughAct1:
00011038 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
0001103C 6600                       		bne.s	locret_ECEE1
0001103E 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00011044 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00011048 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
0001104C 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00011050 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00011056 7000                       		moveq	#plcid_TitleCard,d0
00011058 4EB9 0000 176C             		jsr	(NewPLC).l	; load title card patterns
0001105E 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00011064 7000                       		moveq	#0,d0
00011066 1038 FE23                  		move.b	(v_timemin).w,d0
0001106A C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0001106E 7200                       		moveq	#0,d1
00011070 1238 FE24                  		move.b	(v_timesec).w,d1
00011074 D041                       		add.w	d1,d0		; add up your time
00011076 80FC 000F                  		divu.w	#15,d0		; divide by 15
0001107A 7214                       		moveq	#$14,d1
0001107C B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0001107E 6500 0000                  		bcs.w	hastimebonus2	; if not, branch
00011082 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00011084                            
00011084                            	hastimebonus2:
00011084 D040                       		add.w	d0,d0
00011086 31FB 0000 F7D2             		move.w	TimeBonuses1(pc,d0.w),(v_timebonus).w ; set time bonus
0001108C 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00011090 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00011094 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
000110A2 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
000110A8                            
000110A8                            locret_ECEE1:
000110A8 4E75                       		rts	
000110AA                            
000110AA                            ; End of function GotThroughAct		
000110AA                            
000110AA 1388 1388 03E8 01F4 0190+  TimeBonuses1:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
000110BE 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
000110BE 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
000110D4                            		include	"_anim\Signpost.asm"
000110D4                            ; ---------------------------------------------------------------------------
000110D4                            ; Animation script - signpost
000110D4                            ; ---------------------------------------------------------------------------
000110D4 0000                       Ani_Sign:	dc.w @eggman-Ani_Sign
000110D6 0000                       		dc.w @spin1-Ani_Sign
000110D8 0000                       		dc.w @spin2-Ani_Sign
000110DA 0000                       		dc.w @sonic-Ani_Sign
000110DC 0F00 FF                    @eggman:	dc.b $F, 0, afEnd
000110E0 00                         		even
000110E0 0100 0102 03FF             @spin1:		dc.b 1,	0, 1, 2, 3, afEnd
000110E6 0104 0102 03FF             @spin2:		dc.b 1,	4, 1, 2, 3, afEnd
000110EC 0F04 FF                    @sonic:		dc.b $F, 4, afEnd
000110F0 00                         		even
000110F0 00                         		even
000110F0                            Map_Sign:	include	"_maps\Signpost.asm"
000110F0                            ; --------------------------------------------------------------------------------
000110F0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000110F0                            ; --------------------------------------------------------------------------------
000110F0                            
000110F0                            SME_KvSue:	
000110F0 0000 0000                  		dc.w SME_KvSue_A-SME_KvSue, SME_KvSue_1F-SME_KvSue	
000110F4 0000 0000                  		dc.w SME_KvSue_2F-SME_KvSue, SME_KvSue_3F-SME_KvSue	
000110F8 0000                       		dc.w SME_KvSue_4F-SME_KvSue	
000110FA 04                         SME_KvSue_A:	dc.b 4	
000110FB F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8	
00011100 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0	
00011105 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
0001110A 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
0001110F 03                         SME_KvSue_1F:	dc.b 3	
00011110 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0	
00011115 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
0001111A 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
0001111F 03                         SME_KvSue_2F:	dc.b 3	
00011120 F003 001C FC               		dc.b $F0, 3, 0, $1C, $FC	
00011125 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
0001112A 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
0001112F 03                         SME_KvSue_3F:	dc.b 3	
00011130 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0	
00011135 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
0001113A 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
0001113F 04                         SME_KvSue_4F:	dc.b 4	
00011140 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8	
00011145 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0	
0001114A 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
0001114F 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00011154                            		even
00011154                            		even
00011154                            
00011154                            		include	"_incObj\4C & 4D Lava Geyser Maker.asm"
00011154                            ; ---------------------------------------------------------------------------
00011154                            ; Object 4C - lava geyser / lavafall producer (MZ)
00011154                            ; ---------------------------------------------------------------------------
00011154                            
00011154                            GeyserMaker:
00011154 7000                       		moveq	#0,d0
00011156 1028 0024                  		move.b	obRoutine(a0),d0
0001115A 323B 0000                  		move.w	GMake_Index(pc,d0.w),d1
0001115E 4EBB 1000                  		jsr	GMake_Index(pc,d1.w)
00011162 6000 0000                  		bra.w	Geyser_ChkDel
00011166                            ; ===========================================================================
00011166 0000                       GMake_Index:	dc.w GMake_Main-GMake_Index
00011168 0000                       		dc.w GMake_Wait-GMake_Index
0001116A 0000                       		dc.w GMake_ChkType-GMake_Index
0001116C 0000                       		dc.w GMake_MakeLava-GMake_Index
0001116E 0000                       		dc.w GMake_Display-GMake_Index
00011170 0000                       		dc.w GMake_Delete-GMake_Index
00011172                            
00011172 =00000034                  gmake_time:	equ $34		; time delay (2 bytes)
00011172 =00000032                  gmake_timer:	equ $32		; current time remaining (2 bytes)
00011172 =0000003C                  gmake_parent:	equ $3C		; address of parent object
00011172                            ; ===========================================================================
00011172                            
00011172                            GMake_Main:	; Routine 0
00011172 5428 0024                  		addq.b	#2,obRoutine(a0)
00011176 217C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a0)
0001117E 317C E3A8 0002             		move.w	#$E3A8,obGfx(a0)
00011184 117C 0004 0001             		move.b	#4,obRender(a0)
0001118A 317C 0080 0018             		move.w	#$80,obPriority(a0)
00011190 117C 0038 0014             		move.b	#$38,obActWid(a0)
00011196 317C 0078 0034             		move.w	#120,gmake_time(a0) ; set time delay to 2 seconds
0001119C                            
0001119C                            GMake_Wait:	; Routine 2
0001119C 5368 0032                  		subq.w	#1,gmake_timer(a0) ; decrement timer
000111A0 6A00                       		bpl.s	@cancel		; if time remains, branch
000111A2                            
000111A2 3168 0034 0032             		move.w	gmake_time(a0),gmake_timer(a0) ; reset timer
000111A8 3038 D00C                  		move.w	(v_player+obY).w,d0
000111AC 3228 000C                  		move.w	obY(a0),d1
000111B0 B041                       		cmp.w	d1,d0
000111B2 6400                       		bcc.s	@cancel
000111B4 0441 0170                  		subi.w	#$170,d1
000111B8 B041                       		cmp.w	d1,d0
000111BA 6500                       		bcs.s	@cancel
000111BC 5428 0024                  		addq.b	#2,obRoutine(a0) ; if Sonic is within range, goto GMake_ChkType
000111C0                            
000111C0                            	@cancel:
000111C0 4E75                       		rts	
000111C2                            ; ===========================================================================
000111C2                            
000111C2                            GMake_MakeLava:	; Routine 6
000111C2 5428 0024                  		addq.b	#2,obRoutine(a0)
000111C6 6100 EBB2                  		bsr.w	FindNextFreeObj
000111CA 6600                       		bne.s	@fail
000111CC 12BC 004D                  		move.b	#id_LavaGeyser,0(a1) ; load lavafall object
000111D0 3368 0008 0008             		move.w	obX(a0),obX(a1)
000111D6 3368 000C 000C             		move.w	obY(a0),obY(a1)
000111DC 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
000111E2 2348 003C                  		move.l	a0,gmake_parent(a1)
000111E6                            
000111E6                            	@fail:
000111E6 117C 0001 001C             		move.b	#1,obAnim(a0)
000111EC 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 0 (geyser) ?
000111F0 6700                       		beq.s	@isgeyser	; if yes, branch
000111F2 117C 0004 001C             		move.b	#4,obAnim(a0)
000111F8 6000                       		bra.s	GMake_Display
000111FA                            ; ===========================================================================
000111FA                            
000111FA                            	@isgeyser:
000111FA 2268 003C                  		movea.l	gmake_parent(a0),a1 ; get parent object address
000111FE 08E9 0001 0022             		bset	#1,obStatus(a1)
00011204 337C FA80 0012             		move.w	#-$580,obVelY(a1)
0001120A 6000                       		bra.s	GMake_Display
0001120C                            ; ===========================================================================
0001120C                            
0001120C                            GMake_ChkType:	; Routine 4
0001120C 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 (geyser) ?
00011210 6700                       		beq.s	GMake_Display	; if yes, branch
00011212 5428 0024                  		addq.b	#2,obRoutine(a0)
00011216 4E75                       		rts	
00011218                            ; ===========================================================================
00011218                            
00011218                            GMake_Display:	; Routine 8
00011218 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
0001121E 6100 B660                  		bsr.w	AnimateSprite
00011222 6100 E5A6                  		bsr.w	DisplaySprite
00011226 4E75                       		rts	
00011228                            ; ===========================================================================
00011228                            
00011228                            GMake_Delete:	; Routine $A
00011228 117C 0000 001C             		move.b	#0,obAnim(a0)
0001122E 117C 0002 0024             		move.b	#2,obRoutine(a0)
00011234 4A28 0028                  		tst.b	obSubtype(a0)
00011238 6700 E5D0                  		beq.w	DeleteObject
0001123C 4E75                       		rts	
0001123E                            
0001123E                            
0001123E                            ; ---------------------------------------------------------------------------
0001123E                            ; Object 4D - lava geyser / lavafall (MZ)
0001123E                            ; ---------------------------------------------------------------------------
0001123E                            
0001123E                            LavaGeyser:
0001123E 7000                       		moveq	#0,d0
00011240 1028 0024                  		move.b	obRoutine(a0),d0
00011244 323B 0000                  		move.w	Geyser_Index(pc,d0.w),d1
00011248 4EBB 1000                  		jsr	Geyser_Index(pc,d1.w)
0001124C 6000 E57C                  		bra.w	DisplaySprite
00011250                            ; ===========================================================================
00011250 0000                       Geyser_Index:	dc.w Geyser_Main-Geyser_Index
00011252 0000                       		dc.w Geyser_Action-Geyser_Index
00011254 0000                       		dc.w loc_EFFC-Geyser_Index
00011256 0000                       		dc.w Geyser_Delete-Geyser_Index
00011258                            
00011258 FB00 0000                  Geyser_Speeds:	dc.w $FB00, 0
0001125C                            ; ===========================================================================
0001125C                            
0001125C                            Geyser_Main:	; Routine 0
0001125C 5428 0024                  		addq.b	#2,obRoutine(a0)
00011260 3168 000C 0030             		move.w	obY(a0),$30(a0)
00011266 4A28 0028                  		tst.b	obSubtype(a0)
0001126A 6700                       		beq.s	@isgeyser
0001126C 0468 0250 000C             		subi.w	#$250,obY(a0)
00011272                            
00011272                            	@isgeyser:
00011272 7000                       		moveq	#0,d0
00011274 1028 0028                  		move.b	obSubtype(a0),d0
00011278 D040                       		add.w	d0,d0
0001127A 317B 00DC 0012             		move.w	Geyser_Speeds(pc,d0.w),obVelY(a0)
00011280 2248                       		movea.l	a0,a1
00011282 7201                       		moveq	#1,d1
00011284 6100                       		bsr.s	@makelava
00011286 6000                       		bra.s	@activate
00011288                            ; ===========================================================================
00011288                            
00011288                            	@loop:
00011288 6100 EAF0                  		bsr.w	FindNextFreeObj
0001128C 6600                       		bne.s	@fail
0001128E                            
0001128E                            @makelava:
0001128E 12BC 004D                  		move.b	#id_LavaGeyser,0(a1)
00011292 237C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a1)
0001129A 337C 63A8 0002             		move.w	#$63A8,obGfx(a1)
000112A0 137C 0004 0001             		move.b	#4,obRender(a1)
000112A6 137C 0020 0014             		move.b	#$20,obActWid(a1)
000112AC 3368 0008 0008             		move.w	obX(a0),obX(a1)
000112B2 3368 000C 000C             		move.w	obY(a0),obY(a1)
000112B8 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
000112BE 337C 0080 0018             		move.w	#$80,obPriority(a1)
000112C4 137C 0005 001C             		move.b	#5,obAnim(a1)
000112CA 4A28 0028                  		tst.b	obSubtype(a0)
000112CE 6700                       		beq.s	@fail
000112D0 137C 0002 001C             		move.b	#2,obAnim(a1)
000112D6                            
000112D6                            	@fail:
000112D6 51C9 FFB0                  		dbf	d1,@loop
000112DA 4E75                       		rts	
000112DC                            ; ===========================================================================
000112DC                            
000112DC                            @activate:
000112DC 0669 0060 000C             		addi.w	#$60,obY(a1)
000112E2 3368 0030 0030             		move.w	$30(a0),$30(a1)
000112E8 0669 0060 0030             		addi.w	#$60,$30(a1)
000112EE 137C 0093 0020             		move.b	#$93,obColType(a1)
000112F4 137C 0080 0016             		move.b	#$80,obHeight(a1)
000112FA 08E9 0004 0001             		bset	#4,obRender(a1)
00011300 5829 0024                  		addq.b	#4,obRoutine(a1)
00011304 2348 003C                  		move.l	a0,$3C(a1)
00011308 4A28 0028                  		tst.b	obSubtype(a0)
0001130C 6700                       		beq.s	@sound
0001130E 7200                       		moveq	#0,d1
00011310 6100 FF76                  		bsr.w	@loop
00011314 5429 0024                  		addq.b	#2,obRoutine(a1)
00011318 08E9 0004 0002             		bset	#4,obGfx(a1)
0001131E 0669 0100 000C             		addi.w	#$100,obY(a1)
00011324 337C 0000 0018             		move.w	#0,obPriority(a1)
0001132A 3368 0030 0030             		move.w	$30(a0),$30(a1)
00011330 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
00011336 117C 0000 0028             		move.b	#0,obSubtype(a0)
0001133C                            
0001133C                            	@sound:
00011346                            
00011346                            Geyser_Action:	; Routine 2
00011346 7000                       		moveq	#0,d0
00011348 1028 0028                  		move.b	obSubtype(a0),d0
0001134C D040                       		add.w	d0,d0
0001134E 323B 0000                  		move.w	Geyser_Types(pc,d0.w),d1
00011352 4EBB 1000                  		jsr	Geyser_Types(pc,d1.w)
00011356 6100 E45E                  		bsr.w	SpeedToPos
0001135A 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
00011360 6100 B51E                  		bsr.w	AnimateSprite
00011364                            
00011364                            Geyser_ChkDel:
00011382 4E75                       		rts	
00011384                            ; ===========================================================================
00011384 0000                       Geyser_Types:	dc.w Geyser_Type00-Geyser_Types
00011386 0000                       		dc.w Geyser_Type01-Geyser_Types
00011388                            ; ===========================================================================
00011388                            
00011388                            Geyser_Type00:
00011388 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
0001138E 3028 0030                  		move.w	$30(a0),d0
00011392 B068 000C                  		cmp.w	obY(a0),d0
00011396 6400                       		bcc.s	locret_EFDA
00011398 5828 0024                  		addq.b	#4,obRoutine(a0)
0001139C 2268 003C                  		movea.l	$3C(a0),a1
000113A0 137C 0003 001C             		move.b	#3,obAnim(a1)
000113A6                            
000113A6                            locret_EFDA:
000113A6 4E75                       		rts	
000113A8                            ; ===========================================================================
000113A8                            
000113A8                            Geyser_Type01:
000113A8 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
000113AE 3028 0030                  		move.w	$30(a0),d0
000113B2 B068 000C                  		cmp.w	obY(a0),d0
000113B6 6400                       		bcc.s	locret_EFFA
000113B8 5828 0024                  		addq.b	#4,obRoutine(a0)
000113BC 2268 003C                  		movea.l	$3C(a0),a1
000113C0 137C 0001 001C             		move.b	#1,obAnim(a1)
000113C6                            
000113C6                            locret_EFFA:
000113C6 4E75                       		rts	
000113C8                            ; ===========================================================================
000113C8                            
000113C8                            loc_EFFC:	; Routine 4
000113C8 2268 003C                  		movea.l	$3C(a0),a1
000113CC 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
000113D2 6700 0000                  		beq.w	Geyser_Delete
000113D6 3029 000C                  		move.w	obY(a1),d0
000113DA 0640 0060                  		addi.w	#$60,d0
000113DE 3140 000C                  		move.w	d0,obY(a0)
000113E2 9068 0030                  		sub.w	$30(a0),d0
000113E6 4440                       		neg.w	d0
000113E8 7208                       		moveq	#8,d1
000113EA 0C40 0040                  		cmpi.w	#$40,d0
000113EE 6C00                       		bge.s	loc_F026
000113F0 720B                       		moveq	#$B,d1
000113F2                            
000113F2                            loc_F026:
000113F2 0C40 0080                  		cmpi.w	#$80,d0
000113F6 6F00                       		ble.s	loc_F02E
000113F8 720E                       		moveq	#$E,d1
000113FA                            
000113FA                            loc_F02E:
000113FA 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000113FE 6A00                       		bpl.s	loc_F04C
00011400 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00011406 5228 001B                  		addq.b	#1,obAniFrame(a0)
0001140A 0C28 0002 001B             		cmpi.b	#2,obAniFrame(a0)
00011410 6500                       		bcs.s	loc_F04C
00011412 117C 0000 001B             		move.b	#0,obAniFrame(a0)
00011418                            
00011418                            loc_F04C:
00011418 1028 001B                  		move.b	obAniFrame(a0),d0
0001141C D001                       		add.b	d1,d0
0001141E 1140 001A                  		move.b	d0,obFrame(a0)
00011422 6000 FF40                  		bra.w	Geyser_ChkDel
00011426                            ; ===========================================================================
00011426                            
00011426                            Geyser_Delete:	; Routine 6
00011426 6000 E3E2                  		bra.w	DeleteObject
00011426 6000 E3E2                  		bra.w	DeleteObject
0001142A                            		include	"_incObj\54 Lava Tag.asm"
0001142A                            ; ---------------------------------------------------------------------------
0001142A                            ; Object 54 - invisible	lava tag (MZ)
0001142A                            ; ---------------------------------------------------------------------------
0001142A                            
0001142A                            LavaTag:
0001142A 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)	;TIS
00011430 6E00 0000                  		bgt	WaterTag	;TIS
00011434 7000                       		moveq	#0,d0
00011436 1028 0024                  		move.b	obRoutine(a0),d0
0001143A 323B 0000                  		move.w	LTag_Index(pc,d0.w),d1
0001143E 4EFB 1000                  		jmp	LTag_Index(pc,d1.w)
00011442                            ; ===========================================================================
00011442 0000                       LTag_Index:	dc.w LTag_Main-LTag_Index
00011444 0000                       		dc.w LTag_ChkDel-LTag_Index
00011446                            
00011446 9694 95                    LTag_ColTypes:	dc.b $96, $94, $95
0001144A 00                         		even
0001144A                            ; ===========================================================================
0001144A                            
0001144A                            LTag_Main:	; Routine 0
0001144A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001144E 7000                       		moveq	#0,d0
00011450 1028 0028                  		move.b	obSubtype(a0),d0
00011454 117B 00F0 0020             		move.b	LTag_ColTypes(pc,d0.w),obColType(a0)
0001145A 217C 0000 0000 0004        		move.l	#Map_LTag,obMap(a0)
00011462 117C 0084 0001             		move.b	#$84,obRender(a0)
00011468                            
00011468                            LTag_ChkDel:	; Routine 2
00011468 3028 0008                  		move.w	obX(a0),d0
0001146C 0240 FF80                  		andi.w	#$FF80,d0
00011470 3238 F700                  		move.w	(v_screenposx).w,d1
00011474 0441 0080                  		subi.w	#$80,d1
00011478 0241 FF80                  		andi.w	#$FF80,d1
0001147C 9041                       		sub.w	d1,d0
0001147E 6B00 E38A                  		bmi.w	DeleteObject
00011482 0C40 0280                  		cmpi.w	#$280,d0
00011486 6200 E382                  		bhi.w	DeleteObject
0001148A 4E75                       		rts
0001148C                            
0001148C                            
0001148C                            ; ---------------------------------------------------------------------------
0001148C                            ; Object 54a - invisible	water tag (MZ) - TIS
0001148C                            ; ---------------------------------------------------------------------------
0001148C                            
0001148C                            WaterTag:	
0001148C 7000                       		moveq	#0,d0
0001148E 1028 0024                  		move.b	obRoutine(a0),d0
00011492 323B 0000                  		move.w	WTag_Index(pc,d0.w),d1
00011496 4EFB 1000                  		jmp	WTag_Index(pc,d1.w)
0001149A                            ; ===========================================================================
0001149A 0000                       WTag_Index:	dc.w WTag_Main-WTag_Index
0001149C 0000                       		dc.w WTag_ChkDel-WTag_Index
0001149E                            
0001149E 9694 95                    WTag_ColTypes:	dc.b $96, $94, $95
000114A2 00                         		even
000114A2                            ; ===========================================================================
000114A2                            
000114A2                            
000114A2                            WTag_Main:	; Routine 0
000114A2 5428 0024                  		addq.b	#2,obRoutine(a0)
000114A6 7000                       		moveq	#0,d0
000114A8                            		;move.b	obSubtype(a0),d0
000114A8                            		;move.b	WTag_ColTypes(pc,d0.w),obColType(a0)
000114A8 0400 00F0                  		sub.b	#$F0,d0
000114AC 1178 0096 0020             		move.b	$96,obColType(a0)							
000114B2                            		;move.l	#Map_LTag,obMap(a0)
000114B2                            		;move.b	#$84,obRender(a0)
000114B2                            
000114B2                            WTag_ChkDel:	; Routine 2
000114B2 3028 0008                  		move.w	obX(a0),d0
000114B6 0240 FF80                  		andi.w	#$FF80,d0
000114BA 3238 F700                  		move.w	(v_screenposx).w,d1
000114BE 0441 0080                  		subi.w	#$80,d1
000114C2 0241 FF80                  		andi.w	#$FF80,d1
000114C6 9041                       		sub.w	d1,d0
000114C8 6B00 E340                  		bmi.w	DeleteObject
000114CC 0C40 0280                  		cmpi.w	#$280,d0
000114D0 6200 E338                  		bhi.w	DeleteObject
000114D4 4E75                       		rts
000114D6                            
000114D6                            
000114D6                            Map_LTag:	include	"_maps\Lava Tag.asm"
000114D6                            ; ---------------------------------------------------------------------------
000114D6                            ; Sprite mappings - invisible lava tag (MZ)
000114D6                            ; ---------------------------------------------------------------------------
000114D6                            Map_LTag_internal:
000114D6 0000                       		dc.w @0-Map_LTag_internal
000114D8 00                         @0:		dc.b 0		; no sprite, because the tag is invisible!
000114DA 00                         		even
000114DA 00                         		even
000114DA                            		include	"_anim\Lava Geyser.asm"
000114DA                            ; ---------------------------------------------------------------------------
000114DA                            ; Animation script - geyser of lava (MZ)
000114DA                            ; ---------------------------------------------------------------------------
000114DA 0000                       Ani_Geyser:	dc.w @bubble1-Ani_Geyser
000114DC 0000                       		dc.w @bubble2-Ani_Geyser
000114DE 0000                       		dc.w @end-Ani_Geyser
000114E0 0000                       		dc.w @bubble3-Ani_Geyser
000114E2 0000                       		dc.w @blank-Ani_Geyser
000114E4 0000                       		dc.w @bubble4-Ani_Geyser
000114E6 0200 0100 0104 0504 05FC   @bubble1:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	afRoutine
000114F0 0202 03FF                  @bubble2:	dc.b 2,	2, 3, afEnd
000114F4 0206 07FF                  @end:		dc.b 2,	6, 7, afEnd
000114F8 0202 0300 0100 01FC        @bubble3:	dc.b 2,	2, 3, 0, 1, 0, 1, afRoutine
00011500 0F13 FF                    @blank:		dc.b $F, $13, afEnd
00011504 00                         		even
00011504 0211 12FF                  @bubble4:	dc.b 2,	$11, $12, afEnd
00011508                            		even
00011508                            		even
00011508                            Map_Geyser:	include	"_maps\Lava Geyser.asm"
00011508                            ; ---------------------------------------------------------------------------
00011508                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00011508                            ; ---------------------------------------------------------------------------
00011508                            Map_Geyser_internal:
00011508 0000                       		dc.w @bubble1-Map_Geyser_internal
0001150A 0000                       		dc.w @bubble2-Map_Geyser_internal
0001150C 0000                       		dc.w @bubble3-Map_Geyser_internal
0001150E 0000                       		dc.w @bubble4-Map_Geyser_internal
00011510 0000                       		dc.w @bubble5-Map_Geyser_internal
00011512 0000                       		dc.w @bubble6-Map_Geyser_internal
00011514 0000                       		dc.w @end1-Map_Geyser_internal
00011516 0000                       		dc.w @end2-Map_Geyser_internal
00011518 0000                       		dc.w @medcolumn1-Map_Geyser_internal
0001151A 0000                       		dc.w @medcolumn2-Map_Geyser_internal
0001151C 0000                       		dc.w @medcolumn3-Map_Geyser_internal
0001151E 0000                       		dc.w @shortcolumn1-Map_Geyser_internal
00011520 0000                       		dc.w @shortcolumn2-Map_Geyser_internal
00011522 0000                       		dc.w @shortcolumn3-Map_Geyser_internal
00011524 0000                       		dc.w @longcolumn1-Map_Geyser_internal
00011526 0000                       		dc.w @longcolumn2-Map_Geyser_internal
00011528 0000                       		dc.w @longcolumn3-Map_Geyser_internal
0001152A 0000                       		dc.w @bubble7-Map_Geyser_internal
0001152C 0000                       		dc.w @bubble8-Map_Geyser_internal
0001152E 0000                       		dc.w @blank-Map_Geyser_internal
00011530 02                         @bubble1:	dc.b 2
00011531 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
00011536 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0001153B 02                         @bubble2:	dc.b 2
0001153C EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
00011541 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
00011546 04                         @bubble3:	dc.b 4
00011547 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0001154C F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00011551 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00011556 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0001155B 04                         @bubble4:	dc.b 4
0001155C EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00011561 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00011566 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0001156B EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00011570 06                         @bubble5:	dc.b 6
00011571 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00011576 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0001157B F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00011580 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00011585 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0001158A E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0001158F 06                         @bubble6:	dc.b 6
00011590 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00011595 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0001159A F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0001159F EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
000115A4 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
000115A9 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
000115AE 02                         @end1:		dc.b 2
000115AF E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
000115B4 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
000115B9 02                         @end2:		dc.b 2
000115BA E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
000115BF E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
000115C4 0A                         @medcolumn1:	dc.b $A
000115C5 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000115CA 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000115CF B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000115D4 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000115D9 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000115DE D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000115E3 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
000115E8 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
000115ED 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
000115F2 100F 0840 00               		dc.b $10, $F, 8, $40, 0
000115F7 0A                         @medcolumn2:	dc.b $A
000115F8 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000115FD 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011602 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00011607 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0001160C D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011611 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00011616 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0001161B F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00011620 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00011625 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0001162A 0A                         @medcolumn3:	dc.b $A
0001162B 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011630 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00011635 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001163A B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0001163F D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00011644 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00011649 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0001164E F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00011653 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00011658 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0001165D 06                         @shortcolumn1:	dc.b 6
0001165E 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00011663 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00011668 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0001166D B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00011672 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00011677 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0001167C 06                         @shortcolumn2:	dc.b 6
0001167D 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00011682 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011687 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001168C B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011691 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011696 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001169B 06                         @shortcolumn3:	dc.b 6
0001169C 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000116A1 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000116A6 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000116AB B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000116B0 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000116B5 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000116BA 10                         @longcolumn1:	dc.b $10
000116BB 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000116C0 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000116C5 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000116CA B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000116CF D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000116D4 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000116D9 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
000116DE F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
000116E3 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
000116E8 100F 0840 00               		dc.b $10, $F, 8, $40, 0
000116ED 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
000116F2 300F 0840 00               		dc.b $30, $F, 8, $40, 0
000116F7 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
000116FC 500F 0840 00               		dc.b $50, $F, 8, $40, 0
00011701 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
00011706 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0001170B 10                         @longcolumn2:	dc.b $10
0001170C 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00011711 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011716 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001171B B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011720 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011725 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001172A F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0001172F F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00011734 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00011739 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0001173E 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
00011743 300F 0850 00               		dc.b $30, $F, 8, $50, 0
00011748 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0001174D 500F 0850 00               		dc.b $50, $F, 8, $50, 0
00011752 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
00011757 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0001175C 10                         @longcolumn3:	dc.b $10
0001175D 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011762 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00011767 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001176C B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00011771 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00011776 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001177B F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00011780 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00011785 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0001178A 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0001178F 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00011794 300F 0860 00               		dc.b $30, $F, 8, $60, 0
00011799 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0001179E 500F 0860 00               		dc.b $50, $F, 8, $60, 0
000117A3 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
000117A8 700F 0860 00               		dc.b $70, $F, 8, $60, 0
000117AD 06                         @bubble7:	dc.b 6
000117AE E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
000117B3 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
000117B8 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
000117BD E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
000117C2 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
000117C7 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
000117CC 06                         @bubble8:	dc.b 6
000117CD E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
000117D2 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
000117D7 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
000117DC E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
000117E1 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
000117E6 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
000117EB 00                         @blank:	dc.b 0
000117EC                            		even
000117EC                            		even
000117EC                            
000117EC                            		include	"_incObj\40 Moto Bug.asm" ; includes "_incObj\sub RememberState.asm"
000117EC                            ; ---------------------------------------------------------------------------
000117EC                            ; Object 40 - Moto Bug enemy (GHZ)
000117EC                            ; ---------------------------------------------------------------------------
000117EC                            
000117EC                            MotoBug:
000117EC 7000                       		moveq	#0,d0
000117EE 1028 0024                  		move.b	obRoutine(a0),d0
000117F2 323B 0000                  		move.w	Moto_Index(pc,d0.w),d1
000117F6 4EFB 1000                  		jmp	Moto_Index(pc,d1.w)
000117FA                            ; ===========================================================================
000117FA 0000                       Moto_Index:	dc.w Moto_Main-Moto_Index
000117FC 0000                       		dc.w Moto_Action-Moto_Index
000117FE 0000                       		dc.w Moto_Animate-Moto_Index
00011800 0000                       		dc.w Moto_Delete-Moto_Index
00011802                            ; ===========================================================================
00011802                            
00011802                            Moto_Main:	; Routine 0
00011802 217C 0000 0000 0004        		move.l	#Map_Moto,obMap(a0)
0001180A 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00011810 117C 0004 0001             		move.b	#4,obRender(a0)
00011816 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001181C 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011822 4A28 001C                  		tst.b	obAnim(a0)	; is object a smoke trail?
00011826 6600                       		bne.s	@smoke		; if yes, branch
00011828 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001182E 117C 0008 0017             		move.b	#8,obWidth(a0)
00011834 117C 000C 0020             		move.b	#$C,obColType(a0)
0001183A 6100 DF42                  		bsr.w	ObjectFall
0001183E 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00011844 4A41                       		tst.w	d1
00011846 6A00                       		bpl.s	@notonfloor
00011848 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
0001184C 317C 0000 0012             		move.w	#0,obVelY(a0)
00011852 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Moto_Action next
00011856 0868 0000 0022             		bchg	#0,obStatus(a0)
0001185C                            
0001185C                            	@notonfloor:
0001185C 4E75                       		rts	
0001185E                            ; ===========================================================================
0001185E                            
0001185E                            @smoke:
0001185E 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Moto_Animate next
00011862 6000 0000                  		bra.w	Moto_Animate
00011866                            ; ===========================================================================
00011866                            
00011866                            Moto_Action:	; Routine 2
00011866 7000                       		moveq	#0,d0
00011868 1028 0025                  		move.b	ob2ndRout(a0),d0
0001186C 323B 0000                  		move.w	Moto_ActIndex(pc,d0.w),d1
00011870 4EBB 1000                  		jsr	Moto_ActIndex(pc,d1.w)
00011874 43F9 0000 0000             		lea	(Ani_Moto).l,a1
0001187A 6100 B004                  		bsr.w	AnimateSprite
0001187E                            
0001187E                            		include	"_incObj\sub RememberState.asm" ; Moto_Action terminates in this file
0001187E                            ; ---------------------------------------------------------------------------
0001187E                            ; Subroutine to remember whether an object is destroyed/collected
0001187E                            ; ---------------------------------------------------------------------------
0001187E                            
0001187E                            RememberState:
0001189C 6000 DF2C                  		bra.w	DisplaySprite
000118A0                            
000118A0                            	@offscreen:
000118A0 45F8 FC00                  		lea	(v_objstate).w,a2
000118A4 7000                       		moveq	#0,d0
000118A6 1028 0023                  		move.b	obRespawnNo(a0),d0
000118AA 6700                       		beq.s	@delete
000118AC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000118B2                            
000118B2                            	@delete:
000118B2 6000 DF56                  		bra.w	DeleteObject
000118B2 6000 DF56                  		bra.w	DeleteObject
000118B6                            
000118B6                            ; ===========================================================================
000118B6 0000                       Moto_ActIndex:	dc.w @move-Moto_ActIndex
000118B8 0000                       		dc.w @findfloor-Moto_ActIndex
000118BA                            
000118BA =00000030                  @time:		equ $30
000118BA =00000033                  @smokedelay:	equ $33
000118BA                            ; ===========================================================================
000118BA                            
000118BA                            @move:
000118BA 5368 0030                  		subq.w	#1,@time(a0)	; subtract 1 from pause	time
000118BE 6A00                       		bpl.s	@wait		; if time remains, branch
000118C0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000118C4 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object to the left
000118CA 117C 0001 001C             		move.b	#1,obAnim(a0)
000118D0 0868 0000 0022             		bchg	#0,obStatus(a0)
000118D6 6600                       		bne.s	@wait
000118D8 4468 0010                  		neg.w	obVelX(a0)	; change direction
000118DC                            
000118DC                            	@wait:
000118DC 4E75                       		rts	
000118DE                            ; ===========================================================================
000118DE                            
000118DE                            @findfloor:
000118DE 6100 DED6                  		bsr.w	SpeedToPos
000118E2 4EB9 0000 0000             		jsr	(ObjFloorDist).l
000118E8 0C41 FFF8                  		cmpi.w	#-8,d1
000118EC 6D00                       		blt.s	@pause
000118EE 0C41 000C                  		cmpi.w	#$C,d1
000118F2 6C00                       		bge.s	@pause
000118F4 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
000118F8 5328 0033                  		subq.b	#1,@smokedelay(a0)
000118FC 6A00                       		bpl.s	@nosmoke
000118FE 117C 000F 0033             		move.b	#$F,@smokedelay(a0)
00011904 6100 E45E                  		bsr.w	FindFreeObj
00011908 6600                       		bne.s	@nosmoke
0001190A 12BC 0040                  		move.b	#id_MotoBug,0(a1) ; load exhaust smoke object
0001190E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011914 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001191A 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00011920 137C 0002 001C             		move.b	#2,obAnim(a1)
00011926                            
00011926                            	@nosmoke:
00011926 4E75                       		rts	
00011928                            
00011928                            @pause:
00011928 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001192C 317C 003B 0030             		move.w	#59,@time(a0)	; set pause time to 1 second
00011932 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop the object moving
00011938 117C 0000 001C             		move.b	#0,obAnim(a0)
0001193E 4E75                       		rts	
00011940                            ; ===========================================================================
00011940                            
00011940                            Moto_Animate:	; Routine 4
00011940 43F9 0000 0000             		lea	(Ani_Moto).l,a1
00011946 6100 AF38                  		bsr.w	AnimateSprite
0001194A 6000 DE7E                  		bra.w	DisplaySprite
0001194E                            ; ===========================================================================
0001194E                            
0001194E                            Moto_Delete:	; Routine 6
0001194E 6000 DEBA                  		bra.w	DeleteObject
0001194E 6000 DEBA                  		bra.w	DeleteObject
00011952                            		include	"_anim\Moto Bug.asm"
00011952                            ; ---------------------------------------------------------------------------
00011952                            ; Animation script - Motobug enemy
00011952                            ; ---------------------------------------------------------------------------
00011952 0000                       Ani_Moto:	dc.w @stand-Ani_Moto
00011954 0000                       		dc.w @walk-Ani_Moto
00011956 0000                       		dc.w @smoke-Ani_Moto
00011958                            
00011958 0F02 FF                    @stand:		dc.b $F, 2, afEnd
0001195C 00                         		even
0001195C 0700 0100 02FF             @walk:		dc.b 7,	0, 1, 0, 2, afEnd
00011962 0103 0603 0604 0604 0604+  @smoke:		dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, afRoutine
00011970 00                         		even
00011970 00                         		even
00011970                            Map_Moto:	include	"_maps\Moto Bug.asm"
00011970                            ; --------------------------------------------------------------------------------
00011970                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011970                            ; --------------------------------------------------------------------------------
00011970                            
00011970                            SME_TTY9T:	
00011970 0000 0000                  		dc.w SME_TTY9T_E-SME_TTY9T, SME_TTY9T_23-SME_TTY9T	
00011974 0000 0000                  		dc.w SME_TTY9T_38-SME_TTY9T, SME_TTY9T_52-SME_TTY9T	
00011978 0000 0000                  		dc.w SME_TTY9T_58-SME_TTY9T, SME_TTY9T_5E-SME_TTY9T	
0001197C 0000                       		dc.w SME_TTY9T_64-SME_TTY9T	
0001197E 04                         SME_TTY9T_E:	dc.b 4	
0001197F F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
00011984 000C 2008 EC               		dc.b 0, $C, $20, 8, $EC	
00011989 F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
0001198E 0808 200E F4               		dc.b 8, 8, $20, $E, $F4	
00011993 04                         SME_TTY9T_23:	dc.b 4	
00011994 F10D 2000 EC               		dc.b $F1, $D, $20, 0, $EC	
00011999 010C 2008 EC               		dc.b 1, $C, $20, 8, $EC	
0001199E F901 200C 0C               		dc.b $F9, 1, $20, $C, $C	
000119A3 0908 2011 F4               		dc.b 9, 8, $20, $11, $F4	
000119A8 05                         SME_TTY9T_38:	dc.b 5	
000119A9 F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
000119AE 000C 2014 EC               		dc.b 0, $C, $20, $14, $EC	
000119B3 F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
000119B8 0804 2018 EC               		dc.b 8, 4, $20, $18, $EC	
000119BD 0804 2012 FC               		dc.b 8, 4, $20, $12, $FC	
000119C2 01                         SME_TTY9T_52:	dc.b 1	
000119C3 FA00 001A 10               		dc.b $FA, 0, 0, $1A, $10	
000119C8 01                         SME_TTY9T_58:	dc.b 1	
000119C9 FA00 001B 10               		dc.b $FA, 0, 0, $1B, $10	
000119CE 01                         SME_TTY9T_5E:	dc.b 1	
000119CF FA00 001C 10               		dc.b $FA, 0, 0, $1C, $10	
000119D4 00                         SME_TTY9T_64:	dc.b 0	
000119D6 00                         		even
000119D6 00                         		even
000119D6                            		include	"_incObj\4F.asm"
000119D6                            ; ---------------------------------------------------------------------------
000119D6                            ; Object 4F - Splats
000119D6                            ; ---------------------------------------------------------------------------
000119D6                            
000119D6                            Obj4F:
000119D6 7000                                       moveq   #0,d0
000119D8 1028 0024                                  move.b  $24(a0),d0
000119DC 323B 0000                                  move.w  ObjSplats_Index(pc,d0.w),d1
000119E0 4EFB 1000                                  jmp     ObjSplats_Index(pc,d1.w)
000119E4                            ; ---------------------------------------------------------------------------
000119E4 0000                       ObjSplats_Index:dc.w ObjSplats_Init-*
000119E6 0000                                       dc.w loc_D246-ObjSplats_Index
000119E8 0000                                       dc.w ObjSplats_Bounce-ObjSplats_Index
000119EA 0000                                       dc.w loc_D2C8-ObjSplats_Index
000119EC                            ; ---------------------------------------------------------------------------
000119EC                            
000119EC                            ObjSplats_Init:
000119EC 5428 0024                                  addq.b  #2,$24(a0)
000119F0 217C 0000 0000 0004                        move.l  #Map_Splats,4(a0)
000119F8 317C 24E4 0002                             move.w  #$24E4,2(a0)
000119FE 117C 0004 0001                             move.b  #4,1(a0)
00011A04 117C 0004 0014                             move.b  #4,obActWid(a0)
00011A0A 317C 0200 0018             				move.w	#$200,obPriority(a0)
00011A10 117C 0014 0016                             move.b  #$14,$16(a0)
00011A16 117C 0002 0020                             move.b  #2,$20(a0)
00011A1C 4A28 0028                                  tst.b   $28(a0)
00011A20 6700                                       beq.s   loc_D246
00011A22 343C 0300                                  move.w  #$300,d2
00011A26 6000                                       bra.s   ObjSplats_FaceRight
00011A28                            ; ---------------------------------------------------------------------------
00011A28                            
00011A28                            loc_D246:
00011A28 343C 00E0                                  move.w  #$E0,d2
00011A2C                            
00011A2C                            ObjSplats_FaceRight:
00011A2C 323C 0100                                  move.w  #$100,d1
00011A30 08E8 0000 0001                             bset    #0,1(a0)
00011A36 3038 D008                                  move.w  ($FFFFD008).w,d0
00011A3A 9068 0008                                  sub.w   8(a0),d0
00011A3E 6400                                       bcc.s   ObjSplats_Move
00011A40 4440                                       neg.w   d0
00011A42 4441                                       neg.w   d1
00011A44 08A8 0000 0001                             bclr    #0,1(a0)
00011A4A                            
00011A4A                            ObjSplats_Move:
00011A4A B042                                       cmp.w   d2,d0
00011A4C 6400                                       bcc.s   ObjSplats_Bounce
00011A4E 3141 0010                                  move.w  d1,$10(a0)
00011A52 5428 0024                                  addq.b  #2,$24(a0)
00011A56                            
00011A56                            ObjSplats_Bounce:
00011A56 6100 DD26                                  bsr.w   ObjectFall
00011A5A 117C 0001 001A                             move.b  #1,$1A(a0)
00011A60 4A68 0012                                  tst.w   $12(a0)
00011A64 6B00                                       bmi.s   ObjSplats_Turn
00011A66 117C 0000 001A                             move.b  #0,$1A(a0)
00011A6C 6100 0000                                  bsr.w   ObjFloorDist
00011A70 4A41                                       tst.w   d1
00011A72 6A00                                       bpl.s   ObjSplats_Turn
00011A74 3011                                       move.w  (a1),d0
00011A76 0240 03FF                                  andi.w  #$3FF,d0
00011A7A 0C40 02D2                                  cmpi.w  #$2D2,d0
00011A7E 6500                                       bcs.s   ObjSplats_Fall
00011A80 5428 0024                                  addq.b  #2,$24(a0)
00011A84 6000                                       bra.s   ObjSplats_Turn
00011A86                            ; ---------------------------------------------------------------------------
00011A86                            
00011A86                            ObjSplats_Fall:
00011A86 D368 000C                                  add.w   d1,$C(a0)
00011A8A 317C FC00 0012                             move.w  #$FC00,$12(a0)
00011A90                            
00011A90                            ObjSplats_Turn:
00011A90 6100 0000                                  bsr.w   Yad_ChkWall
00011A94 6700                                       beq.s   loc_D2C4
00011A96 4468 0010                                  neg.w   $10(a0)
00011A9A 0868 0000 0001                             bchg    #0,1(a0)
00011AA0 0868 0000 0022                             bchg    #0,$22(a0)
00011AA6                            
00011AA6                            loc_D2C4:
00011AA6 6000 FDD6                                  bra.w   RememberState
00011AAA                            ; ---------------------------------------------------------------------------
00011AAA                            
00011AAA                            loc_D2C8:
00011AAA 6100 DCD2                                  bsr.w   ObjectFall
00011AAE 6100 DD1A                                  bsr.w   DisplaySprite
00011AB2 4A28 0001                                  tst.b   1(a0)
00011AB6 6A00 DD52                                  bpl.w   DeleteObject
00011ABA 4E75                                       rts
00011ABA 4E75                                       rts
00011ABC                            Map_Splats:	include	"_maps\Splats.asm"
00011ABC 0000                       Map_Splats_internal:     dc.w unk_D310-*
00011ABE 0000                                       dc.w unk_D31B-Map_Splats_internal
00011AC0 02                         unk_D310:       dc.b   2
00011AC1 EC0B 0000 F40C 0800 0CF4                   dc.b $EC, $B, 0, 0, $F4, $C, 8, 0, $C, $F4
00011ACB 02                         unk_D31B:       dc.b   2
00011ACC EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011ACC EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011AD6                            
00011AD6                            		include	"_incObj\50 Yadrin.asm"
00011AD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011AD6                            
00011AD6                            
00011AD6                            Yad_ChkWall:
00011AD6 3038 FE04                  		move.w	(v_framecount).w,d0
00011ADA D047                       		add.w	d7,d0
00011ADC 0240 0003                  		andi.w	#3,d0
00011AE0 6600                       		bne.s	loc_F836
00011AE2 7600                       		moveq	#0,d3
00011AE4 1628 0014                  		move.b	obActWid(a0),d3
00011AE8 4A68 0010                  		tst.w	obVelX(a0)
00011AEC 6B00                       		bmi.s	loc_F82C
00011AEE 6100 0000                  		bsr.w	ObjHitWallRight
00011AF2 4A41                       		tst.w	d1
00011AF4 6A00                       		bpl.s	loc_F836
00011AF6                            
00011AF6                            loc_F828:
00011AF6 7001                       		moveq	#1,d0
00011AF8 4E75                       		rts	
00011AFA                            ; ===========================================================================
00011AFA                            
00011AFA                            loc_F82C:
00011AFA 4643                       		not.w	d3
00011AFC 6100 0000                  		bsr.w	ObjHitWallLeft
00011B00 4A41                       		tst.w	d1
00011B02 6BF2                       		bmi.s	loc_F828
00011B04                            
00011B04                            loc_F836:
00011B04 7000                       		moveq	#0,d0
00011B06 4E75                       		rts	
00011B08                            ; End of function Yad_ChkWall
00011B08                            
00011B08                            ; ===========================================================================
00011B08                            ; ---------------------------------------------------------------------------
00011B08                            ; Object 50 - Yadrin enemy (SYZ)
00011B08                            ; ---------------------------------------------------------------------------
00011B08                            
00011B08                            Yadrin:
00011B08 7000                       		moveq	#0,d0
00011B0A 1028 0024                  		move.b	obRoutine(a0),d0
00011B0E 323B 0000                  		move.w	Yad_Index(pc,d0.w),d1
00011B12 4EFB 1000                  		jmp	Yad_Index(pc,d1.w)
00011B16                            ; ===========================================================================
00011B16 0000                       Yad_Index:	dc.w Yad_Main-Yad_Index
00011B18 0000                       		dc.w Yad_Action-Yad_Index
00011B1A                            
00011B1A =00000030                  yad_timedelay:	equ $30
00011B1A                            ; ===========================================================================
00011B1A                            
00011B1A                            Yad_Main:	; Routine 0
00011B1A 217C 0000 0000 0004        		move.l	#Map_Yad,obMap(a0)
00011B22 317C 247B 0002             		move.w	#$247B,obGfx(a0)
00011B28 117C 0004 0001             		move.b	#4,obRender(a0)
00011B2E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011B34 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011B3A 117C 0011 0016             		move.b	#$11,obHeight(a0)
00011B40 117C 0008 0017             		move.b	#8,obWidth(a0)
00011B46 117C 00CC 0020             		move.b	#$CC,obColType(a0)
00011B4C 6100 DC30                  		bsr.w	ObjectFall
00011B50 6100 0000                  		bsr.w	ObjFloorDist
00011B54 4A41                       		tst.w	d1
00011B56 6A00                       		bpl.s	locret_F89E
00011B58 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
00011B5C 317C 0000 0012             		move.w	#0,obVelY(a0)
00011B62 5428 0024                  		addq.b	#2,obRoutine(a0)
00011B66 0868 0000 0022             		bchg	#0,obStatus(a0)
00011B6C                            
00011B6C                            	locret_F89E:
00011B6C 4E75                       		rts	
00011B6E                            ; ===========================================================================
00011B6E                            
00011B6E                            Yad_Action:	; Routine 2
00011B6E 7000                       		moveq	#0,d0
00011B70 1028 0025                  		move.b	ob2ndRout(a0),d0
00011B74 323B 0000                  		move.w	Yad_Index2(pc,d0.w),d1
00011B78 4EBB 1000                  		jsr	Yad_Index2(pc,d1.w)
00011B7C 43F9 0000 0000             		lea	(Ani_Yad).l,a1
00011B82 6100 ACFC                  		bsr.w	AnimateSprite
00011B86 6000 FCF6                  		bra.w	RememberState
00011B8A                            ; ===========================================================================
00011B8A 0000                       Yad_Index2:	dc.w Yad_Move-Yad_Index2
00011B8C 0000                       		dc.w Yad_FixToFloor-Yad_Index2
00011B8E                            ; ===========================================================================
00011B8E                            
00011B8E                            Yad_Move:
00011B8E 5368 0030                  		subq.w	#1,yad_timedelay(a0) ; subtract 1 from pause time
00011B92 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00011B94 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00011B98 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object
00011B9E 117C 0001 001C             		move.b	#1,obAnim(a0)
00011BA4 0868 0000 0022             		bchg	#0,obStatus(a0)
00011BAA 6600                       		bne.s	locret_F8E2
00011BAC 4468 0010                  		neg.w	obVelX(a0)	; change direction
00011BB0                            
00011BB0                            	locret_F8E2:
00011BB0 4E75                       		rts	
00011BB2                            ; ===========================================================================
00011BB2                            
00011BB2                            Yad_FixToFloor:
00011BB2 6100 DC02                  		bsr.w	SpeedToPos
00011BB6 6100 0000                  		bsr.w	ObjFloorDist
00011BBA 0C41 FFF8                  		cmpi.w	#-8,d1
00011BBE 6D00                       		blt.s	Yad_Pause
00011BC0 0C41 000C                  		cmpi.w	#$C,d1
00011BC4 6C00                       		bge.s	Yad_Pause
00011BC6 D368 000C                  		add.w	d1,obY(a0)	; match	object's position to the floor
00011BCA 6100 FF0A                  		bsr.w	Yad_ChkWall
00011BCE 6600                       		bne.s	Yad_Pause
00011BD0 4E75                       		rts	
00011BD2                            ; ===========================================================================
00011BD2                            
00011BD2                            Yad_Pause:
00011BD2 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00011BD6 317C 003B 0030             		move.w	#59,yad_timedelay(a0) ; set pause time to 1 second
00011BDC 317C 0000 0010             		move.w	#0,obVelX(a0)
00011BE2 117C 0000 001C             		move.b	#0,obAnim(a0)
00011BE8 4E75                       		rts	
00011BE8 4E75                       		rts	
00011BEA                            		include	"_anim\Yadrin.asm"
00011BEA                            ; ---------------------------------------------------------------------------
00011BEA                            ; Animation script - Yadrin enemy
00011BEA                            ; ---------------------------------------------------------------------------
00011BEA 0000                       Ani_Yad:	dc.w @stand-Ani_Yad
00011BEC 0000                       		dc.w @walk-Ani_Yad
00011BEE                            
00011BEE 0800 FF                    @stand:		dc.b 8,	0, afEnd
00011BF2 00                         		even
00011BF2 0800 0002 0000 0101 0103+  @walk:		dc.b 8, 0, 0, 2, 0, 0, 1, 1, 1, 3, 1, 1, 1, afEnd
00011C00                            		even
00011C00                            		even
00011C00                            Map_Yad:	include	"_maps\Yadrin.asm"
00011C00                            ; --------------------------------------------------------------------------------
00011C00                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011C00                            ; --------------------------------------------------------------------------------
00011C00                            
00011C00                            SME_4WhIu:	
00011C00 0000 0000                  		dc.w SME_4WhIu_C-SME_4WhIu, SME_4WhIu_3A-SME_4WhIu	
00011C04 0000 0000                  		dc.w SME_4WhIu_68-SME_4WhIu, SME_4WhIu_A5-SME_4WhIu	
00011C08 0000 0000                  		dc.w SME_4WhIu_E2-SME_4WhIu, SME_4WhIu_FC-SME_4WhIu	
00011C0C 09                         SME_4WhIu_C:	dc.b 9	
00011C0D F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011C12 EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011C17 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011C1C FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011C21 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011C26 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011C2B FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011C30 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011C35 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011C3A 09                         SME_4WhIu_3A:	dc.b 9	
00011C3B F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011C40 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011C45 FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011C4A FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011C4F FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011C54 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011C59 F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011C5E EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011C63 EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011C68 0C                         SME_4WhIu_68:	dc.b $C	
00011C69 EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011C6E FB00 601D FC               		dc.b $FB, 0, $60, $1D, $FC	
00011C73 FB00 6020 04               		dc.b $FB, 0, $60, $20, 4	
00011C78 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011C7D FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011C82 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011C87 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011C8C FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011C91 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011C96 F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011C9B 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011CA0 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011CA5 0C                         SME_4WhIu_A5:	dc.b $C	
00011CA6 F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011CAB FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011CB0 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011CB5 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011CBA 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011CBF F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011CC4 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011CC9 EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011CCE FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011CD3 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011CD8 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011CDD 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011CE2 05                         SME_4WhIu_E2:	dc.b 5	
00011CE3 F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011CE8 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011CED EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011CF2 F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011CF7 0409 0031 FC               		dc.b 4, 9, 0, $31, $FC	
00011CFC 05                         SME_4WhIu_FC:	dc.b 5	
00011CFD F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011D02 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011D07 EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011D0C F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011D11 0409 0037 FC               		dc.b 4, 9, 0, $37, $FC	
00011D16                            		even
00011D16                            		even
00011D16                            
00011D16                            		include	"_incObj\sub SolidObject.asm"
00011D16                            ; ---------------------------------------------------------------------------
00011D16                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00011D16                            ;
00011D16                            ; input:
00011D16                            ;	d1 = width
00011D16                            ;	d2 = height / 2 (when jumping)
00011D16                            ;	d3 = height / 2 (when walking)
00011D16                            ;	d4 = x-axis position
00011D16                            ; ---------------------------------------------------------------------------
00011D16                            
00011D16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011D16                            
00011D16                            
00011D16                            SolidObject:
00011D16 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic standing on the object?
00011D1A 6700 0000                  		beq.w	Solid_ChkEnter	; if not, branch
00011D1E 3401                       		move.w	d1,d2
00011D20 D442                       		add.w	d2,d2
00011D22 43F8 D000                  		lea	(v_player).w,a1
00011D26 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011D2C 6600                       		bne.s	@leave		; if yes, branch
00011D2E 3029 0008                  		move.w	obX(a1),d0
00011D32 9068 0008                  		sub.w	obX(a0),d0
00011D36 D041                       		add.w	d1,d0
00011D38 6B00                       		bmi.s	@leave		; if Sonic moves off the left, branch
00011D3A B042                       		cmp.w	d2,d0		; has Sonic moved off the right?
00011D3C 6500                       		bcs.s	@stand		; if not, branch
00011D3E                            
00011D3E                            	@leave:
00011D3E 08A9 0003 0022             		bclr	#3,obStatus(a1)	; clear Sonic's standing flag
00011D44 08A8 0003 0022             		bclr	#3,obStatus(a0)	; clear object's standing flag
00011D4A 4228 0025                  		clr.b	obSolid(a0)
00011D4E 7800                       		moveq	#0,d4
00011D50 4E75                       		rts	
00011D52                            
00011D52                            	@stand:
00011D52 3404                       		move.w	d4,d2
00011D54 4EB9 0000 92F6             		jsr	MvSonicOnPtfm
00011D5A 7800                       		moveq	#0,d4
00011D5C 4E75                       		rts	
00011D5E                            ; ===========================================================================
00011D5E                            
00011D5E                            SolidObject71:
00011D5E 4A28 0025                  		tst.b	obSolid(a0)
00011D62 6700 0000                  		beq.w	loc_FAD0
00011D66 3401                       		move.w	d1,d2
00011D68 D442                       		add.w	d2,d2
00011D6A 43F8 D000                  		lea	(v_player).w,a1
00011D6E 0829 0001 0022             		btst	#1,obStatus(a1)
00011D74 6600                       		bne.s	@leave
00011D76 3029 0008                  		move.w	obX(a1),d0
00011D7A 9068 0008                  		sub.w	obX(a0),d0
00011D7E D041                       		add.w	d1,d0
00011D80 6B00                       		bmi.s	@leave
00011D82 B042                       		cmp.w	d2,d0
00011D84 6500                       		bcs.s	@stand
00011D86                            
00011D86                            	@leave:
00011D86 08A9 0003 0022             		bclr	#3,obStatus(a1)
00011D8C 08A8 0003 0022             		bclr	#3,obStatus(a0)
00011D92 4228 0025                  		clr.b	obSolid(a0)
00011D96 7800                       		moveq	#0,d4
00011D98 4E75                       		rts	
00011D9A                            
00011D9A                            	@stand:
00011D9A 3404                       		move.w	d4,d2
00011D9C 4EB9 0000 92F6             		jsr	MvSonicOnPtfm
00011DA2 7800                       		moveq	#0,d4
00011DA4 4E75                       		rts	
00011DA6                            ; ===========================================================================
00011DA6                            
00011DA6                            SolidObject2F:
00011DA6 43F8 D000                  		lea	(v_player).w,a1
00011DAA 4A28 0001                  		tst.b	obRender(a0)
00011DAE 6A00 0000                  		bpl.w	Solid_Ignore
00011DB2 3029 0008                  		move.w	obX(a1),d0
00011DB6 9068 0008                  		sub.w	obX(a0),d0
00011DBA D041                       		add.w	d1,d0
00011DBC 6B00 0000                  		bmi.w	Solid_Ignore
00011DC0 3601                       		move.w	d1,d3
00011DC2 D643                       		add.w	d3,d3
00011DC4 B043                       		cmp.w	d3,d0
00011DC6 6200 0000                  		bhi.w	Solid_Ignore
00011DCA 3A00                       		move.w	d0,d5
00011DCC 0828 0000 0001             		btst	#0,obRender(a0)	; is object horizontally flipped?
00011DD2 6700                       		beq.s	@notflipped	; if not, branch
00011DD4 4645                       		not.w	d5
00011DD6 DA43                       		add.w	d3,d5
00011DD8                            
00011DD8                            	@notflipped:
00011DD8 E24D                       		lsr.w	#1,d5
00011DDA 7600                       		moveq	#0,d3
00011DDC 1632 5000                  		move.b	(a2,d5.w),d3
00011DE0 9612                       		sub.b	(a2),d3
00011DE2 3A28 000C                  		move.w	obY(a0),d5
00011DE6 9A43                       		sub.w	d3,d5
00011DE8 1629 0016                  		move.b	obHeight(a1),d3
00011DEC 4883                       		ext.w	d3
00011DEE D443                       		add.w	d3,d2
00011DF0 3629 000C                  		move.w	obY(a1),d3
00011DF4 9645                       		sub.w	d5,d3
00011DF6 5843                       		addq.w	#4,d3
00011DF8 D642                       		add.w	d2,d3
00011DFA 6B00 0000                  		bmi.w	Solid_Ignore
00011DFE 3802                       		move.w	d2,d4
00011E00 D844                       		add.w	d4,d4
00011E02 B644                       		cmp.w	d4,d3
00011E04 6400 0000                  		bcc.w	Solid_Ignore
00011E08 6000 0000                  		bra.w	loc_FB0E
00011E0C                            ; ===========================================================================
00011E0C                            
00011E0C                            Solid_ChkEnter:
00011E0C 4A28 0001                  		tst.b	obRender(a0)
00011E10 6A00 0000                  		bpl.w	Solid_Ignore
00011E14                            
00011E14                            loc_FAD0:
00011E14 43F8 D000                  		lea	(v_player).w,a1
00011E18 3029 0008                  		move.w	obX(a1),d0
00011E1C 9068 0008                  		sub.w	obX(a0),d0
00011E20 D041                       		add.w	d1,d0
00011E22 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves off the left, branch
00011E26 3601                       		move.w	d1,d3
00011E28 D643                       		add.w	d3,d3
00011E2A B043                       		cmp.w	d3,d0		; has Sonic moved off the right?
00011E2C 6200 0000                  		bhi.w	Solid_Ignore	; if yes, branch
00011E30 1629 0016                  		move.b	obHeight(a1),d3
00011E34 4883                       		ext.w	d3
00011E36 D443                       		add.w	d3,d2
00011E38 3629 000C                  		move.w	obY(a1),d3
00011E3C 9668 000C                  		sub.w	obY(a0),d3
00011E40 5843                       		addq.w	#4,d3
00011E42 D642                       		add.w	d2,d3
00011E44 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves above, branch
00011E48 3802                       		move.w	d2,d4
00011E4A D844                       		add.w	d4,d4
00011E4C B644                       		cmp.w	d4,d3		; has Sonic moved below?
00011E4E 6400 0000                  		bcc.w	Solid_Ignore	; if yes, branch
00011E52                            
00011E52                            loc_FB0E:
00011E52 4A38 F7C8                  		tst.b	(f_lockmulti).w	; are controls locked?
00011E56 6B00 0000                  		bmi.w	Solid_Ignore	; if yes, branch
00011E5A 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic dying?
00011E60 6400 0000                  			bcc.w	Solid_Debug
00011E64 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00011E68 6600 0000                  		bne.w	Solid_Debug	; if yes, branch
00011E6C 3A00                       		move.w	d0,d5
00011E6E B240                       		cmp.w	d0,d1		; is Sonic right of centre of object?
00011E70 6400                       		bcc.s	@isright	; if yes, branch
00011E72 D241                       		add.w	d1,d1
00011E74 9041                       		sub.w	d1,d0
00011E76 3A00                       		move.w	d0,d5
00011E78 4445                       		neg.w	d5
00011E7A                            
00011E7A                            	@isright:
00011E7A 3203                       		move.w	d3,d1
00011E7C B443                       		cmp.w	d3,d2		; is Sonic below centre of object?
00011E7E 6400                       		bcc.s	@isbelow	; if yes, branch
00011E80                            
00011E80 5943                       		subq.w	#4,d3
00011E82 9644                       		sub.w	d4,d3
00011E84 3203                       		move.w	d3,d1
00011E86 4441                       		neg.w	d1
00011E88                            
00011E88                            	@isbelow:
00011E88 BA41                       		cmp.w	d1,d5
00011E8A 6200 0000                  		bhi.w	Solid_TopBottom	; if Sonic hits top or bottom, branch
00011E8E 0C41 0004                  		cmpi.w	#4,d1
00011E92 6300                       		bls.s	Solid_SideAir
00011E94 4A40                       		tst.w	d0		; where is Sonic?
00011E96 6700                       		beq.s	Solid_Centre	; if inside the object, branch
00011E98 6B00                       		bmi.s	Solid_Right	; if right of the object, branch
00011E9A 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving left?
00011E9E 6B00                       		bmi.s	Solid_Centre	; if yes, branch
00011EA0 6000                       		bra.s	Solid_Left
00011EA2                            ; ===========================================================================
00011EA2                            
00011EA2                            Solid_Right:
00011EA2 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving right?
00011EA6 6A00                       		bpl.s	Solid_Centre	; if yes, branch
00011EA8                            
00011EA8                            Solid_Left:
00011EA8 337C 0000 0020             		move.w	#0,obInertia(a1)
00011EAE 337C 0000 0010             		move.w	#0,obVelX(a1)	; stop Sonic moving
00011EB4                            
00011EB4                            Solid_Centre:
00011EB4 9169 0008                  		sub.w	d0,obX(a1)	; correct Sonic's position
00011EB8 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011EBE 6600                       		bne.s	Solid_SideAir	; if yes, branch
00011EC0 08E9 0005 0022             		bset	#5,obStatus(a1)	; make Sonic push object
00011EC6 08E8 0005 0022             		bset	#5,obStatus(a0)	; make object be pushed
00011ECC 7801                       		moveq	#1,d4		; return side collision
00011ECE 4E75                       		rts	
00011ED0                            ; ===========================================================================
00011ED0                            
00011ED0                            Solid_SideAir:
00011ED0 6100                       		bsr.s	Solid_NotPushing
00011ED2 7801                       		moveq	#1,d4		; return side collision
00011ED4 4E75                       		rts	
00011ED6                            ; ===========================================================================
00011ED6                            
00011ED6                            Solid_Ignore:
00011ED6 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing?
00011EDC 6700                       		beq.s	Solid_Debug	; if not, branch
00011EDE 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
00011EE4 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011EE6 0C29 0000 001C             		cmpi.b	#id_Drown,obAnim(a1)	; is Sonic in his drowning animation?
00011EEC 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011EEE 0C29 0000 001C             		cmpi.b	#id_Hurt,obAnim(a1)	; is Sonic in his hurt animation?
00011EF4 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011EF6 337C 0000 001C             		move.w	#id_Run,obAnim(a1) ; use running animation
00011EFC                            
00011EFC                            
00011EFC                            Solid_NotPushing:
00011EFC 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag
00011F02 08A9 0005 0022             		bclr	#5,obStatus(a1)	; clear Sonic's pushing flag
00011F08                            
00011F08                            Solid_Debug:
00011F08 7800                       		moveq	#0,d4		; return no collision
00011F0A 4E75                       		rts	
00011F0C                            ; ===========================================================================
00011F0C                            
00011F0C                            Solid_TopBottom:
00011F0C 4A43                       		tst.w	d3		; is Sonic below the object?
00011F0E 6B00                       		bmi.s	Solid_Below	; if yes, branch
00011F10 0C43 0010                  		cmpi.w	#$10,d3		; has Sonic landed on the object?
00011F14 6500                       		bcs.s	Solid_Landed	; if yes, branch
00011F16 60BE                       		bra.s	Solid_Ignore
00011F18                            ; ===========================================================================
00011F18                            
00011F18                            Solid_Below:
00011F18 4A69 0012                  		tst.w	obVelY(a1) ; is Sonic moving vertically?
00011F1C 6700                       		beq.s	Solid_Squash ; if not, branch
00011F1E 6A00                       		bpl.s 	Solid_TopBtmAir ; if moving downwards, branch
00011F20 4A43                       		tst.w	d3 ; is Sonic above the object?
00011F22 6A00                       		bpl.s	Solid_TopBtmAir ; if yes, branch
00011F24 337C 0000 0012             		move.w	#0,obVelY(a1) ; stop Sonic moving
00011F2A                            
00011F2A                            Solid_TopBtmAir:
00011F2A 9769 000C                  		sub.w	d3,obY(a1) ; correct Sonic's position
00011F2E 78FF                       		moveq	#-1,d4
00011F30 4E75                       		rts	
00011F32                            ; ===========================================================================
00011F32                            
00011F32                            Solid_Squash:
00011F32 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011F38 66F0                       		bne.s	Solid_TopBtmAir	; if yes, branch
00011F3A 2F08                       		move.l	a0,-(sp)
00011F3C 2049                       		movea.l	a1,a0
00011F3E 4EB9 0000 0000             		jsr	(KillSonic).l	; kill Sonic
00011F44 205F                       		movea.l	(sp)+,a0
00011F46 78FF                       		moveq	#-1,d4
00011F48 4E75                       		rts	
00011F4A                            ; ===========================================================================
00011F4A                            
00011F4A                            Solid_Landed:
00011F4A 5943                       		subq.w	#4,d3
00011F4C 7200                       		moveq	#0,d1
00011F4E 1228 0014                  		move.b	obActWid(a0),d1
00011F52 3401                       		move.w	d1,d2
00011F54 D442                       		add.w	d2,d2
00011F56 D269 0008                  		add.w	obX(a1),d1
00011F5A 9268 0008                  		sub.w	obX(a0),d1
00011F5E 6B00                       		bmi.s	Solid_Miss	; if Sonic is right of object, branch
00011F60 B242                       		cmp.w	d2,d1		; is Sonic left of object?
00011F62 6400                       		bcc.s	Solid_Miss	; if yes, branch
00011F64 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving upwards?
00011F68 6B00                       		bmi.s	Solid_Miss	; if yes, branch
00011F6A 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011F6E 5369 000C                  		subq.w	#1,obY(a1)
00011F72 6100                       		bsr.s	Solid_ResetFloor
00011F74 117C 0002 0025             		move.b	#2,obSolid(a0) ; set standing flags
00011F7A 08E8 0003 0022             		bset	#3,obStatus(a0)
00011F80 78FF                       		moveq	#-1,d4		; return top/bottom collision
00011F82 4E75                       		rts	
00011F84                            ; ===========================================================================
00011F84                            
00011F84                            Solid_Miss:
00011F84 7800                       		moveq	#0,d4
00011F86 4E75                       		rts	
00011F88                            ; End of function SolidObject
00011F88                            
00011F88                            
00011F88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011F88                            
00011F88                            
00011F88                            Solid_ResetFloor:
00011F88 0829 0003 0022             		btst	#3,obStatus(a1)	; is Sonic standing on something?
00011F8E 6700                       		beq.s	@notonobj	; if not, branch
00011F90                            
00011F90 7000                       		moveq	#0,d0
00011F92 1029 003D                  		move.b	$3D(a1),d0	; get object being stood on
00011F96 ED48                       		lsl.w	#6,d0
00011F98 0680 00FF D000             		addi.l	#(v_objspace&$FFFFFF),d0
00011F9E 2440                       		movea.l	d0,a2
00011FA0 08AA 0003 0022             		bclr	#3,obStatus(a2)	; clear object's standing flags
00011FA6 422A 0025                  		clr.b	obSolid(a2)
00011FAA                            
00011FAA                            	@notonobj:
00011FAA 3008                       		move.w	a0,d0
00011FAC 0440 D000                  		subi.w	#$D000,d0
00011FB0 EC48                       		lsr.w	#6,d0
00011FB2 0240 007F                  		andi.w	#$7F,d0
00011FB6 1340 003D                  		move.b	d0,$3D(a1)	; set object being stood on
00011FBA 137C 0000 0026             		move.b	#0,obAngle(a1)	; clear Sonic's angle
00011FC0 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic
00011FC6 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00011FCC 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011FD2 6700                       		beq.s	@notinair	; if not, branch
00011FD4 2F08                       		move.l	a0,-(sp)
00011FD6 2049                       		movea.l	a1,a0
00011FD8 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l ; reset Sonic as if on floor
00011FDE 205F                       		movea.l	(sp)+,a0
00011FE0                            
00011FE0                            	@notinair:
00011FE0 08E9 0003 0022             		bset	#3,obStatus(a1)	; set object standing flag
00011FE6 08E8 0003 0022             		bset	#3,obStatus(a0)	; set Sonic standing on object flag
00011FEC 4E75                       		rts	
00011FEE                            ; End of function Solid_ResetFloor
00011FEE                            ; End of function Solid_ResetFloor
00011FEE                            
00011FEE                            		include	"_incObj\51 Smashable Green Block.asm"
00011FEE                            ; ---------------------------------------------------------------------------
00011FEE                            ; Object 51 - smashable	green block (MZ)
00011FEE                            ; ---------------------------------------------------------------------------
00011FEE                            
00011FEE                            SmashBlock:
00011FEE 7000                       		moveq	#0,d0
00011FF0 1028 0024                  		move.b	obRoutine(a0),d0
00011FF4 323B 0000                  		move.w	Smab_Index(pc,d0.w),d1
00011FF8 4EBB 1000                  		jsr	Smab_Index(pc,d1.w)
00011FFC 6000 F880                  		bra.w	RememberState
00012000                            ; ===========================================================================
00012000 0000                       Smab_Index:	dc.w Smab_Main-Smab_Index
00012002 0000                       		dc.w Smab_Solid-Smab_Index
00012004 0000                       		dc.w Smab_Points-Smab_Index
00012006                            ; ===========================================================================
00012006                            
00012006                            Smab_Main:	; Routine 0
00012006 5428 0024                  		addq.b	#2,obRoutine(a0)
0001200A 217C 0000 0000 0004        		move.l	#Map_Smab,obMap(a0)
00012012 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00012018 117C 0004 0001             		move.b	#4,obRender(a0)
0001201E 117C 0010 0014             		move.b	#$10,obActWid(a0)
00012024 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001202A 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00012030                            
00012030                            Smab_Solid:	; Routine 2
00012030                            
00012030 =00000032                  sonicAniFrame:	equ $32		; Sonic's current animation number
00012030 =00000034                  @count:		equ $34		; number of blocks hit + previous stuff
00012030                            
00012030 3178 F7D0 0034             		move.w	(v_itembonus).w,$34(a0)
00012036 1178 D01C 0032             		move.b	(v_player+obAnim).w,sonicAniFrame(a0) ; load Sonic's animation number
0001203C 323C 001B                  		move.w	#$1B,d1
00012040 343C 0010                  		move.w	#$10,d2
00012044 363C 0011                  		move.w	#$11,d3
00012048 3828 0008                  		move.w	obX(a0),d4
0001204C 6100 FCC8                  		bsr.w	SolidObject
00012050 0828 0003 0022             		btst	#3,obStatus(a0)	; has Sonic landed on the block?
00012056 6600                       		bne.s	@smash		; if yes, branch
00012058                            
00012058                            	@notspinning:
00012058 4E75                       		rts	
0001205A                            ; ===========================================================================
0001205A                            
0001205A                            @smash:
0001205A 0C28 0000 0032             		cmpi.b	#id_Roll,sonicAniFrame(a0) ; is Sonic rolling/jumping?
00012060 66F6                       		bne.s	@notspinning	; if not, branch
00012062 31E8 0034 F7D0             		move.w	@count(a0),(v_itembonus).w
00012068 08E9 0002 0022             		bset	#2,obStatus(a1)
0001206E 137C 000E 0016             		move.b	#$E,obHeight(a1)
00012074 137C 0007 0017             		move.b	#7,obWidth(a1)
0001207A 137C 0000 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic roll
00012080 337C FD00 0012             		move.w	#-$300,obVelY(a1) ; rebound Sonic
00012086 08E9 0001 0022             		bset	#1,obStatus(a1)
0001208C 08A9 0003 0022             		bclr	#3,obStatus(a1)
00012092 137C 0002 0024             		move.b	#2,obRoutine(a1)
00012098 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001209E 4228 0025                  		clr.b	obSolid(a0)
000120A2 117C 0001 001A             		move.b	#1,obFrame(a0)
000120A8 49F9 0000 0000             		lea	(Smab_Speeds).l,a4 ; load broken fragment speed data
000120AE 7203                       		moveq	#3,d1		; set number of	fragments to 4
000120B0 343C 0038                  		move.w	#$38,d2
000120B4 6100 D2C4                  		bsr.w	SmashObject
000120B8 6100 DCAA                  		bsr.w	FindFreeObj
000120BC 6600                       		bne.s	Smab_Points
000120BE 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
000120C2 3368 0008 0008             		move.w	obX(a0),obX(a1)
000120C8 3368 000C 000C             		move.w	obY(a0),obY(a1)
000120CE 3438 F7D0                  		move.w	(v_itembonus).w,d2
000120D2 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; increment bonus counter
000120D6 0C42 0006                  		cmpi.w	#6,d2		; have fewer than 3 blocks broken?
000120DA 6500                       		bcs.s	@bonus		; if yes, branch
000120DC 7406                       		moveq	#6,d2		; set cap for points
000120DE                            
000120DE                            	@bonus:
000120DE 7000                       		moveq	#0,d0
000120E0 303B 2000                  		move.w	Smab_Scores(pc,d2.w),d0
000120E4 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 blocks been smashed?
000120EA 6500                       		bcs.s	@givepoints	; if not, branch
000120EC 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
000120F0 740A                       		moveq	#10,d2
000120F2                            
000120F2                            	@givepoints:
000120F2 4EB9 0000 0000             		jsr	(AddPoints).l
000120F8 E24A                       		lsr.w	#1,d2
000120FA 1342 001A                  		move.b	d2,obFrame(a1)
000120FE                            
000120FE                            Smab_Points:	; Routine 4
000120FE 6100 D6B6                  		bsr.w	SpeedToPos
00012102 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00012108 6100 D6C0                  		bsr.w	DisplaySprite
0001210C 4A28 0001                  		tst.b	obRender(a0)
00012110 6A00 D6F8                  		bpl.w	DeleteObject
00012114 4E75                       		rts	
00012116                            ; ===========================================================================
00012116 FE00 FE00                  Smab_Speeds:	dc.w -$200, -$200	; x-speed, y-speed
0001211A FF00 FF00                  		dc.w -$100, -$100
0001211E 0200 FE00                  		dc.w $200, -$200
00012122 0100 FF00                  		dc.w $100, -$100
00012126                            
00012126 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
00012126 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
0001212E                            Map_Smab:	include	"_maps\Smashable Green Block.asm"
0001212E                            ; --------------------------------------------------------------------------------
0001212E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001212E                            ; --------------------------------------------------------------------------------
0001212E                            
0001212E                            SME_wdHTM:	
0001212E 0000 0000                  		dc.w SME_wdHTM_6-SME_wdHTM, SME_wdHTM_1B-SME_wdHTM	
00012132 0000                       		dc.w SME_wdHTM_30-SME_wdHTM	
00012134 04                         SME_wdHTM_6:	dc.b 4	
00012135 F005 0000 00               		dc.b $F0, 5, 0, 0, 0	
0001213A 0005 0000 00               		dc.b 0, 5, 0, 0, 0	
0001213F 0005 0000 F0               		dc.b 0, 5, 0, 0, $F0	
00012144 F005 0000 F0               		dc.b $F0, 5, 0, 0, $F0	
00012149 04                         SME_wdHTM_1B:	dc.b 4	
0001214A F005 0000 00               		dc.b $F0, 5, 0, 0, 0	
0001214F 0005 0000 00               		dc.b 0, 5, 0, 0, 0	
00012154 0005 0000 F0               		dc.b 0, 5, 0, 0, $F0	
00012159 F005 0000 F0               		dc.b $F0, 5, 0, 0, $F0	
0001215E 00                         SME_wdHTM_30:	dc.b 0	
00012160 00                         		even
00012160 00                         		even
00012160                            
00012160                            		include	"_incObj\52 Moving Blocks.asm"
00012160                            ; ---------------------------------------------------------------------------
00012160                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00012160                            ; ---------------------------------------------------------------------------
00012160                            
00012160                            MovingBlock:
00012160 7000                       		moveq	#0,d0
00012162 1028 0024                  		move.b	obRoutine(a0),d0
00012166 323B 0000                  		move.w	MBlock_Index(pc,d0.w),d1
0001216A 4EFB 1000                  		jmp	MBlock_Index(pc,d1.w)
0001216E                            ; ===========================================================================
0001216E 0000                       MBlock_Index:	dc.w MBlock_Main-MBlock_Index
00012170 0000                       		dc.w MBlock_Platform-MBlock_Index
00012172 0000                       		dc.w MBlock_StandOn-MBlock_Index
00012174                            
00012174 =00000030                  mblock_origX:	equ $30
00012174 =00000032                  mblock_origY:	equ $32
00012174                            
00012174 1000                       MBlock_Var:	dc.b $10, 0		; object width,	frame number
00012176 2001                       		dc.b $20, 1
00012178 2002                       		dc.b $20, 2
0001217A 4003                       		dc.b $40, 3
0001217C 3004                       		dc.b $30, 4
0001217E                            ; ===========================================================================
0001217E                            
0001217E                            MBlock_Main:	; Routine 0
0001217E 5428 0024                  		addq.b	#2,obRoutine(a0)
00012182 217C 0000 0000 0004        		move.l	#Map_MBlock,obMap(a0)
0001218A 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00012190 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012196 6600                       		bne.s	loc_FE44
00012198 217C 0000 0000 0004        		move.l	#Map_MBlockLZ,obMap(a0) ; LZ specific code
000121A0 317C 43BC 0002             		move.w	#$43BC,obGfx(a0)
000121A6 117C 0007 0016             		move.b	#7,obHeight(a0)
000121AC                            
000121AC                            loc_FE44:
000121AC 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
000121B2 6600                       		bne.s	loc_FE60
000121B4 317C 22C0 0002             		move.w	#$22C0,obGfx(a0) ; SBZ specific code (object 5228)
000121BA 0C28 0028 0028             		cmpi.b	#$28,obSubtype(a0) ; is object 5228 ?
000121C0 6700                       		beq.s	loc_FE60	; if yes, branch
000121C2 317C 4460 0002             		move.w	#$4460,obGfx(a0) ; SBZ specific code (object 523x)
000121C8                            
000121C8                            loc_FE60:
000121C8 117C 0004 0001             		move.b	#4,obRender(a0)
000121CE 7000                       		moveq	#0,d0
000121D0 1028 0028                  		move.b	obSubtype(a0),d0
000121D4 E648                       		lsr.w	#3,d0
000121D6 0240 001E                  		andi.w	#$1E,d0
000121DA 45FB 0098                  		lea	MBlock_Var(pc,d0.w),a2
000121DE 115A 0014                  		move.b	(a2)+,obActWid(a0)
000121E2 115A 001A                  		move.b	(a2)+,obFrame(a0)
000121E6 317C 0200 0018             		move.w	#$200,obPriority(a0)
000121EC 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
000121F2 3168 000C 0032             		move.w	obY(a0),mblock_origY(a0)
000121F8 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
000121FE                            
000121FE                            MBlock_Platform: ; Routine 2
000121FE 6100 0000                  		bsr.w	MBlock_Move
00012202 7200                       		moveq	#0,d1
00012204 1228 0014                  		move.b	obActWid(a0),d1
00012208 4EB9 0000 8C24             		jsr	(PlatformObject).l
0001220E 6000                       		bra.s	MBlock_ChkDel
00012210                            ; ===========================================================================
00012210                            
00012210                            MBlock_StandOn:	; Routine 4
00012210 7200                       		moveq	#0,d1
00012212 1228 0014                  		move.b	obActWid(a0),d1
00012216 4EB9 0000 8D98             		jsr	(ExitPlatform).l
0001221C 3F28 0008                  		move.w	obX(a0),-(sp)
00012220 6100 0000                  		bsr.w	MBlock_Move
00012224 341F                       		move.w	(sp)+,d2
00012226 4EB9 0000 9302             		jsr	(MvSonicOnPtfm2).l
0001222C                            
0001222C                            MBlock_ChkDel:
0001224A 6000 D57E                  		bra.w	DisplaySprite
0001224E                            ; ===========================================================================
0001224E                            
0001224E                            MBlock_Move:
0001224E 7000                       		moveq	#0,d0
00012250 1028 0028                  		move.b	obSubtype(a0),d0
00012254 0240 000F                  		andi.w	#$F,d0
00012258 D040                       		add.w	d0,d0
0001225A 323B 0000                  		move.w	MBlock_TypeIndex(pc,d0.w),d1
0001225E 4EFB 1000                  		jmp	MBlock_TypeIndex(pc,d1.w)
00012262                            ; ===========================================================================
00012262 0000 0000                  MBlock_TypeIndex:dc.w MBlock_Type00-MBlock_TypeIndex, MBlock_Type01-MBlock_TypeIndex
00012266 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type03-MBlock_TypeIndex
0001226A 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type05-MBlock_TypeIndex
0001226E 0000 0000                  		dc.w MBlock_Type06-MBlock_TypeIndex, MBlock_Type07-MBlock_TypeIndex
00012272 0000 0000                  		dc.w MBlock_Type08-MBlock_TypeIndex, MBlock_Type02-MBlock_TypeIndex
00012276 0000                       		dc.w MBlock_Type0A-MBlock_TypeIndex
00012278                            ; ===========================================================================
00012278                            
00012278                            MBlock_Type00:
00012278 4E75                       		rts	
0001227A                            ; ===========================================================================
0001227A                            
0001227A                            MBlock_Type01:
0001227A 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0001227E 323C 0060                  		move.w	#$60,d1
00012282 0828 0000 0022             		btst	#0,obStatus(a0)
00012288 6700                       		beq.s	loc_FF26
0001228A 4440                       		neg.w	d0
0001228C D041                       		add.w	d1,d0
0001228E                            
0001228E                            loc_FF26:
0001228E 3228 0030                  		move.w	mblock_origX(a0),d1
00012292 9240                       		sub.w	d0,d1
00012294 3141 0008                  		move.w	d1,obX(a0)
00012298 4E75                       		rts	
0001229A                            ; ===========================================================================
0001229A                            
0001229A                            MBlock_Type02:
0001229A 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; is Sonic standing on the platform?
000122A0 6600                       		bne.s	MBlock_02_Wait
000122A2 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
000122A6                            
000122A6                            MBlock_02_Wait:
000122A6 4E75                       		rts	
000122A8                            ; ===========================================================================
000122A8                            
000122A8                            MBlock_Type03:
000122A8 7600                       		moveq	#0,d3
000122AA 1628 0014                  		move.b	obActWid(a0),d3
000122AE 6100 0000                  		bsr.w	ObjHitWallRight
000122B2 4A41                       		tst.w	d1		; has the platform hit a wall?
000122B4 6B00                       		bmi.s	MBlock_03_End	; if yes, branch
000122B6 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
000122BA 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
000122C0 4E75                       		rts	
000122C2                            ; ===========================================================================
000122C2                            
000122C2                            MBlock_03_End:
000122C2 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving	type)
000122C6 4E75                       		rts	
000122C8                            ; ===========================================================================
000122C8                            
000122C8                            MBlock_Type05:
000122C8 7600                       		moveq	#0,d3
000122CA 1628 0014                  		move.b	obActWid(a0),d3
000122CE 6100 0000                  		bsr.w	ObjHitWallRight
000122D2 4A41                       		tst.w	d1		; has the platform hit a wall?
000122D4 6B00                       		bmi.s	MBlock_05_End	; if yes, branch
000122D6 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
000122DA 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
000122E0 4E75                       		rts	
000122E2                            ; ===========================================================================
000122E2                            
000122E2                            MBlock_05_End:
000122E2 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 06 (falling)
000122E6 4E75                       		rts	
000122E8                            ; ===========================================================================
000122E8                            
000122E8                            MBlock_Type06:
000122E8 6100 D4CC                  		bsr.w	SpeedToPos
000122EC 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make the platform fall
000122F2 6100 0000                  		bsr.w	ObjFloorDist
000122F6 4A41                       		tst.w	d1		; has platform hit the floor?
000122F8 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
000122FC D368 000C                  		add.w	d1,obY(a0)
00012300 4268 0012                  		clr.w	obVelY(a0)	; stop platform	falling
00012304 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving)
00012308                            
00012308                            locret_FFA0:
00012308 4E75                       		rts	
0001230A                            ; ===========================================================================
0001230A                            
0001230A                            MBlock_Type07:
0001230A 4A38 F7E2                  		tst.b	(f_switch+2).w	; has switch number 02 been pressed?
0001230E 6700                       		beq.s	MBlock_07_ChkDel
00012310 5728 0028                  		subq.b	#3,obSubtype(a0) ; if yes, change object type to 04
00012314                            
00012314                            MBlock_07_ChkDel:
00012314 588F                       		addq.l	#4,sp
00012334 4E75                       		rts	
00012336                            ; ===========================================================================
00012336                            
00012336                            MBlock_Type08:
00012336 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
0001233A 323C 0080                  		move.w	#$80,d1
0001233E 0828 0000 0022             		btst	#0,obStatus(a0)
00012344 6700                       		beq.s	loc_FFE2
00012346 4440                       		neg.w	d0
00012348 D041                       		add.w	d1,d0
0001234A                            
0001234A                            loc_FFE2:
0001234A 3228 0032                  		move.w	mblock_origY(a0),d1
0001234E 9240                       		sub.w	d0,d1
00012350 3141 000C                  		move.w	d1,obY(a0)
00012354 4E75                       		rts	
00012356                            ; ===========================================================================
00012356                            
00012356                            MBlock_Type0A:
00012356 7600                       		moveq	#0,d3
00012358 1628 0014                  		move.b	obActWid(a0),d3
0001235C D643                       		add.w	d3,d3
0001235E 7208                       		moveq	#8,d1
00012360 0828 0000 0022             		btst	#0,obStatus(a0)
00012366 6700                       		beq.s	loc_10004
00012368 4441                       		neg.w	d1
0001236A 4443                       		neg.w	d3
0001236C                            
0001236C                            loc_10004:
0001236C 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00012370 6600                       		bne.s	MBlock_0A_Back	; if yes, branch
00012372 3028 0008                  		move.w	obX(a0),d0
00012376 9068 0030                  		sub.w	mblock_origX(a0),d0
0001237A B043                       		cmp.w	d3,d0
0001237C 6700                       		beq.s	MBlock_0A_Wait
0001237E D368 0008                  		add.w	d1,obX(a0)	; move platform
00012382 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00012388 4E75                       		rts	
0001238A                            ; ===========================================================================
0001238A                            
0001238A                            MBlock_0A_Wait:
0001238A 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
0001238E 6600                       		bne.s	locret_1002E	; if time remains, branch
00012390 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00012396                            
00012396                            locret_1002E:
00012396 4E75                       		rts	
00012398                            ; ===========================================================================
00012398                            
00012398                            MBlock_0A_Back:
00012398 3028 0008                  		move.w	obX(a0),d0
0001239C 9068 0030                  		sub.w	mblock_origX(a0),d0
000123A0 6700                       		beq.s	MBlock_0A_Reset
000123A2 9368 0008                  		sub.w	d1,obX(a0)	; return platform to its original position
000123A6 4E75                       		rts	
000123A8                            ; ===========================================================================
000123A8                            
000123A8                            MBlock_0A_Reset:
000123A8 4268 0036                  		clr.w	$36(a0)
000123AC 5328 0028                  		subq.b	#1,obSubtype(a0)
000123B0 4E75                       		rts	
000123B0 4E75                       		rts	
000123B2                            Map_MBlock:	include	"_maps\Moving Blocks (MZ and SBZ).asm"
000123B2                            ; ---------------------------------------------------------------------------
000123B2                            ; Sprite mappings - moving blocks (MZ, SBZ)
000123B2                            ; ---------------------------------------------------------------------------
000123B2                            Map_MBlock_internal:
000123B2 0000                       		dc.w @mz1-Map_MBlock_internal
000123B4 0000                       		dc.w @mz2-Map_MBlock_internal
000123B6 0000                       		dc.w @sbz-Map_MBlock_internal
000123B8 0000                       		dc.w @sbzwide-Map_MBlock_internal
000123BA 0000                       		dc.w @mz3-Map_MBlock_internal
000123BC 01                         @mz1:		dc.b 1
000123BD F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000123C2 02                         @mz2:		dc.b 2
000123C3 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000123C8 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000123CD 04                         @sbz:		dc.b 4
000123CE F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
000123D3 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000123D8 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000123DD 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000123E2 04                         @sbzwide:	dc.b 4
000123E3 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
000123E8 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
000123ED F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000123F2 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
000123F7 03                         @mz3:		dc.b 3
000123F8 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
000123FD F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00012402 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00012408 00                         		even
00012408 00                         		even
00012408                            Map_MBlockLZ:	include	"_maps\Moving Blocks (LZ).asm"
00012408                            ; ---------------------------------------------------------------------------
00012408                            ; Sprite mappings - moving block (LZ)
00012408                            ; ---------------------------------------------------------------------------
00012408                            Map_MBlockLZ_internal:
00012408 0000                       		dc.w @0-Map_MBlockLZ_internal
0001240A 01                         @0:		dc.b 1
0001240B F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00012410                            		even
00012410                            		even
00012410                            
00012410                            		include	"_incObj\55 Basaran.asm"
00012410                            ; ---------------------------------------------------------------------------
00012410                            ; Object 55 - Basaran enemy (MZ)
00012410                            ; ---------------------------------------------------------------------------
00012410                            
00012410                            Basaran:
00012410 7000                       		moveq	#0,d0
00012412 1028 0024                  		move.b	obRoutine(a0),d0
00012416 323B 0000                  		move.w	Bas_Index(pc,d0.w),d1
0001241A 4EFB 1000                  		jmp	Bas_Index(pc,d1.w)
0001241E                            ; ===========================================================================
0001241E 0000                       Bas_Index:	dc.w Bas_Main-Bas_Index
00012420 0000                       		dc.w Bas_Action-Bas_Index
00012422                            ; ===========================================================================
00012422                            
00012422                            Bas_Main:	; Routine 0
00012422 5428 0024                  		addq.b	#2,obRoutine(a0)
00012426 217C 0000 0000 0004        		move.l	#Map_Bas,obMap(a0)
0001242E 317C 84B8 0002             		move.w	#$84B8,obGfx(a0)
00012434 117C 0004 0001             		move.b	#4,obRender(a0)
0001243A 117C 000C 0016             		move.b	#$C,obHeight(a0)
00012440 317C 0100 0018             		move.w	#$100,obPriority(a0)
00012446 117C 000B 0020             		move.b	#$B,obColType(a0)
0001244C 117C 0010 0014             		move.b	#$10,obActWid(a0)
00012452                            
00012452                            Bas_Action:	; Routine 2
00012452 7000                       		moveq	#0,d0
00012454 1028 0025                  		move.b	ob2ndRout(a0),d0
00012458 323B 0000                  		move.w	@index(pc,d0.w),d1
0001245C 4EBB 1000                  		jsr	@index(pc,d1.w)
00012460 43F9 0000 0000             		lea	(Ani_Bas).l,a1
00012466 6100 A418                  		bsr.w	AnimateSprite
0001246A 6000 F412                  		bra.w	RememberState
0001246E                            ; ===========================================================================
0001246E 0000                       @index:		dc.w @dropcheck-@index
00012470 0000                       		dc.w @dropfly-@index
00012472 0000                       		dc.w @flapsound-@index
00012474 0000                       		dc.w @flyup-@index
00012476                            ; ===========================================================================
00012476                            
00012476                            @dropcheck:
00012476 343C 0080                  		move.w	#$80,d2
0001247A 6100 0000                  		bsr.w	@chkdistance	; is Sonic < $80 pixels from basaran?
0001247E 6400                       		bcc.s	@nodrop		; if not, branch
00012480 3038 D00C                  		move.w	(v_player+obY).w,d0
00012484 3140 0036                  		move.w	d0,$36(a0)
00012488 9068 000C                  		sub.w	obY(a0),d0
0001248C 6500                       		bcs.s	@nodrop
0001248E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic < $80 pixels from basaran?
00012492 6400                       		bcc.s	@nodrop		; if not, branch
00012494 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00012498 6600                       		bne.s	@nodrop		; if yes, branch
0001249A                            
0001249A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001249E D007                       		add.b	d7,d0
000124A0 0200 0007                  		andi.b	#7,d0
000124A4 6600                       		bne.s	@nodrop
000124A6 117C 0001 001C             		move.b	#1,obAnim(a0)
000124AC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000124B0                            
000124B0                            	@nodrop:
000124B0 4E75                       		rts	
000124B2                            ; ===========================================================================
000124B2                            
000124B2                            @dropfly:
000124B2 6100 D302                  		bsr.w	SpeedToPos
000124B6 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make basaran fall
000124BC 343C 0080                  		move.w	#$80,d2
000124C0 6100 0000                  		bsr.w	@chkdistance
000124C4 3028 0036                  		move.w	$36(a0),d0
000124C8 9068 000C                  		sub.w	obY(a0),d0
000124CC 6500                       		bcs.s	@chkdel
000124CE 0C40 0010                  		cmpi.w	#$10,d0		; is basaran close to Sonic vertically?
000124D2 6400                       		bcc.s	@dropmore	; if not, branch
000124D4 3141 0010                  		move.w	d1,obVelX(a0)	; make basaran fly horizontally
000124D8 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop basaran falling
000124DE 117C 0002 001C             		move.b	#2,obAnim(a0)
000124E4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000124E8                            
000124E8                            	@dropmore:
000124E8 4E75                       		rts	
000124EA                            
000124EA                            	@chkdel:
000124EA 4A28 0001                  		tst.b	obRender(a0)
000124EE 6A00 D31A                  		bpl.w	DeleteObject
000124F2 4E75                       		rts	
000124F4                            ; ===========================================================================
000124F4                            
000124F4                            @flapsound:
000124F4 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000124F8 0200 000F                  		andi.b	#$F,d0
000124FC 6600                       		bne.s	@nosound
00012508                            
00012508                            	@nosound:
00012508 6100 D2AC                  		bsr.w	SpeedToPos
0001250C 3038 D008                  		move.w	(v_player+obX).w,d0
00012510 9068 0008                  		sub.w	obX(a0),d0
00012514 6400                       		bcc.s	@isright	; if Sonic is right of basaran, branch
00012516 4440                       		neg.w	d0
00012518                            
00012518                            	@isright:
00012518 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of basaran?
0001251C 6500                       		bcs.s	@dontflyup	; if yes, branch
0001251E 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012522 D007                       		add.b	d7,d0
00012524 0200 0007                  		andi.b	#7,d0
00012528 6600                       		bne.s	@dontflyup
0001252A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001252E                            
0001252E                            @dontflyup:
0001252E 4E75                       		rts	
00012530                            ; ===========================================================================
00012530                            
00012530                            @flyup:
00012530 6100 D284                  		bsr.w	SpeedToPos
00012534 0468 0018 0012             		subi.w	#$18,obVelY(a0)	; make basaran fly upwards
0001253A 6100 0000                  		bsr.w	ObjHitCeiling
0001253E 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00012540 6A00                       		bpl.s	@noceiling	; if not, branch
00012542 9368 000C                  		sub.w	d1,obY(a0)
00012546 0268 FFF8 0008             		andi.w	#$FFF8,obX(a0)
0001254C 4268 0010                  		clr.w	obVelX(a0)	; stop basaran moving
00012550 4268 0012                  		clr.w	obVelY(a0)
00012554 4228 001C                  		clr.b	obAnim(a0)
00012558 4228 0025                  		clr.b	ob2ndRout(a0)
0001255C                            
0001255C                            	@noceiling:
0001255C 4E75                       		rts	
0001255E                            ; ===========================================================================
0001255E                            
0001255E                            ; Subroutine to check Sonic's distance from the basaran
0001255E                            
0001255E                            ; input:
0001255E                            ;	d2 = distance to compare
0001255E                            
0001255E                            ; output:
0001255E                            ;	d0 = distance between Sonic and basaran
0001255E                            ;	d1 = speed/direction for basaran to fly
0001255E                            
0001255E                            @chkdistance:
0001255E 323C 0100                  		move.w	#$100,d1
00012562 08E8 0000 0022             		bset	#0,obStatus(a0)
00012568 3038 D008                  		move.w	(v_player+obX).w,d0
0001256C 9068 0008                  		sub.w	obX(a0),d0
00012570 6400                       		bcc.s	@right		; if Sonic is right of basaran, branch
00012572 4440                       		neg.w	d0
00012574 4441                       		neg.w	d1
00012576 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001257C                            
0001257C                            	@right:
0001257C B042                       		cmp.w	d2,d0
0001257E 4E75                       		rts	
00012580                            ; ===========================================================================
00012580                            ; unused crap
00012580 6100 D234                  		bsr.w	SpeedToPos
00012584 6100 D244                  		bsr.w	DisplaySprite
00012588 4A28 0001                  		tst.b	obRender(a0)
0001258C 6A00 D27C                  		bpl.w	DeleteObject
00012590 4E75                       		rts	
00012590 4E75                       		rts	
00012592                            		include	"_anim\Basaran.asm"
00012592                            ; ---------------------------------------------------------------------------
00012592                            ; Animation script - Basaran enemy
00012592                            ; ---------------------------------------------------------------------------
00012592 0000                       Ani_Bas:	dc.w @still-Ani_Bas
00012594 0000                       		dc.w @fall-Ani_Bas
00012596 0000                       		dc.w @fly-Ani_Bas
00012598 0F00 FF                    @still:		dc.b $F, 0, afEnd
0001259C 00                         		even
0001259C 0F01 FF                    @fall:		dc.b $F, 1, afEnd
000125A0 00                         		even
000125A0 0301 0203 02FF             @fly:		dc.b 3,	1, 2, 3, 2, afEnd
000125A6                            		even
000125A6                            		even
000125A6                            Map_Bas:	include	"_maps\Basaran.asm"
000125A6                            ; --------------------------------------------------------------------------------
000125A6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000125A6                            ; --------------------------------------------------------------------------------
000125A6                            
000125A6                            SME_RhYYA:	
000125A6 0000 0000                  		dc.w SME_RhYYA_8-SME_RhYYA, SME_RhYYA_E-SME_RhYYA	
000125AA 0000 0000                  		dc.w SME_RhYYA_1E-SME_RhYYA, SME_RhYYA_33-SME_RhYYA	
000125AE 01                         SME_RhYYA_8:	dc.b 1	
000125AF F406 2000 F8               		dc.b $F4, 6, $20, 0, $F8	
000125B4 03                         SME_RhYYA_E:	dc.b 3	
000125B5 F20E 2006 F4               		dc.b $F2, $E, $20, 6, $F4	
000125BA 0A04 2012 FC               		dc.b $A, 4, $20, $12, $FC	
000125BF 0200 2027 0C               		dc.b 2, 0, $20, $27, $C	
000125C4 04                         SME_RhYYA_1E:	dc.b 4	
000125C5 F804 2014 F8               		dc.b $F8, 4, $20, $14, $F8	
000125CA 000C 2016 F0               		dc.b 0, $C, $20, $16, $F0	
000125CF 0804 201A 00               		dc.b 8, 4, $20, $1A, 0	
000125D4 0000 2028 0C               		dc.b 0, 0, $20, $28, $C	
000125D9 04                         SME_RhYYA_33:	dc.b 4	
000125DA F609 201C F5               		dc.b $F6, 9, $20, $1C, $F5	
000125DF 0608 2022 F4               		dc.b 6, 8, $20, $22, $F4	
000125E4 0E04 2025 F4               		dc.b $E, 4, $20, $25, $F4	
000125E9 FE00 2027 0C               		dc.b $FE, 0, $20, $27, $C	
000125EE                            		even
000125EE                            		even
000125EE                            
000125EE                            		include	"_incObj\56 Floating Blocks and Doors.asm"
000125EE                            ; ---------------------------------------------------------------------------
000125EE                            ; Object 56 - floating blocks (SYZ/SLZ), large doors (LZ)
000125EE                            ; ---------------------------------------------------------------------------
000125EE                            
000125EE                            FloatingBlock:
000125EE 7000                       		moveq	#0,d0
000125F0 1028 0024                  		move.b	obRoutine(a0),d0
000125F4 323B 0000                  		move.w	FBlock_Index(pc,d0.w),d1
000125F8 4EFB 1000                  		jmp	FBlock_Index(pc,d1.w)
000125FC                            ; ===========================================================================
000125FC 0000                       FBlock_Index:	dc.w FBlock_Main-FBlock_Index
000125FE 0000                       		dc.w FBlock_Action-FBlock_Index
00012600                            
00012600 =00000034                  fb_origX:	equ $34		; original x-axis position
00012600 =00000030                  fb_origY:	equ $30		; original y-axis position
00012600 =0000003A                  fb_height:	equ $3A		; total object height
00012600 =0000003C                  fb_type:		equ $3C		; subtype (2nd digit only)
00012600                            
00012600                            FBlock_Var:	; width/2, height/2
00012600 1010                       		dc.b  $10, $10	; subtype 0x/8x
00012602 2020                       		dc.b  $20, $20	; subtype 1x/9x
00012604 1020                       		dc.b  $10, $20	; subtype 2x/Ax
00012606 201A                       		dc.b  $20, $1A	; subtype 3x/Bx
00012608 1027                       		dc.b  $10, $27	; subtype 4x/Cx
0001260A 1010                       		dc.b  $10, $10	; subtype 5x/Dx
0001260C 0820                       		dc.b	8, $20	; subtype 6x/Ex
0001260E 4010                       		dc.b  $40, $10	; subtype 7x/Fx
00012610                            ; ===========================================================================
00012610                            
00012610                            FBlock_Main:	; Routine 0
00012610 5428 0024                  		addq.b	#2,obRoutine(a0)
00012614 217C 0000 0000 0004        		move.l	#Map_FBlock,obMap(a0)
0001261C 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012622 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012628 6600                       		bne.s	@notLZ
0001262A 317C 43C4 0002             		move.w	#$43C4,obGfx(a0) ; LZ specific code
00012630                            
00012630                            	@notLZ:
00012630 117C 0004 0001             		move.b	#4,obRender(a0)
00012636 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001263C 7000                       		moveq	#0,d0
0001263E 1028 0028                  		move.b	obSubtype(a0),d0 ; get subtype
00012642 E648                       		lsr.w	#3,d0
00012644 0240 000E                  		andi.w	#$E,d0		; read only the 1st digit
00012648 45FB 00B6                  		lea	FBlock_Var(pc,d0.w),a2 ; get size data
0001264C 115A 0014                  		move.b	(a2)+,obActWid(a0)
00012650 1152 0016                  		move.b	(a2),obHeight(a0)
00012654 E248                       		lsr.w	#1,d0
00012656 1140 001A                  		move.b	d0,obFrame(a0)
0001265A 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
00012660 3168 000C 0030             		move.w	obY(a0),fb_origY(a0)
00012666 7000                       		moveq	#0,d0
00012668 1012                       		move.b	(a2),d0
0001266A D040                       		add.w	d0,d0
0001266C 3140 003A                  		move.w	d0,fb_height(a0)
00012670 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
00012676 6600                       			bne.s	@dontdelete
00012678 0C68 1BB8 0008             			cmpi.w	#$1BB8,obX(a0)
0001267E 6600                       			bne.s	@notatpos
00012680 4A38 F7CE                  			tst.b	($FFFFF7CE).w
00012684 6700                       			beq.s	@dontdelete
00012686 4EF9 0000 F80A             			jmp	(DeleteObject).l
0001268C                            	@notatpos:
0001268C 4228 0028                  			clr.b	obSubtype(a0)
00012690 4A38 F7CE                  			tst.b	($FFFFF7CE).w
00012694 6600                       			bne.s	@dontdelete
00012696 4EF9 0000 F80A             			jmp	(DeleteObject).l
0001269C                            	@dontdelete:
0001269C 7000                       		moveq	#0,d0
0001269E 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000126A4 6700                       		beq.s	@stillnotLZ
000126A6 1028 0028                  		move.b	obSubtype(a0),d0 ; SYZ/SLZ specific code
000126AA 0240 000F                  		andi.w	#$F,d0
000126AE 5140                       		subq.w	#8,d0
000126B0 6500                       		bcs.s	@stillnotLZ
000126B2 E548                       		lsl.w	#2,d0
000126B4 45F8 FE8A                  		lea	(v_oscillate+$2C).w,a2
000126B8 45F2 0000                  		lea	(a2,d0.w),a2
000126BC 4A52                       		tst.w	(a2)
000126BE 6A00                       		bpl.s	@stillnotLZ
000126C0 0868 0000 0022             		bchg	#0,obStatus(a0)
000126C6                            
000126C6                            	@stillnotLZ:
000126C6 1028 0028                  		move.b	obSubtype(a0),d0
000126CA 6A00                       		bpl.s	FBlock_Action
000126CC 0200 000F                  		andi.b	#$F,d0
000126D0 1140 003C                  		move.b	d0,fb_type(a0)
000126D4 117C 0005 0028             		move.b	#5,obSubtype(a0)
000126DA 0C28 0007 001A             		cmpi.b	#7,obFrame(a0)
000126E0 6600                       		bne.s	@chkstate
000126E2 117C 000C 0028             		move.b	#$C,obSubtype(a0)
000126E8 317C 0080 003A             		move.w	#$80,fb_height(a0)
000126EE                            
000126EE                            @chkstate:
000126EE 45F8 FC00                  		lea	(v_objstate).w,a2
000126F2 7000                       		moveq	#0,d0
000126F4 1028 0023                  		move.b	obRespawnNo(a0),d0
000126F8 6700                       		beq.s	FBlock_Action
000126FA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012700 0832 0000 0002             		btst	#0,2(a2,d0.w)
00012706 6700                       		beq.s	FBlock_Action
00012708 5228 0028                  		addq.b	#1,obSubtype(a0)
0001270C 4268 003A                  		clr.w	fb_height(a0)
00012710                            
00012710                            FBlock_Action:	; Routine 2
00012710 3F28 0008                  		move.w	obX(a0),-(sp)
00012714 7000                       		moveq	#0,d0
00012716 1028 0028                  		move.b	obSubtype(a0),d0 ; get object subtype
0001271A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001271E D040                       		add.w	d0,d0
00012720 323B 0000                  		move.w	@index(pc,d0.w),d1
00012724 4EBB 1000                  		jsr	@index(pc,d1.w)	; move block subroutines
00012728 381F                       		move.w	(sp)+,d4
0001272A 4A28 0001                  		tst.b	obRender(a0)
0001272E 6A00                       		bpl.s	@chkdel
00012730 7200                       		moveq	#0,d1
00012732 1228 0014                  		move.b	obActWid(a0),d1
00012736 0641 000B                  		addi.w	#$B,d1
0001273A 7400                       		moveq	#0,d2
0001273C 1428 0016                  		move.b	obHeight(a0),d2
00012740 3602                       		move.w	d2,d3
00012742 5243                       		addq.w	#1,d3
00012744 6100 F5D0                  		bsr.w	SolidObject
00012748                            
00012748                            	@chkdel:
00012764                            		@display:
00012764 6000 D064                  			bra.w	DisplaySprite
00012768                            		@chkdel2:
00012768 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
0001276E 6600                       			bne.s	@delete
00012770 4A28 0038                  			tst.b	$38(a0)
00012774 66EE                       			bne.s	@display
00012776                            		@delete:
00012776 4EF9 0000 F80A             			jmp	(DeleteObject).l
0001277C                            ; ===========================================================================
0001277C 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00012780 0000 0000                  		dc.w @type02-@index, @type03-@index
00012784 0000 0000                  		dc.w @type04-@index, @type05-@index
00012788 0000 0000                  		dc.w @type06-@index, @type07-@index
0001278C 0000 0000                  		dc.w @type08-@index, @type09-@index
00012790 0000 0000                  		dc.w @type0A-@index, @type0B-@index
00012794 0000 0000                  		dc.w @type0C-@index, @type0D-@index
00012798                            ; ===========================================================================
00012798                            
00012798                            @type00:
00012798                            ; doesn't move
00012798 4E75                       		rts	
0001279A                            ; ===========================================================================
0001279A                            
0001279A                            @type01:
0001279A                            ; moves side-to-side
0001279A 323C 0040                  		move.w	#$40,d1		; set move distance
0001279E 7000                       		moveq	#0,d0
000127A0 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
000127A4 6000                       		bra.s	@moveLR
000127A6                            ; ===========================================================================
000127A6                            
000127A6                            @type02:
000127A6                            ; moves side-to-side
000127A6 323C 0080                  		move.w	#$80,d1		; set move distance
000127AA 7000                       		moveq	#0,d0
000127AC 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
000127B0                            
000127B0                            	@moveLR:
000127B0 0828 0000 0022             		btst	#0,obStatus(a0)
000127B6 6700                       		beq.s	@noflip
000127B8 4440                       		neg.w	d0
000127BA D041                       		add.w	d1,d0
000127BC                            
000127BC                            	@noflip:
000127BC 3228 0034                  		move.w	fb_origX(a0),d1
000127C0 9240                       		sub.w	d0,d1
000127C2 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
000127C6 4E75                       		rts	
000127C8                            ; ===========================================================================
000127C8                            
000127C8                            @type03:
000127C8                            ; moves up/down
000127C8 323C 0040                  		move.w	#$40,d1		; set move distance
000127CC 7000                       		moveq	#0,d0
000127CE 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
000127D2 6000                       		bra.s	@moveUD
000127D4                            ; ===========================================================================
000127D4                            
000127D4                            @type04:
000127D4                            ; moves up/down
000127D4 323C 0080                  		move.w	#$80,d1		; set move distance
000127D8 7000                       		moveq	#0,d0
000127DA 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
000127DE                            
000127DE                            	@moveUD:
000127DE 0828 0000 0022             		btst	#0,obStatus(a0)
000127E4 6700                       		beq.s	@noflip04
000127E6 4440                       		neg.w	d0
000127E8 D041                       		add.w	d1,d0
000127EA                            
000127EA                            	@noflip04:
000127EA 3228 0030                  		move.w	fb_origY(a0),d1
000127EE 9240                       		sub.w	d0,d1
000127F0 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
000127F4 4E75                       		rts	
000127F6                            ; ===========================================================================
000127F6                            
000127F6                            @type05:
000127F6                            ; moves up when a switch is pressed
000127F6 4A28 0038                  		tst.b	$38(a0)
000127FA 6600                       		bne.s	@loc_104A4
000127FC 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
00012802 6600                       		bne.s	@aaa		; if not, branch
00012804 0C28 0003 003C             		cmpi.b	#3,fb_type(a0)
0001280A 6600                       		bne.s	@aaa
0001280C 4238 F7C9                  		clr.b	(f_wtunnelallow).w
00012810 3038 D008                  		move.w	(v_player+obX).w,d0
00012814 B068 0008                  		cmp.w	obX(a0),d0
00012818 6400                       		bcc.s	@aaa
0001281A 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w
00012820                            
00012820                            	@aaa:
00012820 45F8 F7E0                  		lea	(f_switch).w,a2
00012824 7000                       		moveq	#0,d0
00012826 1028 003C                  		move.b	fb_type(a0),d0
0001282A 0832 0000 0000             		btst	#0,(a2,d0.w)
00012830 6700                       		beq.s	@loc_104AE
00012832 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
00012838 6600                       		bne.s	@loc_1049E	; if not, branch
0001283A 0C00 0003                  		cmpi.b	#3,d0
0001283E 6600                       		bne.s	@loc_1049E
00012840 4238 F7C9                  		clr.b	(f_wtunnelallow).w
00012844                            
00012844                            @loc_1049E:
00012844 117C 0001 0038             		move.b	#1,$38(a0)
0001284A                            
0001284A                            @loc_104A4:
0001284A 4A68 003A                  		tst.w	fb_height(a0)
0001284E 6700                       		beq.s	@loc_104C8
00012850 5568 003A                  		subq.w	#2,fb_height(a0)
00012854                            
00012854                            @loc_104AE:
00012854 3028 003A                  		move.w	fb_height(a0),d0
00012858 0828 0000 0022             		btst	#0,$22(a0)
0001285E 6700                       		beq.s	@loc_104BC
00012860 4440                       		neg.w	d0
00012862                            
00012862                            @loc_104BC:
00012862 3228 0030                  		move.w	fb_origY(a0),d1
00012866 D240                       		add.w	d0,d1
00012868 3141 000C                  		move.w	d1,obY(a0)
0001286C 4E75                       		rts	
0001286E                            ; ===========================================================================
0001286E                            
0001286E                            @loc_104C8:
0001286E 5228 0028                  		addq.b	#1,$28(a0)
00012872 4228 0038                  		clr.b	$38(a0)
00012876 45F8 FC00                  		lea	(v_objstate).w,a2
0001287A 7000                       		moveq	#0,d0
0001287C 1028 0023                  		move.b	obRespawnNo(a0),d0
00012880 67D2                       		beq.s	@loc_104AE
00012882 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00012888 60CA                       		bra.s	@loc_104AE
0001288A                            ; ===========================================================================
0001288A                            
0001288A                            @type06:
0001288A 4A28 0038                  		tst.b	$38(a0)
0001288E 6600                       		bne.s	@loc_10500
00012890 45F8 F7E0                  		lea	(f_switch).w,a2
00012894 7000                       		moveq	#0,d0
00012896 1028 003C                  		move.b	fb_type(a0),d0
0001289A 4A32 0000                  		tst.b	(a2,d0.w)
0001289E 6A00                       		bpl.s	@loc_10512
000128A0 117C 0001 0038             		move.b	#1,$38(a0)
000128A6                            
000128A6                            @loc_10500:
000128A6 7000                       		moveq	#0,d0
000128A8 1028 0016                  		move.b	obHeight(a0),d0
000128AC D040                       		add.w	d0,d0
000128AE B068 003A                  		cmp.w	fb_height(a0),d0
000128B2 6700                       		beq.s	@loc_1052C
000128B4 5468 003A                  		addq.w	#2,fb_height(a0)
000128B8                            
000128B8                            @loc_10512:
000128B8 3028 003A                  		move.w	fb_height(a0),d0
000128BC 0828 0000 0022             		btst	#0,obStatus(a0)
000128C2 6700                       		beq.s	@loc_10520
000128C4 4440                       		neg.w	d0
000128C6                            
000128C6                            @loc_10520:
000128C6 3228 0030                  		move.w	fb_origY(a0),d1
000128CA D240                       		add.w	d0,d1
000128CC 3141 000C                  		move.w	d1,obY(a0)
000128D0 4E75                       		rts	
000128D2                            ; ===========================================================================
000128D2                            
000128D2                            @loc_1052C:
000128D2 5328 0028                  		subq.b	#1,obSubtype(a0)
000128D6 4228 0038                  		clr.b	$38(a0)
000128DA 45F8 FC00                  		lea	(v_objstate).w,a2
000128DE 7000                       		moveq	#0,d0
000128E0 1028 0023                  		move.b	obRespawnNo(a0),d0
000128E4 67D2                       		beq.s	@loc_10512
000128E6 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000128EC 60CA                       		bra.s	@loc_10512
000128EE                            ; ===========================================================================
000128EE                            
000128EE                            @type07:
000128EE 4A28 0038                  		tst.b	$38(a0)
000128F2 6600                       		bne.s	@loc_1055E
000128F4 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch number $F been pressed?
000128F8 6700                       		beq.s	@locret_10578
000128FA 117C 0001 0038             		move.b	#1,$38(a0)
00012900 4268 003A                  		clr.w	fb_height(a0)
00012904                            
00012904                            @loc_1055E:
00012904 5268 0008                  		addq.w	#1,obX(a0)
00012908 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
0001290E 5268 003A                  		addq.w	#1,fb_height(a0)
00012912 0C68 0380 003A             		cmpi.w	#$380,fb_height(a0)
00012918 6600                       		bne.s	@locret_10578
0001291A 11FC 0001 F7CE             			move.b	#1,($FFFFF7CE).w
00012920 4228 0038                  			clr.b	$38(a0)
00012924 4228 0028                  		clr.b	obSubtype(a0)
00012928                            
00012928                            @locret_10578:
00012928 4E75                       		rts	
0001292A                            ; ===========================================================================
0001292A                            
0001292A                            @type0C:
0001292A 4A28 0038                  		tst.b	$38(a0)
0001292E 6600                       		bne.s	@loc_10598
00012930 45F8 F7E0                  		lea	(f_switch).w,a2
00012934 7000                       		moveq	#0,d0
00012936 1028 003C                  		move.b	fb_type(a0),d0
0001293A 0832 0000 0000             		btst	#0,(a2,d0.w)
00012940 6700                       		beq.s	@loc_105A2
00012942 117C 0001 0038             		move.b	#1,$38(a0)
00012948                            
00012948                            @loc_10598:
00012948 4A68 003A                  		tst.w	fb_height(a0)
0001294C 6700                       		beq.s	@loc_105C0
0001294E 5568 003A                  		subq.w	#2,fb_height(a0)
00012952                            
00012952                            @loc_105A2:
00012952 3028 003A                  		move.w	fb_height(a0),d0
00012956 0828 0000 0022             		btst	#0,obStatus(a0)
0001295C 6700                       		beq.s	@loc_105B4
0001295E 4440                       		neg.w	d0
00012960 0640 0080                  		addi.w	#$80,d0
00012964                            
00012964                            @loc_105B4:
00012964 3228 0034                  		move.w	fb_origX(a0),d1
00012968 D240                       		add.w	d0,d1
0001296A 3141 0008                  		move.w	d1,obX(a0)
0001296E 4E75                       		rts	
00012970                            ; ===========================================================================
00012970                            
00012970                            @loc_105C0:
00012970 5228 0028                  		addq.b	#1,obSubtype(a0)
00012974 4228 0038                  		clr.b	$38(a0)
00012978 45F8 FC00                  		lea	(v_objstate).w,a2
0001297C 7000                       		moveq	#0,d0
0001297E 1028 0023                  		move.b	obRespawnNo(a0),d0
00012982 67CE                       		beq.s	@loc_105A2
00012984 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001298A 60C6                       		bra.s	@loc_105A2
0001298C                            ; ===========================================================================
0001298C                            
0001298C                            @type0D:
0001298C 4A28 0038                  		tst.b	$38(a0)
00012990 6600                       		bne.s	@loc_105F8
00012992 45F8 F7E0                  		lea	(f_switch).w,a2
00012996 7000                       		moveq	#0,d0
00012998 1028 003C                  		move.b	fb_type(a0),d0
0001299C 4A32 0000                  		tst.b	(a2,d0.w)
000129A0 6A00                       		bpl.s	@wtf
000129A2 117C 0001 0038             		move.b	#1,$38(a0)
000129A8                            
000129A8                            @loc_105F8:
000129A8 303C 0080                  		move.w	#$80,d0
000129AC B068 003A                  		cmp.w	fb_height(a0),d0
000129B0 6700                       		beq.s	@loc_10624
000129B2 5468 003A                  		addq.w	#2,fb_height(a0)
000129B6                            
000129B6                            @wtf:
000129B6 3028 003A                  		move.w	fb_height(a0),d0
000129BA 0828 0000 0022             		btst	#0,obStatus(a0)
000129C0 6700                       		beq.s	@loc_10618
000129C2 4440                       		neg.w	d0
000129C4 0640 0080                  		addi.w	#$80,d0
000129C8                            
000129C8                            @loc_10618:
000129C8 3228 0034                  		move.w	fb_origX(a0),d1
000129CC D240                       		add.w	d0,d1
000129CE 3141 0008                  		move.w	d1,obX(a0)
000129D2 4E75                       		rts	
000129D4                            ; ===========================================================================
000129D4                            
000129D4                            @loc_10624:
000129D4 5328 0028                  		subq.b	#1,obSubtype(a0)
000129D8 4228 0038                  		clr.b	$38(a0)
000129DC 45F8 FC00                  		lea	(v_objstate).w,a2
000129E0 7000                       		moveq	#0,d0
000129E2 1028 0023                  		move.b	obRespawnNo(a0),d0
000129E6 67CE                       		beq.s	@wtf
000129E8 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000129EE 60C6                       		bra.s	@wtf
000129F0                            ; ===========================================================================
000129F0                            
000129F0                            @type08:
000129F0 323C 0010                  		move.w	#$10,d1
000129F4 7000                       		moveq	#0,d0
000129F6 1038 FE88                  		move.b	(v_oscillate+$2A).w,d0
000129FA E248                       		lsr.w	#1,d0
000129FC 3638 FE8A                  		move.w	(v_oscillate+$2C).w,d3
00012A00 6000                       		bra.s	@square
00012A02                            ; ===========================================================================
00012A02                            
00012A02                            @type09:
00012A02 323C 0030                  		move.w	#$30,d1
00012A06 7000                       		moveq	#0,d0
00012A08 1038 FE8C                  		move.b	(v_oscillate+$2E).w,d0
00012A0C 3638 FE8E                  		move.w	(v_oscillate+$30).w,d3
00012A10 6000                       		bra.s	@square
00012A12                            ; ===========================================================================
00012A12                            
00012A12                            @type0A:
00012A12 323C 0050                  		move.w	#$50,d1
00012A16 7000                       		moveq	#0,d0
00012A18 1038 FE90                  		move.b	(v_oscillate+$32).w,d0
00012A1C 3638 FE92                  		move.w	(v_oscillate+$34).w,d3
00012A20 6000                       		bra.s	@square
00012A22                            ; ===========================================================================
00012A22                            
00012A22                            @type0B:
00012A22 323C 0070                  		move.w	#$70,d1
00012A26 7000                       		moveq	#0,d0
00012A28 1038 FE94                  		move.b	(v_oscillate+$36).w,d0
00012A2C 3638 FE96                  		move.w	(v_oscillate+$38).w,d3
00012A30                            
00012A30                            @square:
00012A30 4A43                       		tst.w	d3
00012A32 6600                       		bne.s	@loc_1068E
00012A34 5228 0022                  		addq.b	#1,obStatus(a0)
00012A38 0228 0003 0022             		andi.b	#3,obStatus(a0)
00012A3E                            
00012A3E                            @loc_1068E:
00012A3E 1428 0022                  		move.b	obStatus(a0),d2
00012A42 0202 0003                  		andi.b	#3,d2
00012A46 6600                       		bne.s	@loc_106AE
00012A48 9041                       		sub.w	d1,d0
00012A4A D068 0034                  		add.w	fb_origX(a0),d0
00012A4E 3140 0008                  		move.w	d0,obX(a0)
00012A52 4441                       		neg.w	d1
00012A54 D268 0030                  		add.w	fb_origY(a0),d1
00012A58 3141 000C                  		move.w	d1,obY(a0)
00012A5C 4E75                       		rts	
00012A5E                            ; ===========================================================================
00012A5E                            
00012A5E                            @loc_106AE:
00012A5E 5302                       		subq.b	#1,d2
00012A60 6600                       		bne.s	@loc_106CC
00012A62 5341                       		subq.w	#1,d1
00012A64 9041                       		sub.w	d1,d0
00012A66 4440                       		neg.w	d0
00012A68 D068 0030                  		add.w	fb_origY(a0),d0
00012A6C 3140 000C                  		move.w	d0,obY(a0)
00012A70 5241                       		addq.w	#1,d1
00012A72 D268 0034                  		add.w	fb_origX(a0),d1
00012A76 3141 0008                  		move.w	d1,obX(a0)
00012A7A 4E75                       		rts	
00012A7C                            ; ===========================================================================
00012A7C                            
00012A7C                            @loc_106CC:
00012A7C 5302                       		subq.b	#1,d2
00012A7E 6600                       		bne.s	@loc_106EA
00012A80 5341                       		subq.w	#1,d1
00012A82 9041                       		sub.w	d1,d0
00012A84 4440                       		neg.w	d0
00012A86 D068 0034                  		add.w	fb_origX(a0),d0
00012A8A 3140 0008                  		move.w	d0,obX(a0)
00012A8E 5241                       		addq.w	#1,d1
00012A90 D268 0030                  		add.w	fb_origY(a0),d1
00012A94 3141 000C                  		move.w	d1,obY(a0)
00012A98 4E75                       		rts	
00012A9A                            ; ===========================================================================
00012A9A                            
00012A9A                            @loc_106EA:
00012A9A 9041                       		sub.w	d1,d0
00012A9C D068 0030                  		add.w	fb_origY(a0),d0
00012AA0 3140 000C                  		move.w	d0,obY(a0)
00012AA4 4441                       		neg.w	d1
00012AA6 D268 0034                  		add.w	fb_origX(a0),d1
00012AAA 3141 0008                  		move.w	d1,obX(a0)
00012AAE 4E75                       		rts	
00012AAE 4E75                       		rts	
00012AB0                            Map_FBlock:	include	"_maps\Floating Blocks and Doors.asm"
00012AB0                            ; ---------------------------------------------------------------------------
00012AB0                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00012AB0                            ; ---------------------------------------------------------------------------
00012AB0                            Map_FBlock_internal:
00012AB0 0000                       		dc.w @syz1x1-Map_FBlock_internal
00012AB2 0000                       		dc.w @syz2x2-Map_FBlock_internal
00012AB4 0000                       		dc.w @syz1x2-Map_FBlock_internal
00012AB6 0000                       		dc.w @syzrect2x2-Map_FBlock_internal
00012AB8 0000                       		dc.w @syzrect1x3-Map_FBlock_internal
00012ABA 0000                       		dc.w @slz-Map_FBlock_internal
00012ABC 0000                       		dc.w @lzvert-Map_FBlock_internal
00012ABE 0000                       		dc.w @lzhoriz-Map_FBlock_internal
00012AC0 01                         @syz1x1:	dc.b 1
00012AC1 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0 ; SYZ - 1x1 square block
00012AC6 04                         @syz2x2:	dc.b 4
00012AC7 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0 ; SYZ - 2x2 square blocks
00012ACC E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00012AD1 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00012AD6 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00012ADB 02                         @syz1x2:	dc.b 2
00012ADC E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0 ; SYZ - 1x2 square blocks
00012AE1 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00012AE6 04                         @syzrect2x2:	dc.b 4
00012AE7 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0 ; SYZ - 2x2 rectangular blocks
00012AEC E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00012AF1 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00012AF6 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00012AFB 03                         @syzrect1x3:	dc.b 3
00012AFC D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0 ; SYZ - 1x3 rectangular blocks
00012B01 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00012B06 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00012B0B 01                         @slz:		dc.b 1
00012B0C F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0 ; SLZ - 1x1 square block
00012B11 02                         @lzvert:	dc.b 2
00012B12 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8	; LZ - small vertical door
00012B17 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012B1C 04                         @lzhoriz:	dc.b 4
00012B1D F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0 ; LZ - large horizontal door
00012B22 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00012B27 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00012B2C F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00012B32 00                         		even
00012B32 00                         		even
00012B32                            
00012B32                            		include	"_incObj\57 Spiked Ball and Chain.asm"
00012B32                            ; ---------------------------------------------------------------------------
00012B32                            ; Object 57 - spiked balls (SYZ, LZ)
00012B32                            ; ---------------------------------------------------------------------------
00012B32                            
00012B32                            SpikeBall:
00012B32 7000                       		moveq	#0,d0
00012B34 1028 0024                  		move.b	obRoutine(a0),d0
00012B38 323B 0000                  		move.w	SBall_Index(pc,d0.w),d1
00012B3C 4EFB 1000                  		jmp	SBall_Index(pc,d1.w)
00012B40                            ; ===========================================================================
00012B40 0000                       SBall_Index:	dc.w SBall_Main-SBall_Index
00012B42 0000                       		dc.w SBall_Move-SBall_Index
00012B44 0000                       		dc.w SBall_Display-SBall_Index
00012B46                            
00012B46 =00000029                  sball_childs:	equ $29		; number of child objects (1 byte)
00012B46                            		; $30-$37	; object RAM numbers of childs (1 byte each)
00012B46 =0000003A                  sball_origX:	equ $3A		; centre x-axis position (2 bytes)
00012B46 =00000038                  sball_origY:	equ $38		; centre y-axis position (2 bytes)
00012B46 =0000003C                  sball_radius:	equ $3C		; radius (1 byte)
00012B46 =0000003E                  sball_speed:	equ $3E		; rate of spin (2 bytes)
00012B46                            ; ===========================================================================
00012B46                            
00012B46                            SBall_Main:	; Routine 0
00012B46 5428 0024                  		addq.b	#2,obRoutine(a0)
00012B4A 217C 0000 0000 0004        		move.l	#Map_SBall,obMap(a0)
00012B52 317C 03BA 0002             		move.w	#$3BA,obGfx(a0)
00012B58 117C 0004 0001             		move.b	#4,obRender(a0)
00012B5E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012B64 117C 0008 0014             		move.b	#8,obActWid(a0)
00012B6A 3168 0008 003A             		move.w	obX(a0),sball_origX(a0)
00012B70 3168 000C 0038             		move.w	obY(a0),sball_origY(a0)
00012B76 117C 0098 0020             		move.b	#$98,obColType(a0) ; SYZ specific code (chain hurts Sonic)
00012B7C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012B82 6600                       		bne.s	@notlz
00012B84                            
00012B84 117C 0000 0020             		move.b	#0,obColType(a0) ; LZ specific code (chain doesn't hurt)
00012B8A 317C 0310 0002             		move.w	#$310,obGfx(a0)
00012B90 217C 0000 0000 0004        		move.l	#Map_SBall2,obMap(a0)
00012B98                            
00012B98                            	@notlz:
00012B98 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012B9C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012BA0 4881                       		ext.w	d1
00012BA2 E741                       		asl.w	#3,d1		; multiply by 8
00012BA4 3141 003E                  		move.w	d1,sball_speed(a0) ; set object twirl speed
00012BA8 1028 0022                  		move.b	obStatus(a0),d0
00012BAC E418                       		ror.b	#2,d0
00012BAE 0200 00C0                  		andi.b	#$C0,d0
00012BB2 1140 0026                  		move.b	d0,obAngle(a0)
00012BB6 45E8 0029                  		lea	sball_childs(a0),a2
00012BBA 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012BBE 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00012BC2 14FC 0000                  		move.b	#0,(a2)+
00012BC6 3601                       		move.w	d1,d3
00012BC8 E94B                       		lsl.w	#4,d3
00012BCA 1143 003C                  		move.b	d3,sball_radius(a0)
00012BCE 5341                       		subq.w	#1,d1		; set chain length (type-1)
00012BD0 6500                       		bcs.s	@fail
00012BD2 0828 0003 0028             		btst	#3,obSubtype(a0)
00012BD8 6700                       		beq.s	@makechain
00012BDA 5341                       		subq.w	#1,d1
00012BDC 6500                       		bcs.s	@fail
00012BDE                            
00012BDE                            @makechain:
00012BDE 6100 D184                  		bsr.w	FindFreeObj
00012BE2 6600                       		bne.s	@fail
00012BE4 5228 0029                  		addq.b	#1,sball_childs(a0) ; increment child object counter
00012BE8 3A09                       		move.w	a1,d5		; get child object RAM address
00012BEA 0445 D000                  		subi.w	#$D000,d5	; subtract $D000
00012BEE EC4D                       		lsr.w	#6,d5		; divide by $40
00012BF0 0245 007F                  		andi.w	#$7F,d5
00012BF4 14C5                       		move.b	d5,(a2)+	; copy child RAM number
00012BF6 137C 0004 0024             		move.b	#4,obRoutine(a1)
00012BFC 1290                       		move.b	0(a0),0(a1)
00012BFE 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00012C04 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00012C0A 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00012C10 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00012C16 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00012C1C 1368 0020 0020             		move.b	obColType(a0),obColType(a1)
00012C22 0403 0010                  		subi.b	#$10,d3
00012C26 1343 003C                  		move.b	d3,sball_radius(a1)
00012C2A 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012C30 6600                       		bne.s	@notlzagain
00012C32                            
00012C32 4A03                       		tst.b	d3
00012C34 6600                       		bne.s	@notlzagain
00012C36 137C 0002 001A             		move.b	#2,obFrame(a1)	; use different frame for LZ chain
00012C3C                            
00012C3C                            	@notlzagain:
00012C3C 51C9 FFA0                  		dbf	d1,@makechain ; repeat for length of chain
00012C40                            
00012C40                            	@fail:
00012C40 3A08                       		move.w	a0,d5
00012C42 0445 D000                  		subi.w	#$D000,d5
00012C46 EC4D                       		lsr.w	#6,d5
00012C48 0245 007F                  		andi.w	#$7F,d5
00012C4C 14C5                       		move.b	d5,(a2)+
00012C4E 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012C54 6600                       		bne.s	SBall_Move
00012C56                            
00012C56 117C 008B 0020             		move.b	#$8B,obColType(a0) ; if yes, make last spikeball larger
00012C5C 117C 0001 001A             		move.b	#1,obFrame(a0)	; use different	frame
00012C62                            
00012C62                            SBall_Move:	; Routine 2
00012C62 6100 0000                  		bsr.w	@movesub
00012C66 6000 0000                  		bra.w	@chkdel
00012C6A                            ; ===========================================================================
00012C6A                            
00012C6A                            @movesub:
00012C6A 3028 003E                  		move.w	sball_speed(a0),d0
00012C6E D168 0026                  		add.w	d0,obAngle(a0)
00012C72 1028 0026                  		move.b	obAngle(a0),d0
00012C76 4EB9 0000 3CCA             		jsr	(CalcSine).l
00012C7C 3428 0038                  		move.w	sball_origY(a0),d2
00012C80 3628 003A                  		move.w	sball_origX(a0),d3
00012C84 45E8 0029                  		lea	sball_childs(a0),a2
00012C88 7C00                       		moveq	#0,d6
00012C8A 1C1A                       		move.b	(a2)+,d6
00012C8C                            
00012C8C                            	@loop:
00012C8C 7800                       		moveq	#0,d4
00012C8E 181A                       		move.b	(a2)+,d4
00012C90 ED4C                       		lsl.w	#6,d4
00012C92 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00012C98 2244                       		movea.l	d4,a1
00012C9A 7800                       		moveq	#0,d4
00012C9C 1829 003C                  		move.b	sball_radius(a1),d4
00012CA0 2A04                       		move.l	d4,d5
00012CA2 C9C0                       		muls.w	d0,d4
00012CA4 E084                       		asr.l	#8,d4
00012CA6 CBC1                       		muls.w	d1,d5
00012CA8 E085                       		asr.l	#8,d5
00012CAA D842                       		add.w	d2,d4
00012CAC DA43                       		add.w	d3,d5
00012CAE 3344 000C                  		move.w	d4,obY(a1)
00012CB2 3345 0008                  		move.w	d5,obX(a1)
00012CB6 51CE FFD4                  		dbf	d6,@loop
00012CBA 4E75                       		rts	
00012CBC                            ; ===========================================================================
00012CBC                            
00012CBC                            @chkdel:
00012CDA 6000 CAEE                  		bra.w	DisplaySprite
00012CDE                            ; ===========================================================================
00012CDE                            
00012CDE                            @delete:
00012CDE 7400                       		moveq	#0,d2
00012CE0 45E8 0029                  		lea	sball_childs(a0),a2
00012CE4 141A                       		move.b	(a2)+,d2
00012CE6                            
00012CE6                            	@deleteloop:
00012CE6 7000                       		moveq	#0,d0
00012CE8 101A                       		move.b	(a2)+,d0
00012CEA ED48                       		lsl.w	#6,d0
00012CEC 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00012CF2 2240                       		movea.l	d0,a1
00012CF4 6100 CB16                  		bsr.w	DeleteChild
00012CF8 51CA FFEC                  		dbf	d2,@deleteloop ; delete all pieces of	chain
00012CFC                            
00012CFC 4E75                       		rts	
00012CFE                            ; ===========================================================================
00012CFE                            
00012CFE                            SBall_Display:	; Routine 4
00012CFE 6000 CACA                  		bra.w	DisplaySprite
00012CFE 6000 CACA                  		bra.w	DisplaySprite
00012D02                            Map_SBall:	include	"_maps\Spiked Ball and Chain (SYZ).asm"
00012D02                            ; ---------------------------------------------------------------------------
00012D02                            ; Sprite mappings - chain of spiked balls (SYZ)
00012D02                            ; ---------------------------------------------------------------------------
00012D02                            Map_SBall_internal:
00012D02 0000                       		dc.w @0-Map_SBall_internal
00012D04 01                         @0:		dc.b 1
00012D05 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012D0A                            		even
00012D0A                            		even
00012D0A                            Map_SBall2:	include	"_maps\Spiked Ball and Chain (LZ).asm"
00012D0A                            ; ---------------------------------------------------------------------------
00012D0A                            ; Sprite mappings - spiked ball	on a chain (LZ)
00012D0A                            ; ---------------------------------------------------------------------------
00012D0A                            Map_SBall2_internal:
00012D0A 0000                       		dc.w @chain-Map_SBall2_internal
00012D0C 0000                       		dc.w @spikeball-Map_SBall2_internal
00012D0E 0000                       		dc.w @base-Map_SBall2_internal
00012D10 01                         @chain:		dc.b 1
00012D11 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; chain link
00012D16 01                         @spikeball:	dc.b 1
00012D17 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0	; spikeball
00012D1C 01                         @base:		dc.b 1
00012D1D F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8 ; wall attachment
00012D22                            		even
00012D22                            		even
00012D22                            		include	"_incObj\58 Big Spiked Ball.asm"
00012D22                            ; ---------------------------------------------------------------------------
00012D22                            ; Object 58 - giant spiked balls (SYZ)
00012D22                            ; ---------------------------------------------------------------------------
00012D22                            
00012D22                            BigSpikeBall:
00012D22 7000                       		moveq	#0,d0
00012D24 1028 0024                  		move.b	obRoutine(a0),d0
00012D28 323B 0000                  		move.w	BBall_Index(pc,d0.w),d1
00012D2C 4EFB 1000                  		jmp	BBall_Index(pc,d1.w)
00012D30                            ; ===========================================================================
00012D30 0000                       BBall_Index:	dc.w BBall_Main-BBall_Index
00012D32 0000                       		dc.w BBall_Move-BBall_Index
00012D34                            
00012D34 =0000003A                  bball_origX:	equ $3A		; original x-axis position
00012D34 =00000038                  bball_origY:	equ $38		; original y-axis position
00012D34 =0000003C                  bball_radius:	equ $3C		; radius of circle
00012D34 =0000003E                  bball_speed:	equ $3E		; speed
00012D34                            ; ===========================================================================
00012D34                            
00012D34                            BBall_Main:	; Routine 0
00012D34 5428 0024                  		addq.b	#2,obRoutine(a0)
00012D38 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0)
00012D40 317C 0396 0002             		move.w	#$396,obGfx(a0)
00012D46 117C 0004 0001             		move.b	#4,obRender(a0)
00012D4C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012D52 117C 0018 0014             		move.b	#$18,obActWid(a0)
00012D58 3168 0008 003A             		move.w	obX(a0),bball_origX(a0)
00012D5E 3168 000C 0038             		move.w	obY(a0),bball_origY(a0)
00012D64 117C 0086 0020             		move.b	#$86,obColType(a0)
00012D6A 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012D6E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012D72 4881                       		ext.w	d1
00012D74 E741                       		asl.w	#3,d1		; multiply by 8
00012D76 3141 003E                  		move.w	d1,bball_speed(a0) ; set object speed
00012D7A 1028 0022                  		move.b	obStatus(a0),d0
00012D7E E418                       		ror.b	#2,d0
00012D80 0200 00C0                  		andi.b	#$C0,d0
00012D84 1140 0026                  		move.b	d0,obAngle(a0)
00012D88 117C 0050 003C             		move.b	#$50,bball_radius(a0) ; set radius of circle motion
00012D8E                            
00012D8E                            BBall_Move:	; Routine 2
00012D8E 7000                       		moveq	#0,d0
00012D90 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00012D94 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00012D98 D040                       		add.w	d0,d0
00012D9A 323B 0000                  		move.w	@index(pc,d0.w),d1
00012D9E 4EBB 1000                  		jsr	@index(pc,d1.w)
00012DC0 6000 CA08                  		bra.w	DisplaySprite
00012DC4                            ; ===========================================================================
00012DC4 0000                       @index:		dc.w @type00-@index
00012DC6 0000                       		dc.w @type01-@index
00012DC8 0000                       		dc.w @type02-@index
00012DCA 0000                       		dc.w @type03-@index
00012DCC                            ; ===========================================================================
00012DCC                            
00012DCC                            @type00:
00012DCC 4E75                       		rts	
00012DCE                            ; ===========================================================================
00012DCE                            
00012DCE                            @type01:
00012DCE 323C 0060                  		move.w	#$60,d1
00012DD2 7000                       		moveq	#0,d0
00012DD4 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012DD8 0828 0000 0022             		btst	#0,obStatus(a0)
00012DDE 6700                       		beq.s	@noflip1
00012DE0 4440                       		neg.w	d0
00012DE2 D041                       		add.w	d1,d0
00012DE4                            
00012DE4                            	@noflip1:
00012DE4 3228 003A                  		move.w	bball_origX(a0),d1
00012DE8 9240                       		sub.w	d0,d1
00012DEA 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
00012DEE 4E75                       		rts	
00012DF0                            ; ===========================================================================
00012DF0                            
00012DF0                            @type02:
00012DF0 323C 0060                  		move.w	#$60,d1
00012DF4 7000                       		moveq	#0,d0
00012DF6 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012DFA 0828 0000 0022             		btst	#0,obStatus(a0)
00012E00 6700                       		beq.s	@noflip2
00012E02 4440                       		neg.w	d0
00012E04 0640 0080                  		addi.w	#$80,d0
00012E08                            
00012E08                            	@noflip2:
00012E08 3228 0038                  		move.w	bball_origY(a0),d1
00012E0C 9240                       		sub.w	d0,d1
00012E0E 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012E12 4E75                       		rts	
00012E14                            ; ===========================================================================
00012E14                            
00012E14                            @type03:
00012E14 3028 003E                  		move.w	bball_speed(a0),d0
00012E18 D168 0026                  		add.w	d0,obAngle(a0)
00012E1C 1028 0026                  		move.b	obAngle(a0),d0
00012E20 4EB9 0000 3CCA             		jsr	(CalcSine).l
00012E26 3428 0038                  		move.w	bball_origY(a0),d2
00012E2A 3628 003A                  		move.w	bball_origX(a0),d3
00012E2E 7800                       		moveq	#0,d4
00012E30 1828 003C                  		move.b	bball_radius(a0),d4
00012E34 2A04                       		move.l	d4,d5
00012E36 C9C0                       		muls.w	d0,d4
00012E38 E084                       		asr.l	#8,d4
00012E3A CBC1                       		muls.w	d1,d5
00012E3C E085                       		asr.l	#8,d5
00012E3E D842                       		add.w	d2,d4
00012E40 DA43                       		add.w	d3,d5
00012E42 3144 000C                  		move.w	d4,obY(a0)	; move object circularly
00012E46 3145 0008                  		move.w	d5,obX(a0)
00012E4A 4E75                       		rts	
00012E4A 4E75                       		rts	
00012E4C                            Map_BBall:	include	"_maps\Big Spiked Ball.asm"
00012E4C                            ; --------------------------------------------------------------------------------
00012E4C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012E4C                            ; --------------------------------------------------------------------------------
00012E4C                            
00012E4C                            SME_u_DKx:	
00012E4C 0000 0000                  		dc.w SME_u_DKx_6-SME_u_DKx, SME_u_DKx_20-SME_u_DKx	
00012E50 0000                       		dc.w SME_u_DKx_26-SME_u_DKx	
00012E52 05                         SME_u_DKx_6:	dc.b 5	
00012E53 E804 0000 F8               		dc.b $E8, 4, 0, 0, $F8	
00012E58 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0	
00012E5D F801 0012 E8               		dc.b $F8, 1, 0, $12, $E8	
00012E62 F801 0014 10               		dc.b $F8, 1, 0, $14, $10	
00012E67 1004 0016 F8               		dc.b $10, 4, 0, $16, $F8	
00012E6C 01                         SME_u_DKx_20:	dc.b 1	
00012E6D F805 0020 F8               		dc.b $F8, 5, 0, $20, $F8	
00012E72 02                         SME_u_DKx_26:	dc.b 2	
00012E73 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0	
00012E78 E80D 1018 F0               		dc.b $E8, $D, $10, $18, $F0	
00012E7E 00                         		even
00012E7E 00                         		even
00012E7E                            		include	"_incObj\59 SLZ Elevators.asm"
00012E7E                            ; ---------------------------------------------------------------------------
00012E7E                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00012E7E                            ; ---------------------------------------------------------------------------
00012E7E                            
00012E7E                            Elevator:
00012E7E 7000                       		moveq	#0,d0
00012E80 1028 0024                  		move.b	obRoutine(a0),d0
00012E84 323B 0000                  		move.w	Elev_Index(pc,d0.w),d1
00012E88 4EBB 1000                  		jsr	Elev_Index(pc,d1.w)
00012EAA 6000 C91E                  		bra.w	DisplaySprite
00012EAE                            ; ===========================================================================
00012EAE 0000                       Elev_Index:	dc.w Elev_Main-Elev_Index
00012EB0 0000                       		dc.w Elev_Platform-Elev_Index
00012EB2 0000                       		dc.w Elev_Action-Elev_Index
00012EB4 0000                       		dc.w Elev_MakeMulti-Elev_Index
00012EB6                            
00012EB6 =00000032                  elev_origX:	equ $32		; original x-axis position
00012EB6 =00000030                  elev_origY:	equ $30		; original y-axis position
00012EB6 =0000003C                  elev_dist:	equ $3C		; distance to move (2 bytes)
00012EB6                            
00012EB6 2800                       Elev_Var1:	dc.b $28, 0		; width, frame number
00012EB8                            
00012EB8 1001                       Elev_Var2:	dc.b $10, 1		; distance to move, action type
00012EBA 2001                       		dc.b $20, 1
00012EBC 3401                       		dc.b $34, 1
00012EBE 1003                       		dc.b $10, 3
00012EC0 2003                       		dc.b $20, 3
00012EC2 3403                       		dc.b $34, 3
00012EC4 1401                       		dc.b $14, 1
00012EC6 2401                       		dc.b $24, 1
00012EC8 2C01                       		dc.b $2C, 1
00012ECA 1403                       		dc.b $14, 3
00012ECC 2403                       		dc.b $24, 3
00012ECE 2C03                       		dc.b $2C, 3
00012ED0 2005                       		dc.b $20, 5
00012ED2 2007                       		dc.b $20, 7
00012ED4 3009                       		dc.b $30, 9
00012ED6                            ; ===========================================================================
00012ED6                            
00012ED6                            Elev_Main:	; Routine 0
00012ED6 5428 0024                  		addq.b	#2,obRoutine(a0)
00012EDA 7000                       		moveq	#0,d0
00012EDC 1028 0028                  		move.b	obSubtype(a0),d0
00012EE0 6A00                       		bpl.s	@normal		; branch for types 00-7F
00012EE2 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Elev_MakeMulti next
00012EE6 0240 007F                  		andi.w	#$7F,d0
00012EEA C0FC 0006                  		mulu.w	#6,d0
00012EEE 3140 003C                  		move.w	d0,elev_dist(a0)
00012EF2 3140 003E                  		move.w	d0,$3E(a0)
00012EF6 588F                       		addq.l	#4,sp
00012EF8 4E75                       		rts	
00012EFA                            ; ===========================================================================
00012EFA                            
00012EFA                            	@normal:
00012EFA E648                       		lsr.w	#3,d0
00012EFC 0240 001E                  		andi.w	#$1E,d0
00012F00 45FB 00B4                  		lea	Elev_Var1(pc,d0.w),a2
00012F04 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
00012F08 115A 001A                  		move.b	(a2)+,obFrame(a0) ; set frame
00012F0C 7000                       		moveq	#0,d0
00012F0E 1028 0028                  		move.b	obSubtype(a0),d0
00012F12 D040                       		add.w	d0,d0
00012F14 0240 001E                  		andi.w	#$1E,d0
00012F18 45FB 009E                  		lea	Elev_Var2(pc,d0.w),a2
00012F1C 101A                       		move.b	(a2)+,d0
00012F1E E548                       		lsl.w	#2,d0
00012F20 3140 003C                  		move.w	d0,elev_dist(a0)	; set distance to move
00012F24 115A 0028                  		move.b	(a2)+,obSubtype(a0)	; set type
00012F28 217C 0000 0000 0004        		move.l	#Map_Elev,obMap(a0)
00012F30 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012F36 117C 0004 0001             		move.b	#4,obRender(a0)
00012F3C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012F42 3168 0008 0032             		move.w	obX(a0),elev_origX(a0)
00012F48 3168 000C 0030             		move.w	obY(a0),elev_origY(a0)
00012F4E                            
00012F4E                            Elev_Platform:	; Routine 2
00012F4E 7200                       		moveq	#0,d1
00012F50 1228 0014                  		move.b	obActWid(a0),d1
00012F54 4EB9 0000 8C24             		jsr	(PlatformObject).l
00012F5A 6000 0000                  		bra.w	Elev_Types
00012F5E                            ; ===========================================================================
00012F5E                            
00012F5E                            Elev_Action:	; Routine 4
00012F5E 7200                       		moveq	#0,d1
00012F60 1228 0014                  		move.b	obActWid(a0),d1
00012F64 4EB9 0000 8D98             		jsr	(ExitPlatform).l
00012F6A 3F28 0008                  		move.w	obX(a0),-(sp)
00012F6E 6100 0000                  		bsr.w	Elev_Types
00012F72 341F                       		move.w	(sp)+,d2
00012F74 4A10                       		tst.b	0(a0)
00012F76 6700                       		beq.s	@deleted
00012F78 4EF9 0000 9302             		jmp	(MvSonicOnPtfm2).l
00012F7E                            
00012F7E                            	@deleted:
00012F7E 4E75                       		rts	
00012F80                            ; ===========================================================================
00012F80                            
00012F80                            Elev_Types:
00012F80 7000                       		moveq	#0,d0
00012F82 1028 0028                  		move.b	obSubtype(a0),d0
00012F86 0240 000F                  		andi.w	#$F,d0
00012F8A D040                       		add.w	d0,d0
00012F8C 323B 0000                  		move.w	@index(pc,d0.w),d1
00012F90 4EFB 1000                  		jmp	@index(pc,d1.w)
00012F94                            ; ===========================================================================
00012F94 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00012F98 0000 0000                  		dc.w @type02-@index, @type01-@index
00012F9C 0000 0000                  		dc.w @type04-@index, @type01-@index
00012FA0 0000 0000                  		dc.w @type06-@index, @type01-@index
00012FA4 0000 0000                  		dc.w @type08-@index, @type09-@index
00012FA8                            ; ===========================================================================
00012FA8                            
00012FA8                            @type00:
00012FA8 4E75                       		rts	
00012FAA                            ; ===========================================================================
00012FAA                            
00012FAA                            @type01:
00012FAA 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; check if Sonic is standing on the object
00012FB0 6600                       		bne.s	@notstanding
00012FB2 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
00012FB6                            
00012FB6                            	@notstanding:
00012FB6 4E75                       		rts	
00012FB8                            ; ===========================================================================
00012FB8                            
00012FB8                            @type02:
00012FB8 6100 0000                  		bsr.w	Elev_Move
00012FBC 3028 0034                  		move.w	$34(a0),d0
00012FC0 4440                       		neg.w	d0
00012FC2 D068 0030                  		add.w	elev_origY(a0),d0
00012FC6 3140 000C                  		move.w	d0,obY(a0)
00012FCA 4E75                       		rts	
00012FCC                            ; ===========================================================================
00012FCC                            
00012FCC                            @type04:
00012FCC 6100 0000                  		bsr.w	Elev_Move
00012FD0 3028 0034                  		move.w	$34(a0),d0
00012FD4 D068 0030                  		add.w	elev_origY(a0),d0
00012FD8 3140 000C                  		move.w	d0,obY(a0)
00012FDC 4E75                       		rts	
00012FDE                            ; ===========================================================================
00012FDE                            
00012FDE                            @type06:
00012FDE 6100 0000                  		bsr.w	Elev_Move
00012FE2 3028 0034                  		move.w	$34(a0),d0
00012FE6 E240                       		asr.w	#1,d0
00012FE8 4440                       		neg.w	d0
00012FEA D068 0030                  		add.w	elev_origY(a0),d0
00012FEE 3140 000C                  		move.w	d0,obY(a0)
00012FF2 3028 0034                  		move.w	$34(a0),d0
00012FF6 D068 0032                  		add.w	elev_origX(a0),d0
00012FFA 3140 0008                  		move.w	d0,obX(a0)
00012FFE 4E75                       		rts	
00013000                            ; ===========================================================================
00013000                            
00013000                            @type08:
00013000 6100 0000                  		bsr.w	Elev_Move
00013004 3028 0034                  		move.w	$34(a0),d0
00013008 E240                       		asr.w	#1,d0
0001300A D068 0030                  		add.w	elev_origY(a0),d0
0001300E 3140 000C                  		move.w	d0,obY(a0)
00013012 3028 0034                  		move.w	$34(a0),d0
00013016 4440                       		neg.w	d0
00013018 D068 0032                  		add.w	elev_origX(a0),d0
0001301C 3140 0008                  		move.w	d0,obX(a0)
00013020 4E75                       		rts	
00013022                            ; ===========================================================================
00013022                            
00013022                            @type09:
00013022 6100 0000                  		bsr.w	Elev_Move
00013026 3028 0034                  		move.w	$34(a0),d0
0001302A 4440                       		neg.w	d0
0001302C D068 0030                  		add.w	elev_origY(a0),d0
00013030 3140 000C                  		move.w	d0,obY(a0)
00013034 4A28 0028                  		tst.b	obSubtype(a0)
00013038 6700 0000                  		beq.w	@typereset
0001303C 4E75                       		rts	
0001303E                            ; ===========================================================================
0001303E                            
0001303E                            	@typereset:
0001303E 0828 0003 0022             		btst	#3,obStatus(a0)
00013044 6700                       		beq.s	@delete
00013046 08E9 0001 0022             		bset	#1,obStatus(a1)
0001304C 08A9 0003 0022             		bclr	#3,obStatus(a1)
00013052 137C 0002 0024             		move.b	#2,obRoutine(a1)
00013058                            
00013058                            	@delete:
00013058 6000 C7B0                  		bra.w	DeleteObject
0001305C                            
0001305C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001305C                            
0001305C                            
0001305C                            Elev_Move:
0001305C 3028 0038                  		move.w	$38(a0),d0
00013060 4A28 003A                  		tst.b	$3A(a0)
00013064 6600                       		bne.s	loc_10CC8
00013066 0C40 0800                  		cmpi.w	#$800,d0
0001306A 6400                       		bcc.s	loc_10CD0
0001306C 0640 0010                  		addi.w	#$10,d0
00013070 6000                       		bra.s	loc_10CD0
00013072                            ; ===========================================================================
00013072                            
00013072                            loc_10CC8:
00013072 4A40                       		tst.w	d0
00013074 6700                       		beq.s	loc_10CD0
00013076 0440 0010                  		subi.w	#$10,d0
0001307A                            
0001307A                            loc_10CD0:
0001307A 3140 0038                  		move.w	d0,$38(a0)
0001307E 48C0                       		ext.l	d0
00013080 E180                       		asl.l	#8,d0
00013082 D0A8 0034                  		add.l	$34(a0),d0
00013086 2140 0034                  		move.l	d0,$34(a0)
0001308A 4840                       		swap	d0
0001308C 3428 003C                  		move.w	elev_dist(a0),d2
00013090 B042                       		cmp.w	d2,d0
00013092 6300                       		bls.s	loc_10CF0
00013094 117C 0001 003A             		move.b	#1,$3A(a0)
0001309A                            
0001309A                            loc_10CF0:
0001309A D442                       		add.w	d2,d2
0001309C B042                       		cmp.w	d2,d0
0001309E 6600                       		bne.s	locret_10CFA
000130A0 4228 0028                  		clr.b	obSubtype(a0)
000130A4                            
000130A4                            locret_10CFA:
000130A4 4E75                       		rts	
000130A6                            ; End of function Elev_Move
000130A6                            
000130A6                            ; ===========================================================================
000130A6                            
000130A6                            Elev_MakeMulti:	; Routine 6
000130A6 5368 003C                  		subq.w	#1,elev_dist(a0)
000130AA 6600                       		bne.s	@chkdel
000130AC 3168 003E 003C             		move.w	$3E(a0),elev_dist(a0)
000130B2 6100 CCB0                  		bsr.w	FindFreeObj
000130B6 6600                       		bne.s	@chkdel
000130B8 12BC 0059                  		move.b	#id_Elevator,0(a1) ; duplicate the object
000130BC 3368 0008 0008             		move.w	obX(a0),obX(a1)
000130C2 3368 000C 000C             		move.w	obY(a0),obY(a1)
000130C8 137C 000E 0028             		move.b	#$E,obSubtype(a1)
000130CE                            
000130CE                            @chkdel:
000130CE 588F                       		addq.l	#4,sp
000130EE 4E75                       		rts	
000130EE 4E75                       		rts	
000130F0                            Map_Elev:	include	"_maps\SLZ Elevators.asm"
000130F0                            ; ---------------------------------------------------------------------------
000130F0                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000130F0                            ; ---------------------------------------------------------------------------
000130F0                            Map_Elev_internal:
000130F0 0000                       		dc.w @elevator-Map_Elev_internal
000130F2 03                         @elevator:	dc.b 3
000130F3 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
000130F8 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
000130FD F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00013102                            		even
00013102                            		even
00013102                            		include	"_incObj\5A SLZ Circling Platform.asm"
00013102                            ; ---------------------------------------------------------------------------
00013102                            ; Object 5A - platforms	moving in circles (SLZ)
00013102                            ; ---------------------------------------------------------------------------
00013102                            
00013102                            CirclingPlatform:
00013102 7000                       		moveq	#0,d0
00013104 1028 0024                  		move.b	obRoutine(a0),d0
00013108 323B 0000                  		move.w	Circ_Index(pc,d0.w),d1
0001310C 4EBB 1000                  		jsr	Circ_Index(pc,d1.w)
0001312E 6000 C69A                  		bra.w	DisplaySprite
00013132                            ; ===========================================================================
00013132 0000                       Circ_Index:	dc.w Circ_Main-Circ_Index
00013134 0000                       		dc.w Circ_Platform-Circ_Index
00013136 0000                       		dc.w Circ_Action-Circ_Index
00013138                            
00013138 =00000032                  circ_origX:	equ $32		; original x-axis position
00013138 =00000030                  circ_origY:	equ $30		; original y-axis position
00013138                            ; ===========================================================================
00013138                            
00013138                            Circ_Main:	; Routine 0
00013138 5428 0024                  		addq.b	#2,obRoutine(a0)
0001313C 217C 0000 0000 0004        		move.l	#Map_Circ,obMap(a0)
00013144 317C 4000 0002             		move.w	#$4000,obGfx(a0)
0001314A 117C 0004 0001             		move.b	#4,obRender(a0)
00013150 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013156 117C 0018 0014             		move.b	#$18,obActWid(a0)
0001315C 3168 0008 0032             		move.w	obX(a0),circ_origX(a0)
00013162 3168 000C 0030             		move.w	obY(a0),circ_origY(a0)
00013168                            
00013168                            Circ_Platform:	; Routine 2
00013168 7200                       		moveq	#0,d1
0001316A 1228 0014                  		move.b	obActWid(a0),d1
0001316E 4EB9 0000 8C24             		jsr	(PlatformObject).l
00013174 6000 0000                  		bra.w	Circ_Types
00013178                            ; ===========================================================================
00013178                            
00013178                            Circ_Action:	; Routine 4
00013178 7200                       		moveq	#0,d1
0001317A 1228 0014                  		move.b	obActWid(a0),d1
0001317E 4EB9 0000 8D98             		jsr	(ExitPlatform).l
00013184 3F28 0008                  		move.w	obX(a0),-(sp)
00013188 6100 0000                  		bsr.w	Circ_Types
0001318C 341F                       		move.w	(sp)+,d2
0001318E 4EF9 0000 9302             		jmp	(MvSonicOnPtfm2).l
00013194                            ; ===========================================================================
00013194                            
00013194                            Circ_Types:
00013194 7000                       		moveq	#0,d0
00013196 1028 0028                  		move.b	obSubtype(a0),d0
0001319A 0240 000C                  		andi.w	#$C,d0
0001319E E248                       		lsr.w	#1,d0
000131A0 323B 0000                  		move.w	@index(pc,d0.w),d1
000131A4 4EFB 1000                  		jmp	@index(pc,d1.w)
000131A8                            ; ===========================================================================
000131A8 0000                       @index:		dc.w @type00-@index
000131AA 0000                       		dc.w @type04-@index
000131AC                            ; ===========================================================================
000131AC                            
000131AC                            @type00:
000131AC 1238 FE80                  		move.b	(v_oscillate+$22).w,d1 ; get rotating value
000131B0 0401 0050                  		subi.b	#$50,d1		; set radius of circle
000131B4 4881                       		ext.w	d1
000131B6 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
000131BA 0402 0050                  		subi.b	#$50,d2
000131BE 4882                       		ext.w	d2
000131C0 0828 0000 0028             		btst	#0,obSubtype(a0)
000131C6 6700                       		beq.s	@noshift00a
000131C8 4441                       		neg.w	d1
000131CA 4442                       		neg.w	d2
000131CC                            
000131CC                            	@noshift00a:
000131CC 0828 0001 0028             		btst	#1,obSubtype(a0)
000131D2 6700                       		beq.s	@noshift00b
000131D4 4441                       		neg.w	d1
000131D6 C342                       		exg	d1,d2
000131D8                            
000131D8                            	@noshift00b:
000131D8 D268 0032                  		add.w	circ_origX(a0),d1
000131DC 3141 0008                  		move.w	d1,obX(a0)
000131E0 D468 0030                  		add.w	circ_origY(a0),d2
000131E4 3142 000C                  		move.w	d2,obY(a0)
000131E8 4E75                       		rts	
000131EA                            ; ===========================================================================
000131EA                            
000131EA                            @type04:
000131EA 1238 FE80                  		move.b	(v_oscillate+$22).w,d1
000131EE 0401 0050                  		subi.b	#$50,d1
000131F2 4881                       		ext.w	d1
000131F4 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
000131F8 0402 0050                  		subi.b	#$50,d2
000131FC 4882                       		ext.w	d2
000131FE 0828 0000 0028             		btst	#0,obSubtype(a0)
00013204 6700                       		beq.s	@noshift04a
00013206 4441                       		neg.w	d1
00013208 4442                       		neg.w	d2
0001320A                            
0001320A                            	@noshift04a:
0001320A 0828 0001 0028             		btst	#1,obSubtype(a0)
00013210 6700                       		beq.s	@noshift04b
00013212 4441                       		neg.w	d1
00013214 C342                       		exg	d1,d2
00013216                            
00013216                            	@noshift04b:
00013216 4441                       		neg.w	d1
00013218 D268 0032                  		add.w	circ_origX(a0),d1
0001321C 3141 0008                  		move.w	d1,obX(a0)
00013220 D468 0030                  		add.w	circ_origY(a0),d2
00013224 3142 000C                  		move.w	d2,obY(a0)
00013228 4E75                       		rts	
00013228 4E75                       		rts	
0001322A                            Map_Circ:	include	"_maps\SLZ Circling Platform.asm"
0001322A                            ; ---------------------------------------------------------------------------
0001322A                            ; Sprite mappings - platforms that move	in circles (SLZ)
0001322A                            ; ---------------------------------------------------------------------------
0001322A                            Map_Circ_internal:
0001322A 0000                       		dc.w @platform-Map_Circ_internal
0001322C 02                         @platform:	dc.b 2
0001322D F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00013232 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00013238 00                         		even
00013238 00                         		even
00013238                            		include	"_incObj\5B Staircase.asm"
00013238                            ; ---------------------------------------------------------------------------
00013238                            ; Object 5B - blocks that form a staircase (SLZ)
00013238                            ; ---------------------------------------------------------------------------
00013238                            
00013238                            Staircase:
00013238 7000                       		moveq	#0,d0
0001323A 1028 0024                  		move.b	obRoutine(a0),d0
0001323E 323B 0000                  		move.w	Stair_Index(pc,d0.w),d1
00013242 4EBB 1000                  		jsr	Stair_Index(pc,d1.w)
00013264 6000 C564                  		bra.w	DisplaySprite
00013268                            ; ===========================================================================
00013268 0000                       Stair_Index:	dc.w Stair_Main-Stair_Index
0001326A 0000                       		dc.w Stair_Move-Stair_Index
0001326C 0000                       		dc.w Stair_Solid-Stair_Index
0001326E                            
0001326E =00000030                  stair_origX:	equ $30		; original x-axis position
0001326E =00000032                  stair_origY:	equ $32		; original y-axis position
0001326E                            
0001326E =0000003C                  stair_parent:	equ $3C		; address of parent object (4 bytes)
0001326E                            ; ===========================================================================
0001326E                            
0001326E                            Stair_Main:	; Routine 0
0001326E 5428 0024                  		addq.b	#2,obRoutine(a0)
00013272 7638                       		moveq	#$38,d3
00013274 7801                       		moveq	#1,d4
00013276 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
0001327C 6700                       		beq.s	@notflipped	; if not, branch
0001327E 763B                       		moveq	#$3B,d3
00013280 78FF                       		moveq	#-1,d4
00013282                            
00013282                            	@notflipped:
00013282 3428 0008                  		move.w	obX(a0),d2
00013286 2248                       		movea.l	a0,a1
00013288 7203                       		moveq	#3,d1
0001328A 6000                       		bra.s	@makeblocks
0001328C                            ; ===========================================================================
0001328C                            
0001328C                            @loop:
0001328C 6100 CAEC                  		bsr.w	FindNextFreeObj
00013290 6600 0000                  		bne.w	@fail
00013294 137C 0004 0024             		move.b	#4,obRoutine(a1)
0001329A                            
0001329A                            @makeblocks:
0001329A 12BC 005B                  		move.b	#id_Staircase,0(a1) ; load another block object
0001329E 237C 0000 0000 0004        		move.l	#Map_Stair,obMap(a1)
000132A6 337C 4000 0002             		move.w	#$4000,obGfx(a1)
000132AC 137C 0004 0001             		move.b	#4,obRender(a1)
000132B2 337C 0180 0018             		move.w	#$180,obPriority(a1)
000132B8 137C 0010 0014             		move.b	#$10,obActWid(a1)
000132BE 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
000132C4 3342 0008                  		move.w	d2,obX(a1)
000132C8 3368 000C 000C             		move.w	obY(a0),obY(a1)
000132CE 3368 0008 0030             		move.w	obX(a0),stair_origX(a1)
000132D4 3369 000C 0032             		move.w	obY(a1),stair_origY(a1)
000132DA 0642 0020                  		addi.w	#$20,d2
000132DE 1343 0037                  		move.b	d3,$37(a1)
000132E2 2348 003C                  		move.l	a0,stair_parent(a1)
000132E6 D604                       		add.b	d4,d3
000132E8 51C9 FFA2                  		dbf	d1,@loop	; repeat sequence 3 times
000132EC                            
000132EC                            	@fail:
000132EC                            
000132EC                            Stair_Move:	; Routine 2
000132EC 7000                       		moveq	#0,d0
000132EE 1028 0028                  		move.b	obSubtype(a0),d0
000132F2 0240 0007                  		andi.w	#7,d0
000132F6 D040                       		add.w	d0,d0
000132F8 323B 0000                  		move.w	Stair_TypeIndex(pc,d0.w),d1
000132FC 4EBB 1000                  		jsr	Stair_TypeIndex(pc,d1.w)
00013300                            
00013300                            Stair_Solid:	; Routine 4
00013300 2468 003C                  		movea.l	stair_parent(a0),a2
00013304 7000                       		moveq	#0,d0
00013306 1028 0037                  		move.b	$37(a0),d0
0001330A 1032 0000                  		move.b	(a2,d0.w),d0
0001330E D068 0032                  		add.w	stair_origY(a0),d0
00013312 3140 000C                  		move.w	d0,obY(a0)
00013316 7200                       		moveq	#0,d1
00013318 1228 0014                  		move.b	obActWid(a0),d1
0001331C 0641 000B                  		addi.w	#$B,d1
00013320 343C 0010                  		move.w	#$10,d2
00013324 363C 0011                  		move.w	#$11,d3
00013328 3828 0008                  		move.w	obX(a0),d4
0001332C 6100 E9E8                  		bsr.w	SolidObject
00013330 4A04                       		tst.b	d4
00013332 6A00                       		bpl.s	loc_10F92
00013334 1544 0036                  		move.b	d4,$36(a2)
00013338                            
00013338                            loc_10F92:
00013338 0828 0003 0022             		btst	#3,obStatus(a0)
0001333E 6700                       		beq.s	locret_10FA0
00013340 157C 0001 0036             		move.b	#1,$36(a2)
00013346                            
00013346                            locret_10FA0:
00013346 4E75                       		rts	
00013348                            ; ===========================================================================
00013348 0000                       Stair_TypeIndex:dc.w Stair_Type00-Stair_TypeIndex
0001334A 0000                       		dc.w Stair_Type01-Stair_TypeIndex
0001334C 0000                       		dc.w Stair_Type02-Stair_TypeIndex
0001334E 0000                       		dc.w Stair_Type01-Stair_TypeIndex
00013350                            ; ===========================================================================
00013350                            
00013350                            Stair_Type00:
00013350 4A68 0034                  		tst.w	$34(a0)
00013354 6600                       		bne.s	loc_10FC0
00013356 0C28 0001 0036             		cmpi.b	#1,$36(a0)
0001335C 6600                       		bne.s	locret_10FBE
0001335E 317C 001E 0034             		move.w	#$1E,$34(a0)
00013364                            
00013364                            locret_10FBE:
00013364 4E75                       		rts	
00013366                            ; ===========================================================================
00013366                            
00013366                            loc_10FC0:
00013366 5368 0034                  		subq.w	#1,$34(a0)
0001336A 66F8                       		bne.s	locret_10FBE
0001336C 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
00013370 4E75                       		rts	
00013372                            ; ===========================================================================
00013372                            
00013372                            Stair_Type02:
00013372 4A68 0034                  		tst.w	$34(a0)
00013376 6600                       		bne.s	loc_10FE0
00013378 4A28 0036                  		tst.b	$36(a0)
0001337C 6A00                       		bpl.s	locret_10FDE
0001337E 317C 003C 0034             		move.w	#$3C,$34(a0)
00013384                            
00013384                            locret_10FDE:
00013384 4E75                       		rts	
00013386                            ; ===========================================================================
00013386                            
00013386                            loc_10FE0:
00013386 5368 0034                  		subq.w	#1,$34(a0)
0001338A 6600                       		bne.s	loc_10FEC
0001338C 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
00013390 4E75                       		rts	
00013392                            ; ===========================================================================
00013392                            
00013392                            loc_10FEC:
00013392 43E8 0038                  		lea	$38(a0),a1
00013396 3028 0034                  		move.w	$34(a0),d0
0001339A E408                       		lsr.b	#2,d0
0001339C 0200 0001                  		andi.b	#1,d0
000133A0 12C0                       		move.b	d0,(a1)+
000133A2 0A00 0001                  		eori.b	#1,d0
000133A6 12C0                       		move.b	d0,(a1)+
000133A8 0A00 0001                  		eori.b	#1,d0
000133AC 12C0                       		move.b	d0,(a1)+
000133AE 0A00 0001                  		eori.b	#1,d0
000133B2 12C0                       		move.b	d0,(a1)+
000133B4 4E75                       		rts	
000133B6                            ; ===========================================================================
000133B6                            
000133B6                            Stair_Type01:
000133B6 43E8 0038                  		lea	$38(a0),a1
000133BA 0C11 0080                  		cmpi.b	#$80,(a1)
000133BE 6700                       		beq.s	locret_11038
000133C0 5211                       		addq.b	#1,(a1)
000133C2 7200                       		moveq	#0,d1
000133C4 1219                       		move.b	(a1)+,d1
000133C6 4841                       		swap	d1
000133C8 E289                       		lsr.l	#1,d1
000133CA 2401                       		move.l	d1,d2
000133CC E289                       		lsr.l	#1,d1
000133CE 2601                       		move.l	d1,d3
000133D0 D682                       		add.l	d2,d3
000133D2 4841                       		swap	d1
000133D4 4842                       		swap	d2
000133D6 4843                       		swap	d3
000133D8 12C3                       		move.b	d3,(a1)+
000133DA 12C2                       		move.b	d2,(a1)+
000133DC 12C1                       		move.b	d1,(a1)+
000133DE                            
000133DE                            locret_11038:
000133DE 4E75                       		rts	
000133E0 4E75                       		rts	
000133E0 4E75                       		rts	
000133E2                            Map_Stair:	include	"_maps\Staircase.asm"
000133E2                            ; ---------------------------------------------------------------------------
000133E2                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000133E2                            ; ---------------------------------------------------------------------------
000133E2                            Map_Stair_internal:
000133E2 0000                       		dc.w @block-Map_Stair_internal
000133E4 01                         @block:		dc.b 1
000133E5 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000133EA                            		even
000133EA                            		even
000133EA                            		include	"_incObj\5C Pylon.asm"
000133EA                            ; ---------------------------------------------------------------------------
000133EA                            ; Object 5C - metal pylons in foreground (SLZ)
000133EA                            ; ---------------------------------------------------------------------------
000133EA                            
000133EA                            Pylon:
000133EA 7000                       		moveq	#0,d0
000133EC 1028 0024                  		move.b	obRoutine(a0),d0
000133F0 323B 0000                  		move.w	Pyl_Index(pc,d0.w),d1
000133F4 4EFB 1000                  		jmp	Pyl_Index(pc,d1.w)
000133F8                            ; ===========================================================================
000133F8 0000                       Pyl_Index:	dc.w Pyl_Main-Pyl_Index
000133FA 0000                       		dc.w Pyl_Display-Pyl_Index
000133FC                            ; ===========================================================================
000133FC                            
000133FC                            Pyl_Main:	; Routine 0
000133FC 5428 0024                  		addq.b	#2,obRoutine(a0)
00013400 217C 0000 0000 0004        		move.l	#Map_Pylon,obMap(a0)
00013408 317C 83CC 0002             		move.w	#$83CC,obGfx(a0)
0001340E 117C 0010 0014             		move.b	#$10,obActWid(a0)
00013414                            
00013414                            Pyl_Display:	; Routine 2
00013414 2238 F700                  		move.l	(v_screenposx).w,d1
00013418 D281                       		add.l	d1,d1
0001341A 4841                       		swap	d1
0001341C 4441                       		neg.w	d1
0001341E 3141 0008                  		move.w	d1,obX(a0)
00013422 2238 F704                  		move.l	(v_screenposy).w,d1
00013426 D281                       		add.l	d1,d1
00013428 4841                       		swap	d1
0001342A 0241 003F                  		andi.w	#$3F,d1
0001342E 4441                       		neg.w	d1
00013430 0641 0100                  		addi.w	#$100,d1
00013434 3141 000A                  		move.w	d1,obScreenY(a0)
00013438 6000 C390                  		bra.w	DisplaySprite
00013438 6000 C390                  		bra.w	DisplaySprite
0001343C                            Map_Pylon:	include	"_maps\Pylon.asm"
0001343C                            ; ---------------------------------------------------------------------------
0001343C                            ; Sprite mappings - metal pylons in foreground (SLZ)
0001343C                            ; ---------------------------------------------------------------------------
0001343C                            Map_Pylon_internal:
0001343C 0000                       		dc.w @pylon-Map_Pylon_internal
0001343E 09                         @pylon:		dc.b 9
0001343F 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00013444 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00013449 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
0001344E E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00013453 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00013458 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
0001345D 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00013462 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00013467 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
0001346C                            		even
0001346C                            		even
0001346C                            
0001346C                            		include	"_incObj\1B Water Surface.asm"
0001346C                            ; ---------------------------------------------------------------------------
0001346C                            ; Object 1B - water surface (LZ)
0001346C                            ; ---------------------------------------------------------------------------
0001346C                            
0001346C                            WaterSurface:
0001346C 7000                       		moveq	#0,d0
0001346E 1028 0024                  		move.b	obRoutine(a0),d0
00013472 323B 0000                  		move.w	Surf_Index(pc,d0.w),d1
00013476 4EFB 1000                  		jmp	Surf_Index(pc,d1.w)
0001347A                            ; ===========================================================================
0001347A 0000                       Surf_Index:	dc.w Surf_Main-Surf_Index
0001347C 0000                       		dc.w Surf_Action-Surf_Index
0001347E                            
0001347E =00000030                  surf_origX:	equ $30		; original x-axis position
0001347E =00000032                  surf_freeze:	equ $32		; flag to freeze animation
0001347E                            ; ===========================================================================
0001347E                            
0001347E                            Surf_Main:	; Routine 0
0001347E 5428 0024                  		addq.b	#2,obRoutine(a0)
00013482 217C 0000 0000 0004        		move.l	#Map_Surf,obMap(a0)
0001348A 317C C300 0002             		move.w	#$C300,obGfx(a0)
00013490 117C 0004 0001             		move.b	#4,obRender(a0)
00013496 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001349C 3168 0008 0030             		move.w	obX(a0),surf_origX(a0)
000134A2                            
000134A2                            Surf_Action:	; Routine 2
000134A2 3238 F700                  		move.w	(v_screenposx).w,d1
000134A6 0241 FFE0                  		andi.w	#$FFE0,d1
000134AA D268 0030                  		add.w	surf_origX(a0),d1
000134AE 0838 0000 FE05             		btst	#0,(v_framebyte).w
000134B4 6700                       		beq.s	@even		; branch on even frames
000134B6 0641 0020                  		addi.w	#$20,d1
000134BA                            
000134BA                            	@even:
000134BA 3141 0008                  		move.w	d1,obX(a0)	; match	obj x-position to screen position
000134BE 3238 F646                  		move.w	(v_waterpos1).w,d1
000134C2 3141 000C                  		move.w	d1,obY(a0)	; match	obj y-position to water	height
000134C6 4A28 0032                  		tst.b	surf_freeze(a0)
000134CA 6600                       		bne.s	@stopped
000134CC 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
000134D2 6700                       		beq.s	@animate	; if not, branch
000134D4 5628 001A                  		addq.b	#3,obFrame(a0)	; use different	frames
000134D8 117C 0001 0032             		move.b	#1,surf_freeze(a0) ; stop animation
000134DE 6000                       		bra.s	@display
000134E0                            ; ===========================================================================
000134E0                            
000134E0                            @stopped:
000134E0 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
000134E4 6600                       		bne.s	@display	; if yes, branch
000134E6 117C 0000 0032             		move.b	#0,surf_freeze(a0) ; resume animation
000134EC 5728 001A                  		subq.b	#3,obFrame(a0)	; use normal frames
000134F0                            
000134F0                            @animate:
000134F0 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000134F4 6A00                       		bpl.s	@display
000134F6 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
000134FC 5228 001A                  		addq.b	#1,obFrame(a0)
00013500 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)
00013506 6500                       		bcs.s	@display
00013508 117C 0000 001A             		move.b	#0,obFrame(a0)
0001350E                            
0001350E                            @display:
0001350E 6000 C2BA                  		bra.w	DisplaySprite
0001350E 6000 C2BA                  		bra.w	DisplaySprite
00013512                            Map_Surf:	include	"_maps\Water Surface.asm"
00013512                            ; --------------------------------------------------------------------------------
00013512                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00013512                            ; --------------------------------------------------------------------------------
00013512                            
00013512                            SME_LGSi8:	
00013512 0000 0000                  		dc.w SME_LGSi8_C-SME_LGSi8, SME_LGSi8_1C-SME_LGSi8	
00013516 0000 0000                  		dc.w SME_LGSi8_2C-SME_LGSi8, SME_LGSi8_3C-SME_LGSi8	
0001351A 0000 0000                  		dc.w SME_LGSi8_5B-SME_LGSi8, SME_LGSi8_7A-SME_LGSi8	
0001351E 03                         SME_LGSi8_C:	dc.b 3	
0001351F F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
00013524 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
00013529 F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
0001352E 03                         SME_LGSi8_1C:	dc.b 3	
0001352F F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
00013534 F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
00013539 F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
0001353E 03                         SME_LGSi8_2C:	dc.b 3	
0001353F F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
00013544 F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
00013549 F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
0001354E 06                         SME_LGSi8_3C:	dc.b 6	
0001354F F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
00013554 F80D 0000 C0               		dc.b $F8, $D, 0, 0, $C0	
00013559 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
0001355E F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
00013563 F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
00013568 F80D 0000 40               		dc.b $F8, $D, 0, 0, $40	
0001356D 06                         SME_LGSi8_5B:	dc.b 6	
0001356E F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
00013573 F80D 0008 C0               		dc.b $F8, $D, 0, 8, $C0	
00013578 F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
0001357D F80D 0008 00               		dc.b $F8, $D, 0, 8, 0	
00013582 F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
00013587 F80D 0008 40               		dc.b $F8, $D, 0, 8, $40	
0001358C 06                         SME_LGSi8_7A:	dc.b 6	
0001358D F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
00013592 F80D 0800 C0               		dc.b $F8, $D, 8, 0, $C0	
00013597 F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
0001359C F80D 0800 00               		dc.b $F8, $D, 8, 0, 0	
000135A1 F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
000135A6 F80D 0800 40               		dc.b $F8, $D, 8, 0, $40	
000135AC 00                         		even
000135AC 00                         		even
000135AC                            		include	"_incObj\0B Pole that Breaks.asm"
000135AC                            ; ---------------------------------------------------------------------------
000135AC                            ; Object 0B - pole that	breaks (LZ)
000135AC                            ; ---------------------------------------------------------------------------
000135AC                            
000135AC                            Pole:
000135AC 7000                       		moveq	#0,d0
000135AE 1028 0024                  		move.b	obRoutine(a0),d0
000135B2 323B 0000                  		move.w	Pole_Index(pc,d0.w),d1
000135B6 4EFB 1000                  		jmp	Pole_Index(pc,d1.w)
000135BA                            ; ===========================================================================
000135BA 0000                       Pole_Index:	dc.w Pole_Main-Pole_Index
000135BC 0000                       		dc.w Pole_Action-Pole_Index
000135BE 0000                       		dc.w Pole_Display-Pole_Index
000135C0                            
000135C0 =00000030                  pole_time:	equ $30		; time between grabbing the pole & breaking
000135C0 =00000032                  pole_grabbed:	equ $32		; flag set when Sonic grabs the pole
000135C0                            ; ===========================================================================
000135C0                            
000135C0                            Pole_Main:	; Routine 0
000135C0 5428 0024                  		addq.b	#2,obRoutine(a0)
000135C4 217C 0000 0000 0004        		move.l	#Map_Pole,obMap(a0)
000135CC 317C 43DE 0002             		move.w	#$43DE,obGfx(a0)
000135D2 117C 0004 0001             		move.b	#4,obRender(a0)
000135D8 117C 0008 0014             		move.b	#8,obActWid(a0)
000135DE 317C 0200 0018             		move.w	#$200,obPriority(a0)
000135E4 117C 00E1 0020             		move.b	#$E1,obColType(a0)
000135EA 7000                       		moveq	#0,d0
000135EC 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000135F0 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000135F4 3140 0030                  		move.w	d0,pole_time(a0) ; set breakage time
000135F8                            
000135F8                            Pole_Action:	; Routine 2
000135F8 4A28 0032                  		tst.b	pole_grabbed(a0) ; has pole already been grabbed?
000135FC 6700                       		beq.s	@grab		; if not, branch
000135FE 4A68 0030                  		tst.w	pole_time(a0)
00013602 6700                       		beq.s	@moveup
00013604 5368 0030                  		subq.w	#1,pole_time(a0) ; decrement time until break
00013608 6600                       		bne.s	@moveup
0001360A 117C 0001 001A             		move.b	#1,obFrame(a0)	; break	the pole
00013610 6000                       		bra.s	@release
00013612                            ; ===========================================================================
00013612                            
00013612                            @moveup:
00013612 43F8 D000                  		lea	(v_player).w,a1
00013616 3028 000C                  		move.w	obY(a0),d0
0001361A 0440 0018                  		subi.w	#$18,d0
0001361E 0838 0000 F604             		btst	#bitUp,(v_jpadhold1).w ; is "up" pressed?
00013624 6700                       		beq.s	@movedown	; if not, branch
00013626 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up
0001362A B069 000C                  		cmp.w	obY(a1),d0
0001362E 6500                       		bcs.s	@movedown
00013630 3340 000C                  		move.w	d0,obY(a1)
00013634                            
00013634                            @movedown:
00013634 0640 0024                  		addi.w	#$24,d0
00013638 0838 0001 F604             		btst	#bitDn,(v_jpadhold1).w ; is "down" pressed?
0001363E 6700                       		beq.s	@letgo		; if not, branch
00013640 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down
00013644 B069 000C                  		cmp.w	obY(a1),d0
00013648 6400                       		bcc.s	@letgo
0001364A 3340 000C                  		move.w	d0,obY(a1)
0001364E                            
0001364E                            @letgo:
0001364E 1038 F603                  		move.b	(v_jpadpress2).w,d0
00013652 0240 0070                  		andi.w	#btnABC,d0	; is A/B/C pressed?
00013656 6700                       		beq.s	Pole_Display	; if not, branch
00013658                            
00013658                            @release:
00013658 4228 0020                  		clr.b	obColType(a0)
0001365C 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Pole_Display next
00013660 4238 F7C8                  		clr.b	(f_lockmulti).w
00013664 4238 F7C9                  		clr.b	(f_wtunnelallow).w
00013668 4228 0032                  		clr.b	pole_grabbed(a0)
0001366C 6000                       		bra.s	Pole_Display
0001366E                            ; ===========================================================================
0001366E                            
0001366E                            @grab:
0001366E 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	pole?
00013672 6700                       		beq.s	Pole_Display	; if not, branch
00013674 43F8 D000                  		lea	(v_player).w,a1
00013678 3028 0008                  		move.w	obX(a0),d0
0001367C 0640 0014                  		addi.w	#$14,d0
00013680 B069 0008                  		cmp.w	obX(a1),d0
00013684 6400                       		bcc.s	Pole_Display
00013686 4228 0021                  		clr.b	obColProp(a0)
0001368A 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1)
00013690 6400                       		bcc.s	Pole_Display
00013692 4269 0010                  		clr.w	obVelX(a1)	; stop Sonic moving
00013696 4269 0012                  		clr.w	obVelY(a1)	; stop Sonic moving
0001369A 3028 0008                  		move.w	obX(a0),d0
0001369E 0640 0014                  		addi.w	#$14,d0
000136A2 3340 0008                  		move.w	d0,obX(a1)
000136A6 08A9 0000 0022             		bclr	#0,obStatus(a1)
000136AC 137C 0000 001C             		move.b	#id_Hang,obAnim(a1) ; set Sonic's animation to "hanging" ($11)
000136B2 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
000136B8 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
000136BE 117C 0001 0032             		move.b	#1,pole_grabbed(a0) ; begin countdown to breakage
000136C4                            
000136C4                            Pole_Display:	; Routine 4
000136C4 6000 E1B8                  		bra.w	RememberState
000136C4 6000 E1B8                  		bra.w	RememberState
000136C8                            Map_Pole:	include	"_maps\Pole that Breaks.asm"
000136C8                            ; ---------------------------------------------------------------------------
000136C8                            ; Sprite mappings - pole that breaks (LZ)
000136C8                            ; ---------------------------------------------------------------------------
000136C8                            Map_Pole_internal:
000136C8 0000                       		dc.w @normal-Map_Pole_internal
000136CA 0000                       		dc.w @broken-Map_Pole_internal
000136CC 02                         @normal:	dc.b 2			; normal pole
000136CD E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
000136D2 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
000136D7 04                         @broken:	dc.b 4			; broken pole
000136D8 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
000136DD F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
000136E2 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
000136E7 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
000136EC                            		even
000136EC                            		even
000136EC                            		include	"_incObj\0C Flapping Door.asm"
000136EC                            ; ---------------------------------------------------------------------------
000136EC                            ; Object 0C - flapping door (LZ)
000136EC                            ; ---------------------------------------------------------------------------
000136EC                            
000136EC                            FlapDoor:
000136EC 7000                       		moveq	#0,d0
000136EE 1028 0024                  		move.b	obRoutine(a0),d0
000136F2 323B 0000                  		move.w	Flap_Index(pc,d0.w),d1
000136F6 4EFB 1000                  		jmp	Flap_Index(pc,d1.w)
000136FA                            ; ===========================================================================
000136FA 0000                       Flap_Index:	dc.w Flap_Main-Flap_Index
000136FC 0000                       		dc.w Flap_OpenClose-Flap_Index
000136FE                            
000136FE =00000032                  flap_time:	equ $32		; time between opening/closing
000136FE =00000030                  flap_wait:	equ $30		; time until change
000136FE                            ; ===========================================================================
000136FE                            
000136FE                            Flap_Main:	; Routine 0
000136FE 5428 0024                  		addq.b	#2,obRoutine(a0)
00013702 217C 0000 0000 0004        		move.l	#Map_Flap,obMap(a0)
0001370A 317C 4328 0002             		move.w	#$4328,obGfx(a0)
00013710 0028 0004 0001             		ori.b	#4,obRender(a0)
00013716 117C 0028 0014             		move.b	#$28,obActWid(a0)
0001371C 7000                       		moveq	#0,d0
0001371E 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013722 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00013726 3140 0032                  		move.w	d0,flap_time(a0) ; set flap delay time
0001372A                            
0001372A                            Flap_OpenClose:	; Routine 2
0001372A 5368 0030                  		subq.w	#1,flap_wait(a0) ; decrement time delay
0001372E 6A00                       		bpl.s	@wait		; if time remains, branch
00013730 3168 0032 0030             		move.w	flap_time(a0),flap_wait(a0) ; reset time delay
00013736 0868 0000 001C             		bchg	#0,obAnim(a0)	; open/close door
0001373C 4A28 0001                  		tst.b	obRender(a0)
00013740 6A00                       		bpl.s	@nosound
0001374C                            
0001374C                            	@wait:
0001374C                            	@nosound:
0001374C 43F9 0000 0000             		lea	(Ani_Flap).l,a1
00013752 6100 912C                  		bsr.w	AnimateSprite
00013756 4238 F7C9                  		clr.b	(f_wtunnelallow).w ; enable wind tunnel
0001375A 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
0001375E 6600                       		bne.s	@display	; if yes, branch
00013760 3038 D008                  		move.w	(v_player+obX).w,d0
00013764 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic passed through the door?
00013768 6400                       		bcc.s	@display	; if yes, branch
0001376A 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
00013770 323C 0013                  		move.w	#$13,d1
00013774 343C 0020                  		move.w	#$20,d2
00013778 3602                       		move.w	d2,d3
0001377A 5243                       		addq.w	#1,d3
0001377C 3828 0008                  		move.w	obX(a0),d4
00013780 6100 E594                  		bsr.w	SolidObject	; make the door	solid
00013784                            
00013784                            	@display:
00013784 6000 E0F8                  		bra.w	RememberState
00013784 6000 E0F8                  		bra.w	RememberState
00013788                            		include	"_anim\Flapping Door.asm"
00013788                            ; ---------------------------------------------------------------------------
00013788                            ; Animation script - flapping door (LZ)
00013788                            ; ---------------------------------------------------------------------------
00013788 0000                       Ani_Flap:	dc.w @opening-Ani_Flap
0001378A 0000                       		dc.w @closing-Ani_Flap
0001378C 0300 0102 FE01             @opening:	dc.b 3,	0, 1, 2, afBack, 1
00013792 0302 0100 FE01             @closing:	dc.b 3,	2, 1, 0, afBack, 1
00013798                            		even
00013798                            		even
00013798                            Map_Flap:	include	"_maps\Flapping Door.asm"
00013798                            ; ---------------------------------------------------------------------------
00013798                            ; Sprite mappings - flapping door (LZ)
00013798                            ; ---------------------------------------------------------------------------
00013798                            Map_Flap_internal:
00013798 0000                       		dc.w @closed-Map_Flap_internal
0001379A 0000                       		dc.w @halfway-Map_Flap_internal
0001379C 0000                       		dc.w @open-Map_Flap_internal
0001379E 02                         @closed:	dc.b 2
0001379F E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
000137A4 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000137A9 02                         @halfway:	dc.b 2
000137AA DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
000137AF 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
000137B4 02                         @open:		dc.b 2
000137B5 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
000137BA 180D 1018 00               		dc.b $18, $D, $10, $18,	0
000137C0 00                         		even
000137C0 00                         		even
000137C0                            
000137C0                            		include	"_incObj\71 Invisible Barriers.asm"
000137C0                            ; ---------------------------------------------------------------------------
000137C0                            ; Object 71 - invisible	solid barriers
000137C0                            ; ---------------------------------------------------------------------------
000137C0                            
000137C0                            Invisibarrier:
000137C0 7000                       		moveq	#0,d0
000137C2 1028 0024                  		move.b	obRoutine(a0),d0
000137C6 323B 0000                  		move.w	Invis_Index(pc,d0.w),d1
000137CA 4EFB 1000                  		jmp	Invis_Index(pc,d1.w)
000137CE                            ; ===========================================================================
000137CE 0000                       Invis_Index:	dc.w Invis_Main-Invis_Index
000137D0 0000                       		dc.w Invis_Solid-Invis_Index
000137D2                            
000137D2 =00000016                  invis_height:	equ $16		; height in pixels
000137D2                            ; ===========================================================================
000137D2                            
000137D2                            Invis_Main:	; Routine 0
000137D2 5428 0024                  		addq.b	#2,obRoutine(a0)
000137D6 217C 0000 0000 0004        		move.l	#Map_Invis,obMap(a0)
000137DE 317C 8680 0002             		move.w	#$8680,obGfx(a0)
000137E4 0028 0004 0001             		ori.b	#4,obRender(a0)
000137EA 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000137EE 1200                       		move.b	d0,d1
000137F0 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
000137F4 0640 0010                  		addi.w	#$10,d0
000137F8 E248                       		lsr.w	#1,d0
000137FA 1140 0014                  		move.b	d0,obActWid(a0)	; set object width
000137FE 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00013802 5241                       		addq.w	#1,d1
00013804 E749                       		lsl.w	#3,d1
00013806 1141 0016                  		move.b	d1,invis_height(a0) ; set object height
0001380A                            
0001380A                            Invis_Solid:	; Routine 2
0001380A 6100 C34C                  		bsr.w	ChkObjectVisible
0001380E 6600                       		bne.s	@chkdel
00013810 7200                       		moveq	#0,d1
00013812 1228 0014                  		move.b	obActWid(a0),d1
00013816 0641 000B                  		addi.w	#$B,d1
0001381A 7400                       		moveq	#0,d2
0001381C 1428 0016                  		move.b	invis_height(a0),d2
00013820 3602                       		move.w	d2,d3
00013822 5243                       		addq.w	#1,d3
00013824 3828 0008                  		move.w	obX(a0),d4
00013828 6100 E534                  		bsr.w	SolidObject71
0001382C                            
0001382C                            @chkdel:
00013848 4A78 FE08                  		tst.w	(v_debuguse).w	; are you using	debug mode?
0001384C 6700                       		beq.s	@nodisplay	; if not, branch
0001384E 4EF9 0000 F7CA             		jmp	(DisplaySprite).l	; if yes, display the object
00013854                            
00013854                            	@nodisplay:
00013854 4E75                       		rts	
00013856                            
00013856                            	@delete:
00013856 4EF9 0000 F80A             		jmp	(DeleteObject).l
00013856 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001385C                            Map_Invis:	include	"_maps\Invisible Barriers.asm"
0001385C                            ; --------------------------------------------------------------------------------
0001385C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001385C                            ; --------------------------------------------------------------------------------
0001385C                            
0001385C                            SME_t60cE:	
0001385C 0000 0000                  		dc.w SME_t60cE_6-SME_t60cE, SME_t60cE_1B-SME_t60cE	
00013860 0000                       		dc.w SME_t60cE_30-SME_t60cE	
00013862 04                         SME_t60cE_6:	dc.b 4	
00013863 0005 0028 F0               		dc.b 0, 5, 0, $28, $F0	
00013868 0005 0028 00               		dc.b 0, 5, 0, $28, 0	
0001386D F005 0028 00               		dc.b $F0, 5, 0, $28, 0	
00013872 F005 0028 F0               		dc.b $F0, 5, 0, $28, $F0	
00013877 04                         SME_t60cE_1B:	dc.b 4	
00013878 E005 0028 C0               		dc.b $E0, 5, 0, $28, $C0	
0001387D E005 0028 30               		dc.b $E0, 5, 0, $28, $30	
00013882 1005 0028 30               		dc.b $10, 5, 0, $28, $30	
00013887 1005 0028 C0               		dc.b $10, 5, 0, $28, $C0	
0001388C 04                         SME_t60cE_30:	dc.b 4	
0001388D E005 0028 80               		dc.b $E0, 5, 0, $28, $80	
00013892 E005 0028 70               		dc.b $E0, 5, 0, $28, $70	
00013897 1005 0028 70               		dc.b $10, 5, 0, $28, $70	
0001389C 1005 0028 80               		dc.b $10, 5, 0, $28, $80	
000138A2 00                         		even
000138A2 00                         		even
000138A2                            
000138A2                            		include	"_incObj\5D Fan.asm"
000138A2                            ; ---------------------------------------------------------------------------
000138A2                            ; Object 5D - fans (SLZ)
000138A2                            ; ---------------------------------------------------------------------------
000138A2                            
000138A2                            Fan:
000138A2 7000                       		moveq	#0,d0
000138A4 1028 0024                  		move.b	obRoutine(a0),d0
000138A8 323B 0000                  		move.w	Fan_Index(pc,d0.w),d1
000138AC 4EFB 1000                  		jmp	Fan_Index(pc,d1.w)
000138B0                            ; ===========================================================================
000138B0 0000                       Fan_Index:	dc.w Fan_Main-Fan_Index
000138B2 0000                       		dc.w Fan_Delay-Fan_Index
000138B4                            
000138B4 =00000030                  fan_time:	equ $30		; time between switching on/off
000138B4 =00000032                  fan_switch:	equ $32		; on/off switch
000138B4                            ; ===========================================================================
000138B4                            
000138B4                            Fan_Main:	; Routine 0
000138B4 5428 0024                  		addq.b	#2,obRoutine(a0)
000138B8 217C 0000 0000 0004        		move.l	#Map_Fan,obMap(a0)
000138C0 317C 43A0 0002             		move.w	#$43A0,obGfx(a0)
000138C6 0028 0004 0001             		ori.b	#4,obRender(a0)
000138CC 117C 0010 0014             		move.b	#$10,obActWid(a0)
000138D2 317C 0200 0018             		move.w	#$200,obPriority(a0)
000138D8                            
000138D8                            Fan_Delay:	; Routine 2
000138D8 0828 0001 0028             		btst	#1,obSubtype(a0) ; is object type 02/03 (always on)?
000138DE 6600                       		bne.s	@blow		; if yes, branch
000138E0 5368 0030                  		subq.w	#1,fan_time(a0)	; subtract 1 from time delay
000138E4 6A00                       		bpl.s	@blow		; if time remains, branch
000138E6 317C 0078 0030             		move.w	#120,fan_time(a0) ; set delay to 2 seconds
000138EC 0868 0000 0032             		bchg	#0,fan_switch(a0) ; switch fan on/off
000138F2 6700                       		beq.s	@blow		; if fan is off, branch
000138F4 317C 00B4 0030             		move.w	#180,fan_time(a0) ; set delay to 3 seconds
000138FA                            
000138FA                            @blow:
000138FA 4A28 0032                  		tst.b	fan_switch(a0)	; is fan switched on?
000138FE 6600 0000                  		bne.w	@chkdel		; if not, branch
00013902 43F8 D000                  		lea	(v_player).w,a1
00013906 3029 0008                  		move.w	obX(a1),d0
0001390A 9068 0008                  		sub.w	obX(a0),d0
0001390E 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
00013914 6600                       		bne.s	@chksonic	; if yes, branch
00013916 4440                       		neg.w	d0
00013918                            
00013918                            @chksonic:
00013918 0640 0050                  		addi.w	#$50,d0
0001391C 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00013920 6400                       		bcc.s	@animate	; if yes, branch
00013922 3229 000C                  		move.w	obY(a1),d1
00013926 0641 0060                  		addi.w	#$60,d1
0001392A 9268 000C                  		sub.w	obY(a0),d1
0001392E 6500                       		bcs.s	@animate	; branch if Sonic is too low
00013930 0C41 0070                  		cmpi.w	#$70,d1
00013934 6400                       		bcc.s	@animate	; branch if Sonic is too high
00013936 0440 0050                  		subi.w	#$50,d0		; is Sonic more than $50 pixels from the fan?
0001393A 6400                       		bcc.s	@faraway	; if yes, branch
0001393C 4640                       		not.w	d0
0001393E D040                       		add.w	d0,d0
00013940                            
00013940                            	@faraway:
00013940 0640 0060                  		addi.w	#$60,d0
00013944 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
0001394A 6600                       		bne.s	@right		; if yes, branch
0001394C 4440                       		neg.w	d0
0001394E                            
0001394E                            	@right:
0001394E 4400                       		neg.b	d0
00013950 E840                       		asr.w	#4,d0
00013952 0828 0000 0028             		btst	#0,obSubtype(a0)
00013958 6700                       		beq.s	@movesonic
0001395A 4440                       		neg.w	d0
0001395C                            
0001395C                            	@movesonic:
0001395C D169 0008                  		add.w	d0,obX(a1)	; push Sonic away from the fan
00013960                            
00013960                            @animate:
00013960 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00013964 6A00                       		bpl.s	@chkdel
00013966 117C 0000 001E             		move.b	#0,obTimeFrame(a0)
0001396C 5228 001B                  		addq.b	#1,obAniFrame(a0)
00013970 0C28 0003 001B             		cmpi.b	#3,obAniFrame(a0)
00013976 6500                       		bcs.s	@noreset
00013978 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset after 4 frames
0001397E                            
0001397E                            	@noreset:
0001397E 7000                       		moveq	#0,d0
00013980 0828 0000 0028             		btst	#0,obSubtype(a0)
00013986 6700                       		beq.s	@noflip
00013988 7002                       		moveq	#2,d0
0001398A                            
0001398A                            	@noflip:
0001398A D028 001B                  		add.b	obAniFrame(a0),d0
0001398E 1140 001A                  		move.b	d0,obFrame(a0)
00013992                            
00013992                            @chkdel:
00013992 6100 BE36                  		bsr.w	DisplaySprite
000139B4 4E75                       		rts	
000139B4 4E75                       		rts	
000139B6                            Map_Fan:	include	"_maps\Fan.asm"
000139B6                            ; ---------------------------------------------------------------------------
000139B6                            ; Sprite mappings - fans (SLZ)
000139B6                            ; ---------------------------------------------------------------------------
000139B6                            Map_Fan_internal:
000139B6 0000                       		dc.w @fan1-Map_Fan_internal
000139B8 0000                       		dc.w @fan2-Map_Fan_internal
000139BA 0000                       		dc.w @fan3-Map_Fan_internal
000139BC 0000                       		dc.w @fan2-Map_Fan_internal
000139BE 0000                       		dc.w @fan1-Map_Fan_internal
000139C0 02                         @fan1:		dc.b 2
000139C1 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
000139C6 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
000139CB 02                         @fan2:		dc.b 2
000139CC F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
000139D1 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
000139D6 02                         @fan3:		dc.b 2
000139D7 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
000139DC 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
000139E2 00                         		even
000139E2 00                         		even
000139E2                            		include	"_incObj\5E Seesaw.asm"
000139E2                            ; ---------------------------------------------------------------------------
000139E2                            ; Object 5E - seesaws (SLZ)
000139E2                            ; ---------------------------------------------------------------------------
000139E2                            
000139E2                            Seesaw:
000139E2 7000                       		moveq	#0,d0
000139E4 1028 0024                  		move.b	obRoutine(a0),d0
000139E8 323B 0000                  		move.w	See_Index(pc,d0.w),d1
000139EC 4EBB 1000                  		jsr	See_Index(pc,d1.w)
000139F0 3028 0000                  		move.w	see_origX(a0),d0
000139F4 0240 FF80                  		andi.w	#$FF80,d0
000139F8 3238 F700                  		move.w	(v_screenposx).w,d1
000139FC 0441 0080                  		subi.w	#$80,d1
00013A00 0241 FF80                  		andi.w	#$FF80,d1
00013A04 9041                       		sub.w	d1,d0
00013A06 6B00 BE02                  		bmi.w	DeleteObject
00013A0A 0C40 0280                  		cmpi.w	#$280,d0
00013A0E 6200 BDFA                  		bhi.w	DeleteObject
00013A12 6000 BDB6                  		bra.w	DisplaySprite
00013A16                            ; ===========================================================================
00013A16 0000                       See_Index:	dc.w See_Main-See_Index
00013A18 0000                       		dc.w See_Slope-See_Index
00013A1A 0000                       		dc.w See_Slope2-See_Index
00013A1C 0000                       		dc.w See_Spikeball-See_Index
00013A1E 0000                       		dc.w See_MoveSpike-See_Index
00013A20 0000                       		dc.w See_SpikeFall-See_Index
00013A22                            
00013A22 =00000030                  see_origX:	equ $30		; original x-axis position
00013A22 =00000034                  see_origY:	equ $34		; original y-axis position
00013A22 =00000038                  see_speed:	equ $38		; speed of collision
00013A22 =0000003A                  see_frame:	equ $3A		; 
00013A22 =0000003C                  see_parent:	equ $3C		; RAM address of parent object
00013A22                            ; ===========================================================================
00013A22                            
00013A22                            See_Main:	; Routine 0
00013A22 5428 0024                  		addq.b	#2,obRoutine(a0)
00013A26 217C 0000 0000 0004        		move.l	#Map_Seesaw,obMap(a0)
00013A2E 317C 0374 0002             		move.w	#$374,obGfx(a0)
00013A34 0028 0004 0001             		ori.b	#4,obRender(a0)
00013A3A 117C 0004 0018             		move.b	#4,obPriority(a0)
00013A40 117C 0030 0014             		move.b	#$30,obActWid(a0)
00013A46 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013A4C 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 ?
00013A50 6600                       		bne.s	@noball		; if not, branch
00013A52                            
00013A52 6100 C326                  		bsr.w	FindNextFreeObj
00013A56 6600                       		bne.s	@noball
00013A58 12BC 005E                  		move.b	#id_Seesaw,0(a1) ; load spikeball object
00013A5C 5C29 0024                  		addq.b	#6,obRoutine(a1) ; use See_Spikeball routine
00013A60 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013A66 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013A6C 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013A72 2348 003C                  		move.l	a0,see_parent(a1)
00013A76                            
00013A76                            	@noball:
00013A76 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013A7C 6700                       		beq.s	@noflip		; if not, branch
00013A7E 117C 0002 001A             		move.b	#2,obFrame(a0)	; use different frame
00013A84                            
00013A84                            	@noflip:
00013A84 1168 001A 003A             		move.b	obFrame(a0),see_frame(a0)
00013A8A                            
00013A8A                            See_Slope:	; Routine 2
00013A8A 1228 003A                  		move.b	see_frame(a0),d1
00013A8E 6100 0000                  		bsr.w	See_ChgFrame
00013A92 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00013A98 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013A9E 6700                       		beq.s	@notflat	; if not, branch
00013AA0 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013AA6                            
00013AA6                            	@notflat:
00013AA6 43F8 D000                  		lea	(v_player).w,a1
00013AAA 3169 0012 0038             		move.w	obVelY(a1),see_speed(a0)
00013AB0 323C 0030                  		move.w	#$30,d1
00013AB4 4EB9 0000 8CF8             		jsr	(SlopeObject).l
00013ABA 4E75                       		rts	
00013ABC                            ; ===========================================================================
00013ABC                            
00013ABC                            See_Slope2:	; Routine 4
00013ABC 6100 0000                  		bsr.w	See_ChkSide
00013AC0 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00013AC6 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013ACC 6700                       		beq.s	@notflat	; if not, branch
00013ACE 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013AD4                            
00013AD4                            	@notflat:
00013AD4 323C 0030                  		move.w	#$30,d1
00013AD8 4EB9 0000 8D98             		jsr	(ExitPlatform).l
00013ADE 323C 0030                  		move.w	#$30,d1
00013AE2 3428 0008                  		move.w	obX(a0),d2
00013AE6 4EB9 0000 9D32             		jsr	(SlopeObject2).l
00013AEC 4E75                       		rts	
00013AEE                            ; ===========================================================================
00013AEE                            
00013AEE                            See_ChkSide:
00013AEE 7202                       		moveq	#2,d1
00013AF0 43F8 D000                  		lea	(v_player).w,a1
00013AF4 3028 0008                  		move.w	obX(a0),d0
00013AF8 9069 0008                  		sub.w	obX(a1),d0	; is Sonic on the left side of the seesaw?
00013AFC 6400                       		bcc.s	@leftside	; if yes, branch
00013AFE 4440                       		neg.w	d0
00013B00 7200                       		moveq	#0,d1
00013B02                            
00013B02                            	@leftside:
00013B02 0C40 0008                  		cmpi.w	#8,d0
00013B06 6400                       		bcc.s	See_ChgFrame
00013B08 7201                       		moveq	#1,d1
00013B0A                            
00013B0A                            See_ChgFrame:
00013B0A 1028 001A                  		move.b	obFrame(a0),d0
00013B0E B001                       		cmp.b	d1,d0		; does frame need to change?
00013B10 6700                       		beq.s	@noflip		; if not, branch
00013B12 6400                       		bcc.s	@loc_11772
00013B14 5400                       		addq.b	#2,d0
00013B16                            
00013B16                            	@loc_11772:
00013B16 5300                       		subq.b	#1,d0
00013B18 1140 001A                  		move.b	d0,obFrame(a0)
00013B1C 1141 003A                  		move.b	d1,see_frame(a0)
00013B20 08A8 0000 0001             		bclr	#0,obRender(a0)
00013B26 0828 0001 001A             		btst	#1,obFrame(a0)
00013B2C 6700                       		beq.s	@noflip
00013B2E 08E8 0000 0001             		bset	#0,obRender(a0)
00013B34                            
00013B34                            	@noflip:
00013B34 4E75                       		rts	
00013B36                            ; ===========================================================================
00013B36                            
00013B36                            See_Spikeball:	; Routine 6
00013B36 5428 0024                  		addq.b	#2,obRoutine(a0)
00013B3A 217C 0000 0000 0004        		move.l	#Map_SSawBall,obMap(a0)
00013B42 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00013B48 0028 0004 0001             		ori.b	#4,obRender(a0)
00013B4E 117C 0004 0018             		move.b	#4,obPriority(a0)
00013B54 117C 008B 0020             		move.b	#$8B,obColType(a0)
00013B5A 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013B60 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013B66 0668 0028 0008             		addi.w	#$28,obX(a0)
00013B6C 3168 000C 0034             		move.w	obY(a0),see_origY(a0)
00013B72 117C 0001 001A             		move.b	#1,obFrame(a0)
00013B78 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013B7E 6700                       		beq.s	See_MoveSpike	; if not, branch
00013B80 0468 0050 0008             		subi.w	#$50,obX(a0)	; move spikeball to the other side
00013B86 117C 0002 003A             		move.b	#2,see_frame(a0)
00013B8C                            
00013B8C                            See_MoveSpike:	; Routine 8
00013B8C 2268 003C                  		movea.l	see_parent(a0),a1
00013B90 7000                       		moveq	#0,d0
00013B92 1028 003A                  		move.b	see_frame(a0),d0
00013B96 9029 003A                  		sub.b	see_frame(a1),d0
00013B9A 6700                       		beq.s	loc_1183E
00013B9C 6400                       		bcc.s	loc_117FC
00013B9E 4400                       		neg.b	d0
00013BA0                            
00013BA0                            loc_117FC:
00013BA0 323C F7E8                  		move.w	#-$818,d1
00013BA4 343C FEEC                  		move.w	#-$114,d2
00013BA8 0C00 0001                  		cmpi.b	#1,d0
00013BAC 6700                       		beq.s	loc_11822
00013BAE 323C F510                  		move.w	#-$AF0,d1
00013BB2 343C FF34                  		move.w	#-$CC,d2
00013BB6 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00013BBC 6D00                       		blt.s	loc_11822
00013BBE 323C F200                  		move.w	#-$E00,d1
00013BC2 343C FF60                  		move.w	#-$A0,d2
00013BC6                            
00013BC6                            loc_11822:
00013BC6 3141 0012                  		move.w	d1,obVelY(a0)
00013BCA 3142 0010                  		move.w	d2,obVelX(a0)
00013BCE 3028 0008                  		move.w	obX(a0),d0
00013BD2 9068 0030                  		sub.w	see_origX(a0),d0
00013BD6 6400                       		bcc.s	loc_11838
00013BD8 4468 0010                  		neg.w	obVelX(a0)
00013BDC                            
00013BDC                            loc_11838:
00013BDC 5428 0024                  		addq.b	#2,obRoutine(a0)
00013BE0 6000                       		bra.s	See_SpikeFall
00013BE2                            ; ===========================================================================
00013BE2                            
00013BE2                            loc_1183E:
00013BE2 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013BE8 7000                       		moveq	#0,d0
00013BEA 1029 001A                  		move.b	obFrame(a1),d0
00013BEE 343C 0028                  		move.w	#$28,d2
00013BF2 3228 0008                  		move.w	obX(a0),d1
00013BF6 9268 0030                  		sub.w	see_origX(a0),d1
00013BFA 6400                       		bcc.s	loc_1185C
00013BFC 4442                       		neg.w	d2
00013BFE 5440                       		addq.w	#2,d0
00013C00                            
00013C00                            loc_1185C:
00013C00 D040                       		add.w	d0,d0
00013C02 3228 0034                  		move.w	see_origY(a0),d1
00013C06 D272 0000                  		add.w	(a2,d0.w),d1
00013C0A 3141 000C                  		move.w	d1,obY(a0)
00013C0E D468 0030                  		add.w	see_origX(a0),d2
00013C12 3142 0008                  		move.w	d2,obX(a0)
00013C16 4268 000E                  		clr.w	obY+2(a0)
00013C1A 4268 000A                  		clr.w	obX+2(a0)
00013C1E 4E75                       		rts	
00013C20                            ; ===========================================================================
00013C20                            
00013C20                            See_SpikeFall:	; Routine $A
00013C20 4A68 0012                  		tst.w	obVelY(a0)	; is spikeball falling down?
00013C24 6A00                       		bpl.s	loc_1189A	; if yes, branch
00013C26 6100 BB56                  		bsr.w	ObjectFall
00013C2A 3028 0034                  		move.w	see_origY(a0),d0
00013C2E 0440 002F                  		subi.w	#$2F,d0
00013C32 B068 000C                  		cmp.w	obY(a0),d0
00013C36 6E00                       		bgt.s	locret_11898
00013C38 6100 BB44                  		bsr.w	ObjectFall
00013C3C                            
00013C3C                            locret_11898:
00013C3C 4E75                       		rts	
00013C3E                            ; ===========================================================================
00013C3E                            
00013C3E                            loc_1189A:
00013C3E 6100 BB3E                  		bsr.w	ObjectFall
00013C42 2268 003C                  		movea.l	see_parent(a0),a1
00013C46 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013C4C 7000                       		moveq	#0,d0
00013C4E 1029 001A                  		move.b	obFrame(a1),d0
00013C52 3228 0008                  		move.w	obX(a0),d1
00013C56 9268 0030                  		sub.w	see_origX(a0),d1
00013C5A 6400                       		bcc.s	loc_118BA
00013C5C 5440                       		addq.w	#2,d0
00013C5E                            
00013C5E                            loc_118BA:
00013C5E D040                       		add.w	d0,d0
00013C60 3228 0034                  		move.w	see_origY(a0),d1
00013C64 D272 0000                  		add.w	(a2,d0.w),d1
00013C68 B268 000C                  		cmp.w	obY(a0),d1
00013C6C 6E00                       		bgt.s	locret_11938
00013C6E 2268 003C                  		movea.l	see_parent(a0),a1
00013C72 7202                       		moveq	#2,d1
00013C74 4A68 0010                  		tst.w	obVelX(a0)
00013C78 6B00                       		bmi.s	See_Spring
00013C7A 7200                       		moveq	#0,d1
00013C7C                            
00013C7C                            See_Spring:
00013C7C 1341 003A                  		move.b	d1,$3A(a1)
00013C80 1141 003A                  		move.b	d1,see_frame(a0)
00013C84 B229 001A                  		cmp.b	obFrame(a1),d1
00013C88 6700                       		beq.s	loc_1192C
00013C8A 08A9 0003 0022             		bclr	#3,obStatus(a1)
00013C90 6700                       		beq.s	loc_1192C
00013C92 4229 0025                  		clr.b	ob2ndRout(a1)
00013C96 137C 0002 0024             		move.b	#2,obRoutine(a1)
00013C9C 45F8 D000                  		lea	(v_player).w,a2
00013CA0 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
00013CA6 446A 0012                  		neg.w	obVelY(a2)
00013CAA 08EA 0001 0022             		bset	#1,obStatus(a2)
00013CB0 08AA 0003 0022             		bclr	#3,obStatus(a2)
00013CB6 422A 003C                  		clr.b	$3C(a2)
00013CBA 157C 0000 001C             		move.b	#id_Spring,obAnim(a2) ; change Sonic's animation to "spring" ($10)
00013CC0 157C 0002 0024             		move.b	#2,obRoutine(a2)
00013CD0                            
00013CD0                            loc_1192C:
00013CD0 4268 0010                  		clr.w	obVelX(a0)
00013CD4 4268 0012                  		clr.w	obVelY(a0)
00013CD8 5528 0024                  		subq.b	#2,obRoutine(a0)
00013CDC                            
00013CDC                            locret_11938:
00013CDC 4E75                       		rts	
00013CDE                            ; ===========================================================================
00013CDE FFF8 FFE4 FFD1 FFE4 FFF8   See_Speeds:	dc.w -8, -$1C, -$2F, -$1C, -8
00013CE8                            
00013CE8                            See_DataSlope:	incbin	"misc\slzssaw1.bin"
00013D18                            		even
00013D18                            See_DataFlat:	incbin	"misc\slzssaw2.bin"
00013D48                            		even
00013D48                            		even
00013D48                            Map_Seesaw:	include	"_maps\Seesaw.asm"
00013D48                            ; ---------------------------------------------------------------------------
00013D48                            ; Sprite mappings - seesaws (SLZ)
00013D48                            ; ---------------------------------------------------------------------------
00013D48                            Map_Seesaw_internal:
00013D48 0000                       		dc.w @sloping-Map_Seesaw_internal
00013D4A 0000                       		dc.w @flat-Map_Seesaw_internal
00013D4C 0000                       		dc.w @sloping-Map_Seesaw_internal
00013D4E 0000                       		dc.w @flat-Map_Seesaw_internal
00013D50 07                         @sloping:	dc.b 7
00013D51 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00013D56 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00013D5B E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00013D60 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00013D65 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00013D6A F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00013D6F FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00013D74 04                         @flat:		dc.b 4
00013D75 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00013D7A E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00013D7F E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00013D84 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00013D8A 00                         		even
00013D8A 00                         		even
00013D8A                            Map_SSawBall:	include	"_maps\Seesaw Ball.asm"
00013D8A                            ; ---------------------------------------------------------------------------
00013D8A                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00013D8A                            ; ---------------------------------------------------------------------------
00013D8A                            Map_SSawBall_internal:
00013D8A 0000                       		dc.w @red-Map_SSawBall_internal
00013D8C 0000                       		dc.w @silver-Map_SSawBall_internal
00013D8E 01                         @red:		dc.b 1
00013D8F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013D94 01                         @silver:	dc.b 1
00013D95 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00013D9A                            		even
00013D9A                            		even
00013D9A                            		include	"_incObj\5F Bomb Enemy.asm"
00013D9A                            ; ---------------------------------------------------------------------------
00013D9A                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00013D9A                            ; ---------------------------------------------------------------------------
00013D9A                            
00013D9A                            Bomb:
00013D9A 7000                       		moveq	#0,d0
00013D9C 1028 0024                  		move.b	obRoutine(a0),d0
00013DA0 323B 0000                  		move.w	Bom_Index(pc,d0.w),d1
00013DA4 4EFB 1000                  		jmp	Bom_Index(pc,d1.w)
00013DA8                            ; ===========================================================================
00013DA8 0000                       Bom_Index:	dc.w Bom_Main-Bom_Index
00013DAA 0000                       		dc.w Bom_Action-Bom_Index
00013DAC 0000                       		dc.w Bom_Display-Bom_Index
00013DAE 0000                       		dc.w Bom_End-Bom_Index
00013DB0                            
00013DB0 =00000030                  bom_time:	equ $30		; time of fuse
00013DB0 =00000034                  bom_origY:	equ $34		; original y-axis position
00013DB0 =0000003C                  bom_parent:	equ $3C		; address of parent object
00013DB0                            ; ===========================================================================
00013DB0                            
00013DB0                            Bom_Main:	; Routine 0
00013DB0 5428 0024                  		addq.b	#2,obRoutine(a0)
00013DB4 217C 0000 0000 0004        		move.l	#Map_Bomb,obMap(a0)
00013DBC 317C 0400 0002             		move.w	#$400,obGfx(a0)
00013DC2 0028 0004 0001             		ori.b	#4,obRender(a0)
00013DC8 317C 0180 0018             		move.w	#$180,obPriority(a0)
00013DCE 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013DD4 1028 0028                  		move.b	obSubtype(a0),d0
00013DD8 6700                       		beq.s	loc_11A3C
00013DDA 1140 0024                  		move.b	d0,obRoutine(a0)
00013DDE 4E75                       		rts	
00013DE0                            ; ===========================================================================
00013DE0                            
00013DE0                            loc_11A3C:
00013DE0 117C 009A 0020             		move.b	#$9A,obColType(a0)
00013DE6 0868 0000 0022             		bchg	#0,obStatus(a0)
00013DEC                            
00013DEC                            Bom_Action:	; Routine 2
00013DEC 7000                       		moveq	#0,d0
00013DEE 1028 0025                  		move.b	ob2ndRout(a0),d0
00013DF2 323B 0000                  		move.w	@index(pc,d0.w),d1
00013DF6 4EBB 1000                  		jsr	@index(pc,d1.w)
00013DFA 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013E00 6100 8A7E                  		bsr.w	AnimateSprite
00013E04 6000 DA78                  		bra.w	RememberState
00013E08                            ; ===========================================================================
00013E08 0000                       @index:		dc.w @walk-@index
00013E0A 0000                       		dc.w @wait-@index
00013E0C 0000                       		dc.w @explode-@index
00013E0E                            ; ===========================================================================
00013E0E                            
00013E0E                            @walk:
00013E0E 6100 0000                  		bsr.w	@chksonic
00013E12 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013E16 6A00                       		bpl.s	@noflip		; if time remains, branch
00013E18 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @wait
00013E1C 317C 05FF 0030             		move.w	#1535,bom_time(a0) ; set time delay to 25 seconds
00013E22 317C 0010 0010             		move.w	#$10,obVelX(a0)
00013E28 117C 0001 001C             		move.b	#1,obAnim(a0)	; use walking animation
00013E2E 0868 0000 0022             		bchg	#0,obStatus(a0)
00013E34 6700                       		beq.s	@noflip
00013E36 4468 0010                  		neg.w	obVelX(a0)	; change direction
00013E3A                            
00013E3A                            	@noflip:
00013E3A 4E75                       		rts	
00013E3C                            ; ===========================================================================
00013E3C                            
00013E3C                            @wait:
00013E3C 6100 0000                  		bsr.w	@chksonic
00013E40 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013E44 6B00                       		bmi.s	@stopwalking	; if time expires, branch
00013E46 6100 B96E                  		bsr.w	SpeedToPos
00013E4A 4E75                       		rts	
00013E4C                            ; ===========================================================================
00013E4C                            
00013E4C                            	@stopwalking:
00013E4C 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00013E50 317C 00B3 0030             		move.w	#179,bom_time(a0) ; set time delay to 3 seconds
00013E56 4268 0010                  		clr.w	obVelX(a0)	; stop walking
00013E5A 117C 0000 001C             		move.b	#0,obAnim(a0)	; use waiting animation
00013E60 4E75                       		rts	
00013E62                            ; ===========================================================================
00013E62                            
00013E62                            @explode:
00013E62 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013E66 6A00                       		bpl.s	@noexplode	; if time remains, branch
00013E68 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0) ; change bomb into an explosion
00013E6C 117C 0000 0024             		move.b	#0,obRoutine(a0)
00013E72                            
00013E72                            	@noexplode:
00013E72 4E75                       		rts	
00013E74                            ; ===========================================================================
00013E74                            
00013E74                            @chksonic:
00013E74 3038 D008                  		move.w	(v_player+obX).w,d0
00013E78 9068 0008                  		sub.w	obX(a0),d0
00013E7C 6400                       		bcc.s	@isleft
00013E7E 4440                       		neg.w	d0
00013E80                            
00013E80                            	@isleft:
00013E80 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels?
00013E84 6400                       		bcc.s	@outofrange	; if not, branch
00013E86 3038 D00C                  		move.w	(v_player+obY).w,d0
00013E8A 9068 000C                  		sub.w	obY(a0),d0
00013E8E 6400                       		bcc.s	@isabove
00013E90 4440                       		neg.w	d0
00013E92                            
00013E92                            	@isabove:
00013E92 0C40 0060                  		cmpi.w	#$60,d0
00013E96 6400                       		bcc.s	@outofrange
00013E98 4A78 FE08                  		tst.w	(v_debuguse).w
00013E9C 6600                       		bne.s	@outofrange
00013E9E                            
00013E9E 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
00013EA4 317C 008F 0030             		move.w	#143,bom_time(a0) ; set fuse time
00013EAA 4268 0010                  		clr.w	obVelX(a0)
00013EAE 117C 0002 001C             		move.b	#2,obAnim(a0)	; use activated animation
00013EB4 6100 BEC4                  		bsr.w	FindNextFreeObj
00013EB8 6600                       		bne.s	@outofrange
00013EBA 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load fuse object
00013EBE 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013EC4 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013ECA 3368 000C 0034             		move.w	obY(a0),bom_origY(a1)
00013ED0 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013ED6 137C 0004 0028             		move.b	#4,obSubtype(a1)
00013EDC 137C 0003 001C             		move.b	#3,obAnim(a1)
00013EE2 337C 0010 0012             		move.w	#$10,obVelY(a1)
00013EE8 0828 0001 0022             		btst	#1,obStatus(a0)	; is bomb upside-down?
00013EEE 6700                       		beq.s	@normal		; if not, branch
00013EF0 4469 0012                  		neg.w	obVelY(a1)	; reverse direction for fuse
00013EF4                            
00013EF4                            	@normal:
00013EF4 337C 008F 0030             		move.w	#143,bom_time(a1) ; set fuse time
00013EFA 2348 003C                  		move.l	a0,bom_parent(a1)
00013EFE                            
00013EFE                            @outofrange:
00013EFE 4E75                       		rts	
00013F00                            ; ===========================================================================
00013F00                            
00013F00                            Bom_Display:	; Routine 4
00013F00 6100                       		bsr.s	loc_11B70
00013F02 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013F08 6100 8976                  		bsr.w	AnimateSprite
00013F0C 6000 D970                  		bra.w	RememberState
00013F10                            ; ===========================================================================
00013F10                            
00013F10                            loc_11B70:
00013F10 5368 0030                  		subq.w	#1,bom_time(a0)
00013F14 6B00                       		bmi.s	loc_11B7C
00013F16 6100 B89E                  		bsr.w	SpeedToPos
00013F1A 4E75                       		rts	
00013F1C                            ; ===========================================================================
00013F1C                            
00013F1C                            loc_11B7C:
00013F1C 4268 0030                  		clr.w	bom_time(a0)
00013F20 4228 0024                  		clr.b	obRoutine(a0)
00013F24 3168 0034 000C             		move.w	bom_origY(a0),obY(a0)
00013F2A 7203                       		moveq	#3,d1
00013F2C 2248                       		movea.l	a0,a1
00013F2E 45F9 0000 0000             		lea	(Bom_ShrSpeed).l,a2 ; load shrapnel speed data
00013F34 6000                       		bra.s	@makeshrapnel
00013F36                            ; ===========================================================================
00013F36                            
00013F36                            	@loop:
00013F36 6100 BE42                  		bsr.w	FindNextFreeObj
00013F3A 6600                       		bne.s	@fail
00013F3C                            
00013F3C                            @makeshrapnel:
00013F3C 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load shrapnel	object
00013F40 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013F46 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013F4C 137C 0006 0028             		move.b	#6,obSubtype(a1)
00013F52 137C 0004 001C             		move.b	#4,obAnim(a1)
00013F58 335A 0010                  		move.w	(a2)+,obVelX(a1)
00013F5C 335A 0012                  		move.w	(a2)+,obVelY(a1)
00013F60 137C 0098 0020             		move.b	#$98,obColType(a1)
00013F66 08E9 0007 0001             		bset	#7,obRender(a1)
00013F6C                            
00013F6C                            	@fail:
00013F6C 51C9 FFC8                  		dbf	d1,@loop	; repeat 3 more	times
00013F70                            
00013F70 117C 0006 0024             		move.b	#6,obRoutine(a0)
00013F76                            
00013F76                            Bom_End:	; Routine 6
00013F76 6100 B83E                  		bsr.w	SpeedToPos
00013F7A 0668 0018 0012             		addi.w	#$18,obVelY(a0)
00013F80 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013F86 6100 88F8                  		bsr.w	AnimateSprite
00013F8A 4A28 0001                  		tst.b	obRender(a0)
00013F8E 6A00 B87A                  		bpl.w	DeleteObject
00013F92 6000 B836                  		bra.w	DisplaySprite
00013F96                            ; ===========================================================================
00013F96 FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013F96 FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013FA6                            		include	"_anim\Bomb Enemy.asm"
00013FA6                            ; ---------------------------------------------------------------------------
00013FA6                            ; Animation script - Bomb enemy
00013FA6                            ; ---------------------------------------------------------------------------
00013FA6 0000                       Ani_Bomb:	dc.w @stand-Ani_Bomb
00013FA8 0000                       		dc.w @walk-Ani_Bomb
00013FAA 0000                       		dc.w @activated-Ani_Bomb
00013FAC 0000                       		dc.w @fuse-Ani_Bomb
00013FAE 0000                       		dc.w @shrapnel-Ani_Bomb
00013FB0 1301 00FF                  @stand:		dc.b $13, 1, 0,	afEnd
00013FB4 1305 0403 02FF             @walk:		dc.b $13, 5, 4,	3, 2, afEnd
00013FBA 1307 06FF                  @activated:	dc.b $13, 7, 6,	afEnd
00013FBE 0308 09FF                  @fuse:		dc.b 3,	8, 9, afEnd
00013FC2 030A 0BFF                  @shrapnel:	dc.b 3,	$A, $B,	afEnd
00013FC6                            		even
00013FC6                            		even
00013FC6                            Map_Bomb:	include	"_maps\Bomb Enemy.asm"
00013FC6                            ; ---------------------------------------------------------------------------
00013FC6                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00013FC6                            ; ---------------------------------------------------------------------------
00013FC6                            Map_Bomb_internal:
00013FC6 0000                       		dc.w @stand1-Map_Bomb_internal
00013FC8 0000                       		dc.w @stand2-Map_Bomb_internal
00013FCA 0000                       		dc.w @walk1-Map_Bomb_internal
00013FCC 0000                       		dc.w @walk2-Map_Bomb_internal
00013FCE 0000                       		dc.w @walk3-Map_Bomb_internal
00013FD0 0000                       		dc.w @walk4-Map_Bomb_internal
00013FD2 0000                       		dc.w @activate1-Map_Bomb_internal
00013FD4 0000                       		dc.w @activate2-Map_Bomb_internal
00013FD6 0000                       		dc.w @fuse1-Map_Bomb_internal
00013FD8 0000                       		dc.w @fuse2-Map_Bomb_internal
00013FDA 0000                       		dc.w @shrapnel1-Map_Bomb_internal
00013FDC 0000                       		dc.w @shrapnel2-Map_Bomb_internal
00013FDE 03                         @stand1:	dc.b 3
00013FDF F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb standing still
00013FE4 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013FE9 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013FEE 03                         @stand2:	dc.b 3
00013FEF F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013FF4 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013FF9 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013FFE 03                         @walk1:		dc.b 3
00013FFF F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4	; bomb walking
00014004 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00014009 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001400E 03                         @walk2:		dc.b 3
0001400F F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014014 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00014019 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001401E 03                         @walk3:		dc.b 3
0001401F F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00014024 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00014029 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001402E 03                         @walk4:		dc.b 3
0001402F F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014034 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00014039 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001403E 02                         @activate1:	dc.b 2
0001403F F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb during detonation countdown
00014044 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00014049 02                         @activate2:	dc.b 2
0001404A F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001404F 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00014054 01                         @fuse1:		dc.b 1
00014055 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC ; fuse	(just before it	explodes)
0001405A 01                         @fuse2:		dc.b 1
0001405B E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00014060 01                         @shrapnel1:	dc.b 1
00014061 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC ; shrapnel (after it exploded)
00014066 01                         @shrapnel2:	dc.b 1
00014067 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001406C                            		even
0001406C                            		even
0001406C                            
0001406C                            		include	"_incObj\60 Orbinaut.asm"
0001406C                            ; ---------------------------------------------------------------------------
0001406C                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
0001406C                            ; ---------------------------------------------------------------------------
0001406C                            
0001406C                            Orbinaut:
0001406C 7000                       		moveq	#0,d0
0001406E 1028 0024                  		move.b	obRoutine(a0),d0
00014072 323B 0000                  		move.w	Orb_Index(pc,d0.w),d1
00014076 4EFB 1000                  		jmp	Orb_Index(pc,d1.w)
0001407A                            ; ===========================================================================
0001407A 0000                       Orb_Index:	dc.w Orb_Main-Orb_Index
0001407C 0000                       		dc.w Orb_ChkSonic-Orb_Index
0001407E 0000                       		dc.w Orb_Display-Orb_Index
00014080 0000                       		dc.w Orb_MoveOrb-Orb_Index
00014082 0000                       		dc.w Orb_ChkDel2-Orb_Index
00014084                            
00014084 =0000003C                  orb_parent:	equ $3C		; address of parent object
00014084                            ; ===========================================================================
00014084                            
00014084                            Orb_Main:	; Routine 0
00014084 217C 0000 0000 0004        		move.l	#Map_Orb,obMap(a0)
0001408C 317C 0429 0002             		move.w	#$429,obGfx(a0)	; SBZ specific code
00014092 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00014098 6700                       		beq.s	@isscrap
0001409A 317C 2429 0002             		move.w	#$2429,obGfx(a0) ; SLZ specific code
000140A0                            
000140A0                            	@isscrap:
000140A0 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000140A6 6600                       		bne.s	@notlabyrinth
000140A8 317C 0467 0002             		move.w	#$467,obGfx(a0)	; LZ specific code
000140AE                            
000140AE                            	@notlabyrinth:
000140AE 0028 0004 0001             		ori.b	#4,obRender(a0)
000140B4 317C 0200 0018             		move.w	#$200,obPriority(a0)
000140BA 117C 000B 0020             		move.b	#$B,obColType(a0)
000140C0 117C 000C 0014             		move.b	#$C,obActWid(a0)
000140C6 7400                       		moveq	#0,d2
000140C8 45E8 0037                  		lea	$37(a0),a2
000140CC 264A                       		movea.l	a2,a3
000140CE 524A                       		addq.w	#1,a2
000140D0 7203                       		moveq	#3,d1
000140D2                            
000140D2                            @makesatellites:
000140D2 6100 BCA6                  		bsr.w	FindNextFreeObj
000140D6 6600                       		bne.s	@fail
000140D8 5213                       		addq.b	#1,(a3)
000140DA 3A09                       		move.w	a1,d5
000140DC 0445 D000                  		subi.w	#$D000,d5
000140E0 EC4D                       		lsr.w	#6,d5
000140E2 0245 007F                  		andi.w	#$7F,d5
000140E6 14C5                       		move.b	d5,(a2)+
000140E8 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
000140EA 137C 0006 0024             		move.b	#6,obRoutine(a1) ; use Orb_MoveOrb routine
000140F0 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
000140F6 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
000140FC 0029 0004 0001             		ori.b	#4,obRender(a1)
00014102 337C 0200 0018             		move.w	#$200,obPriority(a1)
00014108 137C 0008 0014             		move.b	#8,obActWid(a1)
0001410E 137C 0003 001A             		move.b	#3,obFrame(a1)
00014114 137C 0098 0020             		move.b	#$98,obColType(a1)
0001411A 1342 0026                  		move.b	d2,obAngle(a1)
0001411E 0602 0040                  		addi.b	#$40,d2
00014122 2348 003C                  		move.l	a0,orb_parent(a1)
00014126 51C9 FFAA                  		dbf	d1,@makesatellites ; repeat sequence 3 more times
0001412A                            
0001412A                            	@fail:
0001412A 7001                       		moveq	#1,d0
0001412C 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left?
00014132 6700                       		beq.s	@noflip		; if not, branch
00014134 4440                       		neg.w	d0
00014136                            
00014136                            	@noflip:
00014136 1140 0036                  		move.b	d0,$36(a0)
0001413A 1168 0028 0024             		move.b	obSubtype(a0),obRoutine(a0) ; if type is 02, skip Orb_ChkSonic
00014140 5428 0024                  		addq.b	#2,obRoutine(a0)
00014144 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move orbinaut to the left
0001414A 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left??
00014150 6700                       		beq.s	@noflip2	; if not, branch
00014152 4468 0010                  		neg.w	obVelX(a0)	; move orbinaut	to the right
00014156                            
00014156                            	@noflip2:
00014156 4E75                       		rts	
00014158                            ; ===========================================================================
00014158                            
00014158                            Orb_ChkSonic:	; Routine 2
00014158 3038 D008                  		move.w	(v_player+obX).w,d0
0001415C 9068 0008                  		sub.w	obX(a0),d0	; is Sonic to the right of the orbinaut?
00014160 6400                       		bcc.s	@isright	; if yes, branch
00014162 4440                       		neg.w	d0
00014164                            
00014164                            	@isright:
00014164 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00014168 6400                       		bcc.s	@animate	; if not, branch
0001416A 3038 D00C                  		move.w	(v_player+obY).w,d0
0001416E 9068 000C                  		sub.w	obY(a0),d0	; is Sonic above the orbinaut?
00014172 6400                       		bcc.s	@isabove	; if yes, branch
00014174 4440                       		neg.w	d0
00014176                            
00014176                            	@isabove:
00014176 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
0001417A 6400                       		bcc.s	@animate	; if not, branch
0001417C 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00014180 6600                       		bne.s	@animate	; if yes, branch
00014182 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "angry" animation
00014188                            
00014188                            @animate:
00014188 43F9 0000 0000             		lea	(Ani_Orb).l,a1
0001418E 6100 86F0                  		bsr.w	AnimateSprite
00014192 6000 0000                  		bra.w	Orb_ChkDel
00014196                            ; ===========================================================================
00014196                            
00014196                            Orb_Display:	; Routine 4
00014196 6100 B61E                  		bsr.w	SpeedToPos
0001419A                            
0001419A                            Orb_ChkDel:
000141B8 6000 B610                  		bra.w	DisplaySprite
000141BC                            
000141BC                            @chkgone:
000141BC 45F8 FC00                  		lea	(v_objstate).w,a2
000141C0 7000                       		moveq	#0,d0
000141C2 1028 0023                  		move.b	obRespawnNo(a0),d0
000141C6 6700                       		beq.s	loc_11E34
000141C8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000141CE                            
000141CE                            loc_11E34:
000141CE 45E8 0037                  		lea	$37(a0),a2
000141D2 7400                       		moveq	#0,d2
000141D4 141A                       		move.b	(a2)+,d2
000141D6 5342                       		subq.w	#1,d2
000141D8 6500                       		bcs.s	Orb_Delete
000141DA                            
000141DA                            loc_11E40:
000141DA 7000                       		moveq	#0,d0
000141DC 101A                       		move.b	(a2)+,d0
000141DE ED48                       		lsl.w	#6,d0
000141E0 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000141E6 2240                       		movea.l	d0,a1
000141E8 6100 B622                  		bsr.w	DeleteChild
000141EC 51CA FFEC                  		dbf	d2,loc_11E40
000141F0                            
000141F0                            Orb_Delete:
000141F0 6000 B618                  		bra.w	DeleteObject
000141F4                            ; ===========================================================================
000141F4                            
000141F4                            Orb_MoveOrb:	; Routine 6
000141F4 2268 003C                  		movea.l	orb_parent(a0),a1
000141F8 0C11 0060                  		cmpi.b	#id_Orbinaut,0(a1) ; does parent object still exist?
000141FC 6600 B60C                  		bne.w	DeleteObject	; if not, delete
00014200 0C29 0002 001A             		cmpi.b	#2,obFrame(a1)	; is orbinaut angry?
00014206 6600                       		bne.s	@circle		; if not, branch
00014208 0C28 0040 0026             		cmpi.b	#$40,obAngle(a0) ; is spikeorb directly under the orbinaut?
0001420E 6600                       		bne.s	@circle		; if not, branch
00014210 5428 0024                  		addq.b	#2,obRoutine(a0)
00014214 5329 0037                  		subq.b	#1,$37(a1)
00014218 6600                       		bne.s	@fire
0001421A 5429 0024                  		addq.b	#2,obRoutine(a1)
0001421E                            
0001421E                            	@fire:
0001421E 317C FE00 0010             		move.w	#-$200,obVelX(a0) ; move orb to the left (quickly)
00014224 0829 0000 0022             		btst	#0,obStatus(a1)
0001422A 6700                       		beq.s	@noflip
0001422C 4468 0010                  		neg.w	obVelX(a0)
00014230                            
00014230                            	@noflip:
00014230 6000 B598                  		bra.w	DisplaySprite
00014234                            ; ===========================================================================
00014234                            
00014234                            @circle:
00014234 1028 0026                  		move.b	obAngle(a0),d0
00014238 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001423E E841                       		asr.w	#4,d1
00014240 D269 0008                  		add.w	obX(a1),d1
00014244 3141 0008                  		move.w	d1,obX(a0)
00014248 E840                       		asr.w	#4,d0
0001424A D069 000C                  		add.w	obY(a1),d0
0001424E 3140 000C                  		move.w	d0,obY(a0)
00014252 1029 0036                  		move.b	$36(a1),d0
00014256 D128 0026                  		add.b	d0,obAngle(a0)
0001425A 6000 B56E                  		bra.w	DisplaySprite
0001425E                            ; ===========================================================================
0001425E                            
0001425E                            Orb_ChkDel2:	; Routine 8
0001425E 6100 B556                  		bsr.w	SpeedToPos
00014262 4A28 0001                  		tst.b	obRender(a0)
00014266 6A00 B5A2                  		bpl.w	DeleteObject
0001426A 6000 B55E                  		bra.w	DisplaySprite
0001426A 6000 B55E                  		bra.w	DisplaySprite
0001426E                            		include	"_anim\Orbinaut.asm"
0001426E                            ; ---------------------------------------------------------------------------
0001426E                            ; Animation script - Orbinaut enemy
0001426E                            ; ---------------------------------------------------------------------------
0001426E 0000                       Ani_Orb:	dc.w @normal-Ani_Orb
00014270 0000                       		dc.w @angers-Ani_Orb
00014272 0F00 FF                    @normal:	dc.b $F, 0, afEnd
00014276 00                         		even
00014276 0F01 02FE 01               @angers:	dc.b $F, 1, 2, afBack, 1
0001427C 00                         		even
0001427C 00                         		even
0001427C                            Map_Orb:	include	"_maps\Orbinaut.asm"
0001427C                            ; ---------------------------------------------------------------------------
0001427C                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001427C                            ; ---------------------------------------------------------------------------
0001427C                            Map_Orb_internal:
0001427C 0000                       		dc.w @normal-Map_Orb_internal
0001427E 0000                       		dc.w @medium-Map_Orb_internal
00014280 0000                       		dc.w @angry-Map_Orb_internal
00014282 0000                       		dc.w @spikeball-Map_Orb_internal
00014284 01                         @normal:	dc.b 1
00014285 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001428A 01                         @medium:	dc.b 1
0001428B F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00014290 01                         @angry:		dc.b 1
00014291 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00014296 01                         @spikeball:	dc.b 1
00014297 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
0001429C                            		even
0001429C                            		even
0001429C                            
0001429C                            		include	"_incObj\16 Harpoon.asm"
0001429C                            ; ---------------------------------------------------------------------------
0001429C                            ; Object 16 - harpoon (LZ)
0001429C                            ; ---------------------------------------------------------------------------
0001429C                            
0001429C                            Harpoon:
0001429C 7000                       		moveq	#0,d0
0001429E 1028 0024                  		move.b	obRoutine(a0),d0
000142A2 323B 0000                  		move.w	Harp_Index(pc,d0.w),d1
000142A6 4EFB 1000                  		jmp	Harp_Index(pc,d1.w)
000142AA                            ; ===========================================================================
000142AA 0000                       Harp_Index:	dc.w Harp_Main-Harp_Index
000142AC 0000                       		dc.w Harp_Move-Harp_Index
000142AE 0000                       		dc.w Harp_Wait-Harp_Index
000142B0                            
000142B0 =00000030                  harp_time:	equ $30		; time between stabbing/retracting
000142B0                            ; ===========================================================================
000142B0                            
000142B0                            Harp_Main:	; Routine 0
000142B0 5428 0024                  		addq.b	#2,obRoutine(a0)
000142B4 217C 0000 0000 0004        		move.l	#Map_Harp,obMap(a0)
000142BC 317C 03CC 0002             		move.w	#$3CC,obGfx(a0)
000142C2 0028 0004 0001             		ori.b	#4,obRender(a0)
000142C8 317C 0200 0018             		move.w	#$200,obPriority(a0)
000142CE 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0) ; get type (vert/horiz)
000142D4 117C 0014 0014             		move.b	#$14,obActWid(a0)
000142DA 317C 003C 0030             		move.w	#60,harp_time(a0) ; set time to 1 second
000142E0                            
000142E0                            Harp_Move:	; Routine 2
000142E0 43F9 0000 0000             		lea	(Ani_Harp).l,a1
000142E6 6100 8598                  		bsr.w	AnimateSprite
000142EA 7000                       		moveq	#0,d0
000142EC 1028 001A                  		move.b	obFrame(a0),d0	; get frame number
000142F0 117B 0000 0020             		move.b	@types(pc,d0.w),obColType(a0) ; get collision type
000142F6 6000 D586                  		bra.w	RememberState
000142FA                            
000142FA                            	@types:
000142FA 9B9C 9D9E 9FA0             		dc.b $9B, $9C, $9D, $9E, $9F, $A0
00014300                            		even
00014300                            
00014300                            Harp_Wait:	; Routine 4
00014300 5368 0030                  		subq.w	#1,harp_time(a0) ; decrement timer
00014304 6A00                       		bpl.s	@chkdel		; branch if time remains
00014306 317C 003C 0030             		move.w	#60,harp_time(a0) ; reset timer
0001430C 5528 0024                  		subq.b	#2,obRoutine(a0) ; run "Harp_Move" subroutine
00014310 0868 0000 001C             		bchg	#0,obAnim(a0)	; reverse animation
00014316                            
00014316                            	@chkdel:
00014316 6000 D566                  		bra.w	RememberState
00014316 6000 D566                  		bra.w	RememberState
0001431A                            		include	"_anim\Harpoon.asm"
0001431A                            ; ---------------------------------------------------------------------------
0001431A                            ; Animation script - harpoon (LZ)
0001431A                            ; ---------------------------------------------------------------------------
0001431A 0000                       Ani_Harp:	dc.w @h_extending-Ani_Harp
0001431C 0000                       		dc.w @h_retracting-Ani_Harp
0001431E 0000                       		dc.w @v_extending-Ani_Harp
00014320 0000                       		dc.w @v_retracting-Ani_Harp
00014322 0301 02FC                  @h_extending:	dc.b 3,	1, 2, afRoutine
00014326 0301 00FC                  @h_retracting:	dc.b 3,	1, 0, afRoutine
0001432A 0304 05FC                  @v_extending:	dc.b 3,	4, 5, afRoutine
0001432E 0304 03FC                  @v_retracting:	dc.b 3,	4, 3, afRoutine
00014332                            		even
00014332                            		even
00014332                            Map_Harp:	include	"_maps\Harpoon.asm"
00014332                            ; --------------------------------------------------------------------------------
00014332                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00014332                            ; --------------------------------------------------------------------------------
00014332                            
00014332                            SME_JPFHb:	
00014332 0000 0000                  		dc.w SME_JPFHb_C-SME_JPFHb, SME_JPFHb_12-SME_JPFHb	
00014336 0000 0000                  		dc.w SME_JPFHb_18-SME_JPFHb, SME_JPFHb_23-SME_JPFHb	
0001433A 0000 0000                  		dc.w SME_JPFHb_29-SME_JPFHb, SME_JPFHb_2F-SME_JPFHb	
0001433E 01                         SME_JPFHb_C:	dc.b 1	
0001433F FC04 2000 F8               		dc.b $FC, 4, $20, 0, $F8	
00014344 01                         SME_JPFHb_12:	dc.b 1	
00014345 FC0C 2002 F8               		dc.b $FC, $C, $20, 2, $F8	
0001434A 02                         SME_JPFHb_18:	dc.b 2	
0001434B FC08 2006 F8               		dc.b $FC, 8, $20, 6, $F8	
00014350 FC08 2003 10               		dc.b $FC, 8, $20, 3, $10	
00014355 01                         SME_JPFHb_23:	dc.b 1	
00014356 F801 2009 FC               		dc.b $F8, 1, $20, 9, $FC	
0001435B 01                         SME_JPFHb_29:	dc.b 1	
0001435C E803 200B FC               		dc.b $E8, 3, $20, $B, $FC	
00014361 02                         SME_JPFHb_2F:	dc.b 2	
00014362 D802 200B FC               		dc.b $D8, 2, $20, $B, $FC	
00014367 F002 200F FC               		dc.b $F0, 2, $20, $F, $FC	
0001436C                            		even
0001436C                            		even
0001436C                            		include	"_incObj\61 LZ Blocks.asm"
0001436C                            ; ---------------------------------------------------------------------------
0001436C                            ; Object 61 - blocks (LZ)
0001436C                            ; ---------------------------------------------------------------------------
0001436C                            
0001436C                            LabyrinthBlock:
0001436C 7000                       		moveq	#0,d0
0001436E 1028 0024                  		move.b	obRoutine(a0),d0
00014372 323B 0000                  		move.w	LBlk_Index(pc,d0.w),d1
00014376 4EFB 1000                  		jmp	LBlk_Index(pc,d1.w)
0001437A                            ; ===========================================================================
0001437A 0000                       LBlk_Index:	dc.w LBlk_Main-LBlk_Index
0001437C 0000                       		dc.w LBlk_Action-LBlk_Index
0001437E                            
0001437E 1010                       LBlk_Var:	dc.b $10, $10		; width, height
00014380 200C                       		dc.b $20, $C
00014382 1010                       		dc.b $10, $10
00014384 1010                       		dc.b $10, $10
00014386                            
00014386 =00000016                  lblk_height:	equ $16		; block height
00014386 =00000034                  lblk_origX:	equ $34		; original x-axis position
00014386 =00000030                  lblk_origY:	equ $30		; original y-axis position
00014386 =00000036                  lblk_time:	equ $36		; time delay for block movement
00014386 =00000038                  lblk_untouched:	equ $38		; flag block as untouched
00014386                            ; ===========================================================================
00014386                            
00014386                            LBlk_Main:	; Routine 0
00014386 5428 0024                  		addq.b	#2,obRoutine(a0)
0001438A 217C 0000 0000 0004        		move.l	#Map_LBlock,obMap(a0)
00014392 317C 43E6 0002             		move.w	#$43E6,obGfx(a0)
00014398 117C 0004 0001             		move.b	#4,obRender(a0)
0001439E 317C 0180 0018             		move.w	#$180,obPriority(a0)
000143A4 7000                       		moveq	#0,d0
000143A6 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
000143AA E648                       		lsr.w	#3,d0		; read only the 1st digit
000143AC 0240 000E                  		andi.w	#$E,d0
000143B0 45FB 00CC                  		lea	LBlk_Var(pc,d0.w),a2
000143B4 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
000143B8 1152 0016                  		move.b	(a2),lblk_height(a0) ; set height
000143BC E248                       		lsr.w	#1,d0
000143BE 1140 001A                  		move.b	d0,obFrame(a0)
000143C2 3168 0008 0034             		move.w	obX(a0),lblk_origX(a0)
000143C8 3168 000C 0030             		move.w	obY(a0),lblk_origY(a0)
000143CE 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
000143D2 0200 000F                  		andi.b	#$F,d0		; read only the 2nd digit
000143D6 6700                       		beq.s	LBlk_Action	; branch if 0
000143D8 0C00 0007                  		cmpi.b	#7,d0
000143DC 6700                       		beq.s	LBlk_Action	; branch if 7
000143DE 117C 0001 0038             		move.b	#1,lblk_untouched(a0)
000143E4                            
000143E4                            LBlk_Action:	; Routine 2
000143E4 3F28 0008                  		move.w	obX(a0),-(sp)
000143E8 7000                       		moveq	#0,d0
000143EA 1028 0028                  		move.b	obSubtype(a0),d0
000143EE 0240 000F                  		andi.w	#$F,d0
000143F2 D040                       		add.w	d0,d0
000143F4 323B 0000                  		move.w	@index(pc,d0.w),d1
000143F8 4EBB 1000                  		jsr	@index(pc,d1.w)
000143FC 381F                       		move.w	(sp)+,d4
000143FE 4A28 0001                  		tst.b	obRender(a0)
00014402 6A00                       		bpl.s	@chkdel
00014404 7200                       		moveq	#0,d1
00014406 1228 0014                  		move.b	obActWid(a0),d1
0001440A 0641 000B                  		addi.w	#$B,d1
0001440E 7400                       		moveq	#0,d2
00014410 1428 0016                  		move.b	lblk_height(a0),d2
00014414 3602                       		move.w	d2,d3
00014416 5243                       		addq.w	#1,d3
00014418 6100 D8FC                  		bsr.w	SolidObject
0001441C 1144 003F                  		move.b	d4,$3F(a0)
00014420 6100 0000                  		bsr.w	loc_12180
00014424                            
00014424                            @chkdel:
00014442 6000 B386                  		bra.w	DisplaySprite
00014446                            ; ===========================================================================
00014446 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
0001444A 0000 0000                  		dc.w @type02-@index, @type03-@index
0001444E 0000 0000                  		dc.w @type04-@index, @type05-@index
00014452 0000 0000                  		dc.w @type06-@index, @type07-@index
00014456                            ; ===========================================================================
00014456                            
00014456                            @type00:
00014456 4E75                       		rts	
00014458                            ; ===========================================================================
00014458                            
00014458                            @type01:
00014458                            @type03:
00014458 4A68 0036                  		tst.w	lblk_time(a0)	; does time remain?
0001445C 6600                       		bne.s	@wait01		; if yes, branch
0001445E 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the object?
00014464 6700                       		beq.s	@donothing01	; if not, branch
00014466 317C 001E 0036             		move.w	#30,lblk_time(a0) ; wait for half second
0001446C                            
0001446C                            	@donothing01:
0001446C 4E75                       		rts	
0001446E                            ; ===========================================================================
0001446E                            
0001446E                            	@wait01:
0001446E 5368 0036                  		subq.w	#1,lblk_time(a0); decrement waiting time
00014472 66F8                       		bne.s	@donothing01	; if time remains, branch
00014474 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type02 or @type04
00014478 4228 0038                  		clr.b	lblk_untouched(a0) ; flag block as touched
0001447C 4E75                       		rts	
0001447E                            ; ===========================================================================
0001447E                            
0001447E                            @type02:
0001447E                            @type06:
0001447E 6100 B336                  		bsr.w	SpeedToPos
00014482 5068 0012                  		addq.w	#8,obVelY(a0)	; make block fall
00014486 6100 0000                  		bsr.w	ObjFloorDist
0001448A 4A41                       		tst.w	d1		; has block hit the floor?
0001448C 6A00 0000                  		bpl.w	@nofloor02	; if not, branch
00014490 5241                       		addq.w	#1,d1
00014492 D368 000C                  		add.w	d1,obY(a0)
00014496 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the floor
0001449A 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
0001449E                            
0001449E                            	@nofloor02:
0001449E 4E75                       		rts	
000144A0                            ; ===========================================================================
000144A0                            
000144A0                            @type04:
000144A0 6100 B314                  		bsr.w	SpeedToPos
000144A4 5168 0012                  		subq.w	#8,obVelY(a0)	; make block rise
000144A8 6100 0000                  		bsr.w	ObjHitCeiling
000144AC 4A41                       		tst.w	d1		; has block hit the ceiling?
000144AE 6A00 0000                  		bpl.w	@noceiling04	; if not, branch
000144B2 9368 000C                  		sub.w	d1,obY(a0)
000144B6 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the ceiling
000144BA 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
000144BE                            
000144BE                            	@noceiling04:
000144BE 4E75                       		rts	
000144C0                            ; ===========================================================================
000144C0                            
000144C0                            @type05:
000144C0 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	block?
000144C6 6600                       		bne.s	@notouch05	; if not, branch
000144C8 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type06
000144CC 4228 0038                  		clr.b	lblk_untouched(a0)
000144D0                            
000144D0                            	@notouch05:
000144D0 4E75                       		rts	
000144D2                            ; ===========================================================================
000144D2                            
000144D2                            @type07:
000144D2 3038 F646                  		move.w	(v_waterpos1).w,d0
000144D6 9068 000C                  		sub.w	obY(a0),d0	; is block level with water?
000144DA 6700                       		beq.s	@stop07		; if yes, branch
000144DC 6400                       		bcc.s	@fall07		; branch if block is above water
000144DE 0C40 FFFE                  		cmpi.w	#-2,d0
000144E2 6C00                       		bge.s	@loc_1214E
000144E4 70FE                       		moveq	#-2,d0
000144E6                            
000144E6                            	@loc_1214E:
000144E6 D168 000C                  		add.w	d0,obY(a0)	; make the block rise with water level
000144EA 6100 0000                  		bsr.w	ObjHitCeiling
000144EE 4A41                       		tst.w	d1		; has block hit the ceiling?
000144F0 6A00 0000                  		bpl.w	@noceiling07	; if not, branch
000144F4 9368 000C                  		sub.w	d1,obY(a0)	; stop block
000144F8                            
000144F8                            	@noceiling07:
000144F8 4E75                       		rts	
000144FA                            ; ===========================================================================
000144FA                            
000144FA                            @fall07:
000144FA 0C40 0002                  		cmpi.w	#2,d0
000144FE 6F00                       		ble.s	@loc_1216A
00014500 7002                       		moveq	#2,d0
00014502                            
00014502                            	@loc_1216A:
00014502 D168 000C                  		add.w	d0,obY(a0)	; make the block sink with water level
00014506 6100 0000                  		bsr.w	ObjFloorDist
0001450A 4A41                       		tst.w	d1
0001450C 6A00 0000                  		bpl.w	@stop07
00014510 5241                       		addq.w	#1,d1
00014512 D368 000C                  		add.w	d1,obY(a0)
00014516                            
00014516                            	@stop07:
00014516 4E75                       		rts	
00014518                            ; ===========================================================================
00014518                            
00014518                            loc_12180:
00014518 4A28 0038                  		tst.b	lblk_untouched(a0) ; has block been stood on or touched?
0001451C 6700                       		beq.s	locret_121C0	; if yes, branch
0001451E 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on it now?
00014524 6600                       		bne.s	loc_1219A	; if yes, branch
00014526 4A28 003E                  		tst.b	$3E(a0)
0001452A 6700                       		beq.s	locret_121C0
0001452C 5928 003E                  		subq.b	#4,$3E(a0)
00014530 6000                       		bra.s	loc_121A6
00014532                            ; ===========================================================================
00014532                            
00014532                            loc_1219A:
00014532 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00014538 6700                       		beq.s	locret_121C0
0001453A 5828 003E                  		addq.b	#4,$3E(a0)
0001453E                            
0001453E                            loc_121A6:
0001453E 1028 003E                  		move.b	$3E(a0),d0
00014542 4EB9 0000 3CCA             		jsr	(CalcSine).l
00014548 323C 0400                  		move.w	#$400,d1
0001454C C1C1                       		muls.w	d1,d0
0001454E 4840                       		swap	d0
00014550 D068 0030                  		add.w	lblk_origY(a0),d0
00014554 3140 000C                  		move.w	d0,obY(a0)
00014558                            
00014558                            locret_121C0:
00014558 4E75                       		rts	
00014558 4E75                       		rts	
0001455A                            Map_LBlock:	include	"_maps\LZ Blocks.asm"
0001455A                            Map_6865:
0001455A 0000                       Map_6865_0: 	dc.w Map_6865_8-Map_6865
0001455C 0000                       Map_6865_2: 	dc.w Map_6865_E-Map_6865
0001455E 0000                       Map_6865_4: 	dc.w Map_6865_19-Map_6865
00014560 0000                       Map_6865_6: 	dc.w Map_6865_1F-Map_6865
00014562 01                         Map_6865_8: 	dc.b $1
00014563 F00F 2000 F0               	dc.b $F0, $F, $20, $0, $F0
00014568 02                         Map_6865_E: 	dc.b $2
00014569 F40E 0069 E0               	dc.b $F4, $E, $0, $69, $E0
0001456E F40E 0075 00               	dc.b $F4, $E, $0, $75, $0
00014573 01                         Map_6865_19: 	dc.b $1
00014574 F00F 011A F0               	dc.b $F0, $F, $1, $1A, $F0
00014579 01                         Map_6865_1F: 	dc.b $1
0001457A F00F FDFA F0               	dc.b $F0, $F, $FD, $FA, $F0
00014580 00                         	even
00014580 00                         	even
00014580                            		include	"_incObj\62 Gargoyle.asm"
00014580                            ; ---------------------------------------------------------------------------
00014580                            ; Object 62 - gargoyle head (LZ)
00014580                            ; ---------------------------------------------------------------------------
00014580                            
00014580                            Gargoyle:
00014580 7000                       		moveq	#0,d0
00014582 1028 0024                  		move.b	obRoutine(a0),d0
00014586 323B 0000                  		move.w	Gar_Index(pc,d0.w),d1
0001458A 4EBB 1000                  		jsr	Gar_Index(pc,d1.w)
0001458E 6000 D2EE                  		bra.w	RememberState
00014592                            ; ===========================================================================
00014592 0000                       Gar_Index:	dc.w Gar_Main-Gar_Index
00014594 0000                       		dc.w Gar_MakeFire-Gar_Index
00014596 0000                       		dc.w Gar_FireBall-Gar_Index
00014598 0000                       		dc.w Gar_AniFire-Gar_Index
0001459A                            
0001459A 1E3C 5A78 96B4 D2F0        Gar_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
000145A2                            ; ===========================================================================
000145A2                            
000145A2                            Gar_Main:	; Routine 0
000145A2 5428 0024                  		addq.b	#2,obRoutine(a0)
000145A6 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
000145AE 317C 42E9 0002             		move.w	#$42E9,obGfx(a0)
000145B4 0028 0004 0001             		ori.b	#4,obRender(a0)
000145BA 317C 0180 0018             		move.w	#$180,obPriority(a0)
000145C0 117C 0010 0014             		move.b	#$10,obActWid(a0)
000145C6 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000145CA 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000145CE 117B 00CA 001F             		move.b	Gar_SpitRate(pc,d0.w),obDelayAni(a0) ; set fireball spit rate
000145D4 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
000145DA 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
000145E0                            
000145E0                            Gar_MakeFire:	; Routine 2
000145E0 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement timer
000145E4 6600                       		bne.s	@nofire		; if time remains, branch
000145E6                            
000145E6 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset timer
000145EC 6100 B56A                  		bsr.w	ChkObjectVisible
000145F0 6600                       		bne.s	@nofire
000145F2 6100 B770                  		bsr.w	FindFreeObj
000145F6 6600                       		bne.s	@nofire
000145F8 12BC 0062                  		move.b	#id_Gargoyle,0(a1) ; load fireball object
000145FC 5829 0024                  		addq.b	#4,obRoutine(a1) ; use Gar_FireBall routine
00014600 3368 0008 0008             		move.w	obX(a0),obX(a1)
00014606 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001460C 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00014612 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00014618                            
00014618                            	@nofire:
00014618 4E75                       		rts	
0001461A                            ; ===========================================================================
0001461A                            
0001461A                            Gar_FireBall:	; Routine 4
0001461A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001461E 117C 0008 0016             		move.b	#8,obHeight(a0)
00014624 117C 0008 0017             		move.b	#8,obWidth(a0)
0001462A 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
00014632 317C 02E9 0002             		move.w	#$2E9,obGfx(a0)
00014638 0028 0004 0001             		ori.b	#4,obRender(a0)
0001463E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00014644 117C 0098 0020             		move.b	#$98,obColType(a0)
0001464A 117C 0008 0014             		move.b	#8,obActWid(a0)
00014650 117C 0002 001A             		move.b	#2,obFrame(a0)
00014656 5068 000C                  		addq.w	#8,obY(a0)
0001465A 317C 0200 0010             		move.w	#$200,obVelX(a0)
00014660 0828 0000 0022             		btst	#0,obStatus(a0)	; is gargoyle facing left?
00014666 6600                       		bne.s	@noflip		; if not, branch
00014668 4468 0010                  		neg.w	obVelX(a0)
0001466C                            
0001466C                            	@noflip:
00014676                            
00014676                            Gar_AniFire:	; Routine 6
00014676 1038 FE05                  		move.b	(v_framebyte).w,d0
0001467A 0200 0007                  		andi.b	#7,d0
0001467E 6600                       		bne.s	@nochg
00014680 0868 0000 001A             		bchg	#0,obFrame(a0)	; change every 8 frames
00014686                            
00014686                            	@nochg:
00014686 6100 B12E                  		bsr.w	SpeedToPos
0001468A 0828 0000 0022             		btst	#0,obStatus(a0) ; is fireball moving left?
00014690 6600                       		bne.s	@isright	; if not, branch
00014692 76F8                       		moveq	#-8,d3
00014694 6100 0000                  		bsr.w	ObjHitWallLeft
00014698 4A41                       		tst.w	d1
0001469A 6B00 B16E                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
0001469E 4E75                       		rts	
000146A0                            
000146A0                            	@isright:
000146A0 7608                       		moveq	#8,d3
000146A2 6100 0000                  		bsr.w	ObjHitWallRight
000146A6 4A41                       		tst.w	d1
000146A8 6B00 B160                  		bmi.w	DeleteObject
000146AC 4E75                       		rts	
000146AC 4E75                       		rts	
000146AE                            Map_Gar:	include	"_maps\Gargoyle.asm"
000146AE                            ; ---------------------------------------------------------------------------
000146AE                            ; Sprite mappings - gargoyle head (LZ)
000146AE                            ; ---------------------------------------------------------------------------
000146AE                            Map_Gar_internal:
000146AE 0000                       		dc.w @head-Map_Gar_internal
000146B0 0000                       		dc.w @head-Map_Gar_internal
000146B2 0000                       		dc.w @fireball1-Map_Gar_internal
000146B4 0000                       		dc.w @fireball2-Map_Gar_internal
000146B6 03                         @head:		dc.b 3
000146B7 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
000146BC F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
000146C1 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
000146C6 01                         @fireball1:	dc.b 1
000146C7 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
000146CC 01                         @fireball2:	dc.b 1
000146CD FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
000146D2                            		even
000146D2                            		even
000146D2                            		include	"_incObj\63 LZ Conveyor.asm"
000146D2                            ; ---------------------------------------------------------------------------
000146D2                            ; Object 63 - platforms	on a conveyor belt (LZ)
000146D2                            ; ---------------------------------------------------------------------------
000146D2                            
000146D2                            LabyrinthConvey:
000146D2 7000                       		moveq	#0,d0
000146D4 1028 0024                  		move.b	obRoutine(a0),d0
000146D8 323B 0000                  		move.w	LCon_Index(pc,d0.w),d1
000146DC 4EBB 1000                  		jsr	LCon_Index(pc,d1.w)
000146FC                            
000146FC                            LCon_Display:
000146FC 6000 B0CC                  		bra.w	DisplaySprite
00014700                            ; ===========================================================================
00014700                            
00014700                            loc_1236A:
00014700 0C38 0002 FE11             		cmpi.b	#2,(v_act).w
00014706 6600                       		bne.s	loc_12378
00014708 0C40 FF80                  		cmpi.w	#-$80,d0
0001470C 64EE                       		bcc.s	LCon_Display
0001470E                            
0001470E                            loc_12378:
0001470E 1028 002F                  		move.b	$2F(a0),d0
00014712 6A00 B0F6                  		bpl.w	DeleteObject
00014716 0240 007F                  		andi.w	#$7F,d0
0001471A 45F8 F7C1                  		lea	(v_obj63).w,a2
0001471E 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00014724 6000 B0E4                  		bra.w	DeleteObject
00014728                            ; ===========================================================================
00014728 0000                       LCon_Index:	dc.w LCon_Main-LCon_Index
0001472A 0000                       		dc.w loc_124B2-LCon_Index
0001472C 0000                       		dc.w loc_124C2-LCon_Index
0001472E 0000                       		dc.w loc_124DE-LCon_Index
00014730                            ; ===========================================================================
00014730                            
00014730                            LCon_Main:	; Routine 0
00014730 1028 0028                  		move.b	obSubtype(a0),d0
00014734 6B00 0000                  		bmi.w	loc_12460
00014738 5428 0024                  		addq.b	#2,obRoutine(a0)
0001473C 217C 0000 0000 0004        		move.l	#Map_LConv,obMap(a0)
00014744 317C 43F6 0002             		move.w	#$43F6,obGfx(a0)
0001474A 0028 0004 0001             		ori.b	#4,obRender(a0)
00014750 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014756 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001475C 0C28 007F 0028             		cmpi.b	#$7F,obSubtype(a0)
00014762 6600                       		bne.s	loc_123E2
00014764 5828 0024                  		addq.b	#4,obRoutine(a0)
00014768 317C 03F6 0002             		move.w	#$3F6,obGfx(a0)
0001476E 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014774 6000 0000                  		bra.w	loc_124DE
00014778                            ; ===========================================================================
00014778                            
00014778                            loc_123E2:
00014778 117C 0004 001A             		move.b	#4,obFrame(a0)
0001477E 7000                       		moveq	#0,d0
00014780 1028 0028                  		move.b	obSubtype(a0),d0
00014784 3200                       		move.w	d0,d1
00014786 E648                       		lsr.w	#3,d0
00014788 0240 001E                  		andi.w	#$1E,d0
0001478C 45FA 0000                  		lea	LCon_Data(pc),a2
00014790 D4F2 0000                  		adda.w	(a2,d0.w),a2
00014794 315A 0038                  		move.w	(a2)+,$38(a0)
00014798 315A 0030                  		move.w	(a2)+,$30(a0)
0001479C 214A 003C                  		move.l	a2,$3C(a0)
000147A0 0241 000F                  		andi.w	#$F,d1
000147A4 E549                       		lsl.w	#2,d1
000147A6 1141 0038                  		move.b	d1,$38(a0)
000147AA 117C 0004 003A             		move.b	#4,$3A(a0)
000147B0 4A38 F7C0                  		tst.b	(f_conveyrev).w
000147B4 6700                       		beq.s	loc_1244C
000147B6 117C 0001 003B             		move.b	#1,$3B(a0)
000147BC 4428 003A                  		neg.b	$3A(a0)
000147C0 7200                       		moveq	#0,d1
000147C2 1228 0038                  		move.b	$38(a0),d1
000147C6 D228 003A                  		add.b	$3A(a0),d1
000147CA B228 0039                  		cmp.b	$39(a0),d1
000147CE 6500                       		bcs.s	loc_12448
000147D0 1001                       		move.b	d1,d0
000147D2 7200                       		moveq	#0,d1
000147D4 4A00                       		tst.b	d0
000147D6 6A00                       		bpl.s	loc_12448
000147D8 1228 0039                  		move.b	$39(a0),d1
000147DC 5901                       		subq.b	#4,d1
000147DE                            
000147DE                            loc_12448:
000147DE 1141 0038                  		move.b	d1,$38(a0)
000147E2                            
000147E2                            loc_1244C:
000147E2 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000147E8 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000147EE 6100 0000                  		bsr.w	LCon_ChangeDir
000147F2 6000 0000                  		bra.w	loc_124B2
000147F6                            ; ===========================================================================
000147F6                            
000147F6                            loc_12460:
000147F6 1140 002F                  		move.b	d0,$2F(a0)
000147FA 0240 007F                  		andi.w	#$7F,d0
000147FE 45F8 F7C1                  		lea	(v_obj63).w,a2
00014802 08F2 0000 0000             		bset	#0,(a2,d0.w)
00014808 6600 B000                  		bne.w	DeleteObject
0001480C D040                       		add.w	d0,d0
0001480E 0240 001E                  		andi.w	#$1E,d0
00014812 0640 0000                  		addi.w	#ObjPosLZPlatform_Index-ObjPos_Index,d0
00014816 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
0001481C D4F2 0000                  		adda.w	(a2,d0.w),a2
00014820 321A                       		move.w	(a2)+,d1
00014822 2248                       		movea.l	a0,a1
00014824 6000                       		bra.s	LCon_MakePtfms
00014826                            ; ===========================================================================
00014826                            
00014826                            LCon_Loop:
00014826 6100 B53C                  		bsr.w	FindFreeObj
0001482A 6600                       		bne.s	loc_124AA
0001482C                            
0001482C                            LCon_MakePtfms:
0001482C 12BC 0063                  		move.b	#id_LabyrinthConvey,0(a1)
00014830 335A 0008                  		move.w	(a2)+,obX(a1)
00014834 335A 000C                  		move.w	(a2)+,obY(a1)
00014838 301A                       		move.w	(a2)+,d0
0001483A 1340 0028                  		move.b	d0,obSubtype(a1)
0001483E                            
0001483E                            loc_124AA:
0001483E 51C9 FFE6                  		dbf	d1,LCon_Loop
00014842                            
00014842 588F                       		addq.l	#4,sp
00014844 4E75                       		rts	
00014846                            ; ===========================================================================
00014846                            
00014846                            loc_124B2:	; Routine 2
00014846 7200                       		moveq	#0,d1
00014848 1228 0014                  		move.b	obActWid(a0),d1
0001484C 4EB9 0000 8C24             		jsr	(PlatformObject).l
00014852 6000 0000                  		bra.w	sub_12502
00014856                            ; ===========================================================================
00014856                            
00014856                            loc_124C2:	; Routine 4
00014856 7200                       		moveq	#0,d1
00014858 1228 0014                  		move.b	obActWid(a0),d1
0001485C 4EB9 0000 8D98             		jsr	(ExitPlatform).l
00014862 3F28 0008                  		move.w	obX(a0),-(sp)
00014866 6100 0000                  		bsr.w	sub_12502
0001486A 341F                       		move.w	(sp)+,d2
0001486C 4EF9 0000 9302             		jmp	(MvSonicOnPtfm2).l
00014872                            ; ===========================================================================
00014872                            
00014872                            loc_124DE:	; Routine 6
00014872 3038 FE04                  		move.w	(v_framecount).w,d0
00014876 0240 0003                  		andi.w	#3,d0
0001487A 6600                       		bne.s	loc_124FC
0001487C 7201                       		moveq	#1,d1
0001487E 4A38 F7C0                  		tst.b	(f_conveyrev).w
00014882 6700                       		beq.s	loc_124F2
00014884 4401                       		neg.b	d1
00014886                            
00014886                            loc_124F2:
00014886 D328 001A                  		add.b	d1,obFrame(a0)
0001488A 0228 0003 001A             		andi.b	#3,obFrame(a0)
00014890                            
00014890                            loc_124FC:
00014890 588F                       		addq.l	#4,sp
00014892 6000 CFEA                  		bra.w	RememberState
00014896                            
00014896                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014896                            
00014896                            
00014896                            sub_12502:
00014896 4A38 F7EE                  		tst.b	(f_switch+$E).w
0001489A 6700                       		beq.s	loc_12520
0001489C 4A28 003B                  		tst.b	$3B(a0)
000148A0 6600                       		bne.s	loc_12520
000148A2 117C 0001 003B             		move.b	#1,$3B(a0)
000148A8 11FC 0001 F7C0             		move.b	#1,(f_conveyrev).w
000148AE 4428 003A                  		neg.b	$3A(a0)
000148B2 6000                       		bra.s	loc_12534
000148B4                            ; ===========================================================================
000148B4                            
000148B4                            loc_12520:
000148B4 3028 0008                  		move.w	obX(a0),d0
000148B8 B068 0034                  		cmp.w	$34(a0),d0
000148BC 6600                       		bne.s	loc_1256A
000148BE 3028 000C                  		move.w	obY(a0),d0
000148C2 B068 0036                  		cmp.w	$36(a0),d0
000148C6 6600                       		bne.s	loc_1256A
000148C8                            
000148C8                            loc_12534:
000148C8 7200                       		moveq	#0,d1
000148CA 1228 0038                  		move.b	$38(a0),d1
000148CE D228 003A                  		add.b	$3A(a0),d1
000148D2 B228 0039                  		cmp.b	$39(a0),d1
000148D6 6500                       		bcs.s	loc_12552
000148D8 1001                       		move.b	d1,d0
000148DA 7200                       		moveq	#0,d1
000148DC 4A00                       		tst.b	d0
000148DE 6A00                       		bpl.s	loc_12552
000148E0 1228 0039                  		move.b	$39(a0),d1
000148E4 5901                       		subq.b	#4,d1
000148E6                            
000148E6                            loc_12552:
000148E6 1141 0038                  		move.b	d1,$38(a0)
000148EA 2268 003C                  		movea.l	$3C(a0),a1
000148EE 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000148F4 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000148FA 6100 0000                  		bsr.w	LCon_ChangeDir
000148FE                            
000148FE                            loc_1256A:
000148FE 6100 AEB6                  		bsr.w	SpeedToPos
00014902 4E75                       		rts	
00014904                            ; End of function sub_12502
00014904                            
00014904                            
00014904                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014904                            
00014904                            
00014904                            LCon_ChangeDir:
00014904 7000                       		moveq	#0,d0
00014906 343C FF00                  		move.w	#-$100,d2
0001490A 3028 0008                  		move.w	obX(a0),d0
0001490E 9068 0034                  		sub.w	$34(a0),d0
00014912 6400                       		bcc.s	loc_12584
00014914 4440                       		neg.w	d0
00014916 4442                       		neg.w	d2
00014918                            
00014918                            loc_12584:
00014918 7200                       		moveq	#0,d1
0001491A 363C FF00                  		move.w	#-$100,d3
0001491E 3228 000C                  		move.w	obY(a0),d1
00014922 9268 0036                  		sub.w	$36(a0),d1
00014926 6400                       		bcc.s	loc_12598
00014928 4441                       		neg.w	d1
0001492A 4443                       		neg.w	d3
0001492C                            
0001492C                            loc_12598:
0001492C B240                       		cmp.w	d0,d1
0001492E 6500                       		bcs.s	loc_125C2
00014930 3028 0008                  		move.w	obX(a0),d0
00014934 9068 0034                  		sub.w	$34(a0),d0
00014938 6700                       		beq.s	loc_125AE
0001493A 48C0                       		ext.l	d0
0001493C E180                       		asl.l	#8,d0
0001493E 81C1                       		divs.w	d1,d0
00014940 4440                       		neg.w	d0
00014942                            
00014942                            loc_125AE:
00014942 3140 0010                  		move.w	d0,obVelX(a0)
00014946 3143 0012                  		move.w	d3,obVelY(a0)
0001494A 4840                       		swap	d0
0001494C 3140 000A                  		move.w	d0,obX+2(a0)
00014950 4268 000E                  		clr.w	obY+2(a0)
00014954 4E75                       		rts	
00014956                            ; ===========================================================================
00014956                            
00014956                            loc_125C2:
00014956 3228 000C                  		move.w	obY(a0),d1
0001495A 9268 0036                  		sub.w	$36(a0),d1
0001495E 6700                       		beq.s	loc_125D4
00014960 48C1                       		ext.l	d1
00014962 E181                       		asl.l	#8,d1
00014964 83C0                       		divs.w	d0,d1
00014966 4441                       		neg.w	d1
00014968                            
00014968                            loc_125D4:
00014968 3141 0012                  		move.w	d1,obVelY(a0)
0001496C 3142 0010                  		move.w	d2,obVelX(a0)
00014970 4841                       		swap	d1
00014972 3141 000E                  		move.w	d1,obY+2(a0)
00014976 4268 000A                  		clr.w	obX+2(a0)
0001497A 4E75                       		rts	
0001497C                            ; End of function LCon_ChangeDir
0001497C                            
0001497C                            ; ===========================================================================
0001497C 0000                       LCon_Data:	dc.w word_125F4-LCon_Data
0001497E 0000                       		dc.w word_12610-LCon_Data
00014980 0000                       		dc.w word_12628-LCon_Data
00014982 0000                       		dc.w word_1263C-LCon_Data
00014984 0000                       		dc.w word_12650-LCon_Data
00014986 0000                       		dc.w word_12668-LCon_Data
00014988 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00014998 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
000149A4 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
000149B4 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
000149BC 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
000149D0 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
000149E4 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
000149FC 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
000149FC 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014A10                            Map_LConv:	include	"_maps\LZ Conveyor.asm"
00014A10                            ; ---------------------------------------------------------------------------
00014A10                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00014A10                            ; ---------------------------------------------------------------------------
00014A10                            Map_LConv_internal:
00014A10 0000                       		dc.w @wheel1-Map_LConv_internal
00014A12 0000                       		dc.w @wheel2-Map_LConv_internal
00014A14 0000                       		dc.w @wheel3-Map_LConv_internal
00014A16 0000                       		dc.w @wheel4-Map_LConv_internal
00014A18 0000                       		dc.w @platform-Map_LConv_internal
00014A1A 01                         @wheel1:	dc.b 1
00014A1B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00014A20 01                         @wheel2:	dc.b 1
00014A21 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00014A26 01                         @wheel3:	dc.b 1
00014A27 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00014A2C 01                         @wheel4:	dc.b 1
00014A2D F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00014A32 01                         @platform:	dc.b 1
00014A33 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00014A38                            		even
00014A38                            		even
00014A38                            		include	"_incObj\64 Bubbles.asm"
00014A38                            ; ---------------------------------------------------------------------------
00014A38                            ; Object 64 - bubbles (LZ)
00014A38                            ; ---------------------------------------------------------------------------
00014A38                            
00014A38                            Bubble:
00014A38 7000                       		moveq	#0,d0
00014A3A 1028 0024                  		move.b	obRoutine(a0),d0
00014A3E 323B 0000                  		move.w	Bub_Index(pc,d0.w),d1
00014A42 4EFB 1000                  		jmp	Bub_Index(pc,d1.w)
00014A46                            ; ===========================================================================
00014A46 0000                       Bub_Index:	dc.w Bub_Main-Bub_Index
00014A48 0000                       		dc.w Bub_Animate-Bub_Index
00014A4A 0000                       		dc.w Bub_ChkWater-Bub_Index
00014A4C 0000                       		dc.w Bub_Display-Bub_Index
00014A4E 0000                       		dc.w Bub_Delete-Bub_Index
00014A50 0000                       		dc.w Bub_BblMaker-Bub_Index
00014A52                            
00014A52 =0000002E                  bub_inhalable:	equ $2E		; flag set when bubble is collectable
00014A52 =00000030                  bub_origX:	equ $30		; original x-axis position
00014A52 =00000032                  bub_time:	equ $32		; time until next bubble spawn
00014A52 =00000033                  bub_freq:	equ $33		; frequency of bubble spawn
00014A52                            ; ===========================================================================
00014A52                            
00014A52                            Bub_Main:	; Routine 0
00014A52 5428 0024                  		addq.b	#2,obRoutine(a0)
00014A56 217C 0000 0000 0004        		move.l	#Map_Bub,obMap(a0)
00014A5E 317C 8348 0002             		move.w	#$8348,obGfx(a0)
00014A64 117C 0084 0001             		move.b	#$84,obRender(a0)
00014A6A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014A70 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014A76 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
00014A7A 6A00                       		bpl.s	@bubble		; if type is $0-$7F, branch
00014A7C                            
00014A7C 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Bub_BblMaker next
00014A80 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00014A84 1140 0032                  		move.b	d0,bub_time(a0)
00014A88 1140 0033                  		move.b	d0,bub_freq(a0)	; set bubble frequency
00014A8C 117C 0006 001C             		move.b	#6,obAnim(a0)
00014A92 6000 0000                  		bra.w	Bub_BblMaker
00014A96                            ; ===========================================================================
00014A96                            
00014A96                            @bubble:
00014A96 1140 001C                  		move.b	d0,obAnim(a0)
00014A9A 3168 0008 0030             		move.w	obX(a0),bub_origX(a0)
00014AA0 317C FF78 0012             		move.w	#-$88,obVelY(a0) ; float bubble upwards
00014AA6 4EB9 0000 3CA4             		jsr	(RandomNumber).l
00014AAC 1140 0026                  		move.b	d0,obAngle(a0)
00014AB0                            
00014AB0                            Bub_Animate:	; Routine 2
00014AB0 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014AB6 4EB9 0000 C880             		jsr	(AnimateSprite).l
00014ABC 0C28 0006 001A             		cmpi.b	#6,obFrame(a0)	; is bubble full-size?
00014AC2 6600                       		bne.s	Bub_ChkWater	; if not, branch
00014AC4                            
00014AC4 117C 0001 002E             		move.b	#1,bub_inhalable(a0) ; set "inhalable" flag
00014ACA                            
00014ACA                            Bub_ChkWater:	; Routine 4
00014ACA 3038 F646                  		move.w	(v_waterpos1).w,d0
00014ACE B068 000C                  		cmp.w	obY(a0),d0	; is bubble underwater?
00014AD2 6500                       		bcs.s	@wobble		; if yes, branch
00014AD4                            
00014AD4                            @burst:
00014AD4 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto Bub_Display next
00014ADA 5628 001C                  		addq.b	#3,obAnim(a0)	; run "bursting" animation
00014ADE 6000 0000                  		bra.w	Bub_Display
00014AE2                            ; ===========================================================================
00014AE2                            
00014AE2                            @wobble:
00014AE2 1028 0026                  		move.b	obAngle(a0),d0
00014AE6 5228 0026                  		addq.b	#1,obAngle(a0)
00014AEA 0240 007F                  		andi.w	#$7F,d0
00014AEE 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00014AF4 1031 0000                  		move.b	(a1,d0.w),d0
00014AF8 4880                       		ext.w	d0
00014AFA D068 0030                  		add.w	bub_origX(a0),d0
00014AFE 3140 0008                  		move.w	d0,obX(a0)	; change bubble's x-axis position
00014B02 4A28 002E                  		tst.b	bub_inhalable(a0)
00014B06 6700                       		beq.s	@display
00014B08 6100 0000                  		bsr.w	Bub_ChkSonic	; has Sonic touched the	bubble?
00014B0C 6700                       		beq.s	@display	; if not, branch
00014B0E                            
00014B0E 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00014B1C 43F8 D000                  		lea	(v_player).w,a1
00014B20 4269 0010                  		clr.w	obVelX(a1)
00014B24 4269 0012                  		clr.w	obVelY(a1)
00014B28 4269 0020                  		clr.w	obInertia(a1)	; stop Sonic
00014B2C 137C 0000 001C             		move.b	#id_GetAir,obAnim(a1) ; use bubble-collecting animation
00014B32 337C 0023 003E             		move.w	#$23,$3E(a1)
00014B38 137C 0000 003C             		move.b	#0,$3C(a1)
00014B3E 08A9 0005 0022             		bclr	#5,obStatus(a1)
00014B44 08A9 0004 0022             		bclr	#4,obStatus(a1)
00014B4A 0829 0002 0022             		btst	#2,obStatus(a1)
00014B50 6700 FF82                  		beq.w	@burst
00014B54 08A9 0002 0022             		bclr	#2,obStatus(a1)
00014B5A 137C 0013 0016             		move.b	#$13,obHeight(a1)
00014B60 137C 0009 0017             		move.b	#9,obWidth(a1)
00014B66 5B69 000C                  		subq.w	#5,obY(a1)
00014B6A 6000 FF68                  		bra.w	@burst
00014B6E                            ; ===========================================================================
00014B6E                            
00014B6E                            @display:
00014B6E 6100 AC46                  		bsr.w	SpeedToPos
00014B72 4A28 0001                  		tst.b	obRender(a0)
00014B76 6A00                       		bpl.s	@delete
00014B78 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
00014B7E                            
00014B7E                            	@delete:
00014B7E 4EF9 0000 F80A             		jmp	(DeleteObject).l
00014B84                            ; ===========================================================================
00014B84                            
00014B84                            Bub_Display:	; Routine 6
00014B84 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014B8A 4EB9 0000 C880             		jsr	(AnimateSprite).l
00014B90 4A28 0001                  		tst.b	obRender(a0)
00014B94 6A00                       		bpl.s	@delete
00014B96 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
00014B9C                            
00014B9C                            	@delete:
00014B9C 4EF9 0000 F80A             		jmp	(DeleteObject).l
00014BA2                            ; ===========================================================================
00014BA2                            
00014BA2                            Bub_Delete:	; Routine 8
00014BA2 6000 AC66                  		bra.w	DeleteObject
00014BA6                            ; ===========================================================================
00014BA6                            
00014BA6                            Bub_BblMaker:	; Routine $A
00014BA6 4A68 0036                  		tst.w	$36(a0)
00014BAA 6600                       		bne.s	@loc_12874
00014BAC 3038 F646                  		move.w	(v_waterpos1).w,d0
00014BB0 B068 000C                  		cmp.w	obY(a0),d0	; is bubble maker underwater?
00014BB4 6400 0000                  		bcc.w	@chkdel		; if not, branch
00014BB8 4A28 0001                  		tst.b	obRender(a0)
00014BBC 6A00 0000                  		bpl.w	@chkdel
00014BC0 5368 0038                  		subq.w	#1,$38(a0)
00014BC4 6A00 0000                  		bpl.w	@loc_12914
00014BC8 317C 0001 0036             		move.w	#1,$36(a0)
00014BCE                            
00014BCE                            	@tryagain:
00014BCE 4EB9 0000 3CA4             		jsr	(RandomNumber).l
00014BD4 3200                       		move.w	d0,d1
00014BD6 0240 0007                  		andi.w	#7,d0
00014BDA 0C40 0006                  		cmpi.w	#6,d0		; random number over 6?
00014BDE 64EE                       		bcc.s	@tryagain	; if yes, branch
00014BE0                            
00014BE0 1140 0034                  		move.b	d0,$34(a0)
00014BE4 0241 000C                  		andi.w	#$C,d1
00014BE8 43F9 0000 0000             		lea	(Bub_BblTypes).l,a1
00014BEE D2C1                       		adda.w	d1,a1
00014BF0 2149 003C                  		move.l	a1,$3C(a0)
00014BF4 5328 0032                  		subq.b	#1,bub_time(a0)
00014BF8 6A00                       		bpl.s	@loc_12872
00014BFA 1168 0033 0032             		move.b	bub_freq(a0),bub_time(a0)
00014C00 08E8 0007 0036             		bset	#7,$36(a0)
00014C06                            
00014C06                            @loc_12872:
00014C06 6000                       		bra.s	@loc_1287C
00014C08                            ; ===========================================================================
00014C08                            
00014C08                            @loc_12874:
00014C08 5368 0038                  		subq.w	#1,$38(a0)
00014C0C 6A00 0000                  		bpl.w	@loc_12914
00014C10                            
00014C10                            @loc_1287C:
00014C10 4EB9 0000 3CA4             		jsr	(RandomNumber).l
00014C16 0240 001F                  		andi.w	#$1F,d0
00014C1A 3140 0038                  		move.w	d0,$38(a0)
00014C1E 6100 B144                  		bsr.w	FindFreeObj
00014C22 6600                       		bne.s	@fail
00014C24 12BC 0064                  		move.b	#id_Bubble,0(a1) ; load bubble object
00014C28 3368 0008 0008             		move.w	obX(a0),obX(a1)
00014C2E 4EB9 0000 3CA4             		jsr	(RandomNumber).l
00014C34 0240 000F                  		andi.w	#$F,d0
00014C38 5140                       		subq.w	#8,d0
00014C3A D169 0008                  		add.w	d0,obX(a1)
00014C3E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00014C44 7000                       		moveq	#0,d0
00014C46 1028 0034                  		move.b	$34(a0),d0
00014C4A 2468 003C                  		movea.l	$3C(a0),a2
00014C4E 1372 0000 0028             		move.b	(a2,d0.w),obSubtype(a1)
00014C54 0828 0007 0036             		btst	#7,$36(a0)
00014C5A 6700                       		beq.s	@fail
00014C5C 4EB9 0000 3CA4             		jsr	(RandomNumber).l
00014C62 0240 0003                  		andi.w	#3,d0
00014C66 6600                       		bne.s	@loc_buh
00014C68 08E8 0006 0036             		bset	#6,$36(a0)
00014C6E 6600                       		bne.s	@fail
00014C70 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014C76                            
00014C76                            @loc_buh:
00014C76 4A28 0034                  		tst.b	$34(a0)
00014C7A 6600                       		bne.s	@fail
00014C7C 08E8 0006 0036             		bset	#6,$36(a0)
00014C82 6600                       		bne.s	@fail
00014C84 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014C8A                            
00014C8A                            	@fail:
00014C8A 5328 0034                  		subq.b	#1,$34(a0)
00014C8E 6A00                       		bpl.s	@loc_12914
00014C90 4EB9 0000 3CA4             		jsr	(RandomNumber).l
00014C96 0240 007F                  		andi.w	#$7F,d0
00014C9A 0640 0080                  		addi.w	#$80,d0
00014C9E D168 0038                  		add.w	d0,$38(a0)
00014CA2 4268 0036                  		clr.w	$36(a0)
00014CA6                            
00014CA6                            @loc_12914:
00014CA6 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014CAC 4EB9 0000 C880             		jsr	(AnimateSprite).l
00014CB2                            
00014CB2                            @chkdel:
00014CD0 3038 F646                  		move.w	(v_waterpos1).w,d0
00014CD4 B068 000C                  		cmp.w	obY(a0),d0
00014CD8 6500 AAF0                  		bcs.w	DisplaySprite
00014CDC 4E75                       		rts	
00014CDE                            ; ===========================================================================
00014CDE                            ; bubble production sequence
00014CDE                            
00014CDE                            ; 0 = small bubble, 1 =	large bubble
00014CDE                            
00014CDE 0001 0000 0000 0100 0000+  Bub_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00014CF0                            
00014CF0                            ; ===========================================================================
00014CF0                            
00014CF0                            Bub_ChkSonic:
00014CF0 4A38 F7C8                  		tst.b	(f_lockmulti).w
00014CF4 6B00                       		bmi.s	@loc_12998
00014CF6 43F8 D000                  		lea	(v_player).w,a1
00014CFA 3029 0008                  		move.w	obX(a1),d0
00014CFE 3228 0008                  		move.w	obX(a0),d1
00014D02 0441 0010                  		subi.w	#$10,d1
00014D06 B240                       		cmp.w	d0,d1
00014D08 6400                       		bcc.s	@loc_12998
00014D0A 0641 0020                  		addi.w	#$20,d1
00014D0E B240                       		cmp.w	d0,d1
00014D10 6500                       		bcs.s	@loc_12998
00014D12 3029 000C                  		move.w	obY(a1),d0
00014D16 3228 000C                  		move.w	obY(a0),d1
00014D1A B240                       		cmp.w	d0,d1
00014D1C 6400                       		bcc.s	@loc_12998
00014D1E 0641 0010                  		addi.w	#$10,d1
00014D22 B240                       		cmp.w	d0,d1
00014D24 6500                       		bcs.s	@loc_12998
00014D26 7001                       		moveq	#1,d0
00014D28 4E75                       		rts	
00014D2A                            ; ===========================================================================
00014D2A                            
00014D2A                            @loc_12998:
00014D2A 7000                       		moveq	#0,d0
00014D2C 4E75                       		rts	
00014D2C 4E75                       		rts	
00014D2E                            		include	"_anim\Bubbles.asm"
00014D2E                            ; ---------------------------------------------------------------------------
00014D2E                            ; Animation script - bubbles (LZ)
00014D2E                            ; ---------------------------------------------------------------------------
00014D2E 0000                       Ani_Bub:	dc.w @small-Ani_Bub
00014D30 0000                       		dc.w @medium-Ani_Bub
00014D32 0000                       		dc.w @large-Ani_Bub
00014D34 0000                       		dc.w @incroutine-Ani_Bub
00014D36 0000                       		dc.w @incroutine-Ani_Bub
00014D38 0000                       		dc.w @burst-Ani_Bub
00014D3A 0000                       		dc.w @bubmaker-Ani_Bub
00014D3C 0D00 0102 FC               @small:		dc.b $D, 0, 1, 2, afRoutine ; small bubble forming
00014D42 00                         		even
00014D42 0D01 0203 04FC             @medium:	dc.b $D, 1, 2, 3, 4, afRoutine ; medium bubble forming
00014D48 0D02 0304 0506 FC          @large:		dc.b $D, 2, 3, 4, 5, 6,	afRoutine ; full size bubble forming
00014D50 00                         		even
00014D50 04FC                       @incroutine:	dc.b 4,	afRoutine	; increment routine counter (no animation)
00014D52 0406 0708 FC               @burst:		dc.b 4,	6, 7, 8, afRoutine ; large bubble bursts
00014D58 00                         		even
00014D58 0E13 1415 FF               @bubmaker:	dc.b $E, $13, $14, $15,	afEnd ; bubble maker on the floor
00014D5E 00                         		even
00014D5E 00                         		even
00014D5E                            Map_Bub:	include	"_maps\Bubbles.asm"
00014D5E                            ; ---------------------------------------------------------------------------
00014D5E                            ; Sprite mappings - bubbles (LZ)
00014D5E                            ; ---------------------------------------------------------------------------
00014D5E                            Map_Bub_internal:
00014D5E 0000                       		dc.w @bubble1-Map_Bub_internal
00014D60 0000                       		dc.w @bubble2-Map_Bub_internal
00014D62 0000                       		dc.w @bubble3-Map_Bub_internal
00014D64 0000                       		dc.w @bubble4-Map_Bub_internal
00014D66 0000                       		dc.w @bubble5-Map_Bub_internal
00014D68 0000                       		dc.w @bubble6-Map_Bub_internal
00014D6A 0000                       		dc.w @bubblefull-Map_Bub_internal
00014D6C 0000                       		dc.w @burst1-Map_Bub_internal
00014D6E 0000                       		dc.w @burst2-Map_Bub_internal
00014D70 0000                       		dc.w @zero_sm-Map_Bub_internal
00014D72 0000                       		dc.w @five_sm-Map_Bub_internal
00014D74 0000                       		dc.w @three_sm-Map_Bub_internal
00014D76 0000                       		dc.w @one_sm-Map_Bub_internal
00014D78 0000                       		dc.w @zero-Map_Bub_internal
00014D7A 0000                       		dc.w @five-Map_Bub_internal
00014D7C 0000                       		dc.w @four-Map_Bub_internal
00014D7E 0000                       		dc.w @three-Map_Bub_internal
00014D80 0000                       		dc.w @two-Map_Bub_internal
00014D82 0000                       		dc.w @one-Map_Bub_internal
00014D84 0000                       		dc.w @bubmaker1-Map_Bub_internal
00014D86 0000                       		dc.w @bubmaker2-Map_Bub_internal
00014D88 0000                       		dc.w @bubmaker3-Map_Bub_internal
00014D8A 0000                       		dc.w @blank-Map_Bub_internal
00014D8C 01                         @bubble1:	dc.b 1
00014D8D FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC	; bubbles, increasing in size
00014D92 01                         @bubble2:	dc.b 1
00014D93 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00014D98 01                         @bubble3:	dc.b 1
00014D99 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00014D9E 01                         @bubble4:	dc.b 1
00014D9F F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00014DA4 01                         @bubble5:	dc.b 1
00014DA5 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00014DAA 01                         @bubble6:	dc.b 1
00014DAB F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00014DB0 01                         @bubblefull:	dc.b 1
00014DB1 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00014DB6 04                         @burst1:	dc.b 4
00014DB7 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0 ; large bubble bursting
00014DBC F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00014DC1 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00014DC6 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00014DCB 04                         @burst2:	dc.b 4
00014DCC F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00014DD1 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00014DD6 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00014DDB 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00014DE0 01                         @zero_sm:	dc.b 1
00014DE1 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8 ; small, partially-formed countdown numbers
00014DE6 01                         @five_sm:	dc.b 1
00014DE7 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00014DEC 01                         @three_sm:	dc.b 1
00014DED F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00014DF2 01                         @one_sm:	dc.b 1
00014DF3 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00014DF8 01                         @zero:		dc.b 1
00014DF9 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8 ; fully-formed countdown numbers
00014DFE 01                         @five:		dc.b 1
00014DFF F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00014E04 01                         @four:		dc.b 1
00014E05 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00014E0A 01                         @three:		dc.b 1
00014E0B F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00014E10 01                         @two:		dc.b 1
00014E11 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00014E16 01                         @one:		dc.b 1
00014E17 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00014E1C 01                         @bubmaker1:	dc.b 1
00014E1D F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00014E22 01                         @bubmaker2:	dc.b 1
00014E23 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00014E28 01                         @bubmaker3:	dc.b 1
00014E29 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00014E2E 00                         @blank:		dc.b 0
00014E30 00                         		even
00014E30 00                         		even
00014E30                            		include	"_incObj\65 Waterfalls.asm"
00014E30                            ; ---------------------------------------------------------------------------
00014E30                            ; Object 65 - waterfalls (LZ)
00014E30                            ; ---------------------------------------------------------------------------
00014E30                            
00014E30                            Waterfall:
00014E30 7000                       		moveq	#0,d0
00014E32 1028 0024                  		move.b	obRoutine(a0),d0
00014E36 323B 0000                  		move.w	WFall_Index(pc,d0.w),d1
00014E3A 4EFB 1000                  		jmp	WFall_Index(pc,d1.w)
00014E3E                            ; ===========================================================================
00014E3E 0000                       WFall_Index:	dc.w WFall_Main-WFall_Index
00014E40 0000                       		dc.w WFall_Animate-WFall_Index
00014E42 0000                       		dc.w WFall_ChkDel-WFall_Index
00014E44 0000                       		dc.w WFall_OnWater-WFall_Index
00014E46 0000                       		dc.w loc_12B36-WFall_Index
00014E48                            ; ===========================================================================
00014E48                            
00014E48                            WFall_Main:	; Routine 0
00014E48 5828 0024                  		addq.b	#4,obRoutine(a0)
00014E4C 217C 0000 0000 0004        		move.l	#Map_WFall,obMap(a0)
00014E54 317C 4259 0002             		move.w	#$4259,obGfx(a0)
00014E5A 0028 0004 0001             		ori.b	#4,obRender(a0)
00014E60 117C 0018 0014             		move.b	#$18,obActWid(a0)
00014E66 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014E6C 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014E70 6A00                       		bpl.s	@under80	; branch if $00-$7F
00014E72 08E8 0007 0002             		bset	#7,obGfx(a0)
00014E78                            
00014E78                            	@under80:
00014E78 0200 000F                  		andi.b	#$F,d0		; read only the	2nd digit
00014E7C 1140 001A                  		move.b	d0,obFrame(a0)	; set frame number
00014E80 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00014E84 6600                       		bne.s	WFall_ChkDel	; if not, branch
00014E86                            
00014E86 4228 0018                  		clr.b	obPriority(a0)	; object is in front of Sonic
00014E8A 5528 0024                  		subq.b	#2,obRoutine(a0) ; goto WFall_Animate next
00014E8E 0828 0006 0028             		btst	#6,obSubtype(a0) ; is object type $49 ?
00014E94 6700                       		beq.s	@not49		; if not, branch
00014E96                            
00014E96 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto WFall_OnWater next
00014E9C                            
00014E9C                            	@not49:
00014E9C 0828 0005 0028             		btst	#5,obSubtype(a0) ; is object type $A9 ?
00014EA2 6700                       		beq.s	WFall_Animate	; if not, branch
00014EA4 117C 0008 0024             		move.b	#8,obRoutine(a0) ; goto loc_12B36 next
00014EAA                            
00014EAA                            WFall_Animate:	; Routine 2
00014EAA 43F9 0000 0000             		lea	(Ani_WFall).l,a1
00014EB0 4EB9 0000 C880             		jsr	(AnimateSprite).l
00014EB6                            
00014EB6                            WFall_ChkDel:	; Routine 4
00014EB6 6000 C9C6                  		bra.w	RememberState
00014EBA                            ; ===========================================================================
00014EBA                            
00014EBA                            WFall_OnWater:	; Routine 6
00014EBA 3038 F646                  		move.w	(v_waterpos1).w,d0
00014EBE 0440 0010                  		subi.w	#$10,d0
00014EC2 3140 000C                  		move.w	d0,obY(a0)	; match	object position	to water height
00014EC6 60E2                       		bra.s	WFall_Animate
00014EC8                            ; ===========================================================================
00014EC8                            
00014EC8                            loc_12B36:	; Routine 8
00014EC8 08A8 0007 0002             		bclr	#7,obGfx(a0)
00014ECE 0C38 0007 A506             		cmpi.b	#7,(v_lvllayout+$106).w
00014ED4 6600                       		bne.s	@animate
00014ED6 08E8 0007 0002             		bset	#7,obGfx(a0)
00014EDC                            
00014EDC                            	@animate:
00014EDC 60CC                       		bra.s	WFall_Animate
00014EDC 60CC                       		bra.s	WFall_Animate
00014EDE                            		include	"_anim\Waterfalls.asm"
00014EDE                            ; ---------------------------------------------------------------------------
00014EDE                            ; Animation script - waterfall (LZ)
00014EDE                            ; ---------------------------------------------------------------------------
00014EDE 0000                       Ani_WFall:	dc.w @splash-Ani_WFall
00014EE0 0509 0A0B FF               @splash:	dc.b 5,	9, $A, $B, afEnd
00014EE6 00                         		even
00014EE6 00                         		even
00014EE6                            Map_WFall	include	"_maps\Waterfalls.asm"
00014EE6                            ; ---------------------------------------------------------------------------
00014EE6                            ; Sprite mappings - waterfalls (LZ)
00014EE6                            ; ---------------------------------------------------------------------------
00014EE6                            Map_WFall_internal:
00014EE6 0000                       		dc.w @vertnarrow-Map_WFall_internal
00014EE8 0000                       		dc.w @cornerwide-Map_WFall_internal
00014EEA 0000                       		dc.w @cornermedium-Map_WFall_internal
00014EEC 0000                       		dc.w @cornernarrow-Map_WFall_internal
00014EEE 0000                       		dc.w @cornermedium2-Map_WFall_internal
00014EF0 0000                       		dc.w @cornernarrow2-Map_WFall_internal
00014EF2 0000                       		dc.w @cornernarrow3-Map_WFall_internal
00014EF4 0000                       		dc.w @vertwide-Map_WFall_internal
00014EF6 0000                       		dc.w @diagonal-Map_WFall_internal
00014EF8 0000                       		dc.w @splash1-Map_WFall_internal
00014EFA 0000                       		dc.w @splash2-Map_WFall_internal
00014EFC 0000                       		dc.w @splash3-Map_WFall_internal
00014EFE 01                         @vertnarrow:	dc.b 1
00014EFF F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00014F04 02                         @cornerwide:	dc.b 2
00014F05 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00014F0A 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00014F0F 02                         @cornermedium:	dc.b 2
00014F10 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014F15 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014F1A 01                         @cornernarrow:	dc.b 1
00014F1B F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00014F20 02                         @cornermedium2:	dc.b 2
00014F21 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014F26 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014F2B 01                         @cornernarrow2:	dc.b 1
00014F2C F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00014F31 01                         @cornernarrow3:	dc.b 1
00014F32 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00014F37 01                         @vertwide:	dc.b 1
00014F38 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00014F3D 02                         @diagonal:	dc.b 2
00014F3E F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00014F43 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00014F48 02                         @splash1:	dc.b 2
00014F49 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00014F4E F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00014F53 02                         @splash2:	dc.b 2
00014F54 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00014F59 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00014F5E 02                         @splash3:	dc.b 2
00014F5F F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00014F64 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00014F6A 00                         		even
00014F6A 00                         		even
00014F6A                            
00014F6A                            
00014F6A                            SpinDash_dust:				;TIS - Changed to allow for dynamic positioning
00014F6A                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00014F6A 7000                       		moveq	#0,d0
00014F6C 1028 0024                  		move.b	$24(a0),d0
00014F70 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00014F74 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00014F78                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014F78 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00014F7A 0000                       		dc loc_1DD90-off_1DD2E; 1
00014F7C 0000                       		dc loc_1DE46-off_1DD2E; 2
00014F7E 0000                       		dc loc_1DE4A-off_1DD2E; 3
00014F80                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014F80                            
00014F80                            loc_1DD36:				; DATA XREF: h+6DBA?o
00014F80 5428 0024                  		addq.b	#2,$24(a0)
00014F84 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00014F8C 0028 0004 0001             		or.b	#4,1(a0)
00014F92 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014F98 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014F9E 317C 07AC 0002             		move	#$7AC,2(a0)
00014FA4 317C D000 003E             		move	#-$3000,$3E(a0)
00014FAA 317C F580 003C             		move	#$F580,$3C(a0)
00014FB0 B0FC D1C0                  		cmp	#-$2E40,a0
00014FB4 6700                       		beq.s	loc_1DD8C
00014FB6 117C 0001 0034             		move.b	#1,$34(a0)
00014FBC                            ;		cmp	#2,($FFFFFF70).w
00014FBC                            ;		beq.s	loc_1DD8C
00014FBC                            ;		move	#$48C,2(a0)
00014FBC                            ;		move	#-$4FC0,$3E(a0)
00014FBC                            ;		move	#-$6E80,$3C(a0)
00014FBC                            
00014FBC                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
00014FBC                            ;		bsr.w	sub_16D6E
00014FBC                            
00014FBC                            loc_1DD90:				; DATA XREF: h+6DBA?o
00014FBC 3468 003E                  		movea.w	$3E(a0),a2
00014FC0 7000                       		moveq	#0,d0
00014FC2 1028 001C                  		move.b	$1C(a0),d0
00014FC6 D040                       		add	d0,d0
00014FC8 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
00014FCC 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
00014FD0                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014FD0 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
00014FD2 0000                       		dc loc_1DDAC-off_1DDA4; 1
00014FD4 0000                       		dc loc_1DDCC-off_1DDA4; 2
00014FD6 0000                       		dc loc_1DE20-off_1DDA4; 3
00014FD8                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014FD8                            
00014FD8                            loc_1DDAC:				; DATA XREF: h+6E30?o
00014FD8 3178 F646 000C             		move	(v_waterpos1).w,$C(a0)	;TIS - Changed to variable name
00014FDE 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	;TIS is level LZ?
00014FE4 6700                       		beq.s	StandardWaterLevel	;TIS - if no, branch
00014FE6 3178 FF92 000C             		move	(v_watersplashpos).w,$C(a0)	;TIS - Dynamic water position
00014FEC                            	StandardWaterLevel:
00014FEC 4A28 001D                  		tst.b	$1D(a0)
00014FF0 6600                       		bne.s	loc_1DE28
00014FF2 316A 0008 0008             		move	8(a2),8(a0)
00014FF8 117C 0000 0022             		move.b	#0,$22(a0)
00014FFE 0268 7FFF 0002             		and	#$7FFF,2(a0)
00015004 6000                       		bra.s	loc_1DE28
00015006                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015006                            
00015006                            loc_1DDCC:				; DATA XREF: h+6E30?o
00015006                            ;		cmp.b	#$C,$28(a2)
00015006                            ;		bcs.s	loc_1DE3E
00015006 0C2A 0004 0024             		cmp.b	#4,$24(a2)
0001500C 6400                       		bcc.s	loc_1DE3E
0001500E 4A2A 0039                  		tst.b	$39(a2)
00015012 6700                       		beq.s	loc_1DE3E
00015014 316A 0008 0008             		move	8(a2),8(a0)
0001501A 316A 000C 000C             		move	$C(a2),$C(a0)
00015020 116A 0022 0022             		move.b	$22(a2),$22(a0)
00015026 0228 0001 0022             		and.b	#1,$22(a0)
0001502C 4A28 0034                  		tst.b	$34(a0)
00015030 6700                       		beq.s	loc_1DE06
00015032 5968 000C                  		sub	#4,$C(a0)
00015036                            
00015036                            loc_1DE06:				; CODE XREF: h+6E8A?j
00015036 4A28 001D                  		tst.b	$1D(a0)
0001503A 6600                       		bne.s	loc_1DE28
0001503C 0268 7FFF 0002             		and	#$7FFF,2(a0)
00015042 4A6A 0002                  		tst	2(a2)
00015046 6A00                       		bpl.s	loc_1DE28
00015048 0068 8000 0002             		or	#-$8000,2(a0)
0001504E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001504E                            
0001504E                            loc_1DE20:				; DATA XREF: h+6E30?o
0001504E                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
0001504E 43F9 0000 0000             		lea	(off_1DF38).l,a1
00015054 4EB9 0000 C880             		jsr	AnimateSprite
0001505A 6100 0000                  		bsr.w	loc_1DEE4
0001505E 4EFA A76A                  		jmp	DisplaySprite
00015062                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015062                            
00015062                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
00015062 117C 0000 001C             		move.b	#0,$1C(a0)
00015068 4E75                       		rts	
0001506A                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001506A                            
0001506A                            loc_1DE46:				; DATA XREF: h+6DBA?o
0001506A 6000 A79E                  		bra.w	DeleteObject
0001506E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001506E                            
0001506E                            
0001506E                            
0001506E                            loc_1DE4A:
0001506E 3468 003E                  	movea.w	$3E(a0),a2
00015072 7210                       	moveq	#$10,d1
00015074 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
0001507A 6700                       	beq.s	loc_1DE64
0001507C 7206                       	moveq	#$6,d1
0001507E 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
00015084 6700                       	beq.s	loc_1DE64
00015086 117C 0002 0024             	move.b	#2,$24(a0)
0001508C 117C 0000 0032             	move.b	#0,$32(a0)
00015092 4E75                       	rts
00015094                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015094                            
00015094                            loc_1DE64:				; CODE XREF: h+6EE0?j
00015094 5328 0032                  		subq.b	#1,$32(a0)
00015098 6A00                       		bpl.s	loc_1DEE0
0001509A 117C 0003 0032             		move.b	#3,$32(a0)
000150A0 4EBA ACC2                  		jsr	FindFreeObj
000150A4 6600                       		bne.s	loc_1DEE0
000150A6 1290                       		move.b	0(a0),0(a1)
000150A8 336A 0008 0008             		move	8(a2),8(a1)
000150AE 336A 000C 000C             		move	$C(a2),$C(a1)
000150B4 4A28 0034                  		tst.b	$34(a0)
000150B8 6700                       		beq.s	loc_1DE9A
000150BA 5941                       		sub	#4,d1
000150BC                            
000150BC                            loc_1DE9A:				; CODE XREF: h+6F1E?j
000150BC D369 000C                  		add	d1,$C(a1)
000150C0 137C 0000 0022             		move.b	#0,$22(a1)
000150C6 137C 0003 001C             		move.b	#3,$1C(a1)
000150CC 5429 0024                  		addq.b	#2,$24(a1)
000150D0 2368 0004 0004             		move.l	4(a0),4(a1)
000150D6 1368 0001 0001             		move.b	1(a0),1(a1)
000150DC 337C 0080 0018             		move.w	#$80,obPriority(a1)
000150E2 137C 0004 0014             		move.b	#4,obActWid(a1)
000150E8 3368 0002 0002             		move	2(a0),2(a1)
000150EE 3368 003E 003E             		move	$3E(a0),$3E(a1)
000150F4 0269 7FFF 0002             		and	#$7FFF,2(a1)
000150FA 4A6A 0002                  		tst	2(a2)
000150FE 6A00                       		bpl.s	loc_1DEE0
00015100 0069 8000 0002             		or	#-$8000,2(a1)
00015106                            
00015106                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
00015106 6100                       		bsr.s	loc_1DEE4
00015108 4E75                       		rts	
0001510A                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001510A                            
0001510A                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
0001510A 7000                       		moveq	#0,d0
0001510C 1028 001A                  		move.b	$1A(a0),d0
00015110 B028 0030                  		cmp.b	$30(a0),d0
00015114 6700 0000                  		beq.w	locret_1DF36
00015118 1140 0030                  		move.b	d0,$30(a0)
0001511C 45F9 0000 0000             		lea	(off_1E074).l,a2
00015122 D040                       		add	d0,d0
00015124 D4F2 0000                  		add	(a2,d0.w),a2
00015128 3A1A                       		move	(a2)+,d5
0001512A 5345                       		subq	#1,d5
0001512C 6B00 0000                  		bmi.w	locret_1DF36
00015130 3828 003C                  		move $3C(a0),d4
00015134                            
00015134                            loc_1DF0A:				; CODE XREF: h+6FBE?j
00015134 7200                       		moveq	#0,d1
00015136 321A                       		move	(a2)+,d1
00015138 3601                       		move	d1,d3
0001513A E04B                       		lsr.w	#8,d3
0001513C 0243 00F0                  		and	#$F0,d3	; 'ð'
00015140 0643 0010                  		add	#$10,d3
00015144 0241 0FFF                  		and	#$FFF,d1
00015148 EB89                       		lsl.l	#5,d1
0001514A 0681 0000 0000             		add.l	#Art_Dust,d1
00015150 3404                       		move	d4,d2
00015152 D843                       		add	d3,d4
00015154 D843                       		add	d3,d4
00015156 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
0001515C 51CD FFD6                  		dbf	d5,loc_1DF0A
00015160 4E75                           rts
00015162                            
00015162                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
00015162 4E75                       		rts	
00015164                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015164 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
00015166 0000                       		dc byte_1DF43-off_1DF38; 1
00015168 0000                       		dc byte_1DF4F-off_1DF38; 2
0001516A 0000                       		dc byte_1DF58-off_1DF38; 3
0001516C 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
0001516F 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
0001517B 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
00015184 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
0001518A                            ; -------------------------------------------------------------------------------
0001518A                            ; Unknown Sprite Mappings
0001518A                            ; -------------------------------------------------------------------------------
0001518A                            MapUnc_1DF5E:
0001518A 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
0001518C 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
0001518E 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
00015190 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
00015192 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
00015194 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
00015196 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
00015198 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
0001519A 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
0001519C 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
0001519E 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
000151A0 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
000151A2 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
000151A4 0000                       	dc word_1E004-MapUnc_1DF5E; 13
000151A6 0000                       	dc word_1E016-MapUnc_1DF5E; 14
000151A8 0000                       	dc word_1E028-MapUnc_1DF5E; 15
000151AA 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
000151AC 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
000151AE 0000                       	dc word_1E056-MapUnc_1DF5E; 18
000151B0 0000                       	dc word_1E060-MapUnc_1DF5E; 19
000151B2 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
000151B4 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
000151B6 00                         word_1DF8A:	dc.b 0
000151B7 01                         word_1DF8C:	dc.b 1
000151B8 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000151BD 01                         word_1DF96:	dc.b 1
000151BE E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000151C3 01                         word_1DFA0:	dc.b 1
000151C4 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000151C9 01                         word_1DFAA:	dc.b 1
000151CA E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000151CF 01                         word_1DFB4:	dc.b 1
000151D0 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000151D5 01                         word_1DFBE:	dc.b 1
000151D6 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000151DB 01                         word_1DFC8:	dc.b 1
000151DC F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000151E1 01                         word_1DFD2:	dc.b 1
000151E2 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000151E7 01                         word_1DFDC:	dc.b 1
000151E8 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000151ED 01                         word_1DFE6:	dc.b 1
000151EE 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000151F3 01                         word_1DFF0:	dc.b 1
000151F4 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000151F9 01                         word_1DFFA:	dc.b 1
000151FA 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000151FF 02                         word_1E004:	dc.b 2
00015200 F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
00015205 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
0001520A 02                         word_1E016:	dc.b 2
0001520B F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
00015210 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
00015215 02                         word_1E028:	dc.b 2
00015216 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
0001521B 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00015220 02                         word_1E03A:	dc.b 2
00015221 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00015226 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
0001522B 01                         word_1E04C:	dc.b 1
0001522C F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
00015231 01                         word_1E056:	dc.b 1
00015232 F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
00015237 01                         word_1E060:	dc.b 1
00015238 F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
0001523D 01                         word_1E06A:	dc.b 1
0001523E F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
00015243 00                         	dc.b 0
00015244 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
00015246 0000                       	dc word_1E0A2-off_1E074; 1
00015248 0000                       	dc word_1E0A6-off_1E074; 2
0001524A 0000                       	dc word_1E0AA-off_1E074; 3
0001524C 0000                       	dc word_1E0AE-off_1E074; 4
0001524E 0000                       	dc word_1E0B2-off_1E074; 5
00015250 0000                       	dc word_1E0B6-off_1E074; 6
00015252 0000                       	dc word_1E0BA-off_1E074; 7
00015254 0000                       	dc word_1E0BE-off_1E074; 8
00015256 0000                       	dc word_1E0C2-off_1E074; 9
00015258 0000                       	dc word_1E0C6-off_1E074; 10
0001525A 0000                       	dc word_1E0CA-off_1E074; 11
0001525C 0000                       	dc word_1E0CE-off_1E074; 12
0001525E 0000                       	dc word_1E0D2-off_1E074; 13
00015260 0000                       	dc word_1E0D8-off_1E074; 14
00015262 0000                       	dc word_1E0DE-off_1E074; 15
00015264 0000                       	dc word_1E0E4-off_1E074; 16
00015266 0000                       	dc word_1E0EA-off_1E074; 17
00015268 0000                       	dc word_1E0EA-off_1E074; 18
0001526A 0000                       	dc word_1E0EA-off_1E074; 19
0001526C 0000                       	dc word_1E0EA-off_1E074; 20
0001526E 0000                       	dc word_1E0EC-off_1E074; 21
00015270 0000                       word_1E0A0:	dc 0
00015272 0001                       word_1E0A2:	dc 1
00015274 7000                       	dc $7000
00015276 0001                       word_1E0A6:	dc 1
00015278 F008                       	dc $F008
0001527A 0001                       word_1E0AA:	dc 1
0001527C F018                       	dc $F018
0001527E 0001                       word_1E0AE:	dc 1
00015280 F028                       	dc $F028
00015282 0001                       word_1E0B2:	dc 1
00015284 F038                       	dc $F038
00015286 0001                       word_1E0B6:	dc 1
00015288 F048                       	dc $F048
0001528A 0001                       word_1E0BA:	dc 1
0001528C 7058                       	dc $7058
0001528E 0001                       word_1E0BE:	dc 1
00015290 7060                       	dc $7060
00015292 0001                       word_1E0C2:	dc 1
00015294 7068                       	dc $7068
00015296 0001                       word_1E0C6:	dc 1
00015298 7070                       	dc $7070
0001529A 0001                       word_1E0CA:	dc 1
0001529C 7078                       	dc $7078
0001529E 0001                       word_1E0CE:	dc 1
000152A0 7080                       	dc $7080
000152A2 0002                       word_1E0D2:	dc 2
000152A4 1088                       	dc $1088
000152A6 708A                       	dc $708A
000152A8 0002                       word_1E0D8:	dc 2
000152AA 3092                       	dc $3092
000152AC 7096                       	dc $7096
000152AE 0002                       word_1E0DE:	dc 2
000152B0 509E                       	dc $509E
000152B2 70A4                       	dc $70A4
000152B4 0002                       word_1E0E4:	dc 2
000152B6 50AC                       	dc $50AC
000152B8 70B2                       	dc $70B2
000152BA 0000                       word_1E0EA:	dc 0
000152BC 0001                       word_1E0EC:	dc 1
000152BE F0BA                       	dc $F0BA
000152C0                            	even
000152C0                            
000152C0                            ; ===========================================================================
000152C0                            
000152C0                            LoadPlayerPal:
000152C0 7000                       		moveq	#0,d0
000152C2 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
000152C6 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
000152CA 4E75                       		rts
000152CC                            
000152CC                            	@palLUT:
000152CC 0316 1718 19               		dc.b	palid_Sonic, palid_Sonic2, palid_Sonic3, palid_Sonic4, palid_Sonic5
000152D1 1A1B 1C1D 1E1F             		dc.b	palid_Sonic6, palid_Sonic7, palid_Sonic8, palid_Sonic9, palid_Sonic10, palid_Sonic11
000152D8 00                         		even
000152D8                            
000152D8                            LoadPlayerWaterPal:
000152D8 7000                       		moveq	#0,d0
000152DA 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
000152DE 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
000152E2 4E75                       		rts
000152E4                            
000152E4                            	@palLUT:
000152E4 1020 2122 23               		dc.b	palid_SBZ3SonWat, palid_SonWater2, palid_SonWater3, palid_SonWater4, palid_SonWater5
000152E9 2425 2627 2829             		dc.b	palid_SonWater6, palid_SonWater7, palid_SonWater8, palid_SonWater9, palid_SonWater10, palid_SonWater11
000152F0 00                         		even
000152F0                            
000152F0                            LoadLifeIcon:
000152F0 7000                       		moveq	#0,d0
000152F2 3038 FE10                  		move.w	(v_zone).w,d0	
000152F6 E418                       		ror.b	#2,d0
000152F8 EC48                               lsr.w 	#6,d0		
000152FA 103B 0000                  		move.b	LoadLifeIcon_Table(pc,d0.w),d0	
000152FE 4EB8 173A                  		jsr		AddPLC	
00015302 4E75                       		rts
00015304                            
00015304                            LoadLifeIcon_Table:
00015304                            		; GHZ
00015304 00                         		dc.b	plcid_LifeIcon
00015305 00                         		dc.b	plcid_LifeIcon
00015306 00                         		dc.b	plcid_LifeIcon	
00015307 00                         		dc.b	plcid_LifeIcon	
00015308                            		; LZ
00015308 00                         		dc.b	plcid_LifeIcon
00015309 00                         		dc.b	plcid_LifeIcon
0001530A 00                         		dc.b	plcid_LifeIcon	
0001530B 00                         		dc.b	plcid_LifeIconF	
0001530C                            		; MZ
0001530C 00                         		dc.b	plcid_LifeIconF
0001530D 00                         		dc.b	plcid_LifeIconF
0001530E 00                         		dc.b	plcid_LifeIconF
0001530F 00                         		dc.b	plcid_LifeIconF
00015310                            		; SLZ
00015310 00                         		dc.b	plcid_LifeIcon
00015311 00                         		dc.b	plcid_LifeIcon
00015312 00                         		dc.b	plcid_LifeIcon	
00015313 00                         		dc.b	plcid_LifeIcon	
00015314                            		; SYZ
00015314 00                         		dc.b	plcid_LifeIconF
00015315 00                         		dc.b	plcid_LifeIconF
00015316 00                         		dc.b	plcid_LifeIconF
00015317 00                         		dc.b	plcid_LifeIconF	
00015318                            		; SBZ
00015318 00                         		dc.b	plcid_LifeIconF
00015319 00                         		dc.b	plcid_LifeIconF
0001531A 00                         		dc.b	plcid_LifeIconF
0001531B 00                         		dc.b	plcid_LifeIconF	
0001531C                            		even
0001531C                            
0001531C                            ; ---------------------------------------------------------------------------
0001531C                            ; Object 01 - Sonic
0001531C                            ; ---------------------------------------------------------------------------
0001531C                            
0001531C                            SonicPlayer:
0001531C 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00015320 6700                       		beq.s	Sonic_Normal	; if not, branch
00015322 4EF9 0000 0000             		jmp	(DebugMode).l
00015328                            ; ===========================================================================
00015328                            
00015328                            Sonic_Normal:
00015328 7000                       		moveq	#0,d0
0001532A 1028 0024                  		move.b	obRoutine(a0),d0
0001532E 323B 0000                  		move.w	Sonic_Index(pc,d0.w),d1
00015332 4EFB 1000                  		jmp	Sonic_Index(pc,d1.w)
00015336                            ; ===========================================================================
00015336 0000                       Sonic_Index:	dc.w Sonic_Main-Sonic_Index
00015338 0000                       		dc.w Sonic_Control-Sonic_Index
0001533A 0000                       		dc.w Sonic_Hurt-Sonic_Index
0001533C 0000                       		dc.w Sonic_Death-Sonic_Index
0001533E 0000                       		dc.w Sonic_ResetLevel-Sonic_Index
00015340                            ; ===========================================================================
00015340                            
00015340                            Sonic_Main:	; Routine 0
00015340 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
00015346 5428 0024                  		addq.b	#2,obRoutine(a0)
0001534A 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015350 117C 0009 0017             		move.b	#9,obWidth(a0)
00015356 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0001535E 317C 0780 0002             		move.w	#$780,obGfx(a0)
00015364 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001536A 117C 0018 0014             		move.b	#$18,obActWid(a0)
00015370 117C 0004 0001             		move.b	#4,obRender(a0)
00015376 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; Sonic's top speed
0001537C 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; Sonic's acceleration
00015382 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; Sonic's deceleration
00015388 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
0001538E 11FC 0000 FE19             		move.b	#0,(Super_Sonic_flag).w
00015394                            		
00015394                            Sonic_Control:    ; Routine 2
00015394 4A38 FF8B                   		tst.b	($FFFFFF8B).w
00015398 6700 0000                  		beq.w	@cont    
0001539C 6100                       		bsr.s    Sonic_PanCamera    ; ++add this++
0001539E                             
0001539E                            	@cont: 
0001539E 4A78 FFFA                  		tst.w    (f_debugmode).w    ; is debug cheat enabled?
000153A2 6700                       		beq.s    loc_12C58    ; if not, branch
000153A4 0838 0004 F605             		btst    #bitB,(v_jpadpress1).w ; is button B pressed?
000153AA 6700                       		beq.s    loc_12C58    ; if not, branch
000153AC 31FC 0001 FE08             		move.w    #1,(v_debuguse).w ; change Sonic into a ring/item
000153B2 4238 F7CC                  		clr.b    (f_lockctrl).w
000153B6 4E75                       		rts
000153B8                            		
000153B8                            		include    "_incObj\Sonic PanCamera.asm"    ; ++add this++
000153B8                            ; ---------------------------------------------------------------------------
000153B8                            ; Subroutine to    horizontally pan the camera view ahead of the player
000153B8                            ; (Ported from the US version of Sonic CD's "R11A__.MMD" by Nat The Porcupine)
000153B8                            ; ---------------------------------------------------------------------------
000153B8                            
000153B8                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
000153B8                            
000153B8                            
000153B8                            Sonic_PanCamera:
000153B8 3238 F7A0                          move.w    (v_camera_pan).w,d1        ; get the current camera pan value
000153BC 3028 0020                          move.w    obInertia(a0),d0        ; get sonic's inertia
000153C0 6A00                               bpl.s    @abs_inertia            ; if sonic's inertia is positive, branch ahead
000153C2 4440                               neg.w    d0                        ; otherwise, we negate it to get the absolute value
000153C4                            
000153C4                                @abs_inertia:
000153C4                            
000153C4                            ; These lines were intended to prevent the Camera from panning while
000153C4                            ; going up the very first giant ramp in Palmtree Panic Zone Act 1.
000153C4                            ; However, given that no such object exists in Sonic 1, I just went
000153C4                            ; ahead and commented these out.
000153C4                                    ;tst.b	($FFFFF5C2).w               ; is sonic going up a giant ramp in PPZ?
000153C4                                   ; bne.s	@reset_pan                   ; if not, branch
000153C4                                    ;cmpi.w 	#$1B00,obX(a0)            ; is sonic's x position lower than $1B00?
000153C4                                    ;bcs.s    @reset_pan                ; if so, branch
000153C4                            
000153C4                            ; These lines aren't part of the original routine; I added them myself.
000153C4                            ; If you've ported the Spin Dash, uncomment the following lines of code
000153C4                            ; to allow the camera to pan ahead while charging the Spin Dash:
000153C4 4A28 0039                          tst.b    $39(a0)                    ; is sonic charging up a spin dash?
000153C8 6700                               beq.s    @skip                    ; if not, branch
000153CA 0828 0000 0022                     btst    #0,obStatus(a0)            ; check the direction that sonic is facing
000153D0 6600                               bne.s    @pan_right                ; if he's facing right, pan the camera to the right
000153D2 6000                               bra.s    @pan_left                ; otherwise, pan the camera to the left
000153D4                            
000153D4                                @skip:
000153D4 0C40 0600                          cmpi.w    #$600,d0                ; is sonic's inertia greater than $600
000153D8 6500                               bcs.s    @reset_pan                ; if not, recenter the screen (if needed)
000153DA 4A68 0020                          tst.w    obInertia(a0)            ; otherwise, check the direction of inertia (by subtracting it from 0)
000153DE 6A00                               bpl.s    @pan_left                ; if the result was positive, then inertia was negative, so we pan the screen left
000153E0                            
000153E0                                @pan_right:
000153E0 5441                               addq.w    #2,d1                    ; add 2 to the pan value
000153E2 0C41 00E0                          cmpi.w    #224,d1                    ; is the pan value greater than 224 pixels?
000153E6 6500                               bcs.s    @update_pan                ; if not, branch
000153E8 323C 00E0                          move.w    #224,d1                    ; otherwise, cap the value at the maximum of 224 pixels
000153EC 6000                               bra.s    @update_pan                ; branch
000153EE                            ; ---------------------------------------------------------------------------
000153EE                            
000153EE                                @pan_left:
000153EE 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
000153F0 0C41 0060                          cmpi.w    #96,d1                    ; is the pan value less than 96 pixels?
000153F4 6400                               bcc.s    @update_pan                ; if not, branch
000153F6 323C 0060                          move.w    #96,d1                    ; otherwise, cap the value at the minimum of 96 pixels
000153FA 6000                               bra.s    @update_pan                ; branch
000153FC                            ; ---------------------------------------------------------------------------
000153FC                            
000153FC                                @reset_pan:
000153FC 0C41 00A0                          cmpi.w    #160,d1                    ; is the pan value 160 pixels?
00015400 6700                               beq.s    @update_pan                ; if so, branch
00015402 6400                               bcc.s    @reset_left                ; otherwise, branch if it greater than 160
00015404                                 
00015404                                @reset_right:
00015404 5441                               addq.w    #2,d1                    ; add 2 to the pan value
00015406 6000                               bra.s    @update_pan                ; branch
00015408                            ; ---------------------------------------------------------------------------
00015408                            
00015408                                @reset_left:
00015408 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
0001540A                            
0001540A                                @update_pan:
0001540A 31C1 F7A0                          move.w    d1,(v_camera_pan).w        ; update the camera pan value
0001540E 4E75                               rts                                ; return
00015410                                 
00015410                            ; End of function Sonic_PanCamera
00015410                            
00015410                            
00015410                            ; ===========================================================================
00015410                            
00015410                            loc_12C58:
00015410 4A38 F7CC                  		tst.b	(f_lockctrl).w	; are controls locked?
00015414 6600                       		bne.s	loc_12C64	; if yes, branch
00015416 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w ; enable joypad control
0001541C                            
0001541C                            loc_12C64:
0001541C 0838 0000 F7C8             		btst	#0,(f_lockmulti).w ; are controls locked?
00015422 6600                       		bne.s	loc_12C7E	; if yes, branch
00015424 7000                       		moveq	#0,d0
00015426 1028 0022                  		move.b	obStatus(a0),d0
0001542A 0240 0006                  		andi.w	#6,d0
0001542E 323B 0000                  		move.w	Sonic_Modes(pc,d0.w),d1
00015432 4EBB 1000                  		jsr	Sonic_Modes(pc,d1.w)
00015436                            
00015436                            loc_12C7E:
00015436 6100                       		bsr.s	Sonic_Display
00015438 6100 0000                  		bsr.w	Sonic_Super
0001543C 6100 0000                  		bsr.w	Sonic_RecordPosition
00015440 6100 0000                  		bsr.w	Sonic_Water
00015444 1178 F768 0036             		move.b	(v_anglebuffer).w,$36(a0)
0001544A 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00015450 4A38 F7C7                  		tst.b	(f_wtunnelmode).w
00015454 6700                       		beq.s	loc_12CA6
00015456 4A28 001C                  		tst.b	obAnim(a0)
0001545A 6600                       		bne.s	loc_12CA6
0001545C 1168 001D 001C             		move.b	obNextAni(a0),obAnim(a0)
00015462                            
00015462                            loc_12CA6:
00015462 6100 0000                  		bsr.w	Sonic_Animate
00015466 4A38 F7C8                  		tst.b	(f_lockmulti).w
0001546A 6B00                       		bmi.s	loc_12CB6
0001546C 4EB9 0000 0000             		jsr	(ReactToItem).l
00015472                            
00015472                            loc_12CB6:
00015472 6100 0000                  		bsr.w	Sonic_Loops
00015476 6100 0000                  		bsr.w	Sonic_LoadGfx
0001547A 4E75                       		rts	
0001547C                            ; ===========================================================================
0001547C 0000                       Sonic_Modes:	dc.w Sonic_MdNormal-Sonic_Modes
0001547E 0000                       		dc.w Sonic_MdJump-Sonic_Modes
00015480 0000                       		dc.w Sonic_MdRoll-Sonic_Modes
00015482 0000                       		dc.w Sonic_MdJump2-Sonic_Modes
00015484                            ; ---------------------------------------------------------------------------
00015484                            ; Music	to play	after invincibility wears off
00015484                            ; ---------------------------------------------------------------------------
00015484                            MusicList2:
00015484 00                         		dc.b bgm_GHZ
00015485 00                         		dc.b bgm_LZ
00015486 00                         		dc.b bgm_MZ
00015487 00                         		dc.b bgm_SLZ
00015488 00                         		dc.b bgm_SYZ
00015489 00                         		dc.b bgm_SBZ
0001548A                            		; The ending doesn't get an entry
0001548A                            		even
0001548A                            
0001548A                            		include	"_incObj\Sonic Display.asm"
0001548A                            ; ---------------------------------------------------------------------------
0001548A                            ; Subroutine to display Sonic and set music
0001548A                            ; ---------------------------------------------------------------------------
0001548A                            
0001548A                            Sonic_Display:
0001548A 3028 0030                  		move.w    flashtime(a0),d0
0001548E 6700                       		beq.s    @showAfterImage
00015490 5368 0030                  		subq.w    #1,flashtime(a0)
00015494 E648                               	lsr.w    #3,d0
00015496 6400                               	bcc.s    @chkinvincible
00015498                            
00015498                            	@showAfterImage:
00015498 3028 0020                          	move.w    obInertia(a0),d0            ; get inertia
0001549C 4A40                       		tst.w    d0                    ; is inertia greater than 0?
0001549E 6C00                       		bge.s    @AfterImage_Start    ; if yes, don't negate it
000154A0 4440                       		neg        d0                    ; if not, negate it
000154A2                            
000154A2                            	@AfterImage_Start:        
000154A2 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
000154A6 6700                       		beq.s	@display	; if not, don't show the After Image
000154A8                            		;cmpi.w    #$900,d0	; is the sonic inertia greater than A00?
000154A8                            		;blt.s    @display	; if not, don't show the After Image
000154A8                            	
000154A8                            	@AfterImage_Start2:    
000154A8 6100 A8BA                          	bsr.w    FindFreeObj    ; search a free space in object RAM
000154AC 6600                               	bne.s    @display    ; if not have, don't load the After Image
000154AE 12BC 0010                          	move.b  #$10,0(a1)        ; load after-image object
000154B2 2368 0004 0004                     	move.l    obMap(a0),obMap(a1)        ; copy Sonic mappings to after-image mappings
000154B8 3368 0008 0008                     	move.w    obX(a0),obX(a1)        ; copy Sonic x-pos to after-image x-pos
000154BE 3368 000C 000C                     	move.w    obY(a0),obY(a1)    ; copy Sonic y-pos to after-image y-pos
000154C4                            
000154C4                                	@display:
000154C4 4EB9 0000 F7CA                     	jsr    (DisplaySprite).l
000154CA                            
000154CA                            	@chkinvincible:
000154CA 4A38 FE2D                  		tst.b	(v_invinc).w	; does Sonic have invincibility?
000154CE 6700                       		beq.s	@chkshoes	; if not, branch
000154D0 0C38 0001 FE19             		cmpi.b	 #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
000154D6 6700 0000                          beq		 @exit		
000154DA 4A68 0032                  		tst.w	invtime(a0)	; check	time remaining for invinciblity
000154DE 6700                       		beq.s	@chkshoes	; if no	time remains, branch
000154E0 5368 0032                  		subq.w	#1,invtime(a0)	; subtract 1 from time
000154E4 6600                       		bne.s	@chkshoes
000154E6 4A38 F7AA                  		tst.b	(f_lockscreen).w
000154EA 6600                       		bne.s	@removeinvincible
000154EC 0C78 000C FE14             		cmpi.w	#$C,(v_air).w
000154F2 6500                       		bcs.s	@removeinvincible	
000154F4 0C38 0001 F7AA             		cmpi.b	#$1,(f_lockscreen).w	
000154FA 6700                       		beq.s	@removeinvincible	
000154FC 0C38 0001 FE2E             		cmpi.b	#$1,(v_shoes).w	; does Sonic have speed shoes?
00015502 6600                       		bne.s	@haveshoes	; if no, branch, and load regular stage music
00015504 103C 008B                  		move.b	#$8B,d0		; if yes, load regular speed shoes music
00015508 6000                       		bra.s	@playtune
0001550A                            		
0001550A                            @haveshoes:		
0001550A 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
0001550E                            
0001550E                            @playtune: 
0001550E 4EB9 0000 129A             		jsr	(PlaySound).l    ; play normal music
00015514                            
00015514                            	@removeinvincible:
00015514 11FC 0000 FE2D             		move.b	#0,(v_invinc).w ; cancel invincibility
0001551A                            
0001551A                            	@chkshoes:
0001551A 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
0001551E 6700                       		beq.s	@exit		; if not, branch
00015520 0C38 0001 FE19             		cmpi.b	 #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
00015526 6700 0000                          beq		 @exit			
0001552A 4A68 0034                  		tst.w	shoetime(a0)	; check	time remaining
0001552E 6700                       		beq.s	@exit
00015530 5368 0034                  		subq.w	#1,shoetime(a0)	; subtract 1 from time
00015534 6600                       		bne.s	@exit
00015536 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
0001553C 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
00015542 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
00015548 11FC 0000 FE2E             		move.b	#0,(v_shoes).w	; cancel speed shoes
0001554E 0C38 0001 F7AA             		cmpi.b	#$1,(f_lockscreen).w	
00015554 6700                       		beq.s	@exit
00015556 0C38 0001 FE2D             		cmpi.b	#$1,($FFFFFE2D).w	; does Sonic have invincibility?
0001555C 6600                       		bne.s	@isinvincible	; if no, branch, and load regular stage music
0001555E 103C 0087                  		move.b	#$87,d0		; if yes, load regular invincibility music
00015562 6000                       		bra.b	@playtune2
00015564                            @isinvincible:		
00015564 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
00015568                            @playtune2:
00015568 4EB9 0000 129A             		jsr	(PlaySound).l    ; play normal music
0001556E                            		
0001556E                            	@exit:
0001556E 4E75                       		rts	
0001556E 4E75                       		rts	
00015570                            		include	"_incObj\Sonic RecordPosition.asm"
00015570                            ; ---------------------------------------------------------------------------
00015570                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00015570                            ; ---------------------------------------------------------------------------
00015570                            
00015570                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015570                            
00015570                            
00015570                            Sonic_RecordPosition:
00015570 3038 F7A8                  		move.w	(v_trackpos).w,d0
00015574 43F8 CB00                  		lea	(v_tracksonic).w,a1
00015578 43F1 0000                  		lea	(a1,d0.w),a1
0001557C 32E8 0008                  		move.w	obX(a0),(a1)+
00015580 32E8 000C                  		move.w	obY(a0),(a1)+
00015584 5838 F7A9                  		addq.b	#4,(v_trackbyte).w
00015588 4E75                       		rts	
0001558A                            ; End of function Sonic_RecordPosition
0001558A                            ; End of function Sonic_RecordPosition
0001558A                            		include	"_incObj\Sonic Water.asm"
0001558A                            ; ---------------------------------------------------------------------------
0001558A                            ; Subroutine for Sonic when he's underwater
0001558A                            ; ---------------------------------------------------------------------------
0001558A                            
0001558A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001558A                            
0001558A                            
0001558A                            Sonic_Water:
0001558A 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	;TIS is level LZ?
00015590 6600                       		bne.s	WaterTagforMZ	; if no, branch
00015592 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level LZ?
00015598 6700                       		beq.s	Sonic_Water_LZ	; if yes, branch
0001559A                            
0001559A                            	Sonic_Water_Exit:
0001559A 4E75                       		rts
0001559C                            ; ===========================================================================
0001559C                            LoadGFXLUTWat:	;TIS Water Palette List
0001559C 0000 36F8 0000 3A18 0000+          dc.l	Pal_SBZ3SonWat,Pal_SonWater2,Pal_SonWater3,Pal_SonWater4,Pal_SonWater5,Pal_SonWater6,Pal_SonWater7,Pal_SonWater8,Pal_SonWater9,Pal_SonWater10,Pal_SonWater11	
000155C8                            
000155C8                            ; ===========================================================================
000155C8                            
000155C8                            	Sonic_Water_LZ:
000155C8 3038 F646                  		move.w	(v_waterpos1).w,d0
000155CC B068 000C                  		cmp.w	obY(a0),d0	; is Sonic above the water?
000155D0 6C00 0000                  		bge.w	Abovewater	; if yes, branch
000155D4 6000 0000                  		bra	WaterStatus
000155D8                            	WaterTagforMZ:
000155D8 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS
000155DE 6700 0000                  		beq.w	Abovewater	; if yes, branch
000155E2                            		
000155E2 7000                       		moveq	#0,d0
000155E4 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
000155E8 D040                               add.w    d0,d0
000155EA D040                               add.w    d0,d0
000155EC 227B 00AE                  		movea.l    loadGFXLUTWat(pc,d0.w),a1  ;Load a separate list for water palettes
000155F0 303C 0007                  		move.w #$7,d0             ;TIS Length ($F = full line)
000155F4                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
000155F4 45F8 FB00                      	lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
000155F8 4EB8 2678                  		jsr	Palload_Loop
000155FC                            	WaterStatus:
000155FC 08E8 0006 0022             		bset	#6,obStatus(a0)
00015602 6600 FF96                  		bne.w	Sonic_Water_Exit
00015606 6100 0000                  		bsr.w	ResumeMusic
0001560A 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
00015610 11FC 000A D340             		move.b	#id_DrownCount,(v_objspace+$340).w ; load bubbles object from Sonic's mouth
00015616 11FC 0081 D368             		move.b	#$81,(v_objspace+$340+obSubtype).w
0001561C 31FC 0300 F760             		move.w	#$300,(v_sonspeedmax).w ; change Sonic's top speed
00015622 31FC 0006 F762             		move.w	#6,(v_sonspeedacc).w ; change Sonic's acceleration
00015628 31FC 0040 F764             		move.w	#$40,(v_sonspeeddec).w ; change Sonic's deceleration
0001562E 4A38 FE19                  		tst.b	(Super_Sonic_flag).w	; Is Sonic Super?
00015632 6700                       		beq.s	@Skip			; If not branch
00015634 31FC 0500 F760             		move.w	#$500,(v_sonspeedmax).w
0001563A 31FC 0018 F762             		move.w	#$18,(v_sonspeedacc).w
00015640 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w
00015646                            @Skip		
00015646 E0E8 0010                  		asr	obVelX(a0)
0001564A E0E8 0012                  		asr	obVelY(a0)
0001564E E0E8 0012                  		asr	obVelY(a0)	; slow Sonic
00015652 6700 FF46                  		beq.w	Sonic_Water_Exit		; branch if Sonic stops moving
00015656                            		;move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
00015656 31FC 0100 D1DC                     	move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
00015666 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS 
0001566C 6600 0000                  		bne.w	@return
00015670                            		
00015670                            		
00015670                            	@return:
00015670 4E75                       		rts
00015672                            
00015672                            ; ===========================================================================
00015672                            
00015672                            LoadGFXLUT:	;TIS Dry Palette List
00015672 0000 2D58 0000 38D8 0000+          dc.l   Pal_Sonic,Pal_Sonic2,Pal_Sonic3,Pal_Sonic4,Pal_Sonic5,Pal_Sonic6,Pal_Sonic7,Pal_Sonic8,Pal_Sonic8,Pal_Sonic9,Pal_Sonic10,Pal_Sonic11
000156A2                            
000156A2                            ; ===========================================================================
000156A2                            
000156A2                            Abovewater:
000156A2 7000                       		moveq	#0,d0
000156A4 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
000156A8 D040                       		add.w    d0,d0
000156AA D040                               add.w    d0,d0
000156AC 227B 00C4                  		movea.l    loadGFXLUT(pc,d0.w),a1  ;Load a separate list for palettes
000156B0                            
000156B0 303C 0007                  		move.w #$7,d0             ;TIS Length ($F = full line)
000156B4                            		;lea    (Pal_Sonic),a1  ;Palette location
000156B4 45F8 FB00                  		lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
000156B8 4EB8 2678                  		jsr	Palload_Loop
000156BC 08A8 0006 0022             		bclr	#6,obStatus(a0)
000156C2 6700 FED6                  		beq.w	Sonic_Water_Exit
000156C6 6100 0000                  		bsr.w	ResumeMusic
000156CA 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000156D0                            
000156D0 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
000156D6 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
000156DC 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
000156E2 4A38 FE19                  		tst.b	(Super_Sonic_flag).w	; Is Sonic Super?
000156E6 6700                       		beq.s	@Skip			; If not branch
000156E8 31FC 0A00 F760             		move.w	#$A00,(v_sonspeedmax).w
000156EE 31FC 0030 F762             		move.w	#$30,(v_sonspeedacc).w
000156F4 31FC 0100 F764             		move.w	#$100,(v_sonspeeddec).w
000156FA                            @Skip		
000156FA E1E8 0012                  		asl	obVelY(a0)
000156FE 6700 FE9A                  		beq.w	Sonic_Water_Exit
00015702 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
00015708 0C68 F000 0012             		cmpi.w	#-$1000,obVelY(a0)
0001570E 6E00                       		bgt.s	@belowmaxspeed
00015710 317C F000 0012             		move.w	#-$1000,obVelY(a0) ; set maximum speed on leaving water
00015716                            
00015716                            	@belowmaxspeed:
00015720                            ; End of function Sonic_Water
00015720                            
00015720                            
00015720                            		include "_incObj\03 Hangable Sprite.asm"
00015720                            ; ===========================================================================
00015720                            ; ----------------------------------------------------------------------------
00015720                            ; Object 03 - Invisible sprite that you can hang on to
00015720                            ; ----------------------------------------------------------------------------
00015720                            ; Sprite_2C92C:
00015720                            Obj03:
00015720 7000                       	moveq    #0,d0
00015722 1028 0024                      move.b    obRoutine(a0),d0            ;just use s1 version of this variable
00015726 323B 0000                      move.w    Obj03_Index(pc,d0.w),d1
0001572A 4EFB 1000                      jmp    Obj03_Index(pc,d1.w)
0001572E                            ; ===========================================================================
0001572E                            ; off_2C93A:
0001572E                            Obj03_Index:
0001572E 0000                           dc.w Obj03_Main-Obj03_Index
00015730 0000                               dc.w Obj03_Init-Obj03_Index
00015732                            ; ===========================================================================
00015732                            ; loc_2C93E:
00015732                            Obj03_Init:
00015732 5428 0024                      addq.b    #2,obRoutine(a0)        ;just use s1 version of this variable
00015736 117C 0004 0001                 move.b    #4,obRender(a0)    ;just use s1 version of this variable
0001573C 117C 0018 0014                 move.b    #$18,obActWid(a0)    ;just use s1 version of this variable
00015742 317C 0200 0018                 move.w    #$200,obPriority(a0)            ;just use s1 version of this variable
00015748                            ; loc_2C954:
00015748                            Obj03_Main:
00015748 45E8 0030                      lea    $30(a0),a2
0001574C 43F8 D000                      lea    (v_player).w,a1 ; a1=character
00015750 3038 F604                      move.w    (v_jpadhold1).w,d0 			;S1 has same ram address for controller as S2 just different variable name like on the line above
00015754 6100                           bsr.s    Obj03_Check
00015756                            ;    lea    (Sidekick).w,a1 ; a1=character  ;disabled
00015756                            ;    addq.w    #1,a2                          ;disabled
00015756                            ;    move.w    (Ctrl_2).w,d0                    ;disabled
00015756                            ;    bsr.s    Obj03_Check         	;disabled
00015756 4EF9 0000 0000             	jmp		bonu_chkdel
0001575C                            ; ===========================================================================
0001575C                            ; loc_2C972:
0001575C                            Obj03_Check:
0001575C 4A12                       		tst.b	(a2)
0001575E 6700                       		beq.s	loc_2C9A0
00015760 0200 0070                  		andi.b	#btnABC,d0
00015764 6700 0000                  		beq.w	Obj03_Check_End
00015768 4238 F7C8                  		clr.b	f_lockmulti.w
0001576C 4212                       		clr.b	(a2)
0001576E 157C 0012 0002             		move.b	#$12,2(a2)
00015774 0240 0F00                  		andi.w	#$F00,d0
00015778 6700                       		beq.s	loc_2C954
0001577A 157C 003C 0002             		move.b	#$3C,2(a2)
00015780                            	
00015780                            loc_2C954:
00015780 337C FD00 0012             		move.w	#-$300,y_vel(a1)
00015786 6000 0000                  		bra.w	Obj03_Check_End
0001578A                            ; ===========================================================================
0001578A                            
0001578A                            loc_2C9A0:
0001578A 4A2A 0002                  		tst.b	2(a2)
0001578E 6700                       		beq.s	loc_2C972
00015790 532A 0002                  		subq.b	#1,2(a2)
00015794 6600 0000                  		bne.w	Obj03_Check_End
00015798                            
00015798                            loc_2C972:
00015798 3029 0008                  		move.w	obX(a1),d0
0001579C 9068 0008                  		sub.w	obX(a0),d0
000157A0 0640 0018                  		addi.w	#$18,d0
000157A4 0C40 0030                  		cmpi.w	#$30,d0
000157A8 6400 0000                  		bhs.w	Obj03_Check_End
000157AC 3229 000C                  		move.w	obY(a1),d1
000157B0 9268 000C                  		sub.w	obY(a0),d1
000157B4 0C41 0010                  		cmpi.w	#$10,d1
000157B8 6400 0000                  		bhs.w	Obj03_Check_End
000157BC 4A38 F7C8                  		tst.b	f_lockmulti.w
000157C0 6B00                       		bmi.s	Obj03_Check_End
000157C2 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
000157C8 6400                       		bhs.s	Obj03_Check_End
000157CA 4A78 FFFA                  		tst.w	(f_debugmode).w
000157CE 6600                       		bne.s	Obj03_Check_End
000157D0 4269 0010                  		clr.w	x_vel(a1)
000157D4 4269 0012                  		clr.w	y_vel(a1)
000157D8 4269 0020                  		clr.w	obInertia(a1)
000157DC 3368 000C 000C             		move.w	obY(a0),obY(a1)
000157E2 137C 0000 001C             		move.b	#id_Hang2,obAnim(a1)
000157E8 11FC 0001 F7C8             		move.b	#1,f_lockmulti.w
000157EE 14BC 0001                  		move.b	#1,(a2)
000157F2                            
000157F2                            ; return_2CA08:
000157F2                            Obj03_Check_End:
000157F2 4E75                       		rts
000157F2 4E75                       		rts
000157F4                            
000157F4                            ; ===========================================================================
000157F4                            ; ---------------------------------------------------------------------------
000157F4                            ; Modes	for controlling	Sonic
000157F4                            ; ---------------------------------------------------------------------------
000157F4                            
000157F4                            Sonic_MdNormal:
000157F4                            		;bsr.w	Sonic_Peelout
000157F4                            		;bsr.w	Sonic_SpinDash
000157F4 6100 0000                  		bsr.w	Sonic_Jump
000157F8 6100 0000                  		bsr.w	Sonic_SlopeResist
000157FC 6100 0000                  		bsr.w	Sonic_Move
00015800 6100 0000                  		bsr.w	Sonic_Roll
00015804 6100 0000                  		bsr.w	Sonic_LevelBound
00015808 4EB9 0000 F7B6             		jsr	(SpeedToPos).l
0001580E 6100 0000                  		bsr.w	Sonic_AnglePos
00015812 6100 0000                  		bsr.w	Sonic_SlopeRepel
00015816 4E75                       		rts	
00015818                            
00015818                            ; ===========================================================================
00015818                            
00015818                            Sonic_MdJump:
00015818 6100 0000                  		bsr.w   Sonic_AirRoll
0001581C 6100 0000                  		bsr.w	Sonic_JumpHeight
00015820 6100 0000                  		bsr.w	Sonic_JumpDirection
00015824 6100 0000                  		bsr.w	Sonic_LevelBound
00015828 4EB9 0000 F77E             		jsr	(ObjectFall).l
0001582E 0828 0006 0022             		btst	#6,obStatus(a0)
00015834 6700                       		beq.s	loc_12E5C
00015836 0468 0028 0012             		subi.w	#$28,obVelY(a0)
0001583C                            
0001583C                            loc_12E5C:
0001583C 6100 0000                  		bsr.w	Sonic_JumpAngle
00015840 6100 0000                  		bsr.w	Sonic_Floor
00015844 4E75                       		rts	
00015846                            ; ===========================================================================
00015846                            
00015846                            Sonic_MdRoll:
00015846 6100 0000                  		bsr.w	Sonic_Jump
0001584A 6100 0000                  		bsr.w	Sonic_RollRepel
0001584E 6100 0000                  		bsr.w	Sonic_RollSpeed
00015852 6100 0000                  		bsr.w	Sonic_LevelBound
00015856 4EB9 0000 F7B6             		jsr	(SpeedToPos).l
0001585C 6100 0000                  		bsr.w	Sonic_AnglePos
00015860 6100 0000                  		bsr.w	Sonic_SlopeRepel
00015864 4E75                       		rts	
00015866                            ; ===========================================================================
00015866                            
00015866                            Sonic_MdJump2:
00015866 6100 0000                  		bsr.w	Sonic_HomingAttack
0001586A 6100 0000                  		bsr.w	Sonic_JumpHeight
0001586E 6100 0000                  		bsr.w	Sonic_JumpDirection
00015872 6100 0000                  		bsr.w	Sonic_LevelBound
00015876 4EB9 0000 F77E             		jsr	(ObjectFall).l
0001587C 0828 0006 0022             		btst	#6,obStatus(a0)
00015882 6700                       		beq.s	loc_12EA6
00015884 0468 0028 0012             		subi.w	#$28,obVelY(a0)
0001588A                            
0001588A                            loc_12EA6:
0001588A 6100 0000                  		bsr.w	Sonic_JumpAngle
0001588E 6100 0000                  		bsr.w	Sonic_Floor
00015892 4E75                       		rts	
00015894                            
00015894                            		include	"_incObj\Sonic Move.asm"
00015894                            ; ---------------------------------------------------------------------------
00015894                            ; Subroutine to	make Sonic walk/run
00015894                            ; ---------------------------------------------------------------------------
00015894                            
00015894                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015894                            
00015894                            
00015894                            Sonic_Move:
00015894 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
00015898 3A38 F762                  		move.w	(v_sonspeedacc).w,d5
0001589C 3838 F764                  		move.w	(v_sonspeeddec).w,d4
000158A0 4A38 F7CA                  		tst.b	(f_jumponly).w
000158A4 6600 0000                  		bne.w	loc_12FEE
000158A8 4A68 003E                  		tst.w	$3E(a0)
000158AC 6600 0000                  		bne.w	Sonic_ResetScr
000158B0 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
000158B6 6700                       		beq.s	@notleft	; if not, branch
000158B8 6100 0000                  		bsr.w	Sonic_MoveLeft
000158BC                            
000158BC                            	@notleft:
000158BC 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
000158C2 6700                       		beq.s	@notright	; if not, branch
000158C4 6100 0000                  		bsr.w	Sonic_MoveRight
000158C8                            
000158C8                            	@notright:
000158C8 1028 0026                  		move.b	obAngle(a0),d0
000158CC 0600 0020                  		addi.b	#$20,d0
000158D0 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
000158D4 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
000158D8 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
000158DC 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
000158E0 08A8 0005 0022             		bclr	#5,obStatus(a0)
000158E6 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
000158EC 0828 0003 0022             		btst	#3,obStatus(a0)
000158F2 6700                       		beq.s	Sonic_Balance
000158F4 7000                       		moveq	#0,d0
000158F6 1028 003D                  		move.b	$3D(a0),d0
000158FA ED48                       		lsl.w	#6,d0
000158FC 43F8 D000                  		lea	(v_objspace).w,a1
00015900 43F1 0000                  		lea	(a1,d0.w),a1
00015904 4A29 0022                  		tst.b	obStatus(a1)
00015908 6B00                       		bmi.s	Sonic_LookUp
0001590A 7200                       		moveq	#0,d1
0001590C 1229 0014                  		move.b	obActWid(a1),d1
00015910 3401                       		move.w	d1,d2
00015912 D442                       		add.w	d2,d2
00015914 5942                       		subq.w	#4,d2
00015916 D268 0008                  		add.w	obX(a0),d1
0001591A 9269 0008                  		sub.w	obX(a1),d1
0001591E 0C41 0004                  		cmpi.w	#4,d1
00015922 6D00                       		blt.s	loc_12F6A
00015924 B242                       		cmp.w	d2,d1
00015926 6C00                       		bge.s	loc_12F5A
00015928 6000                       		bra.s	Sonic_LookUp
0001592A                            ; ===========================================================================
0001592A                            
0001592A                            Sonic_Balance:
0001592A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00015930 0C41 000C                  		cmpi.w	#$C,d1
00015934 6D00                       		blt.s	Sonic_LookUp
00015936 0C28 0003 0036             		cmpi.b	#3,$36(a0)
0001593C 6600                       		bne.s	loc_12F62
0001593E                            
0001593E                            loc_12F5A:
0001593E 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015944 6000                       		bra.s	loc_12F70
00015946                            ; ===========================================================================
00015946                            
00015946                            loc_12F62:
00015946 0C28 0003 0037             		cmpi.b	#3,$37(a0)
0001594C 6600                       		bne.s	Sonic_LookUp
0001594E                            
0001594E                            loc_12F6A:
0001594E 08E8 0000 0022             		bset	#0,obStatus(a0)
00015954                            
00015954                            loc_12F70:
00015954 117C 0000 001C             		move.b	#id_Balance,obAnim(a0) ; use "balancing" animation
0001595A 6000 0000                  		bra.w	Sonic_ResetScr
0001595E                            ; ===========================================================================
0001595E                            
0001595E                            Sonic_LookUp:
0001595E 0838 0000 F602             		btst	#bitUp,(v_jpadhold2).w ; is up being pressed?
00015964 6700                       		beq.s	Sonic_Duck	; if not, branch
00015966 117C 0000 001C             		move.b	#id_LookUp,obAnim(a0) ; use "looking up" animation
0001596C 0C78 00C8 F73E             		cmpi.w	#$C8,(v_lookshift).w
00015972 6700                       		beq.s	loc_12FC2
00015974 5478 F73E                  		addq.w	#2,(v_lookshift).w
00015978 6000                       		bra.s	loc_12FC2
0001597A                            ; ===========================================================================
0001597A                            
0001597A                            Sonic_Duck:
0001597A 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
00015980 6700                       		beq.s	Sonic_ResetScr	; if not, branch
00015982 117C 0000 001C             		move.b	#id_Duck,obAnim(a0) ; use "ducking" animation
00015988 0C78 0008 F73E             		cmpi.w	#8,(v_lookshift).w
0001598E 6700                       		beq.s	loc_12FC2
00015990 5578 F73E                  		subq.w	#2,(v_lookshift).w
00015994 6000                       		bra.s	loc_12FC2
00015996                            ; =============================================
00015996                            ; ===========================================================================
00015996                            
00015996                            Sonic_ResetScr:
00015996 11FC 0000 C903             		move.b	#0,($FFFFC903).w
0001599C                            		
0001599C                            Sonic_ResetScr_Part2:
0001599C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000159A2 6700                       		beq.s	loc_12FC2	; if yes, branch
000159A4 6400                       		bcc.s	loc_12FBE
000159A6 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000159AA                            
000159AA                            loc_12FBE:
000159AA 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
000159AE                            
000159AE                            loc_12FC2:
000159AE 1038 F602                  		move.b	(v_jpadhold2).w,d0
000159B2 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	pressed?
000159B6 6600                       		bne.s	loc_12FEE	; if yes, branch
000159B8 3028 0020                  		move.w	obInertia(a0),d0
000159BC 6700                       		beq.s	loc_12FEE
000159BE 6B00                       		bmi.s	loc_12FE2
000159C0 9045                       		sub.w	d5,d0
000159C2 6400                       		bcc.s	loc_12FDC
000159C4 303C 0000                  		move.w	#0,d0
000159C8                            
000159C8                            loc_12FDC:
000159C8 3140 0020                  		move.w	d0,obInertia(a0)
000159CC 6000                       		bra.s	loc_12FEE
000159CE                            ; ===========================================================================
000159CE                            
000159CE                            loc_12FE2:
000159CE D045                       		add.w	d5,d0
000159D0 6400                       		bcc.s	loc_12FEA
000159D2 303C 0000                  		move.w	#0,d0
000159D6                            
000159D6                            loc_12FEA:
000159D6 3140 0020                  		move.w	d0,obInertia(a0)
000159DA                            
000159DA                            loc_12FEE:
000159DA 4A28 0039                  		tst.b	$39(a0) 	;Peelout
000159DE 6600                       		bne.s	loc_1300C 	;Peelout
000159E0 1028 0026                  		move.b	obAngle(a0),d0
000159E4 4EB9 0000 3CCA             		jsr	(CalcSine).l
000159EA C3E8 0020                  		muls.w	obInertia(a0),d1
000159EE E081                       		asr.l	#8,d1
000159F0 3141 0010                  		move.w	d1,obVelX(a0)
000159F4 C1E8 0020                  		muls.w	obInertia(a0),d0
000159F8 E080                       		asr.l	#8,d0
000159FA 3140 0012                  		move.w	d0,obVelY(a0)
000159FE                            
000159FE                            loc_1300C:
000159FE 1028 0026                  		move.b	obAngle(a0),d0
00015A02 0600 0040                  		addi.b	#$40,d0
00015A06 6B00                       		bmi.s	locret_1307C
00015A08 123C 0040                  		move.b	#$40,d1
00015A0C 4A68 0020                  		tst.w	obInertia(a0)
00015A10 6700                       		beq.s	locret_1307C
00015A12 6B00                       		bmi.s	loc_13024
00015A14 4441                       		neg.w	d1
00015A16                            
00015A16                            loc_13024:
00015A16 1028 0026                  		move.b	obAngle(a0),d0
00015A1A D001                       		add.b	d1,d0
00015A1C 3F00                       		move.w	d0,-(sp)
00015A1E 6100 0000                  		bsr.w	Sonic_WalkSpeed
00015A22 301F                       		move.w	(sp)+,d0
00015A24 4A41                       		tst.w	d1
00015A26 6A00                       		bpl.s	locret_1307C
00015A28 E141                       		asl.w	#8,d1
00015A2A 0600 0020                  		addi.b	#$20,d0
00015A2E 0200 00C0                  		andi.b	#$C0,d0
00015A32 6700                       		beq.s	loc_13078
00015A34 0C00 0040                  		cmpi.b	#$40,d0
00015A38 6700                       		beq.s	loc_13066
00015A3A 0C00 0080                  		cmpi.b	#$80,d0
00015A3E 6700                       		beq.s	loc_13060
00015A40 D368 0010                  		add.w	d1,obVelX(a0)
00015A44 08E8 0005 0022             		bset	#5,obStatus(a0)
00015A4A 317C 0000 0020             		move.w	#0,obInertia(a0)
00015A50 4E75                       		rts	
00015A52                            ; ===========================================================================
00015A52                            
00015A52                            loc_13060:
00015A52 9368 0012                  		sub.w	d1,obVelY(a0)
00015A56 4E75                       		rts	
00015A58                            ; ===========================================================================
00015A58                            
00015A58                            loc_13066:
00015A58 9368 0010                  		sub.w	d1,obVelX(a0)
00015A5C 08E8 0005 0022             		bset	#5,obStatus(a0)
00015A62 317C 0000 0020             		move.w	#0,obInertia(a0)
00015A68 4E75                       		rts	
00015A6A                            ; ===========================================================================
00015A6A                            
00015A6A                            loc_13078:
00015A6A D368 0012                  		add.w	d1,obVelY(a0)
00015A6E                            
00015A6E                            locret_1307C:
00015A6E 4E75                       		rts	
00015A70                            ; End of function Sonic_Move
00015A70                            
00015A70                            
00015A70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A70                            
00015A70                            
00015A70                            Sonic_MoveLeft:
00015A70 3028 0020                  		move.w	obInertia(a0),d0
00015A74 6700                       		beq.s	loc_13086
00015A76 6A00                       		bpl.s	loc_130B2
00015A78                            
00015A78                            loc_13086:
00015A78 08E8 0000 0022             		bset	#0,$22(a0)
00015A7E 6600                       		bne.s	loc_1309A
00015A80 08A8 0005 0022             		bclr	#5,$22(a0)
00015A86 117C 0001 001D             		move.b	#1,$1D(a0)
00015A8C                            
00015A8C                            loc_1309A:
00015A8C 9045                       		sub.w	d5,d0
00015A8E 3206                       		move.w	d6,d1
00015A90 4441                       		neg.w	d1
00015A92 B041                       		cmp.w	d1,d0
00015A94 6E00                       		bgt.s	loc_130A6
00015A96 D045                       		add.w	d5,d0
00015A98 B041                       		cmp.w	d1,d0
00015A9A 6F00                       		ble.s	loc_130A6
00015A9C 3001                       		move.w	d1,d0
00015A9E                            
00015A9E                            loc_130A6:
00015A9E 3140 0020                  		move.w	d0,obInertia(a0)
00015AA2 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00015AA8 4E75                       		rts
00015AAA                            ; ===========================================================================
00015AAA                            
00015AAA                            loc_130B2:
00015AAA 9044                       		sub.w	d4,d0
00015AAC 6400                       		bcc.s	loc_130BA
00015AAE 303C FF80                  		move.w	#-$80,d0
00015AB2                            
00015AB2                            loc_130BA:
00015AB2 3140 0020                  		move.w	d0,obInertia(a0)
00015AB6 1228 0026                  		move.b	obAngle(a0),d1
00015ABA 0601 0020                  		addi.b	#$20,d1
00015ABE 0201 00C0                  		andi.b	#$C0,d1
00015AC2 6600                       		bne.s	locret_130E8
00015AC4 0C40 0400                  		cmpi.w	#$400,d0
00015AC8 6D00                       		blt.s	locret_130E8
00015ACA 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015AD0 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015AE0 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00015AE6 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
00015AEC                            		
00015AEC                            locret_130E8:
00015AEC 4E75                       		rts	
00015AEE                            ; End of function Sonic_MoveLeft
00015AEE                            
00015AEE                            
00015AEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015AEE                            
00015AEE                            
00015AEE                            Sonic_MoveRight:
00015AEE 3028 0020                  		move.w	obInertia(a0),d0
00015AF2 6B00                       		bmi.s	loc_13118
00015AF4 08A8 0000 0022             		bclr	#0,$22(a0)
00015AFA 6700                       		beq.s	loc_13104
00015AFC 08A8 0005 0022             		bclr	#5,$22(a0)
00015B02 117C 0001 001D             		move.b	#1,$1D(a0)
00015B08                            
00015B08                            loc_13104:
00015B08 D045                       		add.w	d5,d0
00015B0A B046                       		cmp.w	d6,d0
00015B0C 6D00                       		blt.s	loc_1310C
00015B0E 9045                       		sub.w	d5,d0
00015B10 B046                       		cmp.w	d6,d0
00015B12 6C00                       		bge.s	loc_1310C
00015B14 3006                       		move.w	d6,d0
00015B16                            
00015B16                            loc_1310C:
00015B16 3140 0020                  		move.w	d0,obInertia(a0)
00015B1A 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00015B20 4E75                       		rts
00015B22                            ; ===========================================================================
00015B22                            
00015B22                            loc_13118:
00015B22 D044                       		add.w	d4,d0
00015B24 6400                       		bcc.s	loc_13120
00015B26 303C 0080                  		move.w	#$80,d0
00015B2A                            
00015B2A                            loc_13120:
00015B2A 3140 0020                  		move.w	d0,obInertia(a0)
00015B2E 1228 0026                  		move.b	obAngle(a0),d1
00015B32 0601 0020                  		addi.b	#$20,d1
00015B36 0201 00C0                  		andi.b	#$C0,d1
00015B3A 6600                       		bne.s	locret_1314E
00015B3C 0C40 FC00                  		cmpi.w	#-$400,d0
00015B40 6E00                       		bgt.s	locret_1314E
00015B42 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015B48 08E8 0000 0022             		bset	#0,obStatus(a0)
00015B58 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00015B5E 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
00015B64                            		
00015B64                            locret_1314E:
00015B64 4E75                       		rts	
00015B66                            ; End of function Sonic_MoveRight
00015B66                            ; End of function Sonic_MoveRight
00015B66                            		include	"_incObj\Sonic RollSpeed.asm"
00015B66                            ; ---------------------------------------------------------------------------
00015B66                            ; Subroutine to	change Sonic's speed as he rolls
00015B66                            ; ---------------------------------------------------------------------------
00015B66                            
00015B66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B66                            
00015B66                            
00015B66                            Sonic_RollSpeed:
00015B66 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
00015B6A E346                       		asl.w	#1,d6
00015B6C 7A06                       		moveq	#6,d5	; natural roll deceleration = 1/2 normal acceleration
00015B6E 3838 F764                  		move.w	(v_sonspeeddec).w,d4
00015B72 E444                       		asr.w	#2,d4
00015B74 4A38 F7CA                  		tst.b	(f_jumponly).w
00015B78 6600 0000                  		bne.w	loc_131CC
00015B7C 4A68 003E                  		tst.w	$3E(a0)
00015B80 6600                       		bne.s	@notright
00015B82 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
00015B88 6700                       		beq.s	@notleft	; if not, branch
00015B8A 6100 0000                  		bsr.w	Sonic_RollLeft
00015B8E                            
00015B8E                            	@notleft:
00015B8E 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
00015B94 6700                       		beq.s	@notright	; if not, branch
00015B96 6100 0000                  		bsr.w	Sonic_RollRight
00015B9A                            
00015B9A                            	@notright:
00015B9A 3028 0020                  		move.w	obInertia(a0),d0
00015B9E 6700                       		beq.s	loc_131AA
00015BA0 6B00                       		bmi.s	loc_1319E
00015BA2 9045                       		sub.w	d5,d0
00015BA4 6400                       		bcc.s	loc_13198
00015BA6 303C 0000                  		move.w	#0,d0
00015BAA                            
00015BAA                            loc_13198:
00015BAA 3140 0020                  		move.w	d0,obInertia(a0)
00015BAE 6000                       		bra.s	loc_131AA
00015BB0                            ; ===========================================================================
00015BB0                            
00015BB0                            loc_1319E:
00015BB0 D045                       		add.w	d5,d0
00015BB2 6400                       		bcc.s	loc_131A6
00015BB4 303C 0000                  		move.w	#0,d0
00015BB8                            
00015BB8                            loc_131A6:
00015BB8 3140 0020                  		move.w	d0,obInertia(a0)
00015BBC                            
00015BBC                            loc_131AA:
00015BBC 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
00015BC0 6600                       		bne.s	loc_131CC	; if yes, branch
00015BC2 08A8 0002 0022             		bclr	#2,obStatus(a0)
00015BC8 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015BCE 117C 0009 0017             		move.b	#9,obWidth(a0)
00015BD4 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
00015BDA 5B68 000C                  		subq.w	#5,obY(a0)
00015BDE                            
00015BDE                            loc_131CC:
00015BDE 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
00015BE4 6700                       		beq.s	@cont2
00015BE6 6400                       		bcc.s	@cont1
00015BE8 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015BEC                            		
00015BEC                            @cont1:
00015BEC 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015BF0                            		
00015BF0                            @cont2:
00015BF0 1028 0026                  		move.b	obAngle(a0),d0
00015BF4 4EB9 0000 3CCA             		jsr	(CalcSine).l
00015BFA C1E8 0020                  		muls.w	obInertia(a0),d0
00015BFE E080                       		asr.l	#8,d0
00015C00 3140 0012                  		move.w	d0,obVelY(a0)
00015C04 C3E8 0020                  		muls.w	obInertia(a0),d1
00015C08 E081                       		asr.l	#8,d1
00015C0A 0C41 1000                  		cmpi.w	#$1000,d1
00015C0E 6F00                       		ble.s	loc_131F0
00015C10 323C 1000                  		move.w	#$1000,d1
00015C14                            
00015C14                            loc_131F0:
00015C14 0C41 F000                  		cmpi.w	#-$1000,d1
00015C18 6C00                       		bge.s	loc_131FA
00015C1A 323C F000                  		move.w	#-$1000,d1
00015C1E                            
00015C1E                            loc_131FA:
00015C1E 3141 0010                  		move.w	d1,obVelX(a0)
00015C22 6000 FDDA                  		bra.w	loc_1300C
00015C26                            ; End of function Sonic_RollSpeed
00015C26                            
00015C26                            
00015C26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C26                            
00015C26                            
00015C26                            Sonic_RollLeft:
00015C26 3028 0020                  		move.w	obInertia(a0),d0
00015C2A 6700                       		beq.s	loc_1320A
00015C2C 6A00                       		bpl.s	loc_13218
00015C2E                            
00015C2E                            loc_1320A:
00015C2E 08E8 0000 0022             		bset	#0,obStatus(a0)
00015C34 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015C3A 4E75                       		rts	
00015C3C                            ; ===========================================================================
00015C3C                            
00015C3C                            loc_13218:
00015C3C 9044                       		sub.w	d4,d0
00015C3E 6400                       		bcc.s	loc_13220
00015C40 303C FF80                  		move.w	#-$80,d0
00015C44                            
00015C44                            loc_13220:
00015C44 3140 0020                  		move.w	d0,obInertia(a0)
00015C48 4E75                       		rts	
00015C4A                            ; End of function Sonic_RollLeft
00015C4A                            
00015C4A                            
00015C4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C4A                            
00015C4A                            
00015C4A                            Sonic_RollRight:
00015C4A 3028 0020                  		move.w	obInertia(a0),d0
00015C4E 6B00                       		bmi.s	loc_1323A
00015C50 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015C56 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015C5C 4E75                       		rts	
00015C5E                            ; ===========================================================================
00015C5E                            
00015C5E                            loc_1323A:
00015C5E D044                       		add.w	d4,d0
00015C60 6400                       		bcc.s	loc_13242
00015C62 303C 0080                  		move.w	#$80,d0
00015C66                            
00015C66                            loc_13242:
00015C66 3140 0020                  		move.w	d0,obInertia(a0)
00015C6A 4E75                       		rts	
00015C6C                            ; End of function Sonic_RollRight
00015C6C                            ; End of function Sonic_RollRight
00015C6C                            		include	"_incObj\Sonic JumpDirection.asm"
00015C6C                            ; ---------------------------------------------------------------------------
00015C6C                            ; Subroutine to	change Sonic's direction while jumping
00015C6C                            ; ---------------------------------------------------------------------------
00015C6C                            
00015C6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C6C                            
00015C6C                            
00015C6C                            Sonic_JumpDirection:
00015C6C 3C38 F760                  		move.w	($FFFFF760).w,d6
00015C70 3A38 F762                  		move.w	($FFFFF762).w,d5
00015C74 E345                       		asl.w	#1,d5
00015C76 3028 0010                  		move.w	$10(a0),d0	
00015C7A 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
00015C80 6700                       		beq.s	loc_13278; if not, branch	
00015C82 08E8 0000 0022             		bset	#0,$22(a0)	
00015C88 9045                       		sub.w	d5,d0	
00015C8A 3206                       		move.w	d6,d1	
00015C8C 4441                       		neg.w	d1	
00015C8E B041                       		cmp.w	d1,d0	
00015C90 6E00                       		bgt.s	loc_13278	
00015C92 D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
00015C94 B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
00015C96 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
00015C98 3001                       		move.w	d1,d0
00015C9A                            
00015C9A                            loc_13278:
00015C9A 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00015CA0 6700                       		beq.s	Obj01_JumpMove; if not, branch	
00015CA2 08A8 0000 0022             		bclr	#0,$22(a0)	
00015CA8 D045                       		add.w	d5,d0	
00015CAA B046                       		cmp.w	d6,d0	
00015CAC 6D00                       		blt.s	Obj01_JumpMove
00015CAE 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
00015CB0 B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
00015CB2 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
00015CB4 3006                       		move.w	d6,d0
00015CB6                            
00015CB6                            Obj01_JumpMove:
00015CB6 3140 0010                  		move.w	d0,obVelX(a0)	; change Sonic's horizontal speed
00015CBA                            
00015CBA                            Obj01_ResetScr2:
00015CBA 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w ; is the screen in its default position?
00015CC0 6700                       		beq.s	loc_132A4	; if yes, branch
00015CC2 6400                       		bcc.s	loc_132A0
00015CC4 5878 F73E                  		addq.w	#4,(v_lookshift).w
00015CC8                            
00015CC8                            loc_132A0:
00015CC8 5578 F73E                  		subq.w	#2,(v_lookshift).w
00015CCC                            
00015CCC                            loc_132A4:
00015CCC 0C68 FC00 0012             		cmpi.w	#-$400,obVelY(a0) ; is Sonic moving faster than -$400 upwards?
00015CD2 6500                       		bcs.s	locret_132D2	; if yes, branch
00015CD4 3028 0010                  		move.w	obVelX(a0),d0
00015CD8 3200                       		move.w	d0,d1
00015CDA EA41                       		asr.w	#5,d1
00015CDC 6700                       		beq.s	locret_132D2
00015CDE 6B00                       		bmi.s	loc_132C6
00015CE0 9041                       		sub.w	d1,d0
00015CE2 6400                       		bcc.s	loc_132C0
00015CE4 303C 0000                  		move.w	#0,d0
00015CE8                            
00015CE8                            loc_132C0:
00015CE8 3140 0010                  		move.w	d0,obVelX(a0)
00015CEC 4E75                       		rts	
00015CEE                            ; ===========================================================================
00015CEE                            
00015CEE                            loc_132C6:
00015CEE 9041                       		sub.w	d1,d0
00015CF0 6500                       		bcs.s	loc_132CE
00015CF2 303C 0000                  		move.w	#0,d0
00015CF6                            
00015CF6                            loc_132CE:
00015CF6 3140 0010                  		move.w	d0,obVelX(a0)
00015CFA                            
00015CFA                            locret_132D2:
00015CFA 4E75                       		rts	
00015CFC                            ; End of function Sonic_JumpDirection
00015CFC                            ; End of function Sonic_JumpDirection
00015CFC                            		include "_incObj\Sonic Peelout.asm"
00015CFC                            ; ---------------------------------------------------------------------------
00015CFC                            ; Subroutine to make Sonic perform a peelout
00015CFC                            ; ---------------------------------------------------------------------------
00015CFC                            ; If you use this makes sure to search for ;Peelout in Sonic1.asm
00015CFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015CFC                            
00015CFC                            Sonic_Peelout:
00015CFC 0828 0001 0039             		btst	#1,$39(a0)
00015D02 6600                       		bne.s	SCDPeelout_Launch
00015D04 0C28 0007 001C             		cmpi.b	#7,$1C(a0) ;check to see if your looking up
00015D0A 6600                       		bne.s	@return
00015D0C 1038 F603                  		move.b	($FFFFF603).w,d0
00015D10 0200 0070                  		andi.b	#%01110000,d0
00015D14 6700 0000                  		beq.w	@return
00015D18 117C 0001 001C             		move.b	#1,$1C(a0)
00015D1E 317C 0000 003A             		move.w	#0,$3A(a0)
00015D24 303C 00D2                  		move.w	#$D2,d0
00015D28 4EB9 0000 12A0             		jsr	(PlaySound_Special).l 		; Play peelout charge sound
00015D2E                            	;	sfx 	sfx_PeeloutCharge 		; These are if you use AMPS
00015D2E 588F                       		addq.l	#4,sp
00015D30 08E8 0001 0039             		bset	#1,$39(a0)
00015D36                            		
00015D36 4268 0020                  		clr.w	obInertia(a0)
00015D3A                             
00015D3A 6100 0000                  		bsr.w	Sonic_LevelBound
00015D3E 6100 0000                  		bsr.w	Sonic_AnglePos
00015D42                             
00015D42                            	@return:
00015D42 4E75                       		rts	
00015D44                            ; ---------------------------------------------------------------------------
00015D44                             
00015D44                            SCDPeelout_Launch:
00015D44 0828 0001 0039             		btst	#1,$39(a0)
00015D4A 1038 F602                  		move.b	($FFFFF602).w,d0
00015D4E 0800 0000                  		btst	#0,d0
00015D52 6600 0000                  		bne.w	SCDPeelout_Charge
00015D56 08A8 0001 0039             		bclr	#1,$39(a0)	; stop Dashing
00015D5C 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)	; have we been charging long enough?
00015D62 6600 0000                  		bne.w	SCDPeelout_Stop_Sound
00015D66 117C 0000 001C             		move.b	#0,$1C(a0)	; launches here (peelout sprites)
00015D6C 317C 0001 0010             		move.w	#1,$10(a0)	; force X speed to nonzero for camera lag's benefit
00015D72 3028 0020                  		move.w	obInertia(a0),d0
00015D76 0440 0800                  		subi.w	#$800,d0
00015D7A D040                       		add.w	d0,d0
00015D7C 0240 1F00                  		andi.w	#$1F00,d0
00015D80 4440                       		neg.w	d0
00015D82 0640 2000                  		addi.w	#$2000,d0
00015D86 31C0 C904                  		move.w	d0,($FFFFC904).w
00015D8A 0828 0000 0022             		btst	#0,$22(a0)
00015D90 6700                       		beq.s	@dontflip
00015D92 4468 0020                  		neg.w	obInertia(a0)
00015D96                             
00015D96                            @dontflip:
00015D96 08A8 0007 0022             		bclr	#7,$22(a0)
00015D9C 303C 00D3                  		move.w	#$D3,d0
00015DA0 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
00015DA6                            	;	sfx 	sfx_PeeloutRelease
00015DA6 1028 0026                  		move.b	obAngle(a0),d0
00015DAA 4EB9 0000 3CCA             		jsr	(CalcSine).l
00015DB0 C3E8 0020                  		muls.w	obInertia(a0),d1
00015DB4 E081                       		asr.l	#8,d1
00015DB6 3141 0010                  		move.w	d1,obVelX(a0)
00015DBA C1E8 0020                  		muls.w	obInertia(a0),d0
00015DBE E080                       		asr.l	#8,d0
00015DC0 3140 0012                  		move.w	d0,obVelY(a0)	
00015DC4 6000 0000                  		bra.w	SCDPeelout_ResetScr
00015DC8                            ; ---------------------------------------------------------------------------
00015DC8                             
00015DC8                            SCDPeelout_Charge:				; If still charging the dash...
00015DC8 3238 F760                  		move.w	($FFFFF760).w,d1	; get top peelout speed
00015DCC 3401                       		move.w	d1,d2
00015DCE D241                       		add.w	d1,d1
00015DD0 4A38 FE2E                  		tst.b   ($FFFFFE2E).w 		; test for speed shoes
00015DD4 6700                       		beq.s	@noshoes
00015DD6 E242                       		asr.w	#1,d2
00015DD8 9242                       		sub.w	d2,d1
00015DDA                            
00015DDA                            @noshoes:
00015DDA 0668 0064 0020             		addi.w	#$64,obInertia(a0)		; increment speed
00015DE0 B268 0020                  		cmp.w	obInertia(a0),d1
00015DE4 6E00                       		bgt.s	@inctimer
00015DE6 3141 0020                  		move.w	d1,obInertia(a0)
00015DEA                            
00015DEA                            @inctimer:
00015DEA 5228 003A                  		addq.b	#1,$3A(a0)		; increment timer
00015DEE 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)
00015DF4 6500                       		bcs.s	SCDPeelout_ResetScr
00015DF6 117C 001E 003A             		move.b	#$1E,$3A(a0)
00015DFC 4EF9 0000 0000             		jmp 	SCDPeelout_ResetScr
00015E02                            		
00015E02                            SCDPeelout_Stop_Sound:
00015E02 303C 00D4                  		move.w	#$D4,d0
00015E06 4EB9 0000 12A0             		jsr		(PlaySound_Special).l
00015E0C                            	;	sfx 	sfx_PeeloutStop
00015E0C 4268 0020                  		clr.w	obInertia(a0)
00015E10                            
00015E10                            SCDPeelout_ResetScr:
00015E10 588F                       		addq.l	#4,sp			; increase stack ptr ; was 4
00015E12 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00015E18 6700                       		beq.s	@finish
00015E1A 6400                       		bcc.s	@skip
00015E1C 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015E20                             
00015E20                            	@skip:
00015E20 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015E24                             
00015E24                            	@finish:
00015E24 6100 0000                  		bsr.w	Sonic_LevelBound
00015E28 6100 0000                  		bsr.w	Sonic_AnglePos
00015E2C 4E75                       		rts
00015E2E                            		
00015E2E                            		
00015E2E                            		include "_incObj\Sonic Spindash.asm"
00015E2E                            ; ---------------------------------------------------------------------------
00015E2E                            ; Subroutine to make Sonic perform a spindash
00015E2E                            ; ---------------------------------------------------------------------------
00015E2E                             
00015E2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015E2E                             
00015E2E                             
00015E2E                            Sonic_SpinDash:
00015E2E 4A28 0039                  		tst.b	f_spindash(a0)			; already Spin Dashing?
00015E32 6600                       		bne.s	loc2_1AC8E		; if set, branch
00015E34 0C28 0000 001C             		cmpi.b	#id_duck,obAnim(a0)		; is anim duck
00015E3A 6600                       		bne.s	locret2_1AC8C		; if not, return
00015E3C 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015E40 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
00015E44 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
00015E48 117C 0000 001C             		move.b	#id_spindash,obAnim(a0)		; set Spin Dash anim (9 in s2)
00015E4E 303C 00D5                  		move.w	#$D5,d0			; spin sound ($E0 in s2)
00015E52 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; play spin sound
00015E58 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015E5A 117C 0001 0039             		move.b	#1,f_spindash(a0)		; set Spin Dash flag
00015E60 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
00015E66                            		;cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
00015E66                            		;bcs.s	loc2_1AC84		; ??? branch if carry
00015E66 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
00015E6C                            						; the smoke/dust object
00015E6C                            loc2_1AC84:
00015E6C 6100 0000                  		bsr.w	Sonic_LevelBound
00015E70 6100 0000                  		bsr.w	Sonic_AnglePos
00015E74                            
00015E74                            locret2_1AC8C:
00015E74 4E75                       		rts	
00015E76                            ; ---------------------------------------------------------------------------
00015E76                            
00015E76                            loc2_1AC8E:	
00015E76 117C 001F 001C             		move.b	#$1F,$1C(a0)
00015E7C 1038 F602                  		move.b	(v_jpadhold2).w,d0	; read controller
00015E80 0800 0001                  		btst	#1,d0			; check down button
00015E84 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
00015E88 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
00015E8E 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
00015E94 117C 0000 001C             		move.b	#id_roll,obAnim(a0)		; set animation to roll
00015E9A 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
00015E9E 117C 0000 0039             		move.b	#0,f_spindash(a0)		; clear Spin Dash flag
00015EA4 7000                       		moveq	#0,d0
00015EA6 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
00015EAA D040                       		add.w	d0,d0			; double it
00015EAC 317B 0000 0020             		move.w	Dash_Speeds(pc,d0.w),obInertia(a0) ; get normal speed
00015EB2 3028 0020                  		move.w	obInertia(a0),d0		; get inertia
00015EB6 0440 0800                  		subi.w	#$800,d0		; subtract $800
00015EBA D040                       		add.w	d0,d0			; double it
00015EBC 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
00015EC0 4440                       		neg.w	d0			; negate it
00015EC2 0640 2000                  		addi.w	#$2000,d0		; add $2000
00015EC6 31C0 C904                  		move.w	d0,($FFFFC904).w	; move to $EED0
00015ECA 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing right?
00015ED0 6700                       		beq.s	loc2_1ACF4		; if not, branch
00015ED2 4468 0020                  		neg.w	obInertia(a0)			; negate inertia
00015ED6                            
00015ED6                            loc2_1ACF4:
00015ED6 08E8 0002 0022             		bset	#2,$22(a0)		; set unused (in s1) flag
00015EDC 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation.
00015EE2 303C 00BC                  		move.w	#$BC,d0			; spin release sound
00015EE6 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; play it!
00015EEC 1028 0026                  		move.b	obAngle(a0),d0
00015EF0 4EB9 0000 3CCA             		jsr	(CalcSine).l
00015EF6 C3E8 0020                  		muls.w	obInertia(a0),d1
00015EFA E081                       		asr.l	#8,d1
00015EFC 3141 0010                  		move.w	d1,obVelX(a0)
00015F00 C1E8 0020                  		muls.w	obInertia(a0),d0
00015F04 E080                       		asr.l	#8,d0
00015F06 3140 0012                  		move.w	d0,obVelY(a0)
00015F0A                            	
00015F0A 6000                       		bra.s	loc2_1AD78
00015F0C                            ; ===========================================================================
00015F0C                            Dash_Speeds:
00015F0C 0700                       		dc.w  $700		; 0
00015F0E 0780                       		dc.w  $780		; 1
00015F10 0800                       		dc.w  $800		; 2
00015F12 0880                       		dc.w  $880		; 3
00015F14 0900                       		dc.w  $900		; 4
00015F16 0980                       		dc.w  $980		; 5
00015F18 0A00                       		dc.w  $A00		; 6
00015F1A 0A80                       		dc.w  $A80		; 7
00015F1C 0B00                       		dc.w  $B00		; 8
00015F1E                            ; ===========================================================================
00015F1E                            
00015F1E                            loc2_1AD30:				; If still charging the dash...
00015F1E 4A68 003A                  		tst.w	$3A(a0)		; check charge count
00015F22 6700                       		beq.s	loc2_1AD48	; if zero, branch
00015F24 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
00015F28 EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
00015F2A 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
00015F2E 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
00015F30 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
00015F36                            
00015F36                            loc2_1AD48:
00015F36 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015F3A 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
00015F3E 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
00015F42 317C 1F00 001C             		move.w	#$1F00,obAnim(a0)	; reset spdsh animation
00015F48 303C 00D5                  		move.w	#$D5,d0			; was $E0 in sonic 2
00015F4C 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w		; Set the Spin Dash dust animation to $2.
00015F52 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; play charge sound
00015F58 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
00015F5E 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
00015F64 6500                       		bcs.s	loc2_1AD78		; if not, then branch
00015F66 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
00015F6C                            
00015F6C                            loc2_1AD78:
00015F6C 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015F6E 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w	; $EED8 only ever seems
00015F74 6700                       		beq.s	loc2_1AD8C		; to be used in Spin Dash
00015F76 6400                       		bcc.s	loc2_1AD88
00015F78 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015F7C                            
00015F7C                            loc2_1AD88:
00015F7C 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015F80                            
00015F80                            loc2_1AD8C:
00015F80 6100 0000                  		bsr.w	Sonic_LevelBound
00015F84 6100 0000                  		bsr.w	Sonic_AnglePos
00015F88                            		;move.w	#$60,(v_lookshift).w	; reset looking up/down
00015F88 4E75                       		rts
00015F8A                            ; End of subroutine Sonic_SpinDash
00015F8A                            ; End of subroutine Sonic_SpinDash
00015F8A                            		include	"_incObj\Sonic HomingAttack.asm"
00015F8A                            ; ===========================================================================
00015F8A                            ; ---------------------------------------------------------------------------
00015F8A                            ; Subroutine to perform Homing Attack
00015F8A                            ; ---------------------------------------------------------------------------
00015F8A                            
00015F8A                            ;HomingAttackType = 1 ; 0 is Sonic Winter Adventures, 1 is Sonic and the Mystic Gems
00015F8A                            
00015F8A                            Sonic_HomingAttack:     
00015F8A 4A38 F5C9                  		tst.b	(v_gshield)
00015F8E 6700                       		beq.s	@Return2
00015F90 0C38 0002 F5CD             		cmpi.b	#2,(v_homingattack).w	; already Homing?
00015F96 6700                       		beq.s	@Homing_Process		; if yes, branch
00015F98 0238 0070 F603             		andi.b	#btnABC,(v_jpadpress2).w	; is A, B or C pressed?
00015F9E 6600                       		bne.s	@Homing_Perform
00015FA0 4E75                       		rts
00015FA2                            	@Return2:
00015FA2 4E75                       		rts
00015FA4                            ; ---------------------------------------------------------------------------
00015FA4                            @Homing_Process:
00015FA4 5328 001E                  		subq.b	#1,obTimeFrame(a0)		; is timer over?
00015FA8 6600                       		bne.s	@SetSpeeds		; if not, branch
00015FAA 4238 F5CD                  		clr.b	(v_homingattack).w
00015FAE 4E75                       		rts
00015FB0                            
00015FB0                            	@SetSpeeds:
00015FB0 3268 003A                  		movea.w	$3A(a0),a1		; load object to follow
00015FB4                            
00015FB4                            			
00015FB4                            
00015FB4 3229 000C                  		move.w	obY(a1),d1
00015FB8 9268 000C                  		sub.w	obY(a0),d1		; d1 -> Ydist
00015FBC 3429 0008                  		move.w	obX(a1),d2
00015FC0 9468 0008                  		sub.w	obX(a0),d2		; d2 -> Xdist
00015FC4 4EB9 0000 3F5C                             jsr     (CalcAngle).l		; Calcuate Angle
00015FCA 4EB9 0000 3CCA                             jsr     (CalcSine).l		; Get Sine
00015FD0 363C 0000                                  move.w	#$0,d3		; d3 -> Homing Attack Speed
00015FD4 363C 0A00                                  move.w	#$A00,d3		; d3 -> Homing Attack Speed
00015FD8 C1C3                       		muls.w	d3,d0
00015FDA C3C3                       		muls.w	d3,d1
00015FDC E080                       		asr.l	#8,d0
00015FDE E081                       		asr.l	#8,d1
00015FE0 3141 0012                                  move.w  d1,obVelY(a0)		; set speed
00015FE4 3140 0010                                  move.w  d0,obVelX(a0)		; set speed
00015FE8 3140 0020                  		move.w	d0,obInertia(a0)
00015FEC 4E75                       		rts
00015FEE                            
00015FEE                            ; ---------------------------------------------------------------------------
00015FEE                            @Homing_Perform:
00015FEE 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015FF4 76FF                       		moveq	#-1,d3			; d3 will contain the direct distance for current d4,d5 (Piphagor yay)
00015FF6 78FF                       		moveq	#-1,d4			; d4 will contain the shortest X-dist
00015FF8 7AFF                       		moveq	#-1,d5			; d5 will contain the shortest Y-dist
00015FFA 3C3C 005F                  		move.w	#$5F,d6
00015FFE 43F8 D800                  		lea	(v_lvlobjspace).w,a1	; Load in-level objects RAM
00016002 3C3C 005F                  		move.w	#$5F,d6			; do $60 objects
00016006                            		
00016006                            	@ObjectsLoop:                  
00016006 4A29 0001                  		tst.b	1(a1)			; is object on-screen?
0001600A 6A00                       		bpl.s	@NextObject		; if yes, branch
0001600C 4A29 0020                  		tst.b	obColType(a1)			; load touch response
00016010 6600                       		bne.s	@Homing_TestObject	; if touch response is not zero, branch
00016012                            
00016012                            	@NextObject:
00016012 43E9 0040                  		lea	$40(a1),a1		; load next object slot
00016016 51CE FFEE                  		dbf	d6,@ObjectsLoop		; repeat for all objects in RAM
0001601A                            		
0001601A 0C83 0000 6400             		cmpi.l	#$A0*$A0,d3		; if Distance ^ 2 > $A0 ^ 2, quit
00016020 6200 0000                  		bhi.w	Sonic_JumpDash
00016024                            
00016024                            
00016024                            
00016024 117C 003C 001E             		move.b	#60,obTimeFrame(a0)		; follow object for 60 frames
0001602A 11FC 0002 F5CD             		move.b  #2,(v_homingattack).w	; set flag as #2 (Homing Attack)
00016030 303C 00BC                  		move.w	#$BC,d0			; play JD sound
00016034 4EF9 0000 12A0             		jmp	(PlaySound_Special).l   ;
0001603A                            
0001603A                            
0001603A                            ; ---------------------------------------------------------------------------
0001603A                            @Homing_TestObject:
0001603A 45FA 0000                  		lea	@Homing_ObjectList(pc),a2
0001603E 1011                       		move.b	(a1),d0
00016040                            		
00016040                            	@CheckID:
00016040 B01A                       		cmp.b	(a2)+,d0		; compare current obj ID to one in list
00016042 6700                       		beq.s	@CalcXDist		; if object is in list, branch
00016044 62FA                       		bhi.s	@CheckID		; if current obj ID is higer, go on looking
00016046 60CA                       		bra.s	@NextObject		; the object is not in list, quit
00016048                            		
00016048                            	@CalcXDist:
00016048 3229 0008                  		move.w	obX(a1),d1		; d1 -> ObjX
0001604C 9268 0008                  		sub.w	obX(a0),d1		; d1 -> ObjX - SonX
00016050 6A00                       		bpl.s	@ObjAhead
00016052                            
00016052                            	; Object is behind Sonic
00016052 0828 0000 0022             		btst	#0,obStatus(a0)		; is Sonic faced left?
00016058 67B8                       		beq.s	@NextObject		; if not, we can't home at object
0001605A 6000                       		bra.s	@CalcYDist
0001605C                            
0001605C                            	@ObjAhead:
0001605C 0828 0000 0022             		btst	#0,obStatus(a0)		; is Sonic faced right?
00016062 66AE                       		bne.s	@NextObject		; if not, we can't home at object
00016064                            
00016064                            	@CalcYDist:
00016064 3429 000C                  		move.w	obY(a1),d2		; d2 -> ObjY
00016068 9468 000C                  		sub.w	obY(a0),d2		; d2 -> ObjY - SonY
0001606C                            		
0001606C                            	; Calculate absolute distance ( d1 * d1 + d2 * d2 )
0001606C 3002                       		move.w	d2,d0			; d0 -> d2
0001606E 4840                       		swap	d0
00016070 3001                       		move.w	d1,d0			; d0 -> d2 d1
00016072 C3C1                       		muls.w	d1,d1			; d1 -> d1 * d1
00016074 C5C2                       		muls.w	d2,d2			; d2 -> d2 * d2
00016076 D481                       		add.l	d1,d2			; d2 -> d1 * d1 + d2 * d2
00016078 B483                       		cmp.l	d3,d2			; is new distance shorter after all?
0001607A 6400 FF96                  		bcc.w	@NextObject		; if not, branch
0001607E                            
0001607E 2602                       		move.l	d2,d3			; set new distance
00016080 3800                       		move.w	d0,d4			; set new Xdist
00016082 4840                       		swap	d0
00016084 3A00                       		move.w	d0,d5			; set new Ydist
00016086 3149 003A                  		move.w	a1,$3A(a0)		; save obj ID
0001608A 6000 FF86                  		bra.w	@NextObject
0001608E                            
0001608E                            
0001608E                            ; ---------------------------------------------------------------------------
0001608E                            ; Object ids that are available for homming
0001608E                            ; NOTE: They should go in increasing order (1,2,3..)
0001608E                            ; ---------------------------------------------------------------------------
0001608E                            
0001608E                            @Homing_ObjectList:
0001608E 1E1F 2226 2B2C 2D40 4243   		dc.b	$1E, $1F, $22, $26, $2B, $2C, $2D, $40, $42, $43
00016098 5055 6078                  		dc.b	$50, $55, $60, $78
0001609C FF                         		dc.b	-1	; mark end of list
0001609E 00                         		even
0001609E                            
0001609E                            
0001609E                            ; ===========================================================================
0001609E                            ; ---------------------------------------------------------------------------
0001609E                            ; Subroutine to perform Jump Dash
0001609E                            ; ---------------------------------------------------------------------------
0001609E                            
0001609E                            Sonic_JumpDash:
0001609E 4A38 F5CD                  		tst.b	(v_homingattack).w		; already Jump Dashing?
000160A2 6600                       		bne.s	@Return			; if yes, branch
000160A4 11FC 0001 F5CD             		move.b	#1,(v_homingattack).w
000160AA 303C 0800                  		move.w	#$800,d0		; set Jump Dash speed
000160AE 0828 0006 0022             		btst	#6,obStatus(a0)		; is Sonic underwater
000160B4 6700                       		beq.s	@ChkShoes
000160B6 303C 0600                  		move.w	#$600,d0		; set JD speed for underwater
000160BA                            	
000160BA                            	@ChkShoes:
000160BA 4A38 FE2E                  		tst.b	(v_shoes).w		; does Sonic have speed	shoes?
000160BE 6700                       		beq.s	@SetSpeeds		; if not, branch
000160C0 0640 0200                  		addi.w	#$200,d0
000160C4                            
000160C4                            	;@ChkOrientation:
000160C4                            		;btst	#0,obStatus(a0)
000160C4                            		;beq.s	@SetSpeeds
000160C4                            		;neg.w	d0
000160C4                            
000160C4                            	@SetSpeeds:
000160C4 3140 0012                  		move.w	d0,obVelY(a0)
000160C8 3140 0020                  		move.w	d0,obInertia(a0)
000160CC                            		;move.w	#0,obVelY(a0)
000160CC 303C 00BC                  		move.w	#$BC,d0			; play JD sound
000160D0 4EF9 0000 12A0             		jmp	(PlaySound_Special).l   ;
000160D6                            
000160D6                            	@Return:
000160D6 4E75                       		rts
000160D8                            
000160D8                            ; -------------------------------------------------------------------------
000160D8                            ; Subroutine to stop Sonic, bounce him up and to give him the ability to
000160D8                            ; Jumpdash again when he has performed a Jumpdash
000160D8                            ; -------------------------------------------------------------------------
000160D8                            
000160D8                            BounceJD:
000160D8 0C38 0002 F5CD             		cmp.b	#2,(v_homingattack).w; was HA flag set?
000160DE 6600                       		bne.s	BounceJD_End	; if not, branch
000160E0 4238 F5CD                  		clr.b	(v_homingattack).w	; if yes, clear HA flag (allow Sonic to HA again)
000160E4 4268 0010                  		clr.w	obVelX(a0)		; clear X-velocity (stop sonic)
000160E8 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
000160EE 303C FF10                  		move.w	#-$F0,d0
000160F2 0828 0000 0022             		btst	#0,obStatus(a0)		; is Sonic faced left?
000160F8 6600                       		bne.s	@MoveAhead		; if not, we can't move right
000160FA 4440                       		neg.w	d0
000160FC                            
000160FC                            	@MoveAhead:
000160FC 3140 0010                  		move.w	d0,obVelX(a0)
00016100                            	@Cont:
00016100 317C F810 0012             		move.w	#-$7F0,obVelY(a0)	; move sonic upwards
00016106 0828 0006 0022             		btst	#6,obStatus(a0)	; is sonic underwater?
0001610C 6700                       		beq.s	BounceJD_Shoes	; if not, branch
0001610E 317C FAE0 0012             		move.w	#-$520,obVelY(a0)
00016114                            		
00016114                            BounceJD_Shoes:
00016114 4A38 FE2E                  		tst.b	(v_shoes).w	; does sonic has speed shoes?
00016118 6700                       		beq.s	BounceJD_End	; if not, branch
0001611A 317C F7E0 0012             		move.w	#-$820,obVelY(a0)	; use -$620 for Y-velocity (move sonic upwards)
00016120                            		
00016120                            BounceJD_End:
00016120 4E75                       		rts			; return
00016122                            ; End of function BounceJD
00016122                            ; End of function BounceJD
00016122                            
00016122                            Sonic_AirRoll:
00016122 0C28 0000 001C             	cmpi.b  #id_spring,$1C(a0)      ; is sonic in the spring animation?
00016128 6600                               bne.s   AirRoll_Return   ; if not, return
0001612A                            
0001612A                            AirRoll_CheckBtn:
0001612A 1038 F603                          move.b	($FFFFF603).w,d0 ; Move $FFFFF603 to d0
0001612E 0200 0070                          andi.b	#btnABC,d0 ; Has A/B/C been pressed?
00016132 6700                               beq.s	AirRoll_Return
00016134 117C 0000 001C             	move.b	#id_roll,$1C(a0) ; Set Sonic's animation to rolling.
0001613A                                   ; move.w	#$BC,d0
0001613A                                   ; jsr	(PlaySound_Special).l ;    play Sonic rolling sound
0001613A                            
0001613A                            AirRoll_Return:
0001613A 4E75                               rts
0001613C                            ; ===========================================================================
0001613C                            ; ---------------------------------------------------------------------------
0001613C                            ; Unused subroutine to squash Sonic
0001613C                            ; ---------------------------------------------------------------------------
0001613C 1028 0026                  		move.b	obAngle(a0),d0
00016140 0600 0020                  		addi.b	#$20,d0
00016144 0200 00C0                  		andi.b	#$C0,d0
00016148 6600                       		bne.s	locret_13302
0001614A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001614E 4A41                       		tst.w	d1
00016150 6A00                       		bpl.s	locret_13302
00016152 317C 0000 0020             		move.w	#0,obInertia(a0) ; stop Sonic moving
00016158 317C 0000 0010             		move.w	#0,obVelX(a0)
0001615E 317C 0000 0012             		move.w	#0,obVelY(a0)
00016164 117C 0000 001C             		move.b	#id_Warp3,obAnim(a0) ; use "warping" animation
0001616A                            
0001616A                            locret_13302:
0001616A 4E75                       		rts		
0001616C                            		include	"_incObj\Sonic LevelBound.asm"
0001616C                            ; ---------------------------------------------------------------------------
0001616C                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
0001616C                            ; ---------------------------------------------------------------------------
0001616C                            
0001616C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001616C                            
0001616C                            
0001616C                            Sonic_LevelBound:
0001616C 2228 0008                  		move.l	obX(a0),d1
00016170 3028 0010                  		move.w	obVelX(a0),d0
00016174 48C0                       		ext.l	d0
00016176 E180                       		asl.l	#8,d0
00016178 D280                       		add.l	d0,d1
0001617A 4841                       		swap	d1
0001617C 3038 F728                  		move.w	(v_limitleft2).w,d0
00016180 0640 0010                  		addi.w	#$10,d0
00016184 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00016186 6200                       		bhi.s	@sides		; if yes, branch
00016188 3038 F72A                  		move.w	(v_limitright2).w,d0
0001618C 0640 0128                  		addi.w	#$128,d0
00016190 4A38 F7AA                  		tst.b	(f_lockscreen).w
00016194 6600                       		bne.s	@screenlocked
00016196 0640 0040                  		addi.w	#$40,d0
0001619A                            
0001619A                            	@screenlocked:
0001619A B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
0001619C 6300                       		bls.s	@sides		; if yes, branch
0001619E                            
0001619E                            	@chkbottom:
0001619E 3038 F72E                  		move.w	(v_limitbtm2).w,d0
000161A2 0640 00E0                  		addi.w	#$E0,d0
000161A6 B068 000C                  		cmp.w	obY(a0),d0	; has Sonic touched the	bottom boundary?
000161AA 6D00                       		blt.s	@bottom		; if yes, branch
000161AC 4E75                       		rts	
000161AE                            ; ===========================================================================
000161AE                            
000161AE                            @bottom:
000161AE 3038 F726                  		move.w (v_limitbtm1).w,d0 
000161B2 3238 F72E                  		move.w (v_limitbtm2).w,d1 
000161B6 B240                       		cmp.w d0,d1 ; screen still scrolling down? 
000161B8 6D00                       		blt.s @dontkill; if so, don't kill Sonic 
000161BA 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is level SBZ2 ?
000161C0 6600 0000                  		bne.w	Kill_transport	; if not, kill Sonic
000161C4 0C78 1B00 D008             		cmpi.w	#$1B00,(v_player+obX).w
000161CA 6500 0000                  		bcs.w	Kill_transport
000161CE 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
000161D2 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
000161D8 31FC 0103 FE10             		move.w	#(id_LZ<<8)+3,(v_zone).w ; set level to SBZ3 (LZ4)
000161DE 4E75                       		rts	
000161E0                            @dontkill: 
000161E0 4E75                       		rts
000161E2                            ; ===========================================================================
000161E2                            
000161E2                            @sides:
000161E2 3140 0008                  		move.w	d0,obX(a0)
000161E6 317C 0000 000A             		move.w	#0,obX+2(a0)
000161EC 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Sonic moving
000161F2 317C 0000 0020             		move.w	#0,obInertia(a0)
000161F8 60A4                       		bra.s	@chkbottom
000161FA                            
000161FA                            Kill_transport: 
000161FA 4EF9 0000 0000                     	jmp        (KillSonic).l
00016200                            
00016200                            ; End of function Sonic_LevelBound
00016200                            ; End of function Sonic_LevelBound
00016200                            		include	"_incObj\Sonic Roll.asm"
00016200                            ; ---------------------------------------------------------------------------
00016200                            ; Subroutine allowing Sonic to roll when he's moving
00016200                            ; ---------------------------------------------------------------------------
00016200                            
00016200                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016200                            
00016200                            
00016200                            Sonic_Roll:
00016200 4A38 F7CA                  		tst.b	(f_jumponly).w
00016204 6600                       		bne.s	@noroll
00016206 3028 0020                  		move.w	obInertia(a0),d0
0001620A 6A00                       		bpl.s	@ispositive
0001620C 4440                       		neg.w	d0
0001620E                            
0001620E                            	@ispositive:
0001620E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00016212 6500                       		bcs.s	@noroll		; if not, branch
00016214 1038 F602                  		move.b	(v_jpadhold2).w,d0
00016218 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	being pressed?
0001621C 6600                       		bne.s	@noroll		; if yes, branch
0001621E 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
00016224 6600                       		bne.s	Sonic_ChkRoll	; if yes, branch
00016226                            
00016226                            	@noroll:
00016226 4E75                       		rts	
00016228                            ; ===========================================================================
00016228                            
00016228                            Sonic_ChkRoll:
00016228 0828 0002 0022             		btst	#2,obStatus(a0)	; is Sonic already rolling?
0001622E 6700                       		beq.s	@roll		; if not, branch
00016230 4E75                       		rts	
00016232                            ; ===========================================================================
00016232                            
00016232                            @roll:
00016232 08E8 0002 0022             		bset	#2,obStatus(a0)
00016238 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001623E 117C 0007 0017             		move.b	#7,obWidth(a0)
00016244 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
0001624A 5A68 000C                  		addq.w	#5,obY(a0)
00016258 4A68 0020                  		tst.w	obInertia(a0)
0001625C 6600                       		bne.s	@ismoving
0001625E 317C 0200 0020             		move.w	#$200,obInertia(a0) ; set inertia if 0
00016264                            
00016264                            	@ismoving:
00016264 4E75                       		rts	
00016266                            ; End of function Sonic_Roll
00016266                            ; End of function Sonic_Roll
00016266                            		include	"_incObj\Sonic Jump.asm"
00016266                            ; ---------------------------------------------------------------------------
00016266                            ; Subroutine allowing Sonic to jump
00016266                            ; ---------------------------------------------------------------------------
00016266                            
00016266                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016266                            
00016266                            
00016266                            Sonic_Jump:
00016266 1038 F603                  		move.b	(v_jpadpress2).w,d0
0001626A 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
0001626E 6700 0000                  		beq.w	locret_1348E	; if not, branch
00016272 7000                       		moveq	#0,d0
00016274 1028 0026                  		move.b	obAngle(a0),d0
00016278 0600 0080                  		addi.b	#$80,d0
0001627C 6100 0000                  		bsr.w	sub_14D48
00016280 0C41 0006                  		cmpi.w	#6,d1
00016284 6D00 0000                  		blt.w	locret_1348E
00016288 343C 0680                  		move.w	#$680,d2
0001628C 0828 0006 0022             		btst	#6,obStatus(a0)
00016292 6700                       		beq.s	loc_1341C
00016294 343C 0380                  		move.w	#$380,d2
00016298                            
00016298                            loc_1341C:
00016298 7000                       		moveq	#0,d0
0001629A 1028 0026                  		move.b	obAngle(a0),d0
0001629E 0400 0040                  		subi.b	#$40,d0
000162A2 4EB9 0000 3CCA             		jsr	(CalcSine).l
000162A8 C3C2                       		muls.w	d2,d1
000162AA E081                       		asr.l	#8,d1
000162AC D368 0010                  		add.w	d1,obVelX(a0)	; make Sonic jump
000162B0 C1C2                       		muls.w	d2,d0
000162B2 E080                       		asr.l	#8,d0
000162B4 D168 0012                  		add.w	d0,obVelY(a0)	; make Sonic jump
000162B8 08E8 0001 0022             		bset	#1,obStatus(a0)
000162BE 08A8 0005 0022             		bclr	#5,obStatus(a0)
000162C4 588F                       		addq.l	#4,sp
000162C6 117C 0001 003C             		move.b	#1,$3C(a0)
000162CC 4228 0038                  		clr.b	$38(a0)
000162DA 117C 0013 0016             		move.b	#$13,obHeight(a0)
000162E0 117C 0009 0017             		move.b	#9,obWidth(a0)
000162E6 117C 000E 0016             		move.b	#$E,obHeight(a0)
000162EC 117C 0007 0017             		move.b	#7,obWidth(a0)
000162F2                            Result_Check:
000162F2 4A38 F5C2                  		tst.b   ($FFFFF5C2).w ; Has the victory animation flag been set?
000162F6 6700                       		beq.s   NormalJump ; If not, branch
000162F8 117C 0000 001C             		move.b  #id_Leap2,$1C(a0) ; Play the victory animation
000162FE 6000                       		bra.s   cont ; Continue
00016300                            NormalJump:
00016300 117C 0002 001C             		move.b  #2,$1C(a0)    ; use "jumping"    animation
00016306                            cont:
00016306 08E8 0002 0022             		bset	#2,obStatus(a0)
0001630C 5A68 000C                  		addq.w	#5,obY(a0)
00016310                            
00016310                            locret_1348E:
00016310 4E75                       		rts	
00016312                            ; ===========================================================================
00016312                            
00016312                            ; End of function Sonic_Jump
00016312                            ; End of function Sonic_Jump
00016312                            		include	"_incObj\Sonic JumpHeight.asm"
00016312                            ; ---------------------------------------------------------------------------
00016312                            ; Subroutine controlling Sonic's jump height/duration
00016312                            ; ---------------------------------------------------------------------------
00016312                            
00016312                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016312                            
00016312                            
00016312                            Sonic_JumpHeight:
00016312 4A28 003C                  		tst.b	$3C(a0)
00016316 6700                       		beq.s	loc_134C4
00016318 323C FC00                  		move.w	#-$400,d1
0001631C 0828 0006 0022             		btst	#6,obStatus(a0)
00016322 6700                       		beq.s	loc_134AE
00016324 323C FE00                  		move.w	#-$200,d1
00016328                            
00016328                            loc_134AE:
00016328 B268 0012                  		cmp.w	obVelY(a0),d1
0001632C 6F00                       		ble.s	locret_134C2
0001632E 1038 F602                  		move.b	(v_jpadhold2).w,d0
00016332 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00016336 6600                       		bne.s	locret_134C2	; if yes, branch
00016338 3141 0012                  		move.w	d1,obVelY(a0)
0001633C                            
0001633C                            locret_134C2:
0001633C 4A38 F7C8                          tst.b   (f_lockmulti).w      ; Are Controls locked?
00016340 66FA                               bne.s   locret_134C2            ; If so, branch, and do not bother with Super code
00016342 1038 F603                          move.b  (v_jpadpress2).w,d0
00016346 0200 0010                          andi.b  #btnB,d0 ; is a jump button pressed?
0001634A 6600 0000                  		bne.w	Sonic_CheckGoSuper
0001634E 4E75                       		rts	
00016350                            ; ===========================================================================
00016350                            
00016350                            loc_134C4:
00016350 0C68 F040 0012             		cmpi.w	#-$FC0,obVelY(a0)
00016356 6C00                       		bge.s	locret_134D2
00016358 317C F040 0012             		move.w	#-$FC0,obVelY(a0)
0001635E                            
0001635E                            locret_134D2:		
0001635E 4E75                       		rts	
00016360                            ; End of function Sonic_JumpHeight
00016360                            
00016360                            
00016360                            ; ---------------------------------------------------------------------------
00016360                            ; Subroutine called at the peak of a jump that transforms Sonic into Super Sonic
00016360                            ; if he has enough rings and emeralds
00016360                            ; ---------------------------------------------------------------------------
00016360                            
00016360                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00016360                            
00016360                            Sonic_CheckGoSuper:
00016360 4A38 FE19                  		tst.b	(Super_Sonic_flag).w	; is Sonic already Super?
00016364 6600 0000                  		bne.w	Sonic_RevertToNormal			; if yes, branch	
00016368 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; does Sonic have at least 50 rings?
0001636E 6500                       		bcs.s	return_1ABA4		; if not, branch	
00016370 11FC 0001 F5D8             		move.b	#1,(Super_Sonic_palette).w
00016376 11FC 000F F5DE             		move.b	#$F,(Palette_timer).w
0001637C 11FC 0001 FE19             		move.b	#1,(Super_Sonic_flag).w
00016382 4238 FE2E                  		clr.b	(v_shoes).w ; clear speed shoes
00016386 11FC 0001 F7C8             		move.b    #$1,(f_lockmulti).w
0001638C 117C 0000 001C             		move.b    #id_Transform,obAnim(a0)   
00016392 4EB9 0000 0000             		jsr		Super_and_Invincibility_Stars				
00016398 11FC 008D D200             		move.b	#id_SuperStars,($FFFFD200).w				
0001639E 31FC 0A00 F760             		move.w	#$A00,(v_sonspeedmax).w
000163A4 31FC 0030 F762             		move.w	#$30,(v_sonspeedacc).w
000163AA 31FC 0100 F764             		move.w	#$100,(v_sonspeeddec).w
000163B0 317C 0000 0032             		move.w	#0,invtime(a0)
000163B6 11FC 0001 FE2D             		move.b #1,(v_invinc).w ; make Sonic invincible	
000163BC 303C 00D6                  		move.w	#$D6,d0         ; 
000163C0 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; Play transformation sound effect.
000163C6 303C 0087                  		move.w	#$87,d0         
000163CA 4EF9 0000 129A             		jmp	(PlaySound).l	; load the invincibility song and return also playmusic doesn't exist
000163D0                            
000163D0                            ; ---------------------------------------------------------------------------
000163D0                            return_1ABA4:
000163D0 4E75                       		rts
000163D2                            		
000163D2                            ; End of subroutine Sonic_CheckGoSuper		
000163D2                            ; ---------------------------------------------------------------------------
000163D2                            ; Subroutine doing the extra logic for Super Sonic
000163D2                            ; ---------------------------------------------------------------------------
000163D2                            
000163D2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000163D2                            
000163D2                            ; loc_1ABA6:
000163D2                            Sonic_Super:
000163D2 4A38 FE19                  		tst.b	(Super_Sonic_flag).w	; Ignore all this code if not Super Sonic
000163D6 6700 0000                  		beq.w	return_1AC3C
000163DA 4A38 FE1E                  		tst.b	(f_timecount).w
000163DE 6700                       		beq.s	Sonic_RevertToNormal ; ?
000163E0 5378 F670                  		subq.w	#1,(v_pal_buffer+$20).w
000163E4 6A00 0000                  		bpl.w	return_1AC3C
000163E8 31FC 003C F670             		move.w	#60,(v_pal_buffer+$20).w	; Reset frame counter to 60
000163EE 4A78 FE20                  		tst.w	(v_rings).w
000163F2 6700                       		beq.s	Sonic_RevertToNormal
000163F4 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w
000163FA 0C78 0001 FE20             		cmpi.w	#1,(v_rings).w
00016400 6700                       		beq.s	@update
00016402 0C78 000A FE20             		cmpi.w	#10,(v_rings).w
00016408 6700                       		beq.s	@update
0001640A 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w
00016410 6600                       		bne.s	@update2
00016412                            @update
00016412 0038 0080 FE1D             		ori.b	#$80,(f_ringcount).w
00016418                            @update2
00016418 5378 FE20                  		subq.w	#1,(v_rings).w
0001641C 6600                       		bne.s	return_1AC3C
0001641E                            ; loc_1ABF2:
0001641E                            Sonic_RevertToNormal:
0001641E 4238 F7C8                  		clr.b   (f_lockmulti).w
00016422 11FC 0002 F5D8             		move.b	#2,(Super_Sonic_palette).w	; Remove rotating palette
00016428 31FC 0028 F5CC             		move.w	#$28,($FFFFF5CC).w	; Unknown
0001642E 11FC 0000 FE19             		move.b	#0,(Super_Sonic_flag).w
00016434 11FC 0000 F7C8             		move.b    #0,(f_lockmulti).w	
0001643A 317C 0001 0032             		move.w	#1,invtime(a0)				
00016440 117C 0001 001D             		move.b	#1,next_anim(a0)	; Change animation back to normal ?
00016446 4238 D200                  		clr.b	($FFFFD200).w	; clear Obj7E (super sonic stars object) at $FFFFD200		
0001644A 4238 FE2D                  		clr.b 	(v_invinc).w
0001644E 4238 FE2E                  		clr.b 	(v_shoes).w 
00016452 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
00016456 4EB9 0000 129A             		jsr		(PlaySound).l    ; play normal music		
0001645C 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w
00016462 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w
00016468 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w
0001646E 0828 0006 0022             		btst	#6,obStatus(a0)	; Check if underwater, return if not
00016474 6700                       		beq.s	return_1AC3C
00016476 31FC 0300 F760             		move.w	#$300,(v_sonspeedmax).w
0001647C 31FC 0006 F762             		move.w	#6,(v_sonspeedacc).w
00016482 31FC 0040 F764             		move.w	#$40,(v_sonspeeddec).w
00016488                            		
00016488                            return_1AC3C:
00016488 4E75                       		rts
0001648A                            ; End of subroutine Sonic_Super	
0001648A                            
0001648A                            
0001648A                            ; ---------------------------------------------------------------------------
0001648A                            ; Subroutine to	delete the Super Stars and the Invincibility Stars
0001648A                            ; ---------------------------------------------------------------------------
0001648A                            
0001648A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001648A                            
0001648A                            
0001648A                            Super_and_Invincibility_Stars:
0001648A 4278 D032                  		clr.w	($FFFFD032).w		; clear time limit of the invincibility
0001648E 2F08                       		move.l	a0,-(sp)
00016490 41F8 D200                  		lea		($FFFFD200).w,a0	; stars object ($3801 and $8F)
00016494 4EBA 9374                  		jsr		DeleteObject		; delete stars
00016498 41F8 D240                  		lea		($FFFFD240).w,a0	; stars object ($3802)
0001649C 4EBA 936C                  		jsr		DeleteObject		; delete stars
000164A0 41F8 D280                  		lea		($FFFFD280).w,a0	; stars object ($3803)
000164A4 4EBA 9364                  		jsr		DeleteObject		; delete stars
000164A8 41F8 D2C0                  		lea		($FFFFD2C0).w,a0	; stars object ($3804)
000164AC 4EBA 935C                  		jsr		DeleteObject		; delete stars
000164B0 205F                       		move.l	(sp)+,a0
000164B2 4E75                       		rts
000164B4                            ; End of function Super_and_Invincibility_Stars
000164B4                            ; End of function Super_and_Invincibility_Stars
000164B4                            		include	"_incObj\Sonic SlopeResist.asm"
000164B4                            ; ---------------------------------------------------------------------------
000164B4                            ; Subroutine to	slow Sonic walking up a	slope
000164B4                            ; ---------------------------------------------------------------------------
000164B4                            
000164B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000164B4                            
000164B4                            
000164B4                            Sonic_SlopeResist:
000164B4 1028 0026                  		move.b	obAngle(a0),d0
000164B8 0600 0060                  		addi.b	#$60,d0
000164BC 0C00 00C0                  		cmpi.b	#$C0,d0
000164C0 6400                       		bcc.s	locret_13508
000164C2 1028 0026                  		move.b	obAngle(a0),d0
000164C6 4EB9 0000 3CCA             		jsr	(CalcSine).l
000164CC C1FC 0020                  		muls.w	#$20,d0
000164D0 E080                       		asr.l	#8,d0
000164D2 4A68 0020                  		tst.w	obInertia(a0)
000164D6 6700                       		beq.s	locret_13508
000164D8 6B00                       		bmi.s	loc_13504
000164DA 4A40                       		tst.w	d0
000164DC 6700                       		beq.s	locret_13502
000164DE D168 0020                  		add.w	d0,obInertia(a0) ; change Sonic's inertia
000164E2                            
000164E2                            locret_13502:
000164E2 4E75                       		rts	
000164E4                            ; ===========================================================================
000164E4                            
000164E4                            loc_13504:
000164E4 D168 0020                  		add.w	d0,obInertia(a0)
000164E8                            
000164E8                            locret_13508:
000164E8 4E75                       		rts	
000164EA                            ; End of function Sonic_SlopeResist
000164EA                            ; End of function Sonic_SlopeResist
000164EA                            		include	"_incObj\Sonic RollRepel.asm"
000164EA                            ; ---------------------------------------------------------------------------
000164EA                            ; Subroutine to	push Sonic down	a slope	while he's rolling
000164EA                            ; ---------------------------------------------------------------------------
000164EA                            
000164EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000164EA                            
000164EA                            
000164EA                            Sonic_RollRepel:
000164EA 1028 0026                  		move.b	obAngle(a0),d0
000164EE 0600 0060                  		addi.b	#$60,d0
000164F2 0C00 00C0                  		cmpi.b	#-$40,d0
000164F6 6400                       		bcc.s	locret_13544
000164F8 1028 0026                  		move.b	obAngle(a0),d0
000164FC 4EB9 0000 3CCA             		jsr	(CalcSine).l
00016502 C1FC 0050                  		muls.w	#$50,d0
00016506 E080                       		asr.l	#8,d0
00016508 4A68 0020                  		tst.w	obInertia(a0)
0001650C 6B00                       		bmi.s	loc_1353A
0001650E 4A40                       		tst.w	d0
00016510 6A00                       		bpl.s	loc_13534
00016512 E480                       		asr.l	#2,d0
00016514                            
00016514                            loc_13534:
00016514 D168 0020                  		add.w	d0,obInertia(a0)
00016518 4E75                       		rts	
0001651A                            ; ===========================================================================
0001651A                            
0001651A                            loc_1353A:
0001651A 4A40                       		tst.w	d0
0001651C 6B00                       		bmi.s	loc_13540
0001651E E480                       		asr.l	#2,d0
00016520                            
00016520                            loc_13540:
00016520 D168 0020                  		add.w	d0,obInertia(a0)
00016524                            
00016524                            locret_13544:
00016524 4E75                       		rts	
00016526                            ; End of function Sonic_RollRepel
00016526                            ; End of function Sonic_RollRepel
00016526                            		include	"_incObj\Sonic SlopeRepel.asm"
00016526                            ; ---------------------------------------------------------------------------
00016526                            ; Subroutine to	push Sonic down	a slope
00016526                            ; ---------------------------------------------------------------------------
00016526                            
00016526                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016526                            
00016526                            
00016526                            Sonic_SlopeRepel:
00016526 4E71                       		nop	
00016528 4A28 0038                  		tst.b	$38(a0)
0001652C 6600                       		bne.s	locret_13580
0001652E 4A68 003E                  		tst.w	$3E(a0)
00016532 6600                       		bne.s	loc_13582
00016534 1028 0026                  		move.b	obAngle(a0),d0
00016538 0600 0020                  		addi.b	#$20,d0
0001653C 0200 00C0                  		andi.b	#$C0,d0
00016540 6700                       		beq.s	locret_13580
00016542 3028 0020                  		move.w	obInertia(a0),d0
00016546 6A00                       		bpl.s	loc_1356A
00016548 4440                       		neg.w	d0
0001654A                            
0001654A                            loc_1356A:
0001654A 0C40 0280                  		cmpi.w	#$280,d0
0001654E 6400                       		bcc.s	locret_13580
00016550 4268 0020                  		clr.w	obInertia(a0)
00016554 08E8 0001 0022             		bset	#1,obStatus(a0)
0001655A 317C 001E 003E             		move.w	#$1E,$3E(a0)
00016560                            
00016560                            locret_13580:
00016560 4E75                       		rts	
00016562                            ; ===========================================================================
00016562                            
00016562                            loc_13582:
00016562 5368 003E                  		subq.w	#1,$3E(a0)
00016566 4E75                       		rts	
00016568                            ; End of function Sonic_SlopeRepel
00016568                            ; End of function Sonic_SlopeRepel
00016568                            		include	"_incObj\Sonic JumpAngle.asm"
00016568                            ; ---------------------------------------------------------------------------
00016568                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00016568                            ; ---------------------------------------------------------------------------
00016568                            
00016568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016568                            
00016568                            
00016568                            Sonic_JumpAngle:
00016568 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
0001656C 6700                       		beq.s	locret_135A2	; if already 0,	branch
0001656E 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00016570                            
00016570 5400                       		addq.b	#2,d0		; increase angle
00016572 6400                       		bcc.s	loc_13596
00016574 7000                       		moveq	#0,d0
00016576                            
00016576                            loc_13596:
00016576 6000                       		bra.s	loc_1359E
00016578                            ; ===========================================================================
00016578                            
00016578                            loc_13598:
00016578 5500                       		subq.b	#2,d0		; decrease angle
0001657A 6400                       		bcc.s	loc_1359E
0001657C 7000                       		moveq	#0,d0
0001657E                            
0001657E                            loc_1359E:
0001657E 1140 0026                  		move.b	d0,obAngle(a0)
00016582                            
00016582                            locret_135A2:
00016582 4E75                       		rts	
00016584                            ; End of function Sonic_JumpAngle
00016584                            ; End of function Sonic_JumpAngle
00016584                            		include	"_incObj\Sonic Floor.asm"
00016584                            ; ---------------------------------------------------------------------------
00016584                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00016584                            ; ---------------------------------------------------------------------------
00016584                            
00016584                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016584                            
00016584                            
00016584                            Sonic_Floor:
00016584 3228 0010                  		move.w	obVelX(a0),d1
00016588 3428 0012                  		move.w	obVelY(a0),d2
0001658C 4EB9 0000 3F5C             		jsr	(CalcAngle).l
00016592 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00016596 0400 0020                  		subi.b	#$20,d0
0001659A 11C0 FFED                  		move.b	d0,($FFFFFFED).w
0001659E 0200 00C0                  		andi.b	#$C0,d0
000165A2 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
000165A6 0C00 0040                  		cmpi.b	#$40,d0
000165AA 6700 0000                  		beq.w	loc_13680
000165AE 0C00 0080                  		cmpi.b	#$80,d0
000165B2 6700 0000                  		beq.w	loc_136E2
000165B6 0C00 00C0                  		cmpi.b	#$C0,d0
000165BA 6700 0000                  		beq.w	loc_1373E
000165BE 6100 0000                  		bsr.w	Sonic_HitWall
000165C2 4A41                       		tst.w	d1
000165C4 6A00                       		bpl.s	loc_135F0
000165C6 9368 0008                  		sub.w	d1,obX(a0)
000165CA 317C 0000 0010             		move.w	#0,obVelX(a0)
000165D0                            
000165D0                            loc_135F0:
000165D0 6100 0000                  		bsr.w	sub_14EB4
000165D4 4A41                       		tst.w	d1
000165D6 6A00                       		bpl.s	loc_13602
000165D8 D368 0008                  		add.w	d1,obX(a0)
000165DC 317C 0000 0010             		move.w	#0,obVelX(a0)
000165E2                            
000165E2                            loc_13602:
000165E2 6100 0000                  		bsr.w	Sonic_HitFloor
000165E6 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
000165EA 4A41                       		tst.w	d1
000165EC 6A00                       		bpl.s	locret_1367E
000165EE 1428 0012                  		move.b	obVelY(a0),d2
000165F2 5002                       		addq.b	#8,d2
000165F4 4402                       		neg.b	d2
000165F6 B202                       		cmp.b	d2,d1
000165F8 6C00                       		bge.s	loc_1361E
000165FA B002                       		cmp.b	d2,d0
000165FC 6D00                       		blt.s	locret_1367E
000165FE                            
000165FE                            loc_1361E:
000165FE D368 000C                  		add.w	d1,obY(a0)
00016602 1143 0026                  		move.b	d3,obAngle(a0)
00016606 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001660A 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016610 1003                       		move.b	d3,d0
00016612 0600 0020                  		addi.b	#$20,d0
00016616 0200 0040                  		andi.b	#$40,d0
0001661A 6600                       		bne.s	loc_1365C
0001661C 1003                       		move.b	d3,d0
0001661E 0600 0010                  		addi.b	#$10,d0
00016622 0200 0020                  		andi.b	#$20,d0
00016626 6700                       		beq.s	loc_1364E
00016628 E0E8 0012                  		asr	obVelY(a0)
0001662C 6000                       		bra.s	loc_13670
0001662E                            ; ===========================================================================
0001662E                            
0001662E                            loc_1364E:
0001662E 317C 0000 0012             		move.w	#0,obVelY(a0)
00016634 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
0001663A 4E75                       		rts	
0001663C                            ; ===========================================================================
0001663C                            
0001663C                            loc_1365C:
0001663C 317C 0000 0010             		move.w	#0,obVelX(a0)
00016642 0C68 0FC0 0012             		cmpi.w	#$FC0,obVelY(a0)
00016648 6F00                       		ble.s	loc_13670
0001664A 317C 0FC0 0012             		move.w	#$FC0,obVelY(a0)
00016650                            
00016650                            loc_13670:
00016650 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016656 4A03                       		tst.b	d3
00016658 6A00                       		bpl.s	locret_1367E
0001665A 4468 0020                  		neg.w	obInertia(a0)
0001665E                            
0001665E                            locret_1367E:
0001665E 4E75                       		rts	
00016660                            ; ===========================================================================
00016660                            
00016660                            loc_13680:
00016660 6100 0000                  		bsr.w	Sonic_HitWall
00016664 4A41                       		tst.w	d1
00016666 6A00                       		bpl.s	loc_1369A
00016668 9368 0008                  		sub.w	d1,obX(a0)
0001666C 317C 0000 0010             		move.w	#0,obVelX(a0)
00016672 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016678 4E75                       		rts	
0001667A                            ; ===========================================================================
0001667A                            
0001667A                            loc_1369A:
0001667A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001667E 4A41                       		tst.w	d1
00016680 6A00                       		bpl.s	loc_136B4
00016682 9368 000C                  		sub.w	d1,obY(a0)
00016686 4A68 0012                  		tst.w	obVelY(a0)
0001668A 6A00                       		bpl.s	locret_136B2
0001668C 317C 0000 0012             		move.w	#0,obVelY(a0)
00016692                            
00016692                            locret_136B2:
00016692 4E75                       		rts	
00016694                            ; ===========================================================================
00016694                            
00016694                            loc_136B4:
00016694 4A68 0012                  		tst.w	obVelY(a0)
00016698 6B00                       		bmi.s	locret_136E0
0001669A 6100 0000                  		bsr.w	Sonic_HitFloor
0001669E 4A41                       		tst.w	d1
000166A0 6A00                       		bpl.s	locret_136E0
000166A2 D368 000C                  		add.w	d1,obY(a0)
000166A6 1143 0026                  		move.b	d3,obAngle(a0)
000166AA 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000166AE 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000166B4 317C 0000 0012             		move.w	#0,obVelY(a0)
000166BA 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
000166C0                            
000166C0                            locret_136E0:
000166C0 4E75                       		rts	
000166C2                            ; ===========================================================================
000166C2                            
000166C2                            loc_136E2:
000166C2 6100 0000                  		bsr.w	Sonic_HitWall
000166C6 4A41                       		tst.w	d1
000166C8 6A00                       		bpl.s	loc_136F4
000166CA 9368 0008                  		sub.w	d1,obX(a0)
000166CE 317C 0000 0010             		move.w	#0,obVelX(a0)
000166D4                            
000166D4                            loc_136F4:
000166D4 6100 0000                  		bsr.w	sub_14EB4
000166D8 4A41                       		tst.w	d1
000166DA 6A00                       		bpl.s	loc_13706
000166DC D368 0008                  		add.w	d1,obX(a0)
000166E0 317C 0000 0010             		move.w	#0,obVelX(a0)
000166E6                            
000166E6                            loc_13706:
000166E6 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000166EA 4A41                       		tst.w	d1
000166EC 6A00                       		bpl.s	locret_1373C
000166EE 9368 000C                  		sub.w	d1,obY(a0)
000166F2 1003                       		move.b	d3,d0
000166F4 0600 0020                  		addi.b	#$20,d0
000166F8 0200 0040                  		andi.b	#$40,d0
000166FC 6600                       		bne.s	loc_13726
000166FE 317C 0000 0012             		move.w	#0,obVelY(a0)
00016704 4E75                       		rts	
00016706                            ; ===========================================================================
00016706                            
00016706                            loc_13726:
00016706 1143 0026                  		move.b	d3,obAngle(a0)
0001670A 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001670E 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016714 4A03                       		tst.b	d3
00016716 6A00                       		bpl.s	locret_1373C
00016718 4468 0020                  		neg.w	obInertia(a0)
0001671C                            
0001671C                            locret_1373C:
0001671C 4E75                       		rts	
0001671E                            ; ===========================================================================
0001671E                            
0001671E                            loc_1373E:
0001671E 6100 0000                  		bsr.w	sub_14EB4
00016722 4A41                       		tst.w	d1
00016724 6A00                       		bpl.s	loc_13758
00016726 D368 0008                  		add.w	d1,obX(a0)
0001672A 317C 0000 0010             		move.w	#0,obVelX(a0)
00016730 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016736 4E75                       		rts	
00016738                            ; ===========================================================================
00016738                            
00016738                            loc_13758:
00016738 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001673C 4A41                       		tst.w	d1
0001673E 6A00                       		bpl.s	loc_13772
00016740 9368 000C                  		sub.w	d1,obY(a0)
00016744 4A68 0012                  		tst.w	obVelY(a0)
00016748 6A00                       		bpl.s	locret_13770
0001674A 317C 0000 0012             		move.w	#0,obVelY(a0)
00016750                            
00016750                            locret_13770:
00016750 4E75                       		rts	
00016752                            ; ===========================================================================
00016752                            
00016752                            loc_13772:
00016752 4A68 0012                  		tst.w	obVelY(a0)
00016756 6B00                       		bmi.s	locret_1379E
00016758 6100 0000                  		bsr.w	Sonic_HitFloor
0001675C 4A41                       		tst.w	d1
0001675E 6A00                       		bpl.s	locret_1379E
00016760 D368 000C                  		add.w	d1,obY(a0)
00016764 1143 0026                  		move.b	d3,obAngle(a0)
00016768 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001676C 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016772 317C 0000 0012             		move.w	#0,obVelY(a0)
00016778 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
0001677E                            
0001677E                            locret_1379E:
0001677E 4E75                       		rts	
00016780                            ; End of function Sonic_Floor
00016780                            ; End of function Sonic_Floor
00016780                            		include	"_incObj\Sonic ResetOnFloor.asm"
00016780                            ; ---------------------------------------------------------------------------
00016780                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00016780                            ; ---------------------------------------------------------------------------
00016780                            
00016780                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016780                            
00016780                            
00016780                            Sonic_ResetOnFloor:            ; XREF: PlatformObject; et al
00016780 4238 F5CD                  		clr.b	(v_homingattack).w
00016784 08A8 0005 0022                     	bclr    #5,$22(a0)
0001678A 08A8 0001 0022                     	bclr    #1,$22(a0)
00016790 0828 0002 0022                     	btst    #2,$22(a0)
00016796 6700                               	beq.s    loc_137E4
00016798 08A8 0002 0022             		bclr	#2,obStatus(a0)
0001679E 117C 0013 0016             		move.b	#$13,obHeight(a0)
000167A4 117C 0009 0017             		move.b	#9,obWidth(a0)
000167AA 117C 0000 001C             		move.b	#id_Walk,obAnim(a0) ; use running/walking animation
000167B0 5B68 000C                  		subq.w	#5,obY(a0)
000167B4                            
000167B4                            loc_137E4:
000167B4 117C 0000 003C             		move.b	#0,$3C(a0)
000167BA 31FC 0000 F7D0             		move.w	#0,(v_itembonus).w
000167C0 4E75                       		rts	
000167C2                            ; End of function Sonic_ResetOnFloor
000167C2                            ; End of function Sonic_ResetOnFloor
000167C2                            		include	"_incObj\Sonic (part 2).asm"
000167C2                            ; ---------------------------------------------------------------------------
000167C2                            ; Sonic	when he	gets hurt
000167C2                            ; ---------------------------------------------------------------------------
000167C2                            
000167C2                            Sonic_Hurt:	; Routine 4
000167C2 4EB9 0000 F7B6             		jsr	(SpeedToPos).l
000167C8 0668 0030 0012             		addi.w	#$30,obVelY(a0)
000167CE 0828 0006 0022             		btst	#6,obStatus(a0)
000167D4 6700                       		beq.s	loc_1380C
000167D6 0468 0020 0012             		subi.w	#$20,obVelY(a0)
000167DC                            
000167DC                            loc_1380C:
000167DC 6100 0000                  		bsr.w	Sonic_HurtStop
000167E0 6100 F98A                  		bsr.w	Sonic_LevelBound
000167E4 6100 ED8A                  		bsr.w	Sonic_RecordPosition
000167E8 6100 0000                  		bsr.w	Sonic_Animate
000167EC 6100 0000                  		bsr.w	Sonic_LoadGfx
000167F0 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
000167F6                            
000167F6                            ; ---------------------------------------------------------------------------
000167F6                            ; Subroutine to	stop Sonic falling after he's been hurt
000167F6                            ; ---------------------------------------------------------------------------
000167F6                            
000167F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000167F6                            
000167F6                            
000167F6                            Sonic_HurtStop:
000167F6 3038 F72E                  		move.w	(v_limitbtm2).w,d0
000167FA 0640 00E0                  		addi.w	#$E0,d0
000167FE                            		;cmp.w	obY(a0),d0
000167FE                            		;bcs.w	KillSonic
000167FE 6100 FD84                  		bsr.w	Sonic_Floor
00016802 0828 0001 0022             		btst	#1,obStatus(a0)
00016808 6600                       		bne.s	locret_13860
0001680A 7000                       		moveq	#0,d0
0001680C 3140 0012                  		move.w	d0,obVelY(a0)
00016810 3140 0010                  		move.w	d0,obVelX(a0)
00016814 3140 0020                  		move.w	d0,obInertia(a0)
00016818 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0001681E 5528 0024                  		subq.b	#2,obRoutine(a0)
00016822 317C 0078 0030             		move.w	#$78,$30(a0)
00016828                            
00016828                            locret_13860:
00016828 4E75                       		rts	
0001682A                            ; End of function Sonic_HurtStop
0001682A                            
0001682A                            ; ---------------------------------------------------------------------------
0001682A                            ; Sonic	when he	dies
0001682A                            ; ---------------------------------------------------------------------------
0001682A                            
0001682A                            Sonic_Death:	; Routine 6
0001682A 6100 0000                  		bsr.w	GameOver
0001682E 4EB9 0000 F77E             		jsr	(ObjectFall).l
00016834 6100 ED3A                  		bsr.w	Sonic_RecordPosition
00016838 6100 0000                  		bsr.w	Sonic_Animate
0001683C 6100 0000                  		bsr.w	Sonic_LoadGfx
00016840 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
00016846                            
00016846                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016846                            
00016846                            GameOver:
00016846 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0001684A 0640 0100                  		addi.w	#$100,d0
0001684E B068 000C                  		cmp.w	obY(a0),d0
00016852 6400 0000                  		bcc.w	locret_13900
00016856 317C FFC8 0012             		move.w	#-$38,obVelY(a0)
0001685C 5428 0024                  		addq.b	#2,obRoutine(a0)
00016860 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00016864 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update lives counter
00016868 5338 FE12                  		subq.b	#1,(v_lives).w	; subtract 1 from number of lives
0001686C 6600                       		bne.s	loc_138D4
0001686E 317C 0000 003A             		move.w	#0,$3A(a0)
00016874 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load GAME object
0001687A 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
00016880 11FC 0001 D0DA             		move.b	#1,(v_objspace+$C0+obFrame).w ; set OVER object to correct frame
00016886 4238 FE1A                  		clr.b	(f_timeover).w
0001688A                            
0001688A                            loc_138C2:
0001688A                            		;music	bgm_TimeOver,0,0,0	; play time over music
00016894 7003                       		moveq	#3,d0
00016896 4EF9 0000 173A             		jmp	(AddPLC).l	; load game over patterns
0001689C                            		
0001689C                            ; ===========================================================================
0001689C                            
0001689C                            loc_138D4:
0001689C 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000168A2 4A38 FE1A                  		tst.b	(f_timeover).w	; is TIME OVER tag set?
000168A6 6700                       		beq.s	locret_13900	; if not, branch
000168A8 317C 0000 003A             		move.w	#0,$3A(a0)
000168AE 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load TIME object
000168B4 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
000168BA 11FC 0002 D09A             		move.b	#2,(v_objspace+$80+obFrame).w
000168C0 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
000168C6 60C2                       		bra.s	loc_138C2
000168C8                            		
000168C8                            
000168C8                            ; ===========================================================================
000168C8                            
000168C8                            locret_13900:
000168C8 4E75                       		rts	
000168CA                            ; End of function GameOver
000168CA                            
000168CA                            ; ---------------------------------------------------------------------------
000168CA                            ; Sonic	when the level is restarted
000168CA                            ; ---------------------------------------------------------------------------
000168CA                            
000168CA                            Sonic_ResetLevel:; Routine 8
000168CA 4A68 003A                  		tst.w	$3A(a0)
000168CE 6700                       		beq.s	locret_13914
000168D0 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000168D4 6600                       		bne.s	locret_13914
000168D6 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
000168DC                            
000168DC                            	locret_13914:
000168DC 4E75                       		rts	
000168DC 4E75                       		rts	
000168DE                            		include	"_incObj\Sonic Loops.asm"
000168DE                            ; ---------------------------------------------------------------------------
000168DE                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
000168DE                            ; ---------------------------------------------------------------------------
000168DE                            
000168DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000168DE                            
000168DE                            
000168DE                            Sonic_Loops:
000168DE 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; is level SLZ ?
000168E4 6700                       		beq.s	@isstarlight	; if yes, branch
000168E6 4A38 FE10                  		tst.b	(v_zone).w	; is level GHZ ?
000168EA 6600 0000                  		bne.w	@noloops	; if not, branch
000168EE                            
000168EE                            	@isstarlight:
000168EE 3028 000C                  		move.w	obY(a0),d0
000168F2 E248                       		lsr.w	#1,d0
000168F4 0240 0380                  		andi.w	#$380,d0
000168F8 1228 0008                  		move.b	obX(a0),d1
000168FC 0241 007F                  		andi.w	#$7F,d1
00016900 D041                       		add.w	d1,d0
00016902 43F8 A400                  		lea	(v_lvllayout).w,a1
00016906 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
0001690A                            
0001690A B238 F7AE                  		cmp.b	(v_256roll1).w,d1 ; is Sonic on a "roll tunnel" tile?
0001690E 6700 F918                  		beq.w	Sonic_ChkRoll	; if yes, branch
00016912 B238 F7AF                  		cmp.b	(v_256roll2).w,d1
00016916 6700 F910                  		beq.w	Sonic_ChkRoll
0001691A                            
0001691A B238 F7AC                  		cmp.b	(v_256loop1).w,d1 ; is Sonic on a loop tile?
0001691E 6700                       		beq.s	@chkifleft	; if yes, branch
00016920 B238 F7AD                  		cmp.b	(v_256loop2).w,d1
00016924 6700                       		beq.s	@chkifinair
00016926 08A8 0006 0001             		bclr	#6,obRender(a0) ; return Sonic to high plane
0001692C 4E75                       		rts	
0001692E                            ; ===========================================================================
0001692E                            
0001692E                            @chkifinair:
0001692E 0828 0001 0022             		btst	#1,obStatus(a0)	; is Sonic in the air?
00016934 6700                       		beq.s	@chkifleft	; if not, branch
00016936                            
00016936 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
0001693C 4E75                       		rts	
0001693E                            ; ===========================================================================
0001693E                            
0001693E                            @chkifleft:
0001693E 3428 0008                  		move.w	obX(a0),d2
00016942 0C02 002C                  		cmpi.b	#$2C,d2
00016946 6400                       		bcc.s	@chkifright
00016948                            
00016948 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
0001694E 4E75                       		rts	
00016950                            ; ===========================================================================
00016950                            
00016950                            @chkifright:
00016950 0C02 00E0                  		cmpi.b	#$E0,d2
00016954 6500                       		bcs.s	@chkangle1
00016956                            
00016956 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
0001695C 4E75                       		rts	
0001695E                            ; ===========================================================================
0001695E                            
0001695E                            @chkangle1:
0001695E 0828 0006 0001             		btst	#6,obRender(a0) ; is Sonic on low plane?
00016964 6600                       		bne.s	@chkangle2	; if yes, branch
00016966                            
00016966 1228 0026                  		move.b	obAngle(a0),d1
0001696A 6700                       		beq.s	@done
0001696C 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upside-down?
00016970 6200                       		bhi.s	@done		; if yes, branch
00016972 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
00016978 4E75                       		rts	
0001697A                            ; ===========================================================================
0001697A                            
0001697A                            @chkangle2:
0001697A 1228 0026                  		move.b	obAngle(a0),d1
0001697E 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upright?
00016982 6300                       		bls.s	@done		; if yes, branch
00016984 08A8 0006 0001             		bclr	#6,obRender(a0)	; send Sonic to	high plane
0001698A                            
0001698A                            @noloops:
0001698A                            @done:
0001698A 4E75                       		rts	
0001698C                            ; End of function Sonic_Loops
0001698C                            ; End of function Sonic_Loops
0001698C                            		include	"_incObj\Sonic Animate.asm"
0001698C                            ; ---------------------------------------------------------------------------
0001698C                            ; Subroutine to	animate	Sonic's sprites
0001698C                            ; ---------------------------------------------------------------------------
0001698C                            
0001698C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001698C                            
0001698C                            
0001698C                            Sonic_Animate:				; XREF: Obj01_Control; et al
0001698C 43F9 0000 0000             		lea	(Ani_Sonic).l,a1
00016992 4A38 FE19                          tst.b	(Super_Sonic_flag).w	    ; is sonic super?
00016996 6700                       		beq.s	 Sonic_Animatecont	    ; if not, branch
00016998 43F9 0000 0000             		lea	(Ani_SuperSonic).l,a1	
0001699E                            
0001699E                            Sonic_Animatecont:	
0001699E 7000                       		moveq	#0,d0
000169A0 1028 001C                  		move.b	obAnim(a0),d0
000169A4 B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
000169A8 6700                       		beq.s	@do		; if not, branch
000169AA 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
000169AE 4228 001B                  		clr.b	obAniFrame(a0) ; reset animation
000169B2 4228 001E                  		clr.b	obTimeFrame(a0) ; reset frame duration
000169B6                            		
000169B6 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag	;Mercury Pushing While Walking Fix	;Mercury Constants
000169BC                            
000169BC                            	@do:
000169BC D040                       		add.w	d0,d0
000169BE D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
000169C2 1011                       		move.b	(a1),d0
000169C4 6B00                       		bmi.s	@walkrunroll	; if animation is walk/run/roll/jump, branch
000169C6 1228 0022                  		move.b	obStatus(a0),d1
000169CA 0201 0001                  		andi.b	#1,d1
000169CE 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
000169D4 8328 0001                  		or.b	d1,obRender(a0)
000169D8 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
000169DC 6A00                       		bpl.s	@delay		; if time remains, branch
000169DE 1140 001E                  		move.b	d0,obTimeFrame(a0) ; load frame duration
000169E2                            
000169E2                            @loadframe:
000169E2 7200                       		moveq	#0,d1
000169E4 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
000169E8 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
000169EC 0C00 00FD                  		cmp.b	#$FD,d0				; MJ: is it a flag from FD to FF?
000169F0 6400 0000                  		bhs		@end_FF				; MJ: if so, branch to flag routines
000169F4                            
000169F4                            	@next:
000169F4 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
000169F8 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
000169FC                            
000169FC                            	@delay:
000169FC 4E75                       		rts	
000169FE                            ; ===========================================================================
000169FE                            
000169FE                            @end_FF:
000169FE 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00016A00 6600                       		bne.s	@end_FE		; if not, branch
00016A02 4228 001B                  		clr.b	obAniFrame(a0) ; restart the animation
00016A06 1029 0001                  		move.b	1(a1),d0	; read sprite number
00016A0A 60E8                       		bra.s	@next
00016A0C                            ; ===========================================================================
00016A0C                            
00016A0C                            @end_FE:
00016A0C 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00016A0E 6600                       		bne.s	@end_FD		; if not, branch
00016A10 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00016A14 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
00016A18 9200                       		sub.b	d0,d1
00016A1A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00016A1E 60D4                       		bra.s	@next
00016A20                            ; ===========================================================================
00016A20                            
00016A20                            @end_FD:
00016A20 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00016A22 6600                       		bne.s	@end		; if not, branch
00016A24 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
00016A2A                            
00016A2A                            	@end:
00016A2A 4E75                       		rts	
00016A2C                            ; ===========================================================================
00016A2C                            
00016A2C                            @walkrunroll:
00016A2C 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00016A30 6ACA                       		bpl.s	@delay		; if time remains, branch
00016A32 5200                       		addq.b	#1,d0		; is animation walking/running?
00016A34 6600 0000                  		bne.w	@rolljump	; if not, branch
00016A38 7200                       		moveq	#0,d1
00016A3A 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
00016A3E 6B00                       		bmi.s	@ble 			; better handling of angles
00016A40 6700                       		beq.s	@ble
00016A42 5300                       		subq.b	#1,d0
00016A44                            
00016A44                            	@ble:																
00016A44 1428 0022                  		move.b	obStatus(a0),d2
00016A48 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00016A4C 6600                       		bne.s	@flip		; if yes, branch
00016A4E 4600                       		not.b	d0		; reverse angle
00016A50                            
00016A50                            	@flip:
00016A50 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00016A54 6A00                       		bpl.s	@noinvert	; if angle is $0-$7F, branch
00016A56 7203                       		moveq	#3,d1
00016A58                            
00016A58                            	@noinvert:
00016A58 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016A5E B302                       		eor.b	d1,d2
00016A60 8528 0001                  		or.b	d2,obRender(a0)
00016A64 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing something?	;Mercury Constants
00016A6A 6600 0000                  		bne.w	@push		; if yes, branch
00016A6E                            
00016A6E E808                       		lsr.b	#4,d0		; divide angle by $10
00016A70 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00016A74 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016A78 6A00                       		bpl.s	@nomodspeed
00016A7A 4442                       		neg.w	d2		; modulus speed
00016A7C                            
00016A7C                            	@nomodspeed:
00016A7C 4A38 FE19                  		tst.b	(Super_Sonic_flag).w		; is sonic super?
00016A80 6700                       		beq.s	@cont		; if not, branch
00016A82 43F9 0000 0000             		lea	(SuperSonAni_Run).l,a1 ; use	running	animation
00016A88 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00016A8C 6400                       		bcc.s	@running	; if yes, branch
00016A8E 43F9 0000 0000             		lea	(SuperSonAni_Walk).l,a1 ; use walking animation
00016A94                            	
00016A94                            	@cont:	
00016A94 43F9 0000 0000             		lea	(SonAni_MaxRun).l,a1 ; use Dashing animation
00016A9A 0C42 0A00                  		cmpi.w	#$A00,d2	; is Sonic at Dashing speed?
00016A9E 6400                       		bcc.s	@maxrunning	; if yes, branch
00016AA0                            
00016AA0 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00016AA6 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00016AAA 6400                       		bcc.s	@running	; if yes, branch
00016AAC                            
00016AAC 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00016AB2                            
00016AB2                            	@running:
00016AB2 D000                       		add.b	d0,d0
00016AB4 D000                       		add.b	d0,d0
00016AB6 1600                       		move.b	d0,d3
00016AB8 4442                       		neg.w	d2
00016ABA 0642 0780                  		addi.w	#$780,d2
00016ABE 6A00                       		bpl.s	@belowmax
00016AC0 7400                       		moveq	#0,d2		; max animation speed
00016AC2 6000                       		bra.s	@belowmax
00016AC4                            
00016AC4                            	@maxrunning:
00016AC4 D000                       		add.b d0,d0
00016AC6 1600                       		move.b d0,d3
00016AC8 4442                       		neg.w d2
00016ACA 0642 0800                  		addi.w #$800, d2
00016ACE 6A00                       		bpl.s @belowmax
00016AD0 7400                       		moveq #0, d2 
00016AD2                            
00016AD2                            	@belowmax:
00016AD2 E04A                       		lsr.w	#8,d2
00016AD4 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016AD8 6100 FF08                  		bsr.w	@loadframe
00016ADC D728 001A                  		add.b	d3,obFrame(a0)	; modify frame number
00016AE0 4E75                       		rts	
00016AE2                            ; ===========================================================================
00016AE2                            
00016AE2                            @rolljump:
00016AE2 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00016AE4 6600                       		bne.s	@push		; if not, branch
00016AE6 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016AEA 6A00                       		bpl.s	@nomodspeed2
00016AEC 4442                       		neg.w	d2
00016AEE                            
00016AEE                            	@nomodspeed2:
00016AEE 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00016AF4 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00016AF8 6400                       		bcc.s	@rollfast	; if yes, branch
00016AFA 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00016B00                            
00016B00                            	@rollfast:
00016B00 4442                       		neg.w	d2
00016B02 0642 0400                  		addi.w	#$400,d2
00016B06 6A00                       		bpl.s	@belowmax2
00016B08 7400                       		moveq	#0,d2
00016B0A                            
00016B0A                            	@belowmax2:
00016B0A E04A                       		lsr.w	#8,d2
00016B0C 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016B10 1228 0022                  		move.b	obStatus(a0),d1
00016B14 0201 0001                  		andi.b	#1,d1
00016B18 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016B1E 8328 0001                  		or.b	d1,obRender(a0)
00016B22 6000 FEBE                  		bra.w	@loadframe
00016B26                            ; ===========================================================================
00016B26                            
00016B26                            @push:
00016B26 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016B2A 6B00                       		bmi.s	@negspeed
00016B2C 4442                       		neg.w	d2
00016B2E                            
00016B2E                            	@negspeed:
00016B2E 0642 0800                  		addi.w	#$800,d2
00016B32 6A00                       		bpl.s	@belowmax3	
00016B34 7400                       		moveq	#0,d2
00016B36                            
00016B36                            	@belowmax3:
00016B36 EC4A                       		lsr.w	#6,d2
00016B38 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016B3C 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00016B42 1228 0022                  		move.b	obStatus(a0),d1
00016B46 0201 0001                  		andi.b	#1,d1
00016B4A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016B50 8328 0001                  		or.b	d1,obRender(a0)
00016B54 6000 FE8C                  		bra.w	@loadframe
00016B58                            
00016B58                            ; End of function Sonic_Animate
00016B58                            ; End of function Sonic_Animate
00016B58                            		include	"_anim\Sonic.asm"
00016B58                            ; ---------------------------------------------------------------------------
00016B58                            ; Animation script - Sonic
00016B58                            ; ---------------------------------------------------------------------------
00016B58                            Ani_Sonic:
00016B58                            
00016B58 0000                       ptr_Walk:	dc.w SonAni_Walk-Ani_Sonic
00016B5A 0000                       ptr_Run:	dc.w SonAni_Run-Ani_Sonic
00016B5C 0000                       ptr_Roll:	dc.w SonAni_Roll-Ani_Sonic
00016B5E 0000                       ptr_Roll2:	dc.w SonAni_Roll2-Ani_Sonic
00016B60 0000                       ptr_Push:	dc.w SonAni_Push-Ani_Sonic
00016B62 0000                       ptr_Wait:	dc.w SonAni_Wait-Ani_Sonic
00016B64 0000                       ptr_Balance:	dc.w SonAni_Balance-Ani_Sonic
00016B66 0000                       ptr_LookUp:	dc.w SonAni_LookUp-Ani_Sonic
00016B68 0000                       ptr_Duck:	dc.w SonAni_Duck-Ani_Sonic
00016B6A 0000                       ptr_Warp1:	dc.w SonAni_Warp1-Ani_Sonic
00016B6C 0000                       ptr_Warp2:	dc.w SonAni_Warp2-Ani_Sonic
00016B6E 0000                       ptr_Warp3:	dc.w SonAni_Warp3-Ani_Sonic
00016B70 0000                       ptr_Warp4:	dc.w SonAni_Warp4-Ani_Sonic
00016B72 0000                       ptr_Stop:	dc.w SonAni_Stop-Ani_Sonic
00016B74 0000                       ptr_Float1:	dc.w SonAni_Float1-Ani_Sonic
00016B76 0000                       ptr_Float2:	dc.w SonAni_Float2-Ani_Sonic
00016B78 0000                       ptr_Spring:	dc.w SonAni_Spring-Ani_Sonic
00016B7A 0000                       ptr_Hang:	dc.w SonAni_Hang-Ani_Sonic
00016B7C 0000                       ptr_Leap1:	dc.w SonAni_Leap1-Ani_Sonic
00016B7E 0000                       ptr_Leap2:	dc.w SonAni_Leap2-Ani_Sonic
00016B80 0000                       ptr_Surf:	dc.w SonAni_Surf-Ani_Sonic
00016B82 0000                       ptr_GetAir:	dc.w SonAni_GetAir-Ani_Sonic
00016B84 0000                       ptr_Burnt:	dc.w SonAni_Burnt-Ani_Sonic
00016B86 0000                       ptr_Drown:	dc.w SonAni_Drown-Ani_Sonic
00016B88 0000                       ptr_Death:	dc.w SonAni_Death-Ani_Sonic
00016B8A 0000                       ptr_Hurt:	dc.w SonAni_Hurt-Ani_Sonic
00016B8C 0000                       ptr_WaterSlide:	dc.w SonAni_WaterSlide-Ani_Sonic
00016B8E 0000                       ptr_Null:	dc.w SonAni_Null-Ani_Sonic
00016B90 0000                       ptr_Float3:	dc.w SonAni_Float3-Ani_Sonic
00016B92 0000                       ptr_Float4:	dc.w SonAni_Float4-Ani_Sonic
00016B94 0000                       ptr_MaxRun:	dc.w SonAni_MaxRun-Ani_Sonic
00016B96 0000                       ptr_Spindash:	dc.w SonAni_SpinDash-Ani_Sonic ;1F
00016B98 0000                       ptr_Hurt2:	dc.w SonAni_Hurt2-Ani_Sonic
00016B9A 0000                       ptr_GetUp:	dc.w SonAni_GetUp-Ani_Sonic
00016B9C 0000                       ptr_Blink:	dc.w SonAni_Blink-Ani_Sonic
00016B9E 0000                       ptr_Sit:	dc.w SonAni_Sit-Ani_Sonic
00016BA0 0000                       ptr_Peelout:	dc.w SonAni_Peelout-Ani_Sonic
00016BA2 0000                       ptr_Hang2:	dc.w SonAni_Hang2-Ani_Sonic
00016BA4 0000                       ptr_GetAir2:	dc.w SonAni_GetAir2-Ani_Sonic
00016BA6 0000                       ptr_Transform:	dc.w SonAni_Transform-Ani_Sonic
00016BA8                            
00016BA8 FF10 1112 1314 150E 0FFF+  SonAni_Walk:	dc.b $FF, fr_walk13, fr_walk14,	fr_walk15, fr_walk16, fr_walk17, fr_walk18, fr_walk11, fr_walk12, afEnd, afEnd, afEnd, afEnd
00016BB6 00                         		even
00016BB6 FF2E 2F30 3132 3334 35FF+  SonAni_Run:	dc.b $FF, fr_run11,  fr_run12,  fr_run13,  fr_run14, fr_run15,  fr_run16,  fr_run17,  fr_run18, afEnd, afEnd, afEnd, afEnd
00016BC4 00                         		even
00016BC4 FE5E 5F60 6162 66          SonAni_Roll:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016BCB 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016BD2 00                         		even
00016BD2 FE5E 5F60 6162 66          SonAni_Roll2:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016BD9 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016BE0 00                         		even
00016BE0 0D89 8A8B 8C8D 8E8F 90FF+  SonAni_Push:	dc.b $D,  fr_push1,  fr_push2,  fr_push3,  fr_push4, fr_push5,  fr_push6,  fr_push7,  fr_push8, afEnd, afEnd, afEnd, afEnd
00016BEE 00                         		even
00016BEE                            SonAni_Wait:	
00016BEE 0501 0101 0101 0101 0102+  		dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016BFD 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016C0C 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016C1B 0203 0303 0404 0505 0506+  		dc.b   2,  3,  3,  3,  4,  4,  5,  5,  5,  6,  6,  6,  7,  7,  7
00016C2A 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016C39 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016C48 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016C57 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016C66 0808 0909 0A0A FE04        		dc.b   8,  8,  9,  9,  $A, $A, $FE, 4
00016C6E                            		even
00016C6E 0F72 7374 75FF             SonAni_Balance:	dc.b $F, fr_balance1, fr_balance2, fr_balance3, fr_balance4, afEnd
00016C74                            		even
00016C74 030C 0DFE 01               SonAni_LookUp:	dc.b $3, fr_lookup1, fr_lookup2, afBack, 1
00016C7A 00                         		even
00016C7A 0270 71FE 01               SonAni_Duck:	dc.b $2, fr_duck2, fr_duck, afBack, 1
00016C80 00                         		even
00016C80 3F67 FF                    SonAni_Warp1:	dc.b $3F, fr_warp1, afEnd
00016C84 00                         		even
00016C84 3F68 FF                    SonAni_Warp2:	dc.b $3F, fr_warp2, afEnd
00016C88 00                         		even
00016C88 3F69 FF                    SonAni_Warp3:	dc.b $3F, fr_warp3, afEnd
00016C8C 00                         		even
00016C8C 3F6A FF                    SonAni_Warp4:	dc.b $3F, fr_warp4, afEnd
00016C90 00                         		even
00016C90 026B 6C6C 6D6D 6E6E FD00   SonAni_Stop:	dc.b 2,	fr_stop1, fr_stop2, fr_stop2, fr_stop3, fr_stop3, fr_stop4, fr_stop4, $FD,  0
00016C9A                            		even
00016C9A 077C 82FE 02               SonAni_Float1:	dc.b 7,	fr_float1, fr_float4, afBack, 2
00016CA0 00                         		even
00016CA0 037C 7D7E 7F80 817B FF     SonAni_Float2:	dc.b 3,	fr_float1, fr_float7, fr_float2, fr_float8, fr_float5, fr_float3, fr_float6, afEnd
00016CAA 00                         		even
00016CAA 0783 8483 8483 84FD 00     SonAni_Spring:	dc.b 7, fr_spring, fr_spring2, fr_spring, fr_spring2, fr_spring, fr_spring2, afChange, id_Walk
00016CB4 00                         		even
00016CB4 0485 86FF                  SonAni_Hang:	dc.b 4,	fr_hang1, fr_hang2, afEnd
00016CB8                            		even
00016CB8 036F 8888 8888 8888 6F87+  SonAni_Leap1:	dc.b $3, fr_leap3, fr_leap2, fr_leap2, fr_leap2, fr_leap2, fr_leap2, fr_leap2, fr_leap3, fr_leap1, afBack, 1
00016CC4                            		even
00016CC4 0D87 FD00                  SonAni_Leap2:	dc.b $D, fr_leap1, afChange, id_Leap1
00016CC8                            		even
00016CC8 3F91 FF                    SonAni_Surf:	dc.b $3F, fr_surf, afEnd
00016CCC 00                         		even
00016CCC 0B95 FD00                  SonAni_GetAir:	dc.b $B, fr_getair, afChange, id_GetAir2
00016CD0                            		even
00016CD0 2092 FF                    SonAni_Burnt:	dc.b $20, fr_burnt, afEnd
00016CD4 00                         		even
00016CD4 2F93 FF                    SonAni_Drown:	dc.b $2F, fr_drown, afEnd
00016CD8 00                         		even
00016CD8 0394 FF                    SonAni_Death:	dc.b 3,	fr_death, afEnd
00016CDC 00                         		even
00016CDC 0396 FF                    SonAni_Hurt:	dc.b 3,	fr_injury, afEnd
00016CE0 00                         		even
00016CE0                            SonAni_WaterSlide:
00016CE0 0796 97FF                  		dc.b 7, fr_injury, fr_waterslide, afEnd
00016CE4                            		even
00016CE4 7700 FD00                  SonAni_Null:	dc.b $77, fr_null, afChange, id_Walk
00016CE8                            		even
00016CE8 037C 7E80 817B FF          SonAni_Float3:	dc.b 3,	fr_float1, fr_float2, fr_float5, fr_float3, fr_float6, afEnd
00016CF0 00                         		even
00016CF0 037C FD00                  SonAni_Float4:	dc.b 3,	fr_float1, afChange, id_Walk
00016CF4                            		even
00016CF4 FF4E 4F50 51FF FFFF FFFF+  SonAni_MaxRun:  dc.b $FF, fr_peelout11, fr_peelout12, fr_peelout13, fr_peelout14, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd
00016D02 00                         		even
00016D02 009B 9C9B 9D9B 9E9B 9F9B+  SonAni_SpinDash: dc.b 0, fr_Spindash1, fr_spindash2, fr_spindash1, fr_spindash3, fr_spindash1, fr_spindash4, fr_spindash1, fr_spindash5, fr_spindash1, fr_spindash6, afEnd
00016D0E                            		even
00016D0E 0298 9699 FF               SonAni_Hurt2:	dc.b 2, fr_skele1, fr_injury, fr_skele2, afEnd	
00016D14 00                         		even
00016D14 030B FD00                  SonAni_GetUp:	dc.b 3, $B,$FD,  0
00016D18                            		even
00016D18 0102 FD00                  SonAni_Blink:	dc.b   1,  2,$FD,  0
00016D1C                            		even
00016D1C 0808 0909 0A0A 09FE 05     SonAni_Sit:	dc.b   8, 8, 9, 9, $A, $A,  9, $FE, 5
00016D26 00                         		even
00016D26 000E 0E0E 0E0E 0E0F 0F     SonAni_Peelout: dc.b 	0, $E, $E, $E, $E, $E, $E, $F, $F
00016D2F 0F0F 1010 1111 1213        		dc.b	$F, $F, $10, $10, $11, $11, $12, $13
00016D37 1415 2E2F 3031 32          		dc.b	$14, $15, $2E, $2F, $30, $31, $32
00016D3E 3334 35                    		dc.b	$33, $34, $35
00016D41 4E4F 5051 FE04 FE          		dc.b	$4E, $4F, $50,  $51, -2, 4, $FE
00016D48                            		even
00016D48 1977 78FF                  SonAni_Hang2:	dc.b $19, fr_vhang1, fr_vhang2, $FF	
00016D4C                            		even
00016D4C 0576 FD00                  SonAni_GetAir2: dc.b $5, fr_getair2, afChange, id_Roll
00016D50                            		even
00016D50                            SonAni_Transform:
00016D50 02A1 A1A2 A3A3 A4A4 A4A5   				dc.b 2, $A1,$A1,$A2,$A3,$A3,$A4,$A4,$A4,$A5
00016D5A A6A5 A7A7 A9A8 A9A8 A9A8+  		dc.b	$A6,$A5,$A7,$A7,$A9,$A8,$A9,$A8,$A9,$A8, afchange, id_Walk
00016D66                            		even
00016D66                            
00016D66 =00000000                  id_Walk:	equ (ptr_Walk-Ani_Sonic)/2	; 0
00016D66 =00000001                  id_Run:		equ (ptr_Run-Ani_Sonic)/2	; 1
00016D66 =00000002                  id_Roll:	equ (ptr_Roll-Ani_Sonic)/2	; 2
00016D66 =00000003                  id_Roll2:	equ (ptr_Roll2-Ani_Sonic)/2	; 3
00016D66 =00000004                  id_Push:	equ (ptr_Push-Ani_Sonic)/2	; 4
00016D66 =00000005                  id_Wait:	equ (ptr_Wait-Ani_Sonic)/2	; 5
00016D66 =00000006                  id_Balance:	equ (ptr_Balance-Ani_Sonic)/2	; 6
00016D66 =00000007                  id_LookUp:	equ (ptr_LookUp-Ani_Sonic)/2	; 7
00016D66 =00000008                  id_Duck:	equ (ptr_Duck-Ani_Sonic)/2	; 8
00016D66 =00000009                  id_Warp1:	equ (ptr_Warp1-Ani_Sonic)/2	; 9
00016D66 =0000000A                  id_Warp2:	equ (ptr_Warp2-Ani_Sonic)/2	; $A
00016D66 =0000000B                  id_Warp3:	equ (ptr_Warp3-Ani_Sonic)/2	; $B
00016D66 =0000000C                  id_Warp4:	equ (ptr_Warp4-Ani_Sonic)/2	; $C
00016D66 =0000000D                  id_Stop:	equ (ptr_Stop-Ani_Sonic)/2	; $D
00016D66 =0000000E                  id_Float1:	equ (ptr_Float1-Ani_Sonic)/2	; $E
00016D66 =0000000F                  id_Float2:	equ (ptr_Float2-Ani_Sonic)/2	; $F
00016D66 =00000010                  id_Spring:	equ (ptr_Spring-Ani_Sonic)/2	; $10
00016D66 =00000011                  id_Hang:	equ (ptr_Hang-Ani_Sonic)/2	; $11
00016D66 =00000012                  id_Leap1:	equ (ptr_Leap1-Ani_Sonic)/2	; $12
00016D66 =00000013                  id_Leap2:	equ (ptr_Leap2-Ani_Sonic)/2	; $13
00016D66 =00000014                  id_Surf:	equ (ptr_Surf-Ani_Sonic)/2	; $14
00016D66 =00000015                  id_GetAir:	equ (ptr_GetAir-Ani_Sonic)/2	; $15
00016D66 =00000016                  id_Burnt:	equ (ptr_Burnt-Ani_Sonic)/2	; $16
00016D66 =00000017                  id_Drown:	equ (ptr_Drown-Ani_Sonic)/2	; $17
00016D66 =00000018                  id_Death:	equ (ptr_Death-Ani_Sonic)/2	; $18
00016D66 =00000019                  id_Hurt:	equ (ptr_Hurt-Ani_Sonic)/2	; $19
00016D66 =0000001A                  id_WaterSlide:	equ (ptr_WaterSlide-Ani_Sonic)/2 ; $1A
00016D66 =0000001B                  id_Null:	equ (ptr_Null-Ani_Sonic)/2	; $1B
00016D66 =0000001C                  id_Float3:	equ (ptr_Float3-Ani_Sonic)/2	; $1C
00016D66 =0000001D                  id_Float4:	equ (ptr_Float4-Ani_Sonic)/2	; $1D
00016D66 =0000001E                  id_MaxRun:	equ (ptr_MaxRun-Ani_Sonic)/2	; $1E
00016D66 =0000001F                  id_Spindash:	equ (ptr_Spindash-Ani_Sonic)/2	; $1F
00016D66 =00000020                  id_Hurt2:	equ (ptr_Hurt2-Ani_Sonic)/2	; $21
00016D66 =00000021                  id_GetUp:	equ (ptr_GetUp-Ani_Sonic)/2	; $22
00016D66 =00000022                  id_Blink:	equ (ptr_Blink-Ani_Sonic)/2	; $23
00016D66 =00000023                  id_Sit:		equ (ptr_Sit-Ani_Sonic)/2	; $24
00016D66 =00000024                  id_Peelout:	equ (ptr_Peelout-Ani_Sonic)/2	; $25
00016D66 =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
00016D66 =00000026                  id_GetAir2:	equ (ptr_GetAir2-Ani_Sonic)/2
00016D66 =00000027                  id_Transform:		equ	(ptr_Transform-Ani_Sonic)/2
00016D66 =00000027                  id_Transform:		equ	(ptr_Transform-Ani_Sonic)/2
00016D66                            		include	"_anim\Super Sonic.asm"		
00016D66                            ; ---------------------------------------------------------------------------
00016D66                            ; Animation script - Super Sonic
00016D66                            ; ---------------------------------------------------------------------------
00016D66                            Ani_SuperSonic:
00016D66                            
00016D66 0000                       ptr_SuperWalk:	dc.w SuperSonAni_Walk-Ani_SuperSonic
00016D68 0000                       ptr_SuperRun:	dc.w SuperSonAni_Run-Ani_SuperSonic
00016D6A 0000                       ptr_SuperRoll:	dc.w SuperSonAni_Roll-Ani_SuperSonic
00016D6C 0000                       ptr_SuperRoll2:	dc.w SuperSonAni_Roll2-Ani_SuperSonic
00016D6E 0000                       ptr_SuperPush:	dc.w SuperSonAni_Push-Ani_SuperSonic
00016D70 0000                       ptr_SuperWait:	dc.w SuperSonAni_Wait-Ani_SuperSonic
00016D72 0000                       ptr_SuperBalance:	dc.w SuperSonAni_Balance-Ani_SuperSonic
00016D74 0000                       ptr_SuperLookUp:	dc.w SuperSonAni_LookUp-Ani_SuperSonic
00016D76 0000                       ptr_SuperDuck:	dc.w SuperSonAni_Duck-Ani_SuperSonic
00016D78 0000                       ptr_SuperWarp1:	dc.w SuperSonAni_Warp1-Ani_Sonic
00016D7A 0000                       ptr_SuperWarp2:	dc.w SuperSonAni_Warp2-Ani_Sonic
00016D7C 0000                       ptr_SuperWarp3:	dc.w SuperSonAni_Warp3-Ani_Sonic
00016D7E 0000                       ptr_SuperWarp4:	dc.w SuperSonAni_Warp4-Ani_Sonic
00016D80 0000                       ptr_SuperStop:	dc.w SuperSonAni_Stop-Ani_SuperSonic
00016D82 0000                       ptr_SuperFloat1:	dc.w SuperSonAni_Float1-Ani_SuperSonic
00016D84 0000                       ptr_SuperFloat2:	dc.w SuperSonAni_Float2-Ani_SuperSonic
00016D86 0000                       ptr_SuperSpring:	dc.w SuperSonAni_Spring-Ani_SuperSonic
00016D88 0000                       ptr_SuperHang:	dc.w SuperSonAni_Hang-Ani_SuperSonic
00016D8A 0000                       ptr_SuperLeap1:	dc.w SuperSonAni_Leap1-Ani_SuperSonic
00016D8C 0000                       ptr_SuperLeap2:	dc.w SuperSonAni_Leap2-Ani_SuperSonic
00016D8E 0000                       ptr_SuperSurf:	dc.w SuperSonAni_Surf-Ani_SuperSonic
00016D90 0000                       ptr_SuperGetAir:	dc.w SuperSonAni_GetAir-Ani_SuperSonic
00016D92 0000                       ptr_SuperBurnt:	dc.w SuperSonAni_Burnt-Ani_SuperSonic
00016D94 0000                       ptr_SuperDrown:	dc.w SuperSonAni_Drown-Ani_SuperSonic
00016D96 0000                       ptr_SuperDeath:	dc.w SuperSonAni_Death-Ani_SuperSonic
00016D98 0000                       ptr_SuperHurt:	dc.w SuperSonAni_Hurt-Ani_SuperSonic
00016D9A 0000                       ptr_SuperWaterSlide:	dc.w SuperSonAni_WaterSlide-Ani_Sonic
00016D9C 0000                       ptr_SuperNull:	dc.w SuperSonAni_Null-Ani_Sonic
00016D9E 0000                       ptr_SuperFloat3:	dc.w SuperSonAni_Float3-Ani_SuperSonic
00016DA0 0000                       ptr_SuperFloat4:	dc.w SuperSonAni_Float4-Ani_SuperSonic
00016DA2 0000                       ptr_SuperMaxRun:	dc.w SuperSonAni_MaxRun-Ani_SuperSonic
00016DA4 0000                       ptr_SuperSpindash:	dc.w SuperSonAni_SpinDash-Ani_Sonic ;1F
00016DA6 0000                       ptr_SuperHurt2:	dc.w SuperSonAni_Hurt2-Ani_Sonic
00016DA8 0000                       ptr_SuperGetUp:	dc.w SuperSonAni_GetUp-Ani_Sonic
00016DAA 0000                       ptr_SuperBlink:	dc.w SuperSonAni_Blink-Ani_SuperSonic
00016DAC 0000                       ptr_SuperSit:	dc.w SuperSonAni_Sit-Ani_Sonic
00016DAE 0000                       ptr_SuperPeelout:	dc.w SuperSonAni_Peelout-Ani_SuperSonic
00016DB0 0000                       ptr_SuperHang2:	dc.w SuperSonAni_Hang2-Ani_SuperSonic
00016DB2                            
00016DB2                            
00016DB2 FF10 1112 1314 150E 0FFF+  SuperSonAni_Walk:	dc.b $FF, fr_walk13, fr_walk14,	fr_walk15, fr_walk16, fr_walk17, fr_walk18, fr_walk11, fr_walk12, afEnd, afEnd, afEnd, afEnd
00016DC0 00                         		even
00016DC0 FFCD CECF D0CD CECF D0FF+  SuperSonAni_Run:	dc.b $FF, $CD,  $CE,  $CF,  $D0,  $CD,  $CE,  $CF,  $D0, afEnd, afEnd, afEnd, afEnd
00016DCE 00                         		even
00016DCE FE5E 5F60 6162 66          SuperSonAni_Roll:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016DD5 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016DDC 00                         		even
00016DDC FE5E 5F60 6162 66          SuperSonAni_Roll2:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016DE3 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016DEA 00                         		even
00016DEA FD89 8A8B 8C8D 8E8F 90FF+  SuperSonAni_Push:	dc.b $FD,  fr_push1,  fr_push2,  fr_push3,  fr_push4, fr_push5,  fr_push6,  fr_push7,  fr_push8, afEnd, afEnd, afEnd, afEnd
00016DF8 00                         		even
00016DF8                            SuperSonAni_Wait:	
00016DF8 05AA AAAB ABAC ACFE 06     		dc.b   5,  $AA, $AA, $AB, $AB, $AC, $AC, $FE, 6
00016E02 00                         		even
00016E02 0F72 7374 75FF             SuperSonAni_Balance:	dc.b $F, fr_balance1, fr_balance2, fr_balance3, fr_balance4, afEnd
00016E08                            		even
00016E08 030C 0DFE 01               SuperSonAni_LookUp:	dc.b $3, fr_lookup1, fr_lookup2, afBack, 1
00016E0E 00                         		even
00016E0E 0270 71FE 01               SuperSonAni_Duck:	dc.b $2, fr_duck2, fr_duck, afBack, 1
00016E14 00                         		even
00016E14 3F67 FF                    SuperSonAni_Warp1:	dc.b $3F, fr_warp1, afEnd
00016E18 00                         		even
00016E18 3F68 FF                    SuperSonAni_Warp2:	dc.b $3F, fr_warp2, afEnd
00016E1C 00                         		even
00016E1C 3F69 FF                    SuperSonAni_Warp3:	dc.b $3F, fr_warp3, afEnd
00016E20 00                         		even
00016E20 3F6A FF                    SuperSonAni_Warp4:	dc.b $3F, fr_warp4, afEnd
00016E24 00                         		even
00016E24 026B 6C6C 6D6D 6E6E FD00   SuperSonAni_Stop:	dc.b 2,	fr_stop1, fr_stop2, fr_stop2, fr_stop3, fr_stop3, fr_stop4, fr_stop4, $FD,  0
00016E2E                            		even
00016E2E 077C 82FE 02               SuperSonAni_Float1:	dc.b 7,	fr_float1, fr_float4, afBack, 2
00016E34 00                         		even
00016E34 037C 7D7E 7F80 817B FF     SuperSonAni_Float2:	dc.b 3,	fr_float1, fr_float7, fr_float2, fr_float8, fr_float5, fr_float3, fr_float6, afEnd
00016E3E 00                         		even
00016E3E 0783 8483 8483 84FD 00     SuperSonAni_Spring:	dc.b 7, fr_spring, fr_spring2, fr_spring, fr_spring2, fr_spring, fr_spring2, afChange, id_Walk
00016E48 00                         		even
00016E48 0485 86FF                  SuperSonAni_Hang:	dc.b 4,	fr_hang1, fr_hang2, afEnd
00016E4C                            		even
00016E4C 0F87 8787 FE01             SuperSonAni_Leap1:	dc.b $F, fr_leap1, fr_leap1, fr_leap1,	afBack, 1
00016E52                            		even
00016E52 0F87 88FE 01               SuperSonAni_Leap2:	dc.b $F, fr_leap1, fr_leap2, afBack, 1
00016E58 00                         		even
00016E58 3F91 FF                    SuperSonAni_Surf:	dc.b $3F, fr_surf, afEnd
00016E5C 00                         		even
00016E5C 0B95 9512 13FD 00          SuperSonAni_GetAir:	dc.b $B, fr_getair, fr_getair, fr_walk15, fr_walk16, afChange, id_Walk
00016E64 00                         		even
00016E64 2092 FF                    SuperSonAni_Burnt:	dc.b $20, fr_burnt, afEnd
00016E68 00                         		even
00016E68 2F93 FF                    SuperSonAni_Drown:	dc.b $2F, fr_drown, afEnd
00016E6C 00                         		even
00016E6C 0394 FF                    SuperSonAni_Death:	dc.b 3,	fr_death, afEnd
00016E70 00                         		even
00016E70 0396 FF                    SuperSonAni_Hurt:	dc.b 3,	fr_injury, afEnd
00016E74 00                         		even
00016E74                            SuperSonAni_WaterSlide:
00016E74 0796 97FF                  		dc.b 7, fr_injury, fr_waterslide, afEnd
00016E78                            		even
00016E78 7700 FD00                  SuperSonAni_Null:	dc.b $77, fr_null, afChange, id_Walk
00016E7C                            		even
00016E7C 037C 7E80 817B FF          SuperSonAni_Float3:	dc.b 3,	fr_float1, fr_float2, fr_float5, fr_float3, fr_float6, afEnd
00016E84 00                         		even
00016E84 037C FD00                  SuperSonAni_Float4:	dc.b 3,	fr_float1, afChange, id_Walk
00016E88                            		even
00016E88 FFDD DEDD DEFF FFFF FFFF+  SuperSonAni_MaxRun:  dc.b $FF, $DD, $DE, $DD, $DE, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd
00016E96 00                         		even
00016E96 009B 9C9B 9D9B 9E9B 9F9B+  SuperSonAni_SpinDash: dc.b 0, fr_Spindash1, fr_spindash2, fr_spindash1, fr_spindash3, fr_spindash1, fr_spindash4, fr_spindash1, fr_spindash5, fr_spindash1, fr_spindash6, afEnd
00016EA2                            		even
00016EA2 0298 9699 FF               SuperSonAni_Hurt2:	dc.b 2, fr_skele1, fr_injury, fr_skele2, afEnd	
00016EA8 00                         		even
00016EA8 030B FD00                  SuperSonAni_GetUp:	dc.b 3, $B,$FD,  0
00016EAC                            		even
00016EAC 0102 FD00                  SuperSonAni_Blink:	dc.b   1,  2,$FD,  0
00016EB0                            		even
00016EB0 0808 0909 0A0A 09FE 05     SuperSonAni_Sit:	dc.b   8, 8, 9, 9, $A, $A,  9, $FE, 5
00016EBA 00                         		even
00016EBA 000E 0E0E 0E0E 0E0F 0F     SuperSonAni_Peelout: dc.b 	0, $E, $E, $E, $E, $E, $E, $F, $F
00016EC3 0F0F 1010 1111 1213        		dc.b	$F, $F, $10, $10, $11, $11, $12, $13
00016ECB 1415 2E2F 3031 32          		dc.b	$14, $15, $2E, $2F, $30, $31, $32
00016ED2 3334 35                    		dc.b	$33, $34, $35
00016ED5 4E4F 5051 FE04 FE          		dc.b	$4E, $4F, $50,  $51, -2, 4, $FE
00016EDC                            		even
00016EDC 1077 78FF                  SuperSonAni_Hang2:	dc.b $10, fr_vhang1, fr_vhang2, $FF	
00016EE0                            		even
00016EE0                            		
00016EE0 =FFFFFEF9                  id_SuperWalk:	equ (ptr_Walk-Ani_SuperSonic)/2	; 0
00016EE0 =FFFFFEFA                  id_SuperRun:		equ (ptr_Run-Ani_SuperSonic)/2	; 1
00016EE0 =FFFFFEFB                  id_SuperRoll:	equ (ptr_Roll-Ani_SuperSonic)/2	; 2
00016EE0 =FFFFFEFC                  id_SuperRoll2:	equ (ptr_Roll2-Ani_SuperSonic)/2	; 3
00016EE0 =FFFFFEFD                  id_SuperPush:	equ (ptr_Push-Ani_SuperSonic)/2	; 4
00016EE0 =FFFFFEFE                  id_SuperWait:	equ (ptr_Wait-Ani_SuperSonic)/2	; 5
00016EE0 =FFFFFEFF                  id_SuperBalance:	equ (ptr_Balance-Ani_SuperSonic)/2	; 6
00016EE0 =FFFFFF00                  id_SuperLookUp:	equ (ptr_LookUp-Ani_SuperSonic)/2	; 7
00016EE0 =FFFFFF01                  id_SuperDuck:	equ (ptr_Duck-Ani_SuperSonic)/2	; 8
00016EE0 =FFFFFF06                  id_SuperStop:	equ (ptr_Stop-Ani_SuperSonic)/2	; $D
00016EE0 =FFFFFF09                  id_SuperSpring:	equ (ptr_Spring-Ani_SuperSonic)/2	; $10
00016EE0 =FFFFFF0A                  id_SuperHang:	equ (ptr_Hang-Ani_SuperSonic)/2	; $11
00016EE0 =FFFFFF17                  id_SuperMaxRun:	equ (ptr_MaxRun-Ani_SuperSonic)/2	; $1E
00016EE0 =FFFFFF18                  id_SuperSpindash:	equ (ptr_Spindash-Ani_SuperSonic)/2	; $1F
00016EE0 =FFFFFF1D                  id_SuperPeelout:	equ (ptr_Peelout-Ani_SuperSonic)/2	; $25
00016EE0 =FFFFFF1E                  id_SuperHang2:		equ	(ptr_Hang2-Ani_SuperSonic)/2
00016EE0 =FFFFFF1E                  id_SuperHang2:		equ	(ptr_Hang2-Ani_SuperSonic)/2
00016EE0                            		include	"_incObj\Sonic LoadGfx.asm"
00016EE0                            ; ---------------------------------------------------------------------------
00016EE0                            ; Sonic	graphics loading subroutine
00016EE0                            ; ---------------------------------------------------------------------------
00016EE0                            
00016EE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016EE0                            
00016EE0                            
00016EE0                            Sonic_LoadGfx:			; XREF: Obj01_Control; et al
00016EE0 7000                       		moveq	#0,d0
00016EE2 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00016EE6 B038 F766                  		cmp.b	($FFFFF766).w,d0
00016EEA 6700                       		beq.s	locret_13C96
00016EEC 11C0 F766                  		move.b	d0,($FFFFF766).w
00016EF0 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00016EF6 D040                       		add.w	d0,d0
00016EF8 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016EFC 7A00                       		moveq	#0,d5
00016EFE 1A1A                       		move.b	(a2)+,d5
00016F00 5345                       		subq.w	#1,d5
00016F02 6B00                       		bmi.s	locret_13C96
00016F04 383C F000                  		move.w	#$F000,d4
00016F08 2C3C 0000 0000             		move.l	#Art_Sonic,d6
00016F0E                            
00016F0E                            SPLC_ReadEntry:
00016F0E 7200                       		moveq	#0,d1
00016F10 121A                       		move.b	(a2)+,d1
00016F12 E149                       		lsl.w	#8,d1
00016F14 121A                       		move.b	(a2)+,d1
00016F16 3601                       		move.w	d1,d3
00016F18 E04B                       		lsr.w	#8,d3
00016F1A 0243 00F0                  		andi.w	#$F0,d3
00016F1E 0643 0010                  		addi.w	#$10,d3
00016F22 0241 0FFF                  		andi.w	#$FFF,d1
00016F26 EB89                       		lsl.l	#5,d1
00016F28 D286                       		add.l	d6,d1
00016F2A 3404                       		move.w	d4,d2
00016F2C D843                       		add.w	d3,d4
00016F2E D843                       		add.w	d3,d4
00016F30 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
00016F36 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
00016F3A                            
00016F3A                            locret_13C96:
00016F3A 4E75                       		rts	
00016F3C                            ; End of function Sonic_LoadGfx
00016F3C                            ; End of function Sonic_LoadGfx
00016F3C                            
00016F3C                            		include	"_incObj\0A Drowning Countdown.asm"
00016F3C                            ; ---------------------------------------------------------------------------
00016F3C                            ; Object 0A - drowning countdown numbers and small bubbles that float out of
00016F3C                            ; Sonic's mouth (LZ)
00016F3C                            ; ---------------------------------------------------------------------------
00016F3C                            
00016F3C                            DrownCount:
00016F3C 7000                       		moveq	#0,d0
00016F3E 1028 0024                  		move.b	obRoutine(a0),d0
00016F42 323B 0000                  		move.w	Drown_Index(pc,d0.w),d1
00016F46 4EFB 1000                  		jmp	Drown_Index(pc,d1.w)
00016F4A                            ; ===========================================================================
00016F4A                            Drown_Index:
00016F4A 0000                       ptr_Drown_Main:		dc.w Drown_Main-Drown_Index
00016F4C 0000                       ptr_Drown_Animate:	dc.w Drown_Animate-Drown_Index
00016F4E 0000                       ptr_Drown_ChkWater:	dc.w Drown_ChkWater-Drown_Index
00016F50 0000                       ptr_Drown_Display:	dc.w Drown_Display-Drown_Index
00016F52 0000                       ptr_Drown_Delete:	dc.w Drown_Delete-Drown_Index
00016F54 0000                       ptr_Drown_Countdown:	dc.w Drown_Countdown-Drown_Index
00016F56 0000                       ptr_Drown_AirLeft:	dc.w Drown_AirLeft-Drown_Index
00016F58 0000                       			dc.w Drown_Display-Drown_Index
00016F5A 0000                       			dc.w Drown_Delete-Drown_Index
00016F5C                            
00016F5C =00000030                  drown_origX:		equ $30		; original x-axis position
00016F5C =00000038                  drown_time:		equ $38		; time between each number changes
00016F5C                            
00016F5C =00000000                  id_Drown_Main:		equ ptr_Drown_Main-Drown_Index		; 0
00016F5C =00000002                  id_Drown_Animate:	equ ptr_Drown_Animate-Drown_Index		; 2
00016F5C =00000004                  id_Drown_ChkWater:	equ ptr_Drown_ChkWater-Drown_Index	; 4
00016F5C =00000006                  id_Drown_Display:	equ ptr_Drown_Display-Drown_Index		; 6
00016F5C =00000008                  id_Drown_Delete:		equ ptr_Drown_Delete-Drown_Index		; 8
00016F5C =0000000A                  id_Drown_Countdown:	equ ptr_Drown_Countdown-Drown_Index	; $A
00016F5C =0000000C                  id_Drown_AirLeft:	equ ptr_Drown_AirLeft-Drown_Index		; $C
00016F5C                            ; ===========================================================================
00016F5C                            
00016F5C                            Drown_Main:	; Routine 0
00016F5C 5428 0024                  		addq.b	#2,obRoutine(a0)
00016F60 217C 0001 4D5E 0004        		move.l	#Map_Bub,obMap(a0)
00016F68 317C 83F5 0002             		move.w	#$83F5,obGfx(a0)
00016F6E 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; is level Spring Yard Zone?
00016F74 6700                       		beq.s	Drown_IsSYZ	; if yes, branch
00016F76 317C 8348 0002             		move.w	#$8348,obGfx(a0)	; LZ
00016F7C                            
00016F7C                            	Drown_IsSYZ:	
00016F7C 117C 0084 0001             		move.b	#$84,obRender(a0)
00016F82 117C 0010 0014             		move.b	#$10,obActWid(a0)
00016F88 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016F8E 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
00016F92 6A00                       		bpl.s	@smallbubble	; branch if $00-$7F
00016F94                            
00016F94 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Drown_Countdown next
00016F98 217C 0000 0000 0004        		move.l	#Map_Drown,obMap(a0)
00016FA0 317C 0440 0002             		move.w	#$440,obGfx(a0)
00016FA6 0240 007F                  		andi.w	#$7F,d0
00016FAA 1140 0033                  		move.b	d0,$33(a0)
00016FAE 6000 0000                  		bra.w	Drown_Countdown
00016FB2                            ; ===========================================================================
00016FB2                            
00016FB2                            @smallbubble:
00016FB2 1140 001C                  		move.b	d0,obAnim(a0)
00016FB6 3168 0008 0030             		move.w	obX(a0),drown_origX(a0)
00016FBC 317C FF78 0012             		move.w	#-$88,obVelY(a0)
00016FC2                            
00016FC2                            Drown_Animate:	; Routine 2
00016FC2 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016FC8 4EB9 0000 C880             		jsr	(AnimateSprite).l
00016FCE                            
00016FCE                            Drown_ChkWater:	; Routine 4
00016FCE 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; is level Spring Yard Zone? TIS
00016FD4 6600                       		bne.s	Normal_Water_Level	; if not, branch TIS
00016FD6 3038 FF92                  		move.w	(v_watersplashpos).w,d0	;TIS
00016FDA 0640 0010                  		add.w	#$10,d0	;Lower it a little - TIS
00016FDE B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water tag surface? - TIS
00016FE2 6200                       		bhi.s	Display_Next		; if so, branch TIS
00016FE4                            		
00016FE4                            
00016FE4                            Normal_Water_Level:
00016FE4 3038 F646                  		move.w	(v_waterpos1).w,d0
00016FE8 B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water surface?
00016FEC 6500                       		bcs.s	Wobble		; if not, branch
00016FEE                            Display_Next:	;TIS		
00016FEE 117C 0006 0024             		move.b	#id_Drown_Display,obRoutine(a0) ; goto Drown_Display next
00016FF4 5E28 001C                  		addq.b	#7,obAnim(a0)
00016FF8 0C28 000D 001C             		cmpi.b	#$D,obAnim(a0)
00016FFE 6700                       		beq.s	Drown_Display
00017000 6000                       		bra.s	Drown_Display
00017002                            ; ===========================================================================
00017002                            
00017002                            Wobble:
00017002 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic in a water tunnel?
00017006 6700                       		beq.s	@notunnel	; if not, branch
00017008 5868 0030                  		addq.w	#4,drown_origX(a0)
0001700C                            
0001700C                            	@notunnel:
0001700C 1028 0026                  		move.b	obAngle(a0),d0
00017010 5228 0026                  		addq.b	#1,obAngle(a0)
00017014 0240 007F                  		andi.w	#$7F,d0
00017018 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
0001701E 1031 0000                  		move.b	(a1,d0.w),d0
00017022 4880                       		ext.w	d0
00017024 D068 0030                  		add.w	drown_origX(a0),d0
00017028 3140 0008                  		move.w	d0,obX(a0)
0001702C 6100                       		bsr.s	Drown_ShowNumber
0001702E 4EB9 0000 F7B6             		jsr	(SpeedToPos).l
00017034 4A28 0001                  		tst.b	obRender(a0)
00017038 6A00                       		bpl.s	@delete
0001703A 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
00017040                            
00017040                            	@delete:
00017040 4EF9 0000 F80A             		jmp	(DeleteObject).l
00017046                            ; ===========================================================================
00017046                            
00017046                            Drown_Display:	; Routine 6, Routine $E
00017046 6100                       		bsr.s	Drown_ShowNumber
00017048 43F9 0000 0000             		lea	(Ani_Drown).l,a1
0001704E 4EB9 0000 C880             		jsr	(AnimateSprite).l
00017054 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001705A                            ; ===========================================================================
0001705A                            
0001705A                            Drown_Delete:	; Routine 8, Routine $10
0001705A 4EF9 0000 F80A             		jmp	(DeleteObject).l
00017060                            ; ===========================================================================
00017060                            
00017060                            Drown_AirLeft:	; Routine $C
00017060 0C78 000C FE14             		cmpi.w	#$C,(v_air).w	; check air remaining
00017066 6200                       		bhi.s	Drown_AirLeft_Delete		; if higher than $C, branch
00017068 5368 0038                  		subq.w	#1,drown_time(a0)
0001706C 6600                       		bne.s	@display
0001706E 117C 000E 0024             		move.b	#id_Drown_Display+8,obRoutine(a0) ; goto Drown_Display next
00017074 5E28 001C                  		addq.b	#7,obAnim(a0)
00017078 60CC                       		bra.s	Drown_Display
0001707A                            ; ===========================================================================
0001707A                            
0001707A                            	@display:
0001707A 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00017080 4EB9 0000 C880             		jsr	(AnimateSprite).l
00017086 4A28 0001                  		tst.b	obRender(a0)
0001708A 6A00                       		bpl.s	Drown_AirLeft_Delete
0001708C 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
00017092                            
00017092                            Drown_AirLeft_Delete:	
00017092 4EF9 0000 F80A             		jmp	(DeleteObject).l
00017098                            ; ===========================================================================
00017098                            
00017098                            Drown_ShowNumber:
00017098 4A68 0038                  		tst.w	drown_time(a0)
0001709C 6700                       		beq.s	@nonumber
0001709E 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
000170A2 6600                       		bne.s	@nonumber	; if time remains, branch
000170A4 0C28 0007 001C             		cmpi.b	#7,obAnim(a0)
000170AA 6400                       		bcc.s	@nonumber
000170AC                            
000170AC 317C 000F 0038             		move.w	#15,drown_time(a0)
000170B2 4268 0012                  		clr.w	obVelY(a0)
000170B6 117C 0080 0001             		move.b	#$80,obRender(a0)
000170BC 3028 0008                  		move.w	obX(a0),d0
000170C0 9078 F700                  		sub.w	(v_screenposx).w,d0
000170C4 0640 0080                  		addi.w	#$80,d0
000170C8 3140 0008                  		move.w	d0,obX(a0)
000170CC 3028 000C                  		move.w	obY(a0),d0
000170D0 9078 F704                  		sub.w	(v_screenposy).w,d0
000170D4 0640 0080                  		addi.w	#$80,d0
000170D8 3140 000A                  		move.w	d0,obScreenY(a0)
000170DC 117C 000C 0024             		move.b	#id_Drown_AirLeft,obRoutine(a0) ; goto Drown_AirLeft next
000170E2                            
000170E2                            	@nonumber:
000170E2 4E75                       		rts	
000170E4                            ; ===========================================================================
000170E4                            Drown_WobbleData:
000170E4 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
000170F4 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00017104 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00017114 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00017124 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00017134 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00017144 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
00017154 FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
00017164 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00017174 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00017184 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00017194 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
000171A4 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
000171B4 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000171C4 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
000171D4 FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
000171E4                            ; ===========================================================================
000171E4                            
000171E4                            Drown_Countdown:; Routine $A
000171E4 4A68 002C                  		tst.w	$2C(a0)
000171E8 6600 0000                  		bne.w	@loc_13F86
000171EC 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
000171F2 6400 0000                  		bcc.w	@nocountdown
000171F6 0838 0006 D022             		btst	#6,(v_player+obStatus).w ; is Sonic underwater?
000171FC 6700 0000                  		beq.w	@nocountdown	; if not, branch
00017200                            
00017200 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
00017204 6A00 0000                  		bpl.w	@nochange	; branch if time remains
00017208 317C 003B 0038             		move.w	#59,drown_time(a0)
0001720E 317C 0001 0036             		move.w	#1,$36(a0)
00017214 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001721A 0240 0001                  		andi.w	#1,d0
0001721E 1140 0034                  		move.b	d0,$34(a0)
00017222 3038 FE14                  		move.w	(v_air).w,d0	; check air remaining
00017226 0C40 0019                  		cmpi.w	#25,d0
0001722A 6700                       		beq.s	@warnsound	; play sound if	air is 25
0001722C 0C40 0014                  		cmpi.w	#20,d0
00017230 6700                       		beq.s	@warnsound
00017232 0C40 000F                  		cmpi.w	#15,d0
00017236 6700                       		beq.s	@warnsound
00017238 0C40 000C                  		cmpi.w	#12,d0
0001723C 6200                       		bhi.s	@reduceair	; if air is above 12, branch
0001723E                            
0001723E                            	@skipmusic:
00017248 5328 0032                  		subq.b	#1,$32(a0)
0001724C 6A00                       		bpl.s	@reduceair
0001724E 1168 0033 0032             		move.b	$33(a0),$32(a0)
00017254 08E8 0007 0036             		bset	#7,$36(a0)
0001725A 6000                       		bra.s	@reduceair
0001725C                            ; ===========================================================================
0001725C                            
0001725C                            @warnsound:
00017266                            
00017266                            @reduceair:
00017266 5378 FE14                  		subq.w	#1,(v_air).w	; subtract 1 from air remaining
0001726A 6400 0000                  		bcc.w	@gotomakenum	; if air is above 0, branch
0001726E                            
0001726E                            		; Sonic drowns here
0001726E 6100 0000                  		bsr.w	ResumeMusic
00017272 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
00017282 31FC 0000 FF92             		move.w	#0,(v_watersplashpos).w	;max it out for now - TIS
00017288 117C 000A 0034             		move.b	#$A,$34(a0)
0001728E 317C 0001 0036             		move.w	#1,$36(a0)
00017294 317C 0078 002C             		move.w	#$78,$2C(a0)
0001729A 2F08                       		move.l	a0,-(sp)
0001729C 41F8 D000                  		lea	(v_player).w,a0
000172A0 6100 F4DE                  		bsr.w	Sonic_ResetOnFloor
000172A4 117C 0017 001C             		move.b	#id_Drown,obAnim(a0)	; use Sonic's drowning animation
000172AA 08E8 0001 0022             		bset	#1,obStatus(a0)
000172B0 08E8 0007 0002             		bset	#7,obGfx(a0)
000172B6 317C 0000 0012             		move.w	#0,obVelY(a0)
000172BC 317C 0000 0010             		move.w	#0,obVelX(a0)
000172C2 317C 0000 0020             		move.w	#0,obInertia(a0)
000172C8 11FC 0001 F744             		move.b	#1,(f_nobgscroll).w
000172CE 205F                       		movea.l	(sp)+,a0
000172D0 4E75                       		rts	
000172D2                            ; ===========================================================================
000172D2                            
000172D2                            @loc_13F86:
000172D2 5368 002C                  		subq.w	#1,$2C(a0)
000172D6 6600                       		bne.s	@loc_13F94
000172D8 11FC 0006 D024             		move.b	#6,(v_player+obRoutine).w
000172DE 4E75                       		rts	
000172E0                            ; ===========================================================================
000172E0                            
000172E0                            	@loc_13F94:
000172E0 2F08                       		move.l	a0,-(sp)
000172E2 41F8 D000                  		lea	(v_player).w,a0
000172E6 4EB9 0000 F7B6             		jsr	(SpeedToPos).l
000172EC 0668 0010 0012             		addi.w	#$10,obVelY(a0)
000172F2 205F                       		movea.l	(sp)+,a0
000172F4 6000                       		bra.s	@nochange
000172F6                            ; ===========================================================================
000172F6                            
000172F6                            @gotomakenum:
000172F6 6000                       		bra.s	@makenum
000172F8                            ; ===========================================================================
000172F8                            
000172F8                            @nochange:
000172F8 4A68 0036                  		tst.w	$36(a0)
000172FC 6700 0000                  		beq.w	@nocountdown
00017300 5368 003A                  		subq.w	#1,$3A(a0)
00017304 6A00 0000                  		bpl.w	@nocountdown
00017308                            
00017308                            @makenum:
00017308 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001730E 0240 000F                  		andi.w	#$F,d0
00017312 3140 003A                  		move.w	d0,$3A(a0)
00017316 4EB9 0000 FD64             		jsr	(FindFreeObj).l
0001731C 6600 0000                  		bne.w	@nocountdown
00017320 12BC 000A                  		move.b	#id_DrownCount,0(a1) ; load object
00017324 3378 D008 0008             		move.w	(v_player+obX).w,obX(a1) ; match X position to Sonic
0001732A 7006                       		moveq	#6,d0
0001732C 0838 0000 D022             		btst	#0,(v_player+obStatus).w
00017332 6700                       		beq.s	@noflip
00017334 4440                       		neg.w	d0
00017336 137C 0040 0026             		move.b	#$40,obAngle(a1)
0001733C                            
0001733C                            	@noflip:
0001733C D169 0008                  		add.w	d0,obX(a1)
00017340 3378 D00C 000C             		move.w	(v_player+obY).w,obY(a1)
00017346 137C 0006 0028             		move.b	#6,obSubtype(a1)
0001734C 4A68 002C                  		tst.w	$2C(a0)
00017350 6700 0000                  		beq.w	@loc_1403E
00017354 0268 0007 003A             		andi.w	#7,$3A(a0)
0001735A 0668 0000 003A             		addi.w	#0,$3A(a0)
00017360 3038 D00C                  		move.w	(v_player+obY).w,d0
00017364 0440 000C                  		subi.w	#$C,d0
00017368 3340 000C                  		move.w	d0,obY(a1)
0001736C 4EB9 0000 3CA4             		jsr	(RandomNumber).l
00017372 1340 0026                  		move.b	d0,obAngle(a1)
00017376 3038 FE04                  		move.w	(v_framecount).w,d0
0001737A 0200 0003                  		andi.b	#3,d0
0001737E 6600                       		bne.s	@loc_14082
00017380 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00017386 6000                       		bra.s	@loc_14082
00017388                            ; ===========================================================================
00017388                            
00017388                            @loc_1403E:
00017388 0828 0007 0036             		btst	#7,$36(a0)
0001738E 6700                       		beq.s	@loc_14082
00017390 3438 FE14                  		move.w	(v_air).w,d2
00017394 E24A                       		lsr.w	#1,d2
00017396 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001739C 0240 0003                  		andi.w	#3,d0
000173A0 6600                       		bne.s	@loc_1406A
000173A2 08E8 0006 0036             		bset	#6,$36(a0)
000173A8 6600                       		bne.s	@loc_14082
000173AA 1342 0028                  		move.b	d2,obSubtype(a1)
000173AE 337C 001C 0038             		move.w	#$1C,drown_time(a1)
000173B4                            
000173B4                            	@loc_1406A:
000173B4 4A28 0034                  		tst.b	$34(a0)
000173B8 6600                       		bne.s	@loc_14082
000173BA 08E8 0006 0036             		bset	#6,$36(a0)
000173C0 6600                       		bne.s	@loc_14082
000173C2 1342 0028                  		move.b	d2,obSubtype(a1)
000173C6 337C 001C 0038             		move.w	#$1C,drown_time(a1)
000173CC                            
000173CC                            @loc_14082:
000173CC 5328 0034                  		subq.b	#1,$34(a0)
000173D0 6A00                       		bpl.s	@nocountdown
000173D2 4268 0036                  		clr.w	$36(a0)
000173D6                            
000173D6                            @nocountdown:
000173D6 4E75                       		rts	
000173D6 4E75                       		rts	
000173D8                            
000173D8                            
000173D8                            ; ---------------------------------------------------------------------------
000173D8                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
000173D8                            ; ---------------------------------------------------------------------------
000173D8                            
000173D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000173D8                            
000173D8                            
000173D8                            ResumeMusic:
000173D8                            		;cmpi.w	#12,(v_air).w	; more than 12 seconds of air left?
000173D8                            		;bhi.s	@over12		; if yes, branch
000173D8                            		;move.b	(v_Saved_music),d0
000173D8                            		;tst.b	(v_invinc).w ; is Sonic invincible?
000173D8                            		;beq.s	@notinvinc ; if not, branch
000173D8                            		;move.w	#bgm_Invincible,d0
000173D8                            		;tst.b	(v_shoes).w ; is Sonic speed shoes?
000173D8                            		;beq.s	@notinvinc	; if not, branch
000173D8                            		;move.w	#bgm_Ending,d0
000173D8                            
000173D8                            	;@notinvinc:
000173D8                            		;tst.b	(f_lockscreen).w ; is Sonic at a boss?
000173D8                            		;beq.s	@playselected ; if not, branch
000173D8                            		;move.w	#bgm_Boss,d0
000173D8                            
000173D8                            	;@playselected:
000173D8                            		;jsr	(PlaySound).l
000173D8                            
000173D8                            	;@over12:
000173D8 31FC 001E FE14             		move.w	#30,(v_air).w	; reset air to 30 seconds
000173DE 4238 D372                  		clr.b	(v_objspace+$340+$32).w
000173E2 4E75                       		rts	
000173E4                            
000173E4                            ;End of function ResumeMusic
000173E4                            
000173E4                            ; ===========================================================================
000173E4                            
000173E4                            		include	"_anim\Drowning Countdown.asm"
000173E4                            ; ---------------------------------------------------------------------------
000173E4                            ; Animation script - countdown numbers and bubbles (LZ)
000173E4                            ; ---------------------------------------------------------------------------
000173E4 0000                       Ani_Drown:	dc.w @zeroappear-Ani_Drown
000173E6 0000                       		dc.w @oneappear-Ani_Drown
000173E8 0000                       		dc.w @twoappear-Ani_Drown
000173EA 0000                       		dc.w @threeappear-Ani_Drown
000173EC 0000                       		dc.w @fourappear-Ani_Drown
000173EE 0000                       		dc.w @fiveappear-Ani_Drown
000173F0 0000                       		dc.w @smallbubble-Ani_Drown
000173F2 0000                       		dc.w @zeroflash-Ani_Drown
000173F4 0000                       		dc.w @oneflash-Ani_Drown
000173F6 0000                       		dc.w @twoflash-Ani_Drown
000173F8 0000                       		dc.w @threeflash-Ani_Drown
000173FA 0000                       		dc.w @fourflash-Ani_Drown
000173FC 0000                       		dc.w @fiveflash-Ani_Drown
000173FE 0000                       		dc.w @blank-Ani_Drown
00017400 0000                       		dc.w @mediumbubble-Ani_Drown
00017402 0500 0102 0304 090D FC     @zeroappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, afRoutine
0001740C 00                         		even
0001740C 0500 0102 0304 0C12 FC     @oneappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	afRoutine
00017416 00                         		even
00017416 0500 0102 0304 0C11 FC     @twoappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	afRoutine
00017420 00                         		even
00017420 0500 0102 0304 0B10 FC     @threeappear:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	afRoutine
0001742A 00                         		even
0001742A 0500 0102 0304 090F FC     @fourappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, afRoutine
00017434 00                         		even
00017434 0500 0102 0304 0A0E FC     @fiveappear:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, afRoutine
0001743E 00                         		even
0001743E 0E00 0102 FC               @smallbubble:	dc.b $E, 0, 1, 2, afRoutine
00017444 00                         		even
00017444 0716 0D16 0D16 0DFC        @zeroflash:	dc.b 7,	$16, $D, $16, $D, $16, $D, afRoutine
0001744C 0716 1216 1216 12FC        @oneflash:	dc.b 7,	$16, $12, $16, $12, $16, $12, afRoutine
00017454 0716 1116 1116 11FC        @twoflash:	dc.b 7,	$16, $11, $16, $11, $16, $11, afRoutine
0001745C 0716 1016 1016 10FC        @threeflash:	dc.b 7,	$16, $10, $16, $10, $16, $10, afRoutine
00017464 0716 0F16 0F16 0FFC        @fourflash:	dc.b 7,	$16, $F, $16, $F, $16, $F, afRoutine
0001746C 0716 0E16 0E16 0EFC        @fiveflash:	dc.b 7,	$16, $E, $16, $E, $16, $E, afRoutine
00017474 0EFC                       @blank:		dc.b $E, afRoutine
00017476 0E01 0203 04FC             @mediumbubble:	dc.b $E, 1, 2, 3, 4, afRoutine
0001747C                            		even
0001747C                            		even
0001747C                            Map_Drown:	include	"_maps\Drowning Countdown.asm"
0001747C                            ; ---------------------------------------------------------------------------
0001747C                            ; Sprite mappings - drowning countdown numbers (LZ)
0001747C                            ; ---------------------------------------------------------------------------
0001747C                            Map_Drown_internal:
0001747C 0000                       		dc.w @num-Map_Drown_internal
0001747E 01                         @num:		dc.b 1
0001747F E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00017484                            		even
00017484                            		even
00017484                            
00017484                            ; --------------------------------------------------
00017484                            ; Subroutine to load the shield's art over DMA
00017484                            ; --------------------------------------------------
00017484                            
00017484                            PLCLoad_Shields:
00017484 7000                       		moveq	#0,d0
00017486 1028 001A                  		move.b	obFrame(a0),d0	; load frame number
0001748A B028 0033                  		cmp.b	shield_LastLoadedDPLC(a0),d0
0001748E 6700                       		beq.s	locret2_13C96
00017490 1140 0033                  		move.b	d0,shield_LastLoadedDPLC(a0)
00017494 2468 003C                  		move.l  shield_DPLC_Address(A0),a2
00017498 D040                       		add.w   d0,d0
0001749A D4F2 0000                  		adda.w  (a2,D0),a2
0001749E 3A1A                       		move.w  (a2)+,d5
000174A0 5345                       		subq.w  #1,d5
000174A2 6B00                       		bmi.s	locret2_13C96
000174A4 3828 0036                  		move.w  shield_vram_art(A0),d4
000174A8                            
000174A8                            loc_199BE:
000174A8 7200                       		moveq	#0,d1
000174AA 121A                       		move.b	(a2)+,d1
000174AC E149                       		lsl.w	#8,d1
000174AE 121A                       		move.b	(a2)+,d1
000174B0 3601                       		move.w	d1,d3
000174B2 E04B                       		lsr.w	#8,d3
000174B4 0243 00F0                  		andi.w	#$F0,d3
000174B8 0643 0010                  		addi.w	#$10,d3
000174BC 0241 0FFF                  		andi.w	#$FFF,d1
000174C0 EB89                       		lsl.l	#5,d1
000174C2 D2A8 0038                  		add.l   shield_Art_Address(a0),d1
000174C6 3404                       		move.w  d4,d2
000174C8 D843                       		add.w   d3,d4
000174CA D843                       		add.w   d3,d4
000174CC 4EB9 0000 1476             		jsr     (QueueDMATransfer).l
000174D2 51CD FFD4                  		dbf     d5,loc_199BE	; repeat for number of entries
000174D6                            
000174D6                            locret2_13C96:
000174D6 4E75                       		rts	
000174D8                            ; End of function PLCLoad_Shields
000174D8                            
000174D8                            		include	"_incObj\4E Silver Shield.asm"
000174D8                            ; ---------------------------------------------------------------------------
000174D8                            ; Object 4E - Silver Shield
000174D8                            ; ---------------------------------------------------------------------------
000174D8                            SPShieldItem: ; XREF: Obj_Index
000174D8 7000                       		moveq	#0,d0
000174DA 1028 0024                  		move.b	obRoutine(a0),d0
000174DE 323B 0000                  		move.w	SPShieldItem_Index(pc,d0.w),d1
000174E2 4EFB 1000                  		jmp	SPShieldItem_Index(pc,d1.w)
000174E6                            ; ===========================================================================
000174E6                            ; off_1D900:
000174E6                            SPShieldItem_Index:
000174E6 0000                       		dc.w SPShieldItem_Init-SPShieldItem_Index	; 0
000174E8 0000                       		dc.w SPShieldItem_Main-SPShieldItem_Index	; 2
000174EA                            ; ===========================================================================
000174EA                            ; loc_1D904:
000174EA                            SPShieldItem_Init:
000174EA 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
000174F2 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
000174FA 217C 0000 0000 0038        		move.l	#Art_SpShield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
00017502 117C 0004 0001             		move.b	#4,obRender(a0)
00017508 317C 0080 0018             		move.w	#$80,obPriority(a0)
0001750E 117C 0018 0014             		move.b	#$18,obActWid(a0)
00017514 317C 0541 0002             		move.w	#$541,obGfx(a0)
0001751A 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
00017520 0838 0007 D002             		btst	#7,(v_player+obGfx).w
00017526 6700                       		beq.s	@animclear
00017528 08E8 0007 0002             		bset	#7,obGfx(a0)
0001752E                            
0001752E                            @animclear:
0001752E 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
00017534 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
0001753A 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
0001753E                            ; loc_1D92C:
0001753E                            SPShieldItem_Main:
0001753E 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
00017542 4A38 FE2D                  		tst.b	(v_invinc).w
00017546 6600                       		bne.s	@return
00017548                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
00017548                            		;beq.s	@return	; If so, do not display and do not update variables
00017548 4A38 F5CA                  		tst.b	(v_SpShield).w
0001754C 6700 0000                  		beq.w	SPShieldItem_Destroy	; If not, change to Insta-Shield
00017550 316A 0008 0008             		move.w	obX(a2),obX(a0)
00017556 316A 000C 000C             		move.w	obY(a2),obY(a0)
0001755C 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
00017562 4A6A 0002                  		tst.w	obGFX(a2)
00017566 6A00                       		bpl.s	@nothighpriority
00017568 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
0001756E                            
0001756E                            		@nothighpriority:
0001756E 43F9 0000 0000             		lea	(Ani_Shield).l,a1
00017574 4EB9 0000 C880             		jsr	(AnimateSprite).l
0001757A 4EB9 0001 7484             		jsr	(PLCLoad_Shields).l
00017580 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
00017586                            ; ---------------------------------------------------------------------------
00017586                            ; ===========================================================================
00017586                            
00017586                            @return:
00017586 4E75                       		rts
00017588                            
00017588                            SPShieldItem_Destroy:
00017588 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
0001758C 4E75                       		rts
0001758E                            ; ===========================================================================
0001758E                            ; ===========================================================================
0001758E                            		include	"_incObj\04 Gold Shield.asm"
0001758E                            ; ---------------------------------------------------------------------------
0001758E                            ; Object 04 - Gold Shield
0001758E                            ; ---------------------------------------------------------------------------
0001758E                            GShieldItem: ; XREF: Obj_Index
0001758E 7000                       		moveq	#0,d0
00017590 1028 0024                  		move.b	obRoutine(a0),d0
00017594 323B 0000                  		move.w	GShieldItem_Index(pc,d0.w),d1
00017598 4EFB 1000                  		jmp	GShieldItem_Index(pc,d1.w)
0001759C                            ; ===========================================================================
0001759C                            ; off_1D900:
0001759C                            GShieldItem_Index:
0001759C 0000                       		dc.w GShieldItem_Init-GShieldItem_Index	; 0
0001759E 0000                       		dc.w GShieldItem_Main-GShieldItem_Index	; 2
000175A0                            ; ===========================================================================
000175A0                            ; loc_1D904:
000175A0                            GShieldItem_Init:
000175A0 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
000175A8 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
000175B0 217C 0000 0000 0038        		move.l	#Art_GShield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
000175B8 117C 0004 0001             		move.b	#4,obRender(a0)
000175BE 317C 0080 0018             		move.w	#$80,obPriority(a0)
000175C4 117C 0018 0014             		move.b	#$18,obActWid(a0)
000175CA 317C 0541 0002             		move.w	#$541,obGfx(a0)
000175D0 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
000175D6 0838 0007 D002             		btst	#7,(v_player+obGfx).w
000175DC 6700                       		beq.s	@animclear
000175DE 08E8 0007 0002             		bset	#7,obGfx(a0)
000175E4                            
000175E4                            @animclear:
000175E4 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
000175EA 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
000175F0 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
000175F4                            ; loc_1D92C:
000175F4                            GShieldItem_Main:
000175F4 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
000175F8 4A38 FE2D                  		tst.b	(v_invinc).w
000175FC 6600                       		bne.s	@return
000175FE                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
000175FE                            		;beq.s	@return	; If so, do not display and do not update variables
000175FE 4A38 F5C9                  		tst.b	(v_GShield).w
00017602 6700 0000                  		beq.w	GShieldItem_Destroy	; If not, change to Insta-Shield
00017606 316A 0008 0008             		move.w	obX(a2),obX(a0)
0001760C 316A 000C 000C             		move.w	obY(a2),obY(a0)
00017612 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
00017618 4A6A 0002                  		tst.w	obGFX(a2)
0001761C 6A00                       		bpl.s	@nothighpriority
0001761E 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
00017624                            
00017624                            		@nothighpriority:
00017624 43F9 0000 0000             		lea	(Ani_Shield).l,a1
0001762A 4EB9 0000 C880             		jsr	(AnimateSprite).l
00017630 4EB9 0001 7484             		jsr	(PLCLoad_Shields).l
00017636 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001763C                            ; ---------------------------------------------------------------------------
0001763C                            ; ===========================================================================
0001763C                            
0001763C                            @return:
0001763C 4E75                       		rts
0001763E                            
0001763E                            GShieldItem_Destroy:
0001763E 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
00017642 4E75                       		rts
00017644                            ; ===========================================================================
00017644                            ; ===========================================================================
00017644                            		include	"_incObj\07 Red Shield.asm"
00017644                            ; ---------------------------------------------------------------------------
00017644                            ; Object 07 - Red Shield
00017644                            ; ---------------------------------------------------------------------------
00017644                            RShieldItem: ; XREF: Obj_Index
00017644 7000                       		moveq	#0,d0
00017646 1028 0024                  		move.b	obRoutine(a0),d0
0001764A 323B 0000                  		move.w	RShieldItem_Index(pc,d0.w),d1
0001764E 4EFB 1000                  		jmp	RShieldItem_Index(pc,d1.w)
00017652                            ; ===========================================================================
00017652                            ; off_1D900:
00017652                            RShieldItem_Index:
00017652 0000                       		dc.w RShieldItem_Init-RShieldItem_Index	; 0
00017654 0000                       		dc.w RShieldItem_Main-RShieldItem_Index	; 2
00017656                            ; ===========================================================================
00017656                            ; loc_1D904:
00017656                            RShieldItem_Init:
00017656 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
0001765E 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
00017666 217C 0000 0000 0038        		move.l	#Art_RedShield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
0001766E 117C 0004 0001             		move.b	#4,obRender(a0)
00017674 317C 0080 0018             		move.w	#$80,obPriority(a0)
0001767A 117C 0018 0014             		move.b	#$18,obActWid(a0)
00017680 317C 0541 0002             		move.w	#$541,obGfx(a0)
00017686 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
0001768C 0838 0007 D002             		btst	#7,(v_player+obGfx).w
00017692 6700                       		beq.s	@animclear
00017694 08E8 0007 0002             		bset	#7,obGfx(a0)
0001769A                            
0001769A                            @animclear:
0001769A 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
000176A0 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
000176A6 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
000176AA                            ; loc_1D92C:
000176AA                            RShieldItem_Main:
000176AA 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
000176AE 4A38 FE2D                  		tst.b	(v_invinc).w
000176B2 6600                       		bne.s	@return
000176B4                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
000176B4                            		;beq.s	@return	; If so, do not display and do not update variables
000176B4 4A38 F5C8                  		tst.b	(v_RShield).w
000176B8 6700 0000                  		beq.w	RShieldItem_Destroy	; If not, change to Insta-Shield
000176BC 316A 0008 0008             		move.w	obX(a2),obX(a0)
000176C2 316A 000C 000C             		move.w	obY(a2),obY(a0)
000176C8 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
000176CE 4A6A 0002                  		tst.w	obGFX(a2)
000176D2 6A00                       		bpl.s	@nothighpriority
000176D4 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
000176DA                            
000176DA                            		@nothighpriority:
000176DA 43F9 0000 0000             		lea	(Ani_Shield).l,a1
000176E0 4EB9 0000 C880             		jsr	(AnimateSprite).l
000176E6 4EB9 0001 7484             		jsr	(PLCLoad_Shields).l
000176EC 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
000176F2                            ; ---------------------------------------------------------------------------
000176F2                            ; ===========================================================================
000176F2                            
000176F2                            @return:
000176F2 4E75                       		rts
000176F4                            
000176F4                            RShieldItem_Destroy:
000176F4 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
000176F8 4E75                       		rts
000176FA                            ; ===========================================================================
000176FA                            ; ===========================================================================
000176FA                            		include	"_incObj\38 Shield.asm"
000176FA                            ; ---------------------------------------------------------------------------
000176FA                            ; Object 38 - Shield
000176FA                            ; ---------------------------------------------------------------------------
000176FA                            ShieldItem: ; XREF: Obj_Index
000176FA 7000                       		moveq	#0,d0
000176FC 1028 0024                  		move.b	obRoutine(a0),d0
00017700 323B 0000                  		move.w	ShieldItem_Index(pc,d0.w),d1
00017704 4EFB 1000                  		jmp	ShieldItem_Index(pc,d1.w)
00017708                            ; ===========================================================================
00017708                            ; off_1D900:
00017708                            ShieldItem_Index:
00017708 0000                       		dc.w ShieldItem_Init-ShieldItem_Index	; 0
0001770A 0000                       		dc.w ShieldItem_Main-ShieldItem_Index	; 2
0001770C                            ; ===========================================================================
0001770C                            ; loc_1D904:
0001770C                            ShieldItem_Init:
0001770C 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
00017714 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
0001771C 217C 0000 0000 0038        		move.l	#Art_Shield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
00017724 117C 0004 0001             		move.b	#4,obRender(a0)
0001772A 317C 0080 0018             		move.w	#$80,obPriority(a0)
00017730 117C 0018 0014             		move.b	#$18,obActWid(a0)
00017736 317C 0541 0002             		move.w	#$541,obGfx(a0)
0001773C 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
00017742 0838 0007 D002             		btst	#7,(v_player+obGfx).w
00017748 6700                       		beq.s	loc_195F0S
0001774A 08E8 0007 0002             		bset	#7,obGfx(a0)
00017750                            
00017750                            loc_195F0S:
00017750 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
00017756 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
0001775C 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
00017760                            ; loc_1D92C:
00017760                            ShieldItem_Main:
00017760 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
00017764 4A38 FE2D                  		tst.b	(v_invinc).w
00017768 6600                       		bne.s	return_1D976
0001776A                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
0001776A                            		;beq.s	return_1D976	; If so, do not display and do not update variables
0001776A 4A38 FE2C                  		tst.b	(v_shield).w
0001776E 6700 0000                  		beq.w	ShieldItem_Destroy	; If not, change to Insta-Shield
00017772 316A 0008 0008             		move.w	obX(a2),obX(a0)
00017778 316A 000C 000C             		move.w	obY(a2),obY(a0)
0001777E 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
00017784 4A6A 0002                  		tst.w	obGFX(a2)
00017788 6A00                       		bpl.s	@nothighpriority
0001778A 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
00017790                            
00017790                            		@nothighpriority:
00017790 43F9 0000 0000             		lea	(Ani_Shield).l,a1
00017796 4EB9 0000 C880             		jsr	(AnimateSprite).l
0001779C 4EB9 0001 7484             		jsr	(PLCLoad_Shields).l
000177A2 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
000177A8                            ; ---------------------------------------------------------------------------
000177A8                            ; ===========================================================================
000177A8                            
000177A8                            return_1D976:
000177A8 4E75                       		rts
000177AA                            
000177AA                            ShieldItem_Destroy:
000177AA 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
000177AE 4E75                       		rts
000177B0                            ; ===========================================================================
000177B0                            ; ===========================================================================
000177B0                            		include	"_incObj\19 Invincibility Stars.asm"	
000177B0                            ; ---------------------------------------------------------------------------
000177B0                            ; Object 10 - invincibility stars
000177B0                            ; ---------------------------------------------------------------------------
000177B0 =00000024                  invstars_obroutine: equ obRoutine ; the same as routine in other objects
000177B0 =00000030                  InvStars_AniScript: equ $30 ; animation script used by sub-objects(in main object it's clear and unused) (4 bytes)
000177B0 =00000034                  InvStars_SpeedIndex: equ $34  ; (2 bytes)
000177B0 =00000036                  InvStars_PrevPosIndex: equ $36 ; clear and unused in main object
000177B0                            
000177B0                            InvStarsObj: 
000177B0 7000                       		moveq	#0,d0
000177B2 1028 0024                  		move.b	InvStars_obRoutine(a0),d0
000177B6 323B 0000                  		move.w	InvStars_Index(pc,d0.w),d1
000177BA 4EFB 1000                  		jmp	InvStars_Index(pc,d1.w)
000177BE                            ; ===========================================================================
000177BE 0000                       InvStars_Index:	dc.w @InitObjects-InvStars_Index
000177C0 0000                       		dc.w @MainObject-InvStars_Index
000177C2 0000                       		dc.w @SubObject-InvStars_Index
000177C4                            ; ===========================================================================
000177C4                            
000177C4                            	@SubObjectsData:
000177C4 0000 0000                  		dc.l Ani_InvStars2 ; animation script
000177C8 0B00                       		dc.w $0B00 ; speed index,sub3 anim
000177CA 0000 0000                  		dc.l Ani_InvStars3
000177CE 160D                       		dc.w $160D
000177D0 0000 0000                  		dc.l Ani_InvStars4
000177D4 2C0D                       		dc.w $2C0D
000177D6                            ; ===========================================================================
000177D6                            
000177D6                            	@InitObjects:
000177D6 223C 0000 0000             		move.l	#Unc_Stars,d1
000177DC 343C ABC0                  		move.w	#$ABC0,d2
000177E0 363C 0220                  		move.w	#$220,d3
000177E4 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
000177EA 7400                       		moveq	#0,d2
000177EC 45FA FFD0                  		lea	@SubObjectsData-6(pc),a2
000177F0 43D0                       		lea	(a0),a1
000177F2 7203                       		moveq	#3,d1
000177F4                            		
000177F4                            	@initStars:
000177F4 1290                       		move.b	(a0),(a1) ; load obj35
000177F6 137C 0004 0024             		move.b	#4,InvStars_obRoutine(a1)		; => @SubObject
000177FC 237C 0000 0000 0004        		move.l	#Map_InvStars,obMap(a1)
00017804 337C 055E 0002             		move.w	#$55E,obGfx(a1)
0001780A 137C 0044 0001             		move.b  #%001000100,obRender(a1)
00017810 137C 0010 000E             		move.b	#$10,mainspr_width(a1)
00017816 137C 0002 000F             		move.b	#2,mainspr_childsprites(a1)							 
0001781C 1342 0036                  		move.b	d2,InvStars_PrevPosIndex(a1)
00017820 5242                       		addq.w	#1,d2
00017822 235A 0030                  		move.l	(a2)+,InvStars_AniScript(a1)
00017826 335A 0034                  		move.w	(a2)+,InvStars_SpeedIndex(a1)
0001782A 43E9 0040                  		lea	$40(a1),a1 ; a1=object
0001782E 51C9 FFC4                  		dbf	d1,@initStars
00017832                            
00017832 117C 0002 0024             		move.b	#2,InvStars_obRoutine(a0)		; => @MainObject
00017838 117C 0004 0034             		move.b	#4,InvStars_SpeedIndex(a0)
0001783E                            
0001783E                            	@MainObject:
0001783E 43F8 D000                  		lea (v_player).w,a1 ; a1=character
00017842 4A38 FE2D                  		tst.b   (v_invinc).w
00017846 6700 0000                  		beq.w	JmpTo_DeleteObject
0001784A 3029 0008                  		move.w	obX(a1),d0
0001784E 3140 0008                  		move.w	d0,obX(a0)
00017852 3229 000C                  		move.w	obY(a1),d1
00017856 3141 000C                  		move.w	d1,obY(a0)
0001785A 45E8 0010                  		lea	sub2_x_pos(a0),a2
0001785E 47F9 0000 0000             		lea	Ani_InvStars1,a3
00017864 7A00                       		moveq	#0,d5
00017866                            
00017866                            	@getFrame_main:
00017866 3428 0038                  		move.w	$38(a0),d2
0001786A 1A33 2000                  		move.b	(a3,d2.w),d5
0001786E 6A00                       		bpl.s	@setFrameAndPosition_main
00017870 4268 0038                  		clr.w	$38(a0)
00017874 60F0                       		bra.s	@getFrame_main
00017876                            ; ===========================================================================
00017876                            
00017876                            	@setFrameAndPosition_main:
00017876 5268 0038                  		addq.w	#1,$38(a0)
0001787A 4DF9 0000 0000             		lea	InvStars_Speeds,a6
00017880 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
00017884 6100 0000                  		bsr.w	InvStars_get_speed
00017888 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
0001788A 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
0001788C 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
0001788E 0646 0020                  		addi.w	#$20,d6
00017892 6100 0000                  		bsr.w	InvStars_get_speed
00017896 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
00017898 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
0001789A 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
0001789C 7012                       		moveq	#$12,d0
0001789E 0829 0000 0022             		btst	#0,obStatus(a1)
000178A4 6700                       		beq.s	@display_main
000178A6 4440                       		neg.w	d0
000178A8                            
000178A8                            	@display_main:
000178A8 D128 0034                  		add.b	d0,InvStars_SpeedIndex(a0)
000178AC 303C 0080                  		move.w	#(1*$80),d0
000178B0 4EF9 0000 F7F6             		jmp	DisplaySprite2
000178B6                            ; ===========================================================================
000178B6                            
000178B6                            	@SubObject:
000178B6 43F8 D000                  		lea 	(v_player).w,a1 ; a1=character
000178BA 4A38 FE2D                  		tst.b   (v_invinc).w
000178BE 6700 0000                  		beq.w	JmpTo_DeleteObject
000178C2 4BF8 F7A8                  		lea		(v_trackpos).w,a5
000178C6 4DF8 CB00                  		lea		(v_tracksonic).w,a6
000178CA                            
000178CA                            	@getPosition_sub:
000178CA 1228 0036                  		move.b	InvStars_PrevPosIndex(a0),d1
000178CE E509                       		lsl.b	#2,d1
000178D0 3401                       		move.w	d1,d2
000178D2 D241                       		add.w	d1,d1
000178D4 D242                       		add.w	d2,d1
000178D6 3015                       		move.w	(a5),d0
000178D8 9001                       		sub.b	d1,d0
000178DA 45F6 0000                  		lea	(a6,d0.w),a2
000178DE 301A                       		move.w	(a2)+,d0
000178E0 321A                       		move.w	(a2)+,d1
000178E2 3140 0008                  		move.w	d0,obX(a0)
000178E6 3141 000C                  		move.w	d1,obY(a0)
000178EA 45E8 0010                  		lea	sub2_x_pos(a0),a2
000178EE 2668 0030                  		movea.l	InvStars_AniScript(a0),a3
000178F2                            
000178F2                            	@getFrame_sub:
000178F2 3428 0038                  		move.w	$38(a0),d2
000178F6 1A33 2000                  		move.b	(a3,d2.w),d5
000178FA 6A00                       		bpl.s	@setFrameAndPosition_sub
000178FC 4268 0038                  		clr.w	$38(a0)
00017900 60F0                       		bra.s	@getFrame_sub
00017902                            ; ===========================================================================
00017902                            
00017902                            	@setFrameAndPosition_sub:
00017902 4845                       		swap	d5
00017904 D428 0035                  		add.b	$35(a0),d2
00017908 1A33 2000                  		move.b	(a3,d2.w),d5
0001790C 5268 0038                  		addq.w	#1,$38(a0)
00017910 4DFA 0000                  		lea	InvStars_Speeds(pc),a6
00017914 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
00017918 6100                       		bsr.s	InvStars_get_speed
0001791A 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
0001791C 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
0001791E 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
00017920 0646 0020                  		addi.w	#$20,d6
00017924 4845                       		swap	d5
00017926 6100                       		bsr.s	InvStars_get_speed
00017928 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
0001792A 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
0001792C 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
0001792E 7002                       		moveq	#2,d0
00017930 0829 0000 0022             		btst	#0,obStatus(a1)
00017936 6700                       		beq.s	loc_1DB20
00017938 4440                       		neg.w	d0
0001793A                            
0001793A                            loc_1DB20:
0001793A D128 0034                  		add.b    d0,InvStars_SpeedIndex(a0)
0001793E 303C 0080                  		move.w    #(1*$80),d0
00017942 4EF9 0000 F7F6             		jmp    DisplaySprite2
00017948                            ; ===========================================================================
00017948                            
00017948                            InvStars_get_speed:
00017948 0246 003E                  		andi.w	#$3E,d6 ; limit to 6 bits and clear first bit
0001794C 1436 6000                  		move.b	(a6,d6.w),d2 ; move x-move speed to d2
00017950 1636 6001                  		move.b	1(a6,d6.w),d3 ; move y-move speed to d3
00017954 4882                       		ext.w	d2
00017956 4883                       		ext.w	d3
00017958 D440                       		add.w	d0,d2 ; add object x position to x-move speed
0001795A D641                       		add.w	d1,d3 ; add object y position to y-move speed
0001795C 4E75                       		rts
0001795E                            
0001795E                            InvStars_Speeds: ; x-move speed,	y-move speed	
0001795E 0F00 0F03 0E06 0D08 0B0B+  		dc.w   $F00,  $F03,  $E06,  $D08,  $B0B,  $80D,  $60E,  $30F
0001796E 0010 FC0F F90E F70D F40B+  		dc.w    $10, -$3F1, -$6F2, -$8F3, -$BF5, -$DF8, -$EFA, -$FFD
0001797E F000 F0FC F1F9 F2F7 F4F4+  		dc.w  $F000, -$F04, -$E07, -$D09, -$B0C, -$80E, -$60F, -$310
0001798E FFF0 03F0 06F1 08F2 0BF4+  		dc.w   -$10,  $3F0,  $6F1,  $8F2,  $BF4,  $DF7,  $EF9,  $FFC
0001799E                            
0001799E                            ; ---------------------------------------------------------------------------
0001799E                            ; Animation script - invincibility stars
0001799E                            ; ---------------------------------------------------------------------------
0001799E                            
0001799E                            ; The animation script differs from the animate_sprite subroutine
0001799E                            ; Every positive byte - mapping
0001799E                            ; Every negative byte - loop flag 
0001799E                            
0001799E 0805 0706 0607 0508 0607+  Ani_InvStars1:	dc.b   8,  5,  7,  6,  6,  7,  5,  8,  6,  7,  7,  6,$FF
000179AC 00                         		even
000179AC 0807 0605 0403 0405 0607+  Ani_InvStars2:	dc.b   8,  7,  6,  5,  4,  3,  4,  5,  6,  7,$FF
000179B7 0304 0506 0708 0706 0504   		dc.b   3,  4,  5,  6,  7,  8,  7,  6,  5,  4
000179C2 00                         		even
000179C2 0807 0605 0403 0203 0405+  Ani_InvStars3:	dc.b   8,  7,  6,  5,  4,  3,  2,  3,  4,  5,  6,  7,$FF
000179CF 0203 0405 0607 0807 0605+  		dc.b   2,  3,  4,  5,  6,  7,  8,  7,  6,  5,  4,  3
000179DC 00                         		even
000179DC 0706 0504 0302 0102 0304+  Ani_InvStars4:	dc.b   7,  6,  5,  4,  3,  2,  1,  2,  3,  4,  5,  6,$FF
000179E9 0102 0304 0506 0706 0504+  		dc.b   1,  2,  3,  4,  5,  6,  7,  6,  5,  4,  3,  2
000179F6 00                         		even			
000179F6                            ; ---------------------------------------------------------------------------
000179F6                            JmpTo_DeleteObject:
000179F6 4EF9 0000 F80A             		jmp		(DeleteObject).l
000179F6 4EF9 0000 F80A             		jmp		(DeleteObject).l
000179FC                            		include	"_incObj\8D Super Stars.asm"			
000179FC                            ; ---------------------------------------------------------------------------
000179FC                            ; Object 91 - Super Sonic Stars
000179FC                            ; ---------------------------------------------------------------------------
000179FC                            
000179FC                            SuperStars:					; XREF: Obj_Index					  ; ...
000179FC 223C 0000 0000             		move.l	#Unc_SuperSonic_stars,d1			        ; Call for Regular Shield Art
00017A02 343C ABC0                  		move.w	#$ABC0,d2			        ; Load Art from this location (VRAM location*20)
00017A06                            								; In this case, VRAM = $541*20
00017A06 363C 0100                  		move.w	#$100,d3
00017A0A 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
00017A10 7000                       		moveq	#0,d0
00017A12 1028 0024                  		move.b	obRoutine(a0),d0
00017A16 323B 0000                  		move.w	SuperStars_States(pc,d0.w),d1
00017A1A 4EFB 1000                  		jmp	SuperStars_States(pc,d1.w)
00017A1E                            ; ---------------------------------------------------------------------------
00017A1E 0000 0000                  SuperStars_States:	dc.w SuperStars_Init-SuperStars_States,SuperStars_Main-SuperStars_States; 0	; ...
00017A22                            ; ---------------------------------------------------------------------------
00017A22                            
00017A22                            SuperStars_Init:					  ; ...
00017A22 5428 0024                  		addq.b	#2,obRoutine(a0)
00017A26 217C 0000 0000 0004        		move.l	#SuperStars_MapUnc_1E1BE,4(a0)
00017A2E 117C 0004 0001             		move.b	#4,obRender(a0)
00017A34 317C 0080 0018             		move.w	#$80,obPriority(a0)
00017A3A 117C 0018 0014             		move.b	#$18,obActWid(a0)
00017A40 317C 055E 0002             		move.w	#$55E,art_tile(a0)
00017A46 0838 0007 D002             		btst	#7,(v_player+art_tile).w
00017A4C 6700                       		beq.s	SuperStars_Main
00017A4E 08E8 0007 0002             		bset	#7,art_tile(a0)
00017A54                            ; loc_1E138:
00017A54                            SuperStars_Main:
00017A54 4A38 FE19                  		tst.b	(Super_Sonic_flag).w
00017A58 6700                       		beq.s	JmpTo8_DeleteObject
00017A5A 4A28 0030                  		tst.b	$30(a0)
00017A5E 6700                       		beq.s	loc_1E188
00017A60 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
00017A64 6A00                       		bpl.s	loc_1E170
00017A66 117C 0001 001E             		move.b	#1,anim_frame_duration(a0)
00017A6C 5228 001A                  		addq.b	#1,mapping_frame(a0)
00017A70 0C28 0006 001A             		cmpi.b	#6,mapping_frame(a0)
00017A76 6500                       		bcs.s	loc_1E170
00017A78 117C 0000 001A             		move.b	#0,mapping_frame(a0)
00017A7E 117C 0000 0030             		move.b	#0,$30(a0)
00017A84 117C 0001 0031             		move.b	#1,$31(a0)
00017A8A 4E75                       		rts
00017A8C                            ; ===========================================================================
00017A8C                            
00017A8C                            loc_1E170:
00017A8C 4A28 0031                  		tst.b	$31(a0)
00017A90 6600                       		bne.s	JmpTo6_DisplaySprite
00017A92                            
00017A92                            loc_1E176:
00017A92 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0)
00017A98 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0)
00017A9E                            
00017A9E                            JmpTo6_DisplaySprite:
00017A9E 4EF9 0000 F7CA             		jmp	DisplaySprite
00017AA4                            ; ===========================================================================
00017AA4                            
00017AA4                            loc_1E188:
00017AA4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017AA8 6600                       		bne.s	loc_1E1AA
00017AAA 3038 D020                  		move.w	(v_player+obInertia).w,d0
00017AAE 6A00                       		bpl.s	loc_1E196
00017AB0 4440                       		neg.w	d0
00017AB2                            
00017AB2                            loc_1E196:
00017AB2 0C40 0800                  		cmpi.w	#$800,d0
00017AB6 6500                       		bcs.s	loc_1E1AA
00017AB8 117C 0000 001A             		move.b	#0,mapping_frame(a0)
00017ABE 117C 0001 0030             		move.b	#1,$30(a0)
00017AC4 60CC                       		bra.s	loc_1E176
00017AC6                            ; ===========================================================================
00017AC6                            
00017AC6                            loc_1E1AA:
00017AC6 117C 0000 0030             		move.b	#0,$30(a0)
00017ACC 117C 0000 0031             		move.b	#0,$31(a0)
00017AD2 4E75                       		rts
00017AD4                            ; ===========================================================================
00017AD4                            
00017AD4                            JmpTo8_DeleteObject:
00017AD4 4EF9 0000 F80A             		jmp	DeleteObject
00017ADA                            ; ===========================================================================
00017ADA                            
00017ADA                            ; -------------------------------------------------------------------------------
00017ADA                            ; sprite mappings
00017ADA                            ; -------------------------------------------------------------------------------
00017ADA                            ;Obj8F_MapUnc_1E1BE:
00017ADA                            SuperStars_MapUnc_1E1BE:	include "_maps/Super Stars.asm"	
00017ADA                            ; --------------------------------------------------------------------------------
00017ADA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00017ADA                            ; --------------------------------------------------------------------------------
00017ADA                            
00017ADA                            SME_fq6vL:	
00017ADA 0000 0000                  		dc.w SME_fq6vL_C-SME_fq6vL, SME_fq6vL_21-SME_fq6vL	
00017ADE 0000 0000                  		dc.w SME_fq6vL_36-SME_fq6vL, SME_fq6vL_4B-SME_fq6vL	
00017AE2 0000 0000                  		dc.w SME_fq6vL_60-SME_fq6vL, SME_fq6vL_75-SME_fq6vL	
00017AE6 04                         SME_fq6vL_C:	dc.b 4	
00017AE7 F800 0000 F8               		dc.b $F8, 0, 0, 0, $F8	
00017AEC F800 0800 00               		dc.b $F8, 0, 8, 0, 0	
00017AF1 0000 1000 F8               		dc.b 0, 0, $10, 0, $F8	
00017AF6 0000 1800 00               		dc.b 0, 0, $18, 0, 0	
00017AFB 04                         SME_fq6vL_21:	dc.b 4	
00017AFC F005 0001 F0               		dc.b $F0, 5, 0, 1, $F0	
00017B01 F005 0801 00               		dc.b $F0, 5, 8, 1, 0	
00017B06 0005 1001 F0               		dc.b 0, 5, $10, 1, $F0	
00017B0B 0005 1801 00               		dc.b 0, 5, $18, 1, 0	
00017B10 04                         SME_fq6vL_36:	dc.b 4	
00017B11 E80A 0005 E8               		dc.b $E8, $A, 0, 5, $E8	
00017B16 E80A 0805 00               		dc.b $E8, $A, 8, 5, 0	
00017B1B 000A 1005 E8               		dc.b 0, $A, $10, 5, $E8	
00017B20 000A 1805 00               		dc.b 0, $A, $18, 5, 0	
00017B25 04                         SME_fq6vL_4B:	dc.b 4	
00017B26 F005 0001 F0               		dc.b $F0, 5, 0, 1, $F0	
00017B2B F005 0801 00               		dc.b $F0, 5, 8, 1, 0	
00017B30 0005 1001 F0               		dc.b 0, 5, $10, 1, $F0	
00017B35 0005 1801 00               		dc.b 0, 5, $18, 1, 0	
00017B3A 04                         SME_fq6vL_60:	dc.b 4	
00017B3B F800 0000 F8               		dc.b $F8, 0, 0, 0, $F8	
00017B40 F800 0800 00               		dc.b $F8, 0, 8, 0, 0	
00017B45 0000 1000 F8               		dc.b 0, 0, $10, 0, $F8	
00017B4A 0000 1800 00               		dc.b 0, 0, $18, 0, 0	
00017B4F 00                         SME_fq6vL_75:	dc.b 0	
00017B50                            		even
00017B50                            		even
00017B50                            
00017B50                            Unc_SuperSonic_stars:	incbin "artunc/Super Stars.bin"
00017D10                            			even
00017D10                            			even
00017D10                            		include	"_incObj\4A Special Stage Entry (Unused).asm"
00017D10                            ; ---------------------------------------------------------------------------
00017D10                            ; Object 4A - special stage entry from beta
00017D10                            ; ---------------------------------------------------------------------------
00017D10                            
00017D10                            VanishSonic:
00017D10 7000                       		moveq	#0,d0
00017D12 1028 0024                  		move.b	obRoutine(a0),d0
00017D16 323B 0000                  		move.w	Van_Index(pc,d0.w),d1
00017D1A 4EFB 1000                  		jmp	Van_Index(pc,d1.w)
00017D1E                            ; ===========================================================================
00017D1E 0000                       Van_Index:	dc.w Van_Main-Van_Index
00017D20 0000                       		dc.w Van_RmvSonic-Van_Index
00017D22 0000                       		dc.w Van_LoadSonic-Van_Index
00017D24                            
00017D24 =00000030                  van_time:	equ $30		; time for Sonic to disappear
00017D24                            ; ===========================================================================
00017D24                            
00017D24                            Van_Main:	; Routine 0
00017D24 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are pattern load cues empty?
00017D28 6700                       		beq.s	@isempty	; if yes, branch
00017D2A 4E75                       		rts	
00017D2C                            
00017D2C                            	@isempty:
00017D2C 5428 0024                  		addq.b	#2,obRoutine(a0)
00017D30 217C 0000 0000 0004        		move.l	#Map_Vanish,obMap(a0)
00017D38 117C 0004 0001             		move.b	#4,obRender(a0)
00017D3E 317C 0080 0018             		move.w	#$80,obPriority(a0)
00017D44 117C 0038 0014             		move.b	#$38,obActWid(a0)
00017D4A 317C 0541 0002             		move.w	#$541,obGfx(a0)
00017D50 317C 0078 0030             		move.w	#120,van_time(a0) ; set time for Sonic's disappearance to 2 seconds
00017D56                            
00017D56                            Van_RmvSonic:	; Routine 2
00017D56 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0)
00017D5C 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0)
00017D62 1178 D022 0022             		move.b	(v_player+obStatus).w,obStatus(a0)
00017D68 43F9 0000 0000             		lea	(Ani_Vanish).l,a1
00017D6E 4EB9 0000 C880             		jsr	(AnimateSprite).l
00017D74 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
00017D7A 6600                       		bne.s	@display
00017D7C 4A38 D000                  		tst.b	(v_player).w
00017D80 6700                       		beq.s	@display
00017D82 11FC 0000 D000             		move.b	#0,(v_player).w	; remove Sonic
00017D92                            
00017D92                            	@display:
00017D92 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
00017D98                            ; ===========================================================================
00017D98                            
00017D98                            Van_LoadSonic:	; Routine 4
00017D98 5368 0030                  		subq.w	#1,van_time(a0)	; subtract 1 from time
00017D9C 6600                       		bne.s	@wait		; if time remains, branch
00017D9E 11FC 0001 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00017DA4 4EF9 0000 F80A             		jmp	(DeleteObject).l
00017DAA                            
00017DAA                            	@wait:
00017DAA 4E75                       		rts	
00017DAA 4E75                       		rts	
00017DAC                            		include	"_incObj\08 Water Splash.asm"
00017DAC                            ; ---------------------------------------------------------------------------
00017DAC                            ; Object 08 - water splash (LZ)
00017DAC                            ; ---------------------------------------------------------------------------
00017DAC                            
00017DAC                            Splash:
00017DAC 7000                       		moveq	#0,d0
00017DAE 1028 0024                  		move.b	obRoutine(a0),d0
00017DB2 323B 0000                  		move.w	Spla_Index(pc,d0.w),d1
00017DB6 4EFB 1000                  		jmp	Spla_Index(pc,d1.w)
00017DBA                            ; ===========================================================================
00017DBA 0000                       Spla_Index:	dc.w Spla_Main-Spla_Index
00017DBC 0000                       		dc.w Spla_Display-Spla_Index
00017DBE 0000                       		dc.w Spla_Delete-Spla_Index
00017DC0                            ; ===========================================================================
00017DC0                            
00017DC0                            Spla_Main:    ; Routine 0
00017DC0 5428 0024                          addq.b    #2,obRoutine(a0)
00017DC4 217C 0000 0000 0004                move.l    #Map_Splash,obMap(a0)
00017DCC 0028 0004 0001                     ori.b    #4,obRender(a0)
00017DD2 117C 0001 0018                     move.b    #1,obPriority(a0)
00017DD8 117C 0010 0014                     move.b    #$10,obActWid(a0)
00017DDE 317C 4259 0002                     move.w    #$4259,obGfx(a0)
00017DE4 3178 D008 0008                     move.w    (v_player+obX).w,obX(a0) ; copy x-position from Sonic
00017DEA                            
00017DEA                            Spla_Display:    ; Routine 2
00017DEA                                    ;move.w    (v_waterpos1).w,obY(a0) ; copy y-position from water height
00017DEA 3178 FF92 000C                     move.w    (v_watersplashpos).w,obY(a0) ;TIS copy y-position from player
00017DF0 43F9 0000 0000                     lea    (Ani_Splash).l,a1
00017DF6 4EB9 0000 C880                     jsr    (AnimateSprite).l
00017DFC 4EF9 0000 F7CA                     jmp    (DisplaySprite).l
00017E02                            ; ===========================================================================
00017E02                            
00017E02                            Spla_Delete:	; Routine 4
00017E02 4EF9 0000 F80A             		jmp	(DeleteObject).l	; delete when animation	is complete
00017E02 4EF9 0000 F80A             		jmp	(DeleteObject).l	; delete when animation	is complete
00017E08                            		include	"_anim\Shield and Invincibility.asm"
00017E08                            ; ---------------------------------------------------------------------------
00017E08                            ; Animation script - shield and invincibility stars
00017E08                            ; ---------------------------------------------------------------------------
00017E08 0000                       Ani_Shield:	dc.w @shield-Ani_Shield
00017E0A 0101 0002 0003 0004 0005+  @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, $A, 0, $B, 0, $C, 0, afEnd
00017E0A 0101 0002 0003 0004 0005+  @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, $A, 0, $B, 0, $C, 0, afEnd
00017E24                            Map_Shield:	include	"_maps\Shield.asm"
00017E24                            ; --------------------------------------------------------------------------------
00017E24                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00017E24                            ; --------------------------------------------------------------------------------
00017E24                            
00017E24                            SME_ocN6K:	
00017E24 0000 0000                  		dc.w SME_ocN6K_1A-SME_ocN6K, SME_ocN6K_1B-SME_ocN6K	
00017E28 0000 0000                  		dc.w SME_ocN6K_30-SME_ocN6K, SME_ocN6K_45-SME_ocN6K	
00017E2C 0000 0000                  		dc.w SME_ocN6K_5A-SME_ocN6K, SME_ocN6K_6F-SME_ocN6K	
00017E30 0000 0000                  		dc.w SME_ocN6K_7A-SME_ocN6K, SME_ocN6K_85-SME_ocN6K	
00017E34 0000 0000                  		dc.w SME_ocN6K_90-SME_ocN6K, SME_ocN6K_9B-SME_ocN6K	
00017E38 0000 0000                  		dc.w SME_ocN6K_A6-SME_ocN6K, SME_ocN6K_BB-SME_ocN6K	
00017E3C 0000                       		dc.w SME_ocN6K_D0-SME_ocN6K	
00017E3E 00                         SME_ocN6K_1A:	dc.b 0	
00017E3F 04                         SME_ocN6K_1B:	dc.b 4	
00017E40 E80E 2000 E3               		dc.b $E8, $E, $20, 0, $E3	
00017E45 E80A 200C 03               		dc.b $E8, $A, $20, $C, 3	
00017E4A 000A 3015 03               		dc.b 0, $A, $30, $15, 3	
00017E4F 000E 301E E3               		dc.b 0, $E, $30, $1E, $E3	
00017E54 04                         SME_ocN6K_30:	dc.b 4	
00017E55 E80E 2000 E3               		dc.b $E8, $E, $20, 0, $E3	
00017E5A E80A 200C 03               		dc.b $E8, $A, $20, $C, 3	
00017E5F 000A 3015 03               		dc.b 0, $A, $30, $15, 3	
00017E64 000E 301E E3               		dc.b 0, $E, $30, $1E, $E3	
00017E69 04                         SME_ocN6K_45:	dc.b 4	
00017E6A E80E 2000 E3               		dc.b $E8, $E, $20, 0, $E3	
00017E6F E80A 200C 03               		dc.b $E8, $A, $20, $C, 3	
00017E74 000A 3015 03               		dc.b 0, $A, $30, $15, 3	
00017E79 000E 301E E3               		dc.b 0, $E, $30, $1E, $E3	
00017E7E 04                         SME_ocN6K_5A:	dc.b 4	
00017E7F E80E 2000 EB               		dc.b $E8, $E, $20, 0, $EB	
00017E84 E802 200C 0B               		dc.b $E8, 2, $20, $C, $B	
00017E89 000E 300F EB               		dc.b 0, $E, $30, $F, $EB	
00017E8E 0002 301B 0B               		dc.b 0, 2, $30, $1B, $B	
00017E93 02                         SME_ocN6K_6F:	dc.b 2	
00017E94 E80E 2000 EC               		dc.b $E8, $E, $20, 0, $EC	
00017E99 000E 300C EC               		dc.b 0, $E, $30, $C, $EC	
00017E9E 02                         SME_ocN6K_7A:	dc.b 2	
00017E9F E80A 2000 F1               		dc.b $E8, $A, $20, 0, $F1	
00017EA4 000A 3009 F1               		dc.b 0, $A, $30, 9, $F1	
00017EA9 02                         SME_ocN6K_85:	dc.b 2	
00017EAA E802 2000 F9               		dc.b $E8, 2, $20, 0, $F9	
00017EAF 0002 3003 F9               		dc.b 0, 2, $30, 3, $F9	
00017EB4 02                         SME_ocN6K_90:	dc.b 2	
00017EB5 E80A 2800 F1               		dc.b $E8, $A, $28, 0, $F1	
00017EBA 000A 3809 F1               		dc.b 0, $A, $38, 9, $F1	
00017EBF 02                         SME_ocN6K_9B:	dc.b 2	
00017EC0 E80E 2800 EC               		dc.b $E8, $E, $28, 0, $EC	
00017EC5 000E 380C EC               		dc.b 0, $E, $38, $C, $EC	
00017ECA 04                         SME_ocN6K_A6:	dc.b 4	
00017ECB E80E 2800 F3               		dc.b $E8, $E, $28, 0, $F3	
00017ED0 E802 280C EB               		dc.b $E8, 2, $28, $C, $EB	
00017ED5 000E 380F F3               		dc.b 0, $E, $38, $F, $F3	
00017EDA 0002 381B EB               		dc.b 0, 2, $38, $1B, $EB	
00017EDF 04                         SME_ocN6K_BB:	dc.b 4	
00017EE0 E80E 2800 FB               		dc.b $E8, $E, $28, 0, $FB	
00017EE5 E80A 280C E3               		dc.b $E8, $A, $28, $C, $E3	
00017EEA 000A 3815 E3               		dc.b 0, $A, $38, $15, $E3	
00017EEF 000E 381E FB               		dc.b 0, $E, $38, $1E, $FB	
00017EF4 04                         SME_ocN6K_D0:	dc.b 4	
00017EF5 E80E 2800 FB               		dc.b $E8, $E, $28, 0, $FB	
00017EFA E80A 280C E3               		dc.b $E8, $A, $28, $C, $E3	
00017EFF 000A 3815 E3               		dc.b 0, $A, $38, $15, $E3	
00017F04 000E 381E FB               		dc.b 0, $E, $38, $1E, $FB	
00017F0A 00                         		even
00017F0A 00                         		even
00017F0A                            DPLC_Shield:	include	"_maps\Shield - Dynamic Gfx Script.asm"
00017F0A                            ; --------------------------------------------------------------------------------
00017F0A                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 3 & Knuckles format; --------------------------------------------------------------------------------
00017F0A                            
00017F0A                            SME_yRIsY:	
00017F0A 0000 0000                  		dc.w SME_yRIsY_1A-SME_yRIsY, SME_yRIsY_1C-SME_yRIsY	
00017F0E 0000 0000                  		dc.w SME_yRIsY_26-SME_yRIsY, SME_yRIsY_30-SME_yRIsY	
00017F12 0000 0000                  		dc.w SME_yRIsY_3A-SME_yRIsY, SME_yRIsY_44-SME_yRIsY	
00017F16 0000 0000                  		dc.w SME_yRIsY_4A-SME_yRIsY, SME_yRIsY_50-SME_yRIsY	
00017F1A 0000 0000                  		dc.w SME_yRIsY_56-SME_yRIsY, SME_yRIsY_5C-SME_yRIsY	
00017F1E 0000 0000                  		dc.w SME_yRIsY_62-SME_yRIsY, SME_yRIsY_6C-SME_yRIsY	
00017F22 0000                       		dc.w SME_yRIsY_76-SME_yRIsY	
00017F24 0000                       SME_yRIsY_1A:	dc.b 0, 0	
00017F26 0004 B000 800C 800C B000   SME_yRIsY_1C:	dc.b 0, 4, $B0, 0, $80, $C, $80, $C, $B0, 0	
00017F30 0004 B015 8021 8021 B015   SME_yRIsY_26:	dc.b 0, 4, $B0, $15, $80, $21, $80, $21, $B0, $15	
00017F3A 0004 B02A 8036 8036 B02A   SME_yRIsY_30:	dc.b 0, 4, $B0, $2A, $80, $36, $80, $36, $B0, $2A	
00017F44 0004 B03F 204B B03F 204B   SME_yRIsY_3A:	dc.b 0, 4, $B0, $3F, $20, $4B, $B0, $3F, $20, $4B	
00017F4E 0002 B04E B04E             SME_yRIsY_44:	dc.b 0, 2, $B0, $4E, $B0, $4E	
00017F54 0002 805A 805A             SME_yRIsY_4A:	dc.b 0, 2, $80, $5A, $80, $5A	
00017F5A 0002 2063 2063             SME_yRIsY_50:	dc.b 0, 2, $20, $63, $20, $63	
00017F60 0002 805A 805A             SME_yRIsY_56:	dc.b 0, 2, $80, $5A, $80, $5A	
00017F66 0002 B04E B04E             SME_yRIsY_5C:	dc.b 0, 2, $B0, $4E, $B0, $4E	
00017F6C 0004 B03F 204B B03F 204B   SME_yRIsY_62:	dc.b 0, 4, $B0, $3F, $20, $4B, $B0, $3F, $20, $4B	
00017F76 0004 B02A 8036 8036 B02A   SME_yRIsY_6C:	dc.b 0, 4, $B0, $2A, $80, $36, $80, $36, $B0, $2A	
00017F80 0004 B015 8021 8021 B015   SME_yRIsY_76:	dc.b 0, 4, $B0, $15, $80, $21, $80, $21, $B0, $15	
00017F8A                            		even
00017F8A                            		even
00017F8A                            Map_InvStars:	include	"_maps\Invincibility Stars.asm"
00017F8A                            ; ================================================================================
00017F8A                            ; Sprite Mappings - generated by Flex 2 Thu Apr 23 2020 12:30:36 GMT+0300 (RTZ 2 (зима))
00017F8A                            ; ================================================================================
00017F8A                            
00017F8A                            InvStarMap:
00017F8A 0000 0000                  	dc.w $0, InvStarMap_1-InvStarMap
00017F8E 0000 0000                  	dc.w InvStarMap_2-InvStarMap, InvStarMap_3-InvStarMap
00017F92 0000 0000                  	dc.w InvStarMap_4-InvStarMap, InvStarMap_5-InvStarMap
00017F96 0000 0000                  	dc.w InvStarMap_6-InvStarMap, InvStarMap_7-InvStarMap
00017F9A 0000                       	dc.w InvStarMap_8-InvStarMap
00017F9C 01                         InvStarMap_1: dc.b $1
00017F9D F800 0000 FC               	dc.b $F8, $0, $0, $0, $FC
00017FA2 01                         InvStarMap_2: dc.b $1
00017FA3 F800 0001 FC               	dc.b $F8, $0, $0, $1, $FC
00017FA8 01                         InvStarMap_3: dc.b $1
00017FA9 F801 0002 FC               	dc.b $F8, $1, $0, $2, $FC
00017FAE 01                         InvStarMap_4: dc.b $1
00017FAF F801 0004 FC               	dc.b $F8, $1, $0, $4, $FC
00017FB4 01                         InvStarMap_5: dc.b $1
00017FB5 F801 0006 FC               	dc.b $F8, $1, $0, $6, $FC
00017FBA 01                         InvStarMap_6: dc.b $1
00017FBB F805 0008 F8               	dc.b $F8, $5, $0, $8, $F8
00017FC0 01                         InvStarMap_7: dc.b $1
00017FC1 F805 000C F8               	dc.b $F8, $5, $0, $C, $F8
00017FC6 01                         InvStarMap_8: dc.b $1
00017FC7 F00F 0010 F0               	dc.b $F0, $F, $0, $10, $F0
00017FCC                            	even
00017FCC                            	even
00017FCC                            		include	"_anim\Special Stage Entry (Unused).asm"
00017FCC                            ; ---------------------------------------------------------------------------
00017FCC                            ; Animation script - special stage entry effect from beta
00017FCC                            ; ---------------------------------------------------------------------------
00017FCC 0000                       Ani_Vanish:	dc.w @vanish-Ani_Vanish
00017FCE 0500 0100 0100 0701 0702+  @vanish:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, afRoutine
00017FE2                            		even
00017FE2                            		even
00017FE2                            Map_Vanish:	include	"_maps\Special Stage Entry (Unused).asm"
00017FE2                            ; ---------------------------------------------------------------------------
00017FE2                            ; Sprite mappings - special stage entry	from beta
00017FE2                            ; ---------------------------------------------------------------------------
00017FE2                            Map_Vanish_internal:
00017FE2 0000                       		dc.w @flash1-Map_Vanish_internal
00017FE4 0000                       		dc.w @flash2-Map_Vanish_internal
00017FE6 0000                       		dc.w @flash3-Map_Vanish_internal
00017FE8 0000                       		dc.w @sparkle1-Map_Vanish_internal
00017FEA 0000                       		dc.w @sparkle2-Map_Vanish_internal
00017FEC 0000                       		dc.w @sparkle3-Map_Vanish_internal
00017FEE 0000                       		dc.w @sparkle4-Map_Vanish_internal
00017FF0 0000                       		dc.w @blank-Map_Vanish_internal
00017FF2 03                         @flash1:	dc.b 3
00017FF3 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00017FF8 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00017FFD 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00018002 03                         @flash2:	dc.b 3
00018003 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00018008 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
0001800D 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00018012 05                         @flash3:	dc.b 5
00018013 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00018018 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
0001801D FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00018022 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00018027 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
0001802C 09                         @sparkle1:	dc.b 9
0001802D F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00018032 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00018037 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
0001803C 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00018041 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00018046 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
0001804B F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00018050 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00018055 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
0001805A 12                         @sparkle2:	dc.b $12
0001805B 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00018060 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00018065 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
0001806A 0000 0025 00               		dc.b 0,	0, 0, $25, 0
0001806F 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00018074 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00018079 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
0001807E F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00018083 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00018088 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
0001808D 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00018092 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00018097 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
0001809C F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
000180A1 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
000180A6 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
000180AB 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
000180B0 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
000180B5 11                         @sparkle3:	dc.b $11
000180B6 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
000180BB F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
000180C0 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
000180C5 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
000180CA 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
000180CF F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000180D4 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
000180D9 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
000180DE 0000 0025 30               		dc.b 0,	0, 0, $25, $30
000180E3 0800 0825 30               		dc.b 8,	0, 8, $25, $30
000180E8 0000 0826 38               		dc.b 0,	0, 8, $26, $38
000180ED 0800 0029 38               		dc.b 8,	0, 0, $29, $38
000180F2 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
000180F7 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
000180FC F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00018101 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00018106 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
0001810B 09                         @sparkle4:	dc.b 9
0001810C FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00018111 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00018116 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
0001811B 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00018120 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00018125 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
0001812A 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
0001812F 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00018134 04                         		dc.b 4
00018135 0008 2758 00               @blank:		dc.b 0,	8, $27,	$58, 0
0001813A                            		even
0001813A                            		even
0001813A                            		include	"_anim\Water Splash.asm"
0001813A                            ; ---------------------------------------------------------------------------
0001813A                            ; Animation script - water splash (LZ)
0001813A                            ; ---------------------------------------------------------------------------
0001813A 0000                       Ani_Splash:	dc.w @splash-Ani_Splash
0001813C 0400 0102 FC               @splash:	dc.b 4,	0, 1, 2, afRoutine
00018142 00                         		even
00018142 00                         		even
00018142                            Map_Splash:	include	"_maps\Water Splash.asm"
00018142                            ; ---------------------------------------------------------------------------
00018142                            ; Sprite mappings - water splash (LZ)
00018142                            ; ---------------------------------------------------------------------------
00018142                            Map_Splash_internal:
00018142 0000                       		dc.w @splash1-Map_Splash_internal
00018144 0000                       		dc.w @splash2-Map_Splash_internal
00018146 0000                       		dc.w @splash3-Map_Splash_internal
00018148 02                         @splash1:	dc.b 2
00018149 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
0001814E FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00018153 02                         @splash2:	dc.b 2
00018154 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00018159 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
0001815E 01                         @splash3:	dc.b 1
0001815F E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00018164                            		even
00018164                            		even
00018164                            
00018164                            		include	"_incObj\Sonic AnglePos.asm"
00018164                            ; ---------------------------------------------------------------------------
00018164                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00018164                            ; ---------------------------------------------------------------------------
00018164                            
00018164                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018164                            
00018164                            
00018164                            Sonic_AnglePos:
00018164 0828 0003 0022             		btst	#3,obStatus(a0)
0001816A 6700                       		beq.s	loc_14602
0001816C 7000                       		moveq	#0,d0
0001816E 11C0 F768                  		move.b	d0,($FFFFF768).w
00018172 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00018176 4E75                       		rts	
00018178                            ; ===========================================================================
00018178                            
00018178                            loc_14602:
00018178 7003                       		moveq	#3,d0
0001817A 11C0 F768                  		move.b	d0,($FFFFF768).w
0001817E 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00018182 1028 0026                  		move.b	obAngle(a0),d0
00018186 0600 0020                  		addi.b	#$20,d0
0001818A 6A00                       		bpl.s	loc_14624
0001818C 1028 0026                  		move.b	obAngle(a0),d0
00018190 6A00                       		bpl.s	loc_1461E
00018192 5300                       		subq.b	#1,d0
00018194                            
00018194                            loc_1461E:
00018194 0600 0020                  		addi.b	#$20,d0
00018198 6000                       		bra.s	loc_14630
0001819A                            ; ===========================================================================
0001819A                            
0001819A                            loc_14624:
0001819A 1028 0026                  		move.b	obAngle(a0),d0
0001819E 6A00                       		bpl.s	loc_1462C
000181A0 5200                       		addq.b	#1,d0
000181A2                            
000181A2                            loc_1462C:
000181A2 0600 001F                  		addi.b	#$1F,d0
000181A6                            
000181A6                            loc_14630:
000181A6 0200 00C0                  		andi.b	#$C0,d0
000181AA 0C00 0040                  		cmpi.b	#$40,d0
000181AE 6700 0000                  		beq.w	Sonic_WalkVertL
000181B2 0C00 0080                  		cmpi.b	#$80,d0
000181B6 6700 0000                  		beq.w	Sonic_WalkCeiling
000181BA 0C00 00C0                  		cmpi.b	#$C0,d0
000181BE 6700 0000                  		beq.w	Sonic_WalkVertR
000181C2 3428 000C                  		move.w	obY(a0),d2
000181C6 3628 0008                  		move.w	obX(a0),d3
000181CA 7000                       		moveq	#0,d0
000181CC 1028 0016                  		move.b	obHeight(a0),d0
000181D0 4880                       		ext.w	d0
000181D2 D440                       		add.w	d0,d2
000181D4 1028 0017                  		move.b	obWidth(a0),d0
000181D8 4880                       		ext.w	d0
000181DA D640                       		add.w	d0,d3
000181DC 49F8 F768                  		lea	($FFFFF768).w,a4
000181E0 367C 0010                  		movea.w	#$10,a3
000181E4 3C3C 0000                  		move.w	#0,d6
000181E8 7A0D                       		moveq	#$D,d5
000181EA 6100 0000                  		bsr.w	FindFloor
000181EE 3F01                       		move.w	d1,-(sp)
000181F0 3428 000C                  		move.w	obY(a0),d2
000181F4 3628 0008                  		move.w	obX(a0),d3
000181F8 7000                       		moveq	#0,d0
000181FA 1028 0016                  		move.b	obHeight(a0),d0
000181FE 4880                       		ext.w	d0
00018200 D440                       		add.w	d0,d2
00018202 1028 0017                  		move.b	obWidth(a0),d0
00018206 4880                       		ext.w	d0
00018208 4440                       		neg.w	d0
0001820A D640                       		add.w	d0,d3
0001820C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018210 367C 0010                  		movea.w	#$10,a3
00018214 3C3C 0000                  		move.w	#0,d6
00018218 7A0D                       		moveq	#$D,d5
0001821A 6100 0000                  		bsr.w	FindFloor
0001821E 301F                       		move.w	(sp)+,d0
00018220 6100 0000                  		bsr.w	Sonic_Angle
00018224 4A41                       		tst.w	d1
00018226 6700                       		beq.s	locret_146BE
00018228 6A00                       		bpl.s	loc_146C0
0001822A 0C41 FFF2                  		cmpi.w	#-$E,d1
0001822E 6D00                       		blt.s	locret_146E6
00018230 D368 000C                  		add.w	d1,obY(a0)
00018234                            
00018234                            locret_146BE:
00018234 4E75                       		rts	
00018236                            ; ===========================================================================
00018236                            
00018236                            loc_146C0:
00018236 0C41 000E                  		cmpi.w	#$E,d1
0001823A 6E00                       		bgt.s	loc_146CC
0001823C                            
0001823C                            loc_146C6:
0001823C D368 000C                  		add.w	d1,obY(a0)
00018240 4E75                       		rts	
00018242                            ; ===========================================================================
00018242                            
00018242                            loc_146CC:
00018242 4A28 0038                  		tst.b	$38(a0)
00018246 66F4                       		bne.s	loc_146C6
00018248 08E8 0001 0022             		bset	#1,obStatus(a0)
0001824E 08A8 0005 0022             		bclr	#5,obStatus(a0)
00018254 117C 0001 001D             		move.b	#1,obNextAni(a0)
0001825A 4E75                       		rts	
0001825C                            ; ===========================================================================
0001825C                            
0001825C                            locret_146E6:
0001825C 4E75                       		rts	
0001825E                            ; End of function Sonic_AnglePos
0001825E                            
0001825E                            ; ===========================================================================
0001825E 2428 0008                  		move.l	obX(a0),d2
00018262 3028 0010                  		move.w	obVelX(a0),d0
00018266 48C0                       		ext.l	d0
00018268 E180                       		asl.l	#8,d0
0001826A 9480                       		sub.l	d0,d2
0001826C 2142 0008                  		move.l	d2,obX(a0)
00018270 303C 0038                  		move.w	#$38,d0
00018274 48C0                       		ext.l	d0
00018276 E180                       		asl.l	#8,d0
00018278 9680                       		sub.l	d0,d3
0001827A 2143 000C                  		move.l	d3,obY(a0)
0001827E 4E75                       		rts	
00018280                            ; ===========================================================================
00018280                            
00018280                            locret_1470A:
00018280 4E75                       		rts	
00018282                            ; ===========================================================================
00018282 2628 000C                  		move.l	obY(a0),d3
00018286 3028 0012                  		move.w	obVelY(a0),d0
0001828A 0440 0038                  		subi.w	#$38,d0
0001828E 3140 0012                  		move.w	d0,obVelY(a0)
00018292 48C0                       		ext.l	d0
00018294 E180                       		asl.l	#8,d0
00018296 9680                       		sub.l	d0,d3
00018298 2143 000C                  		move.l	d3,obY(a0)
0001829C 4E75                       		rts	
0001829E 4E75                       		rts	
000182A0                            ; ===========================================================================
000182A0 2428 0008                  		move.l	obX(a0),d2
000182A4 2628 000C                  		move.l	obY(a0),d3
000182A8 3028 0010                  		move.w	obVelX(a0),d0
000182AC 48C0                       		ext.l	d0
000182AE E180                       		asl.l	#8,d0
000182B0 9480                       		sub.l	d0,d2
000182B2 3028 0012                  		move.w	obVelY(a0),d0
000182B6 48C0                       		ext.l	d0
000182B8 E180                       		asl.l	#8,d0
000182BA 9680                       		sub.l	d0,d3
000182BC 2142 0008                  		move.l	d2,obX(a0)
000182C0 2143 000C                  		move.l	d3,obY(a0)
000182C4 4E75                       		rts	
000182C6                            
000182C6                            ; ---------------------------------------------------------------------------
000182C6                            ; Subroutine to	change Sonic's angle as he walks along the floor
000182C6                            ; ---------------------------------------------------------------------------
000182C6                            
000182C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000182C6                            
000182C6                            
000182C6                            Sonic_Angle:
000182C6 1438 F76A                  		move.b	($FFFFF76A).w,d2
000182CA B240                       		cmp.w	d0,d1
000182CC 6F00                       		ble.s	loc_1475E
000182CE 1438 F768                  		move.b	($FFFFF768).w,d2
000182D2 3200                       		move.w	d0,d1
000182D4                            
000182D4                            loc_1475E:
000182D4 0802 0000                  		btst	#0,d2
000182D8 6600                       		bne.s	loc_1476A
000182DA 1142 0026                  		move.b	d2,obAngle(a0)
000182DE 4E75                       		rts	
000182E0                            ; ===========================================================================
000182E0                            
000182E0                            loc_1476A:
000182E0 1428 0026                  		move.b	obAngle(a0),d2
000182E4 0602 0020                  		addi.b	#$20,d2
000182E8 0202 00C0                  		andi.b	#$C0,d2
000182EC 1142 0026                  		move.b	d2,obAngle(a0)
000182F0 4E75                       		rts	
000182F2                            ; End of function Sonic_Angle
000182F2                            
000182F2                            ; ---------------------------------------------------------------------------
000182F2                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000182F2                            ; ---------------------------------------------------------------------------
000182F2                            
000182F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000182F2                            
000182F2                            
000182F2                            Sonic_WalkVertR:
000182F2 3428 000C                  		move.w	obY(a0),d2
000182F6 3628 0008                  		move.w	obX(a0),d3
000182FA 7000                       		moveq	#0,d0
000182FC 1028 0017                  		move.b	obWidth(a0),d0
00018300 4880                       		ext.w	d0
00018302 4440                       		neg.w	d0
00018304 D440                       		add.w	d0,d2
00018306 1028 0016                  		move.b	obHeight(a0),d0
0001830A 4880                       		ext.w	d0
0001830C D640                       		add.w	d0,d3
0001830E 49F8 F768                  		lea	($FFFFF768).w,a4
00018312 367C 0010                  		movea.w	#$10,a3
00018316 3C3C 0000                  		move.w	#0,d6
0001831A 7A0D                       		moveq	#$D,d5
0001831C 6100 0000                  		bsr.w	FindWall
00018320 3F01                       		move.w	d1,-(sp)
00018322 3428 000C                  		move.w	obY(a0),d2
00018326 3628 0008                  		move.w	obX(a0),d3
0001832A 7000                       		moveq	#0,d0
0001832C 1028 0017                  		move.b	obWidth(a0),d0
00018330 4880                       		ext.w	d0
00018332 D440                       		add.w	d0,d2
00018334 1028 0016                  		move.b	obHeight(a0),d0
00018338 4880                       		ext.w	d0
0001833A D640                       		add.w	d0,d3
0001833C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018340 367C 0010                  		movea.w	#$10,a3
00018344 3C3C 0000                  		move.w	#0,d6
00018348 7A0D                       		moveq	#$D,d5
0001834A 6100 0000                  		bsr.w	FindWall
0001834E 301F                       		move.w	(sp)+,d0
00018350 6100 FF74                  		bsr.w	Sonic_Angle
00018354 4A41                       		tst.w	d1
00018356 6700                       		beq.s	locret_147F0
00018358 6A00                       		bpl.s	loc_147F2
0001835A 0C41 FFF2                  		cmpi.w	#-$E,d1
0001835E 6D00 FF20                  		blt.w	locret_1470A
00018362 D368 0008                  		add.w	d1,obX(a0)
00018366                            
00018366                            locret_147F0:
00018366 4E75                       		rts	
00018368                            ; ===========================================================================
00018368                            
00018368                            loc_147F2:
00018368 0C41 000E                  		cmpi.w	#$E,d1
0001836C 6E00                       		bgt.s	loc_147FE
0001836E                            
0001836E                            loc_147F8:
0001836E D368 0008                  		add.w	d1,obX(a0)
00018372 4E75                       		rts	
00018374                            ; ===========================================================================
00018374                            
00018374                            loc_147FE:
00018374 4A28 0038                  		tst.b	$38(a0)
00018378 66F4                       		bne.s	loc_147F8
0001837A 08E8 0001 0022             		bset	#1,obStatus(a0)
00018380 08A8 0005 0022             		bclr	#5,obStatus(a0)
00018386 117C 0001 001D             		move.b	#1,obNextAni(a0)
0001838C 4E75                       		rts	
0001838E                            ; End of function Sonic_WalkVertR
0001838E                            
0001838E                            ; ---------------------------------------------------------------------------
0001838E                            ; Subroutine allowing Sonic to walk upside-down
0001838E                            ; ---------------------------------------------------------------------------
0001838E                            
0001838E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001838E                            
0001838E                            
0001838E                            Sonic_WalkCeiling:
0001838E 3428 000C                  		move.w	obY(a0),d2
00018392 3628 0008                  		move.w	obX(a0),d3
00018396 7000                       		moveq	#0,d0
00018398 1028 0016                  		move.b	obHeight(a0),d0
0001839C 4880                       		ext.w	d0
0001839E 9440                       		sub.w	d0,d2
000183A0 0A42 000F                  		eori.w	#$F,d2
000183A4 1028 0017                  		move.b	obWidth(a0),d0
000183A8 4880                       		ext.w	d0
000183AA D640                       		add.w	d0,d3
000183AC 49F8 F768                  		lea	($FFFFF768).w,a4
000183B0 367C FFF0                  		movea.w	#-$10,a3
000183B4 3C3C 1000                  		move.w	#$1000,d6
000183B8 7A0D                       		moveq	#$D,d5
000183BA 6100 0000                  		bsr.w	FindFloor
000183BE 3F01                       		move.w	d1,-(sp)
000183C0 3428 000C                  		move.w	obY(a0),d2
000183C4 3628 0008                  		move.w	obX(a0),d3
000183C8 7000                       		moveq	#0,d0
000183CA 1028 0016                  		move.b	obHeight(a0),d0
000183CE 4880                       		ext.w	d0
000183D0 9440                       		sub.w	d0,d2
000183D2 0A42 000F                  		eori.w	#$F,d2
000183D6 1028 0017                  		move.b	obWidth(a0),d0
000183DA 4880                       		ext.w	d0
000183DC 9640                       		sub.w	d0,d3
000183DE 49F8 F76A                  		lea	($FFFFF76A).w,a4
000183E2 367C FFF0                  		movea.w	#-$10,a3
000183E6 3C3C 1000                  		move.w	#$1000,d6
000183EA 7A0D                       		moveq	#$D,d5
000183EC 6100 0000                  		bsr.w	FindFloor
000183F0 301F                       		move.w	(sp)+,d0
000183F2 6100 FED2                  		bsr.w	Sonic_Angle
000183F6 4A41                       		tst.w	d1
000183F8 6700                       		beq.s	locret_14892
000183FA 6A00                       		bpl.s	loc_14894
000183FC 0C41 FFF2                  		cmpi.w	#-$E,d1
00018400 6D00 FE5A                  		blt.w	locret_146E6
00018404 9368 000C                  		sub.w	d1,obY(a0)
00018408                            
00018408                            locret_14892:
00018408 4E75                       		rts	
0001840A                            ; ===========================================================================
0001840A                            
0001840A                            loc_14894:
0001840A 0C41 000E                  		cmpi.w	#$E,d1
0001840E 6E00                       		bgt.s	loc_148A0
00018410                            
00018410                            loc_1489A:
00018410 9368 000C                  		sub.w	d1,obY(a0)
00018414 4E75                       		rts	
00018416                            ; ===========================================================================
00018416                            
00018416                            loc_148A0:
00018416 4A28 0038                  		tst.b	$38(a0)
0001841A 66F4                       		bne.s	loc_1489A
0001841C 08E8 0001 0022             		bset	#1,obStatus(a0)
00018422 08A8 0005 0022             		bclr	#5,obStatus(a0)
00018428 117C 0001 001D             		move.b	#1,obNextAni(a0)
0001842E 4E75                       		rts	
00018430                            ; End of function Sonic_WalkCeiling
00018430                            
00018430                            ; ---------------------------------------------------------------------------
00018430                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00018430                            ; ---------------------------------------------------------------------------
00018430                            
00018430                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018430                            
00018430                            
00018430                            Sonic_WalkVertL:
00018430 3428 000C                  		move.w	obY(a0),d2
00018434 3628 0008                  		move.w	obX(a0),d3
00018438 7000                       		moveq	#0,d0
0001843A 1028 0017                  		move.b	obWidth(a0),d0
0001843E 4880                       		ext.w	d0
00018440 9440                       		sub.w	d0,d2
00018442 1028 0016                  		move.b	obHeight(a0),d0
00018446 4880                       		ext.w	d0
00018448 9640                       		sub.w	d0,d3
0001844A 0A43 000F                  		eori.w	#$F,d3
0001844E 49F8 F768                  		lea	($FFFFF768).w,a4
00018452 367C FFF0                  		movea.w	#-$10,a3
00018456 3C3C 0800                  		move.w	#$800,d6
0001845A 7A0D                       		moveq	#$D,d5
0001845C 6100 0000                  		bsr.w	FindWall
00018460 3F01                       		move.w	d1,-(sp)
00018462 3428 000C                  		move.w	obY(a0),d2
00018466 3628 0008                  		move.w	obX(a0),d3
0001846A 7000                       		moveq	#0,d0
0001846C 1028 0017                  		move.b	obWidth(a0),d0
00018470 4880                       		ext.w	d0
00018472 D440                       		add.w	d0,d2
00018474 1028 0016                  		move.b	obHeight(a0),d0
00018478 4880                       		ext.w	d0
0001847A 9640                       		sub.w	d0,d3
0001847C 0A43 000F                  		eori.w	#$F,d3
00018480 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018484 367C FFF0                  		movea.w	#-$10,a3
00018488 3C3C 0800                  		move.w	#$800,d6
0001848C 7A0D                       		moveq	#$D,d5
0001848E 6100 0000                  		bsr.w	FindWall
00018492 301F                       		move.w	(sp)+,d0
00018494 6100 FE30                  		bsr.w	Sonic_Angle
00018498 4A41                       		tst.w	d1
0001849A 6700                       		beq.s	locret_14934
0001849C 6A00                       		bpl.s	loc_14936
0001849E 0C41 FFF2                  		cmpi.w	#-$E,d1
000184A2 6D00 FDDC                  		blt.w	locret_1470A
000184A6 9368 0008                  		sub.w	d1,obX(a0)
000184AA                            
000184AA                            locret_14934:
000184AA 4E75                       		rts	
000184AC                            ; ===========================================================================
000184AC                            
000184AC                            loc_14936:
000184AC 0C41 000E                  		cmpi.w	#$E,d1
000184B0 6E00                       		bgt.s	loc_14942
000184B2                            
000184B2                            loc_1493C:
000184B2 9368 0008                  		sub.w	d1,obX(a0)
000184B6 4E75                       		rts	
000184B8                            ; ===========================================================================
000184B8                            
000184B8                            loc_14942:
000184B8 4A28 0038                  		tst.b	$38(a0)
000184BC 66F4                       		bne.s	loc_1493C
000184BE 08E8 0001 0022             		bset	#1,obStatus(a0)
000184C4 08A8 0005 0022             		bclr	#5,obStatus(a0)
000184CA 117C 0001 001D             		move.b	#1,obNextAni(a0)
000184D0 4E75                       		rts	
000184D2                            ; End of function Sonic_WalkVertL
000184D2                            ; End of function Sonic_WalkVertL
000184D2                            
000184D2                            		include	"_incObj\sub FindNearestTile.asm"
000184D2                            ; ---------------------------------------------------------------------------
000184D2                            ; Subroutine to	find which tile	the object is standing on
000184D2                            
000184D2                            ; input:
000184D2                            ;	d2 = y-position of object's bottom edge
000184D2                            ;	d3 = x-position of object
000184D2                            
000184D2                            ; output:
000184D2                            ;	a1 = address within 256x256 mappings where object is standing
000184D2                            ;	     (refers to a 16x16 tile number)
000184D2                            ; ---------------------------------------------------------------------------
000184D2                            
000184D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000184D2                            
000184D2                            
000184D2                            FindNearestTile:
000184D2 3002                       		move.w	d2,d0		; get y-pos. of bottom edge of object
000184D4 E248                       		lsr.w	#1,d0
000184D6 0240 0380                  		andi.w	#$380,d0
000184DA 3203                       		move.w	d3,d1		; get x-pos. of object
000184DC E049                       		lsr.w	#8,d1
000184DE 0241 007F                  		andi.w	#$7F,d1
000184E2 D041                       		add.w	d1,d0		; combine
000184E4 72FF                       		moveq	#-1,d1
000184E6 43F8 A400                  		lea	(v_lvllayout).w,a1
000184EA 1231 0000                  		move.b	(a1,d0.w),d1	; get 256x256 tile number
000184EE 6700                       		beq.s	@blanktile	; branch if 0
000184F0 6B00                       		bmi.s	@specialtile	; branch if >$7F
000184F2 5301                       		subq.b	#1,d1
000184F4 4881                       		ext.w	d1
000184F6 EE59                       		ror.w	#7,d1
000184F8 3002                       		move.w	d2,d0
000184FA D040                       		add.w	d0,d0
000184FC 0240 01E0                  		andi.w	#$1E0,d0
00018500 D240                       		add.w	d0,d1
00018502 3003                       		move.w	d3,d0
00018504 E648                       		lsr.w	#3,d0
00018506 0240 001E                  		andi.w	#$1E,d0
0001850A D240                       		add.w	d0,d1
0001850C                            
0001850C                            @blanktile:
0001850C 2241                       		movea.l	d1,a1
0001850E 4E75                       		rts	
00018510                            ; ===========================================================================
00018510                            
00018510                            @specialtile:
00018510 0241 007F                  		andi.w	#$7F,d1
00018514 0828 0006 0001             		btst	#6,obRender(a0) ; is object "behind a loop"?
0001851A 6700                       		beq.s	@treatasnormal	; if not, branch
0001851C 5241                       		addq.w	#1,d1
0001851E 0C41 0029                  		cmpi.w	#$29,d1
00018522 6600                       		bne.s	@treatasnormal
00018524 323C 0051                  		move.w	#$51,d1
00018528                            
00018528                            	@treatasnormal:
00018528 5301                       		subq.b	#1,d1
0001852A EE59                       		ror.w	#7,d1
0001852C 3002                       		move.w	d2,d0
0001852E D040                       		add.w	d0,d0
00018530 0240 01E0                  		andi.w	#$1E0,d0
00018534 D240                       		add.w	d0,d1
00018536 3003                       		move.w	d3,d0
00018538 E648                       		lsr.w	#3,d0
0001853A 0240 001E                  		andi.w	#$1E,d0
0001853E D240                       		add.w	d0,d1
00018540 2241                       		movea.l	d1,a1
00018542 4E75                       		rts	
00018544                            ; End of function FindNearestTile
00018544                            ; End of function FindNearestTile
00018544                            		include	"_incObj\sub FindFloor.asm"
00018544                            ; ---------------------------------------------------------------------------
00018544                            ; Subroutine to	find the floor
00018544                            
00018544                            ; input:
00018544                            ;	d2 = y-position of object's bottom edge
00018544                            ;	d3 = x-position of object
00018544                            ;	d5 = bit to test for solidness
00018544                            
00018544                            ; output:
00018544                            ;	d1 = distance to the floor
00018544                            ;	a1 = address within 256x256 mappings where object is standing
00018544                            ;	     (refers to a 16x16 tile number)
00018544                            ;	(a4) = floor angle
00018544                            ; ---------------------------------------------------------------------------
00018544                            
00018544                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018544                            
00018544                            
00018544                            FindFloor:
00018544 618C                       		bsr.s	FindNearestTile
00018546 3011                       		move.w	(a1),d0		; get value for solidness, orientation and 16x16 tile number
00018548 3800                       		move.w	d0,d4
0001854A 0240 07FF                  		andi.w	#$7FF,d0
0001854E 6700                       		beq.s	@isblank	; branch if tile is blank
00018550 0B04                       		btst	d5,d4		; is the tile solid?
00018552 6600                       		bne.s	@issolid	; if yes, branch
00018554                            
00018554                            @isblank:
00018554 D44B                       		add.w	a3,d2
00018556 6100 0000                  		bsr.w	FindFloor2	; try tile below the nearest
0001855A 944B                       		sub.w	a3,d2
0001855C 0641 0010                  		addi.w	#$10,d1		; return distance to floor
00018560 4E75                       		rts	
00018562                            ; ===========================================================================
00018562                            
00018562                            @issolid:
00018562 2478 F796                  		movea.l	(v_collindex).w,a2
00018566 1032 0000                  		move.b	(a2,d0.w),d0	; get collision block number
0001856A 0240 00FF                  		andi.w	#$FF,d0
0001856E 67E4                       		beq.s	@isblank	; branch if 0
00018570 45F9 0000 0000             		lea	(AngleMap).l,a2
00018576 18B2 0000                  		move.b	(a2,d0.w),(a4)	; get collision angle value
0001857A E948                       		lsl.w	#4,d0
0001857C 3203                       		move.w	d3,d1		; get x-pos. of object
0001857E 0804 000B                  		btst	#$B,d4		; is block flipped horizontally?
00018582 6700                       		beq.s	@noflip		; if not, branch
00018584 4641                       		not.w	d1
00018586 4414                       		neg.b	(a4)
00018588                            
00018588                            	@noflip:
00018588 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
0001858C 6700                       		beq.s	@noflip2	; if not, branch
0001858E 0614 0040                  		addi.b	#$40,(a4)
00018592 4414                       		neg.b	(a4)
00018594 0414 0040                  		subi.b	#$40,(a4)
00018598                            
00018598                            	@noflip2:
00018598 0241 000F                  		andi.w	#$F,d1
0001859C D240                       		add.w	d0,d1		; (block num. * $10) + x-pos. = place in array
0001859E 45F9 0000 0000             		lea	(CollArray1).l,a2
000185A4 1032 1000                  		move.b	(a2,d1.w),d0	; get collision height
000185A8 4880                       		ext.w	d0
000185AA BD44                       		eor.w	d6,d4
000185AC 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
000185B0 6700                       		beq.s	@noflip3	; if not, branch
000185B2 4440                       		neg.w	d0
000185B4                            
000185B4                            	@noflip3:
000185B4 4A40                       		tst.w	d0
000185B6 679C                       		beq.s	@isblank	; branch if height is 0
000185B8 6B00                       		bmi.s	@negfloor	; branch if height is negative
000185BA 0C00 0010                  		cmpi.b	#$10,d0
000185BE 6700                       		beq.s	@maxfloor	; branch if height is $10 (max)
000185C0 3202                       		move.w	d2,d1		; get y-pos. of object
000185C2 0241 000F                  		andi.w	#$F,d1
000185C6 D041                       		add.w	d1,d0
000185C8 323C 000F                  		move.w	#$F,d1
000185CC 9240                       		sub.w	d0,d1		; return distance to floor
000185CE 4E75                       		rts	
000185D0                            ; ===========================================================================
000185D0                            
000185D0                            @negfloor:
000185D0 3202                       		move.w	d2,d1
000185D2 0241 000F                  		andi.w	#$F,d1
000185D6 D041                       		add.w	d1,d0
000185D8 6A00 FF7A                  		bpl.w	@isblank
000185DC                            
000185DC                            @maxfloor:
000185DC 944B                       		sub.w	a3,d2
000185DE 6100 0000                  		bsr.w	FindFloor2	; try tile above the nearest
000185E2 D44B                       		add.w	a3,d2
000185E4 0441 0010                  		subi.w	#$10,d1		; return distance to floor
000185E8 4E75                       		rts	
000185EA                            ; End of function FindFloor
000185EA                            
000185EA                            
000185EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000185EA                            
000185EA                            
000185EA                            FindFloor2:
000185EA 6100 FEE6                  		bsr.w	FindNearestTile
000185EE 3011                       		move.w	(a1),d0
000185F0 3800                       		move.w	d0,d4
000185F2 0240 07FF                  		andi.w	#$7FF,d0
000185F6 6700                       		beq.s	@isblank2
000185F8 0B04                       		btst	d5,d4
000185FA 6600                       		bne.s	@issolid
000185FC                            
000185FC                            @isblank2:
000185FC 323C 000F                  		move.w	#$F,d1
00018600 3002                       		move.w	d2,d0
00018602 0240 000F                  		andi.w	#$F,d0
00018606 9240                       		sub.w	d0,d1
00018608 4E75                       		rts	
0001860A                            ; ===========================================================================
0001860A                            
0001860A                            @issolid:
0001860A 2478 F796                  		movea.l	(v_collindex).w,a2
0001860E 1032 0000                  		move.b	(a2,d0.w),d0
00018612 0240 00FF                  		andi.w	#$FF,d0
00018616 67E4                       		beq.s	@isblank2
00018618 45F9 0000 0000             		lea	(AngleMap).l,a2
0001861E 18B2 0000                  		move.b	(a2,d0.w),(a4)
00018622 E948                       		lsl.w	#4,d0
00018624 3203                       		move.w	d3,d1
00018626 0804 000B                  		btst	#$B,d4
0001862A 6700                       		beq.s	@noflip
0001862C 4641                       		not.w	d1
0001862E 4414                       		neg.b	(a4)
00018630                            
00018630                            	@noflip:
00018630 0804 000C                  		btst	#$C,d4
00018634 6700                       		beq.s	@noflip2
00018636 0614 0040                  		addi.b	#$40,(a4)
0001863A 4414                       		neg.b	(a4)
0001863C 0414 0040                  		subi.b	#$40,(a4)
00018640                            
00018640                            	@noflip2:
00018640 0241 000F                  		andi.w	#$F,d1
00018644 D240                       		add.w	d0,d1
00018646 45F9 0000 0000             		lea	(CollArray1).l,a2
0001864C 1032 1000                  		move.b	(a2,d1.w),d0
00018650 4880                       		ext.w	d0
00018652 BD44                       		eor.w	d6,d4
00018654 0804 000C                  		btst	#$C,d4
00018658 6700                       		beq.s	@noflip3
0001865A 4440                       		neg.w	d0
0001865C                            
0001865C                            	@noflip3:
0001865C 4A40                       		tst.w	d0
0001865E 679C                       		beq.s	@isblank2
00018660 6B00                       		bmi.s	@negfloor
00018662 3202                       		move.w	d2,d1
00018664 0241 000F                  		andi.w	#$F,d1
00018668 D041                       		add.w	d1,d0
0001866A 323C 000F                  		move.w	#$F,d1
0001866E 9240                       		sub.w	d0,d1
00018670 4E75                       		rts	
00018672                            ; ===========================================================================
00018672                            
00018672                            @negfloor:
00018672 3202                       		move.w	d2,d1
00018674 0241 000F                  		andi.w	#$F,d1
00018678 D041                       		add.w	d1,d0
0001867A 6A00 FF80                  		bpl.w	@isblank2
0001867E 4641                       		not.w	d1
00018680 4E75                       		rts	
00018682                            ; End of function FindFloor2
00018682                            ; End of function FindFloor2
00018682                            		include	"_incObj\sub FindWall.asm"
00018682                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018682                            
00018682                            
00018682                            FindWall:
00018682 6100 FE4E                  		bsr.w	FindNearestTile
00018686 3011                       		move.w	(a1),d0
00018688 3800                       		move.w	d0,d4
0001868A 0240 07FF                  		andi.w	#$7FF,d0
0001868E 6700                       		beq.s	loc_14B1E
00018690 0B04                       		btst	d5,d4
00018692 6600                       		bne.s	loc_14B2C
00018694                            
00018694                            loc_14B1E:
00018694 D64B                       		add.w	a3,d3
00018696 6100 0000                  		bsr.w	FindWall2
0001869A 964B                       		sub.w	a3,d3
0001869C 0641 0010                  		addi.w	#$10,d1
000186A0 4E75                       		rts	
000186A2                            ; ===========================================================================
000186A2                            
000186A2                            loc_14B2C:
000186A2 2478 F796                  		movea.l	(v_collindex).w,a2
000186A6 1032 0000                  		move.b	(a2,d0.w),d0
000186AA 0240 00FF                  		andi.w	#$FF,d0
000186AE 67E4                       		beq.s	loc_14B1E
000186B0 45F9 0000 0000             		lea	(AngleMap).l,a2
000186B6 18B2 0000                  		move.b	(a2,d0.w),(a4)
000186BA E948                       		lsl.w	#4,d0
000186BC 3202                       		move.w	d2,d1
000186BE 0804 000C                  		btst	#$C,d4
000186C2 6700                       		beq.s	loc_14B5A
000186C4 4641                       		not.w	d1
000186C6 0614 0040                  		addi.b	#$40,(a4)
000186CA 4414                       		neg.b	(a4)
000186CC 0414 0040                  		subi.b	#$40,(a4)
000186D0                            
000186D0                            loc_14B5A:
000186D0 0804 000B                  		btst	#$B,d4
000186D4 6700                       		beq.s	loc_14B62
000186D6 4414                       		neg.b	(a4)
000186D8                            
000186D8                            loc_14B62:
000186D8 0241 000F                  		andi.w	#$F,d1
000186DC D240                       		add.w	d0,d1
000186DE 45F9 0000 0000             		lea	(CollArray2).l,a2
000186E4 1032 1000                  		move.b	(a2,d1.w),d0
000186E8 4880                       		ext.w	d0
000186EA BD44                       		eor.w	d6,d4
000186EC 0804 000B                  		btst	#$B,d4
000186F0 6700                       		beq.s	loc_14B7E
000186F2 4440                       		neg.w	d0
000186F4                            
000186F4                            loc_14B7E:
000186F4 4A40                       		tst.w	d0
000186F6 679C                       		beq.s	loc_14B1E
000186F8 6B00                       		bmi.s	loc_14B9A
000186FA 0C00 0010                  		cmpi.b	#$10,d0
000186FE 6700                       		beq.s	loc_14BA6
00018700 3203                       		move.w	d3,d1
00018702 0241 000F                  		andi.w	#$F,d1
00018706 D041                       		add.w	d1,d0
00018708 323C 000F                  		move.w	#$F,d1
0001870C 9240                       		sub.w	d0,d1
0001870E 4E75                       		rts	
00018710                            ; ===========================================================================
00018710                            
00018710                            loc_14B9A:
00018710 3203                       		move.w	d3,d1
00018712 0241 000F                  		andi.w	#$F,d1
00018716 D041                       		add.w	d1,d0
00018718 6A00 FF7A                  		bpl.w	loc_14B1E
0001871C                            
0001871C                            loc_14BA6:
0001871C 964B                       		sub.w	a3,d3
0001871E 6100 0000                  		bsr.w	FindWall2
00018722 D64B                       		add.w	a3,d3
00018724 0441 0010                  		subi.w	#$10,d1
00018728 4E75                       		rts	
0001872A                            ; End of function FindWall
0001872A                            
0001872A                            
0001872A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001872A                            
0001872A                            
0001872A                            FindWall2:
0001872A 6100 FDA6                  		bsr.w	FindNearestTile
0001872E 3011                       		move.w	(a1),d0
00018730 3800                       		move.w	d0,d4
00018732 0240 07FF                  		andi.w	#$7FF,d0
00018736 6700                       		beq.s	loc_14BC6
00018738 0B04                       		btst	d5,d4
0001873A 6600                       		bne.s	loc_14BD4
0001873C                            
0001873C                            loc_14BC6:
0001873C 323C 000F                  		move.w	#$F,d1
00018740 3003                       		move.w	d3,d0
00018742 0240 000F                  		andi.w	#$F,d0
00018746 9240                       		sub.w	d0,d1
00018748 4E75                       		rts	
0001874A                            ; ===========================================================================
0001874A                            
0001874A                            loc_14BD4:
0001874A 2478 F796                  		movea.l	(v_collindex).w,a2
0001874E 1032 0000                  		move.b	(a2,d0.w),d0
00018752 0240 00FF                  		andi.w	#$FF,d0
00018756 67E4                       		beq.s	loc_14BC6
00018758 45F9 0000 0000             		lea	(AngleMap).l,a2
0001875E 18B2 0000                  		move.b	(a2,d0.w),(a4)
00018762 E948                       		lsl.w	#4,d0
00018764 3202                       		move.w	d2,d1
00018766 0804 000C                  		btst	#$C,d4
0001876A 6700                       		beq.s	loc_14C02
0001876C 4641                       		not.w	d1
0001876E 0614 0040                  		addi.b	#$40,(a4)
00018772 4414                       		neg.b	(a4)
00018774 0414 0040                  		subi.b	#$40,(a4)
00018778                            
00018778                            loc_14C02:
00018778 0804 000B                  		btst	#$B,d4
0001877C 6700                       		beq.s	loc_14C0A
0001877E 4414                       		neg.b	(a4)
00018780                            
00018780                            loc_14C0A:
00018780 0241 000F                  		andi.w	#$F,d1
00018784 D240                       		add.w	d0,d1
00018786 45F9 0000 0000             		lea	(CollArray2).l,a2
0001878C 1032 1000                  		move.b	(a2,d1.w),d0
00018790 4880                       		ext.w	d0
00018792 BD44                       		eor.w	d6,d4
00018794 0804 000B                  		btst	#$B,d4
00018798 6700                       		beq.s	loc_14C26
0001879A 4440                       		neg.w	d0
0001879C                            
0001879C                            loc_14C26:
0001879C 4A40                       		tst.w	d0
0001879E 679C                       		beq.s	loc_14BC6
000187A0 6B00                       		bmi.s	loc_14C3C
000187A2 3203                       		move.w	d3,d1
000187A4 0241 000F                  		andi.w	#$F,d1
000187A8 D041                       		add.w	d1,d0
000187AA 323C 000F                  		move.w	#$F,d1
000187AE 9240                       		sub.w	d0,d1
000187B0 4E75                       		rts	
000187B2                            ; ===========================================================================
000187B2                            
000187B2                            loc_14C3C:
000187B2 3203                       		move.w	d3,d1
000187B4 0241 000F                  		andi.w	#$F,d1
000187B8 D041                       		add.w	d1,d0
000187BA 6A00 FF80                  		bpl.w	loc_14BC6
000187BE 4641                       		not.w	d1
000187C0 4E75                       		rts	
000187C2                            ; End of function FindWall2
000187C2                            ; End of function FindWall2
000187C2                            
000187C2                            ; ---------------------------------------------------------------------------
000187C2                            ; Unused floor/wall subroutine - logs something	to do with collision
000187C2                            ; ---------------------------------------------------------------------------
000187C2                            
000187C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000187C2                            
000187C2                            
000187C2                            FloorLog_Unk:
000187C2 4E75                       		rts	
000187C4                            
000187C4 43F9 0000 0000             		lea	(CollArray1).l,a1
000187CA 45F9 0000 0000             		lea	(CollArray1).l,a2
000187D0 363C 00FF                  		move.w	#$FF,d3
000187D4                            
000187D4                            loc_14C5E:
000187D4 7A10                       		moveq	#$10,d5
000187D6 343C 000F                  		move.w	#$F,d2
000187DA                            
000187DA                            loc_14C64:
000187DA 7800                       		moveq	#0,d4
000187DC 323C 000F                  		move.w	#$F,d1
000187E0                            
000187E0                            loc_14C6A:
000187E0 3019                       		move.w	(a1)+,d0
000187E2 EAA8                       		lsr.l	d5,d0
000187E4 D944                       		addx.w	d4,d4
000187E6 51C9 FFF8                  		dbf	d1,loc_14C6A
000187EA                            
000187EA 34C4                       		move.w	d4,(a2)+
000187EC 92FC 0020                  		suba.w	#$20,a1
000187F0 5345                       		subq.w	#1,d5
000187F2 51CA FFE6                  		dbf	d2,loc_14C64
000187F6                            
000187F6 D2FC 0020                  		adda.w	#$20,a1
000187FA 51CB FFD8                  		dbf	d3,loc_14C5E
000187FE                            
000187FE 43F9 0000 0000             		lea	(CollArray1).l,a1
00018804 45F9 0000 0000             		lea	(CollArray2).l,a2
0001880A 6100                       		bsr.s	FloorLog_Unk2
0001880C 43F9 0000 0000             		lea	(CollArray1).l,a1
00018812 45F9 0000 0000             		lea	(CollArray1).l,a2
00018818                            
00018818                            ; End of function FloorLog_Unk
00018818                            
00018818                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018818                            
00018818                            
00018818                            FloorLog_Unk2:
00018818 363C 0FFF                  		move.w	#$FFF,d3
0001881C                            
0001881C                            loc_14CA6:
0001881C 7400                       		moveq	#0,d2
0001881E 323C 000F                  		move.w	#$F,d1
00018822 3019                       		move.w	(a1)+,d0
00018824 6700                       		beq.s	loc_14CD4
00018826 6B00                       		bmi.s	loc_14CBE
00018828                            
00018828                            loc_14CB2:
00018828 E248                       		lsr.w	#1,d0
0001882A 6400                       		bhs.s	loc_14CB8
0001882C 5202                       		addq.b	#1,d2
0001882E                            
0001882E                            loc_14CB8:
0001882E 51C9 FFF8                  		dbf	d1,loc_14CB2
00018832                            
00018832 6000                       		bra.s	loc_14CD6
00018834                            ; ===========================================================================
00018834                            
00018834                            loc_14CBE:
00018834 0C40 FFFF                  		cmpi.w	#-1,d0
00018838 6700                       		beq.s	loc_14CD0
0001883A                            
0001883A                            loc_14CC4:
0001883A E348                       		lsl.w	#1,d0
0001883C 6400                       		bhs.s	loc_14CCA
0001883E 5302                       		subq.b	#1,d2
00018840                            
00018840                            loc_14CCA:
00018840 51C9 FFF8                  		dbf	d1,loc_14CC4
00018844                            
00018844 6000                       		bra.s	loc_14CD6
00018846                            ; ===========================================================================
00018846                            
00018846                            loc_14CD0:
00018846 303C 0010                  		move.w	#$10,d0
0001884A                            
0001884A                            loc_14CD4:
0001884A 3400                       		move.w	d0,d2
0001884C                            
0001884C                            loc_14CD6:
0001884C 14C2                       		move.b	d2,(a2)+
0001884E 51CB FFCC                  		dbf	d3,loc_14CA6
00018852                            
00018852 4E75                       		rts	
00018854                            
00018854                            ; End of function FloorLog_Unk2
00018854                            
00018854                            
00018854                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018854                            
00018854                            
00018854                            Sonic_WalkSpeed:
00018854 2628 0008                  		move.l	obX(a0),d3
00018858 2428 000C                  		move.l	obY(a0),d2
0001885C 3228 0010                  		move.w	obVelX(a0),d1
00018860 48C1                       		ext.l	d1
00018862 E181                       		asl.l	#8,d1
00018864 D681                       		add.l	d1,d3
00018866 3228 0012                  		move.w	obVelY(a0),d1
0001886A 48C1                       		ext.l	d1
0001886C E181                       		asl.l	#8,d1
0001886E D481                       		add.l	d1,d2
00018870 4842                       		swap	d2
00018872 4843                       		swap	d3
00018874 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00018878 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001887C 1200                       		move.b	d0,d1
0001887E 0600 0020                  		addi.b	#$20,d0
00018882 6A00                       		bpl.s	loc_14D1A
00018884 1001                       		move.b	d1,d0
00018886 6A00                       		bpl.s	loc_14D14
00018888 5300                       		subq.b	#1,d0
0001888A                            
0001888A                            loc_14D14:
0001888A 0600 0020                  		addi.b	#$20,d0
0001888E 6000                       		bra.s	loc_14D24
00018890                            ; ===========================================================================
00018890                            
00018890                            loc_14D1A:
00018890 1001                       		move.b	d1,d0
00018892 6A00                       		bpl.s	loc_14D20
00018894 5200                       		addq.b	#1,d0
00018896                            
00018896                            loc_14D20:
00018896 0600 001F                  		addi.b	#$1F,d0
0001889A                            
0001889A                            loc_14D24:
0001889A 0200 00C0                  		andi.b	#$C0,d0
0001889E 6700 0000                  		beq.w	loc_14DF0
000188A2 0C00 0080                  		cmpi.b	#$80,d0
000188A6 6700 0000                  		beq.w	loc_14F7C
000188AA 0201 0038                  		andi.b	#$38,d1
000188AE 6600                       		bne.s	loc_14D3C
000188B0 5042                       		addq.w	#8,d2
000188B2                            
000188B2                            loc_14D3C:
000188B2 0C00 0040                  		cmpi.b	#$40,d0
000188B6 6700 0000                  		beq.w	loc_1504A
000188BA 6000 0000                  		bra.w	loc_14EBC
000188BE                            
000188BE                            ; End of function Sonic_WalkSpeed
000188BE                            
000188BE                            
000188BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000188BE                            
000188BE                            
000188BE                            sub_14D48:
000188BE 11C0 F768                  		move.b	d0,(v_anglebuffer).w
000188C2 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000188C6 0600 0020                  		addi.b	#$20,d0
000188CA 0200 00C0                  		andi.b	#$C0,d0
000188CE 0C00 0040                  		cmpi.b	#$40,d0
000188D2 6700 0000                  		beq.w	loc_14FD6
000188D6 0C00 0080                  		cmpi.b	#$80,d0
000188DA 6700 0000                  		beq.w	Sonic_DontRunOnWalls
000188DE 0C00 00C0                  		cmpi.b	#$C0,d0
000188E2 6700 0000                  		beq.w	sub_14E50
000188E6                            
000188E6                            ; End of function sub_14D48
000188E6                            
000188E6                            ; ---------------------------------------------------------------------------
000188E6                            ; Subroutine to	make Sonic land	on the floor after jumping
000188E6                            ; ---------------------------------------------------------------------------
000188E6                            
000188E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000188E6                            
000188E6                            
000188E6                            Sonic_HitFloor:
000188E6 3428 000C                  		move.w	obY(a0),d2
000188EA 3628 0008                  		move.w	obX(a0),d3
000188EE 7000                       		moveq	#0,d0
000188F0 1028 0016                  		move.b	obHeight(a0),d0
000188F4 4880                       		ext.w	d0
000188F6 D440                       		add.w	d0,d2
000188F8 1028 0017                  		move.b	obWidth(a0),d0
000188FC 4880                       		ext.w	d0
000188FE D640                       		add.w	d0,d3
00018900 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018904 367C 0010                  		movea.w	#$10,a3
00018908 3C3C 0000                  		move.w	#0,d6
0001890C 7A0D                       		moveq	#$D,d5
0001890E 6100 FC34                  		bsr.w	FindFloor
00018912 3F01                       		move.w	d1,-(sp)
00018914 3428 000C                  		move.w	obY(a0),d2
00018918 3628 0008                  		move.w	obX(a0),d3
0001891C 7000                       		moveq	#0,d0
0001891E 1028 0016                  		move.b	obHeight(a0),d0
00018922 4880                       		ext.w	d0
00018924 D440                       		add.w	d0,d2
00018926 1028 0017                  		move.b	obWidth(a0),d0
0001892A 4880                       		ext.w	d0
0001892C 9640                       		sub.w	d0,d3
0001892E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018932 367C 0010                  		movea.w	#$10,a3
00018936 3C3C 0000                  		move.w	#0,d6
0001893A 7A0D                       		moveq	#$D,d5
0001893C 6100 FC06                  		bsr.w	FindFloor
00018940 301F                       		move.w	(sp)+,d0
00018942 143C 0000                  		move.b	#0,d2
00018946                            
00018946                            loc_14DD0:
00018946 1638 F76A                  		move.b	($FFFFF76A).w,d3
0001894A B240                       		cmp.w	d0,d1
0001894C 6F00                       		ble.s	loc_14DDE
0001894E 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018952 C141                       		exg	d0,d1
00018954                            
00018954                            loc_14DDE:
00018954 0803 0000                  		btst	#0,d3
00018958 6700                       		beq.s	locret_14DE6
0001895A 1602                       		move.b	d2,d3
0001895C                            
0001895C                            locret_14DE6:
0001895C 4E75                       		rts	
0001895E                            
0001895E                            ; End of function Sonic_HitFloor
0001895E                            
0001895E                            ; ===========================================================================
0001895E 3428 000C                  		move.w	obY(a0),d2
00018962 3628 0008                  		move.w	obX(a0),d3
00018966                            
00018966                            loc_14DF0:
00018966 0642 000A                  		addi.w	#$A,d2
0001896A 49F8 F768                  		lea	(v_anglebuffer).w,a4
0001896E 367C 0010                  		movea.w	#$10,a3
00018972 3C3C 0000                  		move.w	#0,d6
00018976 7A0E                       		moveq	#$E,d5
00018978 6100 FBCA                  		bsr.w	FindFloor
0001897C 143C 0000                  		move.b	#0,d2
00018980                            
00018980                            loc_14E0A:
00018980 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018984 0803 0000                  		btst	#0,d3
00018988 6700                       		beq.s	locret_14E16
0001898A 1602                       		move.b	d2,d3
0001898C                            
0001898C                            locret_14E16:
0001898C 4E75                       		rts	
0001898E                            
0001898E                            		include	"_incObj\sub ObjFloorDist.asm"
0001898E                            ; ---------------------------------------------------------------------------
0001898E                            ; Subroutine to find the distance of an object to the floor
0001898E                            
0001898E                            ; input:
0001898E                            ;	d3 = x-pos. of object (ObjFloorDist2 only)
0001898E                            
0001898E                            ; output:
0001898E                            ;	d1 = distance to the floor
0001898E                            ;	d3 = floor angle
0001898E                            ;	a1 = address within 256x256 mappings where object is standing
0001898E                            ;	     (refers to a 16x16 tile number)
0001898E                            ;	(a4) = floor angle
0001898E                            ; ---------------------------------------------------------------------------
0001898E                            
0001898E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001898E                            
0001898E                            
0001898E                            ObjFloorDist:
0001898E 3628 0008                  		move.w	obX(a0),d3
00018992                            
00018992                            
00018992                            ObjFloorDist2:
00018992 3428 000C                  		move.w	obY(a0),d2
00018996 7000                       		moveq	#0,d0
00018998 1028 0016                  		move.b	obHeight(a0),d0
0001899C 4880                       		ext.w	d0
0001899E D440                       		add.w	d0,d2
000189A0 49F8 F768                  		lea	(v_anglebuffer).w,a4
000189A4 18BC 0000                  		move.b	#0,(a4)
000189A8 367C 0010                  		movea.w	#$10,a3		; height of a 16x16 tile
000189AC 3C3C 0000                  		move.w	#0,d6
000189B0 7A0D                       		moveq	#$D,d5		; bit to test for solidness
000189B2 6100 FB90                  		bsr.w	FindFloor
000189B6 1638 F768                  		move.b	(v_anglebuffer).w,d3
000189BA 0803 0000                  		btst	#0,d3
000189BE 6700                       		beq.s	locret_14E4E
000189C0 163C 0000                  		move.b	#0,d3
000189C4                            
000189C4                            	locret_14E4E:
000189C4 4E75                       		rts	
000189C6                            
000189C6                            ; End of function ObjFloorDist2
000189C6                            ; End of function ObjFloorDist2
000189C6                            
000189C6                            
000189C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000189C6                            
000189C6                            
000189C6                            sub_14E50:
000189C6 3428 000C                  		move.w	obY(a0),d2
000189CA 3628 0008                  		move.w	obX(a0),d3
000189CE 7000                       		moveq	#0,d0
000189D0 1028 0017                  		move.b	obWidth(a0),d0
000189D4 4880                       		ext.w	d0
000189D6 9440                       		sub.w	d0,d2
000189D8 1028 0016                  		move.b	obHeight(a0),d0
000189DC 4880                       		ext.w	d0
000189DE D640                       		add.w	d0,d3
000189E0 49F8 F768                  		lea	(v_anglebuffer).w,a4
000189E4 367C 0010                  		movea.w	#$10,a3
000189E8 3C3C 0000                  		move.w	#0,d6
000189EC 7A0E                       		moveq	#$E,d5
000189EE 6100 FC92                  		bsr.w	FindWall
000189F2 3F01                       		move.w	d1,-(sp)
000189F4 3428 000C                  		move.w	obY(a0),d2
000189F8 3628 0008                  		move.w	obX(a0),d3
000189FC 7000                       		moveq	#0,d0
000189FE 1028 0017                  		move.b	obWidth(a0),d0
00018A02 4880                       		ext.w	d0
00018A04 D440                       		add.w	d0,d2
00018A06 1028 0016                  		move.b	obHeight(a0),d0
00018A0A 4880                       		ext.w	d0
00018A0C D640                       		add.w	d0,d3
00018A0E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018A12 367C 0010                  		movea.w	#$10,a3
00018A16 3C3C 0000                  		move.w	#0,d6
00018A1A 7A0E                       		moveq	#$E,d5
00018A1C 6100 FC64                  		bsr.w	FindWall
00018A20 301F                       		move.w	(sp)+,d0
00018A22 143C 00C0                  		move.b	#-$40,d2
00018A26 6000 FF1E                  		bra.w	loc_14DD0
00018A2A                            
00018A2A                            ; End of function sub_14E50
00018A2A                            
00018A2A                            
00018A2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018A2A                            
00018A2A                            
00018A2A                            sub_14EB4:
00018A2A 3428 000C                  		move.w	obY(a0),d2
00018A2E 3628 0008                  		move.w	obX(a0),d3
00018A32                            
00018A32                            loc_14EBC:
00018A32 0643 000A                  		addi.w	#$A,d3
00018A36 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018A3A 367C 0010                  		movea.w	#$10,a3
00018A3E 3C3C 0000                  		move.w	#0,d6
00018A42 7A0E                       		moveq	#$E,d5
00018A44 6100 FC3C                  		bsr.w	FindWall
00018A48 143C 00C0                  		move.b	#-$40,d2
00018A4C 6000 FF32                  		bra.w	loc_14E0A
00018A50                            
00018A50                            ; End of function sub_14EB4
00018A50                            
00018A50                            ; ---------------------------------------------------------------------------
00018A50                            ; Subroutine to	detect when an object hits a wall to its right
00018A50                            ; ---------------------------------------------------------------------------
00018A50                            
00018A50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018A50                            
00018A50                            
00018A50                            ObjHitWallRight:
00018A50 D668 0008                  		add.w	obX(a0),d3
00018A54 3428 000C                  		move.w	obY(a0),d2
00018A58 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018A5C 18BC 0000                  		move.b	#0,(a4)
00018A60 367C 0010                  		movea.w	#$10,a3
00018A64 3C3C 0000                  		move.w	#0,d6
00018A68 7A0E                       		moveq	#$E,d5
00018A6A 6100 FC16                  		bsr.w	FindWall
00018A6E 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018A72 0803 0000                  		btst	#0,d3
00018A76 6700                       		beq.s	locret_14F06
00018A78 163C 00C0                  		move.b	#-$40,d3
00018A7C                            
00018A7C                            locret_14F06:
00018A7C 4E75                       		rts	
00018A7E                            
00018A7E                            ; End of function ObjHitWallRight
00018A7E                            
00018A7E                            ; ---------------------------------------------------------------------------
00018A7E                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00018A7E                            ; touches them
00018A7E                            ; ---------------------------------------------------------------------------
00018A7E                            
00018A7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018A7E                            
00018A7E                            
00018A7E                            Sonic_DontRunOnWalls:
00018A7E 3428 000C                  		move.w	obY(a0),d2
00018A82 3628 0008                  		move.w	obX(a0),d3
00018A86 7000                       		moveq	#0,d0
00018A88 1028 0016                  		move.b	obHeight(a0),d0
00018A8C 4880                       		ext.w	d0
00018A8E 9440                       		sub.w	d0,d2
00018A90 0A42 000F                  		eori.w	#$F,d2
00018A94 1028 0017                  		move.b	obWidth(a0),d0
00018A98 4880                       		ext.w	d0
00018A9A D640                       		add.w	d0,d3
00018A9C 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018AA0 367C FFF0                  		movea.w	#-$10,a3
00018AA4 3C3C 1000                  		move.w	#$1000,d6
00018AA8 7A0E                       		moveq	#$E,d5
00018AAA 6100 FA98                  		bsr.w	FindFloor
00018AAE 3F01                       		move.w	d1,-(sp)
00018AB0 3428 000C                  		move.w	obY(a0),d2
00018AB4 3628 0008                  		move.w	obX(a0),d3
00018AB8 7000                       		moveq	#0,d0
00018ABA 1028 0016                  		move.b	obHeight(a0),d0
00018ABE 4880                       		ext.w	d0
00018AC0 9440                       		sub.w	d0,d2
00018AC2 0A42 000F                  		eori.w	#$F,d2
00018AC6 1028 0017                  		move.b	obWidth(a0),d0
00018ACA 4880                       		ext.w	d0
00018ACC 9640                       		sub.w	d0,d3
00018ACE 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018AD2 367C FFF0                  		movea.w	#-$10,a3
00018AD6 3C3C 1000                  		move.w	#$1000,d6
00018ADA 7A0E                       		moveq	#$E,d5
00018ADC 6100 FA66                  		bsr.w	FindFloor
00018AE0 301F                       		move.w	(sp)+,d0
00018AE2 143C 0080                  		move.b	#-$80,d2
00018AE6 6000 FE5E                  		bra.w	loc_14DD0
00018AEA                            ; End of function Sonic_DontRunOnWalls
00018AEA                            
00018AEA                            ; ===========================================================================
00018AEA 3428 000C                  		move.w	obY(a0),d2
00018AEE 3628 0008                  		move.w	obX(a0),d3
00018AF2                            
00018AF2                            loc_14F7C:
00018AF2 0442 000A                  		subi.w	#$A,d2
00018AF6 0A42 000F                  		eori.w	#$F,d2
00018AFA 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018AFE 367C FFF0                  		movea.w	#-$10,a3
00018B02 3C3C 1000                  		move.w	#$1000,d6
00018B06 7A0E                       		moveq	#$E,d5
00018B08 6100 FA3A                  		bsr.w	FindFloor
00018B0C 143C 0080                  		move.b	#-$80,d2
00018B10 6000 FE6E                  		bra.w	loc_14E0A
00018B14                            
00018B14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018B14                            
00018B14                            
00018B14                            ObjHitCeiling:
00018B14 3428 000C                  		move.w	obY(a0),d2
00018B18 3628 0008                  		move.w	obX(a0),d3
00018B1C 7000                       		moveq	#0,d0
00018B1E 1028 0016                  		move.b	obHeight(a0),d0
00018B22 4880                       		ext.w	d0
00018B24 9440                       		sub.w	d0,d2
00018B26 0A42 000F                  		eori.w	#$F,d2
00018B2A 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018B2E 367C FFF0                  		movea.w	#-$10,a3
00018B32 3C3C 1000                  		move.w	#$1000,d6
00018B36 7A0E                       		moveq	#$E,d5
00018B38 6100 FA0A                  		bsr.w	FindFloor
00018B3C 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018B40 0803 0000                  		btst	#0,d3
00018B44 6700                       		beq.s	locret_14FD4
00018B46 163C 0080                  		move.b	#-$80,d3
00018B4A                            
00018B4A                            locret_14FD4:
00018B4A 4E75                       		rts	
00018B4C                            ; End of function ObjHitCeiling
00018B4C                            
00018B4C                            ; ===========================================================================
00018B4C                            
00018B4C                            loc_14FD6:
00018B4C 3428 000C                  		move.w	obY(a0),d2
00018B50 3628 0008                  		move.w	obX(a0),d3
00018B54 7000                       		moveq	#0,d0
00018B56 1028 0017                  		move.b	obWidth(a0),d0
00018B5A 4880                       		ext.w	d0
00018B5C 9440                       		sub.w	d0,d2
00018B5E 1028 0016                  		move.b	obHeight(a0),d0
00018B62 4880                       		ext.w	d0
00018B64 9640                       		sub.w	d0,d3
00018B66 0A43 000F                  		eori.w	#$F,d3
00018B6A 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018B6E 367C FFF0                  		movea.w	#-$10,a3
00018B72 3C3C 0800                  		move.w	#$800,d6
00018B76 7A0E                       		moveq	#$E,d5
00018B78 6100 FB08                  		bsr.w	FindWall
00018B7C 3F01                       		move.w	d1,-(sp)
00018B7E 3428 000C                  		move.w	obY(a0),d2
00018B82 3628 0008                  		move.w	obX(a0),d3
00018B86 7000                       		moveq	#0,d0
00018B88 1028 0017                  		move.b	obWidth(a0),d0
00018B8C 4880                       		ext.w	d0
00018B8E D440                       		add.w	d0,d2
00018B90 1028 0016                  		move.b	obHeight(a0),d0
00018B94 4880                       		ext.w	d0
00018B96 9640                       		sub.w	d0,d3
00018B98 0A43 000F                  		eori.w	#$F,d3
00018B9C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018BA0 367C FFF0                  		movea.w	#-$10,a3
00018BA4 3C3C 0800                  		move.w	#$800,d6
00018BA8 7A0E                       		moveq	#$E,d5
00018BAA 6100 FAD6                  		bsr.w	FindWall
00018BAE 301F                       		move.w	(sp)+,d0
00018BB0 143C 0040                  		move.b	#$40,d2
00018BB4 6000 FD90                  		bra.w	loc_14DD0
00018BB8                            
00018BB8                            ; ---------------------------------------------------------------------------
00018BB8                            ; Subroutine to	stop Sonic when	he jumps at a wall
00018BB8                            ; ---------------------------------------------------------------------------
00018BB8                            
00018BB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018BB8                            
00018BB8                            
00018BB8                            Sonic_HitWall:
00018BB8 3428 000C                  		move.w	obY(a0),d2
00018BBC 3628 0008                  		move.w	obX(a0),d3
00018BC0                            
00018BC0                            loc_1504A:
00018BC0 0443 000A                  		subi.w	#$A,d3
00018BC4 0A43 000F                  		eori.w	#$F,d3
00018BC8 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018BCC 367C FFF0                  		movea.w	#-$10,a3
00018BD0 3C3C 0800                  		move.w	#$800,d6
00018BD4 7A0E                       		moveq	#$E,d5
00018BD6 6100 FAAA                  		bsr.w	FindWall
00018BDA 143C 0040                  		move.b	#$40,d2
00018BDE 6000 FDA0                  		bra.w	loc_14E0A
00018BE2                            ; End of function Sonic_HitWall
00018BE2                            
00018BE2                            ; ---------------------------------------------------------------------------
00018BE2                            ; Subroutine to	detect when an object hits a wall to its left
00018BE2                            ; ---------------------------------------------------------------------------
00018BE2                            
00018BE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018BE2                            
00018BE2                            
00018BE2                            ObjHitWallLeft:
00018BE2 D668 0008                  		add.w	obX(a0),d3
00018BE6 3428 000C                  		move.w	obY(a0),d2
00018BEA                            		; Engine bug: colliding with left walls is erratic with this function.
00018BEA                            		; The cause is this: a missing instruction to flip collision on the found
00018BEA                            		; 16x16 block; this one:
00018BEA                            		;eori.w	#$F,d3
00018BEA 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018BEE 18BC 0000                  		move.b	#0,(a4)
00018BF2 367C FFF0                  		movea.w	#-$10,a3
00018BF6 3C3C 0800                  		move.w	#$800,d6
00018BFA 7A0E                       		moveq	#$E,d5
00018BFC 6100 FA84                  		bsr.w	FindWall
00018C00 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018C04 0803 0000                  		btst	#0,d3
00018C08 6700                       		beq.s	locret_15098
00018C0A 163C 0040                  		move.b	#$40,d3
00018C0E                            
00018C0E                            locret_15098:
00018C0E 4E75                       		rts	
00018C10                            ; End of function ObjHitWallLeft
00018C10                            
00018C10                            ; ===========================================================================
00018C10                            
00018C10                            		include	"_incObj\66 Rotating Junction.asm"
00018C10                            ; ---------------------------------------------------------------------------
00018C10                            ; Object 66 - rotating disc junction that grabs Sonic (SBZ)
00018C10                            ; ---------------------------------------------------------------------------
00018C10                            
00018C10                            Junction:
00018C10 7000                       		moveq	#0,d0
00018C12 1028 0024                  		move.b	obRoutine(a0),d0
00018C16 323B 0000                  		move.w	Jun_Index(pc,d0.w),d1
00018C1A 4EFB 1000                  		jmp	Jun_Index(pc,d1.w)
00018C1E                            ; ===========================================================================
00018C1E 0000                       Jun_Index:	dc.w Jun_Main-Jun_Index
00018C20 0000                       		dc.w Jun_Action-Jun_Index
00018C22 0000                       		dc.w Jun_Display-Jun_Index
00018C24 0000                       		dc.w Jun_Release-Jun_Index
00018C26                            
00018C26 =00000034                  jun_frame:	equ $34		; current frame
00018C26 =00000036                  jun_reverse:	equ $36		; flag set when switch is pressed
00018C26 =00000038                  jun_switch:	equ $38		; which switch will reverse the disc
00018C26                            ; ===========================================================================
00018C26                            
00018C26                            Jun_Main:	; Routine 0
00018C26 5428 0024                  		addq.b	#2,obRoutine(a0)
00018C2A 323C 0001                  		move.w	#1,d1
00018C2E 2248                       		movea.l	a0,a1
00018C30 6000                       		bra.s	@makeitem
00018C32                            ; ===========================================================================
00018C32                            
00018C32                            	@repeat:
00018C32 4EB9 0000 FD64             		jsr	FindFreeObj
00018C38 6600                       		bne.s	@fail
00018C3A 12BC 0066                  		move.b	#id_Junction,0(a1)
00018C3E 5829 0024                  		addq.b	#4,obRoutine(a1) ; goto Jun_Display next
00018C42 3368 0008 0008             		move.w	obX(a0),obX(a1)
00018C48 3368 000C 000C             		move.w	obY(a0),obY(a1)
00018C4E 337C 0180 0018             		move.w	#$180,obPriority(a1)
00018C54 137C 0010 001A             		move.b	#$10,obFrame(a1) ; use large circular sprite
00018C5A                            
00018C5A                            @makeitem:
00018C5A 237C 0000 0000 0004        		move.l	#Map_Jun,obMap(a1)
00018C62 337C 4348 0002             		move.w	#$4348,obGfx(a1)
00018C68 0029 0004 0001             		ori.b	#4,obRender(a1)
00018C6E 137C 0038 0014             		move.b	#$38,obActWid(a1)
00018C74                            
00018C74                            	@fail:
00018C74 51C9 FFBC                  		dbf	d1,@repeat
00018C78                            
00018C78 117C 0030 0014             		move.b	#$30,obActWid(a0)
00018C7E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018C84 317C 003C 0030             		move.w	#$3C,$30(a0)
00018C8A 117C 0001 0034             		move.b	#1,jun_frame(a0)
00018C90 1168 0028 0038             		move.b	obSubtype(a0),jun_switch(a0)
00018C96                            
00018C96                            Jun_Action:	; Routine 2
00018C96 6100 0000                  		bsr.w	Jun_ChkSwitch
00018C9A 4A28 0001                  		tst.b	obRender(a0)
00018C9E 6A00 0000                  		bpl.w	Jun_Display
00018CA2 323C 0030                  		move.w	#$30,d1
00018CA6 3401                       		move.w	d1,d2
00018CA8 3602                       		move.w	d2,d3
00018CAA 5243                       		addq.w	#1,d3
00018CAC 3828 0008                  		move.w	obX(a0),d4
00018CB0 6100 9064                  		bsr.w	SolidObject
00018CB4 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing the disc?
00018CBA 6700 0000                  		beq.w	Jun_Display	; if not, branch
00018CBE                            
00018CBE 43F8 D000                  		lea	(v_player).w,a1
00018CC2 720E                       		moveq	#$E,d1
00018CC4 3029 0008                  		move.w	obX(a1),d0
00018CC8 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic to the left of the disc?
00018CCC 6500                       		bcs.s	@isleft		; if yes, branch
00018CCE 7207                       		moveq	#7,d1		
00018CD0                            
00018CD0                            	@isleft:
00018CD0 B228 001A                  		cmp.b	obFrame(a0),d1	; is the gap next to Sonic?
00018CD4 6600                       		bne.s	Jun_Display	; if not, branch
00018CD6                            
00018CD6 1141 0032                  		move.b	d1,$32(a0)
00018CDA 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Jun_Release next
00018CDE 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
00018CE4 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic use "rolling" animation
00018CEA 337C 0800 0020             		move.w	#$800,obInertia(a1)
00018CF0 337C 0000 0010             		move.w	#0,obVelX(a1)
00018CF6 337C 0000 0012             		move.w	#0,obVelY(a1)
00018CFC 08A8 0005 0022             		bclr	#5,obStatus(a0)
00018D02 08A9 0005 0022             		bclr	#5,obStatus(a1)
00018D08 08E9 0001 0022             		bset	#1,obStatus(a1)
00018D0E 3429 0008                  		move.w	obX(a1),d2
00018D12 3629 000C                  		move.w	obY(a1),d3
00018D16 6100 0000                  		bsr.w	Jun_ChgPos
00018D1A D569 0008                  		add.w	d2,obX(a1)
00018D1E D769 000C                  		add.w	d3,obY(a1)
00018D22 E0E9 0008                  		asr	obX(a1)
00018D26 E0E9 000C                  		asr	obY(a1)
00018D2A                            
00018D2A                            Jun_Display:	; Routine 4
00018D2A 6000 8B52                  		bra.w	RememberState
00018D2E                            ; ===========================================================================
00018D2E                            
00018D2E                            Jun_Release:	; Routine 6
00018D2E 1028 001A                  		move.b	obFrame(a0),d0
00018D32 0C00 0004                  		cmpi.b	#4,d0		; is gap pointing down?
00018D36 6700                       		beq.s	@release	; if yes, branch
00018D38 0C00 0007                  		cmpi.b	#7,d0		; is gap pointing right?
00018D3C 6600                       		bne.s	@dontrelease	; if not, branch
00018D3E                            
00018D3E                            	@release:
00018D3E B028 0032                  		cmp.b	$32(a0),d0
00018D42 6700                       		beq.s	@dontrelease
00018D44 43F8 D000                  		lea	(v_player).w,a1
00018D48 337C 0000 0010             		move.w	#0,obVelX(a1)
00018D4E 337C 0800 0012             		move.w	#$800,obVelY(a1)
00018D54 0C00 0004                  		cmpi.b	#4,d0
00018D58 6700                       		beq.s	@isdown
00018D5A 337C 0800 0010             		move.w	#$800,obVelX(a1)
00018D60 337C 0800 0012             		move.w	#$800,obVelY(a1)
00018D66                            
00018D66                            	@isdown:
00018D66 4238 F7C8                  		clr.b	(f_lockmulti).w	; unlock controls
00018D6A 5928 0024                  		subq.b	#4,obRoutine(a0)
00018D6E                            
00018D6E                            	@dontrelease:
00018D6E 6100                       		bsr.s	Jun_ChkSwitch
00018D70 6100                       		bsr.s	Jun_ChgPos
00018D72 6000 8B0A                  		bra.w	RememberState
00018D76                            
00018D76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018D76                            
00018D76                            
00018D76                            Jun_ChkSwitch:
00018D76 45F8 F7E0                  		lea	(f_switch).w,a2
00018D7A 7000                       		moveq	#0,d0
00018D7C 1028 0038                  		move.b	jun_switch(a0),d0
00018D80 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00018D86 6700                       		beq.s	@unpressed	; if not, branch
00018D88                            
00018D88 4A28 0036                  		tst.b	jun_reverse(a0)	; has switch previously	been pressed?
00018D8C 6600                       		bne.s	@animate	; if yes, branch
00018D8E 4428 0034                  		neg.b	jun_frame(a0)
00018D92 117C 0001 0036             		move.b	#1,jun_reverse(a0) ; set to "previously pressed"
00018D98 6000                       		bra.s	@animate
00018D9A                            ; ===========================================================================
00018D9A                            
00018D9A                            @unpressed:
00018D9A 4228 0036                  		clr.b	jun_reverse(a0)	; set to "not yet pressed"
00018D9E                            
00018D9E                            @animate:
00018D9E 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement frame timer
00018DA2 6A00                       		bpl.s	@nochange	; if time remains, branch
00018DA4 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00018DAA 1228 0034                  		move.b	jun_frame(a0),d1
00018DAE 1028 001A                  		move.b	obFrame(a0),d0
00018DB2 D001                       		add.b	d1,d0
00018DB4 0200 000F                  		andi.b	#$F,d0
00018DB8 1140 001A                  		move.b	d0,obFrame(a0)	; update frame
00018DBC                            
00018DBC                            	@nochange:
00018DBC 4E75                       		rts	
00018DBE                            ; End of function Jun_ChkSwitch
00018DBE                            
00018DBE                            
00018DBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018DBE                            
00018DBE                            
00018DBE                            Jun_ChgPos:
00018DBE 43F8 D000                  		lea	(v_player).w,a1
00018DC2 7000                       		moveq	#0,d0
00018DC4 1028 001A                  		move.b	obFrame(a0),d0
00018DC8 D040                       		add.w	d0,d0
00018DCA 45FB 0000                  		lea	@data(pc,d0.w),a2
00018DCE 101A                       		move.b	(a2)+,d0
00018DD0 4880                       		ext.w	d0
00018DD2 D068 0008                  		add.w	obX(a0),d0
00018DD6 3340 0008                  		move.w	d0,obX(a1)
00018DDA 101A                       		move.b	(a2)+,d0
00018DDC 4880                       		ext.w	d0
00018DDE D068 000C                  		add.w	obY(a0),d0
00018DE2 3340 000C                  		move.w	d0,obY(a1)
00018DE6 4E75                       		rts	
00018DE8                            
00018DE8                            
00018DE8 E000 E20E                  @data:		dc.b -$20,    0, -$1E,   $E ; disc x-pos, Sonic x-pos, disc y-pos, Sonic y-pos
00018DEC E818 F21E                  		dc.b -$18,  $18,  -$E,  $1E
00018DF0 0020 0E1E                  		dc.b    0,  $20,   $E,  $1E
00018DF4 1818 1E0E                  		dc.b  $18,  $18,  $1E,   $E
00018DF8 2000 1EF2                  		dc.b  $20,    0,  $1E,  -$E
00018DFC 18E8 0EE2                  		dc.b  $18, -$18,   $E, -$1E
00018E00 00E0 F2E2                  		dc.b    0, -$20,  -$E, -$1E
00018E04 E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
00018E04 E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
00018E08                            Map_Jun:	include	"_maps\Rotating Junction.asm"
00018E08                            ; ---------------------------------------------------------------------------
00018E08                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00018E08                            ; ---------------------------------------------------------------------------
00018E08                            Map_Jun_internal:
00018E08 0000                       		dc.w @gap0-Map_Jun_internal
00018E0A 0000                       		dc.w @gap1-Map_Jun_internal
00018E0C 0000                       		dc.w @gap2-Map_Jun_internal
00018E0E 0000                       		dc.w @gap3-Map_Jun_internal
00018E10 0000                       		dc.w @gap4-Map_Jun_internal
00018E12 0000                       		dc.w @gap5-Map_Jun_internal
00018E14 0000                       		dc.w @gap6-Map_Jun_internal
00018E16 0000                       		dc.w @gap7-Map_Jun_internal
00018E18 0000                       		dc.w @gap8-Map_Jun_internal
00018E1A 0000                       		dc.w @gap9-Map_Jun_internal
00018E1C 0000                       		dc.w @gapA-Map_Jun_internal
00018E1E 0000                       		dc.w @gapB-Map_Jun_internal
00018E20 0000                       		dc.w @gapC-Map_Jun_internal
00018E22 0000                       		dc.w @gapD-Map_Jun_internal
00018E24 0000                       		dc.w @gapE-Map_Jun_internal
00018E26 0000                       		dc.w @gapF-Map_Jun_internal
00018E28 0000                       		dc.w @circle-Map_Jun_internal
00018E2A 06                         @gap0:		dc.b 6
00018E2B E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00018E30 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00018E35 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00018E3A E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00018E3F 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00018E44 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00018E49 06                         @gap1:		dc.b 6
00018E4A F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00018E4F 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00018E54 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00018E59 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00018E5E 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00018E63 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00018E68 06                         @gap2:		dc.b 6
00018E69 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00018E6E 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00018E73 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00018E78 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00018E7D 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00018E82 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00018E87 06                         @gap3:		dc.b 6
00018E88 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00018E8D 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00018E92 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00018E97 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00018E9C 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00018EA1 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00018EA6 06                         @gap4:		dc.b 6
00018EA7 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00018EAC 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00018EB1 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00018EB6 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00018EBB 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00018EC0 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00018EC5 06                         @gap5:		dc.b 6
00018EC6 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00018ECB 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00018ED0 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00018ED5 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00018EDA 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00018EDF 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00018EE4 06                         @gap6:		dc.b 6
00018EE5 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00018EEA 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00018EEF 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00018EF4 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00018EF9 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00018EFE 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00018F03 06                         @gap7:		dc.b 6
00018F04 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00018F09 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00018F0E F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00018F13 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00018F18 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00018F1D 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00018F22 06                         @gap8:		dc.b 6
00018F23 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00018F28 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00018F2D E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00018F32 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00018F37 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00018F3C 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00018F41 06                         @gap9:		dc.b 6
00018F42 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00018F47 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00018F4C DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00018F51 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00018F56 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00018F5B F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00018F60 06                         @gapA:		dc.b 6
00018F61 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00018F66 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00018F6B D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00018F70 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00018F75 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00018F7A E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00018F7F 06                         @gapB:		dc.b 6
00018F80 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00018F85 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00018F8A CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00018F8F CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00018F94 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00018F99 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00018F9E 06                         @gapC:		dc.b 6
00018F9F D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00018FA4 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00018FA9 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00018FAE C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00018FB3 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00018FB8 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00018FBD 06                         @gapD:		dc.b 6
00018FBE D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00018FC3 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00018FC8 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00018FCD CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00018FD2 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00018FD7 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00018FDC 06                         @gapE:		dc.b 6
00018FDD E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00018FE2 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00018FE7 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00018FEC D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00018FF1 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00018FF6 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00018FFB 06                         @gapF:		dc.b 6
00018FFC E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00019001 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00019006 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
0001900B DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00019010 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00019015 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
0001901A 0C                         @circle:	dc.b $C
0001901B C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00019020 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00019025 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
0001902A C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
0001902F D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00019034 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00019039 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
0001903E 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00019043 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00019048 280D 1809 00               		dc.b $28, $D, $18, 9, 0
0001904D 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00019052 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00019058 00                         		even
00019058 00                         		even
00019058                            		include	"_incObj\67 Running Disc.asm"
00019058                            ; ---------------------------------------------------------------------------
00019058                            ; Object 67 - disc that	you run	around (SBZ)
00019058                            ; ---------------------------------------------------------------------------
00019058                            
00019058                            RunningDisc:
00019058 7000                       		moveq	#0,d0
0001905A 1028 0024                  		move.b	obRoutine(a0),d0
0001905E 323B 0000                  		move.w	Disc_Index(pc,d0.w),d1
00019062 4EFB 1000                  		jmp	Disc_Index(pc,d1.w)
00019066                            ; ===========================================================================
00019066 0000                       Disc_Index:	dc.w Disc_Main-Disc_Index
00019068 0000                       		dc.w Disc_Action-Disc_Index
0001906A                            
0001906A =00000032                  disc_origX:	equ $32		; original x-axis position
0001906A =00000030                  disc_origY:	equ $30		; original y-axis position
0001906A                            ; ===========================================================================
0001906A                            
0001906A                            Disc_Main:	; Routine 0
0001906A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001906E 217C 0000 0000 0004        		move.l	#Map_Disc,obMap(a0)
00019076 317C C344 0002             		move.w	#$C344,obGfx(a0)
0001907C 117C 0004 0001             		move.b	#4,obRender(a0)
00019082 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019088 117C 0008 0014             		move.b	#8,obActWid(a0)
0001908E 3168 0008 0032             		move.w	obX(a0),disc_origX(a0)
00019094 3168 000C 0030             		move.w	obY(a0),disc_origY(a0)
0001909A 117C 0018 0034             		move.b	#$18,$34(a0)
000190A0 117C 0048 0038             		move.b	#$48,$38(a0)
000190A6 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000190AA 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000190AE 6700                       		beq.s	@typeis0	; branch if 0
000190B0 117C 0010 0034             		move.b	#$10,$34(a0)
000190B6 117C 0038 0038             		move.b	#$38,$38(a0)
000190BC                            
000190BC                            	@typeis0:
000190BC 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000190C0 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000190C4 4881                       		ext.w	d1
000190C6 E741                       		asl.w	#3,d1
000190C8 3141 0036                  		move.w	d1,$36(a0)
000190CC 1028 0022                  		move.b	obStatus(a0),d0
000190D0 E418                       		ror.b	#2,d0
000190D2 0200 00C0                  		andi.b	#$C0,d0
000190D6 1140 0026                  		move.b	d0,obAngle(a0)
000190DA                            
000190DA                            Disc_Action:	; Routine 2
000190DA 6100 0000                  		bsr.w	Disc_MoveSonic
000190DE 6100 0000                  		bsr.w	Disc_MoveSpot
000190E2 6000 0000                  		bra.w	Disc_ChkDel
000190E6                            ; ===========================================================================
000190E6                            
000190E6                            Disc_MoveSonic:
000190E6 7400                       		moveq	#0,d2
000190E8 1428 0038                  		move.b	$38(a0),d2
000190EC 3602                       		move.w	d2,d3
000190EE D643                       		add.w	d3,d3
000190F0 43F8 D000                  		lea	(v_player).w,a1
000190F4 3029 0008                  		move.w	obX(a1),d0
000190F8 9068 0032                  		sub.w	disc_origX(a0),d0
000190FC D042                       		add.w	d2,d0
000190FE B043                       		cmp.w	d3,d0
00019100 6400                       		bcc.s	loc_155A8
00019102 3229 000C                  		move.w	obY(a1),d1
00019106 9268 0030                  		sub.w	disc_origY(a0),d1
0001910A D242                       		add.w	d2,d1
0001910C B243                       		cmp.w	d3,d1
0001910E 6400                       		bcc.s	loc_155A8
00019110 0829 0001 0022             		btst	#1,obStatus(a1)
00019116 6700                       		beq.s	loc_155B8
00019118 4228 003A                  		clr.b	$3A(a0)
0001911C 4E75                       		rts	
0001911E                            ; ===========================================================================
0001911E                            
0001911E                            loc_155A8:
0001911E 4A28 003A                  		tst.b	$3A(a0)
00019122 6700                       		beq.s	locret_155B6
00019124 4229 0038                  		clr.b	$38(a1)
00019128 4228 003A                  		clr.b	$3A(a0)
0001912C                            
0001912C                            locret_155B6:
0001912C 4E75                       		rts	
0001912E                            ; ===========================================================================
0001912E                            
0001912E                            loc_155B8:
0001912E 4A28 003A                  		tst.b	$3A(a0)
00019132 6600                       		bne.s	loc_155E2
00019134 117C 0001 003A             		move.b	#1,$3A(a0)
0001913A 0829 0002 0022             		btst	#2,obStatus(a1)
00019140 6600                       		bne.s	loc_155D0
00019142 4229 001C                  		clr.b	obAnim(a1)
00019146                            
00019146                            loc_155D0:
00019146 08A9 0005 0022             		bclr	#5,obStatus(a1)
0001914C 137C 0001 001D             		move.b	#1,obNextAni(a1)
00019152 137C 0001 0038             		move.b	#1,$38(a1)
00019158                            
00019158                            loc_155E2:
00019158 3029 0020                  		move.w	obInertia(a1),d0
0001915C 4A68 0036                  		tst.w	$36(a0)
00019160 6A00                       		bpl.s	loc_15608
00019162 0C40 FC00                  		cmpi.w	#-$400,d0
00019166 6F00                       		ble.s	loc_155FA
00019168 337C FC00 0020             		move.w	#-$400,obInertia(a1)
0001916E 4E75                       		rts	
00019170                            ; ===========================================================================
00019170                            
00019170                            loc_155FA:
00019170 0C40 F100                  		cmpi.w	#-$F00,d0
00019174 6C00                       		bge.s	locret_15606
00019176 337C F100 0020             		move.w	#-$F00,obInertia(a1)
0001917C                            
0001917C                            locret_15606:
0001917C 4E75                       		rts	
0001917E                            ; ===========================================================================
0001917E                            
0001917E                            loc_15608:
0001917E 0C40 0400                  		cmpi.w	#$400,d0
00019182 6C00                       		bge.s	loc_15616
00019184 337C 0400 0020             		move.w	#$400,obInertia(a1)
0001918A 4E75                       		rts	
0001918C                            ; ===========================================================================
0001918C                            
0001918C                            loc_15616:
0001918C 0C40 0F00                  		cmpi.w	#$F00,d0
00019190 6F00                       		ble.s	locret_15622
00019192 337C 0F00 0020             		move.w	#$F00,obInertia(a1)
00019198                            
00019198                            locret_15622:
00019198 4E75                       		rts	
0001919A                            ; ===========================================================================
0001919A                            
0001919A                            Disc_MoveSpot:
0001919A 3028 0036                  		move.w	$36(a0),d0
0001919E D168 0026                  		add.w	d0,obAngle(a0)
000191A2 1028 0026                  		move.b	obAngle(a0),d0
000191A6 4EB9 0000 3CCA             		jsr	(CalcSine).l
000191AC 3428 0030                  		move.w	disc_origY(a0),d2
000191B0 3628 0032                  		move.w	disc_origX(a0),d3
000191B4 7800                       		moveq	#0,d4
000191B6 1828 0034                  		move.b	$34(a0),d4
000191BA E14C                       		lsl.w	#8,d4
000191BC 2A04                       		move.l	d4,d5
000191BE C9C0                       		muls.w	d0,d4
000191C0 4844                       		swap	d4
000191C2 CBC1                       		muls.w	d1,d5
000191C4 4845                       		swap	d5
000191C6 D842                       		add.w	d2,d4
000191C8 DA43                       		add.w	d3,d5
000191CA 3144 000C                  		move.w	d4,obY(a0)
000191CE 3145 0008                  		move.w	d5,obX(a0)
000191D2 4E75                       		rts	
000191D4                            ; ===========================================================================
000191D4                            
000191D4                            Disc_ChkDel:
000191F0 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
000191F6                            
000191F6                            	@delete:
000191F6 4EF9 0000 F80A             		jmp	(DeleteObject).l
000191F6 4EF9 0000 F80A             		jmp	(DeleteObject).l
000191FC                            Map_Disc:	include	"_maps\Running Disc.asm"
000191FC                            ; ---------------------------------------------------------------------------
000191FC                            ; Sprite mappings - disc that you run around (SBZ)
000191FC                            ; (It's just a small blob that moves around in a circle. The disc itself is
000191FC                            ; part of the level tiles.)
000191FC                            ; ---------------------------------------------------------------------------
000191FC                            Map_Disc_internal:
000191FC 0000                       		dc.w @spot-Map_Disc_internal
000191FE 01                         @spot:		dc.b 1
000191FF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019204                            		even
00019204                            		even
00019204                            		include	"_incObj\68 Conveyor Belt.asm"
00019204                            ; ---------------------------------------------------------------------------
00019204                            ; Object 68 - conveyor belts (SBZ)
00019204                            ; ---------------------------------------------------------------------------
00019204                            
00019204                            Conveyor:
00019204 7000                       		moveq	#0,d0
00019206 1028 0024                  		move.b	obRoutine(a0),d0
0001920A 323B 0000                  		move.w	Conv_Index(pc,d0.w),d1
0001920E 4EFB 1000                  		jmp	Conv_Index(pc,d1.w)
00019212                            ; ===========================================================================
00019212 0000                       Conv_Index:	dc.w Conv_Main-Conv_Index
00019214 0000                       		dc.w Conv_Action-Conv_Index
00019216                            
00019216 =00000036                  conv_speed:	equ $36
00019216 =00000038                  conv_width:	equ $38
00019216                            ; ===========================================================================
00019216                            
00019216                            Conv_Main:	; Routine 0
00019216 5428 0024                  		addq.b	#2,obRoutine(a0)
0001921A 117C 0080 0038             		move.b	#128,conv_width(a0) ; set width to 128 pixels
00019220 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00019224 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00019228 6700                       		beq.s	@typeis0	; if zero, branch
0001922A 117C 0038 0038             		move.b	#56,conv_width(a0) ; set width to 56 pixels
00019230                            
00019230                            	@typeis0:
00019230 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00019234 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00019238 4881                       		ext.w	d1
0001923A E841                       		asr.w	#4,d1
0001923C 3141 0036                  		move.w	d1,conv_speed(a0) ; set belt speed
00019240                            
00019240                            Conv_Action:	; Routine 2
00019240 6100                       		bsr.s	@movesonic
0001925E 4E75                       		rts	
00019260                            
00019260                            	@delete:
00019260 4EF9 0000 F80A             		jmp	(DeleteObject).l
00019266                            ; ===========================================================================
00019266                            
00019266                            @movesonic:
00019266 7400                       		moveq	#0,d2
00019268 1428 0038                  		move.b	conv_width(a0),d2
0001926C 3602                       		move.w	d2,d3
0001926E D643                       		add.w	d3,d3
00019270 43F8 D000                  		lea	(v_player).w,a1
00019274 3029 0008                  		move.w	obX(a1),d0
00019278 9068 0008                  		sub.w	obX(a0),d0
0001927C D042                       		add.w	d2,d0
0001927E B043                       		cmp.w	d3,d0
00019280 6400                       		bcc.s	@notonconveyor
00019282 3229 000C                  		move.w	obY(a1),d1
00019286 9268 000C                  		sub.w	obY(a0),d1
0001928A 0641 0030                  		addi.w	#$30,d1
0001928E 0C41 0030                  		cmpi.w	#$30,d1
00019292 6400                       		bcc.s	@notonconveyor
00019294 0829 0001 0022             		btst	#1,obStatus(a1)
0001929A 6600                       		bne.s	@notonconveyor
0001929C 3028 0036                  		move.w	conv_speed(a0),d0
000192A0 D169 0008                  		add.w	d0,obX(a1)
000192A4                            
000192A4                            	@notonconveyor:
000192A4 4E75                       		rts	
000192A4 4E75                       		rts	
000192A6                            		include	"_incObj\69 SBZ Spinning Platforms.asm"
000192A6                            ; ---------------------------------------------------------------------------
000192A6                            ; Object 69 - spinning platforms and trapdoors (SBZ)
000192A6                            ; ---------------------------------------------------------------------------
000192A6                            
000192A6                            SpinPlatform:
000192A6 7000                       		moveq	#0,d0
000192A8 1028 0024                  		move.b	obRoutine(a0),d0
000192AC 323B 0000                  		move.w	Spin_Index(pc,d0.w),d1
000192B0 4EFB 1000                  		jmp	Spin_Index(pc,d1.w)
000192B4                            ; ===========================================================================
000192B4 0000                       Spin_Index:	dc.w Spin_Main-Spin_Index
000192B6 0000                       		dc.w Spin_Trapdoor-Spin_Index
000192B8 0000                       		dc.w Spin_Spinner-Spin_Index
000192BA                            
000192BA =00000030                  spin_timer:	equ $30		; time counter until change
000192BA =00000032                  spin_timelen:	equ $32		; time between changes (general)
000192BA                            ; ===========================================================================
000192BA                            
000192BA                            Spin_Main:	; Routine 0
000192BA 5428 0024                  		addq.b	#2,obRoutine(a0)
000192BE 217C 0000 0000 0004        		move.l	#Map_Trap,obMap(a0)
000192C6 317C 4492 0002             		move.w	#$4492,obGfx(a0)
000192CC 0028 0004 0001             		ori.b	#4,obRender(a0)
000192D2 117C 0080 0014             		move.b	#$80,obActWid(a0)
000192D8 7000                       		moveq	#0,d0
000192DA 1028 0028                  		move.b	obSubtype(a0),d0
000192DE 0240 000F                  		andi.w	#$F,d0
000192E2 C0FC 003C                  		mulu.w	#$3C,d0
000192E6 3140 0032                  		move.w	d0,spin_timelen(a0)
000192EA 4A28 0028                  		tst.b	obSubtype(a0)	; is subtype $8x?
000192EE 6A00                       		bpl.s	Spin_Trapdoor	; if not, branch
000192F0                            
000192F0 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Spin_Spinner next
000192F4 217C 0000 0000 0004        		move.l	#Map_Spin,obMap(a0)
000192FC 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
00019302 117C 0010 0014             		move.b	#$10,obActWid(a0)
00019308 117C 0002 001C             		move.b	#2,obAnim(a0)
0001930E 7000                       		moveq	#0,d0
00019310 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00019314 3200                       		move.w	d0,d1
00019316 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001931A C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
0001931E 3140 0030                  		move.w	d0,spin_timer(a0)
00019322 3140 0032                  		move.w	d0,spin_timelen(a0) ; set time delay
00019326 0241 0070                  		andi.w	#$70,d1
0001932A 0641 0010                  		addi.w	#$10,d1
0001932E E549                       		lsl.w	#2,d1
00019330 5341                       		subq.w	#1,d1
00019332 3141 0036                  		move.w	d1,$36(a0)
00019336 6000                       		bra.s	Spin_Spinner
00019338                            ; ===========================================================================
00019338                            
00019338                            Spin_Trapdoor:	; Routine 2
00019338 5368 0030                  		subq.w	#1,spin_timer(a0) ; decrement timer
0001933C 6A00                       		bpl.s	@animate	; if time remains, branch
0001933E                            
0001933E 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
00019344 0868 0000 001C             		bchg	#0,obAnim(a0)
0001934A 4A28 0001                  		tst.b	obRender(a0)
0001934E 6A00                       		bpl.s	@animate
0001935A                            
0001935A                            	@animate:
0001935A 43F9 0000 0000             		lea	(Ani_Spin).l,a1
00019360 4EB9 0000 C880             		jsr	(AnimateSprite).l
00019366 4A28 001A                  		tst.b	obFrame(a0)	; is frame number 0 displayed?
0001936A 6600                       		bne.s	@notsolid	; if not, branch
0001936C 323C 004B                  		move.w	#$4B,d1
00019370 343C 000C                  		move.w	#$C,d2
00019374 3602                       		move.w	d2,d3
00019376 5243                       		addq.w	#1,d3
00019378 3828 0008                  		move.w	obX(a0),d4
0001937C 6100 8998                  		bsr.w	SolidObject
00019380 6000 84FC                  		bra.w	RememberState
00019384                            ; ===========================================================================
00019384                            
00019384                            @notsolid:
00019384 0828 0003 0022             		btst	#3,obStatus(a0) ; is Sonic standing on the trapdoor?
0001938A 6700                       		beq.s	@display	; if not, branch
0001938C 43F8 D000                  		lea	(v_player).w,a1
00019390 08A9 0003 0022             		bclr	#3,obStatus(a1)
00019396 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001939C 4228 0025                  		clr.b	obSolid(a0)
000193A0                            
000193A0                            	@display:
000193A0 6000 84DC                  		bra.w	RememberState
000193A4                            ; ===========================================================================
000193A4                            
000193A4                            Spin_Spinner:	; Routine 4
000193A4 3038 FE04                  		move.w	(v_framecount).w,d0
000193A8 C068 0036                  		and.w	$36(a0),d0
000193AC 6600                       		bne.s	@delay
000193AE 117C 0001 0034             		move.b	#1,$34(a0)
000193B4                            
000193B4                            	@delay:
000193B4 4A28 0034                  		tst.b	$34(a0)
000193B8 6700                       		beq.s	@animate
000193BA 5368 0030                  		subq.w	#1,spin_timer(a0)
000193BE 6A00                       		bpl.s	@animate
000193C0 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
000193C6 4228 0034                  		clr.b	$34(a0)
000193CA 0868 0000 001C             		bchg	#0,obAnim(a0)
000193D0                            
000193D0                            	@animate:
000193D0 43F9 0000 0000             		lea	(Ani_Spin).l,a1
000193D6 4EB9 0000 C880             		jsr	(AnimateSprite).l
000193DC 4A28 001A                  		tst.b	obFrame(a0)	; check	if frame number	0 is displayed
000193E0 6600                       		bne.s	@notsolid2	; if not, branch
000193E2 323C 001B                  		move.w	#$1B,d1
000193E6 343C 0007                  		move.w	#7,d2
000193EA 3602                       		move.w	d2,d3
000193EC 5243                       		addq.w	#1,d3
000193EE 3828 0008                  		move.w	obX(a0),d4
000193F2 6100 8922                  		bsr.w	SolidObject
000193F6 6000 8486                  		bra.w	RememberState
000193FA                            ; ===========================================================================
000193FA                            
000193FA                            @notsolid2:
000193FA 0828 0003 0022             		btst	#3,obStatus(a0)
00019400 6700                       		beq.s	@display
00019402 43F8 D000                  		lea	(v_player).w,a1
00019406 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001940C 08A8 0003 0022             		bclr	#3,obStatus(a0)
00019412 4228 0025                  		clr.b	obSolid(a0)
00019416                            
00019416                            	@display:
00019416 6000 8466                  		bra.w	RememberState
00019416 6000 8466                  		bra.w	RememberState
0001941A                            		include	"_anim\SBZ Spinning Platforms.asm"
0001941A                            ; ---------------------------------------------------------------------------
0001941A                            ; Animation script - trapdoor (SBZ)
0001941A                            ; ---------------------------------------------------------------------------
0001941A 0000                       Ani_Spin:	dc.w @trapopen-Ani_Spin
0001941C 0000                       		dc.w @trapclose-Ani_Spin
0001941E 0000                       		dc.w @spin1-Ani_Spin
00019420 0000                       		dc.w @spin2-Ani_Spin
00019422 0300 0102 FE01             @trapopen:	dc.b 3,	0, 1, 2, afBack, 1
00019428 0302 0100 FE01             @trapclose:	dc.b 3,	2, 1, 0, afBack, 1
0001942E 0100 0102 0304 4342 4140+  @spin1:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
00019442 0100 0102 0304 4342 4140+  @spin2:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
00019456                            		even
00019456                            		even
00019456                            Map_Trap:	include	"_maps\Trapdoor.asm"
00019456                            ; ---------------------------------------------------------------------------
00019456                            ; Sprite mappings - trapdoor (SBZ)
00019456                            ; ---------------------------------------------------------------------------
00019456                            Map_Trap_internal:
00019456 0000                       		dc.w @closed-Map_Trap_internal
00019458 0000                       		dc.w @half-Map_Trap_internal
0001945A 0000                       		dc.w @open-Map_Trap_internal
0001945C 04                         @closed:	dc.b 4
0001945D F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00019462 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00019467 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
0001946C F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00019471 08                         @half:		dc.b 8
00019472 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00019477 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
0001947C 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00019481 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00019486 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
0001948B 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00019490 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00019495 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
0001949A 04                         @open:		dc.b 4
0001949B 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
000194A0 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
000194A5 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
000194AA 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
000194B0 00                         		even
000194B0 00                         		even
000194B0                            Map_Spin:	include	"_maps\SBZ Spinning Platforms.asm"
000194B0                            ; ---------------------------------------------------------------------------
000194B0                            ; Sprite mappings - spinning platforms (SBZ)
000194B0                            ; ---------------------------------------------------------------------------
000194B0                            Map_Spin_internal:
000194B0 0000                       		dc.w @flat-Map_Spin_internal
000194B2 0000                       		dc.w @spin1-Map_Spin_internal
000194B4 0000                       		dc.w @spin2-Map_Spin_internal
000194B6 0000                       		dc.w @spin3-Map_Spin_internal
000194B8 0000                       		dc.w @spin4-Map_Spin_internal
000194BA 02                         @flat:		dc.b 2
000194BB F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000194C0 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
000194C5 02                         @spin1:		dc.b 2
000194C6 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
000194CB 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
000194D0 02                         @spin2:		dc.b 2
000194D1 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
000194D6 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
000194DB 02                         @spin3:		dc.b 2
000194DC F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
000194E1 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
000194E6 02                         @spin4:		dc.b 2
000194E7 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
000194EC 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
000194F2 00                         		even
000194F2 00                         		even
000194F2                            		include	"_incObj\6A Saws and Pizza Cutters.asm"
000194F2                            ; ---------------------------------------------------------------------------
000194F2                            ; Object 6A - ground saws and pizza cutters (SBZ)
000194F2                            ; ---------------------------------------------------------------------------
000194F2                            
000194F2                            Saws:
000194F2 7000                       		moveq	#0,d0
000194F4 1028 0024                  		move.b	obRoutine(a0),d0
000194F8 323B 0000                  		move.w	Saw_Index(pc,d0.w),d1
000194FC 4EFB 1000                  		jmp	Saw_Index(pc,d1.w)
00019500                            ; ===========================================================================
00019500 0000                       Saw_Index:	dc.w Saw_Main-Saw_Index
00019502 0000                       		dc.w Saw_Action-Saw_Index
00019504                            
00019504 =0000003A                  saw_origX:	equ $3A		; original x-axis position
00019504 =00000038                  saw_origY:	equ $38		; original y-axis position
00019504 =0000003D                  saw_here:	equ $3D		; flag set when the ground saw appears
00019504                            ; ===========================================================================
00019504                            
00019504                            Saw_Main:	; Routine 0
00019504 5428 0024                  		addq.b	#2,obRoutine(a0)
00019508 217C 0000 0000 0004        		move.l	#Map_Saw,obMap(a0)
00019510 317C 43AD 0002             		move.w	#$43AD,obGfx(a0)
00019516 117C 0004 0001             		move.b	#4,obRender(a0)
0001951C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019522 117C 0020 0014             		move.b	#$20,obActWid(a0)
00019528 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
0001952E 3168 000C 0038             		move.w	obY(a0),saw_origY(a0)
00019534 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object a ground saw?
0001953A 6400                       		bcc.s	Saw_Action	; if yes, branch
0001953C 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00019542                            
00019542                            Saw_Action:	; Routine 2
00019542 7000                       		moveq	#0,d0
00019544 1028 0028                  		move.b	obSubtype(a0),d0
00019548 0240 0007                  		andi.w	#7,d0
0001954C D040                       		add.w	d0,d0
0001954E 323B 0000                  		move.w	@index(pc,d0.w),d1
00019552 4EBB 1000                  		jsr	@index(pc,d1.w)
00019572 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
00019578                            
00019578                            	@delete:
00019578 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001957E                            ; ===========================================================================
0001957E 0000 0000 0000             @index:		dc.w @type00-@index, @type01-@index, @type02-@index ; pizza cutters
00019584 0000 0000                  		dc.w @type03-@index, @type04-@index ; ground saws
00019588                            ; ===========================================================================
00019588                            
00019588                            @type00:
00019588 4E75                       		rts			; doesn't move
0001958A                            ; ===========================================================================
0001958A                            
0001958A                            @type01:
0001958A 323C 0060                  		move.w	#$60,d1
0001958E 7000                       		moveq	#0,d0
00019590 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00019594 0828 0000 0022             		btst	#0,obStatus(a0)
0001959A 6700                       		beq.s	@noflip01
0001959C 4440                       		neg.w	d0
0001959E D041                       		add.w	d1,d0
000195A0                            
000195A0                            	@noflip01:
000195A0 3228 003A                  		move.w	saw_origX(a0),d1
000195A4 9240                       		sub.w	d0,d1
000195A6 3141 0008                  		move.w	d1,obX(a0)	; move saw sideways
000195AA                            
000195AA 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000195AE 6A00                       		bpl.s	@sameframe01
000195B0 117C 0002 001E             		move.b	#2,obTimeFrame(a0) ; time between frame changes
000195B6 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
000195BC                            
000195BC                            	@sameframe01:
000195BC 4A28 0001                  		tst.b	obRender(a0)
000195C0 6A00                       		bpl.s	@nosound01
000195C2 3038 FE04                  		move.w	(v_framecount).w,d0
000195C6 0240 000F                  		andi.w	#$F,d0
000195CA 6600                       		bne.s	@nosound01
000195D6                            
000195D6                            	@nosound01:
000195D6 4E75                       		rts	
000195D8                            ; ===========================================================================
000195D8                            
000195D8                            @type02:
000195D8 323C 0030                  		move.w	#$30,d1
000195DC 7000                       		moveq	#0,d0
000195DE 1038 FE64                  		move.b	(v_oscillate+6).w,d0
000195E2 0828 0000 0022             		btst	#0,obStatus(a0)
000195E8 6700                       		beq.s	@noflip02
000195EA 4440                       		neg.w	d0
000195EC 0640 0080                  		addi.w	#$80,d0
000195F0                            
000195F0                            	@noflip02:
000195F0 3228 0038                  		move.w	saw_origY(a0),d1
000195F4 9240                       		sub.w	d0,d1
000195F6 3141 000C                  		move.w	d1,obY(a0)	; move saw vertically
000195FA 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000195FE 6A00                       		bpl.s	@sameframe02
00019600 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00019606 0868 0000 001A             		bchg	#0,obFrame(a0)
0001960C                            
0001960C                            	@sameframe02:
0001960C 4A28 0001                  		tst.b	obRender(a0)
00019610 6A00                       		bpl.s	@nosound02
00019612 1038 FE64                  		move.b	(v_oscillate+6).w,d0
00019616 0C00 0018                  		cmpi.b	#$18,d0
0001961A 6600                       		bne.s	@nosound02
00019626                            
00019626                            	@nosound02:
00019626 4E75                       		rts	
00019628                            ; ===========================================================================
00019628                            
00019628                            @type03:
00019628 4A28 003D                  		tst.b	saw_here(a0)	; has the saw appeared already?
0001962C 6600                       		bne.s	@here03		; if yes, branch
0001962E                            
0001962E 3038 D008                  		move.w	(v_player+obX).w,d0
00019632 0440 00C0                  		subi.w	#$C0,d0
00019636 6500                       		bcs.s	@nosaw03x
00019638 9068 0008                  		sub.w	obX(a0),d0
0001963C 6500                       		bcs.s	@nosaw03x
0001963E 3038 D00C                  		move.w	(v_player+obY).w,d0
00019642 0440 0080                  		subi.w	#$80,d0
00019646 B068 000C                  		cmp.w	obY(a0),d0
0001964A 6400                       		bcc.s	@nosaw03y
0001964C 0640 0100                  		addi.w	#$100,d0
00019650 B068 000C                  		cmp.w	obY(a0),d0
00019654 6500                       		bcs.s	@nosaw03y
00019656 117C 0001 003D             		move.b	#1,saw_here(a0)
0001965C 317C 0600 0010             		move.w	#$600,obVelX(a0) ; move object to the right
00019662 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00019668 117C 0002 001A             		move.b	#2,obFrame(a0)
00019678                            
00019678                            	@nosaw03x:
00019678 588F                       		addq.l	#4,sp
0001967A                            
0001967A                            	@nosaw03y:
0001967A 4E75                       		rts	
0001967C                            ; ===========================================================================
0001967C                            
0001967C                            @here03:
0001967C 4EB9 0000 F7B6             		jsr	(SpeedToPos).l
00019682 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00019688 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001968C 6A00                       		bpl.s	@sameframe03
0001968E 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00019694 0868 0000 001A             		bchg	#0,obFrame(a0)
0001969A                            
0001969A                            	@sameframe03:
0001969A 4E75                       		rts	
0001969C                            ; ===========================================================================
0001969C                            
0001969C                            @type04:
0001969C 4A28 003D                  		tst.b	saw_here(a0)
000196A0 6600                       		bne.s	@here04
000196A2 3038 D008                  		move.w	(v_player+obX).w,d0
000196A6 0640 00E0                  		addi.w	#$E0,d0
000196AA 9068 0008                  		sub.w	obX(a0),d0
000196AE 6400                       		bcc.s	@nosaw04x
000196B0 3038 D00C                  		move.w	(v_player+obY).w,d0
000196B4 0440 0080                  		subi.w	#$80,d0
000196B8 B068 000C                  		cmp.w	obY(a0),d0
000196BC 6400                       		bcc.s	@nosaw04y
000196BE 0640 0100                  		addi.w	#$100,d0
000196C2 B068 000C                  		cmp.w	obY(a0),d0
000196C6 6500                       		bcs.s	@nosaw04y
000196C8 117C 0001 003D             		move.b	#1,saw_here(a0)
000196CE 317C FA00 0010             		move.w	#-$600,obVelX(a0) ; move object to the left
000196D4 117C 00A2 0020             		move.b	#$A2,obColType(a0)
000196DA 117C 0002 001A             		move.b	#2,obFrame(a0)
000196EA                            
000196EA                            	@nosaw04x:
000196EA 588F                       		addq.l	#4,sp
000196EC                            
000196EC                            	@nosaw04y:
000196EC 4E75                       		rts	
000196EE                            ; ===========================================================================
000196EE                            
000196EE                            @here04:
000196EE 4EB9 0000 F7B6             		jsr	(SpeedToPos).l
000196F4 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
000196FA 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000196FE 6A00                       		bpl.s	@sameframe04
00019700 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00019706 0868 0000 001A             		bchg	#0,obFrame(a0)
0001970C                            
0001970C                            	@sameframe04:
0001970C 4E75                       		rts	
0001970C 4E75                       		rts	
0001970E                            Map_Saw:	include	"_maps\Saws and Pizza Cutters.asm"
0001970E                            ; ---------------------------------------------------------------------------
0001970E                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
0001970E                            ; ---------------------------------------------------------------------------
0001970E                            Map_Saw_internal:
0001970E 0000                       		dc.w @pizzacutter1-Map_Saw_internal
00019710 0000                       		dc.w @pizzacutter2-Map_Saw_internal
00019712 0000                       		dc.w @groundsaw1-Map_Saw_internal
00019714 0000                       		dc.w @groundsaw2-Map_Saw_internal
00019716 07                         @pizzacutter1:	dc.b 7
00019717 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001971C D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00019721 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00019726 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
0001972B E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00019730 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00019735 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
0001973A 07                         @pizzacutter2:	dc.b 7
0001973B C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00019740 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00019745 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001974A E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
0001974F E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00019754 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00019759 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
0001975E 04                         @groundsaw1:	dc.b 4
0001975F E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00019764 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00019769 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0001976E 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00019773 04                         @groundsaw2:	dc.b 4
00019774 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00019779 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
0001977E 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00019783 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00019788                            		even
00019788                            		even
00019788                            		include	"_incObj\6B SBZ Stomper and Door.asm"
00019788                            ; ---------------------------------------------------------------------------
00019788                            ; Object 6B - stomper and sliding door (SBZ)
00019788                            ; ---------------------------------------------------------------------------
00019788                            
00019788                            ScrapStomp:
00019788 7000                       		moveq	#0,d0
0001978A 1028 0024                  		move.b	obRoutine(a0),d0
0001978E 323B 0000                  		move.w	Sto_Index(pc,d0.w),d1
00019792 4EFB 1000                  		jmp	Sto_Index(pc,d1.w)
00019796                            ; ===========================================================================
00019796 0000                       Sto_Index:	dc.w Sto_Main-Sto_Index
00019798 0000                       		dc.w Sto_Action-Sto_Index
0001979A                            
0001979A =00000016                  sto_height:	equ $16
0001979A =00000034                  sto_origX:	equ $34		; original x-axis position
0001979A =00000030                  sto_origY:	equ $30		; original y-axis position
0001979A =00000038                  sto_active:	equ $38		; flag set when a switch is pressed
0001979A                            
0001979A 400C 8001                  Sto_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
0001979E 1C20 3803                  		dc.b  $1C, $20,	$38,   3
000197A2 1C20 4004                  		dc.b  $1C, $20,	$40,   4
000197A6 1C20 6004                  		dc.b  $1C, $20,	$60,   4
000197AA 8040 0005                  		dc.b  $80, $40,	  0,   5
000197AE                            ; ===========================================================================
000197AE                            
000197AE                            Sto_Main:	; Routine 0
000197AE 5428 0024                  		addq.b	#2,obRoutine(a0)
000197B2 7000                       		moveq	#0,d0
000197B4 1028 0028                  		move.b	obSubtype(a0),d0
000197B8 E448                       		lsr.w	#2,d0
000197BA 0240 001C                  		andi.w	#$1C,d0
000197BE 47FB 00DA                  		lea	Sto_Var(pc,d0.w),a3
000197C2 115B 0014                  		move.b	(a3)+,obActWid(a0)
000197C6 115B 0016                  		move.b	(a3)+,sto_height(a0)
000197CA E448                       		lsr.w	#2,d0
000197CC 1140 001A                  		move.b	d0,obFrame(a0)
000197D0 217C 0000 0000 0004        		move.l	#Map_Stomp,obMap(a0)
000197D8 317C 22C0 0002             		move.w	#$22C0,obGfx(a0)
000197DE 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ/SBZ3
000197E4 6600                       		bne.s	@isSBZ12	; if not, branch
000197E6 08F8 0000 F7CB             		bset	#0,(v_obj6B).w
000197EC 6700                       		beq.s	@isSBZ3
000197EE                            
000197EE                            @chkdel:
000197EE 45F8 FC00                  		lea	(v_objstate).w,a2
000197F2 7000                       		moveq	#0,d0
000197F4 1028 0023                  		move.b	obRespawnNo(a0),d0
000197F8 6700                       		beq.s	@delete
000197FA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019800                            
00019800                            	@delete:
00019800 4EF9 0000 F80A             		jmp	(DeleteObject).l
00019806                            ; ===========================================================================
00019806                            
00019806                            @isSBZ3:
00019806 317C 41F0 0002             		move.w	#$41F0,obGfx(a0)
0001980C 0C68 0A80 0008             		cmpi.w	#$A80,obX(a0)
00019812 6600                       		bne.s	@isSBZ12
00019814 45F8 FC00                  		lea	(v_objstate).w,a2
00019818 7000                       		moveq	#0,d0
0001981A 1028 0023                  		move.b	obRespawnNo(a0),d0
0001981E 6700                       		beq.s	@isSBZ12
00019820 0832 0000 0002             		btst	#0,2(a2,d0.w)
00019826 6700                       		beq.s	@isSBZ12
00019828 4238 F7CB                  		clr.b	(v_obj6B).w
0001982C 60C0                       		bra.s	@chkdel
0001982E                            ; ===========================================================================
0001982E                            
0001982E                            @isSBZ12:
0001982E 0028 0004 0001             		ori.b	#4,obRender(a0)
00019834 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001983A 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00019840 3168 000C 0030             		move.w	obY(a0),sto_origY(a0)
00019846 7000                       		moveq	#0,d0
00019848 101B                       		move.b	(a3)+,d0
0001984A 3140 003C                  		move.w	d0,$3C(a0)
0001984E 7000                       		moveq	#0,d0
00019850 1028 0028                  		move.b	obSubtype(a0),d0
00019854 6A00                       		bpl.s	Sto_Action
00019856 0200 000F                  		andi.b	#$F,d0
0001985A 1140 003E                  		move.b	d0,$3E(a0)
0001985E 1153 0028                  		move.b	(a3),obSubtype(a0)
00019862 0C13 0005                  		cmpi.b	#5,(a3)
00019866 6600                       		bne.s	@chkgone
00019868 08E8 0004 0001             		bset	#4,obRender(a0)
0001986E                            
0001986E                            	@chkgone:
0001986E 45F8 FC00                  		lea	(v_objstate).w,a2
00019872 7000                       		moveq	#0,d0
00019874 1028 0023                  		move.b	obRespawnNo(a0),d0
00019878 6700                       		beq.s	Sto_Action
0001987A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019880                            
00019880                            Sto_Action:	; Routine 2
00019880 3F28 0008                  		move.w	obX(a0),-(sp)
00019884 7000                       		moveq	#0,d0
00019886 1028 0028                  		move.b	obSubtype(a0),d0
0001988A 0240 000F                  		andi.w	#$F,d0
0001988E D040                       		add.w	d0,d0
00019890 323B 0000                  		move.w	@index(pc,d0.w),d1
00019894 4EBB 1000                  		jsr	@index(pc,d1.w)
00019898 381F                       		move.w	(sp)+,d4
0001989A 4A28 0001                  		tst.b	obRender(a0)
0001989E 6A00                       		bpl.s	@chkdel
000198A0 7200                       		moveq	#0,d1
000198A2 1228 0014                  		move.b	obActWid(a0),d1
000198A6 0641 000B                  		addi.w	#$B,d1
000198AA 7400                       		moveq	#0,d2
000198AC 1428 0016                  		move.b	sto_height(a0),d2
000198B0 3602                       		move.w	d2,d3
000198B2 5243                       		addq.w	#1,d3
000198B4 6100 8460                  		bsr.w	SolidObject
000198B8                            
000198B8                            	@chkdel:
000198D4 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
000198DA                            
000198DA                            	@chkgone:
000198DA 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w
000198E0 6600                       		bne.s	@delete
000198E2 4238 F7CB                  		clr.b	(v_obj6B).w
000198E6 45F8 FC00                  		lea	(v_objstate).w,a2
000198EA 7000                       		moveq	#0,d0
000198EC 1028 0023                  		move.b	obRespawnNo(a0),d0
000198F0 6700                       		beq.s	@delete
000198F2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000198F8                            
000198F8                            	@delete:
000198F8 4EF9 0000 F80A             		jmp	(DeleteObject).l
000198FE                            ; ===========================================================================
000198FE 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00019902 0000 0000                  		dc.w @type02-@index, @type03-@index
00019906 0000 0000                  		dc.w @type04-@index, @type05-@index
0001990A                            ; ===========================================================================
0001990A                            
0001990A                            @type00:
0001990A 4E75                       		rts
0001990C                            ; ===========================================================================
0001990C                            
0001990C                            @type01:
0001990C 4A28 0038                  		tst.b	sto_active(a0)
00019910 6600                       		bne.s	@isactive01
00019912 45F8 F7E0                  		lea	(f_switch).w,a2
00019916 7000                       		moveq	#0,d0
00019918 1028 003E                  		move.b	$3E(a0),d0
0001991C 0832 0000 0000             		btst	#0,(a2,d0.w)
00019922 6700                       		beq.s	@loc_15DC2
00019924 117C 0001 0038             		move.b	#1,sto_active(a0)
0001992A                            
0001992A                            	@isactive01:
0001992A 3028 003C                  		move.w	$3C(a0),d0
0001992E B068 003A                  		cmp.w	$3A(a0),d0
00019932 6700                       		beq.s	@loc_15DE0
00019934 5468 003A                  		addq.w	#2,$3A(a0)
00019938                            
00019938                            	@loc_15DC2:
00019938 3028 003A                  		move.w	$3A(a0),d0
0001993C 0828 0000 0022             		btst	#0,obStatus(a0)
00019942 6700                       		beq.s	@noflip01
00019944 4440                       		neg.w	d0
00019946 0640 0080                  		addi.w	#$80,d0
0001994A                            
0001994A                            	@noflip01:
0001994A 3228 0034                  		move.w	sto_origX(a0),d1
0001994E 9240                       		sub.w	d0,d1
00019950 3141 0008                  		move.w	d1,obX(a0)
00019954 4E75                       		rts	
00019956                            ; ===========================================================================
00019956                            
00019956                            @loc_15DE0:
00019956 5228 0028                  		addq.b	#1,obSubtype(a0)
0001995A 317C 00B4 0036             		move.w	#$B4,$36(a0)
00019960 4228 0038                  		clr.b	sto_active(a0)
00019964 45F8 FC00                  		lea	(v_objstate).w,a2
00019968 7000                       		moveq	#0,d0
0001996A 1028 0023                  		move.b	obRespawnNo(a0),d0
0001996E 67C8                       		beq.s	@loc_15DC2
00019970 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019976 60C0                       		bra.s	@loc_15DC2
00019978                            ; ===========================================================================
00019978                            
00019978                            @type02:
00019978 4A28 0038                  		tst.b	sto_active(a0)
0001997C 6600                       		bne.s	@isactive02
0001997E 5368 0036                  		subq.w	#1,$36(a0)
00019982 6600                       		bne.s	@loc_15E1E
00019984 117C 0001 0038             		move.b	#1,sto_active(a0)
0001998A                            
0001998A                            	@isactive02:
0001998A 4A68 003A                  		tst.w	$3A(a0)
0001998E 6700                       		beq.s	@loc_15E3C
00019990 5568 003A                  		subq.w	#2,$3A(a0)
00019994                            
00019994                            	@loc_15E1E:
00019994 3028 003A                  		move.w	$3A(a0),d0
00019998 0828 0000 0022             		btst	#0,obStatus(a0)
0001999E 6700                       		beq.s	@noflip02
000199A0 4440                       		neg.w	d0
000199A2 0640 0080                  		addi.w	#$80,d0
000199A6                            
000199A6                            	@noflip02:
000199A6 3228 0034                  		move.w	sto_origX(a0),d1
000199AA 9240                       		sub.w	d0,d1
000199AC 3141 0008                  		move.w	d1,obX(a0)
000199B0 4E75                       		rts	
000199B2                            ; ===========================================================================
000199B2                            
000199B2                            @loc_15E3C:
000199B2 5328 0028                  		subq.b	#1,obSubtype(a0)
000199B6 4228 0038                  		clr.b	sto_active(a0)
000199BA 45F8 FC00                  		lea	(v_objstate).w,a2
000199BE 7000                       		moveq	#0,d0
000199C0 1028 0023                  		move.b	obRespawnNo(a0),d0
000199C4 67CE                       		beq.s	@loc_15E1E
000199C6 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000199CC 60C6                       		bra.s	@loc_15E1E
000199CE                            ; ===========================================================================
000199CE                            
000199CE                            @type03:
000199CE 4A28 0038                  		tst.b	sto_active(a0)
000199D2 6600                       		bne.s	@isactive03
000199D4 4A68 003A                  		tst.w	$3A(a0)
000199D8 6700                       		beq.s	@loc_15E6A
000199DA 5368 003A                  		subq.w	#1,$3A(a0)
000199DE 6000                       		bra.s	@loc_15E8E
000199E0                            ; ===========================================================================
000199E0                            
000199E0                            @loc_15E6A:
000199E0 5368 0036                  		subq.w	#1,$36(a0)
000199E4 6A00                       		bpl.s	@loc_15E8E
000199E6 317C 003C 0036             		move.w	#$3C,$36(a0)
000199EC 117C 0001 0038             		move.b	#1,sto_active(a0)
000199F2                            
000199F2                            @isactive03:
000199F2 5068 003A                  		addq.w	#8,$3A(a0)
000199F6 3028 003A                  		move.w	$3A(a0),d0
000199FA B068 003C                  		cmp.w	$3C(a0),d0
000199FE 6600                       		bne.s	@loc_15E8E
00019A00 4228 0038                  		clr.b	sto_active(a0)
00019A04                            
00019A04                            @loc_15E8E:
00019A04 3028 003A                  		move.w	$3A(a0),d0
00019A08 0828 0000 0022             		btst	#0,obStatus(a0)
00019A0E 6700                       		beq.s	@noflip03
00019A10 4440                       		neg.w	d0
00019A12 0640 0038                  		addi.w	#$38,d0
00019A16                            
00019A16                            	@noflip03:
00019A16 3228 0030                  		move.w	sto_origY(a0),d1
00019A1A D240                       		add.w	d0,d1
00019A1C 3141 000C                  		move.w	d1,obY(a0)
00019A20 4E75                       		rts	
00019A22                            ; ===========================================================================
00019A22                            
00019A22                            @type04:
00019A22 4A28 0038                  		tst.b	sto_active(a0)
00019A26 6600                       		bne.s	@isactive04
00019A28 4A68 003A                  		tst.w	$3A(a0)
00019A2C 6700                       		beq.s	@loc_15EBE
00019A2E 5168 003A                  		subq.w	#8,$3A(a0)
00019A32 6000                       		bra.s	@loc_15EF0
00019A34                            ; ===========================================================================
00019A34                            
00019A34                            @loc_15EBE:
00019A34 5368 0036                  		subq.w	#1,$36(a0)
00019A38 6A00                       		bpl.s	@loc_15EF0
00019A3A 317C 003C 0036             		move.w	#$3C,$36(a0)
00019A40 117C 0001 0038             		move.b	#1,sto_active(a0)
00019A46                            
00019A46                            @isactive04:
00019A46 3028 003A                  		move.w	$3A(a0),d0
00019A4A B068 003C                  		cmp.w	$3C(a0),d0
00019A4E 6700                       		beq.s	@loc_15EE0
00019A50 5068 003A                  		addq.w	#8,$3A(a0)
00019A54 6000                       		bra.s	@loc_15EF0
00019A56                            ; ===========================================================================
00019A56                            
00019A56                            @loc_15EE0:
00019A56 5368 0036                  		subq.w	#1,$36(a0)
00019A5A 6A00                       		bpl.s	@loc_15EF0
00019A5C 317C 003C 0036             		move.w	#$3C,$36(a0)
00019A62 4228 0038                  		clr.b	sto_active(a0)
00019A66                            
00019A66                            @loc_15EF0:
00019A66 3028 003A                  		move.w	$3A(a0),d0
00019A6A 0828 0000 0022             		btst	#0,obStatus(a0)
00019A70 6700                       		beq.s	@noflip04
00019A72 4440                       		neg.w	d0
00019A74 0640 0038                  		addi.w	#$38,d0
00019A78                            
00019A78                            	@noflip04:
00019A78 3228 0030                  		move.w	sto_origY(a0),d1
00019A7C D240                       		add.w	d0,d1
00019A7E 3141 000C                  		move.w	d1,obY(a0)
00019A82 4E75                       		rts	
00019A84                            ; ===========================================================================
00019A84                            
00019A84                            @type05:
00019A84 4A28 0038                  		tst.b	sto_active(a0)
00019A88 6600                       		bne.s	@loc_15F3E
00019A8A 45F8 F7E0                  		lea	(f_switch).w,a2
00019A8E 7000                       		moveq	#0,d0
00019A90 1028 003E                  		move.b	$3E(a0),d0
00019A94 0832 0000 0000             		btst	#0,(a2,d0.w)
00019A9A 6700                       		beq.s	@locret_15F5C
00019A9C 117C 0001 0038             		move.b	#1,sto_active(a0)
00019AA2 45F8 FC00                  		lea	(v_objstate).w,a2
00019AA6 7000                       		moveq	#0,d0
00019AA8 1028 0023                  		move.b	obRespawnNo(a0),d0
00019AAC 6700                       		beq.s	@loc_15F3E
00019AAE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019AB4                            
00019AB4                            @loc_15F3E:
00019AB4 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
00019ABC 06A8 0000 8000 000C        		addi.l	#$8000,obY(a0)
00019AC4 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00019ACA 0C68 0980 0008             		cmpi.w	#$980,obX(a0)
00019AD0 6700                       		beq.s	@loc_15F5E
00019AD2                            
00019AD2                            @locret_15F5C:
00019AD2 4E75                       		rts	
00019AD4                            ; ===========================================================================
00019AD4                            
00019AD4                            @loc_15F5E:
00019AD4 4228 0028                  		clr.b	obSubtype(a0)
00019AD8 4228 0038                  		clr.b	sto_active(a0)
00019ADC 4E75                       		rts	
00019ADC 4E75                       		rts	
00019ADE                            Map_Stomp:	include	"_maps\SBZ Stomper and Door.asm"
00019ADE                            ; ---------------------------------------------------------------------------
00019ADE                            ; Sprite mappings - stomper and	platforms (SBZ)
00019ADE                            ; ---------------------------------------------------------------------------
00019ADE                            Map_Stomp_internal:
00019ADE 0000                       		dc.w @door-Map_Stomp_internal
00019AE0 0000                       		dc.w @stomper-Map_Stomp_internal
00019AE2 0000                       		dc.w @stomper-Map_Stomp_internal
00019AE4 0000                       		dc.w @stomper-Map_Stomp_internal
00019AE6 0000                       		dc.w @bigdoor-Map_Stomp_internal
00019AE8 04                         @door:		dc.b 4
00019AE9 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0 ; horizontal sliding door
00019AEE F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00019AF3 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00019AF8 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00019AFD 08                         @stomper:	dc.b 8
00019AFE E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4 ; stomper block with yellow/black stripes
00019B03 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00019B08 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00019B0D E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00019B12 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00019B17 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00019B1C 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00019B21 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00019B26 0E                         @bigdoor:	dc.b $E
00019B27 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80	; huge diagonal sliding door from SBZ3
00019B2C C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00019B31 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00019B36 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00019B3B C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00019B40 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00019B45 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00019B4A C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00019B4F E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00019B54 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00019B59 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00019B5E 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00019B63 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00019B68 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00019B6E 00                         		even
00019B6E 00                         		even
00019B6E                            		include	"_incObj\6C SBZ Vanishing Platforms.asm"
00019B6E                            ; ---------------------------------------------------------------------------
00019B6E                            ; Object 6C - vanishing	platforms (SBZ)
00019B6E                            ; ---------------------------------------------------------------------------
00019B6E                            
00019B6E                            VanishPlatform:
00019B6E 7000                       		moveq	#0,d0
00019B70 1028 0024                  		move.b	obRoutine(a0),d0
00019B74 323B 0000                  		move.w	VanP_Index(pc,d0.w),d1
00019B78 4EFB 1000                  		jmp	VanP_Index(pc,d1.w)
00019B7C                            ; ===========================================================================
00019B7C 0000                       VanP_Index:	dc.w VanP_Main-VanP_Index
00019B7E 0000                       		dc.w VanP_Vanish-VanP_Index
00019B80 0000                       		dc.w VanP_Appear-VanP_Index
00019B82 0000                       		dc.w loc_16068-VanP_Index
00019B84                            
00019B84 =00000030                  vanp_timer:	equ $30		; counter for time until event
00019B84 =00000032                  vanp_timelen:	equ $32		; time between events (general)
00019B84                            ; ===========================================================================
00019B84                            
00019B84                            VanP_Main:	; Routine 0
00019B84 5C28 0024                  		addq.b	#6,obRoutine(a0)
00019B88 217C 0000 0000 0004        		move.l	#Map_VanP,obMap(a0)
00019B90 317C 445D 0002             		move.w	#$445D,obGfx(a0)
00019B96 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; is level Spring Yard Zone?
00019B9C 6700                       		beq.s	VanP_IsSYZ	; if yes, branch
00019B9E 317C 44C3 0002             		move.w	#$44C3,obGfx(a0)	; SBZ
00019BA4                            
00019BA4                            	VanP_IsSYZ:	
00019BA4 0028 0004 0001             		ori.b	#4,obRender(a0)
00019BAA 117C 0010 0014             		move.b	#$10,obActWid(a0)
00019BB0 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019BB6 7000                       		moveq	#0,d0
00019BB8 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00019BBC 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00019BC0 5240                       		addq.w	#1,d0		; add 1
00019BC2 EF48                       		lsl.w	#7,d0		; multiply by $80
00019BC4 3200                       		move.w	d0,d1
00019BC6 5340                       		subq.w	#1,d0
00019BC8 3140 0030                  		move.w	d0,vanp_timer(a0)
00019BCC 3140 0032                  		move.w	d0,vanp_timelen(a0)
00019BD0 7000                       		moveq	#0,d0
00019BD2 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00019BD6 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00019BDA 0641 0080                  		addi.w	#$80,d1
00019BDE C0C1                       		mulu.w	d1,d0
00019BE0 E088                       		lsr.l	#8,d0
00019BE2 3140 0036                  		move.w	d0,$36(a0)
00019BE6 5341                       		subq.w	#1,d1
00019BE8 3141 0038                  		move.w	d1,$38(a0)
00019BEC                            
00019BEC                            loc_16068:	; Routine 6
00019BEC 3038 FE04                  		move.w	(v_framecount).w,d0
00019BF0 9068 0036                  		sub.w	$36(a0),d0
00019BF4 C068 0038                  		and.w	$38(a0),d0
00019BF8 6600                       		bne.s	@animate
00019BFA 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto VanP_Vanish next
00019BFE 6000                       		bra.s	VanP_Vanish
00019C00                            ; ===========================================================================
00019C00                            
00019C00                            @animate:
00019C00 43F9 0000 0000             		lea	(Ani_Van).l,a1
00019C06 4EB9 0000 C880             		jsr	(AnimateSprite).l
00019C0C 4EF9 0001 187E             		jmp	RememberState
00019C12                            ; ===========================================================================
00019C12                            
00019C12                            VanP_Vanish:	; Routine 2
00019C12                            VanP_Appear:	; Routine 4
00019C12 5368 0030                  		subq.w	#1,vanp_timer(a0)
00019C16 6A00                       		bpl.s	@wait
00019C18 317C 007F 0030             		move.w	#127,vanp_timer(a0)
00019C1E 4A28 001C                  		tst.b	obAnim(a0)	; is platform vanishing?
00019C22 6700                       		beq.s	@isvanishing	; if yes, branch
00019C24 3168 0032 0030             		move.w	vanp_timelen(a0),vanp_timer(a0)
00019C2A                            
00019C2A                            	@isvanishing:
00019C2A 0868 0000 001C             		bchg	#0,obAnim(a0)
00019C30                            
00019C30                            	@wait:
00019C30 43F9 0000 0000             		lea	(Ani_Van).l,a1
00019C36 4EB9 0000 C880             		jsr	(AnimateSprite).l
00019C3C 0828 0001 001A             		btst	#1,obFrame(a0)	; has platform vanished?
00019C42 6600                       		bne.s	@notsolid	; if yes, branch
00019C44 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
00019C4A 6600                       		bne.s	@loc_160D6
00019C4C 7200                       		moveq	#0,d1
00019C4E 1228 0014                  		move.b	obActWid(a0),d1
00019C52 4EB9 0000 8C24             		jsr	(PlatformObject).l
00019C58 4EF9 0001 187E             		jmp	RememberState
00019C5E                            ; ===========================================================================
00019C5E                            
00019C5E                            @loc_160D6:
00019C5E 7200                       		moveq	#0,d1
00019C60 1228 0014                  		move.b	obActWid(a0),d1
00019C64 4EB9 0000 8D98             		jsr	(ExitPlatform).l
00019C6A 3428 0008                  		move.w	obX(a0),d2
00019C6E 4EB9 0000 9302             		jsr	(MvSonicOnPtfm2).l
00019C74 4EF9 0001 187E             		jmp	RememberState
00019C7A                            ; ===========================================================================
00019C7A                            
00019C7A                            @notsolid:
00019C7A 0828 0003 0022             		btst	#3,obStatus(a0)
00019C80 6700                       		beq.s	@display
00019C82 43F8 D000                  		lea	(v_player).w,a1
00019C86 08A9 0003 0022             		bclr	#3,obStatus(a1)
00019C8C 08A8 0003 0022             		bclr	#3,obStatus(a0)
00019C92 117C 0002 0024             		move.b	#2,obRoutine(a0)
00019C98 4228 0025                  		clr.b	obSolid(a0)
00019C9C                            
00019C9C                            	@display:
00019C9C 4EF9 0001 187E             		jmp	RememberState
00019C9C 4EF9 0001 187E             		jmp	RememberState
00019CA2                            		include	"_anim\SBZ Vanishing Platforms.asm"
00019CA2                            ; ---------------------------------------------------------------------------
00019CA2                            ; Animation script - vanishing platforms (SBZ)
00019CA2                            ; ---------------------------------------------------------------------------
00019CA2 0000                       Ani_Van:	dc.w @vanish-Ani_Van
00019CA4 0000                       		dc.w @appear-Ani_Van
00019CA6 0300 0102 0304 0506 FE01   @vanish:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, afBack, 1
00019CB0                            		even
00019CB0 0306 0504 0302 0100 FE01   @appear:	dc.b 3,	6, 5, 4, 3, 2, 1, 0, afBack, 1
00019CBA                            		even
00019CBA                            		even
00019CBA                            Map_VanP:	include	"_maps\SBZ Vanishing Platforms.asm"
00019CBA                            ; --------------------------------------------------------------------------------
00019CBA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00019CBA                            ; --------------------------------------------------------------------------------
00019CBA                            
00019CBA                            SME_Mrcg1:	
00019CBA 0000 0000                  		dc.w SME_Mrcg1_E-SME_Mrcg1, SME_Mrcg1_14-SME_Mrcg1	
00019CBE 0000 0000                  		dc.w SME_Mrcg1_29-SME_Mrcg1, SME_Mrcg1_2F-SME_Mrcg1	
00019CC2 0000 0000                  		dc.w SME_Mrcg1_3A-SME_Mrcg1, SME_Mrcg1_40-SME_Mrcg1	
00019CC6 0000                       		dc.w SME_Mrcg1_46-SME_Mrcg1	
00019CC8 01                         SME_Mrcg1_E:	dc.b 1	
00019CC9 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00019CCE 04                         SME_Mrcg1_14:	dc.b 4	
00019CCF F803 0010 F8               		dc.b $F8, 3, 0, $10, $F8	
00019CD4 F803 0010 00               		dc.b $F8, 3, 0, $10, 0	
00019CD9 F803 0010 F0               		dc.b $F8, 3, 0, $10, $F0	
00019CDE F803 0010 08               		dc.b $F8, 3, 0, $10, 8	
00019CE3 01                         SME_Mrcg1_29:	dc.b 1	
00019CE4 F807 0000 F8               		dc.b $F8, 7, 0, 0, $F8	
00019CE9 02                         SME_Mrcg1_2F:	dc.b 2	
00019CEA F803 0010 F8               		dc.b $F8, 3, 0, $10, $F8	
00019CEF F803 0010 00               		dc.b $F8, 3, 0, $10, 0	
00019CF4 01                         SME_Mrcg1_3A:	dc.b 1	
00019CF5 F803 0000 FD               		dc.b $F8, 3, 0, 0, $FD	
00019CFA 01                         SME_Mrcg1_40:	dc.b 1	
00019CFB F803 0010 FD               		dc.b $F8, 3, 0, $10, $FD	
00019D00 00                         SME_Mrcg1_46:	dc.b 0	
00019D02 00                         		even
00019D02 00                         		even
00019D02                            		include	"_incObj\6E Electrocuter.asm"
00019D02                            ; ---------------------------------------------------------------------------
00019D02                            ; Object 6E - electrocution orbs (SBZ)
00019D02                            ; ---------------------------------------------------------------------------
00019D02                            
00019D02                            Electro:
00019D02 7000                       		moveq	#0,d0
00019D04 1028 0024                  		move.b	obRoutine(a0),d0
00019D08 323B 0000                  		move.w	Elec_Index(pc,d0.w),d1
00019D0C 4EFB 1000                  		jmp	Elec_Index(pc,d1.w)
00019D10                            ; ===========================================================================
00019D10 0000                       Elec_Index:	dc.w Elec_Main-Elec_Index
00019D12 0000                       		dc.w Elec_Shock-Elec_Index
00019D14                            
00019D14 =00000034                  elec_freq:	equ $34		; frequency
00019D14                            ; ===========================================================================
00019D14                            
00019D14                            Elec_Main:	; Routine 0
00019D14 5428 0024                  		addq.b	#2,obRoutine(a0)
00019D18 217C 0000 0000 0004        		move.l	#Map_Elec,obMap(a0)
00019D20 317C 047E 0002             		move.w	#$47E,obGfx(a0)
00019D26 0028 0004 0001             		ori.b	#4,obRender(a0)
00019D2C 117C 0028 0014             		move.b	#$28,obActWid(a0)
00019D32 7000                       		moveq	#0,d0
00019D34 1028 0028                  		move.b	obSubtype(a0),d0 ; read object type
00019D38 E948                       		lsl.w	#4,d0		; multiply by $10
00019D3A 5340                       		subq.w	#1,d0
00019D3C 3140 0034                  		move.w	d0,elec_freq(a0)
00019D40                            
00019D40                            Elec_Shock:	; Routine 2
00019D40 3038 FE04                  		move.w	(v_framecount).w,d0
00019D44 C068 0034                  		and.w	elec_freq(a0),d0 ; is it time to zap?
00019D48 6600                       		bne.s	@animate	; if not, branch
00019D4A                            
00019D4A 117C 0001 001C             		move.b	#1,obAnim(a0)	; run "zap" animation
00019D50 4A28 0001                  		tst.b	obRender(a0)
00019D54 6A00                       		bpl.s	@animate
00019D60                            
00019D60                            	@animate:
00019D60 43F9 0000 0000             		lea	(Ani_Elec).l,a1
00019D66 4EB9 0000 C880             		jsr	(AnimateSprite).l
00019D6C 117C 0000 0020             		move.b	#0,obColType(a0)
00019D72 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; is 4th frame displayed?
00019D78 6600                       		bne.s	@display	; if not, branch
00019D7A 117C 00A4 0020             		move.b	#$A4,obColType(a0) ; if yes, make object hurt Sonic
00019D80                            
00019D80                            	@display:
00019D80 4EF9 0001 187E             		jmp	RememberState
00019D80 4EF9 0001 187E             		jmp	RememberState
00019D86                            		include	"_anim\Electrocuter.asm"
00019D86                            ; ---------------------------------------------------------------------------
00019D86                            ; Animation script - electrocution orbs (SBZ)
00019D86                            ; ---------------------------------------------------------------------------
00019D86 0000                       Ani_Elec:	dc.w byte_161CC-Ani_Elec
00019D88 0000                       		dc.w byte_161D0-Ani_Elec
00019D8A 0700 FF                    byte_161CC:	dc.b 7,	0, afEnd
00019D8E 00                         		even
00019D8E 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, afChange, 0
00019D9E                            		even
00019D9E                            		even
00019D9E                            Map_Elec:	include	"_maps\Electrocuter.asm"
00019D9E                            ; --------------------------------------------------------------------------------
00019D9E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00019D9E                            ; --------------------------------------------------------------------------------
00019D9E                            
00019D9E                            SME_KiF9w:	
00019D9E 0000 0000                  		dc.w SME_KiF9w_C-SME_KiF9w, SME_KiF9w_17-SME_KiF9w	
00019DA2 0000 0000                  		dc.w SME_KiF9w_27-SME_KiF9w, SME_KiF9w_41-SME_KiF9w	
00019DA6 0000 0000                  		dc.w SME_KiF9w_56-SME_KiF9w, SME_KiF9w_75-SME_KiF9w	
00019DAA 02                         SME_KiF9w_C:	dc.b 2	
00019DAB F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019DB0 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019DB5 03                         SME_KiF9w_17:	dc.b 3	
00019DB6 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019DBB F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
00019DC0 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019DC5 05                         SME_KiF9w_27:	dc.b 5	
00019DC6 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019DCB F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
00019DD0 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019DD5 F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
00019DDA F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
00019DDF 04                         SME_KiF9w_41:	dc.b 4	
00019DE0 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019DE5 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019DEA F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
00019DEF F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
00019DF4 06                         SME_KiF9w_56:	dc.b 6	
00019DF5 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019DFA 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019DFF F60D 300C 08               		dc.b $F6, $D, $30, $C, 8	
00019E04 F60D 380C DC               		dc.b $F6, $D, $38, $C, $DC	
00019E09 F60D 200C 24               		dc.b $F6, $D, $20, $C, $24	
00019E0E F60D 280C C0               		dc.b $F6, $D, $28, $C, $C0	
00019E13 04                         SME_KiF9w_75:	dc.b 4	
00019E14 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019E19 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019E1E F60D 300C 24               		dc.b $F6, $D, $30, $C, $24	
00019E23 F60D 380C C0               		dc.b $F6, $D, $38, $C, $C0	
00019E28                            		even
00019E28                            		even
00019E28                            		include	"_incObj\6F SBZ Spin Platform Conveyor.asm"
00019E28                            ; ---------------------------------------------------------------------------
00019E28                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00019E28                            ; ---------------------------------------------------------------------------
00019E28                            
00019E28                            SpinConvey:
00019E28 7000                       		moveq	#0,d0
00019E2A 1028 0024                  		move.b	obRoutine(a0),d0
00019E2E 323B 0000                  		move.w	SpinC_Index(pc,d0.w),d1
00019E32 4EBB 1000                  		jsr	SpinC_Index(pc,d1.w)
00019E52                            
00019E52                            SpinC_Display:
00019E52 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
00019E58                            ; ===========================================================================
00019E58                            
00019E58                            loc_1629A:
00019E58 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; check if act is 3
00019E5E 6600                       		bne.s	SpinC_Act1or2	; if not, branch
00019E60 0C40 FF80                  		cmpi.w	#-$80,d0
00019E64 64EC                       		bcc.s	SpinC_Display
00019E66                            
00019E66                            SpinC_Act1or2:
00019E66 1028 002F                  		move.b	$2F(a0),d0
00019E6A 6A00                       		bpl.s	SpinC_Delete
00019E6C 0240 007F                  		andi.w	#$7F,d0
00019E70 45F8 F7C1                  		lea	(v_obj63).w,a2
00019E74 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00019E7A                            
00019E7A                            SpinC_Delete:
00019E7A 4EF9 0000 F80A             		jmp	(DeleteObject).l
00019E80                            ; ===========================================================================
00019E80 0000                       SpinC_Index:	dc.w SpinC_Main-SpinC_Index
00019E82 0000                       		dc.w loc_163D8-SpinC_Index
00019E84                            ; ===========================================================================
00019E84                            
00019E84                            SpinC_Main:	; Routine 0
00019E84 1028 0028                  		move.b	obSubtype(a0),d0
00019E88 6B00 0000                  		bmi.w	loc_16380
00019E8C 5428 0024                  		addq.b	#2,obRoutine(a0)
00019E90 217C 0001 94B0 0004        		move.l	#Map_Spin,obMap(a0)
00019E98 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
00019E9E 117C 0010 0014             		move.b	#$10,obActWid(a0)
00019EA4 0028 0004 0001             		ori.b	#4,obRender(a0)
00019EAA 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019EB0 7000                       		moveq	#0,d0
00019EB2 1028 0028                  		move.b	obSubtype(a0),d0
00019EB6 3200                       		move.w	d0,d1
00019EB8 E648                       		lsr.w	#3,d0
00019EBA 0240 001E                  		andi.w	#$1E,d0
00019EBE 45FA 0000                  		lea	off_164A6(pc),a2
00019EC2 D4F2 0000                  		adda.w	(a2,d0.w),a2
00019EC6 315A 0038                  		move.w	(a2)+,$38(a0)
00019ECA 315A 0030                  		move.w	(a2)+,$30(a0)
00019ECE 214A 003C                  		move.l	a2,$3C(a0)
00019ED2 0241 000F                  		andi.w	#$F,d1
00019ED6 E549                       		lsl.w	#2,d1
00019ED8 1141 0038                  		move.b	d1,$38(a0)
00019EDC 117C 0004 003A             		move.b	#4,$3A(a0)
00019EE2 4A38 F7C0                  		tst.b	(f_conveyrev).w
00019EE6 6700                       		beq.s	loc_16356
00019EE8 117C 0001 003B             		move.b	#1,$3B(a0)
00019EEE 4428 003A                  		neg.b	$3A(a0)
00019EF2 7200                       		moveq	#0,d1
00019EF4 1228 0038                  		move.b	$38(a0),d1
00019EF8 D228 003A                  		add.b	$3A(a0),d1
00019EFC B228 0039                  		cmp.b	$39(a0),d1
00019F00 6500                       		bcs.s	loc_16352
00019F02 1001                       		move.b	d1,d0
00019F04 7200                       		moveq	#0,d1
00019F06 4A00                       		tst.b	d0
00019F08 6A00                       		bpl.s	loc_16352
00019F0A 1228 0039                  		move.b	$39(a0),d1
00019F0E 5901                       		subq.b	#4,d1
00019F10                            
00019F10                            loc_16352:
00019F10 1141 0038                  		move.b	d1,$38(a0)
00019F14                            
00019F14                            loc_16356:
00019F14 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00019F1A 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00019F20 4A41                       		tst.w	d1
00019F22 6600                       		bne.s	loc_1636C
00019F24 117C 0001 001C             		move.b	#1,obAnim(a0)
00019F2A                            
00019F2A                            loc_1636C:
00019F2A 0C41 0008                  		cmpi.w	#8,d1
00019F2E 6600                       		bne.s	loc_16378
00019F30 117C 0000 001C             		move.b	#0,obAnim(a0)
00019F36                            
00019F36                            loc_16378:
00019F36 6100 A9CC                  		bsr.w	LCon_ChangeDir
00019F3A 6000 0000                  		bra.w	loc_163D8
00019F3E                            ; ===========================================================================
00019F3E                            
00019F3E                            loc_16380:
00019F3E 1140 002F                  		move.b	d0,$2F(a0)
00019F42 0240 007F                  		andi.w	#$7F,d0
00019F46 45F8 F7C1                  		lea	(v_obj63).w,a2
00019F4A 08F2 0000 0000             		bset	#0,(a2,d0.w)
00019F50 6700                       		beq.s	loc_1639A
00019F52 4EF9 0000 F80A             		jmp	(DeleteObject).l
00019F58                            ; ===========================================================================
00019F58                            
00019F58                            loc_1639A:
00019F58 D040                       		add.w	d0,d0
00019F5A 0240 001E                  		andi.w	#$1E,d0
00019F5E 0640 0000                  		addi.w	#ObjPosSBZPlatform_Index-ObjPos_Index,d0
00019F62 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00019F68 D4F2 0000                  		adda.w	(a2,d0.w),a2
00019F6C 321A                       		move.w	(a2)+,d1
00019F6E 2248                       		movea.l	a0,a1
00019F70 6000                       		bra.s	SpinC_LoadPform
00019F72                            ; ===========================================================================
00019F72                            
00019F72                            SpinC_Loop:
00019F72 4EB9 0000 FD64             		jsr	(FindFreeObj).l
00019F78 6600                       		bne.s	loc_163D0
00019F7A                            
00019F7A                            SpinC_LoadPform:
00019F7A 12BC 006F                  		move.b	#id_SpinConvey,0(a1)
00019F7E 335A 0008                  		move.w	(a2)+,obX(a1)
00019F82 335A 000C                  		move.w	(a2)+,obY(a1)
00019F86 301A                       		move.w	(a2)+,d0
00019F88 1340 0028                  		move.b	d0,obSubtype(a1)
00019F8C                            
00019F8C                            loc_163D0:
00019F8C 51C9 FFE4                  		dbf	d1,SpinC_Loop
00019F90                            
00019F90 588F                       		addq.l	#4,sp
00019F92 4E75                       		rts	
00019F94                            ; ===========================================================================
00019F94                            
00019F94                            loc_163D8:	; Routine 2
00019F94 43F9 0000 0000             		lea	(Ani_SpinConvey).l,a1
00019F9A 4EB9 0000 C880             		jsr	(AnimateSprite).l
00019FA0 4A28 001A                  		tst.b	obFrame(a0)
00019FA4 6600                       		bne.s	loc_16404
00019FA6 3F28 0008                  		move.w	obX(a0),-(sp)
00019FAA 6100 0000                  		bsr.w	loc_16424
00019FAE 323C 001B                  		move.w	#$1B,d1
00019FB2 343C 0007                  		move.w	#7,d2
00019FB6 3602                       		move.w	d2,d3
00019FB8 5243                       		addq.w	#1,d3
00019FBA 381F                       		move.w	(sp)+,d4
00019FBC 4EF9 0001 1D16             		jmp	SolidObject
00019FC2                            ; ===========================================================================
00019FC2                            
00019FC2                            loc_16404:
00019FC2 0828 0003 0022             		btst	#3,obStatus(a0)
00019FC8 6700                       		beq.s	loc_16420
00019FCA 43F8 D000                  		lea	(v_objspace).w,a1
00019FCE 08A9 0003 0022             		bclr	#3,obStatus(a1)
00019FD4 08A8 0003 0022             		bclr	#3,obStatus(a0)
00019FDA 4228 0025                  		clr.b	obSolid(a0)
00019FDE                            
00019FDE                            loc_16420:
00019FDE 6000 0000                  		bra.w	loc_16424
00019FE2                            
00019FE2                            loc_16424:
00019FE2 3028 0008                  		move.w	obX(a0),d0
00019FE6 B068 0034                  		cmp.w	$34(a0),d0
00019FEA 6600                       		bne.s	loc_16484
00019FEC 3028 000C                  		move.w	obY(a0),d0
00019FF0 B068 0036                  		cmp.w	$36(a0),d0
00019FF4 6600                       		bne.s	loc_16484
00019FF6 7200                       		moveq	#0,d1
00019FF8 1228 0038                  		move.b	$38(a0),d1
00019FFC D228 003A                  		add.b	$3A(a0),d1
0001A000 B228 0039                  		cmp.b	$39(a0),d1
0001A004 6500                       		bcs.s	loc_16456
0001A006 1001                       		move.b	d1,d0
0001A008 7200                       		moveq	#0,d1
0001A00A 4A00                       		tst.b	d0
0001A00C 6A00                       		bpl.s	loc_16456
0001A00E 1228 0039                  		move.b	$39(a0),d1
0001A012 5901                       		subq.b	#4,d1
0001A014                            
0001A014                            loc_16456:
0001A014 1141 0038                  		move.b	d1,$38(a0)
0001A018 2268 003C                  		movea.l	$3C(a0),a1
0001A01C 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001A022 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001A028 4A41                       		tst.w	d1
0001A02A 6600                       		bne.s	loc_16474
0001A02C 117C 0001 001C             		move.b	#1,obAnim(a0)
0001A032                            
0001A032                            loc_16474:
0001A032 0C41 0008                  		cmpi.w	#8,d1
0001A036 6600                       		bne.s	loc_16480
0001A038 117C 0000 001C             		move.b	#0,obAnim(a0)
0001A03E                            
0001A03E                            loc_16480:
0001A03E 6100 A8C4                  		bsr.w	LCon_ChangeDir
0001A042                            
0001A042                            loc_16484:
0001A042 4EF9 0000 F7B6             		jmp	(SpeedToPos).l
0001A042 4EF9 0000 F7B6             		jmp	(SpeedToPos).l
0001A048                            		include	"_anim\SBZ Spin Platform Conveyor.asm"
0001A048                            ; ---------------------------------------------------------------------------
0001A048                            ; Animation script - platform on conveyor belt (SBZ)
0001A048                            ; ---------------------------------------------------------------------------
0001A048 0000                       Ani_SpinConvey:	dc.w @spin-Ani_SpinConvey
0001A04A 0000                       		dc.w @still-Ani_SpinConvey
0001A04C 0000 0102 0304 4342 4140+  @spin:		dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001A059 6423 2221 00FF             		dc.b $64, $23, $22, $21, 0, afEnd
0001A060 00                         		even
0001A060 0F00 FF                    @still:		dc.b $F, 0, afEnd
0001A064 00                         		even
0001A064 00                         		even
0001A064                            
0001A064 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
0001A06A 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
0001A070 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
0001A084 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
0001A098 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
0001A0AC 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
0001A0C0 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
0001A0D4 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
0001A0E8                            ; ===========================================================================
0001A0E8                            
0001A0E8                            		include	"_incObj\70 Girder Block.asm"
0001A0E8                            ; ---------------------------------------------------------------------------
0001A0E8                            ; Object 70 - large girder block (SBZ)
0001A0E8                            ; ---------------------------------------------------------------------------
0001A0E8                            
0001A0E8                            Girder:
0001A0E8 7000                       		moveq	#0,d0
0001A0EA 1028 0024                  		move.b	obRoutine(a0),d0
0001A0EE 323B 0000                  		move.w	Gird_Index(pc,d0.w),d1
0001A0F2 4EFB 1000                  		jmp	Gird_Index(pc,d1.w)
0001A0F6                            ; ===========================================================================
0001A0F6 0000                       Gird_Index:	dc.w Gird_Main-Gird_Index
0001A0F8 0000                       		dc.w Gird_Action-Gird_Index
0001A0FA                            
0001A0FA =00000016                  gird_height:	equ $16
0001A0FA =00000032                  gird_origX:	equ $32		; original x-axis position
0001A0FA =00000030                  gird_origY:	equ $30		; original y-axis position
0001A0FA =00000034                  gird_time:	equ $34		; duration for movement in a direction
0001A0FA =00000038                  gird_set:	equ $38		; which movement settings to use (0/8/16/24)
0001A0FA =0000003A                  gird_delay:	equ $3A		; delay for movement
0001A0FA                            ; ===========================================================================
0001A0FA                            
0001A0FA                            Gird_Main:	; Routine 0
0001A0FA 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A0FE 217C 0000 0000 0004        		move.l	#Map_Gird,obMap(a0)
0001A106 317C 42F0 0002             		move.w	#$42F0,obGfx(a0)
0001A10C 0028 0004 0001             		ori.b	#4,obRender(a0)
0001A112 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001A118 117C 0060 0014             		move.b	#$60,obActWid(a0)
0001A11E 117C 0018 0016             		move.b	#$18,gird_height(a0)
0001A124 3168 0008 0032             		move.w	obX(a0),gird_origX(a0)
0001A12A 3168 000C 0030             		move.w	obY(a0),gird_origY(a0)
0001A130 6100 0000                  		bsr.w	Gird_ChgMove
0001A134                            
0001A134                            Gird_Action:	; Routine 2
0001A134 3F28 0008                  		move.w	obX(a0),-(sp)
0001A138 4A68 003A                  		tst.w	gird_delay(a0)
0001A13C 6700                       		beq.s	@beginmove
0001A13E 5368 003A                  		subq.w	#1,gird_delay(a0)
0001A142 6600                       		bne.s	@solid
0001A144                            
0001A144                            	@beginmove:
0001A144 4EB9 0000 F7B6             		jsr	(SpeedToPos).l
0001A14A 5368 0034                  		subq.w	#1,gird_time(a0) ; decrement movement duration
0001A14E 6600                       		bne.s	@solid		; if time remains, branch
0001A150 6100 0000                  		bsr.w	Gird_ChgMove	; if time is zero, branch
0001A154                            
0001A154                            	@solid:
0001A154 381F                       		move.w	(sp)+,d4
0001A156 4A28 0001                  		tst.b	obRender(a0)
0001A15A 6A00                       		bpl.s	@chkdel
0001A15C 7200                       		moveq	#0,d1
0001A15E 1228 0014                  		move.b	obActWid(a0),d1
0001A162 0641 000B                  		addi.w	#$B,d1
0001A166 7400                       		moveq	#0,d2
0001A168 1428 0016                  		move.b	gird_height(a0),d2
0001A16C 3602                       		move.w	d2,d3
0001A16E 5243                       		addq.w	#1,d3
0001A170 4EB9 0001 1D16             		jsr	SolidObject
0001A176                            
0001A176                            	@chkdel:
0001A192 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001A198                            
0001A198                            	@delete:
0001A198 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001A19E                            ; ===========================================================================
0001A19E                            
0001A19E                            Gird_ChgMove:
0001A19E 1028 0038                  		move.b	gird_set(a0),d0
0001A1A2 0240 0018                  		andi.w	#$18,d0
0001A1A6 43F9 0000 0000             		lea	(@settings).l,a1
0001A1AC 43F1 0000                  		lea	(a1,d0.w),a1
0001A1B0 3159 0010                  		move.w	(a1)+,obVelX(a0)
0001A1B4 3159 0012                  		move.w	(a1)+,obVelY(a0)
0001A1B8 3159 0034                  		move.w	(a1)+,gird_time(a0)
0001A1BC 5028 0038                  		addq.b	#8,gird_set(a0)	; use next settings
0001A1C0 317C 0007 003A             		move.w	#7,gird_delay(a0)
0001A1C6 4E75                       		rts	
0001A1C8                            ; ===========================================================================
0001A1C8                            @settings:	;   x-speed, y-speed, duration
0001A1C8 0100 0000 0060 0000        		dc.w   $100,	 0,   $60,     0 ; right
0001A1D0 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0 ; down
0001A1D8 FF00 FFC0 0060 0000        		dc.w  -$100,  -$40,   $60,     0 ; up/left
0001A1E0 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
0001A1E0 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
0001A1E8                            Map_Gird:	include	"_maps\Girder Block.asm"
0001A1E8                            ; ---------------------------------------------------------------------------
0001A1E8                            ; Sprite mappings - large girder block (SBZ)
0001A1E8                            ; ---------------------------------------------------------------------------
0001A1E8                            Map_Gird_internal:
0001A1E8 0000                       		dc.w @girder-Map_Gird_internal
0001A1EA 0C                         @girder:	dc.b $C
0001A1EB E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
0001A1F0 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
0001A1F5 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
0001A1FA 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
0001A1FF E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
0001A204 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
0001A209 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
0001A20E 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
0001A213 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
0001A218 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
0001A21D E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
0001A222 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
0001A228 00                         		even
0001A228 00                         		even
0001A228                            		include	"_incObj\72 Teleporter.asm"
0001A228                            ; ---------------------------------------------------------------------------
0001A228                            ; Object 72 - teleporter (SBZ)
0001A228                            ; ---------------------------------------------------------------------------
0001A228                            
0001A228                            Teleport:
0001A228 7000                       		moveq	#0,d0
0001A22A 1028 0024                  		move.b	obRoutine(a0),d0
0001A22E 323B 0000                  		move.w	Tele_Index(pc,d0.w),d1
0001A232 4EBB 1000                  		jsr	Tele_Index(pc,d1.w)
0001A252 4E75                       		rts	
0001A254                            
0001A254                            	@delete:
0001A254 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001A25A                            ; ===========================================================================
0001A25A 0000                       Tele_Index:	dc.w Tele_Main-Tele_Index
0001A25C 0000                       		dc.w loc_166C8-Tele_Index
0001A25E 0000                       		dc.w loc_1675E-Tele_Index
0001A260 0000                       		dc.w loc_16798-Tele_Index
0001A262                            ; ===========================================================================
0001A262                            
0001A262                            Tele_Main:	; Routine 0
0001A262 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A266 1028 0028                  		move.b	obSubtype(a0),d0
0001A26A D040                       		add.w	d0,d0
0001A26C 0240 001E                  		andi.w	#$1E,d0
0001A270 45FA 0000                  		lea	Tele_Data(pc),a2
0001A274 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001A278 315A 003A                  		move.w	(a2)+,$3A(a0)
0001A27C 214A 003C                  		move.l	a2,$3C(a0)
0001A280 315A 0036                  		move.w	(a2)+,$36(a0)
0001A284 315A 0038                  		move.w	(a2)+,$38(a0)
0001A288                            
0001A288                            loc_166C8:	; Routine 2
0001A288 43F8 D000                  		lea	(v_player).w,a1
0001A28C 3029 0008                  		move.w	obX(a1),d0
0001A290 9068 0008                  		sub.w	obX(a0),d0
0001A294 0828 0000 0022             		btst	#0,obStatus(a0)
0001A29A 6700                       		beq.s	loc_166E0
0001A29C 0640 000F                  		addi.w	#$F,d0
0001A2A0                            
0001A2A0                            loc_166E0:
0001A2A0 0C40 0010                  		cmpi.w	#$10,d0
0001A2A4 6400                       		bcc.s	locret_1675C
0001A2A6 3229 000C                  		move.w	obY(a1),d1
0001A2AA 9268 000C                  		sub.w	obY(a0),d1
0001A2AE 0641 0020                  		addi.w	#$20,d1
0001A2B2 0C41 0040                  		cmpi.w	#$40,d1
0001A2B6 6400                       		bcc.s	locret_1675C
0001A2B8 4A38 F7C8                  		tst.b	(f_lockmulti).w
0001A2BC 6600                       		bne.s	locret_1675C
0001A2BE 0C28 0007 0028             		cmpi.b	#7,obSubtype(a0)
0001A2C4 6600                       		bne.s	loc_1670E
0001A2C6 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w
0001A2CC 6500                       		bcs.s	locret_1675C
0001A2CE                            
0001A2CE                            loc_1670E:
0001A2CE 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A2D2 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
0001A2D8 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; use Sonic's rolling animation
0001A2DE 337C 0800 0020             		move.w	#$800,obInertia(a1)
0001A2E4 337C 0000 0010             		move.w	#0,obVelX(a1)
0001A2EA 337C 0000 0012             		move.w	#0,obVelY(a1)
0001A2F0 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001A2F6 08A9 0005 0022             		bclr	#5,obStatus(a1)
0001A2FC 08E9 0001 0022             		bset	#1,obStatus(a1)
0001A302 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A308 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A30E 4228 0032                  		clr.b	$32(a0)
0001A31C                            
0001A31C                            locret_1675C:
0001A31C 4E75                       		rts	
0001A31E                            ; ===========================================================================
0001A31E                            
0001A31E                            loc_1675E:	; Routine 4
0001A31E 43F8 D000                  		lea	(v_player).w,a1
0001A322 1028 0032                  		move.b	$32(a0),d0
0001A326 5428 0032                  		addq.b	#2,$32(a0)
0001A32A 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001A330 EA40                       		asr.w	#5,d0
0001A332 3428 000C                  		move.w	obY(a0),d2
0001A336 9440                       		sub.w	d0,d2
0001A338 3342 000C                  		move.w	d2,obY(a1)
0001A33C 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
0001A342 6600                       		bne.s	locret_16796
0001A344 6100 0000                  		bsr.w	sub_1681C
0001A348 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A356                            
0001A356                            locret_16796:
0001A356 4E75                       		rts	
0001A358                            ; ===========================================================================
0001A358                            
0001A358                            loc_16798:	; Routine 6
0001A358 588F                       		addq.l	#4,sp
0001A35A 43F8 D000                  		lea	(v_player).w,a1
0001A35E 5328 002E                  		subq.b	#1,$2E(a0)
0001A362 6A00                       		bpl.s	loc_167DA
0001A364 3368 0036 0008             		move.w	$36(a0),obX(a1)
0001A36A 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001A370 7200                       		moveq	#0,d1
0001A372 1228 003A                  		move.b	$3A(a0),d1
0001A376 5801                       		addq.b	#4,d1
0001A378 B228 003B                  		cmp.b	$3B(a0),d1
0001A37C 6500                       		bcs.s	loc_167C2
0001A37E 7200                       		moveq	#0,d1
0001A380 6000                       		bra.s	loc_16800
0001A382                            ; ===========================================================================
0001A382                            
0001A382                            loc_167C2:
0001A382 1141 003A                  		move.b	d1,$3A(a0)
0001A386 2468 003C                  		movea.l	$3C(a0),a2
0001A38A 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
0001A390 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
0001A396 6000 0000                  		bra.w	sub_1681C
0001A39A                            ; ===========================================================================
0001A39A                            
0001A39A                            loc_167DA:
0001A39A 2429 0008                  		move.l	obX(a1),d2
0001A39E 2629 000C                  		move.l	obY(a1),d3
0001A3A2 3029 0010                  		move.w	obVelX(a1),d0
0001A3A6 48C0                       		ext.l	d0
0001A3A8 E180                       		asl.l	#8,d0
0001A3AA D480                       		add.l	d0,d2
0001A3AC 3029 0012                  		move.w	obVelY(a1),d0
0001A3B0 48C0                       		ext.l	d0
0001A3B2 E180                       		asl.l	#8,d0
0001A3B4 D680                       		add.l	d0,d3
0001A3B6 2342 0008                  		move.l	d2,obX(a1)
0001A3BA 2343 000C                  		move.l	d3,obY(a1)
0001A3BE 4E75                       		rts	
0001A3C0                            ; ===========================================================================
0001A3C0                            
0001A3C0                            loc_16800:
0001A3C0 0269 07FF 000C             		andi.w	#$7FF,obY(a1)
0001A3C6 4228 0024                  		clr.b	obRoutine(a0)
0001A3CA 4238 F7C8                  		clr.b	(f_lockmulti).w
0001A3CE 337C 0000 0010             		move.w	#0,obVelX(a1)
0001A3D4 337C 0200 0012             		move.w	#$200,obVelY(a1)
0001A3DA 4E75                       		rts	
0001A3DC                            
0001A3DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A3DC                            
0001A3DC                            
0001A3DC                            sub_1681C:
0001A3DC 7000                       		moveq	#0,d0
0001A3DE 343C 1000                  		move.w	#$1000,d2
0001A3E2 3028 0036                  		move.w	$36(a0),d0
0001A3E6 9069 0008                  		sub.w	obX(a1),d0
0001A3EA 6C00                       		bge.s	loc_16830
0001A3EC 4440                       		neg.w	d0
0001A3EE 4442                       		neg.w	d2
0001A3F0                            
0001A3F0                            loc_16830:
0001A3F0 7200                       		moveq	#0,d1
0001A3F2 363C 1000                  		move.w	#$1000,d3
0001A3F6 3228 0038                  		move.w	$38(a0),d1
0001A3FA 9269 000C                  		sub.w	obY(a1),d1
0001A3FE 6C00                       		bge.s	loc_16844
0001A400 4441                       		neg.w	d1
0001A402 4443                       		neg.w	d3
0001A404                            
0001A404                            loc_16844:
0001A404 B240                       		cmp.w	d0,d1
0001A406 6500                       		bcs.s	loc_1687A
0001A408 7200                       		moveq	#0,d1
0001A40A 3228 0038                  		move.w	$38(a0),d1
0001A40E 9269 000C                  		sub.w	obY(a1),d1
0001A412 4841                       		swap	d1
0001A414 83C3                       		divs.w	d3,d1
0001A416 7000                       		moveq	#0,d0
0001A418 3028 0036                  		move.w	$36(a0),d0
0001A41C 9069 0008                  		sub.w	obX(a1),d0
0001A420 6700                       		beq.s	loc_16866
0001A422 4840                       		swap	d0
0001A424 81C1                       		divs.w	d1,d0
0001A426                            
0001A426                            loc_16866:
0001A426 3340 0010                  		move.w	d0,obVelX(a1)
0001A42A 3343 0012                  		move.w	d3,obVelY(a1)
0001A42E 4A41                       		tst.w	d1
0001A430 6A00                       		bpl.s	loc_16874
0001A432 4441                       		neg.w	d1
0001A434                            
0001A434                            loc_16874:
0001A434 3141 002E                  		move.w	d1,$2E(a0)
0001A438 4E75                       		rts	
0001A43A                            ; ===========================================================================
0001A43A                            
0001A43A                            loc_1687A:
0001A43A 7000                       		moveq	#0,d0
0001A43C 3028 0036                  		move.w	$36(a0),d0
0001A440 9069 0008                  		sub.w	obX(a1),d0
0001A444 4840                       		swap	d0
0001A446 81C2                       		divs.w	d2,d0
0001A448 7200                       		moveq	#0,d1
0001A44A 3228 0038                  		move.w	$38(a0),d1
0001A44E 9269 000C                  		sub.w	obY(a1),d1
0001A452 6700                       		beq.s	loc_16898
0001A454 4841                       		swap	d1
0001A456 83C0                       		divs.w	d0,d1
0001A458                            
0001A458                            loc_16898:
0001A458 3341 0012                  		move.w	d1,obVelY(a1)
0001A45C 3342 0010                  		move.w	d2,obVelX(a1)
0001A460 4A40                       		tst.w	d0
0001A462 6A00                       		bpl.s	loc_168A6
0001A464 4440                       		neg.w	d0
0001A466                            
0001A466                            loc_168A6:
0001A466 3140 002E                  		move.w	d0,$2E(a0)
0001A46A 4E75                       		rts	
0001A46C                            ; End of function sub_1681C
0001A46C                            
0001A46C                            ; ===========================================================================
0001A46C 0000 0000 0000             Tele_Data:	dc.w @type00-Tele_Data, @type01-Tele_Data, @type02-Tele_Data
0001A472 0000 0000 0000             		dc.w @type03-Tele_Data, @type04-Tele_Data, @type05-Tele_Data
0001A478 0000 0000                  		dc.w @type06-Tele_Data, @type07-Tele_Data
0001A47C 0004 0794 098C             @type00:	dc.w 4,	$794, $98C
0001A482 0004 0094 038C             @type01:	dc.w 4,	$94, $38C
0001A488 001C 0794 02E8             @type02:	dc.w $1C, $794,	$2E8
0001A48E 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
0001A494 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
0001A49A 0884 0298 0894             		dc.w $884, $298, $894
0001A4A0 0270 0894 0190             		dc.w $270, $894, $190
0001A4A6 0004 0894 0690             @type03:	dc.w 4,	$894, $690
0001A4AC 001C 1194 0470             @type04:	dc.w $1C, $1194, $470
0001A4B2 1184 0498 1158             		dc.w $1184, $498, $1158
0001A4B8 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
0001A4BE 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
0001A4C4 04E8 0F94 0590             		dc.w $4E8, $F94, $590
0001A4CA 0004 1294 0490             @type05:	dc.w 4,	$1294, $490
0001A4D0 001C 1594 FFE8             @type06:	dc.w $1C, $1594, $FFE8
0001A4D6 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
0001A4DC FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
0001A4E2 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
0001A4E8 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
0001A4EE 0004 0894 0090             @type07:	dc.w 4,	$894, $90
0001A4EE 0004 0894 0090             @type07:	dc.w 4,	$894, $90
0001A4F4                            
0001A4F4                            		include	"_incObj\78 Caterkiller.asm"
0001A4F4                            ; ---------------------------------------------------------------------------
0001A4F4                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
0001A4F4                            ; ---------------------------------------------------------------------------
0001A4F4                            
0001A4F4                            Caterkiller:
0001A4F4 7000                       		moveq	#0,d0
0001A4F6 1028 0024                  		move.b	obRoutine(a0),d0
0001A4FA 323B 0000                  		move.w	Cat_Index(pc,d0.w),d1
0001A4FE 4EFB 1000                  		jmp	Cat_Index(pc,d1.w)
0001A502                            ; ===========================================================================
0001A502 0000                       Cat_Index:	dc.w Cat_Main-Cat_Index
0001A504 0000                       		dc.w Cat_Head-Cat_Index
0001A506 0000                       		dc.w Cat_BodySeg1-Cat_Index
0001A508 0000                       		dc.w Cat_BodySeg2-Cat_Index
0001A50A 0000                       		dc.w Cat_BodySeg1-Cat_Index
0001A50C 0000                       		dc.w Cat_Delete-Cat_Index
0001A50E 0000                       		dc.w loc_16CC0-Cat_Index
0001A510                            
0001A510 =0000003C                  cat_parent:	equ $3C		; address of parent object
0001A510                            ; ===========================================================================
0001A510                            
0001A510                            locret_16950:
0001A510 4E75                       		rts	
0001A512                            ; ===========================================================================
0001A512                            
0001A512                            Cat_Main:	; Routine 0
0001A512 117C 0007 0016             		move.b	#7,obHeight(a0)
0001A518 117C 0008 0017             		move.b	#8,obWidth(a0)
0001A51E 4EB9 0000 F77E             		jsr	(ObjectFall).l
0001A524 4EB9 0001 898E             		jsr	(ObjFloorDist).l
0001A52A 4A41                       		tst.w	d1
0001A52C 6AE2                       		bpl.s	locret_16950
0001A52E D368 000C                  		add.w	d1,obY(a0)
0001A532 4268 0012                  		clr.w	obVelY(a0)
0001A536 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A53A 217C 0000 0000 0004        		move.l	#Map_Cat,obMap(a0)
0001A542 317C 22B0 0002             		move.w	#$22B0,obGfx(a0)
0001A548 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; if level is SBZ, branch
0001A54E 6700                       		beq.s	@isscrapbrain
0001A550 317C 24FF 0002             		move.w	#$24FF,obGfx(a0) ; MZ specific code
0001A556                            
0001A556                            	@isscrapbrain:
0001A556 0228 0003 0001             		andi.b	#3,obRender(a0)
0001A55C 0028 0004 0001             		ori.b	#4,obRender(a0)
0001A562 1168 0001 0022             		move.b	obRender(a0),obStatus(a0)
0001A568 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001A56E 117C 0008 0014             		move.b	#8,obActWid(a0)
0001A574 117C 000B 0020             		move.b	#$B,obColType(a0)
0001A57A 3428 0008                  		move.w	obX(a0),d2
0001A57E 7A0C                       		moveq	#$C,d5
0001A580 0828 0000 0022             		btst	#0,obStatus(a0)
0001A586 6700                       		beq.s	@noflip
0001A588 4445                       		neg.w	d5
0001A58A                            
0001A58A                            	@noflip:
0001A58A 1C3C 0004                  		move.b	#4,d6
0001A58E 7600                       		moveq	#0,d3
0001A590 7804                       		moveq	#4,d4
0001A592 2448                       		movea.l	a0,a2
0001A594 7202                       		moveq	#2,d1
0001A596                            
0001A596                            Cat_Loop:
0001A596 4EB9 0000 FD7A             		jsr	(FindNextFreeObj).l
0001A59C 6600 0000                  			bne.w	Cat_ChkGone
0001A5A0 12BC 0078                  		move.b	#id_Caterkiller,0(a1) ; load body segment object
0001A5A4 1346 0024                  		move.b	d6,obRoutine(a1) ; goto Cat_BodySeg1 or Cat_BodySeg2 next
0001A5A8 5406                       		addq.b	#2,d6		; alternate between the two
0001A5AA 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
0001A5B0 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0001A5B6 337C 0280 0018             		move.w	#$280,obPriority(a1)
0001A5BC 137C 0008 0014             		move.b	#8,obActWid(a1)
0001A5C2 137C 00CB 0020             		move.b	#$CB,obColType(a1)
0001A5C8 D445                       		add.w	d5,d2
0001A5CA 3342 0008                  		move.w	d2,obX(a1)
0001A5CE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A5D4 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0001A5DA 1368 0022 0001             		move.b	obStatus(a0),obRender(a1)
0001A5E0 137C 0008 001A             		move.b	#8,obFrame(a1)
0001A5E6 234A 003C                  		move.l	a2,cat_parent(a1)
0001A5EA 1344 003C                  		move.b	d4,cat_parent(a1)
0001A5EE 5804                       		addq.b	#4,d4
0001A5F0 2449                       		movea.l	a1,a2
0001A5F2                            
0001A5F2                            	@fail:
0001A5F2 51C9 FFA2                  		dbf	d1,Cat_Loop	; repeat sequence 2 more times
0001A5F6                            
0001A5F6 117C 0007 002A             		move.b	#7,$2A(a0)
0001A5FC 4228 003C                  		clr.b	cat_parent(a0)
0001A600                            
0001A600                            Cat_Head:	; Routine 2
0001A600 4A28 0022                  		tst.b	obStatus(a0)
0001A604 6B00 0000                  		bmi.w	loc_16C96
0001A608 7000                       		moveq	#0,d0
0001A60A 1028 0025                  		move.b	ob2ndRout(a0),d0
0001A60E 323B 0000                  		move.w	Cat_Index2(pc,d0.w),d1
0001A612 4EBB 1000                  		jsr	Cat_Index2(pc,d1.w)
0001A616 1228 002B                  		move.b	$2B(a0),d1
0001A61A 6A00                       		bpl.s	@display
0001A61C 43F9 0000 0000             		lea	(Ani_Cat).l,a1
0001A622 1028 0026                  		move.b	obAngle(a0),d0
0001A626 0240 007F                  		andi.w	#$7F,d0
0001A62A 5828 0026                  		addq.b	#4,obAngle(a0)
0001A62E 1031 0000                  		move.b	(a1,d0.w),d0
0001A632 6A00                       		bpl.s	@animate
0001A634 08A8 0007 002B             		bclr	#7,$2B(a0)
0001A63A 6000                       		bra.s	@display
0001A63C                            
0001A63C                            	@animate:
0001A63C 0201 0010                  		andi.b	#$10,d1
0001A640 D001                       		add.b	d1,d0
0001A642 1140 001A                  		move.b	d0,obFrame(a0)
0001A646                            
0001A646                            	@display:
0001A664 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001A66A                            
0001A66A                            	Cat_ChkGone:
0001A66A 45F8 FC00                  		lea	(v_objstate).w,a2
0001A66E 7000                       		moveq	#0,d0
0001A670 1028 0023                  		move.b	obRespawnNo(a0),d0
0001A674 6700                       		beq.s	@delete
0001A676 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001A67C                            
0001A67C                            	@delete:
0001A67C 117C 000A 0024             		move.b	#$A,obRoutine(a0)	; goto Cat_Delete next
0001A682 4E75                       		rts	
0001A684                            ; ===========================================================================
0001A684                            
0001A684                            Cat_Delete:	; Routine $A
0001A684 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001A68A                            ; ===========================================================================
0001A68A 0000                       Cat_Index2:	dc.w @wait-Cat_Index2
0001A68C 0000                       		dc.w loc_16B02-Cat_Index2
0001A68E                            ; ===========================================================================
0001A68E                            
0001A68E                            @wait:
0001A68E 5328 002A                  		subq.b	#1,$2A(a0)
0001A692 6B00                       		bmi.s	@move
0001A694 4E75                       		rts	
0001A696                            ; ===========================================================================
0001A696                            
0001A696                            @move:
0001A696 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A69A 117C 0010 002A             		move.b	#$10,$2A(a0)
0001A6A0 317C FF40 0010             		move.w	#-$C0,obVelX(a0)
0001A6A6 317C 0040 001C             		move.w	#$40,obAnim(a0)
0001A6AC 0868 0004 002B             		bchg	#4,$2B(a0)
0001A6B2 6600                       		bne.s	loc_16AFC
0001A6B4 4268 0010                  		clr.w	obVelX(a0)
0001A6B8 4468 001C                  		neg.w	obAnim(a0)
0001A6BC                            
0001A6BC                            loc_16AFC:
0001A6BC 08E8 0007 002B             		bset	#7,$2B(a0)
0001A6C2                            
0001A6C2                            loc_16B02:
0001A6C2 5328 002A                  		subq.b	#1,$2A(a0)
0001A6C6 6B00                       		bmi.s	@loc_16B5E
0001A6C8 4A68 0010                  			tst.w	obVelX(a0)
0001A6CC 6700                       			beq.s	@notmoving
0001A6CE 2428 0008                  			move.l	obX(a0),d2
0001A6D2 2602                       			move.l	d2,d3
0001A6D4 3028 0010                  		move.w	obVelX(a0),d0
0001A6D8 0828 0000 0022             		btst	#0,obStatus(a0)
0001A6DE 6700                       		beq.s	@noflip
0001A6E0 4440                       		neg.w	d0
0001A6E2                            
0001A6E2                            	@noflip:
0001A6E2 48C0                       		ext.l	d0
0001A6E4 E180                       		asl.l	#8,d0
0001A6E6 D480                       		add.l	d0,d2
0001A6E8 2142 0008                  		move.l	d2,obX(a0)
0001A6EC 4843                       			swap	d3
0001A6EE B668 0008                  			cmp.w	obX(a0),d3
0001A6F2 6700                       			beq.s	@notmoving
0001A6F4 4EB9 0001 898E             			jsr	(ObjFloorDist).l
0001A6FA 0C41 FFF8                  			cmpi.w	#-8,d1
0001A6FE 6D00                       			blt.s	@loc_16B70
0001A700 0C41 000C                  			cmpi.w	#$C,d1
0001A704 6C00                       			bge.s	@loc_16B70
0001A706 D368 000C                  			add.w	d1,obY(a0)
0001A70A 7000                       		moveq	#0,d0
0001A70C 1028 003C                  		move.b	cat_parent(a0),d0
0001A710 5228 003C                  		addq.b	#1,cat_parent(a0)
0001A714 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
0001A71A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001A71E                            
0001A71E                            	@notmoving:
0001A71E 4E75                       		rts	
0001A720                            ; ===========================================================================
0001A720                            
0001A720                            @loc_16B5E:
0001A720 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001A724 117C 0007 002A             		move.b	#7,$2A(a0)
0001A72A 4268 0010                  			clr.w	obVelX(a0)
0001A72E 4268 001C                  			clr.w	obAnim(a0)
0001A732 4E75                       		rts	
0001A734                            ; ===========================================================================
0001A734                            
0001A734                            @loc_16B70:
0001A734 7000                       			moveq	#0,d0
0001A736 1028 003C                  			move.b	cat_parent(a0),d0
0001A73A 11BC 0080 002C             			move.b	#$80,$2C(a0,d0)
0001A740 4468 000A                  			neg.w	obX+2(a0)
0001A744 6700                       			beq.s	@loc_1730A
0001A746 0828 0000 0022             			btst	#0,obStatus(a0)
0001A74C 6700                       			beq.s	@loc_1730A
0001A74E 5368 0008                  			subq.w	#1,obX(a0)
0001A752 5228 003C                  			addq.b	#1,cat_parent(a0)
0001A756 7000                       			moveq	#0,d0
0001A758 1028 003C                  			move.b	cat_parent(a0),d0
0001A75C 4230 002C                  			clr.b	$2C(a0,d0)
0001A760                            	@loc_1730A:
0001A760 0868 0000 0022             			bchg	#0,obStatus(a0)
0001A766 1168 0022 0001             			move.b	obStatus(a0),obRender(a0)
0001A76C 5228 003C                  		addq.b	#1,cat_parent(a0)
0001A770 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
0001A776 4E75                       		rts	
0001A778                            ; ===========================================================================
0001A778                            
0001A778                            Cat_BodySeg2:	; Routine 6
0001A778 2268 003C                  		movea.l	cat_parent(a0),a1
0001A77C 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001A782 6A00                       		bpl.s	Cat_BodySeg1
0001A784 43F9 0000 0000             		lea	(Ani_Cat).l,a1
0001A78A 1028 0026                  		move.b	obAngle(a0),d0
0001A78E 0240 007F                  		andi.w	#$7F,d0
0001A792 5828 0026                  		addq.b	#4,obAngle(a0)
0001A796 4A31 0004                  		tst.b	4(a1,d0.w)
0001A79A 6A00                       		bpl.s	Cat_AniBody
0001A79C 5828 0026                  		addq.b	#4,obAngle(a0)
0001A7A0                            
0001A7A0                            Cat_AniBody:
0001A7A0 1031 0000                  		move.b	(a1,d0.w),d0
0001A7A4 5000                       		addq.b	#8,d0
0001A7A6 1140 001A                  		move.b	d0,obFrame(a0)
0001A7AA                            
0001A7AA                            Cat_BodySeg1:	; Routine 4, 8
0001A7AA 2268 003C                  		movea.l	cat_parent(a0),a1
0001A7AE 4A28 0022                  		tst.b	obStatus(a0)
0001A7B2 6B00 0000                  		bmi.w	loc_16C90
0001A7B6 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001A7BC 1169 0025 0025             		move.b	ob2ndRout(a1),ob2ndRout(a0)
0001A7C2 6700 0000                  		beq.w	loc_16C64
0001A7C6 3169 001C 001C             		move.w	obAnim(a1),obAnim(a0)
0001A7CC 3029 0010                  		move.w	obVelX(a1),d0
0001A7D0 D068 001C                  			add.w	obAnim(a0),d0
0001A7D4 3140 0010                  		move.w	d0,obVelX(a0)
0001A7D8 2428 0008                  		move.l	obX(a0),d2
0001A7DC 2602                       		move.l	d2,d3
0001A7DE 3028 0010                  		move.w	obVelX(a0),d0
0001A7E2 0828 0000 0022             		btst	#0,obStatus(a0)
0001A7E8 6700                       		beq.s	loc_16C0C
0001A7EA 4440                       		neg.w	d0
0001A7EC                            
0001A7EC                            loc_16C0C:
0001A7EC 48C0                       		ext.l	d0
0001A7EE E180                       		asl.l	#8,d0
0001A7F0 D480                       		add.l	d0,d2
0001A7F2 2142 0008                  		move.l	d2,obX(a0)
0001A7F6 4843                       		swap	d3
0001A7F8 B668 0008                  		cmp.w	obX(a0),d3
0001A7FC 6700                       		beq.s	loc_16C64
0001A7FE 7000                       		moveq	#0,d0
0001A800 1028 003C                  		move.b	cat_parent(a0),d0
0001A804 1231 002C                  		move.b	$2C(a1,d0.w),d1
0001A808 0C01 0080                  		cmpi.b	#$80,d1
0001A80C 6600                       		bne.s	loc_16C50
0001A80E 1181 002C                  			move.b	d1,$2C(a0,d0)
0001A812 4468 000A                  			neg.w	obX+2(a0)
0001A816 6700                       			beq.s	locj_173E4
0001A818 0828 0000 0022             			btst	#0,obStatus(a0)
0001A81E 6700                       			beq.s	locj_173E4
0001A820 0C68 FF40 0010             			cmpi.w	#-$C0,obVelX(a0)
0001A826 6600                       			bne.s	locj_173E4
0001A828 5368 0008                  			subq.w	#1,obX(a0)
0001A82C 5228 003C                  			addq.b	#1,cat_parent(a0)
0001A830 7000                       			moveq	#0,d0
0001A832 1028 003C                  			move.b	cat_parent(a0),d0
0001A836 4230 002C                  			clr.b	$2C(a0,d0)
0001A83A                            	locj_173E4:
0001A83A 0868 0000 0022             		bchg	#0,obStatus(a0)
0001A840 1168 0022 0001             		move.b	obStatus(a0),1(a0)
0001A846 5228 003C                  		addq.b	#1,cat_parent(a0)
0001A84A 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
0001A850 6000                       		bra.s	loc_16C64
0001A852                            ; ===========================================================================
0001A852                            
0001A852                            loc_16C50:
0001A852 4881                       		ext.w	d1
0001A854 D368 000C                  		add.w	d1,obY(a0)
0001A858 5228 003C                  		addq.b	#1,cat_parent(a0)
0001A85C 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
0001A862 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001A866                            
0001A866                            loc_16C64:
0001A866 0C29 000C 0024             		cmpi.b	#$C,obRoutine(a1)
0001A86C 6700                       		beq.s	loc_16C90
0001A86E 0C11 0027                  		cmpi.b	#id_ExplosionItem,0(a1)
0001A872 6700                       		beq.s	loc_16C7C
0001A874 0C29 000A 0024             		cmpi.b	#$A,obRoutine(a1)
0001A87A 6600                       		bne.s	loc_16C82
0001A87C                            
0001A87C                            loc_16C7C:
0001A87C 4229 0020                  		clr.b    $20(a1)
0001A880 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0001A886                            
0001A886                            loc_16C82:
0001A886 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001A88C                            
0001A88C                            ; ===========================================================================
0001A88C FE00 FE80 0180 0200        Cat_FragSpeed:	dc.w -$200, -$180, $180, $200
0001A894                            ; ===========================================================================
0001A894                            
0001A894                            loc_16C90:
0001A894 08E9 0007 0022             		bset	#7,obStatus(a1)
0001A89A                            
0001A89A                            loc_16C96:
0001A89A 7000                       		moveq	#0,d0
0001A89C 1028 0024                  		move.b	obRoutine(a0),d0
0001A8A0 303B 00E8                  		move.w	Cat_FragSpeed-2(pc,d0.w),d0
0001A8A4 0828 0000 0022             		btst	#0,obStatus(a0)
0001A8AA 6700                       		beq.s	loc_16CAA
0001A8AC 4440                       		neg.w	d0
0001A8AE                            
0001A8AE                            loc_16CAA:
0001A8AE 3140 0010                  		move.w	d0,obVelX(a0)
0001A8B2 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0001A8B8 117C 000C 0024             		move.b	#$C,obRoutine(a0)
0001A8BE 0228 00F8 001A             		andi.b	#$F8,obFrame(a0)
0001A8C4                            
0001A8C4                            loc_16CC0:	; Routine $C
0001A8C4 4EB9 0000 F77E             		jsr	(ObjectFall).l
0001A8CA 4A68 0012                  		tst.w	obVelY(a0)
0001A8CE 6B00                       		bmi.s	loc_16CE0
0001A8D0 4EB9 0001 898E             		jsr	(ObjFloorDist).l
0001A8D6 4A41                       		tst.w	d1
0001A8D8 6A00                       		bpl.s	loc_16CE0
0001A8DA D368 000C                  		add.w	d1,obY(a0)
0001A8DE 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0001A8E4                            
0001A8E4                            loc_16CE0:
0001A8E4 4A28 0001                  		tst.b	obRender(a0)
0001A8E8 6A00 FD80                  		bpl.w	Cat_ChkGone
0001A8EC 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001A8EC 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001A8F2                            		include	"_anim\Caterkiller.asm"
0001A8F2                            ; ---------------------------------------------------------------------------
0001A8F2                            ; Animation script - Caterkiller enemy (uses non-standard format)
0001A8F2                            ; ---------------------------------------------------------------------------
0001A8F2 0000 0000 0000 0000 0000+  Ani_Cat:	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
0001A902 0101 0101 0101 0202 0202+  		dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
0001A912 0404 0404 0404 0505 0505+  		dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
0001A922 0606 0707 0707 0707 0707+  		dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
0001A932 0707 0707 0707 0707 0707+  		dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
0001A942 0606 0606 0606 0505 0505+  		dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
0001A952 0403 0303 0303 0202 0202+  		dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
0001A962 0101 0000 0000 0000 0000+  		dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
0001A972                            		even
0001A972                            		even
0001A972                            Map_Cat:	include	"_maps\Caterkiller.asm"
0001A972                            ; ---------------------------------------------------------------------------
0001A972                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001A972                            ; ---------------------------------------------------------------------------
0001A972                            Map_Cat_internal:
0001A972 0000                       		dc.w byte_16D9E-Map_Cat_internal
0001A974 0000                       		dc.w byte_16DA4-Map_Cat_internal
0001A976 0000                       		dc.w byte_16DAA-Map_Cat_internal
0001A978 0000                       		dc.w byte_16DB0-Map_Cat_internal
0001A97A 0000                       		dc.w byte_16DB6-Map_Cat_internal
0001A97C 0000                       		dc.w byte_16DBC-Map_Cat_internal
0001A97E 0000                       		dc.w byte_16DC2-Map_Cat_internal
0001A980 0000                       		dc.w byte_16DC8-Map_Cat_internal
0001A982 0000                       		dc.w byte_16DCE-Map_Cat_internal
0001A984 0000                       		dc.w byte_16DD4-Map_Cat_internal
0001A986 0000                       		dc.w byte_16DDA-Map_Cat_internal
0001A988 0000                       		dc.w byte_16DE0-Map_Cat_internal
0001A98A 0000                       		dc.w byte_16DE6-Map_Cat_internal
0001A98C 0000                       		dc.w byte_16DEC-Map_Cat_internal
0001A98E 0000                       		dc.w byte_16DF2-Map_Cat_internal
0001A990 0000                       		dc.w byte_16DF8-Map_Cat_internal
0001A992 0000                       		dc.w byte_16DFE-Map_Cat_internal
0001A994 0000                       		dc.w byte_16E04-Map_Cat_internal
0001A996 0000                       		dc.w byte_16E0A-Map_Cat_internal
0001A998 0000                       		dc.w byte_16E10-Map_Cat_internal
0001A99A 0000                       		dc.w byte_16E16-Map_Cat_internal
0001A99C 0000                       		dc.w byte_16E1C-Map_Cat_internal
0001A99E 0000                       		dc.w byte_16E22-Map_Cat_internal
0001A9A0 0000                       		dc.w byte_16E28-Map_Cat_internal
0001A9A2 01                         byte_16D9E:	dc.b 1
0001A9A3 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
0001A9A8 01                         byte_16DA4:	dc.b 1
0001A9A9 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
0001A9AE 01                         byte_16DAA:	dc.b 1
0001A9AF F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
0001A9B4 01                         byte_16DB0:	dc.b 1
0001A9B5 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
0001A9BA 01                         byte_16DB6:	dc.b 1
0001A9BB EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
0001A9C0 01                         byte_16DBC:	dc.b 1
0001A9C1 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
0001A9C6 01                         byte_16DC2:	dc.b 1
0001A9C7 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
0001A9CC 01                         byte_16DC8:	dc.b 1
0001A9CD EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
0001A9D2 01                         byte_16DCE:	dc.b 1
0001A9D3 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001A9D8 01                         byte_16DD4:	dc.b 1
0001A9D9 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
0001A9DE 01                         byte_16DDA:	dc.b 1
0001A9DF F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
0001A9E4 01                         byte_16DE0:	dc.b 1
0001A9E5 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
0001A9EA 01                         byte_16DE6:	dc.b 1
0001A9EB F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
0001A9F0 01                         byte_16DEC:	dc.b 1
0001A9F1 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
0001A9F6 01                         byte_16DF2:	dc.b 1
0001A9F7 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
0001A9FC 01                         byte_16DF8:	dc.b 1
0001A9FD F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
0001AA02 01                         byte_16DFE:	dc.b 1
0001AA03 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
0001AA08 01                         byte_16E04:	dc.b 1
0001AA09 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
0001AA0E 01                         byte_16E0A:	dc.b 1
0001AA0F F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
0001AA14 01                         byte_16E10:	dc.b 1
0001AA15 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
0001AA1A 01                         byte_16E16:	dc.b 1
0001AA1B EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
0001AA20 01                         byte_16E1C:	dc.b 1
0001AA21 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
0001AA26 01                         byte_16E22:	dc.b 1
0001AA27 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
0001AA2C 01                         byte_16E28:	dc.b 1
0001AA2D EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
0001AA32                            		even
0001AA32                            		even
0001AA32                            
0001AA32                            		include	"_incObj\79 Lamppost.asm"
0001AA32                            ; ---------------------------------------------------------------------------
0001AA32                            ; Object 79 - lamppost
0001AA32                            ; ---------------------------------------------------------------------------
0001AA32                            
0001AA32                            Lamppost:
0001AA32 7000                       		moveq	#0,d0
0001AA34 1028 0024                  		move.b	obRoutine(a0),d0
0001AA38 323B 0000                  		move.w	Lamp_Index(pc,d0.w),d1
0001AA3C 4EBB 1000                  		jsr	Lamp_Index(pc,d1.w)
0001AA40 4EF9 0001 187E             		jmp	(RememberState).l
0001AA46                            ; ===========================================================================
0001AA46 0000                       Lamp_Index:	dc.w Lamp_Main-Lamp_Index
0001AA48 0000                       		dc.w Lamp_Blue-Lamp_Index
0001AA4A 0000                       		dc.w Lamp_Finish-Lamp_Index
0001AA4C 0000                       		dc.w Lamp_Twirl-Lamp_Index
0001AA4E                            
0001AA4E =00000030                  lamp_origX:	equ $30		; original x-axis position
0001AA4E =00000032                  lamp_origY:	equ $32		; original y-axis position
0001AA4E =00000036                  lamp_time:	equ $36		; length of time to twirl the lamp
0001AA4E                            ; ===========================================================================
0001AA4E                            
0001AA4E                            Lamp_Main:	; Routine 0
0001AA4E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AA52 217C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a0)
0001AA5A 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
0001AA60 117C 0004 0001             		move.b	#4,obRender(a0)
0001AA66 117C 0008 0014             		move.b	#8,obActWid(a0)
0001AA6C 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001AA72 45F8 FC00                  		lea	(v_objstate).w,a2
0001AA76 7000                       		moveq	#0,d0
0001AA78 1028 0023                  		move.b	obRespawnNo(a0),d0
0001AA7C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001AA82 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001AA88 6600                       		bne.s	@red
0001AA8A 1238 FE30                  		move.b	(v_lastlamp).w,d1
0001AA8E 0201 007F                  		andi.b	#$7F,d1
0001AA92 1428 0028                  		move.b	obSubtype(a0),d2 ; get lamppost number
0001AA96 0202 007F                  		andi.b	#$7F,d2
0001AA9A B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
0001AA9C 6500                       		bcs.s	Lamp_Blue	; if yes, branch
0001AA9E                            
0001AA9E                            @red:
0001AA9E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001AAA4 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
0001AAAA 117C 0003 001A             		move.b	#3,obFrame(a0)
0001AAB0 4E75                       		rts	
0001AAB2                            
0001AAB2                            ; ===========================================================================
0001AAB2                            
0001AAB2                            Lamp_Blue:	; Routine 2
0001AAB2 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001AAB6 6600 0000                  		bne.w	@donothing	; if yes, branch
0001AABA 4A38 F7C8                  		tst.b	(f_lockmulti).w
0001AABE 6B00 0000                  		bmi.w	@donothing
0001AAC2 1238 FE30                  		move.b	(v_lastlamp).w,d1
0001AAC6 0201 007F                  		andi.b	#$7F,d1
0001AACA 1428 0028                  		move.b	obSubtype(a0),d2
0001AACE 0202 007F                  		andi.b	#$7F,d2
0001AAD2 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
0001AAD4 6500                       		bcs.s	@chkhit		; if yes, branch
0001AAD6 45F8 FC00                  		lea	(v_objstate).w,a2
0001AADA 7000                       		moveq	#0,d0
0001AADC 1028 0023                  		move.b	obRespawnNo(a0),d0
0001AAE0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001AAE6 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001AAEC 117C 0003 001A             		move.b	#3,obFrame(a0)
0001AAF2 6000 0000                  		bra.w	@donothing
0001AAF6                            ; ===========================================================================
0001AAF6                            
0001AAF6                            @chkhit:
0001AAF6 3038 D008                  		move.w	(v_player+obX).w,d0
0001AAFA 9068 0008                  		sub.w	obX(a0),d0
0001AAFE 5040                       		addq.w	#8,d0
0001AB00 0C40 0010                  		cmpi.w	#$10,d0
0001AB04 6400 0000                  		bcc.w	@donothing
0001AB08 3038 D00C                  		move.w	(v_player+obY).w,d0
0001AB0C 9068 000C                  		sub.w	obY(a0),d0
0001AB10 0640 0040                  		addi.w	#$40,d0
0001AB14 0C40 0068                  		cmpi.w	#$68,d0
0001AB18 6400                       		bcc.s	@donothing
0001AB1A                            
0001AB24 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AB28 4EB9 0000 FD64             		jsr	(FindFreeObj).l
0001AB2E 6600                       		bne.s	@fail
0001AB30 12BC 0079                  		move.b	#id_Lamppost,0(a1)	; load twirling	lamp object
0001AB34 137C 0006 0024             		move.b	#6,obRoutine(a1) ; goto Lamp_Twirl next
0001AB3A 3368 0008 0030             		move.w	obX(a0),lamp_origX(a1)
0001AB40 3368 000C 0032             		move.w	obY(a0),lamp_origY(a1)
0001AB46 0469 0018 0032             		subi.w	#$18,lamp_origY(a1)
0001AB4C 237C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a1)
0001AB54 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
0001AB5A 137C 0004 0001             		move.b	#4,obRender(a1)
0001AB60 137C 0008 0014             		move.b	#8,obActWid(a1)
0001AB66 337C 0200 0018             		move.w	#$200,obPriority(a1)
0001AB6C 137C 0002 001A             		move.b	#2,obFrame(a1)	; use "ball only" frame
0001AB72 337C 0020 0036             		move.w	#$20,lamp_time(a1)
0001AB78                            
0001AB78                            	@fail:
0001AB78 117C 0001 001A             		move.b	#1,obFrame(a0)	; use "post only" frame
0001AB7E 6100 0000                  		bsr.w	Lamp_StoreInfo
0001AB82 45F8 FC00                  		lea	(v_objstate).w,a2
0001AB86 7000                       		moveq	#0,d0
0001AB88 1028 0023                  		move.b	obRespawnNo(a0),d0
0001AB8C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001AB92                            
0001AB92                            	@donothing:
0001AB92 4E75                       		rts	
0001AB94                            ; ===========================================================================
0001AB94                            
0001AB94                            Lamp_Finish:	; Routine 4	
0001AB94 4E75                       		rts	
0001AB96                            ; ===========================================================================
0001AB96                            
0001AB96                            Lamp_Twirl:	; Routine 6
0001AB96 5368 0036                  		subq.w	#1,lamp_time(a0) ; decrement timer
0001AB9A 6A00                       		bpl.s	@continue	; if time remains, keep twirling
0001AB9C 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
0001ABA2                            
0001ABA2                            	@continue:
0001ABA2 1028 0026                  		move.b	obAngle(a0),d0
0001ABA6 0428 0010 0026             		subi.b	#$10,obAngle(a0)
0001ABAC 0400 0040                  		subi.b	#$40,d0
0001ABB0 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001ABB6 C3FC 0C00                  		muls.w	#$C00,d1
0001ABBA 4841                       		swap	d1
0001ABBC D268 0030                  		add.w	lamp_origX(a0),d1
0001ABC0 3141 0008                  		move.w	d1,obX(a0)
0001ABC4 C1FC 0C00                  		muls.w	#$C00,d0
0001ABC8 4840                       		swap	d0
0001ABCA D068 0032                  		add.w	lamp_origY(a0),d0
0001ABCE 3140 000C                  		move.w	d0,obY(a0)
0001ABD2 4E75                       		rts	
0001ABD4                            ; ===========================================================================
0001ABD4                            ; ---------------------------------------------------------------------------
0001ABD4                            ; Subroutine to	store information when you hit a lamppost
0001ABD4                            ; ---------------------------------------------------------------------------
0001ABD4                            
0001ABD4                            Lamp_StoreInfo:
0001ABD4 11E8 0028 FE30             		move.b	obSubtype(a0),(v_lastlamp).w 	; lamppost number
0001ABDA 11F8 FE30 FE31             		move.b	(v_lastlamp).w,($FFFFFE31).w
0001ABE0 31E8 0008 FE32             		move.w	obX(a0),($FFFFFE32).w		; x-position
0001ABE6 31E8 000C FE34             		move.w	obY(a0),($FFFFFE34).w		; y-position
0001ABEC 31F8 FE20 FE36             		move.w	(v_rings).w,($FFFFFE36).w 	; rings
0001ABF2 11F8 FE1B FE54             		move.b	(v_lifecount).w,($FFFFFE54).w 	; lives
0001ABF8 21F8 FE22 FE38             		move.l	(v_time).w,($FFFFFE38).w 	; time
0001ABFE 11F8 F742 FE3C             		move.b	(v_dle_routine).w,($FFFFFE3C).w ; routine counter for dynamic level mod
0001AC04 31F8 F72E FE3E             		move.w	(v_limitbtm2).w,($FFFFFE3E).w 	; lower y-boundary of level
0001AC0A 31F8 F700 FE40             		move.w	(v_screenposx).w,($FFFFFE40).w 	; screen x-position
0001AC10 31F8 F704 FE42             		move.w	(v_screenposy).w,($FFFFFE42).w 	; screen y-position
0001AC16 31F8 F708 FE44             		move.w	(v_bgscreenposx).w,($FFFFFE44).w ; bg position
0001AC1C 31F8 F70C FE46             		move.w	(v_bgscreenposy).w,($FFFFFE46).w 	; bg position
0001AC22 31F8 F710 FE48             		move.w	(v_bg2screenposx).w,($FFFFFE48).w 	; bg position
0001AC28 31F8 F714 FE4A             		move.w	(v_bg2screenposy).w,($FFFFFE4A).w 	; bg position
0001AC2E 31F8 F718 FE4C             		move.w	(v_bg3screenposx).w,($FFFFFE4C).w 	; bg position
0001AC34 31F8 F71C FE4E             		move.w	(v_bg3screenposy).w,($FFFFFE4E).w 	; bg position
0001AC3A 31F8 F648 FE50             		move.w	(v_waterpos2).w,($FFFFFE50).w 	; water height
0001AC40 11F8 F64D FE52             		move.b	(v_wtr_routine).w,($FFFFFE52).w ; rountine counter for water
0001AC46 11F8 F64E FE53             		move.b	(f_wtr_state).w,($FFFFFE53).w 	; water direction
0001AC4C 11F8 F5C3 FE54             		move.b	(f_emeraldm).w,($FFFFFE54).w 	; emerald monitor
0001AC52 11F8 F5C4 FF96             		move.b	(v_tagwater).w,(v_tagwaterlamp).w ; water switcher state TIS
0001AC58 11F8 FF92 FF94             		move.b	(v_watersplashpos).w,(v_watersplashposlamp).w ; water splash y-pos TIS
0001AC5E 4E75                       		rts	
0001AC60                            
0001AC60                            ; ---------------------------------------------------------------------------
0001AC60                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001AC60                            ; ---------------------------------------------------------------------------
0001AC60                            
0001AC60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AC60                            
0001AC60                            
0001AC60                            Lamp_LoadInfo:
0001AC60 11F8 FE31 FE30             		move.b	($FFFFFE31).w,(v_lastlamp).w
0001AC66 31F8 FE32 D008             		move.w	($FFFFFE32).w,(v_player+obX).w
0001AC6C 31F8 FE34 D00C             		move.w	($FFFFFE34).w,(v_player+obY).w
0001AC72 31F8 FE36 FE20             		move.w	($FFFFFE36).w,(v_rings).w
0001AC78 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,(v_lifecount).w
0001AC7E 4278 FE20                  		clr.w	(v_rings).w
0001AC82 4238 FE1B                  		clr.b	(v_lifecount).w
0001AC86 21F8 FE38 FE22             		move.l	($FFFFFE38).w,(v_time).w
0001AC8C 11FC 003B FE25             		move.b	#59,(v_timecent).w
0001AC92 5338 FE24                  		subq.b	#1,(v_timesec).w
0001AC96 11F8 FE3C F742             		move.b	($FFFFFE3C).w,(v_dle_routine).w
0001AC9C 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001ACA2 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,(v_limitbtm2).w
0001ACA8 31F8 FE3E F726             		move.w	($FFFFFE3E).w,(v_limitbtm1).w
0001ACAE 31F8 FE40 F700             		move.w	($FFFFFE40).w,(v_screenposx).w
0001ACB4 31F8 FE42 F704             		move.w	($FFFFFE42).w,(v_screenposy).w
0001ACBA 31F8 FE44 F708             		move.w	($FFFFFE44).w,(v_bgscreenposx).w
0001ACC0 31F8 FE46 F70C             		move.w	($FFFFFE46).w,(v_bgscreenposy).w
0001ACC6 31F8 FE48 F710             		move.w	($FFFFFE48).w,(v_bg2screenposx).w
0001ACCC 31F8 FE4A F714             		move.w	($FFFFFE4A).w,(v_bg2screenposy).w
0001ACD2 31F8 FE4C F718             		move.w	($FFFFFE4C).w,(v_bg3screenposx).w
0001ACD8 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,(v_bg3screenposy).w
0001ACDE 11F8 FF96 F5C4             		move.b	(v_tagwaterlamp).w,(v_tagwater).w ; water switcher state TIS
0001ACE4 11F8 FF94 FF92             		move.b	(v_watersplashposlamp).w,(v_watersplashpos).w ; water splash y-pos TIS
0001ACEA 11F8 FE54 F5C3             		move.b	($FFFFFE54).w,(f_emeraldm).w	;emerald monitor count
0001ACF0 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w	; is this Labyrinth Zone?
0001ACF6 6600                       		bne.s	@notlabyrinth	; if not, branch
0001ACF8                            
0001ACF8 31F8 FE50 F648             		move.w	($FFFFFE50).w,(v_waterpos2).w
0001ACFE 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001AD04 11F8 FE53 F64E             		move.b	($FFFFFE53).w,(f_wtr_state).w
0001AD0A                            
0001AD0A                            	@notlabyrinth:
0001AD0A 4A38 FE30                  		tst.b	(v_lastlamp).w
0001AD0E 6A00                       		bpl.s	locret_170F6
0001AD10 3038 FE32                  		move.w	($FFFFFE32).w,d0
0001AD14 0440 00A0                  		subi.w	#$A0,d0
0001AD18 31C0 F728                  		move.w	d0,(v_limitleft2).w
0001AD1C                            
0001AD1C                            locret_170F6:
0001AD1C 4E75                       		rts	
0001AD1C 4E75                       		rts	
0001AD1E                            Map_Lamp:	include	"_maps\Lamppost.asm"
0001AD1E                            ; --------------------------------------------------------------------------------
0001AD1E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001AD1E                            ; --------------------------------------------------------------------------------
0001AD1E                            
0001AD1E                            SME_JfaKr:	
0001AD1E 0000 0000                  		dc.w SME_JfaKr_A-SME_JfaKr, SME_JfaKr_3D-SME_JfaKr	
0001AD22 0000 0000                  		dc.w SME_JfaKr_66-SME_JfaKr, SME_JfaKr_71-SME_JfaKr	
0001AD26 0000                       		dc.w SME_JfaKr_A4-SME_JfaKr	
0001AD28 0A                         SME_JfaKr_A:	dc.b $A	
0001AD29 E401 0000 F8               		dc.b $E4, 1, 0, 0, $F8	
0001AD2E E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001AD33 D401 0006 F8               		dc.b $D4, 1, 0, 6, $F8	
0001AD38 D401 0806 00               		dc.b $D4, 1, 8, 6, 0	
0001AD3D F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001AD42 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001AD47 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001AD4C 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001AD51 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001AD56 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001AD5B 08                         SME_JfaKr_3D:	dc.b 8	
0001AD5C E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001AD61 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001AD66 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001AD6B F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001AD70 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001AD75 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001AD7A 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001AD7F 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001AD84 02                         SME_JfaKr_66:	dc.b 2	
0001AD85 F801 0008 F8               		dc.b $F8, 1, 0, 8, $F8	
0001AD8A F801 0808 00               		dc.b $F8, 1, 8, 8, 0	
0001AD8F 0A                         SME_JfaKr_71:	dc.b $A	
0001AD90 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001AD95 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001AD9A F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001AD9F F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001ADA4 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001ADA9 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001ADAE 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001ADB3 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001ADB8 D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001ADBD D401 0808 00               		dc.b $D4, 1, 8, 8, 0	
0001ADC2 0A                         SME_JfaKr_A4:	dc.b $A	
0001ADC3 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001ADC8 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001ADCD F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001ADD2 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001ADD7 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001ADDC 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001ADE1 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001ADE6 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001ADEB D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001ADF0 D401 2808 00               		dc.b $D4, 1, $28, 8, 0	
0001ADF6 00                         		even
0001ADF6 00                         		even
0001ADF6                            		include	"_incObj\7D Hidden Bonuses.asm"
0001ADF6                            ; ---------------------------------------------------------------------------
0001ADF6                            ; Object 7D - hidden points at the end of a level
0001ADF6                            ; ---------------------------------------------------------------------------
0001ADF6                            
0001ADF6                            HiddenBonus:
0001ADF6 7000                       		moveq	#0,d0
0001ADF8 1028 0024                  		move.b	obRoutine(a0),d0
0001ADFC 323B 0000                  		move.w	Bonus_Index(pc,d0.w),d1
0001AE00 4EFB 1000                  		jmp	Bonus_Index(pc,d1.w)
0001AE04                            ; ===========================================================================
0001AE04 0000                       Bonus_Index:	dc.w Bonus_Main-Bonus_Index
0001AE06 0000                       		dc.w Bonus_Display-Bonus_Index
0001AE08                            
0001AE08 =00000030                  bonus_timelen:	equ $30		; length of time to display bonus sprites
0001AE08                            ; ===========================================================================
0001AE08                            
0001AE08                            Bonus_Main:	; Routine 0
0001AE08 7410                       		moveq	#$10,d2
0001AE0A 3602                       		move.w	d2,d3
0001AE0C D643                       		add.w	d3,d3
0001AE0E 43F8 D000                  		lea	(v_player).w,a1
0001AE12 3029 0008                  		move.w	obX(a1),d0
0001AE16 9068 0008                  		sub.w	obX(a0),d0
0001AE1A D042                       		add.w	d2,d0
0001AE1C B043                       		cmp.w	d3,d0
0001AE1E 6400                       		bcc.s	bonu_chkdel
0001AE20 3229 000C                  		move.w	obY(a1),d1
0001AE24 9268 000C                  		sub.w	obY(a0),d1
0001AE28 D242                       		add.w	d2,d1
0001AE2A B243                       		cmp.w	d3,d1
0001AE2C 6400                       		bcc.s	bonu_chkdel
0001AE2E 4A78 FE08                  		tst.w	(v_debuguse).w
0001AE32 6600                       		bne.s	bonu_chkdel
0001AE34 4A38 F7CD                  		tst.b	(f_bigring).w
0001AE38 6600                       		bne.s	bonu_chkdel
0001AE3A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AE3E 217C 0000 0000 0004        		move.l	#Map_Bonus,obMap(a0)
0001AE46 317C 84B6 0002             		move.w	#$84B6,obGfx(a0)
0001AE4C 0028 0004 0001             		ori.b	#4,obRender(a0)
0001AE52 317C 0000 0018             		move.w	#0,obPriority(a0)
0001AE58 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001AE5E 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0001AE64 317C 0077 0030             		move.w	#119,bonus_timelen(a0) ; set display time to 2 seconds
0001AE74 7000                       		moveq	#0,d0
0001AE76 1028 0028                  		move.b	obSubtype(a0),d0
0001AE7A D040                       		add.w	d0,d0
0001AE7C 303B 0000                  		move.w	obj7d_points(pc,d0.w),d0 ; load bonus points array
0001AE80 4EB9 0000 0000             		jsr	(AddPoints).l
0001AE86                            
0001AE86                            bonu_chkdel:
0001AEA2 4E75                       		rts	
0001AEA4                            
0001AEA4                            	@delete:
0001AEA4 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001AEAA                            
0001AEAA                            ; ===========================================================================
0001AEAA 0000                       obj7d_points:	dc.w 0			; Bonus	points array
0001AEAC 03E8                       		dc.w 1000
0001AEAE 0064                       		dc.w 100
0001AEB0 000A                       		dc.w 10
0001AEB2                            ; ===========================================================================
0001AEB2                            
0001AEB2                            Bonus_Display:	; Routine 2
0001AEB2 5368 0030                  		subq.w	#1,bonus_timelen(a0) ; decrement display time
0001AEB6 6B00                       		bmi.s	Bonus_Display_Delete		; if time is zero, branch
0001AED4 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001AEDA                            
0001AEDA                            Bonus_Display_Delete:	
0001AEDA 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001AEDA 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001AEE0                            Map_Bonus:	include	"_maps\Hidden Bonuses.asm"
0001AEE0                            ; ---------------------------------------------------------------------------
0001AEE0                            ; Sprite mappings - hidden points at the end of	a level
0001AEE0                            ; ---------------------------------------------------------------------------
0001AEE0                            Map_Bonus_internal:
0001AEE0 0000                       		dc.w @blank-Map_Bonus_internal
0001AEE2 0000                       		dc.w @10000-Map_Bonus_internal
0001AEE4 0000                       		dc.w @1000-Map_Bonus_internal
0001AEE6 0000                       		dc.w @100-Map_Bonus_internal
0001AEE8 00                         @blank:		dc.b 0
0001AEE9 01                         @10000:		dc.b 1
0001AEEA F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001AEEF 01                         @1000:		dc.b 1
0001AEF0 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001AEF5 01                         @100:		dc.b 1
0001AEF6 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001AEFC 00                         		even
0001AEFC 00                         		even
0001AEFC                            
0001AEFC                            		include	"_incObj\8A Credits.asm"
0001AEFC                            ; ---------------------------------------------------------------------------
0001AEFC                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001AEFC                            ; ---------------------------------------------------------------------------
0001AEFC                            
0001AEFC                            CreditsText:
0001AEFC 7000                       		moveq	#0,d0
0001AEFE 1028 0024                  		move.b	obRoutine(a0),d0
0001AF02 323B 0000                  		move.w	Cred_Index(pc,d0.w),d1
0001AF06 4EFB 1000                  		jmp	Cred_Index(pc,d1.w)
0001AF0A                            ; ===========================================================================
0001AF0A 0000                       Cred_Index:	dc.w Cred_Main-Cred_Index
0001AF0C 0000                       		dc.w Cred_Display-Cred_Index
0001AF0E                            ; ===========================================================================
0001AF0E                            
0001AF0E                            Cred_Main:	; Routine 0
0001AF0E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AF12 317C 0120 0008             		move.w	#$120,obX(a0)
0001AF18 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0001AF1E 217C 0000 0000 0004        		move.l	#Map_Cred,obMap(a0)
0001AF26 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0001AF2C 3038 FFF4                  		move.w	(v_creditsnum).w,d0 ; load credits index number
0001AF30 1140 001A                  		move.b	d0,obFrame(a0)	; display appropriate sprite
0001AF34 117C 0000 0001             		move.b	#0,obRender(a0)
0001AF3A 317C 0000 0018             		move.w	#0,obPriority(a0)
0001AF40                            
0001AF40 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w ; is the mode #4 (title screen)?
0001AF46 6600                       		bne.s	Cred_Display	; if not, branch
0001AF48                            
0001AF48 317C 00A6 0002             		move.w	#$A6,obGfx(a0)
0001AF4E 117C 000A 001A             		move.b	#$A,obFrame(a0)	; display "SONIC TEAM PRESENTS"
0001AF54 4A38 FFE3                  		tst.b	(f_creditscheat).w ; is hidden credits cheat on?
0001AF58 6700                       		beq.s	Cred_Display	; if not, branch
0001AF5A 0C38 0072 F604             		cmpi.b	#btnABC+btnDn,(v_jpadhold1).w ; is A+B+C+Down being pressed? ($72)
0001AF60 6600                       		bne.s	Cred_Display	; if not, branch
0001AF62 31FC 0EEE FBC0             		move.w	#cWhite,(v_pal_dry_dup+$40).w ; 3rd palette, 1st entry = white
0001AF68 31FC 0880 FBC2             		move.w	#$880,(v_pal_dry_dup+$42).w ; 3rd palette, 2nd entry = cyan
0001AF6E 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001AF74                            ; ===========================================================================
0001AF74                            
0001AF74                            Cred_Display:	; Routine 2
0001AF74 4EF9 0000 F7CA             		jmp	DisplaySprite
0001AF74 4EF9 0000 F7CA             		jmp	DisplaySprite
0001AF7A                            Map_Cred:	include	"_maps\Credits.asm"
0001AF7A                            ; ---------------------------------------------------------------------------
0001AF7A                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001AF7A                            ; ---------------------------------------------------------------------------
0001AF7A                            Map_Cred_internal:
0001AF7A 0000                       		dc.w @staff-Map_Cred_internal
0001AF7C 0000                       		dc.w @gameplan-Map_Cred_internal
0001AF7E 0000                       		dc.w @program-Map_Cred_internal
0001AF80 0000                       		dc.w @character-Map_Cred_internal
0001AF82 0000                       		dc.w @design-Map_Cred_internal
0001AF84 0000                       		dc.w @soundproduce-Map_Cred_internal
0001AF86 0000                       		dc.w @soundprogram-Map_Cred_internal
0001AF88 0000                       		dc.w @thanks-Map_Cred_internal
0001AF8A 0000                       		dc.w @presentedby-Map_Cred_internal
0001AF8C 0000                       		dc.w @tryagain-Map_Cred_internal
0001AF8E 0000                       		dc.w @sonicteam-Map_Cred_internal
0001AF90 0E                         @staff:		dc.b $E			 ; SONIC TEAM STAFF
0001AF91 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
0001AF96 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
0001AF9B F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
0001AFA0 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
0001AFA5 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
0001AFAA F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
0001AFAF F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
0001AFB4 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001AFB9 F809 0008 08               		dc.b $F8, 9, 0,	8, 8
0001AFBE F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
0001AFC3 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
0001AFC8 F805 0004 48               		dc.b $F8, 5, 0,	4, $48
0001AFCD F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
0001AFD2 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
0001AFD7 0E                         @gameplan:	dc.b $E	;  GAME PLAN CAROL YAS | GAME PLAN SORRA    
0001AFD8 9005 0000 90               		dc.b $90, 5, 0, 0, $90		; G
0001AFDD 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
0001AFE2 9009 0008 B0               		dc.b $90, 9, 0, 8, $B0		; M
0001AFE7 9005 000E C4               		dc.b $90, 5, 0, $0E, $C4	; E
0001AFEC 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001AFF1 9005 0012 E4               		dc.b $90, 5, 0, $12, $E4	; P
0001AFF6 9005 0016 F4               		dc.b $90, 5, 0, $16, $F4	; L
0001AFFB 9005 0004 04               		dc.b $90, 5, 0, 4, $4		; A
0001B000 9005 001A 14               		dc.b $90, 5, 0, $1A, $14	; N
0001B005                            
0001B005 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001B00A B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001B00F B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001B014 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001B019 B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001B01E 1B                         @program:	dc.b $1B	;  CHARACTER DESIGN BIGISLAND | PROGRAM ANGELKOR INVISIBLE SUN  
0001B01F 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001B024 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001B029 9005 0026 B0               		dc.b $90, 5, 0, $26, $B0	; O
0001B02E 9005 0000 C0               		dc.b $90, 5, 0, 0, $C0		; G
0001B033 9005 0022 D0               		dc.b $90, 5, 0, $22, $D0	; R
0001B038 9005 0004 E0               		dc.b $90, 5, 0, 4, $E0		; A
0001B03D 9009 0008 F0               		dc.b $90, 9, 0, 8, $F0		; M
0001B042                            
0001B042 B805 0004 C0               		dc.b $B8, 5, 0, 4, $C0		; A
0001B047 B805 001A D0               		dc.b $B8, 5, 0, $1A, $D0	; N
0001B04C B805 0000 E0               		dc.b $B8, 5, 0, 0, $E0		; G
0001B051 B805 000E F0               		dc.b $B8, 5, 0, $0E, $F0	; E
0001B056 B805 0016 00               		dc.b $B8, 5, 0, $16, $0	; L
0001B05B B805 0058 10               		dc.b $B8, 5, 0, $58, $10	; K
0001B060 B805 0026 20               		dc.b $B8, 5, 0, $26, $20	; O
0001B065 B805 0022 30               		dc.b $B8, 5, 0, $22, $30	; R
0001B06A                            
0001B06A D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	; I
0001B06F D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	; N
0001B074                            
0001B074 D801 0046 E8               		dc.b $D8, 1, 0, $46, $E8	; I
0001B079 D805 002E F0               		dc.b $D8, 5, 0, $2E, $F0	; S
0001B07E D801 0046 00               		dc.b $D8, 1, 0, $46, $0	; I
0001B083 D805 0048 08               		dc.b $D8, 5, 0, $48, $8	; B
0001B088 D805 0016 18               		dc.b $D8, 5, 0, $16, $18	; L
0001B08D D805 000E 28               		dc.b $D8, 5, 0, $0E, $28	; E
0001B092                            
0001B092 F805 002E C0               		dc.b $F8, 5, 0, $2E, $C0	; S
0001B097 F805 0032 D0               		dc.b $F8, 5, 0, $32, $D0	; U
0001B09C F805 001A E0               		dc.b $F8, 5, 0, $1A, $E0	; N
0001B0A1 08                         @character:	dc.b $8	;  CHARACTER DESIGN BIGISLAND | ART SORRA    
0001B0A2 9005 0004 90               		dc.b $90, 5, 0, 4, $90		; A
0001B0A7 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001B0AC 9005 003E B0               		dc.b $90, 5, 0, $3E, $B0	; T
0001B0B1                            
0001B0B1 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001B0B6 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001B0BB B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001B0C0 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001B0C5 B805 0004 00               		dc.b $B8, 5, 0, 4, $0
0001B0CA 0B                         @design:	dc.b $B	;  DESIGN JINYA PHENIX RIE | DESIGN SORRA    
0001B0CB 9005 0042 90               		dc.b $90, 5, 0, $42, $90	; D
0001B0D0 9005 000E A0               		dc.b $90, 5, 0, $0E, $A0	; E
0001B0D5 9005 002E B0               		dc.b $90, 5, 0, $2E, $B0	; S
0001B0DA 9001 0046 C0               		dc.b $90, 1, 0, $46, $C0	; I
0001B0DF 9005 0000 C8               		dc.b $90, 5, 0, 0, $C8		; G
0001B0E4 9005 001A D8               		dc.b $90, 5, 0, $1A, $D8	; N
0001B0E9                            
0001B0E9 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001B0EE B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001B0F3 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001B0F8 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001B0FD B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001B102 1C                         @soundproduce:	dc.b $1C	;  SOUND PRODUCE MASATO NAKAMURA | SOUND PORT MR JOKER PRODUCTION   
0001B103 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001B108 9005 0026 A0               		dc.b $90, 5, 0, $26, $A0	; O
0001B10D 9005 0032 B0               		dc.b $90, 5, 0, $32, $B0	; U
0001B112 9005 001A C0               		dc.b $90, 5, 0, $1A, $C0	; N
0001B117 9005 0042 D0               		dc.b $90, 5, 0, $42, $D0	; D
0001B11C 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001B121 9005 0012 F0               		dc.b $90, 5, 0, $12, $F0	; P
0001B126 9005 0026 00               		dc.b $90, 5, 0, $26, $0	; O
0001B12B 9005 0022 10               		dc.b $90, 5, 0, $22, $10	; R
0001B130 9005 003E 20               		dc.b $90, 5, 0, $3E, $20	; T
0001B135                            
0001B135 B809 0008 C0               		dc.b $B8, 9, 0, 8, $C0		; M
0001B13A B805 0022 D4               		dc.b $B8, 5, 0, $22, $D4	; R
0001B13F B800 0060 0C               		dc.b $B8, 0, 0, $60, $C    ;Space
0001B144 B805 004C F4               		dc.b $B8, 5, 0, $4C, $F4	; J
0001B149 B805 0026 04               		dc.b $B8, 5, 0, $26, $4	; O
0001B14E B805 0058 14               		dc.b $B8, 5, 0, $58, $14	; K
0001B153 B805 000E 24               		dc.b $B8, 5, 0, $0E, $24	; E
0001B158 B805 0022 34               		dc.b $B8, 5, 0, $22, $34	; R
0001B15D                            
0001B15D D805 0012 C0               		dc.b $D8, 5, 0, $12, $C0	; P
0001B162 D805 0022 D0               		dc.b $D8, 5, 0, $22, $D0	; R
0001B167 D805 0026 E0               		dc.b $D8, 5, 0, $26, $E0	; O
0001B16C D805 0042 F0               		dc.b $D8, 5, 0, $42, $F0	; D
0001B171 D805 0032 00               		dc.b $D8, 5, 0, $32, $0	; U
0001B176 D805 001E 10               		dc.b $D8, 5, 0, $1E, $10	; C
0001B17B D805 003E 20               		dc.b $D8, 5, 0, $3E, $20	; T
0001B180 D801 0046 30               		dc.b $D8, 1, 0, $46, $30	; I
0001B185 D805 0026 38               		dc.b $D8, 5, 0, $26, $38	; O
0001B18A D805 001A 48               		dc.b $D8, 5, 0, $1A, $48	; N
0001B18F 17                         @soundprogram:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
0001B190 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
0001B195 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
0001B19A D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
0001B19F D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
0001B1A4 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
0001B1A9 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001B1AE D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
0001B1B3 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
0001B1B8 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
0001B1BD D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
0001B1C2 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
0001B1C7 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
0001B1CC 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
0001B1D1 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
0001B1D6 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
0001B1DB 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
0001B1E0 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
0001B1E5 0005 0004 14               		dc.b 0,	5, 0, 4, $14
0001B1EA 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
0001B1EF 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
0001B1F4 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
0001B1F9 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
0001B1FE 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
0001B203 11                         @thanks:	dc.b $11	;  SPECIAL THANKS FUJIO MINEGISHI PAPA | SPECIAL  THANKS YOU   
0001B204 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001B209 9005 0012 A0               		dc.b $90, 5, 0, $12, $A0	; P
0001B20E 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001B213 9005 001E C0               		dc.b $90, 5, 0, $1E, $C0	; C
0001B218 9001 0046 D0               		dc.b $90, 1, 0, $46, $D0	; I
0001B21D 9005 0004 D8               		dc.b $90, 5, 0, 4, $D8		; A
0001B222 9005 0016 E8               		dc.b $90, 5, 0, $16, $E8	; L
0001B227 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001B22C                            
0001B22C B805 003E C0               		dc.b $B8, 5, 0, $3E, $C0	; T
0001B231 B805 003A D0               		dc.b $B8, 5, 0, $3A, $D0	; H
0001B236 B805 0004 E0               		dc.b $B8, 5, 0, 4, $E0		; A
0001B23B B805 001A F0               		dc.b $B8, 5, 0, $1A, $F0	; N
0001B240 B805 0058 00               		dc.b $B8, 5, 0, $58, $0	; K
0001B245 B805 002E 10               		dc.b $B8, 5, 0, $2E, $10	; S
0001B24A                            
0001B24A D805 002A C0               		dc.b $D8, 5, 0, $2A, $C0	; Y
0001B24F D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001B254 D805 0032 E0               		dc.b $D8, 5, 0, $32, $E0	; U
0001B259 10                         @presentedby:	dc.b $10	;  PRESENTED BY SEGA | PRESENTED BY SORRA   
0001B25A 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001B25F 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001B264 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001B269 9005 002E C0               		dc.b $90, 5, 0, $2E, $C0	; S
0001B26E 9005 000E D0               		dc.b $90, 5, 0, $0E, $D0	; E
0001B273 9005 001A E0               		dc.b $90, 5, 0, $1A, $E0	; N
0001B278 9005 003E F0               		dc.b $90, 5, 0, $3E, $F0	; T
0001B27D 9005 000E 00               		dc.b $90, 5, 0, $0E, $0	; E
0001B282 9005 0042 10               		dc.b $90, 5, 0, $42, $10	; D
0001B287                            
0001B287 B805 0048 C0               		dc.b $B8, 5, 0, $48, $C0	; B
0001B28C B805 002A D0               		dc.b $B8, 5, 0, $2A, $D0	; Y
0001B291                            
0001B291 D805 002E C0               		dc.b $D8, 5, 0, $2E, $C0	; S
0001B296 D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001B29B D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
0001B2A0 D805 0022 F0               		dc.b $D8, 5, 0, $22, $F0	; R
0001B2A5 D805 0004 00               		dc.b $D8, 5, 0, 4, $0		; A
0001B2AA 08                         @tryagain:	dc.b 8			 ; TRY AGAIN
0001B2AB 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
0001B2B0 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
0001B2B5 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001B2BA 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
0001B2BF 3005 0000 08               		dc.b $30, 5, 0,	0, 8
0001B2C4 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0001B2C9 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
0001B2CE 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
0001B2D3 0E                         @sonicteam:	dc.b $E	;  SONIC TEAM PRESENTS | SORRA PRESENTS
0001B2D4 E805 002E D0               		dc.b $E8, 5, 0, $2E, $D0	; S
0001B2D9 E805 0026 E0               		dc.b $E8, 5, 0, $26, $E0	; O
0001B2DE E805 0022 F0               		dc.b $E8, 5, 0, $22, $F0	; R
0001B2E3 E805 0022 00               		dc.b $E8, 5, 0, $22, $0	; R
0001B2E8 E805 0004 10               		dc.b $E8, 5, 0, 4, $10		; A
0001B2ED E800 0060 0C               		dc.b $E8, 0, 0, $60, $C   	 ; Space
0001B2F2                            
0001B2F2 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0	; P
0001B2F7 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0	; R
0001B2FC 0005 000E E0               		dc.b 0,	5, 0, $E, $E0	; E
0001B301 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0	; S
0001B306 0005 000E 00               		dc.b 0,	5, 0, $E, 0	; E
0001B30B 0005 001A 10               		dc.b 0,	5, 0, $1A, $10	; N
0001B310 0005 003E 20               		dc.b 0,	5, 0, $3E, $20	; T
0001B315 0005 002E 30               		dc.b 0,	5, 0, $2E, $30	; S
0001B31A                            		even
0001B31A                            		even
0001B31A                            
0001B31A                            		include	"_incObj\3D Boss - Green Hill (part 1).asm"
0001B31A                            ; ---------------------------------------------------------------------------
0001B31A                            ; Object 3D - Eggman (GHZ)
0001B31A                            ; ---------------------------------------------------------------------------
0001B31A                            
0001B31A                            BossGreenHill:
0001B31A 7000                       		moveq	#0,d0
0001B31C 1028 0024                  		move.b	obRoutine(a0),d0
0001B320 323B 0000                  		move.w	BGHZ_Index(pc,d0.w),d1
0001B324 4EFB 1000                  		jmp	BGHZ_Index(pc,d1.w)
0001B328                            ; ===========================================================================
0001B328 0000                       BGHZ_Index:	dc.w BGHZ_Main-BGHZ_Index
0001B32A 0000                       		dc.w BGHZ_ShipMain-BGHZ_Index
0001B32C 0000                       		dc.w BGHZ_FaceMain-BGHZ_Index
0001B32E 0000                       		dc.w BGHZ_FlameMain-BGHZ_Index
0001B330                            
0001B330 0200                       BGHZ_ObjData:	dc.b 2,	0		; routine counter, animation
0001B332 0401                       		dc.b 4,	1
0001B334 0607                       		dc.b 6,	7
0001B336                            ; ===========================================================================
0001B336                            
0001B336                            BGHZ_Main:	; Routine 0
0001B336 45F9 0001 B330             		lea	(BGHZ_ObjData).l,a2
0001B33C 2248                       		movea.l	a0,a1
0001B33E 7202                       		moveq	#2,d1
0001B340 6000                       		bra.s	BGHZ_LoadBoss
0001B342                            ; ===========================================================================
0001B342                            
0001B342                            BGHZ_Loop:
0001B342 4EB9 0000 FD7A             		jsr	(FindNextFreeObj).l
0001B348 6600                       		bne.s	loc_17772
0001B34A                            
0001B34A                            BGHZ_LoadBoss:
0001B34A 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B34E 12BC 003D                  		move.b	#id_BossGreenHill,0(a1)
0001B352 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B358 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B35E 237C 0000 0000 0004        		move.l	#Map_Eggman,obMap(a1)
0001B366 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B36C 137C 0004 0001             		move.b	#4,obRender(a1)
0001B372 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B378 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001B37E 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B382 2348 0034                  		move.l	a0,$34(a1)
0001B386 51C9 FFBA                  		dbf	d1,BGHZ_Loop	; repeat sequence 2 more times
0001B38A                            
0001B38A                            loc_17772:
0001B38A 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B390 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B396 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B39C 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B3A2                            
0001B3A2                            
0001B3A2                            BGHZ_ShipMain:	; Routine 2
0001B3A2 7000                       		moveq	#0,d0
0001B3A4 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B3A8 323B 0000                  		move.w	BGHZ_ShipIndex(pc,d0.w),d1
0001B3AC 4EBB 1000                  		jsr	BGHZ_ShipIndex(pc,d1.w)
0001B3B0 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001B3B6 4EB9 0000 C880             		jsr	(AnimateSprite).l
0001B3BC 1028 0022                  		move.b	obStatus(a0),d0
0001B3C0 0200 0003                  		andi.b	#3,d0
0001B3C4 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B3CA 8128 0001                  		or.b	d0,obRender(a0)
0001B3CE 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001B3D4                            ; ===========================================================================
0001B3D4 0000                       BGHZ_ShipIndex:	dc.w BGHZ_ShipStart-BGHZ_ShipIndex
0001B3D6 0000                       		dc.w BGHZ_MakeBall-BGHZ_ShipIndex
0001B3D8 0000                       		dc.w BGHZ_ShipMove-BGHZ_ShipIndex
0001B3DA 0000                       		dc.w loc_17954-BGHZ_ShipIndex
0001B3DC 0000                       		dc.w loc_1797A-BGHZ_ShipIndex
0001B3DE 0000                       		dc.w loc_179AC-BGHZ_ShipIndex
0001B3E0 0000                       		dc.w loc_179F6-BGHZ_ShipIndex
0001B3E2                            ; ===========================================================================
0001B3E2                            
0001B3E2                            BGHZ_ShipStart:
0001B3E2 317C 0100 0012             		move.w	#$100,obVelY(a0) ; move ship down
0001B3E8 6100 0000                  		bsr.w	BossMove
0001B3EC 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001B3F2 6600                       		bne.s	loc_177E6
0001B3F4 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop ship
0001B3FA 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto next routine
0001B3FE                            
0001B3FE                            loc_177E6:
0001B3FE 1028 003F                  		move.b	$3F(a0),d0
0001B402 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001B408 EC40                       		asr.w	#6,d0
0001B40A D068 0038                  		add.w	$38(a0),d0
0001B40E 3140 000C                  		move.w	d0,obY(a0)
0001B412 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B418 5428 003F                  		addq.b	#2,$3F(a0)
0001B41C 0C28 0008 0025             		cmpi.b	#8,ob2ndRout(a0)
0001B422 6400                       		bcc.s	locret_1784A
0001B424 4A28 0022                  		tst.b	obStatus(a0)
0001B428 6B00                       		bmi.s	loc_1784C
0001B42A 4A28 0020                  		tst.b	obColType(a0)
0001B42E 6600                       		bne.s	locret_1784A
0001B430 4A28 003E                  		tst.b	$3E(a0)
0001B434 6600                       		bne.s	BGHZ_ShipFlash
0001B436 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001B446                            
0001B446                            BGHZ_ShipFlash:
0001B446 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1 ; load 2nd pallet, 2nd entry
0001B44A 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001B44C 4A51                       		tst.w	(a1)
0001B44E 6600                       		bne.s	loc_1783C
0001B450 303C 0EEE                  		move.w	#cWhite,d0	; move 0EEE (white) to d0
0001B454                            
0001B454                            loc_1783C:
0001B454 3280                       		move.w	d0,(a1)		; load color stored in	d0
0001B456 5328 003E                  		subq.b	#1,$3E(a0)
0001B45A 6600                       		bne.s	locret_1784A
0001B45C 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B462                            
0001B462                            locret_1784A:
0001B462 4E75                       		rts	
0001B464                            ; ===========================================================================
0001B464                            
0001B464                            loc_1784C:
0001B464 7064                       		moveq	#100,d0
0001B466 6100 0000                  		bsr.w	AddPoints
0001B46A 117C 0008 0025             		move.b	#8,ob2ndRout(a0)
0001B470 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001B476 4E75                       		rts	
0001B476 4E75                       		rts	
0001B478                            
0001B478                            ; ---------------------------------------------------------------------------
0001B478                            ; Defeated boss	subroutine
0001B478                            ; ---------------------------------------------------------------------------
0001B478                            
0001B478                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B478                            
0001B478                            
0001B478                            BossDefeated:
0001B478 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001B47C 0200 0007                  		andi.b	#7,d0
0001B480 6600                       		bne.s	locret_178A2
0001B482 4EB9 0000 FD64             		jsr	(FindFreeObj).l
0001B488 6600                       		bne.s	locret_178A2
0001B48A 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1)	; load explosion object
0001B48E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B494 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B49A 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001B4A0 3200                       		move.w	d0,d1
0001B4A2 7200                       		moveq	#0,d1
0001B4A4 1200                       		move.b	d0,d1
0001B4A6 E409                       		lsr.b	#2,d1
0001B4A8 0441 0020                  		subi.w	#$20,d1
0001B4AC D369 0008                  		add.w	d1,obX(a1)
0001B4B0 E048                       		lsr.w	#8,d0
0001B4B2 E608                       		lsr.b	#3,d0
0001B4B4 D169 000C                  		add.w	d0,obY(a1)
0001B4B8                            
0001B4B8                            locret_178A2:
0001B4B8 4E75                       		rts	
0001B4BA                            ; End of function BossDefeated
0001B4BA                            
0001B4BA                            ; ---------------------------------------------------------------------------
0001B4BA                            ; Subroutine to	move a boss
0001B4BA                            ; ---------------------------------------------------------------------------
0001B4BA                            
0001B4BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B4BA                            
0001B4BA                            
0001B4BA                            BossMove:
0001B4BA 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0001B4C0 E188                       		lsl.l	#8,d0
0001B4C2 D1A8 0030                  		add.l	d0,$30(a0)
0001B4C6 E18A                       		lsl.l	#8,d2
0001B4C8 D5A8 0038                  		add.l	d2,$38(a0)
0001B4CC 4E75                       		rts
0001B4CE                            ; End of function BossMove
0001B4CE                            
0001B4CE                            ; ===========================================================================
0001B4CE                            
0001B4CE                            		include	"_incObj\3D Boss - Green Hill (part 2).asm"
0001B4CE                            
0001B4CE                            BGHZ_MakeBall:
0001B4CE 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001B4D4 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B4DA 6100 FFDE                  		bsr.w	BossMove
0001B4DE 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001B4E4 6600                       		bne.s	loc_17916
0001B4E6 317C 0000 0010             		move.w	#0,obVelX(a0)
0001B4EC 317C 0000 0012             		move.w	#0,obVelY(a0)
0001B4F2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B4F6 4EB9 0000 FD7A             		jsr	(FindNextFreeObj).l
0001B4FC 6600                       		bne.s	loc_17910
0001B4FE 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load swinging ball object
0001B502 3368 0300 0008             		move.w	$300(a0),obX(a1)
0001B508 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001B50E 2348 0034                  		move.l	a0,$34(a1)
0001B512                            
0001B512                            loc_17910:
0001B512 317C 0077 003C             		move.w	#$77,$3C(a0)
0001B518                            
0001B518                            loc_17916:
0001B518 6000 FEE4                  		bra.w	loc_177E6
0001B51C                            ; ===========================================================================
0001B51C                            
0001B51C                            BGHZ_ShipMove:
0001B51C 5368 003C                  		subq.w	#1,$3C(a0)
0001B520 6A00                       		bpl.s	BGHZ_Reverse
0001B522 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B526 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001B52C 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move the ship sideways
0001B532 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001B538 6600                       		bne.s	BGHZ_Reverse
0001B53A 317C 007F 003C             		move.w	#$7F,$3C(a0)
0001B540 317C 0040 0010             		move.w	#$40,obVelX(a0)
0001B546                            
0001B546                            BGHZ_Reverse:
0001B546 0828 0000 0022             		btst	#0,obStatus(a0)
0001B54C 6600                       		bne.s	loc_17950
0001B54E 4468 0010                  		neg.w	obVelX(a0)	; reverse direction of the ship
0001B552                            
0001B552                            loc_17950:
0001B552 6000 FEAA                  		bra.w	loc_177E6
0001B556                            ; ===========================================================================
0001B556                            
0001B556                            loc_17954:
0001B556 5368 003C                  		subq.w	#1,$3C(a0)
0001B55A 6B00                       		bmi.s	loc_17960
0001B55C 6100 FF5C                  		bsr.w	BossMove
0001B560 6000                       		bra.s	loc_17976
0001B562                            ; ===========================================================================
0001B562                            
0001B562                            loc_17960:
0001B562 0868 0000 0022             		bchg	#0,obStatus(a0)
0001B568 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001B56E 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001B572 317C 0000 0010             		move.w	#0,obVelX(a0)
0001B578                            
0001B578                            loc_17976:
0001B578 6000 FE84                  		bra.w	loc_177E6
0001B57C                            ; ===========================================================================
0001B57C                            
0001B57C                            loc_1797A:
0001B57C 5368 003C                  		subq.w	#1,$3C(a0)
0001B580 6B00                       		bmi.s	loc_17984
0001B582 6000 FEF4                  		bra.w	BossDefeated
0001B586                            ; ===========================================================================
0001B586                            
0001B586                            loc_17984:
0001B586 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B58C 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001B592 4268 0010                  		clr.w	obVelX(a0)
0001B596 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B59A 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001B5A0 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001B5A4 6600                       		bne.s	locret_179AA
0001B5A6 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001B5AC                            
0001B5AC                            locret_179AA:
0001B5AC 4E75                       		rts	
0001B5AE                            ; ===========================================================================
0001B5AE                            
0001B5AE                            loc_179AC:
0001B5AE 5268 003C                  		addq.w	#1,$3C(a0)
0001B5B2 6700                       		beq.s	loc_179BC
0001B5B4 6A00                       		bpl.s	loc_179C2
0001B5B6 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B5BC 6000                       		bra.s	loc_179EE
0001B5BE                            ; ===========================================================================
0001B5BE                            
0001B5BE                            loc_179BC:
0001B5BE 4268 0012                  		clr.w	obVelY(a0)
0001B5C2 6000                       		bra.s	loc_179EE
0001B5C4                            ; ===========================================================================
0001B5C4                            
0001B5C4                            loc_179C2:
0001B5C4 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001B5CA 6500                       		bcs.s	loc_179DA
0001B5CC 6700                       		beq.s	loc_179E0
0001B5CE 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001B5D4 6500                       		bcs.s	loc_179EE
0001B5D6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B5DA 6000                       		bra.s	loc_179EE
0001B5DC                            ; ===========================================================================
0001B5DC                            
0001B5DC                            loc_179DA:
0001B5DC 5168 0012                  		subq.w	#8,obVelY(a0)
0001B5E0 6000                       		bra.s	loc_179EE
0001B5E2                            ; ===========================================================================
0001B5E2                            
0001B5E2                            loc_179E0:
0001B5E2 4268 0012                          clr.w    obVelY(a0)
0001B5E6 4A38 FE2D                          tst.b     (v_invinc).w
0001B5EA 6600                               bne.s   @boss_invinc
0001B5EC 4A38 FE2E                          tst.b     (v_shoes).w
0001B5F0 6600                               bne.s   @boss_shoes
0001B5F2                            
0001B5F2 1038 F5C6                          move.b   (v_Saved_music),d0
0001B5F6 6000 0000                          bra.w      @boss_play
0001B5FA                            
0001B5FA                            @boss_invinc:
0001B5FA 103C 0000                          move.b #bgm_Invincible,d0
0001B5FE                            
0001B5FE                            @boss_shoes:
0001B5FE 103C 0000                          move.b #bgm_Ending,d0
0001B602                            
0001B602                            @boss_play:
0001B602 4EB8 129A                          jsr PlaySound
0001B606                            
0001B606                            loc_179EE:
0001B606 6100 FEB2                  		bsr.w	BossMove
0001B60A 6000 FDF2                  		bra.w	loc_177E6
0001B60E                            ; ===========================================================================
0001B60E                            
0001B60E                            loc_179F6:
0001B60E 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001B614 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B61A 0C78 2AC0 F72A             		cmpi.w	#$2AC0,(v_limitright2).w
0001B620 6700                       		beq.s	loc_17A10
0001B622 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B626 6000                       		bra.s	loc_17A16
0001B628                            ; ===========================================================================
0001B628                            
0001B628                            loc_17A10:
0001B628 4A28 0001                  		tst.b	obRender(a0)
0001B62C 6A00                       		bpl.s	BGHZ_ShipDel
0001B62E                            
0001B62E                            loc_17A16:
0001B62E 6100 FE8A                  		bsr.w	BossMove
0001B632 6000 FDCA                  		bra.w	loc_177E6
0001B636                            ; ===========================================================================
0001B636                            
0001B636                            BGHZ_ShipDel:
0001B636 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001B63C                            ; ===========================================================================
0001B63C                            
0001B63C                            BGHZ_FaceMain:	; Routine 4
0001B63C 7000                       		moveq	#0,d0
0001B63E 7201                       		moveq	#1,d1
0001B640 2268 0034                  		movea.l	$34(a0),a1
0001B644 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B648 5900                       		subq.b	#4,d0
0001B64A 6600                       		bne.s	loc_17A3E
0001B64C 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
0001B652 6600                       		bne.s	loc_17A46
0001B654 7204                       		moveq	#4,d1
0001B656                            
0001B656                            loc_17A3E:
0001B656 5D00                       		subq.b	#6,d0
0001B658 6B00                       		bmi.s	loc_17A46
0001B65A 720A                       		moveq	#$A,d1
0001B65C 6000                       		bra.s	loc_17A5A
0001B65E                            ; ===========================================================================
0001B65E                            
0001B65E                            loc_17A46:
0001B65E 4A29 0020                  		tst.b	obColType(a1)
0001B662 6600                       		bne.s	loc_17A50
0001B664 7205                       		moveq	#5,d1
0001B666 6000                       		bra.s	loc_17A5A
0001B668                            ; ===========================================================================
0001B668                            
0001B668                            loc_17A50:
0001B668 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B66E 6500                       		bcs.s	loc_17A5A
0001B670 7204                       		moveq	#4,d1
0001B672                            
0001B672                            loc_17A5A:
0001B672 1141 001C                  		move.b	d1,obAnim(a0)
0001B676 5500                       		subq.b	#2,d0
0001B678 6600                       		bne.s	BGHZ_FaceDisp
0001B67A 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B680 4A28 0001                  		tst.b	obRender(a0)
0001B684 6A00                       		bpl.s	BGHZ_FaceDel
0001B686                            
0001B686                            BGHZ_FaceDisp:
0001B686 6000                       		bra.s	BGHZ_Display
0001B688                            ; ===========================================================================
0001B688                            
0001B688                            BGHZ_FaceDel:
0001B688 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001B68E                            ; ===========================================================================
0001B68E                            
0001B68E                            BGHZ_FlameMain:	; Routine 6
0001B68E 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B694 2268 0034                  		movea.l	$34(a0),a1
0001B698 0C29 000C 0025             		cmpi.b	#$C,ob2ndRout(a1)
0001B69E 6600                       		bne.s	loc_17A96
0001B6A0 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B6A6 4A28 0001                  		tst.b	obRender(a0)
0001B6AA 6A00                       		bpl.s	BGHZ_FlameDel
0001B6AC 6000                       		bra.s	BGHZ_FlameDisp
0001B6AE                            ; ===========================================================================
0001B6AE                            
0001B6AE                            loc_17A96:
0001B6AE 3029 0010                  		move.w	obVelX(a1),d0
0001B6B2 6700                       		beq.s	BGHZ_FlameDisp
0001B6B4 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B6BA                            
0001B6BA                            BGHZ_FlameDisp:
0001B6BA 6000                       		bra.s	BGHZ_Display
0001B6BC                            ; ===========================================================================
0001B6BC                            
0001B6BC                            BGHZ_FlameDel:
0001B6BC 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001B6C2                            ; ===========================================================================
0001B6C2                            
0001B6C2                            BGHZ_Display:
0001B6C2 2268 0034                  		movea.l	$34(a0),a1
0001B6C6 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B6CC 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B6D2 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B6D8 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001B6DE 4EB9 0000 C880             		jsr	(AnimateSprite).l
0001B6E4 1028 0022                  		move.b	obStatus(a0),d0
0001B6E8 0200 0003                  		andi.b	#3,d0
0001B6EC 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B6F2 8128 0001                  		or.b	d0,obRender(a0)
0001B6F6 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001B6F6 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001B6FC                            		include	"_incObj\48 Eggman's Swinging Ball.asm"
0001B6FC                            ; ---------------------------------------------------------------------------
0001B6FC                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001B6FC                            ; ---------------------------------------------------------------------------
0001B6FC                            
0001B6FC                            BossBall:
0001B6FC 7000                       		moveq	#0,d0
0001B6FE 1028 0024                  		move.b	obRoutine(a0),d0
0001B702 323B 0000                  		move.w	GBall_Index(pc,d0.w),d1
0001B706 4EFB 1000                  		jmp	GBall_Index(pc,d1.w)
0001B70A                            ; ===========================================================================
0001B70A 0000                       GBall_Index:	dc.w GBall_Main-GBall_Index
0001B70C 0000                       		dc.w GBall_Base-GBall_Index
0001B70E 0000                       		dc.w GBall_Display2-GBall_Index
0001B710 0000                       		dc.w loc_17C68-GBall_Index
0001B712 0000                       		dc.w GBall_ChkVanish-GBall_Index
0001B714                            ; ===========================================================================
0001B714                            
0001B714                            GBall_Main:	; Routine 0
0001B714 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B718 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0001B71E 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001B724 217C 0000 0000 0004        		move.l	#Map_BossItems,obMap(a0)
0001B72C 317C 046C 0002             		move.w	#$46C,obGfx(a0)
0001B732 45E8 0028                  		lea	obSubtype(a0),a2
0001B736 14FC 0000                  		move.b	#0,(a2)+
0001B73A 7205                       		moveq	#5,d1
0001B73C 2248                       		movea.l	a0,a1
0001B73E 6000                       		bra.s	loc_17B60
0001B740                            ; ===========================================================================
0001B740                            
0001B740                            GBall_MakeLinks:
0001B740 4EB9 0000 FD7A             		jsr	(FindNextFreeObj).l
0001B746 6600                       		bne.s	GBall_MakeBall
0001B748 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B74E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B754 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load chain link object
0001B758 137C 0006 0024             		move.b	#6,obRoutine(a1)
0001B75E 237C 0000 941C 0004        		move.l	#Map_Swing_GHZ,obMap(a1)
0001B766 337C 0380 0002             		move.w	#$380,obGfx(a1)
0001B76C 137C 0001 001A             		move.b	#1,obFrame(a1)
0001B772 5228 0028                  		addq.b	#1,obSubtype(a0)
0001B776                            
0001B776                            loc_17B60:
0001B776 3A09                       		move.w	a1,d5
0001B778 0445 D000                  		subi.w	#$D000,d5
0001B77C EC4D                       		lsr.w	#6,d5
0001B77E 0245 007F                  		andi.w	#$7F,d5
0001B782 14C5                       		move.b	d5,(a2)+
0001B784 137C 0004 0001             		move.b	#4,obRender(a1)
0001B78A 137C 0008 0014             		move.b	#8,obActWid(a1)
0001B790 337C 0300 0018             		move.w	#$300,obPriority(a1)
0001B796 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001B79C 51C9 FFA2                  		dbf	d1,GBall_MakeLinks ; repeat sequence 5 more times
0001B7A0                            
0001B7A0                            GBall_MakeBall:
0001B7A0 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001B7A6 237C 0000 9978 0004        		move.l	#Map_GBall,obMap(a1) ; load different mappings for final link
0001B7AE 337C 43AA 0002             		move.w	#$43AA,obGfx(a1) ; use different graphics
0001B7B4 137C 0001 001A             		move.b	#1,obFrame(a1)
0001B7BA 337C 0280 0018             		move.w	#$280,obPriority(a1)
0001B7C0 137C 0081 0020             		move.b	#$81,obColType(a1) ; make object hurt Sonic
0001B7C6 4E75                       		rts	
0001B7C8                            ; ===========================================================================
0001B7C8                            
0001B7C8 0010 2030 4060             GBall_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001B7CE                            
0001B7CE                            ; ===========================================================================
0001B7CE                            
0001B7CE                            GBall_Base:	; Routine 2
0001B7CE 47F9 0001 B7C8             		lea	(GBall_PosData).l,a3
0001B7D4 45E8 0028                  		lea	obSubtype(a0),a2
0001B7D8 7C00                       		moveq	#0,d6
0001B7DA 1C1A                       		move.b	(a2)+,d6
0001B7DC                            
0001B7DC                            loc_17BC6:
0001B7DC 7800                       		moveq	#0,d4
0001B7DE 181A                       		move.b	(a2)+,d4
0001B7E0 ED4C                       		lsl.w	#6,d4
0001B7E2 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
0001B7E8 2244                       		movea.l	d4,a1
0001B7EA 101B                       		move.b	(a3)+,d0
0001B7EC B029 003C                  		cmp.b	$3C(a1),d0
0001B7F0 6700                       		beq.s	loc_17BE0
0001B7F2 5229 003C                  		addq.b	#1,$3C(a1)
0001B7F6                            
0001B7F6                            loc_17BE0:
0001B7F6 51CE FFE4                  		dbf	d6,loc_17BC6
0001B7FA                            
0001B7FA B029 003C                  		cmp.b	$3C(a1),d0
0001B7FE 6600                       		bne.s	loc_17BFA
0001B800 2268 0034                  		movea.l	$34(a0),a1
0001B804 0C29 0006 0025             		cmpi.b	#6,ob2ndRout(a1)
0001B80A 6600                       		bne.s	loc_17BFA
0001B80C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B810                            
0001B810                            loc_17BFA:
0001B810 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001B816 6700                       		beq.s	GBall_Display
0001B818 5268 0032                  		addq.w	#1,$32(a0)
0001B81C                            
0001B81C                            GBall_Display:
0001B81C 6100 0000                  		bsr.w	sub_17C2A
0001B820 1028 0026                  		move.b	obAngle(a0),d0
0001B824 4EB9 0000 938E             		jsr	(Swing_Move2).l
0001B82A 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001B830                            ; ===========================================================================
0001B830                            
0001B830                            GBall_Display2:	; Routine 4
0001B830 6100 0000                  		bsr.w	sub_17C2A
0001B834 4EB9 0000 934E             		jsr	(Obj48_Move).l
0001B83A 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001B840                            
0001B840                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B840                            
0001B840                            
0001B840                            sub_17C2A:
0001B840 2268 0034                  		movea.l	$34(a0),a1
0001B844 0628 0020 001B             		addi.b	#$20,obAniFrame(a0)
0001B84A 6400                       		bcc.s	loc_17C3C
0001B84C 0868 0000 001A             		bchg	#0,obFrame(a0)
0001B852                            
0001B852                            loc_17C3C:
0001B852 3169 0008 003A             		move.w	obX(a1),$3A(a0)
0001B858 3029 000C                  		move.w	obY(a1),d0
0001B85C D068 0032                  		add.w	$32(a0),d0
0001B860 3140 0038                  		move.w	d0,$38(a0)
0001B864 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B86A 4A29 0022                  		tst.b	obStatus(a1)
0001B86E 6A00                       		bpl.s	locret_17C66
0001B870 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001B874 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001B87A                            
0001B87A                            locret_17C66:
0001B87A 4E75                       		rts	
0001B87C                            ; End of function sub_17C2A
0001B87C                            
0001B87C                            ; ===========================================================================
0001B87C                            
0001B87C                            loc_17C68:	; Routine 6
0001B87C 2268 0034                  		movea.l	$34(a0),a1
0001B880 4A29 0022                  		tst.b	obStatus(a1)
0001B884 6A00                       		bpl.s	GBall_Display3
0001B886 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001B88A 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001B890                            
0001B890                            GBall_Display3:
0001B890 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001B896                            ; ===========================================================================
0001B896                            
0001B896                            GBall_ChkVanish:; Routine 8
0001B896 7000                       		moveq	#0,d0
0001B898 4A28 001A                  		tst.b	obFrame(a0)
0001B89C 6600                       		bne.s	GBall_Vanish
0001B89E 5200                       		addq.b	#1,d0
0001B8A0                            
0001B8A0                            GBall_Vanish:
0001B8A0 1140 001A                  		move.b	d0,obFrame(a0)
0001B8A4 2268 0034                  		movea.l	$34(a0),a1
0001B8A8 4A29 0022                  		tst.b	obStatus(a1)
0001B8AC 6A00                       		bpl.s	GBall_Display4
0001B8AE 117C 0000 0020             		move.b	#0,obColType(a0)
0001B8B4 6100 FBC2                  		bsr.w	BossDefeated
0001B8B8 5328 003C                  		subq.b	#1,$3C(a0)
0001B8BC 6A00                       		bpl.s	GBall_Display4
0001B8BE 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001B8C2 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001B8C8                            
0001B8C8                            GBall_Display4:
0001B8C8 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001B8C8 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001B8CE                            		include	"_anim\Eggman.asm"
0001B8CE                            ; ---------------------------------------------------------------------------
0001B8CE                            ; Animation script - Eggman (bosses)
0001B8CE                            ; ---------------------------------------------------------------------------
0001B8CE 0000                       Ani_Eggman:	dc.w @ship-Ani_Eggman
0001B8D0 0000                       		dc.w @facenormal1-Ani_Eggman
0001B8D2 0000                       		dc.w @facenormal2-Ani_Eggman
0001B8D4 0000                       		dc.w @facenormal3-Ani_Eggman
0001B8D6 0000                       		dc.w @facelaugh-Ani_Eggman
0001B8D8 0000                       		dc.w @facehit-Ani_Eggman
0001B8DA 0000                       		dc.w @facepanic-Ani_Eggman
0001B8DC 0000                       		dc.w @blank-Ani_Eggman
0001B8DE 0000                       		dc.w @flame1-Ani_Eggman
0001B8E0 0000                       		dc.w @flame2-Ani_Eggman
0001B8E2 0000                       		dc.w @facedefeat-Ani_Eggman
0001B8E4 0000                       		dc.w @escapeflame-Ani_Eggman
0001B8E6 0F00 FF                    @ship:		dc.b $F, 0, afEnd
0001B8EA 00                         		even
0001B8EA 0501 02FF                  @facenormal1:	dc.b 5,	1, 2, afEnd
0001B8EE                            		even
0001B8EE 0301 02FF                  @facenormal2:	dc.b 3,	1, 2, afEnd
0001B8F2                            		even
0001B8F2 0101 02FF                  @facenormal3:	dc.b 1,	1, 2, afEnd
0001B8F6                            		even
0001B8F6 0403 04FF                  @facelaugh:	dc.b 4,	3, 4, afEnd
0001B8FA                            		even
0001B8FA 1F05 01FF                  @facehit:	dc.b $1F, 5, 1,	afEnd
0001B8FE                            		even
0001B8FE 0306 01FF                  @facepanic:	dc.b 3,	6, 1, afEnd
0001B902                            		even
0001B902 0F0A FF                    @blank:		dc.b $F, $A, afEnd
0001B906 00                         		even
0001B906 0308 09FF                  @flame1:	dc.b 3,	8, 9, afEnd
0001B90A                            		even
0001B90A 0108 09FF                  @flame2:	dc.b 1,	8, 9, afEnd
0001B90E                            		even
0001B90E 0F07 FF                    @facedefeat:	dc.b $F, 7, afEnd
0001B912 00                         		even
0001B912 0209 080B 0C0B 0C09 08FE+  @escapeflame:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, afBack, 2
0001B91E 00                         		even
0001B91E 00                         		even
0001B91E                            Map_Eggman:	include	"_maps\Eggman.asm"
0001B91E                            ; --------------------------------------------------------------------------------
0001B91E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001B91E                            ; --------------------------------------------------------------------------------
0001B91E                            
0001B91E                            SME_F_pyS:	
0001B91E 0000 0000                  		dc.w SME_F_pyS_1A-SME_F_pyS, SME_F_pyS_34-SME_F_pyS	
0001B922 0000 0000                  		dc.w SME_F_pyS_44-SME_F_pyS, SME_F_pyS_54-SME_F_pyS	
0001B926 0000 0000                  		dc.w SME_F_pyS_69-SME_F_pyS, SME_F_pyS_7E-SME_F_pyS	
0001B92A 0000 0000                  		dc.w SME_F_pyS_93-SME_F_pyS, SME_F_pyS_A8-SME_F_pyS	
0001B92E 0000 0000                  		dc.w SME_F_pyS_CC-SME_F_pyS, SME_F_pyS_D2-SME_F_pyS	
0001B932 0000 0000                  		dc.w SME_F_pyS_D8-SME_F_pyS, SME_F_pyS_D9-SME_F_pyS	
0001B936 0000                       		dc.w SME_F_pyS_E4-SME_F_pyS	
0001B938 05                         SME_F_pyS_1A:	dc.b 5	
0001B939 EC01 000A E4               		dc.b $EC, 1, 0, $A, $E4	
0001B93E FC0E 2010 E4               		dc.b $FC, $E, $20, $10, $E4	
0001B943 FC0E 201C 04               		dc.b $FC, $E, $20, $1C, 4	
0001B948 140C 2028 EC               		dc.b $14, $C, $20, $28, $EC	
0001B94D 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C	
0001B952 03                         SME_F_pyS_34:	dc.b 3	
0001B953 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001B958 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC	
0001B95D EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001B962 03                         SME_F_pyS_44:	dc.b 3	
0001B963 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001B968 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001B96D EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001B972 04                         SME_F_pyS_54:	dc.b 4	
0001B973 E408 003D F4               		dc.b $E4, 8, 0, $3D, $F4	
0001B978 EC09 0040 EC               		dc.b $EC, 9, 0, $40, $EC	
0001B97D EC05 0046 04               		dc.b $EC, 5, 0, $46, 4	
0001B982 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001B987 04                         SME_F_pyS_69:	dc.b 4	
0001B988 E408 004A F4               		dc.b $E4, 8, 0, $4A, $F4	
0001B98D EC09 004D EC               		dc.b $EC, 9, 0, $4D, $EC	
0001B992 EC05 0053 04               		dc.b $EC, 5, 0, $53, 4	
0001B997 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001B99C 04                         SME_F_pyS_7E:	dc.b 4	
0001B99D E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001B9A2 EC09 005A EC               		dc.b $EC, 9, 0, $5A, $EC	
0001B9A7 EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001B9AC EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001B9B1 04                         SME_F_pyS_93:	dc.b 4	
0001B9B2 E404 0064 04               		dc.b $E4, 4, 0, $64, 4	
0001B9B7 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001B9BC EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001B9C1 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001B9C6 07                         SME_F_pyS_A8:	dc.b 7	
0001B9C7 E409 0066 F4               		dc.b $E4, 9, 0, $66, $F4	
0001B9CC E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001B9D1 EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001B9D6 EC01 0035 EC               		dc.b $EC, 1, 0, $35, $EC	
0001B9DB F400 005D F4               		dc.b $F4, 0, 0, $5D, $F4	
0001B9E0 F400 005F FC               		dc.b $F4, 0, 0, $5F, $FC	
0001B9E5 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001B9EA 01                         SME_F_pyS_CC:	dc.b 1	
0001B9EB 0405 002D 22               		dc.b 4, 5, 0, $2D, $22	
0001B9F0 01                         SME_F_pyS_D2:	dc.b 1	
0001B9F1 0405 0031 22               		dc.b 4, 5, 0, $31, $22	
0001B9F6 00                         SME_F_pyS_D8:	dc.b 0	
0001B9F7 02                         SME_F_pyS_D9:	dc.b 2	
0001B9F8 0008 012A 22               		dc.b 0, 8, 1, $2A, $22	
0001B9FD 0808 112A 22               		dc.b 8, 8, $11, $2A, $22	
0001BA02 02                         SME_F_pyS_E4:	dc.b 2	
0001BA03 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22	
0001BA08 0001 0139 3A               		dc.b 0, 1, 1, $39, $3A	
0001BA0E 00                         		even
0001BA0E 00                         		even
0001BA0E                            Map_BossItems:	include	"_maps\Boss Items.asm"
0001BA0E                            ; ---------------------------------------------------------------------------
0001BA0E                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001BA0E                            ; ---------------------------------------------------------------------------
0001BA0E                            Map_BossItems_internal:
0001BA0E 0000                       		dc.w @chainanchor1-Map_BossItems_internal
0001BA10 0000                       		dc.w @chainanchor2-Map_BossItems_internal
0001BA12 0000                       		dc.w @cross-Map_BossItems_internal
0001BA14 0000                       		dc.w @widepipe-Map_BossItems_internal
0001BA16 0000                       		dc.w @pipe-Map_BossItems_internal
0001BA18 0000                       		dc.w @spike-Map_BossItems_internal
0001BA1A 0000                       		dc.w @legmask-Map_BossItems_internal
0001BA1C 0000                       		dc.w @legs-Map_BossItems_internal
0001BA1E 01                         @chainanchor1:	dc.b 1
0001BA1F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; GHZ boss
0001BA24 02                         @chainanchor2:	dc.b 2
0001BA25 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; GHZ boss
0001BA2A F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001BA30 00                         		even
0001BA30 01                         @cross:		dc.b 1
0001BA31 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; unknown
0001BA36 01                         @widepipe:	dc.b 1
0001BA37 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4	; SLZ boss
0001BA3C 01                         @pipe:		dc.b 1
0001BA3D 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8	; MZ boss
0001BA42 04                         @spike:		dc.b 4
0001BA43 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8 ; SYZ boss
0001BA48 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001BA4D F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001BA52 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001BA58 00                         		even
0001BA58 02                         @legmask:	dc.b 2
0001BA59 0005 0017 00               		dc.b 0,	5, 0, $17, 0	; FZ post-boss: sprite covering part of legs
0001BA5E 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001BA64 00                         		even
0001BA64 02                         @legs:		dc.b 2
0001BA65 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0	; FZ post-boss
0001BA6A 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001BA70 00                         		even
0001BA70 00                         		even
0001BA70                            		include	"_incObj\77 Boss - Labyrinth.asm"
0001BA70                            ; ---------------------------------------------------------------------------
0001BA70                            ; Object 77 - Eggman (LZ)
0001BA70                            ; ---------------------------------------------------------------------------
0001BA70                            
0001BA70                            BossLabyrinth:
0001BA70 7000                       		moveq	#0,d0
0001BA72 1028 0024                  		move.b	obRoutine(a0),d0
0001BA76 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001BA7A 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
0001BA7E                            ; ===========================================================================
0001BA7E 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001BA80 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001BA82 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001BA84 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001BA86                            
0001BA86 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001BA88 0401                       		dc.b 4,	1
0001BA8A 0607                       		dc.b 6,	7
0001BA8C                            ; ===========================================================================
0001BA8C                            
0001BA8C                            Obj77_Main:	; Routine 0
0001BA8C 317C 1E10 0008             		move.w	#$1E10,obX(a0)
0001BA92 317C 05C0 000C             		move.w	#$5C0,obY(a0)
0001BA98 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001BA9E 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001BAA4 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BAAA 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001BAB0 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001BAB6 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001BABA 2248                       		movea.l	a0,a1
0001BABC 7202                       		moveq	#2,d1
0001BABE 6000                       		bra.s	Obj77_LoadBoss
0001BAC0                            ; ===========================================================================
0001BAC0                            
0001BAC0                            Obj77_Loop:
0001BAC0 4EB9 0000 FD7A             		jsr	(FindNextFreeObj).l
0001BAC6 6600                       		bne.s	Obj77_ShipMain
0001BAC8 12BC 0077                  		move.b	#id_BossLabyrinth,0(a1)
0001BACC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BAD2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BAD8                            
0001BAD8                            Obj77_LoadBoss:
0001BAD8 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BADE 4229 0025                  		clr.b	ob2ndRout(a1)
0001BAE2 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001BAE6 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001BAEA 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0001BAF0 237C 0001 B91E 0004        		move.l	#Map_Eggman,obMap(a1)
0001BAF8 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001BAFE 137C 0004 0001             		move.b	#4,obRender(a1)
0001BB04 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001BB0A 2348 0034                  		move.l	a0,$34(a1)
0001BB0E 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001BB12                            
0001BB12                            Obj77_ShipMain:	; Routine 2
0001BB12 43F8 D000                  		lea	(v_player).w,a1
0001BB16 7000                       		moveq	#0,d0
0001BB18 1028 0025                  		move.b	ob2ndRout(a0),d0
0001BB1C 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001BB20 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001BB24 43F9 0001 B8CE             		lea	(Ani_Eggman).l,a1
0001BB2A 4EB9 0000 C880             		jsr	(AnimateSprite).l
0001BB30 7003                       		moveq	#3,d0
0001BB32 C028 0022                  		and.b	obStatus(a0),d0
0001BB36 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BB3C 8128 0001                  		or.b	d0,obRender(a0)
0001BB40 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001BB46                            ; ===========================================================================
0001BB46 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001BB4A 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
0001BB4E 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001BB52 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001BB56                            ; ===========================================================================
0001BB56                            
0001BB56                            loc_17F1E:
0001BB56 3029 0008                  		move.w	obX(a1),d0
0001BB5A 0C40 1DA0                  		cmpi.w	#$1DA0,d0
0001BB5E 6500                       		bcs.s	loc_17F38
0001BB60 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001BB66 317C 0060 0010             		move.w	#$60,obVelX(a0)
0001BB6C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BB70                            
0001BB70                            loc_17F38:
0001BB70 6100 F948                  		bsr.w	BossMove
0001BB74 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001BB7A 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001BB80                            
0001BB80                            loc_17F48:
0001BB80 4A28 003D                  		tst.b	$3D(a0)
0001BB84 6600                       		bne.s	loc_17F8E
0001BB86 4A28 0022                  		tst.b	obStatus(a0)
0001BB8A 6B00                       		bmi.s	loc_17F92
0001BB8C 4A28 0020                  		tst.b	obColType(a0)
0001BB90 6600                       		bne.s	locret_17F8C
0001BB92 4A28 003E                  		tst.b	$3E(a0)
0001BB96 6600                       		bne.s	loc_17F70
0001BB98 117C 0020 003E             		move.b	#$20,$3E(a0)
0001BBA8                            
0001BBA8                            loc_17F70:
0001BBA8 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001BBAC 7000                       		moveq	#0,d0
0001BBAE 4A51                       		tst.w	(a1)
0001BBB0 6600                       		bne.s	loc_17F7E
0001BBB2 303C 0EEE                  		move.w	#cWhite,d0
0001BBB6                            
0001BBB6                            loc_17F7E:
0001BBB6 3280                       		move.w	d0,(a1)
0001BBB8 5328 003E                  		subq.b	#1,$3E(a0)
0001BBBC 6600                       		bne.s	locret_17F8C
0001BBBE 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BBC4                            
0001BBC4                            locret_17F8C:
0001BBC4 4E75                       		rts	
0001BBC6                            ; ===========================================================================
0001BBC6                            
0001BBC6                            loc_17F8E:
0001BBC6 6000 F8B0                  		bra.w	BossDefeated
0001BBCA                            ; ===========================================================================
0001BBCA                            
0001BBCA                            loc_17F92:
0001BBCA 7064                       		moveq	#100,d0
0001BBCC 6100 0000                  		bsr.w	AddPoints
0001BBD0 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001BBD6 4E75                       		rts	
0001BBD8                            ; ===========================================================================
0001BBD8                            
0001BBD8                            loc_17FA0:
0001BBD8 70FE                       		moveq	#-2,d0
0001BBDA 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001BBE0 6500                       		bcs.s	loc_17FB6
0001BBE2 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001BBE8 4268 0010                  		clr.w	obVelX(a0)
0001BBEC 5240                       		addq.w	#1,d0
0001BBEE                            
0001BBEE                            loc_17FB6:
0001BBEE 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001BBF4 6E00                       		bgt.s	loc_17FCA
0001BBF6 317C 0500 0038             		move.w	#$500,$38(a0)
0001BBFC 4268 0012                  		clr.w	obVelY(a0)
0001BC00 5240                       		addq.w	#1,d0
0001BC02                            
0001BC02                            loc_17FCA:
0001BC02 6600                       		bne.s	loc_17FDC
0001BC04 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001BC0A 317C FE00 0012             		move.w	#-$200,obVelY(a0)
0001BC10 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BC14                            
0001BC14                            loc_17FDC:
0001BC14 6000 FF5A                  		bra.w	loc_17F38
0001BC18                            ; ===========================================================================
0001BC18                            
0001BC18                            loc_17FE0:
0001BC18 70FE                       		moveq	#-2,d0
0001BC1A 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001BC20 6500                       		bcs.s	loc_17FF6
0001BC22 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001BC28 4268 0010                  		clr.w	obVelX(a0)
0001BC2C 5240                       		addq.w	#1,d0
0001BC2E                            
0001BC2E                            loc_17FF6:
0001BC2E 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001BC34 6E00                       		bgt.s	loc_1800A
0001BC36 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001BC3C 4268 0012                  		clr.w	obVelY(a0)
0001BC40 5240                       		addq.w	#1,d0
0001BC42                            
0001BC42                            loc_1800A:
0001BC42 6600                       		bne.s	loc_1801A
0001BC44 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001BC4A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BC4E 4228 003F                  		clr.b	$3F(a0)
0001BC52                            
0001BC52                            loc_1801A:
0001BC52 6000 FF1C                  		bra.w	loc_17F38
0001BC56                            ; ===========================================================================
0001BC56                            
0001BC56                            loc_1801E:
0001BC56 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001BC5C 6E00                       		bgt.s	loc_1804E
0001BC5E 317C 0100 0038             		move.w	#$100,$38(a0)
0001BC64 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001BC6A 317C FF80 0012             		move.w	#-$80,obVelY(a0)
0001BC70 4A28 003D                  		tst.b	$3D(a0)
0001BC74 6700                       		beq.s	loc_18046
0001BC76 E1E8 0010                  		asl	obVelX(a0)
0001BC7A E1E8 0012                  		asl	obVelY(a0)
0001BC7E                            
0001BC7E                            loc_18046:
0001BC7E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BC82 6000 FEEC                  		bra.w	loc_17F38
0001BC86                            ; ===========================================================================
0001BC86                            
0001BC86                            loc_1804E:
0001BC86 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BC8C 5428 003F                  		addq.b	#2,$3F(a0)
0001BC90 1028 003F                  		move.b	$3F(a0),d0
0001BC94 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001BC9A 4A41                       		tst.w	d1
0001BC9C 6A00                       		bpl.s	loc_1806C
0001BC9E 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BCA4                            
0001BCA4                            loc_1806C:
0001BCA4 E840                       		asr.w	#4,d0
0001BCA6 4840                       		swap	d0
0001BCA8 4240                       		clr.w	d0
0001BCAA D0A8 0030                  		add.l	$30(a0),d0
0001BCAE 4840                       		swap	d0
0001BCB0 3140 0008                  		move.w	d0,obX(a0)
0001BCB4 3028 0012                  		move.w	obVelY(a0),d0
0001BCB8 3238 D00C                  		move.w	(v_player+obY).w,d1
0001BCBC 9268 000C                  		sub.w	obY(a0),d1
0001BCC0 6500                       		bcs.s	loc_180A2
0001BCC2 0441 0048                  		subi.w	#$48,d1
0001BCC6 6500                       		bcs.s	loc_180A2
0001BCC8 E240                       		asr.w	#1,d0
0001BCCA 0441 0028                  		subi.w	#$28,d1
0001BCCE 6500                       		bcs.s	loc_180A2
0001BCD0 E240                       		asr.w	#1,d0
0001BCD2 0441 0028                  		subi.w	#$28,d1
0001BCD6 6500                       		bcs.s	loc_180A2
0001BCD8 7000                       		moveq	#0,d0
0001BCDA                            
0001BCDA                            loc_180A2:
0001BCDA 48C0                       		ext.l	d0
0001BCDC E180                       		asl.l	#8,d0
0001BCDE 4A28 003D                  		tst.b	$3D(a0)
0001BCE2 6700                       		beq.s	loc_180AE
0001BCE4 D080                       		add.l	d0,d0
0001BCE6                            
0001BCE6                            loc_180AE:
0001BCE6 D1A8 0038                  		add.l	d0,$38(a0)
0001BCEA 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001BCF0 6000 FE8E                  		bra.w	loc_17F48
0001BCF4                            ; ===========================================================================
0001BCF4                            
0001BCF4                            loc_180BC:
0001BCF4 70FE                       		moveq	#-2,d0
0001BCF6 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001BCFC 6500                       		bcs.s	loc_180D2
0001BCFE 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001BD04 4268 0010                  		clr.w	obVelX(a0)
0001BD08 5240                       		addq.w	#1,d0
0001BD0A                            
0001BD0A                            loc_180D2:
0001BD0A 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001BD10 6E00                       		bgt.s	loc_180E6
0001BD12 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001BD18 4268 0012                  		clr.w	obVelY(a0)
0001BD1C 5240                       		addq.w	#1,d0
0001BD1E                            
0001BD1E                            loc_180E6:
0001BD1E 6600                       		bne.s	loc_180F2
0001BD20 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BD24 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BD2A                            
0001BD2A                            loc_180F2:
0001BD2A 6000 FE44                  		bra.w	loc_17F38
0001BD2E                            ; ===========================================================================
0001BD2E                            
0001BD2E                            loc_180F6:
0001BD2E 4A28 003D                  		tst.b	$3D(a0)
0001BD32 6600                       		bne.s	loc_18112
0001BD34 0C69 1EC8 0008             		cmpi.w	#$1EC8,obX(a1)
0001BD3A 6D00                       		blt.s	loc_18126
0001BD3C 0C69 00F0 000C             		cmpi.w	#$F0,obY(a1)
0001BD42 6E00                       		bgt.s	loc_18126
0001BD44 117C 0032 003C             		move.b	#$32,$3C(a0)
0001BD4A                            
0001BD4A                            loc_18112:
0001BD4A 4A38 FE2D                          tst.b     (v_invinc).w
0001BD4E 6600                               bne.s   @boss_invinc
0001BD50                            
0001BD50 1038 F5C6                          move.b   (v_Saved_music),d0
0001BD54 6000 0000                          bra.w      @boss_play
0001BD58                            
0001BD58                            @boss_invinc:
0001BD58 103C 0000                          move.b #bgm_Invincible,d0
0001BD5C                            
0001BD5C                            @boss_play:
0001BD5C 4EB8 129A                          jsr PlaySound
0001BD60 4238 F7AA                          clr.b    (f_lockscreen).w
0001BD64 08E8 0000 0022                     bset    #0,obStatus(a0)
0001BD6A 5428 0025                          addq.b    #2,ob2ndRout(a0)
0001BD6E                            
0001BD6E                            loc_18126:
0001BD6E 6000 FE00                  		bra.w	loc_17F38
0001BD72                            ; ===========================================================================
0001BD72                            
0001BD72                            loc_1812A:
0001BD72 4A28 003D                  		tst.b	$3D(a0)
0001BD76 6600                       		bne.s	loc_18136
0001BD78 5328 003C                  		subq.b	#1,$3C(a0)
0001BD7C 6600                       		bne.s	loc_1814E
0001BD7E                            
0001BD7E                            loc_18136:
0001BD7E 4228 003C                  		clr.b	$3C(a0)
0001BD82 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001BD88 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001BD8E 4228 003D                  		clr.b	$3D(a0)
0001BD92 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BD96                            
0001BD96                            loc_1814E:
0001BD96 6000 FDD8                  		bra.w	loc_17F38
0001BD9A                            ; ===========================================================================
0001BD9A                            
0001BD9A                            loc_18152:
0001BD9A 0C78 2030 F72A             		cmpi.w	#$2030,(v_limitright2).w
0001BDA0 6400                       		bcc.s	loc_18160
0001BDA2 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001BDA6 6000                       		bra.s	loc_18166
0001BDA8                            ; ===========================================================================
0001BDA8                            
0001BDA8                            loc_18160:
0001BDA8 4A28 0001                  		tst.b	obRender(a0)
0001BDAC 6A00                       		bpl.s	Obj77_ShipDel
0001BDAE                            
0001BDAE                            loc_18166:
0001BDAE 6000 FDC0                  		bra.w	loc_17F38
0001BDB2                            ; ===========================================================================
0001BDB2                            
0001BDB2                            Obj77_ShipDel:
0001BDB2 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001BDB8                            ; ===========================================================================
0001BDB8                            
0001BDB8                            Obj77_FaceMain:	; Routine 4
0001BDB8 2268 0034                  		movea.l	$34(a0),a1
0001BDBC 1011                       		move.b	(a1),d0
0001BDBE B010                       		cmp.b	(a0),d0
0001BDC0 6600                       		bne.s	Obj77_FaceDel
0001BDC2 7000                       		moveq	#0,d0
0001BDC4 1029 0025                  		move.b	ob2ndRout(a1),d0
0001BDC8 7201                       		moveq	#1,d1
0001BDCA 4A28 003D                  		tst.b	$3D(a0)
0001BDCE 6700                       		beq.s	loc_1818C
0001BDD0 720A                       		moveq	#$A,d1
0001BDD2 6000                       		bra.s	loc_181A0
0001BDD4                            ; ===========================================================================
0001BDD4                            
0001BDD4                            loc_1818C:
0001BDD4 4A29 0020                  		tst.b	obColType(a1)
0001BDD8 6600                       		bne.s	loc_18196
0001BDDA 7205                       		moveq	#5,d1
0001BDDC 6000                       		bra.s	loc_181A0
0001BDDE                            ; ===========================================================================
0001BDDE                            
0001BDDE                            loc_18196:
0001BDDE 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001BDE4 6500                       		bcs.s	loc_181A0
0001BDE6 7204                       		moveq	#4,d1
0001BDE8                            
0001BDE8                            loc_181A0:
0001BDE8 1141 001C                  		move.b	d1,obAnim(a0)
0001BDEC 0C00 000E                  		cmpi.b	#$E,d0
0001BDF0 6600                       		bne.s	loc_181B6
0001BDF2 117C 0006 001C             		move.b	#6,obAnim(a0)
0001BDF8 4A28 0001                  		tst.b	obRender(a0)
0001BDFC 6A00                       		bpl.s	Obj77_FaceDel
0001BDFE                            
0001BDFE                            loc_181B6:
0001BDFE 6000                       		bra.s	Obj77_Display
0001BE00                            ; ===========================================================================
0001BE00                            
0001BE00                            Obj77_FaceDel:
0001BE00 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001BE06                            ; ===========================================================================
0001BE06                            
0001BE06                            Obj77_FlameMain:; Routine 6
0001BE06 117C 0007 001C             		move.b	#7,obAnim(a0)
0001BE0C 2268 0034                  		movea.l	$34(a0),a1
0001BE10 1011                       		move.b	(a1),d0
0001BE12 B010                       		cmp.b	(a0),d0
0001BE14 6600                       		bne.s	Obj77_FlameDel
0001BE16 0C29 000E 0025             		cmpi.b	#$E,ob2ndRout(a1)
0001BE1C 6600                       		bne.s	loc_181F0
0001BE1E 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001BE24 4A28 0001                  		tst.b	1(a0)
0001BE28 6A00                       		bpl.s	Obj77_FlameDel
0001BE2A 6000                       		bra.s	loc_181F0
0001BE2C                            ; ===========================================================================
0001BE2C 4A69 0010                  		tst.w	obVelX(a1)
0001BE30 6700                       		beq.s	loc_181F0
0001BE32 117C 0008 001C             		move.b	#8,obAnim(a0)
0001BE38                            
0001BE38                            loc_181F0:
0001BE38 6000                       		bra.s	Obj77_Display
0001BE3A                            ; ===========================================================================
0001BE3A                            
0001BE3A                            Obj77_FlameDel:
0001BE3A 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001BE40                            ; ===========================================================================
0001BE40                            
0001BE40                            Obj77_Display:
0001BE40 43F9 0001 B8CE             		lea	(Ani_Eggman).l,a1
0001BE46 4EB9 0000 C880             		jsr	(AnimateSprite).l
0001BE4C 2268 0034                  		movea.l	$34(a0),a1
0001BE50 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001BE56 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001BE5C 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001BE62 7003                       		moveq	#3,d0
0001BE64 C028 0022                  		and.b	obStatus(a0),d0
0001BE68 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BE6E 8128 0001                  		or.b	d0,obRender(a0)
0001BE72 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001BE72 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001BE78                            		include	"_incObj\73 Boss - Marble.asm"
0001BE78                            ; ---------------------------------------------------------------------------
0001BE78                            ; Object 73 - Eggman (MZ)
0001BE78                            ; ---------------------------------------------------------------------------
0001BE78                            
0001BE78                            BossMarble:
0001BE78 7000                       		moveq	#0,d0
0001BE7A 1028 0024                  		move.b	obRoutine(a0),d0
0001BE7E 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001BE82 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001BE86                            ; ===========================================================================
0001BE86 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001BE88 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001BE8A 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001BE8C 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001BE8E 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001BE90                            
0001BE90 0200 0200                  Obj73_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001BE94 0401 0200                  		dc.b 4,	1, $02, $00
0001BE98 0607 0200                  		dc.b 6,	7, $02, $00
0001BE9C 0800 0180                  		dc.b 8,	0, $01, $80
0001BEA0                            ; ===========================================================================
0001BEA0                            
0001BEA0                            Obj73_Main:	; Routine 0
0001BEA0 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001BEA6 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001BEAC 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BEB2 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001BEB8 45FA FFD6                  		lea	Obj73_ObjData(pc),a2
0001BEBC 2248                       		movea.l	a0,a1
0001BEBE 7203                       		moveq	#3,d1
0001BEC0 6000                       		bra.s	Obj73_LoadBoss
0001BEC2                            ; ===========================================================================
0001BEC2                            
0001BEC2                            Obj73_Loop:
0001BEC2 4EB9 0000 FD7A             		jsr	(FindNextFreeObj).l
0001BEC8 6600                       		bne.s	Obj73_ShipMain
0001BECA 12BC 0073                  		move.b	#id_BossMarble,0(a1)
0001BECE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BED4 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BEDA                            
0001BEDA                            Obj73_LoadBoss:
0001BEDA 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BEE0 4229 0025                  		clr.b	ob2ndRout(a1)
0001BEE4 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001BEE8 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001BEEC 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001BEF0 237C 0001 B91E 0004        		move.l	#Map_Eggman,obMap(a1)
0001BEF8 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001BEFE 137C 0004 0001             		move.b	#4,obRender(a1)
0001BF04 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001BF0A 2348 0034                  		move.l	a0,$34(a1)
0001BF0E 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001BF12                            
0001BF12                            Obj73_ShipMain:	; Routine 2
0001BF12 7000                       		moveq	#0,d0
0001BF14 1028 0025                  		move.b	ob2ndRout(a0),d0
0001BF18 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001BF1C 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001BF20 43F9 0001 B8CE             		lea	(Ani_Eggman).l,a1
0001BF26 4EB9 0000 C880             		jsr	(AnimateSprite).l
0001BF2C 7003                       		moveq	#3,d0
0001BF2E C028 0022                  		and.b	obStatus(a0),d0
0001BF32 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BF38 8128 0001                  		or.b	d0,obRender(a0)
0001BF3C 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001BF42                            ; ===========================================================================
0001BF42 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001BF44 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001BF46 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001BF48 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001BF4A 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001BF4C                            ; ===========================================================================
0001BF4C                            
0001BF4C                            loc_18302:
0001BF4C 1028 003F                  		move.b	$3F(a0),d0
0001BF50 5428 003F                  		addq.b	#2,$3F(a0)
0001BF54 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001BF5A E440                       		asr.w	#2,d0
0001BF5C 3140 0012                  		move.w	d0,obVelY(a0)
0001BF60 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001BF66 6100 F552                  		bsr.w	BossMove
0001BF6A 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001BF70 6600                       		bne.s	loc_18334
0001BF72 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BF76 4228 0028                  		clr.b	obSubtype(a0)
0001BF7A 42A8 0010                  		clr.l	obVelX(a0)
0001BF7E                            
0001BF7E                            loc_18334:
0001BF7E 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001BF84 1140 0034                  		move.b	d0,$34(a0)
0001BF88                            
0001BF88                            loc_1833E:
0001BF88 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001BF8E 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001BF94 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0001BF9A 6400                       		bcc.s	locret_18390
0001BF9C 4A28 0022                  		tst.b	obStatus(a0)
0001BFA0 6B00                       		bmi.s	loc_18392
0001BFA2 4A28 0020                  		tst.b	obColType(a0)
0001BFA6 6600                       		bne.s	locret_18390
0001BFA8 4A28 003E                  		tst.b	$3E(a0)
0001BFAC 6600                       		bne.s	loc_18374
0001BFAE 117C 0028 003E             		move.b	#$28,$3E(a0)
0001BFBE                            
0001BFBE                            loc_18374:
0001BFBE 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001BFC2 7000                       		moveq	#0,d0
0001BFC4 4A51                       		tst.w	(a1)
0001BFC6 6600                       		bne.s	loc_18382
0001BFC8 303C 0EEE                  		move.w	#cWhite,d0
0001BFCC                            
0001BFCC                            loc_18382:
0001BFCC 3280                       		move.w	d0,(a1)
0001BFCE 5328 003E                  		subq.b	#1,$3E(a0)
0001BFD2 6600                       		bne.s	locret_18390
0001BFD4 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BFDA                            
0001BFDA                            locret_18390:
0001BFDA 4E75                       		rts	
0001BFDC                            ; ===========================================================================
0001BFDC                            
0001BFDC                            loc_18392:
0001BFDC 7064                       		moveq	#100,d0
0001BFDE 6100 0000                  		bsr.w	AddPoints
0001BFE2 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
0001BFE8 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001BFEE 4268 0010                  		clr.w	obVelX(a0)
0001BFF2 4E75                       		rts	
0001BFF4                            ; ===========================================================================
0001BFF4                            
0001BFF4                            loc_183AA:
0001BFF4 7000                       		moveq	#0,d0
0001BFF6 1028 0028                  		move.b	obSubtype(a0),d0
0001BFFA 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001BFFE 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001C002 0228 0006 0028             		andi.b	#6,obSubtype(a0)
0001C008 6000 FF7E                  		bra.w	loc_1833E
0001C00C                            ; ===========================================================================
0001C00C 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001C00E 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001C010 0000                       		dc.w loc_183CA-off_183C2
0001C012 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001C014                            ; ===========================================================================
0001C014                            
0001C014                            loc_183CA:
0001C014 4A68 0010                  		tst.w	obVelX(a0)
0001C018 6600                       		bne.s	loc_183FE
0001C01A 7040                       		moveq	#$40,d0
0001C01C 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001C022 6700                       		beq.s	loc_183E6
0001C024 6500                       		bcs.s	loc_183DE
0001C026 4440                       		neg.w	d0
0001C028                            
0001C028                            loc_183DE:
0001C028 3140 0012                  		move.w	d0,obVelY(a0)
0001C02C 6000 F48C                  		bra.w	BossMove
0001C030                            ; ===========================================================================
0001C030                            
0001C030                            loc_183E6:
0001C030 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001C036 317C 0100 0012             		move.w	#$100,obVelY(a0)
0001C03C 0828 0000 0022             		btst	#0,obStatus(a0)
0001C042 6600                       		bne.s	loc_183FE
0001C044 4468 0010                  		neg.w	obVelX(a0)
0001C048                            
0001C048                            loc_183FE:
0001C048 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001C04E 6400                       		bcc.s	Obj73_MakeLava
0001C050 6100 F468                  		bsr.w	BossMove
0001C054 5968 0012                  		subq.w	#4,obVelY(a0)
0001C058                            
0001C058                            Obj73_MakeLava:
0001C058 5328 0034                  		subq.b	#1,$34(a0)
0001C05C 6400                       		bcc.s	loc_1845C
0001C05E 4EB9 0000 FD64             		jsr	(FindFreeObj).l
0001C064 6600                       		bne.s	loc_1844A
0001C066 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
0001C06A 337C 02E8 000C             		move.w	#$2E8,obY(a1)	; set Y	position
0001C070 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001C076 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001C07C 80FC 0050                  		divu.w	#$50,d0
0001C080 4840                       		swap	d0
0001C082 0640 1878                  		addi.w	#$1878,d0
0001C086 3340 0008                  		move.w	d0,obX(a1)
0001C08A EE09                       		lsr.b	#7,d1
0001C08C 337C 00FF 0028             		move.w	#$FF,obSubtype(a1)
0001C092                            
0001C092                            loc_1844A:
0001C092 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001C098 0200 001F                  		andi.b	#$1F,d0
0001C09C 0600 0040                  		addi.b	#$40,d0
0001C0A0 1140 0034                  		move.b	d0,$34(a0)
0001C0A4                            
0001C0A4                            loc_1845C:
0001C0A4 0828 0000 0022             		btst	#0,obStatus(a0)
0001C0AA 6700                       		beq.s	loc_18474
0001C0AC 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001C0B2 6D00                       		blt.s	locret_1849C
0001C0B4 317C 1910 0030             		move.w	#$1910,$30(a0)
0001C0BA 6000                       		bra.s	loc_18482
0001C0BC                            ; ===========================================================================
0001C0BC                            
0001C0BC                            loc_18474:
0001C0BC 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001C0C2 6E00                       		bgt.s	locret_1849C
0001C0C4 317C 1830 0030             		move.w	#$1830,$30(a0)
0001C0CA                            
0001C0CA                            loc_18482:
0001C0CA 4268 0010                  		clr.w	obVelX(a0)
0001C0CE 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001C0D4 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001C0DA 6400                       		bcc.s	loc_18498
0001C0DC 4468 0012                  		neg.w	obVelY(a0)
0001C0E0                            
0001C0E0                            loc_18498:
0001C0E0 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C0E4                            
0001C0E4                            locret_1849C:
0001C0E4 4E75                       		rts	
0001C0E6                            ; ===========================================================================
0001C0E6                            
0001C0E6                            Obj73_MakeLava2:
0001C0E6 6100 F3D2                  		bsr.w	BossMove
0001C0EA 3028 0038                  		move.w	$38(a0),d0
0001C0EE 0440 022C                  		subi.w	#$22C,d0
0001C0F2 6E00                       		bgt.s	locret_184F4
0001C0F4 303C 022C                  		move.w	#$22C,d0
0001C0F8 4A68 0012                  		tst.w	obVelY(a0)
0001C0FC 6700                       		beq.s	loc_184EA
0001C0FE 4268 0012                  		clr.w	obVelY(a0)
0001C102 317C 0050 003C             		move.w	#$50,$3C(a0)
0001C108 0868 0000 0022             		bchg	#0,obStatus(a0)
0001C10E 4EB9 0000 FD64             		jsr	(FindFreeObj).l
0001C114 6600                       		bne.s	loc_184EA
0001C116 3368 0030 0008             		move.w	$30(a0),obX(a1)
0001C11C 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001C122 0669 0018 000C             		addi.w	#$18,obY(a1)
0001C128 12BC 0074                  		move.b	#id_BossFire,(a1)	; load lava ball object
0001C12C 137C 0001 0028             		move.b	#1,obSubtype(a1)
0001C132                            
0001C132                            loc_184EA:
0001C132 5368 003C                  		subq.w	#1,$3C(a0)
0001C136 6600                       		bne.s	locret_184F4
0001C138 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C13C                            
0001C13C                            locret_184F4:
0001C13C 4E75                       		rts	
0001C13E                            ; ===========================================================================
0001C13E                            
0001C13E                            loc_184F6:
0001C13E 5368 003C                  		subq.w	#1,$3C(a0)
0001C142 6B00                       		bmi.s	loc_18500
0001C144 6000 F332                  		bra.w	BossDefeated
0001C148                            ; ===========================================================================
0001C148                            
0001C148                            loc_18500:
0001C148 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C14E 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001C154 4268 0010                  		clr.w	obVelX(a0)
0001C158 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C15C 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001C162 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001C166 6600                       		bne.s	locret_1852A
0001C168 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001C16E 4268 0012                  		clr.w	obVelY(a0)
0001C172                            
0001C172                            locret_1852A:
0001C172 4E75                       		rts	
0001C174                            ; ===========================================================================
0001C174                            
0001C174                            loc_1852C:
0001C174 5268 003C                  		addq.w	#1,$3C(a0)
0001C178 6700                       		beq.s	loc_18544
0001C17A 6A00                       		bpl.s	loc_1854E
0001C17C 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001C182 6400                       		bcc.s	loc_18544
0001C184 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C18A 6000                       		bra.s	loc_1857A
0001C18C                            ; ===========================================================================
0001C18C                            
0001C18C                            loc_18544:
0001C18C 4268 0012                  		clr.w	obVelY(a0)
0001C190 4268 003C                  		clr.w	$3C(a0)
0001C194 6000                       		bra.s	loc_1857A
0001C196                            ; ===========================================================================
0001C196                            
0001C196                            loc_1854E:
0001C196 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001C19C 6500                       		bcs.s	loc_18566
0001C19E 6700                       		beq.s	loc_1856C
0001C1A0 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001C1A6 6500                       		bcs.s	loc_1857A
0001C1A8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C1AC 6000                       		bra.s	loc_1857A
0001C1AE                            ; ===========================================================================
0001C1AE                            
0001C1AE                            loc_18566:
0001C1AE 5168 0012                  		subq.w	#8,obVelY(a0)
0001C1B2 6000                       		bra.s	loc_1857A
0001C1B4                            ; ===========================================================================
0001C1B4                            
0001C1B4                            loc_1856C:
0001C1B4 4268 0012                  		clr.w	obVelY(a0)
0001C1C2                            
0001C1C2                            loc_1857A:
0001C1C2 6100 F2F6                  		bsr.w	BossMove
0001C1C6 6000 FDC0                  		bra.w	loc_1833E
0001C1CA                            ; ===========================================================================
0001C1CA                            
0001C1CA                            loc_18582:
0001C1CA 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001C1D0 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001C1D6 0C78 1960 F72A             		cmpi.w	#$1960,(v_limitright2).w
0001C1DC 6400                       		bcc.s	loc_1859C
0001C1DE 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001C1E2 6000                       		bra.s	loc_185A2
0001C1E4                            ; ===========================================================================
0001C1E4                            
0001C1E4                            loc_1859C:
0001C1E4 4A28 0001                  		tst.b	obRender(a0)
0001C1E8 6A00                       		bpl.s	Obj73_ShipDel
0001C1EA                            
0001C1EA                            loc_185A2:
0001C1EA 6100 F2CE                  		bsr.w	BossMove
0001C1EE 6000 FD98                  		bra.w	loc_1833E
0001C1F2                            ; ===========================================================================
0001C1F2                            
0001C1F2                            Obj73_ShipDel:
0001C1F2 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001C1F8                            ; ===========================================================================
0001C1F8                            
0001C1F8                            Obj73_FaceMain:	; Routine 4
0001C1F8 7000                       		moveq	#0,d0
0001C1FA 7201                       		moveq	#1,d1
0001C1FC 2268 0034                  		movea.l	$34(a0),a1
0001C200 1029 0025                  		move.b	ob2ndRout(a1),d0
0001C204 5540                       		subq.w	#2,d0
0001C206 6600                       		bne.s	loc_185D2
0001C208 0829 0001 0028             		btst	#1,obSubtype(a1)
0001C20E 6700                       		beq.s	loc_185DA
0001C210 4A69 0012                  		tst.w	obVelY(a1)
0001C214 6600                       		bne.s	loc_185DA
0001C216 7204                       		moveq	#4,d1
0001C218 6000                       		bra.s	loc_185EE
0001C21A                            ; ===========================================================================
0001C21A                            
0001C21A                            loc_185D2:
0001C21A 5500                       		subq.b	#2,d0
0001C21C 6B00                       		bmi.s	loc_185DA
0001C21E 720A                       		moveq	#$A,d1
0001C220 6000                       		bra.s	loc_185EE
0001C222                            ; ===========================================================================
0001C222                            
0001C222                            loc_185DA:
0001C222 4A29 0020                  		tst.b	obColType(a1)
0001C226 6600                       		bne.s	loc_185E4
0001C228 7205                       		moveq	#5,d1
0001C22A 6000                       		bra.s	loc_185EE
0001C22C                            ; ===========================================================================
0001C22C                            
0001C22C                            loc_185E4:
0001C22C 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001C232 6500                       		bcs.s	loc_185EE
0001C234 7204                       		moveq	#4,d1
0001C236                            
0001C236                            loc_185EE:
0001C236 1141 001C                  		move.b	d1,obAnim(a0)
0001C23A 5900                       		subq.b	#4,d0
0001C23C 6600                       		bne.s	loc_18602
0001C23E 117C 0006 001C             		move.b	#6,obAnim(a0)
0001C244 4A28 0001                  		tst.b	obRender(a0)
0001C248 6A00                       		bpl.s	Obj73_FaceDel
0001C24A                            
0001C24A                            loc_18602:
0001C24A 6000                       		bra.s	Obj73_Display
0001C24C                            ; ===========================================================================
0001C24C                            
0001C24C                            Obj73_FaceDel:
0001C24C 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001C252                            ; ===========================================================================
0001C252                            
0001C252                            Obj73_FlameMain:; Routine 6
0001C252 117C 0007 001C             		move.b	#7,obAnim(a0)
0001C258 2268 0034                  		movea.l	$34(a0),a1
0001C25C 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001C262 6D00                       		blt.s	loc_1862A
0001C264 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001C26A 4A28 0001                  		tst.b	obRender(a0)
0001C26E 6A00                       		bpl.s	Obj73_FlameDel
0001C270 6000                       		bra.s	loc_18636
0001C272                            ; ===========================================================================
0001C272                            
0001C272                            loc_1862A:
0001C272 4A69 0010                  		tst.w	obVelX(a1)
0001C276 6700                       		beq.s	loc_18636
0001C278 117C 0008 001C             		move.b	#8,obAnim(a0)
0001C27E                            
0001C27E                            loc_18636:
0001C27E 6000                       		bra.s	Obj73_Display
0001C280                            ; ===========================================================================
0001C280                            
0001C280                            Obj73_FlameDel:
0001C280 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001C286                            ; ===========================================================================
0001C286                            
0001C286                            Obj73_Display:
0001C286 43F9 0001 B8CE             		lea	(Ani_Eggman).l,a1
0001C28C 4EB9 0000 C880             		jsr	(AnimateSprite).l
0001C292                            
0001C292                            loc_1864A:
0001C292 2268 0034                  		movea.l	$34(a0),a1
0001C296 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C29C 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C2A2 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001C2A8 7003                       		moveq	#3,d0
0001C2AA C028 0022                  		and.b	obStatus(a0),d0
0001C2AE 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C2B4 8128 0001                  		or.b	d0,obRender(a0)
0001C2B8 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001C2BE                            ; ===========================================================================
0001C2BE                            
0001C2BE                            Obj73_TubeMain:	; Routine 8
0001C2BE 2268 0034                  		movea.l	$34(a0),a1
0001C2C2 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001C2C8 6600                       		bne.s	loc_18688
0001C2CA 4A28 0001                  		tst.b	obRender(a0)
0001C2CE 6A00                       		bpl.s	Obj73_TubeDel
0001C2D0                            
0001C2D0                            loc_18688:
0001C2D0 217C 0001 BA0E 0004        		move.l	#Map_BossItems,obMap(a0)
0001C2D8 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001C2DE 117C 0004 001A             		move.b	#4,obFrame(a0)
0001C2E4 60AC                       		bra.s	loc_1864A
0001C2E6                            ; ===========================================================================
0001C2E6                            
0001C2E6                            Obj73_TubeDel:
0001C2E6 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001C2E6 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001C2EC                            		include	"_incObj\74 MZ Boss Fire.asm"
0001C2EC                            ; ---------------------------------------------------------------------------
0001C2EC                            ; Object 74 - lava that	Eggman drops (MZ)
0001C2EC                            ; ---------------------------------------------------------------------------
0001C2EC                            
0001C2EC                            BossFire:
0001C2EC 7000                       		moveq	#0,d0
0001C2EE 1028 0024                  		move.b	obRoutine(a0),d0
0001C2F2 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001C2F6 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001C2FA 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001C300                            ; ===========================================================================
0001C300 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001C302 0000                       		dc.w Obj74_Action-Obj74_Index
0001C304 0000                       		dc.w loc_18886-Obj74_Index
0001C306 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001C308                            ; ===========================================================================
0001C308                            
0001C308                            Obj74_Main:	; Routine 0
0001C308 117C 0008 0016             		move.b	#8,obHeight(a0)
0001C30E 117C 0008 0017             		move.b	#8,obWidth(a0)
0001C314 217C 0000 D4D2 0004        		move.l	#Map_Fire,obMap(a0)
0001C31C 317C 0345 0002             		move.w	#$345,obGfx(a0)
0001C322 117C 0004 0001             		move.b	#4,obRender(a0)
0001C328 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001C32E 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C334 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C33A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C33E 4A28 0028                  		tst.b	obSubtype(a0)
0001C342 6600                       		bne.s	loc_1870A
0001C344 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001C34A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C34E 6000 0000                  		bra.w	loc_18886
0001C352                            ; ===========================================================================
0001C352                            
0001C352                            loc_1870A:
0001C352 117C 001E 0029             		move.b	#$1E,$29(a0)
0001C362                            
0001C362                            Obj74_Action:	; Routine 2
0001C362 7000                       		moveq	#0,d0
0001C364 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C368 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001C36C 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001C370 4EB9 0000 F7B6             		jsr	(SpeedToPos).l
0001C376 43F9 0001 07AE             		lea	(Ani_Fire).l,a1
0001C37C 4EB9 0000 C880             		jsr	(AnimateSprite).l
0001C382 0C68 02E8 000C             		cmpi.w	#$2E8,obY(a0)
0001C388 6200                       		bhi.s	Obj74_Delete
0001C38A 4E75                       		rts	
0001C38C                            ; ===========================================================================
0001C38C                            
0001C38C                            Obj74_Delete:
0001C38C 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001C392                            ; ===========================================================================
0001C392 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001C394 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001C396 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001C398 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001C39A                            ; ===========================================================================
0001C39A                            
0001C39A                            Obj74_Drop:
0001C39A 08E8 0001 0022             		bset	#1,obStatus(a0)
0001C3A0 5328 0029                  		subq.b	#1,$29(a0)
0001C3A4 6A00                       		bpl.s	locret_18780
0001C3A6 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001C3AC 4228 0028                  		clr.b	obSubtype(a0)
0001C3B0 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C3B6 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001C3BC 6100 C5D0                  		bsr.w	ObjFloorDist
0001C3C0 4A41                       		tst.w	d1
0001C3C2 6A00                       		bpl.s	locret_18780
0001C3C4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C3C8                            
0001C3C8                            locret_18780:
0001C3C8 4E75                       		rts	
0001C3CA                            ; ===========================================================================
0001C3CA                            
0001C3CA                            Obj74_MakeFlame:
0001C3CA 5568 000C                  		subq.w	#2,obY(a0)
0001C3CE 08E8 0007 0002             		bset	#7,obGfx(a0)
0001C3D4 317C 00A0 0010             		move.w	#$A0,obVelX(a0)
0001C3DA 4268 0012                  		clr.w	obVelY(a0)
0001C3DE 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C3E4 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C3EA 117C 0003 0029             		move.b	#3,$29(a0)
0001C3F0 4EB9 0000 FD7A             		jsr	(FindNextFreeObj).l
0001C3F6 6600                       		bne.s	loc_187CA
0001C3F8 47D1                       		lea	(a1),a3
0001C3FA 45D0                       		lea	(a0),a2
0001C3FC 7003                       		moveq	#3,d0
0001C3FE                            
0001C3FE                            Obj74_Loop:
0001C3FE 26DA                       		move.l	(a2)+,(a3)+
0001C400 26DA                       		move.l	(a2)+,(a3)+
0001C402 26DA                       		move.l	(a2)+,(a3)+
0001C404 26DA                       		move.l	(a2)+,(a3)+
0001C406 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001C40A                            
0001C40A 4469 0010                  		neg.w	obVelX(a1)
0001C40E 5429 0025                  		addq.b	#2,ob2ndRout(a1)
0001C412                            
0001C412                            loc_187CA:
0001C412 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C416 4E75                       		rts	
0001C418                            
0001C418                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C418                            
0001C418                            
0001C418                            Obj74_Duplicate2:
0001C418 4EB9 0000 FD7A             		jsr	(FindNextFreeObj).l
0001C41E 6600                       		bne.s	locret_187EE
0001C420 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C426 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C42C 12BC 0074                  		move.b	#id_BossFire,(a1)
0001C430 337C 0067 0028             		move.w	#$67,obSubtype(a1)
0001C436                            
0001C436                            locret_187EE:
0001C436 4E75                       		rts	
0001C438                            ; End of function Obj74_Duplicate2
0001C438                            
0001C438                            ; ===========================================================================
0001C438                            
0001C438                            Obj74_Duplicate:
0001C438 6100 C554                  		bsr.w	ObjFloorDist
0001C43C 4A41                       		tst.w	d1
0001C43E 6A00                       		bpl.s	loc_18826
0001C440 3028 0008                  		move.w	obX(a0),d0
0001C444 0C40 1940                  		cmpi.w	#$1940,d0
0001C448 6E00                       		bgt.s	loc_1882C
0001C44A 3228 0030                  		move.w	$30(a0),d1
0001C44E B240                       		cmp.w	d0,d1
0001C450 6700                       		beq.s	loc_1881E
0001C452 0240 0010                  		andi.w	#$10,d0
0001C456 0241 0010                  		andi.w	#$10,d1
0001C45A B240                       		cmp.w	d0,d1
0001C45C 6700                       		beq.s	loc_1881E
0001C45E 61B8                       		bsr.s	Obj74_Duplicate2
0001C460 3168 0008 0032             		move.w	obX(a0),$32(a0)
0001C466                            
0001C466                            loc_1881E:
0001C466 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C46C 4E75                       		rts	
0001C46E                            ; ===========================================================================
0001C46E                            
0001C46E                            loc_18826:
0001C46E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C472 4E75                       		rts	
0001C474                            ; ===========================================================================
0001C474                            
0001C474                            loc_1882C:
0001C474 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C478 4E75                       		rts	
0001C47A                            ; ===========================================================================
0001C47A                            
0001C47A                            Obj74_FallEdge:
0001C47A 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001C480 0668 0024 0012             		addi.w	#$24,obVelY(a0)	; make flame fall
0001C486 3028 0008                  		move.w	obX(a0),d0
0001C48A 9068 0032                  		sub.w	$32(a0),d0
0001C48E 6A00                       		bpl.s	loc_1884A
0001C490 4440                       		neg.w	d0
0001C492                            
0001C492                            loc_1884A:
0001C492 0C40 0012                  		cmpi.w	#$12,d0
0001C496 6600                       		bne.s	loc_18856
0001C498 08A8 0007 0002             		bclr	#7,obGfx(a0)
0001C49E                            
0001C49E                            loc_18856:
0001C49E 6100 C4EE                  		bsr.w	ObjFloorDist
0001C4A2 4A41                       		tst.w	d1
0001C4A4 6A00                       		bpl.s	locret_1887E
0001C4A6 5328 0029                  		subq.b	#1,$29(a0)
0001C4AA 6700                       		beq.s	Obj74_Delete2
0001C4AC 4268 0012                  		clr.w	obVelY(a0)
0001C4B0 3168 0032 0008             		move.w	$32(a0),obX(a0)
0001C4B6 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001C4BC 08E8 0007 0002             		bset	#7,obGfx(a0)
0001C4C2 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001C4C6                            
0001C4C6                            locret_1887E:
0001C4C6 4E75                       		rts	
0001C4C8                            ; ===========================================================================
0001C4C8                            
0001C4C8                            Obj74_Delete2:
0001C4C8 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001C4CE                            ; ===========================================================================
0001C4CE                            
0001C4CE                            loc_18886:	; Routine 4
0001C4CE 08E8 0007 0002             		bset	#7,obGfx(a0)
0001C4D4 5328 0029                  		subq.b	#1,$29(a0)
0001C4D8 6600                       		bne.s	Obj74_Animate
0001C4DA 117C 0001 001C             		move.b	#1,obAnim(a0)
0001C4E0 5968 000C                  		subq.w	#4,obY(a0)
0001C4E4 4228 0020                  		clr.b	obColType(a0)
0001C4E8                            
0001C4E8                            Obj74_Animate:
0001C4E8 43F9 0001 07AE             		lea	(Ani_Fire).l,a1
0001C4EE 4EF9 0000 C880             		jmp	(AnimateSprite).l
0001C4F4                            ; ===========================================================================
0001C4F4                            
0001C4F4                            Obj74_Delete3:	; Routine 6
0001C4F4 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001C4F4 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001C4FA                            
0001C4FA                            	Obj7A_Delete:
0001C4FA 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001C500                            
0001C500                            		include	"_incObj\7A Boss - Star Light.asm"
0001C500                            ; ---------------------------------------------------------------------------
0001C500                            ; Object 7A - Eggman (SLZ)
0001C500                            ; ---------------------------------------------------------------------------
0001C500                            
0001C500                            BossStarLight:
0001C500 7000                       		moveq	#0,d0
0001C502 1028 0024                  		move.b	obRoutine(a0),d0
0001C506 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001C50A 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001C50E                            ; ===========================================================================
0001C50E 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001C510 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001C512 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001C514 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001C516 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001C518                            
0001C518 0200 0200                  Obj7A_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001C51C 0401 0200                  		dc.b 4,	1, $02, $00
0001C520 0607 0200                  		dc.b 6,	7, $02, $00
0001C524 0800 0180                  		dc.b 8,	0, $01, $80
0001C528                            ; ===========================================================================
0001C528                            
0001C528                            Obj7A_Main:
0001C528 317C 2188 0008             		move.w	#$2188,obX(a0)
0001C52E 317C 0228 000C             		move.w	#$228,obY(a0)
0001C534 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C53A 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C540 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C546 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001C54C 45FA FFCA                  		lea	Obj7A_ObjData(pc),a2
0001C550 2248                       		movea.l	a0,a1
0001C552 7203                       		moveq	#3,d1
0001C554 6000                       		bra.s	Obj7A_LoadBoss
0001C556                            ; ===========================================================================
0001C556                            
0001C556                            Obj7A_Loop:
0001C556 4EB9 0000 FD7A             		jsr	(FindNextFreeObj).l
0001C55C 6600                       		bne.s	loc_1895C
0001C55E 12BC 007A                  		move.b	#id_BossStarLight,0(a1)
0001C562 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C568 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C56E                            
0001C56E                            Obj7A_LoadBoss:
0001C56E 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C574 4229 0025                  		clr.b	ob2ndRout(a1)
0001C578 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C57C 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C580 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001C584 237C 0001 B91E 0004        		move.l	#Map_Eggman,obMap(a1)
0001C58C 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001C592 137C 0004 0001             		move.b	#4,obRender(a1)
0001C598 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001C59E 2348 0034                  		move.l	a0,$34(a1)
0001C5A2 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001C5A6                            
0001C5A6                            loc_1895C:
0001C5A6 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C5AA 45E8 002A                  		lea	$2A(a0),a2
0001C5AE 705E                       		moveq	#$5E,d0
0001C5B0 723E                       		moveq	#$3E,d1
0001C5B2                            
0001C5B2                            loc_18968:
0001C5B2 B011                       		cmp.b	(a1),d0
0001C5B4 6600                       		bne.s	loc_18974
0001C5B6 4A29 0028                  		tst.b	obSubtype(a1)
0001C5BA 6700                       		beq.s	loc_18974
0001C5BC 34C9                       		move.w	a1,(a2)+
0001C5BE                            
0001C5BE                            loc_18974:
0001C5BE D2FC 0040                  		adda.w	#$40,a1
0001C5C2 51C9 FFEE                  		dbf	d1,loc_18968
0001C5C6                            
0001C5C6                            Obj7A_ShipMain:	; Routine 2
0001C5C6 7000                       		moveq	#0,d0
0001C5C8 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C5CC 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001C5D0 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001C5D4 43F9 0001 B8CE             		lea	(Ani_Eggman).l,a1
0001C5DA 4EB9 0000 C880             		jsr	(AnimateSprite).l
0001C5E0 7003                       		moveq	#3,d0
0001C5E2 C028 0022                  		and.b	obStatus(a0),d0
0001C5E6 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C5EC 8128 0001                  		or.b	d0,obRender(a0)
0001C5F0 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001C5F6                            ; ===========================================================================
0001C5F6 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001C5F8 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001C5FA 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001C5FC 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001C5FE 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001C600 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001C602                            ; ===========================================================================
0001C602                            
0001C602                            loc_189B8:
0001C602 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001C608 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001C60E 6400                       		bcc.s	loc_189CA
0001C610 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C614                            
0001C614                            loc_189CA:
0001C614 6100 EEA4                  		bsr.w	BossMove
0001C618 1028 003F                  		move.b	$3F(a0),d0
0001C61C 5428 003F                  		addq.b	#2,$3F(a0)
0001C620 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001C626 EC40                       		asr.w	#6,d0
0001C628 D068 0038                  		add.w	$38(a0),d0
0001C62C 3140 000C                  		move.w	d0,obY(a0)
0001C630 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C636 6000                       		bra.s	loc_189FE
0001C638                            ; ===========================================================================
0001C638                            
0001C638                            loc_189EE:
0001C638 6100 EE80                  		bsr.w	BossMove
0001C63C 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001C642 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C648                            
0001C648                            loc_189FE:
0001C648 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001C64E 6400                       		bcc.s	locret_18A44
0001C650 4A28 0022                  		tst.b	obStatus(a0)
0001C654 6B00                       		bmi.s	loc_18A46
0001C656 4A28 0020                  		tst.b	obColType(a0)
0001C65A 6600                       		bne.s	locret_18A44
0001C65C 4A28 003E                  		tst.b	$3E(a0)
0001C660 6600                       		bne.s	loc_18A28
0001C662 117C 0020 003E             		move.b	#$20,$3E(a0)
0001C672                            
0001C672                            loc_18A28:
0001C672 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001C676 7000                       		moveq	#0,d0
0001C678 4A51                       		tst.w	(a1)
0001C67A 6600                       		bne.s	loc_18A36
0001C67C 303C 0EEE                  		move.w	#cWhite,d0
0001C680                            
0001C680                            loc_18A36:
0001C680 3280                       		move.w	d0,(a1)
0001C682 5328 003E                  		subq.b	#1,$3E(a0)
0001C686 6600                       		bne.s	locret_18A44
0001C688 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C68E                            
0001C68E                            locret_18A44:
0001C68E 4E75                       		rts	
0001C690                            ; ===========================================================================
0001C690                            
0001C690                            loc_18A46:
0001C690 7064                       		moveq	#100,d0
0001C692 6100 0000                  		bsr.w	AddPoints
0001C696 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001C69C 117C 0078 003C             		move.b	#$78,$3C(a0)
0001C6A2 4268 0010                  		clr.w	obVelX(a0)
0001C6A6 4E75                       		rts	
0001C6A8                            ; ===========================================================================
0001C6A8                            
0001C6A8                            loc_18A5E:
0001C6A8 3028 0030                  		move.w	$30(a0),d0
0001C6AC 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001C6B2 0828 0000 0022             		btst	#0,obStatus(a0)
0001C6B8 6600                       		bne.s	loc_18A7C
0001C6BA 4468 0010                  		neg.w	obVelX(a0)
0001C6BE 0C40 2008                  		cmpi.w	#$2008,d0
0001C6C2 6E00                       		bgt.s	loc_18A88
0001C6C4 6000                       		bra.s	loc_18A82
0001C6C6                            ; ===========================================================================
0001C6C6                            
0001C6C6                            loc_18A7C:
0001C6C6 0C40 2138                  		cmpi.w	#$2138,d0
0001C6CA 6D00                       		blt.s	loc_18A88
0001C6CC                            
0001C6CC                            loc_18A82:
0001C6CC 0868 0000 0022             		bchg	#0,obStatus(a0)
0001C6D2                            
0001C6D2                            loc_18A88:
0001C6D2 3028 0008                  		move.w	8(a0),d0
0001C6D6 72FF                       		moveq	#-1,d1
0001C6D8 7402                       		moveq	#2,d2
0001C6DA 45E8 002A                  		lea	$2A(a0),a2
0001C6DE 7828                       		moveq	#$28,d4
0001C6E0 4A68 0010                  		tst.w	obVelX(a0)
0001C6E4 6A00                       		bpl.s	loc_18A9E
0001C6E6 4444                       		neg.w	d4
0001C6E8                            
0001C6E8                            loc_18A9E:
0001C6E8 321A                       		move.w	(a2)+,d1
0001C6EA 2641                       		movea.l	d1,a3
0001C6EC 082B 0003 0022             		btst	#3,obStatus(a3)
0001C6F2 6600                       		bne.s	loc_18AB4
0001C6F4 362B 0008                  		move.w	8(a3),d3
0001C6F8 D644                       		add.w	d4,d3
0001C6FA 9640                       		sub.w	d0,d3
0001C6FC 6700                       		beq.s	loc_18AC0
0001C6FE                            
0001C6FE                            loc_18AB4:
0001C6FE 51CA FFE8                  		dbf	d2,loc_18A9E
0001C702                            
0001C702 1142 0028                  		move.b	d2,obSubtype(a0)
0001C706 6000 FF0C                  		bra.w	loc_189CA
0001C70A                            ; ===========================================================================
0001C70A                            
0001C70A                            loc_18AC0:
0001C70A 1142 0028                  		move.b	d2,obSubtype(a0)
0001C70E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C712 117C 0028 003C             		move.b	#$28,$3C(a0)
0001C718 6000 FEFA                  		bra.w	loc_189CA
0001C71C                            ; ===========================================================================
0001C71C                            
0001C71C                            Obj7A_MakeBall:
0001C71C 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001C722 6600                       		bne.s	loc_18B36
0001C724 70FF                       		moveq	#-1,d0
0001C726 1028 0028                  		move.b	obSubtype(a0),d0
0001C72A 4880                       		ext.w	d0
0001C72C 6B00                       		bmi.s	loc_18B40
0001C72E 5540                       		subq.w	#2,d0
0001C730 4440                       		neg.w	d0
0001C732 D040                       		add.w	d0,d0
0001C734 43E8 002A                  		lea	$2A(a0),a1
0001C738 3031 0000                  		move.w	(a1,d0.w),d0
0001C73C 2440                       		movea.l	d0,a2
0001C73E 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C742 723E                       		moveq	#$3E,d1
0001C744                            
0001C744                            loc_18AFA:
0001C744 B0A9 003C                  		cmp.l	$3C(a1),d0
0001C748 6700                       		beq.s	loc_18B40
0001C74A D2FC 0040                  		adda.w	#$40,a1
0001C74E 51C9 FFF4                  		dbf	d1,loc_18AFA
0001C752                            
0001C752 2F08                       		move.l	a0,-(sp)
0001C754 41D2                       		lea	(a2),a0
0001C756 4EB9 0000 FD7A             		jsr	(FindNextFreeObj).l
0001C75C 205F                       		movea.l	(sp)+,a0
0001C75E 6600                       		bne.s	loc_18B40
0001C760 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load spiked ball object
0001C764 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C76A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C770 0669 0020 000C             		addi.w	#$20,obY(a1)
0001C776 136A 0022 0022             		move.b	obStatus(a2),obStatus(a1)
0001C77C 234A 003C                  		move.l	a2,$3C(a1)
0001C780                            
0001C780                            loc_18B36:
0001C780 5328 003C                  		subq.b	#1,$3C(a0)
0001C784 6700                       		beq.s	loc_18B40
0001C786 6000 FEC0                  		bra.w	loc_189FE
0001C78A                            ; ===========================================================================
0001C78A                            
0001C78A                            loc_18B40:
0001C78A 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001C78E 6000 FE84                  		bra.w	loc_189CA
0001C792                            ; ===========================================================================
0001C792                            
0001C792                            loc_18B48:
0001C792 5328 003C                  		subq.b	#1,$3C(a0)
0001C796 6B00                       		bmi.s	loc_18B52
0001C798 6000 ECDE                  		bra.w	BossDefeated
0001C79C                            ; ===========================================================================
0001C79C                            
0001C79C                            loc_18B52:
0001C79C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C7A0 4268 0012                  		clr.w	obVelY(a0)
0001C7A4 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C7AA 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001C7B0 4268 0010                  		clr.w	obVelX(a0)
0001C7B4 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001C7BA 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001C7BE 6600                       		bne.s	loc_18B7C
0001C7C0 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001C7C6                            
0001C7C6                            loc_18B7C:
0001C7C6 6000 FE80                  		bra.w	loc_189FE
0001C7CA                            ; ===========================================================================
0001C7CA                            
0001C7CA                            loc_18B80:
0001C7CA 5228 003C                  		addq.b	#1,$3C(a0)
0001C7CE 6700                       		beq.s	loc_18B90
0001C7D0 6A00                       		bpl.s	loc_18B96
0001C7D2 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C7D8 6000                       		bra.s	loc_18BC2
0001C7DA                            ; ===========================================================================
0001C7DA                            
0001C7DA                            loc_18B90:
0001C7DA 4268 0012                  		clr.w	obVelY(a0)
0001C7DE 6000                       		bra.s	loc_18BC2
0001C7E0                            ; ===========================================================================
0001C7E0                            
0001C7E0                            loc_18B96:
0001C7E0 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001C7E6 6500                       		bcs.s	loc_18BAE
0001C7E8 6700                       		beq.s	loc_18BB4
0001C7EA 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001C7F0 6500                       		bcs.s	loc_18BC2
0001C7F2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C7F6 6000                       		bra.s	loc_18BC2
0001C7F8                            ; ===========================================================================
0001C7F8                            
0001C7F8                            loc_18BAE:
0001C7F8 5168 0012                  		subq.w	#8,obVelY(a0)
0001C7FC 6000                       		bra.s	loc_18BC2
0001C7FE                            ; ===========================================================================
0001C7FE                            
0001C7FE                            loc_18BB4:
0001C7FE 4268 0012                          	clr.w    obVelY(a0)
0001C802 4A38 FE2D                          	tst.b     (v_invinc).w
0001C806 6600                               	bne.s   @boss_invinc
0001C808                            
0001C808 1038 F5C6                          	move.b   (v_Saved_music),d0
0001C80C 6000 0000                          	bra.w      @boss_play
0001C810                            
0001C810                            	@boss_invinc:
0001C810 103C 0000                          	move.b #bgm_Invincible,d0
0001C814                            
0001C814                            	@boss_play:
0001C814 4EB8 129A                          	jsr PlaySound
0001C818                            
0001C818                            loc_18BC2:
0001C818 6000 FE1E                  		bra.w	loc_189EE
0001C81C                            ; ===========================================================================
0001C81C                            
0001C81C                            loc_18BC6:
0001C81C 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001C822 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001C828 0C78 2160 F72A             		cmpi.w	#$2160,(v_limitright2).w
0001C82E 6400                       		bcc.s	loc_18BE0
0001C830 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001C834 6000                       		bra.s	loc_18BE8
0001C836                            ; ===========================================================================
0001C836                            
0001C836                            loc_18BE0:
0001C836 4A28 0001                  		tst.b	obRender(a0)
0001C83A 6A00 FCBE                  		bpl.w	Obj7A_Delete
0001C83E                            
0001C83E                            loc_18BE8:
0001C83E 6100 EC7A                  		bsr.w	BossMove
0001C842 6000 FDD0                  		bra.w	loc_189CA
0001C846                            ; ===========================================================================
0001C846                            
0001C846                            Obj7A_FaceMain:	; Routine 4
0001C846 7000                       		moveq	#0,d0
0001C848 7201                       		moveq	#1,d1
0001C84A 2268 0034                  		movea.l	$34(a0),a1
0001C84E 1029 0025                  		move.b	ob2ndRout(a1),d0
0001C852 0C00 0006                  		cmpi.b	#6,d0
0001C856 6B00                       		bmi.s	loc_18C06
0001C858 720A                       		moveq	#$A,d1
0001C85A 6000                       		bra.s	loc_18C1A
0001C85C                            ; ===========================================================================
0001C85C                            
0001C85C                            loc_18C06:
0001C85C 4A29 0020                  		tst.b	obColType(a1)
0001C860 6600                       		bne.s	loc_18C10
0001C862 7205                       		moveq	#5,d1
0001C864 6000                       		bra.s	loc_18C1A
0001C866                            ; ===========================================================================
0001C866                            
0001C866                            loc_18C10:
0001C866 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001C86C 6500                       		bcs.s	loc_18C1A
0001C86E 7204                       		moveq	#4,d1
0001C870                            
0001C870                            loc_18C1A:
0001C870 1141 001C                  		move.b	d1,obAnim(a0)
0001C874 0C00 000A                  		cmpi.b	#$A,d0
0001C878 6600                       		bne.s	loc_18C32
0001C87A 117C 0006 001C             		move.b	#6,obAnim(a0)
0001C880 4A28 0001                  		tst.b	obRender(a0)
0001C884 6A00 FC74                  		bpl.w	Obj7A_Delete
0001C888                            
0001C888                            loc_18C32:
0001C888 6000                       		bra.s	loc_18C6C
0001C88A                            ; ===========================================================================
0001C88A                            
0001C88A                            Obj7A_FlameMain:; Routine 6
0001C88A 117C 0008 001C             		move.b	#8,obAnim(a0)
0001C890 2268 0034                  		movea.l	$34(a0),a1
0001C894 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C89A 6600                       		bne.s	loc_18C56
0001C89C 4A28 0001                  		tst.b	obRender(a0)
0001C8A0 6A00 FC58                  		bpl.w	Obj7A_Delete
0001C8A4 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001C8AA 6000                       		bra.s	loc_18C6C
0001C8AC                            ; ===========================================================================
0001C8AC                            
0001C8AC                            loc_18C56:
0001C8AC 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001C8B2 6E00                       		bgt.s	loc_18C6C
0001C8B4 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001C8BA 6D00                       		blt.s	loc_18C6C
0001C8BC 117C 0007 001C             		move.b	#7,obAnim(a0)
0001C8C2                            
0001C8C2                            loc_18C6C:
0001C8C2 43F9 0001 B8CE             		lea	(Ani_Eggman).l,a1
0001C8C8 4EB9 0000 C880             		jsr	(AnimateSprite).l
0001C8CE                            
0001C8CE                            loc_18C78:
0001C8CE 2268 0034                  		movea.l	$34(a0),a1
0001C8D2 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C8D8 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C8DE 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001C8E4 7003                       		moveq	#3,d0
0001C8E6 C028 0022                  		and.b	obStatus(a0),d0
0001C8EA 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C8F0 8128 0001                  		or.b	d0,obRender(a0)
0001C8F4 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001C8FA                            ; ===========================================================================
0001C8FA                            
0001C8FA                            Obj7A_TubeMain:	; Routine 8
0001C8FA 2268 0034                  		movea.l	$34(a0),a1
0001C8FE 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C904 6600                       		bne.s	loc_18CB8
0001C906 4A28 0001                  		tst.b	obRender(a0)
0001C90A 6A00 FBEE                  		bpl.w	Obj7A_Delete
0001C90E                            
0001C90E                            loc_18CB8:
0001C90E 217C 0001 BA0E 0004        		move.l	#Map_BossItems,obMap(a0)
0001C916 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001C91C 117C 0003 001A             		move.b	#3,obFrame(a0)
0001C922 60AA                       		bra.s	loc_18C78
0001C922 60AA                       		bra.s	loc_18C78
0001C924                            		include	"_incObj\7B SLZ Boss Spikeball.asm"
0001C924                            ; ---------------------------------------------------------------------------
0001C924                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001C924                            ; ---------------------------------------------------------------------------
0001C924                            
0001C924                            BossSpikeball:
0001C924 7000                       		moveq	#0,d0
0001C926 1028 0024                  		move.b	obRoutine(a0),d0
0001C92A 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001C92E 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001C932 3028 0030                  		move.w	$30(a0),d0
0001C936 0240 FF80                  		andi.w	#$FF80,d0
0001C93A 3238 F700                  		move.w	(v_screenposx).w,d1
0001C93E 0441 0080                  		subi.w	#$80,d1
0001C942 0241 FF80                  		andi.w	#$FF80,d1
0001C946 9041                       		sub.w	d1,d0
0001C948 6B00 FBB0                  		bmi.w	Obj7A_Delete
0001C94C 0C40 0280                  		cmpi.w	#$280,d0
0001C950 6200 FBA8                  		bhi.w	Obj7A_Delete
0001C954 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001C95A                            ; ===========================================================================
0001C95A 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001C95C 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001C95E 0000                       		dc.w loc_18DC6-Obj7B_Index
0001C960 0000                       		dc.w loc_18EAA-Obj7B_Index
0001C962 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001C964 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001C966                            ; ===========================================================================
0001C966                            
0001C966                            Obj7B_Main:	; Routine 0
0001C966 217C 0001 3D8A 0004        		move.l	#Map_SSawBall,obMap(a0)
0001C96E 317C 0518 0002             		move.w	#$518,obGfx(a0)
0001C974 117C 0001 001A             		move.b	#1,obFrame(a0)
0001C97A 0028 0004 0001             		ori.b	#4,obRender(a0)
0001C980 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001C986 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001C98C 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001C992 2268 003C                  		movea.l	$3C(a0),a1
0001C996 3169 0008 0030             		move.w	obX(a1),$30(a0)
0001C99C 3169 000C 0034             		move.w	obY(a1),$34(a0)
0001C9A2 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C9A8 3028 0008                  		move.w	obX(a0),d0
0001C9AC B069 0008                  		cmp.w	obX(a1),d0
0001C9B0 6E00                       		bgt.s	loc_18D68
0001C9B2 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C9B8 117C 0002 003A             		move.b	#2,$3A(a0)
0001C9BE                            
0001C9BE                            loc_18D68:
0001C9BE 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C9C2                            
0001C9C2                            Obj7B_Fall:	; Routine 2
0001C9C2 4EB9 0000 F77E             		jsr	(ObjectFall).l
0001C9C8 2268 003C                  		movea.l	$3C(a0),a1
0001C9CC 45F9 0000 0000             		lea	(word_19018).l,a2
0001C9D2 7000                       		moveq	#0,d0
0001C9D4 1029 001A                  		move.b	obFrame(a1),d0
0001C9D8 3228 0008                  		move.w	8(a0),d1
0001C9DC 9268 0030                  		sub.w	$30(a0),d1
0001C9E0 6400                       		bcc.s	loc_18D8E
0001C9E2 5440                       		addq.w	#2,d0
0001C9E4                            
0001C9E4                            loc_18D8E:
0001C9E4 D040                       		add.w	d0,d0
0001C9E6 3228 0034                  		move.w	$34(a0),d1
0001C9EA D272 0000                  		add.w	(a2,d0.w),d1
0001C9EE B268 000C                  		cmp.w	obY(a0),d1
0001C9F2 6E00                       		bgt.s	locret_18DC4
0001C9F4 2268 003C                  		movea.l	$3C(a0),a1
0001C9F8 7202                       		moveq	#2,d1
0001C9FA 0828 0000 0022             		btst	#0,obStatus(a0)
0001CA00 6700                       		beq.s	loc_18DAE
0001CA02 7200                       		moveq	#0,d1
0001CA04                            
0001CA04                            loc_18DAE:
0001CA04 317C 00F0 0028             		move.w	#$F0,obSubtype(a0)
0001CA0A 117C 000A 001F             		move.b	#10,obDelayAni(a0)	; set frame duration to	10 frames
0001CA10 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001CA16 6000 0000                  		bra.w	loc_18FA2
0001CA1A                            ; ===========================================================================
0001CA1A                            
0001CA1A                            locret_18DC4:
0001CA1A 4E75                       		rts	
0001CA1C                            ; ===========================================================================
0001CA1C                            
0001CA1C                            loc_18DC6:	; Routine 4
0001CA1C 2268 003C                  		movea.l	$3C(a0),a1
0001CA20 7000                       		moveq	#0,d0
0001CA22 1028 003A                  		move.b	$3A(a0),d0
0001CA26 9029 003A                  		sub.b	$3A(a1),d0
0001CA2A 6700                       		beq.s	loc_18E2A
0001CA2C 6400                       		bcc.s	loc_18DDA
0001CA2E 4400                       		neg.b	d0
0001CA30                            
0001CA30                            loc_18DDA:
0001CA30 323C F7E8                  		move.w	#-$818,d1
0001CA34 343C FEEC                  		move.w	#-$114,d2
0001CA38 0C00 0001                  		cmpi.b	#1,d0
0001CA3C 6700                       		beq.s	loc_18E00
0001CA3E 323C F6A0                  		move.w	#-$960,d1
0001CA42 343C FF0C                  		move.w	#-$F4,d2
0001CA46 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001CA4C 6D00                       		blt.s	loc_18E00
0001CA4E 323C F5E0                  		move.w	#-$A20,d1
0001CA52 343C FF80                  		move.w	#-$80,d2
0001CA56                            
0001CA56                            loc_18E00:
0001CA56 3141 0012                  		move.w	d1,obVelY(a0)
0001CA5A 3142 0010                  		move.w	d2,obVelX(a0)
0001CA5E 3028 0008                  		move.w	obX(a0),d0
0001CA62 9068 0030                  		sub.w	$30(a0),d0
0001CA66 6400                       		bcc.s	loc_18E16
0001CA68 4468 0010                  		neg.w	obVelX(a0)
0001CA6C                            
0001CA6C                            loc_18E16:
0001CA6C 117C 0001 001A             		move.b	#1,obFrame(a0)
0001CA72 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001CA78 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CA7C 6000 0000                  		bra.w	loc_18EAA
0001CA80                            ; ===========================================================================
0001CA80                            
0001CA80                            loc_18E2A:
0001CA80 45F9 0000 0000             		lea	(word_19018).l,a2
0001CA86 7000                       		moveq	#0,d0
0001CA88 1029 001A                  		move.b	obFrame(a1),d0
0001CA8C 343C 0028                  		move.w	#$28,d2
0001CA90 3228 0008                  		move.w	obX(a0),d1
0001CA94 9268 0030                  		sub.w	$30(a0),d1
0001CA98 6400                       		bcc.s	loc_18E48
0001CA9A 4442                       		neg.w	d2
0001CA9C 5440                       		addq.w	#2,d0
0001CA9E                            
0001CA9E                            loc_18E48:
0001CA9E D040                       		add.w	d0,d0
0001CAA0 3228 0034                  		move.w	$34(a0),d1
0001CAA4 D272 0000                  		add.w	(a2,d0.w),d1
0001CAA8 3141 000C                  		move.w	d1,obY(a0)
0001CAAC D468 0030                  		add.w	$30(a0),d2
0001CAB0 3142 0008                  		move.w	d2,obX(a0)
0001CAB4 4268 000E                  		clr.w	obY+2(a0)
0001CAB8 4268 000A                  		clr.w	obX+2(a0)
0001CABC 5368 0028                  		subq.w	#1,obSubtype(a0)
0001CAC0 6600                       		bne.s	loc_18E7A
0001CAC2 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001CAC8 117C 0008 0024             		move.b	#8,obRoutine(a0)
0001CACE 4E75                       		rts	
0001CAD0                            ; ===========================================================================
0001CAD0                            
0001CAD0                            loc_18E7A:
0001CAD0 0C68 0078 0028             		cmpi.w	#$78,obSubtype(a0)
0001CAD6 6600                       		bne.s	loc_18E88
0001CAD8 117C 0005 001F             		move.b	#5,obDelayAni(a0)
0001CADE                            
0001CADE                            loc_18E88:
0001CADE 0C68 003C 0028             		cmpi.w	#$3C,obSubtype(a0)
0001CAE4 6600                       		bne.s	loc_18E96
0001CAE6 117C 0002 001F             		move.b	#2,obDelayAni(a0)
0001CAEC                            
0001CAEC                            loc_18E96:
0001CAEC 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001CAF0 6E00                       		bgt.s	locret_18EA8
0001CAF2 0868 0000 001A             		bchg	#0,obFrame(a0)
0001CAF8 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001CAFE                            
0001CAFE                            locret_18EA8:
0001CAFE 4E75                       		rts	
0001CB00                            ; ===========================================================================
0001CB00                            
0001CB00                            loc_18EAA:	; Routine 6
0001CB00 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001CB04 707A                       		moveq	#id_BossStarLight,d0
0001CB06 7240                       		moveq	#$40,d1
0001CB08 743E                       		moveq	#$3E,d2
0001CB0A                            
0001CB0A                            loc_18EB4:
0001CB0A B011                       		cmp.b	(a1),d0
0001CB0C 6700                       		beq.s	loc_18EC0
0001CB0E D2C1                       		adda.w	d1,a1
0001CB10 51CA FFF8                  		dbf	d2,loc_18EB4
0001CB14                            
0001CB14 6000                       		bra.s	loc_18F38
0001CB16                            ; ===========================================================================
0001CB16                            
0001CB16                            loc_18EC0:
0001CB16 3029 0008                  		move.w	obX(a1),d0
0001CB1A 3229 000C                  		move.w	obY(a1),d1
0001CB1E 3428 0008                  		move.w	obX(a0),d2
0001CB22 3628 000C                  		move.w	obY(a0),d3
0001CB26 45FA 0000                  		lea	byte_19022(pc),a2
0001CB2A 47FA 0000                  		lea	byte_19026(pc),a3
0001CB2E 181A                       		move.b	(a2)+,d4
0001CB30 4884                       		ext.w	d4
0001CB32 D044                       		add.w	d4,d0
0001CB34 181B                       		move.b	(a3)+,d4
0001CB36 4884                       		ext.w	d4
0001CB38 D444                       		add.w	d4,d2
0001CB3A B440                       		cmp.w	d0,d2
0001CB3C 6500                       		bcs.s	loc_18F38
0001CB3E 181A                       		move.b	(a2)+,d4
0001CB40 4884                       		ext.w	d4
0001CB42 D044                       		add.w	d4,d0
0001CB44 181B                       		move.b	(a3)+,d4
0001CB46 4884                       		ext.w	d4
0001CB48 D444                       		add.w	d4,d2
0001CB4A B042                       		cmp.w	d2,d0
0001CB4C 6500                       		bcs.s	loc_18F38
0001CB4E 181A                       		move.b	(a2)+,d4
0001CB50 4884                       		ext.w	d4
0001CB52 D244                       		add.w	d4,d1
0001CB54 181B                       		move.b	(a3)+,d4
0001CB56 4884                       		ext.w	d4
0001CB58 D644                       		add.w	d4,d3
0001CB5A B641                       		cmp.w	d1,d3
0001CB5C 6500                       		bcs.s	loc_18F38
0001CB5E 181A                       		move.b	(a2)+,d4
0001CB60 4884                       		ext.w	d4
0001CB62 D244                       		add.w	d4,d1
0001CB64 181B                       		move.b	(a3)+,d4
0001CB66 4884                       		ext.w	d4
0001CB68 D644                       		add.w	d4,d3
0001CB6A B243                       		cmp.w	d3,d1
0001CB6C 6500                       		bcs.s	loc_18F38
0001CB6E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CB72 4268 0028                  		clr.w	obSubtype(a0)
0001CB76 4229 0020                  		clr.b	obColType(a1)
0001CB7A 5329 0021                  		subq.b	#1,obColProp(a1)
0001CB7E 6600                       		bne.s	loc_18F38
0001CB80 08E9 0007 0022             		bset	#7,obStatus(a1)
0001CB86 4268 0010                  		clr.w	obVelX(a0)
0001CB8A 4268 0012                  		clr.w	obVelY(a0)
0001CB8E                            
0001CB8E                            loc_18F38:
0001CB8E 4A68 0012                  		tst.w	obVelY(a0)
0001CB92 6A00                       		bpl.s	loc_18F5C
0001CB94 4EB9 0000 F77E             		jsr	(ObjectFall).l
0001CB9A 3028 0034                  		move.w	$34(a0),d0
0001CB9E 0440 002F                  		subi.w	#$2F,d0
0001CBA2 B068 000C                  		cmp.w	obY(a0),d0
0001CBA6 6E00                       		bgt.s	loc_18F58
0001CBA8 4EB9 0000 F77E             		jsr	(ObjectFall).l
0001CBAE                            
0001CBAE                            loc_18F58:
0001CBAE 6000 FF20                  		bra.w	loc_18E7A
0001CBB2                            ; ===========================================================================
0001CBB2                            
0001CBB2                            loc_18F5C:
0001CBB2 4EB9 0000 F77E             		jsr	(ObjectFall).l
0001CBB8 2268 003C                  		movea.l	$3C(a0),a1
0001CBBC 45F9 0000 0000             		lea	(word_19018).l,a2
0001CBC2 7000                       		moveq	#0,d0
0001CBC4 1029 001A                  		move.b	obFrame(a1),d0
0001CBC8 3228 0008                  		move.w	obX(a0),d1
0001CBCC 9268 0030                  		sub.w	$30(a0),d1
0001CBD0 6400                       		bcc.s	loc_18F7E
0001CBD2 5440                       		addq.w	#2,d0
0001CBD4                            
0001CBD4                            loc_18F7E:
0001CBD4 D040                       		add.w	d0,d0
0001CBD6 3228 0034                  		move.w	$34(a0),d1
0001CBDA D272 0000                  		add.w	(a2,d0.w),d1
0001CBDE B268 000C                  		cmp.w	obY(a0),d1
0001CBE2 6ECA                       		bgt.s	loc_18F58
0001CBE4 2268 003C                  		movea.l	$3C(a0),a1
0001CBE8 7202                       		moveq	#2,d1
0001CBEA 4A68 0010                  		tst.w	obVelX(a0)
0001CBEE 6B00                       		bmi.s	loc_18F9C
0001CBF0 7200                       		moveq	#0,d1
0001CBF2                            
0001CBF2                            loc_18F9C:
0001CBF2 317C 0000 0028             		move.w	#0,obSubtype(a0)
0001CBF8                            
0001CBF8                            loc_18FA2:
0001CBF8 1341 003A                  		move.b	d1,$3A(a1)
0001CBFC 1141 003A                  		move.b	d1,$3A(a0)
0001CC00 B229 001A                  		cmp.b	obFrame(a1),d1
0001CC04 6700                       		beq.s	loc_19008
0001CC06 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001CC0C 6700                       		beq.s	loc_19008
0001CC0E 4229 0025                  		clr.b	ob2ndRout(a1)
0001CC12 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001CC18 45F8 D000                  		lea	(v_objspace).w,a2
0001CC1C 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
0001CC22 446A 0012                  		neg.w	obVelY(a2)
0001CC26 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0001CC2C 6600                       		bne.s	loc_18FDC
0001CC2E E0EA 0012                  		asr	obVelY(a2)
0001CC32                            
0001CC32                            loc_18FDC:
0001CC32 08EA 0001 0022             		bset	#1,obStatus(a2)
0001CC38 08AA 0003 0022             		bclr	#3,obStatus(a2)
0001CC3E 422A 003C                  		clr.b	$3C(a2)
0001CC42 2F08                       		move.l	a0,-(sp)
0001CC44 41D2                       		lea	(a2),a0
0001CC46 4EB9 0001 6228             		jsr	(Sonic_ChkRoll).l
0001CC4C 205F                       		movea.l	(sp)+,a0
0001CC4E 157C 0002 0024             		move.b	#2,obRoutine(a2)
0001CC5E                            
0001CC5E                            loc_19008:
0001CC5E 4268 0010                  		clr.w	obVelX(a0)
0001CC62 4268 0012                  		clr.w	obVelY(a0)
0001CC66 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CC6A 6000 FE64                  		bra.w	loc_18E7A
0001CC6E                            ; ===========================================================================
0001CC6E FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w -8, -$1C, -$2F, -$1C, -8
0001CC78                            		even
0001CC78 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001CC7C                            		even
0001CC7C 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001CC80                            		even
0001CC80                            ; ===========================================================================
0001CC80                            
0001CC80                            Obj7B_Explode:	; Routine 8
0001CC80 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001CC84 4228 0024                  		clr.b	obRoutine(a0)
0001CC88 0C68 0020 0028             		cmpi.w	#$20,obSubtype(a0)
0001CC8E 6700                       		beq.s	Obj7B_MakeFrag
0001CC90 4E75                       		rts	
0001CC92                            ; ===========================================================================
0001CC92                            
0001CC92                            Obj7B_MakeFrag:
0001CC92 3168 0034 000C             		move.w	$34(a0),obY(a0)
0001CC98 7203                       		moveq	#3,d1
0001CC9A 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001CC9E                            
0001CC9E                            Obj7B_Loop:
0001CC9E 4EB9 0000 FD64             		jsr	(FindFreeObj).l
0001CCA4 6600                       		bne.s	loc_1909A
0001CCA6 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load shrapnel object
0001CCAA 137C 000A 0024             		move.b	#$A,obRoutine(a1)
0001CCB0 237C 0000 0000 0004        		move.l	#Map_BSBall,obMap(a1)
0001CCB8 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001CCBE 337C 0518 0002             		move.w	#$518,obGfx(a1)
0001CCC4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001CCCA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001CCD0 335A 0010                  		move.w	(a2)+,obVelX(a1)
0001CCD4 335A 0012                  		move.w	(a2)+,obVelY(a1)
0001CCD8 137C 0098 0020             		move.b	#$98,obColType(a1)
0001CCDE 0029 0004 0001             		ori.b	#4,obRender(a1)
0001CCE4 08E9 0007 0001             		bset	#7,obRender(a1)
0001CCEA 137C 000C 0014             		move.b	#$C,obActWid(a1)
0001CCF0                            
0001CCF0                            loc_1909A:
0001CCF0 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001CCF4                            
0001CCF4 4E75                       		rts	
0001CCF6                            ; ===========================================================================
0001CCF6 FF00 FCC0                  Obj7B_FragSpeed:dc.w -$100, -$340	; horizontal, vertical
0001CCFA FF60 FDC0                  		dc.w -$A0, -$240
0001CCFE 0100 FCC0                  		dc.w $100, -$340
0001CD02 00A0 FDC0                  		dc.w $A0, -$240
0001CD06                            ; ===========================================================================
0001CD06                            
0001CD06                            Obj7B_MoveFrag:	; Routine $A
0001CD06 4EB9 0000 F7B6             		jsr	(SpeedToPos).l
0001CD0C 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001CD12 3168 000C 0034             		move.w	obY(a0),$34(a0)
0001CD18 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001CD1E 7004                       		moveq	#4,d0
0001CD20 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001CD24 E448                       		lsr.w	#2,d0
0001CD26 1140 001A                  		move.b	d0,obFrame(a0)
0001CD2A 4A28 0001                  		tst.b	1(a0)
0001CD2E 6A00 F7CA                  		bpl.w	Obj7A_Delete
0001CD32 4E75                       		rts	
0001CD32 4E75                       		rts	
0001CD34                            Map_BSBall:	include	"_maps\SLZ Boss Spikeball.asm"
0001CD34                            ; ---------------------------------------------------------------------------
0001CD34                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001CD34                            ; ---------------------------------------------------------------------------
0001CD34                            Map_BSBall_internal:
0001CD34 0000                       		dc.w @fireball1-Map_BSBall_internal
0001CD36 0000                       		dc.w @fireball2-Map_BSBall_internal
0001CD38 01                         @fireball1:	dc.b 1
0001CD39 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001CD3E 01                         @fireball2:	dc.b 1
0001CD3F FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001CD44                            		even
0001CD44                            		even
0001CD44                            		include	"_incObj\75 Boss - Spring Yard.asm"
0001CD44                            ; ---------------------------------------------------------------------------
0001CD44                            ; Object 75 - Eggman (SYZ)
0001CD44                            ; ---------------------------------------------------------------------------
0001CD44                            
0001CD44                            BossSpringYard:
0001CD44 7000                       		moveq	#0,d0
0001CD46 1028 0024                  		move.b	obRoutine(a0),d0
0001CD4A 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001CD4E 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001CD52                            ; ===========================================================================
0001CD52 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001CD54 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001CD56 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001CD58 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001CD5A 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001CD5C                            
0001CD5C 0200 0280                  Obj75_ObjData:	dc.b 2,	0, $02, $80		; routine number, animation, priority (high and low bytes)
0001CD60 0401 0280                  		dc.b 4,	1, $02, $80
0001CD64 0607 0280                  		dc.b 6,	7, $02, $80
0001CD68 0800 0280                  		dc.b 8,	0, $02, $80
0001CD6C                            ; ===========================================================================
0001CD6C                            
0001CD6C                            Obj75_Main:	; Routine 0
0001CD6C 317C 2DB0 0008             		move.w	#$2DB0,obX(a0)
0001CD72 317C 04DA 000C             		move.w	#$4DA,obY(a0)
0001CD78 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001CD7E 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001CD84 117C 000F 0020             		move.b	#$F,obColType(a0)
0001CD8A 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001CD90 45FA FFCA                  		lea	Obj75_ObjData(pc),a2
0001CD94 2248                       		movea.l	a0,a1
0001CD96 7203                       		moveq	#3,d1
0001CD98 6000                       		bra.s	Obj75_LoadBoss
0001CD9A                            ; ===========================================================================
0001CD9A                            
0001CD9A                            Obj75_Loop:
0001CD9A 4EB9 0000 FD7A             		jsr	(FindNextFreeObj).l
0001CDA0 6600                       		bne.s	Obj75_ShipMain
0001CDA2 12BC 0075                  		move.b	#id_BossSpringYard,(a1)
0001CDA6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001CDAC 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001CDB2                            
0001CDB2                            Obj75_LoadBoss:
0001CDB2 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001CDB8 4229 0025                  		clr.b	ob2ndRout(a1)
0001CDBC 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001CDC0 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001CDC4 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001CDC8 237C 0001 B91E 0004        		move.l	#Map_Eggman,obMap(a1)
0001CDD0 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001CDD6 137C 0004 0001             		move.b	#4,obRender(a1)
0001CDDC 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001CDE2 2348 0034                  		move.l	a0,$34(a1)
0001CDE6 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001CDEA                            
0001CDEA                            Obj75_ShipMain:	; Routine 2
0001CDEA 7000                       		moveq	#0,d0
0001CDEC 1028 0025                  		move.b	ob2ndRout(a0),d0
0001CDF0 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001CDF4 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001CDF8 43F9 0001 B8CE             		lea	(Ani_Eggman).l,a1
0001CDFE 4EB9 0000 C880             		jsr	(AnimateSprite).l
0001CE04 7003                       		moveq	#3,d0
0001CE06 C028 0022                  		and.b	obStatus(a0),d0
0001CE0A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001CE10 8128 0001                  		or.b	d0,obRender(a0)
0001CE14 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001CE1A                            ; ===========================================================================
0001CE1A 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001CE1E 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001CE22 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001CE26                            ; ===========================================================================
0001CE26                            
0001CE26                            loc_191CC:
0001CE26 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001CE2C 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001CE32 6400                       		bcc.s	loc_191DE
0001CE34 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CE38                            
0001CE38                            loc_191DE:
0001CE38 1028 003F                  		move.b	$3F(a0),d0
0001CE3C 5428 003F                  		addq.b	#2,$3F(a0)
0001CE40 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001CE46 E440                       		asr.w	#2,d0
0001CE48 3140 0012                  		move.w	d0,obVelY(a0)
0001CE4C                            
0001CE4C                            loc_191F2:
0001CE4C 6100 E66C                  		bsr.w	BossMove
0001CE50 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001CE56 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001CE5C                            
0001CE5C                            loc_19202:
0001CE5C 3028 0008                  		move.w	8(a0),d0
0001CE60 0440 2C00                  		subi.w	#$2C00,d0
0001CE64 EA48                       		lsr.w	#5,d0
0001CE66 1140 0034                  		move.b	d0,$34(a0)
0001CE6A 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001CE70 6400                       		bcc.s	locret_19256
0001CE72 4A28 0022                  		tst.b	obStatus(a0)
0001CE76 6B00                       		bmi.s	loc_19258
0001CE78 4A28 0020                  		tst.b	obColType(a0)
0001CE7C 6600                       		bne.s	locret_19256
0001CE7E 4A28 003E                  		tst.b	$3E(a0)
0001CE82 6600                       		bne.s	loc_1923A
0001CE84 117C 0020 003E             		move.b	#$20,$3E(a0)
0001CE94                            
0001CE94                            loc_1923A:
0001CE94 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001CE98 7000                       		moveq	#0,d0
0001CE9A 4A51                       		tst.w	(a1)
0001CE9C 6600                       		bne.s	loc_19248
0001CE9E 303C 0EEE                  		move.w	#cWhite,d0
0001CEA2                            
0001CEA2                            loc_19248:
0001CEA2 3280                       		move.w	d0,(a1)
0001CEA4 5328 003E                  		subq.b	#1,$3E(a0)
0001CEA8 6600                       		bne.s	locret_19256
0001CEAA 117C 000F 0020             		move.b	#$F,obColType(a0)
0001CEB0                            
0001CEB0                            locret_19256:
0001CEB0 4E75                       		rts	
0001CEB2                            ; ===========================================================================
0001CEB2                            
0001CEB2                            loc_19258:
0001CEB2 7064                       		moveq	#100,d0
0001CEB4 6100 0000                  		bsr.w	AddPoints
0001CEB8 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001CEBE 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001CEC4 4268 0010                  		clr.w	obVelX(a0)
0001CEC8 4E75                       		rts	
0001CECA                            ; ===========================================================================
0001CECA                            
0001CECA                            loc_19270:
0001CECA 3028 0030                  		move.w	$30(a0),d0
0001CECE 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001CED4 0828 0000 0022             		btst	#0,obStatus(a0)
0001CEDA 6600                       		bne.s	loc_1928E
0001CEDC 4468 0010                  		neg.w	obVelX(a0)
0001CEE0 0C40 2C08                  		cmpi.w	#$2C08,d0
0001CEE4 6E00                       		bgt.s	loc_1929E
0001CEE6 6000                       		bra.s	loc_19294
0001CEE8                            ; ===========================================================================
0001CEE8                            
0001CEE8                            loc_1928E:
0001CEE8 0C40 2D38                  		cmpi.w	#$2D38,d0
0001CEEC 6D00                       		blt.s	loc_1929E
0001CEEE                            
0001CEEE                            loc_19294:
0001CEEE 0868 0000 0022             		bchg	#0,obStatus(a0)
0001CEF4 4228 003D                  		clr.b	$3D(a0)
0001CEF8                            
0001CEF8                            loc_1929E:
0001CEF8 0440 2C10                  		subi.w	#$2C10,d0
0001CEFC 0240 001F                  		andi.w	#$1F,d0
0001CF00 0440 001F                  		subi.w	#$1F,d0
0001CF04 6A00                       		bpl.s	loc_192AE
0001CF06 4440                       		neg.w	d0
0001CF08                            
0001CF08                            loc_192AE:
0001CF08 5340                       		subq.w	#1,d0
0001CF0A 6E00                       		bgt.s	loc_192E8
0001CF0C 4A28 003D                  		tst.b	$3D(a0)
0001CF10 6600                       		bne.s	loc_192E8
0001CF12 3238 D008                  		move.w	(v_player+obX).w,d1
0001CF16 0441 2C00                  		subi.w	#$2C00,d1
0001CF1A EA41                       		asr.w	#5,d1
0001CF1C B228 0034                  		cmp.b	$34(a0),d1
0001CF20 6600                       		bne.s	loc_192E8
0001CF22 7000                       		moveq	#0,d0
0001CF24 1028 0034                  		move.b	$34(a0),d0
0001CF28 EB40                       		asl.w	#5,d0
0001CF2A 0640 2C10                  		addi.w	#$2C10,d0
0001CF2E 3140 0030                  		move.w	d0,$30(a0)
0001CF32 6100 0000                  		bsr.w	Obj75_FindBlocks
0001CF36 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CF3A 4268 0028                  		clr.w	obSubtype(a0)
0001CF3E 4268 0010                  		clr.w	obVelX(a0)
0001CF42                            
0001CF42                            loc_192E8:
0001CF42 6000 FEF4                  		bra.w	loc_191DE
0001CF46                            ; ===========================================================================
0001CF46                            
0001CF46                            loc_192EC:
0001CF46 7000                       		moveq	#0,d0
0001CF48 1028 0028                  		move.b	obSubtype(a0),d0
0001CF4C 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001CF50 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001CF54                            ; ===========================================================================
0001CF54 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001CF56 0000                       		dc.w loc_19348-off_192FA
0001CF58 0000                       		dc.w loc_1938E-off_192FA
0001CF5A 0000                       		dc.w loc_193D0-off_192FA
0001CF5C                            ; ===========================================================================
0001CF5C                            
0001CF5C                            loc_19302:
0001CF5C 317C 0180 0012             		move.w	#$180,obVelY(a0)
0001CF62 3028 0038                  		move.w	$38(a0),d0
0001CF66 0C40 0556                  		cmpi.w	#$556,d0
0001CF6A 6500                       		bcs.s	loc_19344
0001CF6C 317C 0556 0038             		move.w	#$556,$38(a0)
0001CF72 4268 003C                  		clr.w	$3C(a0)
0001CF76 70FF                       		moveq	#-1,d0
0001CF78 3028 0036                  		move.w	$36(a0),d0
0001CF7C 6700                       		beq.s	loc_1933C
0001CF7E 2240                       		movea.l	d0,a1
0001CF80 137C 00FF 0029             		move.b	#-1,$29(a1)
0001CF86 117C 00FF 0029             		move.b	#-1,$29(a0)
0001CF8C 2348 0034                  		move.l	a0,$34(a1)
0001CF90 317C 0032 003C             		move.w	#$32,$3C(a0)
0001CF96                            
0001CF96                            loc_1933C:
0001CF96 4268 0012                  		clr.w	obVelY(a0)
0001CF9A 5428 0028                  		addq.b	#2,obSubtype(a0)
0001CF9E                            
0001CF9E                            loc_19344:
0001CF9E 6000 FEAC                  		bra.w	loc_191F2
0001CFA2                            ; ===========================================================================
0001CFA2                            
0001CFA2                            loc_19348:
0001CFA2 5368 003C                  		subq.w	#1,$3C(a0)
0001CFA6 6A00                       		bpl.s	loc_19366
0001CFA8 5428 0028                  		addq.b	#2,obSubtype(a0)
0001CFAC 317C F800 0012             		move.w	#-$800,obVelY(a0)
0001CFB2 4A68 0036                  		tst.w	$36(a0)
0001CFB6 6600                       		bne.s	loc_19362
0001CFB8 E0E8 0012                  		asr	obVelY(a0)
0001CFBC                            
0001CFBC                            loc_19362:
0001CFBC 7000                       		moveq	#0,d0
0001CFBE 6000                       		bra.s	loc_1937C
0001CFC0                            ; ===========================================================================
0001CFC0                            
0001CFC0                            loc_19366:
0001CFC0 7000                       		moveq	#0,d0
0001CFC2 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001CFC8 6E00                       		bgt.s	loc_1937C
0001CFCA 7002                       		moveq	#2,d0
0001CFCC 0828 0001 003D             		btst	#1,$3D(a0)
0001CFD2 6700                       		beq.s	loc_1937C
0001CFD4 4440                       		neg.w	d0
0001CFD6                            
0001CFD6                            loc_1937C:
0001CFD6 D068 0038                  		add.w	$38(a0),d0
0001CFDA 3140 000C                  		move.w	d0,obY(a0)
0001CFDE 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001CFE4 6000 FE76                  		bra.w	loc_19202
0001CFE8                            ; ===========================================================================
0001CFE8                            
0001CFE8                            loc_1938E:
0001CFE8 303C 04DA                  		move.w	#$4DA,d0
0001CFEC 4A68 0036                  		tst.w	$36(a0)
0001CFF0 6700                       		beq.s	loc_1939C
0001CFF2 0440 0018                  		subi.w	#$18,d0
0001CFF6                            
0001CFF6                            loc_1939C:
0001CFF6 B068 0038                  		cmp.w	$38(a0),d0
0001CFFA 6D00                       		blt.s	loc_193BE
0001CFFC 317C 0008 003C             		move.w	#8,$3C(a0)
0001D002 4A68 0036                  		tst.w	$36(a0)
0001D006 6700                       		beq.s	loc_193B4
0001D008 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001D00E                            
0001D00E                            loc_193B4:
0001D00E 5428 0028                  		addq.b	#2,obSubtype(a0)
0001D012 4268 0012                  		clr.w	obVelY(a0)
0001D016 6000                       		bra.s	loc_193CC
0001D018                            ; ===========================================================================
0001D018                            
0001D018                            loc_193BE:
0001D018 0C68 FFC0 0012             		cmpi.w	#-$40,obVelY(a0)
0001D01E 6C00                       		bge.s	loc_193CC
0001D020 0668 000C 0012             		addi.w	#$C,obVelY(a0)
0001D026                            
0001D026                            loc_193CC:
0001D026 6000 FE24                  		bra.w	loc_191F2
0001D02A                            ; ===========================================================================
0001D02A                            
0001D02A                            loc_193D0:
0001D02A 5368 003C                  		subq.w	#1,$3C(a0)
0001D02E 6E00                       		bgt.s	loc_19406
0001D030 6B00                       		bmi.s	loc_193EE
0001D032 70FF                       		moveq	#-1,d0
0001D034 3028 0036                  		move.w	$36(a0),d0
0001D038 6700                       		beq.s	loc_193E8
0001D03A 2240                       		movea.l	d0,a1
0001D03C 137C 000A 0029             		move.b	#$A,$29(a1)
0001D042                            
0001D042                            loc_193E8:
0001D042 4268 0036                  		clr.w	$36(a0)
0001D046 6000                       		bra.s	loc_19406
0001D048                            ; ===========================================================================
0001D048                            
0001D048                            loc_193EE:
0001D048 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001D04E 6600                       		bne.s	loc_19406
0001D050 4228 0029                  		clr.b	$29(a0)
0001D054 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001D058 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001D05E 6000                       		bra.s	loc_19446
0001D060                            ; ===========================================================================
0001D060                            
0001D060                            loc_19406:
0001D060 7001                       		moveq	#1,d0
0001D062 4A68 0036                  		tst.w	$36(a0)
0001D066 6700                       		beq.s	loc_19410
0001D068 7002                       		moveq	#2,d0
0001D06A                            
0001D06A                            loc_19410:
0001D06A 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001D070 6700                       		beq.s	loc_19424
0001D072 6D00                       		blt.s	loc_1941C
0001D074 4440                       		neg.w	d0
0001D076                            
0001D076                            loc_1941C:
0001D076 4A68 0036                  		tst.w	$36(a0)
0001D07A D168 0038                  		add.w	d0,$38(a0)
0001D07E                            
0001D07E                            loc_19424:
0001D07E 7000                       		moveq	#0,d0
0001D080 4A68 0036                  		tst.w	$36(a0)
0001D084 6700                       		beq.s	loc_19438
0001D086 7002                       		moveq	#2,d0
0001D088 0828 0000 003D             		btst	#0,$3D(a0)
0001D08E 6700                       		beq.s	loc_19438
0001D090 4440                       		neg.w	d0
0001D092                            
0001D092                            loc_19438:
0001D092 D068 0038                  		add.w	$38(a0),d0
0001D096 3140 000C                  		move.w	d0,obY(a0)
0001D09A 3168 0030 0008             		move.w	$30(a0),8(a0)
0001D0A0                            
0001D0A0                            loc_19446:
0001D0A0 6000 FDBA                  		bra.w	loc_19202
0001D0A4                            
0001D0A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0A4                            
0001D0A4                            
0001D0A4                            Obj75_FindBlocks:
0001D0A4 4268 0036                  		clr.w	$36(a0)
0001D0A8 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001D0AC 703E                       		moveq	#$3E,d0
0001D0AE 7276                       		moveq	#$76,d1
0001D0B0 1428 0034                  		move.b	$34(a0),d2
0001D0B4                            
0001D0B4                            Obj75_FindLoop:
0001D0B4 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001D0B6 6600                       		bne.s	loc_1946A	; if not, branch
0001D0B8 B429 0028                  		cmp.b	obSubtype(a1),d2
0001D0BC 6600                       		bne.s	loc_1946A
0001D0BE 3149 0036                  		move.w	a1,$36(a0)
0001D0C2 6000                       		bra.s	locret_19472
0001D0C4                            ; ===========================================================================
0001D0C4                            
0001D0C4                            loc_1946A:
0001D0C4 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001D0C8 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001D0CC                            
0001D0CC                            locret_19472:
0001D0CC 4E75                       		rts	
0001D0CE                            ; End of function Obj75_FindBlocks
0001D0CE                            
0001D0CE                            ; ===========================================================================
0001D0CE                            
0001D0CE                            loc_19474:
0001D0CE 5368 003C                  		subq.w	#1,$3C(a0)
0001D0D2 6B00                       		bmi.s	loc_1947E
0001D0D4 6000 E3A2                  		bra.w	BossDefeated
0001D0D8                            ; ===========================================================================
0001D0D8                            
0001D0D8                            loc_1947E:
0001D0D8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D0DC 4268 0012                  		clr.w	obVelY(a0)
0001D0E0 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D0E6 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001D0EC 4268 0010                  		clr.w	obVelX(a0)
0001D0F0 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001D0F6 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001D0FA 6600                       		bne.s	loc_194A8
0001D0FC 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001D102                            
0001D102                            loc_194A8:
0001D102 6000 FD58                  		bra.w	loc_19202
0001D106                            ; ===========================================================================
0001D106                            
0001D106                            loc_194AC:
0001D106 5268 003C                  		addq.w	#1,$3C(a0)
0001D10A 6700                       		beq.s	loc_194BC
0001D10C 6A00                       		bpl.s	loc_194C2
0001D10E 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001D114 6000                       		bra.s	loc_194EE
0001D116                            ; ===========================================================================
0001D116                            
0001D116                            loc_194BC:
0001D116 4268 0012                  		clr.w	obVelY(a0)
0001D11A 6000                       		bra.s	loc_194EE
0001D11C                            ; ===========================================================================
0001D11C                            
0001D11C                            loc_194C2:
0001D11C 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001D122 6500                       		bcs.s	loc_194DA
0001D124 6700                       		beq.s	loc_194E0
0001D126 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001D12C 6500                       		bcs.s	loc_194EE
0001D12E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D132 6000                       		bra.s	loc_194EE
0001D134                            ; ===========================================================================
0001D134                            
0001D134                            loc_194DA:
0001D134 5168 0012                  		subq.w	#8,obVelY(a0)
0001D138 6000                       		bra.s	loc_194EE
0001D13A                            ; ===========================================================================
0001D13A                            
0001D13A                            loc_194E0:
0001D13A 4268 0012                  		clr.w    obVelY(a0)
0001D13E 4A38 FE2D                          	tst.b     (v_invinc).w
0001D142 6600                               	bne.s   @boss_invinc
0001D144                            
0001D144 1038 F5C6                          	move.b   (v_Saved_music),d0
0001D148 6000 0000                          	bra.w      @boss_play
0001D14C                            
0001D14C                            @boss_invinc:
0001D14C 103C 0000                          	move.b #bgm_Invincible,d0
0001D150                            
0001D150                            @boss_play:
0001D150 4EB8 129A                          	jsr PlaySound
0001D154                            
0001D154                            loc_194EE:
0001D154 6000 FCF6                  		bra.w	loc_191F2
0001D158                            ; ===========================================================================
0001D158                            
0001D158                            loc_194F2:
0001D158 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001D15E 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001D164 0C78 2D40 F72A             		cmpi.w	#$2D40,(v_limitright2).w
0001D16A 6400                       		bcc.s	loc_1950C
0001D16C 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001D170 6000                       		bra.s	loc_19512
0001D172                            ; ===========================================================================
0001D172                            
0001D172                            loc_1950C:
0001D172 4A28 0001                  		tst.b	obRender(a0)
0001D176 6A00                       		bpl.s	Obj75_ShipDelete
0001D178                            
0001D178                            loc_19512:
0001D178 6100 E340                  		bsr.w	BossMove
0001D17C 6000 FCBA                  		bra.w	loc_191DE
0001D180                            ; ===========================================================================
0001D180                            
0001D180                            Obj75_ShipDelete:
0001D180 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001D186                            ; ===========================================================================
0001D186                            
0001D186                            Obj75_FaceMain:	; Routine 4
0001D186 7201                       		moveq	#1,d1
0001D188 2268 0034                  		movea.l	$34(a0),a1
0001D18C 7000                       		moveq	#0,d0
0001D18E 1029 0025                  		move.b	ob2ndRout(a1),d0
0001D192 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001D196 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001D19A 1141 001C                  		move.b	d1,obAnim(a0)
0001D19E 1010                       		move.b	(a0),d0
0001D1A0 B011                       		cmp.b	(a1),d0
0001D1A2 6600                       		bne.s	Obj75_FaceDelete
0001D1A4 6000                       		bra.s	loc_195BE
0001D1A6                            ; ===========================================================================
0001D1A6                            
0001D1A6                            Obj75_FaceDelete:
0001D1A6 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001D1AC                            ; ===========================================================================
0001D1AC 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001D1B0 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001D1B4 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001D1B8                            ; ===========================================================================
0001D1B8                            
0001D1B8                            loc_19552:
0001D1B8 720A                       		moveq	#$A,d1
0001D1BA 4E75                       		rts	
0001D1BC                            ; ===========================================================================
0001D1BC                            
0001D1BC                            loc_19556:
0001D1BC 7206                       		moveq	#6,d1
0001D1BE 4E75                       		rts	
0001D1C0                            ; ===========================================================================
0001D1C0                            
0001D1C0                            loc_1955A:
0001D1C0 7000                       		moveq	#0,d0
0001D1C2 1029 0028                  		move.b	obSubtype(a1),d0
0001D1C6 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001D1CA 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001D1CE                            ; ===========================================================================
0001D1CE 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001D1D2 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001D1D6                            ; ===========================================================================
0001D1D6                            
0001D1D6                            loc_19570:
0001D1D6 6000                       		bra.s	loc_19574
0001D1D8                            ; ===========================================================================
0001D1D8                            
0001D1D8                            loc_19572:
0001D1D8 7206                       		moveq	#6,d1
0001D1DA                            
0001D1DA                            loc_19574:
0001D1DA 4A29 0020                  		tst.b	obColType(a1)
0001D1DE 6600                       		bne.s	loc_1957E
0001D1E0 7205                       		moveq	#5,d1
0001D1E2 4E75                       		rts	
0001D1E4                            ; ===========================================================================
0001D1E4                            
0001D1E4                            loc_1957E:
0001D1E4 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001D1EA 6500                       		bcs.s	locret_19588
0001D1EC 7204                       		moveq	#4,d1
0001D1EE                            
0001D1EE                            locret_19588:
0001D1EE 4E75                       		rts	
0001D1F0                            ; ===========================================================================
0001D1F0                            
0001D1F0                            Obj75_FlameMain:; Routine 6
0001D1F0 117C 0007 001C             		move.b	#7,obAnim(a0)
0001D1F6 2268 0034                  		movea.l	$34(a0),a1
0001D1FA 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001D200 6600                       		bne.s	loc_195AA
0001D202 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001D208 4A28 0001                  		tst.b	1(a0)
0001D20C 6A00                       		bpl.s	Obj75_FlameDelete
0001D20E 6000                       		bra.s	loc_195B6
0001D210                            ; ===========================================================================
0001D210                            
0001D210                            loc_195AA:
0001D210 4A69 0010                  		tst.w	obVelX(a1)
0001D214 6700                       		beq.s	loc_195B6
0001D216 117C 0008 001C             		move.b	#8,obAnim(a0)
0001D21C                            
0001D21C                            loc_195B6:
0001D21C 6000                       		bra.s	loc_195BE
0001D21E                            ; ===========================================================================
0001D21E                            
0001D21E                            Obj75_FlameDelete:
0001D21E 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001D224                            ; ===========================================================================
0001D224                            
0001D224                            loc_195BE:
0001D224 43F9 0001 B8CE             		lea	(Ani_Eggman).l,a1
0001D22A 4EB9 0000 C880             		jsr	(AnimateSprite).l
0001D230 2268 0034                  		movea.l	$34(a0),a1
0001D234 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D23A 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D240                            
0001D240                            loc_195DA:
0001D240 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001D246 7003                       		moveq	#3,d0
0001D248 C028 0022                  		and.b	obStatus(a0),d0
0001D24C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001D252 8128 0001                  		or.b	d0,obRender(a0)
0001D256 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001D25C                            ; ===========================================================================
0001D25C                            
0001D25C                            Obj75_SpikeMain:; Routine 8
0001D25C 217C 0001 BA0E 0004        		move.l	#Map_BossItems,obMap(a0)
0001D264 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001D26A 117C 0005 001A             		move.b	#5,obFrame(a0)
0001D270 2268 0034                  		movea.l	$34(a0),a1
0001D274 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001D27A 6600                       		bne.s	loc_1961C
0001D27C 4A28 0001                  		tst.b	obRender(a0)
0001D280 6A00                       		bpl.s	Obj75_SpikeDelete
0001D282                            
0001D282                            loc_1961C:
0001D282 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D288 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D28E 3028 003C                  		move.w	$3C(a0),d0
0001D292 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001D298 6600                       		bne.s	loc_19652
0001D29A 0C29 0006 0028             		cmpi.b	#6,obSubtype(a1)
0001D2A0 6700                       		beq.s	loc_1964C
0001D2A2 4A29 0028                  		tst.b	obSubtype(a1)
0001D2A6 6600                       		bne.s	loc_19658
0001D2A8 0C40 0094                  		cmpi.w	#$94,d0
0001D2AC 6C00                       		bge.s	loc_19658
0001D2AE 5E40                       		addq.w	#7,d0
0001D2B0 6000                       		bra.s	loc_19658
0001D2B2                            ; ===========================================================================
0001D2B2                            
0001D2B2                            loc_1964C:
0001D2B2 4A69 003C                  		tst.w	$3C(a1)
0001D2B6 6A00                       		bpl.s	loc_19658
0001D2B8                            
0001D2B8                            loc_19652:
0001D2B8 4A40                       		tst.w	d0
0001D2BA 6F00                       		ble.s	loc_19658
0001D2BC 5B40                       		subq.w	#5,d0
0001D2BE                            
0001D2BE                            loc_19658:
0001D2BE 3140 003C                  		move.w	d0,$3C(a0)
0001D2C2 E440                       		asr.w	#2,d0
0001D2C4 D168 000C                  		add.w	d0,obY(a0)
0001D2C8 117C 0008 0014             		move.b	#8,obActWid(a0)
0001D2CE 117C 000C 0016             		move.b	#$C,obHeight(a0)
0001D2D4 4228 0020                  		clr.b	obColType(a0)
0001D2D8 2268 0034                  		movea.l	$34(a0),a1
0001D2DC 4A29 0020                  		tst.b	obColType(a1)
0001D2E0 6700                       		beq.s	loc_19688
0001D2E2 4A29 0029                  		tst.b	$29(a1)
0001D2E6 6600                       		bne.s	loc_19688
0001D2E8 117C 0084 0020             		move.b	#$84,obColType(a0)
0001D2EE                            
0001D2EE                            loc_19688:
0001D2EE 6000 FF50                  		bra.w	loc_195DA
0001D2F2                            ; ===========================================================================
0001D2F2                            
0001D2F2                            Obj75_SpikeDelete:
0001D2F2 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001D2F2 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001D2F8                            		include	"_incObj\76 SYZ Boss Blocks.asm"
0001D2F8                            ; ---------------------------------------------------------------------------
0001D2F8                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001D2F8                            ; ---------------------------------------------------------------------------
0001D2F8                            
0001D2F8                            BossBlock:
0001D2F8 7000                       		moveq	#0,d0
0001D2FA 1028 0024                  		move.b	obRoutine(a0),d0
0001D2FE 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001D302 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001D306                            ; ===========================================================================
0001D306 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001D308 0000                       		dc.w Obj76_Action-Obj76_Index
0001D30A 0000                       		dc.w loc_19762-Obj76_Index
0001D30C                            ; ===========================================================================
0001D30C                            
0001D30C                            Obj76_Main:	; Routine 0
0001D30C 7800                       		moveq	#0,d4
0001D30E 3A3C 2C10                  		move.w	#$2C10,d5
0001D312 7C09                       		moveq	#9,d6
0001D314 43D0                       		lea	(a0),a1
0001D316 6000                       		bra.s	Obj76_MakeBlock
0001D318                            ; ===========================================================================
0001D318                            
0001D318                            Obj76_Loop:
0001D318 4EB9 0000 FD64             		jsr	(FindFreeObj).l
0001D31E 6600                       		bne.s	Obj76_ExitLoop
0001D320                            
0001D320                            Obj76_MakeBlock:
0001D320 12BC 0076                  		move.b	#id_BossBlock,(a1)
0001D324 237C 0000 0000 0004        		move.l	#Map_BossBlock,obMap(a1)
0001D32C 337C 4000 0002             		move.w	#$4000,obGfx(a1)
0001D332 137C 0004 0001             		move.b	#4,obRender(a1)
0001D338 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001D33E 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001D344 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001D34A 3345 0008                  		move.w	d5,obX(a1)	; set x-position
0001D34E 337C 0582 000C             		move.w	#$582,obY(a1)
0001D354 3344 0028                  		move.w	d4,obSubtype(a1)
0001D358 0644 0101                  		addi.w	#$101,d4
0001D35C 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001D360 5429 0024                  		addq.b	#2,obRoutine(a1)
0001D364 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001D368                            
0001D368                            Obj76_ExitLoop:
0001D368 4E75                       		rts	
0001D36A                            ; ===========================================================================
0001D36A                            
0001D36A                            Obj76_Action:	; Routine 2
0001D36A 1028 0029                  		move.b	$29(a0),d0
0001D36E B028 0028                  		cmp.b	obSubtype(a0),d0
0001D372 6700                       		beq.s	Obj76_Solid
0001D374 4A00                       		tst.b	d0
0001D376 6B00                       		bmi.s	loc_19718
0001D378                            
0001D378                            loc_19712:
0001D378 6100 0000                  		bsr.w	Obj76_Break
0001D37C 6000                       		bra.s	Obj76_Display
0001D37E                            ; ===========================================================================
0001D37E                            
0001D37E                            loc_19718:
0001D37E 2268 0034                  		movea.l	$34(a0),a1
0001D382 4A29 0021                  		tst.b	obColProp(a1)
0001D386 67F0                       		beq.s	loc_19712
0001D388 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D38E 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D394 0668 002C 000C             		addi.w	#$2C,obY(a0)
0001D39A B2C8                       		cmpa.w	a0,a1
0001D39C 6500                       		bcs.s	Obj76_Display
0001D39E 3029 0012                  		move.w	obVelY(a1),d0
0001D3A2 48C0                       		ext.l	d0
0001D3A4 E080                       		asr.l	#8,d0
0001D3A6 D168 000C                  		add.w	d0,obY(a0)
0001D3AA 6000                       		bra.s	Obj76_Display
0001D3AC                            ; ===========================================================================
0001D3AC                            
0001D3AC                            Obj76_Solid:
0001D3AC 323C 001B                  		move.w	#$1B,d1
0001D3B0 343C 0010                  		move.w	#$10,d2
0001D3B4 363C 0011                  		move.w	#$11,d3
0001D3B8 3828 0008                  		move.w	obX(a0),d4
0001D3BC 4EB9 0001 1D16             		jsr	(SolidObject).l
0001D3C2                            
0001D3C2                            Obj76_Display:
0001D3C2 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001D3C8                            ; ===========================================================================
0001D3C8                            
0001D3C8                            loc_19762:	; Routine 4
0001D3C8 4A28 0001                  		tst.b	obRender(a0)
0001D3CC 6A00                       		bpl.s	Obj76_Delete
0001D3CE 4EB9 0000 F77E             		jsr	(ObjectFall).l
0001D3D4 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001D3DA                            ; ===========================================================================
0001D3DA                            
0001D3DA                            Obj76_Delete:
0001D3DA 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001D3E0                            
0001D3E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D3E0                            
0001D3E0                            
0001D3E0                            Obj76_Break:
0001D3E0 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001D3E4 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001D3E8 7801                       		moveq	#1,d4
0001D3EA 7203                       		moveq	#3,d1
0001D3EC 7438                       		moveq	#$38,d2
0001D3EE 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D3F2 117C 0008 0014             		move.b	#8,obActWid(a0)
0001D3F8 117C 0008 0016             		move.b	#8,obHeight(a0)
0001D3FE 43D0                       		lea	(a0),a1
0001D400 6000                       		bra.s	Obj76_MakeFrag
0001D402                            ; ===========================================================================
0001D402                            
0001D402                            Obj76_LoopFrag:
0001D402 4EB9 0000 FD7A             		jsr	(FindNextFreeObj).l
0001D408 6600                       		bne.s	loc_197D4
0001D40A                            
0001D40A                            Obj76_MakeFrag:
0001D40A 45D0                       		lea	(a0),a2
0001D40C 47D1                       		lea	(a1),a3
0001D40E 7603                       		moveq	#3,d3
0001D410                            
0001D410                            loc_197AA:
0001D410 26DA                       		move.l	(a2)+,(a3)+
0001D412 26DA                       		move.l	(a2)+,(a3)+
0001D414 26DA                       		move.l	(a2)+,(a3)+
0001D416 26DA                       		move.l	(a2)+,(a3)+
0001D418 51CB FFF6                  		dbf	d3,loc_197AA
0001D41C                            
0001D41C 335C 0010                  		move.w	(a4)+,obVelX(a1)
0001D420 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001D424 361D                       		move.w	(a5)+,d3
0001D426 D769 0008                  		add.w	d3,obX(a1)
0001D42A 361D                       		move.w	(a5)+,d3
0001D42C D769 000C                  		add.w	d3,obY(a1)
0001D430 1344 001A                  		move.b	d4,obFrame(a1)
0001D434 5244                       		addq.w	#1,d4
0001D436 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001D43A                            
0001D43A                            loc_197D4:
0001D444                            ; End of function Obj76_Break
0001D444                            
0001D444                            ; ===========================================================================
0001D444 FE80 FE00                  Obj76_FragSpeed:dc.w -$180, -$200
0001D448 0180 FE00                  		dc.w $180, -$200
0001D44C FF00 FF00                  		dc.w -$100, -$100
0001D450 0100 FF00                  		dc.w $100, -$100
0001D454 FFF8 FFF8                  Obj76_FragPos:	dc.w -8, -8
0001D458 0010 0000                  		dc.w $10, 0
0001D45C 0000 0010                  		dc.w 0,	$10
0001D460 0010 0010                  		dc.w $10, $10
0001D460 0010 0010                  		dc.w $10, $10
0001D464                            Map_BossBlock:	include	"_maps\SYZ Boss Blocks.asm"
0001D464                            ; ---------------------------------------------------------------------------
0001D464                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001D464                            ; ---------------------------------------------------------------------------
0001D464                            Map_BossBlock_internal:
0001D464 0000                       		dc.w @wholeblock-Map_BossBlock_internal
0001D466 0000                       		dc.w @topleft-Map_BossBlock_internal
0001D468 0000                       		dc.w @topright-Map_BossBlock_internal
0001D46A 0000                       		dc.w @bottomleft-Map_BossBlock_internal
0001D46C 0000                       		dc.w @bottomright-Map_BossBlock_internal
0001D46E 02                         @wholeblock:	dc.b 2
0001D46F F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001D474 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001D479 00                         		dc.b 0
0001D47A 01                         @topleft:	dc.b 1
0001D47B F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001D480 01                         @topright:	dc.b 1
0001D481 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001D486 01                         @bottomleft:	dc.b 1
0001D487 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001D48C 01                         @bottomright:	dc.b 1
0001D48D F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001D492                            		even
0001D492                            		even
0001D492                            
0001D492                            loc_1982C:
0001D492 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001D498                            
0001D498                            		include	"_incObj\82 Eggman - Scrap Brain 2.asm"
0001D498                            ; ---------------------------------------------------------------------------
0001D498                            ; Object 82 - Eggman (SBZ2)
0001D498                            ; ---------------------------------------------------------------------------
0001D498                            
0001D498                            ScrapEggman:
0001D498 7000                       		moveq	#0,d0
0001D49A 1028 0024                  		move.b	obRoutine(a0),d0
0001D49E 323B 0000                  		move.w	SEgg_Index(pc,d0.w),d1
0001D4A2 4EFB 1000                  		jmp	SEgg_Index(pc,d1.w)
0001D4A6                            ; ===========================================================================
0001D4A6 0000                       SEgg_Index:	dc.w SEgg_Main-SEgg_Index
0001D4A8 0000                       		dc.w SEgg_Eggman-SEgg_Index
0001D4AA 0000                       		dc.w SEgg_Switch-SEgg_Index
0001D4AC                            
0001D4AC 0200 03                    SEgg_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001D4AF 0400 03                    		dc.b 4,	0, 3
0001D4B2                            ; ===========================================================================
0001D4B2                            
0001D4B2                            SEgg_Main:	; Routine 0
0001D4B2 45FA FFF8                  		lea	SEgg_ObjData(pc),a2
0001D4B6 317C 1C60 0008             		move.w	#$1C60,obX(a0)
0001D4BC 317C 02A4 000C             		move.w	#$2A4,obY(a0)
0001D4C2 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D4C8 117C 0010 0021             		move.b	#$10,obColProp(a0)
0001D4CE 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001D4D4 4228 0025                  		clr.b	ob2ndRout(a0)
0001D4D8 115A 0024                  		move.b	(a2)+,obRoutine(a0)
0001D4DC 115A 001C                  		move.b	(a2)+,obAnim(a0)
0001D4E0 115A 0018                  		move.b	(a2)+,obPriority(a0)
0001D4E4 217C 0000 0000 0004        		move.l	#Map_SEgg,obMap(a0)
0001D4EC 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D4F2 117C 0004 0001             		move.b	#4,obRender(a0)
0001D4F8 08E8 0007 0001             		bset	#7,obRender(a0)
0001D4FE 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001D504 4EB9 0000 FD7A             		jsr	(FindNextFreeObj).l
0001D50A 6600                       		bne.s	SEgg_Eggman
0001D50C 2348 0034                  		move.l	a0,$34(a1)
0001D510 12BC 0082                  		move.b	#id_ScrapEggman,(a1) ; load switch object
0001D514 337C 1C30 0008             		move.w	#$1C30,obX(a1)
0001D51A 337C 02BC 000C             		move.w	#$2BC,obY(a1)
0001D520 4228 0025                  		clr.b	ob2ndRout(a0)
0001D524 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001D528 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001D52C 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001D530 237C 0000 E002 0004        		move.l	#Map_But,obMap(a1)
0001D538 337C 04A4 0002             		move.w	#$4A4,obGfx(a1)
0001D53E 137C 0004 0001             		move.b	#4,obRender(a1)
0001D544 08E9 0007 0001             		bset	#7,obRender(a1)
0001D54A 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001D550 137C 0000 001A             		move.b	#0,obFrame(a1)
0001D556                            
0001D556                            SEgg_Eggman:	; Routine 2
0001D556 7000                       		moveq	#0,d0
0001D558 1028 0025                  		move.b	ob2ndRout(a0),d0
0001D55C 323B 0000                  		move.w	SEgg_EggIndex(pc,d0.w),d1
0001D560 4EBB 1000                  		jsr	SEgg_EggIndex(pc,d1.w)
0001D564 43FA 0000                  		lea	Ani_SEgg(pc),a1
0001D568 4EB9 0000 C880             		jsr	(AnimateSprite).l
0001D56E 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001D574                            ; ===========================================================================
0001D574 0000                       SEgg_EggIndex:	dc.w SEgg_ChkSonic-SEgg_EggIndex
0001D576 0000                       		dc.w SEgg_PreLeap-SEgg_EggIndex
0001D578 0000                       		dc.w SEgg_Leap-SEgg_EggIndex
0001D57A 0000                       		dc.w loc_19934-SEgg_EggIndex
0001D57C                            ; ===========================================================================
0001D57C                            
0001D57C                            SEgg_ChkSonic:
0001D57C 3028 0008                  		move.w	obX(a0),d0
0001D580 9078 D008                  		sub.w	(v_player+obX).w,d0
0001D584 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001D588 6400                       		bcc.s	loc_19934	; if not, branch
0001D58A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D58E 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001D594 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D59A                            
0001D59A                            loc_19934:
0001D59A 4EF9 0000 F7B6             		jmp	(SpeedToPos).l
0001D5A0                            ; ===========================================================================
0001D5A0                            
0001D5A0                            SEgg_PreLeap:
0001D5A0 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001D5A4 6600                       		bne.s	loc_19954	; if time remains, branch
0001D5A6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D5AA 117C 0002 001C             		move.b	#2,obAnim(a0)
0001D5B0 5868 000C                  		addq.w	#4,obY(a0)
0001D5B4 317C 000F 003C             		move.w	#15,$3C(a0)
0001D5BA                            
0001D5BA                            loc_19954:
0001D5BA 60DE                       		bra.s	loc_19934
0001D5BC                            ; ===========================================================================
0001D5BC                            
0001D5BC                            SEgg_Leap:
0001D5BC 5368 003C                  		subq.w	#1,$3C(a0)
0001D5C0 6E00                       		bgt.s	loc_199D0
0001D5C2 6600                       		bne.s	loc_1996A
0001D5C4 317C FF04 0010             		move.w	#-$FC,obVelX(a0) ; make Eggman leap
0001D5CA 317C FC40 0012             		move.w	#-$3C0,obVelY(a0)
0001D5D0                            
0001D5D0                            loc_1996A:
0001D5D0 0C68 1C32 0008             		cmpi.w	#$1C32,obX(a0)
0001D5D6 6E00                       		bgt.s	loc_19976
0001D5D8 4268 0010                  		clr.w	obVelX(a0)
0001D5DC                            
0001D5DC                            loc_19976:
0001D5DC 0668 0024 0012             		addi.w	#$24,obVelY(a0)
0001D5E2 4A68 0012                  		tst.w	obVelY(a0)
0001D5E6 6B00                       		bmi.s	SEgg_FindBlocks
0001D5E8 0C68 0295 000C             		cmpi.w	#$295,obY(a0)
0001D5EE 6500                       		bcs.s	SEgg_FindBlocks
0001D5F0 317C 5357 0028             		move.w	#$5357,obSubtype(a0)
0001D5F6 0C68 029B 000C             		cmpi.w	#$29B,obY(a0)
0001D5FC 6500                       		bcs.s	SEgg_FindBlocks
0001D5FE 317C 029B 000C             		move.w	#$29B,obY(a0)
0001D604 4268 0012                  		clr.w	obVelY(a0)
0001D608                            
0001D608                            SEgg_FindBlocks:
0001D608 3028 0010                  		move.w	obVelX(a0),d0
0001D60C 8068 0012                  		or.w	obVelY(a0),d0
0001D610 6600                       		bne.s	loc_199D0
0001D612 43F8 D000                  		lea	(v_objspace).w,a1 ; start at the first object RAM
0001D616 703E                       		moveq	#$3E,d0
0001D618 7240                       		moveq	#$40,d1
0001D61A                            
0001D61A                            SEgg_FindLoop:	
0001D61A D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001D61C 0C11 0083                  		cmpi.b	#id_FalseFloor,(a1) ; is object a block? (object $83)
0001D620 57C8 FFF8                  		dbeq	d0,SEgg_FindLoop ; if not, repeat (max	$3E times)
0001D624                            
0001D624 6600                       		bne.s	loc_199D0
0001D626 337C 474F 0028             		move.w	#$474F,obSubtype(a1) ; set block to disintegrate
0001D62C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D630 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D636                            
0001D636                            loc_199D0:
0001D636 6000 FF62                  		bra.w	loc_19934
0001D63A                            ; ===========================================================================
0001D63A                            
0001D63A                            SEgg_Switch:	; Routine 4
0001D63A 7000                       		moveq	#0,d0
0001D63C 1028 0025                  		move.b	ob2ndRout(a0),d0
0001D640 303B 0000                  		move.w	SEgg_SwIndex(pc,d0.w),d0
0001D644 4EFB 0000                  		jmp	SEgg_SwIndex(pc,d0.w)
0001D648                            ; ===========================================================================
0001D648 0000                       SEgg_SwIndex:	dc.w loc_199E6-SEgg_SwIndex
0001D64A 0000                       		dc.w SEgg_SwDisplay-SEgg_SwIndex
0001D64C                            ; ===========================================================================
0001D64C                            
0001D64C                            loc_199E6:
0001D64C 2268 0034                  		movea.l	$34(a0),a1
0001D650 0C69 5357 0028             		cmpi.w	#$5357,obSubtype(a1)
0001D656 6600                       		bne.s	SEgg_SwDisplay
0001D658 117C 0001 001A             		move.b	#1,obFrame(a0)
0001D65E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D662                            
0001D662                            SEgg_SwDisplay:
0001D662 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001D662 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001D668                            		include	"_anim\Eggman - Scrap Brain 2 & Final.asm"
0001D668                            ; ---------------------------------------------------------------------------
0001D668                            ; Animation script - Eggman (SBZ2)
0001D668                            ; ---------------------------------------------------------------------------
0001D668 0000                       Ani_SEgg:	dc.w @stand-Ani_SEgg
0001D66A 0000                       		dc.w @laugh-Ani_SEgg
0001D66C 0000                       		dc.w @jump1-Ani_SEgg
0001D66E 0000                       		dc.w @intube-Ani_SEgg
0001D670 0000                       		dc.w @running-Ani_SEgg
0001D672 0000                       		dc.w @jump2-Ani_SEgg
0001D674 0000                       		dc.w @starjump-Ani_SEgg
0001D676 7E00 FF                    @stand:		dc.b $7E, 0, afEnd
0001D67A 00                         		even
0001D67A 0601 02FF                  @laugh:		dc.b 6,	1, 2, afEnd
0001D67E 0E03 0404 0000 00FF        @jump1:		dc.b $E, 3, 4, 4, 0, 0,	0, afEnd
0001D686 0005 09FF                  @intube:	dc.b 0,	5, 9, afEnd
0001D68A 0607 0408 04FF             @running:	dc.b 6,	7, 4, 8, 4, afEnd
0001D690 0F04 0303 FF               @jump2:		dc.b $F, 4, 3, 3, afEnd
0001D696 00                         		even
0001D696 7E06 FF                    @starjump:	dc.b $7E, 6, afEnd
0001D69A 00                         		even
0001D69A 00                         		even
0001D69A                            Map_SEgg:	include	"_maps\Eggman - Scrap Brain 2.asm"
0001D69A                            ; --------------------------------------------------------------------------------
0001D69A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001D69A                            ; --------------------------------------------------------------------------------
0001D69A                            
0001D69A                            SME_y00JM:	
0001D69A 0000 0000                  		dc.w SME_y00JM_16-SME_y00JM, SME_y00JM_26-SME_y00JM	
0001D69E 0000 0000                  		dc.w SME_y00JM_4A-SME_y00JM, SME_y00JM_6E-SME_y00JM	
0001D6A2 0000 0000                  		dc.w SME_y00JM_83-SME_y00JM, SME_y00JM_A7-SME_y00JM	
0001D6A6 0000 0000                  		dc.w SME_y00JM_BC-SME_y00JM, SME_y00JM_E0-SME_y00JM	
0001D6AA 0000 0000                  		dc.w SME_y00JM_FA-SME_y00JM, SME_y00JM_119-SME_y00JM	
0001D6AE 0000                       		dc.w SME_y00JM_142-SME_y00JM	
0001D6B0 03                         SME_y00JM_16:	dc.b 3	
0001D6B1 FC00 008F E8               		dc.b $FC, 0, 0, $8F, $E8	
0001D6B6 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001D6BB 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001D6C0 07                         SME_y00JM_26:	dc.b 7	
0001D6C1 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0	
0001D6C6 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001D6CB FC00 008F E8               		dc.b $FC, 0, 0, $8F, $E8	
0001D6D0 F800 0002 F0               		dc.b $F8, 0, 0, 2, $F0	
0001D6D5 F800 0005 F8               		dc.b $F8, 0, 0, 5, $F8	
0001D6DA F800 0008 00               		dc.b $F8, 0, 0, 8, 0	
0001D6DF F800 000B 08               		dc.b $F8, 0, 0, $B, 8	
0001D6E4 07                         SME_y00JM_4A:	dc.b 7	
0001D6E5 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0	
0001D6EA FD00 008F E8               		dc.b $FD, 0, 0, $8F, $E8	
0001D6EF F900 0002 F0               		dc.b $F9, 0, 0, 2, $F0	
0001D6F4 F900 0005 F8               		dc.b $F9, 0, 0, 5, $F8	
0001D6F9 F900 0008 00               		dc.b $F9, 0, 0, 8, 0	
0001D6FE F900 000B 08               		dc.b $F9, 0, 0, $B, 8	
0001D703 010F 007F F0               		dc.b 1, $F, 0, $7F, $F0	
0001D708 04                         SME_y00JM_6E:	dc.b 4	
0001D709 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0	
0001D70E F504 0830 10               		dc.b $F5, 4, 8, $30, $10	
0001D713 0809 084E F0               		dc.b 8, 9, 8, $4E, $F0	
0001D718 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0	
0001D71D 07                         SME_y00JM_83:	dc.b 7	
0001D71E F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001D723 F104 0830 10               		dc.b $F1, 4, 8, $30, $10	
0001D728 0806 083E F8               		dc.b 8, 6, 8, $3E, $F8	
0001D72D E800 0000 F0               		dc.b $E8, 0, 0, 0, $F0	
0001D732 E800 0003 F8               		dc.b $E8, 0, 0, 3, $F8	
0001D737 E800 0006 00               		dc.b $E8, 0, 0, 6, 0	
0001D73C E800 0009 08               		dc.b $E8, 0, 0, 9, 8	
0001D741 04                         SME_y00JM_A7:	dc.b 4	
0001D742 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001D747 E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001D74C E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001D751 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001D756 07                         SME_y00JM_BC:	dc.b 7	
0001D757 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001D75C E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001D761 0409 0834 00               		dc.b 4, 9, 8, $34, 0	
0001D766 0405 083A E8               		dc.b 4, 5, 8, $3A, $E8	
0001D76B F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001D770 F104 0854 10               		dc.b $F1, 4, 8, $54, $10	
0001D775 F104 0054 E0               		dc.b $F1, 4, 0, $54, $E0	
0001D77A 05                         SME_y00JM_E0:	dc.b 5	
0001D77B F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001D780 F104 0830 10               		dc.b $F1, 4, 8, $30, $10	
0001D785 0409 0834 00               		dc.b 4, 9, 8, $34, 0	
0001D78A 0405 083A E8               		dc.b 4, 5, 8, $3A, $E8	
0001D78F E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001D794 06                         SME_y00JM_FA:	dc.b 6	
0001D795 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0	
0001D79A EF04 0830 10               		dc.b $EF, 4, 8, $30, $10	
0001D79F 0905 0844 00               		dc.b 9, 5, 8, $44, 0	
0001D7A4 0301 0848 F8               		dc.b 3, 1, 8, $48, $F8	
0001D7A9 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8	
0001D7AE E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
0001D7B3 08                         SME_y00JM_119:	dc.b 8	
0001D7B4 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001D7B9 E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001D7BE E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001D7C3 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001D7C8 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0, $F0	
0001D7CD F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0, $F0	
0001D7D2 000D 3EF0 F0               		dc.b 0, $D, $3E, $F0, $F0	
0001D7D7 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0, $F0	
0001D7DC 03                         SME_y00JM_142:	dc.b 3	
0001D7DD EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4	
0001D7E2 F408 005E 04               		dc.b $F4, 8, 0, $5E, 4	
0001D7E7 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC	
0001D7EC                            		even
0001D7EC                            		even
0001D7EC                            		include	"_incObj\83 SBZ Eggman's Crumbling Floor.asm"
0001D7EC                            ; ---------------------------------------------------------------------------
0001D7EC                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001D7EC                            ; ---------------------------------------------------------------------------
0001D7EC                            
0001D7EC                            FalseFloor:
0001D7EC 7000                       		moveq	#0,d0
0001D7EE 1028 0024                  		move.b	obRoutine(a0),d0
0001D7F2 323B 0000                  		move.w	FFloor_Index(pc,d0.w),d1
0001D7F6 4EFB 1000                  		jmp	FFloor_Index(pc,d1.w)
0001D7FA                            ; ===========================================================================
0001D7FA 0000                       FFloor_Index:	dc.w FFloor_Main-FFloor_Index
0001D7FC 0000                       		dc.w FFloor_ChkBreak-FFloor_Index
0001D7FE 0000                       		dc.w loc_19C36-FFloor_Index
0001D800 0000                       		dc.w loc_19C62-FFloor_Index
0001D802 0000                       		dc.w loc_19C72-FFloor_Index
0001D804 0000                       		dc.w loc_19C80-FFloor_Index
0001D806                            ; ===========================================================================
0001D806                            
0001D806                            FFloor_Main:	; Routine 0
0001D806 317C 1B80 0008             		move.w	#$1B80,obX(a0)
0001D80C 317C 02D0 000C             		move.w	#$2D0,obY(a0)
0001D812 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001D818 117C 0010 0016             		move.b	#$10,obHeight(a0)
0001D81E 117C 0004 0001             		move.b	#4,obRender(a0)
0001D824 08E8 0007 0001             		bset	#7,obRender(a0)
0001D82A 7800                       		moveq	#0,d4
0001D82C 3A3C 1B10                  		move.w	#$1B10,d5
0001D830 7C07                       		moveq	#7,d6
0001D832 45E8 0030                  		lea	$30(a0),a2
0001D836                            
0001D836                            FFloor_MakeBlock:
0001D836 4EB9 0000 FD64             		jsr	(FindFreeObj).l
0001D83C 6600                       		bne.s	FFloor_ExitMake
0001D83E 34C9                       		move.w	a1,(a2)+
0001D840 12BC 0083                  		move.b	#id_FalseFloor,(a1) ; load block object
0001D844 237C 0000 0000 0004        		move.l	#Map_FFloor,obMap(a1)
0001D84C 337C 4518 0002             		move.w	#$4518,obGfx(a1)
0001D852 137C 0004 0001             		move.b	#4,obRender(a1)
0001D858 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001D85E 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001D864 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001D86A 3345 0008                  		move.w	d5,obX(a1)	; set X	position
0001D86E 337C 02D0 000C             		move.w	#$2D0,obY(a1)
0001D874 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001D878 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001D87E 51CE FFB6                  		dbf	d6,FFloor_MakeBlock ; repeat sequence 7 more times
0001D882                            
0001D882                            FFloor_ExitMake:
0001D882 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D886 4E75                       		rts	
0001D888                            ; ===========================================================================
0001D888                            
0001D888                            FFloor_ChkBreak:; Routine 2
0001D888 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001D88E 6600                       		bne.s	FFloor_Solid	; if not, branch
0001D890 4228 001A                  		clr.b	obFrame(a0)
0001D894 5428 0024                  		addq.b	#2,obRoutine(a0) ; next subroutine
0001D898                            
0001D898                            FFloor_Solid:
0001D898 7000                       		moveq	#0,d0
0001D89A 1028 001A                  		move.b	obFrame(a0),d0
0001D89E 4400                       		neg.b	d0
0001D8A0 4880                       		ext.w	d0
0001D8A2 5040                       		addq.w	#8,d0
0001D8A4 E940                       		asl.w	#4,d0
0001D8A6 383C 1C00                  		move.w	#$1C00,d4
0001D8AA 9840                       		sub.w	d0,d4
0001D8AC 1140 0014                  		move.b	d0,obActWid(a0)
0001D8B0 3144 0008                  		move.w	d4,obX(a0)
0001D8B4 720B                       		moveq	#$B,d1
0001D8B6 D240                       		add.w	d0,d1
0001D8B8 7410                       		moveq	#$10,d2
0001D8BA 7611                       		moveq	#$11,d3
0001D8BC 4EF9 0001 1D16             		jmp	(SolidObject).l
0001D8C2                            ; ===========================================================================
0001D8C2                            
0001D8C2                            loc_19C36:	; Routine 4
0001D8C2 0428 000E 001E             		subi.b	#$E,obTimeFrame(a0)
0001D8C8 6400                       		bcc.s	FFloor_Solid2
0001D8CA 70FF                       		moveq	#-1,d0
0001D8CC 1028 001A                  		move.b	obFrame(a0),d0
0001D8D0 4880                       		ext.w	d0
0001D8D2 D040                       		add.w	d0,d0
0001D8D4 3030 0030                  		move.w	$30(a0,d0.w),d0
0001D8D8 2240                       		movea.l	d0,a1
0001D8DA 337C 474F 0028             		move.w	#$474F,obSubtype(a1)
0001D8E0 5228 001A                  		addq.b	#1,obFrame(a0)
0001D8E4 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)
0001D8EA 6700                       		beq.s	loc_19C62
0001D8EC                            
0001D8EC                            FFloor_Solid2:
0001D8EC 60AA                       		bra.s	FFloor_Solid
0001D8EE                            ; ===========================================================================
0001D8EE                            
0001D8EE                            loc_19C62:	; Routine 6
0001D8EE 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001D8F4 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001D8FA 6000 FB96                  		bra.w	loc_1982C
0001D8FE                            ; ===========================================================================
0001D8FE                            
0001D8FE                            loc_19C72:	; Routine 8
0001D8FE 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001D904 6700                       		beq.s	FFloor_Break	; if yes, branch
0001D906 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001D90C                            ; ===========================================================================
0001D90C                            
0001D90C                            loc_19C80:	; Routine $A
0001D90C 4A28 0001                  		tst.b	obRender(a0)
0001D910 6A00 FB80                  		bpl.w	loc_1982C
0001D914 4EB9 0000 F77E             		jsr	(ObjectFall).l
0001D91A 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001D920                            ; ===========================================================================
0001D920                            
0001D920                            FFloor_Break:
0001D920 49FA 0000                  		lea	FFloor_FragSpeed(pc),a4
0001D924 4BFA 0000                  		lea	FFloor_FragPos(pc),a5
0001D928 7801                       		moveq	#1,d4
0001D92A 7203                       		moveq	#3,d1
0001D92C 7438                       		moveq	#$38,d2
0001D92E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D932 117C 0008 0014             		move.b	#8,obActWid(a0)
0001D938 117C 0008 0016             		move.b	#8,obHeight(a0)
0001D93E 43D0                       		lea	(a0),a1
0001D940 6000                       		bra.s	FFloor_MakeFrag
0001D942                            ; ===========================================================================
0001D942                            
0001D942                            FFloor_LoopFrag:
0001D942 4EB9 0000 FD7A             		jsr	(FindNextFreeObj).l
0001D948 6600                       		bne.s	FFloor_BreakSnd
0001D94A                            
0001D94A                            FFloor_MakeFrag:
0001D94A 45D0                       		lea	(a0),a2
0001D94C 47D1                       		lea	(a1),a3
0001D94E 7603                       		moveq	#3,d3
0001D950                            
0001D950                            loc_19CC4:
0001D950 26DA                       		move.l	(a2)+,(a3)+
0001D952 26DA                       		move.l	(a2)+,(a3)+
0001D954 26DA                       		move.l	(a2)+,(a3)+
0001D956 26DA                       		move.l	(a2)+,(a3)+
0001D958 51CB FFF6                  		dbf	d3,loc_19CC4
0001D95C                            
0001D95C 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001D960 361D                       		move.w	(a5)+,d3
0001D962 D769 0008                  		add.w	d3,obX(a1)
0001D966 361D                       		move.w	(a5)+,d3
0001D968 D769 000C                  		add.w	d3,obY(a1)
0001D96C 1344 001A                  		move.b	d4,obFrame(a1)
0001D970 5244                       		addq.w	#1,d4
0001D972 51C9 FFCE                  		dbf	d1,FFloor_LoopFrag ; repeat sequence 3 more times
0001D976                            
0001D976                            FFloor_BreakSnd:
0001D980 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001D986                            ; ===========================================================================
0001D986 0080 0000                  FFloor_FragSpeed:dc.w $80, 0
0001D98A 0120 00C0                  		dc.w $120, $C0
0001D98E FFF8 FFF8                  FFloor_FragPos:	dc.w -8, -8
0001D992 0010 0000                  		dc.w $10, 0
0001D996 0000 0010                  		dc.w 0,	$10
0001D99A 0010 0010                  		dc.w $10, $10
0001D99A 0010 0010                  		dc.w $10, $10
0001D99E                            Map_FFloor:	include	"_maps\SBZ Eggman's Crumbling Floor.asm"
0001D99E                            ; ---------------------------------------------------------------------------
0001D99E                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001D99E                            ; ---------------------------------------------------------------------------
0001D99E                            Map_FFloor_internal:
0001D99E 0000                       		dc.w @wholeblock-Map_FFloor_internal
0001D9A0 0000                       		dc.w @topleft-Map_FFloor_internal
0001D9A2 0000                       		dc.w @topright-Map_FFloor_internal
0001D9A4 0000                       		dc.w @bottomleft-Map_FFloor_internal
0001D9A6 0000                       		dc.w @bottomright-Map_FFloor_internal
0001D9A8 01                         @wholeblock:	dc.b 1
0001D9A9 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001D9AE 02                         @topleft:	dc.b 2
0001D9AF F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001D9B4 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001D9B9 00                         		dc.b 0
0001D9BA 02                         @topright:	dc.b 2
0001D9BB F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001D9C0 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001D9C5 00                         		dc.b 0
0001D9C6 02                         @bottomleft:	dc.b 2
0001D9C7 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001D9CC F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001D9D1 00                         		dc.b 0
0001D9D2 02                         @bottomright:	dc.b 2
0001D9D3 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001D9D8 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001D9DE 00                         		even
0001D9DE 00                         		even
0001D9DE                            		include	"_incObj\85 Boss - Final.asm"
0001D9DE                            ; ---------------------------------------------------------------------------
0001D9DE                            ; Object 85 - Eggman (FZ)
0001D9DE                            ; ---------------------------------------------------------------------------
0001D9DE                            
0001D9DE                            Obj85_Delete:
0001D9DE 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001D9E4                            ; ===========================================================================
0001D9E4                            
0001D9E4                            BossFinal:
0001D9E4 7000                       		moveq	#0,d0
0001D9E6 1028 0024                  		move.b	obRoutine(a0),d0
0001D9EA 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001D9EE 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001D9F2                            ; ===========================================================================
0001D9F2 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001D9F4 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001D9F6 0000                       		dc.w loc_1A38E-Obj85_Index
0001D9F8 0000                       		dc.w loc_1A346-Obj85_Index
0001D9FA 0000                       		dc.w loc_1A2C6-Obj85_Index
0001D9FC 0000                       		dc.w loc_1A3AC-Obj85_Index
0001D9FE 0000                       		dc.w loc_1A264-Obj85_Index
0001DA00                            
0001DA00 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001DA06 0001 D69A                  		dc.l Map_SEgg		; mappings pointer
0001DA0A 25B0 0590 0300             		dc.w $25B0, $590, $300
0001DA10 0000 0000                  		dc.l Map_EggCyl
0001DA14 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001DA1A 0000 0000                  		dc.l Map_FZLegs
0001DA1E 26E0 0596 0470             		dc.w $26E0, $596, $470
0001DA24 0001 D69A                  		dc.l Map_SEgg
0001DA28 26E0 0596 0400             		dc.w $26E0, $596, $400
0001DA2E 0001 B91E                  		dc.l Map_Eggman
0001DA32 26E0 0596 0400             		dc.w $26E0, $596, $400
0001DA38 0001 B91E                  		dc.l Map_Eggman
0001DA3C                            
0001DA3C                            Obj85_ObjData2:	; routine num, animation, sprite priority (high and low bytes), width, height		
0001DA3C 0200 0200 2019             		dc.b  2, 0, $02, $00, $20, $19
0001DA42 0400 0080 1208             		dc.b  4, 0, $00, $80, $12,   8
0001DA48 0600 0180 0000             		dc.b  6, 0, $01, $80,   0,   0
0001DA4E 0800 0180 0000             		dc.b  8, 0, $01, $80,   0,   0
0001DA54 0A00 0180 2020             		dc.b $A, 0, $01, $80, $20, $20
0001DA5A 0C00 0180 0000             		dc.b $C, 0, $01, $80,   0,   0
0001DA60                            ; ===========================================================================
0001DA60                            
0001DA60                            Obj85_Main:	; Routine 0
0001DA60 45FA FF9E                  		lea	Obj85_ObjData(pc),a2
0001DA64 47FA FFD6                  		lea	Obj85_ObjData2(pc),a3
0001DA68 2248                       		movea.l	a0,a1
0001DA6A 7205                       		moveq	#5,d1
0001DA6C 6000                       		bra.s	Obj85_LoadBoss
0001DA6E                            ; ===========================================================================
0001DA6E                            
0001DA6E                            Obj85_Loop:
0001DA6E 4EB9 0000 FD7A             		jsr	(FindNextFreeObj).l
0001DA74 6600                       		bne.s	loc_19E20
0001DA76                            
0001DA76                            Obj85_LoadBoss:
0001DA76 12BC 0085                  		move.b	#id_BossFinal,(a1)
0001DA7A 335A 0008                  		move.w	(a2)+,obX(a1)
0001DA7E 335A 000C                  		move.w	(a2)+,obY(a1)
0001DA82 335A 0002                  		move.w	(a2)+,obGfx(a1)
0001DA86 235A 0004                  		move.l	(a2)+,obMap(a1)
0001DA8A 135B 0024                  		move.b	(a3)+,obRoutine(a1)
0001DA8E 135B 001C                  		move.b	(a3)+,obAnim(a1)
0001DA92 335B 0018                  		move.w	(a3)+,obPriority(a1)
0001DA96 135B 0014                  			move.b	(a3)+,obActWid(a1)
0001DA9A 135B 0016                  		move.b	(a3)+,obHeight(a1)
0001DA9E 137C 0004 0001             		move.b	#4,obRender(a1)
0001DAA4 08E8 0007 0001             		bset	#7,obRender(a0)
0001DAAA 2348 0034                  		move.l	a0,$34(a1)
0001DAAE 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001DAB2                            
0001DAB2                            loc_19E20:
0001DAB2 45E8 0036                  		lea	$36(a0),a2
0001DAB6 4EB9 0000 FD64             		jsr	(FindFreeObj).l
0001DABC 6600                       		bne.s	loc_19E5A
0001DABE 12BC 0086                  		move.b	#id_BossPlasma,(a1) ; load energy ball object
0001DAC2 3489                       		move.w	a1,(a2)
0001DAC4 2348 0034                  		move.l	a0,$34(a1)
0001DAC8 45E8 0038                  		lea	$38(a0),a2
0001DACC 7400                       		moveq	#0,d2
0001DACE 7203                       		moveq	#3,d1
0001DAD0                            
0001DAD0                            loc_19E3E:
0001DAD0 4EB9 0000 FD7A             		jsr	(FindNextFreeObj).l
0001DAD6 6600                       		bne.s	loc_19E5A
0001DAD8 34C9                       		move.w	a1,(a2)+
0001DADA 12BC 0084                  		move.b	#id_EggmanCylinder,(a1) ; load crushing	cylinder object
0001DADE 2348 0034                  		move.l	a0,$34(a1)
0001DAE2 1342 0028                  		move.b	d2,obSubtype(a1)
0001DAE6 5442                       		addq.w	#2,d2
0001DAE8 51C9 FFE6                  		dbf	d1,loc_19E3E
0001DAEC                            
0001DAEC                            loc_19E5A:
0001DAEC 317C 0000 0034             		move.w	#0,$34(a0)
0001DAF2 117C 0006 0021             		move.b	#6,obColProp(a0) ; set number of hits to 6
0001DAF8 317C FFFF 0030             		move.w	#-1,$30(a0)
0001DAFE                            
0001DAFE                            Obj85_Eggman:	; Routine 2
0001DAFE 7000                       		moveq	#0,d0
0001DB00 1028 0034                  		move.b	$34(a0),d0
0001DB04 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001DB08 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001DB0C 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001DB12                            ; ===========================================================================
0001DB12 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001DB16 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001DB1A 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001DB1E 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001DB22                            ; ===========================================================================
0001DB22                            
0001DB22                            loc_19E90:
0001DB22 4AB8 F680                  		tst.l	(v_plc_buffer).w
0001DB26 6600                       		bne.s	loc_19EA2
0001DB28 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
0001DB2E 6500                       		bcs.s	loc_19EA2
0001DB30 5428 0034                  		addq.b	#2,$34(a0)
0001DB34                            
0001DB34                            loc_19EA2:
0001DB34 52B8 F636                  		addq.l	#1,(v_random).w
0001DB38 4E75                       		rts	
0001DB3A                            ; ===========================================================================
0001DB3A                            
0001DB3A                            loc_19EA8:
0001DB3A 4A68 0030                  		tst.w	$30(a0)
0001DB3E 6A00                       		bpl.s	loc_19F10
0001DB40 4268 0030                  		clr.w	$30(a0)
0001DB44 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001DB4A 0240 000C                  		andi.w	#$C,d0
0001DB4E 3200                       		move.w	d0,d1
0001DB50 5441                       		addq.w	#2,d1
0001DB52 4A80                       		tst.l	d0
0001DB54 6A00                       		bpl.s	loc_19EC6
0001DB56 C340                       		exg	d1,d0
0001DB58                            
0001DB58                            loc_19EC6:
0001DB58 43FA 0000                  		lea	word_19FD6(pc),a1
0001DB5C 3031 0000                  		move.w	(a1,d0.w),d0
0001DB60 3231 1000                  		move.w	(a1,d1.w),d1
0001DB64 3140 0030                  		move.w	d0,$30(a0)
0001DB68 74FF                       		moveq	#-1,d2
0001DB6A 3430 0038                  		move.w	$38(a0,d0.w),d2
0001DB6E 2242                       		movea.l	d2,a1
0001DB70 137C 00FF 0029             		move.b	#-1,$29(a1)
0001DB76 337C FFFF 0030             		move.w	#-1,$30(a1)
0001DB7C 3430 1038                  		move.w	$38(a0,d1.w),d2
0001DB80 2242                       		movea.l	d2,a1
0001DB82 137C 0001 0029             		move.b	#1,$29(a1)
0001DB88 337C 0000 0030             		move.w	#0,$30(a1)
0001DB8E 317C 0001 0032             		move.w	#1,$32(a0)
0001DB94 4228 0035                  		clr.b	$35(a0)
0001DBA2                            
0001DBA2                            loc_19F10:
0001DBA2 4A68 0032                  		tst.w	$32(a0)
0001DBA6 6B00 0000                  		bmi.w	loc_19FA6
0001DBAA 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001DBB0 3038 D008                  		move.w	(v_player+obX).w,d0
0001DBB4 9068 0008                  		sub.w	obX(a0),d0
0001DBB8 6500                       		bcs.s	loc_19F2E
0001DBBA 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DBC0                            
0001DBC0                            loc_19F2E:
0001DBC0 323C 002B                  		move.w	#$2B,d1
0001DBC4 343C 0014                  		move.w	#$14,d2
0001DBC8 363C 0014                  		move.w	#$14,d3
0001DBCC 3828 0008                  		move.w	obX(a0),d4
0001DBD0 4EB9 0001 1D16             		jsr	(SolidObject).l
0001DBD6 4A44                       		tst.w	d4
0001DBD8 6E00                       		bgt.s	loc_19F50
0001DBDA                            
0001DBDA                            loc_19F48:
0001DBDA 4A28 0035                  		tst.b	$35(a0)
0001DBDE 6600                       		bne.s	loc_19F88
0001DBE0 6000                       		bra.s	loc_19F96
0001DBE2                            ; ===========================================================================
0001DBE2                            
0001DBE2                            loc_19F50:
0001DBE2 5E78 F636                  		addq.w	#7,(v_random).w
0001DBE6 0C38 0002 D01C             		cmpi.b	#id_Roll,(v_player+obAnim).w
0001DBEC 66EC                       		bne.s	loc_19F48
0001DBEE 303C 0300                  		move.w	#$300,d0
0001DBF2 0828 0000 0022             		btst	#0,obStatus(a0)
0001DBF8 6600                       		bne.s	loc_19F6A
0001DBFA 4440                       		neg.w	d0
0001DBFC                            
0001DBFC                            loc_19F6A:
0001DBFC 31C0 D010                  		move.w	d0,(v_player+obVelX).w
0001DC00 4A28 0035                  		tst.b	$35(a0)
0001DC04 6600                       		bne.s	loc_19F88
0001DC06 5328 0021                  		subq.b	#1,obColProp(a0)
0001DC0A 117C 00FF 0035             		move.b	#$FF,$35(a0)
0001DC10 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001DC16                            
0001DC16                            loc_19F88:
0001DC16 5328 0035                  		subq.b	#1,$35(a0)
0001DC1A 6700                       		beq.s	loc_19F96
0001DC1C 117C 0003 001C             		move.b	#3,obAnim(a0)
0001DC22 6000                       		bra.s	loc_19F9C
0001DC24                            ; ===========================================================================
0001DC24                            
0001DC24                            loc_19F96:
0001DC24 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DC2A                            
0001DC2A                            loc_19F9C:
0001DC2A 43FA FA3C                  		lea	Ani_SEgg(pc),a1
0001DC2E 4EF9 0000 C880             		jmp	(AnimateSprite).l
0001DC34                            ; ===========================================================================
0001DC34                            
0001DC34                            loc_19FA6:
0001DC34 4A28 0021                  		tst.b	obColProp(a0)
0001DC38 6700                       		beq.s	loc_19FBC
0001DC3A 5428 0034                  		addq.b	#2,$34(a0)
0001DC3E 317C FFFF 0030             		move.w	#-1,$30(a0)
0001DC44 4268 0032                  		clr.w	$32(a0)
0001DC48 4E75                       		rts	
0001DC4A                            ; ===========================================================================
0001DC4A                            
0001DC4A                            loc_19FBC:
0001DC4A 7064                       			moveq	#100,d0
0001DC4C 6100 0000                  			bsr.w	AddPoints
0001DC50 117C 0006 0034             		move.b	#6,$34(a0)
0001DC56 317C 25C0 0008             		move.w	#$25C0,obX(a0)
0001DC5C 317C 053C 000C             		move.w	#$53C,obY(a0)
0001DC62 117C 0014 0016             		move.b	#$14,obHeight(a0)
0001DC68 4E75                       		rts	
0001DC6A                            ; ===========================================================================
0001DC6A 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001DC7A                            ; ===========================================================================
0001DC7A                            
0001DC7A                            loc_19FE6:
0001DC7A 70FF                       		moveq	#-1,d0
0001DC7C 3028 0036                  		move.w	$36(a0),d0
0001DC80 2240                       		movea.l	d0,a1
0001DC82 4A68 0030                  		tst.w	$30(a0)
0001DC86 6A00                       		bpl.s	loc_1A000
0001DC88 4268 0030                  		clr.w	$30(a0)
0001DC8C 137C 00FF 0029             		move.b	#-1,$29(a1)
0001DC92 6100                       		bsr.s	loc_1A020
0001DC94                            
0001DC94                            loc_1A000:
0001DC94 700F                       		moveq	#$F,d0
0001DC96 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001DC9A 6600                       		bne.s	loc_1A00A
0001DC9C 6100                       		bsr.s	loc_1A020
0001DC9E                            
0001DC9E                            loc_1A00A:
0001DC9E 4A68 0032                  		tst.w	$32(a0)
0001DCA2 6700                       		beq.s	locret_1A01E
0001DCA4 5528 0034                  		subq.b	#2,$34(a0)
0001DCA8 317C FFFF 0030             		move.w	#-1,$30(a0)
0001DCAE 4268 0032                  		clr.w	$32(a0)
0001DCB2                            
0001DCB2                            locret_1A01E:
0001DCB2 4E75                       		rts	
0001DCB4                            ; ===========================================================================
0001DCB4                            
0001DCB4                            loc_1A020:
0001DCBE                            ; ===========================================================================
0001DCBE                            
0001DCBE                            loc_1A02A:
0001DCBE 117C 0030 0014             			move.b	#$30,obActWid(a0)
0001DCC4 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DCCA 4EB9 0000 F7B6             		jsr	(SpeedToPos).l
0001DCD0 117C 0006 001A             		move.b	#6,obFrame(a0)
0001DCD6 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001DCDC 0C68 059C 000C             		cmpi.w	#$59C,obY(a0)
0001DCE2 6500                       		bcs.s	loc_1A070
0001DCE4 317C 059C 000C             		move.w	#$59C,obY(a0)
0001DCEA 5428 0034                  		addq.b	#2,$34(a0)
0001DCEE 117C 0020 0014             			move.b	#$20,obActWid(a0)
0001DCF4 317C 0100 0010             		move.w	#$100,obVelX(a0)
0001DCFA 317C FF00 0012             		move.w	#-$100,obVelY(a0)
0001DD00 5438 F742                  		addq.b	#2,(v_dle_routine).w
0001DD04                            
0001DD04                            loc_1A070:
0001DD04 6000 0000                  		bra.w	loc_1A166
0001DD08                            ; ===========================================================================
0001DD08                            
0001DD08                            loc_1A074:
0001DD08 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DD0E 117C 0004 001C             		move.b	#4,obAnim(a0)
0001DD14 4EB9 0000 F7B6             		jsr	(SpeedToPos).l
0001DD1A 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001DD20 0C68 05A3 000C             		cmpi.w	#$5A3,obY(a0)
0001DD26 6500                       		bcs.s	loc_1A09A
0001DD28 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001DD2E                            
0001DD2E                            loc_1A09A:
0001DD2E 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001DD34 3028 0008                  		move.w	obX(a0),d0
0001DD38 9078 D008                  		sub.w	(v_player+obX).w,d0
0001DD3C 6A00                       		bpl.s	loc_1A0B4
0001DD3E 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001DD44 6000 0000                  		bra.w	loc_1A0F2
0001DD48                            ; ===========================================================================
0001DD48                            
0001DD48                            loc_1A0B4:
0001DD48 0440 0070                  		subi.w	#$70,d0
0001DD4C 6500                       		bcs.s	loc_1A0F2
0001DD4E 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001DD54 5140                       		subq.w	#8,d0
0001DD56 6500                       		bcs.s	loc_1A0F2
0001DD58 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001DD5E 5140                       		subq.w	#8,d0
0001DD60 6500                       		bcs.s	loc_1A0F2
0001DD62 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001DD68 5140                       		subq.w	#8,d0
0001DD6A 6500                       		bcs.s	loc_1A0F2
0001DD6C 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001DD72 5140                       		subq.w	#8,d0
0001DD74 6500                       		bcs.s	loc_1A0F2
0001DD76 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001DD7C 0440 0038                  		subi.w	#$38,d0
0001DD80 6500                       		bcs.s	loc_1A0F2
0001DD82 4268 0010                  		clr.w	obVelX(a0)
0001DD86                            
0001DD86                            loc_1A0F2:
0001DD86 0C68 26A0 0008             		cmpi.w	#$26A0,obX(a0)
0001DD8C 6500                       		bcs.s	loc_1A110
0001DD8E 317C 26A0 0008             		move.w	#$26A0,obX(a0)
0001DD94 317C 0240 0010             		move.w	#$240,obVelX(a0)
0001DD9A 317C FB40 0012             		move.w	#-$4C0,obVelY(a0)
0001DDA0 5428 0034                  		addq.b	#2,$34(a0)
0001DDA4                            
0001DDA4                            loc_1A110:
0001DDA4 6000                       		bra.s	loc_1A15C
0001DDA6                            ; ===========================================================================
0001DDA6                            
0001DDA6                            loc_1A112:
0001DDA6 4EB9 0000 F7B6             		jsr	(SpeedToPos).l
0001DDAC 0C68 26E0 0008             		cmpi.w	#$26E0,obX(a0)
0001DDB2 6500                       		bcs.s	loc_1A124
0001DDB4 4268 0010                  		clr.w	obVelX(a0)
0001DDB8                            
0001DDB8                            loc_1A124:
0001DDB8 0668 0034 0012             		addi.w	#$34,obVelY(a0)
0001DDBE 4A68 0012                  		tst.w	obVelY(a0)
0001DDC2 6B00                       		bmi.s	loc_1A142
0001DDC4 0C68 0592 000C             		cmpi.w	#$592,obY(a0)
0001DDCA 6500                       		bcs.s	loc_1A142
0001DDCC 317C 0592 000C             		move.w	#$592,obY(a0)
0001DDD2 4268 0012                  		clr.w	obVelY(a0)
0001DDD6                            
0001DDD6                            loc_1A142:
0001DDD6 3028 0010                  		move.w	obVelX(a0),d0
0001DDDA 8068 0012                  		or.w	obVelY(a0),d0
0001DDDE 6600                       		bne.s	loc_1A15C
0001DDE0 5428 0034                  		addq.b	#2,$34(a0)
0001DDE4 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001DDEA 117C 0001 0021             		move.b	#1,obColProp(a0)
0001DDF0                            
0001DDF0                            loc_1A15C:
0001DDF0 43FA F876                  		lea	Ani_SEgg(pc),a1
0001DDF4 4EB9 0000 C880             		jsr	(AnimateSprite).l
0001DDFA                            
0001DDFA                            loc_1A166:
0001DDFA 0C78 2700 F72A             		cmpi.w	#$2700,(v_limitright2).w
0001DE00 6C00                       		bge.s	loc_1A172
0001DE02 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001DE06                            
0001DE06                            loc_1A172:
0001DE06 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001DE0C 6C00                       		bge.s	locret_1A190
0001DE0E 323C 001B                  		move.w	#$1B,d1
0001DE12 343C 0070                  		move.w	#$70,d2
0001DE16 363C 0071                  		move.w	#$71,d3
0001DE1A 3828 0008                  		move.w	obX(a0),d4
0001DE1E 4EF9 0001 1D16             		jmp	(SolidObject).l
0001DE24                            ; ===========================================================================
0001DE24                            
0001DE24                            locret_1A190:
0001DE24 4E75                       		rts	
0001DE26                            ; ===========================================================================
0001DE26                            
0001DE26                            loc_1A192:
0001DE26 217C 0001 B91E 0004        		move.l	#Map_Eggman,obMap(a0)
0001DE2E 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001DE34 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DE3A 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DE40 4EB9 0000 F7B6             		jsr	(SpeedToPos).l
0001DE46 0C68 0544 000C             		cmpi.w	#$544,obY(a0)
0001DE4C 6400                       		bcc.s	loc_1A1D0
0001DE4E 317C 0180 0010             		move.w	#$180,obVelX(a0)
0001DE54 317C FFE8 0012             		move.w	#-$18,obVelY(a0)
0001DE5A 117C 000F 0020             		move.b	#$F,obColType(a0)
0001DE60 5428 0034                  		addq.b	#2,$34(a0)
0001DE64                            
0001DE64                            loc_1A1D0:
0001DE64 6000 FF8A                  		bra.w	loc_1A15C
0001DE68                            ; ===========================================================================
0001DE68                            
0001DE68                            loc_1A1D4:
0001DE68 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DE6E 4EB9 0000 F7B6             		jsr	(SpeedToPos).l
0001DE74 4A68 0030                  		tst.w	$30(a0)
0001DE78 6600                       		bne.s	loc_1A1FC
0001DE7A 4A28 0020                  		tst.b	obColType(a0)
0001DE7E 6600                       		bne.s	loc_1A216
0001DE80 317C 001E 0030             		move.w	#$1E,$30(a0)
0001DE86 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001DE8C                            
0001DE8C                            loc_1A1FC:
0001DE8C 5368 0030                  		subq.w	#1,$30(a0)
0001DE90 6600                       		bne.s	loc_1A216
0001DE92 4A28 0022                  		tst.b	obStatus(a0)
0001DE96 6A00                       		bpl.s	loc_1A210
0001DE98 317C 0060 0012             		move.w	#$60,obVelY(a0)
0001DE9E 6000                       		bra.s	loc_1A216
0001DEA0                            ; ===========================================================================
0001DEA0                            
0001DEA0                            loc_1A210:
0001DEA0 117C 000F 0020             		move.b	#$F,obColType(a0)
0001DEA6                            
0001DEA6                            loc_1A216:
0001DEA6 0C78 2790 D008             		cmpi.w	#$2790,(v_player+obX).w
0001DEAC 6D00                       		blt.s	loc_1A23A
0001DEAE 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w
0001DEB4 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
0001DEBA 4278 D020                  		clr.w	(v_player+obInertia).w
0001DEBE 4A68 0012                  		tst.w	obVelY(a0)
0001DEC2 6A00                       		bpl.s	loc_1A248
0001DEC4 31FC 0100 F602             		move.w	#$100,(v_jpadhold2).w
0001DECA                            
0001DECA                            loc_1A23A:
0001DECA 0C78 27E0 D008             		cmpi.w	#$27E0,(v_player+obX).w
0001DED0 6D00                       		blt.s	loc_1A248
0001DED2 31FC 27E0 D008             		move.w	#$27E0,(v_player+obX).w
0001DED8                            
0001DED8                            loc_1A248:
0001DED8 0C68 2900 0008             		cmpi.w	#$2900,obX(a0)
0001DEDE 6500                       		bcs.s	loc_1A260
0001DEE0 4A28 0001                  		tst.b	obRender(a0)
0001DEE4 6B00                       		bmi.s	loc_1A260
0001DEE6 11FC 0018 F600             		move.b	#$18,(v_gamemode).w
0001DEEC 6000 FAF0                  		bra.w	Obj85_Delete
0001DEF0                            ; ===========================================================================
0001DEF0                            
0001DEF0                            loc_1A260:
0001DEF0 6000 FEFE                  		bra.w	loc_1A15C
0001DEF4                            ; ===========================================================================
0001DEF4                            
0001DEF4                            loc_1A264:	; Routine 4
0001DEF4 2268 0034                  		movea.l	$34(a0),a1
0001DEF8 1011                       		move.b	(a1),d0
0001DEFA B010                       		cmp.b	(a0),d0
0001DEFC 6600 FAE0                  		bne.w	Obj85_Delete
0001DF00 117C 0007 001C             		move.b	#7,obAnim(a0)
0001DF06 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001DF0C 6C00                       		bge.s	loc_1A280
0001DF0E 6000                       		bra.s	loc_1A2A6
0001DF10                            ; ===========================================================================
0001DF10                            
0001DF10                            loc_1A280:
0001DF10 4A69 0010                  		tst.w	obVelX(a1)
0001DF14 6700                       		beq.s	loc_1A28C
0001DF16 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001DF1C                            
0001DF1C                            loc_1A28C:
0001DF1C 43FA D9B0                  		lea	Ani_Eggman(pc),a1
0001DF20 4EB9 0000 C880             		jsr	(AnimateSprite).l
0001DF26                            
0001DF26                            loc_1A296:
0001DF26 2268 0034                  		movea.l	$34(a0),a1
0001DF2A 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001DF30 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001DF36                            
0001DF36                            loc_1A2A6:
0001DF36 2268 0034                  		movea.l	$34(a0),a1
0001DF3A 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001DF40 7003                       		moveq	#3,d0
0001DF42 C028 0022                  		and.b	obStatus(a0),d0
0001DF46 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001DF4C 8128 0001                  		or.b	d0,obRender(a0)
0001DF50 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001DF56                            ; ===========================================================================
0001DF56                            
0001DF56                            loc_1A2C6:	; Routine 6
0001DF56 2268 0034                  		movea.l	$34(a0),a1
0001DF5A 1011                       		move.b	(a1),d0
0001DF5C B010                       		cmp.b	(a0),d0
0001DF5E 6600 FA7E                  		bne.w	Obj85_Delete
0001DF62 0CA9 0001 B91E 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001DF6A 6700                       		beq.s	loc_1A2E4
0001DF6C 117C 000A 001A             		move.b	#$A,obFrame(a0)
0001DF72 60C2                       		bra.s	loc_1A2A6
0001DF74                            ; ===========================================================================
0001DF74                            
0001DF74                            loc_1A2E4:
0001DF74 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DF7A 4A29 0021                  		tst.b	obColProp(a1)
0001DF7E 6F00                       		ble.s	loc_1A312
0001DF80 117C 0006 001C             		move.b	#6,obAnim(a0)
0001DF86 217C 0001 B91E 0004        		move.l	#Map_Eggman,obMap(a0)
0001DF8E 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001DF94 43FA D938                  		lea	Ani_Eggman(pc),a1
0001DF98 4EB9 0000 C880             		jsr	(AnimateSprite).l
0001DF9E 6000 FF86                  		bra.w	loc_1A296
0001DFA2                            ; ===========================================================================
0001DFA2                            
0001DFA2                            loc_1A312:
0001DFA2 4A28 0001                  		tst.b	1(a0)
0001DFA6 6A00 FA36                  		bpl.w	Obj85_Delete
0001DFAA 6100 D4CC                  		bsr.w	BossDefeated
0001DFAE 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001DFB4 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DFBA 217C 0000 0000 0004        		move.l	#Map_FZDamaged,obMap(a0)
0001DFC2 317C 03A0 0002             		move.w	#$3A0,obGfx(a0)
0001DFC8 43FA 0000                  		lea	Ani_FZEgg(pc),a1
0001DFCC 4EB9 0000 C880             		jsr	(AnimateSprite).l
0001DFD2 6000 FF52                  		bra.w	loc_1A296
0001DFD6                            ; ===========================================================================
0001DFD6                            
0001DFD6                            loc_1A346:	; Routine 8
0001DFD6 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DFDC 2268 0034                  		movea.l	$34(a0),a1
0001DFE0 0CA9 0001 B91E 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001DFE8 6700                       		beq.s	loc_1A35E
0001DFEA 6000 FF4A                  		bra.w	loc_1A2A6
0001DFEE                            ; ===========================================================================
0001DFEE                            
0001DFEE                            loc_1A35E:
0001DFEE 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001DFF4 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001DFFA 4A28 001E                  		tst.b	obTimeFrame(a0)
0001DFFE 6600                       		bne.s	loc_1A376
0001E000 117C 0014 001E             		move.b	#$14,obTimeFrame(a0)
0001E006                            
0001E006                            loc_1A376:
0001E006 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001E00A 6E00                       		bgt.s	loc_1A38A
0001E00C 5228 001A                  		addq.b	#1,obFrame(a0)
0001E010 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0001E016 6E00 F9C6                  		bgt.w	Obj85_Delete
0001E01A                            
0001E01A                            loc_1A38A:
0001E01A 6000 FF0A                  		bra.w	loc_1A296
0001E01E                            ; ===========================================================================
0001E01E                            
0001E01E                            loc_1A38E:	; Routine $A
0001E01E 117C 000B 001A             		move.b	#$B,obFrame(a0)
0001E024 3038 D008                  		move.w	(v_player+obX).w,d0
0001E028 9068 0008                  		sub.w	obX(a0),d0
0001E02C 6500                       		bcs.s	loc_1A3A6
0001E02E 4A28 0001                  		tst.b	obRender(a0)
0001E032 6A00 F9AA                  		bpl.w	Obj85_Delete
0001E036                            
0001E036                            loc_1A3A6:
0001E036 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001E03C                            ; ===========================================================================
0001E03C                            
0001E03C                            loc_1A3AC:	; Routine $C
0001E03C 117C 0000 001A             		move.b	#0,obFrame(a0)
0001E042 08E8 0000 0022             		bset	#0,obStatus(a0)
0001E048 2268 0034                  		movea.l	$34(a0),a1
0001E04C 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001E052 6600                       		bne.s	loc_1A3D0
0001E054 0CA9 0001 B91E 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001E05C 6700 F980                  		beq.w	Obj85_Delete
0001E060                            
0001E060                            loc_1A3D0:
0001E060 6000 FED4                  		bra.w	loc_1A2A6
0001E064                            		
0001E064                            BossModeMusic:
0001E064 0C28 0002 0021             		cmpi.b	#2,obColProp(a0)
0001E06A 6600 0000                  		bne.w	NormalMode
0001E06E 4EF9 0000 0000             		jmp	PinchMode
0001E074                            
0001E074                            NormalMode:
0001E074 303C 00AC                  		move.w	#$AC,d0
0001E078 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001E07E 4E75                       		rts
0001E080                            
0001E080                            PinchMode:
0001E080 303C 0094                  		move.w	#$94,d0
0001E084 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001E08A 303C 00E2                  		move.w	#$E2,d0
0001E08E 4EB9 0000 129A             		jsr	(PlaySound).l
0001E094 4E75                       		rts		
0001E094 4E75                       		rts		
0001E096                            		include	"_anim\FZ Eggman in Ship.asm"
0001E096                            ; ---------------------------------------------------------------------------
0001E096                            ; Animation script - Eggman (FZ)
0001E096                            ; ---------------------------------------------------------------------------
0001E096 0000                       Ani_FZEgg:	dc.w byte_1A3D6-Ani_FZEgg
0001E098 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, afEnd
0001E09C                            		even
0001E09C                            		even
0001E09C                            Map_FZDamaged:	include	"_maps\FZ Damaged Eggmobile.asm"
0001E09C                            ; ---------------------------------------------------------------------------
0001E09C                            ; Sprite mappings - Eggman in broken eggmobile (FZ)
0001E09C                            ; ---------------------------------------------------------------------------
0001E09C                            Map_FZDamaged_internal:
0001E09C 0000                       		dc.w @damage1-Map_FZDamaged_internal
0001E09E 0000                       		dc.w @damage2-Map_FZDamaged_internal
0001E0A0 06                         @damage1:	dc.b 6
0001E0A1 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001E0A6 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001E0AB EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001E0B0 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001E0B5 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001E0BA 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001E0BF 06                         @damage2:	dc.b 6
0001E0C0 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001E0C5 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001E0CA EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001E0CF FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001E0D4 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001E0D9 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001E0DE                            		even
0001E0DE                            		even
0001E0DE                            Map_FZLegs:	include	"_maps\FZ Eggmobile Legs.asm"
0001E0DE                            ; ---------------------------------------------------------------------------
0001E0DE                            ; Sprite mappings - legs on Eggman's escape ship (FZ)
0001E0DE                            ; ---------------------------------------------------------------------------
0001E0DE                            Map_FZLegs_internal:
0001E0DE 0000                       		dc.w @extended-Map_FZLegs_internal
0001E0E0 0000                       		dc.w @halfway-Map_FZLegs_internal
0001E0E2 0000                       		dc.w @retracted-Map_FZLegs_internal
0001E0E4 02                         @extended:	dc.b 2
0001E0E5 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001E0EA 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001E0EF 03                         @halfway:	dc.b 3
0001E0F0 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001E0F5 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001E0FA 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001E0FF 02                         @retracted:	dc.b 2
0001E100 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001E105 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001E10A                            		even
0001E10A                            		even
0001E10A                            		include	"_incObj\84 FZ Eggman's Cylinders.asm"
0001E10A                            ; ---------------------------------------------------------------------------
0001E10A                            ; Object 84 - cylinder Eggman hides in (FZ)
0001E10A                            ; ---------------------------------------------------------------------------
0001E10A                            
0001E10A                            Obj84_Delete:
0001E10A 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001E110                            ; ===========================================================================
0001E110                            
0001E110                            EggmanCylinder:
0001E110 7000                       		moveq	#0,d0
0001E112 1028 0024                  		move.b	obRoutine(a0),d0
0001E116 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001E11A 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001E11E                            ; ===========================================================================
0001E11E 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001E120 0000                       		dc.w loc_1A4CE-Obj84_Index
0001E122 0000                       		dc.w loc_1A57E-Obj84_Index
0001E124                            
0001E124 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001E128 2550 0620                  		dc.w $2550, $620
0001E12C 2490 04C0                  		dc.w $2490, $4C0
0001E130 2510 04C0                  		dc.w $2510, $4C0
0001E134                            ; ===========================================================================
0001E134                            
0001E134                            Obj84_Main:	; Routine
0001E134 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001E138 7000                       		moveq	#0,d0
0001E13A 1028 0028                  		move.b	obSubtype(a0),d0
0001E13E D040                       		add.w	d0,d0
0001E140 D2C0                       		adda.w	d0,a1
0001E142 117C 0004 0001             		move.b	#4,obRender(a0)
0001E148 08E8 0007 0001             		bset	#7,obRender(a0)
0001E14E 08E8 0004 0001             		bset	#4,obRender(a0)
0001E154 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001E15A 217C 0000 0000 0004        		move.l	#Map_EggCyl,obMap(a0)
0001E162 3159 0008                  		move.w	(a1)+,obX(a0)
0001E166 3151 000C                  		move.w	(a1),obY(a0)
0001E16A 3159 0038                  		move.w	(a1)+,$38(a0)
0001E16E 117C 0020 0016             		move.b	#$20,obHeight(a0)
0001E174 117C 0060 0017             		move.b	#$60,obWidth(a0)
0001E17A 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001E180 117C 0060 0016             		move.b	#$60,obHeight(a0)
0001E186 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001E18C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E190                            
0001E190                            loc_1A4CE:	; Routine 2
0001E190 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001E196 6F00                       		ble.s	loc_1A4DC
0001E198 08E8 0001 0001             		bset	#1,obRender(a0)
0001E19E                            
0001E19E                            loc_1A4DC:
0001E19E 42A8 003C                  		clr.l	$3C(a0)
0001E1A2 4A28 0029                  		tst.b	$29(a0)
0001E1A6 6700                       		beq.s	loc_1A4EA
0001E1A8 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E1AC                            
0001E1AC                            loc_1A4EA:
0001E1AC 2028 003C                  		move.l	$3C(a0),d0
0001E1B0 2228 0038                  		move.l	$38(a0),d1
0001E1B4 D280                       		add.l	d0,d1
0001E1B6 4841                       		swap	d1
0001E1B8 3141 000C                  		move.w	d1,obY(a0)
0001E1BC 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0001E1C2 6600                       		bne.s	loc_1A524
0001E1C4 4A68 0030                  		tst.w	$30(a0)
0001E1C8 6A00                       		bpl.s	loc_1A524
0001E1CA 70F6                       		moveq	#-$A,d0
0001E1CC 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001E1D2 6F00                       		ble.s	loc_1A514
0001E1D4 700E                       		moveq	#$E,d0
0001E1D6                            
0001E1D6                            loc_1A514:
0001E1D6 D240                       		add.w	d0,d1
0001E1D8 2268 0034                  		movea.l	$34(a0),a1
0001E1DC 3341 000C                  		move.w	d1,obY(a1)
0001E1E0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E1E6                            
0001E1E6                            loc_1A524:
0001E1E6 323C 002B                  		move.w	#$2B,d1
0001E1EA 343C 0060                  		move.w	#$60,d2
0001E1EE 363C 0061                  		move.w	#$61,d3
0001E1F2 3828 0008                  		move.w	obX(a0),d4
0001E1F6 4EB9 0001 1D16             		jsr	(SolidObject).l
0001E1FC 7000                       		moveq	#0,d0
0001E1FE 3228 003C                  		move.w	$3C(a0),d1
0001E202 6A00                       		bpl.s	loc_1A550
0001E204 4441                       		neg.w	d1
0001E206 5141                       		subq.w	#8,d1
0001E208 6500                       		bcs.s	loc_1A55C
0001E20A 5200                       		addq.b	#1,d0
0001E20C E841                       		asr.w	#4,d1
0001E20E D041                       		add.w	d1,d0
0001E210 6000                       		bra.s	loc_1A55C
0001E212                            ; ===========================================================================
0001E212                            
0001E212                            loc_1A550:
0001E212 0441 0027                  		subi.w	#$27,d1
0001E216 6500                       		bcs.s	loc_1A55C
0001E218 5200                       		addq.b	#1,d0
0001E21A E841                       		asr.w	#4,d1
0001E21C D041                       		add.w	d1,d0
0001E21E                            
0001E21E                            loc_1A55C:
0001E21E 1140 001A                  		move.b	d0,obFrame(a0)
0001E222 3038 D008                  		move.w	(v_player+obX).w,d0
0001E226 9068 0008                  		sub.w	obX(a0),d0
0001E22A 6B00                       		bmi.s	loc_1A578
0001E22C 0440 0140                  		subi.w	#$140,d0
0001E230 6B00                       		bmi.s	loc_1A578
0001E232 4A28 0001                  		tst.b	obRender(a0)
0001E236 6A00 FED2                  		bpl.w	Obj84_Delete
0001E23A                            
0001E23A                            loc_1A578:
0001E23A 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001E240                            ; ===========================================================================
0001E240                            
0001E240                            loc_1A57E:	; Routine 4
0001E240 7000                       		moveq	#0,d0
0001E242 1028 0028                  		move.b	obSubtype(a0),d0
0001E246 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001E24A 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001E24E 6000 FF5C                  		bra.w	loc_1A4EA
0001E252                            ; ===========================================================================
0001E252 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001E254 0000                       		dc.w loc_1A598-off_1A590
0001E256 0000                       		dc.w loc_1A604-off_1A590
0001E258 0000                       		dc.w loc_1A604-off_1A590
0001E25A                            ; ===========================================================================
0001E25A                            
0001E25A                            loc_1A598:
0001E25A 4A28 0029                  		tst.b	$29(a0)
0001E25E 6600                       		bne.s	loc_1A5D4
0001E260 2268 0034                  		movea.l	$34(a0),a1
0001E264 4A29 0021                  		tst.b	obColProp(a1)
0001E268 6600                       		bne.s	loc_1A5B4
0001E26A 6100 D20C                  		bsr.w	BossDefeated
0001E26E 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001E276                            
0001E276                            loc_1A5B4:
0001E276 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001E27E 6400                       		bcc.s	locret_1A602
0001E280 42A8 003C                  		clr.l	$3C(a0)
0001E284 2268 0034                  		movea.l	$34(a0),a1
0001E288 5369 0032                  		subq.w	#1,$32(a1)
0001E28C 4269 0030                  		clr.w	$30(a1)
0001E290 5528 0024                  		subq.b	#2,obRoutine(a0)
0001E294 4E75                       		rts	
0001E296                            ; ===========================================================================
0001E296                            
0001E296                            loc_1A5D4:
0001E296 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001E29C 6C00                       		bge.s	loc_1A5E4
0001E29E 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001E2A6                            
0001E2A6                            loc_1A5E4:
0001E2A6 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001E2AE 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001E2B4 6E00                       		bgt.s	locret_1A602
0001E2B6 4268 003E                  		clr.w	$3E(a0)
0001E2BA 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001E2C0 4228 0029                  		clr.b	$29(a0)
0001E2C4                            
0001E2C4                            locret_1A602:
0001E2C4 4E75                       		rts	
0001E2C6                            ; ===========================================================================
0001E2C6                            
0001E2C6                            loc_1A604:
0001E2C6 08E8 0001 0001             		bset	#1,obRender(a0)
0001E2CC 4A28 0029                  		tst.b	$29(a0)
0001E2D0 6600                       		bne.s	loc_1A646
0001E2D2 2268 0034                  		movea.l	$34(a0),a1
0001E2D6 4A29 0021                  		tst.b	obColProp(a1)
0001E2DA 6600                       		bne.s	loc_1A626
0001E2DC 6100 D19A                  		bsr.w	BossDefeated
0001E2E0 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001E2E8                            
0001E2E8                            loc_1A626:
0001E2E8 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001E2F0 6400                       		bcc.s	locret_1A674
0001E2F2 42A8 003C                  		clr.l	$3C(a0)
0001E2F6 2268 0034                  		movea.l	$34(a0),a1
0001E2FA 5369 0032                  		subq.w	#1,$32(a1)
0001E2FE 4269 0030                  		clr.w	$30(a1)
0001E302 5528 0024                  		subq.b	#2,obRoutine(a0)
0001E306 4E75                       		rts	
0001E308                            ; ===========================================================================
0001E308                            
0001E308                            loc_1A646:
0001E308 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001E30E 6D00                       		blt.s	loc_1A656
0001E310 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001E318                            
0001E318                            loc_1A656:
0001E318 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001E320 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001E326 6D00                       		blt.s	locret_1A674
0001E328 4268 003E                  		clr.w	$3E(a0)
0001E32C 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001E332 4228 0029                  		clr.b	$29(a0)
0001E336                            
0001E336                            locret_1A674:
0001E336 4E75                       		rts	
0001E336 4E75                       		rts	
0001E338                            Map_EggCyl:	include	"_maps\FZ Eggman's Cylinders.asm"
0001E338                            ; --------------------------------------------------------------------------------
0001E338                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001E338                            ; --------------------------------------------------------------------------------
0001E338                            
0001E338                            SME_SCUpI:	
0001E338 0000 0000                  		dc.w SME_SCUpI_18-SME_SCUpI, SME_SCUpI_37-SME_SCUpI	
0001E33C 0000 0000                  		dc.w SME_SCUpI_60-SME_SCUpI, SME_SCUpI_93-SME_SCUpI	
0001E340 0000 0000                  		dc.w SME_SCUpI_D0-SME_SCUpI, SME_SCUpI_112-SME_SCUpI	
0001E344 0000 0000                  		dc.w SME_SCUpI_159-SME_SCUpI, SME_SCUpI_1A0-SME_SCUpI	
0001E348 0000 0000                  		dc.w SME_SCUpI_1E7-SME_SCUpI, SME_SCUpI_22E-SME_SCUpI	
0001E34C 0000 0000                  		dc.w SME_SCUpI_275-SME_SCUpI, SME_SCUpI_2BC-SME_SCUpI	
0001E350 06                         SME_SCUpI_18:	dc.b 6	
0001E351 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E356 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E35B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E360 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E365 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E36A A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E36F 08                         SME_SCUpI_37:	dc.b 8	
0001E370 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E375 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E37A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E37F B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E384 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E389 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E38E D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E393 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E398 0A                         SME_SCUpI_60:	dc.b $A	
0001E399 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E39E B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E3A3 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E3A8 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E3AD B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E3B2 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E3B7 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E3BC F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E3C1 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E3C6 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E3CB 0C                         SME_SCUpI_93:	dc.b $C	
0001E3CC A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E3D1 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E3D6 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E3DB B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E3E0 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E3E5 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E3EA D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E3EF F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E3F4 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E3F9 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E3FE 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E403 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E408 0D                         SME_SCUpI_D0:	dc.b $D	
0001E409 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E40E B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E413 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E418 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E41D B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E422 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E427 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E42C F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E431 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E436 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E43B 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E440 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E445 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E44A 0E                         SME_SCUpI_112:	dc.b $E	
0001E44B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E450 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E455 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E45A B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E45F B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E464 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E469 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E46E F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E473 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E478 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E47D 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E482 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E487 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E48C A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E491 0E                         SME_SCUpI_159:	dc.b $E	
0001E492 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E497 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E49C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E4A1 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E4A6 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E4AB D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E4B0 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E4B5 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E4BA F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E4BF 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E4C4 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E4C9 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E4CE 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E4D3 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E4D8 0E                         SME_SCUpI_1A0:	dc.b $E	
0001E4D9 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E4DE B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E4E3 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E4E8 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E4ED B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E4F2 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E4F7 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E4FC F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E501 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E506 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E50B 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E510 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E515 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E51A A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E51F 0E                         SME_SCUpI_1E7:	dc.b $E	
0001E520 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E525 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E52A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E52F B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E534 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E539 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E53E D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E543 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E548 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E54D 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E552 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E557 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E55C 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E561 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E566 0E                         SME_SCUpI_22E:	dc.b $E	
0001E567 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E56C B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E571 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E576 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E57B B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E580 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E585 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E58A F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E58F F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E594 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E599 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E59E 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E5A3 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E5A8 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E5AD 0E                         SME_SCUpI_275:	dc.b $E	
0001E5AE A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E5B3 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E5B8 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E5BD B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E5C2 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E5C7 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E5CC D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E5D1 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E5D6 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E5DB 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E5E0 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E5E5 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E5EA 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E5EF A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E5F4 02                         SME_SCUpI_2BC:	dc.b 2	
0001E5F5 F804 0068 F0               		dc.b $F8, 4, 0, $68, $F0	
0001E5FA 000C 006A F0               		dc.b 0, $C, 0, $6A, $F0	
0001E600 00                         		even
0001E600 00                         		even
0001E600                            		include	"_incObj\86 FZ Plasma Ball Launcher.asm"
0001E600                            ; ---------------------------------------------------------------------------
0001E600                            ; Object 86 - energy balls (FZ)
0001E600                            ; ---------------------------------------------------------------------------
0001E600                            
0001E600                            BossPlasma:
0001E600 7000                       		moveq	#0,d0
0001E602 1028 0024                  		move.b	obRoutine(a0),d0
0001E606 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001E60A 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001E60E                            ; ===========================================================================
0001E60E 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001E610 0000                       		dc.w Obj86_Generator-Obj86_Index
0001E612 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001E614 0000                       		dc.w loc_1A962-Obj86_Index
0001E616 0000                       		dc.w loc_1A982-Obj86_Index
0001E618                            ; ===========================================================================
0001E618                            
0001E618                            Obj86_Main:	; Routine 0
0001E618 317C 2588 0008             		move.w	#$2588,obX(a0)
0001E61E 317C 053C 000C             		move.w	#$53C,obY(a0)
0001E624 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001E62A 217C 0000 0000 0004        		move.l	#Map_PLaunch,obMap(a0)
0001E632 117C 0000 001C             		move.b	#0,obAnim(a0)
0001E638 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001E63E 117C 0008 0017             		move.b	#8,obWidth(a0)
0001E644 117C 0008 0016             		move.b	#8,obHeight(a0)
0001E64A 117C 0004 0001             		move.b	#4,obRender(a0)
0001E650 08E8 0007 0001             		bset	#7,obRender(a0)
0001E656 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E65A                            
0001E65A                            Obj86_Generator:; Routine 2
0001E65A 2268 0034                  		movea.l	$34(a0),a1
0001E65E 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001E664 6600                       		bne.s	loc_1A850
0001E666 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001E66A 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001E670 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001E676                            ; ===========================================================================
0001E676                            
0001E676                            loc_1A850:
0001E676 117C 0000 001C             		move.b	#0,obAnim(a0)
0001E67C 4A28 0029                  		tst.b	$29(a0)
0001E680 6700                       		beq.s	loc_1A86C
0001E682 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E686 117C 0001 001C             		move.b	#1,obAnim(a0)
0001E68C 117C 003E 0028             		move.b	#$3E,obSubtype(a0)
0001E692                            
0001E692                            loc_1A86C:
0001E692 323C 0013                  		move.w	#$13,d1
0001E696 343C 0008                  		move.w	#8,d2
0001E69A 363C 0011                  		move.w	#$11,d3
0001E69E 3828 0008                  		move.w	obX(a0),d4
0001E6A2 4EB9 0001 1D16             		jsr	(SolidObject).l
0001E6A8 3038 D008                  		move.w	(v_player+obX).w,d0
0001E6AC 9068 0008                  		sub.w	obX(a0),d0
0001E6B0 6B00                       		bmi.s	loc_1A89A
0001E6B2 0440 0140                  		subi.w	#$140,d0
0001E6B6 6B00                       		bmi.s	loc_1A89A
0001E6B8 4A28 0001                  		tst.b	obRender(a0)
0001E6BC 6A00 FA4C                  		bpl.w	Obj84_Delete
0001E6C0                            
0001E6C0                            loc_1A89A:
0001E6C0 43FA 0000                  		lea	Ani_PLaunch(pc),a1
0001E6C4 4EB9 0000 C880             		jsr	(AnimateSprite).l
0001E6CA 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001E6D0                            ; ===========================================================================
0001E6D0                            
0001E6D0                            Obj86_MakeBalls:; Routine 4
0001E6D0 4A28 0029                  		tst.b	$29(a0)
0001E6D4 6700 0000                  		beq.w	loc_1A954
0001E6D8 4228 0029                  		clr.b	$29(a0)
0001E6DC D068 0030                  		add.w	$30(a0),d0
0001E6E0 0240 001E                  		andi.w	#$1E,d0
0001E6E4 D4C0                       		adda.w	d0,a2
0001E6E6 5868 0030                  		addq.w	#4,$30(a0)
0001E6EA 4268 0032                  		clr.w	$32(a0)
0001E6EE 7403                       		moveq	#3,d2
0001E6F0                            
0001E6F0                            Obj86_Loop:
0001E6F0 4EB9 0000 FD7A             		jsr	(FindNextFreeObj).l
0001E6F6 6600 0000                  		bne.w	loc_1A954
0001E6FA 12BC 0086                  		move.b	#id_BossPlasma,(a1)
0001E6FE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E704 337C 053C 000C             		move.w	#$53C,obY(a1)
0001E70A 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001E710 337C 2300 0002             		move.w	#$2300,obGfx(a1)
0001E716 237C 0000 0000 0004        		move.l	#Map_Plasma,obMap(a1)
0001E71E 137C 000C 0016             		move.b	#$C,obHeight(a1)
0001E724 137C 000C 0017             		move.b	#$C,obWidth(a1)
0001E72A 137C 0000 0020             		move.b	#0,obColType(a1)
0001E730 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001E736 337C 003E 0028             		move.w	#$3E,obSubtype(a1)
0001E73C 137C 0004 0001             		move.b	#4,obRender(a1)
0001E742 08E9 0007 0001             		bset	#7,obRender(a1)
0001E748 2348 0034                  		move.l	a0,$34(a1)
0001E74C 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001E752 3228 0032                  		move.w	$32(a0),d1
0001E756 C3FC FFB1                  		muls.w	#-$4F,d1
0001E75A 0641 2578                  		addi.w	#$2578,d1
0001E75E 0240 001F                  		andi.w	#$1F,d0
0001E762 0440 0010                  		subi.w	#$10,d0
0001E766 D041                       		add.w	d1,d0
0001E768 3340 0030                  		move.w	d0,$30(a1)
0001E76C 5268 0032                  		addq.w	#1,$32(a0)
0001E770 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001E776 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001E77A                            
0001E77A                            loc_1A954:
0001E77A 4A68 0032                  		tst.w	$32(a0)
0001E77E 6600                       		bne.s	loc_1A95E
0001E780 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E784                            
0001E784                            loc_1A95E:
0001E784 6000 FF0C                  		bra.w	loc_1A86C
0001E788                            ; ===========================================================================
0001E788                            
0001E788                            loc_1A962:	; Routine 6
0001E788 117C 0002 001C             		move.b	#2,obAnim(a0)
0001E78E 4A68 0038                  		tst.w	$38(a0)
0001E792 6600                       		bne.s	loc_1A97E
0001E794 117C 0002 0024             		move.b	#2,obRoutine(a0)
0001E79A 2268 0034                  		movea.l	$34(a0),a1
0001E79E 337C FFFF 0032             		move.w	#-1,$32(a1)
0001E7A4                            
0001E7A4                            loc_1A97E:
0001E7A4 6000 FEEC                  		bra.w	loc_1A86C
0001E7A8                            ; ===========================================================================
0001E7A8                            
0001E7A8                            loc_1A982:	; Routine 8
0001E7A8 7000                       		moveq	#0,d0
0001E7AA 1028 0025                  		move.b	ob2ndRout(a0),d0
0001E7AE 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001E7B2 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001E7B6 43FA 0000                  		lea	Ani_Plasma(pc),a1
0001E7BA 4EB9 0000 C880             		jsr	(AnimateSprite).l
0001E7C0 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001E7C6                            ; ===========================================================================
0001E7C6 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001E7C8 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001E7CA 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001E7CC                            ; ===========================================================================
0001E7CC                            
0001E7CC                            loc_1A9A6:
0001E7CC 3028 0030                  		move.w	$30(a0),d0
0001E7D0 9068 0008                  		sub.w	obX(a0),d0
0001E7D4 E940                       		asl.w	#4,d0
0001E7D6 3140 0010                  		move.w	d0,obVelX(a0)
0001E7DA 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001E7E0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001E7E4 4E75                       		rts	
0001E7E6                            ; ===========================================================================
0001E7E6                            
0001E7E6                            loc_1A9C0:
0001E7E6 4A68 0010                  		tst.w	obVelX(a0)
0001E7EA 6700                       		beq.s	loc_1A9E6
0001E7EC 4EB9 0000 F7B6             		jsr	(SpeedToPos).l
0001E7F2 3028 0008                  		move.w	obX(a0),d0
0001E7F6 9068 0030                  		sub.w	$30(a0),d0
0001E7FA 6400                       		bcc.s	loc_1A9E6
0001E7FC 4268 0010                  		clr.w	obVelX(a0)
0001E800 D168 0008                  		add.w	d0,obX(a0)
0001E804 2268 0034                  		movea.l	$34(a0),a1
0001E808 5369 0032                  		subq.w	#1,$32(a1)
0001E80C                            
0001E80C                            loc_1A9E6:
0001E80C 117C 0000 001C             		move.b	#0,obAnim(a0)
0001E812 5368 0028                  		subq.w	#1,obSubtype(a0)
0001E816 6600                       		bne.s	locret_1AA1C
0001E818 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001E81C 117C 0001 001C             		move.b	#1,obAnim(a0)
0001E822 117C 009A 0020             		move.b	#$9A,obColType(a0)
0001E828 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001E82E 7000                       		moveq	#0,d0
0001E830 3038 D008                  		move.w	(v_player+obX).w,d0
0001E834 9068 0008                  		sub.w	obX(a0),d0
0001E838 3140 0010                  		move.w	d0,obVelX(a0)
0001E83C 317C 0140 0012             		move.w	#$140,obVelY(a0)
0001E842                            
0001E842                            locret_1AA1C:
0001E842 4E75                       		rts	
0001E844                            ; ===========================================================================
0001E844                            
0001E844                            loc_1AA1E:
0001E844 4EB9 0000 F7B6             		jsr	(SpeedToPos).l
0001E84A 0C68 05E0 000C             		cmpi.w	#$5E0,obY(a0)
0001E850 6400                       		bcc.s	loc_1AA34
0001E852 5368 0028                  		subq.w	#1,obSubtype(a0)
0001E856 6700                       		beq.s	loc_1AA34
0001E858 4E75                       		rts	
0001E85A                            ; ===========================================================================
0001E85A                            
0001E85A                            loc_1AA34:
0001E85A 2268 0034                  		movea.l	$34(a0),a1
0001E85E 5369 0038                  		subq.w	#1,$38(a1)
0001E862 6000 F8A6                  		bra.w	Obj84_Delete
0001E862 6000 F8A6                  		bra.w	Obj84_Delete
0001E866                            		include	"_anim\Plasma Ball Launcher.asm"
0001E866                            ; ---------------------------------------------------------------------------
0001E866                            ; Animation script - energy ball launcher (FZ)
0001E866                            ; ---------------------------------------------------------------------------
0001E866 0000                       Ani_PLaunch:	dc.w @red-Ani_PLaunch
0001E868 0000                       		dc.w @redsparking-Ani_PLaunch
0001E86A 0000                       		dc.w @whitesparking-Ani_PLaunch
0001E86C 7E00 FF                    @red:		dc.b $7E, 0, afEnd
0001E870 00                         		even
0001E870 0100 0200 03FF             @redsparking:	dc.b 1,	0, 2, 0, 3, afEnd
0001E876                            		even
0001E876 0101 0201 03FF             @whitesparking:	dc.b 1,	1, 2, 1, 3, afEnd
0001E87C                            		even
0001E87C                            		even
0001E87C                            Map_PLaunch:	include	"_maps\Plasma Ball Launcher.asm"
0001E87C                            ; ---------------------------------------------------------------------------
0001E87C                            ; Sprite mappings - energy ball	launcher (FZ)
0001E87C                            ; ---------------------------------------------------------------------------
0001E87C                            Map_PLaunch_internal:
0001E87C 0000                       		dc.w @red-Map_PLaunch_internal
0001E87E 0000                       		dc.w @white-Map_PLaunch_internal
0001E880 0000                       		dc.w @sparking1-Map_PLaunch_internal
0001E882 0000                       		dc.w @sparking2-Map_PLaunch_internal
0001E884 01                         @red:		dc.b 1
0001E885 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001E88A 01                         @white:		dc.b 1
0001E88B F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001E890 01                         @sparking1:	dc.b 1
0001E891 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001E896 01                         @sparking2:	dc.b 1
0001E897 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001E89C                            		even
0001E89C                            		even
0001E89C                            		include	"_anim\Plasma Balls.asm"
0001E89C                            ; ---------------------------------------------------------------------------
0001E89C                            ; Animation script - energy balls (FZ)
0001E89C                            ; ---------------------------------------------------------------------------
0001E89C 0000                       Ani_Plasma:	dc.w @full-Ani_Plasma
0001E89E 0000                       		dc.w @short-Ani_Plasma
0001E8A0 0100 0A08 0A01 0A09 0A06+  @full:		dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001E8AF 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001E8BE 0A05 FF                    		dc.b $A, 5, afEnd
0001E8C2 00                         		even
0001E8C2 0006 0501 0507 0501 05FF   @short:		dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	afEnd
0001E8CC                            		even
0001E8CC                            		even
0001E8CC                            Map_Plasma:	include	"_maps\Plasma Balls.asm"
0001E8CC                            ; ---------------------------------------------------------------------------
0001E8CC                            ; Sprite mappings - energy balls (FZ)
0001E8CC                            ; ---------------------------------------------------------------------------
0001E8CC                            Map_Plasma_internal:
0001E8CC 0000                       		dc.w @fuzzy1-Map_Plasma_internal
0001E8CE 0000                       		dc.w @fuzzy2-Map_Plasma_internal
0001E8D0 0000                       		dc.w @white1-Map_Plasma_internal
0001E8D2 0000                       		dc.w @white2-Map_Plasma_internal
0001E8D4 0000                       		dc.w @white3-Map_Plasma_internal
0001E8D6 0000                       		dc.w @white4-Map_Plasma_internal
0001E8D8 0000                       		dc.w @fuzzy3-Map_Plasma_internal
0001E8DA 0000                       		dc.w @fuzzy4-Map_Plasma_internal
0001E8DC 0000                       		dc.w @fuzzy5-Map_Plasma_internal
0001E8DE 0000                       		dc.w @fuzzy6-Map_Plasma_internal
0001E8E0 0000                       		dc.w @blank-Map_Plasma_internal
0001E8E2 02                         @fuzzy1:	dc.b 2
0001E8E3 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001E8E8 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001E8ED 02                         @fuzzy2:	dc.b 2
0001E8EE F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001E8F3 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001E8F8 02                         @white1:	dc.b 2
0001E8F9 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001E8FE 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001E903 02                         @white2:	dc.b 2
0001E904 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001E909 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001E90E 02                         @white3:	dc.b 2
0001E90F F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001E914 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001E919 02                         @white4:	dc.b 2
0001E91A F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001E91F F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001E924 01                         @fuzzy3:	dc.b 1
0001E925 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001E92A 01                         @fuzzy4:	dc.b 1
0001E92B F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001E930 02                         @fuzzy5:	dc.b 2
0001E931 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001E936 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001E93B 02                         @fuzzy6:	dc.b 2
0001E93C F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001E941 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001E946 00                         @blank:		dc.b 0
0001E948 00                         		even
0001E948 00                         		even
0001E948                            
0001E948                            		include	"_incObj\3E Prison Capsule.asm"
0001E948                            ; ---------------------------------------------------------------------------
0001E948                            ; Object 3E - prison capsule
0001E948                            ; ---------------------------------------------------------------------------
0001E948                            
0001E948                            Prison:
0001E948 7000                       		moveq	#0,d0
0001E94A 1028 0024                  		move.b	obRoutine(a0),d0
0001E94E 323B 0000                  		move.w	Pri_Index(pc,d0.w),d1
0001E952 4EBB 1000                  		jsr	Pri_Index(pc,d1.w)
0001E972 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001E978                            
0001E978                            	@delete:
0001E978 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001E97E                            ; ===========================================================================
0001E97E 0000                       Pri_Index:	dc.w Pri_Main-Pri_Index
0001E980 0000                       		dc.w Pri_BodyMain-Pri_Index
0001E982 0000                       		dc.w Pri_Switched-Pri_Index
0001E984 0000                       		dc.w Pri_Explosion-Pri_Index
0001E986 0000                       		dc.w Pri_Explosion-Pri_Index
0001E988 0000                       		dc.w Pri_Explosion-Pri_Index
0001E98A 0000                       		dc.w Pri_Animals-Pri_Index
0001E98C 0000                       		dc.w Pri_EndAct-Pri_Index
0001E98E                            
0001E98E =00000030                  pri_origY:	equ $30		; original y-axis position
0001E98E                            
0001E98E 0220 0400                  Pri_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001E992 040C 0501                  		dc.b 4,	$C, 5, 1
0001E996 0610 0403                  		dc.b 6,	$10, 4,	3
0001E99A 0810 0305                  		dc.b 8,	$10, 3,	5
0001E99E                            ; ===========================================================================
0001E99E                            
0001E99E                            Pri_Main:	; Routine 0
0001E99E 217C 0000 0000 0004        		move.l	#Map_Pri,obMap(a0)
0001E9A6 317C 049D 0002             		move.w	#$49D,obGfx(a0)
0001E9AC 117C 0004 0001             		move.b	#4,obRender(a0)
0001E9B2 3168 000C 0030             		move.w	obY(a0),pri_origY(a0)
0001E9B8 7000                       		moveq	#0,d0
0001E9BA 1028 0028                  		move.b	obSubtype(a0),d0
0001E9BE E548                       		lsl.w	#2,d0
0001E9C0 43FB 00CC                  		lea	Pri_Var(pc,d0.w),a1
0001E9C4 1159 0024                  		move.b	(a1)+,obRoutine(a0)
0001E9C8 1159 0014                  		move.b	(a1)+,obActWid(a0)
0001E9CC 1159 0018                  		move.b	(a1)+,obPriority(a0)
0001E9D0 3028 0018                  		move.w obPriority(a0),d0 
0001E9D4 E248                       		lsr.w #1,d0 
0001E9D6 0240 0380                  		andi.w #$380,d0 
0001E9DA 3140 0018                  		move.w d0,obPriority(a0)		
0001E9DE 1159 001A                  		move.b	(a1)+,obFrame(a0)
0001E9E2 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001E9E6 6600                       		bne.s	@not02		; if not, branch
0001E9E8                            
0001E9E8 117C 0006 0020             		move.b	#6,obColType(a0)
0001E9EE 117C 0008 0021             		move.b	#8,obColProp(a0)
0001E9F4                            
0001E9F4                            	@not02:
0001E9F4 4E75                       		rts	
0001E9F6                            ; ===========================================================================
0001E9F6                            
0001E9F6                            Pri_BodyMain:	; Routine 2
0001E9F6 0C38 0002 F7A7             		cmpi.b	#2,(v_bossstatus).w
0001E9FC 6700                       		beq.s	@chkopened
0001E9FE 323C 002B                  		move.w	#$2B,d1
0001EA02 343C 0018                  		move.w	#$18,d2
0001EA06 363C 0018                  		move.w	#$18,d3
0001EA0A 3828 0008                  		move.w	obX(a0),d4
0001EA0E 4EF9 0001 1D16             		jmp	(SolidObject).l
0001EA14                            ; ===========================================================================
0001EA14                            
0001EA14                            @chkopened:
0001EA14 4A28 0025                  		tst.b	ob2ndRout(a0)	; has the prison been opened?
0001EA18 6700                       		beq.s	@open		; if yes, branch
0001EA1A 4228 0025                  		clr.b	ob2ndRout(a0)
0001EA1E 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001EA24 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001EA2A                            
0001EA2A                            	@open:
0001EA2A 117C 0002 001A             		move.b	#2,obFrame(a0)	; use frame number 2 (destroyed	prison)
0001EA30                            		
0001EA30                            	@rts:
0001EA30 4E75                       		rts
0001EA32                            ; ===========================================================================
0001EA32                            
0001EA32                            Pri_Switched:	; Routine 4
0001EA32 323C 0017                  		move.w	#$17,d1
0001EA36 343C 0008                  		move.w	#8,d2
0001EA3A 363C 0008                  		move.w	#8,d3
0001EA3E 3828 0008                  		move.w	obX(a0),d4
0001EA42 4EB9 0001 1D16             		jsr	(SolidObject).l
0001EA48 43F9 0000 0000             		lea	(Ani_Pri).l,a1
0001EA4E 4EB9 0000 C880             		jsr	(AnimateSprite).l
0001EA54 3168 0030 000C             		move.w	pri_origY(a0),obY(a0)
0001EA5A 4A28 0025                  		tst.b	ob2ndRout(a0)	; has prison already been opened?
0001EA5E 6700                       		beq.s	@open2		; if yes, branch
0001EA60                            
0001EA60 5068 000C                  		addq.w	#8,obY(a0)
0001EA64 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0001EA6A 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time between animal spawns
0001EA70 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0001EA74 4238 F7AA                  		clr.b	(f_lockscreen).w ; lock screen position
0001EA78 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0001EA7E 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; make Sonic run to the right
0001EA84 4228 0025                  		clr.b	ob2ndRout(a0)
0001EA88 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001EA8E 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001EA94 4A38 F5C3                  		tst.b	(f_emeraldm).w
0001EA98 6700                       		beq.s	@open2
0001EA9A 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001EAA8                            
0001EAA8                            	@open2:
0001EAA8 4E75                       		rts	
0001EAAA                            ; ===========================================================================
0001EAAA                            
0001EAAA                            Pri_Explosion:	; Routine 6, 8, $A
0001EAAA 7007                       		moveq	#7,d0
0001EAAC C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001EAB0 6600                       		bne.s	@noexplosion
0001EAB2 4EB9 0000 FD64             		jsr	(FindFreeObj).l
0001EAB8 6600                       		bne.s	@noexplosion
0001EABA 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1) ; load explosion object
0001EABE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001EAC4 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001EACA 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001EAD0 7200                       		moveq	#0,d1
0001EAD2 1200                       		move.b	d0,d1
0001EAD4 E409                       		lsr.b	#2,d1
0001EAD6 0441 0020                  		subi.w	#$20,d1
0001EADA D369 0008                  		add.w	d1,obX(a1)
0001EADE E048                       		lsr.w	#8,d0
0001EAE0 E608                       		lsr.b	#3,d0
0001EAE2 D169 000C                  		add.w	d0,obY(a1)
0001EAE6                            
0001EAE6                            	@noexplosion:
0001EAE6 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001EAEA 6700                       		beq.s	@makeanimal
0001EAEC 4E75                       		rts	
0001EAEE                            ; ===========================================================================
0001EAEE                            
0001EAEE                            @makeanimal:
0001EAEE 11FC 0002 F7A7             		move.b	#2,(v_bossstatus).w
0001EAF4 117C 000C 0024             		move.b	#$C,obRoutine(a0)	; replace explosions with animals
0001EAFA 117C 0006 001A             		move.b	#6,obFrame(a0)
0001EB00 317C 0096 001E             		move.w	#150,obTimeFrame(a0)
0001EB06 0668 0020 000C             		addi.w	#$20,obY(a0)
0001EB0C 7C07                       		moveq	#7,d6
0001EB0E 3A3C 009A                  		move.w	#$9A,d5
0001EB12 78E4                       		moveq	#-$1C,d4
0001EB14                            
0001EB14                            	@loop:
0001EB14 4EB9 0000 FD64             		jsr	(FindFreeObj).l
0001EB1A 6600                       		bne.s	@fail
0001EB1C 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001EB20 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001EB26 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001EB2C D969 0008                  		add.w	d4,obX(a1)
0001EB30 5E44                       		addq.w	#7,d4
0001EB32 3345 0036                  		move.w	d5,$36(a1)
0001EB36 5145                       		subq.w	#8,d5
0001EB38 51CE FFDA                  		dbf	d6,@loop	; repeat 7 more	times
0001EB3C                            
0001EB3C                            	@fail:
0001EB3C 4E75                       		rts	
0001EB3E                            ; ===========================================================================
0001EB3E                            
0001EB3E                            Pri_Animals:	; Routine $C
0001EB3E 7007                       		moveq	#7,d0
0001EB40 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001EB44 6600                       		bne.s	@noanimal
0001EB46 4EB9 0000 FD64             		jsr	(FindFreeObj).l
0001EB4C 6600                       		bne.s	@noanimal
0001EB4E 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001EB52 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001EB58 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001EB5E 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001EB64 0240 001F                  		andi.w	#$1F,d0
0001EB68 5D40                       		subq.w	#6,d0
0001EB6A 4A41                       		tst.w	d1
0001EB6C 6A00                       		bpl.s	@ispositive
0001EB6E 4440                       		neg.w	d0
0001EB70                            
0001EB70                            	@ispositive:
0001EB70 D169 0008                  		add.w	d0,obX(a1)
0001EB74 337C 000C 0036             		move.w	#$C,$36(a1)
0001EB7A                            
0001EB7A                            	@noanimal:
0001EB7A 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001EB7E 6600                       		bne.s	@wait
0001EB80 5428 0024                  		addq.b	#2,obRoutine(a0)
0001EB84 317C 00B4 001E             		move.w	#180,obTimeFrame(a0)
0001EB8A                            
0001EB8A                            	@wait:
0001EB8A 4E75                       		rts	
0001EB8C                            ; ===========================================================================
0001EB8C                            
0001EB8C                            Pri_EndAct:	; Routine $E
0001EB8C 703E                       		moveq	#$3E,d0
0001EB8E 7228                       		moveq	#id_Animals,d1
0001EB90 7440                       		moveq	#$40,d2
0001EB92 43F8 D040                  		lea	(v_objspace+$40).w,a1 ; load object RAM
0001EB96                            
0001EB96                            	@findanimal:
0001EB96 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001EB98 6700                       		beq.s	@found		; if yes, branch
0001EB9A D2C2                       		adda.w	d2,a1		; next object RAM
0001EB9C 51C8 FFF8                  		dbf	d0,@findanimal	; repeat $3E times
0001EBA0                            
0001EBA0 4EB9 0001 1038             		jsr	(GotThroughAct1).l
0001EBA6 4EF9 0000 F80A             		jmp	(DeleteObject).l
0001EBAC                            
0001EBAC                            	@found:
0001EBAC 4E75                       		rts	
0001EBAC 4E75                       		rts	
0001EBAE                            		include	"_anim\Prison Capsule.asm"
0001EBAE                            ; ---------------------------------------------------------------------------
0001EBAE                            ; Animation script - prison capsule
0001EBAE                            ; ---------------------------------------------------------------------------
0001EBAE 0000                       Ani_Pri:	dc.w @switchflash-Ani_Pri
0001EBB0 0000                       		dc.w @switchflash-Ani_Pri
0001EBB2 0201 03FF                  @switchflash:	dc.b 2,	1, 3, afEnd
0001EBB6                            		even
0001EBB6                            		even
0001EBB6                            Map_Pri:	include	"_maps\Prison Capsule.asm"
0001EBB6                            ; ---------------------------------------------------------------------------
0001EBB6                            ; Sprite mappings - prison capsule
0001EBB6                            ; ---------------------------------------------------------------------------
0001EBB6                            Map_Pri_internal:
0001EBB6 0000                       		dc.w @capsule-Map_Pri_internal
0001EBB8 0000                       		dc.w @switch1-Map_Pri_internal
0001EBBA 0000                       		dc.w @broken-Map_Pri_internal
0001EBBC 0000                       		dc.w @switch2-Map_Pri_internal
0001EBBE 0000                       		dc.w @unusedthing1-Map_Pri_internal
0001EBC0 0000                       		dc.w @unusedthing2-Map_Pri_internal
0001EBC2 0000                       		dc.w @blank-Map_Pri_internal
0001EBC4 07                         @capsule:	dc.b 7
0001EBC5 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001EBCA E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001EBCF E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001EBD4 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001EBD9 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001EBDE 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001EBE3 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001EBE8 01                         @switch1:	dc.b 1
0001EBE9 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001EBEE 06                         @broken:	dc.b 6
0001EBEF 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001EBF4 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001EBF9 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001EBFE 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001EC03 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001EC08 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001EC0D 01                         @switch2:	dc.b 1
0001EC0E F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001EC13 02                         @unusedthing1:	dc.b 2
0001EC14 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001EC19 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001EC1E 01                         @unusedthing2:	dc.b 1
0001EC1F F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001EC24 00                         @blank:		dc.b 0
0001EC26 00                         		even
0001EC26 00                         		even
0001EC26                            
0001EC26                            		include	"_incObj\sub ReactToItem.asm"
0001EC26                            ; ---------------------------------------------------------------------------
0001EC26                            ; Subroutine to react to obColType(a0)
0001EC26                            ; ---------------------------------------------------------------------------
0001EC26                            
0001EC26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EC26                            
0001EC26                            
0001EC26                            ReactToItem:
0001EC26 4E71                       		nop	
0001EC28 3428 0008                  		move.w	obX(a0),d2	; load Sonic's x-axis position
0001EC2C 3628 000C                  		move.w	obY(a0),d3	; load Sonic's y-axis position
0001EC30 5142                       		subq.w	#8,d2
0001EC32 7A00                       		moveq	#0,d5
0001EC34 1A28 0016                  		move.b	obHeight(a0),d5	; load Sonic's height
0001EC38 5705                       		subq.b	#3,d5
0001EC3A 9645                       		sub.w	d5,d3
0001EC3C 0C28 0071 001A             		cmpi.b	#fr_Duck,obFrame(a0) ; is Sonic ducking?
0001EC42 6600                       		bne.s	@notducking	; if not, branch
0001EC44 0643 000C                  		addi.w	#$C,d3
0001EC48 7A0A                       		moveq	#$A,d5
0001EC4A                            
0001EC4A                            	@notducking:
0001EC4A 383C 0010                  		move.w	#$10,d4
0001EC4E DA45                       		add.w	d5,d5
0001EC50 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; set object RAM start address
0001EC54 3C3C 005F                  		move.w	#$5F,d6
0001EC58                            
0001EC58                            @loop:
0001EC58 4A29 0001                  		tst.b	obRender(a1)
0001EC5C 6A00                       		bpl.s	@next
0001EC5E 1029 0020                  		move.b	obColType(a1),d0 ; load collision type
0001EC62 6600                       		bne.s	@proximity	; if nonzero, branch
0001EC64                            
0001EC64                            	@next:
0001EC64 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001EC68 51CE FFEE                  		dbf	d6,@loop	; repeat $5F more times
0001EC6C                            
0001EC6C 7000                       		moveq	#0,d0
0001EC6E 4E75                       		rts	
0001EC70                            ; ===========================================================================
0001EC70                            @sizes:		;   width, height
0001EC70 1414                       		dc.b  $14, $14		; $01
0001EC72 0C14                       		dc.b   $C, $14		; $02
0001EC74 140C                       		dc.b  $14,  $C		; $03
0001EC76 0410                       		dc.b	4, $10		; $04
0001EC78 0C12                       		dc.b   $C, $12		; $05
0001EC7A 1010                       		dc.b  $10, $10		; $06
0001EC7C 0606                       		dc.b	6,   6		; $07
0001EC7E 180C                       		dc.b  $18,  $C		; $08
0001EC80 0C10                       		dc.b   $C, $10		; $09
0001EC82 100C                       		dc.b  $10,  $C		; $0A
0001EC84 0808                       		dc.b	8,   8		; $0B
0001EC86 1410                       		dc.b  $14, $10		; $0C
0001EC88 1408                       		dc.b  $14,   8		; $0D
0001EC8A 0E0E                       		dc.b   $E,  $E		; $0E
0001EC8C 1818                       		dc.b  $18, $18		; $0F
0001EC8E 2810                       		dc.b  $28, $10		; $10
0001EC90 1018                       		dc.b  $10, $18		; $11
0001EC92 0810                       		dc.b	8, $10		; $12
0001EC94 2070                       		dc.b  $20, $70		; $13
0001EC96 4020                       		dc.b  $40, $20		; $14
0001EC98 8020                       		dc.b  $80, $20		; $15
0001EC9A 2020                       		dc.b  $20, $20		; $16
0001EC9C 0808                       		dc.b	8,   8		; $17
0001EC9E 0404                       		dc.b	4,   4		; $18
0001ECA0 2008                       		dc.b  $20,   8		; $19
0001ECA2 0C0C                       		dc.b   $C,  $C		; $1A
0001ECA4 0804                       		dc.b	8,   4		; $1B
0001ECA6 1804                       		dc.b  $18,   4		; $1C
0001ECA8 2804                       		dc.b  $28,   4		; $1D
0001ECAA 0408                       		dc.b	4,   8		; $1E
0001ECAC 0418                       		dc.b	4, $18		; $1F
0001ECAE 0428                       		dc.b	4, $28		; $20
0001ECB0 0420                       		dc.b	4, $20		; $21
0001ECB2 1818                       		dc.b  $18, $18		; $22
0001ECB4 0C18                       		dc.b   $C, $18		; $23
0001ECB6 4808                       		dc.b  $48,   8		; $24
0001ECB8                            ; ===========================================================================
0001ECB8                            
0001ECB8                            @proximity:
0001ECB8 0240 003F                  		andi.w	#$3F,d0
0001ECBC D040                       		add.w	d0,d0
0001ECBE 45FB 00AE                  		lea	@sizes-2(pc,d0.w),a2
0001ECC2 7200                       		moveq	#0,d1
0001ECC4 121A                       		move.b	(a2)+,d1
0001ECC6 3029 0008                  		move.w	obX(a1),d0
0001ECCA 9041                       		sub.w	d1,d0
0001ECCC 9042                       		sub.w	d2,d0
0001ECCE 6400                       		bcc.s	@outsidex	; branch if not touching
0001ECD0 D241                       		add.w	d1,d1
0001ECD2 D041                       		add.w	d1,d0
0001ECD4 6500                       		bcs.s	@withinx	; branch if touching
0001ECD6 6000 FF8C                  		bra.w	@next
0001ECDA                            ; ===========================================================================
0001ECDA                            
0001ECDA                            @outsidex:
0001ECDA B044                       		cmp.w	d4,d0
0001ECDC 6200 FF86                  		bhi.w	@next
0001ECE0                            
0001ECE0                            @withinx:
0001ECE0 7200                       		moveq	#0,d1
0001ECE2 121A                       		move.b	(a2)+,d1
0001ECE4 3029 000C                  		move.w	obY(a1),d0
0001ECE8 9041                       		sub.w	d1,d0
0001ECEA 9043                       		sub.w	d3,d0
0001ECEC 6400                       		bcc.s	@outsidey	; branch if not touching
0001ECEE D241                       		add.w	d1,d1
0001ECF0 D240                       		add.w	d0,d1
0001ECF2 6500                       		bcs.s	@withiny	; branch if touching
0001ECF4 6000 FF6E                  		bra.w	@next
0001ECF8                            
0001ECF8                            ; ===========================================================================
0001ECF8                            
0001ECF8                            @outsidey:
0001ECF8 B045                       		cmp.w	d5,d0
0001ECFA 6200 FF68                  		bhi.w	@next
0001ECFE                            
0001ECFE                            @withiny:
0001ECFE                            	@chktype:
0001ECFE 1229 0020                          	move.b	obColType(a1),d1 ; load collision type
0001ED02 0201 00C0                  		andi.b	#$C0,d1        ; is obColType $40 or higher?
0001ED06 6700 0000                  		beq.w	React_Enemy    ; if not, branch
0001ED0A 0C01 00C0                  		cmpi.b	#$C0,d1		; is obColType $C0 or higher?
0001ED0E 6700 0000                  		beq.w	React_Special	; if yes, branch
0001ED12 4A01                       		tst.b	d1		; is obColType $80-$BF?
0001ED14 6B00 0000                  		bmi.w	React_ChkHurt	; if yes, branch
0001ED18                            
0001ED18                            ; obColType is $40-$7F (powerups)
0001ED18                            
0001ED18 1029 0020                  		move.b	obColType(a1),d0
0001ED1C 0200 003F                  		andi.b	#$3F,d0
0001ED20 0C00 0006                  		cmpi.b	#6,d0		; is collision type $46	?
0001ED24 6700                       		beq.s	React_Monitor	; if yes, branch
0001ED26 0C68 005A 0030             		cmpi.w	#90,$30(a0)	; is Sonic invincible?
0001ED2C 6400 0000                  		bcc.w	@invincible	; if yes, branch
0001ED30 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the object's routine counter
0001ED34                            
0001ED34                            	@invincible:
0001ED34 4E75                       		rts	
0001ED36                            ; ===========================================================================
0001ED36                            
0001ED36                            React_Monitor:
0001ED36 4A68 0012                  		tst.w	obVelY(a0)	; is Sonic moving upwards?
0001ED3A 6A00                       		bpl.s	@movingdown	; if not, branch
0001ED3C                            
0001ED3C 3028 000C                  		move.w	obY(a0),d0
0001ED40 0440 0010                  		subi.w	#$10,d0
0001ED44 B069 000C                  		cmp.w	obY(a1),d0
0001ED48 6500                       		bcs.s	@donothing
0001ED4A 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's vertical speed
0001ED4E 337C FE80 0012             		move.w	#-$180,obVelY(a1)
0001ED54 4A29 0025                  		tst.b	ob2ndRout(a1)
0001ED58 6600                       		bne.s	@donothing
0001ED5A 5829 0025                  		addq.b	#4,ob2ndRout(a1) ; advance the monitor's routine counter
0001ED5E 4E75                       		rts	
0001ED60                            ; ===========================================================================
0001ED60                            
0001ED60                            @movingdown:
0001ED60 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001ED66 6600                       		bne.s	@donothing
0001ED68 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's y-motion
0001ED6C 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the monitor's routine counter
0001ED70 4EB9 0001 60D8             		jsr		BounceJD
0001ED76                            
0001ED76                            	@donothing:
0001ED76 4E75                       		rts	
0001ED78                            ; ===========================================================================
0001ED78                            
0001ED78                            React_Enemy:
0001ED78 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001ED7C 6600                       		bne.s	@donthurtsonic	; if yes, branch
0001ED7E 0C28 001F 001C             		cmpi.b	#id_Spindash,obAnim(a0)	; is Sonic Spin Dashing? 
0001ED84 6700 0000                  		beq.w	@donthurtsonic	; if yes, branch
0001ED88 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001ED8E 6600 0000                  		bne.w	React_ChkHurt	; if not, branch
0001ED92                            
0001ED92                            	@donthurtsonic:
0001ED92 4A29 0021                  		tst.b	obColProp(a1)
0001ED96 6700                       		beq.s	breakenemy
0001ED98                            
0001ED98 4468 0010                  		neg.w	obVelX(a0)	; repel Sonic
0001ED9C 4468 0012                  		neg.w	obVelY(a0)
0001EDA0 E0E8 0010                  		asr	obVelX(a0)
0001EDA4 E0E8 0012                  		asr	obVelY(a0)
0001EDA8 137C 0000 0020             		move.b	#0,obColType(a1)
0001EDAE 5329 0021                  		subq.b	#1,obColProp(a1)
0001EDB2 6600                       		bne.s	@flagnotclear
0001EDB4 08E9 0007 0022             		bset	#7,obStatus(a1)
0001EDBA                            
0001EDBA                            	@flagnotclear:
0001EDBA 4E75                       		rts	
0001EDBC                            ; ===========================================================================
0001EDBC                            
0001EDBC                            breakenemy:
0001EDBC 08E9 0007 0022             		bset	#7,obStatus(a1)
0001EDC2 7000                       		moveq	#0,d0
0001EDC4 3038 F7D0                  		move.w	(v_itembonus).w,d0
0001EDC8 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; add 2 to item bonus counter
0001EDCC 0C40 0006                  		cmpi.w	#6,d0
0001EDD0 6500                       		bcs.s	@bonusokay
0001EDD2 7006                       		moveq	#6,d0		; max bonus is lvl6
0001EDD4                            
0001EDD4                            	@bonusokay:
0001EDD4 3340 003E                  		move.w	d0,$3E(a1)
0001EDD8 303B 0000                  		move.w	@points(pc,d0.w),d0
0001EDDC 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 enemies been destroyed?
0001EDE2 6500                       		bcs.s	@lessthan16	; if not, branch
0001EDE4 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001EDE8 337C 000A 003E             		move.w	#$A,$3E(a1)
0001EDEE                            
0001EDEE                            	@lessthan16:
0001EDEE 6100 0000                  		bsr.w	AddPoints
0001EDF2 4EB9 0001 60D8             		jsr		BounceJD
0001EDF8 12BC 0027                  		move.b	#id_ExplosionItem,0(a1) ; change object to explosion
0001EDFC 137C 0000 0024             		move.b	#0,obRoutine(a1)
0001EE02 4A68 0012                  		tst.w	obVelY(a0)
0001EE06 6B00                       		bmi.s	@bouncedown
0001EE08 3028 000C                  		move.w	obY(a0),d0
0001EE0C B069 000C                  		cmp.w	obY(a1),d0
0001EE10 6400                       		bcc.s	@bounceup
0001EE12 4468 0012                  		neg.w	obVelY(a0)
0001EE16 4E75                       		rts	
0001EE18                            ; ===========================================================================
0001EE18                            
0001EE18                            	@bouncedown:
0001EE18 0668 0100 0012             		addi.w	#$100,obVelY(a0)
0001EE1E 4E75                       		rts	
0001EE20                            
0001EE20                            	@bounceup:
0001EE20 0468 0100 0012             		subi.w	#$100,obVelY(a0)
0001EE26 4E75                       		rts	
0001EE28                            
0001EE28 000A 0014 0032 0064        @points:	dc.w 10, 20, 50, 100	; points awarded div 10
0001EE30                            
0001EE30                            ; ===========================================================================
0001EE30                            
0001EE30                            React_Caterkiller:
0001EE30 08E9 0007 0022             		bset	#7,obStatus(a1)
0001EE36                            
0001EE36                            React_ChkHurt:
0001EE36 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001EE3A 6700                       		beq.s	notinvincible	; if not, branch
0001EE3C                            
0001EE3C                            	isflashing:
0001EE3C 70FF                       		moveq	#-1,d0
0001EE3E 4E75                       		rts	
0001EE40                            ; ===========================================================================
0001EE40                            
0001EE40                            	notinvincible:
0001EE40 4E71                       		nop	
0001EE42 4A68 0030                  		tst.w	$30(a0)		; is Sonic flashing?
0001EE46 66F4                       		bne.s	isflashing	; if yes, branch
0001EE48 2449                       		movea.l	a1,a2
0001EE4A                            
0001EE4A                            ; End of function ReactToItem
0001EE4A                            ; continue straight to HurtSonic
0001EE4A                            
0001EE4A                            ; ---------------------------------------------------------------------------
0001EE4A                            ; Hurting Sonic	subroutine
0001EE4A                            ; ---------------------------------------------------------------------------
0001EE4A                            
0001EE4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EE4A                            
0001EE4A                            
0001EE4A                            HurtSonic:
0001EE4A 4A38 FE2C                  		tst.b	(v_shield).w	; does Sonic have a shield?
0001EE4E 6600                       		bne.s	@hasshield	; if yes, branch
0001EE50 4A38 F5C8                  		tst.b	(v_rshield).w	; does Sonic have a red shield?
0001EE54 6600                       		bne.s	@hasshield	; if yes, branch
0001EE56 4A38 F5C9                  		tst.b	(v_gshield).w	; does Sonic have a gold shield?
0001EE5A 6600                       		bne.s	@hasshield	; if yes, branch
0001EE5C 4A38 F5CA                  		tst.b	(v_spshield).w	; does Sonic have a silver shield?
0001EE60 6600                       		bne.s	@hasshield	; if yes, branch
0001EE62 4A78 FE20                  		tst.w	(v_rings).w	; does Sonic have any rings?
0001EE66 6700 0000                  		beq.w	@norings	; if not, branch
0001EE6A                            
0001EE6A 4EB9 0000 FD64             		jsr	(FindFreeObj).l
0001EE70 6600                       		bne.s	@hasshield
0001EE72 12BC 0037                  		move.b	#id_RingLoss,0(a1) ; load bouncing multi rings object
0001EE76 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001EE7C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001EE82                            
0001EE82                            	@hasshield:
0001EE82 0C38 0001 FE2C             		cmpi.b	#1,(v_shield).w     ; does sonic have a Shield?
0001EE88 6600                       		bne.s	@hasrshield        ; if no, check for red shield
0001EE8A 0C12 006E                  		cmpi.b	#$6E,(a2)     ; was damage caused by electrocuter?
0001EE8E 6700 FFAC                  		beq.w	isflashing
0001EE92 0C12 0086                  		cmpi.b	#$86,(a2)     ; was damage caused by Plasma Ball Launcher?
0001EE96 6700 FFA4                  		beq.w	isflashing
0001EE9A                            
0001EE9A                            	@hasrshield:
0001EE9A 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w     ; does sonic not a Red Shield?
0001EEA0 6700                       		beq.s	@hasspshield          ; if yes, check for gray shield
0001EEA2 0C12 0014                  		cmpi.b	#$14,(a2)	; was damage caused by lava ball?
0001EEA6 6700 FF94                  		beq.w 	isflashing
0001EEAA 0C12 004C                  		cmpi.b	#$4C,(a2)	; was damage caused by lava geyser?
0001EEAE 6700 FF8C                  		beq.w 	isflashing
0001EEB2 0C12 004D                  		cmpi.b	#$4D,(a2)	; was damage caused by lava geyser?
0001EEB6 6700 FF84                  		beq.w 	isflashing
0001EEBA 0C12 0062                  		cmpi.b	#$62,(a2)	; was damage caused by gargoyle?
0001EEBE 6700 FF7C                  		beq.w 	isflashing
0001EEC2 0C12 0074                  		cmpi.b	#$74,(a2)	; was damage caused by MZ fire boss?
0001EEC6 6700 FF74                  		beq.w 	isflashing
0001EECA 0C12 0035                  		cmpi.b	#$35,(a2)	; was damage caused by burning grass?
0001EECE 6700 FF6C                  		beq.w 	isflashing
0001EED2 0C12 006D                  		cmpi.b	#$6D,(a2)	; was damage caused by flamethrower?
0001EED6 6700 FF64                  		beq.w 	isflashing
0001EEDA 0C12 0054                  		cmpi.b	#$54,(a2)	; was damage caused by Lava Tag/Magma?
0001EEDE 6700 FF5C                  		beq.w 	isflashing
0001EEE2                            
0001EEE2                            	@hasspshield:
0001EEE2 0C38 0001 F5CA             		cmpi.b	#1,(v_spshield).w     ; does sonic have a sp Shield?
0001EEE8 6600 0000                  		bne.w	@hurtcont           ; if yes, make him invulnerable to metal objects
0001EEEC 0C12 0015                  		cmpi.b	#$15,(a2)	; was damage caused by SBZ Spiked Ball?
0001EEF0 6700 FF4A                  		beq.w 	isflashing
0001EEF4 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ Harpoon?
0001EEF8 6700 FF42                  		beq.w 	isflashing
0001EEFC 0C12 0017                  		cmpi.b	#$17,(a2)	; was damage caused by helix of spikes?
0001EF00 6700 FF3A                  		beq.w 	isflashing
0001EF04 0C12 0031                  		cmpi.b	#$31,(a2)	; was damage caused by Chained Stompers?
0001EF08 6700 FF32                  		beq.w 	isflashing
0001EF0C 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by Spikes?
0001EF10 6700 FF2A                  		beq.w 	isflashing
0001EF14 0C12 007B                  		cmpi.b	#$7B,(a2)	; was damage caused by SLZ boss spikeball?
0001EF18 6700 FF22                  		beq.w 	isflashing
0001EF1C 0C12 0057                  		cmpi.b	#$57,(a2)	; was damage caused by Spiked Ball & Chain?
0001EF20 6700 FF1A                  		beq.w 	isflashing
0001EF24 0C12 0058                  		cmpi.b	#$58,(a2)	; was damage caused by Big Spiked Ball?
0001EF28 6700 FF12                  		beq.w 	isflashing
0001EF2C 0C12 006A                  		cmpi.b	#$6A,(a2)	; was damage caused by Saws?
0001EF30 6700 FF0A                  		beq.w 	isflashing
0001EF34 0C12 005E                  		cmpi.b	#$5E,(a2)	; was damage caused by Seesaw ball?
0001EF38 6700 FF02                  		beq.w 	isflashing
0001EF3C                            
0001EF3C 0C12 0006                  		cmpi.b	#$06,(a2)	; was damage caused by Mozzietron?
0001EF40 6700 FE7A                  		beq.w 	breakenemy
0001EF44 0C12 001E                  		cmpi.b	#$1E,(a2)	; was damage caused by Ball Hog?
0001EF48 6700 FE72                  		beq.w 	breakenemy
0001EF4C 0C12 002D                  		cmpi.b	#$2D,(a2)	; was damage caused by Burrobot?
0001EF50 6700 FE6A                  		beq.w 	breakenemy
0001EF54 0C12 0017                  		cmpi.b	#$17,(a2)	; was damage caused by Jaws?
0001EF58 6700 FEE2                  		beq.w 	isflashing
0001EF5C 0C12 0050                  		cmpi.b	#$50,(a2)	; was damage caused by Yadrin?
0001EF60 6700 FE5A                  		beq.w 	breakenemy
0001EF64                            		;cmpi.b	#$5F,(a2)	; was damage caused by Bomb?
0001EF64                            		;beq.w 	breakenemy
0001EF64 0C12 0060                  		cmpi.b	#$60,(a2)	; was damage caused by Orbinaut?
0001EF68 6700 FE52                  		beq.w 	breakenemy
0001EF6C 0C12 0078                  		cmpi.b	#$78,(a2)	; was damage caused by Catterkiller?
0001EF70 6700 FE4A                  		beq.w 	breakenemy
0001EF74                            
0001EF74                            	@hurtcont:
0001EF74 11FC 0000 FE2C             		move.b	#0,(v_shield).w		; remove shield
0001EF7A                            		;move.b	#0,(v_gshield).w	; remove g shield
0001EF7A 11FC 0000 F5CA             		move.b	#0,(v_spshield).w	; remove sp shield
0001EF80                            		
0001EF80 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w ; do you have no r shield?
0001EF86 6700                       		beq.s	@gshieldcheck	;if not, branch
0001EF88 5338 F5C8                  		subq.b	#1,(v_rshield).w
0001EF8C                            		
0001EF8C                            	@gshieldcheck:
0001EF8C 0C38 0000 F5C9             		cmpi.b	#0,(v_gshield).w 	; do you have no g shield?
0001EF92 6700                       		beq.s	@hurtcont2			;if not, branch
0001EF94 5338 F5C9                  		subq.b	#1,(v_gshield).w	
0001EF98                            		
0001EF98                            	@hurtcont2:
0001EF98 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001EF9E 4EB9 0001 6780             		jsr		Sonic_ResetOnFloor
0001EFA4 08E8 0001 0022             		bset	#1,obStatus(a0)
0001EFAA 317C FC00 0012             		move.w	#-$400,obVelY(a0) ; make Sonic bounce away from the object
0001EFB0 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001EFB6 0828 0006 0022             		btst	#6,obStatus(a0)	; is Sonic underwater?
0001EFBC 6700                       		beq.s	@isdry		; if not, branch
0001EFBE                            
0001EFBE 317C FE00 0012             		move.w	#-$200,obVelY(a0) ; slower bounce
0001EFC4 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001EFCA                            
0001EFCA                            	@isdry:
0001EFCA 3028 0008                  		move.w	obX(a0),d0
0001EFCE B06A 0008                  		cmp.w	obX(a2),d0
0001EFD2 6500                       		bcs.s	@isleft		; if Sonic is left of the object, branch
0001EFD4 4468 0010                  		neg.w	obVelX(a0)	; if Sonic is right of the object, reverse
0001EFD8                            
0001EFD8                            	@isleft:
0001EFD8 117C 0000 0039             		move.b	#0,f_spindash(a0) ; clear Spin Dash flag 
0001EFDE 317C 0000 0020             		move.w	#0,obInertia(a0) 
0001EFE4 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0) 
0001EFEA 317C 0120 0030             		move.w	#$120,$30(a0)
0001EFF0 0C12 006E                  		cmpi.b	#$6E,(a2)    ; check if you were hurt by Electrocuter
0001EFF4 6700                       		beq.s	@hurtelec       ; if yes, branch
0001EFF6 0C12 0086                  		cmpi.b	#$86,(a2)    ; check if you were hurt by FZ plasma
0001EFFA 6700                       		beq.s	@hurtelec       ; if yes, branch
0001EFFC 317C 0000 0020             		move.w	#0,obInertia(a0)
0001F002 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0)
0001F008 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001F00E 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001F012 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001F016 6600                       		bne.s	@sound		; if not, branch
0001F018 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001F01C 6600                       		bne.s	@sound		; if not, branch
0001F01E 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001F022                            
0001F022                            	@sound:
0001F022 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001F028 70FF                       		moveq	#-1,d0
0001F02A 4E75                       		rts	
0001F02C                            
0001F02C                            	@hurtelec:
0001F02C 117C 0020 001C             		move.b	#id_Hurt2,obAnim(a0)
0001F032 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001F038 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001F03C 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001F040 66E0                       		bne.s	@sound		; if not, branch
0001F042 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001F046 66DA                       		bne.s	@sound		; if not, branch
0001F048 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001F04C                            ; ===========================================================================
0001F04C                            
0001F04C                            @norings:
0001F04C 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat on?
0001F050 6600 FE30                  		bne.w	@hasshield	; if yes, branch
0001F054                            
0001F054                            ; ---------------------------------------------------------------------------
0001F054                            ; Subroutine to	kill Sonic
0001F054                            ; ---------------------------------------------------------------------------
0001F054                            
0001F054                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F054                            
0001F054                            
0001F054                            KillSonic:
0001F054 11FC 0002 F5D8             		move.b    #2,(Super_Sonic_palette).w; Remove rotating palette
0001F05A 4238 FE19                  		clr.b (Super_Sonic_Flag).w ; Revert Sonic to Normal
0001F05E 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	active?
0001F062 6600 0000                  		bne.w	@dontdie	; if yes, branch
0001F066 31FC 0000 FE20             		move.w	#0,(v_rings).w ; clear rings
0001F06C 11FC 0000 FE2D             		move.b	#0,(v_invinc).w	; remove invincibility
0001F072 11FC 0000 FE2E             		move.b  #0,(v_shoes).w
0001F078 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0001F07E 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w  ;clear victory animation flag
0001F084 117C 0006 0024             		move.b	#6,obRoutine(a0)
0001F08A 4EB9 0001 6780             		jsr		Sonic_ResetOnFloor
0001F090 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F096 317C F900 0012             		move.w	#-$700,obVelY(a0)
0001F09C 317C 0000 0010             		move.w	#0,obVelX(a0)
0001F0A2 317C 0000 0020             		move.w	#0,obInertia(a0)
0001F0A8 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001F0AE 0C12 0054                  		cmpi.b	#$54,(a2)    ; check if you were killed by lava
0001F0B2 6700                       		beq.s	Kill_Lava       ; if yes, branch
0001F0B4 0C12 006D                  		cmpi.b	#$6D,(a2)    ; check if you were killed by flamethrower
0001F0B8 6700                       		beq.s	Kill_Lava        ; if yes, branch
0001F0BA 117C 0018 001C             		move.b	#id_Death,obAnim(a0)
0001F0C0 08E8 0007 0002             		bset	#7,obGfx(a0)
0001F0C6 303C 0000                  		move.w	#sfx_Death,d0	; play normal death sound
0001F0CA 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; check	if you were killed by spikes
0001F0CE 6600                       		bne.s	@sound
0001F0D0 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; play spikes death sound
0001F0D4                            
0001F0D4                            	@sound:
0001F0D4 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001F0DA                            
0001F0DA                            	@dontdie:
0001F0DA 70FF                       		moveq	#-1,d0
0001F0DC 4E75                       		rts	
0001F0DE                            ; End of function KillSonic
0001F0DE                            Kill_Lava:	
0001F0DE 08E8 0007 0002             	bset	#7,obGfx(a0)
0001F0E4 117C 0016 001C             	move.b	#$16,$1C(a0)
0001F0EA 303C 00C8                  	move.w	#$C8,d0        ; play death sound
0001F0EE 4EB9 0000 12A0                 jsr		(PlaySound_Special).l
0001F0F4                            
0001F0F4                            
0001F0F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F0F4                            
0001F0F4                            
0001F0F4                            React_Special:
0001F0F4 1229 0020                  		move.b	obColType(a1),d1
0001F0F8 0201 003F                  		andi.b	#$3F,d1
0001F0FC 0C01 000B                  		cmpi.b	#$B,d1		; is collision type $CB	?
0001F100 6700                       		beq.s	@caterkiller	; if yes, branch
0001F102 0C01 000C                  		cmpi.b	#$C,d1		; is collision type $CC	?
0001F106 6700                       		beq.s	@yadrin		; if yes, branch
0001F108 0C01 0017                  		cmpi.b	#$17,d1		; is collision type $D7	?
0001F10C 6700                       		beq.s	@D7orE1		; if yes, branch
0001F10E 0C01 0021                  		cmpi.b	#$21,d1		; is collision type $E1	?
0001F112 6700                       		beq.s	@D7orE1		; if yes, branch
0001F114 4E75                       		rts	
0001F116                            ; ===========================================================================
0001F116                            
0001F116                            @caterkiller:
0001F116 6000 FD18                  		bra.w	React_Caterkiller
0001F11A                            ; ===========================================================================
0001F11A                            
0001F11A                            @yadrin:
0001F11A 9A40                       		sub.w	d0,d5
0001F11C 0C45 0008                  		cmpi.w	#8,d5
0001F120 6400                       		bcc.s	@normalenemy
0001F122 3029 0008                  		move.w	obX(a1),d0
0001F126 5940                       		subq.w	#4,d0
0001F128 0829 0000 0022             		btst	#0,obStatus(a1)
0001F12E 6700                       		beq.s	@noflip
0001F130 0440 0010                  		subi.w	#$10,d0
0001F134                            
0001F134                            	@noflip:
0001F134 9042                       		sub.w	d2,d0
0001F136 6400                       		bcc.s	@loc_1B13C
0001F138 0640 0018                  		addi.w	#$18,d0
0001F13C 6500                       		bcs.s	@loc_1B140
0001F13E 6000                       		bra.s	@normalenemy
0001F140                            ; ===========================================================================
0001F140                            
0001F140                            	@loc_1B13C:
0001F140 B044                       		cmp.w	d4,d0
0001F142 6200                       		bhi.s	@normalenemy
0001F144                            
0001F144                            	@loc_1B140:
0001F144 6000 FCF0                  		bra.w	React_ChkHurt
0001F148                            ; ===========================================================================
0001F148                            
0001F148                            	@normalenemy:
0001F148 6000 FC2E                  		bra.w	React_Enemy
0001F14C                            ; ===========================================================================
0001F14C                            
0001F14C                            @D7orE1:
0001F14C 5229 0021                  		addq.b	#1,obColProp(a1)
0001F150 4E75                       		rts	
0001F152                            ; End of function React_Special
0001F152                            
0001F152                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F152                            
0001F152                            React_ChkWaterTag:
0001F152 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001F158 6600 0000                  		bne	NotWaterTag
0001F15C 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0001F162                            	NotWaterTag:
0001F162 4E75                       		rts
0001F164                            
0001F164                            React_WaterTag:
0001F164 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001F16A 6700 0000                  		beq	SkipWaterTag
0001F16E 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0001F174                            	SkipWaterTag:
0001F174 4E75                       		rts
0001F174 4E75                       		rts
0001F176                            
0001F176                            ; ---------------------------------------------------------------------------
0001F176                            ; Subroutine to	show the special stage layout
0001F176                            ; ---------------------------------------------------------------------------
0001F176                            
0001F176                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F176                            
0001F176                            
0001F176                            SS_ShowLayout:
0001F176 6100 0000                  		bsr.w	SS_AniWallsRings
0001F17A 6100 0000                  		bsr.w	SS_AniItems
0001F17E 3F05                       		move.w	d5,-(sp)
0001F180 43F8 8000                  		lea	($FFFF8000).w,a1
0001F184 1038 F780                  		move.b	(v_ssangle).w,d0
0001F188 0200 00FC                  		andi.b	#$FC,d0
0001F18C 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001F192 3800                       		move.w	d0,d4
0001F194 3A01                       		move.w	d1,d5
0001F196 C9FC 0018                  		muls.w	#$18,d4
0001F19A CBFC 0018                  		muls.w	#$18,d5
0001F19E 7400                       		moveq	#0,d2
0001F1A0 3438 F700                  		move.w	(v_screenposx).w,d2
0001F1A4 84FC 0018                  		divu.w	#$18,d2
0001F1A8 4842                       		swap	d2
0001F1AA 4442                       		neg.w	d2
0001F1AC 0642 FF4C                  		addi.w	#-$B4,d2
0001F1B0 7600                       		moveq	#0,d3
0001F1B2 3638 F704                  		move.w	(v_screenposy).w,d3
0001F1B6 86FC 0018                  		divu.w	#$18,d3
0001F1BA 4843                       		swap	d3
0001F1BC 4443                       		neg.w	d3
0001F1BE 0643 FF4C                  		addi.w	#-$B4,d3
0001F1C2 3E3C 000F                  		move.w	#$F,d7
0001F1C6                            
0001F1C6                            loc_1B19E:
0001F1C6 48A7 E000                  		movem.w	d0-d2,-(sp)
0001F1CA 48A7 C000                  		movem.w	d0-d1,-(sp)
0001F1CE 4440                       		neg.w	d0
0001F1D0 C3C2                       		muls.w	d2,d1
0001F1D2 C1C3                       		muls.w	d3,d0
0001F1D4 2C00                       		move.l	d0,d6
0001F1D6 DC81                       		add.l	d1,d6
0001F1D8 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001F1DC C1C2                       		muls.w	d2,d0
0001F1DE C3C3                       		muls.w	d3,d1
0001F1E0 D280                       		add.l	d0,d1
0001F1E2 2406                       		move.l	d6,d2
0001F1E4 3C3C 000F                  		move.w	#$F,d6
0001F1E8                            
0001F1E8                            loc_1B1C0:
0001F1E8 2002                       		move.l	d2,d0
0001F1EA E080                       		asr.l	#8,d0
0001F1EC 32C0                       		move.w	d0,(a1)+
0001F1EE 2001                       		move.l	d1,d0
0001F1F0 E080                       		asr.l	#8,d0
0001F1F2 32C0                       		move.w	d0,(a1)+
0001F1F4 D485                       		add.l	d5,d2
0001F1F6 D284                       		add.l	d4,d1
0001F1F8 51CE FFEE                  		dbf	d6,loc_1B1C0
0001F1FC                            
0001F1FC 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001F200 0643 0018                  		addi.w	#$18,d3
0001F204 51CF FFC0                  		dbf	d7,loc_1B19E
0001F208                            
0001F208 3A1F                       		move.w	(sp)+,d5
0001F20A 41F9 00FF 0000             		lea	($FF0000).l,a0
0001F210 7000                       		moveq	#0,d0
0001F212 3038 F704                  		move.w	(v_screenposy).w,d0
0001F216 80FC 0018                  		divu.w	#$18,d0
0001F21A C0FC 0080                  		mulu.w	#$80,d0
0001F21E D1C0                       		adda.l	d0,a0
0001F220 7000                       		moveq	#0,d0
0001F222 3038 F700                  		move.w	(v_screenposx).w,d0
0001F226 80FC 0018                  		divu.w	#$18,d0
0001F22A D0C0                       		adda.w	d0,a0
0001F22C 49F8 8000                  		lea	($FFFF8000).w,a4
0001F230 3E3C 000F                  		move.w	#$F,d7
0001F234                            
0001F234                            loc_1B20C:
0001F234 3C3C 000F                  		move.w	#$F,d6
0001F238                            
0001F238                            loc_1B210:
0001F238 7000                       		moveq	#0,d0
0001F23A 1018                       		move.b	(a0)+,d0
0001F23C 6700                       		beq.s	loc_1B268
0001F23E 0C00 004E                  		cmpi.b	#$4E,d0
0001F242 6200                       		bhi.s	loc_1B268
0001F244 3614                       		move.w	(a4),d3
0001F246 0643 0120                  		addi.w	#$120,d3
0001F24A 0C43 0070                  		cmpi.w	#$70,d3
0001F24E 6500                       		blo.s	loc_1B268
0001F250 0C43 01D0                  		cmpi.w	#$1D0,d3
0001F254 6400                       		bhs.s	loc_1B268
0001F256 342C 0002                  		move.w	2(a4),d2
0001F25A 0642 00F0                  		addi.w	#$F0,d2
0001F25E 0C42 0070                  		cmpi.w	#$70,d2
0001F262 6500                       		blo.s	loc_1B268
0001F264 0C42 0170                  		cmpi.w	#$170,d2
0001F268 6400                       		bhs.s	loc_1B268
0001F26A 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001F270 E748                       		lsl.w	#3,d0
0001F272 4BF5 0000                  		lea	(a5,d0.w),a5
0001F276 225D                       		movea.l	(a5)+,a1
0001F278 321D                       		move.w	(a5)+,d1
0001F27A D241                       		add.w	d1,d1
0001F27C D2F1 1000                  		adda.w	(a1,d1.w),a1
0001F280 365D                       		movea.w	(a5)+,a3
0001F282 7200                       		moveq	#0,d1
0001F284 1219                       		move.b	(a1)+,d1
0001F286 5301                       		subq.b	#1,d1
0001F288 6B00                       		bmi.s	loc_1B268
0001F28A 4EB9 0000 FA3C             		jsr	(sub_D762).l
0001F290                            
0001F290                            loc_1B268:
0001F290 584C                       		addq.w	#4,a4
0001F292 51CE FFA4                  		dbf	d6,loc_1B210
0001F296                            
0001F296 41E8 0070                  		lea	$70(a0),a0
0001F29A 51CF FF98                  		dbf	d7,loc_1B20C
0001F29E                            
0001F29E 11C5 F62C                  		move.b	d5,(v_spritecount).w
0001F2A2 0C05 0050                  		cmpi.b	#$50,d5
0001F2A6 6700                       		beq.s	loc_1B288
0001F2A8 24BC 0000 0000             		move.l	#0,(a2)
0001F2AE 4E75                       		rts	
0001F2B0                            ; ===========================================================================
0001F2B0                            
0001F2B0                            loc_1B288:
0001F2B0 157C 0000 FFFB             		move.b	#0,-5(a2)
0001F2B6 4E75                       		rts	
0001F2B8                            ; End of function SS_ShowLayout
0001F2B8                            
0001F2B8                            ; ---------------------------------------------------------------------------
0001F2B8                            ; Subroutine to	animate	walls and rings	in the special stage
0001F2B8                            ; ---------------------------------------------------------------------------
0001F2B8                            
0001F2B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F2B8                            
0001F2B8                            
0001F2B8                            SS_AniWallsRings:
0001F2B8 43F9 00FF 400C             		lea	($FF400C).l,a1
0001F2BE 7000                       		moveq	#0,d0
0001F2C0 1038 F780                  		move.b	(v_ssangle).w,d0
0001F2C4 E408                       		lsr.b	#2,d0
0001F2C6 0240 000F                  		andi.w	#$F,d0
0001F2CA 7223                       		moveq	#$23,d1
0001F2CC                            
0001F2CC                            loc_1B2A4:
0001F2CC 3280                       		move.w	d0,(a1)
0001F2CE 5049                       		addq.w	#8,a1
0001F2D0 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001F2D4                            
0001F2D4 43F9 00FF 4005             		lea	($FF4005).l,a1
0001F2DA 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
0001F2DE 6A00                       		bpl.s	loc_1B2C8
0001F2E0 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0001F2E6 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
0001F2EA 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0001F2F0                            
0001F2F0                            loc_1B2C8:
0001F2F0 1378 FEC3 01D0             		move.b	(v_ani1_frame).w,$1D0(a1)
0001F2F6 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0001F2FA 6A00                       		bpl.s	loc_1B2E4
0001F2FC 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
0001F302 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
0001F306 0238 0001 FEC5             		andi.b	#1,(v_ani2_frame).w
0001F30C                            
0001F30C                            loc_1B2E4:
0001F30C 1038 FEC5                  		move.b	(v_ani2_frame).w,d0
0001F310 1340 0138                  		move.b	d0,$138(a1)
0001F314 1340 0160                  		move.b	d0,$160(a1)
0001F318 1340 0148                  		move.b	d0,$148(a1)
0001F31C 1340 0150                  		move.b	d0,$150(a1)
0001F320 1340 01D8                  		move.b	d0,$1D8(a1)
0001F324 1340 01E0                  		move.b	d0,$1E0(a1)
0001F328 1340 01E8                  		move.b	d0,$1E8(a1)
0001F32C 1340 01F0                  		move.b	d0,$1F0(a1)
0001F330 1340 01F8                  		move.b	d0,$1F8(a1)
0001F334 1340 0200                  		move.b	d0,$200(a1)
0001F338 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
0001F33C 6A00                       		bpl.s	loc_1B326
0001F33E 11FC 0004 FEC6             		move.b	#4,(v_ani3_time).w
0001F344 5238 FEC7                  		addq.b	#1,(v_ani3_frame).w
0001F348 0238 0003 FEC7             		andi.b	#3,(v_ani3_frame).w
0001F34E                            
0001F34E                            loc_1B326:
0001F34E 1038 FEC7                  		move.b	(v_ani3_frame).w,d0
0001F352 1340 0168                  		move.b	d0,$168(a1)
0001F356 1340 0170                  		move.b	d0,$170(a1)
0001F35A 1340 0178                  		move.b	d0,$178(a1)
0001F35E 1340 0180                  		move.b	d0,$180(a1)
0001F362 5338 FEC0                  		subq.b	#1,(v_ani0_time).w
0001F366 6A00                       		bpl.s	loc_1B350
0001F368 11FC 0007 FEC0             		move.b	#7,(v_ani0_time).w
0001F36E 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w
0001F372 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w
0001F378                            
0001F378                            loc_1B350:
0001F378 43F9 00FF 4016             		lea	($FF4016).l,a1
0001F37E 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001F384 7000                       		moveq	#0,d0
0001F386 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0001F38A D040                       		add.w	d0,d0
0001F38C 41F0 0000                  		lea	(a0,d0.w),a0
0001F390 3290                       		move.w	(a0),(a1)
0001F392 3368 0002 0008             		move.w	2(a0),8(a1)
0001F398 3368 0004 0010             		move.w	4(a0),$10(a1)
0001F39E 3368 0006 0018             		move.w	6(a0),$18(a1)
0001F3A4 3368 0008 0020             		move.w	8(a0),$20(a1)
0001F3AA 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001F3B0 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001F3B6 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001F3BC D0FC 0020                  		adda.w	#$20,a0
0001F3C0 D2FC 0048                  		adda.w	#$48,a1
0001F3C4 3290                       		move.w	(a0),(a1)
0001F3C6 3368 0002 0008             		move.w	2(a0),8(a1)
0001F3CC 3368 0004 0010             		move.w	4(a0),$10(a1)
0001F3D2 3368 0006 0018             		move.w	6(a0),$18(a1)
0001F3D8 3368 0008 0020             		move.w	8(a0),$20(a1)
0001F3DE 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001F3E4 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001F3EA 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001F3F0 D0FC 0020                  		adda.w	#$20,a0
0001F3F4 D2FC 0048                  		adda.w	#$48,a1
0001F3F8 3290                       		move.w	(a0),(a1)
0001F3FA 3368 0002 0008             		move.w	2(a0),8(a1)
0001F400 3368 0004 0010             		move.w	4(a0),$10(a1)
0001F406 3368 0006 0018             		move.w	6(a0),$18(a1)
0001F40C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001F412 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001F418 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001F41E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001F424 D0FC 0020                  		adda.w	#$20,a0
0001F428 D2FC 0048                  		adda.w	#$48,a1
0001F42C 3290                       		move.w	(a0),(a1)
0001F42E 3368 0002 0008             		move.w	2(a0),8(a1)
0001F434 3368 0004 0010             		move.w	4(a0),$10(a1)
0001F43A 3368 0006 0018             		move.w	6(a0),$18(a1)
0001F440 3368 0008 0020             		move.w	8(a0),$20(a1)
0001F446 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001F44C 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001F452 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001F458 D0FC 0020                  		adda.w	#$20,a0
0001F45C D2FC 0048                  		adda.w	#$48,a1
0001F460 4E75                       		rts	
0001F462                            ; End of function SS_AniWallsRings
0001F462                            
0001F462                            ; ===========================================================================
0001F462 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001F472 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001F482 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001F492 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001F4A2 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001F4B2 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001F4C2 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001F4D2 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001F4E2                            ; ---------------------------------------------------------------------------
0001F4E2                            ; Subroutine to	remove items when you collect them in the special stage
0001F4E2                            ; ---------------------------------------------------------------------------
0001F4E2                            
0001F4E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F4E2                            
0001F4E2                            
0001F4E2                            SS_RemoveCollectedItem:
0001F4E2 45F9 00FF 4400             		lea	($FF4400).l,a2
0001F4E8 303C 001F                  		move.w	#$1F,d0
0001F4EC                            
0001F4EC                            loc_1B4C4:
0001F4EC 4A12                       		tst.b	(a2)
0001F4EE 6700                       		beq.s	locret_1B4CE
0001F4F0 504A                       		addq.w	#8,a2
0001F4F2 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001F4F6                            
0001F4F6                            locret_1B4CE:
0001F4F6 4E75                       		rts	
0001F4F8                            ; End of function SS_RemoveCollectedItem
0001F4F8                            
0001F4F8                            ; ---------------------------------------------------------------------------
0001F4F8                            ; Subroutine to	animate	special	stage items when you touch them
0001F4F8                            ; ---------------------------------------------------------------------------
0001F4F8                            
0001F4F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F4F8                            
0001F4F8                            
0001F4F8                            SS_AniItems:
0001F4F8 41F9 00FF 4400             		lea	($FF4400).l,a0
0001F4FE 3E3C 001F                  		move.w	#$1F,d7
0001F502                            
0001F502                            loc_1B4DA:
0001F502 7000                       		moveq	#0,d0
0001F504 1010                       		move.b	(a0),d0
0001F506 6700                       		beq.s	loc_1B4E8
0001F508 E548                       		lsl.w	#2,d0
0001F50A 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001F50E 4E91                       		jsr	(a1)
0001F510                            
0001F510                            loc_1B4E8:
0001F510 5048                       		addq.w	#8,a0
0001F512                            
0001F512                            loc_1B4EA:
0001F512 51CF FFEE                  		dbf	d7,loc_1B4DA
0001F516                            
0001F516 4E75                       		rts	
0001F518                            ; End of function SS_AniItems
0001F518                            
0001F518                            ; ===========================================================================
0001F518 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001F51C 0000 0000                  		dc.l SS_AniBumper
0001F520 0000 0000                  		dc.l SS_Ani1Up
0001F524 0000 0000                  		dc.l SS_AniReverse
0001F528 0000 0000                  		dc.l SS_AniEmeraldSparks
0001F52C 0000 0000                  		dc.l SS_AniGlassBlock
0001F530                            ; ===========================================================================
0001F530                            
0001F530                            SS_AniRingSparks:
0001F530 5328 0002                  		subq.b	#1,2(a0)
0001F534 6A00                       		bpl.s	locret_1B530
0001F536 117C 0005 0002             		move.b	#5,2(a0)
0001F53C 7000                       		moveq	#0,d0
0001F53E 1028 0003                  		move.b	3(a0),d0
0001F542 5228 0003                  		addq.b	#1,3(a0)
0001F546 2268 0004                  		movea.l	4(a0),a1
0001F54A 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001F54E 1280                       		move.b	d0,(a1)
0001F550 6600                       		bne.s	locret_1B530
0001F552 4290                       		clr.l	(a0)
0001F554 42A8 0004                  		clr.l	4(a0)
0001F558                            
0001F558                            locret_1B530:
0001F558 4E75                       		rts	
0001F55A                            ; ===========================================================================
0001F55A 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001F560                            ; ===========================================================================
0001F560                            
0001F560                            SS_AniBumper:
0001F560 5328 0002                  		subq.b	#1,2(a0)
0001F564 6A00                       		bpl.s	locret_1B566
0001F566 117C 0007 0002             		move.b	#7,2(a0)
0001F56C 7000                       		moveq	#0,d0
0001F56E 1028 0003                  		move.b	3(a0),d0
0001F572 5228 0003                  		addq.b	#1,3(a0)
0001F576 2268 0004                  		movea.l	4(a0),a1
0001F57A 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001F57E 6600                       		bne.s	loc_1B564
0001F580 4290                       		clr.l	(a0)
0001F582 42A8 0004                  		clr.l	4(a0)
0001F586 12BC 0025                  		move.b	#$25,(a1)
0001F58A 4E75                       		rts	
0001F58C                            ; ===========================================================================
0001F58C                            
0001F58C                            loc_1B564:
0001F58C 1280                       		move.b	d0,(a1)
0001F58E                            
0001F58E                            locret_1B566:
0001F58E 4E75                       		rts	
0001F590                            ; ===========================================================================
0001F590 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001F596                            ; ===========================================================================
0001F596                            
0001F596                            SS_Ani1Up:
0001F596 5328 0002                  		subq.b	#1,2(a0)
0001F59A 6A00                       		bpl.s	locret_1B596
0001F59C 117C 0005 0002             		move.b	#5,2(a0)
0001F5A2 7000                       		moveq	#0,d0
0001F5A4 1028 0003                  		move.b	3(a0),d0
0001F5A8 5228 0003                  		addq.b	#1,3(a0)
0001F5AC 2268 0004                  		movea.l	4(a0),a1
0001F5B0 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001F5B4 1280                       		move.b	d0,(a1)
0001F5B6 6600                       		bne.s	locret_1B596
0001F5B8 4290                       		clr.l	(a0)
0001F5BA 42A8 0004                  		clr.l	4(a0)
0001F5BE                            
0001F5BE                            locret_1B596:
0001F5BE 4E75                       		rts	
0001F5C0                            ; ===========================================================================
0001F5C0 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001F5C6                            ; ===========================================================================
0001F5C6                            
0001F5C6                            SS_AniReverse:
0001F5C6 5328 0002                  		subq.b	#1,2(a0)
0001F5CA 6A00                       		bpl.s	locret_1B5CC
0001F5CC 117C 0007 0002             		move.b	#7,2(a0)
0001F5D2 7000                       		moveq	#0,d0
0001F5D4 1028 0003                  		move.b	3(a0),d0
0001F5D8 5228 0003                  		addq.b	#1,3(a0)
0001F5DC 2268 0004                  		movea.l	4(a0),a1
0001F5E0 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001F5E4 6600                       		bne.s	loc_1B5CA
0001F5E6 4290                       		clr.l	(a0)
0001F5E8 42A8 0004                  		clr.l	4(a0)
0001F5EC 12BC 002B                  		move.b	#$2B,(a1)
0001F5F0 4E75                       		rts	
0001F5F2                            ; ===========================================================================
0001F5F2                            
0001F5F2                            loc_1B5CA:
0001F5F2 1280                       		move.b	d0,(a1)
0001F5F4                            
0001F5F4                            locret_1B5CC:
0001F5F4 4E75                       		rts	
0001F5F6                            ; ===========================================================================
0001F5F6 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001F5FC                            ; ===========================================================================
0001F5FC                            
0001F5FC                            SS_AniEmeraldSparks:
0001F5FC 5328 0002                  		subq.b	#1,2(a0)
0001F600 6A00                       		bpl.s	locret_1B60C
0001F602 117C 0005 0002             		move.b	#5,2(a0)
0001F608 7000                       		moveq	#0,d0
0001F60A 1028 0003                  		move.b	3(a0),d0
0001F60E 5228 0003                  		addq.b	#1,3(a0)
0001F612 2268 0004                  		movea.l	4(a0),a1
0001F616 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001F61A 1280                       		move.b	d0,(a1)
0001F61C 6600                       		bne.s	locret_1B60C
0001F61E 4290                       		clr.l	(a0)
0001F620 42A8 0004                  		clr.l	4(a0)
0001F624 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001F634                            
0001F634                            locret_1B60C:
0001F634 4E75                       		rts	
0001F636                            ; ===========================================================================
0001F636 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001F63C                            ; ===========================================================================
0001F63C                            
0001F63C                            SS_AniGlassBlock:
0001F63C 5328 0002                  		subq.b	#1,2(a0)
0001F640 6A00                       		bpl.s	locret_1B640
0001F642 117C 0001 0002             		move.b	#1,2(a0)
0001F648 7000                       		moveq	#0,d0
0001F64A 1028 0003                  		move.b	3(a0),d0
0001F64E 5228 0003                  		addq.b	#1,3(a0)
0001F652 2268 0004                  		movea.l	4(a0),a1
0001F656 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001F65A 1280                       		move.b	d0,(a1)
0001F65C 6600                       		bne.s	locret_1B640
0001F65E 12A8 0004                  		move.b	4(a0),(a1)
0001F662 4290                       		clr.l	(a0)
0001F664 42A8 0004                  		clr.l	4(a0)
0001F668                            
0001F668                            locret_1B640:
0001F668 4E75                       		rts	
0001F66A                            ; ===========================================================================
0001F66A 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001F674                            
0001F674                            ; ---------------------------------------------------------------------------
0001F674                            ; Special stage	layout pointers
0001F674                            ; ---------------------------------------------------------------------------
0001F674                            SS_LayoutIndex:
0001F674 0000 0000                  		dc.l SS_1
0001F678 0000 0000                  		dc.l SS_2
0001F67C 0000 0000                  		dc.l SS_3
0001F680 0000 0000                  		dc.l SS_4
0001F684 0000 0000                  		dc.l SS_5
0001F688 0000 0000                  		dc.l SS_6
0001F68C                            		even
0001F68C                            
0001F68C                            ; ---------------------------------------------------------------------------
0001F68C                            ; Special stage start locations
0001F68C                            ; ---------------------------------------------------------------------------
0001F68C                            SS_StartLoc:	include	"_inc\Start Location Array - Special Stages.asm"
0001F68C                            ; ---------------------------------------------------------------------------
0001F68C                            ; Special stage start locations
0001F68C                            ; ---------------------------------------------------------------------------
0001F68C                            
0001F68C                            		incbin	"startpos\ss1.bin"
0001F690                            		incbin	"startpos\ss2.bin"
0001F694                            		incbin	"startpos\ss3.bin"
0001F698                            		incbin	"startpos\ss4.bin"
0001F69C                            		incbin	"startpos\ss5.bin"
0001F6A0                            		incbin	"startpos\ss6.bin"
0001F6A4                            		even
0001F6A4                            		even
0001F6A4                            
0001F6A4                            ; ---------------------------------------------------------------------------
0001F6A4                            ; Subroutine to	load special stage layout
0001F6A4                            ; ---------------------------------------------------------------------------
0001F6A4                            
0001F6A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F6A4                            
0001F6A4                            
0001F6A4                            SS_Load:
0001F6A4 7000                       		moveq	#0,d0
0001F6A6 1038 FE16                  		move.b	(v_lastspecial).w,d0 ; load number of last special stage entered
0001F6AA 5238 FE16                  		addq.b	#1,(v_lastspecial).w
0001F6AE 0C38 0006 FE16             		cmpi.b	#6,(v_lastspecial).w
0001F6B4 6500                       		blo.s	SS_ChkEmldNum
0001F6B6 11FC 0000 FE16             		move.b	#0,(v_lastspecial).w ; reset if higher than 6
0001F6BC                            
0001F6BC                            SS_ChkEmldNum:
0001F6BC 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all emeralds?
0001F6C2 6700                       		beq.s	SS_LoadData	; if yes, branch
0001F6C4 7200                       		moveq	#0,d1
0001F6C6 1238 FE57                  		move.b	(v_emeralds).w,d1
0001F6CA 5301                       		subq.b	#1,d1
0001F6CC 6500                       		blo.s	SS_LoadData
0001F6CE 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0001F6D2                            
0001F6D2                            SS_ChkEmldLoop:	
0001F6D2 B033 1000                  		cmp.b	(a3,d1.w),d0
0001F6D6 6600                       		bne.s	SS_ChkEmldRepeat
0001F6D8 60CA                       		bra.s	SS_Load
0001F6DA                            ; ===========================================================================
0001F6DA                            
0001F6DA                            SS_ChkEmldRepeat:
0001F6DA 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001F6DE                            
0001F6DE                            SS_LoadData:
0001F6DE E548                       		lsl.w	#2,d0
0001F6E0 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001F6E4 31D9 D008                  		move.w	(a1)+,(v_player+obX).w
0001F6E8 31D9 D00C                  		move.w	(a1)+,(v_player+obY).w
0001F6EC 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001F6F0 43F9 00FF 4000             		lea	($FF4000).l,a1
0001F6F6 303C 0000                  		move.w	#0,d0
0001F6FA 4EB9 0000 18D8             		jsr	(EniDec).l
0001F700 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F706 303C 0FFF                  		move.w	#$FFF,d0
0001F70A                            
0001F70A                            SS_ClrRAM3:
0001F70A 4299                       		clr.l	(a1)+
0001F70C 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001F710                            
0001F710 43F9 00FF 1020             		lea	($FF1020).l,a1
0001F716 41F9 00FF 4000             		lea	($FF4000).l,a0
0001F71C 723F                       		moveq	#$3F,d1
0001F71E                            
0001F71E                            loc_1B6F6:
0001F71E 743F                       		moveq	#$3F,d2
0001F720                            
0001F720                            loc_1B6F8:
0001F720 12D8                       		move.b	(a0)+,(a1)+
0001F722 51CA FFFC                  		dbf	d2,loc_1B6F8
0001F726                            
0001F726 43E9 0040                  		lea	$40(a1),a1
0001F72A 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001F72E                            
0001F72E 43F9 00FF 4008             		lea	($FF4008).l,a1
0001F734 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001F73A 724D                       		moveq	#$4D,d1
0001F73C                            
0001F73C                            loc_1B714:
0001F73C 22D8                       		move.l	(a0)+,(a1)+
0001F73E 32FC 0000                  		move.w	#0,(a1)+
0001F742 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001F748 32D8                       		move.w	(a0)+,(a1)+
0001F74A 51C9 FFF0                  		dbf	d1,loc_1B714
0001F74E                            
0001F74E 43F9 00FF 4400             		lea	($FF4400).l,a1
0001F754 323C 003F                  		move.w	#$3F,d1
0001F758                            
0001F758                            loc_1B730:
0001F758                            
0001F758 4299                       		clr.l	(a1)+
0001F75A 51C9 FFFC                  		dbf	d1,loc_1B730
0001F75E                            
0001F75E 4E75                       		rts	
0001F760                            ; End of function SS_Load
0001F760                            
0001F760                            ; ===========================================================================
0001F760                            
0001F760                            SS_MapIndex:
0001F760                            		include	"_inc\Special Stage Mappings & VRAM Pointers.asm"
0001F760                            ; ---------------------------------------------------------------------------
0001F760                            ; Special stage	mappings and VRAM pointers
0001F760                            ; ---------------------------------------------------------------------------
0001F760 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001F764 0142                       	dc.w $142		; VRAM setting
0001F766 0000 0000                  	dc.l Map_SSWalls
0001F76A 0142                       	dc.w $142
0001F76C 0000 0000                  	dc.l Map_SSWalls
0001F770 0142                       	dc.w $142
0001F772 0000 0000                  	dc.l Map_SSWalls
0001F776 0142                       	dc.w $142
0001F778 0000 0000                  	dc.l Map_SSWalls
0001F77C 0142                       	dc.w $142
0001F77E 0000 0000                  	dc.l Map_SSWalls
0001F782 0142                       	dc.w $142
0001F784 0000 0000                  	dc.l Map_SSWalls
0001F788 0142                       	dc.w $142
0001F78A 0000 0000                  	dc.l Map_SSWalls
0001F78E 0142                       	dc.w $142
0001F790 0000 0000                  	dc.l Map_SSWalls
0001F794 0142                       	dc.w $142
0001F796 0000 0000                  	dc.l Map_SSWalls
0001F79A 2142                       	dc.w $2142
0001F79C 0000 0000                  	dc.l Map_SSWalls
0001F7A0 2142                       	dc.w $2142
0001F7A2 0000 0000                  	dc.l Map_SSWalls
0001F7A6 2142                       	dc.w $2142
0001F7A8 0000 0000                  	dc.l Map_SSWalls
0001F7AC 2142                       	dc.w $2142
0001F7AE 0000 0000                  	dc.l Map_SSWalls
0001F7B2 2142                       	dc.w $2142
0001F7B4 0000 0000                  	dc.l Map_SSWalls
0001F7B8 2142                       	dc.w $2142
0001F7BA 0000 0000                  	dc.l Map_SSWalls
0001F7BE 2142                       	dc.w $2142
0001F7C0 0000 0000                  	dc.l Map_SSWalls
0001F7C4 2142                       	dc.w $2142
0001F7C6 0000 0000                  	dc.l Map_SSWalls
0001F7CA 2142                       	dc.w $2142
0001F7CC 0000 0000                  	dc.l Map_SSWalls
0001F7D0 4142                       	dc.w $4142
0001F7D2 0000 0000                  	dc.l Map_SSWalls
0001F7D6 4142                       	dc.w $4142
0001F7D8 0000 0000                  	dc.l Map_SSWalls
0001F7DC 4142                       	dc.w $4142
0001F7DE 0000 0000                  	dc.l Map_SSWalls
0001F7E2 4142                       	dc.w $4142
0001F7E4 0000 0000                  	dc.l Map_SSWalls
0001F7E8 4142                       	dc.w $4142
0001F7EA 0000 0000                  	dc.l Map_SSWalls
0001F7EE 4142                       	dc.w $4142
0001F7F0 0000 0000                  	dc.l Map_SSWalls
0001F7F4 4142                       	dc.w $4142
0001F7F6 0000 0000                  	dc.l Map_SSWalls
0001F7FA 4142                       	dc.w $4142
0001F7FC 0000 0000                  	dc.l Map_SSWalls
0001F800 4142                       	dc.w $4142
0001F802 0000 0000                  	dc.l Map_SSWalls
0001F806 6142                       	dc.w $6142
0001F808 0000 0000                  	dc.l Map_SSWalls
0001F80C 6142                       	dc.w $6142
0001F80E 0000 0000                  	dc.l Map_SSWalls
0001F812 6142                       	dc.w $6142
0001F814 0000 0000                  	dc.l Map_SSWalls
0001F818 6142                       	dc.w $6142
0001F81A 0000 0000                  	dc.l Map_SSWalls
0001F81E 6142                       	dc.w $6142
0001F820 0000 0000                  	dc.l Map_SSWalls
0001F824 6142                       	dc.w $6142
0001F826 0000 0000                  	dc.l Map_SSWalls
0001F82A 6142                       	dc.w $6142
0001F82C 0000 0000                  	dc.l Map_SSWalls
0001F830 6142                       	dc.w $6142
0001F832 0000 0000                  	dc.l Map_SSWalls
0001F836 6142                       	dc.w $6142
0001F838 0001 0E0E                  	dc.l Map_Bump
0001F83C 023B                       	dc.w $23B
0001F83E 0000 0000                  	dc.l Map_SS_R
0001F842 0570                       	dc.w $570
0001F844 0000 0000                  	dc.l Map_SS_R
0001F848 0251                       	dc.w $251
0001F84A 0000 0000                  	dc.l Map_SS_R
0001F84E 0370                       	dc.w $370
0001F850 0000 0000                  	dc.l Map_SS_Up
0001F854 0263                       	dc.w $263
0001F856 0000 0000                  	dc.l Map_SS_Down
0001F85A 0263                       	dc.w $263
0001F85C 0000 0000                  	dc.l Map_SS_R
0001F860 22F0                       	dc.w $22F0
0001F862 0000 0000                  	dc.l Map_SS_Glass
0001F866 0470                       	dc.w $470
0001F868 0000 0000                  	dc.l Map_SS_Glass
0001F86C 05F0                       	dc.w $5F0
0001F86E 0000 0000                  	dc.l Map_SS_Glass
0001F872 65F0                       	dc.w $65F0
0001F874 0000 0000                  	dc.l Map_SS_Glass
0001F878 25F0                       	dc.w $25F0
0001F87A 0000 0000                  	dc.l Map_SS_Glass
0001F87E 45F0                       	dc.w $45F0
0001F880 0000 0000                  	dc.l Map_SS_R
0001F884 02F0                       	dc.w $2F0
0001F886 0101 0E0E                  	dc.l Map_Bump+$1000000	; add frame no.	* $1000000
0001F88A 023B                       	dc.w $23B
0001F88C 0201 0E0E                  	dc.l Map_Bump+$2000000
0001F890 023B                       	dc.w $23B
0001F892 0000 0000                  	dc.l Map_SS_R
0001F896 0797                       	dc.w $797
0001F898 0000 0000                  	dc.l Map_SS_R
0001F89C 07A0                       	dc.w $7A0
0001F89E 0000 0000                  	dc.l Map_SS_R
0001F8A2 07A9                       	dc.w $7A9
0001F8A4 0000 0000                  	dc.l Map_SS_R
0001F8A8 0797                       	dc.w $797
0001F8AA 0000 0000                  	dc.l Map_SS_R
0001F8AE 07A0                       	dc.w $7A0
0001F8B0 0000 0000                  	dc.l Map_SS_R
0001F8B4 07A9                       	dc.w $7A9
0001F8B6 0000 BDD2                  	dc.l Map_Ring
0001F8BA 2798                       	dc.w $2798
0001F8BC 0000 0000                  	dc.l Map_SS_Chaos3
0001F8C0 0770                       	dc.w $770
0001F8C2 0000 0000                  	dc.l Map_SS_Chaos3
0001F8C6 2770                       	dc.w $2770
0001F8C8 0000 0000                  	dc.l Map_SS_Chaos3
0001F8CC 4770                       	dc.w $4770
0001F8CE 0000 0000                  	dc.l Map_SS_Chaos3
0001F8D2 6770                       	dc.w $6770
0001F8D4 0000 0000                  	dc.l Map_SS_Chaos1
0001F8D8 0770                       	dc.w $770
0001F8DA 0000 0000                  	dc.l Map_SS_Chaos2
0001F8DE 0770                       	dc.w $770
0001F8E0 0000 0000                  	dc.l Map_SS_R
0001F8E4 04F0                       	dc.w $4F0
0001F8E6 0400 BDD2                  	dc.l Map_Ring+$4000000
0001F8EA 2798                       	dc.w $2798
0001F8EC 0500 BDD2                  	dc.l Map_Ring+$5000000
0001F8F0 2798                       	dc.w $2798
0001F8F2 0600 BDD2                  	dc.l Map_Ring+$6000000
0001F8F6 2798                       	dc.w $2798
0001F8F8 0700 BDD2                  	dc.l Map_Ring+$7000000
0001F8FC 2798                       	dc.w $2798
0001F8FE 0000 0000                  	dc.l Map_SS_Glass
0001F902 23F0                       	dc.w $23F0
0001F904 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001F908 23F0                       	dc.w $23F0
0001F90A 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001F90E 23F0                       	dc.w $23F0
0001F910 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001F914 23F0                       	dc.w $23F0
0001F916 0000 0000                  	dc.l Map_SS_R+$2000000
0001F91A 04F0                       	dc.w $4F0
0001F91C 0000 0000                  	dc.l Map_SS_Glass
0001F920 05F0                       	dc.w $5F0
0001F922 0000 0000                  	dc.l Map_SS_Glass
0001F926 65F0                       	dc.w $65F0
0001F928 0000 0000                  	dc.l Map_SS_Glass
0001F92C 25F0                       	dc.w $25F0
0001F92E 0000 0000                  	dc.l Map_SS_Glass
0001F932 45F0                       	dc.w $45F0
0001F932 45F0                       	dc.w $45F0
0001F934                            
0001F934                            Map_SS_R:	include	"_maps\SS R Block.asm"
0001F934                            ; ---------------------------------------------------------------------------
0001F934                            ; Sprite mappings - special stage "R" block
0001F934                            ; ---------------------------------------------------------------------------
0001F934                            Map_SS_R_internal:
0001F934 0000                       		dc.w byte_1B912-Map_SS_R_internal
0001F936 0000                       		dc.w byte_1B918-Map_SS_R_internal
0001F938 0000                       		dc.w byte_1B91E-Map_SS_R_internal
0001F93A 01                         byte_1B912:	dc.b 1
0001F93B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001F940 01                         byte_1B918:	dc.b 1
0001F941 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001F946 00                         byte_1B91E:	dc.b 0
0001F948 00                         		even
0001F948 00                         		even
0001F948                            Map_SS_Glass:	include	"_maps\SS Glass Block.asm"
0001F948                            ; ---------------------------------------------------------------------------
0001F948                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001F948                            ; ---------------------------------------------------------------------------
0001F948                            Map_SS_Glass_internal:
0001F948 0000                       		dc.w byte_1B928-Map_SS_Glass_internal
0001F94A 0000                       		dc.w byte_1B92E-Map_SS_Glass_internal
0001F94C 0000                       		dc.w byte_1B934-Map_SS_Glass_internal
0001F94E 0000                       		dc.w byte_1B93A-Map_SS_Glass_internal
0001F950 01                         byte_1B928:	dc.b 1
0001F951 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001F956 01                         byte_1B92E:	dc.b 1
0001F957 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001F95C 01                         byte_1B934:	dc.b 1
0001F95D F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001F962 01                         byte_1B93A:	dc.b 1
0001F963 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001F968                            		even
0001F968                            		even
0001F968                            Map_SS_Up:	include	"_maps\SS UP Block.asm"
0001F968                            ; ---------------------------------------------------------------------------
0001F968                            ; Sprite mappings - special stage "UP" block
0001F968                            ; ---------------------------------------------------------------------------
0001F968                            Map_SS_Up_internal:
0001F968 0000                       		dc.w byte_1B944-Map_SS_Up_internal
0001F96A 0000                       		dc.w byte_1B94A-Map_SS_Up_internal
0001F96C 01                         byte_1B944:	dc.b 1
0001F96D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001F972 01                         byte_1B94A:	dc.b 1
0001F973 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001F978                            		even
0001F978                            		even
0001F978                            Map_SS_Down:	include	"_maps\SS DOWN Block.asm"
0001F978                            ; ---------------------------------------------------------------------------
0001F978                            ; Sprite mappings - special stage "DOWN" block
0001F978                            ; ---------------------------------------------------------------------------
0001F978                            Map_SS_Down_internal:
0001F978 0000                       		dc.w byte_1B954-Map_SS_Down_internal
0001F97A 0000                       		dc.w byte_1B95A-Map_SS_Down_internal
0001F97C 01                         byte_1B954:	dc.b 1
0001F97D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001F982 01                         byte_1B95A:	dc.b 1
0001F983 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001F988                            		even
0001F988                            		even
0001F988                            		include	"_maps\SS Chaos Emeralds.asm"
0001F988                            ; ---------------------------------------------------------------------------
0001F988                            ; Sprite mappings - special stage chaos	emeralds
0001F988                            ; ---------------------------------------------------------------------------
0001F988 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001F98A 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001F98C 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001F98E 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001F990 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001F992 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001F994 01                         byte_1B96C:	dc.b 1
0001F995 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001F99A 01                         byte_1B972:	dc.b 1
0001F99B F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0001F9A0 01                         byte_1B978:	dc.b 1
0001F9A1 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001F9A6 01                         byte_1B97E:	dc.b 1
0001F9A7 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001F9AC                            		even
0001F9AC                            		even
0001F9AC                            
0001F9AC                            		include	"_incObj\09 Sonic in Special Stage.asm"
0001F9AC                            ; ---------------------------------------------------------------------------
0001F9AC                            ; Object 09 - Sonic (special stage)
0001F9AC                            ; ---------------------------------------------------------------------------
0001F9AC                            
0001F9AC                            SonicSpecial:
0001F9AC 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001F9B0 6700                       		beq.s	Obj09_Normal	; if not, branch
0001F9B2 6100 0000                  		bsr.w	SS_FixCamera
0001F9B6 6000 0000                  		bra.w	DebugMode
0001F9BA                            ; ===========================================================================
0001F9BA                            
0001F9BA                            Obj09_Normal:
0001F9BA 7000                       		moveq	#0,d0
0001F9BC 1028 0024                  		move.b	obRoutine(a0),d0
0001F9C0 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001F9C4 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001F9C8                            ; ===========================================================================
0001F9C8 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001F9CA 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001F9CC 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001F9CE 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001F9D0                            ; ===========================================================================
0001F9D0                            
0001F9D0                            Obj09_Main:	; Routine 0
0001F9D0 5428 0024                  		addq.b	#2,obRoutine(a0)
0001F9D4 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001F9DA 117C 0007 0017             		move.b	#7,obWidth(a0)
0001F9E0 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0001F9E8 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001F9EE 117C 0004 0001             		move.b	#4,obRender(a0)
0001F9F4 317C 0000 0018             		move.w	#0,obPriority(a0)
0001F9FA 117C 0002 001C             		move.b	#id_Roll,obAnim(a0)
0001FA00 08E8 0002 0022             		bset	#2,obStatus(a0)
0001FA06 08E8 0001 0022             		bset	#1,obStatus(a0)
0001FA0C                            
0001FA0C                            Obj09_ChkDebug:	; Routine 2
0001FA0C 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat enabled?
0001FA10 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001FA12 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0001FA18 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001FA1A 31FC 0001 FE08             		move.w	#1,(v_debuguse).w ; change Sonic into a ring
0001FA20                            
0001FA20                            Obj09_NoDebug:
0001FA20 117C 0000 0030             		move.b	#0,$30(a0)
0001FA26 7000                       		moveq	#0,d0
0001FA28 1028 0022                  		move.b	obStatus(a0),d0
0001FA2C 0240 0002                  		andi.w	#2,d0
0001FA30 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001FA34 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001FA38 4EB9 0001 6EE0             		jsr	(Sonic_LoadGfx).l
0001FA3E 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001FA44                            ; ===========================================================================
0001FA44 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001FA46 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001FA48                            ; ===========================================================================
0001FA48                            
0001FA48                            Obj09_OnWall:
0001FA48 6100 0000                  		bsr.w	Obj09_Jump
0001FA4C 6100 0000                  		bsr.w	Obj09_Move
0001FA50 6100 0000                  		bsr.w	Obj09_Fall
0001FA54 6000                       		bra.s	Obj09_Display
0001FA56                            ; ===========================================================================
0001FA56                            
0001FA56                            Obj09_InAir:
0001FA56 6100 0000                  		bsr.w	nullsub_2
0001FA5A 6100 0000                  		bsr.w	Obj09_Move
0001FA5E 6100 0000                  		bsr.w	Obj09_Fall
0001FA62                            
0001FA62                            Obj09_Display:
0001FA62 6100 0000                  		bsr.w	Obj09_ChkItems
0001FA66 6100 0000                  		bsr.w	Obj09_ChkItems2
0001FA6A 4EB9 0000 F7B6             		jsr	(SpeedToPos).l
0001FA70 6100 0000                  		bsr.w	SS_FixCamera
0001FA74 3038 F780                  		move.w	(v_ssangle).w,d0
0001FA78 D078 F782                  		add.w	(v_ssrotate).w,d0
0001FA7C 31C0 F780                  		move.w	d0,(v_ssangle).w
0001FA80 4EB9 0001 698C             		jsr	(Sonic_Animate).l
0001FA86 4E75                       		rts	
0001FA88                            
0001FA88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FA88                            
0001FA88                            
0001FA88                            Obj09_Move:
0001FA88 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001FA8E 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001FA90 6100 0000                  		bsr.w	Obj09_MoveLeft
0001FA94                            
0001FA94                            Obj09_ChkRight:
0001FA94 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
0001FA9A 6700                       		beq.s	loc_1BA78	; if not, branch
0001FA9C 6100 0000                  		bsr.w	Obj09_MoveRight
0001FAA0                            
0001FAA0                            loc_1BA78:
0001FAA0 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001FAA4 0200 000C                  		andi.b	#btnL+btnR,d0
0001FAA8 6600                       		bne.s	loc_1BAA8
0001FAAA 3028 0020                  		move.w	obInertia(a0),d0
0001FAAE 6700                       		beq.s	loc_1BAA8
0001FAB0 6B00                       		bmi.s	loc_1BA9A
0001FAB2 0440 000C                  		subi.w	#$C,d0
0001FAB6 6400                       		bcc.s	loc_1BA94
0001FAB8 303C 0000                  		move.w	#0,d0
0001FABC                            
0001FABC                            loc_1BA94:
0001FABC 3140 0020                  		move.w	d0,obInertia(a0)
0001FAC0 6000                       		bra.s	loc_1BAA8
0001FAC2                            ; ===========================================================================
0001FAC2                            
0001FAC2                            loc_1BA9A:
0001FAC2 0640 000C                  		addi.w	#$C,d0
0001FAC6 6400                       		bcc.s	loc_1BAA4
0001FAC8 303C 0000                  		move.w	#0,d0
0001FACC                            
0001FACC                            loc_1BAA4:
0001FACC 3140 0020                  		move.w	d0,obInertia(a0)
0001FAD0                            
0001FAD0                            loc_1BAA8:
0001FAD0 1038 F780                  		move.b	(v_ssangle).w,d0
0001FAD4 0600 0020                  		addi.b	#$20,d0
0001FAD8 0200 00C0                  		andi.b	#$C0,d0
0001FADC 4400                       		neg.b	d0
0001FADE 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001FAE4 C3E8 0020                  		muls.w	obInertia(a0),d1
0001FAE8 D3A8 0008                  		add.l	d1,obX(a0)
0001FAEC C1E8 0020                  		muls.w	obInertia(a0),d0
0001FAF0 D1A8 000C                  		add.l	d0,obY(a0)
0001FAF4 48E7 C000                  		movem.l	d0-d1,-(sp)
0001FAF8 2428 000C                  		move.l	obY(a0),d2
0001FAFC 2628 0008                  		move.l	obX(a0),d3
0001FB00 6100 0000                  		bsr.w	sub_1BCE8
0001FB04 6700                       		beq.s	loc_1BAF2
0001FB06 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001FB0A 93A8 0008                  		sub.l	d1,obX(a0)
0001FB0E 91A8 000C                  		sub.l	d0,obY(a0)
0001FB12 317C 0000 0020             		move.w	#0,obInertia(a0)
0001FB18 4E75                       		rts	
0001FB1A                            ; ===========================================================================
0001FB1A                            
0001FB1A                            loc_1BAF2:
0001FB1A 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001FB1E 4E75                       		rts	
0001FB20                            ; End of function Obj09_Move
0001FB20                            
0001FB20                            
0001FB20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB20                            
0001FB20                            
0001FB20                            Obj09_MoveLeft:
0001FB20 08E8 0000 0022             		bset	#0,obStatus(a0)
0001FB26 3028 0020                  		move.w	obInertia(a0),d0
0001FB2A 6700                       		beq.s	loc_1BB06
0001FB2C 6A00                       		bpl.s	loc_1BB1A
0001FB2E                            
0001FB2E                            loc_1BB06:
0001FB2E 0440 000C                  		subi.w	#$C,d0
0001FB32 0C40 F800                  		cmpi.w	#-$800,d0
0001FB36 6E00                       		bgt.s	loc_1BB14
0001FB38 303C F800                  		move.w	#-$800,d0
0001FB3C                            
0001FB3C                            loc_1BB14:
0001FB3C 3140 0020                  		move.w	d0,obInertia(a0)
0001FB40 4E75                       		rts	
0001FB42                            ; ===========================================================================
0001FB42                            
0001FB42                            loc_1BB1A:
0001FB42 0440 0040                  		subi.w	#$40,d0
0001FB46 6400                       		bcc.s	loc_1BB22
0001FB48 4E71                       		nop	
0001FB4A                            
0001FB4A                            loc_1BB22:
0001FB4A 3140 0020                  		move.w	d0,obInertia(a0)
0001FB4E 4E75                       		rts	
0001FB50                            ; End of function Obj09_MoveLeft
0001FB50                            
0001FB50                            
0001FB50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB50                            
0001FB50                            
0001FB50                            Obj09_MoveRight:
0001FB50 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001FB56 3028 0020                  		move.w	obInertia(a0),d0
0001FB5A 6B00                       		bmi.s	loc_1BB48
0001FB5C 0640 000C                  		addi.w	#$C,d0
0001FB60 0C40 0800                  		cmpi.w	#$800,d0
0001FB64 6D00                       		blt.s	loc_1BB42
0001FB66 303C 0800                  		move.w	#$800,d0
0001FB6A                            
0001FB6A                            loc_1BB42:
0001FB6A 3140 0020                  		move.w	d0,obInertia(a0)
0001FB6E 6000                       		bra.s	locret_1BB54
0001FB70                            ; ===========================================================================
0001FB70                            
0001FB70                            loc_1BB48:
0001FB70 0640 0040                  		addi.w	#$40,d0
0001FB74 6400                       		bcc.s	loc_1BB50
0001FB76 4E71                       		nop	
0001FB78                            
0001FB78                            loc_1BB50:
0001FB78 3140 0020                  		move.w	d0,obInertia(a0)
0001FB7C                            
0001FB7C                            locret_1BB54:
0001FB7C 4E75                       		rts	
0001FB7E                            ; End of function Obj09_MoveRight
0001FB7E                            
0001FB7E                            
0001FB7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB7E                            
0001FB7E                            
0001FB7E                            Obj09_Jump:
0001FB7E 1038 F603                  		move.b	(v_jpadpress2).w,d0
0001FB82 0200 0070                  		andi.b	#btnABC,d0	; is A,	B or C pressed?
0001FB86 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001FB88 1038 F780                  		move.b	(v_ssangle).w,d0
0001FB8C 0200 00FC                  		andi.b	#$FC,d0
0001FB90 4400                       		neg.b	d0
0001FB92 0400 0040                  		subi.b	#$40,d0
0001FB96 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001FB9C C3FC 0680                  		muls.w	#$680,d1
0001FBA0 E081                       		asr.l	#8,d1
0001FBA2 3141 0010                  		move.w	d1,obVelX(a0)
0001FBA6 C1FC 0680                  		muls.w	#$680,d0
0001FBAA E080                       		asr.l	#8,d0
0001FBAC 3140 0012                  		move.w	d0,obVelY(a0)
0001FBB0 08E8 0001 0022             		bset	#1,obStatus(a0)
0001FBC0                            
0001FBC0                            Obj09_NoJump:
0001FBC0 4E75                       		rts	
0001FBC2                            ; End of function Obj09_Jump
0001FBC2                            
0001FBC2                            
0001FBC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FBC2                            
0001FBC2                            
0001FBC2                            nullsub_2:
0001FBC2 4E75                       		rts	
0001FBC4                            ; End of function nullsub_2
0001FBC4                            
0001FBC4                            ; ===========================================================================
0001FBC4                            ; ---------------------------------------------------------------------------
0001FBC4                            ; unused subroutine to limit Sonic's upward vertical speed
0001FBC4                            ; ---------------------------------------------------------------------------
0001FBC4 323C FC00                  		move.w	#-$400,d1
0001FBC8 B268 0012                  		cmp.w	obVelY(a0),d1
0001FBCC 6F00                       		ble.s	locret_1BBB4
0001FBCE 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001FBD2 0200 0070                  		andi.b	#btnABC,d0
0001FBD6 6600                       		bne.s	locret_1BBB4
0001FBD8 3141 0012                  		move.w	d1,obVelY(a0)
0001FBDC                            
0001FBDC                            locret_1BBB4:
0001FBDC 4E75                       		rts	
0001FBDE                            ; ---------------------------------------------------------------------------
0001FBDE                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001FBDE                            ; ---------------------------------------------------------------------------
0001FBDE                            
0001FBDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FBDE                            
0001FBDE                            
0001FBDE                            SS_FixCamera:
0001FBDE 3428 000C                  		move.w	obY(a0),d2
0001FBE2 3628 0008                  		move.w	obX(a0),d3
0001FBE6 3038 F700                  		move.w	(v_screenposx).w,d0
0001FBEA 0443 00A0                  		subi.w	#$A0,d3
0001FBEE 6500                       		bcs.s	loc_1BBCE
0001FBF0 9043                       		sub.w	d3,d0
0001FBF2 9178 F700                  		sub.w	d0,(v_screenposx).w
0001FBF6                            
0001FBF6                            loc_1BBCE:
0001FBF6 3038 F704                  		move.w	(v_screenposy).w,d0
0001FBFA 0442 0070                  		subi.w	#$70,d2
0001FBFE 6500                       		bcs.s	locret_1BBDE
0001FC00 9042                       		sub.w	d2,d0
0001FC02 9178 F704                  		sub.w	d0,(v_screenposy).w
0001FC06                            
0001FC06                            locret_1BBDE:
0001FC06 4E75                       		rts	
0001FC08                            ; End of function SS_FixCamera
0001FC08                            
0001FC08                            ; ===========================================================================
0001FC08                            
0001FC08                            Obj09_ExitStage:
0001FC08 0678 0040 F782             		addi.w	#$40,(v_ssrotate).w
0001FC0E 0C78 1800 F782             		cmpi.w	#$1800,(v_ssrotate).w
0001FC14 6600                       		bne.s	loc_1BBF4
0001FC16 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001FC1C                            
0001FC1C                            loc_1BBF4:
0001FC1C 0C78 3000 F782             		cmpi.w	#$3000,(v_ssrotate).w
0001FC22 6D00                       		blt.s	loc_1BC12
0001FC24 31FC 0000 F782             		move.w	#0,(v_ssrotate).w
0001FC2A 31FC 4000 F780             		move.w	#$4000,(v_ssangle).w
0001FC30 5428 0024                  		addq.b	#2,obRoutine(a0)
0001FC34 317C 003C 0038             		move.w	#$3C,$38(a0)
0001FC3A                            
0001FC3A                            loc_1BC12:
0001FC3A 3038 F780                  		move.w	(v_ssangle).w,d0
0001FC3E D078 F782                  		add.w	(v_ssrotate).w,d0
0001FC42 31C0 F780                  		move.w	d0,(v_ssangle).w
0001FC46 4EB9 0001 698C             		jsr	(Sonic_Animate).l
0001FC4C 4EB9 0001 6EE0             		jsr	(Sonic_LoadGfx).l
0001FC52 6100 FF8A                  		bsr.w	SS_FixCamera
0001FC56 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001FC5C                            ; ===========================================================================
0001FC5C                            
0001FC5C                            Obj09_Exit2:
0001FC5C 5368 0038                  		subq.w	#1,$38(a0)
0001FC60 6600                       		bne.s	loc_1BC40
0001FC62 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001FC68                            
0001FC68                            loc_1BC40:
0001FC68 4EB9 0001 698C             		jsr	(Sonic_Animate).l
0001FC6E 4EB9 0001 6EE0             		jsr	(Sonic_LoadGfx).l
0001FC74 6100 FF68                  		bsr.w	SS_FixCamera
0001FC78 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0001FC7E                            
0001FC7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC7E                            
0001FC7E                            
0001FC7E                            Obj09_Fall:
0001FC7E 2428 000C                  		move.l	obY(a0),d2
0001FC82 2628 0008                  		move.l	obX(a0),d3
0001FC86 1038 F780                  		move.b	(v_ssangle).w,d0
0001FC8A 0200 00FC                  		andi.b	#$FC,d0
0001FC8E 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001FC94 3828 0010                  		move.w	obVelX(a0),d4
0001FC98 48C4                       		ext.l	d4
0001FC9A E184                       		asl.l	#8,d4
0001FC9C C1FC 002A                  		muls.w	#$2A,d0
0001FCA0 D084                       		add.l	d4,d0
0001FCA2 3828 0012                  		move.w	obVelY(a0),d4
0001FCA6 48C4                       		ext.l	d4
0001FCA8 E184                       		asl.l	#8,d4
0001FCAA C3FC 002A                  		muls.w	#$2A,d1
0001FCAE D284                       		add.l	d4,d1
0001FCB0 D680                       		add.l	d0,d3
0001FCB2 6100 0000                  		bsr.w	sub_1BCE8
0001FCB6 6700                       		beq.s	loc_1BCB0
0001FCB8 9680                       		sub.l	d0,d3
0001FCBA 7000                       		moveq	#0,d0
0001FCBC 3140 0010                  		move.w	d0,obVelX(a0)
0001FCC0 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001FCC6 D481                       		add.l	d1,d2
0001FCC8 6100 0000                  		bsr.w	sub_1BCE8
0001FCCC 6700                       		beq.s	loc_1BCC6
0001FCCE 9481                       		sub.l	d1,d2
0001FCD0 7200                       		moveq	#0,d1
0001FCD2 3141 0012                  		move.w	d1,obVelY(a0)
0001FCD6 4E75                       		rts	
0001FCD8                            ; ===========================================================================
0001FCD8                            
0001FCD8                            loc_1BCB0:
0001FCD8 D481                       		add.l	d1,d2
0001FCDA 6100 0000                  		bsr.w	sub_1BCE8
0001FCDE 6700                       		beq.s	loc_1BCD4
0001FCE0 9481                       		sub.l	d1,d2
0001FCE2 7200                       		moveq	#0,d1
0001FCE4 3141 0012                  		move.w	d1,obVelY(a0)
0001FCE8 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001FCEE                            
0001FCEE                            loc_1BCC6:
0001FCEE E080                       		asr.l	#8,d0
0001FCF0 E081                       		asr.l	#8,d1
0001FCF2 3140 0010                  		move.w	d0,obVelX(a0)
0001FCF6 3141 0012                  		move.w	d1,obVelY(a0)
0001FCFA 4E75                       		rts	
0001FCFC                            ; ===========================================================================
0001FCFC                            
0001FCFC                            loc_1BCD4:
0001FCFC E080                       		asr.l	#8,d0
0001FCFE E081                       		asr.l	#8,d1
0001FD00 3140 0010                  		move.w	d0,obVelX(a0)
0001FD04 3141 0012                  		move.w	d1,obVelY(a0)
0001FD08 08E8 0001 0022             		bset	#1,obStatus(a0)
0001FD0E 4E75                       		rts	
0001FD10                            ; End of function Obj09_Fall
0001FD10                            
0001FD10                            
0001FD10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD10                            
0001FD10                            
0001FD10                            sub_1BCE8:
0001FD10 43F9 00FF 0000             		lea	($FF0000).l,a1
0001FD16 7800                       		moveq	#0,d4
0001FD18 4842                       		swap	d2
0001FD1A 3802                       		move.w	d2,d4
0001FD1C 4842                       		swap	d2
0001FD1E 0644 0044                  		addi.w	#$44,d4
0001FD22 88FC 0018                  		divu.w	#$18,d4
0001FD26 C8FC 0080                  		mulu.w	#$80,d4
0001FD2A D3C4                       		adda.l	d4,a1
0001FD2C 7800                       		moveq	#0,d4
0001FD2E 4843                       		swap	d3
0001FD30 3803                       		move.w	d3,d4
0001FD32 4843                       		swap	d3
0001FD34 0644 0014                  		addi.w	#$14,d4
0001FD38 88FC 0018                  		divu.w	#$18,d4
0001FD3C D2C4                       		adda.w	d4,a1
0001FD3E 7A00                       		moveq	#0,d5
0001FD40 1819                       		move.b	(a1)+,d4
0001FD42 6100                       		bsr.s	sub_1BD30
0001FD44 1819                       		move.b	(a1)+,d4
0001FD46 6100                       		bsr.s	sub_1BD30
0001FD48 D2FC 007E                  		adda.w	#$7E,a1
0001FD4C 1819                       		move.b	(a1)+,d4
0001FD4E 6100                       		bsr.s	sub_1BD30
0001FD50 1819                       		move.b	(a1)+,d4
0001FD52 6100                       		bsr.s	sub_1BD30
0001FD54 4A05                       		tst.b	d5
0001FD56 4E75                       		rts	
0001FD58                            ; End of function sub_1BCE8
0001FD58                            
0001FD58                            
0001FD58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD58                            
0001FD58                            
0001FD58                            sub_1BD30:
0001FD58 6700                       		beq.s	locret_1BD44
0001FD5A 0C04 0028                  		cmpi.b	#$28,d4
0001FD5E 6700                       		beq.s	locret_1BD44
0001FD60 0C04 003A                  		cmpi.b	#$3A,d4
0001FD64 6500                       		bcs.s	loc_1BD46
0001FD66 0C04 004B                  		cmpi.b	#$4B,d4
0001FD6A 6400                       		bcc.s	loc_1BD46
0001FD6C                            
0001FD6C                            locret_1BD44:
0001FD6C 4E75                       		rts	
0001FD6E                            ; ===========================================================================
0001FD6E                            
0001FD6E                            loc_1BD46:
0001FD6E 1144 0030                  		move.b	d4,$30(a0)
0001FD72 2149 0032                  		move.l	a1,$32(a0)
0001FD76 7AFF                       		moveq	#-1,d5
0001FD78 4E75                       		rts	
0001FD7A                            ; End of function sub_1BD30
0001FD7A                            
0001FD7A                            
0001FD7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD7A                            
0001FD7A                            
0001FD7A                            Obj09_ChkItems:
0001FD7A 43F9 00FF 0000             		lea	($FF0000).l,a1
0001FD80 7800                       		moveq	#0,d4
0001FD82 3828 000C                  		move.w	obY(a0),d4
0001FD86 0644 0050                  		addi.w	#$50,d4
0001FD8A 88FC 0018                  		divu.w	#$18,d4
0001FD8E C8FC 0080                  		mulu.w	#$80,d4
0001FD92 D3C4                       		adda.l	d4,a1
0001FD94 7800                       		moveq	#0,d4
0001FD96 3828 0008                  		move.w	obX(a0),d4
0001FD9A 0644 0020                  		addi.w	#$20,d4
0001FD9E 88FC 0018                  		divu.w	#$18,d4
0001FDA2 D2C4                       		adda.w	d4,a1
0001FDA4 1811                       		move.b	(a1),d4
0001FDA6 6600                       		bne.s	Obj09_ChkCont
0001FDA8 4A28 003A                  		tst.b	$3A(a0)
0001FDAC 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001FDB0 7800                       		moveq	#0,d4
0001FDB2 4E75                       		rts	
0001FDB4                            ; ===========================================================================
0001FDB4                            
0001FDB4                            Obj09_ChkCont:
0001FDB4 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001FDB8 6600                       		bne.s	Obj09_Chk1Up
0001FDBA 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001FDBE 6600                       		bne.s	Obj09_GetCont
0001FDC0 14BC 0001                  		move.b	#1,(a2)
0001FDC4 2549 0004                  		move.l	a1,4(a2)
0001FDC8                            
0001FDC8                            Obj09_GetCont:
0001FDC8 4EB9 0000 B93A             		jsr	(CollectRing).l
0001FDCE 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; check if you have 50 rings
0001FDD4 6500                       		bcs.s	Obj09_NoCont
0001FDD6 08F8 0000 FE1B             		bset	#0,(v_lifecount).w
0001FDDC 6600                       		bne.s	Obj09_NoCont
0001FDDE 5238 FE18                  		addq.b	#1,(v_continues).w ; add 1 to number of continues
0001FDEC                            
0001FDEC                            Obj09_NoCont:
0001FDEC 7800                       		moveq	#0,d4
0001FDEE 4E75                       		rts	
0001FDF0                            ; ===========================================================================
0001FDF0                            
0001FDF0                            Obj09_Chk1Up:
0001FDF0 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001FDF4 6600                       		bne.s	Obj09_ChkEmer
0001FDF6 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001FDFA 6600                       		bne.s	Obj09_Get1Up
0001FDFC 14BC 0003                  		move.b	#3,(a2)
0001FE00 2549 0004                  		move.l	a1,4(a2)
0001FE04                            
0001FE04                            Obj09_Get1Up:
0001FE04 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to number of lives
0001FE08 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0001FE16 7800                       		moveq	#0,d4
0001FE18 4E75                       		rts	
0001FE1A                            ; ===========================================================================
0001FE1A                            
0001FE1A                            Obj09_ChkEmer:
0001FE1A 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001FE1E 6500                       		bcs.s	Obj09_ChkGhost
0001FE20 0C04 0040                  		cmpi.b	#$40,d4
0001FE24 6200                       		bhi.s	Obj09_ChkGhost
0001FE26 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001FE2A 6600                       		bne.s	Obj09_GetEmer
0001FE2C 14BC 0005                  		move.b	#5,(a2)
0001FE30 2549 0004                  		move.l	a1,4(a2)
0001FE34                            
0001FE34                            Obj09_GetEmer:
0001FE34 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0001FE3A 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001FE3C 0404 003B                  		subi.b	#$3B,d4
0001FE40 7000                       		moveq	#0,d0
0001FE42 1038 FE57                  		move.b	(v_emeralds).w,d0
0001FE46 45F8 FE58                  		lea	(v_emldlist).w,a2
0001FE4A 1584 0000                  		move.b	d4,(a2,d0.w)
0001FE4E 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001FE52                            
0001FE52                            Obj09_NoEmer:
0001FE5C 7800                       		moveq	#0,d4
0001FE5E 4E75                       		rts	
0001FE60                            ; ===========================================================================
0001FE60                            
0001FE60                            Obj09_ChkGhost:
0001FE60 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001FE64 6600                       		bne.s	Obj09_ChkGhostTag
0001FE66 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001FE6C                            
0001FE6C                            Obj09_ChkGhostTag:
0001FE6C 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001FE70 6600                       		bne.s	Obj09_NoGhost
0001FE72 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001FE78 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001FE7A 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001FE80                            
0001FE80                            Obj09_NoGhost:
0001FE80 78FF                       		moveq	#-1,d4
0001FE82 4E75                       		rts	
0001FE84                            ; ===========================================================================
0001FE84                            
0001FE84                            Obj09_MakeGhostSolid:
0001FE84 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001FE8A 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001FE8C 43F9 00FF 1020             		lea	($FF1020).l,a1
0001FE92 723F                       		moveq	#$3F,d1
0001FE94                            
0001FE94                            Obj09_GhostLoop2:
0001FE94 743F                       		moveq	#$3F,d2
0001FE96                            
0001FE96                            Obj09_GhostLoop:
0001FE96 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001FE9A 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001FE9C 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001FEA0                            
0001FEA0                            Obj09_NoReplace:
0001FEA0 5249                       		addq.w	#1,a1
0001FEA2 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001FEA6 43E9 0040                  		lea	$40(a1),a1
0001FEAA 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001FEAE                            
0001FEAE                            Obj09_GhostNotSolid:
0001FEAE 4228 003A                  		clr.b	$3A(a0)
0001FEB2 7800                       		moveq	#0,d4
0001FEB4 4E75                       		rts	
0001FEB6                            ; End of function Obj09_ChkItems
0001FEB6                            
0001FEB6                            
0001FEB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FEB6                            
0001FEB6                            
0001FEB6                            Obj09_ChkItems2:
0001FEB6 1028 0030                  		move.b	$30(a0),d0
0001FEBA 6600                       		bne.s	Obj09_ChkBumper
0001FEBC 5328 0036                  		subq.b	#1,$36(a0)
0001FEC0 6A00                       		bpl.s	loc_1BEA0
0001FEC2 117C 0000 0036             		move.b	#0,$36(a0)
0001FEC8                            
0001FEC8                            loc_1BEA0:
0001FEC8 5328 0037                  		subq.b	#1,$37(a0)
0001FECC 6A00                       		bpl.s	locret_1BEAC
0001FECE 117C 0000 0037             		move.b	#0,$37(a0)
0001FED4                            
0001FED4                            locret_1BEAC:
0001FED4 4E75                       		rts	
0001FED6                            ; ===========================================================================
0001FED6                            
0001FED6                            Obj09_ChkBumper:
0001FED6 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001FEDA 6600                       		bne.s	Obj09_GOAL
0001FEDC 2228 0032                  		move.l	$32(a0),d1
0001FEE0 0481 00FF 0001             		subi.l	#$FF0001,d1
0001FEE6 3401                       		move.w	d1,d2
0001FEE8 0241 007F                  		andi.w	#$7F,d1
0001FEEC C2FC 0018                  		mulu.w	#$18,d1
0001FEF0 0441 0014                  		subi.w	#$14,d1
0001FEF4 EE4A                       		lsr.w	#7,d2
0001FEF6 0242 007F                  		andi.w	#$7F,d2
0001FEFA C4FC 0018                  		mulu.w	#$18,d2
0001FEFE 0442 0044                  		subi.w	#$44,d2
0001FF02 9268 0008                  		sub.w	obX(a0),d1
0001FF06 9468 000C                  		sub.w	obY(a0),d2
0001FF0A 4EB9 0000 3F5C             		jsr	(CalcAngle).l
0001FF10 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001FF16 C3FC F900                  		muls.w	#-$700,d1
0001FF1A E081                       		asr.l	#8,d1
0001FF1C 3141 0010                  		move.w	d1,obVelX(a0)
0001FF20 C1FC F900                  		muls.w	#-$700,d0
0001FF24 E080                       		asr.l	#8,d0
0001FF26 3140 0012                  		move.w	d0,obVelY(a0)
0001FF2A 08E8 0001 0022             		bset	#1,obStatus(a0)
0001FF30 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001FF34 6600                       		bne.s	Obj09_BumpSnd
0001FF36 14BC 0002                  		move.b	#2,(a2)
0001FF3A 2028 0032                  		move.l	$32(a0),d0
0001FF3E 5380                       		subq.l	#1,d0
0001FF40 2540 0004                  		move.l	d0,4(a2)
0001FF44                            
0001FF44                            Obj09_BumpSnd:
0001FF4E                            ; ===========================================================================
0001FF4E                            
0001FF4E                            Obj09_GOAL:
0001FF4E 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001FF52 6600                       		bne.s	Obj09_UPblock
0001FF54 5428 0024                  		addq.b	#2,obRoutine(a0) ; run routine "Obj09_ExitStage"
0001FF62 4E75                       		rts	
0001FF64                            ; ===========================================================================
0001FF64                            
0001FF64                            Obj09_UPblock:
0001FF64 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001FF68 6600                       		bne.s	Obj09_DOWNblock
0001FF6A 4A28 0036                  		tst.b	$36(a0)
0001FF6E 6600 0000                  		bne.w	Obj09_NoGlass
0001FF72 117C 001E 0036             		move.b	#$1E,$36(a0)
0001FF78 0838 0006 F783             		btst	#6,($FFFFF783).w
0001FF7E 6700                       		beq.s	Obj09_UPsnd
0001FF80 E1F8 F782                  		asl	(v_ssrotate).w	; increase stage rotation speed
0001FF84 2268 0032                  		movea.l	$32(a0),a1
0001FF88 5389                       		subq.l	#1,a1
0001FF8A 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001FF8E                            
0001FF8E                            Obj09_UPsnd:
0001FF98                            ; ===========================================================================
0001FF98                            
0001FF98                            Obj09_DOWNblock:
0001FF98 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001FF9C 6600                       		bne.s	Obj09_Rblock
0001FF9E 4A28 0036                  		tst.b	$36(a0)
0001FFA2 6600 0000                  		bne.w	Obj09_NoGlass
0001FFA6 117C 001E 0036             		move.b	#$1E,$36(a0)
0001FFAC 0838 0006 F783             		btst	#6,(v_ssrotate+1).w
0001FFB2 6600                       		bne.s	Obj09_DOWNsnd
0001FFB4 E0F8 F782                  		asr	(v_ssrotate).w	; reduce stage rotation speed
0001FFB8 2268 0032                  		movea.l	$32(a0),a1
0001FFBC 5389                       		subq.l	#1,a1
0001FFBE 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001FFC2                            
0001FFC2                            Obj09_DOWNsnd:
0001FFCC                            ; ===========================================================================
0001FFCC                            
0001FFCC                            Obj09_Rblock:
0001FFCC 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001FFD0 6600                       		bne.s	Obj09_ChkGlass
0001FFD2 4A28 0037                  		tst.b	$37(a0)
0001FFD6 6600 0000                  		bne.w	Obj09_NoGlass
0001FFDA 117C 001E 0037             		move.b	#$1E,$37(a0)
0001FFE0 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001FFE4 6600                       		bne.s	Obj09_RevStage
0001FFE6 14BC 0004                  		move.b	#4,(a2)
0001FFEA 2028 0032                  		move.l	$32(a0),d0
0001FFEE 5380                       		subq.l	#1,d0
0001FFF0 2540 0004                  		move.l	d0,4(a2)
0001FFF4                            
0001FFF4                            Obj09_RevStage:
0001FFF4 4478 F782                  		neg.w	(v_ssrotate).w	; reverse stage rotation
00020002                            ; ===========================================================================
00020002                            
00020002                            Obj09_ChkGlass:
00020002 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
00020006 6700                       		beq.s	Obj09_Glass	; if yes, branch
00020008 0C00 002E                  		cmpi.b	#$2E,d0
0002000C 6700                       		beq.s	Obj09_Glass
0002000E 0C00 002F                  		cmpi.b	#$2F,d0
00020012 6700                       		beq.s	Obj09_Glass
00020014 0C00 0030                  		cmpi.b	#$30,d0
00020018 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0002001A                            
0002001A                            Obj09_Glass:
0002001A 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0002001E 6600                       		bne.s	Obj09_GlassSnd
00020020 14BC 0006                  		move.b	#6,(a2)
00020024 2268 0032                  		movea.l	$32(a0),a1
00020028 5389                       		subq.l	#1,a1
0002002A 2549 0004                  		move.l	a1,4(a2)
0002002E 1011                       		move.b	(a1),d0
00020030 5200                       		addq.b	#1,d0		; change glass type when touched
00020032 0C00 0030                  		cmpi.b	#$30,d0
00020036 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
00020038 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0002003A                            
0002003A                            Obj09_GlassUpdate:
0002003A 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0002003E                            
0002003E                            Obj09_GlassSnd:
00020048                            ; ===========================================================================
00020048                            
00020048                            Obj09_NoGlass:
00020048 4E75                       		rts	
0002004A                            ; End of function Obj09_ChkItems2
0002004A                            ; End of function Obj09_ChkItems2
0002004A                            
0002004A                            		include	"_incObj\10.asm"
0002004A                            ; ---------------------------------------------------------------------------
0002004A                            ; Object 10 - After-Image
0002004A                            ; ---------------------------------------------------------------------------
0002004A                            
0002004A                            Obj10:
0002004A 0C38 0018 D01C                   cmpi.b   #id_Death,(v_player+obAnim).w   ; is Sonic using the death animation?
00020050 6700 0000                        beq.w   AfterimageEnd      ; if yes, delete the After Image
00020054                            
00020054 7000                             moveq   #0,d0
00020056 1028 0024                        move.b   obRoutine(a0),d0
0002005A 323B 0000                        move.w   Afterimage_Index(pc,d0.w),d1
0002005E 4EFB 1000                        jmp	Afterimage_Index(pc,d1.w)
00020062                            
00020062                            ; ===========================================================================
00020062                            ;           Change the length by moving around the "No Afterimage" and "After Image Start/ After Image L Priority" sections.
00020062                            ; ===========================================================================
00020062                            Afterimage_Index:
00020062 0000                             dc.w NoAfterImage-Afterimage_Index
00020064 0000                             dc.w NoAfterImage-Afterimage_Index
00020066 0000                             dc.w NoAfterImage-Afterimage_Index
00020068 0000                             dc.w AfterimageStart-Afterimage_Index
0002006A 0000                             dc.w NoAfterImage-Afterimage_Index
0002006C 0000                             dc.w NoAfterImage-Afterimage_Index
0002006E 0000                             dc.w NoAfterImage-Afterimage_Index
00020070 0000                             dc.w AfterimageLPrio-Afterimage_Index
00020072 0000                             dc.w AfterimageEnd-Afterimage_Index
00020074                            ; ===========================================================================
00020074                            NoAfterImage:
00020074 5428 0024                        addq.b   #2,obRoutine(a0)         ; go to next item of index, at the next frame
00020078 4E75                             rts
0002007A                            ; ===========================================================================
0002007A                            AfterimageStart:
0002007A 117C 0002 0018                   move.b   #2,obPriority(a0)         ; set sprite priority to 2
00020080 6000                             bra.s   Afterimage_Show
00020082                            ; ===========================================================================
00020082                            AfterimageLPrio:
00020082 5228 0018                        addq.b   #1,obPriority(a0)         ; set a lower sprite priority
00020086                            ; ===========================================================================
00020086                            Afterimage_Show:
00020086 5428 0024                        addq.b   #2,obRoutine(a0)            ; go to next item of index
0002008A 4EB9 0000 3CA4                   jsr   (RandomNumber).l         ; get a random number
00020090 0200 0003                        andi.b   #3,d0               ; get a number equal or lower than 2 (0 until 2)
00020094 6600                             bne.s   AfterimageException   ; if is not 0, branch
00020096 4E75                             rts                        ; if it is 0, then don't show the after-image
00020098                            
00020098                            AfterimageException:
00020098 3178 D002 0002                   move.w   (v_player+obGfx).w,obGfx(a0)      ; copy Sonic map to after-image map
0002009E 1178 D001 0001                    move.b   (v_player+obRender).w,obRender(a0)      ; copy Sonic frame infos (horizontal/vertical mirror, coordinate system......)
000200A4 2178 D01A 001A                    move.l   (v_player+obFrame).w,obFrame(a0)   ; copy the Sonic animation frame
000200AA 4EF9 0000 F7CA                   jmp   DisplaySprite
000200B0                            ; ===========================================================================
000200B0                            AfterimageEnd:
000200B0 4EF9 0000 F80A                   jmp   DeleteObject
000200B0 4EF9 0000 F80A                   jmp   DeleteObject
000200B6                            
000200B6                            		include	"_inc\AnimateLevelGfx.asm"
000200B6                            ; ---------------------------------------------------------------------------
000200B6                            ; Subroutine to	animate	level graphics
000200B6                            ; ---------------------------------------------------------------------------
000200B6                            
000200B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000200B6                            
000200B6                            
000200B6                            AnimateLevelGfx:
000200B6 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
000200BA 6600                       		bne.s	@ispaused	; if yes, branch
000200BC 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000200C2 6100 0000                  		bsr.w	AniArt_GiantRing
000200C6 7000                       		moveq	#0,d0
000200C8 1038 FE10                  		move.b	(v_zone).w,d0
000200CC D040                       		add.w	d0,d0
000200CE 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
000200D2 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
000200D6                            
000200D6                            	@ispaused:
000200D6 4E75                       		rts	
000200D8                            
000200D8                            ; ===========================================================================
000200D8 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
000200DC 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
000200E0 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
000200E4 0000                       		dc.w AniArt_Ending-AniArt_Index
000200E6                            ; ===========================================================================
000200E6                            ; ---------------------------------------------------------------------------
000200E6                            ; Animated pattern routine - Green Hill
000200E6                            ; ---------------------------------------------------------------------------
000200E6                            
000200E6                            AniArt_GHZ:
000200E6                            
000200E6                            AniArt_GHZ_Waterfall:
000200E6                            
000200E6 =00000008                  @size:		equ 8	; number of tiles per frame
000200E6                            
000200E6 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
000200EA 6A00                       		bpl.s	AniArt_GHZ_Bigflower ; branch if not 0
000200EC                            
000200EC 11FC 0005 F7B1             		move.b	#5,(v_lani0_time).w ; time to display each frame
000200F2 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
000200F8 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
000200FC 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
00020100 0240 0001                  		andi.w	#1,d0		; there are only 2 frames
00020104 6700                       		beq.s	@isframe0	; branch if frame 0
00020106 43E9 0100                  		lea	@size*$20(a1),a1 ; use graphics for frame 1
0002010A                            
0002010A                            	@isframe0:
00020114 323C 0007                  		move.w	#@size-1,d1	; number of 8x8	tiles
00020118 6000 0000                  		bra.w	LoadTiles
0002011C                            ; ===========================================================================
0002011C                            
0002011C                            AniArt_GHZ_Bigflower:
0002011C                            
0002011C =00000010                  @size:		equ 16	; number of tiles per frame
0002011C                            
0002011C 5338 F7B3                  		subq.b	#1,(v_lani1_time).w
00020120 6A00                       		bpl.s	AniArt_GHZ_Smallflower
00020122                            
00020122 11FC 000F F7B3             		move.b	#$F,(v_lani1_time).w
00020128 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0002012E 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
00020132 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w
00020136 0240 0001                  		andi.w	#1,d0
0002013A 6700                       		beq.s	@isframe0
0002013C 43E9 0200                  		lea	@size*$20(a1),a1
00020140                            
00020140                            	@isframe0:
0002014A 323C 000F                  		move.w	#@size-1,d1
0002014E 6000 0000                  		bra.w	LoadTiles
00020152                            ; ===========================================================================
00020152                            
00020152                            AniArt_GHZ_Smallflower:
00020152                            
00020152 =0000000C                  @size:		equ 12	; number of tiles per frame
00020152                            
00020152 5338 F7B5                  		subq.b	#1,(v_lani2_time).w
00020156 6A00                       		bpl.s	@end
00020158                            
00020158 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0002015E 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
00020162 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
00020166 0240 0003                  		andi.w	#3,d0		; there are 4 frames
0002016A 103B 0000                  		move.b	@sequence(pc,d0.w),d0
0002016E 0800 0000                  		btst	#0,d0		; is frame 0 or 2? (actual frame, not frame counter)
00020172 6600                       		bne.s	@isframe1	; if not, branch
00020174 11FC 007F F7B5             		move.b	#$7F,(v_lani2_time).w ; set longer duration for frames 0 and 2
0002017A                            
0002017A                            	@isframe1:
0002017A EF48                       		lsl.w	#7,d0		; multiply frame num by $80
0002017C 3200                       		move.w	d0,d1
0002017E D040                       		add.w	d0,d0
00020180 D041                       		add.w	d1,d0		; multiply that by 3 (i.e. frame num times 12 * $20)
0002018C 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
00020192 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
00020196 323C 000B                  		move.w	#@size-1,d1
0002019A 6100 0000                  		bsr.w	LoadTiles
0002019E                            
0002019E                            @end:
0002019E 4E75                       		rts	
000201A0                            
000201A0 0001 0201                  @sequence:	dc.b 0,	1, 2, 1
000201A4                            ; ===========================================================================
000201A4                            ; ---------------------------------------------------------------------------
000201A4                            ; Animated pattern routine - Marble
000201A4                            ; ---------------------------------------------------------------------------
000201A4                            
000201A4                            AniArt_MZ:
000201A4                            
000201A4                            AniArt_MZ_Lava:
000201A4                            
000201A4 =00000008                  @size:		equ 8	; number of tiles per frame
000201A4                            
000201A4 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
000201A8 6A00                       		bpl.s	AniArt_MZ_Magma	; branch if not 0
000201AA                            
000201AA 11FC 0011 F7B1             		move.b	#$11,(v_lani0_time).w ; time to display each frame
000201B0 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
000201B6 7000                       		moveq	#0,d0
000201B8 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
000201BC 5200                       		addq.b	#1,d0		; increment frame counter
000201BE 0C00 0003                  		cmpi.b	#3,d0		; there are 3 frames
000201C2 6600                       		bne.s	@frame01or2	; branch if frame 0, 1 or 2
000201C4 7000                       		moveq	#0,d0
000201C6                            
000201C6                            	@frame01or2:
000201C6 11C0 F7B0                  		move.b	d0,(v_lani0_frame).w
000201CA C0FC 0100                  		mulu.w	#@size*$20,d0
000201CE D2C0                       		adda.w	d0,a1		; jump to appropriate tile
000201DA 323C 0007                  		move.w	#@size-1,d1
000201DE 6100 0000                  		bsr.w	LoadTiles
000201E2                            
000201E2                            AniArt_MZ_Magma:
000201E2 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
000201E6 6A00                       		bpl.s	AniArt_MZ_Torch	; branch if not 0
000201E8                            		
000201E8 11FC 0001 F7B3             		move.b	#1,(v_lani1_time).w ; time between each gfx change
000201EE 7000                       		moveq	#0,d0
000201F0 1038 F7B0                  		move.b	(v_lani0_frame).w,d0 ; get surface lava frame number
000201F4 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load magma gfx
000201FA EE58                       		ror.w	#7,d0		; multiply frame num by $200
000201FC D8C0                       		adda.w	d0,a4		; jump to appropriate tile
00020208 7600                       		moveq	#0,d3
0002020A 1638 F7B2                  		move.b	(v_lani1_frame).w,d3
0002020E 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter (unused)
00020212 1638 FE68                  		move.b	(v_oscillate+$A).w,d3 ; get oscillating value
00020216 343C 0003                  		move.w	#3,d2
0002021A                            
0002021A                            	@loop:
0002021A 3003                       		move.w	d3,d0
0002021C D040                       		add.w	d0,d0
0002021E 0240 001E                  		andi.w	#$1E,d0
00020222 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
00020228 3033 0000                  		move.w	(a3,d0.w),d0
0002022C 47F3 0000                  		lea	(a3,d0.w),a3
00020230 224C                       		movea.l	a4,a1
00020232 323C 001F                  		move.w	#$1F,d1
00020236 4E93                       		jsr	(a3)
00020238 5843                       		addq.w	#4,d3
0002023A 51CA FFDE                  		dbf	d2,@loop
0002023E 4E75                       		rts	
00020240                            ; ===========================================================================
00020240                            
00020240                            AniArt_MZ_Torch:
00020240                            
00020240 =00000006                  @size:		equ 6	; number of tiles per frame
00020240                            
00020240 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
00020244 6A00 0000                  		bpl.w	@end		; branch if not 0
00020248                            		
00020248 11FC 0004 F7B5             		move.b	#4,(v_lani2_time).w ; time to display each frame
0002024E 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
00020254 7000                       		moveq	#0,d0
00020256 1038 F7B6                  		move.b	(v_lani3_frame).w,d0
0002025A 5238 F7B6                  		addq.b	#1,(v_lani3_frame).w ; increment frame counter
0002025E 0238 0003 F7B6             		andi.b	#3,(v_lani3_frame).w ; there are 3 frames
00020264 C0FC 00C0                  		mulu.w	#@size*$20,d0
00020268 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
00020274 323C 0005                  		move.w	#@size-1,d1
00020278 6000 0000                  		bra.w	LoadTiles
0002027C                            
0002027C                            @end:
0002027C 4E75                       		rts	
0002027E                            ; ===========================================================================
0002027E                            ; ---------------------------------------------------------------------------
0002027E                            ; Animated pattern routine - Scrap Brain
0002027E                            ; ---------------------------------------------------------------------------
0002027E                            
0002027E                            AniArt_SBZ:
0002027E                            
0002027E =0000000C                  @size:		equ 12	; number of tiles per frame
0002027E                            
0002027E 4A38 F7B4                  		tst.b	(v_lani2_frame).w
00020282 6700                       		beq.s	@smokepuff	; branch if counter hits 0
00020284                            		
00020284 5338 F7B4                  		subq.b	#1,(v_lani2_frame).w ; decrement counter
00020288 6000                       		bra.s	@chk_smokepuff2
0002028A                            ; ===========================================================================
0002028A                            
0002028A                            @smokepuff:
0002028A 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0002028E 6A00                       		bpl.s	@chk_smokepuff2 ; branch if not 0
00020290                            		
00020290 11FC 0007 F7B1             		move.b	#7,(v_lani0_time).w ; time to display each frame
00020296 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
000202A6 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
000202AA 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
000202AE 0240 0007                  		andi.w	#7,d0
000202B2 6700                       		beq.s	@untilnextpuff	; branch if frame 0
000202B4 5340                       		subq.w	#1,d0
000202B6 C0FC 0180                  		mulu.w	#@size*$20,d0
000202BA 43F1 0000                  		lea	(a1,d0.w),a1
000202BE 323C 000B                  		move.w	#@size-1,d1
000202C2 6000 0000                  		bra.w	LoadTiles
000202C6                            ; ===========================================================================
000202C6                            
000202C6                            @untilnextpuff:
000202C6 11FC 00B4 F7B4             		move.b	#180,(v_lani2_frame).w ; time between smoke puffs (3 seconds)
000202CC                            
000202CC                            @clearsky:
000202CC 323C 0005                  		move.w	#(@size/2)-1,d1
000202D0 6100 0000                  		bsr.w	LoadTiles
000202D4 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
000202DA 323C 0005                  		move.w	#(@size/2)-1,d1
000202DE 6000 0000                  		bra.w	LoadTiles	; load blank tiles for no smoke puff
000202E2                            ; ===========================================================================
000202E2                            
000202E2                            @chk_smokepuff2:
000202E2 4A38 F7B5                  		tst.b	(v_lani2_time).w
000202E6 6700                       		beq.s	@smokepuff2	; branch if counter hits 0
000202E8                            		
000202E8 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement counter
000202EC 6000                       		bra.s	@end
000202EE                            ; ===========================================================================
000202EE                            
000202EE                            @smokepuff2:
000202EE 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
000202F2 6A00                       		bpl.s	@end		; branch if not 0
000202F4                            		
000202F4 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w ; time to display each frame
000202FA 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0002030A 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0002030E 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
00020312 0240 0007                  		andi.w	#7,d0
00020316 6700                       		beq.s	@untilnextpuff2	; branch if frame 0
00020318 5340                       		subq.w	#1,d0
0002031A C0FC 0180                  		mulu.w	#@size*$20,d0
0002031E 43F1 0000                  		lea	(a1,d0.w),a1
00020322 323C 000B                  		move.w	#@size-1,d1
00020326 6000 0000                  		bra.w	LoadTiles
0002032A                            ; ===========================================================================
0002032A                            
0002032A                            @untilnextpuff2:
0002032A 11FC 0078 F7B5             		move.b	#120,(v_lani2_time).w ; time between smoke puffs (2 seconds)
00020330 609A                       		bra.s	@clearsky
00020332                            ; ===========================================================================
00020332                            
00020332                            @end:
00020332 4E75                       		rts	
00020334                            ; ===========================================================================
00020334                            ; ---------------------------------------------------------------------------
00020334                            ; Animated pattern routine - ending sequence
00020334                            ; ---------------------------------------------------------------------------
00020334                            
00020334                            AniArt_Ending:
00020334                            
00020334                            AniArt_Ending_BigFlower:
00020334                            
00020334 =00000010                  @size:		equ 16	; number of tiles per frame
00020334                            
00020334 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
00020338 6A00                       		bpl.s	AniArt_Ending_SmallFlower ; branch if not 0
0002033A                            		
0002033A 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w
00020340 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
00020346 45F8 9400                  		lea	($FFFF9400).w,a2 ; load 2nd big flower from RAM
0002034A 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0002034E 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
00020352 0240 0001                  		andi.w	#1,d0		; only 2 frames
00020356 6700                       		beq.s	@isframe0	; branch if frame 0
00020358 43E9 0200                  		lea	@size*$20(a1),a1
0002035C 45EA 0200                  		lea	@size*$20(a2),a2
00020360                            
00020360                            	@isframe0:
0002036A 323C 000F                  		move.w	#@size-1,d1
0002036E 6100 0000                  		bsr.w	LoadTiles
00020372 224A                       		movea.l	a2,a1
0002037E 323C 000F                  		move.w	#@size-1,d1
00020382 6000 0000                  		bra.w	LoadTiles
00020386                            ; ===========================================================================
00020386                            
00020386                            AniArt_Ending_SmallFlower:
00020386                            
00020386 =0000000C                  @size:		equ 12	; number of tiles per frame
00020386                            
00020386 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0002038A 6A00                       		bpl.s	AniArt_Ending_Flower3 ; branch if not 0
0002038C                            		
0002038C 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
00020392 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
00020396 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0002039A 0240 0007                  		andi.w	#7,d0		; max 8 frames
0002039E 103B 0000                  		move.b	@sequence(pc,d0.w),d0 ; get actual frame num from sequence data
000203A2 EF48                       		lsl.w	#7,d0		; multiply by $80
000203A4 3200                       		move.w	d0,d1
000203A6 D040                       		add.w	d0,d0
000203A8 D041                       		add.w	d1,d0		; multiply by 3
000203B4 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
000203BA 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
000203BE 323C 000B                  		move.w	#@size-1,d1
000203C2 6000 0000                  		bra.w	LoadTiles
000203C6                            ; ===========================================================================
000203C6 0000 0001 0202 0201        @sequence:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
000203CE                            ; ===========================================================================
000203CE                            
000203CE                            AniArt_Ending_Flower3:
000203CE                            
000203CE =00000010                  @size:		equ 16	; number of tiles per frame
000203CE                            
000203CE 5338 F7B9                  		subq.b	#1,(v_lani4_time).w ; decrement timer
000203D2 6A00                       		bpl.s	AniArt_Ending_Flower4 ; branch if not 0
000203D4                            		
000203D4 11FC 000E F7B9             		move.b	#$E,(v_lani4_time).w
000203DA 1038 F7B8                  		move.b	(v_lani4_frame).w,d0
000203DE 5238 F7B8                  		addq.b	#1,(v_lani4_frame).w ; increment frame counter
000203E2 0240 0003                  		andi.w	#3,d0		; max 4 frames
000203E6 103B 0000                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
000203EA E148                       		lsl.w	#8,d0		; multiply by $100
000203EC D040                       		add.w	d0,d0		; multiply by 2
000203F8 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
000203FC 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
00020400 323C 000F                  		move.w	#@size-1,d1
00020404 6000 0000                  		bra.w	LoadTiles
00020408                            ; ===========================================================================
00020408 0001 0201                  AniArt_Ending_Flower3_sequence:	dc.b 0,	1, 2, 1
0002040C                            ; ===========================================================================
0002040C                            
0002040C                            AniArt_Ending_Flower4:
0002040C                            
0002040C =00000010                  @size:		equ 16	; number of tiles per frame
0002040C                            
0002040C 5338 F7BB                  		subq.b	#1,(v_lani5_time).w ; decrement timer
00020410 6A00                       		bpl.s	@end		; branch if not 0
00020412                            		
00020412 11FC 000B F7BB             		move.b	#$B,(v_lani5_time).w
00020418 1038 F7BA                  		move.b	(v_lani5_frame).w,d0
0002041C 5238 F7BA                  		addq.b	#1,(v_lani5_frame).w ; increment frame counter
00020420 0240 0003                  		andi.w	#3,d0
00020424 103B 00E2                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
00020428 E148                       		lsl.w	#8,d0		; multiply by $100
0002042A D040                       		add.w	d0,d0		; multiply by 2
00020436 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0002043A 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0002043E 323C 000F                  		move.w	#@size-1,d1
00020442 6000 0000                  		bra.w	LoadTiles
00020446                            ; ===========================================================================
00020446                            
00020446                            @end:
00020446 4E75                       		rts	
00020448                            ; ===========================================================================
00020448                            
00020448                            AniArt_none:
00020448 4E75                       		rts	
0002044A                            
0002044A                            ; ---------------------------------------------------------------------------
0002044A                            ; Subroutine to	transfer graphics to VRAM
0002044A                            
0002044A                            ; input:
0002044A                            ;	a1 = source address
0002044A                            ;	a6 = vdp_data_port ($C00000)
0002044A                            ;	d1 = number of tiles to load (minus one)
0002044A                            ; ---------------------------------------------------------------------------
0002044A                            
0002044A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002044A                            
0002044A                            
0002044A                            LoadTiles:
0002044A 2C99                       		move.l	(a1)+,(a6)
0002044C 2C99                       		move.l	(a1)+,(a6)
0002044E 2C99                       		move.l	(a1)+,(a6)
00020450 2C99                       		move.l	(a1)+,(a6)
00020452 2C99                       		move.l	(a1)+,(a6)
00020454 2C99                       		move.l	(a1)+,(a6)
00020456 2C99                       		move.l	(a1)+,(a6)
00020458 2C99                       		move.l	(a1)+,(a6)
0002045A 51C9 FFEE                  		dbf	d1,LoadTiles
0002045E 4E75                       		rts	
00020460                            ; End of function LoadTiles
00020460                            
00020460                            ; ===========================================================================
00020460                            ; ---------------------------------------------------------------------------
00020460                            ; Animated pattern routine - more Marble Zone
00020460                            ; ---------------------------------------------------------------------------
00020460 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
00020464 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
00020468 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0002046C 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
00020470 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
00020474 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
00020478 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0002047C 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
00020480                            ; ===========================================================================
00020480                            
00020480                            loc_1C3EE:
00020480 2C91                       		move.l	(a1),(a6)
00020482 43E9 0010                  		lea	$10(a1),a1
00020486 51C9 FFF8                  		dbf	d1,loc_1C3EE
0002048A 4E75                       		rts	
0002048C                            ; ===========================================================================
0002048C                            
0002048C                            loc_1C3FA:
0002048C 2029 0002                  		move.l	2(a1),d0
00020490 1029 0001                  		move.b	1(a1),d0
00020494 E098                       		ror.l	#8,d0
00020496 2C80                       		move.l	d0,(a6)
00020498 43E9 0010                  		lea	$10(a1),a1
0002049C 51C9 FFEE                  		dbf	d1,loc_1C3FA
000204A0 4E75                       		rts	
000204A2                            ; ===========================================================================
000204A2                            
000204A2                            loc_1C410:
000204A2 2CA9 0002                  		move.l	2(a1),(a6)
000204A6 43E9 0010                  		lea	$10(a1),a1
000204AA 51C9 FFF6                  		dbf	d1,loc_1C410
000204AE 4E75                       		rts	
000204B0                            ; ===========================================================================
000204B0                            
000204B0                            loc_1C41E:
000204B0 2029 0004                  		move.l	4(a1),d0
000204B4 1029 0003                  		move.b	3(a1),d0
000204B8 E098                       		ror.l	#8,d0
000204BA 2C80                       		move.l	d0,(a6)
000204BC 43E9 0010                  		lea	$10(a1),a1
000204C0 51C9 FFEE                  		dbf	d1,loc_1C41E
000204C4 4E75                       		rts	
000204C6                            ; ===========================================================================
000204C6                            
000204C6                            loc_1C434:
000204C6 2CA9 0004                  		move.l	4(a1),(a6)
000204CA 43E9 0010                  		lea	$10(a1),a1
000204CE 51C9 FFF6                  		dbf	d1,loc_1C434
000204D2 4E75                       		rts	
000204D4                            ; ===========================================================================
000204D4                            
000204D4                            loc_1C442:
000204D4 2029 0006                  		move.l	6(a1),d0
000204D8 1029 0005                  		move.b	5(a1),d0
000204DC E098                       		ror.l	#8,d0
000204DE 2C80                       		move.l	d0,(a6)
000204E0 43E9 0010                  		lea	$10(a1),a1
000204E4 51C9 FFEE                  		dbf	d1,loc_1C442
000204E8 4E75                       		rts	
000204EA                            ; ===========================================================================
000204EA                            
000204EA                            loc_1C458:
000204EA 2CA9 0006                  		move.l	6(a1),(a6)
000204EE 43E9 0010                  		lea	$10(a1),a1
000204F2 51C9 FFF6                  		dbf	d1,loc_1C458
000204F6 4E75                       		rts	
000204F8                            ; ===========================================================================
000204F8                            
000204F8                            loc_1C466:
000204F8 2029 0008                  		move.l	8(a1),d0
000204FC 1029 0007                  		move.b	7(a1),d0
00020500 E098                       		ror.l	#8,d0
00020502 2C80                       		move.l	d0,(a6)
00020504 43E9 0010                  		lea	$10(a1),a1
00020508 51C9 FFEE                  		dbf	d1,loc_1C466
0002050C 4E75                       		rts	
0002050E                            ; ===========================================================================
0002050E                            
0002050E                            loc_1C47C:
0002050E 2CA9 0008                  		move.l	8(a1),(a6)
00020512 43E9 0010                  		lea	$10(a1),a1
00020516 51C9 FFF6                  		dbf	d1,loc_1C47C
0002051A 4E75                       		rts	
0002051C                            ; ===========================================================================
0002051C                            
0002051C                            loc_1C48A:
0002051C 2029 000A                  		move.l	$A(a1),d0
00020520 1029 0009                  		move.b	9(a1),d0
00020524 E098                       		ror.l	#8,d0
00020526 2C80                       		move.l	d0,(a6)
00020528 43E9 0010                  		lea	$10(a1),a1
0002052C 51C9 FFEE                  		dbf	d1,loc_1C48A
00020530 4E75                       		rts	
00020532                            ; ===========================================================================
00020532                            
00020532                            loc_1C4A0:
00020532 2CA9 000A                  		move.l	$A(a1),(a6)
00020536 43E9 0010                  		lea	$10(a1),a1
0002053A 51C9 FFF6                  		dbf	d1,loc_1C4A0
0002053E 4E75                       		rts	
00020540                            ; ===========================================================================
00020540                            
00020540                            loc_1C4AE:
00020540 2029 000C                  		move.l	$C(a1),d0
00020544 1029 000B                  		move.b	$B(a1),d0
00020548 E098                       		ror.l	#8,d0
0002054A 2C80                       		move.l	d0,(a6)
0002054C 43E9 0010                  		lea	$10(a1),a1
00020550 51C9 FFEE                  		dbf	d1,loc_1C4AE
00020554 4E75                       		rts	
00020556                            ; ===========================================================================
00020556                            
00020556                            loc_1C4C4:
00020556 2CA9 000C                  		move.l	$C(a1),(a6)
0002055A 43E9 0010                  		lea	$10(a1),a1
0002055E 51C9 FFF6                  		dbf	d1,loc_1C4C4
00020562 4E75                       		rts	
00020564                            ; ===========================================================================
00020564                            
00020564                            loc_1C4D2:
00020564 2029 000C                  		move.l	$C(a1),d0
00020568 E198                       		rol.l	#8,d0
0002056A 1011                       		move.b	0(a1),d0
0002056C 2C80                       		move.l	d0,(a6)
0002056E 43E9 0010                  		lea	$10(a1),a1
00020572 51C9 FFF0                  		dbf	d1,loc_1C4D2
00020576 4E75                       		rts	
00020578                            ; ===========================================================================
00020578                            
00020578                            loc_1C4E8:
00020578 3CA9 000E                  		move.w	$E(a1),(a6)
0002057C 3C91                       		move.w	0(a1),(a6)
0002057E 43E9 0010                  		lea	$10(a1),a1
00020582 51C9 FFF4                  		dbf	d1,loc_1C4E8
00020586 4E75                       		rts	
00020588                            ; ===========================================================================
00020588                            
00020588                            loc_1C4FA:
00020588 2011                       		move.l	0(a1),d0
0002058A 1029 000F                  		move.b	$F(a1),d0
0002058E E098                       		ror.l	#8,d0
00020590 2C80                       		move.l	d0,(a6)
00020592 43E9 0010                  		lea	$10(a1),a1
00020596 51C9 FFF0                  		dbf	d1,loc_1C4FA
0002059A 4E75                       		rts	
0002059C                            
0002059C                            ; ---------------------------------------------------------------------------
0002059C                            ; Animated pattern routine - giant ring
0002059C                            ; ---------------------------------------------------------------------------
0002059C                            
0002059C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002059C                            
0002059C                            
0002059C                            AniArt_GiantRing:
0002059C                            
0002059C =0000000E                  @size:		equ 14
0002059C                            
0002059C 4A78 F7BE                  		tst.w	(v_gfxbigring).w	; Is there any of the art left to load?
000205A0 6600                       		bne.s	@loadTiles		; If so, get to work
000205A2 4E75                       		rts	
000205A4                            ; ===========================================================================
000205A4                            ; loc_1C518:
000205A4                            @loadTiles:
000205A4 0478 01C0 F7BE             		subi.w	#@size*$20,(v_gfxbigring).w	; Count-down the 14 tiles we're going to load now
000205AA 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
000205B0 7000                       		moveq	#0,d0
000205B2 3038 F7BE                  		move.w	(v_gfxbigring).w,d0
000205B6 43F1 0000                  		lea	(a1,d0.w),a1
000205BA                            		; Turn VRAM address into VDP command
000205BA 0640 8000                  		addi.w	#$8000,d0
000205BE E588                       		lsl.l	#2,d0
000205C0 E448                       		lsr.w	#2,d0
000205C2 0040 4000                  		ori.w	#$4000,d0
000205C6 4840                       		swap	d0
000205C8                            		; Send VDP command (write to VRAM at address contained in v_gfxbigring)
000205C8 2D40 0004                  		move.l	d0,4(a6)
000205CC                            
000205CC 323C 000D                  		move.w	#@size-1,d1
000205D0 6000 FE78                  		bra.w	LoadTiles
000205D4                            
000205D4                            ; End of function AniArt_GiantRing
000205D4                            ; End of function AniArt_GiantRing
000205D4                            
000205D4                            		include	"_incObj\21 HUD.asm"
000205D4                            ; ---------------------------------------------------------------------------
000205D4                            ; Object 21 - SCORE, TIME, RINGS
000205D4                            ; ---------------------------------------------------------------------------
000205D4                            
000205D4                            HUD:
000205D4 7000                       		moveq	#0,d0
000205D6 1028 0024                  		move.b	obRoutine(a0),d0
000205DA 323B 0000                  		move.w	HUD_Index(pc,d0.w),d1
000205DE 4EFB 1000                  		jmp	HUD_Index(pc,d1.w)
000205E2                            ; ===========================================================================
000205E2 0000                       HUD_Index:	dc.w HUD_Main-HUD_Index
000205E4 0000                       		dc.w HUD_Flash-HUD_Index
000205E6                            ; ===========================================================================
000205E6                            
000205E6                            HUD_Main:	; Routine 0
000205E6 5428 0024                  		addq.b	#2,obRoutine(a0)
000205EA 317C 0090 0008             		move.w	#$90,obX(a0)
000205F0 317C 0108 000A             		move.w	#$108,obScreenY(a0)
000205F6 217C 0000 0000 0004        		move.l	#Map_HUD,obMap(a0)
000205FE 317C 06CA 0002             		move.w	#$6CA,obGfx(a0)
00020604 117C 0000 0001             		move.b	#0,obRender(a0)
0002060A 317C 0000 0018             		move.w	#0,obPriority(a0)
00020610                            
00020610                            HUD_Flash:	; Routine 2
00020610 7000                       		moveq	#0,d0
00020612 0838 0003 FE05             		btst	#3,(v_framebyte).w
00020618 6600                       		bne.s	@display
0002061A 4A78 FE20                  		tst.w	(v_rings).w	; do you have any rings?
0002061E 6600                       		bne.s	@norings	; if so, branch
00020620 5240                       		addq.w	#1,d0		; make ring counter flash red
00020622                            ; ===========================================================================
00020622                            
00020622                            @norings:
00020622 0C38 0009 FE23             		cmpi.b	#9,(v_timemin).w ; have	9 minutes elapsed?
00020628 6600                       		bne.s	@display	; if not, branch
0002062A 5440                       		addq.w	#2,d0		; make time counter flash red
0002062C                            
0002062C                            	@display:
0002062C 1140 001A                  		move.b	d0,obFrame(a0)
00020630 4EF9 0000 F7CA             		jmp	DisplaySprite
00020630 4EF9 0000 F7CA             		jmp	DisplaySprite
00020636                            Map_HUD:	include	"_maps\HUD.asm"
00020636                            ; ---------------------------------------------------------------------------
00020636                            ; Sprite mappings - SCORE, TIME, RINGS
00020636                            ; ---------------------------------------------------------------------------
00020636                            Map_HUD_internal:
00020636 0000                       		dc.w @allyellow-Map_HUD_internal
00020638 0000                       		dc.w @ringred-Map_HUD_internal
0002063A 0000                       		dc.w @timered-Map_HUD_internal
0002063C 0000                       		dc.w @allred-Map_HUD_internal
0002063E 0A                         @allyellow:	dc.b $A
0002063F 800D 8000 00               		dc.b $80, $D, $80, 0, 0
00020644 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
00020649 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0002064E 900D 8010 00               		dc.b $90, $D, $80, $10,	0
00020653 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
00020658 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0002065D A001 8000 20               		dc.b $A0, 1, $80, 0, $20
00020662 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
00020667 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0002066C 400D 810E 10               		dc.b $40, $D, $81, $E, $10
00020671 00                         		dc.b 0
00020672 0A                         @ringred:	dc.b $A
00020673 800D 8000 00               		dc.b $80, $D, $80, 0, 0
00020678 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0002067D 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
00020682 900D 8010 00               		dc.b $90, $D, $80, $10,	0
00020687 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0002068C A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
00020691 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
00020696 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0002069B 4005 810A 00               		dc.b $40, 5, $81, $A, 0
000206A0 400D 810E 10               		dc.b $40, $D, $81, $E, $10
000206A5 00                         		dc.b 0
000206A6 0A                         @timered:	dc.b $A
000206A7 800D 8000 00               		dc.b $80, $D, $80, 0, 0
000206AC 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
000206B1 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
000206B6 900D A010 00               		dc.b $90, $D, $A0, $10,	0
000206BB 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
000206C0 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
000206C5 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
000206CA A009 8030 30               		dc.b $A0, 9, $80, $30, $30
000206CF 4005 810A 00               		dc.b $40, 5, $81, $A, 0
000206D4 400D 810E 10               		dc.b $40, $D, $81, $E, $10
000206D9 00                         		dc.b 0
000206DA 0A                         @allred:	dc.b $A
000206DB 800D 8000 00               		dc.b $80, $D, $80, 0, 0
000206E0 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
000206E5 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
000206EA 900D A010 00               		dc.b $90, $D, $A0, $10,	0
000206EF 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
000206F4 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
000206F9 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
000206FE A009 8030 30               		dc.b $A0, 9, $80, $30, $30
00020703 4005 810A 00               		dc.b $40, 5, $81, $A, 0
00020708 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0002070E 00                         		even
0002070E 00                         		even
0002070E                            
0002070E                            ; ---------------------------------------------------------------------------
0002070E                            ; Add points subroutine
0002070E                            ; ---------------------------------------------------------------------------
0002070E                            
0002070E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002070E                            
0002070E                            
0002070E                            AddPoints:
0002070E 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; set score counter to update
00020714                            
00020714                            
00020714 47F8 FE26                  			lea     (v_score).w,a3
00020718 D193                       			add.l   d0,(a3)
0002071A 223C 000F 423F             			move.l  #999999,d1
00020720 B293                       			cmp.l   (a3),d1 ; is score below 999999?
00020722 6200                       			bhi.s   @belowmax ; if yes, branch
00020724 2681                       			move.l  d1,(a3) ; reset score to 999999
00020726                            		@belowmax:
00020726 2013                       			move.l  (a3),d0
00020728 B0B8 FFC0                  			cmp.l   (v_scorelife).w,d0 ; has Sonic got 50000+ points?
0002072C 6500                       			blo.s   @noextralife ; if not, branch
0002072E                            
0002072E 06B8 0000 1388 FFC0        			addi.l  #5000,(v_scorelife).w ; increase requirement by 50000
00020736 4A38 FFF8                  			tst.b   (v_megadrive).w
0002073A 6B00                       			bmi.s   @noextralife ; branch if Mega Drive is Japanese
0002073C 5238 FE12                  			addq.b  #1,(v_lives).w ; give extra life
00020740 5238 FE1C                  			addq.b  #1,(f_lifecount).w
0002074E                            
0002074E                            @locret_1C6B6:
0002074E                            @noextralife:
0002074E 4E75                       		rts	
00020750                            ; End of function AddPoints
00020750                            
00020750                            		include	"_inc\HUD_Update.asm"
00020750                            ; ---------------------------------------------------------------------------
00020750                            ; Subroutine to	update the HUD
00020750                            ; ---------------------------------------------------------------------------
00020750                            
00020750                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020750                            
00020750                            hudVRAM:	macro loc
00020750                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),d0
00020750                            		endm
00020750                            
00020750                            
00020750                            HUD_Update:
00020750 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	on?
00020754 6600 0000                  		bne.w	HudDebug	; if yes, branch
00020758 4A38 FE1F                  		tst.b	(f_scorecount).w ; does the score need updating?
0002075C 6700                       		beq.s	@chkrings	; if not, branch
0002075E                            
0002075E 4238 FE1F                  		clr.b	(f_scorecount).w
00020762 203C 5C80 0003             		hudVRAM	$DC80		; set VRAM address
00020768 2238 FE26                  		move.l	(v_score).w,d1	; load score
0002076C 6100 0000                  		bsr.w	Hud_Score
00020770                            
00020770                            	@chkrings:
00020770 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
00020774 6700                       		beq.s	@chktime	; if not, branch
00020776 6A00                       		bpl.s	@notzero
00020778 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0002077C                            
0002077C                            	@notzero:
0002077C 4238 FE1D                  		clr.b	(f_ringcount).w
00020780 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
00020786 7200                       		moveq	#0,d1
00020788 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0002078C 6100 0000                  		bsr.w	Hud_Rings
00020790                            
00020790                            	@chktime:
00020790 4A38 FE1E                  		tst.b	(f_timecount).w	; does the time	need updating?
00020794 6700                       		beq.s	@chklives	; if not, branch
00020796 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
0002079A 6600                       		bne.s	@chklives	; if yes, branch
0002079C 43F8 FE22                  		lea	(v_time).w,a1
000207A0 0C99 0009 3B3B             		cmpi.l	#(9*$10000)+(59*$100)+59,(a1)+ ; is the time 9:59:59?
000207A6 6700                       		beq.s	TimeOver	; if yes, branch
000207A8                            
000207A8 5221                       		addq.b	#1,-(a1)	; increment 1/60s counter
000207AA 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
000207AE 6500                       		bcs.s	@chklives
000207B0 12BC 0000                  		move.b	#0,(a1)
000207B4 5221                       		addq.b	#1,-(a1)	; increment second counter
000207B6 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
000207BA 6500                       		bcs.s	@updatetime
000207BC 12BC 0000                  		move.b	#0,(a1)
000207C0 5221                       		addq.b	#1,-(a1)	; increment minute counter
000207C2 0C11 0009                  		cmpi.b	#9,(a1)		; check if passed 9
000207C6 6500                       		bcs.s	@updatetime
000207C8 12BC 0009                  		move.b	#9,(a1)		; keep as 9
000207CC                            
000207CC                            	@updatetime:
000207CC 203C 5E40 0003             		hudVRAM	$DE40
000207D2 7200                       		moveq	#0,d1
000207D4 1238 FE23                  		move.b	(v_timemin).w,d1 ; load	minutes
000207D8 6100 0000                  		bsr.w	Hud_Mins
000207DC 203C 5EC0 0003             		hudVRAM	$DEC0
000207E2 7200                       		moveq	#0,d1
000207E4 1238 FE24                  		move.b	(v_timesec).w,d1 ; load	seconds
000207E8 6100 0000                  		bsr.w	Hud_Secs
000207EC                            
000207EC                            	@chklives:
000207EC 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
000207F0 6700                       		beq.s	@chkbonus	; if not, branch
000207F2 4238 FE1C                  		clr.b	(f_lifecount).w
000207F6 6100 0000                  		bsr.w	Hud_Lives
000207FA                            
000207FA                            	@chkbonus:
000207FA 4A38 F7D6                  		tst.b	(f_endactbonus).w ; do time/ring bonus counters need updating?
000207FE 6700                       		beq.s	@finish		; if not, branch
00020800 4238 F7D6                  		clr.b	(f_endactbonus).w
0002080E 7200                       		moveq	#0,d1
00020810 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
00020814 6100 0000                  		bsr.w	Hud_TimeRingBonus
00020818 7200                       		moveq	#0,d1
0002081A 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0002081E 6100 0000                  		bsr.w	Hud_TimeRingBonus
00020822                            
00020822                            	@finish:
00020822 4E75                       		rts	
00020824                            ; ===========================================================================
00020824                            
00020824                            TimeOver:
00020824 4238 FE1E                  		clr.b	(f_timecount).w
00020828 41F8 D000                  		lea	(v_player).w,a0
0002082C 2448                       		movea.l	a0,a2
0002082E 6100 E824                  		bsr.w	KillSonic
00020832 11FC 0001 FE1A             		move.b	#1,(f_timeover).w
00020838 4E75                       		rts	
0002083A                            ; ===========================================================================
0002083A                            
0002083A                            HudDebug:
0002083A 6100 0000                  		bsr.w	HudDb_XY
0002083E 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
00020842 6700                       		beq.s	@objcounter	; if not, branch
00020844 6A00                       		bpl.s	@notzero
00020846 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0002084A                            
0002084A                            	@notzero:
0002084A 4238 FE1D                  		clr.b	(f_ringcount).w
0002084E 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
00020854 7200                       		moveq	#0,d1
00020856 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0002085A 6100 0000                  		bsr.w	Hud_Rings
0002085E                            
0002085E                            	@objcounter:
0002085E 203C 5EC0 0003             		hudVRAM	$DEC0		; set VRAM address
00020864 7200                       		moveq	#0,d1
00020866 1238 F62C                  		move.b	(v_spritecount).w,d1 ; load "number of objects" counter
0002086A 6100 0000                  		bsr.w	Hud_Secs
0002086E 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
00020872 6700                       		beq.s	@chkbonus	; if not, branch
00020874 4238 FE1C                  		clr.b	(f_lifecount).w
00020878 6100 0000                  		bsr.w	Hud_Lives
0002087C                            
0002087C                            	@chkbonus:
0002087C 4A38 F7D6                  		tst.b	(f_endactbonus).w ; does the ring/time bonus counter need updating?
00020880 6700                       		beq.s	@finish		; if not, branch
00020882 4238 F7D6                  		clr.b	(f_endactbonus).w
00020890 7200                       		moveq	#0,d1
00020892 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
00020896 6100 0000                  		bsr.w	Hud_TimeRingBonus
0002089A 7200                       		moveq	#0,d1
0002089C 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
000208A0 6100 0000                  		bsr.w	Hud_TimeRingBonus
000208A4                            
000208A4                            	@finish:
000208A4 4E75                       		rts	
000208A6                            ; End of function HUD_Update
000208A6                            
000208A6                            ; ---------------------------------------------------------------------------
000208A6                            ; Subroutine to	load "0" on the	HUD
000208A6                            ; ---------------------------------------------------------------------------
000208A6                            
000208A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000208A6                            
000208A6                            
000208A6                            Hud_LoadZero:
000208B0 45FA 0000                  		lea	Hud_TilesZero(pc),a2
000208B4 343C 0002                  		move.w	#2,d2
000208B8 6000                       		bra.s	loc_1C83E
000208BA                            ; End of function Hud_LoadZero
000208BA                            
000208BA                            ; ---------------------------------------------------------------------------
000208BA                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
000208BA                            ; ---------------------------------------------------------------------------
000208BA                            
000208BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000208BA                            
000208BA                            
000208BA                            Hud_Base:
000208BA 4DF9 00C0 0000             		lea	($C00000).l,a6
000208C0 6100 0000                  		bsr.w	Hud_Lives
000208CE 45FA 0000                  		lea	Hud_TilesBase(pc),a2
000208D2 343C 000E                  		move.w	#$E,d2
000208D6                            
000208D6                            loc_1C83E:
000208D6 43FA 0000                  		lea	Art_Hud(pc),a1
000208DA                            
000208DA                            loc_1C842:
000208DA 323C 000F                  		move.w	#$F,d1
000208DE 101A                       		move.b	(a2)+,d0
000208E0 6B00                       		bmi.s	loc_1C85E
000208E2 4880                       		ext.w	d0
000208E4 EB48                       		lsl.w	#5,d0
000208E6 47F1 0000                  		lea	(a1,d0.w),a3
000208EA                            
000208EA                            loc_1C852:
000208EA 2C9B                       		move.l	(a3)+,(a6)
000208EC 51C9 FFFC                  		dbf	d1,loc_1C852
000208F0                            
000208F0                            loc_1C858:
000208F0 51CA FFE8                  		dbf	d2,loc_1C842
000208F4                            
000208F4 4E75                       		rts	
000208F6                            ; ===========================================================================
000208F6                            
000208F6                            loc_1C85E:
000208F6 2CBC 0000 0000             		move.l	#0,(a6)
000208FC 51C9 FFF8                  		dbf	d1,loc_1C85E
00020900                            
00020900 60EE                       		bra.s	loc_1C858
00020902                            ; End of function Hud_Base
00020902                            
00020902                            ; ===========================================================================
00020902 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0002090E FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
00020912                            ; ---------------------------------------------------------------------------
00020912                            ; Subroutine to	load debug mode	numbers	patterns
00020912                            ; ---------------------------------------------------------------------------
00020912                            
00020912                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020912                            
00020912                            
00020912                            HudDb_XY:
0002091C 3238 F700                  		move.w	(v_screenposx).w,d1 ; load camera x-position
00020920 4841                       		swap	d1
00020922 3238 D008                  		move.w	(v_player+obX).w,d1 ; load Sonic's x-position
00020926 6100                       		bsr.s	HudDb_XY2
00020928 3238 F704                  		move.w	(v_screenposy).w,d1 ; load camera y-position
0002092C 4841                       		swap	d1
0002092E 3238 D00C                  		move.w	(v_player+obY).w,d1 ; load Sonic's y-position
00020932                            ; End of function HudDb_XY
00020932                            
00020932                            
00020932                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020932                            
00020932                            
00020932                            HudDb_XY2:
00020932 7C07                       		moveq	#7,d6
00020934 43F9 0000 059E             		lea	(Art_Text).l,a1
0002093A                            
0002093A                            HudDb_XYLoop:
0002093A E959                       		rol.w	#4,d1
0002093C 3401                       		move.w	d1,d2
0002093E 0242 000F                  		andi.w	#$F,d2
00020942 0C42 000A                  		cmpi.w	#$A,d2
00020946 6500                       		bcs.s	loc_1C8B2
00020948 5E42                       		addq.w	#7,d2
0002094A                            
0002094A                            loc_1C8B2:
0002094A EB4A                       		lsl.w	#5,d2
0002094C 47F1 2000                  		lea	(a1,d2.w),a3
00020950 2C9B                       		move.l	(a3)+,(a6)
00020952 2C9B                       		move.l	(a3)+,(a6)
00020954 2C9B                       		move.l	(a3)+,(a6)
00020956 2C9B                       		move.l	(a3)+,(a6)
00020958 2C9B                       		move.l	(a3)+,(a6)
0002095A 2C9B                       		move.l	(a3)+,(a6)
0002095C 2C9B                       		move.l	(a3)+,(a6)
0002095E 2C9B                       		move.l	(a3)+,(a6)
00020960 4841                       		swap	d1
00020962 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
00020966                            
00020966 4E75                       		rts	
00020968                            ; End of function HudDb_XY2
00020968                            
00020968                            ; ---------------------------------------------------------------------------
00020968                            ; Subroutine to	load rings numbers patterns
00020968                            ; ---------------------------------------------------------------------------
00020968                            
00020968                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020968                            
00020968                            
00020968                            Hud_Rings:
00020968 45F9 0000 0000             		lea	(Hud_100).l,a2
0002096E 7C02                       		moveq	#2,d6
00020970 6000                       		bra.s	Hud_LoadArt
00020972                            ; End of function Hud_Rings
00020972                            
00020972                            ; ---------------------------------------------------------------------------
00020972                            ; Subroutine to	load score numbers patterns
00020972                            ; ---------------------------------------------------------------------------
00020972                            
00020972                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020972                            
00020972                            
00020972                            Hud_Score:
00020972 45F9 0000 0000             		lea	(Hud_100000).l,a2
00020978 7C05                       		moveq	#5,d6
0002097A                            
0002097A                            Hud_LoadArt:
0002097A 7800                       		moveq	#0,d4
0002097C 43FA 0000                  		lea	Art_Hud(pc),a1
00020980                            
00020980                            Hud_ScoreLoop:
00020980 7400                       		moveq	#0,d2
00020982 261A                       		move.l	(a2)+,d3
00020984                            
00020984                            loc_1C8EC:
00020984 9283                       		sub.l	d3,d1
00020986 6500                       		bcs.s	loc_1C8F4
00020988 5242                       		addq.w	#1,d2
0002098A 60F8                       		bra.s	loc_1C8EC
0002098C                            ; ===========================================================================
0002098C                            
0002098C                            loc_1C8F4:
0002098C D283                       		add.l	d3,d1
0002098E 4A42                       		tst.w	d2
00020990 6700                       		beq.s	loc_1C8FE
00020992 383C 0001                  		move.w	#1,d4
00020996                            
00020996                            loc_1C8FE:
00020996 4A44                       		tst.w	d4
00020998 6700                       		beq.s	loc_1C92C
0002099A ED4A                       		lsl.w	#6,d2
0002099C 2D40 0004                  		move.l	d0,4(a6)
000209A0 47F1 2000                  		lea	(a1,d2.w),a3
000209A4 2C9B                       		move.l	(a3)+,(a6)
000209A6 2C9B                       		move.l	(a3)+,(a6)
000209A8 2C9B                       		move.l	(a3)+,(a6)
000209AA 2C9B                       		move.l	(a3)+,(a6)
000209AC 2C9B                       		move.l	(a3)+,(a6)
000209AE 2C9B                       		move.l	(a3)+,(a6)
000209B0 2C9B                       		move.l	(a3)+,(a6)
000209B2 2C9B                       		move.l	(a3)+,(a6)
000209B4 2C9B                       		move.l	(a3)+,(a6)
000209B6 2C9B                       		move.l	(a3)+,(a6)
000209B8 2C9B                       		move.l	(a3)+,(a6)
000209BA 2C9B                       		move.l	(a3)+,(a6)
000209BC 2C9B                       		move.l	(a3)+,(a6)
000209BE 2C9B                       		move.l	(a3)+,(a6)
000209C0 2C9B                       		move.l	(a3)+,(a6)
000209C2 2C9B                       		move.l	(a3)+,(a6)
000209C4                            
000209C4                            loc_1C92C:
000209C4 0680 0040 0000             		addi.l	#$400000,d0
000209CA 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
000209CE                            
000209CE 4E75                       		rts	
000209D0                            
000209D0                            ; End of function Hud_Score
000209D0                            ; End of function Hud_Score
000209D0                            
000209D0                            ; ---------------------------------------------------------------------------
000209D0                            ; Subroutine to	load countdown numbers on the continue screen
000209D0                            ; ---------------------------------------------------------------------------
000209D0                            
000209D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000209D0                            
000209D0                            
000209D0                            ContScrCounter:
000209DA 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000209E0 45F9 0000 0000             		lea	(Hud_10).l,a2
000209E6 7C01                       		moveq	#1,d6
000209E8 7800                       		moveq	#0,d4
000209EA 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
000209EE                            
000209EE                            ContScr_Loop:
000209EE 7400                       		moveq	#0,d2
000209F0 261A                       		move.l	(a2)+,d3
000209F2                            
000209F2                            loc_1C95A:
000209F2 9283                       		sub.l	d3,d1
000209F4 6500                       		blo.s	loc_1C962
000209F6 5242                       		addq.w	#1,d2
000209F8 60F8                       		bra.s	loc_1C95A
000209FA                            ; ===========================================================================
000209FA                            
000209FA                            loc_1C962:
000209FA D283                       		add.l	d3,d1
000209FC ED4A                       		lsl.w	#6,d2
000209FE 47F1 2000                  		lea	(a1,d2.w),a3
00020A02 2C9B                       		move.l	(a3)+,(a6)
00020A04 2C9B                       		move.l	(a3)+,(a6)
00020A06 2C9B                       		move.l	(a3)+,(a6)
00020A08 2C9B                       		move.l	(a3)+,(a6)
00020A0A 2C9B                       		move.l	(a3)+,(a6)
00020A0C 2C9B                       		move.l	(a3)+,(a6)
00020A0E 2C9B                       		move.l	(a3)+,(a6)
00020A10 2C9B                       		move.l	(a3)+,(a6)
00020A12 2C9B                       		move.l	(a3)+,(a6)
00020A14 2C9B                       		move.l	(a3)+,(a6)
00020A16 2C9B                       		move.l	(a3)+,(a6)
00020A18 2C9B                       		move.l	(a3)+,(a6)
00020A1A 2C9B                       		move.l	(a3)+,(a6)
00020A1C 2C9B                       		move.l	(a3)+,(a6)
00020A1E 2C9B                       		move.l	(a3)+,(a6)
00020A20 2C9B                       		move.l	(a3)+,(a6)
00020A22 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
00020A26                            
00020A26 4E75                       		rts	
00020A28                            ; End of function ContScrCounter
00020A28                            
00020A28                            ; ===========================================================================
00020A28                            
00020A28                            		include	"_inc\HUD (part 2).asm"
00020A28                            ; ---------------------------------------------------------------------------
00020A28                            ; HUD counter sizes
00020A28                            ; ---------------------------------------------------------------------------
00020A28 0001 86A0                  Hud_100000:	dc.l 100000
00020A2C 0000 2710                  Hud_10000:	dc.l 10000
00020A30 0000 03E8                  Hud_1000:	dc.l 1000
00020A34 0000 0064                  Hud_100:	dc.l 100
00020A38 0000 000A                  Hud_10:		dc.l 10
00020A3C 0000 0001                  Hud_1:		dc.l 1
00020A40                            
00020A40                            ; ---------------------------------------------------------------------------
00020A40                            ; Subroutine to	load time numbers patterns
00020A40                            ; ---------------------------------------------------------------------------
00020A40                            
00020A40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020A40                            
00020A40                            
00020A40                            Hud_Mins:
00020A40 45F9 0002 0A3C             		lea	(Hud_1).l,a2
00020A46 7C00                       		moveq	#0,d6
00020A48 6000                       		bra.s	loc_1C9BA
00020A4A                            ; End of function Hud_Mins
00020A4A                            
00020A4A                            
00020A4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020A4A                            
00020A4A                            
00020A4A                            Hud_Secs:
00020A4A 45F9 0002 0A38             		lea	(Hud_10).l,a2
00020A50 7C01                       		moveq	#1,d6
00020A52                            
00020A52                            loc_1C9BA:
00020A52 7800                       		moveq	#0,d4
00020A54 43FA 0000                  		lea	Art_Hud(pc),a1
00020A58                            
00020A58                            Hud_TimeLoop:
00020A58 7400                       		moveq	#0,d2
00020A5A 261A                       		move.l	(a2)+,d3
00020A5C                            
00020A5C                            loc_1C9C4:
00020A5C 9283                       		sub.l	d3,d1
00020A5E 6500                       		bcs.s	loc_1C9CC
00020A60 5242                       		addq.w	#1,d2
00020A62 60F8                       		bra.s	loc_1C9C4
00020A64                            ; ===========================================================================
00020A64                            
00020A64                            loc_1C9CC:
00020A64 D283                       		add.l	d3,d1
00020A66 4A42                       		tst.w	d2
00020A68 6700                       		beq.s	loc_1C9D6
00020A6A 383C 0001                  		move.w	#1,d4
00020A6E                            
00020A6E                            loc_1C9D6:
00020A6E ED4A                       		lsl.w	#6,d2
00020A70 2D40 0004                  		move.l	d0,4(a6)
00020A74 47F1 2000                  		lea	(a1,d2.w),a3
00020A78 2C9B                       		move.l	(a3)+,(a6)
00020A7A 2C9B                       		move.l	(a3)+,(a6)
00020A7C 2C9B                       		move.l	(a3)+,(a6)
00020A7E 2C9B                       		move.l	(a3)+,(a6)
00020A80 2C9B                       		move.l	(a3)+,(a6)
00020A82 2C9B                       		move.l	(a3)+,(a6)
00020A84 2C9B                       		move.l	(a3)+,(a6)
00020A86 2C9B                       		move.l	(a3)+,(a6)
00020A88 2C9B                       		move.l	(a3)+,(a6)
00020A8A 2C9B                       		move.l	(a3)+,(a6)
00020A8C 2C9B                       		move.l	(a3)+,(a6)
00020A8E 2C9B                       		move.l	(a3)+,(a6)
00020A90 2C9B                       		move.l	(a3)+,(a6)
00020A92 2C9B                       		move.l	(a3)+,(a6)
00020A94 2C9B                       		move.l	(a3)+,(a6)
00020A96 2C9B                       		move.l	(a3)+,(a6)
00020A98 0680 0040 0000             		addi.l	#$400000,d0
00020A9E 51CE FFB8                  		dbf	d6,Hud_TimeLoop
00020AA2                            
00020AA2 4E75                       		rts	
00020AA4                            ; End of function Hud_Secs
00020AA4                            
00020AA4                            ; ---------------------------------------------------------------------------
00020AA4                            ; Subroutine to	load time/ring bonus numbers patterns
00020AA4                            ; ---------------------------------------------------------------------------
00020AA4                            
00020AA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020AA4                            
00020AA4                            
00020AA4                            Hud_TimeRingBonus:
00020AA4 45F9 0002 0A30             		lea	(Hud_1000).l,a2
00020AAA 7C03                       		moveq	#3,d6
00020AAC 7800                       		moveq	#0,d4
00020AAE 43FA 0000                  		lea	Art_Hud(pc),a1
00020AB2                            
00020AB2                            Hud_BonusLoop:
00020AB2 7400                       		moveq	#0,d2
00020AB4 261A                       		move.l	(a2)+,d3
00020AB6                            
00020AB6                            loc_1CA1E:
00020AB6 9283                       		sub.l	d3,d1
00020AB8 6500                       		bcs.s	loc_1CA26
00020ABA 5242                       		addq.w	#1,d2
00020ABC 60F8                       		bra.s	loc_1CA1E
00020ABE                            ; ===========================================================================
00020ABE                            
00020ABE                            loc_1CA26:
00020ABE D283                       		add.l	d3,d1
00020AC0 4A42                       		tst.w	d2
00020AC2 6700                       		beq.s	loc_1CA30
00020AC4 383C 0001                  		move.w	#1,d4
00020AC8                            
00020AC8                            loc_1CA30:
00020AC8 4A44                       		tst.w	d4
00020ACA 6700                       		beq.s	Hud_ClrBonus
00020ACC ED4A                       		lsl.w	#6,d2
00020ACE 47F1 2000                  		lea	(a1,d2.w),a3
00020AD2 2C9B                       		move.l	(a3)+,(a6)
00020AD4 2C9B                       		move.l	(a3)+,(a6)
00020AD6 2C9B                       		move.l	(a3)+,(a6)
00020AD8 2C9B                       		move.l	(a3)+,(a6)
00020ADA 2C9B                       		move.l	(a3)+,(a6)
00020ADC 2C9B                       		move.l	(a3)+,(a6)
00020ADE 2C9B                       		move.l	(a3)+,(a6)
00020AE0 2C9B                       		move.l	(a3)+,(a6)
00020AE2 2C9B                       		move.l	(a3)+,(a6)
00020AE4 2C9B                       		move.l	(a3)+,(a6)
00020AE6 2C9B                       		move.l	(a3)+,(a6)
00020AE8 2C9B                       		move.l	(a3)+,(a6)
00020AEA 2C9B                       		move.l	(a3)+,(a6)
00020AEC 2C9B                       		move.l	(a3)+,(a6)
00020AEE 2C9B                       		move.l	(a3)+,(a6)
00020AF0 2C9B                       		move.l	(a3)+,(a6)
00020AF2                            
00020AF2                            loc_1CA5A:
00020AF2 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
00020AF6                            
00020AF6 4E75                       		rts	
00020AF8                            ; ===========================================================================
00020AF8                            
00020AF8                            Hud_ClrBonus:
00020AF8 7A0F                       		moveq	#$F,d5
00020AFA                            
00020AFA                            Hud_ClrBonusLoop:
00020AFA 2CBC 0000 0000             		move.l	#0,(a6)
00020B00 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
00020B04                            
00020B04 60EC                       		bra.s	loc_1CA5A
00020B06                            ; End of function Hud_TimeRingBonus
00020B06                            
00020B06                            ; ---------------------------------------------------------------------------
00020B06                            ; Subroutine to	load uncompressed lives	counter	patterns
00020B06                            ; ---------------------------------------------------------------------------
00020B06                            
00020B06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020B06                            
00020B06                            
00020B06                            Hud_Lives:
00020B06 203C 7BA0 0003             		hudVRAM	$FBA0		; set VRAM address
00020B0C 7200                       		moveq	#0,d1
00020B0E 1238 FE12                  		move.b	(v_lives).w,d1	; load number of lives
00020B12 45F9 0002 0A38             		lea	(Hud_10).l,a2
00020B18 7C01                       		moveq	#1,d6
00020B1A 7800                       		moveq	#0,d4
00020B1C 43FA 0000                  		lea	Art_LivesNums(pc),a1
00020B20                            		
00020B20                            
00020B20                            Hud_LivesLoop:
00020B20 2D40 0004                  		move.l	d0,4(a6)
00020B24 7400                       		moveq	#0,d2
00020B26 261A                       		move.l	(a2)+,d3
00020B28                            
00020B28                            loc_1CA90:
00020B28 9283                       		sub.l	d3,d1
00020B2A 6500                       		bcs.s	loc_1CA98
00020B2C 5242                       		addq.w	#1,d2
00020B2E 60F8                       		bra.s	loc_1CA90
00020B30                            ; ===========================================================================
00020B30                            
00020B30                            loc_1CA98:
00020B30 D283                       		add.l	d3,d1
00020B32 4A42                       		tst.w	d2
00020B34 6700                       		beq.s	loc_1CAA2
00020B36 383C 0001                  		move.w	#1,d4
00020B3A                            
00020B3A                            loc_1CAA2:
00020B3A 4A44                       		tst.w	d4
00020B3C 6700                       		beq.s	Hud_ClrLives
00020B3E                            
00020B3E                            loc_1CAA6:
00020B3E EB4A                       		lsl.w	#5,d2
00020B40 47F1 2000                  		lea	(a1,d2.w),a3
00020B44 2C9B                       		move.l	(a3)+,(a6)
00020B46 2C9B                       		move.l	(a3)+,(a6)
00020B48 2C9B                       		move.l	(a3)+,(a6)
00020B4A 2C9B                       		move.l	(a3)+,(a6)
00020B4C 2C9B                       		move.l	(a3)+,(a6)
00020B4E 2C9B                       		move.l	(a3)+,(a6)
00020B50 2C9B                       		move.l	(a3)+,(a6)
00020B52 2C9B                       		move.l	(a3)+,(a6)
00020B54                            
00020B54                            loc_1CABC:
00020B54 0680 0040 0000             		addi.l	#$400000,d0
00020B5A 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
00020B5E                            
00020B5E 4E75                       		rts	
00020B60                            ; ===========================================================================
00020B60                            
00020B60                            Hud_ClrLives:
00020B60 4A46                       		tst.w	d6
00020B62 67DA                       		beq.s	loc_1CAA6
00020B64 7A07                       		moveq	#7,d5
00020B66                            
00020B66                            Hud_ClrLivesLoop:
00020B66 2CBC 0000 0000             		move.l	#0,(a6)
00020B6C 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
00020B70 60E2                       		bra.s	loc_1CABC
00020B72                            ; End of function Hud_Lives
00020B72                            ; End of function Hud_Lives
00020B72                            
00020B72                            Art_Hud:	incbin	"artunc\HUD Numbers.bin" ; 8x16 pixel numbers on HUD
00020E72                            		even
00020E72                            Art_LivesNums:	incbin	"artunc\Lives Counter Numbers.bin" ; 8x8 pixel numbers on lives counter
00020FB2                            		even
00020FB2                            
00020FB2                            		include	"_incObj\DebugMode.asm"
00020FB2                            ; ---------------------------------------------------------------------------
00020FB2                            ; When debug mode is currently in use
00020FB2                            ; ---------------------------------------------------------------------------
00020FB2                            
00020FB2                            DebugMode:
00020FB2 7000                       		moveq	#0,d0
00020FB4 1038 FE08                  		move.b	(v_debuguse).w,d0
00020FB8 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
00020FBC 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
00020FC0                            ; ===========================================================================
00020FC0 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
00020FC2 0000                       		dc.w Debug_Action-Debug_Index
00020FC4                            ; ===========================================================================
00020FC4                            
00020FC4                            Debug_Main:	; Routine 0
00020FC4 5438 FE08                  		addq.b	#2,(v_debuguse).w
00020FC8 31F8 F72C FEF0             		move.w	(v_limittop2).w,(v_limittopdb).w ; buffer level x-boundary
00020FCE 31F8 F726 FEF2             		move.w	(v_limitbtm1).w,(v_limitbtmdb).w ; buffer level y-boundary
00020FD4 31FC 0000 F72C             		move.w	#0,(v_limittop2).w
00020FDA 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00020FE0 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00020FE6 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
00020FEC 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00020FF2 117C 0000 001A             		move.b	#0,obFrame(a0)
00020FF8 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00020FFE 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
00021004 6600                       		bne.s	@islevel	; if not, branch
00021006                            
00021006 31FC 0000 F782             		move.w	#0,(v_ssrotate).w ; stop special stage rotating
0002100C 31FC 0000 F780             		move.w	#0,(v_ssangle).w ; make	special	stage "upright"
00021012 7006                       		moveq	#6,d0		; use 6th debug	item list
00021014 6000                       		bra.s	@selectlist
00021016                            ; ===========================================================================
00021016                            
00021016                            @islevel:
00021016 7000                       		moveq	#0,d0
00021018 1038 FE10                  		move.b	(v_zone).w,d0
0002101C                            
0002101C                            @selectlist:
0002101C 45F9 0000 0000             		lea	(DebugList).l,a2
00021022 D040                       		add.w	d0,d0
00021024 D4F2 0000                  		adda.w	(a2,d0.w),a2
00021028 3C1A                       		move.w	(a2)+,d6
0002102A BC38 FE06                  		cmp.b	(v_debugitem).w,d6 ; have you gone past the last item?
0002102E 6200                       		bhi.s	@noreset	; if not, branch
00021030 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; back to start of list
00021036                            
00021036                            	@noreset:
00021036 6100 0000                  		bsr.w	Debug_ShowItem
0002103A 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
00021040 11FC 0001 FE0B             		move.b	#1,(v_debugyspeed).w
00021046                            
00021046                            Debug_Action:	; Routine 2
00021046 7006                       		moveq	#6,d0
00021048 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w
0002104E 6700                       		beq.s	@isntlevel
00021050                            
00021050 7000                       		moveq	#0,d0
00021052 1038 FE10                  		move.b	(v_zone).w,d0
00021056                            
00021056                            	@isntlevel:
00021056 45F9 0000 0000             		lea	(DebugList).l,a2
0002105C D040                       		add.w	d0,d0
0002105E D4F2 0000                  		adda.w	(a2,d0.w),a2
00021062 3C1A                       		move.w	(a2)+,d6
00021064 6100 0000                  		bsr.w	Debug_Control
00021068 4EF9 0000 F7CA             		jmp	(DisplaySprite).l
0002106E                            
0002106E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002106E                            
0002106E                            
0002106E                            Debug_Control:
0002106E 7800                       		moveq	#0,d4
00021070 323C 0001                  		move.w	#1,d1
00021074 1838 F605                  		move.b	(v_jpadpress1).w,d4
00021078 0244 000F                  		andi.w	#btnDir,d4	; is up/down/left/right	pressed?
0002107C 6600                       		bne.s	@dirpressed	; if yes, branch
0002107E                            
0002107E 1038 F604                  		move.b	(v_jpadhold1).w,d0
00021082 0240 000F                  		andi.w	#btnDir,d0	; is up/down/left/right	held?
00021086 6600                       		bne.s	@dirheld	; if yes, branch
00021088                            
00021088 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
0002108E 11FC 000F FE0B             		move.b	#15,(v_debugyspeed).w
00021094 6000 0000                  		bra.w	Debug_ChgItem
00021098                            ; ===========================================================================
00021098                            
00021098                            @dirheld:
00021098 5338 FE0A                  		subq.b	#1,(v_debugxspeed).w
0002109C 6600                       		bne.s	loc_1D01C
0002109E 11FC 0001 FE0A             		move.b	#1,(v_debugxspeed).w
000210A4 5238 FE0B                  		addq.b	#1,(v_debugyspeed).w
000210A8 6600                       		bne.s	@dirpressed
000210AA 11FC 00FF FE0B             		move.b	#-1,(v_debugyspeed).w
000210B0                            
000210B0                            @dirpressed:
000210B0 1838 F604                  		move.b	(v_jpadhold1).w,d4
000210B4                            
000210B4                            loc_1D01C:
000210B4 7200                       		moveq	#0,d1
000210B6 1238 FE0B                  		move.b	(v_debugyspeed).w,d1
000210BA 5241                       		addq.w	#1,d1
000210BC 4841                       		swap	d1
000210BE E881                       		asr.l	#4,d1
000210C0 2428 000C                  		move.l	obY(a0),d2
000210C4 2628 0008                  		move.l	obX(a0),d3
000210C8 0804 0000                  		btst	#bitUp,d4	; is up	being pressed?
000210CC 6700                       		beq.s	loc_1D03C	; if not, branch
000210CE 9481                       		sub.l	d1,d2
000210D0 6400                       		bcc.s	loc_1D03C
000210D2 7400                       		moveq	#0,d2
000210D4                            
000210D4                            loc_1D03C:
000210D4 0804 0001                  		btst	#bitDn,d4	; is down being	pressed?
000210D8 6700                       		beq.s	loc_1D052	; if not, branch
000210DA D481                       		add.l	d1,d2
000210DC 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
000210E2 6500                       		bcs.s	loc_1D052
000210E4 243C 07FF 0000             		move.l	#$7FF0000,d2
000210EA                            
000210EA                            loc_1D052:
000210EA 0804 0002                  		btst	#bitL,d4
000210EE 6700                       		beq.s	loc_1D05E
000210F0 9681                       		sub.l	d1,d3
000210F2 6400                       		bcc.s	loc_1D05E
000210F4 7600                       		moveq	#0,d3
000210F6                            
000210F6                            loc_1D05E:
000210F6 0804 0003                  		btst	#bitR,d4
000210FA 6700                       		beq.s	loc_1D066
000210FC D681                       		add.l	d1,d3
000210FE                            
000210FE                            loc_1D066:
000210FE 2142 000C                  		move.l	d2,obY(a0)
00021102 2143 0008                  		move.l	d3,obX(a0)
00021106                            
00021106                            Debug_ChgItem:
00021106 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
0002110C 6700                       		beq.s	@createitem	; if not, branch
0002110E 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
00021114 6700                       		beq.s	@nextitem	; if not, branch
00021116 5338 FE06                  		subq.b	#1,(v_debugitem).w ; go back 1 item
0002111A 6400                       		bcc.s	@display
0002111C DD38 FE06                  		add.b	d6,(v_debugitem).w
00021120 6000                       		bra.s	@display
00021122                            ; ===========================================================================
00021122                            
00021122                            @nextitem:
00021122 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
00021128 6700                       		beq.s	@createitem	; if not, branch
0002112A 5238 FE06                  		addq.b	#1,(v_debugitem).w ; go forwards 1 item
0002112E BC38 FE06                  		cmp.b	(v_debugitem).w,d6
00021132 6200                       		bhi.s	@display
00021134 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; loop back to first item
0002113A                            
0002113A                            	@display:
0002113A 6000 0000                  		bra.w	Debug_ShowItem
0002113E                            ; ===========================================================================
0002113E                            
0002113E                            @createitem:
0002113E 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
00021144 6700                       		beq.s	@backtonormal	; if not, branch
00021146 4EB9 0000 FD64             		jsr	(FindFreeObj).l
0002114C 6600                       		bne.s	@backtonormal
0002114E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00021154 3368 000C 000C             		move.w	obY(a0),obY(a1)
0002115A 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0002115E 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00021164 1368 0001 0022             		move.b	obRender(a0),obStatus(a1)
0002116A 0229 007F 0022             		andi.b	#$7F,obStatus(a1)
00021170 7000                       		moveq	#0,d0
00021172 1038 FE06                  		move.b	(v_debugitem).w,d0
00021176 E748                       		lsl.w	#3,d0
00021178 1372 0004 0028             		move.b	4(a2,d0.w),obSubtype(a1)
0002117E 4E75                       		rts	
00021180                            ; ===========================================================================
00021180                            
00021180                            @backtonormal:
00021180 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
00021186 6700                       		beq.s	@stayindebug	; if not, branch
00021188 7000                       		moveq	#0,d0
0002118A 31C0 FE08                  		move.w	d0,(v_debuguse).w ; deactivate debug mode
0002118E 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
00021196 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
0002119C 11C0 D01C                  		move.b	d0,(v_player+obAnim).w
000211A0 3140 000A                  		move.w	d0,obX+2(a0)
000211A4 3140 000E                  		move.w	d0,obY+2(a0)
000211A8 31F8 FEF0 F72C             		move.w	(v_limittopdb).w,(v_limittop2).w ; restore level boundaries
000211AE 31F8 FEF2 F726             		move.w	(v_limitbtmdb).w,(v_limitbtm1).w
000211B4 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; are you in the special stage?
000211BA 6600                       		bne.s	@stayindebug	; if not, branch
000211BC                            
000211BC 4278 F780                  		clr.w	(v_ssangle).w
000211C0 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set new level rotation speed
000211C6 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
000211CE 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
000211D4 11FC 0002 D01C             		move.b	#id_Roll,(v_player+obAnim).w
000211DA 08F8 0002 D022             		bset	#2,(v_player+obStatus).w
000211E0 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
000211E6                            
000211E6                            	@stayindebug:
000211E6 4E75                       		rts	
000211E8                            ; End of function Debug_Control
000211E8                            
000211E8                            
000211E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000211E8                            
000211E8                            
000211E8                            Debug_ShowItem:
000211E8 7000                       		moveq	#0,d0
000211EA 1038 FE06                  		move.b	(v_debugitem).w,d0
000211EE E748                       		lsl.w	#3,d0
000211F0 2172 0000 0004             		move.l	(a2,d0.w),obMap(a0) ; load mappings for item
000211F6 3172 0006 0002             		move.w	6(a2,d0.w),obGfx(a0) ; load VRAM setting for item
000211FC 1172 0005 001A             		move.b	5(a2,d0.w),obFrame(a0) ; load frame number for item
00021202 4E75                       		rts	
00021204                            ; End of function Debug_ShowItem
00021204                            ; End of function Debug_ShowItem
00021204                            		include	"_inc\DebugList.asm"
00021204                            ; ---------------------------------------------------------------------------
00021204                            ; Debug	mode item lists
00021204                            ; ---------------------------------------------------------------------------
00021204                            DebugList:
00021204 0000                       	dc.w @GHZ-DebugList
00021206 0000                       	dc.w @LZ-DebugList
00021208 0000                       	dc.w @MZ-DebugList
0002120A 0000                       	dc.w @SLZ-DebugList
0002120C 0000                       	dc.w @SYZ-DebugList
0002120E 0000                       	dc.w @SBZ-DebugList
00021210 0000                       	dc.w @Ending-DebugList
00021212                            
00021212                            dbug:	macro map,object,subtype,frame,vram
00021212                            	dc.l map+(object<<24)
00021212                            	dc.b subtype,frame
00021212                            	dc.w vram
00021212                            	endm
00021212                            
00021212                            @GHZ:
00021212 0000                       	dc.w (@GHZend-@GHZ-2)/8
00021214                            
00021214                            ;		mappings	object		subtype	frame	VRAM setting
00021214 2500 BDD2 0000 27B2        	dbug 	Map_Ring,	id_Rings,	0,	0,	$27B2
0002121C 2600 C590 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00021224 1F00 B1B2 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
0002122C 2200 B63C 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00021234 2B00 CD32 0000 047B        	dbug	Map_Chop,	id_Chopper,	0,	0,	$47B
0002123C 3600 F170 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00021244 1800 990C 0000 4000        	dbug	Map_Plat_GHZ,	id_BasicPlatform, 0,	0,	$4000
0002124C 3B00 F296 0000 63D0        	dbug	Map_PRock,	id_PurpleRock,	0,	0,	$63D0
00021254 4001 1970 0000 04F0        	dbug	Map_Moto,	id_MotoBug,	0,	0,	$4F0
0002125C 4100 FFF6 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00021264 4201 0220 0000 249B        	dbug	Map_Newt,	id_Newtron,	0,	0,	$249B
0002126C 4401 0534 0000 434C        	dbug	Map_Edge,	id_EdgeWalls,	0,	0,	$434C
00021274 7901 AD1E 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0002127C 4B00 BE22 0000 2400        	dbug	Map_GRing,	id_GiantRing,	0,	0,	$2400
00021284 7D01 AEE0 0101 84B6        	dbug	Map_Bonus,	id_HiddenBonus,	1,	1,	$84B6
0002128C                            	@GHZend:
0002128C                            
0002128C                            @LZ:
0002128C 0000                       	dc.w (@LZend-@LZ-2)/8
0002128E                            
0002128E                            ;		mappings	object		subtype	frame	VRAM setting
0002128E 2500 BDD2 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00021296 2600 C590 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0002129E 4100 FFF6 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000212A6 2C00 CDD8 0800 2486        	dbug	Map_Jaws,	id_Jaws,	8,	0,	$2486
000212AE 2D00 CFC4 0002 84A6        	dbug	Map_Burro,	id_Burrobot,	0,	2,	$84A6
000212B6 1601 4332 0000 03CC        	dbug	Map_Harp,	id_Harpoon,	0,	0,	$3CC
000212BE 1601 4332 0203 03CC        	dbug	Map_Harp,	id_Harpoon,	2,	3,	$3CC
000212C6 3300 E442 0000 43DE        	dbug	Map_Push,	id_PushBlock,	0,	0,	$43DE
000212CE 3200 E002 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
000212D6 3600 F170 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
000212DE 5201 2408 0400 43BC        	dbug	Map_MBlockLZ,	id_MovingBlock,	4,	0,	$43BC
000212E6 6101 455A 0100 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 1,	0,	$43E6
000212EE 6101 455A 1301 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $13,	1,	$43E6
000212F6 6101 455A 0500 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 5,	0,	$43E6
000212FE 6201 46AE 0000 443E        	dbug	Map_Gar,	id_Gargoyle,	0,	0,	$443E
00021306 6101 455A 2702 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $27,	2,	$43E6
0002130E 6101 455A 3003 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $30,	3,	$43E6
00021316 6301 4A10 7F00 03F6        	dbug	Map_LConv,	id_LabyrinthConvey, $7F, 0,	$3F6
0002131E 6001 427C 0000 0467        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$467
00021326 6401 4D5E 8413 8348        	dbug	Map_Bub,	id_Bubble,	$84,	$13,	$8348
0002132E 6501 4EE6 0202 C259        	dbug	Map_WFall,	id_Waterfall,	2,	2,	$C259
00021336 6501 4EE6 0909 C259        	dbug	Map_WFall,	id_Waterfall,	9,	9,	$C259
0002133E 0B01 36C8 0000 43DE        	dbug	Map_Pole,	id_Pole,	0,	0,	$43DE
00021346 0C01 3798 0200 4328        	dbug	Map_Flap,	id_FlapDoor,	2,	0,	$4328
0002134E 7901 AD1E 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00021356                            	@LZend:
00021356                            
00021356                            @MZ:
00021356 0000                       	dc.w (@MZend-@MZ-2)/8
00021358                            
00021358                            ;		mappings	object		subtype	frame	VRAM setting
00021358 2500 BDD2 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00021360 2600 C590 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00021368 2200 B63C 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00021370 3600 F170 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00021378 4100 FFF6 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00021380 1300 D4D2 0000 0345        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$345
00021388 4601 0BEC 0000 4000        	dbug	Map_Brick,	id_MarbleBrick,	0,	0,	$4000
00021390 6E01 9D9E 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
00021398 6A01 970E 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
000213A0 3300 E442 0000 42B8        	dbug	Map_Push,	id_PushBlock,	0,	0,	$42B8
000213A8 1E00 A8AC 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
000213B0 5101 212E 0000 42B8        	dbug	Map_Smab,	id_SmashBlock,	0,	0,	$42B8
000213B8 5201 23B2 0000 02B8        	dbug	Map_MBlock,	id_MovingBlock,	0,	0,	$2B8
000213C0 5300 9F4E 0000 62B8        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$62B8
000213C8 5401 14D6 0000 8680        	dbug	Map_LTag,	id_LavaTag,	0,	0,	$8680
000213D0 5501 25A6 0000 04B8        	dbug	Map_Bas,	id_Basaran,	0,	0,	$4B8
000213D8 7801 A972 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
000213E0 7901 AD1E 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000213E8                            	@MZend:
000213E8                            
000213E8                            @SLZ:
000213E8 0000                       	dc.w (@SLZend-@SLZ-2)/8
000213EA                            
000213EA                            ;		mappings	object		subtype	frame	VRAM setting
000213EA 2500 BDD2 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000213F2 2600 C590 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000213FA 5901 30F0 0000 4000        	dbug	Map_Elev,	id_Elevator,	0,	0,	$4000
00021402 5300 9F4E 0002 44E0        	dbug	Map_CFlo,	id_CollapseFloor, 0,	2,	$44E0
0002140A 1800 996A 0000 4000        	dbug	Map_Plat_SLZ,	id_BasicPlatform, 0,	0,	$4000
00021412 5A01 322A 0000 4000        	dbug	Map_Circ,	id_CirclingPlatform, 0,	0,	$4000
0002141A 5B01 33E2 0000 4000        	dbug	Map_Stair,	id_Staircase,	0,	0,	$4000
00021422 5D01 39B6 0000 43A0        	dbug	Map_Fan,	id_Fan,		0,	0,	$43A0
0002142A 5E01 3D48 0000 0374        	dbug	Map_Seesaw,	id_Seesaw,	0,	0,	$374
00021432 4100 FFF6 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0002143A 1300 D4D2 0000 0480        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$480
00021442 1C00 A080 0000 44D8        	dbug	Map_Scen,	id_Scenery,	0,	0,	$44D8
0002144A 5F01 3FC6 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
00021452 6001 427C 0000 2429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$2429
0002145A 7901 AD1E 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00021462                            	@SLZend:
00021462                            
00021462                            @SYZ:
00021462 0000                       	dc.w (@SYZend-@SYZ-2)/8
00021464                            
00021464                            ;		mappings	object		subtype	frame	VRAM setting
00021464 2500 BDD2 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002146C 2600 C590 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00021474 3600 F170 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
0002147C 4100 FFF6 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00021484 4301 0486 0000 04B8        	dbug	Map_Roll,	id_Roller,	0,	0,	$4B8
0002148C 1201 0C6A 0000 0000        	dbug	Map_Light,	id_SpinningLight, 0,	0,	0
00021494 4701 0E0E 0000 0380        	dbug	Map_Bump,	id_Bumper,	0,	0,	$380
0002149C 1F00 B1B2 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
000214A4 2200 B63C 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
000214AC 5001 1C00 0000 247B        	dbug	Map_Yad,	id_Yadrin,	0,	0,	$247B
000214B4 1800 9958 0000 4000        	dbug	Map_Plat_SYZ,	id_BasicPlatform, 0,	0,	$4000
000214BC 5601 2AB0 0000 4000        	dbug	Map_FBlock,	id_FloatingBlock, 0,	0,	$4000
000214C4 3200 E002 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
000214CC 7801 A972 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
000214D4 7901 AD1E 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000214DC                            	@SYZend:
000214DC                            
000214DC                            @SBZ:
000214DC 0000                       	dc.w (@SBZend-@SBZ-2)/8
000214DE                            
000214DE                            ;		mappings	object		subtype	frame	VRAM setting
000214DE 2500 BDD2 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000214E6 2600 C590 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000214EE 5F01 3FC6 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
000214F6 6001 427C 0000 0429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$429
000214FE 7801 A972 0000 22B0        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$22B0
00021506 1501 2E4C 0702 4391        	dbug	Map_BBall,	id_SwingingPlatform, 7,	2,	$4391
0002150E 6701 91FC E000 C344        	dbug	Map_Disc,	id_RunningDisc,	$E0,	0,	$C344
00021516 5201 23B2 2802 22C0        	dbug	Map_MBlock,	id_MovingBlock,	$28,	2,	$22C0
0002151E 3200 E002 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
00021526 6901 9456 0300 4492        	dbug	Map_Trap,	id_SpinPlatform, 3,	0,	$4492
0002152E 6901 94B0 8300 04DF        	dbug	Map_Spin,	id_SpinPlatform, $83,	0,	$4DF
00021536 6A01 970E 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
0002153E 5300 9F4E 0000 43F5        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$43F5
00021546 5201 23B2 3903 4460        	dbug	Map_MBlock,	id_MovingBlock,	$39,	3,	$4460
0002154E 6B01 9ADE 0000 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	0,	0,	$22C0
00021556 2A00 A43E 0000 42E8        	dbug	Map_ADoor,	id_AutoDoor,	0,	0,	$42E8
0002155E 6B01 9ADE 1301 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$13,	1,	$22C0
00021566 6A01 970E 0100 43B5        	dbug	Map_Saw,	id_Saws,	1,	0,	$43B5
0002156E 6B01 9ADE 2401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$24,	1,	$22C0
00021576 6A01 970E 0402 43B5        	dbug	Map_Saw,	id_Saws,	4,	2,	$43B5
0002157E 6B01 9ADE 3401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$34,	1,	$22C0
00021586 6C01 9CBA 0000 44C3        	dbug	Map_VanP,	id_VanishPlatform, 0,	0,	$44C3
0002158E 6D01 08DE 6400 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	0,	$83D9
00021596 6D01 08DE 640B 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	$B,	$83D9
0002159E 6E01 9D9E 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
000215A6 7001 A1E8 0000 42F0        	dbug	Map_Gird,	id_Girder,	0,	0,	$42F0
000215AE 7101 385C 1100 8680        	dbug	Map_Invis,	id_Invisibarrier, $11,	0,	$8680
000215B6 1E00 A8AC 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
000215BE 7901 AD1E 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000215C6                            	@SBZend:
000215C6                            
000215C6                            @Ending:
000215C6 0000                       	dc.w (@Endingend-@Ending-2)/8
000215C8                            
000215C8                            ;		mappings	object		subtype	frame	VRAM setting
000215C8 2500 BDD2 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000215D0 2500 BDD2 0008 27B2        	dbug	Map_Ring,	id_Rings,	0,	8,	$27B2
000215D8                            	@Endingend:
000215D8                            
000215D8                            	even
000215D8                            	even
000215D8                            		include	"_inc\LevelHeaders.asm"
000215D8                            ; ---------------------------------------------------------------------------
000215D8                            ; Level Headers
000215D8                            ; ---------------------------------------------------------------------------
000215D8                            
000215D8                            LevelHeaders:
000215D8                            
000215D8                            lhead:	macro plc1,lvlgfx,plc2,sixteen,twofivesix,music,pal
000215D8                            	dc.l (plc1<<24)+lvlgfx
000215D8                            	dc.l (plc2<<24)+sixteen
000215D8                            	dc.l twofivesix
000215D8                            	dc.b 0, music, pal, pal
000215D8                            	endm
000215D8                            
000215D8                            ; 1st PLC, level gfx (unused), 2nd PLC, 16x16 data, 256x256 data,
000215D8                            ; music (unused), palette (unused), palette
000215D8                            
000215D8                            ;		1st PLC				2nd PLC				256x256 data			palette
000215D8                            ;				level gfx*			16x16 data			music*
000215D8                            
000215D8 0000 0000 0000 0000 0000+  	lhead	plcid_GHZ,	Nem_GHZ_2nd,	plcid_GHZ2,	Blk16_GHZ,	Blk256_GHZ,	bgm_GHZ,	palid_GHZ	; Green Hill
000215E8 0000 0000 0000 0000 0000+  	lhead	plcid_LZ,	Nem_LZ,		plcid_LZ2,	Blk16_LZ,	Blk256_LZ,	bgm_LZ,		palid_LZ	; Labyrinth
000215F8 0000 0000 0000 0000 0000+  	lhead	plcid_MZ,	Nem_MZ,		plcid_MZ2,	Blk16_MZ,	Blk256_MZ,	bgm_MZ,		palid_MZ	; Marble
00021608 0000 0000 0000 0000 0000+  	lhead	plcid_SLZ,	Nem_SLZ,	plcid_SLZ2,	Blk16_SLZ,	Blk256_SLZ,	bgm_SLZ,	palid_SLZ	; Star Light
00021618 0000 0000 0000 0000 0000+  	lhead	plcid_SYZ,	Nem_SYZ,	plcid_SYZ2,	Blk16_SYZ,	Blk256_SYZ,	bgm_SYZ,	palid_SYZ	; Spring Yard
00021628 0000 0000 0000 0000 0000+  	lhead	plcid_SBZ,	Nem_SBZ,	plcid_SBZ2,	Blk16_SBZ,	Blk256_SBZ,	bgm_SBZ,	palid_SBZ1	; Scrap Brain
00021638 0000 0000 0000 0000 0000+  	lhead	0,		Nem_GHZ_2nd,	0,		Blk16_GHZ,	Blk256_GHZ,	bgm_SBZ,	palid_Ending	; Ending
00021648                            	even
00021648                            
00021648                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00021648                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00021648                            		include	"_inc\Pattern Load Cues.asm"
00021648                            ; ---------------------------------------------------------------------------
00021648                            ; Pattern load cues
00021648                            ; ---------------------------------------------------------------------------
00021648                            ArtLoadCues:
00021648                            
00021648 0000                       ptr_PLC_Main:		dc.w PLC_Main-ArtLoadCues
0002164A 0000                       ptr_PLC_Main2:		dc.w PLC_Main2-ArtLoadCues
0002164C 0000                       ptr_PLC_Explode:	dc.w PLC_Explode-ArtLoadCues
0002164E 0000                       ptr_PLC_GameOver:	dc.w PLC_GameOver-ArtLoadCues
00021650                            PLC_Levels:
00021650 0000                       ptr_PLC_GHZ:		dc.w PLC_GHZ-ArtLoadCues
00021652 0000                       ptr_PLC_GHZ2:		dc.w PLC_GHZ2-ArtLoadCues
00021654 0000                       ptr_PLC_LZ:		dc.w PLC_LZ-ArtLoadCues
00021656 0000                       ptr_PLC_LZ2:		dc.w PLC_LZ2-ArtLoadCues
00021658 0000                       ptr_PLC_MZ:		dc.w PLC_MZ-ArtLoadCues
0002165A 0000                       ptr_PLC_MZ2:		dc.w PLC_MZ2-ArtLoadCues
0002165C 0000                       ptr_PLC_SLZ:		dc.w PLC_SLZ-ArtLoadCues
0002165E 0000                       ptr_PLC_SLZ2:		dc.w PLC_SLZ2-ArtLoadCues
00021660 0000                       ptr_PLC_SYZ:		dc.w PLC_SYZ-ArtLoadCues
00021662 0000                       ptr_PLC_SYZ2:		dc.w PLC_SYZ2-ArtLoadCues
00021664 0000                       ptr_PLC_SBZ:		dc.w PLC_SBZ-ArtLoadCues
00021666 0000                       ptr_PLC_SBZ2:		dc.w PLC_SBZ2-ArtLoadCues
00021668 0000                       ptr_PLC_TitleCard:	dc.w PLC_TitleCard-ArtLoadCues
0002166A 0000                       ptr_PLC_Boss:		dc.w PLC_Boss-ArtLoadCues
0002166C 0000                       ptr_PLC_Signpost:	dc.w PLC_Signpost-ArtLoadCues
0002166E 0000                       ptr_PLC_Warp:		dc.w PLC_Warp-ArtLoadCues
00021670 0000                       ptr_PLC_SpecialStage:	dc.w PLC_SpecialStage-ArtLoadCues
00021672                            PLC_Animals:
00021672 0000                       ptr_PLC_GHZAnimals:	dc.w PLC_GHZAnimals-ArtLoadCues
00021674 0000                       ptr_PLC_LZAnimals:	dc.w PLC_LZAnimals-ArtLoadCues
00021676 0000                       ptr_PLC_MZAnimals:	dc.w PLC_MZAnimals-ArtLoadCues
00021678 0000                       ptr_PLC_SLZAnimals:	dc.w PLC_SLZAnimals-ArtLoadCues
0002167A 0000                       ptr_PLC_SYZAnimals:	dc.w PLC_SYZAnimals-ArtLoadCues
0002167C 0000                       ptr_PLC_SBZAnimals:	dc.w PLC_SBZAnimals-ArtLoadCues
0002167E 0000                       ptr_PLC_SSResult:	dc.w PLC_SSResult-ArtLoadCues
00021680 0000                       ptr_PLC_Ending:		dc.w PLC_Ending-ArtLoadCues
00021682 0000                       ptr_PLC_TryAgain:	dc.w PLC_TryAgain-ArtLoadCues
00021684 0000                       ptr_PLC_EggmanSBZ2:	dc.w PLC_EggmanSBZ2-ArtLoadCues
00021686 0000                       ptr_PLC_FZBoss:		dc.w PLC_FZBoss-ArtLoadCues
00021688 0000                       ptr_PLC_Egg:		dc.w PLC_Egg-ArtLoadCues
0002168A 0000                       ptr_PLC_LifeIcon:		dc.w PLC_LifeIcon-ArtLoadCues
0002168C 0000                       ptr_PLC_LifeIconF:		dc.w PLC_LifeIconF-ArtLoadCues
0002168E                            
0002168E                            plcm:	macro gfx,vram
0002168E                            	dc.l gfx
0002168E                            	dc.w vram
0002168E                            	endm
0002168E                            
0002168E                            ; ---------------------------------------------------------------------------
0002168E                            ; Pattern load cues - standard block 1
0002168E                            ; ---------------------------------------------------------------------------
0002168E 0000                       PLC_Main:	dc.w ((PLC_Mainend-PLC_Main-2)/6)-1
00021690 0000 0000 D800             		plcm	Nem_Lamp, $D800		; lamppost
00021696 0000 0000 D940             		plcm	Nem_Hud, $D940		; HUD
0002169C 0000 0000 F300             		plcm	Nem_Ring, $F300		; rings		
000216A2 0000 0000 ADA0             		plcm	Nem_Points, $ADA0 	; points from enemy
000216A8                            	PLC_Mainend:
000216A8                            ; ---------------------------------------------------------------------------
000216A8                            ; Pattern load cues - standard block 2
000216A8                            ; ---------------------------------------------------------------------------
000216A8 0000                       PLC_Main2:	dc.w ((PLC_Main2end-PLC_Main2-2)/6)-1
000216AA 0000 0000 D000             		plcm	Nem_Monitors, $D000	; monitors
000216B0                            	PLC_Main2end:
000216B0                            ; ---------------------------------------------------------------------------
000216B0                            ; Pattern load cues - explosion
000216B0                            ; ---------------------------------------------------------------------------
000216B0 0000                       PLC_Explode:	dc.w ((PLC_Explodeend-PLC_Explode-2)/6)-1
000216B2 0000 0000 B400             		plcm	Nem_Explode, $B400	; explosion
000216B8                            	PLC_Explodeend:
000216B8                            ; ---------------------------------------------------------------------------
000216B8                            ; Pattern load cues - game/time	over
000216B8                            ; ---------------------------------------------------------------------------
000216B8 0000                       PLC_GameOver:	dc.w ((PLC_GameOverend-PLC_GameOver-2)/6)-1
000216BA 0000 0000 ABC0             		plcm	Nem_GameOver, $ABC0	; game/time over
000216C0                            	PLC_GameOverend:
000216C0                            ; ---------------------------------------------------------------------------
000216C0                            ; Pattern load cues - Green Hill
000216C0                            ; ---------------------------------------------------------------------------
000216C0 0000                       PLC_GHZ:	dc.w ((PLC_GHZ2-PLC_GHZ-2)/6)-1
000216C2 0000 0000 0000             		plcm	Nem_GHZ_1st, 0		; GHZ main patterns
000216C8 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
000216CE 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
000216D4 0000 0000 7A00             		plcm	Nem_PplRock, $7A00	; purple rock
000216DA 0000 0000 8000             		plcm	Nem_Crabmeat, $8000	; crabmeat enemy
000216E0 0000 0000 8880             		plcm	Nem_Mozzietron, $8880	; mozzietron enemy
000216E6 0000 0000 8F60             		plcm	Nem_Chopper, $8F60	; chopper enemy
000216EC 0000 0000 9360             		plcm	Nem_Newtron, $9360	; newtron enemy
000216F2 0000 0000 9E00             		plcm	Nem_Motobug, $9E00	; motobug enemy
000216F8 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
000216FE 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00021704 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
0002170A                            
0002170A 0000                       PLC_GHZ2:	dc.w ((PLC_GHZ2end-PLC_GHZ2-2)/6)-1
0002170C 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00021712 0000 0000 71C0             		plcm	Nem_Bridge, $71C0	; bridge
00021718 0000 0000 7300             		plcm	Nem_SpikePole, $7300	; spiked pole
0002171E 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
00021724 0000 0000 A1E0             		plcm	Nem_GhzWall1, $A1E0	; breakable wall
0002172A 0000 0000 6980             		plcm	Nem_GhzWall2, $6980	; normal wall
00021730                            	PLC_GHZ2end:
00021730                            ; ---------------------------------------------------------------------------
00021730                            ; Pattern load cues - Labyrinth
00021730                            ; ---------------------------------------------------------------------------
00021730 0000                       PLC_LZ:		dc.w ((PLC_LZ2-PLC_LZ-2)/6)-1
00021732 0000 0000 0000             		plcm	Nem_LZ,0		; LZ main patterns
00021738 0000 0000 3C00             		plcm	Nem_LzBlock1, $3C00	; block
0002173E                            		;plcm	Nem_LzBlock2, $3E00	; blocks
0002173E 0000 0000 6000             		plcm	Nem_Water, $6000	; water	surface
00021744 0000 0000 6200             		plcm	Nem_LzSpikeBall, $6200	; spiked ball
0002174A 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00021750 0000 0000 7780             		plcm	Nem_LzBlock3, $7780	; block
00021756 0000 0000 7880             		plcm	Nem_LzDoor1, $7880	; vertical door
0002175C 0000 0000 7980             		plcm	Nem_Harpoon, $7980	; harpoon
00021762 0000 0000 94C0             		plcm	Nem_Burrobot, $94C0	; burrobot enemy
00021768                            
00021768 0000                       PLC_LZ2:	dc.w ((PLC_LZ2end-PLC_LZ2-2)/6)-1
0002176A 0000 0000 7BC0             		plcm	Nem_LzPole, $7BC0	; pole that breaks
00021770 0000 0000 7CC0             		plcm	Nem_LzDoor2, $7CC0	; large	horizontal door
00021776                            		;plcm	Nem_LzWheel, $7EC0	; wheel
00021776                            		;plcm	Nem_Gargoyle, $5D20	; gargoyle head
00021776 0000 0000 89E0             		plcm	Nem_LzPlatfm, $89E0	; rising platform
0002177C 0000 0000 8CE0             		plcm	Nem_Orbinaut, $8CE0	; orbinaut enemy
00021782 0000 0000 90C0             		plcm	Nem_Jaws, $90C0		; jaws enemy
00021788 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
0002178E 0000 0000 A000             		plcm	Nem_Cork, $A000		; cork block
00021794 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
0002179A 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
000217A0 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
000217A6                            	PLC_LZ2end:
000217A6                            ; ---------------------------------------------------------------------------
000217A6                            ; Pattern load cues - Marble
000217A6                            ; ---------------------------------------------------------------------------
000217A6 0000                       PLC_MZ:		dc.w ((PLC_MZ2-PLC_MZ-2)/6)-1
000217A8 0000 0000 0000             		plcm	Nem_MZ,0		; MZ main patterns
000217AE 0000 0000 9FE0             		plcm	Nem_Cater, $9FE0	; caterkiller enemy
000217B4 0000 0000 6040             		plcm	Nem_BallHog, $6040	; ball hog enemy
000217BA 0000 0000 68A0             		plcm	Nem_MzFire, $68A0	; fireballs
000217C0                            	;	plcm	Nem_MzGlass, $71C0	; green	glassy block
000217C0 0000 0000 75A0             		plcm	Nem_Cutter, $75A0	; pizza	cutter
000217C6 0000 0000 8000             		plcm	Nem_Bomb, $8000
000217CC 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
000217D2 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
000217D8 0000 0000 9700             		plcm	Nem_Basaran, $9700	; basaran enemy
000217DE                            
000217DE 0000                       PLC_MZ2:	dc.w ((PLC_MZ2end-PLC_MZ2-2)/6)-1
000217E0 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
000217E6 0000 0000 5D40             		plcm	Nem_SbzDoor1, $5D40	; door
000217EC                            		;plcm	Nem_MzSwitch, $A260	; switch
000217EC 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
000217F2 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
000217F8 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
000217FE 0000 0000 5700             		plcm	Nem_MzBlock, $5700	; green	stone block
00021804 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
0002180A                            	PLC_MZ2end:
0002180A                            ; ---------------------------------------------------------------------------
0002180A                            ; Pattern load cues - Star Light
0002180A                            ; ---------------------------------------------------------------------------
0002180A 0000                       PLC_SLZ:	dc.w ((PLC_SLZ2-PLC_SLZ-2)/6)-1
0002180C 0000 0000 0000             		plcm	Nem_SLZ,0		; SLZ main patterns
00021812 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00021818 0000 0000 8520             		plcm	Nem_Orbinaut, $8520	; orbinaut enemy
0002181E 0000 0000 9000             		plcm	Nem_MzFire, $9000	; fireballs
00021824 0000 0000 9C00             		plcm	Nem_SlzBlock, $9C00	; block
0002182A 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00021830 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00021836 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
0002183C 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00021842                            
00021842 0000                       PLC_SLZ2:	dc.w ((PLC_SLZ2end-PLC_SLZ2-2)/6)-1
00021844 0000 0000 6E80             		plcm	Nem_Seesaw, $6E80	; seesaw
0002184A 0000 0000 7400             		plcm	Nem_Fan, $7400		; fan
00021850 0000 0000 7980             		plcm	Nem_Pylon, $7980	; foreground pylon
00021856 0000 0000 7B80             		plcm	Nem_SlzSwing, $7B80	; swinging platform
0002185C 0000 0000 9B00             		plcm	Nem_SlzCannon, $9B00	; fireball launcher
00021862 0000 0000 9E00             		plcm	Nem_SlzSpike, $9E00	; spikeball
00021868                            	PLC_SLZ2end:
00021868                            ; ---------------------------------------------------------------------------
00021868                            ; Pattern load cues - Spring Yard
00021868                            ; ---------------------------------------------------------------------------
00021868 0000                       PLC_SYZ:	dc.w ((PLC_SYZ2-PLC_SYZ-2)/6)-1
0002186A 0000 0000 0000             		plcm	Nem_SYZ,0		; SYZ main patterns
00021870                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00021870                            		;plcm	Nem_SbzDoor1, $5D40	; door
00021870 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
00021876 0000 0000 7EA0             		plcm	Nem_Bubbles, $7EA0	; bubbles and numbers
0002187C                            		;plcm	Nem_Buzz, $8880		; buzz bomber enemy
0002187C 0000 0000 8F60             		plcm	Nem_Yadrin, $8F60	; yadrin enemy
00021882 0000 0000 9700             		plcm	Nem_Roller, $9700	; roller enemy
00021888 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
0002188E 0000 0000 7840             		plcm	Nem_SbzFloor, $7840	; collapsing floor
00021894 0000 0000 8BA0             		plcm	Nem_SbzBlock, $8BA0	; vanishing block
0002189A 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
000218A0                            
000218A0 0000                       PLC_SYZ2:	dc.w ((PLC_SYZ2end-PLC_SYZ2-2)/6)-1
000218A2                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
000218A2 0000 0000 7000             		plcm	Nem_Bumper, $7000	; bumper
000218A8 0000 0000 72C0             		plcm	Nem_SyzSpike1, $72C0	; large	spikeball
000218AE 0000 0000 7740             		plcm	Nem_SyzSpike2, $7740	; small	spikeball
000218B4                            		;plcm	Nem_TrapDoor, $9240	; trapdoor
000218B4 0000 0000 78C0             		plcm	Nem_SbzFloor, $78C0	; collapsing floor
000218BA                            		;plcm	Nem_SpinPform, $9BE0	; small	spinning platform
000218BA 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
000218C0 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
000218C6 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
000218CC 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
000218D2                            	PLC_SYZ2end:
000218D2                            ; ---------------------------------------------------------------------------
000218D2                            ; Pattern load cues - Scrap Brain
000218D2                            ; ---------------------------------------------------------------------------
000218D2 0000                       PLC_SBZ:	dc.w ((PLC_SBZ2-PLC_SBZ-2)/6)-1
000218D4 0000 0000 0000             		plcm	Nem_SBZ,0		; SBZ main patterns
000218DA                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
000218DA                            		;plcm	Nem_SbzDoor1, $5D00	; door
000218DA                            		;plcm	Nem_Girder, $5E00	; girder
000218DA 0000 0000 6880             		plcm	Nem_SbzWheel1, $6880	; spot on large	wheel
000218E0 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
000218E6                            		;plcm	Nem_SbzWheel2, $6900	; wheel	that grabs Sonic
000218E6 0000 0000 7220             		plcm	Nem_SyzSpike1, $7220	; large	spikeball
000218EC 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
000218F2 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
000218F8 0000 0000 9860             		plcm	Nem_SbzBlock, $9860	; vanishing block
000218FE                            
000218FE 0000                       PLC_SBZ2:	dc.w ((PLC_SBZ2end-PLC_SBZ2-2)/6)-1
00021900 0000 0000 5600             		plcm	Nem_Cater, $5600	; caterkiller enemy
00021906 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
0002190C 0000 0000 8C00             		plcm	Nem_SlideFloor, $8C00	; floor	that slides away
00021912                            		;plcm	Nem_SbzDoor2, $8DE0	; horizontal door
00021912 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00021918 0000 0000 9240             		plcm	Nem_TrapDoor, $9240	; trapdoor
0002191E 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00021924 0000 0000 9BE0             		plcm	Nem_SpinPform, $9BE0	; small	spinning platform
0002192A 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00021930 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00021936 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
0002193C 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00021942                            	PLC_SBZ2end:
00021942                            ; ---------------------------------------------------------------------------
00021942                            ; Pattern load cues - title card
00021942                            ; ---------------------------------------------------------------------------
00021942 0000                       PLC_TitleCard:	dc.w ((PLC_TitleCardend-PLC_TitleCard-2)/6)-1
00021944 0000 0000 B000             		plcm	Nem_TitleCard, $B000
0002194A                            	PLC_TitleCardend:
0002194A                            ; ---------------------------------------------------------------------------
0002194A                            ; Pattern load cues - act 3 boss
0002194A                            ; ---------------------------------------------------------------------------
0002194A 0000                       PLC_Boss:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
0002194C 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00021952 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00021958 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
0002195E                            		;plcm	Nem_Bomb, $A300		; bomb enemy ((gets overwritten)
0002195E                            		;plcm	Nem_SlzSpike, $A300	; spikeball ((SLZ boss)
0002195E 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00021964 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
0002196A                            	PLC_Bossend:
0002196A                            ; ---------------------------------------------------------------------------
0002196A                            ; Pattern load cues - act 1/2 signpost
0002196A                            ; ---------------------------------------------------------------------------
0002196A 0000                       PLC_Signpost:	dc.w ((PLC_Signpostend-PLC_Signpost-2)/6)-1
0002196C 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
00021972 0000 0000 96C0             		plcm	Nem_Bonus, $96C0	; hidden bonus points
00021978 0000 0000 8C40             		plcm	Nem_BigFlash, $8C40	; giant	ring flash effect
0002197E                            		;plcm	Nem_SSEmerald, $EE00	; emeralds
0002197E                            	PLC_Signpostend:
0002197E                            ; ---------------------------------------------------------------------------
0002197E                            ; Pattern load cues - beta special stage warp effect
0002197E                            ; ---------------------------------------------------------------------------
0002197E                            PLC_Warp:
0002197E                            	PLC_Warpend:
0002197E                            ; ---------------------------------------------------------------------------
0002197E                            ; Pattern load cues - special stage
0002197E                            ; ---------------------------------------------------------------------------
0002197E 0000                       PLC_SpecialStage:	dc.w ((PLC_SpeStageend-PLC_SpecialStage-2)/6)-1
00021980 0000 0000 0000             		plcm	Nem_SSBgCloud, 0	; bubble and cloud background
00021986 0000 0000 0A20             		plcm	Nem_SSBgFish, $A20	; bird and fish	background
0002198C 0000 0000 2840             		plcm	Nem_SSWalls, $2840	; walls
00021992 0000 0000 4760             		plcm	Nem_Bumper, $4760	; bumper
00021998 0000 0000 4A20             		plcm	Nem_SSGOAL, $4A20	; GOAL block
0002199E 0000 0000 4C60             		plcm	Nem_SSUpDown, $4C60	; UP and DOWN blocks
000219A4 0000 0000 5E00             		plcm	Nem_SSRBlock, $5E00	; R block
000219AA 0000 0000 6E00             		plcm	Nem_SS1UpBlock, $6E00	; 1UP block
000219B0 0000 0000 7E00             		plcm	Nem_SSEmStars, $7E00	; emerald collection stars
000219B6 0000 0000 8E00             		plcm	Nem_SSRedWhite, $8E00	; red and white	block
000219BC 0000 0000 9E00             		plcm	Nem_SSGhost, $9E00	; ghost	block
000219C2 0000 0000 AE00             		plcm	Nem_SSWBlock, $AE00	; W block
000219C8 0000 0000 BE00             		plcm	Nem_SSGlass, $BE00	; glass	block
000219CE 0000 0000 EE00             		plcm	Nem_SSEmerald, $EE00	; emeralds
000219D4                            		;plcm	Nem_SSZone1, $F2E0	; ZONE 1 block
000219D4                            		;plcm	Nem_SSZone2, $F400	; ZONE 2 block
000219D4                            		;plcm	Nem_SSZone3, $F520	; ZONE 3 block
000219D4                            	PLC_SpeStageend:
000219D4                            		;plcm	Nem_SSZone4, $F2E0	; ZONE 4 block
000219D4                            		;plcm	Nem_SSZone5, $F400	; ZONE 5 block
000219D4                            		;plcm	Nem_SSZone6, $F520	; ZONE 6 block
000219D4                            ; ---------------------------------------------------------------------------
000219D4                            ; Pattern load cues - GHZ animals
000219D4                            ; ---------------------------------------------------------------------------
000219D4 0000                       PLC_GHZAnimals:	dc.w ((PLC_GHZAnimalsend-PLC_GHZAnimals-2)/6)-1
000219D6 0000 0000 B000             		plcm	Nem_Rabbit, $B000	; rabbit
000219DC 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
000219E2                            	PLC_GHZAnimalsend:
000219E2                            ; ---------------------------------------------------------------------------
000219E2                            ; Pattern load cues - LZ animals
000219E2                            ; ---------------------------------------------------------------------------
000219E2 0000                       PLC_LZAnimals:	dc.w ((PLC_LZAnimalsend-PLC_LZAnimals-2)/6)-1
000219E4 0000 0000 B000             		plcm	Nem_BlackBird, $B000	; blackbird
000219EA 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
000219F0                            	PLC_LZAnimalsend:
000219F0                            ; ---------------------------------------------------------------------------
000219F0                            ; Pattern load cues - MZ animals
000219F0                            ; ---------------------------------------------------------------------------
000219F0 0000                       PLC_MZAnimals:	dc.w ((PLC_MZAnimalsend-PLC_MZAnimals-2)/6)-1
000219F2 0000 0000 B000             		plcm	Nem_Squirrel, $B000	; squirrel
000219F8 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
000219FE                            	PLC_MZAnimalsend:
000219FE                            ; ---------------------------------------------------------------------------
000219FE                            ; Pattern load cues - SLZ animals
000219FE                            ; ---------------------------------------------------------------------------
000219FE 0000                       PLC_SLZAnimals:	dc.w ((PLC_SLZAnimalsend-PLC_SLZAnimals-2)/6)-1
00021A00 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00021A06 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00021A0C                            	PLC_SLZAnimalsend:
00021A0C                            ; ---------------------------------------------------------------------------
00021A0C                            ; Pattern load cues - SYZ animals
00021A0C                            ; ---------------------------------------------------------------------------
00021A0C 0000                       PLC_SYZAnimals:	dc.w ((PLC_SYZAnimalsend-PLC_SYZAnimals-2)/6)-1
00021A0E 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00021A14 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00021A1A                            	PLC_SYZAnimalsend:
00021A1A                            ; ---------------------------------------------------------------------------
00021A1A                            ; Pattern load cues - SBZ animals
00021A1A                            ; ---------------------------------------------------------------------------
00021A1A 0000                       PLC_SBZAnimals:	dc.w ((PLC_SBZAnimalsend-PLC_SBZAnimals-2)/6)-1
00021A1C 0000 0000 B000             		plcm	Nem_Rabbit, $B000		; rabbit
00021A22 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00021A28                            	PLC_SBZAnimalsend:
00021A28                            ; ---------------------------------------------------------------------------
00021A28                            ; Pattern load cues - special stage results screen
00021A28                            ; ---------------------------------------------------------------------------
00021A28 0000                       PLC_SSResult:dc.w ((PLC_SpeStResultend-PLC_SSResult-2)/6)-1
00021A2A 0000 0000 A820             		plcm	Nem_ResultEm, $A820	; emeralds
00021A30 0000 0000 AA20             		plcm	Nem_MiniSonic, $AA20	; mini Sonic
00021A36                            	PLC_SpeStResultend:
00021A36                            ; ---------------------------------------------------------------------------
00021A36                            ; Pattern load cues - ending sequence
00021A36                            ; ---------------------------------------------------------------------------
00021A36 0000                       PLC_Ending:	dc.w ((PLC_Endingend-PLC_Ending-2)/6)-1
00021A38 0000 0000 0000             		plcm	Nem_GHZ_1st,0		; GHZ main patterns
00021A3E 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00021A44 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00021A4A                            		;plcm	Nem_EndFlower, $7400	; flowers
00021A4A 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00021A50 0000 0000 7C20             		plcm	Nem_EndSonic, $7C20	; Sonic
00021A56 0000 0000 AA60             		plcm	Nem_Rabbit, $AA60	; rabbit
00021A5C 0000 0000 ACA0             		plcm	Nem_Chicken, $ACA0	; chicken
00021A62 0000 0000 AE60             		plcm	Nem_BlackBird, $AE60	; blackbird
00021A68 0000 0000 B0A0             		plcm	Nem_Seal, $B0A0		; seal
00021A6E 0000 0000 B260             		plcm	Nem_Pig, $B260		; pig
00021A74 0000 0000 B4A0             		plcm	Nem_Flicky, $B4A0	; flicky
00021A7A 0000 0000 B660             		plcm	Nem_Squirrel, $B660	; squirrel
00021A80 0000 0000 B8A0             		plcm	Nem_EndStH, $B8A0	; "SONIC THE HEDGEHOG"
00021A86                            	PLC_Endingend:
00021A86                            ; ---------------------------------------------------------------------------
00021A86                            ; Pattern load cues - "TRY AGAIN" and "END" screens
00021A86                            ; ---------------------------------------------------------------------------
00021A86 0000                       PLC_TryAgain:	dc.w ((PLC_TryAgainend-PLC_TryAgain-2)/6)-1
00021A88 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00021A8E 0000 0000 7C20             		plcm	Nem_TryAgain, $7C20	; Eggman
00021A94 0000 0000 B400             		plcm	Nem_CreditText, $B400	; credits alphabet
00021A9A                            	PLC_TryAgainend:
00021A9A                            ; ---------------------------------------------------------------------------
00021A9A                            ; Pattern load cues - Eggman on SBZ 2
00021A9A                            ; ---------------------------------------------------------------------------
00021A9A 0000                       PLC_EggmanSBZ2:	dc.w ((PLC_EggmanSBZ2end-PLC_EggmanSBZ2-2)/6)-1
00021A9C 0000 0000 A300             		plcm	Nem_SbzBlock, $A300	; block
00021AA2 0000 0000 8000             		plcm	Nem_Sbz2Eggman, $8000	; Eggman
00021AA8 0000 0000 9400             		plcm	Nem_LzSwitch, $9400	; switch
00021AAE                            	PLC_EggmanSBZ2end:
00021AAE                            ; ---------------------------------------------------------------------------
00021AAE                            ; Pattern load cues - final boss
00021AAE                            ; ---------------------------------------------------------------------------
00021AAE 0000                       PLC_FZBoss:	dc.w ((PLC_FZBossend-PLC_FZBoss-2)/6)-1
00021AB0 0000 0000 7400             		plcm	Nem_FzEggman, $7400	; Eggman after boss
00021AB6 0000 0000 6000             		plcm	Nem_FzBoss, $6000	; FZ boss
00021ABC 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00021AC2 0000 0000 8E00             		plcm	Nem_Sbz2Eggman, $8E00	; Eggman without ship
00021AC8 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00021ACE                            	PLC_FZBossend:
00021ACE                            ; ---------------------------------------------------------------------------
00021ACE                            ; Pattern load cues - Eggman
00021ACE                            ; ---------------------------------------------------------------------------
00021ACE 0004                       PLC_Egg:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00021AD0 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00021AD6 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00021ADC 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00021AE2 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00021AE8 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00021AEE 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00021AF4                            	PLC_Eggend:
00021AF4                            		even
00021AF4                            ; ---------------------------------------------------------------------------
00021AF4                            ; Pattern load cues - Life Icon
00021AF4                            ; ---------------------------------------------------------------------------	
00021AF4 0000                       PLC_LifeIcon:	dc.w ((PLC_LifeIcon_end-PLC_LifeIcon-2)/6)-1
00021AF6 0000 0000 FA80             		plcm	Nem_Lives, $FA80	; lives	counter	
00021AFC                            	PLC_LifeIcon_end: 
00021AFC                            		even	
00021AFC                            ; ---------------------------------------------------------------------------
00021AFC                            ; Pattern load cues - Life Icon (Future)
00021AFC                            ; ---------------------------------------------------------------------------	
00021AFC 0000                       PLC_LifeIconF:	dc.w ((PLC_LifeIconF_end-PLC_LifeIconF-2)/6)-1
00021AFE 0000 0000 FA80             		plcm	Nem_Future, $FA80	; lives	counter	
00021B04                            	PLC_LifeIconF_end: ; nahhhhh... too far, bro
00021B04                            		even			
00021B04                            ; ---------------------------------------------------------------------------
00021B04                            ; Pattern load cue IDs
00021B04                            ; ---------------------------------------------------------------------------
00021B04 =00000000                  plcid_Main:		equ (ptr_PLC_Main-ArtLoadCues)/2	; 0
00021B04 =00000001                  plcid_Main2:		equ (ptr_PLC_Main2-ArtLoadCues)/2	; 1
00021B04 =00000002                  plcid_Explode:		equ (ptr_PLC_Explode-ArtLoadCues)/2	; 2
00021B04 =00000003                  plcid_GameOver:		equ (ptr_PLC_GameOver-ArtLoadCues)/2	; 3
00021B04 =00000004                  plcid_GHZ:		equ (ptr_PLC_GHZ-ArtLoadCues)/2		; 4
00021B04 =00000005                  plcid_GHZ2:		equ (ptr_PLC_GHZ2-ArtLoadCues)/2	; 5
00021B04 =00000006                  plcid_LZ:		equ (ptr_PLC_LZ-ArtLoadCues)/2		; 6
00021B04 =00000007                  plcid_LZ2:		equ (ptr_PLC_LZ2-ArtLoadCues)/2		; 7
00021B04 =00000008                  plcid_MZ:		equ (ptr_PLC_MZ-ArtLoadCues)/2		; 8
00021B04 =00000009                  plcid_MZ2:		equ (ptr_PLC_MZ2-ArtLoadCues)/2		; 9
00021B04 =0000000A                  plcid_SLZ:		equ (ptr_PLC_SLZ-ArtLoadCues)/2		; $A
00021B04 =0000000B                  plcid_SLZ2:		equ (ptr_PLC_SLZ2-ArtLoadCues)/2	; $B
00021B04 =0000000C                  plcid_SYZ:		equ (ptr_PLC_SYZ-ArtLoadCues)/2		; $C
00021B04 =0000000D                  plcid_SYZ2:		equ (ptr_PLC_SYZ2-ArtLoadCues)/2	; $D
00021B04 =0000000E                  plcid_SBZ:		equ (ptr_PLC_SBZ-ArtLoadCues)/2		; $E
00021B04 =0000000F                  plcid_SBZ2:		equ (ptr_PLC_SBZ2-ArtLoadCues)/2	; $F
00021B04 =00000010                  plcid_TitleCard:	equ (ptr_PLC_TitleCard-ArtLoadCues)/2	; $10
00021B04 =00000011                  plcid_Boss:		equ (ptr_PLC_Boss-ArtLoadCues)/2	; $11
00021B04 =00000012                  plcid_Signpost:		equ (ptr_PLC_Signpost-ArtLoadCues)/2	; $12
00021B04 =00000013                  plcid_Warp:		equ (ptr_PLC_Warp-ArtLoadCues)/2	; $13
00021B04 =00000014                  plcid_SpecialStage:	equ (ptr_PLC_SpecialStage-ArtLoadCues)/2 ; $14
00021B04 =00000015                  plcid_GHZAnimals:	equ (ptr_PLC_GHZAnimals-ArtLoadCues)/2	; $15
00021B04 =00000016                  plcid_LZAnimals:	equ (ptr_PLC_LZAnimals-ArtLoadCues)/2	; $16
00021B04 =00000017                  plcid_MZAnimals:	equ (ptr_PLC_MZAnimals-ArtLoadCues)/2	; $17
00021B04 =00000018                  plcid_SLZAnimals:	equ (ptr_PLC_SLZAnimals-ArtLoadCues)/2	; $18
00021B04 =00000019                  plcid_SYZAnimals:	equ (ptr_PLC_SYZAnimals-ArtLoadCues)/2	; $19
00021B04 =0000001A                  plcid_SBZAnimals:	equ (ptr_PLC_SBZAnimals-ArtLoadCues)/2	; $1A
00021B04 =0000001B                  plcid_SSResult:		equ (ptr_PLC_SSResult-ArtLoadCues)/2	; $1B
00021B04 =0000001C                  plcid_Ending:		equ (ptr_PLC_Ending-ArtLoadCues)/2	; $1C
00021B04 =0000001D                  plcid_TryAgain:		equ (ptr_PLC_TryAgain-ArtLoadCues)/2	; $1D
00021B04 =0000001E                  plcid_EggmanSBZ2:	equ (ptr_PLC_EggmanSBZ2-ArtLoadCues)/2	; $1E
00021B04 =0000001F                  plcid_FZBoss:		equ (ptr_PLC_FZBoss-ArtLoadCues)/2	; $1F
00021B04 =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $20
00021B04 =00000021                  plcid_LifeIcon:		equ (ptr_PLC_LifeIcon-ArtLoadCues)/2	; $21
00021B04 =00000022                  plcid_LifeIconF:		equ (ptr_PLC_LifeIconF-ArtLoadCues)/2	; $21
00021B04 =00000022                  plcid_LifeIconF:		equ (ptr_PLC_LifeIconF-ArtLoadCues)/2	; $21
00021B04                            
00021C00                            			dcb.b	$300,$FF
00021F00                            	Nem_SegaLogo:	incbin	"artnem\Sega Logo (JP1).bin" ; large Sega logo
00022370                            			even
00022370                            	Eni_SegaLogo:	incbin	"tilemaps\Sega Logo (JP1).bin" ; large Sega logo (mappings)
0002246C                            			even
0002246C                            Eni_Title:	incbin	"tilemaps\Title Screen.bin" ; title screen foreground (mappings)
0002254C                            		even
0002254C                            Nem_TitleFg:	incbin	"artnem\Title Screen Foreground.bin"
000239B8                            		even
000239B8                            Nem_TitleSonic:	incbin	"artnem\Title Screen Sonic.bin"
00025498                            		even
00025498                            Nem_TitleTM:	incbin	"artnem\Title Screen TM.bin"
000254CC                            		even
000254CC                            Nem_TitleMenu:   incbin   "artnem\titlemenu.bin"  
000256FE 00                         		even		
000256FE                            Eni_JapNames:	incbin	"tilemaps\Hidden Japanese Credits.bin" ; Japanese credits (mappings)
000257BC                            		even
000257BC                            Nem_JapNames:	incbin	"artnem\Hidden Japanese Credits.bin"
00025C64                            		even
00025C64                            
00025C64                            Map_Sonic:	include	"_maps\Sonic.asm"
00025C64                            ; --------------------------------------------------------------------------------
00025C64                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00025C64                            ; --------------------------------------------------------------------------------
00025C64                            
00025C64                            SME_9IQLQ:	
00025C64 0000 0000                  		dc.w SME_9IQLQ_1EE-SME_9IQLQ, SME_9IQLQ_1EF-SME_9IQLQ	
00025C68 0000 0000                  		dc.w SME_9IQLQ_204-SME_9IQLQ, SME_9IQLQ_232-SME_9IQLQ	
00025C6C 0000 0000                  		dc.w SME_9IQLQ_265-SME_9IQLQ, SME_9IQLQ_27A-SME_9IQLQ	
00025C70 0000 0000                  		dc.w SME_9IQLQ_28A-SME_9IQLQ, SME_9IQLQ_29A-SME_9IQLQ	
00025C74 0000 0000                  		dc.w SME_9IQLQ_2AF-SME_9IQLQ, SME_9IQLQ_2BA-SME_9IQLQ	
00025C78 0000 0000                  		dc.w SME_9IQLQ_2CA-SME_9IQLQ, SME_9IQLQ_2DA-SME_9IQLQ	
00025C7C 0000 0000                  		dc.w SME_9IQLQ_2EA-SME_9IQLQ, SME_9IQLQ_2FF-SME_9IQLQ	
00025C80 0000 0000                  		dc.w SME_9IQLQ_30F-SME_9IQLQ, SME_9IQLQ_333-SME_9IQLQ	
00025C84 0000 0000                  		dc.w SME_9IQLQ_34D-SME_9IQLQ, SME_9IQLQ_358-SME_9IQLQ	
00025C88 0000 0000                  		dc.w SME_9IQLQ_368-SME_9IQLQ, SME_9IQLQ_37D-SME_9IQLQ	
00025C8C 0000 0000                  		dc.w SME_9IQLQ_388-SME_9IQLQ, SME_9IQLQ_398-SME_9IQLQ	
00025C90 0000 0000                  		dc.w SME_9IQLQ_3B2-SME_9IQLQ, SME_9IQLQ_3CC-SME_9IQLQ	
00025C94 0000 0000                  		dc.w SME_9IQLQ_3EB-SME_9IQLQ, SME_9IQLQ_400-SME_9IQLQ	
00025C98 0000 0000                  		dc.w SME_9IQLQ_410-SME_9IQLQ, SME_9IQLQ_42A-SME_9IQLQ	
00025C9C 0000 0000                  		dc.w SME_9IQLQ_43F-SME_9IQLQ, SME_9IQLQ_44F-SME_9IQLQ	
00025CA0 0000 0000                  		dc.w SME_9IQLQ_469-SME_9IQLQ, SME_9IQLQ_47E-SME_9IQLQ	
00025CA4 0000 0000                  		dc.w SME_9IQLQ_489-SME_9IQLQ, SME_9IQLQ_494-SME_9IQLQ	
00025CA8 0000 0000                  		dc.w SME_9IQLQ_4AE-SME_9IQLQ, SME_9IQLQ_4C3-SME_9IQLQ	
00025CAC 0000 0000                  		dc.w SME_9IQLQ_4CE-SME_9IQLQ, SME_9IQLQ_4DE-SME_9IQLQ	
00025CB0 0000 0000                  		dc.w SME_9IQLQ_4EE-SME_9IQLQ, SME_9IQLQ_50D-SME_9IQLQ	
00025CB4 0000 0000                  		dc.w SME_9IQLQ_52C-SME_9IQLQ, SME_9IQLQ_541-SME_9IQLQ	
00025CB8 0000 0000                  		dc.w SME_9IQLQ_551-SME_9IQLQ, SME_9IQLQ_56B-SME_9IQLQ	
00025CBC 0000 0000                  		dc.w SME_9IQLQ_580-SME_9IQLQ, SME_9IQLQ_590-SME_9IQLQ	
00025CC0 0000 0000                  		dc.w SME_9IQLQ_5AA-SME_9IQLQ, SME_9IQLQ_5B5-SME_9IQLQ	
00025CC4 0000 0000                  		dc.w SME_9IQLQ_5C0-SME_9IQLQ, SME_9IQLQ_5CB-SME_9IQLQ	
00025CC8 0000 0000                  		dc.w SME_9IQLQ_5D6-SME_9IQLQ, SME_9IQLQ_5E1-SME_9IQLQ	
00025CCC 0000 0000                  		dc.w SME_9IQLQ_5EC-SME_9IQLQ, SME_9IQLQ_5F7-SME_9IQLQ	
00025CD0 0000 0000                  		dc.w SME_9IQLQ_602-SME_9IQLQ, SME_9IQLQ_617-SME_9IQLQ	
00025CD4 0000 0000                  		dc.w SME_9IQLQ_627-SME_9IQLQ, SME_9IQLQ_637-SME_9IQLQ	
00025CD8 0000 0000                  		dc.w SME_9IQLQ_647-SME_9IQLQ, SME_9IQLQ_65C-SME_9IQLQ	
00025CDC 0000 0000                  		dc.w SME_9IQLQ_66C-SME_9IQLQ, SME_9IQLQ_67C-SME_9IQLQ	
00025CE0 0000 0000                  		dc.w SME_9IQLQ_68C-SME_9IQLQ, SME_9IQLQ_697-SME_9IQLQ	
00025CE4 0000 0000                  		dc.w SME_9IQLQ_6A2-SME_9IQLQ, SME_9IQLQ_6AD-SME_9IQLQ	
00025CE8 0000 0000                  		dc.w SME_9IQLQ_6B8-SME_9IQLQ, SME_9IQLQ_6C3-SME_9IQLQ	
00025CEC 0000 0000                  		dc.w SME_9IQLQ_6CE-SME_9IQLQ, SME_9IQLQ_6D9-SME_9IQLQ	
00025CF0 0000 0000                  		dc.w SME_9IQLQ_6E4-SME_9IQLQ, SME_9IQLQ_6F9-SME_9IQLQ	
00025CF4 0000 0000                  		dc.w SME_9IQLQ_709-SME_9IQLQ, SME_9IQLQ_714-SME_9IQLQ	
00025CF8 0000 0000                  		dc.w SME_9IQLQ_724-SME_9IQLQ, SME_9IQLQ_739-SME_9IQLQ	
00025CFC 0000 0000                  		dc.w SME_9IQLQ_749-SME_9IQLQ, SME_9IQLQ_754-SME_9IQLQ	
00025D00 0000 0000                  		dc.w SME_9IQLQ_764-SME_9IQLQ, SME_9IQLQ_774-SME_9IQLQ	
00025D04 0000 0000                  		dc.w SME_9IQLQ_784-SME_9IQLQ, SME_9IQLQ_7B2-SME_9IQLQ	
00025D08 0000 0000                  		dc.w SME_9IQLQ_7E0-SME_9IQLQ, SME_9IQLQ_7F0-SME_9IQLQ	
00025D0C 0000 0000                  		dc.w SME_9IQLQ_800-SME_9IQLQ, SME_9IQLQ_810-SME_9IQLQ	
00025D10 0000 0000                  		dc.w SME_9IQLQ_82A-SME_9IQLQ, SME_9IQLQ_83A-SME_9IQLQ	
00025D14 0000 0000                  		dc.w SME_9IQLQ_84A-SME_9IQLQ, SME_9IQLQ_864-SME_9IQLQ	
00025D18 0000 0000                  		dc.w SME_9IQLQ_87E-SME_9IQLQ, SME_9IQLQ_893-SME_9IQLQ	
00025D1C 0000 0000                  		dc.w SME_9IQLQ_8A8-SME_9IQLQ, SME_9IQLQ_8BD-SME_9IQLQ	
00025D20 0000 0000                  		dc.w SME_9IQLQ_8D2-SME_9IQLQ, SME_9IQLQ_8D8-SME_9IQLQ	
00025D24 0000 0000                  		dc.w SME_9IQLQ_8DE-SME_9IQLQ, SME_9IQLQ_8E4-SME_9IQLQ	
00025D28 0000 0000                  		dc.w SME_9IQLQ_8EA-SME_9IQLQ, SME_9IQLQ_8F0-SME_9IQLQ	
00025D2C 0000 0000                  		dc.w SME_9IQLQ_8F6-SME_9IQLQ, SME_9IQLQ_8FC-SME_9IQLQ	
00025D30 0000 0000                  		dc.w SME_9IQLQ_90C-SME_9IQLQ, SME_9IQLQ_912-SME_9IQLQ	
00025D34 0000 0000                  		dc.w SME_9IQLQ_91D-SME_9IQLQ, SME_9IQLQ_923-SME_9IQLQ	
00025D38 0000 0000                  		dc.w SME_9IQLQ_92E-SME_9IQLQ, SME_9IQLQ_934-SME_9IQLQ	
00025D3C 0000 0000                  		dc.w SME_9IQLQ_949-SME_9IQLQ, SME_9IQLQ_96D-SME_9IQLQ	
00025D40 0000 0000                  		dc.w SME_9IQLQ_987-SME_9IQLQ, SME_9IQLQ_997-SME_9IQLQ	
00025D44 0000 0000                  		dc.w SME_9IQLQ_9B1-SME_9IQLQ, SME_9IQLQ_9C6-SME_9IQLQ	
00025D48 0000 0000                  		dc.w SME_9IQLQ_9DB-SME_9IQLQ, SME_9IQLQ_9F0-SME_9IQLQ	
00025D4C 0000 0000                  		dc.w SME_9IQLQ_A1E-SME_9IQLQ, SME_9IQLQ_A2E-SME_9IQLQ	
00025D50 0000 0000                  		dc.w SME_9IQLQ_A3E-SME_9IQLQ, SME_9IQLQ_A4E-SME_9IQLQ	
00025D54 0000 0000                  		dc.w SME_9IQLQ_A5E-SME_9IQLQ, SME_9IQLQ_A82-SME_9IQLQ	
00025D58 0000 0000                  		dc.w SME_9IQLQ_A83-SME_9IQLQ, SME_9IQLQ_A84-SME_9IQLQ	
00025D5C 0000 0000                  		dc.w SME_9IQLQ_A94-SME_9IQLQ, SME_9IQLQ_AA4-SME_9IQLQ	
00025D60 0000 0000                  		dc.w SME_9IQLQ_AB4-SME_9IQLQ, SME_9IQLQ_ABF-SME_9IQLQ	
00025D64 0000 0000                  		dc.w SME_9IQLQ_ACF-SME_9IQLQ, SME_9IQLQ_ADF-SME_9IQLQ	
00025D68 0000 0000                  		dc.w SME_9IQLQ_AEF-SME_9IQLQ, SME_9IQLQ_AFF-SME_9IQLQ	
00025D6C 0000 0000                  		dc.w SME_9IQLQ_B14-SME_9IQLQ, SME_9IQLQ_B3D-SME_9IQLQ	
00025D70 0000 0000                  		dc.w SME_9IQLQ_B52-SME_9IQLQ, SME_9IQLQ_B67-SME_9IQLQ	
00025D74 0000 0000                  		dc.w SME_9IQLQ_B81-SME_9IQLQ, SME_9IQLQ_B9B-SME_9IQLQ	
00025D78 0000 0000                  		dc.w SME_9IQLQ_BA6-SME_9IQLQ, SME_9IQLQ_BC0-SME_9IQLQ	
00025D7C 0000 0000                  		dc.w SME_9IQLQ_BD0-SME_9IQLQ, SME_9IQLQ_BEA-SME_9IQLQ	
00025D80 0000 0000                  		dc.w SME_9IQLQ_BF5-SME_9IQLQ, SME_9IQLQ_C05-SME_9IQLQ	
00025D84 0000 0000                  		dc.w SME_9IQLQ_C15-SME_9IQLQ, SME_9IQLQ_C25-SME_9IQLQ	
00025D88 0000 0000                  		dc.w SME_9IQLQ_C30-SME_9IQLQ, SME_9IQLQ_C40-SME_9IQLQ	
00025D8C 0000 0000                  		dc.w SME_9IQLQ_C78-SME_9IQLQ, SME_9IQLQ_C97-SME_9IQLQ	
00025D90 0000 0000                  		dc.w SME_9IQLQ_CA7-SME_9IQLQ, SME_9IQLQ_CCB-SME_9IQLQ	
00025D94 0000 0000                  		dc.w SME_9IQLQ_CD6-SME_9IQLQ, SME_9IQLQ_CEB-SME_9IQLQ	
00025D98 0000 0000                  		dc.w SME_9IQLQ_CFB-SME_9IQLQ, SME_9IQLQ_D0B-SME_9IQLQ	
00025D9C 0000 0000                  		dc.w SME_9IQLQ_D20-SME_9IQLQ, SME_9IQLQ_D26-SME_9IQLQ	
00025DA0 0000 0000                  		dc.w SME_9IQLQ_D2C-SME_9IQLQ, SME_9IQLQ_D32-SME_9IQLQ	
00025DA4 0000 0000                  		dc.w SME_9IQLQ_D38-SME_9IQLQ, SME_9IQLQ_D43-SME_9IQLQ	
00025DA8 0000 0000                  		dc.w SME_9IQLQ_D49-SME_9IQLQ, SME_9IQLQ_D4F-SME_9IQLQ	
00025DAC 0000 0000                  		dc.w SME_9IQLQ_D55-SME_9IQLQ, SME_9IQLQ_D65-SME_9IQLQ	
00025DB0 0000 0000                  		dc.w SME_9IQLQ_D75-SME_9IQLQ, SME_9IQLQ_D85-SME_9IQLQ	
00025DB4 0000 0000                  		dc.w SME_9IQLQ_D95-SME_9IQLQ, SME_9IQLQ_DA5-SME_9IQLQ	
00025DB8 0000 0000                  		dc.w SME_9IQLQ_DCE-SME_9IQLQ, SME_9IQLQ_DDE-SME_9IQLQ	
00025DBC 0000 0000                  		dc.w SME_9IQLQ_DEE-SME_9IQLQ, SME_9IQLQ_E12-SME_9IQLQ	
00025DC0 0000 0000                  		dc.w SME_9IQLQ_E22-SME_9IQLQ, SME_9IQLQ_E28-SME_9IQLQ	
00025DC4 0000 0000                  		dc.w SME_9IQLQ_E2E-SME_9IQLQ, SME_9IQLQ_E52-SME_9IQLQ	
00025DC8 0000 0000                  		dc.w SME_9IQLQ_E62-SME_9IQLQ, SME_9IQLQ_E68-SME_9IQLQ	
00025DCC 0000 0000                  		dc.w SME_9IQLQ_E73-SME_9IQLQ, SME_9IQLQ_E7E-SME_9IQLQ	
00025DD0 0000 0000                  		dc.w SME_9IQLQ_E98-SME_9IQLQ, SME_9IQLQ_EB7-SME_9IQLQ	
00025DD4 0000 0000                  		dc.w SME_9IQLQ_ECC-SME_9IQLQ, SME_9IQLQ_EDC-SME_9IQLQ	
00025DD8 0000 0000                  		dc.w SME_9IQLQ_EF6-SME_9IQLQ, SME_9IQLQ_F0B-SME_9IQLQ	
00025DDC 0000 0000                  		dc.w SME_9IQLQ_F1B-SME_9IQLQ, SME_9IQLQ_F35-SME_9IQLQ	
00025DE0 0000 0000                  		dc.w SME_9IQLQ_F45-SME_9IQLQ, SME_9IQLQ_F4B-SME_9IQLQ	
00025DE4 0000 0000                  		dc.w SME_9IQLQ_F51-SME_9IQLQ, SME_9IQLQ_F61-SME_9IQLQ	
00025DE8 0000 0000                  		dc.w SME_9IQLQ_F71-SME_9IQLQ, SME_9IQLQ_F77-SME_9IQLQ	
00025DEC 0000 0000                  		dc.w SME_9IQLQ_F87-SME_9IQLQ, SME_9IQLQ_F92-SME_9IQLQ	
00025DF0 0000 0000                  		dc.w SME_9IQLQ_FB1-SME_9IQLQ, SME_9IQLQ_FD0-SME_9IQLQ	
00025DF4 0000 0000                  		dc.w SME_9IQLQ_FE5-SME_9IQLQ, SME_9IQLQ_FF5-SME_9IQLQ	
00025DF8 0000 0000                  		dc.w SME_9IQLQ_100F-SME_9IQLQ, SME_9IQLQ_1024-SME_9IQLQ	
00025DFC 0000 0000                  		dc.w SME_9IQLQ_1034-SME_9IQLQ, SME_9IQLQ_104E-SME_9IQLQ	
00025E00 0000 0000                  		dc.w SME_9IQLQ_105E-SME_9IQLQ, SME_9IQLQ_1078-SME_9IQLQ	
00025E04 0000 0000                  		dc.w SME_9IQLQ_108D-SME_9IQLQ, SME_9IQLQ_10A2-SME_9IQLQ	
00025E08 0000 0000                  		dc.w SME_9IQLQ_10AD-SME_9IQLQ, SME_9IQLQ_10B8-SME_9IQLQ	
00025E0C 0000 0000                  		dc.w SME_9IQLQ_10C3-SME_9IQLQ, SME_9IQLQ_10CE-SME_9IQLQ	
00025E10 0000 0000                  		dc.w SME_9IQLQ_10D9-SME_9IQLQ, SME_9IQLQ_10E9-SME_9IQLQ	
00025E14 0000 0000                  		dc.w SME_9IQLQ_10F9-SME_9IQLQ, SME_9IQLQ_111D-SME_9IQLQ	
00025E18 0000 0000                  		dc.w SME_9IQLQ_1128-SME_9IQLQ, SME_9IQLQ_1133-SME_9IQLQ	
00025E1C 0000 0000                  		dc.w SME_9IQLQ_113E-SME_9IQLQ, SME_9IQLQ_1149-SME_9IQLQ	
00025E20 0000 0000                  		dc.w SME_9IQLQ_1159-SME_9IQLQ, SME_9IQLQ_116E-SME_9IQLQ	
00025E24 0000 0000                  		dc.w SME_9IQLQ_116F-SME_9IQLQ, SME_9IQLQ_1170-SME_9IQLQ	
00025E28 0000 0000                  		dc.w SME_9IQLQ_1180-SME_9IQLQ, SME_9IQLQ_1190-SME_9IQLQ	
00025E2C 0000 0000                  		dc.w SME_9IQLQ_1191-SME_9IQLQ, SME_9IQLQ_1192-SME_9IQLQ	
00025E30 0000 0000                  		dc.w SME_9IQLQ_119D-SME_9IQLQ, SME_9IQLQ_11A3-SME_9IQLQ	
00025E34 0000 0000                  		dc.w SME_9IQLQ_11AE-SME_9IQLQ, SME_9IQLQ_11B9-SME_9IQLQ	
00025E38 0000 0000                  		dc.w SME_9IQLQ_11C4-SME_9IQLQ, SME_9IQLQ_11CF-SME_9IQLQ	
00025E3C 0000 0000                  		dc.w SME_9IQLQ_11E9-SME_9IQLQ, SME_9IQLQ_1203-SME_9IQLQ	
00025E40 0000 0000                  		dc.w SME_9IQLQ_120E-SME_9IQLQ, SME_9IQLQ_1219-SME_9IQLQ	
00025E44 0000 0000                  		dc.w SME_9IQLQ_1224-SME_9IQLQ, SME_9IQLQ_122F-SME_9IQLQ	
00025E48 0000 0000                  		dc.w SME_9IQLQ_123A-SME_9IQLQ, SME_9IQLQ_1245-SME_9IQLQ	
00025E4C 0000 0000                  		dc.w SME_9IQLQ_1250-SME_9IQLQ, SME_9IQLQ_125B-SME_9IQLQ	
00025E50 0000                       		dc.w SME_9IQLQ_1266-SME_9IQLQ	
00025E52 00                         SME_9IQLQ_1EE:	dc.b 0	
00025E53 04                         SME_9IQLQ_1EF:	dc.b 4	
00025E54 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00025E59 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
00025E5E 0408 000B F0               		dc.b 4, 8, 0, $B, $F0	
00025E63 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00025E68 09                         SME_9IQLQ_204:	dc.b 9	
00025E69 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00025E6E 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
00025E73 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00025E78 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00025E7D FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
00025E82 F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00025E87 FC00 000D F8               		dc.b $FC, 0, 0, $D, $F8	
00025E8C FC00 000E 08               		dc.b $FC, 0, 0, $E, 8	
00025E91 F404 000F F8               		dc.b $F4, 4, 0, $F, $F8	
00025E96 0A                         SME_9IQLQ_232:	dc.b $A	
00025E97 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00025E9C 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
00025EA1 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00025EA6 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00025EAB FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
00025EB0 F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00025EB5 FC00 000D 08               		dc.b $FC, 0, 0, $D, 8	
00025EBA F400 000E F8               		dc.b $F4, 0, 0, $E, $F8	
00025EBF F400 000F 00               		dc.b $F4, 0, 0, $F, 0	
00025EC4 FC00 0010 F8               		dc.b $FC, 0, 0, $10, $F8	
00025EC9 04                         SME_9IQLQ_265:	dc.b 4	
00025ECA EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00025ECF F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00025ED4 FC00 100D 08               		dc.b $FC, 0, $10, $D, 8	
00025ED9 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00025EDE 03                         SME_9IQLQ_27A:	dc.b 3	
00025EDF EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025EE4 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025EE9 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00025EEE 03                         SME_9IQLQ_28A:	dc.b 3	
00025EEF EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025EF4 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025EF9 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00025EFE 04                         SME_9IQLQ_29A:	dc.b 4	
00025EFF EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025F04 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025F09 0C04 000C 00               		dc.b $C, 4, 0, $C, 0	
00025F0E 0C00 000E F8               		dc.b $C, 0, 0, $E, $F8	
00025F13 02                         SME_9IQLQ_2AF:	dc.b 2	
00025F14 F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025F19 0401 000C 08               		dc.b 4, 1, 0, $C, 8	
00025F1E 03                         SME_9IQLQ_2BA:	dc.b 3	
00025F1F FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025F24 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025F29 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
00025F2E 03                         SME_9IQLQ_2CA:	dc.b 3	
00025F2F FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025F34 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025F39 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
00025F3E 03                         SME_9IQLQ_2DA:	dc.b 3	
00025F3F F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025F44 EC08 000C F0               		dc.b $EC, 8, 0, $C, $F0	
00025F49 FC02 000F 08               		dc.b $FC, 2, 0, $F, 8	
00025F4E 04                         SME_9IQLQ_2EA:	dc.b 4	
00025F4F 0408 0000 F0               		dc.b 4, 8, 0, 0, $F0	
00025F54 0C08 0003 F8               		dc.b $C, 8, 0, 3, $F8	
00025F59 EC0A 0006 F0               		dc.b $EC, $A, 0, 6, $F0	
00025F5E F400 000F 08               		dc.b $F4, 0, 0, $F, 8	
00025F63 03                         SME_9IQLQ_2FF:	dc.b 3	
00025F64 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
00025F69 0408 0009 F0               		dc.b 4, 8, 0, 9, $F0	
00025F6E 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00025F73 07                         SME_9IQLQ_30F:	dc.b 7	
00025F74 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00025F79 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
00025F7E 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
00025F83 F300 000E F5               		dc.b $F3, 0, 0, $E, $F5	
00025F88 EB05 000F FD               		dc.b $EB, 5, 0, $F, $FD	
00025F8D EB00 0013 F5               		dc.b $EB, 0, 0, $13, $F5	
00025F92 F300 0014 ED               		dc.b $F3, 0, 0, $14, $ED	
00025F97 05                         SME_9IQLQ_333:	dc.b 5	
00025F98 FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
00025F9D F400 000C F5               		dc.b $F4, 0, 0, $C, $F5	
00025FA2 EC05 000D FD               		dc.b $EC, 5, 0, $D, $FD	
00025FA7 EC00 0011 F5               		dc.b $EC, 0, 0, $11, $F5	
00025FAC F400 0012 ED               		dc.b $F4, 0, 0, $12, $ED	
00025FB1 02                         SME_9IQLQ_34D:	dc.b 2	
00025FB2 FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
00025FB7 ED09 0009 F5               		dc.b $ED, 9, 0, 9, $F5	
00025FBC 03                         SME_9IQLQ_358:	dc.b 3	
00025FBD F30F 0000 F0               		dc.b $F3, $F, 0, 0, $F0	
00025FC2 EB0C 0010 F0               		dc.b $EB, $C, 0, $10, $F0	
00025FC7 0500 0014 10               		dc.b 5, 0, 0, $14, $10	
00025FCC 04                         SME_9IQLQ_368:	dc.b 4	
00025FCD EB09 0000 F5               		dc.b $EB, 9, 0, 0, $F5	
00025FD2 FB09 0006 ED               		dc.b $FB, 9, 0, 6, $ED	
00025FD7 FB06 000C 05               		dc.b $FB, 6, 0, $C, 5	
00025FDC 0B04 0012 ED               		dc.b $B, 4, 0, $12, $ED	
00025FE1 02                         SME_9IQLQ_37D:	dc.b 2	
00025FE2 EC09 0000 F6               		dc.b $EC, 9, 0, 0, $F6	
00025FE7 FC0E 0006 EE               		dc.b $FC, $E, 0, 6, $EE	
00025FEC 03                         SME_9IQLQ_388:	dc.b 3	
00025FED ED09 0000 F6               		dc.b $ED, 9, 0, 0, $F6	
00025FF2 FD06 0006 F6               		dc.b $FD, 6, 0, 6, $F6	
00025FF7 FD00 000C 06               		dc.b $FD, 0, 0, $C, 6	
00025FFC 05                         SME_9IQLQ_398:	dc.b 5	
00025FFD FD0C 0000 F6               		dc.b $FD, $C, 0, 0, $F6	
00026002 0509 0004 F6               		dc.b 5, 9, 0, 4, $F6	
00026007 F500 000A EE               		dc.b $F5, 0, 0, $A, $EE	
0002600C ED01 000B F6               		dc.b $ED, 1, 0, $B, $F6	
00026011 ED05 000D FE               		dc.b $ED, 5, 0, $D, $FE	
00026016 05                         SME_9IQLQ_3B2:	dc.b 5	
00026017 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
0002601C EC06 0006 04               		dc.b $EC, 6, 0, 6, 4	
00026021 FC08 000C EC               		dc.b $FC, 8, 0, $C, $EC	
00026026 0409 000F F4               		dc.b 4, 9, 0, $F, $F4	
0002602B 1400 0015 FC               		dc.b $14, 0, 0, $15, $FC	
00026030 06                         SME_9IQLQ_3CC:	dc.b 6	
00026031 ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00026036 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
0002603B FD0C 0008 ED               		dc.b $FD, $C, 0, 8, $ED	
00026040 0509 000C F5               		dc.b 5, 9, 0, $C, $F5	
00026045 FD05 0012 0D               		dc.b $FD, 5, 0, $12, $D	
0002604A F500 0016 15               		dc.b $F5, 0, 0, $16, $15	
0002604F 04                         SME_9IQLQ_3EB:	dc.b 4	
00026050 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00026055 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
0002605A FE0D 0008 F6               		dc.b $FE, $D, 0, 8, $F6	
0002605F 0E08 0010 FE               		dc.b $E, 8, 0, $10, $FE	
00026064 03                         SME_9IQLQ_400:	dc.b 3	
00026065 ED0F 0000 EF               		dc.b $ED, $F, 0, 0, $EF	
0002606A ED03 0010 0F               		dc.b $ED, 3, 0, $10, $F	
0002606F 0D0C 0014 F7               		dc.b $D, $C, 0, $14, $F7	
00026074 05                         SME_9IQLQ_410:	dc.b 5	
00026075 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
0002607A EC05 0006 04               		dc.b $EC, 5, 0, 6, 4	
0002607F FC0D 000A F4               		dc.b $FC, $D, 0, $A, $F4	
00026084 0C08 0012 F4               		dc.b $C, 8, 0, $12, $F4	
00026089 1404 0015 FC               		dc.b $14, 4, 0, $15, $FC	
0002608E 04                         SME_9IQLQ_42A:	dc.b 4	
0002608F EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
00026094 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
00026099 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
0002609E 0C08 0010 FD               		dc.b $C, 8, 0, $10, $FD	
000260A3 03                         SME_9IQLQ_43F:	dc.b 3	
000260A4 ED0F 0000 ED               		dc.b $ED, $F, 0, 0, $ED	
000260A9 ED03 0010 0D               		dc.b $ED, 3, 0, $10, $D	
000260AE 0D0C 0014 F5               		dc.b $D, $C, 0, $14, $F5	
000260B3 05                         SME_9IQLQ_44F:	dc.b 5	
000260B4 ED09 0000 EE               		dc.b $ED, 9, 0, 0, $EE	
000260B9 ED01 0006 06               		dc.b $ED, 1, 0, 6, 6	
000260BE FD00 0008 EE               		dc.b $FD, 0, 0, 8, $EE	
000260C3 FD0D 0009 F6               		dc.b $FD, $D, 0, 9, $F6	
000260C8 0D08 0011 FE               		dc.b $D, 8, 0, $11, $FE	
000260CD 04                         SME_9IQLQ_469:	dc.b 4	
000260CE F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
000260D3 EB09 0008 FD               		dc.b $EB, 9, 0, 8, $FD	
000260D8 FB04 000E FD               		dc.b $FB, 4, 0, $E, $FD	
000260DD 0309 0010 FD               		dc.b 3, 9, 0, $10, $FD	
000260E2 02                         SME_9IQLQ_47E:	dc.b 2	
000260E3 F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
000260E8 EC0B 0008 FD               		dc.b $EC, $B, 0, 8, $FD	
000260ED 02                         SME_9IQLQ_489:	dc.b 2	
000260EE F40A 0000 FD               		dc.b $F4, $A, 0, 0, $FD	
000260F3 F406 0009 ED               		dc.b $F4, 6, 0, 9, $ED	
000260F8 05                         SME_9IQLQ_494:	dc.b 5	
000260F9 E900 0000 04               		dc.b $E9, 0, 0, 0, 4	
000260FE F10C 0001 F4               		dc.b $F1, $C, 0, 1, $F4	
00026103 F100 0005 EC               		dc.b $F1, 0, 0, 5, $EC	
00026108 F90E 0006 EC               		dc.b $F9, $E, 0, 6, $EC	
0002610D F902 0012 0C               		dc.b $F9, 2, 0, $12, $C	
00026112 04                         SME_9IQLQ_4AE:	dc.b 4	
00026113 F306 0000 EC               		dc.b $F3, 6, 0, 0, $EC	
00026118 EB09 0006 FC               		dc.b $EB, 9, 0, 6, $FC	
0002611D FB04 000C FC               		dc.b $FB, 4, 0, $C, $FC	
00026122 0309 000E FC               		dc.b 3, 9, 0, $E, $FC	
00026127 02                         SME_9IQLQ_4C3:	dc.b 2	
00026128 F306 0000 ED               		dc.b $F3, 6, 0, 0, $ED	
0002612D F30B 0006 FD               		dc.b $F3, $B, 0, 6, $FD	
00026132 03                         SME_9IQLQ_4CE:	dc.b 3	
00026133 F408 0000 ED               		dc.b $F4, 8, 0, 0, $ED	
00026138 FC0D 0003 ED               		dc.b $FC, $D, 0, 3, $ED	
0002613D FC01 000B 0D               		dc.b $FC, 1, 0, $B, $D	
00026142 03                         SME_9IQLQ_4DE:	dc.b 3	
00026143 F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
00026148 EC00 0008 FD               		dc.b $EC, 0, 0, 8, $FD	
0002614D F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD	
00026152 06                         SME_9IQLQ_4EE:	dc.b 6	
00026153 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00026158 EC04 0006 F6               		dc.b $EC, 4, 0, 6, $F6	
0002615D F404 0008 EE               		dc.b $F4, 4, 0, 8, $EE	
00026162 F40A 000A FE               		dc.b $F4, $A, 0, $A, $FE	
00026167 0C00 0013 FE               		dc.b $C, 0, 0, $13, $FE	
0002616C FC00 0014 16               		dc.b $FC, 0, 0, $14, $16	
00026171 06                         SME_9IQLQ_50D:	dc.b 6	
00026172 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00026177 E408 0006 F7               		dc.b $E4, 8, 0, 6, $F7	
0002617C EC04 0009 FF               		dc.b $EC, 4, 0, 9, $FF	
00026181 F404 000B EF               		dc.b $F4, 4, 0, $B, $EF	
00026186 F40A 000D FF               		dc.b $F4, $A, 0, $D, $FF	
0002618B 0C00 0016 FF               		dc.b $C, 0, 0, $16, $FF	
00026190 04                         SME_9IQLQ_52C:	dc.b 4	
00026191 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00026196 F304 0006 EF               		dc.b $F3, 4, 0, 6, $EF	
0002619B EB0A 0008 FF               		dc.b $EB, $A, 0, 8, $FF	
000261A0 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
000261A5 03                         SME_9IQLQ_541:	dc.b 3	
000261A6 E90F 0000 F5               		dc.b $E9, $F, 0, 0, $F5	
000261AB F102 0010 ED               		dc.b $F1, 2, 0, $10, $ED	
000261B0 0908 0013 ED               		dc.b 9, 8, 0, $13, $ED	
000261B5 05                         SME_9IQLQ_551:	dc.b 5	
000261B6 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
000261BB EC08 0006 F6               		dc.b $EC, 8, 0, 6, $F6	
000261C0 F404 0009 EE               		dc.b $F4, 4, 0, 9, $EE	
000261C5 F40D 000B FE               		dc.b $F4, $D, 0, $B, $FE	
000261CA 0408 0013 FE               		dc.b 4, 8, 0, $13, $FE	
000261CF 04                         SME_9IQLQ_56B:	dc.b 4	
000261D0 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
000261D5 F404 0006 EF               		dc.b $F4, 4, 0, 6, $EF	
000261DA EC0A 0008 FF               		dc.b $EC, $A, 0, 8, $FF	
000261DF 0404 0011 FF               		dc.b 4, 4, 0, $11, $FF	
000261E4 03                         SME_9IQLQ_580:	dc.b 3	
000261E5 EB0F 0000 F0               		dc.b $EB, $F, 0, 0, $F0	
000261EA 0B08 0010 F0               		dc.b $B, 8, 0, $10, $F0	
000261EF EB01 0013 0F               		dc.b $EB, 1, 0, $13, $F	
000261F4 05                         SME_9IQLQ_590:	dc.b 5	
000261F5 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
000261FA EB0A 0006 FF               		dc.b $EB, $A, 0, 6, $FF	
000261FF F304 000F EF               		dc.b $F3, 4, 0, $F, $EF	
00026204 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00026209 0B00 0013 FF               		dc.b $B, 0, 0, $13, $FF	
0002620E 02                         SME_9IQLQ_5AA:	dc.b 2	
0002620F EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026214 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00026219 02                         SME_9IQLQ_5B5:	dc.b 2	
0002621A FE0E 0000 EC               		dc.b $FE, $E, 0, 0, $EC	
0002621F EE09 000C F4               		dc.b $EE, 9, 0, $C, $F4	
00026224 02                         SME_9IQLQ_5C0:	dc.b 2	
00026225 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002622A FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002622F 02                         SME_9IQLQ_5CB:	dc.b 2	
00026230 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026235 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002623A 02                         SME_9IQLQ_5D6:	dc.b 2	
0002623B EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026240 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00026245 02                         SME_9IQLQ_5E1:	dc.b 2	
00026246 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002624B FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00026250 02                         SME_9IQLQ_5EC:	dc.b 2	
00026251 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026256 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002625B 02                         SME_9IQLQ_5F7:	dc.b 2	
0002625C EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026261 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00026266 04                         SME_9IQLQ_602:	dc.b 4	
00026267 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002626C EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00026271 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00026276 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
0002627B 03                         SME_9IQLQ_617:	dc.b 3	
0002627C F60F 0000 F6               		dc.b $F6, $F, 0, 0, $F6	
00026281 EE02 0010 EE               		dc.b $EE, 2, 0, $10, $EE	
00026286 EE08 0013 F6               		dc.b $EE, 8, 0, $13, $F6	
0002628B 03                         SME_9IQLQ_627:	dc.b 3	
0002628C EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00026291 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00026296 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
0002629B 03                         SME_9IQLQ_637:	dc.b 3	
0002629C FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000262A1 EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000262A6 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000262AB 04                         SME_9IQLQ_647:	dc.b 4	
000262AC EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000262B1 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000262B6 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000262BB FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000262C0 03                         SME_9IQLQ_65C:	dc.b 3	
000262C1 FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000262C6 EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000262CB FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000262D0 03                         SME_9IQLQ_66C:	dc.b 3	
000262D1 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000262D6 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000262DB FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000262E0 03                         SME_9IQLQ_67C:	dc.b 3	
000262E1 EE0D 0000 EE               		dc.b $EE, $D, 0, 0, $EE	
000262E6 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000262EB FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000262F0 02                         SME_9IQLQ_68C:	dc.b 2	
000262F1 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000262F6 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000262FB 02                         SME_9IQLQ_697:	dc.b 2	
000262FC F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026301 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026306 02                         SME_9IQLQ_6A2:	dc.b 2	
00026307 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002630C F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026311 02                         SME_9IQLQ_6AD:	dc.b 2	
00026312 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026317 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002631C 02                         SME_9IQLQ_6B8:	dc.b 2	
0002631D F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026322 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026327 02                         SME_9IQLQ_6C3:	dc.b 2	
00026328 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002632D F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026332 02                         SME_9IQLQ_6CE:	dc.b 2	
00026333 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026338 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002633D 02                         SME_9IQLQ_6D9:	dc.b 2	
0002633E F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026343 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026348 04                         SME_9IQLQ_6E4:	dc.b 4	
00026349 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002634E F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
00026353 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00026358 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
0002635D 03                         SME_9IQLQ_6F9:	dc.b 3	
0002635E EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
00026363 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00026368 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
0002636D 02                         SME_9IQLQ_709:	dc.b 2	
0002636E F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
00026373 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00026378 03                         SME_9IQLQ_714:	dc.b 3	
00026379 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002637E 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00026383 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00026388 04                         SME_9IQLQ_724:	dc.b 4	
00026389 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002638E F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
00026393 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00026398 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
0002639D 03                         SME_9IQLQ_739:	dc.b 3	
0002639E EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000263A3 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000263A8 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000263AD 02                         SME_9IQLQ_749:	dc.b 2	
000263AE F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
000263B3 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000263B8 03                         SME_9IQLQ_754:	dc.b 3	
000263B9 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000263BE 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000263C3 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000263C8 03                         SME_9IQLQ_764:	dc.b 3	
000263C9 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000263CE 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000263D3 F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000263D8 03                         SME_9IQLQ_774:	dc.b 3	
000263D9 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000263DE 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000263E3 F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000263E8 09                         SME_9IQLQ_784:	dc.b 9	
000263E9 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
000263EE F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
000263F3 1000 0009 F3               		dc.b $10, 0, 0, 9, $F3	
000263F8 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
000263FD 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
00026402 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00026407 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
0002640C F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
00026411 F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00026416 09                         SME_9IQLQ_7B2:	dc.b 9	
00026417 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
0002641C F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
00026421 1000 0009 F0               		dc.b $10, 0, 0, 9, $F0	
00026426 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
0002642B 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
00026430 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00026435 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
0002643A F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
0002643F F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00026444 03                         SME_9IQLQ_7E0:	dc.b 3	
00026445 F20F 0000 F5               		dc.b $F2, $F, 0, 0, $F5	
0002644A 0201 0010 ED               		dc.b 2, 1, 0, $10, $ED	
0002644F EA0C 0012 F5               		dc.b $EA, $C, 0, $12, $F5	
00026454 03                         SME_9IQLQ_7F0:	dc.b 3	
00026455 F40B 0000 EF               		dc.b $F4, $B, 0, 0, $EF	
0002645A EC07 000C 07               		dc.b $EC, 7, 0, $C, 7	
0002645F EC04 0014 F7               		dc.b $EC, 4, 0, $14, $F7	
00026464 03                         SME_9IQLQ_800:	dc.b 3	
00026465 F30F 0000 F4               		dc.b $F3, $F, 0, 0, $F4	
0002646A EB0C 0010 F4               		dc.b $EB, $C, 0, $10, $F4	
0002646F 0300 0014 EC               		dc.b 3, 0, 0, $14, $EC	
00026474 05                         SME_9IQLQ_810:	dc.b 5	
00026475 F10E 0000 F7               		dc.b $F1, $E, 0, 0, $F7	
0002647A 090C 000C EF               		dc.b 9, $C, 0, $C, $EF	
0002647F F901 0010 EF               		dc.b $F9, 1, 0, $10, $EF	
00026484 1104 0012 F7               		dc.b $11, 4, 0, $12, $F7	
00026489 E908 0014 F7               		dc.b $E9, 8, 0, $14, $F7	
0002648E 03                         SME_9IQLQ_82A:	dc.b 3	
0002648F ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
00026494 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
00026499 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
0002649E 03                         SME_9IQLQ_83A:	dc.b 3	
0002649F ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
000264A4 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
000264A9 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
000264AE 05                         SME_9IQLQ_84A:	dc.b 5	
000264AF 0509 0000 F6               		dc.b 5, 9, 0, 0, $F6	
000264B4 ED02 0006 0E               		dc.b $ED, 2, 0, 6, $E	
000264B9 0500 0009 0E               		dc.b 5, 0, 0, 9, $E	
000264BE ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000264C3 ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000264C8 05                         SME_9IQLQ_864:	dc.b 5	
000264C9 ED02 0000 0E               		dc.b $ED, 2, 0, 0, $E	
000264CE 0509 0003 F6               		dc.b 5, 9, 0, 3, $F6	
000264D3 0800 0009 0E               		dc.b 8, 0, 0, 9, $E	
000264D8 ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000264DD ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000264E2 04                         SME_9IQLQ_87E:	dc.b 4	
000264E3 F00E 0000 E9               		dc.b $F0, $E, 0, 0, $E9	
000264E8 0808 000C F9               		dc.b 8, 8, 0, $C, $F9	
000264ED E808 000F F1               		dc.b $E8, 8, 0, $F, $F1	
000264F2 F002 0012 09               		dc.b $F0, 2, 0, $12, 9	
000264F7 04                         SME_9IQLQ_893:	dc.b 4	
000264F8 E60B 0000 F3               		dc.b $E6, $B, 0, 0, $F3	
000264FD 0608 000C F3               		dc.b 6, 8, 0, $C, $F3	
00026502 F602 000F 0B               		dc.b $F6, 2, 0, $F, $B	
00026507 EE02 0012 EB               		dc.b $EE, 2, 0, $12, $EB	
0002650C 04                         SME_9IQLQ_8A8:	dc.b 4	
0002650D EA0F 0000 EA               		dc.b $EA, $F, 0, 0, $EA	
00026512 F202 0010 0A               		dc.b $F2, 2, 0, $10, $A	
00026517 0A00 0013 02               		dc.b $A, 0, 0, $13, 2	
0002651C 0A00 0014 0A               		dc.b $A, 0, 0, $14, $A	
00026521 04                         SME_9IQLQ_8BD:	dc.b 4	
00026522 E80F 0000 ED               		dc.b $E8, $F, 0, 0, $ED	
00026527 0808 0010 F5               		dc.b 8, 8, 0, $10, $F5	
0002652C F801 0013 0D               		dc.b $F8, 1, 0, $13, $D	
00026531 F001 0015 E5               		dc.b $F0, 1, 0, $15, $E5	
00026536 01                         SME_9IQLQ_8D2:	dc.b 1	
00026537 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002653C 01                         SME_9IQLQ_8D8:	dc.b 1	
0002653D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026542 01                         SME_9IQLQ_8DE:	dc.b 1	
00026543 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026548 01                         SME_9IQLQ_8E4:	dc.b 1	
00026549 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002654E 01                         SME_9IQLQ_8EA:	dc.b 1	
0002654F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026554 01                         SME_9IQLQ_8F0:	dc.b 1	
00026555 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002655A 01                         SME_9IQLQ_8F6:	dc.b 1	
0002655B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026560 03                         SME_9IQLQ_8FC:	dc.b 3	
00026561 F00A 0000 F0               		dc.b $F0, $A, 0, 0, $F0	
00026566 080C 0009 F0               		dc.b 8, $C, 0, 9, $F0	
0002656B F002 000D 08               		dc.b $F0, 2, 0, $D, 8	
00026570 01                         SME_9IQLQ_90C:	dc.b 1	
00026571 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026576 02                         SME_9IQLQ_912:	dc.b 2	
00026577 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC	
0002657C F402 000C 0C               		dc.b $F4, 2, 0, $C, $C	
00026581 01                         SME_9IQLQ_91D:	dc.b 1	
00026582 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026587 02                         SME_9IQLQ_923:	dc.b 2	
00026588 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4	
0002658D 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4	
00026592 01                         SME_9IQLQ_92E:	dc.b 1	
00026593 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026598 04                         SME_9IQLQ_934:	dc.b 4	
00026599 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
0002659E FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0	
000265A3 F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
000265A8 F500 0014 08               		dc.b $F5, 0, 0, $14, 8	
000265AD 07                         SME_9IQLQ_949:	dc.b 7	
000265AE ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
000265B3 FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0	
000265B8 0D04 000E 00               		dc.b $D, 4, 0, $E, 0	
000265BD F500 0010 E8               		dc.b $F5, 0, 0, $10, $E8	
000265C2 F500 0011 08               		dc.b $F5, 0, 0, $11, 8	
000265C7 0D00 0012 F8               		dc.b $D, 0, 0, $12, $F8	
000265CC FD00 0013 E8               		dc.b $FD, 0, 0, $13, $E8	
000265D1 05                         SME_9IQLQ_96D:	dc.b 5	
000265D2 F502 0000 F0               		dc.b $F5, 2, 0, 0, $F0	
000265D7 F50B 0003 F8               		dc.b $F5, $B, 0, 3, $F8	
000265DC ED08 000F F0               		dc.b $ED, 8, 0, $F, $F0	
000265E1 F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
000265E6 ED00 0014 08               		dc.b $ED, 0, 0, $14, 8	
000265EB 03                         SME_9IQLQ_987:	dc.b 3	
000265EC F50B 0000 F8               		dc.b $F5, $B, 0, 0, $F8	
000265F1 ED03 000C F0               		dc.b $ED, 3, 0, $C, $F0	
000265F6 ED04 0010 F8               		dc.b $ED, 4, 0, $10, $F8	
000265FB 05                         SME_9IQLQ_997:	dc.b 5	
000265FC F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4	
00026601 E80C 000C F4               		dc.b $E8, $C, 0, $C, $F4	
00026606 1004 0010 F4               		dc.b $10, 4, 0, $10, $F4	
0002660B 0000 0012 EC               		dc.b 0, 0, 0, $12, $EC	
00026610 F000 0013 0C               		dc.b $F0, 0, 0, $13, $C	
00026615 04                         SME_9IQLQ_9B1:	dc.b 4	
00026616 F402 0000 F8               		dc.b $F4, 2, 0, 0, $F8	
0002661B F402 0003 00               		dc.b $F4, 2, 0, 3, 0	
00026620 F402 0006 08               		dc.b $F4, 2, 0, 6, 8	
00026625 0C08 0009 F8               		dc.b $C, 8, 0, 9, $F8	
0002662A 04                         SME_9IQLQ_9C6:	dc.b 4	
0002662B F404 0000 03               		dc.b $F4, 4, 0, 0, 3	
00026630 FC0D 0002 F8               		dc.b $FC, $D, 0, 2, $F8	
00026635 0C08 000A F8               		dc.b $C, 8, 0, $A, $F8	
0002663A 0C00 000D 10               		dc.b $C, 0, 0, $D, $10	
0002663F 04                         SME_9IQLQ_9DB:	dc.b 4	
00026640 EC08 0800 E8               		dc.b $EC, 8, 8, 0, $E8	
00026645 F402 0803 00               		dc.b $F4, 2, 8, 3, 0	
0002664A F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0	
0002664F EC00 0016 00               		dc.b $EC, 0, 0, $16, 0	
00026654 09                         SME_9IQLQ_9F0:	dc.b 9	
00026655 F402 0000 00               		dc.b $F4, 2, 0, 0, 0	
0002665A EC0C 0003 E8               		dc.b $EC, $C, 0, 3, $E8	
0002665F F407 0007 E0               		dc.b $F4, 7, 0, 7, $E0	
00026664 0C00 080F F8               		dc.b $C, 0, 8, $F, $F8	
00026669 F400 0010 F0               		dc.b $F4, 0, 0, $10, $F0	
0002666E F402 0011 F8               		dc.b $F4, 2, 0, $11, $F8	
00026673 0400 0014 F0               		dc.b 4, 0, 0, $14, $F0	
00026678 0C00 0015 F0               		dc.b $C, 0, 0, $15, $F0	
0002667D FC00 0016 F0               		dc.b $FC, 0, 0, $16, $F0	
00026682 03                         SME_9IQLQ_A1E:	dc.b 3	
00026683 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8	
00026688 040D 080C E0               		dc.b 4, $D, 8, $C, $E0	
0002668D 0C00 1814 00               		dc.b $C, 0, $18, $14, 0	
00026692 03                         SME_9IQLQ_A2E:	dc.b 3	
00026693 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
00026698 0401 0010 E0               		dc.b 4, 1, 0, $10, $E0	
0002669D EC0C 0012 E8               		dc.b $EC, $C, 0, $12, $E8	
000266A2 03                         SME_9IQLQ_A3E:	dc.b 3	
000266A3 F30F 0000 EC               		dc.b $F3, $F, 0, 0, $EC	
000266A8 EB0C 0010 EC               		dc.b $EB, $C, 0, $10, $EC	
000266AD F303 0014 0C               		dc.b $F3, 3, 0, $14, $C	
000266B2 03                         SME_9IQLQ_A4E:	dc.b 3	
000266B3 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
000266B8 0808 0010 08               		dc.b 8, 8, 0, $10, 8	
000266BD 0000 0013 18               		dc.b 0, 0, 0, $13, $18	
000266C2 07                         SME_9IQLQ_A5E:	dc.b 7	
000266C3 E802 0000 F8               		dc.b $E8, 2, 0, 0, $F8	
000266C8 E802 0003 00               		dc.b $E8, 2, 0, 3, 0	
000266CD E802 0006 08               		dc.b $E8, 2, 0, 6, 8	
000266D2 E802 0009 10               		dc.b $E8, 2, 0, 9, $10	
000266D7 000C 000C F8               		dc.b 0, $C, 0, $C, $F8	
000266DC 0001 0010 18               		dc.b 0, 1, 0, $10, $18	
000266E1 0804 0012 08               		dc.b 8, 4, 0, $12, 8	
000266E6 00                         SME_9IQLQ_A82:	dc.b 0	
000266E7 00                         SME_9IQLQ_A83:	dc.b 0	
000266E8 03                         SME_9IQLQ_A84:	dc.b 3	
000266E9 F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC	
000266EE FC00 0808 F4               		dc.b $FC, 0, 8, 8, $F4	
000266F3 040C 0809 F4               		dc.b 4, $C, 8, 9, $F4	
000266F8 03                         SME_9IQLQ_A94:	dc.b 3	
000266F9 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
000266FE FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00026703 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00026708 03                         SME_9IQLQ_AA4:	dc.b 3	
00026709 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
0002670E 040C 0008 F4               		dc.b 4, $C, 0, 8, $F4	
00026713 FC00 000C F4               		dc.b $FC, 0, 0, $C, $F4	
00026718 02                         SME_9IQLQ_AB4:	dc.b 2	
00026719 F40A 0000 F0               		dc.b $F4, $A, 0, 0, $F0	
0002671E F40A 0800 08               		dc.b $F4, $A, 8, 0, 8	
00026723 03                         SME_9IQLQ_ABF:	dc.b 3	
00026724 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00026729 040C 0808 FC               		dc.b 4, $C, 8, 8, $FC	
0002672E FC00 080C 14               		dc.b $FC, 0, 8, $C, $14	
00026733 03                         SME_9IQLQ_ACF:	dc.b 3	
00026734 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00026739 FC05 0808 14               		dc.b $FC, 5, 8, 8, $14	
0002673E 0408 080C FC               		dc.b 4, 8, 8, $C, $FC	
00026743 03                         SME_9IQLQ_ADF:	dc.b 3	
00026744 F40D 0000 F4               		dc.b $F4, $D, 0, 0, $F4	
00026749 FC00 0008 14               		dc.b $FC, 0, 0, 8, $14	
0002674E 040C 0009 FC               		dc.b 4, $C, 0, 9, $FC	
00026753 03                         SME_9IQLQ_AEF:	dc.b 3	
00026754 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00026759 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
0002675E 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00026763 04                         SME_9IQLQ_AFF:	dc.b 4	
00026764 E90B 0000 F4               		dc.b $E9, $B, 0, 0, $F4	
00026769 1100 000C FC               		dc.b $11, 0, 0, $C, $FC	
0002676E 0900 000D FC               		dc.b 9, 0, 0, $D, $FC	
00026773 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
00026778 08                         SME_9IQLQ_B14:	dc.b 8	
00026779 E909 0000 F4               		dc.b $E9, 9, 0, 0, $F4	
0002677E F901 0006 04               		dc.b $F9, 1, 0, 6, 4	
00026783 0900 0008 FC               		dc.b 9, 0, 0, 8, $FC	
00026788 1100 0009 FC               		dc.b $11, 0, 0, 9, $FC	
0002678D F901 000A FC               		dc.b $F9, 1, 0, $A, $FC	
00026792 F900 000C F4               		dc.b $F9, 0, 0, $C, $F4	
00026797 0100 000D F4               		dc.b 1, 0, 0, $D, $F4	
0002679C 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
000267A1 04                         SME_9IQLQ_B3D:	dc.b 4	
000267A2 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
000267A7 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
000267AC F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
000267B1 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
000267B6 04                         SME_9IQLQ_B52:	dc.b 4	
000267B7 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
000267BC 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
000267C1 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
000267C6 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
000267CB 05                         SME_9IQLQ_B67:	dc.b 5	
000267CC E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
000267D1 F001 0009 0C               		dc.b $F0, 1, 0, 9, $C	
000267D6 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
000267DB 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
000267E0 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
000267E5 05                         SME_9IQLQ_B81:	dc.b 5	
000267E6 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
000267EB E801 0009 0C               		dc.b $E8, 1, 0, 9, $C	
000267F0 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
000267F5 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
000267FA 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
000267FF 02                         SME_9IQLQ_B9B:	dc.b 2	
00026800 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00026805 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
0002680A 05                         SME_9IQLQ_BA6:	dc.b 5	
0002680B 0505 0000 EB               		dc.b 5, 5, 0, 0, $EB	
00026810 ED02 0004 F3               		dc.b $ED, 2, 0, 4, $F3	
00026815 F503 0007 FB               		dc.b $F5, 3, 0, 7, $FB	
0002681A ED03 000B 03               		dc.b $ED, 3, 0, $B, 3	
0002681F ED00 000F FB               		dc.b $ED, 0, 0, $F, $FB	
00026824 03                         SME_9IQLQ_BC0:	dc.b 3	
00026825 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
0002682A 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
0002682F 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00026834 05                         SME_9IQLQ_BD0:	dc.b 5	
00026835 0D00 0000 EB               		dc.b $D, 0, 0, 0, $EB	
0002683A F503 0001 F3               		dc.b $F5, 3, 0, 1, $F3	
0002683F F503 0005 FB               		dc.b $F5, 3, 0, 5, $FB	
00026844 F503 0009 03               		dc.b $F5, 3, 0, 9, 3	
00026849 ED08 000D F3               		dc.b $ED, 8, 0, $D, $F3	
0002684E 02                         SME_9IQLQ_BEA:	dc.b 2	
0002684F ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00026854 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00026859 03                         SME_9IQLQ_BF5:	dc.b 3	
0002685A F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
0002685F 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00026864 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
00026869 03                         SME_9IQLQ_C05:	dc.b 3	
0002686A EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
0002686F 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00026874 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00026879 03                         SME_9IQLQ_C15:	dc.b 3	
0002687A F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
0002687F 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00026884 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
00026889 02                         SME_9IQLQ_C25:	dc.b 2	
0002688A EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
0002688F FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0	
00026894 03                         SME_9IQLQ_C30:	dc.b 3	
00026895 E80D 2000 EC               		dc.b $E8, $D, $20, 0, $EC	
0002689A E801 2008 0C               		dc.b $E8, 1, $20, 8, $C	
0002689F F80B 200A F4               		dc.b $F8, $B, $20, $A, $F4	
000268A4 0B                         SME_9IQLQ_C40:	dc.b $B	
000268A5 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
000268AA E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
000268AF 1000 000A F4               		dc.b $10, 0, 0, $A, $F4	
000268B4 0808 000B F4               		dc.b 8, 8, 0, $B, $F4	
000268B9 1000 000E 04               		dc.b $10, 0, 0, $E, 4	
000268BE F800 000F FC               		dc.b $F8, 0, 0, $F, $FC	
000268C3 F800 0010 F4               		dc.b $F8, 0, 0, $10, $F4	
000268C8 F800 0011 04               		dc.b $F8, 0, 0, $11, 4	
000268CD 0000 0012 FC               		dc.b 0, 0, 0, $12, $FC	
000268D2 0000 0013 04               		dc.b 0, 0, 0, $13, 4	
000268D7 0000 0014 F4               		dc.b 0, 0, 0, $14, $F4	
000268DC 06                         SME_9IQLQ_C78:	dc.b 6	
000268DD E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
000268E2 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
000268E7 F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
000268EC 1000 0010 F4               		dc.b $10, 0, 0, $10, $F4	
000268F1 0808 0011 F4               		dc.b 8, 8, 0, $11, $F4	
000268F6 1000 0014 04               		dc.b $10, 0, 0, $14, 4	
000268FB 03                         SME_9IQLQ_C97:	dc.b 3	
000268FC EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
00026901 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC	
00026906 0301 0012 0C               		dc.b 3, 1, 0, $12, $C	
0002690B 07                         SME_9IQLQ_CA7:	dc.b 7	
0002690C F801 0000 0C               		dc.b $F8, 1, 0, 0, $C	
00026911 080C 0002 F4               		dc.b 8, $C, 0, 2, $F4	
00026916 F801 0006 FC               		dc.b $F8, 1, 0, 6, $FC	
0002691B F000 0008 FC               		dc.b $F0, 0, 0, 8, $FC	
00026920 F801 0009 EC               		dc.b $F8, 1, 0, 9, $EC	
00026925 F002 000B F4               		dc.b $F0, 2, 0, $B, $F4	
0002692A F002 000E 04               		dc.b $F0, 2, 0, $E, 4	
0002692F 02                         SME_9IQLQ_CCB:	dc.b 2	
00026930 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
00026935 F802 0010 0C               		dc.b $F8, 2, 0, $10, $C	
0002693A 04                         SME_9IQLQ_CD6:	dc.b 4	
0002693B F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00026940 F800 000C EC               		dc.b $F8, 0, 0, $C, $EC	
00026945 F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
0002694A 0000 0011 EC               		dc.b 0, 0, 0, $11, $EC	
0002694F 03                         SME_9IQLQ_CEB:	dc.b 3	
00026950 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00026955 F801 000C EC               		dc.b $F8, 1, 0, $C, $EC	
0002695A F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
0002695F 03                         SME_9IQLQ_CFB:	dc.b 3	
00026960 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00026965 F008 000C F4               		dc.b $F0, 8, 0, $C, $F4	
0002696A F801 000F EC               		dc.b $F8, 1, 0, $F, $EC	
0002696F 04                         SME_9IQLQ_D0B:	dc.b 4	
00026970 0002 0000 F4               		dc.b 0, 2, 0, 0, $F4	
00026975 F803 0003 FC               		dc.b $F8, 3, 0, 3, $FC	
0002697A F803 0007 04               		dc.b $F8, 3, 0, 7, 4	
0002697F F802 000B 0C               		dc.b $F8, 2, 0, $B, $C	
00026984 01                         SME_9IQLQ_D20:	dc.b 1	
00026985 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
0002698A 01                         SME_9IQLQ_D26:	dc.b 1	
0002698B F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00026990 01                         SME_9IQLQ_D2C:	dc.b 1	
00026991 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00026996 01                         SME_9IQLQ_D32:	dc.b 1	
00026997 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
0002699C 02                         SME_9IQLQ_D38:	dc.b 2	
0002699D F80B 0000 F4               		dc.b $F8, $B, 0, 0, $F4	
000269A2 F802 000C 0C               		dc.b $F8, 2, 0, $C, $C	
000269A7 01                         SME_9IQLQ_D43:	dc.b 1	
000269A8 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000269AD 01                         SME_9IQLQ_D49:	dc.b 1	
000269AE F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000269B3 01                         SME_9IQLQ_D4F:	dc.b 1	
000269B4 F00B 0000 F5               		dc.b $F0, $B, 0, 0, $F5	
000269B9 03                         SME_9IQLQ_D55:	dc.b 3	
000269BA E80F 0000 F1               		dc.b $E8, $F, 0, 0, $F1	
000269BF 0805 0010 F1               		dc.b 8, 5, 0, $10, $F1	
000269C4 0801 0014 01               		dc.b 8, 1, 0, $14, 1	
000269C9 03                         SME_9IQLQ_D65:	dc.b 3	
000269CA 0809 0000 F1               		dc.b 8, 9, 0, 0, $F1	
000269CF E80B 0006 F1               		dc.b $E8, $B, 0, 6, $F1	
000269D4 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
000269D9 03                         SME_9IQLQ_D75:	dc.b 3	
000269DA E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
000269DF 0809 000C F1               		dc.b 8, 9, 0, $C, $F1	
000269E4 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
000269E9 03                         SME_9IQLQ_D85:	dc.b 3	
000269EA E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
000269EF 0809 000C F1               		dc.b 8, 9, 0, $C, $F1	
000269F4 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
000269F9 03                         SME_9IQLQ_D95:	dc.b 3	
000269FA E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
000269FF 0809 000C F1               		dc.b 8, 9, 0, $C, $F1	
00026A04 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
00026A09 08                         SME_9IQLQ_DA5:	dc.b 8	
00026A0A 0809 0000 F1               		dc.b 8, 9, 0, 0, $F1	
00026A0F 0000 0006 09               		dc.b 0, 0, 0, 6, 9	
00026A14 F002 0007 F9               		dc.b $F0, 2, 0, 7, $F9	
00026A19 F001 000A 01               		dc.b $F0, 1, 0, $A, 1	
00026A1E 0000 000C F1               		dc.b 0, 0, 0, $C, $F1	
00026A23 0000 000D 01               		dc.b 0, 0, 0, $D, 1	
00026A28 E802 000E F1               		dc.b $E8, 2, 0, $E, $F1	
00026A2D E804 0011 F9               		dc.b $E8, 4, 0, $11, $F9	
00026A32 03                         SME_9IQLQ_DCE:	dc.b 3	
00026A33 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
00026A38 EC0F 0003 EF               		dc.b $EC, $F, 0, 3, $EF	
00026A3D E40C 0013 EF               		dc.b $E4, $C, 0, $13, $EF	
00026A42 03                         SME_9IQLQ_DDE:	dc.b 3	
00026A43 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
00026A48 EC0F 0003 EF               		dc.b $EC, $F, 0, 3, $EF	
00026A4D E408 0013 EF               		dc.b $E4, 8, 0, $13, $EF	
00026A52 07                         SME_9IQLQ_DEE:	dc.b 7	
00026A53 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
00026A58 F402 0003 F7               		dc.b $F4, 2, 0, 3, $F7	
00026A5D F402 0006 FF               		dc.b $F4, 2, 0, 6, $FF	
00026A62 EC02 0009 07               		dc.b $EC, 2, 0, 9, 7	
00026A67 0400 000C EF               		dc.b 4, 0, 0, $C, $EF	
00026A6C E403 000D EF               		dc.b $E4, 3, 0, $D, $EF	
00026A71 E405 0011 F7               		dc.b $E4, 5, 0, $11, $F7	
00026A76 03                         SME_9IQLQ_E12:	dc.b 3	
00026A77 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00026A7C FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
00026A81 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
00026A86 01                         SME_9IQLQ_E22:	dc.b 1	
00026A87 FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
00026A8C 01                         SME_9IQLQ_E28:	dc.b 1	
00026A8D FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
00026A92 07                         SME_9IQLQ_E2E:	dc.b 7	
00026A93 0500 0000 10               		dc.b 5, 0, 0, 0, $10	
00026A98 0301 0001 F0               		dc.b 3, 1, 0, 1, $F0	
00026A9D 0301 0003 F8               		dc.b 3, 1, 0, 3, $F8	
00026AA2 FB02 0005 00               		dc.b $FB, 2, 0, 5, 0	
00026AA7 FB00 0008 F8               		dc.b $FB, 0, 0, 8, $F8	
00026AAC FB00 0009 F0               		dc.b $FB, 0, 0, 9, $F0	
00026AB1 FB02 000A 08               		dc.b $FB, 2, 0, $A, 8	
00026AB6 03                         SME_9IQLQ_E52:	dc.b 3	
00026AB7 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00026ABC FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
00026AC1 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
00026AC6 01                         SME_9IQLQ_E62:	dc.b 1	
00026AC7 FC0E 0000 EE               		dc.b $FC, $E, 0, 0, $EE	
00026ACC 02                         SME_9IQLQ_E68:	dc.b 2	
00026ACD FD06 0000 F6               		dc.b $FD, 6, 0, 0, $F6	
00026AD2 FD00 0006 06               		dc.b $FD, 0, 0, 6, 6	
00026AD7 02                         SME_9IQLQ_E73:	dc.b 2	
00026AD8 FD0C 0000 F6               		dc.b $FD, $C, 0, 0, $F6	
00026ADD 0509 0004 F6               		dc.b 5, 9, 0, 4, $F6	
00026AE2 05                         SME_9IQLQ_E7E:	dc.b 5	
00026AE3 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00026AE8 EC06 0006 04               		dc.b $EC, 6, 0, 6, 4	
00026AED FC08 000C EC               		dc.b $FC, 8, 0, $C, $EC	
00026AF2 0409 000F F4               		dc.b 4, 9, 0, $F, $F4	
00026AF7 1400 0015 FC               		dc.b $14, 0, 0, $15, $FC	
00026AFC 06                         SME_9IQLQ_E98:	dc.b 6	
00026AFD ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00026B02 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
00026B07 FD0C 0008 ED               		dc.b $FD, $C, 0, 8, $ED	
00026B0C 0509 000C F5               		dc.b 5, 9, 0, $C, $F5	
00026B11 FD05 0012 0D               		dc.b $FD, 5, 0, $12, $D	
00026B16 F500 0016 15               		dc.b $F5, 0, 0, $16, $15	
00026B1B 04                         SME_9IQLQ_EB7:	dc.b 4	
00026B1C EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00026B21 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00026B26 FE0D 0008 F6               		dc.b $FE, $D, 0, 8, $F6	
00026B2B 0E08 0010 FE               		dc.b $E, 8, 0, $10, $FE	
00026B30 03                         SME_9IQLQ_ECC:	dc.b 3	
00026B31 ED0F 0000 EF               		dc.b $ED, $F, 0, 0, $EF	
00026B36 ED03 0010 0F               		dc.b $ED, 3, 0, $10, $F	
00026B3B 0D0C 0014 F7               		dc.b $D, $C, 0, $14, $F7	
00026B40 05                         SME_9IQLQ_EDC:	dc.b 5	
00026B41 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00026B46 EC05 0006 04               		dc.b $EC, 5, 0, 6, 4	
00026B4B FC0D 000A F4               		dc.b $FC, $D, 0, $A, $F4	
00026B50 0C08 0012 F4               		dc.b $C, 8, 0, $12, $F4	
00026B55 1404 0015 FC               		dc.b $14, 4, 0, $15, $FC	
00026B5A 04                         SME_9IQLQ_EF6:	dc.b 4	
00026B5B EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
00026B60 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
00026B65 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
00026B6A 0C08 0010 FD               		dc.b $C, 8, 0, $10, $FD	
00026B6F 03                         SME_9IQLQ_F0B:	dc.b 3	
00026B70 ED0F 0000 ED               		dc.b $ED, $F, 0, 0, $ED	
00026B75 ED03 0010 0D               		dc.b $ED, 3, 0, $10, $D	
00026B7A 0D0C 0014 F5               		dc.b $D, $C, 0, $14, $F5	
00026B7F 05                         SME_9IQLQ_F1B:	dc.b 5	
00026B80 ED09 0000 EE               		dc.b $ED, 9, 0, 0, $EE	
00026B85 ED01 0006 06               		dc.b $ED, 1, 0, 6, 6	
00026B8A FD00 0008 EE               		dc.b $FD, 0, 0, 8, $EE	
00026B8F FD0D 0009 F6               		dc.b $FD, $D, 0, 9, $F6	
00026B94 0D08 0011 FE               		dc.b $D, 8, 0, $11, $FE	
00026B99 03                         SME_9IQLQ_F35:	dc.b 3	
00026B9A EB09 0000 FD               		dc.b $EB, 9, 0, 0, $FD	
00026B9F FB04 0006 FD               		dc.b $FB, 4, 0, 6, $FD	
00026BA4 0309 0008 FD               		dc.b 3, 9, 0, 8, $FD	
00026BA9 01                         SME_9IQLQ_F45:	dc.b 1	
00026BAA EC0B 0000 FD               		dc.b $EC, $B, 0, 0, $FD	
00026BAF 01                         SME_9IQLQ_F4B:	dc.b 1	
00026BB0 F40A 0000 FD               		dc.b $F4, $A, 0, 0, $FD	
00026BB5 03                         SME_9IQLQ_F51:	dc.b 3	
00026BB6 E900 0000 04               		dc.b $E9, 0, 0, 0, 4	
00026BBB F90A 0001 FC               		dc.b $F9, $A, 0, 1, $FC	
00026BC0 F108 000A FC               		dc.b $F1, 8, 0, $A, $FC	
00026BC5 03                         SME_9IQLQ_F61:	dc.b 3	
00026BC6 EB09 0000 FC               		dc.b $EB, 9, 0, 0, $FC	
00026BCB FB04 0006 FC               		dc.b $FB, 4, 0, 6, $FC	
00026BD0 0309 0008 FC               		dc.b 3, 9, 0, 8, $FC	
00026BD5 01                         SME_9IQLQ_F71:	dc.b 1	
00026BD6 F30B 0000 FD               		dc.b $F3, $B, 0, 0, $FD	
00026BDB 03                         SME_9IQLQ_F77:	dc.b 3	
00026BDC FC01 0000 0D               		dc.b $FC, 1, 0, 0, $D	
00026BE1 F400 0002 FD               		dc.b $F4, 0, 0, 2, $FD	
00026BE6 FC05 0003 FD               		dc.b $FC, 5, 0, 3, $FD	
00026BEB 02                         SME_9IQLQ_F87:	dc.b 2	
00026BEC EC00 0000 FD               		dc.b $EC, 0, 0, 0, $FD	
00026BF1 F40A 0001 FD               		dc.b $F4, $A, 0, 1, $FD	
00026BF6 06                         SME_9IQLQ_F92:	dc.b 6	
00026BF7 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00026BFC EC04 0006 F6               		dc.b $EC, 4, 0, 6, $F6	
00026C01 F404 0008 EE               		dc.b $F4, 4, 0, 8, $EE	
00026C06 F40A 000A FE               		dc.b $F4, $A, 0, $A, $FE	
00026C0B 0C00 0013 FE               		dc.b $C, 0, 0, $13, $FE	
00026C10 FC00 0014 16               		dc.b $FC, 0, 0, $14, $16	
00026C15 06                         SME_9IQLQ_FB1:	dc.b 6	
00026C16 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00026C1B E408 0006 F7               		dc.b $E4, 8, 0, 6, $F7	
00026C20 EC04 0009 FF               		dc.b $EC, 4, 0, 9, $FF	
00026C25 F404 000B EF               		dc.b $F4, 4, 0, $B, $EF	
00026C2A F40A 000D FF               		dc.b $F4, $A, 0, $D, $FF	
00026C2F 0C00 0016 FF               		dc.b $C, 0, 0, $16, $FF	
00026C34 04                         SME_9IQLQ_FD0:	dc.b 4	
00026C35 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00026C3A F304 0006 EF               		dc.b $F3, 4, 0, 6, $EF	
00026C3F EB0A 0008 FF               		dc.b $EB, $A, 0, 8, $FF	
00026C44 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00026C49 03                         SME_9IQLQ_FE5:	dc.b 3	
00026C4A E90F 0000 F5               		dc.b $E9, $F, 0, 0, $F5	
00026C4F F102 0010 ED               		dc.b $F1, 2, 0, $10, $ED	
00026C54 0908 0013 ED               		dc.b 9, 8, 0, $13, $ED	
00026C59 05                         SME_9IQLQ_FF5:	dc.b 5	
00026C5A FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00026C5F EC08 0006 F6               		dc.b $EC, 8, 0, 6, $F6	
00026C64 F404 0009 EE               		dc.b $F4, 4, 0, 9, $EE	
00026C69 F40D 000B FE               		dc.b $F4, $D, 0, $B, $FE	
00026C6E 0408 0013 FE               		dc.b 4, 8, 0, $13, $FE	
00026C73 04                         SME_9IQLQ_100F:	dc.b 4	
00026C74 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00026C79 F404 0006 EF               		dc.b $F4, 4, 0, 6, $EF	
00026C7E EC0A 0008 FF               		dc.b $EC, $A, 0, 8, $FF	
00026C83 0404 0011 FF               		dc.b 4, 4, 0, $11, $FF	
00026C88 03                         SME_9IQLQ_1024:	dc.b 3	
00026C89 EB0F 0000 F0               		dc.b $EB, $F, 0, 0, $F0	
00026C8E 0B08 0010 F0               		dc.b $B, 8, 0, $10, $F0	
00026C93 EB01 0013 0F               		dc.b $EB, 1, 0, $13, $F	
00026C98 05                         SME_9IQLQ_1034:	dc.b 5	
00026C99 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00026C9E EB0A 0006 FF               		dc.b $EB, $A, 0, 6, $FF	
00026CA3 F304 000F EF               		dc.b $F3, 4, 0, $F, $EF	
00026CA8 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00026CAD 0B00 0013 FF               		dc.b $B, 0, 0, $13, $FF	
00026CB2 03                         SME_9IQLQ_104E:	dc.b 3	
00026CB3 F40E 0000 F8               		dc.b $F4, $E, 0, 0, $F8	
00026CB8 0C08 000C F0               		dc.b $C, 8, 0, $C, $F0	
00026CBD 0400 000F F0               		dc.b 4, 0, 0, $F, $F0	
00026CC2 05                         SME_9IQLQ_105E:	dc.b 5	
00026CC3 F40E 0000 F8               		dc.b $F4, $E, 0, 0, $F8	
00026CC8 0401 000C F0               		dc.b 4, 1, 0, $C, $F0	
00026CCD 0C04 000E F8               		dc.b $C, 4, 0, $E, $F8	
00026CD2 EC04 0010 F8               		dc.b $EC, 4, 0, $10, $F8	
00026CD7 0C00 0012 08               		dc.b $C, 0, 0, $12, 8	
00026CDC 04                         SME_9IQLQ_1078:	dc.b 4	
00026CDD F40E 0000 F8               		dc.b $F4, $E, 0, 0, $F8	
00026CE2 0401 000C F0               		dc.b 4, 1, 0, $C, $F0	
00026CE7 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00026CEC EC08 0011 F8               		dc.b $EC, 8, 0, $11, $F8	
00026CF1 04                         SME_9IQLQ_108D:	dc.b 4	
00026CF2 F40E 0000 F8               		dc.b $F4, $E, 0, 0, $F8	
00026CF7 0401 000C F0               		dc.b 4, 1, 0, $C, $F0	
00026CFC 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00026D01 EC08 0011 F8               		dc.b $EC, 8, 0, $11, $F8	
00026D06 02                         SME_9IQLQ_10A2:	dc.b 2	
00026D07 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D0C E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026D11 02                         SME_9IQLQ_10AD:	dc.b 2	
00026D12 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D17 E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026D1C 02                         SME_9IQLQ_10B8:	dc.b 2	
00026D1D F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D22 E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026D27 02                         SME_9IQLQ_10C3:	dc.b 2	
00026D28 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D2D E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026D32 02                         SME_9IQLQ_10CE:	dc.b 2	
00026D33 F00C 0000 F0               		dc.b $F0, $C, 0, 0, $F0	
00026D38 F80F 0004 F0               		dc.b $F8, $F, 0, 4, $F0	
00026D3D 03                         SME_9IQLQ_10D9:	dc.b 3	
00026D3E F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D43 F00C 0010 F0               		dc.b $F0, $C, 0, $10, $F0	
00026D48 F002 0014 E8               		dc.b $F0, 2, 0, $14, $E8	
00026D4D 03                         SME_9IQLQ_10E9:	dc.b 3	
00026D4E F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D53 F008 0010 F0               		dc.b $F0, 8, 0, $10, $F0	
00026D58 F002 0013 E8               		dc.b $F0, 2, 0, $13, $E8	
00026D5D 07                         SME_9IQLQ_10F9:	dc.b 7	
00026D5E F00A 0000 E8               		dc.b $F0, $A, 0, 0, $E8	
00026D63 F000 0009 00               		dc.b $F0, 0, 0, 9, 0	
00026D68 F803 000A 00               		dc.b $F8, 3, 0, $A, 0	
00026D6D 0800 000E 08               		dc.b 8, 0, 0, $E, 8	
00026D72 0000 000F 08               		dc.b 0, 0, 0, $F, 8	
00026D77 1000 0010 08               		dc.b $10, 0, 0, $10, 8	
00026D7C 0804 0011 F0               		dc.b 8, 4, 0, $11, $F0	
00026D81 02                         SME_9IQLQ_111D:	dc.b 2	
00026D82 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D87 E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026D8C 02                         SME_9IQLQ_1128:	dc.b 2	
00026D8D F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D92 E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026D97 02                         SME_9IQLQ_1133:	dc.b 2	
00026D98 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D9D E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026DA2 02                         SME_9IQLQ_113E:	dc.b 2	
00026DA3 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026DA8 E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026DAD 03                         SME_9IQLQ_1149:	dc.b 3	
00026DAE F802 0000 10               		dc.b $F8, 2, 0, 0, $10	
00026DB3 F80F 0003 F0               		dc.b $F8, $F, 0, 3, $F0	
00026DB8 F008 0013 00               		dc.b $F0, 8, 0, $13, 0	
00026DBD 04                         SME_9IQLQ_1159:	dc.b 4	
00026DBE F00F 0000 F8               		dc.b $F0, $F, 0, 0, $F8	
00026DC3 100C 0010 F0               		dc.b $10, $C, 0, $10, $F0	
00026DC8 0001 0014 F0               		dc.b 0, 1, 0, $14, $F0	
00026DCD F800 0016 F0               		dc.b $F8, 0, 0, $16, $F0	
00026DD2 00                         SME_9IQLQ_116E:	dc.b 0	
00026DD3 00                         SME_9IQLQ_116F:	dc.b 0	
00026DD4 03                         SME_9IQLQ_1170:	dc.b 3	
00026DD5 F00E 0000 E8               		dc.b $F0, $E, 0, 0, $E8	
00026DDA F803 000C 08               		dc.b $F8, 3, 0, $C, 8	
00026DDF 0809 0010 F0               		dc.b 8, 9, 0, $10, $F0	
00026DE4 03                         SME_9IQLQ_1180:	dc.b 3	
00026DE5 F00E 0000 E8               		dc.b $F0, $E, 0, 0, $E8	
00026DEA 080D 000C F0               		dc.b 8, $D, 0, $C, $F0	
00026DEF F801 0014 08               		dc.b $F8, 1, 0, $14, 8	
00026DF4 00                         SME_9IQLQ_1190:	dc.b 0	
00026DF5 00                         SME_9IQLQ_1191:	dc.b 0	
00026DF6 02                         SME_9IQLQ_1192:	dc.b 2	
00026DF7 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0	
00026DFC F40F 0004 F0               		dc.b $F4, $F, 0, 4, $F0	
00026E01 01                         SME_9IQLQ_119D:	dc.b 1	
00026E02 F40F 0000 F0               		dc.b $F4, $F, 0, 0, $F0	
00026E07 02                         SME_9IQLQ_11A3:	dc.b 2	
00026E08 F40F 0000 F0               		dc.b $F4, $F, 0, 0, $F0	
00026E0D E40D 0010 F0               		dc.b $E4, $D, 0, $10, $F0	
00026E12 02                         SME_9IQLQ_11AE:	dc.b 2	
00026E13 E40F 0000 F0               		dc.b $E4, $F, 0, 0, $F0	
00026E18 040D 0010 F0               		dc.b 4, $D, 0, $10, $F0	
00026E1D 02                         SME_9IQLQ_11B9:	dc.b 2	
00026E1E E40F 0000 F0               		dc.b $E4, $F, 0, 0, $F0	
00026E23 040D 0010 F0               		dc.b 4, $D, 0, $10, $F0	
00026E28 02                         SME_9IQLQ_11C4:	dc.b 2	
00026E29 E40F 0000 F0               		dc.b $E4, $F, 0, 0, $F0	
00026E2E 040D 0010 F0               		dc.b 4, $D, 0, $10, $F0	
00026E33 05                         SME_9IQLQ_11CF:	dc.b 5	
00026E34 0209 0000 00               		dc.b 2, 9, 0, 0, 0	
00026E39 E207 0006 F0               		dc.b $E2, 7, 0, 6, $F0	
00026E3E EA06 000E 00               		dc.b $EA, 6, 0, $E, 0	
00026E43 E200 0014 00               		dc.b $E2, 0, 0, $14, 0	
00026E48 0200 0015 F8               		dc.b 2, 0, 0, $15, $F8	
00026E4D 05                         SME_9IQLQ_11E9:	dc.b 5	
00026E4E E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026E53 020C 000C F0               		dc.b 2, $C, 0, $C, $F0	
00026E58 0201 0010 10               		dc.b 2, 1, 0, $10, $10	
00026E5D 0A04 0012 00               		dc.b $A, 4, 0, $12, 0	
00026E62 EA02 0014 08               		dc.b $EA, 2, 0, $14, 8	
00026E67 02                         SME_9IQLQ_1203:	dc.b 2	
00026E68 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026E6D 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026E72 02                         SME_9IQLQ_120E:	dc.b 2	
00026E73 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026E78 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026E7D 02                         SME_9IQLQ_1219:	dc.b 2	
00026E7E E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026E83 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026E88 02                         SME_9IQLQ_1224:	dc.b 2	
00026E89 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026E8E 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026E93 02                         SME_9IQLQ_122F:	dc.b 2	
00026E94 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026E99 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026E9E 02                         SME_9IQLQ_123A:	dc.b 2	
00026E9F E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026EA4 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026EA9 02                         SME_9IQLQ_1245:	dc.b 2	
00026EAA E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026EAF 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026EB4 02                         SME_9IQLQ_1250:	dc.b 2	
00026EB5 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026EBA 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026EBF 02                         SME_9IQLQ_125B:	dc.b 2	
00026EC0 E20F 0000 F0               		dc.b $E2, $F, 0, 0, $F0	
00026EC5 020D 0010 F0               		dc.b 2, $D, 0, $10, $F0	
00026ECA 02                         SME_9IQLQ_1266:	dc.b 2	
00026ECB E20F 0000 F0               		dc.b $E2, $F, 0, 0, $F0	
00026ED0 020D 0010 F0               		dc.b 2, $D, 0, $10, $F0	
00026ED6 00                         		even
00026ED6 00                         		even
00026ED6                            SonicDynPLC:	include	"_maps\Sonic - Dynamic Gfx Script.asm"
00026ED6                            ; --------------------------------------------------------------------------------
00026ED6                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00026ED6                            
00026ED6                            SME_A1owa:	
00026ED6 0000 0000                  		dc.w SME_A1owa_1EE-SME_A1owa, SME_A1owa_1EF-SME_A1owa	
00026EDA 0000 0000                  		dc.w SME_A1owa_1F8-SME_A1owa, SME_A1owa_20B-SME_A1owa	
00026EDE 0000 0000                  		dc.w SME_A1owa_220-SME_A1owa, SME_A1owa_229-SME_A1owa	
00026EE2 0000 0000                  		dc.w SME_A1owa_230-SME_A1owa, SME_A1owa_237-SME_A1owa	
00026EE6 0000 0000                  		dc.w SME_A1owa_240-SME_A1owa, SME_A1owa_245-SME_A1owa	
00026EEA 0000 0000                  		dc.w SME_A1owa_24C-SME_A1owa, SME_A1owa_253-SME_A1owa	
00026EEE 0000 0000                  		dc.w SME_A1owa_25A-SME_A1owa, SME_A1owa_263-SME_A1owa	
00026EF2 0000 0000                  		dc.w SME_A1owa_26A-SME_A1owa, SME_A1owa_279-SME_A1owa	
00026EF6 0000 0000                  		dc.w SME_A1owa_284-SME_A1owa, SME_A1owa_28B-SME_A1owa	
00026EFA 0000 0000                  		dc.w SME_A1owa_292-SME_A1owa, SME_A1owa_29B-SME_A1owa	
00026EFE 0000 0000                  		dc.w SME_A1owa_2A0-SME_A1owa, SME_A1owa_2A7-SME_A1owa	
00026F02 0000 0000                  		dc.w SME_A1owa_2B2-SME_A1owa, SME_A1owa_2BD-SME_A1owa	
00026F06 0000 0000                  		dc.w SME_A1owa_2CA-SME_A1owa, SME_A1owa_2D3-SME_A1owa	
00026F0A 0000 0000                  		dc.w SME_A1owa_2DA-SME_A1owa, SME_A1owa_2E5-SME_A1owa	
00026F0E 0000 0000                  		dc.w SME_A1owa_2EE-SME_A1owa, SME_A1owa_2F5-SME_A1owa	
00026F12 0000 0000                  		dc.w SME_A1owa_300-SME_A1owa, SME_A1owa_309-SME_A1owa	
00026F16 0000 0000                  		dc.w SME_A1owa_30E-SME_A1owa, SME_A1owa_313-SME_A1owa	
00026F1A 0000 0000                  		dc.w SME_A1owa_31E-SME_A1owa, SME_A1owa_327-SME_A1owa	
00026F1E 0000 0000                  		dc.w SME_A1owa_32C-SME_A1owa, SME_A1owa_333-SME_A1owa	
00026F22 0000 0000                  		dc.w SME_A1owa_33A-SME_A1owa, SME_A1owa_347-SME_A1owa	
00026F26 0000 0000                  		dc.w SME_A1owa_354-SME_A1owa, SME_A1owa_35D-SME_A1owa	
00026F2A 0000 0000                  		dc.w SME_A1owa_364-SME_A1owa, SME_A1owa_36F-SME_A1owa	
00026F2E 0000 0000                  		dc.w SME_A1owa_378-SME_A1owa, SME_A1owa_37F-SME_A1owa	
00026F32 0000 0000                  		dc.w SME_A1owa_38A-SME_A1owa, SME_A1owa_38F-SME_A1owa	
00026F36 0000 0000                  		dc.w SME_A1owa_394-SME_A1owa, SME_A1owa_399-SME_A1owa	
00026F3A 0000 0000                  		dc.w SME_A1owa_39E-SME_A1owa, SME_A1owa_3A3-SME_A1owa	
00026F3E 0000 0000                  		dc.w SME_A1owa_3A8-SME_A1owa, SME_A1owa_3AD-SME_A1owa	
00026F42 0000 0000                  		dc.w SME_A1owa_3B2-SME_A1owa, SME_A1owa_3BB-SME_A1owa	
00026F46 0000 0000                  		dc.w SME_A1owa_3C2-SME_A1owa, SME_A1owa_3C9-SME_A1owa	
00026F4A 0000 0000                  		dc.w SME_A1owa_3D0-SME_A1owa, SME_A1owa_3D9-SME_A1owa	
00026F4E 0000 0000                  		dc.w SME_A1owa_3E0-SME_A1owa, SME_A1owa_3E7-SME_A1owa	
00026F52 0000 0000                  		dc.w SME_A1owa_3EE-SME_A1owa, SME_A1owa_3F3-SME_A1owa	
00026F56 0000 0000                  		dc.w SME_A1owa_3F8-SME_A1owa, SME_A1owa_3FD-SME_A1owa	
00026F5A 0000 0000                  		dc.w SME_A1owa_402-SME_A1owa, SME_A1owa_407-SME_A1owa	
00026F5E 0000 0000                  		dc.w SME_A1owa_40C-SME_A1owa, SME_A1owa_411-SME_A1owa	
00026F62 0000 0000                  		dc.w SME_A1owa_416-SME_A1owa, SME_A1owa_41F-SME_A1owa	
00026F66 0000 0000                  		dc.w SME_A1owa_426-SME_A1owa, SME_A1owa_42B-SME_A1owa	
00026F6A 0000 0000                  		dc.w SME_A1owa_432-SME_A1owa, SME_A1owa_43B-SME_A1owa	
00026F6E 0000 0000                  		dc.w SME_A1owa_442-SME_A1owa, SME_A1owa_447-SME_A1owa	
00026F72 0000 0000                  		dc.w SME_A1owa_44E-SME_A1owa, SME_A1owa_455-SME_A1owa	
00026F76 0000 0000                  		dc.w SME_A1owa_45C-SME_A1owa, SME_A1owa_46F-SME_A1owa	
00026F7A 0000 0000                  		dc.w SME_A1owa_482-SME_A1owa, SME_A1owa_489-SME_A1owa	
00026F7E 0000 0000                  		dc.w SME_A1owa_490-SME_A1owa, SME_A1owa_497-SME_A1owa	
00026F82 0000 0000                  		dc.w SME_A1owa_4A2-SME_A1owa, SME_A1owa_4A9-SME_A1owa	
00026F86 0000 0000                  		dc.w SME_A1owa_4B0-SME_A1owa, SME_A1owa_4BB-SME_A1owa	
00026F8A 0000 0000                  		dc.w SME_A1owa_4C6-SME_A1owa, SME_A1owa_4CF-SME_A1owa	
00026F8E 0000 0000                  		dc.w SME_A1owa_4D8-SME_A1owa, SME_A1owa_4E1-SME_A1owa	
00026F92 0000 0000                  		dc.w SME_A1owa_4EA-SME_A1owa, SME_A1owa_4ED-SME_A1owa	
00026F96 0000 0000                  		dc.w SME_A1owa_4F0-SME_A1owa, SME_A1owa_4F3-SME_A1owa	
00026F9A 0000 0000                  		dc.w SME_A1owa_4F6-SME_A1owa, SME_A1owa_4F9-SME_A1owa	
00026F9E 0000 0000                  		dc.w SME_A1owa_4FC-SME_A1owa, SME_A1owa_4FF-SME_A1owa	
00026FA2 0000 0000                  		dc.w SME_A1owa_506-SME_A1owa, SME_A1owa_509-SME_A1owa	
00026FA6 0000 0000                  		dc.w SME_A1owa_50E-SME_A1owa, SME_A1owa_511-SME_A1owa	
00026FAA 0000 0000                  		dc.w SME_A1owa_516-SME_A1owa, SME_A1owa_519-SME_A1owa	
00026FAE 0000 0000                  		dc.w SME_A1owa_522-SME_A1owa, SME_A1owa_531-SME_A1owa	
00026FB2 0000 0000                  		dc.w SME_A1owa_53C-SME_A1owa, SME_A1owa_543-SME_A1owa	
00026FB6 0000 0000                  		dc.w SME_A1owa_54E-SME_A1owa, SME_A1owa_557-SME_A1owa	
00026FBA 0000 0000                  		dc.w SME_A1owa_560-SME_A1owa, SME_A1owa_569-SME_A1owa	
00026FBE 0000 0000                  		dc.w SME_A1owa_57C-SME_A1owa, SME_A1owa_583-SME_A1owa	
00026FC2 0000 0000                  		dc.w SME_A1owa_58A-SME_A1owa, SME_A1owa_591-SME_A1owa	
00026FC6 0000 0000                  		dc.w SME_A1owa_598-SME_A1owa, SME_A1owa_5A7-SME_A1owa	
00026FCA 0000 0000                  		dc.w SME_A1owa_5A8-SME_A1owa, SME_A1owa_5A9-SME_A1owa	
00026FCE 0000 0000                  		dc.w SME_A1owa_5B0-SME_A1owa, SME_A1owa_5B7-SME_A1owa	
00026FD2 0000 0000                  		dc.w SME_A1owa_5BE-SME_A1owa, SME_A1owa_5C1-SME_A1owa	
00026FD6 0000 0000                  		dc.w SME_A1owa_5C8-SME_A1owa, SME_A1owa_5CF-SME_A1owa	
00026FDA 0000 0000                  		dc.w SME_A1owa_5D6-SME_A1owa, SME_A1owa_5DD-SME_A1owa	
00026FDE 0000 0000                  		dc.w SME_A1owa_5E6-SME_A1owa, SME_A1owa_5F7-SME_A1owa	
00026FE2 0000 0000                  		dc.w SME_A1owa_600-SME_A1owa, SME_A1owa_609-SME_A1owa	
00026FE6 0000 0000                  		dc.w SME_A1owa_614-SME_A1owa, SME_A1owa_61F-SME_A1owa	
00026FEA 0000 0000                  		dc.w SME_A1owa_624-SME_A1owa, SME_A1owa_62F-SME_A1owa	
00026FEE 0000 0000                  		dc.w SME_A1owa_636-SME_A1owa, SME_A1owa_641-SME_A1owa	
00026FF2 0000 0000                  		dc.w SME_A1owa_646-SME_A1owa, SME_A1owa_64D-SME_A1owa	
00026FF6 0000 0000                  		dc.w SME_A1owa_654-SME_A1owa, SME_A1owa_65B-SME_A1owa	
00026FFA 0000 0000                  		dc.w SME_A1owa_660-SME_A1owa, SME_A1owa_667-SME_A1owa	
00026FFE 0000 0000                  		dc.w SME_A1owa_67E-SME_A1owa, SME_A1owa_68B-SME_A1owa	
00027002 0000 0000                  		dc.w SME_A1owa_692-SME_A1owa, SME_A1owa_6A1-SME_A1owa	
00027006 0000 0000                  		dc.w SME_A1owa_6A6-SME_A1owa, SME_A1owa_6AF-SME_A1owa	
0002700A 0000 0000                  		dc.w SME_A1owa_6B6-SME_A1owa, SME_A1owa_6BD-SME_A1owa	
0002700E 0000 0000                  		dc.w SME_A1owa_6C6-SME_A1owa, SME_A1owa_6C9-SME_A1owa	
00027012 0000 0000                  		dc.w SME_A1owa_6CC-SME_A1owa, SME_A1owa_6CF-SME_A1owa	
00027016 0000 0000                  		dc.w SME_A1owa_6D2-SME_A1owa, SME_A1owa_6D5-SME_A1owa	
0002701A 0000 0000                  		dc.w SME_A1owa_6D8-SME_A1owa, SME_A1owa_6DB-SME_A1owa	
0002701E 0000 0000                  		dc.w SME_A1owa_6DE-SME_A1owa, SME_A1owa_6E5-SME_A1owa	
00027022 0000 0000                  		dc.w SME_A1owa_6EC-SME_A1owa, SME_A1owa_6F3-SME_A1owa	
00027026 0000 0000                  		dc.w SME_A1owa_6FA-SME_A1owa, SME_A1owa_701-SME_A1owa	
0002702A 0000 0000                  		dc.w SME_A1owa_712-SME_A1owa, SME_A1owa_719-SME_A1owa	
0002702E 0000 0000                  		dc.w SME_A1owa_720-SME_A1owa, SME_A1owa_72F-SME_A1owa	
00027032 0000 0000                  		dc.w SME_A1owa_736-SME_A1owa, SME_A1owa_739-SME_A1owa	
00027036 0000 0000                  		dc.w SME_A1owa_73E-SME_A1owa, SME_A1owa_74D-SME_A1owa	
0002703A 0000 0000                  		dc.w SME_A1owa_754-SME_A1owa, SME_A1owa_757-SME_A1owa	
0002703E 0000 0000                  		dc.w SME_A1owa_75C-SME_A1owa, SME_A1owa_761-SME_A1owa	
00027042 0000 0000                  		dc.w SME_A1owa_76C-SME_A1owa, SME_A1owa_779-SME_A1owa	
00027046 0000 0000                  		dc.w SME_A1owa_782-SME_A1owa, SME_A1owa_789-SME_A1owa	
0002704A 0000 0000                  		dc.w SME_A1owa_794-SME_A1owa, SME_A1owa_79D-SME_A1owa	
0002704E 0000 0000                  		dc.w SME_A1owa_7A4-SME_A1owa, SME_A1owa_7AF-SME_A1owa	
00027052 0000 0000                  		dc.w SME_A1owa_7B6-SME_A1owa, SME_A1owa_7B9-SME_A1owa	
00027056 0000 0000                  		dc.w SME_A1owa_7BC-SME_A1owa, SME_A1owa_7C3-SME_A1owa	
0002705A 0000 0000                  		dc.w SME_A1owa_7CA-SME_A1owa, SME_A1owa_7CD-SME_A1owa	
0002705E 0000 0000                  		dc.w SME_A1owa_7D4-SME_A1owa, SME_A1owa_7D9-SME_A1owa	
00027062 0000 0000                  		dc.w SME_A1owa_7E6-SME_A1owa, SME_A1owa_7F3-SME_A1owa	
00027066 0000 0000                  		dc.w SME_A1owa_7FC-SME_A1owa, SME_A1owa_803-SME_A1owa	
0002706A 0000 0000                  		dc.w SME_A1owa_80E-SME_A1owa, SME_A1owa_817-SME_A1owa	
0002706E 0000 0000                  		dc.w SME_A1owa_81E-SME_A1owa, SME_A1owa_829-SME_A1owa	
00027072 0000 0000                  		dc.w SME_A1owa_830-SME_A1owa, SME_A1owa_83B-SME_A1owa	
00027076 0000 0000                  		dc.w SME_A1owa_844-SME_A1owa, SME_A1owa_84D-SME_A1owa	
0002707A 0000 0000                  		dc.w SME_A1owa_852-SME_A1owa, SME_A1owa_857-SME_A1owa	
0002707E 0000 0000                  		dc.w SME_A1owa_85C-SME_A1owa, SME_A1owa_861-SME_A1owa	
00027082 0000 0000                  		dc.w SME_A1owa_866-SME_A1owa, SME_A1owa_86D-SME_A1owa	
00027086 0000 0000                  		dc.w SME_A1owa_874-SME_A1owa, SME_A1owa_883-SME_A1owa	
0002708A 0000 0000                  		dc.w SME_A1owa_888-SME_A1owa, SME_A1owa_88D-SME_A1owa	
0002708E 0000 0000                  		dc.w SME_A1owa_892-SME_A1owa, SME_A1owa_897-SME_A1owa	
00027092 0000 0000                  		dc.w SME_A1owa_89E-SME_A1owa, SME_A1owa_8A7-SME_A1owa	
00027096 0000 0000                  		dc.w SME_A1owa_8A8-SME_A1owa, SME_A1owa_8A9-SME_A1owa	
0002709A 0000 0000                  		dc.w SME_A1owa_8B0-SME_A1owa, SME_A1owa_8B7-SME_A1owa	
0002709E 0000 0000                  		dc.w SME_A1owa_8B8-SME_A1owa, SME_A1owa_8B9-SME_A1owa	
000270A2 0000 0000                  		dc.w SME_A1owa_8BE-SME_A1owa, SME_A1owa_8C1-SME_A1owa	
000270A6 0000 0000                  		dc.w SME_A1owa_8C6-SME_A1owa, SME_A1owa_8CB-SME_A1owa	
000270AA 0000 0000                  		dc.w SME_A1owa_8D0-SME_A1owa, SME_A1owa_8D5-SME_A1owa	
000270AE 0000 0000                  		dc.w SME_A1owa_8E0-SME_A1owa, SME_A1owa_8EB-SME_A1owa	
000270B2 0000 0000                  		dc.w SME_A1owa_8F0-SME_A1owa, SME_A1owa_8F5-SME_A1owa	
000270B6 0000 0000                  		dc.w SME_A1owa_8FA-SME_A1owa, SME_A1owa_8FF-SME_A1owa	
000270BA 0000 0000                  		dc.w SME_A1owa_904-SME_A1owa, SME_A1owa_909-SME_A1owa	
000270BE 0000 0000                  		dc.w SME_A1owa_90E-SME_A1owa, SME_A1owa_913-SME_A1owa	
000270C2 0000                       		dc.w SME_A1owa_918-SME_A1owa	
000270C4 00                         SME_A1owa_1EE:	dc.b 0	
000270C5 0420 0070 0320 0B20 0E     SME_A1owa_1EF:	dc.b 4, $20, 0, $70, 3, $20, $B, $20, $E	
000270CE 0920 0020 0B20 0E10 0300+  SME_A1owa_1F8:	dc.b 9, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, 6, 0, $A, $10, $1D	
000270E1 0A20 0020 0B20 0E10 0300+  SME_A1owa_20B:	dc.b $A, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, $A, 0, $1F, 0, $26, 0, $32	
000270F6 04B6 C606 D200 0920 0E     SME_A1owa_220:	dc.b 4, $B6, $C6, 6, $D2, 0, 9, $20, $E	
000270FF 0350 1150 1720 0E          SME_A1owa_229:	dc.b 3, $50, $11, $50, $17, $20, $E	
00027106 0350 2050 1720 0E          SME_A1owa_230:	dc.b 3, $50, $20, $50, $17, $20, $E	
0002710D 0450 2050 1710 2700 0E     SME_A1owa_237:	dc.b 4, $50, $20, $50, $17, $10, $27, 0, $E	
00027116 02B6 D316 DF               SME_A1owa_240:	dc.b 2, $B6, $D3, $16, $DF	
0002711B 0356 E126 E736 EA          SME_A1owa_245:	dc.b 3, $56, $E1, $26, $E7, $36, $EA	
00027122 0356 E126 E736 EE          SME_A1owa_24C:	dc.b 3, $56, $E1, $26, $E7, $36, $EE	
00027129 03B6 F226 FE27 01          SME_A1owa_253:	dc.b 3, $B6, $F2, $26, $FE, $27, 1	
00027130 0420 0B20 0E87 0A07 13     SME_A1owa_25A:	dc.b 4, $20, $B, $20, $E, $87, $A, 7, $13	
00027139 0380 2920 0B20 0E          SME_A1owa_263:	dc.b 3, $80, $29, $20, $B, $20, $E	
00027140 0750 3A50 4010 4600 3530+  SME_A1owa_26A:	dc.b 7, $50, $3A, $50, $40, $10, $46, 0, $35, $30, $36, 0, $34, 0, $33	
0002714F 05B0 4800 3530 3600 3400+  SME_A1owa_279:	dc.b 5, $B0, $48, 0, $35, $30, $36, 0, $34, 0, $33	
0002715A 0380 5A57 0400 09          SME_A1owa_284:	dc.b 3, $80, $5A, $57, 4, 0, 9	
00027161 03F7 1437 2407 28          SME_A1owa_28B:	dc.b 3, $F7, $14, $37, $24, 7, $28	
00027168 0450 5450 6350 6910 6F     SME_A1owa_292:	dc.b 4, $50, $54, $50, $63, $50, $69, $10, $6F	
00027171 0250 54B0 71               SME_A1owa_29B:	dc.b 2, $50, $54, $B0, $71	
00027176 0357 0457 2907 2F          SME_A1owa_2A0:	dc.b 3, $57, 4, $57, $29, 7, $2F	
0002717D 0530 7D50 8100 3310 3430+  SME_A1owa_2A7:	dc.b 5, $30, $7D, $50, $81, 0, $33, $10, $34, $30, $36	
00027188 0550 8750 8D20 9350 9600+  SME_A1owa_2B2:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
00027193 0650 8710 9D30 9F50 A330+  SME_A1owa_2BD:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
000271A0 0450 AE10 B470 B620 BE     SME_A1owa_2CA:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
000271A9 03F9 7539 8539 89          SME_A1owa_2D3:	dc.b 3, $F9, $75, $39, $85, $39, $89	
000271B0 0550 C130 C770 CB20 D310+  SME_A1owa_2DA:	dc.b 5, $50, $C1, $30, $C7, $70, $CB, $20, $D3, $10, $D6	
000271BB 0450 C110 D870 DA20 E2     SME_A1owa_2E5:	dc.b 4, $50, $C1, $10, $D8, $70, $DA, $20, $E2	
000271C4 03F9 8D39 9D39 A1          SME_A1owa_2EE:	dc.b 3, $F9, $8D, $39, $9D, $39, $A1	
000271CB 0550 8710 9D00 9370 E520+  SME_A1owa_2F5:	dc.b 5, $50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED	
000271D6 0470 F050 F810 FE51 00     SME_A1owa_300:	dc.b 4, $70, $F0, $50, $F8, $10, $FE, $51, 0	
000271DF 0270 F0B1 06               SME_A1owa_309:	dc.b 2, $70, $F0, $B1, 6	
000271E4 0281 1858 F9               SME_A1owa_30E:	dc.b 2, $81, $18, $58, $F9	
000271E9 0508 FF39 0009 04B9 0529+  SME_A1owa_313:	dc.b 5, 8, $FF, $39, 0, 9, 4, $B9, 5, $29, $11	
000271F4 0451 1251 2111 2751 29     SME_A1owa_31E:	dc.b 4, $51, $12, $51, $21, $11, $27, $51, $29	
000271FD 0251 12B1 2F               SME_A1owa_327:	dc.b 2, $51, $12, $B1, $2F	
00027202 0329 1479 1719 1F          SME_A1owa_32C:	dc.b 3, $29, $14, $79, $17, $19, $1F	
00027209 0370 F001 0681 3B          SME_A1owa_333:	dc.b 3, $70, $F0, 1, 6, $81, $3B	
00027210 0651 4411 4A11 4C81 4E01+  SME_A1owa_33A:	dc.b 6, $51, $44, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58	
0002721D 0651 4421 5911 5C11 5E81+  SME_A1owa_347:	dc.b 6, $51, $44, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57	
0002722A 0451 6911 6F81 7111 7A     SME_A1owa_354:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
00027233 03F9 A529 B529 B8          SME_A1owa_35D:	dc.b 3, $F9, $A5, $29, $B5, $29, $B8	
0002723A 0551 7C21 8211 8571 8721+  SME_A1owa_364:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
00027245 0451 7C11 9281 9411 9D     SME_A1owa_36F:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
0002724E 03F9 BB29 CB19 CE          SME_A1owa_378:	dc.b 3, $F9, $BB, $29, $CB, $19, $CE	
00027255 0551 4481 9F11 5E11 A801+  SME_A1owa_37F:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
00027260 0251 AAB1 B0               SME_A1owa_38A:	dc.b 2, $51, $AA, $B1, $B0	
00027265 02B7 3057 3C               SME_A1owa_38F:	dc.b 2, $B7, $30, $57, $3C	
0002726A 0250 54B1 BC               SME_A1owa_394:	dc.b 2, $50, $54, $B1, $BC	
0002726F 0257 3CB7 42               SME_A1owa_399:	dc.b 2, $57, $3C, $B7, $42	
00027274 0251 AAB1 C8               SME_A1owa_39E:	dc.b 2, $51, $AA, $B1, $C8	
00027279 0257 3CB7 4E               SME_A1owa_3A3:	dc.b 2, $57, $3C, $B7, $4E	
0002727E 0250 54B1 D4               SME_A1owa_3A8:	dc.b 2, $50, $54, $B1, $D4	
00027283 0257 3CB7 5A               SME_A1owa_3AD:	dc.b 2, $57, $3C, $B7, $5A	
00027288 0451 E011 E6B1 E801 F4     SME_A1owa_3B2:	dc.b 4, $51, $E0, $11, $E6, $B1, $E8, 1, $F4	
00027291 03F8 7128 8128 84          SME_A1owa_3BB:	dc.b 3, $F8, $71, $28, $81, $28, $84	
00027298 0351 F511 FBB1 FD          SME_A1owa_3C2:	dc.b 3, $51, $F5, $11, $FB, $B1, $FD	
0002729F 03B8 BD78 C901 F4          SME_A1owa_3C9:	dc.b 3, $B8, $BD, $78, $C9, 1, $F4	
000272A6 0451 E012 09B2 0B01 F4     SME_A1owa_3D0:	dc.b 4, $51, $E0, $12, 9, $B2, $B, 1, $F4	
000272AF 03B8 D178 DD01 F4          SME_A1owa_3D9:	dc.b 3, $B8, $D1, $78, $DD, 1, $F4	
000272B6 0351 F511 FBB2 17          SME_A1owa_3E0:	dc.b 3, $51, $F5, $11, $FB, $B2, $17	
000272BD 0378 E5B8 ED01 F4          SME_A1owa_3E7:	dc.b 3, $78, $E5, $B8, $ED, 1, $F4	
000272C4 0252 23B2 29               SME_A1owa_3EE:	dc.b 2, $52, $23, $B2, $29	
000272C9 0258 87B8 8D               SME_A1owa_3F3:	dc.b 2, $58, $87, $B8, $8D	
000272CE 0251 12B2 35               SME_A1owa_3F8:	dc.b 2, $51, $12, $B2, $35	
000272D3 0258 87B8 99               SME_A1owa_3FD:	dc.b 2, $58, $87, $B8, $99	
000272D8 0252 23B2 41               SME_A1owa_402:	dc.b 2, $52, $23, $B2, $41	
000272DD 0258 87B8 A5               SME_A1owa_407:	dc.b 2, $58, $87, $B8, $A5	
000272E2 0251 12B2 4D               SME_A1owa_40C:	dc.b 2, $51, $12, $B2, $4D	
000272E7 0258 87B8 B1               SME_A1owa_411:	dc.b 2, $58, $87, $B8, $B1	
000272EC 0452 5912 5FB2 6102 6D     SME_A1owa_416:	dc.b 4, $52, $59, $12, $5F, $B2, $61, 2, $6D	
000272F5 03B9 2129 2D59 30          SME_A1owa_41F:	dc.b 3, $B9, $21, $29, $2D, $59, $30	
000272FC 0272 6EB2 76               SME_A1owa_426:	dc.b 2, $72, $6E, $B2, $76	
00027301 03B9 3629 4259 45          SME_A1owa_42B:	dc.b 3, $B9, $36, $29, $42, $59, $45	
00027308 0452 5912 82B2 8402 6D     SME_A1owa_432:	dc.b 4, $52, $59, $12, $82, $B2, $84, 2, $6D	
00027311 03B9 4B29 5759 5A          SME_A1owa_43B:	dc.b 3, $B9, $4B, $29, $57, $59, $5A	
00027318 0272 6EB2 90               SME_A1owa_442:	dc.b 2, $72, $6E, $B2, $90	
0002731D 03B9 6029 6C59 6F          SME_A1owa_447:	dc.b 3, $B9, $60, $29, $6C, $59, $6F	
00027324 03B4 EE24 FA54 FD          SME_A1owa_44E:	dc.b 3, $B4, $EE, $24, $FA, $54, $FD	
0002732B 03B5 0325 0F55 12          SME_A1owa_455:	dc.b 3, $B5, 3, $25, $F, $55, $12	
00027332 0925 1E55 2105 3715 1815+  SME_A1owa_45C:	dc.b 9, $25, $1E, $55, $21, 5, $37, $15, $18, $15, $1A, $15, $1C, $14, $EE, $14, $F2, $14, $F6	
00027345 0925 2D55 3005 3615 2715+  SME_A1owa_46F:	dc.b 9, $25, $2D, $55, $30, 5, $36, $15, $27, $15, $29, $15, $2B, $15, 3, $15, 7, $15, $B	
00027358 03F6 6416 7436 76          SME_A1owa_482:	dc.b 3, $F6, $64, $16, $74, $36, $76	
0002735F 03B6 8176 8D16 95          SME_A1owa_489:	dc.b 3, $B6, $81, $76, $8D, $16, $95	
00027366 03F5 3835 4805 4C          SME_A1owa_490:	dc.b 3, $F5, $38, $35, $48, 5, $4C	
0002736D 05B5 4D35 5915 5D15 5F25+  SME_A1owa_497:	dc.b 5, $B5, $4D, $35, $59, $15, $5D, $15, $5F, $25, $61	
00027378 03B5 6425 7055 73          SME_A1owa_4A2:	dc.b 3, $B5, $64, $25, $70, $55, $73	
0002737F 03B5 7925 8555 88          SME_A1owa_4A9:	dc.b 3, $B5, $79, $25, $85, $55, $88	
00027386 0555 9425 9A05 AD55 8E55+  SME_A1owa_4B0:	dc.b 5, $55, $94, $25, $9A, 5, $AD, $55, $8E, $55, $64	
00027391 0525 A355 A605 AC55 9D55+  SME_A1owa_4BB:	dc.b 5, $25, $A3, $55, $A6, 5, $AC, $55, $9D, $55, $79	
0002739C 04B5 BA25 C625 C925 CC     SME_A1owa_4C6:	dc.b 4, $B5, $BA, $25, $C6, $25, $C9, $25, $CC	
000273A5 04B5 AE25 CF25 D225 D5     SME_A1owa_4CF:	dc.b 4, $B5, $AE, $25, $CF, $25, $D2, $25, $D5	
000273AE 04F5 D825 E805 EB05 EC     SME_A1owa_4D8:	dc.b 4, $F5, $D8, $25, $E8, 5, $EB, 5, $EC	
000273B7 04F5 ED25 FD16 0016 02     SME_A1owa_4E1:	dc.b 4, $F5, $ED, $25, $FD, $16, 0, $16, 2	
000273C0 01F2 9C                    SME_A1owa_4EA:	dc.b 1, $F2, $9C	
000273C3 01F6 2B                    SME_A1owa_4ED:	dc.b 1, $F6, $2B	
000273C6 01F2 AC                    SME_A1owa_4F0:	dc.b 1, $F2, $AC	
000273C9 01F6 3B                    SME_A1owa_4F3:	dc.b 1, $F6, $3B	
000273CC 01F2 BC                    SME_A1owa_4F6:	dc.b 1, $F2, $BC	
000273CF 01F6 4B                    SME_A1owa_4F9:	dc.b 1, $F6, $4B	
000273D2 01F2 CC                    SME_A1owa_4FC:	dc.b 1, $F2, $CC	
000273D5 0386 5B36 7A26 7E          SME_A1owa_4FF:	dc.b 3, $86, $5B, $36, $7A, $26, $7E	
000273DC 01F2 DC                    SME_A1owa_506:	dc.b 1, $F2, $DC	
000273DF 02B2 EC22 F8               SME_A1owa_509:	dc.b 2, $B2, $EC, $22, $F8	
000273E4 01F2 FB                    SME_A1owa_50E:	dc.b 1, $F2, $FB	
000273E7 02B3 0B23 17               SME_A1owa_511:	dc.b 2, $B3, $B, $23, $17	
000273EC 01F3 1A                    SME_A1owa_516:	dc.b 1, $F3, $1A	
000273EF 0453 2AB3 3018 1508 17     SME_A1owa_519:	dc.b 4, $53, $2A, $B3, $30, $18, $15, 8, $17	
000273F8 0753 3C73 4213 4A03 4C08+  SME_A1owa_522:	dc.b 7, $53, $3C, $73, $42, $13, $4A, 3, $4C, 8, $1A, 8, $19, 8, $18	
00027407 0528 1BB8 1E28 2A18 2D08+  SME_A1owa_531:	dc.b 5, $28, $1B, $B8, $1E, $28, $2A, $18, $2D, 8, $2F	
00027412 03B8 3038 3C18 40          SME_A1owa_53C:	dc.b 3, $B8, $30, $38, $3C, $18, $40	
00027419 05B4 8834 9413 FD03 FF0A+  SME_A1owa_543:	dc.b 5, $B4, $88, $34, $94, $13, $FD, 3, $FF, $A, $CD	
00027424 0427 6627 6927 6C20 0E     SME_A1owa_54E:	dc.b 4, $27, $66, $27, $69, $27, $6C, $20, $E	
0002742D 0413 4D73 4F23 5703 5A     SME_A1owa_557:	dc.b 4, $13, $4D, $73, $4F, $23, $57, 3, $5A	
00027436 0423 5B23 5EF3 6108 42     SME_A1owa_560:	dc.b 4, $23, $5B, $23, $5E, $F3, $61, 8, $42	
0002743F 0928 5338 5678 4303 6408+  SME_A1owa_569:	dc.b 9, $28, $53, $38, $56, $78, $43, 3, $64, 8, $4B, $28, $4F, 8, $4D, 8, $4E, 8, $52	
00027452 03B3 7173 7D00 71          SME_A1owa_57C:	dc.b 3, $B3, $71, $73, $7D, 0, $71	
00027459 03F8 5B18 6B38 6D          SME_A1owa_583:	dc.b 3, $F8, $5B, $18, $6B, $38, $6D	
00027460 03F8 0138 113A CE          SME_A1owa_58A:	dc.b 3, $F8, 1, $38, $11, $3A, $CE	
00027467 03F9 E229 F209 F5          SME_A1owa_591:	dc.b 3, $F9, $E2, $29, $F2, 9, $F5	
0002746E 0729 E229 E629 EA29 EE39+  SME_A1owa_598:	dc.b 7, $29, $E2, $29, $E6, $29, $EA, $29, $EE, $39, $F6, $19, $FA, $19, $FC	
0002747D 00                         SME_A1owa_5A7:	dc.b 0	
0002747E 00                         SME_A1owa_5A8:	dc.b 0	
0002747F 0373 9D03 A533 A6          SME_A1owa_5A9:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
00027486 0373 8533 8D23 91          SME_A1owa_5B0:	dc.b 3, $73, $85, $33, $8D, $23, $91	
0002748D 0376 9736 9F06 A3          SME_A1owa_5B7:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
00027494 0183 94                    SME_A1owa_5BE:	dc.b 1, $83, $94	
00027497 0376 9736 9F06 A3          SME_A1owa_5C1:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
0002749E 0373 8533 8D23 91          SME_A1owa_5C8:	dc.b 3, $73, $85, $33, $8D, $23, $91	
000274A5 0373 9D03 A533 A6          SME_A1owa_5CF:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
000274AC 0373 AA33 B223 B6          SME_A1owa_5D6:	dc.b 3, $73, $AA, $33, $B2, $23, $B6	
000274B3 04B3 B903 C603 C503 C7     SME_A1owa_5DD:	dc.b 4, $B3, $B9, 3, $C6, 3, $C5, 3, $C7	
000274BC 0856 1113 C303 C503 C613+  SME_A1owa_5E6:	dc.b 8, $56, $11, $13, $C3, 3, $C5, 3, $C6, $13, $BF, 6, 5, 6, 6, 3, $C7	
000274CD 04B3 DA33 E603 EA03 EB     SME_A1owa_5F7:	dc.b 4, $B3, $DA, $33, $E6, 3, $EA, 3, $EB	
000274D6 04B3 C833 D403 D803 D9     SME_A1owa_600:	dc.b 4, $B3, $C8, $33, $D4, 3, $D8, 3, $D9	
000274DF 0583 EC13 F553 F713 FD03+  SME_A1owa_609:	dc.b 5, $83, $EC, $13, $F5, $53, $F7, $13, $FD, 3, $FF	
000274EA 0584 0014 0953 F713 FD03+  SME_A1owa_614:	dc.b 5, $84, 0, $14, 9, $53, $F7, $13, $FD, 3, $FF	
000274F5 0284 0B74 14               SME_A1owa_61F:	dc.b 2, $84, $B, $74, $14	
000274FA 0534 9824 9C34 9F34 A304+  SME_A1owa_624:	dc.b 5, $34, $98, $24, $9C, $34, $9F, $34, $A3, 4, $A7	
00027505 0384 1C24 2514 28          SME_A1owa_62F:	dc.b 3, $84, $1C, $24, $25, $14, $28	
0002750C 0504 A834 A934 AD34 B124+  SME_A1owa_636:	dc.b 5, 4, $A8, $34, $A9, $34, $AD, $34, $B1, $24, $B5	
00027517 0284 2A74 33               SME_A1owa_641:	dc.b 2, $84, $2A, $74, $33	
0002751C 03B7 DF17 EB27 ED          SME_A1owa_646:	dc.b 3, $B7, $DF, $17, $EB, $27, $ED	
00027523 0384 1C24 3B14 3E          SME_A1owa_64D:	dc.b 3, $84, $1C, $24, $3B, $14, $3E	
0002752A 03B7 F017 FC27 FE          SME_A1owa_654:	dc.b 3, $B7, $F0, $17, $FC, $27, $FE	
00027531 0254 40B4 46               SME_A1owa_65B:	dc.b 2, $54, $40, $B4, $46	
00027536 0374 5214 5AB4 5C          SME_A1owa_660:	dc.b 3, $74, $52, $14, $5A, $B4, $5C	
0002753D 0B74 6814 7004 7924 7504+  SME_A1owa_667:	dc.b $B, $74, $68, $14, $70, 4, $79, $24, $75, 4, $78, 4, $73, 4, $72, 4, $74, 4, $85, 4, $87, 4, $83	
00027554 0674 7A14 7054 8204 7924+  SME_A1owa_67E:	dc.b 6, $74, $7A, $14, $70, $54, $82, 4, $79, $24, $75, 4, $78	
00027561 0354 C9B4 CF10 6D          SME_A1owa_68B:	dc.b 3, $54, $C9, $B4, $CF, $10, $6D	
00027568 0714 C334 C514 BE04 BD14+  SME_A1owa_692:	dc.b 7, $14, $C3, $34, $C5, $14, $BE, 4, $BD, $14, $B8, $24, $BA, $24, $C0	
00027577 02F4 DB24 EB               SME_A1owa_6A1:	dc.b 2, $F4, $DB, $24, $EB	
0002757C 04B6 A416 B026 B206 B1     SME_A1owa_6A6:	dc.b 4, $B6, $A4, $16, $B0, $26, $B2, 6, $B1	
00027585 03B6 B516 C126 C3          SME_A1owa_6AF:	dc.b 3, $B6, $B5, $16, $C1, $26, $C3	
0002758C 03B9 D129 DD19 E0          SME_A1owa_6B6:	dc.b 3, $B9, $D1, $29, $DD, $19, $E0	
00027593 0427 6F37 7237 7627 7A     SME_A1owa_6BD:	dc.b 4, $27, $6F, $37, $72, $37, $76, $27, $7A	
0002759C 01F7 7E                    SME_A1owa_6C6:	dc.b 1, $F7, $7E	
0002759F 01F7 8E                    SME_A1owa_6C9:	dc.b 1, $F7, $8E	
000275A2 01F7 9E                    SME_A1owa_6CC:	dc.b 1, $F7, $9E	
000275A5 01F7 AE                    SME_A1owa_6CF:	dc.b 1, $F7, $AE	
000275A8 01F7 BE                    SME_A1owa_6D2:	dc.b 1, $F7, $BE	
000275AB 01FA 08                    SME_A1owa_6D5:	dc.b 1, $FA, 8	
000275AE 01FA BD                    SME_A1owa_6D8:	dc.b 1, $FA, $BD	
000275B1 01BA 18                    SME_A1owa_6DB:	dc.b 1, $BA, $18	
000275B4 03FA 243A 341A 38          SME_A1owa_6DE:	dc.b 3, $FA, $24, $3A, $34, $1A, $38	
000275BB 035A 46BA 3A0A 4C          SME_A1owa_6E5:	dc.b 3, $5A, $46, $BA, $3A, $A, $4C	
000275C2 03BA 4D5A 590A 5F          SME_A1owa_6EC:	dc.b 3, $BA, $4D, $5A, $59, $A, $5F	
000275C9 03BA 605A 6C0A 72          SME_A1owa_6F3:	dc.b 3, $BA, $60, $5A, $6C, $A, $72	
000275D0 03BA 735A 7F0A 85          SME_A1owa_6FA:	dc.b 3, $BA, $73, $5A, $7F, $A, $85	
000275D7 085A 7F0A 852A 781A 7C0A+  SME_A1owa_701:	dc.b 8, $5A, $7F, $A, $85, $2A, $78, $1A, $7C, $A, $76, $A, $86, $2A, $87, $1A, $8A	
000275E8 0320 0EFA 8C3A 9C          SME_A1owa_712:	dc.b 3, $20, $E, $FA, $8C, $3A, $9C	
000275EF 0320 0EFA A02A B0          SME_A1owa_719:	dc.b 3, $20, $E, $FA, $A0, $2A, $B0	
000275F6 0720 0E2A 912A 952A 980A+  SME_A1owa_720:	dc.b 7, $20, $E, $2A, $91, $2A, $95, $2A, $98, $A, $8F, $3A, $B5, $3A, $B9	
00027605 0350 3A50 4010 46          SME_A1owa_72F:	dc.b 3, $50, $3A, $50, $40, $10, $46	
0002760C 01B0 48                    SME_A1owa_736:	dc.b 1, $B0, $48	
0002760F 0280 5A00 09               SME_A1owa_739:	dc.b 2, $80, $5A, 0, 9	
00027614 0707 2817 1617 1A27 1D07+  SME_A1owa_73E:	dc.b 7, 7, $28, $17, $16, $17, $1A, $27, $1D, 7, $19, 7, $15, $27, $21	
00027623 0350 6350 6910 6F          SME_A1owa_74D:	dc.b 3, $50, $63, $50, $69, $10, $6F	
0002762A 01B0 71                    SME_A1owa_754:	dc.b 1, $B0, $71	
0002762D 0257 2907 2F               SME_A1owa_757:	dc.b 2, $57, $29, 7, $2F	
00027632 0230 7D50 81               SME_A1owa_75C:	dc.b 2, $30, $7D, $50, $81	
00027637 0550 8750 8D20 9350 9600+  SME_A1owa_761:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
00027642 0650 8710 9D30 9F50 A330+  SME_A1owa_76C:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
0002764F 0450 AE10 B470 B620 BE     SME_A1owa_779:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
00027658 03F9 7539 8539 89          SME_A1owa_782:	dc.b 3, $F9, $75, $39, $85, $39, $89	
0002765F 0550 C130 C770 CB20 D310+  SME_A1owa_789:	dc.b 5, $50, $C1, $30, $C7, $70, $CB, $20, $D3, $10, $D6	
0002766A 0450 C110 D870 DA20 E2     SME_A1owa_794:	dc.b 4, $50, $C1, $10, $D8, $70, $DA, $20, $E2	
00027673 03F9 8D39 9D39 A1          SME_A1owa_79D:	dc.b 3, $F9, $8D, $39, $9D, $39, $A1	
0002767A 0550 8710 9D00 9370 E520+  SME_A1owa_7A4:	dc.b 5, $50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED	
00027685 0350 F810 FE51 00          SME_A1owa_7AF:	dc.b 3, $50, $F8, $10, $FE, $51, 0	
0002768C 01B1 06                    SME_A1owa_7B6:	dc.b 1, $B1, 6	
0002768F 0181 18                    SME_A1owa_7B9:	dc.b 1, $81, $18	
00027692 0308 FF89 0B29 01          SME_A1owa_7BC:	dc.b 3, 8, $FF, $89, $B, $29, 1	
00027699 0351 2111 2751 29          SME_A1owa_7C3:	dc.b 3, $51, $21, $11, $27, $51, $29	
000276A0 01B1 2F                    SME_A1owa_7CA:	dc.b 1, $B1, $2F	
000276A3 0319 1F09 1639 1B          SME_A1owa_7CD:	dc.b 3, $19, $1F, 9, $16, $39, $1B	
000276AA 0201 0681 3B               SME_A1owa_7D4:	dc.b 2, 1, 6, $81, $3B	
000276AF 0651 4411 4A11 4C81 4E01+  SME_A1owa_7D9:	dc.b 6, $51, $44, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58	
000276BC 0651 4421 5911 5C11 5E81+  SME_A1owa_7E6:	dc.b 6, $51, $44, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57	
000276C9 0451 6911 6F81 7111 7A     SME_A1owa_7F3:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
000276D2 03F9 A529 B529 B8          SME_A1owa_7FC:	dc.b 3, $F9, $A5, $29, $B5, $29, $B8	
000276D9 0551 7C21 8211 8571 8721+  SME_A1owa_803:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
000276E4 0451 7C11 9281 9411 9D     SME_A1owa_80E:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
000276ED 03F9 BB29 CB19 CE          SME_A1owa_817:	dc.b 3, $F9, $BB, $29, $CB, $19, $CE	
000276F4 0551 4481 9F11 5E11 A801+  SME_A1owa_81E:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
000276FF 03BA D32A DF0A E2          SME_A1owa_829:	dc.b 3, $BA, $D3, $2A, $DF, $A, $E2	
00027706 05BA E31A EF1A F11A F30A+  SME_A1owa_830:	dc.b 5, $BA, $E3, $1A, $EF, $1A, $F1, $1A, $F3, $A, $F5	
00027711 04BA F61B 022B 042B 07     SME_A1owa_83B:	dc.b 4, $BA, $F6, $1B, 2, $2B, 4, $2B, 7	
0002771A 04BB 0A1B 162B 182B 1B     SME_A1owa_844:	dc.b 4, $BB, $A, $1B, $16, $2B, $18, $2B, $1B	
00027723 02FB 1E7B 2E               SME_A1owa_84D:	dc.b 2, $FB, $1E, $7B, $2E	
00027728 02FB 367B 46               SME_A1owa_852:	dc.b 2, $FB, $36, $7B, $46	
0002772D 02FB 1E7B 2E               SME_A1owa_857:	dc.b 2, $FB, $1E, $7B, $2E	
00027732 02FB 367B 46               SME_A1owa_85C:	dc.b 2, $FB, $36, $7B, $46	
00027737 023B 4EFB 52               SME_A1owa_861:	dc.b 2, $3B, $4E, $FB, $52	
0002773C 03FB 623B 722B 76          SME_A1owa_866:	dc.b 3, $FB, $62, $3B, $72, $2B, $76	
00027743 03FB 792B 892B 8C          SME_A1owa_86D:	dc.b 3, $FB, $79, $2B, $89, $2B, $8C	
0002774A 078B 970B 8F3B 900B 960B+  SME_A1owa_874:	dc.b 7, $8B, $97, $B, $8F, $3B, $90, $B, $96, $B, $95, $B, $94, $1B, $A0	
00027759 02FB 1E7B 2E               SME_A1owa_883:	dc.b 2, $FB, $1E, $7B, $2E	
0002775E 02FB 367B 46               SME_A1owa_888:	dc.b 2, $FB, $36, $7B, $46	
00027763 02FB 1E7B 2E               SME_A1owa_88D:	dc.b 2, $FB, $1E, $7B, $2E	
00027768 02FB 367B 46               SME_A1owa_892:	dc.b 2, $FB, $36, $7B, $46	
0002776D 032D 23FD 132D 26          SME_A1owa_897:	dc.b 3, $2D, $23, $FD, $13, $2D, $26	
00027774 04FD 293D 391D 3D0D 3F     SME_A1owa_89E:	dc.b 4, $FD, $29, $3D, $39, $1D, $3D, $D, $3F	
0002777D 00                         SME_A1owa_8A7:	dc.b 0	
0002777E 00                         SME_A1owa_8A8:	dc.b 0	
0002777F 03BD 403D 4C5D 50          SME_A1owa_8A9:	dc.b 3, $BD, $40, $3D, $4C, $5D, $50	
00027786 03BD 567D 621D 6A          SME_A1owa_8B0:	dc.b 3, $BD, $56, $7D, $62, $1D, $6A	
0002778D 00                         SME_A1owa_8B7:	dc.b 0	
0002778E 00                         SME_A1owa_8B8:	dc.b 0	
0002778F 023B A2FB A6               SME_A1owa_8B9:	dc.b 2, $3B, $A2, $FB, $A6	
00027794 01FB B6                    SME_A1owa_8BE:	dc.b 1, $FB, $B6	
00027797 02FB C67B D6               SME_A1owa_8C1:	dc.b 2, $FB, $C6, $7B, $D6	
0002779C 02FB DE7B EE               SME_A1owa_8C6:	dc.b 2, $FB, $DE, $7B, $EE	
000277A1 02FB F67C 06               SME_A1owa_8CB:	dc.b 2, $FB, $F6, $7C, 6	
000277A6 02FC 0E7C 1E               SME_A1owa_8D0:	dc.b 2, $FC, $E, $7C, $1E	
000277AB 055C 267C 2C5C 340C 3A0C+  SME_A1owa_8D5:	dc.b 5, $5C, $26, $7C, $2C, $5C, $34, $C, $3A, $C, $3B	
000277B6 05BC 3C3C 481C 4C1C 4E2C+  SME_A1owa_8E0:	dc.b 5, $BC, $3C, $3C, $48, $1C, $4C, $1C, $4E, $2C, $50	
000277C1 02BC 535C 5F               SME_A1owa_8EB:	dc.b 2, $BC, $53, $5C, $5F	
000277C6 02BC 655C 71               SME_A1owa_8F0:	dc.b 2, $BC, $65, $5C, $71	
000277CB 02BC 775C 83               SME_A1owa_8F5:	dc.b 2, $BC, $77, $5C, $83	
000277D0 02BC 895C 95               SME_A1owa_8FA:	dc.b 2, $BC, $89, $5C, $95	
000277D5 02BC 9B5C A7               SME_A1owa_8FF:	dc.b 2, $BC, $9B, $5C, $A7	
000277DA 02BC AD5C B9               SME_A1owa_904:	dc.b 2, $BC, $AD, $5C, $B9	
000277DF 02BC BF5C CB               SME_A1owa_909:	dc.b 2, $BC, $BF, $5C, $CB	
000277E4 02BC D15C DD               SME_A1owa_90E:	dc.b 2, $BC, $D1, $5C, $DD	
000277E9 02FC E37C F3               SME_A1owa_913:	dc.b 2, $FC, $E3, $7C, $F3	
000277EE 02FC FB7D 0B               SME_A1owa_918:	dc.b 2, $FC, $FB, $7D, $B	
000277F4 00                         		even
000277F4 00                         		even
000277F4                            
000277F4                            ; ---------------------------------------------------------------------------
000277F4                            ; Uncompressed graphics	- Sonic
000277F4                            ; ---------------------------------------------------------------------------
000277F4                            Art_Sonic:	incbin	"artunc\Sonic.bin"	; Sonic
0004EF94                            		even
0004EF94                            ; ---------------------------------------------------------------------------
0004EF94                            ; Compressed graphics - various
0004EF94                            ; ---------------------------------------------------------------------------
0004EF94                            Art_GShield:	incbin	"artunc\Gold Shield.bin"
0004FC54                            		even
0004FC54                            Art_RedShield:	incbin	"artunc\Red Shield.bin"
00050914                            		even
00050914                            Art_SpShield:	incbin	"artunc\Gray Shield.bin"
000515D4                            		even
000515D4                            Art_Shield:	incbin	"artunc\Shield.bin"
00052294                            		even
00052294                            Unc_Stars:	incbin	"artunc\Invincibility Stars.bin"
00052694                            		even
00052694                            
00052694                            Map_SSWalls:	include	"_maps\SS Walls.asm"
00052694                            ; ---------------------------------------------------------------------------
00052694                            ; Sprite mappings - walls of the special stage
00052694                            ; ---------------------------------------------------------------------------
00052694                            Map_SSWalls_internal:
00052694 0000                       		dc.w byte_2C584-Map_SSWalls_internal
00052696 0000                       		dc.w byte_2C58A-Map_SSWalls_internal
00052698 0000                       		dc.w byte_2C590-Map_SSWalls_internal
0005269A 0000                       		dc.w byte_2C596-Map_SSWalls_internal
0005269C 0000                       		dc.w byte_2C59C-Map_SSWalls_internal
0005269E 0000                       		dc.w byte_2C5A2-Map_SSWalls_internal
000526A0 0000                       		dc.w byte_2C5A8-Map_SSWalls_internal
000526A2 0000                       		dc.w byte_2C5AE-Map_SSWalls_internal
000526A4 0000                       		dc.w byte_2C5B4-Map_SSWalls_internal
000526A6 0000                       		dc.w byte_2C5BA-Map_SSWalls_internal
000526A8 0000                       		dc.w byte_2C5C0-Map_SSWalls_internal
000526AA 0000                       		dc.w byte_2C5C6-Map_SSWalls_internal
000526AC 0000                       		dc.w byte_2C5CC-Map_SSWalls_internal
000526AE 0000                       		dc.w byte_2C5D2-Map_SSWalls_internal
000526B0 0000                       		dc.w byte_2C5D8-Map_SSWalls_internal
000526B2 0000                       		dc.w byte_2C5DE-Map_SSWalls_internal
000526B4 01                         byte_2C584:	dc.b 1
000526B5 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000526BA 01                         byte_2C58A:	dc.b 1
000526BB F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
000526C0 01                         byte_2C590:	dc.b 1
000526C1 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
000526C6 01                         byte_2C596:	dc.b 1
000526C7 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
000526CC 01                         byte_2C59C:	dc.b 1
000526CD F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
000526D2 01                         byte_2C5A2:	dc.b 1
000526D3 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
000526D8 01                         byte_2C5A8:	dc.b 1
000526D9 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
000526DE 01                         byte_2C5AE:	dc.b 1
000526DF F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
000526E4 01                         byte_2C5B4:	dc.b 1
000526E5 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
000526EA 01                         byte_2C5BA:	dc.b 1
000526EB F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
000526F0 01                         byte_2C5C0:	dc.b 1
000526F1 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
000526F6 01                         byte_2C5C6:	dc.b 1
000526F7 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
000526FC 01                         byte_2C5CC:	dc.b 1
000526FD F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00052702 01                         byte_2C5D2:	dc.b 1
00052703 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00052708 01                         byte_2C5D8:	dc.b 1
00052709 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0005270E 01                         byte_2C5DE:	dc.b 1
0005270F F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00052714                            		even
00052714                            		even
00052714                            
00052714                            ; ---------------------------------------------------------------------------
00052714                            ; Compressed graphics - special stage
00052714                            ; ---------------------------------------------------------------------------
00052714                            Nem_SSWalls:	incbin	"artnem\Special Walls.bin" ; special stage walls
0005304C                            		even
0005304C                            Eni_SSBg1:	incbin	"tilemaps\SS Background 1.bin" ; special stage background (mappings)
00053180                            		even
00053180                            Nem_SSBgFish:	incbin	"artnem\Special Birds & Fish.bin" ; special stage birds and fish background
00053E10                            		even
00053E10                            Eni_SSBg2:	incbin	"tilemaps\SS Background 2.bin" ; special stage background (mappings)
00054110                            		even
00054110                            Nem_SSBgCloud:	incbin	"artnem\Special Clouds.bin" ; special stage clouds background
00054604                            		even
00054604                            Nem_SSGOAL:	incbin	"artnem\Special GOAL.bin" ; special stage GOAL block
000546F2                            		even
000546F2                            Nem_SSRBlock:	incbin	"artnem\Special R.bin"	; special stage R block
000547C2                            		even
000547C2                            Nem_SS1UpBlock:	incbin	"artnem\Special 1UP.bin" ; special stage 1UP block
000548B8                            		even
000548B8                            Nem_SSEmStars:	incbin	"artnem\Special Emerald Twinkle.bin" ; special stage stars from a collected emerald
00054916                            		even
00054916                            Nem_SSRedWhite:	incbin	"artnem\Special Red-White.bin" ; special stage red/white block
000549A8                            		even
000549A8                            Nem_SSZone1:	incbin	"artnem\Special ZONE1.bin" ; special stage ZONE1 block
00054A6A                            		even
00054A6A                            Nem_SSZone2:	incbin	"artnem\Special ZONE2.bin" ; ZONE2 block
00054B38                            		even
00054B38                            Nem_SSZone3:	incbin	"artnem\Special ZONE3.bin" ; ZONE3 block
00054C04                            		even
00054C04                            Nem_SSZone4:	incbin	"artnem\Special ZONE4.bin" ; ZONE4 block
00054CCC                            		even
00054CCC                            Nem_SSZone5:	incbin	"artnem\Special ZONE5.bin" ; ZONE5 block
00054D96                            		even
00054D96                            Nem_SSZone6:	incbin	"artnem\Special ZONE6.bin" ; ZONE6 block
00054E66                            		even
00054E66                            Nem_SSUpDown:	incbin	"artnem\Special UP-DOWN.bin" ; special stage UP/DOWN block
0005505A                            		even
0005505A                            Nem_SSEmerald:	incbin	"artnem\Special Emeralds.bin" ; special stage chaos emeralds
000551C2                            		even
000551C2                            Nem_SSGhost:	incbin	"artnem\Special Ghost.bin" ; special stage ghost block
00055272                            		even
00055272                            Nem_SSWBlock:	incbin	"artnem\Special W.bin"	; special stage W block
0005534C                            		even
0005534C                            Nem_SSGlass:	incbin	"artnem\Special Glass.bin" ; special stage destroyable glass block
000553D0                            		even
000553D0                            Nem_ResultEm:	incbin	"artnem\Special Result Emeralds.bin" ; chaos emeralds on special stage results screen
0005554E                            		even
0005554E                            ; ---------------------------------------------------------------------------
0005554E                            ; Compressed graphics - GHZ stuff
0005554E                            ; ---------------------------------------------------------------------------
0005554E                            Nem_Stalk:	incbin	"artnem\GHZ Flower Stalk.bin"
000555B0                            		even
000555B0                            Nem_Swing:	incbin	"artnem\GHZ Swinging Platform.bin"
000556CA                            		even
000556CA                            Nem_Bridge:	incbin	"artnem\GHZ Bridge.bin"
000557E8                            		even
000557E8                            Nem_GhzUnkBlock:incbin	"artnem\Unused - GHZ Block.bin"
00055830                            		even
00055830                            Nem_Ball:	incbin	"artnem\GHZ Giant Ball.bin"
000559CE                            		even
000559CE                            Nem_Spikes:	incbin	"artnem\Spikes.bin"
00055A4A                            		even
00055A4A                            Nem_GhzLog:	incbin	"artnem\Unused - GHZ Log.bin"
00055C5E                            		even
00055C5E                            Nem_SpikePole:	incbin	"artnem\GHZ Spiked Log.bin"
00055D8A                            		even
00055D8A                            Nem_PplRock:	incbin	"artnem\GHZ Purple Rock.bin"
00055EDE                            		even
00055EDE                            Nem_GhzWall1:	incbin	"artnem\GHZ Breakable Wall.bin"
00055F8E                            		even
00055F8E                            Nem_GhzWall2:	incbin	"artnem\GHZ Edge Wall.bin"
00055FEE                            		even
00055FEE                            ; ---------------------------------------------------------------------------
00055FEE                            ; Compressed graphics - LZ stuff
00055FEE                            ; ---------------------------------------------------------------------------
00055FEE                            Nem_Water:	incbin	"artnem\LZ Water Surface.bin"
000560C6                            		even
000560C6                            Nem_Splash:	incbin	"artnem\LZ Water & Splashes.bin"
000568BA                            		even
000568BA                            Nem_LzSpikeBall:incbin	"artnem\LZ Spiked Ball & Chain.bin"
00056A4C 00                         		even
00056A4C                            Nem_FlapDoor:	incbin	"artnem\LZ Flapping Door.bin"
00056BB6                            		even
00056BB6                            Nem_Bubbles:	incbin	"artnem\LZ Bubbles & Countdown.bin"
000571F6 00                         		even
000571F6                            Nem_LzBlock3:	incbin	"artnem\LZ 32x16 Block.bin"
00057298 00                         		even
00057298                            Nem_LzDoor1:	incbin	"artnem\LZ Vertical Door.bin"
00057312 00                         		even
00057312                            Nem_Harpoon:	incbin	"artnem\LZ Harpoon.bin"
00057478 00                         		even
00057478                            Nem_LzPole:	incbin	"artnem\LZ Breakable Pole.bin"
000574FE 00                         		even
000574FE                            Nem_LzDoor2:	incbin	"artnem\LZ Horizontal Door.bin"
0005766A                            		even
0005766A                            Nem_LzWheel:	incbin	"artnem\LZ Wheel.bin"
00057B4C                            		even
00057B4C                            Nem_Gargoyle:	incbin	"artnem\LZ Gargoyle & Fireball.bin"
00057CBC                            		even
00057CBC                            Nem_LzBlock2:	incbin	"artnem\LZ Blocks.bin"
00057F74                            		even
00057F74                            Nem_LzPlatfm:	incbin	"artnem\LZ Rising Platform.bin"
000580BA                            		even
000580BA                            Nem_Cork:	incbin	"artnem\LZ Cork.bin"
000581E4                            		even
000581E4                            Nem_LzBlock1:	incbin	"artnem\LZ 32x32 Block.bin"
00058364 00                         		even
00058364                            ; ---------------------------------------------------------------------------
00058364                            ; Compressed graphics - MZ stuff
00058364                            ; ---------------------------------------------------------------------------
00058364                            Nem_MzMetal:	incbin	"artnem\MZ Metal Blocks.bin"
000585F2                            		even
000585F2                            Nem_MzSwitch:	incbin	"artnem\MZ Switch.bin"
000586B0                            		even
000586B0                            Nem_MzGlass:	incbin	"artnem\MZ Green Glass Block.bin"
00058788                            		even
00058788                            Nem_UnkGrass:	incbin	"artnem\Unused - Grass.bin"
000587DC                            		even
000587DC                            Nem_MzFire:	incbin	"artnem\Fireballs.bin"
00058AFA 00                         		even
00058AFA                            Nem_Lava:	incbin	"artnem\MZ Lava.bin"
00059410                            		even
00059410                            Nem_MzBlock:	incbin	"artnem\MZ Green Pushable Block.bin"
0005957E                            		even
0005957E                            Nem_MzUnkBlock:	incbin	"artnem\Unused - MZ Background.bin"
00059606                            		even
00059606                            ; ---------------------------------------------------------------------------
00059606                            ; Compressed graphics - SLZ stuff
00059606                            ; ---------------------------------------------------------------------------
00059606                            Nem_Seesaw:	incbin	"artnem\SLZ Seesaw.bin"
00059842                            		even
00059842                            Nem_SlzSpike:	incbin	"artnem\SLZ Little Spikeball.bin"
00059988                            		even
00059988                            Nem_Fan:	incbin	"artnem\SLZ Fan.bin"
00059BCC                            		even
00059BCC                            Nem_SlzWall:	incbin	"artnem\SLZ Breakable Wall.bin"
00059C68 00                         		even
00059C68                            Nem_Pylon:	incbin	"artnem\SLZ Pylon.bin"
00059D4A                            		even
00059D4A                            Nem_SlzSwing:	incbin	"artnem\SLZ Swinging Platform.bin"
00059F2C                            		even
00059F2C                            Nem_SlzBlock:	incbin	"artnem\SLZ 32x32 Block.bin"
0005A038                            		even
0005A038                            Nem_SlzCannon:	incbin	"artnem\SLZ Cannon.bin"
0005A0DC                            		even
0005A0DC                            ; ---------------------------------------------------------------------------
0005A0DC                            ; Compressed graphics - SYZ stuff
0005A0DC                            ; ---------------------------------------------------------------------------
0005A0DC                            Nem_Bumper:	incbin	"artnem\SYZ Bumper.bin"
0005A26C                            		even
0005A26C                            Nem_SyzSpike2:	incbin	"artnem\SYZ Small Spikeball.bin"
0005A2CE                            		even
0005A2CE                            Nem_LzSwitch:	incbin	"artnem\Switch.bin"
0005A3EA 00                         		even
0005A3EA                            Nem_SyzSpike1:	incbin	"artnem\SYZ Large Spikeball.bin"
0005A678                            		even
0005A678                            ; ---------------------------------------------------------------------------
0005A678                            ; Compressed graphics - SBZ stuff
0005A678                            ; ---------------------------------------------------------------------------
0005A678                            Nem_SbzWheel1:	incbin	"artnem\SBZ Running Disc.bin"
0005A6CC                            		even
0005A6CC                            Nem_SbzWheel2:	incbin	"artnem\SBZ Junction Wheel.bin"
0005A968                            		even
0005A968                            Nem_Cutter:	incbin	"artnem\SBZ Pizza Cutter.bin"
0005AB58                            		even
0005AB58                            Nem_Stomper:	incbin	"artnem\SBZ Stomper.bin"
0005ACF6                            		even
0005ACF6                            Nem_SpinPform:	incbin	"artnem\SBZ Spinning Platform.bin"
0005B026                            		even
0005B026                            Nem_TrapDoor:	incbin	"artnem\SBZ Trapdoor.bin"
0005B204                            		even
0005B204                            Nem_SbzFloor:	incbin	"artnem\SBZ Collapsing Floor.bin"
0005B25C                            		even
0005B25C                            Nem_Electric:	incbin	"artnem\SBZ Electrocuter.bin"
0005B40E 00                         		even
0005B40E                            Nem_SbzBlock:	incbin	"artnem\SBZ Vanishing Block.bin"
0005B52A                            		even
0005B52A                            Nem_FlamePipe:	incbin	"artnem\SBZ Flaming Pipe.bin"
0005B6B8                            		even
0005B6B8                            Nem_SbzDoor1:	incbin	"artnem\SBZ Small Vertical Door.bin"
0005B752                            		even
0005B752                            Nem_SlideFloor:	incbin	"artnem\SBZ Sliding Floor Trap.bin"
0005B7AA                            		even
0005B7AA                            Nem_SbzDoor2:	incbin	"artnem\SBZ Large Horizontal Door.bin"
0005B8A6                            		even
0005B8A6                            Nem_Girder:	incbin	"artnem\SBZ Crushing Girder.bin"
0005B9BC                            		even
0005B9BC                            ; ---------------------------------------------------------------------------
0005B9BC                            ; Compressed graphics - enemies
0005B9BC                            ; ---------------------------------------------------------------------------
0005B9BC                            Nem_BallHog:	incbin	"artnem\Enemy Ball Hog.bin"
0005BE04 00                         		even
0005BE04                            Nem_Crabmeat:	incbin	"artnem\Enemy Crabmeat.bin"
0005C2F4 00                         		even
0005C2F4                            Nem_Mozzietron:	incbin	"artnem\Enemy Mozzietron.bin"
0005C5D8 00                         		even
0005C5D8                            Nem_Buzz:	incbin	"artnem\Enemy Buzz Bomber.bin"
0005C998                            		even
0005C998                            Nem_UnkExplode:	incbin	"artnem\Unused - Explosion.bin"
0005CB80                            		even
0005CB80                            Nem_Burrobot:	incbin	"artnem\Enemy Burrobot.bin"
0005D2AE 00                         		even
0005D2AE                            Nem_Chopper:	incbin	"artnem\Enemy Chopper.bin"
0005D536 00                         		even
0005D536                            Nem_Jaws:	incbin	"artnem\Enemy Jaws.bin"
0005D7D2 00                         		even
0005D7D2                            Nem_Roller:	incbin	"artnem\Enemy Roller.bin"
0005DDA6                            		even
0005DDA6                            Nem_Motobug:	incbin	"artnem\Enemy Motobug.bin"
0005E038                            		even
0005E038                            Nem_Newtron:	incbin	"artnem\Enemy Newtron.bin"
0005E682 00                         		even
0005E682                            Nem_Yadrin:	incbin	"artnem\Enemy Yadrin.bin"
0005EABE                            		even
0005EABE                            Nem_Basaran:	incbin	"artnem\Enemy Basaran.bin"
0005EDCC 00                         		even
0005EDCC                            Nem_Splats:	incbin	"artnem\Enemy Splats.bin"
0005F02C                            		even
0005F02C                            Nem_Bomb:	incbin	"artnem\Enemy Bomb.bin"
0005F32A                            		even
0005F32A                            Nem_Orbinaut:	incbin	"artnem\Enemy Orbinaut.bin"
0005F556 00                         		even
0005F556                            Nem_Cater:	incbin	"artnem\Enemy Caterkiller.bin"
0005F6E4                            		even
0005F6E4                            ; ---------------------------------------------------------------------------
0005F6E4                            ; Compressed graphics - various
0005F6E4                            ; ---------------------------------------------------------------------------
0005F6E4                            Nem_TitleCard:	incbin	"artnem\Title Cards.bin"
0005FD44 00                         		even
0005FD44                            Nem_Hud:	incbin	"artnem\HUD.bin"	; HUD (rings, time, score)
0005FEBC 00                         		even
0005FEBC                            Nem_Lives:	incbin	"artnem\HUD - Life Counter Icon.bin"
0005FFDE 00                         		even
0005FFDE                            Nem_Future:	incbin	"artnem\HUD - Life Counter Icon Future.bin"
000600E6 00                         		even
000600E6                            Nem_Ring:	incbin	"artnem\Rings.bin"
0006023A 00                         		even
0006023A                            Nem_Monitors:	incbin	"artnem\Monitors.bin"
000606C8                            		even
000606C8                            Nem_Explode:	incbin	"artnem\Explosion.bin"
00060D3C                            		even
00060D3C                            Nem_Points:	incbin	"artnem\Points.bin"	; points from destroyed enemy or object
00060DA6                            		even
00060DA6                            Nem_GameOver:	incbin	"artnem\Game Over.bin"	; game over / time over
00060F38                            		even
00060F38                            Nem_HSpring:	incbin	"artnem\Spring Horizontal.bin"
00061056 00                         		even
00061056                            Nem_VSpring:	incbin	"artnem\Spring Vertical.bin"
00061142                            		even
00061142                            Nem_SignPost:	incbin	"artnem\Signpost.bin"	; end of level signpost
000616BA                            		even
000616BA                            Nem_Lamp:	incbin	"artnem\Lamppost.bin"
000617A4                            		even
000617A4                            Nem_BigFlash:	incbin	"artnem\Giant Ring Flash.bin"
00061918                            		even
00061918                            Nem_Bonus:	incbin	"artnem\Hidden Bonuses.bin" ; hidden bonuses at end of a level
00061CA0 00                         		even
00061CA0                            ; ---------------------------------------------------------------------------
00061CA0                            ; Compressed graphics - continue screen
00061CA0                            ; ---------------------------------------------------------------------------
00061CA0                            Nem_ContSonic:	incbin	"artnem\Continue Screen Sonic.bin"
00061F74 00                         		even
00061F74                            Nem_MiniSonic:	incbin	"artnem\Continue Screen Stuff.bin"
0006220E 00                         		even
0006220E                            ; ---------------------------------------------------------------------------
0006220E                            ; Compressed graphics - animals
0006220E                            ; ---------------------------------------------------------------------------
0006220E                            Nem_Rabbit:	incbin	"artnem\Animal Rabbit.bin"
00062366                            		even
00062366                            Nem_Chicken:	incbin	"artnem\Animal Chicken.bin"
000624C2                            		even
000624C2                            Nem_BlackBird:	incbin	"artnem\Animal Blackbird.bin"
0006263E                            		even
0006263E                            Nem_Seal:	incbin	"artnem\Animal Seal.bin"
0006275A                            		even
0006275A                            Nem_Pig:	incbin	"artnem\Animal Pig.bin"
000628D4                            		even
000628D4                            Nem_Flicky:	incbin	"artnem\Animal Flicky.bin"
00062A0E                            		even
00062A0E                            Nem_Squirrel:	incbin	"artnem\Animal Squirrel.bin"
00062B6A                            		even
00062B6A                            ; ---------------------------------------------------------------------------
00062B6A                            ; Compressed graphics - primary patterns and block mappings
00062B6A                            ; ---------------------------------------------------------------------------
00062B6A                            Blk16_GHZ:	incbin	"map16\GHZ.bin"
00063546                            		even
00063546                            Nem_GHZ_1st:	incbin	"artnem\8x8 - GHZ1.bin"	; GHZ primary patterns
00064E96                            		even
00064E96                            Nem_GHZ_2nd:	incbin	"artnem\8x8 - GHZ2.bin"	; GHZ secondary patterns
00066418                            		even
00066418                            Blk256_GHZ:	incbin	"map256\GHZ.bin"
00068812                            		even
00068812                            Blk16_TS:	incbin	"map16\TS.bin"
00068A96                            		even
00068A96                            Nem_TS_1st:	incbin	"artnem\8x8 - TS1.bin"	; GHZ primary patterns
00069BC2                            		even
00069BC2                            Blk256_TS:	incbin	"map256\TS.bin"
0006A770                            		even
0006A770                            Blk16_LZ:	incbin	"map16\LZ.bin"
0006B90E                            		even
0006B90E                            Nem_LZ:		incbin	"artnem\8x8 - LZ.bin"	; LZ primary patterns
0006EDB6                            		even
0006EDB6                            Blk256_LZ:	incbin	"map256\LZ.bin"
000722D8                            		even
000722D8                            Blk16_MZ:	incbin	"map16\MZ.bin"
00072AC6                            		even
00072AC6                            Nem_MZ:		incbin	"artnem\8x8 - MZ.bin"	; MZ primary patterns
00075556                            		even
00075556                            		incbin	"map256\MZ (JP1).bin"
00077690                            		even
00077690                            Blk16_SLZ:	incbin	"map16\SLZ.bin"
00077D12                            		even
00077D12                            Nem_SLZ:	incbin	"artnem\8x8 - SLZ.bin"	; SLZ primary patterns
0007B77C                            		even
0007B77C                            Blk256_SLZ:	incbin	"map256\SLZ.bin"
0007DB86                            		even
0007DB86                            Blk16_SYZ:	incbin	"map16\SYZ.bin"
0007E286                            		even
0007E286                            Nem_SYZ:	incbin	"artnem\8x8 - SYZ.bin"	; SYZ primary patterns
00080A2C                            		even
00080A2C                            Blk256_SYZ:	incbin	"map256\SYZ.bin"
00080FBE                            		even
00080FBE                            Blk16_SBZ:	incbin	"map16\SBZ.bin"
00081BB8                            		even
00081BB8                            Nem_SBZ:	incbin	"artnem\8x8 - SBZ.bin"	; SBZ primary patterns
000843FA                            		even
000843FA                            		incbin	"map256\SBZ (JP1).bin"
00084F86                            		even
00084F86                            ; ---------------------------------------------------------------------------
00084F86                            ; Compressed graphics - bosses and ending sequence
00084F86                            ; ---------------------------------------------------------------------------
00084F86                            Nem_Eggman:	incbin	"artnem\Boss - Main.bin"
000857EE                            		even
000857EE                            Nem_Weapons:	incbin	"artnem\Boss - Weapons.bin"
00085AD8                            		even
00085AD8                            Nem_Prison:	incbin	"artnem\Prison Capsule.bin"
0008635C                            		even
0008635C                            Nem_Sbz2Eggman:	incbin	"artnem\Boss - Eggman in SBZ2 & FZ.bin"
00086B9A 00                         		even
00086B9A                            Nem_FzBoss:	incbin	"artnem\Boss - Final Zone.bin"
00087368 00                         		even
00087368                            Nem_FzEggman:	incbin	"artnem\Boss - Eggman after FZ Fight.bin"
00087890                            		even
00087890                            Nem_Exhaust:	incbin	"artnem\Boss - Exhaust Flame.bin"
000879B0                            		even
000879B0                            Nem_EndEm:	incbin	"artnem\Ending - Emeralds.bin"
00087BB8 00                         		even
00087BB8                            Nem_EndSonic:	incbin	"artnem\Ending - Sonic.bin"
00088EA2 00                         		even
00088EA2                            Nem_TryAgain:	incbin	"artnem\Ending - Try Again.bin"
000897E6                            		even
000897E6                            		even
000897E6                            Kos_EndFlowers:	incbin	"artkos\Flowers at Ending.bin" ; ending sequence animated flowers
00089D76                            		even
00089D76                            Nem_EndFlower:	incbin	"artnem\Ending - Flowers.bin"
00089FFE                            		even
00089FFE                            Nem_CreditText:	incbin	"artnem\Ending - Credits.bin"
0008A682                            		even
0008A682                            Nem_EndStH:	incbin	"artnem\Ending - StH Logo.bin"
0008A9E6                            		even
0008A9E6                            
0008A9E6 FFFF FFFF FFFF FFFF FFFF+  		dcb.b $40,$FF
0008AA26                            ; ---------------------------------------------------------------------------
0008AA26                            ; Collision data
0008AA26                            ; ---------------------------------------------------------------------------
0008AA26                            AngleMap:	incbin	"collide\Angle Map.bin"
0008AB26                            		even
0008AB26                            CollArray1:	incbin	"collide\Collision Array (Normal).bin"
0008BB26                            		even
0008BB26                            CollArray2:	incbin	"collide\Collision Array (Rotated).bin"
0008CB26                            		even
0008CB26                            Col_GHZ:	incbin	"collide\GHZ.bin"	; GHZ index
0008CCD4 00                         		even
0008CCD4                            Col_LZ:		incbin	"collide\LZ.bin"	; LZ index
0008CF78                            		even
0008CF78                            Col_MZ:		incbin	"collide\MZ.bin"	; MZ index
0008D11C 00                         		even
0008D11C                            Col_SLZ:	incbin	"collide\SLZ.bin"	; SLZ index
0008D310                            		even
0008D310                            Col_SYZ:	incbin	"collide\SYZ.bin"	; SYZ index
0008D448                            		even
0008D448                            Col_SBZ:	incbin	"collide\SBZ.bin"	; SBZ index
0008D618                            		even
0008D618                            ; ---------------------------------------------------------------------------
0008D618                            ; Special Stage layouts
0008D618                            ; ---------------------------------------------------------------------------
0008D618                            SS_1:		incbin	"sslayout\1.bin"
0008D892                            		even
0008D892                            SS_2:		incbin	"sslayout\2.bin"
0008DCA4                            		even
0008DCA4                            SS_3:		incbin	"sslayout\3.bin"
0008E000                            		even
0008E000                            SS_4:		incbin	"sslayout\4.bin"
0008E4DA                            		even
0008E4DA                            	SS_5:		incbin	"sslayout\5 (JP1).bin"
0008E98A                            			even
0008E98A                            	SS_6:		incbin	"sslayout\6 (JP1).bin"
0008EC7C                            		even
0008EC7C                            ; ---------------------------------------------------------------------------
0008EC7C                            ; Animated uncompressed graphics
0008EC7C                            ; ---------------------------------------------------------------------------
0008EC7C                            Art_GhzWater:	incbin	"artunc\GHZ Waterfall.bin"
0008EE7C                            		even
0008EE7C                            Art_GhzFlower1:	incbin	"artunc\GHZ Flower Large.bin"
0008F27C                            		even
0008F27C                            Art_GhzFlower2:	incbin	"artunc\GHZ Flower Small.bin"
0008F6FC                            		even
0008F6FC                            Art_MzLava1:	incbin	"artunc\MZ Lava Surface.bin"
0008F9FC                            		even
0008F9FC                            Art_MzLava2:	incbin	"artunc\MZ Lava.bin"
0008FFFC                            		even
0008FFFC                            Art_MzTorch:	incbin	"artunc\MZ Background Torch.bin"
000902FC                            		even
000902FC                            Art_SbzSmoke:	incbin	"artunc\SBZ Background Smoke.bin"
00090D7C                            		even
00090D7C                            
00090D7C                            ; ---------------------------------------------------------------------------
00090D7C                            ; Level	layout index
00090D7C                            ; ---------------------------------------------------------------------------
00090D7C                            Level_Index:
00090D7C                            		; GHZ
00090D7C 0000 0000 0000             		dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
00090D82 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00090D88 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
00090D8E 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00090D94                            		; LZ
00090D94 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00090D9A 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
00090DA0 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00090DA6 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00090DAC                            		; MZ
00090DAC 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00090DB2 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00090DB8 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00090DBE 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00090DC4                            		; SLZ
00090DC4 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00090DCA 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00090DD0 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00090DD6 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
00090DDC                            		; SYZ
00090DDC 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00090DE2 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00090DE8 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
00090DEE 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00090DF4                            		; SBZ
00090DF4 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
00090DFA 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
00090E00 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00090E06 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
00090E0C                            		; Ending
00090E0C 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00090E12 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00090E18 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00090E1E 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00090E24                            
00090E24                            Level_GHZ1:	incbin	"levels\ghz1.bin"
00091056                            		even
00091056 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0009105A                            Level_GHZ2:	incbin	"levels\ghz2.bin"
00091194                            		even
00091194 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00091198                            Level_GHZ3:	incbin	"levels\ghz3.bin"
000912BA                            		even
000912BA                            Level_GHZbg:	incbin	"levels\ghzbg.bin"
000912F8                            		even
000912F8 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
000912FC 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
00091300                            
00091300                            Level_LZ1:	incbin	"levels\lz1.bin"
000913C2                            		even
000913C2                            Level_LZbg:	incbin	"levels\lzbg.bin"
000914C4                            		even
000914C4 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
000914C8                            Level_LZ2:	incbin	"levels\lz2.bin"
00091562                            		even
00091562 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00091566                            Level_LZ3:	incbin	"levels\lz3.bin"
00091680                            		even
00091680 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00091684                            Level_SBZ3:	incbin	"levels\sbz3.bin"
0009173E                            		even
0009173E 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00091742                            
00091742                            Level_MZ1:	incbin	"levels\mz1.bin"
00091834                            		even
00091834                            Level_MZ1bg:	incbin	"levels\mz1bg.bin"
00091956                            		even
00091956                            Level_MZ2:	incbin	"levels\mz2.bin"
00091A78                            		even
00091A78                            Level_MZ2bg:	incbin	"levels\mz2bg.bin"
00091B9A                            		even
00091B9A 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
00091B9E                            Level_MZ3:	incbin	"levels\mz3.bin"
00091C38                            		even
00091C38                            Level_MZ3bg:	incbin	"levels\mz3bg.bin"
00091D5A                            		even
00091D5A 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
00091D5E 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
00091D62                            
00091D62                            Level_SLZ1:	incbin	"levels\slz1.bin"
00091E74                            		even
00091E74                            Level_SLZbg:	incbin	"levels\slzbg.bin"
00091EEE                            		even
00091EEE                            Level_SLZ2:	incbin	"levels\slz2.bin"
00091FDE                            		even
00091FDE                            Level_SLZ3:	incbin	"levels\slz3.bin"
000920F8                            		even
000920F8 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
000920FC                            
000920FC                            Level_SYZ1:	incbin	"levels\syz1.bin"
00092200                            		even
00092200                            		incbin	"levels\syzbg (JP1).bin"
0009223A                            		even
0009223A 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0009223E                            Level_SYZ2:	incbin	"levels\syz2.bin"
00092342                            		even
00092342 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00092346                            Level_SYZ3:	incbin	"levels\syz3.bin"
000924A0 00                         		even
000924A0 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
000924A4 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
000924A8                            
000924A8                            Level_SBZ1:	incbin	"levels\sbz1.bin"
000925CA                            		even
000925CA                            Level_SBZ1bg:	incbin	"levels\sbz1bg.bin"
00092608                            		even
00092608                            Level_SBZ2:	incbin	"levels\sbz2.bin"
0009274A                            		even
0009274A                            Level_SBZ2bg:	incbin	"levels\sbz2bg.bin"
000928B4                            		even
000928B4 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
000928B8 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
000928BC                            Level_End:	incbin	"levels\ending.bin"
000928EC 00                         		even
000928EC 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
000928F0                            
000928F0                            
000928F0                            Art_BigRing:	incbin	"artunc\Giant Ring.bin"
00093530                            		even
00093530                            
00093600                            
00093600                            ; ---------------------------------------------------------------------------
00093600                            ; Sprite locations index
00093600                            ; ---------------------------------------------------------------------------
00093600                            ObjPos_Index:
00093600                            		; GHZ
00093600 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093604 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093608 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009360C 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093610                            		; LZ
00093610 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093614 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093618 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009361C 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093620                            		; MZ
00093620 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093624 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093628 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009362C 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093630                            		; SLZ
00093630 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093634 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093638 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009363C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093640                            		; SYZ
00093640 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093644 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093648 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009364C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093650                            		; SBZ
00093650 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093654 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093658 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009365C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093660                            		; Ending
00093660 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093664 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093668 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009366C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00093670                            		; --- Put extra object data here. ---
00093670                            ObjPosLZPlatform_Index:
00093670 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00093674 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00093678 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0009367C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00093680                            ObjPosSBZPlatform_Index:
00093680 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00093684 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00093688 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0009368C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00093690 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00093696                            ObjPos_GHZ1:	incbin	"objpos\ghz1.bin"
00093D1A                            		even
00093D1A                            ObjPos_GHZ2:	incbin	"objpos\ghz2.bin"
00094338                            		even
00094338                            		incbin	"objpos\ghz3 (JP1).bin"
0009494A                            		even
0009494A                            		incbin	"objpos\lz1 (JP1).bin"
00094980                            		even
00094980                            ObjPos_LZ2:	incbin	"objpos\lz2.bin"
00094CC2                            		even
00094CC2                            		incbin	"objpos\lz3 (JP1).bin"
00095286                            		even
00095286                            ObjPos_SBZ3:	incbin	"objpos\sbz3.bin"
000957F0                            		even
000957F0                            ObjPos_LZ1pf1:	incbin	"objpos\lz1pf1.bin"
00095822                            		even
00095822                            ObjPos_LZ1pf2:	incbin	"objpos\lz1pf2.bin"
00095854                            		even
00095854                            ObjPos_LZ2pf1:	incbin	"objpos\lz2pf1.bin"
00095886                            		even
00095886                            ObjPos_LZ2pf2:	incbin	"objpos\lz2pf2.bin"
000958B8                            		even
000958B8                            ObjPos_LZ3pf1:	incbin	"objpos\lz3pf1.bin"
00095902                            		even
00095902                            ObjPos_LZ3pf2:	incbin	"objpos\lz3pf2.bin"
00095940                            		even
00095940                            		incbin	"objpos\mz1 (JP1).bin"
00095F0A                            		even
00095F0A                            ObjPos_MZ2:	incbin	"objpos\mz2.bin"
00096528                            		even
00096528                            ObjPos_MZ3:	incbin	"objpos\mz3.bin"
00096816                            		even
00096816                            ObjPos_SLZ1:	incbin	"objpos\slz1.bin"
00096D4A                            		even
00096D4A                            ObjPos_SLZ2:	incbin	"objpos\slz2.bin"
000971B2                            		even
000971B2                            ObjPos_SLZ3:	incbin	"objpos\slz3.bin"
00097794                            		even
00097794                            ObjPos_SYZ1:	incbin	"objpos\syz1.bin"
000977DC                            		even
000977DC                            ObjPos_SYZ2:	incbin	"objpos\syz2.bin"
00097818                            		even
00097818                            		incbin	"objpos\syz3 (JP1).bin"
0009787E                            		even
0009787E                            		incbin	"objpos\sbz1 (JP1).bin"
000978C6                            		even
000978C6                            ObjPos_SBZ2:	incbin	"objpos\sbz2.bin"
000978F0                            		even
000978F0                            ObjPos_FZ:	incbin	"objpos\fz.bin"
0009792C                            		even
0009792C                            ObjPos_SBZ1pf1:	incbin	"objpos\sbz1pf1.bin"
0009795E                            		even
0009795E                            ObjPos_SBZ1pf2:	incbin	"objpos\sbz1pf2.bin"
00097990                            		even
00097990                            ObjPos_SBZ1pf3:	incbin	"objpos\sbz1pf3.bin"
000979C2                            		even
000979C2                            ObjPos_SBZ1pf4:	incbin	"objpos\sbz1pf4.bin"
000979F4                            		even
000979F4                            ObjPos_SBZ1pf5:	incbin	"objpos\sbz1pf5.bin"
00097A26                            		even
00097A26                            ObjPos_SBZ1pf6:	incbin	"objpos\sbz1pf6.bin"
00097A5E                            		even
00097A5E                            ObjPos_End:	incbin	"objpos\ending.bin"
00097BBA                            		even
00097BBA FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00097BC0                            
00097BC0                            		dcb.b $63C,$FF
000981FC                            		;dcb.b ($10000-(*%$10000))-(EndOfRom-SoundDriver),$FF
000981FC                            
000981FC                            SoundDriver:	include "s1.sounddriver.asm"
000981FC                            ; ---------------------------------------------------------------------------
000981FC                            ; Modified (early?) SMPS 68k Type 1b
000981FC                            ; ---------------------------------------------------------------------------
000981FC                            ; Go_SoundTypes:
000981FC 0000 0000                  Go_SoundPriorities:	dc.l SoundPriorities
00098200                            ; Go_SoundD0:
00098200 0000 0000                  Go_SpecSoundIndex:	dc.l SpecSoundIndex
00098204 0000 0000                  Go_MusicIndex:		dc.l MusicIndex
00098208 0000 0000                  Go_SoundIndex:		dc.l SoundIndex
0009820C                            ; off_719A0:
0009820C 0000 0000                  Go_SpeedUpIndex:	dc.l SpeedUpIndex
00098210 0000 0000                  Go_PSGIndex:		dc.l PSG_Index
00098214                            ; ---------------------------------------------------------------------------
00098214                            ; PSG instruments used in music
00098214                            ; ---------------------------------------------------------------------------
00098214                            PSG_Index:
00098214 0000 0000 0000 0000 0000+  		dc.l PSG1, PSG2, PSG3
00098220 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0009822C 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00098238                            PSG1:		incbin	"sound/psg/psg1.bin"
0009824F                            PSG2:		incbin	"sound/psg/psg2.bin"
00098256                            PSG3:		incbin	"sound/psg/psg3.bin"
00098267                            PSG4:		incbin	"sound/psg/psg4.bin"
00098272                            PSG6:		incbin	"sound/psg/psg6.bin"
00098281                            PSG5:		incbin	"sound/psg/psg5.bin"
000982AB                            PSG7:		incbin	"sound/psg/psg7.bin"
000982C7                            PSG8:		incbin	"sound/psg/psg8.bin"
000982EF                            PSG9:		incbin	"sound/psg/psg9.bin"
00098300                            ; ---------------------------------------------------------------------------
00098300                            ; New tempos for songs during speed shoes
00098300                            ; ---------------------------------------------------------------------------
00098300                            ; DANGER! several songs will use the first few bytes of MusicIndex as their main
00098300                            ; tempos while speed shoes are active. If you don't want that, you should add
00098300                            ; their "correct" sped-up main tempos to the list.
00098300                            ; byte_71A94:
00098300                            SpeedUpIndex:
00098300 07                         		dc.b 7		; GHZ
00098301 72                         		dc.b $72	; LZ
00098302 73                         		dc.b $73	; MZ
00098303 26                         		dc.b $26	; SLZ
00098304 15                         		dc.b $15	; SYZ
00098305 08                         		dc.b 8		; SBZ
00098306 FF                         		dc.b $FF	; Invincibility
00098307 05                         		dc.b 5		; Extra Life
00098308                            		;dc.b ?		; Special Stage
00098308                            		;dc.b ?		; Title Screen
00098308                            		;dc.b ?		; Ending
00098308                            		;dc.b ?		; Boss
00098308                            		;dc.b ?		; FZ
00098308                            		;dc.b ?		; Sonic Got Through
00098308                            		;dc.b ?		; Game Over
00098308                            		;dc.b ?		; Continue Screen
00098308                            		;dc.b ?		; Credits
00098308                            		;dc.b ?		; Drowning
00098308                            		;dc.b ?		; Get Emerald
00098308                            
00098308                            ; ---------------------------------------------------------------------------
00098308                            ; Music	Pointers
00098308                            ; ---------------------------------------------------------------------------
00098308                            MusicIndex:
00098308 0000 0000                  ptr_mus81:	dc.l Music81
0009830C 0000 0000                  ptr_mus82:	dc.l Music82
00098310 0000 0000                  ptr_mus83:	dc.l Music83
00098314 0000 0000                  ptr_mus84:	dc.l Music84
00098318 0000 0000                  ptr_mus85:	dc.l Music85
0009831C 0000 0000                  ptr_mus86:	dc.l Music86
00098320 0000 0000                  ptr_mus87:	dc.l Music87
00098324 0000 0000                  ptr_mus88:	dc.l Music88
00098328 0000 0000                  ptr_mus89:	dc.l Music89
0009832C 0000 0000                  ptr_mus8A:	dc.l Music8A
00098330 0000 0000                  ptr_mus8B:	dc.l Music8B
00098334 0000 0000                  ptr_mus8C:	dc.l Music8C
00098338 0000 0000                  ptr_mus8D:	dc.l Music8D
0009833C 0000 0000                  ptr_mus8E:	dc.l Music8E
00098340 0000 0000                  ptr_mus8F:	dc.l Music8F
00098344 0000 0000                  ptr_mus90:	dc.l Music90
00098348 0000 0000                  ptr_mus91:	dc.l Music91
0009834C 0000 0000                  ptr_mus92:	dc.l Music92
00098350 0000 0000                  ptr_mus93:	dc.l Music93
00098354 0000 0000                  ptr_mus94:	dc.l Music94
00098358 0000 0000                  ptr_mus95:	dc.l Music95
0009835C 0000 0000                  ptr_mus96:	dc.l Music96
00098360 0000 0000                  ptr_mus97:	dc.l Music97
00098364 0000 0000                  ptr_mus98:	dc.l Music98
00098368 0000 0000                  ptr_mus99:	dc.l Music99
0009836C 0000 0000                  ptr_mus9A:	dc.l Music9A
00098370 0000 0000                  ptr_mus9B:	dc.l Music9B
00098374 0000 0000                  ptr_mus9C:	dc.l Music9C
00098378                            ptr_musend
00098378                            ; ---------------------------------------------------------------------------
00098378                            ; Priority of sound. New music or SFX must have a priority higher than or equal
00098378                            ; to what is stored in v_sndprio or it won't play. If bit 7 of new priority is
00098378                            ; set ($80 and up), the new music or SFX will not set its priority -- meaning
00098378                            ; any music or SFX can override it (as long as it can override whatever was
00098378                            ; playing before). Usually, SFX will only override SFX, special SFX ($D0-$DF)
00098378                            ; will only override special SFX and music will only override music.
00098378                            ; ---------------------------------------------------------------------------
00098378                            ; SoundTypes:
00098378                            SoundPriorities:
00098378 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $81
00098387 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
00098397 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
000983A7 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
000983B7 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
000983C7 8080 8080 8080 8080 8080+  		dc.b $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80	; $D0
000983D7 9090 9090 90               		dc.b $90,$90,$90,$90,$90                                            	; $E0
000983DC                            
000983DC                            ; ---------------------------------------------------------------------------
000983DC                            ; Subroutine to update music more than once per frame
000983DC                            ; (Called by horizontal & vert. interrupts)
000983DC                            ; ---------------------------------------------------------------------------
000983DC                            
000983DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000983DC                            
000983DC                            ; sub_71B4C:
000983DC                            UpdateMusic:
000983DC 33FC 0100 00A1 1100        		stopZ80
000983E4 4E71                       		nop	
000983E6 4E71                       		nop	
000983E8 4E71                       		nop	
000983EA                            ; loc_71B5A:
000983EA                            @updateloop:
000983EA 0839 0000 00A1 1100        		btst	#0,(z80_bus_request).l		; Is the z80 busy?
000983F2 66F6                       		bne.s	@updateloop			; If so, wait
000983F4                            
000983F4 0839 0007 00A0 1FFD        		btst	#7,(z80_dac_status).l		; Is DAC accepting new samples?
000983FC 6700                       		beq.s	@driverinput			; Branch if yes
000983FE 33FC 0000 00A1 1100        		startZ80
00098406 4E71                       		nop	
00098408 4E71                       		nop	
0009840A 4E71                       		nop	
0009840C 4E71                       		nop	
0009840E 4E71                       		nop	
00098410 60CA                       		bra.s	UpdateMusic
00098412                            ; ===========================================================================
00098412                            ; loc_71B82:
00098412                            @driverinput:
00098412 4DF9 00FF F000             		lea	(v_snddriver_ram&$FFFFFF).l,a6
00098418 422E 000E                  		clr.b	f_voice_selector(a6)
0009841C 4A2E 0003                  		tst.b	f_pausemusic(a6)		; is music paused?
00098420 6600 0000                  		bne.w	PauseMusic			; if yes, branch
00098424 532E 0001                  		subq.b	#1,v_main_tempo_timeout(a6)	; Has main tempo timer expired?
00098428 6600                       		bne.s	@skipdelay
0009842A 4EBA 0000                  		jsr	TempoWait(pc)
0009842E                            ; loc_71B9E:
0009842E                            @skipdelay:
0009842E 102E 0004                  		move.b	v_fadeout_counter(a6),d0
00098432 6700                       		beq.s	@skipfadeout
00098434 4EBA 0000                  		jsr	DoFadeOut(pc)
00098438                            ; loc_71BA8:
00098438                            @skipfadeout:
00098438 4A2E 0024                  		tst.b	f_fadein_flag(a6)
0009843C 6700                       		beq.s	@skipfadein
0009843E 4EBA 0000                  		jsr	DoFadeIn(pc)
00098442                            ; loc_71BB2:
00098442                            @skipfadein:
00098442                            		; DANGER! The following line only checks v_soundqueue0 and v_soundqueue1, breaking v_soundqueue2.
00098442 4A6E 000A                  		tst.w	v_soundqueue0(a6)	; is a music or sound queued for played?
00098446 6700                       		beq.s	@nosndinput		; if not, branch
00098448 4EBA 0000                  		jsr	CycleSoundQueue(pc)
0009844C                            ; loc_71BBC:
0009844C                            @nosndinput:
0009844C 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; is song queue set for silence (empty)?
00098452 6700                       		beq.s	@nonewsound		; If yes, branch
00098454 4EBA 0000                  		jsr	PlaySoundID(pc)
00098458                            ; loc_71BC8:
00098458                            @nonewsound:
00098458 4A38 C901                  		tst.b	($FFFFC901).w
0009845C 6700                       		beq.s	@cont
0009845E 5338 C901                  		subq.b	#1,($FFFFC901).w
00098462                            		
00098462                            @cont:
00098462 4BEE 0040                  		lea	v_music_dac_track(a6),a5
00098466 4A15                       		tst.b	(a5)			; Is DAC track playing? (TrackPlaybackControl)
00098468 6A00                       		bpl.s	@dacdone		; Branch if not
0009846A 4EBA 0000                  		jsr	DACUpdateTrack(pc)
0009846E                            ; loc_71BD4:
0009846E                            @dacdone:
0009846E 422E 0008                  		clr.b	f_updating_dac(a6)
00098472 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00098474                            ; loc_71BDA:
00098474                            @bgmfmloop:
00098474 DAFC 0030                  		adda.w	#TrackSz,a5
00098478 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0009847A 6A00                       		bpl.s	@bgmfmnext		; Branch if not
0009847C 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00098480                            ; loc_71BE6:
00098480                            @bgmfmnext:
00098480 51CF FFF2                  		dbf	d7,@bgmfmloop
00098484                            
00098484 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks
00098486                            ; loc_71BEC:
00098486                            @bgmpsgloop:
00098486 DAFC 0030                  		adda.w	#TrackSz,a5
0009848A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0009848C 6A00                       		bpl.s	@bgmpsgnext		; Branch if not
0009848E 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00098492                            ; loc_71BF8:
00098492                            @bgmpsgnext:
00098492 51CF FFF2                  		dbf	d7,@bgmpsgloop
00098496                            
00098496 1D7C 0080 000E             		move.b	#$80,f_voice_selector(a6)			; Now at SFX tracks
0009849C 7E02                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d7	; 3 FM tracks (SFX)
0009849E                            ; loc_71C04:
0009849E                            @sfxfmloop:
0009849E DAFC 0030                  		adda.w	#TrackSz,a5
000984A2 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000984A4 6A00                       		bpl.s	@sfxfmnext		; Branch if not
000984A6 4EBA 0000                  		jsr	FMUpdateTrack(pc)
000984AA                            ; loc_71C10:
000984AA                            @sfxfmnext:
000984AA 51CF FFF2                  		dbf	d7,@sfxfmloop
000984AE                            
000984AE 7E02                       		moveq	#((v_sfx_psg_tracks_end-v_sfx_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks (SFX)
000984B0                            ; loc_71C16:
000984B0                            @sfxpsgloop:
000984B0 DAFC 0030                  		adda.w	#TrackSz,a5
000984B4 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000984B6 6A00                       		bpl.s	@sfxpsgnext		; Branch of not
000984B8 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
000984BC                            ; loc_71C22:
000984BC                            @sfxpsgnext:
000984BC 51CF FFF2                  		dbf	d7,@sfxpsgloop
000984C0                            		
000984C0 1D7C 0040 000E             		move.b	#$40,f_voice_selector(a6) ; Now at special SFX tracks
000984C6 DAFC 0030                  		adda.w	#TrackSz,a5
000984CA 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000984CC 6A00                       		bpl.s	@specfmdone		; Branch if not
000984CE 4EBA 0000                  		jsr	FMUpdateTrack(pc)
000984D2                            ; loc_71C38:
000984D2                            @specfmdone:
000984D2 DAFC 0030                  		adda.w	#TrackSz,a5
000984D6 4A15                       		tst.b	(a5)			; Is track playing (TrackPlaybackControl)
000984D8 6A00                       		bpl.s	DoStartZ80		; Branch if not
000984DA 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
000984DE                            ; loc_71C44:
000984DE                            DoStartZ80:
000984DE 33FC 0000 00A1 1100        		startZ80
000984E6 0838 0006 FFF8             		btst #6,(v_megadrive).w ; is Megadrive PAL?
000984EC 6700                       		beq.s @end ; if not, branch
000984EE 0C38 0005 F015             		cmpi.b #$5,(v_palmuscounter).w ; 5th frame?
000984F4 6600                       		bne.s @end ; if not, branch
000984F6 11FC 0000 F015             		move.b #$0,(v_palmuscounter).w ; reset counter
000984FC 6000 FEDE                  		bra.w UpdateMusic ; run sound driver again
00098500                            
00098500                            	@end:
00098500 5238 F015                  		addq.b #$1,(v_palmuscounter).w ; add 1 to frame count
00098504 4E75                       		rts
00098506                            ; End of function UpdateMusic
00098506                            
00098506                            
00098506                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098506                            
00098506                            ; sub_71C4E: UpdateDAC:
00098506                            DACUpdateTrack:
00098506 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Has DAC sample timeout expired?
0009850A 6600                       		bne.s	@locret				; Return if not
0009850C 1D7C 0080 0008             		move.b	#$80,f_updating_dac(a6)		; Set flag to indicate this is the DAC
00098512                            ;DACDoNext:
00098512 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; DAC track data pointer
00098516                            ; loc_71C5E:
00098516                            @sampleloop:
00098516 7A00                       		moveq	#0,d5
00098518 1A1C                       		move.b	(a4)+,d5	; Get next SMPS unit
0009851A 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
0009851E 6500                       		blo.s	@notcoord	; Branch if not
00098520 4EBA 0000                  		jsr	CoordFlag(pc)
00098524 60F0                       		bra.s	@sampleloop
00098526                            ; ===========================================================================
00098526                            ; loc_71C6E:
00098526                            @notcoord:
00098526 4A05                       		tst.b	d5			; Is it a sample?
00098528 6A00                       		bpl.s	@gotduration		; Branch if not (duration)
0009852A 1B45 0010                  		move.b	d5,TrackSavedDAC(a5)	; Store new sample
0009852E 1A1C                       		move.b	(a4)+,d5		; Get another byte
00098530 6A00                       		bpl.s	@gotduration		; Branch if it is a duration
00098532 534C                       		subq.w	#1,a4			; Put byte back
00098534 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5) ; Use last duration
0009853A 6000                       		bra.s	@gotsampleduration
0009853C                            ; ===========================================================================
0009853C                            ; loc_71C84:
0009853C                            @gotduration:
0009853C 4EBA 0000                  		jsr	SetDuration(pc)
00098540                            ; loc_71C88:
00098540                            @gotsampleduration:
00098540 2B4C 0004                  		move.l	a4,TrackDataPointer(a5) ; Save pointer
00098544 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00098548 6600                       		bne.s	@locret			; Return if yes
0009854A 7000                       		moveq	#0,d0
0009854C 102D 0010                  		move.b	TrackSavedDAC(a5),d0	; Get sample
00098550 0C00 0080                  		cmpi.b	#$80,d0			; Is it a rest?
00098554 6700                       		beq.s	@locret			; Return if yes
00098556 0800 0003                  		btst	#3,d0			; Is bit 3 set (samples between $88-$8F)?
0009855A 6600                       		bne.s	@timpani		; Various timpani
0009855C 13C0 00A0 1FFF             		move.b	d0,(z80_dac_sample).l
00098562                            ; locret_71CAA:
00098562                            @locret:
00098562 4E75                       		rts	
00098564                            ; ===========================================================================
00098564                            ; loc_71CAC:
00098564                            @timpani:
00098564 0400 0088                  		subi.b	#$88,d0		; Convert into an index
00098568 103B 0000                  		move.b	DAC_sample_rate(pc,d0.w),d0
0009856C                            		; Warning: this affects the raw pitch of sample $83, meaning it will
0009856C                            		; use this value from then on.
0009856C 13C0 00A0 00EA             		move.b	d0,(z80_dac3_pitch).l
00098572 13FC 0083 00A0 1FFF        		move.b	#$83,(z80_dac_sample).l	; Use timpani
0009857A 4E75                       		rts	
0009857C                            ; End of function DACUpdateTrack
0009857C                            
0009857C                            ; ===========================================================================
0009857C                            ; Note: this only defines rates for samples $88-$8D, meaning $8E-$8F are invalid.
0009857C                            ; Also, $8C-$8D are so slow you may want to skip them.
0009857C                            ; byte_71CC4:
0009857C 171A 2122 FFFF             DAC_sample_rate: dc.b $17, $1A, $21, $22, $FF, $FF
00098582                            
00098582                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098582                            
00098582                            ; sub_71CCA:
00098582                            FMUpdateTrack:
00098582 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5) ; Update duration timeout
00098586 6600                       		bne.s	@notegoing		; Branch if it hasn't expired
00098588 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
0009858C 4EBA 0000                  		jsr	FMDoNext(pc)
00098590 4EBA 0000                  		jsr	FMPrepareNote(pc)
00098594 6000 0000                  		bra.w	FMNoteOn
00098598                            ; ===========================================================================
00098598                            ; loc_71CE0:
00098598                            @notegoing:
00098598 4EBA 0000                  		jsr	NoteTimeoutUpdate(pc)
0009859C 4EBA 0000                  		jsr	DoModulation(pc)
000985A0 6000 0000                  		bra.w	FMUpdateFreq
000985A4                            ; End of function FMUpdateTrack
000985A4                            
000985A4                            
000985A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000985A4                            
000985A4                            ; sub_71CEC:
000985A4                            FMDoNext:
000985A4 286D 0004                  		movea.l	TrackDataPointer(a5),a4 ; Track data pointer
000985A8 0895 0001                  		bclr	#1,(a5)			; Clear 'track at rest' bit (TrackPlaybackControl)
000985AC                            ; loc_71CF4:
000985AC                            @noteloop:
000985AC 7A00                       		moveq	#0,d5
000985AE 1A1C                       		move.b	(a4)+,d5	; Get byte from track
000985B0 0C05 00E0                  		cmpi.b	#$E0,d5		; Is this a coord. flag?
000985B4 6500                       		blo.s	@gotnote	; Branch if not
000985B6 4EBA 0000                  		jsr	CoordFlag(pc)
000985BA 60F0                       		bra.s	@noteloop
000985BC                            ; ===========================================================================
000985BC                            ; loc_71D04:
000985BC                            @gotnote:
000985BC 4EBA 0000                  		jsr	FMNoteOff(pc)
000985C0 4A05                       		tst.b	d5		; Is this a note?
000985C2 6A00                       		bpl.s	@gotduration	; Branch if not
000985C4 4EBA 0000                  		jsr	FMSetFreq(pc)
000985C8 1A1C                       		move.b	(a4)+,d5	; Get another byte
000985CA 6A00                       		bpl.s	@gotduration	; Branch if it is a duration
000985CC 534C                       		subq.w	#1,a4		; Otherwise, put it back
000985CE 6000 0000                  		bra.w	FinishTrackUpdate
000985D2                            ; ===========================================================================
000985D2                            ; loc_71D1A:
000985D2                            @gotduration:
000985D2 4EBA 0000                  		jsr	SetDuration(pc)
000985D6 6000 0000                  		bra.w	FinishTrackUpdate
000985DA                            ; End of function FMDoNext
000985DA                            
000985DA                            
000985DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000985DA                            
000985DA                            ; sub_71D22:
000985DA                            FMSetFreq:
000985DA 0405 0080                  		subi.b	#$80,d5			; Make it a zero-based index
000985DE 6700                       		beq.s	TrackSetRest
000985E0 DA2D 0008                  		add.b	TrackTranspose(a5),d5	; Add track transposition
000985E4 0245 007F                  		andi.w	#$7F,d5			; Clear high byte and sign bit
000985E8 E34D                       		lsl.w	#1,d5
000985EA 41FA 0000                  		lea	FMFrequencies(pc),a0
000985EE 3C30 5000                  		move.w	(a0,d5.w),d6
000985F2 3B46 0010                  		move.w	d6,TrackFreq(a5)	; Store new frequency
000985F6 4E75                       		rts	
000985F8                            ; End of function FMSetFreq
000985F8                            
000985F8                            
000985F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000985F8                            
000985F8                            ; sub_71D40:
000985F8                            SetDuration:
000985F8 1005                       		move.b	d5,d0
000985FA 122D 0002                  		move.b	TrackTempoDivider(a5),d1	; Get dividing timing
000985FE                            ; loc_71D46:
000985FE                            @multloop:
000985FE 5301                       		subq.b	#1,d1
00098600 6700                       		beq.s	@donemult
00098602 D005                       		add.b	d5,d0
00098604 60F8                       		bra.s	@multloop
00098606                            ; ===========================================================================
00098606                            ; loc_71D4E:
00098606                            @donemult:
00098606 1B40 000F                  		move.b	d0,TrackSavedDuration(a5)	; Save duration
0009860A 1B40 000E                  		move.b	d0,TrackDurationTimeout(a5)	; Save duration timeout
0009860E 4E75                       		rts	
00098610                            ; End of function SetDuration
00098610                            
00098610                            ; ===========================================================================
00098610                            ; loc_71D58:
00098610                            TrackSetRest:
00098610 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00098614 426D 0010                  		clr.w	TrackFreq(a5)	; Clear frequency
00098618                            
00098618                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098618                            
00098618                            ; sub_71D60:
00098618                            FinishTrackUpdate:
00098618 2B4C 0004                  		move.l	a4,TrackDataPointer(a5)	; Store new track position
0009861C 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5)	; Reset note timeout
00098622 0815 0004                  		btst	#4,(a5)				; Is track set to not attack note? (TrackPlaybackControl)
00098626 6600                       		bne.s	@locret				; If so, branch
00098628 1B6D 0013 0012             		move.b	TrackNoteTimeoutMaster(a5),TrackNoteTimeout(a5)	; Reset note fill timeout
0009862E 422D 000C                  		clr.b	TrackVolEnvIndex(a5)		; Reset PSG volume envelope index (even on FM tracks...)
00098632 0815 0003                  		btst	#3,(a5)				; Is modulation on? (TrackPlaybackControl)
00098636 6700                       		beq.s	@locret				; If not, return (TrackPlaybackControl)
00098638 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Modulation data pointer
0009863C 1B58 0018                  		move.b	(a0)+,TrackModulationWait(a5)	; Reset wait
00098640 1B58 0019                  		move.b	(a0)+,TrackModulationSpeed(a5)	; Reset speed
00098644 1B58 001A                  		move.b	(a0)+,TrackModulationDelta(a5)	; Reset delta
00098648 1018                       		move.b	(a0)+,d0			; Get steps
0009864A E208                       		lsr.b	#1,d0				; Halve them
0009864C 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; Then store
00098650 426D 001C                  		clr.w	TrackModulationVal(a5)		; Reset frequency change
00098654                            ; locret_71D9C:
00098654                            @locret:
00098654 4E75                       		rts	
00098656                            ; End of function FinishTrackUpdate
00098656                            
00098656                            
00098656                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098656                            
00098656                            ; sub_71D9E: NoteFillUpdate
00098656                            NoteTimeoutUpdate:
00098656 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)	; Is note fill on?
0009865A 6700                       		beq.s	@locret
0009865C 532D 0012                  		subq.b	#1,TrackNoteTimeout(a5)	; Update note fill timeout
00098660 6600                       		bne.s	@locret				; Return if it hasn't expired
00098662 08D5 0001                  		bset	#1,(a5)				; Put track at rest (TrackPlaybackControl)
00098666 4A2D 0001                  		tst.b	TrackVoiceControl(a5)		; Is this a psg track?
0009866A 6B00 0000                  		bmi.w	@psgnoteoff			; If yes, branch
0009866E 4EBA 0000                  		jsr	FMNoteOff(pc)
00098672 584F                       		addq.w	#4,sp				; Do not return to caller
00098674 4E75                       		rts	
00098676                            ; ===========================================================================
00098676                            ; loc_71DBE:
00098676                            @psgnoteoff:
00098676 4EBA 0000                  		jsr	PSGNoteOff(pc)
0009867A 584F                       		addq.w	#4,sp		; Do not return to caller
0009867C                            ; locret_71DC4:
0009867C                            @locret:
0009867C 4E75                       		rts	
0009867E                            ; End of function NoteTimeoutUpdate
0009867E                            
0009867E                            
0009867E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009867E                            
0009867E                            ; sub_71DC6:
0009867E                            DoModulation:
0009867E 584F                       		addq.w	#4,sp				; Do not return to caller (but see below)
00098680 0815 0003                  		btst	#3,(a5)				; Is modulation active? (TrackPlaybackControl)
00098684 6700                       		beq.s	@locret				; Return if not
00098686 4A2D 0018                  		tst.b	TrackModulationWait(a5)	; Has modulation wait expired?
0009868A 6700                       		beq.s	@waitdone			; If yes, branch
0009868C 532D 0018                  		subq.b	#1,TrackModulationWait(a5)	; Update wait timeout
00098690 4E75                       		rts	
00098692                            ; ===========================================================================
00098692                            ; loc_71DDA:
00098692                            @waitdone:
00098692 532D 0019                  		subq.b	#1,TrackModulationSpeed(a5)	; Update speed
00098696 6700                       		beq.s	@updatemodulation		; If it expired, want to update modulation
00098698 4E75                       		rts	
0009869A                            ; ===========================================================================
0009869A                            ; loc_71DE2:
0009869A                            @updatemodulation:
0009869A 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Get modulation data
0009869E 1B68 0001 0019             		move.b	1(a0),TrackModulationSpeed(a5)	; Restore modulation speed
000986A4 4A2D 001B                  		tst.b	TrackModulationSteps(a5)	; Check number of steps
000986A8 6600                       		bne.s	@calcfreq			; If nonzero, branch
000986AA 1B68 0003 001B             		move.b	3(a0),TrackModulationSteps(a5)	; Restore from modulation data
000986B0 442D 001A                  		neg.b	TrackModulationDelta(a5)	; Negate modulation delta
000986B4 4E75                       		rts	
000986B6                            ; ===========================================================================
000986B6                            ; loc_71DFE:
000986B6                            @calcfreq:
000986B6 532D 001B                  		subq.b	#1,TrackModulationSteps(a5)	; Update modulation steps
000986BA 1C2D 001A                  		move.b	TrackModulationDelta(a5),d6	; Get modulation delta
000986BE 4886                       		ext.w	d6
000986C0 DC6D 001C                  		add.w	TrackModulationVal(a5),d6	; Add cumulative modulation change
000986C4 3B46 001C                  		move.w	d6,TrackModulationVal(a5)	; Store it
000986C8 DC6D 0010                  		add.w	TrackFreq(a5),d6		; Add note frequency to it
000986CC 594F                       		subq.w	#4,sp		; In this case, we want to return to caller after all
000986CE                            ; locret_71E16:
000986CE                            @locret:
000986CE 4E75                       		rts	
000986D0                            ; End of function DoModulation
000986D0                            
000986D0                            
000986D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000986D0                            
000986D0                            ; sub_71E18:
000986D0                            FMPrepareNote:
000986D0 0815 0001                  		btst	#1,(a5)			; Is track resting? (TrackPlaybackControl)
000986D4 6600                       		bne.s	locret_71E48		; Return if so
000986D6 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get current note frequency
000986DA 6700                       		beq.s	FMSetRest		; Branch if zero
000986DC                            ; loc_71E24:
000986DC                            FMUpdateFreq:
000986DC 102D 001E                  		move.b	TrackDetune(a5),d0 	; Get detune value
000986E0 4880                       		ext.w	d0
000986E2 DC40                       		add.w	d0,d6			; Add note frequency
000986E4 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000986E8 6600                       		bne.s	locret_71E48		; Return if so
000986EA 3206                       		move.w	d6,d1
000986EC E049                       		lsr.w	#8,d1
000986EE 103C 00A4                  		move.b	#$A4,d0			; Register for upper 6 bits of frequency
000986F2 4EBA 0000                  		jsr	WriteFMIorII(pc)
000986F6 1206                       		move.b	d6,d1
000986F8 103C 00A0                  		move.b	#$A0,d0			; Register for lower 8 bits of frequency
000986FC 4EBA 0000                  		jsr	WriteFMIorII(pc)	; (It would be better if this were a jmp)
00098700                            ; locret_71E48:
00098700                            locret_71E48:
00098700 4E75                       		rts	
00098702                            ; ===========================================================================
00098702                            ; loc_71E4A:
00098702                            FMSetRest:
00098702 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00098706 4E75                       		rts	
00098708                            ; End of function FMPrepareNote
00098708                            
00098708                            ; ===========================================================================
00098708                            ; loc_71E50:
00098708                            PauseMusic:
00098708 6B00                       		bmi.s	@unpausemusic		; Branch if music is being unpaused
0009870A 0C2E 0002 0003             		cmpi.b	#2,f_pausemusic(a6)
00098710 6700 0000                  		beq.w	@unpausedallfm
00098714 1D7C 0002 0003             		move.b	#2,f_pausemusic(a6)
0009871A 7602                       		moveq	#2,d3
0009871C 103C 00B4                  		move.b	#$B4,d0		; Command to set AMS/FMS/panning
00098720 7200                       		moveq	#0,d1		; No panning, AMS or FMS
00098722                            ; loc_71E6A:
00098722                            @killpanloop:
00098722 4EBA 0000                  		jsr	WriteFMI(pc)
00098726 4EBA 0000                  		jsr	WriteFMII(pc)
0009872A 5200                       		addq.b	#1,d0
0009872C 51CB FFF4                  		dbf	d3,@killpanloop
00098730                            
00098730 7602                       		moveq	#2,d3
00098732 7028                       		moveq	#$28,d0		; Key on/off register
00098734                            ; loc_71E7C:
00098734                            @noteoffloop:
00098734 1203                       		move.b	d3,d1		; FM1, FM2, FM3
00098736 4EBA 0000                  		jsr	WriteFMI(pc)
0009873A 5801                       		addq.b	#4,d1		; FM4, FM5, FM6
0009873C 4EBA 0000                  		jsr	WriteFMI(pc)
00098740 51CB FFF2                  		dbf	d3,@noteoffloop
00098744                            
00098744 4EBA 0000                  		jsr	PSGSilenceAll(pc)
00098748 6000 FD94                  		bra.w	DoStartZ80
0009874C                            ; ===========================================================================
0009874C                            ; loc_71E94:
0009874C                            @unpausemusic:
0009874C 422E 0003                  		clr.b	f_pausemusic(a6)
00098750 7630                       		moveq	#TrackSz,d3
00098752 4BEE 0040                  		lea	v_music_fmdac_tracks(a6),a5
00098756 7806                       		moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d4	; 6 FM + 1 DAC tracks
00098758                            ; loc_71EA0:
00098758                            @bgmfmloop:
00098758 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
0009875C 6700                       		beq.s	@bgmfmnext		; Branch if not
0009875E 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00098762 6600                       		bne.s	@bgmfmnext		; Branch if yes
00098764 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00098768 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
0009876C 4EBA 0000                  		jsr	WriteFMIorII(pc)
00098770                            ; loc_71EB8:
00098770                            @bgmfmnext:
00098770 DAC3                       		adda.w	d3,a5
00098772 51CC FFE4                  		dbf	d4,@bgmfmloop
00098776                            
00098776 4BEE 0220                  		lea	v_sfx_fm_tracks(a6),a5
0009877A 7802                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d4	; 3 FM tracks (SFX)
0009877C                            ; loc_71EC4:
0009877C                            @sfxfmloop:
0009877C 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00098780 6700                       		beq.s	@sfxfmnext		; Branch if not
00098782 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00098786 6600                       		bne.s	@sfxfmnext		; Branch if yes
00098788 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
0009878C 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00098790 4EBA 0000                  		jsr	WriteFMIorII(pc)
00098794                            ; loc_71EDC:
00098794                            @sfxfmnext:
00098794 DAC3                       		adda.w	d3,a5
00098796 51CC FFE4                  		dbf	d4,@sfxfmloop
0009879A                            
0009879A 4BEE 0340                  		lea	v_spcsfx_track_ram(a6),a5
0009879E 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
000987A2 6700                       		beq.s	@unpausedallfm		; Branch if not
000987A4 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000987A8 6600                       		bne.s	@unpausedallfm		; Branch if yes
000987AA 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
000987AE 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
000987B2 4EBA 0000                  		jsr	WriteFMIorII(pc)
000987B6                            ; loc_71EFE:
000987B6                            @unpausedallfm:
000987B6 6000 FD26                  		bra.w	DoStartZ80
000987BA                            
000987BA                            ; ---------------------------------------------------------------------------
000987BA                            ; Subroutine to	play a sound or	music track
000987BA                            ; ---------------------------------------------------------------------------
000987BA                            
000987BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000987BA                            
000987BA                            ; Sound_Play:
000987BA                            CycleSoundQueue:
000987BA 2079 0009 81FC             		movea.l	(Go_SoundPriorities).l,a0
000987C0 43EE 000A                  		lea	v_soundqueue0(a6),a1	; load music track number
000987C4 1616                       		move.b	v_sndprio(a6),d3	; Get priority of currently playing SFX
000987C6 7802                       		moveq	#2,d4			; Number of queues-1 (v_soundqueue0, v_soundqueue1, v_soundqueue2)
000987C8                            ; loc_71F12:
000987C8                            @inputloop:
000987C8 1011                       		move.b	(a1),d0			; move track number to d0
000987CA 1200                       		move.b	d0,d1
000987CC 4219                       		clr.b	(a1)+			; Clear entry
000987CE 0400 0081                  		subi.b	#bgm__First,d0		; Make it into 0-based index
000987D2 6500                       		bcs.s	@nextinput		; If negative (i.e., it was $80 or lower), branch
000987D4 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; Is v_sound_id a $80 (silence/empty)?
000987DA 6700                       		beq.s	@havesound		; If yes, branch
000987DC 1D41 000A                  		move.b	d1,v_soundqueue0(a6)	; Put sound into v_soundqueue0
000987E0 6000                       		bra.s	@nextinput
000987E2                            ; ===========================================================================
000987E2                            ; loc_71F2C:
000987E2                            @havesound:
000987E2 0240 007F                  		andi.w	#$7F,d0			; Clear high byte and sign bit
000987E6 1430 0000                  		move.b	(a0,d0.w),d2		; Get sound type
000987EA B403                       		cmp.b	d3,d2			; Is it a lower priority sound?
000987EC 6500                       		blo.s	@nextinput		; Branch if yes
000987EE 1602                       		move.b	d2,d3			; Store new priority
000987F0 1D41 0009                  		move.b	d1,v_sound_id(a6)	; Queue sound for play
000987F4                            ; loc_71F3E:
000987F4                            @nextinput:
000987F4 51CC FFD2                  		dbf	d4,@inputloop
000987F8                            
000987F8 4A03                       		tst.b	d3			; We don't want to change sound priority if it is negative
000987FA 6B00                       		bmi.s	@locret
000987FC 1C83                       		move.b	d3,v_sndprio(a6)	; Set new sound priority
000987FE                            ; locret_71F4A:
000987FE                            @locret:
000987FE 4E75                       		rts	
00098800                            ; End of function CycleSoundQueue
00098800                            
00098800                            
00098800                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098800                            
00098800                            ; Sound_ChkValue:
00098800                            PlaySoundID:
00098800 7E00                       		moveq	#0,d7
00098802 1E2E 0009                  		move.b	v_sound_id(a6),d7
00098806 6700 0000                  		beq.w	StopAllSound
0009880A 6A00                       		bpl.s	@locret			; If >= 0, return (not a valid sound, bgm or command)
0009880C 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; reset	music flag
00098812                            		; DANGER! Music ends at $93, yet this checks until $9F; attempting to
00098812                            		; play sounds $94-$9F will cause a crash! Remove the '+$C' to fix this.
00098812                            		; See LevSel_NoCheat for more.
00098812 0C07 0000                  		cmpi.b	#bgm__Last,d7	; Is this music ($81-$9F)?
00098816 6300 0000                  		bls.w	Sound_PlayBGM		; Branch if yes
0009881A 0C07 00A0                  		cmpi.b	#sfx__First,d7		; Is this after music but before sfx? (redundant check)
0009881E 6500 0000                  		blo.w	@locret			; Return if yes
00098822 0C07 0000                  		cmpi.b	#sfx__Last,d7		; Is this sfx ($A0-$CF)?
00098826 6300 0000                  		bls.w	Sound_PlaySFX		; Branch if yes
0009882A 0C07 00D0                  		cmpi.b	#spec__First,d7		; Is this after sfx but before special sfx? (redundant check)
0009882E 6500 0000                  		blo.w	@locret			; Return if yes
00098832 0C07 00D1                  		cmpi.b	#$D1,d7
00098836 6500 0000                  		bcs.w	Sound_PlaySpecial
0009883A 0C07 00DF                  		cmp.b	#$DF,d7
0009883E 6F00 0000                  		ble.w	Sound_D1toDF
00098842 0C07 00E0                  		cmpi.b	#flg__First,d7		; Is this after special sfx but before $E0?
00098846 6500 0000                  		blo.w	@locret			; Return if yes
0009884A 0C07 0000                  		cmpi.b	#flg__Last,d7		; Is this $E0-$E4?
0009884E 6300                       		bls.s	Sound_E0toE4		; Branch if yes
00098850                            ; locret_71F8C:
00098850                            @locret:
00098850 4E75                       		rts	
00098852                            ; ===========================================================================
00098852                            
00098852                            Sound_E0toE4:
00098852 0407 00E0                  		subi.b	#flg__First,d7
00098856 E54F                       		lsl.w	#2,d7
00098858 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0009885C                            ; ===========================================================================
0009885C                            
0009885C                            Sound_ExIndex:
0009885C 6000 0000                  ptr_flgE0:	bra.w	FadeOutMusic		; $E0
00098860 6000 0000                  ptr_flgE1:	bra.w	PlaySegaSound		; $E1
00098864 6000 0000                  ptr_flgE2:	bra.w	SpeedUpMusic		; $E2
00098868 6000 0000                  ptr_flgE3:	bra.w	SlowDownMusic		; $E3
0009886C 6000 0000                  ptr_flgE4:	bra.w	StopAllSound		; $E4
00098870                            ptr_flgend
00098870                            ; ===========================================================================
00098870                            ; ---------------------------------------------------------------------------
00098870                            ; Play "Say-gaa" PCM sound
00098870                            ; ---------------------------------------------------------------------------
00098870                            ; Sound_E1: PlaySega:
00098870                            PlaySegaSound:
00098870 13FC 0088 00A0 1FFF        		move.b	#$88,(z80_dac_sample).l	; Queue Sega PCM
00098878 33FC 0000 00A1 1100        		startZ80
00098880 323C 0011                  		move.w	#$11,d1
00098884                            ; loc_71FC0:
00098884                            @busyloop_outer:
00098884 303C FFFF                  		move.w	#-1,d0
00098888                            ; loc_71FC4:
00098888                            @busyloop:
00098888 4E71                       		nop	
0009888A 51C8 FFFC                  		dbf	d0,@busyloop
0009888E                            
0009888E 51C9 FFF4                  		dbf	d1,@busyloop_outer
00098892                            
00098892 584F                       		addq.w	#4,sp	; Tamper return value so we don't return to caller
00098894 4E75                       		rts	
00098896                            ; ===========================================================================
00098896                            ; ---------------------------------------------------------------------------
00098896                            ; Play music track $81-$9F
00098896                            ; ---------------------------------------------------------------------------
00098896                            ; Sound_81to9F:
00098896                            Sound_PlayBGM:
00098896 0C07 0000                  		cmpi.b	#bgm_ExtraLife,d7	; is the "extra life" music to be played?
0009889A 6600                       		bne.s	@bgmnot1up		; if not, branch
0009889C 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is a 1-up music playing?
000988A0 6600 0000                  		bne.w	@locdblret		; if yes, branch
000988A4 4BEE 0040                  		lea	v_music_track_ram(a6),a5
000988A8 7009                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d0	; 1 DAC + 6 FM + 3 PSG tracks
000988AA                            ; loc_71FE6:
000988AA                            @clearsfxloop:
000988AA 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000988AE DAFC 0030                  		adda.w	#TrackSz,a5
000988B2 51C8 FFF6                  		dbf	d0,@clearsfxloop
000988B6                            
000988B6 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
000988BA 7005                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d0	; 3 FM + 3 PSG tracks (SFX)
000988BC                            ; loc_71FF8:
000988BC                            @cleartrackplayloop:
000988BC 0895 0007                  		bclr	#7,(a5)			; Clear 'track is playing' bit (TrackPlaybackControl)
000988C0 DAFC 0030                  		adda.w	#TrackSz,a5
000988C4 51C8 FFF6                  		dbf	d0,@cleartrackplayloop
000988C8                            
000988C8 4216                       		clr.b	v_sndprio(a6)		; Clear priority
000988CA 204E                       		movea.l	a6,a0
000988CC 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
000988D0 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Backup $220 bytes: all variables and music track data
000988D4                            ; loc_72012:
000988D4                            @backupramloop:
000988D4 22D8                       		move.l	(a0)+,(a1)+
000988D6 51C8 FFFC                  		dbf	d0,@backupramloop
000988DA                            
000988DA 1D7C 0080 0027             		move.b	#$80,f_1up_playing(a6)
000988E0 4216                       		clr.b	v_sndprio(a6)		; Clear priority again (?)
000988E2 6000                       		bra.s	@bgm_loadMusic
000988E4                            ; ===========================================================================
000988E4                            ; loc_72024:
000988E4                            @bgmnot1up:
000988E4 422E 0027                  		clr.b	f_1up_playing(a6)
000988E8 422E 0026                  		clr.b	v_fadein_counter(a6)
000988EC                            ; loc_7202C:
000988EC                            @bgm_loadMusic:
000988EC 4EBA 0000                  		jsr	InitMusicPlayback(pc)
000988F0 2879 0009 820C             		movea.l	(Go_SpeedUpIndex).l,a4
000988F6 0407 0081                  		subi.b	#bgm__First,d7
000988FA 1D74 7000 0029             		move.b	(a4,d7.w),v_speeduptempo(a6)
00098900 2879 0009 8204             		movea.l	(Go_MusicIndex).l,a4
00098906 E54F                       		lsl.w	#2,d7
00098908 2874 7000                  		movea.l	(a4,d7.w),a4		; a4 now points to (uncompressed) song data
0009890C 7000                       		moveq	#0,d0
0009890E 3014                       		move.w	(a4),d0			; load voice pointer
00098910 D08C                       		add.l	a4,d0			; It is a relative pointer
00098912 2D40 0018                  		move.l	d0,v_voice_ptr(a6)
00098916 102C 0005                  		move.b	5(a4),d0		; load tempo
0009891A 1D40 0028                  		move.b	d0,v_tempo_mod(a6)
0009891E                            		;tst.b	f_speedup(a6)
0009891E                            		;beq.s	@nospeedshoes
0009891E                            		;move.b	v_speeduptempo(a6),d0
0009891E                            ; loc_72068:
0009891E                            ;@nospeedshoes:
0009891E 1D40 0002                  		move.b	d0,v_main_tempo(a6)
00098922 1D40 0001                  		move.b	d0,v_main_tempo_timeout(a6)
00098926 7200                       		moveq	#0,d1
00098928 264C                       		movea.l	a4,a3
0009892A 5C4C                       		addq.w	#6,a4			; Point past header
0009892C 7E00                       		moveq	#0,d7
0009892E 1E2B 0002                  		move.b	2(a3),d7		; load number of FM+DAC tracks
00098932 6700 0000                  		beq.w	@bgm_fmdone		; branch if zero
00098936 5307                       		subq.b	#1,d7
00098938 123C 00C0                  		move.b	#$C0,d1			; Default AMS+FMS+Panning
0009893C 182B 0004                  		move.b	4(a3),d4		; load tempo dividing timing
00098940 7C30                       		moveq	#TrackSz,d6
00098942 1A3C 0001                  		move.b	#1,d5			; Note duration for first "note"
00098946 43EE 0040                  		lea	v_music_fmdac_tracks(a6),a1
0009894A 45FA 0000                  		lea	FMDACInitBytes(pc),a2
0009894E                            ; loc_72098:
0009894E                            @bmg_fmloadloop:
0009894E 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00098952 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00098956 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
0009895A 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
0009895E 1341 000A                  		move.b	d1,TrackAMSFMSPan(a1)		; Set AMS/FMS/Panning
00098962 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00098966 7000                       		moveq	#0,d0
00098968 301C                       		move.w	(a4)+,d0			; load DAC/FM pointer
0009896A D08B                       		add.l	a3,d0				; Relative pointer
0009896C 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00098970 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load FM channel modifier
00098974 D2C6                       		adda.w	d6,a1
00098976 51CF FFD6                  		dbf	d7,@bmg_fmloadloop
0009897A                            		
0009897A 0C2B 0007 0002             		cmpi.b	#7,2(a3)	; Are 7 FM tracks defined?
00098980 6600                       		bne.s	@silencefm6
00098982 702B                       		moveq	#$2B,d0		; DAC enable/disable register
00098984 7200                       		moveq	#0,d1		; Disable DAC
00098986 4EBA 0000                  		jsr	WriteFMI(pc)
0009898A 6000 0000                  		bra.w	@bgm_fmdone
0009898E                            ; ===========================================================================
0009898E                            ; loc_720D8:
0009898E                            @silencefm6:
0009898E 7028                       		moveq	#$28,d0		; Key on/off register
00098990 7206                       		moveq	#6,d1		; Note off on all operators of channel 6
00098992 4EBA 0000                  		jsr	WriteFMI(pc)
00098996 103C 0042                  		move.b	#$42,d0		; TL for operator 1 of FM6
0009899A 727F                       		moveq	#$7F,d1		; Total silence
0009899C 4EBA 0000                  		jsr	WriteFMII(pc)
000989A0 103C 004A                  		move.b	#$4A,d0		; TL for operator 3 of FM6
000989A4 727F                       		moveq	#$7F,d1		; Total silence
000989A6 4EBA 0000                  		jsr	WriteFMII(pc)
000989AA 103C 0046                  		move.b	#$46,d0		; TL for operator 2 of FM6
000989AE 727F                       		moveq	#$7F,d1		; Total silence
000989B0 4EBA 0000                  		jsr	WriteFMII(pc)
000989B4 103C 004E                  		move.b	#$4E,d0		; TL for operator 4 of FM6
000989B8 727F                       		moveq	#$7F,d1		; Total silence
000989BA 4EBA 0000                  		jsr	WriteFMII(pc)
000989BE 103C 00B6                  		move.b	#$B6,d0		; AMS/FMS/panning of FM6
000989C2 123C 00C0                  		move.b	#$C0,d1		; Stereo
000989C6 4EBA 0000                  		jsr	WriteFMII(pc)
000989CA                            ; loc_72114:
000989CA                            @bgm_fmdone:
000989CA 7E00                       		moveq	#0,d7
000989CC 1E2B 0003                  		move.b	3(a3),d7	; Load number of PSG tracks
000989D0 6700                       		beq.s	@bgm_psgdone	; branch if zero
000989D2 5307                       		subq.b	#1,d7
000989D4 43EE 0190                  		lea	v_music_psg_tracks(a6),a1
000989D8 45FA 0000                  		lea	PSGInitBytes(pc),a2
000989DC                            ; loc_72126:
000989DC                            @bgm_psgloadloop:
000989DC 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
000989E0 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
000989E4 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
000989E8 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
000989EC 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
000989F0 7000                       		moveq	#0,d0
000989F2 301C                       		move.w	(a4)+,d0			; load PSG channel pointer
000989F4 D08B                       		add.l	a3,d0				; Relative pointer
000989F6 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
000989FA 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load PSG modifier
000989FE 101C                       		move.b	(a4)+,d0			; load redundant byte
00098A00 135C 000B                  		move.b	(a4)+,TrackVoiceIndex(a1)	; Initial PSG tone
00098A04 D2C6                       		adda.w	d6,a1
00098A06 51CF FFD4                  		dbf	d7,@bgm_psgloadloop
00098A0A                            ; loc_72154:
00098A0A                            @bgm_psgdone:
00098A0A 43EE 0220                  		lea	v_sfx_track_ram(a6),a1
00098A0E 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 6 SFX tracks
00098A10                            ; loc_7215A:
00098A10                            @sfxstoploop:
00098A10 4A11                       		tst.b	(a1)		; Is SFX playing? (TrackPlaybackControl)
00098A12 6A00 0000                  		bpl.w	@sfxnext	; Branch if not
00098A16 7000                       		moveq	#0,d0
00098A18 1029 0001                  		move.b	TrackVoiceControl(a1),d0 ; Get voice control bits
00098A1C 6B00                       		bmi.s	@sfxpsgchannel		; Branch if this is a PSG channel
00098A1E 5500                       		subq.b	#2,d0			; SFX can't have FM1 or FM2
00098A20 E508                       		lsl.b	#2,d0			; Convert to index
00098A22 6000                       		bra.s	@gotchannelindex
00098A24                            ; ===========================================================================
00098A24                            ; loc_7216E:
00098A24                            @sfxpsgchannel:
00098A24 E608                       		lsr.b	#3,d0		; Convert to index
00098A26                            ; loc_72170:
00098A26                            @gotchannelindex:
00098A26 41FA 0000                  		lea	SFX_BGMChannelRAM(pc),a0
00098A2A 2070 0000                  		movea.l	(a0,d0.w),a0
00098A2E 08D0 0002                  		bset	#2,(a0)		; Set 'SFX is overriding' bit (TrackPlaybackControl)
00098A32                            ; loc_7217C:
00098A32                            @sfxnext:
00098A32 D2C6                       		adda.w	d6,a1
00098A34 51CF FFDA                  		dbf	d7,@sfxstoploop
00098A38                            
00098A38 4A6E 0340                  		tst.w	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00098A3C 6A00                       		bpl.s	@checkspecialpsg				; Branch if not
00098A3E 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00098A44                            ; loc_7218E:
00098A44                            @checkspecialpsg:
00098A44 4A6E 0370                  		tst.w	v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00098A48 6A00                       		bpl.s	@sendfmnoteoff					; Branch if not
00098A4A 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00098A50                            ; loc_7219A:
00098A50                            @sendfmnoteoff:
00098A50 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00098A54 7805                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d4	; 6 FM tracks
00098A56                            ; loc_721A0:
00098A56                            @fmnoteoffloop:
00098A56 4EBA 0000                  		jsr	FMNoteOff(pc)
00098A5A DAC6                       		adda.w	d6,a5
00098A5C 51CC FFF8                  		dbf	d4,@fmnoteoffloop		; run all FM tracks
00098A60 7802                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d4 ; 3 PSG tracks
00098A62                            ; loc_721AC:
00098A62                            @psgnoteoffloop:
00098A62 4EBA 0000                  		jsr	PSGNoteOff(pc)
00098A66 DAC6                       		adda.w	d6,a5
00098A68 51CC FFF8                  		dbf	d4,@psgnoteoffloop		; run all PSG tracks
00098A6C                            ; loc_721B6:
00098A6C                            @locdblret:
00098A6C 584F                       		addq.w	#4,sp	; Tamper with return value to not return to caller
00098A6E 4E75                       		rts	
00098A70                            ; ===========================================================================
00098A70                            ; byte_721BA:
00098A70 0600 0102 0405 06          FMDACInitBytes:	dc.b 6,	0, 1, 2, 4, 5, 6	; first byte is for DAC; then notice the 0, 1, 2 then 4, 5, 6; this is the gap between parts I and II for YM2612 port writes
00098A78 00                         		even
00098A78                            ; byte_721C2:
00098A78 80A0 C0                    PSGInitBytes:	dc.b $80, $A0, $C0	; Specifically, these configure writes to the PSG port for each channel
00098A7C 00                         		even
00098A7C                            ; ===========================================================================
00098A7C                            ; ---------------------------------------------------------------------------
00098A7C                            ; Play Spin Dash sound effect
00098A7C                            ; ---------------------------------------------------------------------------
00098A7C                            Sound_D1toDF:
00098A7C 4A2E 0027                  		tst.b	$27(a6)
00098A80 6600 0000                  		bne.w	loc_722C6
00098A84 4A2E 0004                  		tst.b	4(a6)
00098A88 6600 0000                  		bne.w	loc_722C6
00098A8C 4A2E 0024                  		tst.b	$24(a6)
00098A90 6600 0000                  		bne.w	loc_722C6
00098A94 4238 C900                  		clr.b	($FFFFC900).w
00098A98 0C07 00D5                  		cmp.b	#$D5,d7		; is this the Spin Dash sound?
00098A9C 6600                       		bne.s	@cont3	; if not, branch
00098A9E 3F00                       		move.w	d0,-(sp)
00098AA0 1038 C902                  		move.b	($FFFFC902).w,d0	; store extra frequency
00098AA4 4A38 C901                  		tst.b	($FFFFC901).w	; is the Spin Dash timer active?
00098AA8 6600                       		bne.s	@cont1		; if it is, branch
00098AAA 103C 00FF                  		move.b	#-1,d0		; otherwise, reset frequency (becomes 0 on next line)
00098AAE                            		
00098AAE                            @cont1:
00098AAE 5200                       		addq.b	#1,d0
00098AB0 0C00 000C                  		cmp.b	#$C,d0		; has the limit been reached?
00098AB4 6400                       		bcc.s	@cont2		; if it has, branch
00098AB6 11C0 C902                  		move.b	d0,($FFFFC902).w	; otherwise, set new frequency
00098ABA                            		
00098ABA                            @cont2:
00098ABA 11FC 0001 C900             		move.b	#1,($FFFFC900).w	; set flag
00098AC0 11FC 003C C901             		move.b	#60,($FFFFC901).w	; set timer
00098AC6 301F                       		move.w	(sp)+,d0
00098AC8                            		
00098AC8                            @cont3:	
00098AC8 2079 0009 8208             		movea.l	(Go_SoundIndex).l,a0
00098ACE 0407 00A0                  		sub.b	#$A0,d7
00098AD2 6000                       		bra.s	SoundEffects_Common
00098AD4                            ; ---------------------------------------------------------------------------
00098AD4                            ; Play normal sound effect
00098AD4                            ; ---------------------------------------------------------------------------
00098AD4                            ; Sound_A0toCF:
00098AD4                            Sound_PlaySFX:
00098AD4 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00098AD8 6600 0000                  		bne.w	loc_722C6		; Exit is it is
00098ADC 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00098AE0 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00098AE4 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00098AE8 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00098AEC 4238 C900                  		clr.b	($FFFFC900).w
00098AF0 0C07 0000                  		cmpi.b	#sfx_Ring,d7		; is ring sound	effect played?
00098AF4 6600                       		bne.s	Sound_notB5		; if not, branch
00098AF6 4A2E 002B                  		tst.b	v_ring_speaker(a6)	; Is the ring sound playing on right speaker?
00098AFA 6600                       		bne.s	loc_721EE		; Branch if not
00098AFC 1E3C 0000                  		move.b	#sfx_RingLeft,d7	; play ring sound in left speaker
00098B00                            
00098B00                            loc_721EE:
00098B00 086E 0000 002B             		bchg	#0,v_ring_speaker(a6)	; change speaker
00098B06                            
00098B06                            Sound_notB5:
00098B06 0C07 0000                  		cmpi.b	#sfx_Push,d7		; is "pushing" sound played?
00098B0A 6600                       		bne.s	Sound_notA7		; if not, branch
00098B0C 4A2E 002C                  		tst.b	f_push_playing(a6)	; Is pushing sound already playing?
00098B10 6600 0000                  		bne.w	locret_722C4			; Return if not
00098B14 1D7C 0080 002C             		move.b	#$80,f_push_playing(a6)	; Mark it as playing
00098B1A                            		
00098B1A                            Sound_notA7:
00098B1A 2079 0009 8208             		movea.l	(Go_SoundIndex).l,a0
00098B20 0407 00A0                  		subi.b	#sfx__First,d7		; Make it 0-based
00098B24                            
00098B24                            SoundEffects_Common:		
00098B24 E54F                       		lsl.w	#2,d7			; Convert sfx ID into index
00098B26 2670 7000                  		movea.l	(a0,d7.w),a3		; SFX data pointer
00098B2A 224B                       		movea.l	a3,a1
00098B2C 7200                       		moveq	#0,d1
00098B2E 3219                       		move.w	(a1)+,d1		; Voice pointer
00098B30 D28B                       		add.l	a3,d1			; Relative pointer
00098B32 1A19                       		move.b	(a1)+,d5		; Dividing timing	
00098B34                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which SFXes whose
00098B34                            		; index entry is above $3F will cause a crash. This is actually the same way that
00098B34                            		; this bug is fixed in Ristar's driver.
00098B34 7E00                       		moveq	#0,d7	
00098B36 1E19                       		move.b	(a1)+,d7	; Number of tracks (FM + PSG)
00098B38 5307                       		subq.b	#1,d7
00098B3A 7C30                       		moveq	#TrackSz,d6
00098B3C                            
00098B3C                            loc_72228:
00098B3C 7600                       		moveq	#0,d3
00098B3E 1629 0001                  		move.b	1(a1),d3	; Channel assignment bits
00098B42 1803                       		move.b	d3,d4
00098B44 6B00                       		bmi.s	loc_72244	; Branch if PSG
00098B46 5543                       		subq.w	#2,d3		; SFX can only have FM3, FM4 or FM5
00098B48 E54B                       		lsl.w	#2,d3
00098B4A 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
00098B4E 2A75 3000                  		movea.l	(a5,d3.w),a5
00098B52 08D5 0002                  		bset	#2,(a5)		; Mark music track as being overridden (TrackPlaybackControl)
00098B56 6000                       		bra.s	loc_7226E
00098B58                            ; ===========================================================================
00098B58                            
00098B58                            loc_72244:
00098B58 E64B                       		lsr.w	#3,d3
00098B5A 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
00098B5E 2A75 3000                  		movea.l	(a5,d3.w),a5
00098B62 08D5 0002                  		bset	#2,(a5)			; Mark music track as being overridden (TrackPlaybackControl)
00098B66 0C04 00C0                  		cmpi.b	#$C0,d4			; Is this PSG 3?
00098B6A 6600                       		bne.s	loc_7226E	; Branch if not
00098B6C 1004                       		move.b	d4,d0
00098B6E 0000 001F                  		ori.b	#$1F,d0			; Command to silence PSG 3
00098B72 13C0 00C0 0011             		move.b	d0,(psg_input).l
00098B78 0840 0005                  		bchg	#5,d0			; Command to silence noise channel
00098B7C 13C0 00C0 0011             		move.b	d0,(psg_input).l
00098B82                            
00098B82                            loc_7226E:
00098B82 4BFA 0000                  		lea	SFX_SFXChannelRAM(pc),a5
00098B86 2A75 3000                  		movea.l	(a5,d3.w),a5
00098B8A 244D                       		movea.l	a5,a2
00098B8C 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
00098B8E                            
00098B8E                            loc_72276:
00098B8E 429A                       		clr.l	(a2)+
00098B90 51C8 FFFC                  		dbf	d0,loc_72276
00098B94                            
00098B94 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits (TrackPlaybackControl)
00098B96 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)	; Initial voice control bits
00098B9A 7000                       		moveq	#0,d0
00098B9C 3019                       		move.w	(a1)+,d0			; Track data pointer
00098B9E D08B                       		add.l	a3,d0				; Relative pointer
00098BA0 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
00098BA4 3B59 0008                  		move.w	(a1)+,8(a5)
00098BA8 4A38 C900                  		tst.b	($FFFFC900).w	; is the Spin Dash sound playing?
00098BAC 6700                       		beq.s	@cont		; if not, branch
00098BAE 3F00                       		move.w	d0,-(sp)
00098BB0 1038 C902                  		move.b	($FFFFC902).w,d0
00098BB4 D12D 0008                  		add.b	d0,8(a5)
00098BB8 301F                       		move.w	(sp)+,d0
00098BBA                            		
00098BBA                            @cont:
00098BBA 1B7C 0001 000E             		move.b	#1,$E(a5)
00098BC0 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
00098BC4 4A04                       		tst.b	d4				; Is this a PSG channel?
00098BC6 6B00                       		bmi.s	loc_722A8		; Branch if yes
00098BC8 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00098BCE 2B41 0020                  		move.l	d1,TrackVoicePtr(a5)		; Voice pointer
00098BD2                            
00098BD2                            loc_722A8:
00098BD2 51CF FF68                  		dbf	d7,loc_72228
00098BD6                            
00098BD6 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00098BDA 6A00                       		bpl.s	loc_722B8				; Branch if not
00098BDC 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00098BE2                            
00098BE2                            loc_722B8:
00098BE2 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is SFX being played?
00098BE6 6A00                       		bpl.s	locret_722C4						; Branch if not
00098BE8 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00098BEE                            
00098BEE                            locret_722C4:
00098BEE 4E75                       		rts	
00098BF0                            ; ===========================================================================
00098BF0                            
00098BF0                            loc_722C6:
00098BF0 4216                       		clr.b	v_sndprio(a6)	; Clear priority
00098BF2 4E75                       		rts	
00098BF4                            ; ===========================================================================
00098BF4                            ; ---------------------------------------------------------------------------
00098BF4                            ; RAM addresses for FM and PSG channel variables used by the SFX
00098BF4                            ; ---------------------------------------------------------------------------
00098BF4                            ; dword_722CC: BGMChannelRAM:
00098BF4                            SFX_BGMChannelRAM:
00098BF4 00FF F0D0                  		dc.l (v_snddriver_ram+v_music_fm3_track)&$FFFFFF
00098BF8 0000 0000                  		dc.l 0
00098BFC 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00098C00 00FF F130                  		dc.l (v_snddriver_ram+v_music_fm5_track)&$FFFFFF
00098C04 00FF F190                  		dc.l (v_snddriver_ram+v_music_psg1_track)&$FFFFFF
00098C08 00FF F1C0                  		dc.l (v_snddriver_ram+v_music_psg2_track)&$FFFFFF
00098C0C 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Plain PSG3
00098C10 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Noise
00098C14                            ; dword_722EC: SFXChannelRAM:
00098C14                            SFX_SFXChannelRAM:
00098C14 00FF F220                  		dc.l (v_snddriver_ram+v_sfx_fm3_track)&$FFFFFF
00098C18 0000 0000                  		dc.l 0
00098C1C 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00098C20 00FF F280                  		dc.l (v_snddriver_ram+v_sfx_fm5_track)&$FFFFFF
00098C24 00FF F2B0                  		dc.l (v_snddriver_ram+v_sfx_psg1_track)&$FFFFFF
00098C28 00FF F2E0                  		dc.l (v_snddriver_ram+v_sfx_psg2_track)&$FFFFFF
00098C2C 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Plain PSG3
00098C30 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Noise
00098C34                            ; ===========================================================================
00098C34                            ; ---------------------------------------------------------------------------
00098C34                            ; Play GHZ waterfall sound
00098C34                            ; ---------------------------------------------------------------------------
00098C34                            ; Sound_D0toDF:
00098C34                            Sound_PlaySpecial:
00098C34 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00098C38 6600 0000                  		bne.w	@locret			; Return if so
00098C3C 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00098C40 6600 0000                  		bne.w	@locret			; Exit if it is
00098C44 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00098C48 6600 0000                  		bne.w	@locret			; Exit if it is
00098C4C 2079 0009 8200             		movea.l	(Go_SpecSoundIndex).l,a0
00098C52 0407 00D0                  		subi.b	#spec__First,d7		; Make it 0-based
00098C56 E54F                       		lsl.w	#2,d7
00098C58 2670 7000                  		movea.l	(a0,d7.w),a3
00098C5C 224B                       		movea.l	a3,a1
00098C5E 7000                       		moveq	#0,d0
00098C60 3019                       		move.w	(a1)+,d0			; Voice pointer
00098C62 D08B                       		add.l	a3,d0				; Relative pointer
00098C64 2D40 0020                  		move.l	d0,v_special_voice_ptr(a6)	; Store voice pointer
00098C68 1A19                       		move.b	(a1)+,d5			; Dividing timing
00098C6A                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which special SFXes whose
00098C6A                            		; index entry is above $3F will cause a crash. This instance was not fixed in Ristar's driver.
00098C6A 7E00                       		moveq	#0,d7	
00098C6C 1E19                       		move.b	(a1)+,d7			; Number of tracks (FM + PSG)
00098C6E 5307                       		subq.b	#1,d7
00098C70 7C30                       		moveq	#TrackSz,d6
00098C72                            ; loc_72348:
00098C72                            @sfxloadloop:
00098C72 1829 0001                  		move.b	1(a1),d4					; Voice control bits
00098C76 6B00                       		bmi.s	@sfxoverridepsg					; Branch if PSG
00098C78 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00098C7E 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00098C82 6000                       		bra.s	@sfxinitpsg
00098C84                            ; ===========================================================================
00098C84                            ; loc_7235A:
00098C84                            @sfxoverridepsg:
00098C84 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00098C8A 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00098C8E                            ; loc_72364:
00098C8E                            @sfxinitpsg:
00098C8E 244D                       		movea.l	a5,a2
00098C90 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
00098C92                            ; loc_72368:
00098C92                            @clearsfxtrackram:
00098C92 429A                       		clr.l	(a2)+
00098C94 51C8 FFFC                  		dbf	d0,@clearsfxtrackram
00098C98                            
00098C98 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits & voice control bits (TrackPlaybackControl)
00098C9A 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)
00098C9E 7000                       		moveq	#0,d0
00098CA0 3019                       		move.w	(a1)+,d0			; Track data pointer
00098CA2 D08B                       		add.l	a3,d0				; Relative pointer
00098CA4 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
00098CA8 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
00098CAC 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
00098CB2 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
00098CB6 4A04                       		tst.b	d4				; Is this a PSG channel?
00098CB8 6B00                       		bmi.s	@sfxpsginitdone			; Branch if yes
00098CBA 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00098CC0                            ; loc_72396:
00098CC0                            @sfxpsginitdone:
00098CC0 51CF FFB0                  		dbf	d7,@sfxloadloop
00098CC4                            
00098CC4 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is track playing?
00098CC8 6A00                       		bpl.s	@doneoverride					; Branch if not
00098CCA 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00098CD0                            ; loc_723A6:
00098CD0                            @doneoverride:
00098CD0 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is track playing?
00098CD4 6A00                       		bpl.s	@locret						; Branch if not
00098CD6 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00098CDC 0004 001F                  		ori.b	#$1F,d4						; Command to silence channel
00098CE0 13C4 00C0 0011             		move.b	d4,(psg_input).l
00098CE6 0844 0005                  		bchg	#5,d4			; Command to silence noise channel
00098CEA 13C4 00C0 0011             		move.b	d4,(psg_input).l
00098CF0                            ; locret_723C6:
00098CF0                            @locret:
00098CF0 4E75                       		rts	
00098CF2                            ; End of function PlaySoundID
00098CF2                            
00098CF2                            ; ===========================================================================
00098CF2                            ; ---------------------------------------------------------------------------
00098CF2                            ; Unused RAM addresses for FM and PSG channel variables used by the Special SFX
00098CF2                            ; ---------------------------------------------------------------------------
00098CF2                            ; The first block would have been used for overriding the music tracks
00098CF2                            ; as they have a lower priority, just as they are in Sound_PlaySFX
00098CF2                            ; The third block would be used to set up the Special SFX
00098CF2                            ; The second block, however, is for the SFX tracks, which have a higher priority
00098CF2                            ; and would be checked for if they're currently playing
00098CF2                            ; If they are, then the third block would be used again, this time to mark
00098CF2                            ; the new tracks as 'currently playing'
00098CF2                            
00098CF2                            ; These were actually used in Moonwalker's driver (and other SMPS 68k Type 1a drivers)
00098CF2                            
00098CF2                            ; BGMFM4PSG3RAM:
00098CF2                            ;SpecSFX_BGMChannelRAM:
00098CF2 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00098CF6 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF
00098CFA                            ; SFXFM4PSG3RAM:
00098CFA                            ;SpecSFX_SFXChannelRAM:
00098CFA 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00098CFE 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF
00098D02                            ; SpecialSFXFM4PSG3RAM:
00098D02                            ;SpecSFX_SpecSFXChannelRAM:
00098D02 00FF F340                  		dc.l (v_snddriver_ram+v_spcsfx_fm4_track)&$FFFFFF
00098D06 00FF F370                  		dc.l (v_snddriver_ram+v_spcsfx_psg3_track)&$FFFFFF
00098D0A                            
00098D0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098D0A                            
00098D0A                            ; Snd_FadeOut1: Snd_FadeOutSFX: FadeOutSFX:
00098D0A                            StopSFX:
00098D0A 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00098D0C 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
00098D10 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 3 FM + 3 PSG tracks (SFX)
00098D12                            ; loc_723EA:
00098D12                            @trackloop:
00098D12 4A15                       		tst.b	(a5)		; Is track playing? (TrackPlaybackControl)
00098D14 6A00 0000                  		bpl.w	@nexttrack	; Branch if not
00098D18 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00098D1C 7600                       		moveq	#0,d3
00098D1E 162D 0001                  		move.b	TrackVoiceControl(a5),d3	; Get voice control bits
00098D22 6B00                       		bmi.s	@trackpsg			; Branch if PSG
00098D24 4EBA 0000                  		jsr	FMNoteOff(pc)
00098D28 0C03 0004                  		cmpi.b	#4,d3						; Is this FM4?
00098D2C 6600                       		bne.s	@getfmpointer					; Branch if not
00098D2E 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00098D32 6A00                       		bpl.s	@getfmpointer					; Branch if not
00098D34                            		; DANGER! there is a missing 'movea.l	a5,a3' here, without which the
00098D34                            		; code is broken. It is dangerous to do a fade out when a GHZ waterfall
00098D34                            		; is playing its sound!
00098D34 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00098D38 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get special voice pointer
00098D3C 6000                       		bra.s	@gotfmpointer
00098D3E                            ; ===========================================================================
00098D3E                            ; loc_72416:
00098D3E                            @getfmpointer:
00098D3E 5503                       		subq.b	#2,d3		; SFX only has FM3 and up
00098D40 E50B                       		lsl.b	#2,d3
00098D42 41FA FEB0                  		lea	SFX_BGMChannelRAM(pc),a0
00098D46 264D                       		movea.l	a5,a3
00098D48 2A70 3000                  		movea.l	(a0,d3.w),a5
00098D4C 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get music voice pointer
00098D50                            ; loc_72428:
00098D50                            @gotfmpointer:
00098D50 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00098D54 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00098D58 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00098D5C 4EBA 0000                  		jsr	SetVoice(pc)
00098D60 2A4B                       		movea.l	a3,a5
00098D62 6000                       		bra.s	@nexttrack
00098D64                            ; ===========================================================================
00098D64                            ; loc_7243C:
00098D64                            @trackpsg:
00098D64 4EBA 0000                  		jsr	PSGNoteOff(pc)
00098D68 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00098D6C 0C03 00E0                  		cmpi.b	#$E0,d3			; Is this a noise channel:
00098D70 6700                       		beq.s	@gotpsgpointer		; Branch if yes
00098D72 0C03 00C0                  		cmpi.b	#$C0,d3			; Is this PSG 3?
00098D76 6700                       		beq.s	@gotpsgpointer		; Branch if yes
00098D78 E60B                       		lsr.b	#3,d3
00098D7A 41FA FE78                  		lea	SFX_BGMChannelRAM(pc),a0
00098D7E 2070 3000                  		movea.l	(a0,d3.w),a0
00098D82                            ; loc_7245A:
00098D82                            @gotpsgpointer:
00098D82 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00098D86 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00098D8A 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise channel?
00098D90 6600                       		bne.s	@nexttrack			; Branch if not
00098D92 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise type
00098D9A                            ; loc_72472:
00098D9A                            @nexttrack:
00098D9A DAFC 0030                  		adda.w	#TrackSz,a5
00098D9E 51CF FF72                  		dbf	d7,@trackloop
00098DA2                            
00098DA2 4E75                       		rts	
00098DA4                            ; End of function StopSFX
00098DA4                            
00098DA4                            
00098DA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098DA4                            
00098DA4                            ; Snd_FadeOut2: FadeOutSFX2: FadeOutSpecialSFX:
00098DA4                            StopSpecialSFX:
00098DA4 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00098DA8 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00098DAA 6A00                       		bpl.s	@fadedfm		; Branch if not
00098DAC 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00098DB0 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00098DB4 6600                       		bne.s	@fadedfm		; Branch if not
00098DB6 4EBA 0000                  		jsr	SendFMNoteOff(pc)
00098DBA 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00098DBE 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00098DC2 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00098DC6 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00098DC8 6A00                       		bpl.s	@fadedfm		; Branch if not
00098DCA 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00098DCE 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00098DD2 4EBA 0000                  		jsr	SetVoice(pc)
00098DD6                            ; loc_724AE:
00098DD6                            @fadedfm:
00098DD6 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00098DDA 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00098DDC 6A00                       		bpl.s	@fadedpsg		; Branch if not
00098DDE 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00098DE2 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00098DE6 6600                       		bne.s	@fadedpsg		; Return if not
00098DE8 4EBA 0000                  		jsr	SendPSGNoteOff(pc)
00098DEC 4BEE 01F0                  		lea	v_music_psg3_track(a6),a5
00098DF0 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00098DF4 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00098DF8 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00098DFA 6A00                       		bpl.s	@fadedpsg		; Return if not
00098DFC 0C2D 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a5)	; Is this a noise channel?
00098E02 6600                       		bne.s	@fadedpsg			; Return if not
00098E04 13ED 001F 00C0 0011        		move.b	TrackPSGNoise(a5),(psg_input).l ; Set noise type
00098E0C                            ; locret_724E4:
00098E0C                            @fadedpsg:
00098E0C 4E75                       		rts	
00098E0E                            ; End of function StopSpecialSFX
00098E0E                            
00098E0E                            ; ===========================================================================
00098E0E                            ; ---------------------------------------------------------------------------
00098E0E                            ; Fade out music
00098E0E                            ; ---------------------------------------------------------------------------
00098E0E                            ; Sound_E0:
00098E0E                            FadeOutMusic:
00098E0E 4EBA FEFA                  		jsr	StopSFX(pc)
00098E12 4EBA FF90                  		jsr	StopSpecialSFX(pc)
00098E16 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)			; Set fadeout delay to 3
00098E1C 1D7C 0028 0004             		move.b	#$28,v_fadeout_counter(a6)		; Set fadeout counter
00098E22 422E 0040                  		clr.b	v_music_dac_track+TrackPlaybackControl(a6)	; Stop DAC track
00098E26 422E 002A                  		clr.b	f_speedup(a6)				; Disable speed shoes tempo
00098E2A 4E75                       		rts	
00098E2C                            
00098E2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098E2C                            
00098E2C                            ; sub_72504:
00098E2C                            DoFadeOut:
00098E2C 102E 0006                  		move.b	v_fadeout_delay(a6),d0	; Has fadeout delay expired?
00098E30 6700                       		beq.s	@continuefade		; Branch if yes
00098E32 532E 0006                  		subq.b	#1,v_fadeout_delay(a6)
00098E36 4E75                       		rts	
00098E38                            ; ===========================================================================
00098E38                            ; loc_72510:
00098E38                            @continuefade:
00098E38 532E 0004                  		subq.b	#1,v_fadeout_counter(a6)	; Update fade counter
00098E3C 6700 0000                  		beq.w	StopAllSound			; Branch if fade is done
00098E40 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)		; Reset fade delay
00098E46 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00098E4A 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00098E4C                            ; loc_72524:
00098E4C                            @fmloop:
00098E4C 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00098E4E 6A00                       		bpl.s	@nextfm			; Branch if not
00098E50 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00098E54 6A00                       		bpl.s	@sendfmtl		; Branch if still positive
00098E56 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00098E5A 6000                       		bra.s	@nextfm
00098E5C                            ; ===========================================================================
00098E5C                            ; loc_72534:
00098E5C                            @sendfmtl:
00098E5C 4EBA 0000                  		jsr	SendVoiceTL(pc)
00098E60                            ; loc_72538:
00098E60                            @nextfm:
00098E60 DAFC 0030                  		adda.w	#TrackSz,a5
00098E64 51CF FFE6                  		dbf	d7,@fmloop
00098E68                            
00098E68 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00098E6A                            ; loc_72542:
00098E6A                            @psgloop:
00098E6A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00098E6C 6A00                       		bpl.s	@nextpsg		; branch if not
00098E6E 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00098E72 0C2D 0010 0009             		cmpi.b	#$10,TrackVolume(a5)	; Is it greater than $F?
00098E78 6500                       		blo.s	@sendpsgvol		; Branch if not
00098E7A 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00098E7E 6000                       		bra.s	@nextpsg
00098E80                            ; ===========================================================================
00098E80                            ; loc_72558:
00098E80                            @sendpsgvol:
00098E80 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Store new volume attenuation
00098E84 4EBA 0000                  		jsr	SetPSGVolume(pc)
00098E88                            ; loc_72560:
00098E88                            @nextpsg:
00098E88 DAFC 0030                  		adda.w	#TrackSz,a5
00098E8C 51CF FFDC                  		dbf	d7,@psgloop
00098E90                            
00098E90 4E75                       		rts	
00098E92                            ; End of function DoFadeOut
00098E92                            
00098E92                            
00098E92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098E92                            
00098E92                            ; sub_7256A:
00098E92                            FMSilenceAll:
00098E92 7602                       		moveq	#2,d3		; 3 FM channels for each YM2612 parts
00098E94 7028                       		moveq	#$28,d0		; FM key on/off register
00098E96                            ; loc_7256E:
00098E96                            @noteoffloop:
00098E96 1203                       		move.b	d3,d1
00098E98 4EBA 0000                  		jsr	WriteFMI(pc)
00098E9C 5801                       		addq.b	#4,d1		; Move to YM2612 part 1
00098E9E 4EBA 0000                  		jsr	WriteFMI(pc)
00098EA2 51CB FFF2                  		dbf	d3,@noteoffloop
00098EA6                            
00098EA6 7040                       		moveq	#$40,d0		; Set TL on FM channels...
00098EA8 727F                       		moveq	#$7F,d1		; ... to total attenuation...
00098EAA 7802                       		moveq	#2,d4		; ... for all 3 channels...
00098EAC                            ; loc_72584:
00098EAC                            @channelloop:
00098EAC 7603                       		moveq	#3,d3		; ... for all operators on each channel...
00098EAE                            ; loc_72586:
00098EAE                            @channeltlloop:
00098EAE 4EBA 0000                  		jsr	WriteFMI(pc)	; ... for part 0...
00098EB2 4EBA 0000                  		jsr	WriteFMII(pc)	; ... and part 1.
00098EB6 5840                       		addq.w	#4,d0		; Next TL operator
00098EB8 51CB FFF4                  		dbf	d3,@channeltlloop
00098EBC                            
00098EBC 0400 000F                  		subi.b	#$F,d0		; Move to TL operator 1 of next channel
00098EC0 51CC FFEA                  		dbf	d4,@channelloop
00098EC4                            
00098EC4 4E75                       		rts	
00098EC6                            ; End of function FMSilenceAll
00098EC6                            
00098EC6                            ; ===========================================================================
00098EC6                            ; ---------------------------------------------------------------------------
00098EC6                            ; Stop music
00098EC6                            ; ---------------------------------------------------------------------------
00098EC6                            ; Sound_E4: StopSoundAndMusic:
00098EC6                            StopAllSound:
00098EC6 702B                       		moveq	#$2B,d0		; Enable/disable DAC
00098EC8 123C 0080                  		move.b	#$80,d1		; Enable DAC
00098ECC 4EBA 0000                  		jsr	WriteFMI(pc)
00098ED0 7027                       		moveq	#$27,d0		; Timers, FM3/FM6 mode
00098ED2 7200                       		moveq	#0,d1		; FM3/FM6 normal mode, disable timers
00098ED4 4EBA 0000                  		jsr	WriteFMI(pc)
00098ED8 204E                       		movea.l	a6,a0
00098EDA                            		; DANGER! This should be clearing all variables and track data, but misses the last $10 bytes of v_spcsfx_psg3_track.
00098EDA                            		; Remove the '-$10' to fix this.
00098EDA 303C 00E7                  		move.w	#((v_spcsfx_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $390 bytes: all variables and most track data
00098EDE                            ; loc_725B6:
00098EDE                            @clearramloop:
00098EDE 4298                       		clr.l	(a0)+
00098EE0 51C8 FFFC                  		dbf	d0,@clearramloop
00098EE4                            
00098EE4 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00098EEA 4EBA FFA6                  		jsr	FMSilenceAll(pc)
00098EEE 6000 0000                  		bra.w	PSGSilenceAll
00098EF2                            
00098EF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098EF2                            
00098EF2                            ; sub_725CA:
00098EF2                            InitMusicPlayback:
00098EF2 204E                       		movea.l	a6,a0
00098EF4                            		; Save several values
00098EF4 1216                       		move.b	v_sndprio(a6),d1
00098EF6 142E 0027                  		move.b	f_1up_playing(a6),d2
00098EFA 162E 002A                  		move.b	f_speedup(a6),d3
00098EFE 182E 0026                  		move.b	v_fadein_counter(a6),d4
00098F02                            		; DANGER! Only v_soundqueue0 and v_soundqueue1 are backed up, once again breaking v_soundqueue2
00098F02 3A2E 000A                  		move.w	v_soundqueue0(a6),d5
00098F06 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $220 bytes: all variables and music track data
00098F0A                            ; loc_725E4:
00098F0A                            @clearramloop:
00098F0A 4298                       		clr.l	(a0)+
00098F0C 51C8 FFFC                  		dbf	d0,@clearramloop
00098F10                            
00098F10                            		; Restore the values saved above
00098F10 1C81                       		move.b	d1,v_sndprio(a6)
00098F12 1D42 0027                  		move.b	d2,f_1up_playing(a6)
00098F16 1D43 002A                  		move.b	d3,f_speedup(a6)
00098F1A 1D44 0026                  		move.b	d4,v_fadein_counter(a6)
00098F1E 3D45 000A                  		move.w	d5,v_soundqueue0(a6)
00098F22 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00098F28                            		; DANGER! This silences ALL channels, even the ones being used
00098F28                            		; by SFX, and not music! @sendfmnoteoff does this already, and
00098F28                            		; doesn't affect SFX channels, either.
00098F28                            		; This should be replaced with an 'rts'.
00098F28 4EBA FF68                  		jsr	FMSilenceAll(pc)
00098F2C 6000 0000                  		bra.w	PSGSilenceAll
00098F30                            		; DANGER! InitMusicPlayback, and Sound_PlayBGM for that matter,
00098F30                            		; don't do a very good job of setting up the music tracks.
00098F30                            		; Tracks that aren't defined in a music file's header don't have
00098F30                            		; their channels defined, meaning @sendfmnoteoff won't silence
00098F30                            		; hardware properly. In combination with removing the above
00098F30                            		; calls to FMSilenceAll/PSGSilenceAll, this will cause hanging
00098F30                            		; notes.
00098F30                            		; To fix this, I suggest using this code, instead of an 'rts':
00098F30                            		;lea	v_music_track_ram+TrackVoiceControl(a6),a1
00098F30                            		;lea	FMDACInitBytes(pc),a2
00098F30                            		;moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d1		; 7 DAC/FM tracks
00098F30                            		;bsr.s	@writeloop
00098F30                            		;lea	PSGInitBytes(pc),a2
00098F30                            		;moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d1	; 3 PSG tracks
00098F30                            
00098F30                            ;@writeloop:
00098F30                            		;move.b	(a2)+,(a1)		; Write track's channel byte
00098F30                            		;lea	TrackSz(a1),a1		; Next track
00098F30                            		;dbf	d1,@writeloop		; Loop for all DAC/FM/PSG tracks
00098F30                            
00098F30                            		;rts
00098F30                            	
00098F30                            ; End of function InitMusicPlayback
00098F30                            
00098F30                            
00098F30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098F30                            
00098F30                            ; sub_7260C:
00098F30                            TempoWait:
00098F30 1D6E 0002 0001             		move.b	v_main_tempo(a6),v_main_tempo_timeout(a6)	; Reset main tempo timeout
00098F36 41EE 004E                  		lea	v_music_track_ram+TrackDurationTimeout(a6),a0	; note timeout
00098F3A 7030                       		moveq	#TrackSz,d0
00098F3C 7209                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d1		; 1 DAC + 6 FM + 3 PSG tracks
00098F3E                            ; loc_7261A:
00098F3E                            @tempoloop:
00098F3E 5210                       		addq.b	#1,(a0)	; Delay note by 1 frame
00098F40 D0C0                       		adda.w	d0,a0	; Advance to next track
00098F42 51C9 FFFA                  		dbf	d1,@tempoloop
00098F46                            
00098F46 4E75                       		rts	
00098F48                            ; End of function TempoWait
00098F48                            
00098F48                            ; ===========================================================================
00098F48                            ; ---------------------------------------------------------------------------
00098F48                            ; Speed	up music
00098F48                            ; ---------------------------------------------------------------------------
00098F48                            ; Sound_E2:
00098F48                            SpeedUpMusic:
00098F48 4A2E 0027                  		tst.b	f_1up_playing(a6)
00098F4C 6600                       		bne.s	@speedup_1up
00098F4E 1D6E 0029 0002             		move.b	v_speeduptempo(a6),v_main_tempo(a6)
00098F54 1D6E 0029 0001             		move.b	v_speeduptempo(a6),v_main_tempo_timeout(a6)
00098F5A 1D7C 0080 002A             		move.b	#$80,f_speedup(a6)
00098F60 4E75                       		rts	
00098F62                            ; ===========================================================================
00098F62                            ; loc_7263E:
00098F62                            @speedup_1up:
00098F62 1D6E 03C9 03A2             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo(a6)
00098F68 1D6E 03C9 03A1             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00098F6E 1D7C 0080 03CA             		move.b	#$80,v_1up_ram_copy+f_speedup(a6)
00098F74 4E75                       		rts	
00098F76                            ; ===========================================================================
00098F76                            ; ---------------------------------------------------------------------------
00098F76                            ; Change music back to normal speed
00098F76                            ; ---------------------------------------------------------------------------
00098F76                            ; Sound_E3:
00098F76                            SlowDownMusic:
00098F76 4A2E 0027                  		tst.b	f_1up_playing(a6)
00098F7A 6600                       		bne.s	@slowdown_1up
00098F7C 1D6E 0028 0002             		move.b	v_tempo_mod(a6),v_main_tempo(a6)
00098F82 1D6E 0028 0001             		move.b	v_tempo_mod(a6),v_main_tempo_timeout(a6)
00098F88 422E 002A                  		clr.b	f_speedup(a6)
00098F8C 4E75                       		rts	
00098F8E                            ; ===========================================================================
00098F8E                            ; loc_7266A:
00098F8E                            @slowdown_1up:
00098F8E 1D6E 03C8 03A2             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo(a6)
00098F94 1D6E 03C8 03A1             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00098F9A 422E 03CA                  		clr.b	v_1up_ram_copy+f_speedup(a6)
00098F9E 4E75                       		rts	
00098FA0                            
00098FA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098FA0                            
00098FA0                            ; sub_7267C:
00098FA0                            DoFadeIn:
00098FA0 4A2E 0025                  		tst.b	v_fadein_delay(a6)	; Has fadein delay expired?
00098FA4 6700                       		beq.s	@continuefade		; Branch if yes
00098FA6 532E 0025                  		subq.b	#1,v_fadein_delay(a6)
00098FAA 4E75                       		rts	
00098FAC                            ; ===========================================================================
00098FAC                            ; loc_72688:
00098FAC                            @continuefade:
00098FAC 4A2E 0026                  		tst.b	v_fadein_counter(a6)	; Is fade done?
00098FB0 6700                       		beq.s	@fadedone		; Branch if yes
00098FB2 532E 0026                  		subq.b	#1,v_fadein_counter(a6)	; Update fade counter
00098FB6 1D7C 0002 0025             		move.b	#2,v_fadein_delay(a6)	; Reset fade delay
00098FBC 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00098FC0 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00098FC2                            ; loc_7269E:
00098FC2                            @fmloop:
00098FC2 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00098FC4 6A00                       		bpl.s	@nextfm			; Branch if not
00098FC6 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00098FCA 4EBA 0000                  		jsr	SendVoiceTL(pc)
00098FCE                            ; loc_726AA:
00098FCE                            @nextfm:
00098FCE DAFC 0030                  		adda.w	#TrackSz,a5
00098FD2 51CF FFEE                  		dbf	d7,@fmloop
00098FD6 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7		; 3 PSG tracks
00098FD8                            ; loc_726B4:
00098FD8                            @psgloop:
00098FD8 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00098FDA 6A00                       		bpl.s	@nextpsg		; Branch if not
00098FDC 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00098FE0 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get value
00098FE4 0C06 0010                  		cmpi.b	#$10,d6			; Is it is < $10?
00098FE8 6500                       		blo.s	@sendpsgvol		; Branch if yes
00098FEA 7C0F                       		moveq	#$F,d6			; Limit to $F (maximum attenuation)
00098FEC                            ; loc_726C8:
00098FEC                            @sendpsgvol:
00098FEC 4EBA 0000                  		jsr	SetPSGVolume(pc)
00098FF0                            ; loc_726CC:
00098FF0                            @nextpsg:
00098FF0 DAFC 0030                  		adda.w	#TrackSz,a5
00098FF4 51CF FFE2                  		dbf	d7,@psgloop
00098FF8 4E75                       		rts	
00098FFA                            ; ===========================================================================
00098FFA                            ; loc_726D6:
00098FFA                            @fadedone:
00098FFA 08AE 0002 0040             		bclr	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Clear 'SFX overriding' bit
00099000 422E 0024                  		clr.b	f_fadein_flag(a6)				; Stop fadein
00099004 4E75                       		rts	
00099006                            ; End of function DoFadeIn
00099006                            
00099006                            ; ===========================================================================
00099006                            ; loc_726E2:
00099006                            FMNoteOn:
00099006 0815 0001                  		btst	#1,(a5)		; Is track resting? (TrackPlaybackControl)
0009900A 6600                       		bne.s	@locret		; Return if so
0009900C 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00099010 6600                       		bne.s	@locret		; Return if so
00099012 7028                       		moveq	#$28,d0		; Note on/off register
00099014 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Get channel bits
00099018 0001 00F0                  		ori.b	#$F0,d1		; Note on on all operators
0009901C 6000 0000                  		bra.w	WriteFMI
00099020                            ; ===========================================================================
00099020                            ; locret_726FC:
00099020                            @locret:
00099020 4E75                       		rts	
00099022                            
00099022                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099022                            
00099022                            ; sub_726FE:
00099022                            FMNoteOff:
00099022 0815 0004                  		btst	#4,(a5)		; Is 'do not attack next note' set? (TrackPlaybackControl)
00099026 6600                       		bne.s	locret_72714	; Return if yes
00099028 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0009902C 6600                       		bne.s	locret_72714	; Return if yes
0009902E                            ; loc_7270A:
0009902E                            SendFMNoteOff:
0009902E 7028                       		moveq	#$28,d0		; Note on/off register
00099030 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Note off to this channel
00099034 6000 0000                  		bra.w	WriteFMI
00099038                            ; ===========================================================================
00099038                            
00099038                            locret_72714:
00099038 4E75                       		rts	
0009903A                            ; End of function FMNoteOff
0009903A                            
0009903A                            ; ===========================================================================
0009903A                            ; loc_72716:
0009903A                            WriteFMIorIIMain:
0009903A 0815 0002                  		btst	#2,(a5)		; Is track being overriden by sfx? (TrackPlaybackControl)
0009903E 6600                       		bne.s	@locret		; Return if yes
00099040 6000 0000                  		bra.w	WriteFMIorII
00099044                            ; ===========================================================================
00099044                            ; locret_72720:
00099044                            @locret:
00099044 4E75                       		rts	
00099046                            
00099046                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099046                            
00099046                            ; sub_72722:
00099046                            WriteFMIorII:
00099046 082D 0002 0001             		btst	#2,TrackVoiceControl(a5)	; Is this bound for part I or II?
0009904C 6600                       		bne.s	WriteFMIIPart			; Branch if for part II
0009904E D02D 0001                  		add.b	TrackVoiceControl(a5),d0	; Add in voice control bits
00099052                            ; End of function WriteFMIorII
00099052                            
00099052                            
00099052                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099052                            
00099052                            ; The reason I think this is an *early* SMPS 68k Type 1b
00099052                            ; is because this subroutine is the one from Type 1a:
00099052                            ; other Type 1b drivers have a newer, optimised version.
00099052                            ; The driver itself is Type 1b, with this odd exception.
00099052                            
00099052                            ; sub_7272E:
00099052                            WriteFMI:
00099052 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00099058 0802 0007                  		btst	#7,d2		; Is FM busy?
0009905C 66F4                       		bne.s	WriteFMI	; Loop if so
0009905E 13C0 00A0 4000             		move.b	d0,(ym2612_a0).l
00099064 4E71                       		nop	
00099066 4E71                       		nop	
00099068 4E71                       		nop	
0009906A                            ; loc_72746:
0009906A                            @waitloop:
0009906A 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00099070 0802 0007                  		btst	#7,d2		; Is FM busy?
00099074 66F4                       		bne.s	@waitloop	; Loop if so
00099076                            
00099076 13C1 00A0 4001             		move.b	d1,(ym2612_d0).l
0009907C 4E75                       		rts	
0009907E                            ; End of function WriteFMI
0009907E                            
0009907E                            ; ===========================================================================
0009907E                            ; loc_7275A:
0009907E                            WriteFMIIPart:
0009907E 142D 0001                  		move.b	TrackVoiceControl(a5),d2 ; Get voice control bits
00099082 0882 0002                  		bclr	#2,d2			; Clear chip toggle
00099086 D002                       		add.b	d2,d0			; Add in to destination register
00099088                            
00099088                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099088                            
00099088                            ; sub_72764:
00099088                            WriteFMII:
00099088 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
0009908E 0802 0007                  		btst	#7,d2		; Is FM busy?
00099092 66F4                       		bne.s	WriteFMII	; Loop if so
00099094 13C0 00A0 4002             		move.b	d0,(ym2612_a1).l
0009909A 4E71                       		nop	
0009909C 4E71                       		nop	
0009909E 4E71                       		nop	
000990A0                            ; loc_7277C:
000990A0                            @waitloop:
000990A0 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
000990A6 0802 0007                  		btst	#7,d2		; Is FM busy?
000990AA 66F4                       		bne.s	@waitloop	; Loop if so
000990AC                            
000990AC 13C1 00A0 4003             		move.b	d1,(ym2612_d1).l
000990B2 4E75                       		rts	
000990B4                            ; End of function WriteFMII
000990B4                            
000990B4                            ; ===========================================================================
000990B4                            ; ---------------------------------------------------------------------------
000990B4                            ; FM Note Values: b-0 to a#8
000990B4                            ; ---------------------------------------------------------------------------
000990B4                            ; word_72790: FM_Notes:
000990B4                            FMFrequencies:
000990B4 025E 0284 02AB 02D3 02FE+  	dc.w $025E,$0284,$02AB,$02D3,$02FE,$032D,$035C,$038F,$03C5,$03FF,$043C,$047C
000990CC 0A5E 0A84 0AAB 0AD3 0AFE+  	dc.w $0A5E,$0A84,$0AAB,$0AD3,$0AFE,$0B2D,$0B5C,$0B8F,$0BC5,$0BFF,$0C3C,$0C7C
000990E4 125E 1284 12AB 12D3 12FE+  	dc.w $125E,$1284,$12AB,$12D3,$12FE,$132D,$135C,$138F,$13C5,$13FF,$143C,$147C
000990FC 1A5E 1A84 1AAB 1AD3 1AFE+  	dc.w $1A5E,$1A84,$1AAB,$1AD3,$1AFE,$1B2D,$1B5C,$1B8F,$1BC5,$1BFF,$1C3C,$1C7C
00099114 225E 2284 22AB 22D3 22FE+  	dc.w $225E,$2284,$22AB,$22D3,$22FE,$232D,$235C,$238F,$23C5,$23FF,$243C,$247C
0009912C 2A5E 2A84 2AAB 2AD3 2AFE+  	dc.w $2A5E,$2A84,$2AAB,$2AD3,$2AFE,$2B2D,$2B5C,$2B8F,$2BC5,$2BFF,$2C3C,$2C7C
00099144 325E 3284 32AB 32D3 32FE+  	dc.w $325E,$3284,$32AB,$32D3,$32FE,$332D,$335C,$338F,$33C5,$33FF,$343C,$347C
0009915C 3A5E 3A84 3AAB 3AD3 3AFE+  	dc.w $3A5E,$3A84,$3AAB,$3AD3,$3AFE,$3B2D,$3B5C,$3B8F,$3BC5,$3BFF,$3C3C,$3C7C
00099174                            
00099174                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099174                            
00099174                            ; sub_72850:
00099174                            PSGUpdateTrack:
00099174 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Update note timeout
00099178 6600                       		bne.s	@notegoing
0009917A 0895 0004                  		bclr	#4,(a5)				; Clear 'do not attack note' bit (TrackPlaybackControl)
0009917E 4EBA 0000                  		jsr	PSGDoNext(pc)
00099182 4EBA 0000                  		jsr	PSGDoNoteOn(pc)
00099186 6000 0000                  		bra.w	PSGDoVolFX
0009918A                            ; ===========================================================================
0009918A                            ; loc_72866:
0009918A                            @notegoing:
0009918A 4EBA F4CA                  		jsr	NoteTimeoutUpdate(pc)
0009918E 4EBA 0000                  		jsr	PSGUpdateVolFX(pc)
00099192 4EBA F4EA                  		jsr	DoModulation(pc)
00099196 4EBA 0000                  		jsr	PSGUpdateFreq(pc)	; It would be better if this were a jmp and the rts was removed
0009919A 4E75                       		rts
0009919C                            ; End of function PSGUpdateTrack
0009919C                            
0009919C                            
0009919C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009919C                            
0009919C                            ; sub_72878:
0009919C                            PSGDoNext:
0009919C 0895 0001                  		bclr	#1,(a5)				; Clear 'track at rest' bit (TrackPlaybackControl)
000991A0 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; Get track data pointer
000991A4                            ; loc_72880:
000991A4                            @noteloop:
000991A4 7A00                       		moveq	#0,d5
000991A6 1A1C                       		move.b	(a4)+,d5	; Get byte from track
000991A8 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
000991AC 6500                       		blo.s	@gotnote	; Branch if not
000991AE 4EBA 0000                  		jsr	CoordFlag(pc)
000991B2 60F0                       		bra.s	@noteloop
000991B4                            ; ===========================================================================
000991B4                            ; loc_72890:
000991B4                            @gotnote:
000991B4 4A05                       		tst.b	d5		; Is it a note?
000991B6 6A00                       		bpl.s	@gotduration	; Branch if not
000991B8 4EBA 0000                  		jsr	PSGSetFreq(pc)
000991BC 1A1C                       		move.b	(a4)+,d5	; Get another byte
000991BE 4A05                       		tst.b	d5		; Is it a duration?
000991C0 6A00                       		bpl.s	@gotduration	; Branch if yes
000991C2 534C                       		subq.w	#1,a4		; Put byte back
000991C4 6000 F452                  		bra.w	FinishTrackUpdate
000991C8                            ; ===========================================================================
000991C8                            ; loc_728A4:
000991C8                            @gotduration:
000991C8 4EBA F42E                  		jsr	SetDuration(pc)
000991CC 6000 F44A                  		bra.w	FinishTrackUpdate
000991D0                            ; End of function PSGDoNext
000991D0                            
000991D0                            
000991D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000991D0                            
000991D0                            ; sub_728AC:
000991D0                            PSGSetFreq:
000991D0 0405 0081                  		subi.b	#$81,d5		; Convert to 0-based index
000991D4 6500                       		bcs.s	@restpsg	; If $80, put track at rest
000991D6 DA2D 0008                  		add.b	TrackTranspose(a5),d5 ; Add in channel transposition
000991DA 0245 007F                  		andi.w	#$7F,d5		; Clear high byte and sign bit
000991DE E34D                       		lsl.w	#1,d5
000991E0 41FA 0000                  		lea	PSGFrequencies(pc),a0
000991E4 3B70 5000 0010             		move.w	(a0,d5.w),TrackFreq(a5)	; Set new frequency
000991EA 6000 F42C                  		bra.w	FinishTrackUpdate
000991EE                            ; ===========================================================================
000991EE                            ; loc_728CA:
000991EE                            @restpsg:
000991EE 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000991F2 3B7C FFFF 0010             		move.w	#-1,TrackFreq(a5)	; Invalidate note frequency
000991F8 4EBA F41E                  		jsr	FinishTrackUpdate(pc)
000991FC 6000 0000                  		bra.w	PSGNoteOff
00099200                            ; End of function PSGSetFreq
00099200                            
00099200                            
00099200                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099200                            
00099200                            ; sub_728DC:
00099200                            PSGDoNoteOn:
00099200 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get note frequency
00099204 6B00                       		bmi.s	PSGSetRest		; If invalid, branch
00099206                            ; End of function PSGDoNoteOn
00099206                            
00099206                            
00099206                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099206                            
00099206                            ; sub_728E2:
00099206                            PSGUpdateFreq:
00099206 102D 001E                  		move.b	TrackDetune(a5),d0	; Get detune value
0009920A 4880                       		ext.w	d0
0009920C DC40                       		add.w	d0,d6		; Add to frequency
0009920E 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00099212 6600                       		bne.s	@locret		; Return if yes
00099214 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
00099218 6600                       		bne.s	@locret		; Return if yes
0009921A 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get channel bits
0009921E 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it a noise channel?
00099222 6600                       		bne.s	@notnoise	; Branch if not
00099224 103C 00C0                  		move.b	#$C0,d0		; Use PSG 3 channel bits
00099228                            ; loc_72904:
00099228                            @notnoise:
00099228 3206                       		move.w	d6,d1
0009922A 0201 000F                  		andi.b	#$F,d1		; Low nibble of frequency
0009922E 8001                       		or.b	d1,d0		; Latch tone data to channel
00099230 E84E                       		lsr.w	#4,d6		; Get upper 6 bits of frequency
00099232 0206 003F                  		andi.b	#$3F,d6		; Send to latched channel
00099236 13C0 00C0 0011             		move.b	d0,(psg_input).l
0009923C 13C6 00C0 0011             		move.b	d6,(psg_input).l
00099242                            ; locret_7291E:
00099242                            @locret:
00099242 4E75                       		rts	
00099244                            ; End of function PSGUpdateFreq
00099244                            
00099244                            ; ===========================================================================
00099244                            ; loc_72920:
00099244                            PSGSetRest:
00099244 08D5 0001                  		bset	#1,(a5)	; Set 'track at rest' bit (TrackPlaybackControl)
00099248 4E75                       		rts	
0009924A                            
0009924A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009924A                            
0009924A                            ; sub_72926:
0009924A                            PSGUpdateVolFX:
0009924A 4A2D 000B                  		tst.b	TrackVoiceIndex(a5)	; Test PSG tone
0009924E 6700 0000                  		beq.w	locret_7298A		; Return if it is zero
00099252                            ; loc_7292E:
00099252                            PSGDoVolFX:	; This can actually be made a bit more efficient, see the comments for more
00099252 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get volume
00099256 7000                       		moveq	#0,d0
00099258 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get PSG tone
0009925C 6700                       		beq.s	SetPSGVolume
0009925E 2079 0009 8210             		movea.l	(Go_PSGIndex).l,a0
00099264 5340                       		subq.w	#1,d0
00099266 E548                       		lsl.w	#2,d0
00099268 2070 0000                  		movea.l	(a0,d0.w),a0
0009926C 102D 000C                  		move.b	TrackVolEnvIndex(a5),d0	; Get volume envelope index		; move.b	TrackVolEnvIndex(a5),d0
00099270 1030 0000                  		move.b	(a0,d0.w),d0			; Volume envelope value			; addq.b	#1,TrackVolEnvIndex(a5)
00099274 522D 000C                  		addq.b	#1,TrackVolEnvIndex(a5)	; Increment volume envelope index	; move.b	(a0,d0.w),d0
00099278 0800 0007                  		btst	#7,d0				; Is volume envelope value negative?	; <-- makes this line redundant
0009927C 6700                       		beq.s	@gotflutter			; Branch if not				; but you gotta make this one a bpl
0009927E 0C00 0080                  		cmpi.b	#$80,d0				; Is it the terminator?			; Since this is the only check, you can take the optimisation a step further:
00099282 6700                       		beq.s	VolEnvHold			; If so, branch				; Change the previous beq (bpl) to a bmi and make it branch to VolEnvHold to make these last two lines redundant
00099284                            ; loc_72960:
00099284                            @gotflutter:
00099284 DC40                       		add.w	d0,d6		; Add volume envelope value to volume
00099286 0C06 0010                  		cmpi.b	#$10,d6		; Is volume $10 or higher?
0009928A 6500                       		blo.s	SetPSGVolume	; Branch if not
0009928C 7C0F                       		moveq	#$F,d6		; Limit to silence and fall through
0009928E                            ; End of function PSGUpdateVolFX
0009928E                            
0009928E                            
0009928E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009928E                            
0009928E                            ; sub_7296A:
0009928E                            SetPSGVolume:
0009928E 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
00099292 6600                       		bne.s	locret_7298A	; Return if so
00099294 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00099298 6600                       		bne.s	locret_7298A	; Return if so
0009929A 0815 0004                  		btst	#4,(a5)		; Is track set to not attack next note? (TrackPlaybackControl)
0009929E 6600                       		bne.s	PSGCheckNoteTimeout ; Branch if yes
000992A0                            ; loc_7297C:
000992A0                            PSGSendVolume:
000992A0 8C2D 0001                  		or.b	TrackVoiceControl(a5),d6 ; Add in track selector bits
000992A4 0606 0010                  		addi.b	#$10,d6			; Mark it as a volume command
000992A8 13C6 00C0 0011             		move.b	d6,(psg_input).l
000992AE                            
000992AE                            locret_7298A:
000992AE 4E75                       		rts	
000992B0                            ; ===========================================================================
000992B0                            ; loc_7298C: PSGCheckNoteFill:
000992B0                            PSGCheckNoteTimeout:
000992B0 4A2D 0013                  		tst.b	TrackNoteTimeoutMaster(a5)	; Is note timeout on?
000992B4 67EA                       		beq.s	PSGSendVolume			; Branch if not
000992B6 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)		; Has note timeout expired?
000992BA 66E4                       		bne.s	PSGSendVolume			; Branch if not
000992BC 4E75                       		rts	
000992BE                            ; End of function SetPSGVolume
000992BE                            
000992BE                            ; ===========================================================================
000992BE                            ; loc_7299A: FlutterDone:
000992BE                            VolEnvHold:
000992BE 532D 000C                  		subq.b	#1,TrackVolEnvIndex(a5)	; Decrement volume envelope index
000992C2 4E75                       		rts	
000992C4                            
000992C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000992C4                            
000992C4                            ; sub_729A0:
000992C4                            PSGNoteOff:
000992C4 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000992C8 6600                       		bne.s	locret_729B4	; Return if so
000992CA                            ; loc_729A6:
000992CA                            SendPSGNoteOff:
000992CA 102D 0001                  		move.b	TrackVoiceControl(a5),d0	; PSG channel to change
000992CE 0000 001F                  		ori.b	#$1F,d0				; Maximum volume attenuation
000992D2 13C0 00C0 0011             		move.b	d0,(psg_input).l
000992D8                            		; DANGER! If InitMusicPlayback doesn't silence all channels, there's the
000992D8                            		; risk of music accidentally playing noise because it can't detect if
000992D8                            		; the PSG4/noise channel needs muting on track initialisation.
000992D8                            		; S&K's driver fixes it by doing this:
000992D8 0C00 00DF                  		cmpi.b	#$DF,d0				; Are stopping PSG3?
000992DC 6600                       		bne.s	locret_729B4
000992DE 13FC 00FF 00C0 0011        		move.b	#$FF,(psg_input).l		; If so, stop noise channel while we're at it
000992E6                            
000992E6                            locret_729B4:
000992E6 4E75                       		rts	
000992E8                            ; End of function PSGNoteOff
000992E8                            
000992E8                            
000992E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000992E8                            
000992E8                            ; sub_729B6:
000992E8                            PSGSilenceAll:
000992E8 41F9 00C0 0011             		lea	(psg_input).l,a0
000992EE 10BC 009F                  		move.b	#$9F,(a0)	; Silence PSG 1
000992F2 10BC 00BF                  		move.b	#$BF,(a0)	; Silence PSG 2
000992F6 10BC 00DF                  		move.b	#$DF,(a0)	; Silence PSG 3
000992FA 10BC 00FF                  		move.b	#$FF,(a0)	; Silence noise channel
000992FE 4E75                       		rts	
00099300                            ; End of function PSGSilenceAll
00099300                            
00099300                            ; ===========================================================================
00099300                            ; word_729CE:
00099300                            PSGFrequencies:
00099300 0356 0326 02F9 02CE 02A5+  		dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A
00099310 021A 01FB 01DF 01C4 01AB+  		dc.w $21A, $1FB, $1DF, $1C4, $1AB, $193, $17D, $167
00099320 0153 0140 012E 011D 010D+  		dc.w $153, $140, $12E, $11D, $10D,  $FE,  $EF,  $E2
00099330 00D6 00C9 00BE 00B4 00A9+  		dc.w  $D6,  $C9,  $BE,  $B4,  $A9,  $A0,  $97,  $8F
00099340 0087 007F 0078 0071 006B+  		dc.w  $87,  $7F,  $78,  $71,  $6B,  $65,  $5F,  $5A
00099350 0055 0050 004B 0047 0043+  		dc.w  $55,  $50,  $4B,  $47,  $43,  $40,  $3C,  $39
00099360 0036 0033 0030 002D 002B+  		dc.w  $36,  $33,  $30,  $2D,  $2B,  $28,  $26,  $24
00099370 0022 0020 001F 001D 001B+  		dc.w  $22,  $20,  $1F,  $1D,  $1B,  $1A,  $18,  $17
00099380 0016 0015 0013 0012 0011+  		dc.w  $16,  $15,  $13,  $12,  $11,    0
0009938C                            
0009938C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009938C                            
0009938C                            ; sub_72A5A:
0009938C                            CoordFlag:
0009938C 0445 00E0                  		subi.w	#$E0,d5
00099390 E54D                       		lsl.w	#2,d5
00099392 4EFB 5000                  		jmp	coordflagLookup(pc,d5.w)
00099396                            ; End of function CoordFlag
00099396                            
00099396                            ; ===========================================================================
00099396                            ; loc_72A64:
00099396                            coordflagLookup:
00099396 6000 0000                  		bra.w	cfPanningAMSFMS		; $E0
0009939A                            ; ===========================================================================
0009939A 6000 0000                  		bra.w	cfDetune		; $E1
0009939E                            ; ===========================================================================
0009939E 6000 0000                  		bra.w	cfSetCommunication	; $E2
000993A2                            ; ===========================================================================
000993A2 6000 0000                  		bra.w	cfJumpReturn		; $E3
000993A6                            ; ===========================================================================
000993A6 6000 0000                  		bra.w	cfFadeInToPrevious	; $E4
000993AA                            ; ===========================================================================
000993AA 6000 0000                  		bra.w	cfSetTempoDivider	; $E5
000993AE                            ; ===========================================================================
000993AE 6000 0000                  		bra.w	cfChangeFMVolume	; $E6
000993B2                            ; ===========================================================================
000993B2 6000 0000                  		bra.w	cfHoldNote		; $E7
000993B6                            ; ===========================================================================
000993B6 6000 0000                  		bra.w	cfNoteTimeout		; $E8
000993BA                            ; ===========================================================================
000993BA 6000 0000                  		bra.w	cfChangeTransposition	; $E9
000993BE                            ; ===========================================================================
000993BE 6000 0000                  		bra.w	cfSetTempo		; $EA
000993C2                            ; ===========================================================================
000993C2 6000 0000                  		bra.w	cfSetTempoDividerAll	; $EB
000993C6                            ; ===========================================================================
000993C6 6000 0000                  		bra.w	cfChangePSGVolume	; $EC
000993CA                            ; ===========================================================================
000993CA 6000 0000                  		bra.w	cfClearPush		; $ED
000993CE                            ; ===========================================================================
000993CE 6000 0000                  		bra.w	cfStopSpecialFM4	; $EE
000993D2                            ; ===========================================================================
000993D2 6000 0000                  		bra.w	cfSetVoice		; $EF
000993D6                            ; ===========================================================================
000993D6 6000 0000                  		bra.w	cfModulation		; $F0
000993DA                            ; ===========================================================================
000993DA 6000 0000                  		bra.w	cfEnableModulation	; $F1
000993DE                            ; ===========================================================================
000993DE 6000 0000                  		bra.w	cfStopTrack		; $F2
000993E2                            ; ===========================================================================
000993E2 6000 0000                  		bra.w	cfSetPSGNoise		; $F3
000993E6                            ; ===========================================================================
000993E6 6000 0000                  		bra.w	cfDisableModulation	; $F4
000993EA                            ; ===========================================================================
000993EA 6000 0000                  		bra.w	cfSetPSGTone		; $F5
000993EE                            ; ===========================================================================
000993EE 6000 0000                  		bra.w	cfJumpTo		; $F6
000993F2                            ; ===========================================================================
000993F2 6000 0000                  		bra.w	cfRepeatAtPos		; $F7
000993F6                            ; ===========================================================================
000993F6 6000 0000                  		bra.w	cfJumpToGosub		; $F8
000993FA                            ; ===========================================================================
000993FA 6000 0000                  		bra.w	cfOpF9			; $F9
000993FE                            ; ===========================================================================
000993FE                            ; loc_72ACC:
000993FE                            cfPanningAMSFMS:
000993FE 121C                       		move.b	(a4)+,d1		; New AMS/FMS/panning value
00099400 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00099404 6B00                       		bmi.s	locret_72AEA		; Return if yes
00099406 102D 000A                  		move.b	TrackAMSFMSPan(a5),d0	; Get current AMS/FMS/panning
0009940A 0200 0037                  		andi.b	#$37,d0			; Retain bits 0-2, 3-4 if set
0009940E 8200                       		or.b	d0,d1			; Mask in new value
00099410 1B41 000A                  		move.b	d1,TrackAMSFMSPan(a5)	; Store value
00099414 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00099418 6000 FC20                  		bra.w	WriteFMIorIIMain
0009941C                            ; ===========================================================================
0009941C                            
0009941C                            locret_72AEA:
0009941C 4E75                       		rts	
0009941E                            ; ===========================================================================
0009941E                            ; loc_72AEC: cfAlterNotes:
0009941E                            cfDetune:
0009941E 1B5C 001E                  		move.b	(a4)+,TrackDetune(a5)	; Set detune value
00099422 4E75                       		rts	
00099424                            ; ===========================================================================
00099424                            ; loc_72AF2: cfUnknown1:
00099424                            cfSetCommunication:
00099424 1D5C 0007                  		move.b	(a4)+,v_communication_byte(a6)	; Set otherwise unused communication byte to parameter
00099428 4E75                       		rts	
0009942A                            ; ===========================================================================
0009942A                            ; loc_72AF8:
0009942A                            cfJumpReturn:
0009942A 7000                       		moveq	#0,d0
0009942C 102D 000D                  		move.b	TrackStackPointer(a5),d0 ; Track stack pointer
00099430 2875 0000                  		movea.l	(a5,d0.w),a4		; Set track return address
00099434 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)		; Set 'popped' value to zero
0009943C 544C                       		addq.w	#2,a4			; Skip jump target address from gosub flag
0009943E 5800                       		addq.b	#4,d0			; Actually 'pop' value
00099440 1B40 000D                  		move.b	d0,TrackStackPointer(a5) ; Set new stack pointer
00099444 4E75                       		rts	
00099446                            ; ===========================================================================
00099446                            ; loc_72B14:
00099446                            cfFadeInToPrevious:
00099446 204E                       		movea.l	a6,a0
00099448 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
0009944C 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; $220 bytes to restore: all variables and music track data
00099450                            ; loc_72B1E:
00099450                            @restoreramloop:
00099450 20D9                       		move.l	(a1)+,(a0)+
00099452 51C8 FFFC                  		dbf	d0,@restoreramloop
00099456                            
00099456 08EE 0002 0040             		bset	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Set 'SFX overriding' bit
0009945C 264D                       		movea.l	a5,a3
0009945E 1C3C 0028                  		move.b	#$28,d6
00099462 9C2E 0026                  		sub.b	v_fadein_counter(a6),d6			; If fade already in progress, this adjusts track volume accordingly
00099466 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00099468 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
0009946C                            ; loc_72B3A:
0009946C                            @fmloop:
0009946C 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
00099470 6700                       		beq.s	@nextfm		; Branch if not
00099472 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00099476 DD2D 0009                  		add.b	d6,TrackVolume(a5) ; Apply current volume fade-in
0009947A 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0009947E 6600                       		bne.s	@nextfm		; Branch if yes
00099480 7000                       		moveq	#0,d0
00099482 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get voice
00099486 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
0009948A 4EBA 0000                  		jsr	SetVoice(pc)
0009948E                            ; loc_72B5C:
0009948E                            @nextfm:
0009948E DAFC 0030                  		adda.w	#TrackSz,a5
00099492 51CF FFD8                  		dbf	d7,@fmloop
00099496                            
00099496 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00099498                            ; loc_72B66:
00099498                            @psgloop:
00099498 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
0009949C 6700                       		beq.s	@nextpsg	; Branch if not
0009949E 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
000994A2 4EBA FE20                  		jsr	PSGNoteOff(pc)
000994A6 DD2D 0009                  		add.b	d6,TrackVolume(a5)	; Apply current volume fade-in
000994AA                            ; loc_72B78:
000994AA                            @nextpsg:
000994AA DAFC 0030                  		adda.w	#TrackSz,a5
000994AE 51CF FFE8                  		dbf	d7,@psgloop
000994B2                            		
000994B2 2A4B                       		movea.l	a3,a5
000994B4 1D7C 0080 0024             		move.b	#$80,f_fadein_flag(a6)		; Trigger fade-in
000994BA 1D7C 0028 0026             		move.b	#$28,v_fadein_counter(a6)	; Fade-in delay
000994C0 422E 0027                  		clr.b	f_1up_playing(a6)
000994C4 33FC 0000 00A1 1100        		startZ80
000994CC 504F                       		addq.w	#8,sp		; Tamper return value so we don't return to caller
000994CE 4E75                       		rts	
000994D0                            ; ===========================================================================
000994D0                            ; loc_72B9E:
000994D0                            cfSetTempoDivider:
000994D0 1B5C 0002                  		move.b	(a4)+,TrackTempoDivider(a5)	; Set tempo divider on current track
000994D4 4E75                       		rts	
000994D6                            ; ===========================================================================
000994D6                            ; loc_72BA4: cfSetVolume:
000994D6                            cfChangeFMVolume:
000994D6 101C                       		move.b	(a4)+,d0		; Get parameter
000994D8 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Add to current volume
000994DC 6000 0000                  		bra.w	SendVoiceTL
000994E0                            ; ===========================================================================
000994E0                            ; loc_72BAE: cfPreventAttack:
000994E0                            cfHoldNote:
000994E0 08D5 0004                  		bset	#4,(a5)		; Set 'do not attack next note' bit (TrackPlaybackControl)
000994E4 4E75                       		rts	
000994E6                            ; ===========================================================================
000994E6                            ; loc_72BB4: cfNoteFill
000994E6                            cfNoteTimeout:
000994E6 1B54 0012                  		move.b	(a4),TrackNoteTimeout(a5)		; Note fill timeout
000994EA 1B5C 0013                  		move.b	(a4)+,TrackNoteTimeoutMaster(a5)	; Note fill master
000994EE 4E75                       		rts	
000994F0                            ; ===========================================================================
000994F0                            ; loc_72BBE: cfAddKey:
000994F0                            cfChangeTransposition:
000994F0 101C                       		move.b	(a4)+,d0		; Get parameter
000994F2 D12D 0008                  		add.b	d0,TrackTranspose(a5)	; Add to transpose value
000994F6 4E75                       		rts	
000994F8                            ; ===========================================================================
000994F8                            ; loc_72BC6:
000994F8                            cfSetTempo:
000994F8 1D54 0002                  		move.b	(a4),v_main_tempo(a6)		; Set main tempo
000994FC 1D5C 0001                  		move.b	(a4)+,v_main_tempo_timeout(a6)	; And reset timeout (!)
00099500 4E75                       		rts	
00099502                            ; ===========================================================================
00099502                            ; loc_72BD0: cfSetTempoMod:
00099502                            cfSetTempoDividerAll:
00099502 41EE 0040                  		lea	v_music_track_ram(a6),a0
00099506 101C                       		move.b	(a4)+,d0			; Get new tempo divider
00099508 7230                       		moveq	#TrackSz,d1
0009950A 7409                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d2	; 1 DAC + 6 FM + 3 PSG tracks
0009950C                            ; loc_72BDA:
0009950C                            @trackloop:
0009950C 1140 0002                  		move.b	d0,TrackTempoDivider(a0)	; Set track's tempo divider
00099510 D0C1                       		adda.w	d1,a0
00099512 51CA FFF8                  		dbf	d2,@trackloop
00099516                            
00099516 4E75                       		rts	
00099518                            ; ===========================================================================
00099518                            ; loc_72BE6: cfChangeVolume:
00099518                            cfChangePSGVolume:
00099518 101C                       		move.b	(a4)+,d0		; Get volume change
0009951A D12D 0009                  		add.b	d0,TrackVolume(a5)	; Apply it
0009951E 4E75                       		rts	
00099520                            ; ===========================================================================
00099520                            ; loc_72BEE:
00099520                            cfClearPush:
00099520 422E 002C                  		clr.b	f_push_playing(a6)	; Allow push sound to be played once more
00099524 4E75                       		rts	
00099526                            ; ===========================================================================
00099526                            ; loc_72BF4:
00099526                            cfStopSpecialFM4:
00099526 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
0009952A 0895 0004                  		bclr	#4,(a5)		; Clear 'do not attack next note' bit (TrackPlaybackControl)
0009952E 4EBA FAF2                  		jsr	FMNoteOff(pc)
00099532 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is SFX using FM4?
00099536 6B00                       		bmi.s	@locexit					; Branch if yes
00099538 264D                       		movea.l	a5,a3
0009953A 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
0009953E 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00099542 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00099546 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
0009954A 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
0009954E 4EBA 0000                  		jsr	SetVoice(pc)
00099552 2A4B                       		movea.l	a3,a5
00099554                            ; loc_72C22:
00099554                            @locexit:
00099554 504F                       		addq.w	#8,sp		; Tamper with return value so we don't return to caller
00099556 4E75                       		rts	
00099558                            ; ===========================================================================
00099558                            ; loc_72C26:
00099558                            cfSetVoice:
00099558 7000                       		moveq	#0,d0
0009955A 101C                       		move.b	(a4)+,d0		; Get new voice
0009955C 1B40 000B                  		move.b	d0,TrackVoiceIndex(a5)	; Store it
00099560 0815 0002                  		btst	#2,(a5)			; Is SFX overriding this track? (TrackPlaybackControl)
00099564 6600 0000                  		bne.w	locret_72CAA		; Return if yes
00099568 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Music voice pointer
0009956C 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a music track?
00099570 6700                       		beq.s	SetVoice		; If yes, branch
00099572 226D 0020                  		movea.l	TrackVoicePtr(a5),a1	; SFX track voice pointer
00099576 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a SFX track?
0009957A 6B00                       		bmi.s	SetVoice		; If yes, branch
0009957C 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1 ; Special SFX voice pointer
00099580                            
00099580                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099580                            
00099580                            ; sub_72C4E:
00099580                            SetVoice:
00099580 5340                       		subq.w	#1,d0
00099582 6B00                       		bmi.s	@havevoiceptr
00099584 323C 0019                  		move.w	#25,d1
00099588                            ; loc_72C56:
00099588                            @voicemultiply:
00099588 D2C1                       		adda.w	d1,a1
0009958A 51C8 FFFC                  		dbf	d0,@voicemultiply
0009958E                            ; loc_72C5C:
0009958E                            @havevoiceptr:
0009958E 1219                       		move.b	(a1)+,d1		; feedback/algorithm
00099590 1B41 001F                  		move.b	d1,TrackFeedbackAlgo(a5) ; Save it to track RAM
00099594 1801                       		move.b	d1,d4
00099596 103C 00B0                  		move.b	#$B0,d0			; Command to write feedback/algorithm
0009959A 4EBA FAAA                  		jsr	WriteFMIorII(pc)
0009959E 45FA 0000                  		lea	FMInstrumentOperatorTable(pc),a2
000995A2 7600                       		moveq	#(FMInstrumentOperatorTable_End-FMInstrumentOperatorTable)-1,d3		; Don't want to send TL yet
000995A4                            ; loc_72C72:
000995A4                            @sendvoiceloop:
000995A4 101A                       		move.b	(a2)+,d0
000995A6 1219                       		move.b	(a1)+,d1
000995A8 4EBA FA9C                  		jsr	WriteFMIorII(pc)
000995AC 51CB FFF6                  		dbf	d3,@sendvoiceloop
000995B0                            
000995B0 7A03                       		moveq	#3,d5
000995B2 0244 0007                  		andi.w	#7,d4			; Get algorithm
000995B6 183B 4000                  		move.b	FMSlotMask(pc,d4.w),d4	; Get slot mask for algorithm
000995BA 162D 0009                  		move.b	TrackVolume(a5),d3	; Track volume attenuation
000995BE                            ; loc_72C8C:
000995BE                            @sendtlloop:
000995BE 101A                       		move.b	(a2)+,d0
000995C0 1219                       		move.b	(a1)+,d1
000995C2 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
000995C4 6400                       		bcc.s	@sendtl		; Branch if not
000995C6 D203                       		add.b	d3,d1		; Include additional attenuation
000995C8                            ; loc_72C96:
000995C8                            @sendtl:
000995C8 4EBA FA7C                  		jsr	WriteFMIorII(pc)
000995CC 51CD FFF0                  		dbf	d5,@sendtlloop
000995D0                            		
000995D0 103C 00B4                  		move.b	#$B4,d0			; Register for AMS/FMS/Panning
000995D4 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Value to send
000995D8 4EBA FA6C                  		jsr	WriteFMIorII(pc) 	; (It would be better if this were a jmp)
000995DC                            
000995DC                            locret_72CAA:
000995DC 4E75                       		rts	
000995DE                            ; End of function SetVoice
000995DE                            
000995DE                            ; ===========================================================================
000995DE                            ; byte_72CAC:
000995DE 0808 0808 0A0E 0E0F        FMSlotMask:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
000995E6                            
000995E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000995E6                            
000995E6                            ; sub_72CB4:
000995E6                            SendVoiceTL:
000995E6 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000995EA 6600                       		bne.s	@locret		; Return if so
000995EC 7000                       		moveq	#0,d0
000995EE 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
000995F2 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
000995F6 4A2E 000E                  		tst.b	f_voice_selector(a6)
000995FA 6700                       		beq.s	@gotvoiceptr
000995FC                            		; DANGER! This uploads the wrong voice! It should have been a5 instead
000995FC                            		; of a6!
000995FC 226D 0020                  		movea.l	TrackVoicePtr(a5),a1
00099600 4A2E 000E                  		tst.b	f_voice_selector(a6)
00099604 6B00                       		bmi.s	@gotvoiceptr
00099606 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1
0009960A                            ; loc_72CD8:
0009960A                            @gotvoiceptr:
0009960A 5340                       		subq.w	#1,d0
0009960C 6B00                       		bmi.s	@gotvoice
0009960E 323C 0019                  		move.w	#25,d1
00099612                            ; loc_72CE0:
00099612                            @voicemultiply:
00099612 D2C1                       		adda.w	d1,a1
00099614 51C8 FFFC                  		dbf	d0,@voicemultiply
00099618                            ; loc_72CE6:
00099618                            @gotvoice:
00099618 D2FC 0015                  		adda.w	#21,a1				; Want TL
0009961C 45FA 0000                  		lea	FMInstrumentTLTable(pc),a2
00099620 102D 001F                  		move.b	TrackFeedbackAlgo(a5),d0	; Get feedback/algorithm
00099624 0240 0007                  		andi.w	#7,d0				; Want only algorithm
00099628 183B 00B4                  		move.b	FMSlotMask(pc,d0.w),d4		; Get slot mask
0009962C 162D 0009                  		move.b	TrackVolume(a5),d3		; Get track volume attenuation
00099630 6B00                       		bmi.s	@locret				; If negative, stop
00099632 7A00                       		moveq	#(FMInstrumentTLTable_End-FMInstrumentTLTable)-1,d5
00099634                            ; loc_72D02:
00099634                            @sendtlloop:
00099634 101A                       		move.b	(a2)+,d0
00099636 1219                       		move.b	(a1)+,d1
00099638 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
0009963A 6400                       		bcc.s	@senttl		; Branch if not
0009963C D203                       		add.b	d3,d1		; Include additional attenuation
0009963E 6500                       		bcs.s	@senttl		; Branch on overflow
00099640 4EBA FA04                  		jsr	WriteFMIorII(pc)
00099644                            ; loc_72D12:
00099644                            @senttl:
00099644 51CD FFEE                  		dbf	d5,@sendtlloop
00099648                            ; locret_72D16:
00099648                            @locret:
00099648 4E75                       		rts	
0009964A                            ; End of function SendVoiceTL
0009964A                            
0009964A                            ; ===========================================================================
0009964A                            ; byte_72D18:
0009964A                            FMInstrumentOperatorTable:
0009964A 30                         		dc.b  $30		; Detune/multiple operator 1
0009964B 38                         		dc.b  $38		; Detune/multiple operator 3
0009964C 34                         		dc.b  $34		; Detune/multiple operator 2
0009964D 3C                         		dc.b  $3C		; Detune/multiple operator 4
0009964E 50                         		dc.b  $50		; Rate scalling/attack rate operator 1
0009964F 58                         		dc.b  $58		; Rate scalling/attack rate operator 3
00099650 54                         		dc.b  $54		; Rate scalling/attack rate operator 2
00099651 5C                         		dc.b  $5C		; Rate scalling/attack rate operator 4
00099652 60                         		dc.b  $60		; Amplitude modulation/first decay rate operator 1
00099653 68                         		dc.b  $68		; Amplitude modulation/first decay rate operator 3
00099654 64                         		dc.b  $64		; Amplitude modulation/first decay rate operator 2
00099655 6C                         		dc.b  $6C		; Amplitude modulation/first decay rate operator 4
00099656 70                         		dc.b  $70		; Secondary decay rate operator 1
00099657 78                         		dc.b  $78		; Secondary decay rate operator 3
00099658 74                         		dc.b  $74		; Secondary decay rate operator 2
00099659 7C                         		dc.b  $7C		; Secondary decay rate operator 4
0009965A 80                         		dc.b  $80		; Secondary amplitude/release rate operator 1
0009965B 88                         		dc.b  $88		; Secondary amplitude/release rate operator 3
0009965C 84                         		dc.b  $84		; Secondary amplitude/release rate operator 2
0009965D 8C                         		dc.b  $8C		; Secondary amplitude/release rate operator 4
0009965E                            FMInstrumentOperatorTable_End
0009965E                            ; byte_72D2C:
0009965E                            FMInstrumentTLTable:
0009965E 40                         		dc.b  $40		; Total level operator 1
0009965F 48                         		dc.b  $48		; Total level operator 3
00099660 44                         		dc.b  $44		; Total level operator 2
00099661 4C                         		dc.b  $4C		; Total level operator 4
00099662                            FMInstrumentTLTable_End
00099662                            ; ===========================================================================
00099662                            ; loc_72D30:
00099662                            cfModulation:
00099662 08D5 0003                  		bset	#3,(a5)				; Turn on modulation (TrackPlaybackControl)
00099666 2B4C 0014                  		move.l	a4,TrackModulationPtr(a5)	; Save pointer to modulation data
0009966A 1B5C 0018                  		move.b	(a4)+,TrackModulationWait(a5)	; Modulation delay
0009966E 1B5C 0019                  		move.b	(a4)+,TrackModulationSpeed(a5)	; Modulation speed
00099672 1B5C 001A                  		move.b	(a4)+,TrackModulationDelta(a5)	; Modulation delta
00099676 101C                       		move.b	(a4)+,d0			; Modulation steps...
00099678 E208                       		lsr.b	#1,d0				; ... divided by 2...
0009967A 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; ... before being stored
0009967E 426D 001C                  		clr.w	TrackModulationVal(a5)		; Total accumulated modulation frequency change
00099682 4E75                       		rts	
00099684                            ; ===========================================================================
00099684                            ; loc_72D52:
00099684                            cfEnableModulation:
00099684 08D5 0003                  		bset	#3,(a5)		; Turn on modulation (TrackPlaybackControl)
00099688 4E75                       		rts	
0009968A                            ; ===========================================================================
0009968A                            ; loc_72D58:
0009968A                            cfStopTrack:
0009968A 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
0009968E 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00099692 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00099696 6B00                       		bmi.s	@stoppsg		; Branch if yes
00099698 4A2E 0008                  		tst.b	f_updating_dac(a6)	; Is this the DAC we are updating?
0009969C 6B00 0000                  		bmi.w	@locexit		; Exit if yes
000996A0 4EBA F980                  		jsr	FMNoteOff(pc)
000996A4 6000                       		bra.s	@stoppedchannel
000996A6                            ; ===========================================================================
000996A6                            ; loc_72D74:
000996A6                            @stoppsg:
000996A6 4EBA FC1C                  		jsr	PSGNoteOff(pc)
000996AA                            ; loc_72D78:
000996AA                            @stoppedchannel:
000996AA 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating SFX?
000996AE 6A00 0000                  		bpl.w	@locexit		; Exit if not
000996B2 4216                       		clr.b	v_sndprio(a6)		; Clear priority
000996B4 7000                       		moveq	#0,d0
000996B6 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get voice control bits
000996BA 6B00                       		bmi.s	@getpsgptr		; Branch if PSG
000996BC 41FA F536                  		lea	SFX_BGMChannelRAM(pc),a0
000996C0 264D                       		movea.l	a5,a3
000996C2 0C00 0004                  		cmpi.b	#4,d0			; Is this FM4?
000996C6 6600                       		bne.s	@getpointer		; Branch if not
000996C8 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
000996CC 6A00                       		bpl.s	@getpointer		; Branch if not
000996CE 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
000996D2 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get voice pointer
000996D6 6000                       		bra.s	@gotpointer
000996D8                            ; ===========================================================================
000996D8                            ; loc_72DA8:
000996D8                            @getpointer:
000996D8 5500                       		subq.b	#2,d0		; SFX can only use FM3 and up
000996DA E508                       		lsl.b	#2,d0
000996DC 2A70 0000                  		movea.l	(a0,d0.w),a5
000996E0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000996E2 6A00                       		bpl.s	@novoiceupd		; Branch if not
000996E4 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get voice pointer
000996E8                            ; loc_72DB8:
000996E8                            @gotpointer:
000996E8 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX overriding' bit (TrackPlaybackControl)
000996EC 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000996F0 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
000996F4 4EBA FE8A                  		jsr	SetVoice(pc)
000996F8                            ; loc_72DC8:
000996F8                            @novoiceupd:
000996F8 2A4B                       		movea.l	a3,a5
000996FA 6000                       		bra.s	@locexit
000996FC                            ; ===========================================================================
000996FC                            ; loc_72DCC:
000996FC                            @getpsgptr:
000996FC 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00099700 4A10                       		tst.b	(a0)		; Is track playing? (TrackPlaybackControl)
00099702 6A00                       		bpl.s	@getchannelptr	; Branch if not
00099704 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it the noise channel?
00099708 6700                       		beq.s	@gotchannelptr	; Branch if yes
0009970A 0C00 00C0                  		cmpi.b	#$C0,d0		; Is it PSG 3?
0009970E 6700                       		beq.s	@gotchannelptr	; Branch if yes
00099710                            ; loc_72DE0:
00099710                            @getchannelptr:
00099710 41FA F4E2                  		lea	SFX_BGMChannelRAM(pc),a0
00099714 E608                       		lsr.b	#3,d0
00099716 2070 0000                  		movea.l	(a0,d0.w),a0
0009971A                            ; loc_72DEA:
0009971A                            @gotchannelptr:
0009971A 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX overriding' bit (TrackPlaybackControl)
0009971E 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00099722 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise pointer?
00099728 6600                       		bne.s	@locexit			; Branch if not
0009972A 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise tone
00099732                            ; loc_72E02:
00099732                            @locexit:
00099732 504F                       		addq.w	#8,sp		; Tamper with return value so we don't go back to caller
00099734 4E75                       		rts	
00099736                            ; ===========================================================================
00099736                            ; loc_72E06:
00099736                            cfSetPSGNoise:
00099736 1B7C 00E0 0001             		move.b	#$E0,TrackVoiceControl(a5)	; Turn channel into noise channel
0009973C 1B5C 001F                  		move.b	(a4)+,TrackPSGNoise(a5)	; Save noise tone
00099740 0815 0002                  		btst	#2,(a5)				; Is track being overridden? (TrackPlaybackControl)
00099744 6600                       		bne.s	@locret				; Return if yes
00099746 13EC FFFF 00C0 0011        		move.b	-1(a4),(psg_input).l		; Set tone
0009974E                            ; locret_72E1E:
0009974E                            @locret:
0009974E 4E75                       		rts	
00099750                            ; ===========================================================================
00099750                            ; loc_72E20:
00099750                            cfDisableModulation:
00099750 0895 0003                  		bclr	#3,(a5)		; Disable modulation (TrackPlaybackControl)
00099754 4E75                       		rts	
00099756                            ; ===========================================================================
00099756                            ; loc_72E26:
00099756                            cfSetPSGTone:
00099756 1B5C 000B                  		move.b	(a4)+,TrackVoiceIndex(a5)	; Set current PSG tone
0009975A 4E75                       		rts	
0009975C                            ; ===========================================================================
0009975C                            ; loc_72E2C:
0009975C                            cfJumpTo:
0009975C 101C                       		move.b	(a4)+,d0	; High byte of offset
0009975E E148                       		lsl.w	#8,d0		; Shift it into place
00099760 101C                       		move.b	(a4)+,d0	; Low byte of offset
00099762 D8C0                       		adda.w	d0,a4		; Add to current position
00099764 534C                       		subq.w	#1,a4		; Put back one byte
00099766 4E75                       		rts	
00099768                            ; ===========================================================================
00099768                            ; loc_72E38:
00099768                            cfRepeatAtPos:
00099768 7000                       		moveq	#0,d0
0009976A 101C                       		move.b	(a4)+,d0			; Loop index
0009976C 121C                       		move.b	(a4)+,d1			; Repeat count
0009976E 4A35 0024                  		tst.b	TrackLoopCounters(a5,d0.w)	; Has this loop already started?
00099772 6600                       		bne.s	@loopexists			; Branch if yes
00099774 1B81 0024                  		move.b	d1,TrackLoopCounters(a5,d0.w)	; Initialize repeat count
00099778                            ; loc_72E48:
00099778                            @loopexists:
00099778 5335 0024                  		subq.b	#1,TrackLoopCounters(a5,d0.w)	; Decrease loop's repeat count
0009977C 66DE                       		bne.s	cfJumpTo			; If nonzero, branch to target
0009977E 544C                       		addq.w	#2,a4				; Skip target address
00099780 4E75                       		rts	
00099782                            ; ===========================================================================
00099782                            ; loc_72E52:
00099782                            cfJumpToGosub:
00099782 7000                       		moveq	#0,d0
00099784 102D 000D                  		move.b	TrackStackPointer(a5),d0	; Current stack pointer
00099788 5900                       		subq.b	#4,d0				; Add space for another target
0009978A 2B8C 0000                  		move.l	a4,(a5,d0.w)			; Put in current address (*before* target for jump!)
0009978E 1B40 000D                  		move.b	d0,TrackStackPointer(a5)	; Store new stack pointer
00099792 60C8                       		bra.s	cfJumpTo
00099794                            ; ===========================================================================
00099794                            ; loc_72E64:
00099794                            cfOpF9:
00099794 103C 0088                  		move.b	#$88,d0		; D1L/RR of Operator 3
00099798 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
0009979C 4EBA F8B4                  		jsr	WriteFMI(pc)
000997A0 103C 008C                  		move.b	#$8C,d0		; D1L/RR of Operator 4
000997A4 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
000997A8 6000 F8A8                  		bra.w	WriteFMI
000997AC                            ; ===========================================================================
000997AC                            
000997AC                            Kos_Z80:
000997AC                            		incbin	"sound\z80.bin", 0, $15
000997C1 00                         		dc.b ((SegaPCM&$FF8000)/$8000)&1						; Least bit of bank ID (bit 15 of address)
000997C2                            		incbin	"sound\z80.bin", $16, 6
000997C8 00                         		dc.b ((SegaPCM&$FF8000)/$8000)>>1						; ... the remaining bits of bank ID (bits 16-23)
000997C9                            		incbin	"sound\z80.bin", $1D, $93
0009985C 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$7F00)>>8)|$80				; Pointer to Sega PCM, relative to start of ROM bank (i.e., little_endian($8000 + SegaPCM&$7FFF)
0009985E                            		incbin	"sound\z80.bin", $B2, 1
0009985F 0000                       		dc.w (((SegaPCM_End-SegaPCM)&$FF)<<8)+(((SegaPCM_End-SegaPCM)&$FF00)>>8)	; ... the size of the Sega PCM (little endian)
00099861                            		incbin	"sound\z80.bin", $B5, $16AB
0009AF02                            		even
0009AF02                            
0009AF02                            Music81:	incbin	"sound/music/Mus81 - GHZ.bin"
0009C226 00                         		even
0009C226                            Music82:	incbin	"sound/music/Mus82 - LZ.bin"
0009DAAE                            		even
0009DAAE                            Music83:	incbin	"sound/music/Mus83 - MZ.bin"
000A542E 00                         		even
000A542E                            Music84:	incbin	"sound/music/Mus84 - SLZ.bin"
000A6C42 00                         		even
000A6C42                            Music85:	incbin	"sound/music/Mus85 - SYZ.bin"
000A79E8                            		even
000A79E8                            Music86:	incbin	"sound/music/Mus86 - SBZ.bin"
000A8DA0                            		even
000A8DA0                            Music87:	incbin	"sound/music/Mus87 - Invincibility.bin"
000A9698 00                         		even
000A9698                            Music88:	include	"sound/music/Mus88 - Extra Life.asm"
000A9698                            extralifejingle_Header:
000A9698                            	smpsHeaderStartSong 1
000A969A 0703                       	smpsHeaderChan      $07, $03
000A969C 0100                       	smpsHeaderTempo     $01, $00
000A969E                            
000A96A2 0000 0000                  	smpsHeaderFM        extralifejingle_FM1,	$00, $00
000A96A6 0000 0000                  	smpsHeaderFM        extralifejingle_FM2,	$00, $00
000A96AA 0000 0000                  	smpsHeaderFM        extralifejingle_FM3,	$00, $00
000A96AE 0000 0000                  	smpsHeaderFM        extralifejingle_FM4,	$00, $00
000A96B2 0000 0000                  	smpsHeaderFM        extralifejingle_FM5,	$00, $00
000A96B6 0000 0000                  	smpsHeaderFM        extralifejingle_FM6,	$00, $00
000A96CC                            
000A96CC                            ; DAC Data
000A96CC                            extralifejingle_DAC:
000A96CC 807F 55                    	dc.b	nRst, $7F, $55
000A96CF E4                         	smpsFade
000A96D0                            ; PSG1 Data
000A96D0                            extralifejingle_PSG1:
000A96D0                            ; PSG2 Data
000A96D0                            extralifejingle_PSG2:
000A96D0                            ; PSG3 Data
000A96D0                            extralifejingle_PSG3:
000A96D0 F2                         	smpsStop
000A96D1                            
000A96D1                            ; FM1 Data
000A96D1                            extralifejingle_FM1:
000A96D1 EF00                       	smpsSetvoice        $00
000A96D3 E616                       	smpsAlterVol        $16
000A96D5 E0C0                       	smpsPan             panCenter, $00
000A96D7 A61A BC13 BB12 B913 B60D+  	dc.b	nCs3, $1A, nB4, $13, nBb4, $12, nAb4, $13, nF4, $0D, nG3, $2C
000A96E3 AC06 800C                  	dc.b	nG3, $06, nRst, $0C
000A96E7 F2                         	smpsStop
000A96E8                            
000A96E8                            ; FM2 Data
000A96E8                            extralifejingle_FM2:
000A96E8 EF01                       	smpsSetvoice        $01
000A96EA E616                       	smpsAlterVol        $16
000A96EC E0C0                       	smpsPan             panCenter, $00
000A96EE B61A AD13 AB12 AA13 A60D+  	dc.b	nF4, $1A, nAb3, $13, nFs3, $12, nF3, $13, nCs3, $0D, nA2, $2C
000A96FA A206 800C                  	dc.b	nA2, $06, nRst, $0C
000A96FE F2                         	smpsStop
000A96FF                            
000A96FF                            ; FM3 Data
000A96FF                            extralifejingle_FM3:
000A96FF EF01                       	smpsSetvoice        $01
000A9701 E616                       	smpsAlterVol        $16
000A9703 E0C0                       	smpsPan             panCenter, $00
000A9705 AD0D BC13 B9B7 B60C B20D+  	dc.b	nAb3, $0D, nB4, $13, nAb4, nFs4, nF4, $0C, nCs4, $0D, nC4, $2C
000A9711 B106 800C                  	dc.b	nC4, $06, nRst, $0C
000A9715 F2                         	smpsStop
000A9716                            
000A9716                            ; FM4 Data
000A9716                            extralifejingle_FM4:
000A9716 EF02                       	smpsSetvoice        $02
000A9718 E0C0                       	smpsPan             panCenter, $00
000A971A 8001                       	dc.b	nRst, $01
000A971C E616                       	smpsAlterVol        $16
000A971E BE0C B913 ABAA A60C A20D+  	dc.b	nCs5, $0C, nAb4, $13, nFs3, nF3, nCs3, $0C, nA2, $0D, nE5, $2C
000A972A C106 800C                  	dc.b	nE5, $06, nRst, $0C
000A972E F2                         	smpsStop
000A972F                            
000A972F                            ; FM5 Data
000A972F                            extralifejingle_FM5:
000A972F EF03                       	smpsSetvoice        $03
000A9731 E602                       	smpsAlterVol        $02
000A9733 E0C0                       	smpsPan             panCenter, $00
000A9735 8001                       	dc.b	nRst, $01
000A9737 EF05                       	smpsSetvoice        $05
000A9739 E60A                       	smpsAlterVol        $0A
000A973B E780 0CC8 06B2 07B9 06C7+  	dc.b	smpsNoAttack, nRst, $0C, nB5, $06, nCs4, $07, nAb4, $06, nBb5, nCs4, $07
000A9747 B706 C5C8 B607 C206 B2BE+  	dc.b	nFs4, $06, nAb5, nB5, nF4, $07, nF5, $06, nCs4, nCs5, $07, nA5
000A9753 06BD C1C4 07BD 06C1 C407+  	dc.b	$06, nC5, nE5, nG5, $07, nC5, $06, nE5, nG5, $07, nC5, $06
000A975F C1C4 80                    	dc.b	nE5, nG5, nRst
000A9762 F2                         	smpsStop
000A9763                            
000A9763                            ; FM6 Data
000A9763                            extralifejingle_FM6:
000A9763 EF04                       	smpsSetvoice        $04
000A9765 E607                       	smpsAlterVol        $07
000A9767 E0C0                       	smpsPan             panCenter, $00
000A9769 8001                       	dc.b	nRst, $01
000A976B EF06                       	smpsSetvoice        $06
000A976D E6F9                       	smpsAlterVol        $F9
000A976F A658 A72C A70C 80          	dc.b	nCs3, $58, nD3, $2C, nD3, $0C, nRst
000A9776 F2                         	smpsStop
000A9777                            
000A9777                            extralifejingle_Voices:
000A9777                            ;	Voice $00
000A9777                            ;	$3A
000A9777                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000A9777                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000A9777                            	smpsVcAlgorithm     $02
000A9777                            	smpsVcFeedback      $07
000A9777                            	smpsVcUnusedBits    $00
000A9777                            	smpsVcDetune        $03, $07, $07, $03
000A9777                            	smpsVcCoarseFreq    $01, $04, $03, $04
000A9777                            	smpsVcRateScale     $00, $00, $00, $00
000A9777                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A9777                            	smpsVcAmpMod        $00, $00, $00, $00
000A9777                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000A9777                            	smpsVcDecayRate2    $00, $00, $00, $00
000A9777                            	smpsVcDecayLevel    $00, $00, $00, $00
000A9777                            	smpsVcReleaseRate   $05, $03, $03, $03
000A9790                            
000A9790                            ;	Voice $01
000A9790                            ;	$3A
000A9790                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000A9790                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000A9790                            	smpsVcAlgorithm     $02
000A9790                            	smpsVcFeedback      $07
000A9790                            	smpsVcUnusedBits    $00
000A9790                            	smpsVcDetune        $03, $07, $07, $03
000A9790                            	smpsVcCoarseFreq    $01, $04, $03, $04
000A9790                            	smpsVcRateScale     $00, $00, $00, $00
000A9790                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A9790                            	smpsVcAmpMod        $00, $00, $00, $00
000A9790                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000A9790                            	smpsVcDecayRate2    $00, $00, $00, $00
000A9790                            	smpsVcDecayLevel    $00, $00, $00, $00
000A9790                            	smpsVcReleaseRate   $05, $03, $03, $03
000A97A9                            
000A97A9                            ;	Voice $02
000A97A9                            ;	$3A
000A97A9                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000A97A9                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000A97A9                            	smpsVcAlgorithm     $02
000A97A9                            	smpsVcFeedback      $07
000A97A9                            	smpsVcUnusedBits    $00
000A97A9                            	smpsVcDetune        $03, $07, $07, $03
000A97A9                            	smpsVcCoarseFreq    $01, $04, $03, $04
000A97A9                            	smpsVcRateScale     $00, $00, $00, $00
000A97A9                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A97A9                            	smpsVcAmpMod        $00, $00, $00, $00
000A97A9                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000A97A9                            	smpsVcDecayRate2    $00, $00, $00, $00
000A97A9                            	smpsVcDecayLevel    $00, $00, $00, $00
000A97A9                            	smpsVcReleaseRate   $05, $03, $03, $03
000A97C2                            
000A97C2                            ;	Voice $03
000A97C2                            ;	$00
000A97C2                            ;	$01, $0E, $00, $00, 	$1E, $1E, $1E, $1D, 	$1A, $1C, $10, $10
000A97C2                            ;	$00, $00, $00, $00, 	$FD, $FE, $F8, $F8, 	$1A, $25, $05, $00
000A97C2                            	smpsVcAlgorithm     $00
000A97C2                            	smpsVcFeedback      $00
000A97C2                            	smpsVcUnusedBits    $00
000A97C2                            	smpsVcDetune        $00, $00, $00, $00
000A97C2                            	smpsVcCoarseFreq    $00, $00, $0E, $01
000A97C2                            	smpsVcRateScale     $00, $00, $00, $00
000A97C2                            	smpsVcAttackRate    $1D, $1E, $1E, $1E
000A97C2                            	smpsVcAmpMod        $00, $00, $00, $00
000A97C2                            	smpsVcDecayRate1    $10, $10, $1C, $1A
000A97C2                            	smpsVcDecayRate2    $00, $00, $00, $00
000A97C2                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A97C2                            	smpsVcReleaseRate   $08, $08, $0E, $0D
000A97DB                            
000A97DB                            ;	Voice $04
000A97DB                            ;	$03
000A97DB                            ;	$66, $40, $40, $31, 	$1F, $1F, $1F, $1C, 	$0E, $05, $02, $01
000A97DB                            ;	$01, $00, $04, $06, 	$AA, $6A, $16, $18, 	$2A, $1A, $20, $00
000A97DB                            	smpsVcAlgorithm     $03
000A97DB                            	smpsVcFeedback      $00
000A97DB                            	smpsVcUnusedBits    $00
000A97DB                            	smpsVcDetune        $03, $04, $04, $06
000A97DB                            	smpsVcCoarseFreq    $01, $00, $00, $06
000A97DB                            	smpsVcRateScale     $00, $00, $00, $00
000A97DB                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
000A97DB                            	smpsVcAmpMod        $00, $00, $00, $00
000A97DB                            	smpsVcDecayRate1    $01, $02, $05, $0E
000A97DB                            	smpsVcDecayRate2    $06, $04, $00, $01
000A97DB                            	smpsVcDecayLevel    $01, $01, $06, $0A
000A97DB                            	smpsVcReleaseRate   $08, $06, $0A, $0A
000A97F4                            
000A97F4                            ;	Voice $05
000A97F4                            ;	$34
000A97F4                            ;	$33, $7E, $01, $74, 	$9B, $1F, $5F, $1F, 	$14, $07, $07, $08
000A97F4                            ;	$00, $00, $00, $00, 	$F6, $E4, $F7, $F7, 	$19, $71, $00, $00
000A97F4                            	smpsVcAlgorithm     $04
000A97F4                            	smpsVcFeedback      $06
000A97F4                            	smpsVcUnusedBits    $00
000A97F4                            	smpsVcDetune        $07, $00, $07, $03
000A97F4                            	smpsVcCoarseFreq    $04, $01, $0E, $03
000A97F4                            	smpsVcRateScale     $00, $01, $00, $02
000A97F4                            	smpsVcAttackRate    $1F, $1F, $1F, $1B
000A97F4                            	smpsVcAmpMod        $00, $00, $00, $00
000A97F4                            	smpsVcDecayRate1    $08, $07, $07, $14
000A97F4                            	smpsVcDecayRate2    $00, $00, $00, $00
000A97F4                            	smpsVcDecayLevel    $0F, $0F, $0E, $0F
000A97F4                            	smpsVcReleaseRate   $07, $07, $04, $06
000A980D                            
000A980D                            ;	Voice $06
000A980D                            ;	$30
000A980D                            ;	$01, $00, $00, $01, 	$9F, $1F, $1F, $5C, 	$0F, $0D, $10, $14
000A980D                            ;	$08, $18, $05, $08, 	$6F, $00, $0F, $18, 	$15, $1F, $19, $00
000A980D                            	smpsVcAlgorithm     $00
000A980D                            	smpsVcFeedback      $06
000A980D                            	smpsVcUnusedBits    $00
000A980D                            	smpsVcDetune        $00, $00, $00, $00
000A980D                            	smpsVcCoarseFreq    $01, $00, $00, $01
000A980D                            	smpsVcRateScale     $01, $00, $00, $02
000A980D                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
000A980D                            	smpsVcAmpMod        $00, $00, $00, $00
000A980D                            	smpsVcDecayRate1    $14, $10, $0D, $0F
000A980D                            	smpsVcDecayRate2    $08, $05, $18, $08
000A980D                            	smpsVcDecayLevel    $01, $00, $00, $06
000A980D                            	smpsVcReleaseRate   $08, $0F, $00, $0F
000A9826                            
000A9826                            
000A9826                            		even
000A9826                            Music89:	incbin	"sound/music/Mus89 - Special Stage.bin"
000AA07E 00                         		even
000AA07E                            Music8A:	incbin	"sound/music/Mus8A - Title Screen.bin"
000AA59E                            		even
000AA59E                            Music8B:	incbin	"sound/music/Mus8B - Ending.bin"
000AA860 00                         		even
000AA860                            Music8C:	incbin	"sound/music/Mus8C - Boss.bin"
000AB6B8                            		even
000AB6B8                            Music8D:	incbin	"sound/music/Mus8D - FZ.bin"
000AB904 00                         		even
000AB904                            Music8E:	incbin	"sound/music/Mus8E - Sonic Got Through.bin"
000ABC3A 00                         		even
000ABC3A                            Music8F:	incbin	"sound/music/Mus8F - Game Over.bin"
000ABDE6 00                         		even
000ABDE6                            Music90:	incbin	"sound/music/Mus90 - Continue Screen.bin"
000ABFF4 00                         		even
000ABFF4                            Music91:	incbin	"sound/music/Mus91 - Credits.bin"
000AC2D8 00                         		even
000AC2D8                            Music92:	incbin	"sound/music/Mus92 - Drowning.bin"
000ACA08 00                         		even
000ACA08                            Music93:	incbin	"sound/music/Mus93 - Get Emerald.bin"
000ACAD6                            		even
000ACAD6                            Music94:	incbin	"sound/music/Mus94 - Final Boss Pinch.bin"
000ACF44 00                         		even
000ACF44                            Music95:		incbin	"sound/music/Mus95 - Seaside Front.bin"
000ADA3A                            		even
000ADA3A                            Music96:		incbin	"sound/music/Mus96 - Big Water.bin"
000AE590                            		even
000AE590                            Music97:		incbin	"sound/music/Mus97 - Granada Game Over.bin"
000AF896 00                         		even
000AF896                            Music98:		include	"sound/music/Mus98 - Options Theme.asm"
000AF896                            PasswordEntry_Header:
000AF896                            	smpsHeaderStartSong 3
000AF898 0603                       	smpsHeaderChan      $06, $03
000AF89A 0105                       	smpsHeaderTempo     $01, $05
000AF89C                            
000AF8A0 0000 0013                  	smpsHeaderFM        PasswordEntry_FM1,	$00, $13
000AF8A4 0000 F40B                  	smpsHeaderFM        PasswordEntry_FM2,	$F4, $0B
000AF8A8 0000 000F                  	smpsHeaderFM        PasswordEntry_FM3,	$00, $0F
000AF8AC 0000 000F                  	smpsHeaderFM        PasswordEntry_FM4,	$00, $0F
000AF8B0 0000 001D                  	smpsHeaderFM        PasswordEntry_FM5,	$00, $1D
000AF8C6                            
000AF8C6                            ; FM1 Data
000AF8C6                            PasswordEntry_FM1:
000AF8C6 EF00                       	smpsSetvoice        $00
000AF8CD                            
000AF8CD                            PasswordEntry_Jump00:
000AF8CD CD30 CED0 D010 CE08 CD10+  	dc.b	nE6, $30, nF6, nG6, nG6, $10, nF6, $08, nE6, $10, nF6, $08
000AF8D9 C930 CBCD CE10 CD08 CB10+  	dc.b	nC6, $30, nD6, nE6, nF6, $10, nE6, $08, nD6, $10, nE6, $08
000AF8E5 C960 C830 C4C6 C210 C6C9+  	dc.b	nC6, $60, nB5, $30, nG5, nA5, nF5, $10, nA5, nC6, nB5, $30
000AF8F1 C918 CB                    	dc.b	nC6, $18, nD6
000AF8F4 F6FF D7                    	smpsJump            PasswordEntry_Jump00
000AF8F7                            
000AF8F7                            ; FM2 Data
000AF8F7                            PasswordEntry_FM2:
000AF8F7 EF01                       	smpsSetvoice        $01
000AF8F9                            
000AF8F9                            PasswordEntry_Jump03:
000AF8F9 B118 1818 10AC 08B1 1818+  	dc.b	nC4, $18, $18, $18, $10, nG3, $08, nC4, $18, $18, $18, nB3
000AF905 AEAE AEAE 10B5 08AE 1818+  	dc.b	nA3, nA3, nA3, nA3, $10, nE4, $08, nA3, $18, $18, $18, nG3
000AF911 AAAA AAAA 1008 B518 1818+  	dc.b	nF3, nF3, nF3, nF3, $10, $08, nE4, $18, $18, $18, $10, $08
000AF91D AC18 1818 1008 1818 AEB0   	dc.b	nG3, $18, $18, $18, $10, $08, $18, $18, nA3, nB3
000AF927 F6FF D0                    	smpsJump            PasswordEntry_Jump03
000AF92A                            
000AF92A                            ; FM3 Data
000AF92A                            PasswordEntry_FM3:
000AF92A E080                       	smpsPan             panLeft, $00
000AF92C EF02                       	smpsSetvoice        $02
000AF92E                            
000AF92E                            PasswordEntry_Jump02:
000AF92E C104 8014 C408 8010 C208+  	dc.b	nE5, $04, nRst, $14, nG5, $08, nRst, $10, nF5, $08, nRst, $10
000AF93A C204 8014 C104 8014 C104+  	dc.b	nF5, $04, nRst, $14, nE5, $04, nRst, $14, nE5, $04, nRst, $0C
000AF946 C204 8014 C21C 8004 C404+  	dc.b	nF5, $04, nRst, $14, nF5, $1C, nRst, $04, nG5, $04, nRst, $14
000AF952 C408 8010 C204 8014 C204+  	dc.b	nG5, $08, nRst, $10, nF5, $04, nRst, $14, nF5, $04, nRst, $14
000AF95E C108 8010 C104 800C C204+  	dc.b	nE5, $08, nRst, $10, nE5, $04, nRst, $0C, nF5, $04, nRst, $14
000AF96A C21C 8004 C108 8010 C108+  	dc.b	nF5, $1C, nRst, $04, nE5, $08, nRst, $10, nE5, $08, nRst, $10
000AF976 BF08 8010 C20C 800C C408+  	dc.b	nD5, $08, nRst, $10, nF5, $0C, nRst, $0C, nG5, $08, nRst, $10
000AF982 C408 8010 BF08 8010 BF0C+  	dc.b	nG5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $0C, nRst, $0C
000AF98E BA08 8010 BD0C 800C BD0C+  	dc.b	nA4, $08, nRst, $10, nC5, $0C, nRst, $0C, nC5, $0C, nRst, $0C
000AF99A BD0C 800C BF08 8010 BF08+  	dc.b	nC5, $0C, nRst, $0C, nD5, $08, nRst, $10, nD5, $08, nRst, $10
000AF9A6 BF08 8010 BF08 8010        	dc.b	nD5, $08, nRst, $10, nD5, $08, nRst, $10
000AF9AE F6FF 7E                    	smpsJump            PasswordEntry_Jump02
000AF9B1                            
000AF9B1                            ; FM4 Data
000AF9B1                            PasswordEntry_FM4:
000AF9B1 E040                       	smpsPan             panRight, $00
000AF9B3 EF02                       	smpsSetvoice        $02
000AF9B5                            
000AF9B5                            PasswordEntry_Jump01:
000AF9B5 C404 8014 C104 8014 BF04+  	dc.b	nG5, $04, nRst, $14, nE5, $04, nRst, $14, nD5, $04, nRst, $14
000AF9C1 BF04 8014 BD04 8014 BD04+  	dc.b	nD5, $04, nRst, $14, nC5, $04, nRst, $14, nC5, $04, nRst, $0C
000AF9CD BF04 8014 BF18 8008 C104+  	dc.b	nD5, $04, nRst, $14, nD5, $18, nRst, $08, nE5, $04, nRst, $14
000AF9D9 C104 8014 BF04 8014 BF04+  	dc.b	nE5, $04, nRst, $14, nD5, $04, nRst, $14, nD5, $04, nRst, $14
000AF9E5 BD04 8014 BD04 800C BF04+  	dc.b	nC5, $04, nRst, $14, nC5, $04, nRst, $0C, nD5, $04, nRst, $14
000AF9F1 BF1C 8004 C408 8010 C408+  	dc.b	nD5, $1C, nRst, $04, nG5, $08, nRst, $10, nG5, $08, nRst, $10
000AF9FD C208 8010 BF08 8010 BF08+  	dc.b	nF5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $08, nRst, $10
000AFA09 BF08 8010 BC08 8010 BC0C+  	dc.b	nD5, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $0C, nRst, $0C
000AFA15 BD08 8010 BA08 8010 BA08+  	dc.b	nC5, $08, nRst, $10, nA4, $08, nRst, $10, nA4, $08, nRst, $10
000AFA21 BA08 8010 BC08 8010 BC08+  	dc.b	nA4, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $08, nRst, $10
000AFA2D BC08 8010 BC08 8010        	dc.b	nB4, $08, nRst, $10, nB4, $08, nRst, $10
000AFA35 F6FF 7E                    	smpsJump            PasswordEntry_Jump01
000AFA38                            
000AFA38                            ; FM5 Data
000AFA38                            PasswordEntry_FM5:
000AFA38 EF00                       	smpsSetvoice        $00
000AFA3A E1FB                       	smpsAlterNote       $FB
000AFA3C 800C                       	dc.b	nRst, $0C
000AFA3E F6FE 8D                    	smpsJump            PasswordEntry_Jump00
000AFA41                            
000AFA41                            ; PSG1 Data
000AFA41                            PasswordEntry_PSG1:
000AFA41 C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
000AFA4D CD10 D038 C410 C908 CD10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nC6, $08, nE6, $10, nG6, $38
000AFA59 C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
000AFA65 CD10 D038 C410 C808 CB10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nB5, $08, nD6, $10, nG6, $38
000AFA71 C210 C608 C910 CE18 C908+  	dc.b	nF5, $10, nA5, $08, nC6, $10, nF6, $18, nC6, $08, nA5, $10
000AFA7D C208 C410 C808 CB10 D018+  	dc.b	nF5, $08, nG5, $10, nB5, $08, nD6, $10, nG6, $18, nD6, $08
000AFA89 C810 C408                  	dc.b	nB5, $10, nG5, $08
000AFA8D F6FF B2                    	smpsJump            PasswordEntry_PSG1
000AFA90                            
000AFA90                            ; PSG2 Data
000AFA90                            PasswordEntry_PSG2:
000AFA90 E1FF                       	smpsAlterNote       $FF
000AFA92 800C                       	dc.b	nRst, $0C
000AFA94 F6FF AB                    	smpsJump            PasswordEntry_PSG1
000AFA97                            
000AFA97                            ; PSG3 Data
000AFA97                            PasswordEntry_PSG3:
000AFA97 F502                       	smpsPSGvoice        fTone_02
000AFA99 F3E7                       	smpsPSGform         $E7
000AFA9B C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
000AFAA7 C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
000AFAB3 C508 80C5 C508 C5          	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nAb5
000AFABA F503                       	smpsPSGvoice        fTone_03
000AFABC C5                         	dc.b	nAb5
000AFABD F6FF D8                    	smpsJump            PasswordEntry_PSG3
000AFAC0                            
000AFAC0                            ; DAC Data
000AFAC0                            PasswordEntry_DAC:
000AFAC0 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
000AFACC 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
000AFAD4 F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_DAC
000AFAD9 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
000AFAE5 0880 0881 8210 8208        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dSnare, $08
000AFAED                            
000AFAED                            PasswordEntry_Loop00:
000AFAED 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
000AFAF9 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
000AFB01 F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_Loop00
000AFB06 8118 8281 8210 8108 8108+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $08, nRst, $08
000AFB12 8182 8182 8282 8889 898A   	dc.b	dKick, dSnare, dKick, dSnare, dSnare, dSnare, dHiTimpani, dMidTimpani, dMidTimpani, dLowTimpani
000AFB1C F6FF A2                    	smpsJump            PasswordEntry_DAC
000AFB1F                            
000AFB1F                            PasswordEntry_Voices:
000AFB1F                            ;	Voice $00
000AFB1F                            ;	$04
000AFB1F                            ;	$02, $01, $01, $00, 	$1F, $10, $1F, $12, 	$09, $03, $0B, $04
000AFB1F                            ;	$03, $00, $00, $05, 	$EF, $FF, $2F, $0F, 	$1C, $80, $19, $80
000AFB1F                            	smpsVcAlgorithm     $04
000AFB1F                            	smpsVcFeedback      $00
000AFB1F                            	smpsVcUnusedBits    $00
000AFB1F                            	smpsVcDetune        $00, $00, $00, $00
000AFB1F                            	smpsVcCoarseFreq    $00, $01, $01, $02
000AFB1F                            	smpsVcRateScale     $00, $00, $00, $00
000AFB1F                            	smpsVcAttackRate    $12, $1F, $10, $1F
000AFB1F                            	smpsVcAmpMod        $00, $00, $00, $00
000AFB1F                            	smpsVcDecayRate1    $04, $0B, $03, $09
000AFB1F                            	smpsVcDecayRate2    $05, $00, $00, $03
000AFB1F                            	smpsVcDecayLevel    $00, $02, $0F, $0E
000AFB1F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000AFB38                            
000AFB38                            ;	Voice $01
000AFB38                            ;	$39
000AFB38                            ;	$03, $61, $40, $00, 	$1F, $5F, $5F, $5F, 	$10, $11, $09, $09
000AFB38                            ;	$06, $00, $00, $00, 	$C8, $F8, $F8, $F8, 	$1E, $24, $20, $80
000AFB38                            	smpsVcAlgorithm     $01
000AFB38                            	smpsVcFeedback      $07
000AFB38                            	smpsVcUnusedBits    $00
000AFB38                            	smpsVcDetune        $00, $04, $06, $00
000AFB38                            	smpsVcCoarseFreq    $00, $00, $01, $03
000AFB38                            	smpsVcRateScale     $01, $01, $01, $00
000AFB38                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AFB38                            	smpsVcAmpMod        $00, $00, $00, $00
000AFB38                            	smpsVcDecayRate1    $09, $09, $11, $10
000AFB38                            	smpsVcDecayRate2    $00, $00, $00, $06
000AFB38                            	smpsVcDecayLevel    $0F, $0F, $0F, $0C
000AFB38                            	smpsVcReleaseRate   $08, $08, $08, $08
000AFB51                            
000AFB51                            ;	Voice $02
000AFB51                            ;	$2C
000AFB51                            ;	$41, $00, $23, $00, 	$1F, $1F, $1F, $1F, 	$08, $0A, $0B, $0A
000AFB51                            ;	$04, $05, $00, $05, 	$45, $56, $85, $86, 	$14, $82, $18, $82
000AFB51                            	smpsVcAlgorithm     $04
000AFB51                            	smpsVcFeedback      $05
000AFB51                            	smpsVcUnusedBits    $00
000AFB51                            	smpsVcDetune        $00, $02, $00, $04
000AFB51                            	smpsVcCoarseFreq    $00, $03, $00, $01
000AFB51                            	smpsVcRateScale     $00, $00, $00, $00
000AFB51                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AFB51                            	smpsVcAmpMod        $00, $00, $00, $00
000AFB51                            	smpsVcDecayRate1    $0A, $0B, $0A, $08
000AFB51                            	smpsVcDecayRate2    $05, $00, $05, $04
000AFB51                            	smpsVcDecayLevel    $08, $08, $05, $04
000AFB51                            	smpsVcReleaseRate   $06, $05, $06, $05
000AFB6A                            
000AFB6A                            
000AFB6A                            		even	
000AFB6A                            Music99:		include	"sound/music/Mus99 - Toxic Landfill.asm"
000AFB6A                            ToxicLandfill_Header:
000AFB6A                            	smpsHeaderStartSong 1
000AFB6C 0603                       	smpsHeaderChan      $06, $03
000AFB6E 0208                       	smpsHeaderTempo     $02, $08
000AFB70                            
000AFB74 0000 000A                  	smpsHeaderFM        ToxicLandfill_FM1,	$00, $0A
000AFB78 0000 000A                  	smpsHeaderFM        ToxicLandfill_FM2,	$00, $0A	
000AFB7C 0000 0C0B                  	smpsHeaderFM        ToxicLandfill_FM3,	$0C, $0B
000AFB80 0000 0C0B                  	smpsHeaderFM        ToxicLandfill_FM4,	$0C, $0B
000AFB84 0000 0012                  	smpsHeaderFM        ToxicLandfill_FM5,	$00, $12
000AFB9A                            
000AFB9A                            ; DAC Data
000AFB9A                            ToxicLandfill_DAC:
000AFB9A E0C0                       	smpsPan             panCenter, $00
000AFB9C 807F 7F22 8106 1803 0382+  	dc.b	nRst, $7F, $7F, $22, dKick, $06, $18, $03, $03, dSnare, $06, dKick
000AFBA8 8181 8281 0306 8281 0382+  	dc.b	dKick, dKick, dSnare, dKick, $03, $06, dSnare, dKick, $03, dSnare, dKick
000AFBB3                            
000AFBB3                            ToxicLandfill_Loop00:
000AFBB3 82                         	dc.b	dSnare
000AFBB4                            
000AFBB4                            ToxicLandfill_Loop01:
000AFBB4 82                         	dc.b	dSnare
000AFBB5                            
000AFBB5                            ToxicLandfill_Jump00:
000AFBB5 8106 8203 8106 0382 8181+  	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, dKick, dKick, $06, dSnare
000AFBC1 0381 0603                  	dc.b	$03, dKick, $06, $03
000AFBC5 F700 03FF EA               	smpsLoop            $00, $03, ToxicLandfill_Loop00
000AFBCA 8282 8206 8103 8206 8103+  	dc.b	dSnare, dSnare, dSnare, $06, dKick, $03, dSnare, $06, dKick, $03, dSnare, dKick
000AFBD6 0682 0381 8281 8281        	dc.b	$06, dSnare, $03, dKick, dSnare, dKick, dSnare, dKick
000AFBDE F701 02FF D2               	smpsLoop            $01, $02, ToxicLandfill_Loop01
000AFBE3                            
000AFBE3                            ToxicLandfill_Loop06:
000AFBE3 82                         	dc.b	dSnare
000AFBE4                            
000AFBE4                            ToxicLandfill_Loop02:
000AFBE4 8181 8281                  	dc.b	dKick, dKick, dSnare, dKick
000AFBE8 F700 06FF F8               	smpsLoop            $00, $06, ToxicLandfill_Loop02
000AFBED                            
000AFBED                            ToxicLandfill_Loop03:
000AFBED 8281 81                    	dc.b	dSnare, dKick, dKick
000AFBF0 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop03
000AFBF5                            
000AFBF5                            ToxicLandfill_Loop04:
000AFBF5 8182 8181                  	dc.b	dKick, dSnare, dKick, dKick
000AFBF9 F700 03FF F8               	smpsLoop            $00, $03, ToxicLandfill_Loop04
000AFBFE 8182 81                    	dc.b	dKick, dSnare, dKick
000AFC01                            
000AFC01                            ToxicLandfill_Loop05:
000AFC01 8102 0182 03               	dc.b	dKick, $02, $01, dSnare, $03
000AFC06 F700 06FF F7               	smpsLoop            $00, $06, ToxicLandfill_Loop05
000AFC0B 0303 03                    	dc.b	$03, $03, $03
000AFC0E F701 02FF D1               	smpsLoop            $01, $02, ToxicLandfill_Loop06
000AFC13                            
000AFC13                            ToxicLandfill_Loop08:
000AFC13 03                         	dc.b	$03
000AFC14                            
000AFC14                            ToxicLandfill_Loop07:
000AFC14 8106 8203 8106 0382 06     	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, $06
000AFC1D F700 07FF F3               	smpsLoop            $00, $07, ToxicLandfill_Loop07
000AFC22 8182 0381 8282 82          	dc.b	dKick, dSnare, $03, dKick, dSnare, dSnare, dSnare
000AFC29 F701 02FF E6               	smpsLoop            $01, $02, ToxicLandfill_Loop08
000AFC2E                            
000AFC2E                            ToxicLandfill_Loop0D:
000AFC2E 82                         	dc.b	dSnare
000AFC2F                            
000AFC2F                            ToxicLandfill_Loop09:
000AFC2F 8181 8281                  	dc.b	dKick, dKick, dSnare, dKick
000AFC33 F700 06FF F8               	smpsLoop            $00, $06, ToxicLandfill_Loop09
000AFC38                            
000AFC38                            ToxicLandfill_Loop0A:
000AFC38 8281 81                    	dc.b	dSnare, dKick, dKick
000AFC3B F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop0A
000AFC40                            
000AFC40                            ToxicLandfill_Loop0B:
000AFC40 8182 8181                  	dc.b	dKick, dSnare, dKick, dKick
000AFC44 F700 03FF F8               	smpsLoop            $00, $03, ToxicLandfill_Loop0B
000AFC49 8182 81                    	dc.b	dKick, dSnare, dKick
000AFC4C                            
000AFC4C                            ToxicLandfill_Loop0C:
000AFC4C 8102 0182 03               	dc.b	dKick, $02, $01, dSnare, $03
000AFC51 F700 06FF F7               	smpsLoop            $00, $06, ToxicLandfill_Loop0C
000AFC56 0303 03                    	dc.b	$03, $03, $03
000AFC59 F701 02FF D1               	smpsLoop            $01, $02, ToxicLandfill_Loop0D
000AFC5E                            
000AFC5E                            ToxicLandfill_Loop0E:
000AFC5E 03                         	dc.b	$03
000AFC5F                            
000AFC5F                            ToxicLandfill_Loop0F:
000AFC5F 8106 8203 8106 0382 8181+  	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, dKick, dKick, $06, dSnare
000AFC6B 0381 0603 82               	dc.b	$03, dKick, $06, $03, dSnare
000AFC70 F700 03FF EA               	smpsLoop            $00, $03, ToxicLandfill_Loop0E
000AFC75 8282 0681 0382 0681 0382+  	dc.b	dSnare, dSnare, $06, dKick, $03, dSnare, $06, dKick, $03, dSnare, dKick, $06
000AFC81 8203 8182 8182 8182        	dc.b	dSnare, $03, dKick, dSnare, dKick, dSnare, dKick, dSnare
000AFC89 F701 02FF D2               	smpsLoop            $01, $02, ToxicLandfill_Loop0F
000AFC8E                            
000AFC8E                            ToxicLandfill_Loop10:
000AFC8E 8106 8203 8106 0382 06     	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, $06
000AFC97 F700 07FF F3               	smpsLoop            $00, $07, ToxicLandfill_Loop10
000AFC9C 8182 0381 8282 8282        	dc.b	dKick, dSnare, $03, dKick, dSnare, dSnare, dSnare, dSnare
000AFCA4 F701 04FF E6               	smpsLoop            $01, $04, ToxicLandfill_Loop10
000AFCA9 F6FF 0A                    	smpsJump            ToxicLandfill_Jump00
000AFCAC                            
000AFCAC                            ; FM1 Data
000AFCAC                            ToxicLandfill_FM1:
000AFCAC E0C0                       	smpsPan             panCenter, $00
000AFCAE EF00                       	smpsSetvoice        $00
000AFCB0 807F 7F76 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $76, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
000AFCBC AD02 AE01 AF02 B001        	dc.b	nAb3, $02, nA3, $01, nBb3, $02, nB3, $01
000AFCC4                            
000AFCC4                            ToxicLandfill_Loop44:
000AFCC4 AC09 0909 AA03 AC06 06AF+  	dc.b	nG3, $09, $09, $09, nF3, $03, nG3, $06, $06, nBb3, nG3, $09
000AFCD0 0909 AA03 AC06 06B1 AC09+  	dc.b	$09, $09, nF3, $03, nG3, $06, $06, nC4, nG3, $09, $09, $09
000AFCDC AA03 AC06 06AF A709 0909+  	dc.b	nF3, $03, nG3, $06, $06, nBb3, nD3, $09, $09, $09, nC3, $03
000AFCE8 A706 06AA                  	dc.b	nD3, $06, $06, nF3
000AFCEC F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop44
000AFCF1                            
000AFCF1                            ToxicLandfill_Loop46:
000AFCF1 AC12 AA36 A902 A801 A702+  	dc.b	nG3, $12, nF3, $36, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000AFCFD A502 A401 A302 A201 A102+  	dc.b	nC3, $02, nB2, $01, nBb2, $02, nA2, $01, nAb2, $02, nG2, $01
000AFD09 9F02 9E01 9D02 9C01 9B02+  	dc.b	nFs2, $02, nF2, $01, nE2, $02, nEb2, $01, nD2, $02, nCs2, $01
000AFD15 AC12 AA2A 03A9 AAA9        	dc.b	nG3, $12, nF3, $2A, $03, nE3, nF3, nE3
000AFD1D                            
000AFD1D                            ToxicLandfill_Loop45:
000AFD1D AA02 A901                  	dc.b	nF3, $02, nE3, $01
000AFD21 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop45
000AFD26 AA02 A5A1 AAA5 A1          	dc.b	nF3, $02, nC3, nAb2, nF3, nC3, nAb2
000AFD2D F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop46
000AFD32                            
000AFD32                            ToxicLandfill_Loop47:
000AFD32 B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3
000AFD3E F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop47
000AFD43                            
000AFD43                            ToxicLandfill_Loop48:
000AFD43 B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
000AFD4E F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop48
000AFD53 F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop47
000AFD58                            
000AFD58                            ToxicLandfill_Loop4A:
000AFD58 B812 B636 B502 B401 B302+  	dc.b	nG4, $12, nF4, $36, nE4, $02, nEb4, $01, nD4, $02, nCs4, $01
000AFD64 B102 B001 AF02 AE01 AD02+  	dc.b	nC4, $02, nB3, $01, nBb3, $02, nA3, $01, nAb3, $02, nG3, $01
000AFD70 AB02 AA01 A902 A801 A702+  	dc.b	nFs3, $02, nF3, $01, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000AFD7C B812 B62A 03B5 B6B5        	dc.b	nG4, $12, nF4, $2A, $03, nE4, nF4, nE4
000AFD84                            
000AFD84                            ToxicLandfill_Loop49:
000AFD84 B602 B501                  	dc.b	nF4, $02, nE4, $01
000AFD88 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop49
000AFD8D B602 B1AD B6B1 AD          	dc.b	nF4, $02, nC4, nAb3, nF4, nC4, nAb3
000AFD94 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop4A
000AFD99                            
000AFD99                            ToxicLandfill_Loop4B:
000AFD99 B809 0909 B603 B806 06BB+  	dc.b	nG4, $09, $09, $09, nF4, $03, nG4, $06, $06, nBb4, nG4, $09
000AFDA5 0909 B603 B806 06BD B809+  	dc.b	$09, $09, nF4, $03, nG4, $06, $06, nC5, nG4, $09, $09, $09
000AFDB1 B603 B806 06BB B309 0909+  	dc.b	nF4, $03, nG4, $06, $06, nBb4, nD4, $09, $09, $09, nC4, $03
000AFDBD B306 06B6                  	dc.b	nD4, $06, $06, nF4
000AFDC1 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop4B
000AFDC6                            
000AFDC6                            ToxicLandfill_Loop4C:
000AFDC6 BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000AFDD1 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop4C
000AFDD6                            
000AFDD6                            ToxicLandfill_Loop4D:
000AFDD6 BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
000AFDE1 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop4D
000AFDE6 F701 04FF DC               	smpsLoop            $01, $04, ToxicLandfill_Loop4C
000AFDEB F6FE D7                    	smpsJump            ToxicLandfill_Loop44
000AFDEE                            
000AFDEE                            ; FM2 Data
000AFDEE                            ToxicLandfill_FM2:
000AFDEE E0C0                       	smpsPan             panCenter, $00
000AFDF0 EF00                       	smpsSetvoice        $00
000AFDF2 807F 7F76 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $76, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
000AFDFE AD02 AE01 AF02 B001        	dc.b	nAb3, $02, nA3, $01, nBb3, $02, nB3, $01
000AFE06                            
000AFE06                            ToxicLandfill_Loop3A:
000AFE06 B109 0909 AF03 B106 06B4+  	dc.b	nC4, $09, $09, $09, nBb3, $03, nC4, $06, $06, nEb4, nC4, $09
000AFE12 0909 AF03 B106 06B6 B109+  	dc.b	$09, $09, nBb3, $03, nC4, $06, $06, nF4, nC4, $09, $09, $09
000AFE1E AF03 B106 06B4 AC09 0909+  	dc.b	nBb3, $03, nC4, $06, $06, nEb4, nG3, $09, $09, $09, nF3, $03
000AFE2A AC06 06AF                  	dc.b	nG3, $06, $06, nBb3
000AFE2E F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop3A
000AFE33                            
000AFE33                            ToxicLandfill_Loop3C:
000AFE33 B112 AF36 AE02 AD01 AC02+  	dc.b	nC4, $12, nBb3, $36, nA3, $02, nAb3, $01, nG3, $02, nFs3, $01
000AFE3F AA02 A901 A802 A701 A602+  	dc.b	nF3, $02, nE3, $01, nEb3, $02, nD3, $01, nCs3, $02, nC3, $01
000AFE4B A402 A301 A202 A101 A002+  	dc.b	nB2, $02, nBb2, $01, nA2, $02, nAb2, $01, nG2, $02, nFs2, $01
000AFE57 B112 AF2A 03AE AFAE        	dc.b	nC4, $12, nBb3, $2A, $03, nA3, nBb3, nA3
000AFE5F                            
000AFE5F                            ToxicLandfill_Loop3B:
000AFE5F AF02 AE01                  	dc.b	nBb3, $02, nA3, $01
000AFE63 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop3B
000AFE68 AF02 AAA6 AFAA A6          	dc.b	nBb3, $02, nF3, nCs3, nBb3, nF3, nCs3
000AFE6F F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop3C
000AFE74                            
000AFE74                            ToxicLandfill_Loop3D:
000AFE74 AC06 A7AA AB03 AC09 A706+  	dc.b	nG3, $06, nD3, nF3, nFs3, $03, nG3, $09, nD3, $06, nF3, nFs3
000AFE80 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop3D
000AFE85                            
000AFE85                            ToxicLandfill_Loop3E:
000AFE85 ACA5 A7AA 03AC 09A5 06A7+  	dc.b	nG3, nC3, nD3, nF3, $03, nG3, $09, nC3, $06, nD3, nF3
000AFE90 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop3E
000AFE95 F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop3D
000AFE9A                            
000AFE9A                            ToxicLandfill_Loop40:
000AFE9A BD12 BB36 BA02 B901 B802+  	dc.b	nC5, $12, nBb4, $36, nA4, $02, nAb4, $01, nG4, $02, nFs4, $01
000AFEA6 B602 B501 B402 B301 B202+  	dc.b	nF4, $02, nE4, $01, nEb4, $02, nD4, $01, nCs4, $02, nC4, $01
000AFEB2 B002 AF01 AE02 AD01 AC02+  	dc.b	nB3, $02, nBb3, $01, nA3, $02, nAb3, $01, nG3, $02, nFs3, $01
000AFEBE BD12 BB2A 03BA BBBA        	dc.b	nC5, $12, nBb4, $2A, $03, nA4, nBb4, nA4
000AFEC6                            
000AFEC6                            ToxicLandfill_Loop3F:
000AFEC6 BB02 BA01                  	dc.b	nBb4, $02, nA4, $01
000AFECA F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop3F
000AFECF BB02 B6B2 BBB6 B2          	dc.b	nBb4, $02, nF4, nCs4, nBb4, nF4, nCs4
000AFED6 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop40
000AFEDB                            
000AFEDB                            ToxicLandfill_Loop41:
000AFEDB BD09 0909 BB03 BD06 06C0+  	dc.b	nC5, $09, $09, $09, nBb4, $03, nC5, $06, $06, nEb5, nC5, $09
000AFEE7 0909 BB03 BD06 06C2 BD09+  	dc.b	$09, $09, nBb4, $03, nC5, $06, $06, nF5, nC5, $09, $09, $09
000AFEF3 BB03 BD06 06C0 B809 0909+  	dc.b	nBb4, $03, nC5, $06, $06, nEb5, nG4, $09, $09, $09, nF4, $03
000AFEFF B806 06BB                  	dc.b	nG4, $06, $06, nBb4
000AFF03 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop41
000AFF08 B8B3 B6B7 03B8 09B3 06B6+  	dc.b	nG4, nD4, nF4, nFs4, $03, nG4, $09, nD4, $06, nF4, nFs4, nG4
000AFF14 B3B6 B703 8009 B306 B6B7+  	dc.b	nD4, nF4, nFs4, $03, nRst, $09, nD4, $06, nF4, nFs4, nG4, nC4
000AFF20 B3B6 03B8 09B1 06B3 B6B8+  	dc.b	nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4, nG4, nC4, nD4
000AFF2C B603 8009 B106 B3B6 B8B3+  	dc.b	nF4, $03, nRst, $09, nC4, $06, nD4, nF4, nG4, nD4, nF4, nFs4
000AFF38 03B8 09B3 06B6 B7B8 B3B6+  	dc.b	$03, nG4, $09, nD4, $06, nF4, nFs4, nG4, nD4, nF4, nFs4, $03
000AFF44 8009 B306 B6B7             	dc.b	nRst, $09, nD4, $06, nF4, nFs4
000AFF4A                            
000AFF4A                            ToxicLandfill_Loop42:
000AFF4A B8B1 B3B6 03B8 09B1 06B3+  	dc.b	nG4, nC4, nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4
000AFF55 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop42
000AFF5A                            
000AFF5A                            ToxicLandfill_Loop43:
000AFF5A B8B3 B6B7 03B8 09B3 06B6+  	dc.b	nG4, nD4, nF4, nFs4, $03, nG4, $09, nD4, $06, nF4, nFs4
000AFF65 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop43
000AFF6A F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop42
000AFF6F B8B1 B3B6 03B8 09B1 06B3+  	dc.b	nG4, nC4, nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4, nG4
000AFF7B B1B3 B603 8009 B106 B3B6   	dc.b	nC4, nD4, nF4, $03, nRst, $09, nC4, $06, nD4, nF4
000AFF85 F6FE 7F                    	smpsJump            ToxicLandfill_Loop3A
000AFF88                            
000AFF88                            ; FM3 Data
000AFF88                            ToxicLandfill_FM3:
000AFF88 E0C0                       	smpsPan             panCenter, $00
000AFF8A EF01                       	smpsSetvoice        $01
000AFF8C                            
000AFF8C                            ToxicLandfill_Loop2D:
000AFF8C 9903 A580 9E80 9F80 A080+  	dc.b	nC2, $03, nC3, nRst, nF2, nRst, nFs2, nRst, nG2, nRst, nFs2, nRst
000AFF98 9E80 9C9E 9C99 9C80 9E80+  	dc.b	nF2, nRst, nEb2, nF2, nEb2, nC2, nEb2, nRst, nF2, nRst, nEb2, nRst
000AFFA4 9E80 9F9E 9C9E 9C97 98     	dc.b	nF2, nRst, nFs2, nF2, nEb2, nF2, nEb2, nBb1, nB1
000AFFAD F700 03FF DB               	smpsLoop            $00, $03, ToxicLandfill_Loop2D
000AFFB2 99A5 809E 809F 80A0 809F+  	dc.b	nC2, nC3, nRst, nF2, nRst, nFs2, nRst, nG2, nRst, nFs2, nRst, nF2
000AFFBE 809C 9E9C 999C 809E 809C+  	dc.b	nRst, nEb2, nF2, nEb2, nC2, nEb2, nRst, nF2, nRst, nEb2, nRst, nF2
000AFFCA 809F 9E9C 9D02 9E01 9F02+  	dc.b	nRst, nFs2, nF2, nEb2, nE2, $02, nF2, $01, nFs2, $02, nG2, $01
000AFFD6 A102 A201 A302 A401        	dc.b	nAb2, $02, nA2, $01, nBb2, $02, nB2, $01
000AFFDE                            
000AFFDE                            ToxicLandfill_Loop2E:
000AFFDE A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AFFEA F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop2E
000AFFEF A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nG2
000AFFFB 0909 0909 06A3             	dc.b	$09, $09, $09, $09, $06, nBb2
000B0001 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop2E
000B0006                            
000B0006                            ToxicLandfill_Loop31:
000B0006 A503 9999 A5               	dc.b	nC3, $03, nC2, nC2, nC3
000B000B                            
000B000B                            ToxicLandfill_Loop2F:
000B000B 9999 A3                    	dc.b	nC2, nC2, nBb2
000B000E F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop2F
000B0013 99A3                       	dc.b	nC2, nBb2
000B0015                            
000B0015                            ToxicLandfill_Loop30:
000B0015 99A3 99                    	dc.b	nC2, nBb2, nC2
000B0018 F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop30
000B001D 99A3 A0A3 A4               	dc.b	nC2, nBb2, nG2, nBb2, nB2
000B0022 F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop31
000B0027                            
000B0027                            ToxicLandfill_Loop32:
000B0027 A506 06A0 A003 A309 A006+  	dc.b	nC3, $06, $06, nG2, nG2, $03, nBb2, $09, nG2, $06, nBb2, nB2
000B0033 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop32
000B0038                            
000B0038                            ToxicLandfill_Loop33:
000B0038 A5A5 9E9E 03A0 0906 A3A4   	dc.b	nC3, nC3, nF2, nF2, $03, nG2, $09, $06, nBb2, nB2
000B0042 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop33
000B0047 F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop32
000B004C                            
000B004C                            ToxicLandfill_Loop36:
000B004C A503 9999 A5               	dc.b	nC3, $03, nC2, nC2, nC3
000B0051                            
000B0051                            ToxicLandfill_Loop34:
000B0051 9999 A3                    	dc.b	nC2, nC2, nBb2
000B0054 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop34
000B0059 99A3                       	dc.b	nC2, nBb2
000B005B                            
000B005B                            ToxicLandfill_Loop35:
000B005B 99A3 99                    	dc.b	nC2, nBb2, nC2
000B005E F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop35
000B0063 99A3 A0A3 A4               	dc.b	nC2, nBb2, nG2, nBb2, nB2
000B0068 F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop36
000B006D                            
000B006D                            ToxicLandfill_Loop37:
000B006D A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000B0079 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop37
000B007E A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nG2
000B008A 0909 0909 06A3             	dc.b	$09, $09, $09, $09, $06, nBb2
000B0090 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop37
000B0095                            
000B0095                            ToxicLandfill_Loop38:
000B0095 A5A5 A0A0 03A3 09A0 06A3+  	dc.b	nC3, nC3, nG2, nG2, $03, nBb2, $09, nG2, $06, nBb2, nB2
000B00A0 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop38
000B00A5                            
000B00A5                            ToxicLandfill_Loop39:
000B00A5 A5A5 9E9E 03A0 0906 A3A4   	dc.b	nC3, nC3, nF2, nF2, $03, nG2, $09, $06, nBb2, nB2
000B00AF F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop39
000B00B4 F701 04FF DD               	smpsLoop            $01, $04, ToxicLandfill_Loop38
000B00B9 F6FF 23                    	smpsJump            ToxicLandfill_Loop2E
000B00BC                            
000B00BC                            ; FM4 Data
000B00BC                            ToxicLandfill_FM4:
000B00BC E0C0                       	smpsPan             panCenter, $00
000B00BE EF01                       	smpsSetvoice        $01
000B00C0                            
000B00C0                            ToxicLandfill_Loop20:
000B00C0 8D03 9980 9280 9380 9480+  	dc.b	nC1, $03, nC2, nRst, nF1, nRst, nFs1, nRst, nG1, nRst, nFs1, nRst
000B00CC 9280 9092 908D 9080 9280+  	dc.b	nF1, nRst, nEb1, nF1, nEb1, nC1, nEb1, nRst, nF1, nRst, nEb1, nRst
000B00D8 9280 9392 9092 908B 8C     	dc.b	nF1, nRst, nFs1, nF1, nEb1, nF1, nEb1, nBb0, nB0
000B00E1 F700 03FF DB               	smpsLoop            $00, $03, ToxicLandfill_Loop20
000B00E6 8D99 8092 8093 8094 8093+  	dc.b	nC1, nC2, nRst, nF1, nRst, nFs1, nRst, nG1, nRst, nFs1, nRst, nF1
000B00F2 8090 9290 8D90 8092 8090+  	dc.b	nRst, nEb1, nF1, nEb1, nC1, nEb1, nRst, nF1, nRst, nEb1, nRst, nF1
000B00FE 8093 9290 9293 0294 0195+  	dc.b	nRst, nFs1, nF1, nEb1, nF1, nFs1, $02, nG1, $01, nAb1, $02, nA1
000B010A 0197 0298 01               	dc.b	$01, nBb1, $02, nB1, $01
000B010F                            
000B010F                            ToxicLandfill_Loop21:
000B010F 9906 9497 9803 9909 9406+  	dc.b	nC2, $06, nG1, nBb1, nB1, $03, nC2, $09, nG1, $06, nBb1, nB1
000B011B F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop21
000B0120 9992 9497 0399 0992 0694+  	dc.b	nC2, nF1, nG1, nBb1, $03, nC2, $09, nF1, $06, nG1, nBb1, nG1
000B012C 0909 0909 0697             	dc.b	$09, $09, $09, $09, $06, nBb1
000B0132 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop21
000B0137                            
000B0137                            ToxicLandfill_Loop24:
000B0137 9903 8D8D 99               	dc.b	nC2, $03, nC1, nC1, nC2
000B013C                            
000B013C                            ToxicLandfill_Loop22:
000B013C 8D8D 97                    	dc.b	nC1, nC1, nBb1
000B013F F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop22
000B0144 8D97                       	dc.b	nC1, nBb1
000B0146                            
000B0146                            ToxicLandfill_Loop23:
000B0146 8D97 8D                    	dc.b	nC1, nBb1, nC1
000B0149 F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop23
000B014E 8D97 9497 98               	dc.b	nC1, nBb1, nG1, nBb1, nB1
000B0153 F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop24
000B0158                            
000B0158                            ToxicLandfill_Loop25:
000B0158 9906 0694 9403 9709 9406+  	dc.b	nC2, $06, $06, nG1, nG1, $03, nBb1, $09, nG1, $06, nBb1, nB1
000B0164 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop25
000B0169                            
000B0169                            ToxicLandfill_Loop26:
000B0169 9999 9292 0394 0906 9798   	dc.b	nC2, nC2, nF1, nF1, $03, nG1, $09, $06, nBb1, nB1
000B0173 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop26
000B0178 F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop25
000B017D                            
000B017D                            ToxicLandfill_Loop29:
000B017D 9903 8D8D 99               	dc.b	nC2, $03, nC1, nC1, nC2
000B0182                            
000B0182                            ToxicLandfill_Loop27:
000B0182 8D8D 97                    	dc.b	nC1, nC1, nBb1
000B0185 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop27
000B018A 8D97                       	dc.b	nC1, nBb1
000B018C                            
000B018C                            ToxicLandfill_Loop28:
000B018C 8D97 8D                    	dc.b	nC1, nBb1, nC1
000B018F F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop28
000B0194 8D97 9497 98               	dc.b	nC1, nBb1, nG1, nBb1, nB1
000B0199 F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop29
000B019E                            
000B019E                            ToxicLandfill_Loop2A:
000B019E 9906 9497 9803 9909 9406+  	dc.b	nC2, $06, nG1, nBb1, nB1, $03, nC2, $09, nG1, $06, nBb1, nB1
000B01AA F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop2A
000B01AF 9992 9497 0399 0992 0694+  	dc.b	nC2, nF1, nG1, nBb1, $03, nC2, $09, nF1, $06, nG1, nBb1, nG1
000B01BB 0909 0909 0697             	dc.b	$09, $09, $09, $09, $06, nBb1
000B01C1 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop2A
000B01C6                            
000B01C6                            ToxicLandfill_Loop2B:
000B01C6 9999 9494 0397 0994 0697+  	dc.b	nC2, nC2, nG1, nG1, $03, nBb1, $09, nG1, $06, nBb1, nB1
000B01D1 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop2B
000B01D6                            
000B01D6                            ToxicLandfill_Loop2C:
000B01D6 9999 9292 0394 0906 9798   	dc.b	nC2, nC2, nF1, nF1, $03, nG1, $09, $06, nBb1, nB1
000B01E0 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop2C
000B01E5 F701 04FF DD               	smpsLoop            $01, $04, ToxicLandfill_Loop2B
000B01EA F6FF 23                    	smpsJump            ToxicLandfill_Loop21
000B01ED                            
000B01ED                            ; FM5 Data
000B01ED                            ToxicLandfill_FM5:
000B01ED E0C0                       	smpsPan             panCenter, $00
000B01EF E6FA                       	smpsAlterVol			-$06		
000B01F1 E102                       	smpsDetune			$02	
000B01F3 EF00                       	smpsSetvoice        $00
000B01F5 807F 7F78 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $78, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
000B0201 AD02 AE01 AF               	dc.b	nAb3, $02, nA3, $01, nBb3
000B0206                            
000B0206                            ToxicLandfill_Jump01:
000B0206 E701 B0                    	dc.b	smpsNoAttack, $01, nB3
000B0209                            
000B0209                            ToxicLandfill_Loop11:
000B0209 AC09 0909 AA03 AC06 06AF+  	dc.b	nG3, $09, $09, $09, nF3, $03, nG3, $06, $06, nBb3, nG3, $09
000B0215 0909 AA03 AC06 06B1 AC09+  	dc.b	$09, $09, nF3, $03, nG3, $06, $06, nC4, nG3, $09, $09, $09
000B0221 AA03 AC06 06AF A709 0909+  	dc.b	nF3, $03, nG3, $06, $06, nBb3, nD3, $09, $09, $09, nC3, $03
000B022D A706 06AA                  	dc.b	nD3, $06, $06, nF3
000B0231 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop11
000B0236                            
000B0236                            ToxicLandfill_Loop13:
000B0236 AC12 AA36 A902 A801 A702+  	dc.b	nG3, $12, nF3, $36, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000B0242 A502 A401 A302 A201 A102+  	dc.b	nC3, $02, nB2, $01, nBb2, $02, nA2, $01, nAb2, $02, nG2, $01
000B024E 9F02 9E01 9D02 9C01 9B02+  	dc.b	nFs2, $02, nF2, $01, nE2, $02, nEb2, $01, nD2, $02, nCs2, $01
000B025A AC12 AA2A 03A9 AAA9        	dc.b	nG3, $12, nF3, $2A, $03, nE3, nF3, nE3
000B0262                            
000B0262                            ToxicLandfill_Loop12:
000B0262 AA02 A901                  	dc.b	nF3, $02, nE3, $01
000B0266 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop12
000B026B AA02 A5A1 AAA5 A1          	dc.b	nF3, $02, nC3, nAb2, nF3, nC3, nAb2
000B0272 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop13
000B0277                            
000B0277                            ToxicLandfill_Loop14:
000B0277 B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3
000B0283 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop14
000B0288                            
000B0288                            ToxicLandfill_Loop15:
000B0288 B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
000B0293 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop15
000B0298 F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop14
000B029D                            
000B029D                            ToxicLandfill_Loop17:
000B029D B812 B636 B502 B401 B302+  	dc.b	nG4, $12, nF4, $36, nE4, $02, nEb4, $01, nD4, $02, nCs4, $01
000B02A9 B102 B001 AF02 AE01 AD02+  	dc.b	nC4, $02, nB3, $01, nBb3, $02, nA3, $01, nAb3, $02, nG3, $01
000B02B5 AB02 AA01 A902 A801 A702+  	dc.b	nFs3, $02, nF3, $01, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000B02C1 B812 B62A 03B5 B6B5        	dc.b	nG4, $12, nF4, $2A, $03, nE4, nF4, nE4
000B02C9                            
000B02C9                            ToxicLandfill_Loop16:
000B02C9 B602 B501                  	dc.b	nF4, $02, nE4, $01
000B02CD F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop16
000B02D2 B602 B1AD B6B1 AD          	dc.b	nF4, $02, nC4, nAb3, nF4, nC4, nAb3
000B02D9 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop17
000B02DE                            
000B02DE                            ToxicLandfill_Loop18:
000B02DE B809 0909 B603 B806 06BB+  	dc.b	nG4, $09, $09, $09, nF4, $03, nG4, $06, $06, nBb4, nG4, $09
000B02EA 0909 B603 B806 06BD B809+  	dc.b	$09, $09, nF4, $03, nG4, $06, $06, nC5, nG4, $09, $09, $09
000B02F6 B603 B806 06BB B309 0909+  	dc.b	nF4, $03, nG4, $06, $06, nBb4, nD4, $09, $09, $09, nC4, $03
000B0302 B306 06B6                  	dc.b	nD4, $06, $06, nF4
000B0306 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop18
000B030B                            
000B030B                            ToxicLandfill_Loop19:
000B030B BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000B0316 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop19
000B031B                            
000B031B                            ToxicLandfill_Loop1A:
000B031B BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
000B0326 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1A
000B032B                            
000B032B                            ToxicLandfill_Loop1B:
000B032B BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000B0336 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1B
000B033B BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4, nC5
000B0347 B6B8 BB03 BD09 B606 B8BB+  	dc.b	nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4, $02, nRst
000B0353 EF02                       	smpsSetvoice        $02
000B0355 E1FE                       	smpsDetune			-$02
000B0357 E606                       	smpsAlterVol		$06
000B0359                            	
000B0359                            ToxicLandfill_Loop1C:
000B0359 B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3	
000B0365 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop1C
000B036A                            
000B036A                            ToxicLandfill_Loop1D:
000B036A B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
000B0375 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1D
000B037A                            
000B037A                            ToxicLandfill_Loop1E:
000B037A BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000B0385 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1E
000B038A                            
000B038A                            ToxicLandfill_Loop1F:
000B038A BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
000B0395 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1F
000B039A EF00                       	smpsSetvoice        $00
000B039C E102                       	smpsDetune			$02
000B039E E6FA                       	smpsAlterVol		-$06	
000B03A0 F6FE 64                    	smpsJump            ToxicLandfill_Jump01
000B03A3                            
000B03A3                            ; PSG1 Data
000B03A3                            ToxicLandfill_PSG1:
000B03A3 807F 7F7F 03               	dc.b	nRst, $7F, $7F, $7F, $03
000B03A8                            
000B03A8                            ToxicLandfill_Jump04:
000B03A8 80                         	dc.b	nRst
000B03A9                            
000B03A9                            ToxicLandfill_Loop57:
000B03A9 60                         	dc.b	$60
000B03AA F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop57
000B03AF                            
000B03AF                            ToxicLandfill_Loop58:
000B03AF A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000B03BB F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop58
000B03C0                            
000B03C0                            ToxicLandfill_Loop59:
000B03C0 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2
000B03CB F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop59
000B03D0                            
000B03D0                            ToxicLandfill_Loop5A:
000B03D0 A5A0 A3A4 03A5 09A0 06A3+  	dc.b	nC3, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000B03DB F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5A
000B03E0 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nC3
000B03EC 9EA0 A303 A509 9E06 A0A3+  	dc.b	nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, $04, nRst
000B03F8                            
000B03F8                            ToxicLandfill_Loop5B:
000B03F8 6E                         	dc.b	$6E
000B03F9 F700 07FF FB               	smpsLoop            $00, $07, ToxicLandfill_Loop5B
000B03FE                            
000B03FE                            ToxicLandfill_Loop5C:
000B03FE A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000B040A F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop5C
000B040F                            
000B040F                            ToxicLandfill_Loop5D:
000B040F A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2
000B041A F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5D
000B041F F701 03FF DB               	smpsLoop            $01, $03, ToxicLandfill_Loop5C
000B0424                            
000B0424                            ToxicLandfill_Loop5E:
000B0424 A5A0 A3A4 03A5 09A0 06A3+  	dc.b	nC3, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000B042F F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5E
000B0434 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nC3
000B0440 9EA0 A303 A509 9E06 A0A3+  	dc.b	nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, $05, nRst
000B044C 01                         	dc.b	$01
000B044D F6FF 59                    	smpsJump            ToxicLandfill_Jump04
000B0450                            
000B0450                            ; PSG2 Data
000B0450                            ToxicLandfill_PSG2:
000B0450 807F 7F7F 03               	dc.b	nRst, $7F, $7F, $7F, $03
000B0455                            
000B0455                            ToxicLandfill_Jump03:
000B0455 80                         	dc.b	nRst
000B0456                            
000B0456                            ToxicLandfill_Loop50:
000B0456 60                         	dc.b	$60
000B0457 F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop50
000B045C A006 9B9E 9F03 A009 9B06+  	dc.b	nG2, $06, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000B0468 A09B 9E9F 03A0 0880 019B+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $08, nRst, $01, nD2, $06, nF2
000B0474 9FA0 999B 9E03 A009 9906+  	dc.b	nFs2, nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
000B0480 A099 9B9E 03A0 0880 0199+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2
000B048C 9E                         	dc.b	nF2
000B048D                            
000B048D                            ToxicLandfill_Loop51:
000B048D A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000B0498 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop51
000B049D A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, nG2
000B04A9 999B 9E03 A008 8001 9906+  	dc.b	nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2, nF2
000B04B5 0580                       	dc.b	$05, nRst
000B04B7                            
000B04B7                            ToxicLandfill_Loop52:
000B04B7 60                         	dc.b	$60
000B04B8 F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop52
000B04BD 01                         	dc.b	$01
000B04BE                            
000B04BE                            ToxicLandfill_Loop53:
000B04BE A006 9B9E 9F03 A009 9B06+  	dc.b	nG2, $06, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000B04CA A09B 9E9F 03A0 0880 019B+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $08, nRst, $01, nD2, $06, nF2
000B04D6 9FA0 999B 9E03 A009 9906+  	dc.b	nFs2, nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
000B04E2 A099 9B9E 03A0 0880 0199+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2
000B04EE 9E                         	dc.b	nF2
000B04EF F700 02FF CB               	smpsLoop            $00, $02, ToxicLandfill_Loop53
000B04F4                            
000B04F4                            ToxicLandfill_Loop54:
000B04F4 A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000B04FF F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop54
000B0504                            
000B0504                            ToxicLandfill_Loop55:
000B0504 A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
000B050F F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop55
000B0514                            
000B0514                            ToxicLandfill_Loop56:
000B0514 A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000B051F F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop56
000B0524 A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, nG2
000B0530 999B 9E03 A009 9906 9B9E+  	dc.b	nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, $05, nRst
000B053C 01                         	dc.b	$01
000B053D F6FF 16                    	smpsJump            ToxicLandfill_Jump03
000B0540                            
000B0540                            ; PSG3 Data
000B0540                            ToxicLandfill_PSG3:
000B0540 F3E7                       	smpsPSGform         $E7
000B0542 807F 41C6 0C0C 0C0C        	dc.b	nRst, $7F, $41, nMaxPSG, $0C, $0C, $0C, $0C
000B054A                            
000B054A                            ToxicLandfill_Loop4E:
000B054A 0C0C 0603 03               	dc.b	$0C, $0C, $06, $03, $03
000B054F F501                       	smpsPSGvoice        fTone_01
000B0551 0C                         	dc.b	$0C
000B0552 F502                       	smpsPSGvoice        fTone_02
000B0554 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop4E
000B0559 0603 03                    	dc.b	$06, $03, $03
000B055C F501                       	smpsPSGvoice        fTone_01
000B055E 06                         	dc.b	$06
000B055F F502                       	smpsPSGvoice        fTone_02
000B0561 03                         	dc.b	$03
000B0562 F501                       	smpsPSGvoice        fTone_01
000B0564 0906 0606                  	dc.b	$09, $06, $06, $06
000B0568                            
000B0568                            ToxicLandfill_Jump02:
000B0568 E77F E77F E77F E715        	dc.b	smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $15
000B0570 F502                       	smpsPSGvoice        fTone_02
000B0572 C618 1818                  	dc.b	nMaxPSG, $18, $18, $18
000B0576 F501                       	smpsPSGvoice        fTone_01
000B0578 18                         	dc.b	$18
000B0579 F502                       	smpsPSGvoice        fTone_02
000B057B 1806                       	dc.b	$18, $06
000B057D F501                       	smpsPSGvoice        fTone_01
000B057F 0909 0909 0618             	dc.b	$09, $09, $09, $09, $06, $18
000B0585 F502                       	smpsPSGvoice        fTone_02
000B0587 1818 18                    	dc.b	$18, $18, $18
000B058A F501                       	smpsPSGvoice        fTone_01
000B058C 18                         	dc.b	$18
000B058D F502                       	smpsPSGvoice        fTone_02
000B058F 1806                       	dc.b	$18, $06
000B0591 F501                       	smpsPSGvoice        fTone_01
000B0593 0909 0909 067F E77F E77F+  	dc.b	$09, $09, $09, $09, $06, $7F, smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $1B
000B059F F502                       	smpsPSGvoice        fTone_02
000B05A1 1818 18                    	dc.b	$18, $18, $18
000B05A4 F501                       	smpsPSGvoice        fTone_01
000B05A6 18                         	dc.b	$18
000B05A7 F502                       	smpsPSGvoice        fTone_02
000B05A9 1806                       	dc.b	$18, $06
000B05AB F501                       	smpsPSGvoice        fTone_01
000B05AD 0909 0909 0618             	dc.b	$09, $09, $09, $09, $06, $18
000B05B3 F502                       	smpsPSGvoice        fTone_02
000B05B5 1818 18                    	dc.b	$18, $18, $18
000B05B8 F501                       	smpsPSGvoice        fTone_01
000B05BA 18                         	dc.b	$18
000B05BB F502                       	smpsPSGvoice        fTone_02
000B05BD 1806                       	dc.b	$18, $06
000B05BF F501                       	smpsPSGvoice        fTone_01
000B05C1 0909 0909 06               	dc.b	$09, $09, $09, $09, $06
000B05C6                            
000B05C6                            ToxicLandfill_Loop4F:
000B05C6 59E7                       	dc.b	$59, smpsNoAttack
000B05C8 F700 0CFF FA               	smpsLoop            $00, $0C, ToxicLandfill_Loop4F
000B05CD 5A                         	dc.b	$5A
000B05CE F6FF 98                    	smpsJump            ToxicLandfill_Jump02
000B05D1                            
000B05D1                            
000B05D1                            ToxicLandfill_Voices:
000B05D1                            ;	Voice $00
000B05D1                            ;	$29
000B05D1                            ;	$33, $02, $02, $01, 	$1F, $1F, $1F, $19, 	$00, $02, $00, $0B
000B05D1                            ;	$03, $02, $00, $03, 	$0A, $1A, $0A, $1A, 	$1A, $1D, $20, $05
000B05D1                            	smpsVcAlgorithm     $01
000B05D1                            	smpsVcFeedback      $05
000B05D1                            	smpsVcUnusedBits    $00
000B05D1                            	smpsVcDetune        $00, $00, $00, $03
000B05D1                            	smpsVcCoarseFreq    $01, $02, $02, $03
000B05D1                            	smpsVcRateScale     $00, $00, $00, $00
000B05D1                            	smpsVcAttackRate    $19, $1F, $1F, $1F
000B05D1                            	smpsVcAmpMod        $00, $00, $00, $00
000B05D1                            	smpsVcDecayRate1    $0B, $00, $02, $00
000B05D1                            	smpsVcDecayRate2    $03, $00, $02, $03
000B05D1                            	smpsVcDecayLevel    $01, $00, $01, $00
000B05D1                            	smpsVcReleaseRate   $0A, $0A, $0A, $0A
000B05EA                            	
000B05EA                            ;	Voice $01
000B05EA                            ;	$18
000B05EA                            ;	$37, $30, $30, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
000B05EA                            ;	$08, $0A, $03, $05, 	$BF, $BF, $3F, $2F, 	$32, $22, $14, $00
000B05EA                            	smpsVcAlgorithm     $00
000B05EA                            	smpsVcFeedback      $03
000B05EA                            	smpsVcUnusedBits    $00
000B05EA                            	smpsVcDetune        $03, $03, $03, $03
000B05EA                            	smpsVcCoarseFreq    $01, $00, $00, $07
000B05EA                            	smpsVcRateScale     $02, $00, $03, $02
000B05EA                            	smpsVcAttackRate    $1C, $1C, $1C, $1E
000B05EA                            	smpsVcAmpMod        $00, $00, $00, $00
000B05EA                            	smpsVcDecayRate1    $01, $04, $06, $0D
000B05EA                            	smpsVcDecayRate2    $05, $03, $0A, $08
000B05EA                            	smpsVcDecayLevel    $02, $03, $0B, $0B
000B05EA                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B0603                            
000B0603                            ;	Voice $02
000B0603                            ;	$2C
000B0603                            ;	$72, $78, $34, $34, 	$1F, $12, $1F, $12, 	$00, $0A, $00, $0A
000B0603                            ;	$00, $00, $00, $00, 	$00, $16, $00, $16, 	$16, $00, $17, $00
000B0603                            	smpsVcAlgorithm     $04
000B0603                            	smpsVcFeedback      $05
000B0603                            	smpsVcUnusedBits    $00
000B0603                            	smpsVcDetune        $03, $03, $07, $07
000B0603                            	smpsVcCoarseFreq    $04, $04, $08, $02
000B0603                            	smpsVcRateScale     $00, $00, $00, $00
000B0603                            	smpsVcAttackRate    $12, $1F, $12, $1F
000B0603                            	smpsVcAmpMod        $00, $00, $00, $00
000B0603                            	smpsVcDecayRate1    $0A, $00, $0A, $00
000B0603                            	smpsVcDecayRate2    $00, $00, $00, $00
000B0603                            	smpsVcDecayLevel    $01, $00, $01, $00
000B0603                            	smpsVcReleaseRate   $06, $00, $06, $00
000B061C                            		even			
000B061C                            Music9A:		include	"sound/music/Mus9A - RRZ2.asm"
000B061C                            RRZ2_Header:
000B061C                            	smpsHeaderStartSong 1
000B061E 0603                       	smpsHeaderChan      $06, $03
000B0620 0104                       	smpsHeaderTempo     $01, $04
000B0622                            
000B0626 0000 0010                  	smpsHeaderFM        RRZ2_FM1,	$00, $10
000B062A 0000 0C0D                  	smpsHeaderFM        RRZ2_FM2,	$0C, $0D
000B062E 0000 0019                  	smpsHeaderFM        RRZ2_FM3,	$00, $19
000B0632 0000 0019                  	smpsHeaderFM        RRZ2_FM4,	$00, $19
000B0636 0000 0019                  	smpsHeaderFM        RRZ2_FM5,	$00, $19
000B064C                            
000B064C                            ; FM1 Data
000B064C                            RRZ2_FM1:
000B064C E0C0                       	smpsPan             panCenter, $00
000B0653 EF03                       	smpsSetvoice        $03
000B0655 B160 BD18 B8BB 12B4 AF0C+  	dc.b	nC4, $60, nC5, $18, nG4, nBb4, $12, nEb4, nBb3, $0C, nC4, $60
000B0661 BD18 B8BB 12B4 C00C B160+  	dc.b	nC5, $18, nG4, nBb4, $12, nEb4, nEb5, $0C, nC4, $60, $18, nG4
000B066D BD12 C0C4 0C30 C2C0 B804+  	dc.b	nC5, $12, nEb5, nG5, $0C, $30, nF5, nEb5, nG4, $04, nF4, nEb4
000B0679 B6B4 B3B4 B3B1 AFAC AFB1+  	dc.b	nF4, nEb4, nD4, nEb4, nD4, nC4, nBb3, nG3, nBb3, nC4, $60, nRst
000B0685 8080                       	dc.b	nRst, nRst
000B0687 EF00                       	smpsSetvoice        $00
000B0689 B848 0CB1 B430 0CB3 B4BB+  	dc.b	nG4, $48, $0C, nC4, nEb4, $30, $0C, nD4, nEb4, nBb4, nA4, $30
000B0695 B8E7 B82E 8032 B860 B130+  	dc.b	nG4, smpsNoAttack, nG4, $2E, nRst, $32, nG4, $60, nC4, $30, $18, nG4
000B06A1 0CB4 BB30 BDBA 60B8 30B1+  	dc.b	$0C, nEb4, nBb4, $30, nC5, nA4, $60, nG4, $30, nC4, nEb4, $18
000B06AD B3AF AE0C AFB1 30B8 E7B8+  	dc.b	nD4, nBb3, nA3, $0C, nBb3, nC4, $30, nG4, smpsNoAttack, nG4, $2E, nRst
000B06B9 32B4 600C B3B4 B8BB 18BA+  	dc.b	$32, nEb4, $60, $0C, nD4, nEb4, nG4, nBb4, $18, nA4, $0C, nF4
000B06C5 B818 B630 BB12 BA06 E760+  	dc.b	nG4, $18, nF4, $30, nBb4, $12, nA4, $06, smpsNoAttack, $60, nA4, $60
000B06D1 C918 C4C7 14C6 10BD 0CC0+  	dc.b	nC6, $18, nG5, nBb5, $14, nA5, $10, nC5, $0C, nEb5, $2E, nRst
000B06DD 3280 60                    	dc.b	$32, nRst, $60
000B06E0 EF05                       	smpsSetvoice        $05
000B06E2 E9F4                       	smpsAlterPitch      $F4
000B06E4 B930 BDB4 60B7 30AF B260+  	dc.b	nAb4, $30, nC5, nEb4, $60, nFs4, $30, nBb3, nCs4, $60, nAb4, $30
000B06F0 B4B9 C0C3 B7E7 B760        	dc.b	nEb4, nAb4, nEb5, nFs5, nFs4, smpsNoAttack, nFs4, $60
000B06F8 E90C                       	smpsAlterPitch      $0C
000B06FA B160 A5B1 30AC B860 B430+  	dc.b	nC4, $60, nC3, nC4, $30, nG3, nG4, $60, nEb4, $30, nBb4, nG4
000B0706 60B1 30AC B8B6 B460 B630+  	dc.b	$60, nC4, $30, nG3, nG4, nF4, nEb4, $60, nF4, $30, nD4, nG4
000B0712 60E7 30C0 18BF             	dc.b	$60, smpsNoAttack, $30, nEb5, $18, nD5
000B0718 F6FF 32                    	smpsJump            RRZ2_FM1
000B071B                            
000B071B                            ; FM2 Data
000B071B                            RRZ2_FM2:
000B071B E0C0                       	smpsPan             panCenter, $00
000B0722 EF01                       	smpsSetvoice        $01
000B0724                            
000B0724                            RRZ2_Jump02:
000B0724 9960 E748 0C9B 9C60 E79C+  	dc.b	nC2, $60, smpsNoAttack, $48, $0C, nD2, nEb2, $60, smpsNoAttack, nEb2, nF2, nF2
000B0730 480C 9FA0 6030 049E 9C9E+  	dc.b	$48, $0C, nFs2, nG2, $60, $30, $04, nF2, nEb2, nF2, nEb2, nD2
000B073C 9C9B 9997 9497 9908 0494+  	dc.b	nEb2, nD2, nC2, nBb1, nG1, nBb1, nC2, $08, $04, nG1, $0C, nBb1
000B0748 9908 0480 3080 0899 0480+  	dc.b	nC2, $08, $04, nRst, $30, nRst, $08, nC2, $04, nRst, $0C, nC2
000B0754 8097 0480 0897 8004 970C+  	dc.b	nRst, nBb1, $04, nRst, $08, nBb1, nRst, $04, nBb1, $0C, nG1, $08
000B0760 9704 9908 0494 0C97 9908+  	dc.b	nBb1, $04, nC2, $08, $04, nG1, $0C, nBb1, nC2, $08, $04, nRst
000B076C 3080 0899 0480 0C99 8097+  	dc.b	$30, nRst, $08, nC2, $04, nRst, $0C, nC2, nRst, nBb1, $04, nRst
000B0778 0897 8004 9480 9410        	dc.b	$08, nBb1, nRst, $04, nG1, nRst, nG1, $10
000B0780                            
000B0780                            RRZ2_Loop07:
000B0780 9908 0494 0C97 9908 0480+  	dc.b	nC2, $08, $04, nG1, $0C, nBb1, nC2, $08, $04, nRst, $30, nRst
000B078C 0899 0480 0C99 8097 0480+  	dc.b	$08, nC2, $04, nRst, $0C, nC2, nRst, nBb1, $04, nRst, $08, nBb1
000B0798 8004 970C 9408 9704        	dc.b	nRst, $04, nBb1, $0C, nG1, $08, nBb1, $04
000B07A0 F700 08FF DC               	smpsLoop            $00, $08, RRZ2_Loop07
000B07A5                            
000B07A5                            RRZ2_Loop08:
000B07A5 9908 0494 0C97 9908 0480+  	dc.b	nC2, $08, $04, nG1, $0C, nBb1, nC2, $08, $04, nRst, $30, nRst
000B07B1 0899 0480 0C99 8097 0480+  	dc.b	$08, nC2, $04, nRst, $0C, nC2, nRst, nBb1, $04, nRst, $08, nBb1
000B07BD 8004 970C 9408 9704        	dc.b	nRst, $04, nBb1, $0C, nG1, $08, nBb1, $04
000B07C5 F700 02FF DC               	smpsLoop            $00, $02, RRZ2_Loop08
000B07CA 9508 9C04 A108 9C04 9508+  	dc.b	nAb1, $08, nEb2, $04, nAb2, $08, nEb2, $04, nAb1, $08, $04, nRst
000B07D6 0895 2680 0A95 04A1 1680+  	dc.b	$08, nAb1, $26, nRst, $0A, nAb1, $04, nAb2, $16, nRst, $0E, nAb2
000B07E2 049C A1A6 0CA5 A19C 08A1+  	dc.b	$04, nEb2, nAb2, nCs3, $0C, nC3, nAb2, nEb2, $08, nAb2, $04, nFs1
000B07EE 089A 049F 089A 0493 0804+  	dc.b	$08, nCs2, $04, nFs2, $08, nCs2, $04, nFs1, $08, $04, nRst, $08
000B07FA 9304 2280 0A93 049F 8093+  	dc.b	nFs1, $04, $22, nRst, $0A, nFs1, $04, nFs2, nRst, nFs1, nRst, $08
000B0806 9304 0C92 0893 0480 0893+  	dc.b	nFs1, $04, $0C, nF1, $08, nFs1, $04, nRst, $08, nFs1, $04, nFs1
000B0812 9A9F A408 A304 A408 A304+  	dc.b	nCs2, nFs2, nB2, $08, nBb2, $04, nB2, $08, nBb2, $04, nAb1, $08
000B081E 9C04 A108 9C04 9508 0480+  	dc.b	nEb2, $04, nAb2, $08, nEb2, $04, nAb1, $08, $04, nRst, $08, nAb1
000B082A 2680 0A95 04A1 1680 0EA1+  	dc.b	$26, nRst, $0A, nAb1, $04, nAb2, $16, nRst, $0E, nAb2, $04, nEb2
000B0836 A1A6 A5A6 ADA8 A39F 9E9F+  	dc.b	nAb2, nCs3, nC3, nCs3, nAb3, nEb3, nBb2, nFs2, nF2, nFs2, nEb2, nBb2
000B0842 9C93 089A 049F 089A 0493+  	dc.b	nEb2, nFs1, $08, nCs2, $04, nFs2, $08, nCs2, $04, nFs1, $08, $04
000B084E 8008 9304 2280 0A93 049F+  	dc.b	nRst, $08, nFs1, $04, $22, nRst, $0A, nFs1, $04, nFs2, nRst, nFs1
000B085A 8008 9304 0C92 0893 0480+  	dc.b	nRst, $08, nFs1, $04, $0C, nF1, $08, nFs1, $04, nRst, $08, nFs1
000B0866 0493 9A9F A408 A304 A408+  	dc.b	$04, nFs1, nCs2, nFs2, nB2, $08, nBb2, $04, nB2, $08, nBb2, $04
000B0872 8D08 048D 8008 8D0C 8F08+  	dc.b	nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04
000B087E 8008 8D0C 0408 8F04 900C+  	dc.b	nRst, $08, nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08
000B088A 048D 8008 8D0C 8F08 9004+  	dc.b	$04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08
000B0896 8D0C 0408 8F04 900C 8D08+  	dc.b	nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1
000B08A2 8008 8D0C 8F08 9004 8008+  	dc.b	nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C
000B08AE 0408 8F04 900C 8D08 048D+  	dc.b	$04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08
000B08BA 8D0C 8F08 9004 8008 8D0C+  	dc.b	nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08
000B08C6 8F04 900C 8D08 048D 8008+  	dc.b	nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C
000B08D2 8F08 9004 8008 8D0C 0408+  	dc.b	nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08, nD1, $04
000B08DE 900C 8D08 048D 8008 8D0C+  	dc.b	nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08
000B08EA 9004 8008 8D0C 0408 8F04+  	dc.b	nEb1, $04, nRst, $08, nC1, $0C, $04, $08, nD1, $04, nEb1, $0C
000B08F6 8D08 048D 8008 8D0C 8F08+  	dc.b	nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04
000B0902 8008 8D0C 0408 8F04 900C+  	dc.b	nRst, $08, nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08
000B090E 048D 8008 8D0C 8F08 9004+  	dc.b	$04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08
000B091A 8D0C 0408 8F04 900C 8D08+  	dc.b	nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1
000B0926 8008 8D0C 8F08 9004 8008+  	dc.b	nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C
000B0932 0408 8F04 900C 8D08 048D+  	dc.b	$04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08
000B093E 8D0C 8F08 9004 8008 8D0C+  	dc.b	nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08
000B094A 8F04 900C 8D08 048D 8008+  	dc.b	nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C
000B0956 8F08 9004 8008 8D0C 0408+  	dc.b	nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08, nD1, $04
000B0962 900C 8D08 048D 8008 8D0C+  	dc.b	nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08
000B096E 9004 940C 8094 18          	dc.b	nEb1, $04, nG1, $0C, nRst, nG1, $18
000B0975 F6FD AD                    	smpsJump            RRZ2_Jump02
000B0978                            
000B0978                            ; FM3 Data
000B0978                            RRZ2_FM3:
000B0978 E080                       	smpsPan             panLeft, $00
000B097F                            
000B097F                            RRZ2_Jump01:
000B097F EF02                       	smpsSetvoice        $02
000B0981                            
000B0981                            RRZ2_Loop05:
000B0981 B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000B098D 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000B0999 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000B09A5 8008 B104 AF08 B104 8008+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04
000B09B1 ACAF B1B8 0810             	dc.b	nG3, nBb3, nC4, nG4, $08, $10
000B09B7 F700 03FF C6               	smpsLoop            $00, $03, RRZ2_Loop05
000B09BC B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000B09C8 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000B09D4 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000B09E0 8008 B104 AF08 B104 B8B6+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nG4, nF4, nG4, nF4
000B09EC B4B6 B4B3 B4B3 B1AF        	dc.b	nEb4, nF4, nEb4, nD4, nEb4, nD4, nC4, nBb3
000B09F4                            
000B09F4                            RRZ2_Loop06:
000B09F4 AC0C B8AC 08B6 0CAC 04B4+  	dc.b	nG3, $0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3
000B0A00 08B3 0CAC 04B4 8008 AC04+  	dc.b	$08, nD4, $0C, nG3, $04, nEb4, nRst, $08, nG3, $04, nRst, $08
000B0A0C B1B3 04B4 08B8 0480 08AC+  	dc.b	nC4, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nG3, $04, nC4
000B0A18 08B3 04B4 08B8 0480 08BB+  	dc.b	$08, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nBb4, $10, nG3
000B0A24 0CB8 AC08 B60C AC04 B40C+  	dc.b	$0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3, $08
000B0A30 B30C AC04 B480 08B1 AC04+  	dc.b	nD4, $0C, nG3, $04, nEb4, nRst, $08, nC4, nG3, $04, nG4, $08
000B0A3C B604 B408 B304 8008 B404+  	dc.b	nF4, $04, nEb4, $08, nD4, $04, nRst, $08, nEb4, $04, nF4, $08
000B0A48 B404 B680 08B8 BB04 B880+  	dc.b	nEb4, $04, nF4, nRst, $08, nG4, nBb4, $04, nG4, nRst, $08
000B0A53 F700 05FF 9D               	smpsLoop            $00, $05, RRZ2_Loop06
000B0A58 AC0C B8AC 08B6 0CAC 04B4+  	dc.b	nG3, $0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3
000B0A64 08B3 0CAC 04B4 8008 AC04+  	dc.b	$08, nD4, $0C, nG3, $04, nEb4, nRst, $08, nG3, $04, nRst, $08
000B0A70 B1B3 04B4 08B8 0480 08AC+  	dc.b	nC4, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nG3, $04, nC4
000B0A7C 08B3 04B4 08B8 0480 08BB+  	dc.b	$08, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nBb4, $10, nG3
000B0A88 0CB8 AC08 B60C AC04 B40C+  	dc.b	$0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3, $08
000B0A94 B30C AC04 B480 08B1 AC04+  	dc.b	nD4, $0C, nG3, $04, nEb4, nRst, $08, nC4, nG3, $04, nG4, $08
000B0AA0 B604 B408 B304 8008 B404+  	dc.b	nF4, $04, nEb4, $08, nD4, $04, nRst, $08, nEb4, $04, nF4, $08
000B0AAC B404 B680 08B8 BB04 B880+  	dc.b	nEb4, $04, nF4, nRst, $08, nG4, nBb4, $04, nG4, nRst, $08
000B0AB7 EF05                       	smpsSetvoice        $05
000B0AB9 8060 8018 BD04 B9B4 B9B4+  	dc.b	nRst, $60, nRst, $18, nC5, $04, nAb4, nEb4, nAb4, nEb4, nC4, nEb4
000B0AC5 B1AD B1AD A8A1 1880 60B7+  	dc.b	nC4, nAb3, nC4, nAb3, nEb3, nAb2, $18, nRst, $60, nFs4, $04, nCs4
000B0AD1 AFAB AFB2 B7AF ABA6 ABAF+  	dc.b	nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3, nFs3, nBb3, nFs3, nCs3
000B0ADD A39F 2480 6080 18BD 04B9+  	dc.b	nBb2, nFs2, $24, nRst, $60, nRst, $18, nC5, $04, nAb4, nEb4, nAb4
000B0AE9 B4B1 B4B1 ADB1 ADA8 A118+  	dc.b	nEb4, nC4, nEb4, nC4, nAb3, nC4, nAb3, nEb3, nAb2, $18, nRst, $60
000B0AF5 B704 B2AF ABAF B2B7 AFAB+  	dc.b	nFs4, $04, nCs4, nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3, nFs3
000B0B01 AFAB A6A3 9F24             	dc.b	nBb3, nFs3, nCs3, nBb2, nFs2, $24
000B0B07 E6FA                       	smpsAlterVol        $FA
000B0B09 A560 E7A5 B148 0804 8008+  	dc.b	nC3, $60, smpsNoAttack, nC3, nC4, $48, $08, $04, nRst, $08, nC4, $04
000B0B15 8008 AF04 22E7 1A08 0480+  	dc.b	nRst, $08, nBb3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08, nBb3
000B0B21 0480 08AD 0422 E71A 0804+  	dc.b	$04, nRst, $08, nAb3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08
000B0B2D AD04 8008 AC04 240C AAA8+  	dc.b	nAb3, $04, nRst, $08, nG3, $04, $24, $0C, nF3, nEb3, nD3, nC4
000B0B39 4808 0408 0480 08B3 0422+  	dc.b	$48, $08, $04, $08, $04, nRst, $08, nD4, $04, $22, smpsNoAttack, $1A
000B0B45 0804 8008 B304 8008 B404+  	dc.b	$08, $04, nRst, $08, nD4, $04, nRst, $08, nEb4, $04, $2E, smpsNoAttack
000B0B51 0E08 0480 08B4 0480 08B6+  	dc.b	$0E, $08, $04, nRst, $08, nEb4, $04, nRst, $08, nF4, $04, $24
000B0B5D BB30 B860 B118 B1B4 18B3   	dc.b	nBb4, $30, nG4, $60, nC4, $18, nC4, nEb4, $18, nD4
000B0B67 E606                       	smpsAlterVol        $06
000B0B69 F6FE 14                    	smpsJump            RRZ2_Jump01
000B0B6C                            
000B0B6C                            ; FM4 Data
000B0B6C                            RRZ2_FM4:
000B0B6C E040                       	smpsPan             panRight, $00
000B0B73                            
000B0B73                            RRZ2_Jump00:
000B0B73 EF02                       	smpsSetvoice        $02
000B0B75                            
000B0B75                            RRZ2_Loop03:
000B0B75 AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000B0B81 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000B0B8D 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000B0B99 AC04 AA08 AC04 8008 AC04+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3
000B0BA5 ACAF 08B3 10               	dc.b	nG3, nBb3, $08, nD4, $10
000B0BAA F700 03FF C7               	smpsLoop            $00, $03, RRZ2_Loop03
000B0BAF AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000B0BBB 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000B0BC7 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000B0BD3 AC04 AA08 AC04 B4B3 B4B3+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nEb4, nD4, nEb4, nD4, nC4, nD4
000B0BDF B1AF B1AF ACAA             	dc.b	nC4, nBb3, nC4, nBb3, nG3, nF3
000B0BE5                            
000B0BE5                            RRZ2_Loop04:
000B0BE5 A00C ACA0 08AA 0CA0 04A8+  	dc.b	nG2, $0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2
000B0BF1 08A7 0CA0 04A8 8008 A004+  	dc.b	$08, nD3, $0C, nG2, $04, nEb3, nRst, $08, nG2, $04, nRst, $08
000B0BFD A5A7 04A8 08AC 0480 08A0+  	dc.b	nC3, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nG2, $04, nC3
000B0C09 08A7 04A8 08AC 0480 08AF+  	dc.b	$08, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nBb3, $10, nG2
000B0C15 0CAC A008 AA0C A004 A80C+  	dc.b	$0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2, $08
000B0C21 A70C A004 A880 08A5 A004+  	dc.b	nD3, $0C, nG2, $04, nEb3, nRst, $08, nC3, nG2, $04, nG3, $08
000B0C2D AA04 A808 A704 8008 A804+  	dc.b	nF3, $04, nEb3, $08, nD3, $04, nRst, $08, nEb3, $04, nF3, $08
000B0C39 A804 AA80 08AC AF04 AC80+  	dc.b	nEb3, $04, nF3, nRst, $08, nG3, nBb3, $04, nG3, nRst, $08
000B0C44 F700 05FF 9D               	smpsLoop            $00, $05, RRZ2_Loop04
000B0C49 A00C ACA0 08AA 0CA0 04A8+  	dc.b	nG2, $0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2
000B0C55 08A7 0CA0 04A8 8008 A004+  	dc.b	$08, nD3, $0C, nG2, $04, nEb3, nRst, $08, nG2, $04, nRst, $08
000B0C61 A5A7 04A8 08AC 0480 08A0+  	dc.b	nC3, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nG2, $04, nC3
000B0C6D 08A7 04A8 08AC 0480 08AF+  	dc.b	$08, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nBb3, $10, nG2
000B0C79 0CAC A008 AA0C A004 A80C+  	dc.b	$0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2, $08
000B0C85 A70C A004 A880 08A5 A004+  	dc.b	nD3, $0C, nG2, $04, nEb3, nRst, $08, nC3, nG2, $04, nG3, $08
000B0C91 AA04 A808 A704 8008 A804+  	dc.b	nF3, $04, nEb3, $08, nD3, $04, nRst, $08, nEb3, $04, nF3, $08
000B0C9D A804 AA80 08AC AF04 AC08+  	dc.b	nEb3, $04, nF3, nRst, $08, nG3, nBb3, $04, nG3, $08, nRst, $04
000B0CA9 EF05                       	smpsSetvoice        $05
000B0CAB 8060 8018 800C BD04 B9B4+  	dc.b	nRst, $60, nRst, $18, nRst, $0C, nC5, $04, nAb4, nEb4, nAb4, nEb4
000B0CB7 B1B4 B1AD B1AD A8A1 0C80+  	dc.b	nC4, nEb4, nC4, nAb3, nC4, nAb3, nEb3, nAb2, $0C, nRst, $60, nRst
000B0CC3 0CB7 04B2 AFAB AFB2 B7AF+  	dc.b	$0C, nFs4, $04, nCs4, nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3
000B0CCF ABAF ABA6 E7A3 1CE7 0880+  	dc.b	nFs3, nBb3, nFs3, nCs3, smpsNoAttack, nBb2, $1C, smpsNoAttack, $08, nRst, $58, nRst
000B0CDB 1880 0CBD 04B9 B4B9 B4B1+  	dc.b	$18, nRst, $0C, nC5, $04, nAb4, nEb4, nAb4, nEb4, nC4, nEb4, nC4
000B0CE7 ADB1 ADA8 A10C 8060 800C+  	dc.b	nAb3, nC4, nAb3, nEb3, nAb2, $0C, nRst, $60, nRst, $0C, nFs4, $04
000B0CF3 B2AF ABAF B2B7 AFAB A6AB+  	dc.b	nCs4, nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3, nFs3, nBb3, nFs3
000B0CFF A6E7 A31C                  	dc.b	nCs3, smpsNoAttack, nBb2, $1C
000B0D03 E6FA                       	smpsAlterVol        $FA
000B0D05 A060 E7A0 AC48 0804 8008+  	dc.b	nG2, $60, smpsNoAttack, nG2, nG3, $48, $08, $04, nRst, $08, nG3, $04
000B0D11 8008 AC04 22E7 1A08 0480+  	dc.b	nRst, $08, nG3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08, nG3
000B0D1D 0480 08A8 0422 E71A 0804+  	dc.b	$04, nRst, $08, nEb3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08
000B0D29 A804 8008 A704 2418 A0AC+  	dc.b	nEb3, $04, nRst, $08, nD3, $04, $24, $18, nG2, nG3, $48, $08
000B0D35 0408 0480 08AC 0422 E71A+  	dc.b	$04, $08, $04, nRst, $08, nG3, $04, $22, smpsNoAttack, $1A, $08, $04
000B0D41 8008 AC04 8008 AC04 2EE7+  	dc.b	nRst, $08, nG3, $04, nRst, $08, nG3, $04, $2E, smpsNoAttack, $0E, $08
000B0D4D 0480 08AC 0480 08AF 0424+  	dc.b	$04, nRst, $08, nG3, $04, nRst, $08, nBb3, $04, $24, nD4, $30
000B0D59 B160 AC18 ACAC 18AC        	dc.b	nC4, $60, nG3, $18, nG3, nG3, $18, nG3
000B0D61 E606                       	smpsAlterVol        $06
000B0D63 F6FE 0E                    	smpsJump            RRZ2_Jump00
000B0D66                            
000B0D66                            ; FM5 Data
000B0D66                            RRZ2_FM5:
000B0D6B 8010                       	dc.b	nRst, $10
000B0D6D E101                       	smpsAlterNote       $01
000B0D6F F6F8 DB                    	smpsJump            RRZ2_FM1
000B0D72                            
000B0D72                            ; PSG1 Data
000B0D72                            RRZ2_PSG1:
000B0D77 F507                       	smpsPSGvoice        stone_1D
000B0D79 B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000B0D85 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000B0D91 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000B0D9D 8008 B104 AF08 B104 8008+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04
000B0DA9 ACAF B1B8 0810             	dc.b	nG3, nBb3, nC4, nG4, $08, $10
000B0DAF F700 03FF BF               	smpsLoop            $00, $03, RRZ2_PSG1
000B0DB4 B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000B0DC0 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000B0DCC 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000B0DD8 8008 B104 AF08 B104 B8B6+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nG4, nF4, nG4, nF4
000B0DE4 B4B6 B4B3 B4B3 B1AF        	dc.b	nEb4, nF4, nEb4, nD4, nEb4, nD4, nC4, nBb3
000B0DEC F507                       	smpsPSGvoice        stone_26
000B0DEE B860 E7B8 1680 4AB8 60E7+  	dc.b	nG4, $60, smpsNoAttack, nG4, $16, nRst, $4A, nG4, $60, smpsNoAttack, nG4, $16
000B0DFA 804A                       	dc.b	nRst, $4A
000B0DFC                            
000B0DFC                            RRZ2_Loop0D:
000B0DFC B860 E7B8 1680 4ABB 60E7+  	dc.b	nG4, $60, smpsNoAttack, nG4, $16, nRst, $4A, nBb4, $60, smpsNoAttack, nBb4, $16
000B0E08 804A                       	dc.b	nRst, $4A
000B0E0A F700 02FF EE               	smpsLoop            $00, $02, RRZ2_Loop0D
000B0E0F BA60 E7BA 1680 4AB8 60E7+  	dc.b	nA4, $60, smpsNoAttack, nA4, $16, nRst, $4A, nG4, $60, smpsNoAttack, nG4, $16
000B0E1B 804A B860 E7B8 1680 4ABB+  	dc.b	nRst, $4A, nG4, $60, smpsNoAttack, nG4, $16, nRst, $4A, nBb4, $60, smpsNoAttack
000B0E27 BB16 804A                  	dc.b	nBb4, $16, nRst, $4A
000B0E2B                            
000B0E2B                            RRZ2_Loop0E:
000B0E2B F507                       	smpsPSGvoice        stone_23
000B0E2D B808 04B8 8008 B8B6 0480+  	dc.b	nG4, $08, $04, nG4, nRst, $08, nG4, nF4, $04, nRst, $08, nG4
000B0E39 0480 08B8 04B6 8008 B8BB+  	dc.b	$04, nRst, $08, nG4, $04, nF4, nRst, $08, nG4, nBb4, $04, nRst
000B0E45 08B8 0480 08B8 04B6 8008+  	dc.b	$08, nG4, $04, nRst, $08, nG4, $04, nF4, nRst, $08, nG4, nBb4
000B0E51 0480 08B6 0680 2E          	dc.b	$04, nRst, $08, nF4, $06, nRst, $2E
000B0E58 F700 02FF CF               	smpsLoop            $00, $02, RRZ2_Loop0E
000B0E5D                            
000B0E5D                            RRZ2_Loop0F:
000B0E5D F507                       	smpsPSGvoice        stone_1D
000B0E5F B908 0480 08B9 0480 08B9+  	dc.b	nAb4, $08, $04, nRst, $08, nAb4, $04, nRst, $08, nAb4, $04, nRst
000B0E6B 08B9 0430 E760 B708 0480+  	dc.b	$08, nAb4, $04, $30, smpsNoAttack, $60, nFs4, $08, $04, nRst, $08, nFs4
000B0E77 0480 08B7 0480 08B7 0430+  	dc.b	$04, nRst, $08, nFs4, $04, nRst, $08, nFs4, $04, $30, smpsNoAttack, $60
000B0E83 F700 02FF D6               	smpsLoop            $00, $02, RRZ2_Loop0F
000B0E88 8060 8030 B804 B1B8 BDB8+  	dc.b	nRst, $60, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000B0E94 B1B8 B10C 8030 B804 B1B8+  	dc.b	nC4, nG4, nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4
000B0EA0 BDB8 B1B8 B10C 8060 8060+  	dc.b	nC5, nG4, nC4, nG4, nC4, $0C, nRst, $60, nRst, $60, nRst, $60
000B0EAC 8030 B804 B1B8 BDB8 BDB8+  	dc.b	nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4, nC4, nG4
000B0EB8 B10C 8030 B804 B1B8 BDB8+  	dc.b	nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000B0EC4 B1B8 B10C 8060 B618 B3AF+  	dc.b	nC4, nG4, nC4, $0C, nRst, $60, nF4, $18, nD4, nBb3, nG3, nC3
000B0ED0 30AC A518 ACB4 BB          	dc.b	$30, nG3, nC3, $18, nG3, nEb4, nBb4
000B0ED7 F6FE 99                    	smpsJump            RRZ2_PSG1
000B0EDA                            
000B0EDA                            ; PSG2 Data
000B0EDA                            RRZ2_PSG2:
000B0EDF F507                       	smpsPSGvoice        stone_1D
000B0EE1                            
000B0EE1                            RRZ2_Loop09:
000B0EE1 AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000B0EED 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000B0EF9 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000B0F05 AC04 AA08 AC04 8008 AC04+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3
000B0F11 ACAF 08B3 10               	dc.b	nG3, nBb3, $08, nD4, $10
000B0F16 F700 03FF C7               	smpsLoop            $00, $03, RRZ2_Loop09
000B0F1B AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000B0F27 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000B0F33 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000B0F3F AC04 AA08 AC04 B4B3 B4B3+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nEb4, nD4, nEb4, nD4, nC4, nD4
000B0F4B B1AF B1AF ACAA             	dc.b	nC4, nBb3, nC4, nBb3, nG3, nF3
000B0F51 F507                       	smpsPSGvoice        stone_26
000B0F53 B160 E7B1 1680 4AB1 60E7+  	dc.b	nC4, $60, smpsNoAttack, nC4, $16, nRst, $4A, nC4, $60, smpsNoAttack, nC4, $16
000B0F5F 804A                       	dc.b	nRst, $4A
000B0F61                            
000B0F61                            RRZ2_Loop0A:
000B0F61 B160 E7B1 1680 4AB4 60E7+  	dc.b	nC4, $60, smpsNoAttack, nC4, $16, nRst, $4A, nEb4, $60, smpsNoAttack, nEb4, $16
000B0F6D 804A                       	dc.b	nRst, $4A
000B0F6F F700 02FF EE               	smpsLoop            $00, $02, RRZ2_Loop0A
000B0F74 B660 E7B6 1680 4AB4 60E7+  	dc.b	nF4, $60, smpsNoAttack, nF4, $16, nRst, $4A, nEb4, $60, smpsNoAttack, nEb4, $16
000B0F80 804A B160 E7B1 1680 4AB4+  	dc.b	nRst, $4A, nC4, $60, smpsNoAttack, nC4, $16, nRst, $4A, nEb4, $60, smpsNoAttack
000B0F8C B416 804A                  	dc.b	nEb4, $16, nRst, $4A
000B0F90                            
000B0F90                            RRZ2_Loop0B:
000B0F90 F507                       	smpsPSGvoice        stone_23
000B0F92 B408 04B4 8008 B4B3 0480+  	dc.b	nEb4, $08, $04, nEb4, nRst, $08, nEb4, nD4, $04, nRst, $08, nEb4
000B0F9E 0480 08B4 04B3 8008 B4B8+  	dc.b	$04, nRst, $08, nEb4, $04, nD4, nRst, $08, nEb4, nG4, $04, nRst
000B0FAA 08B4 0480 08B4 04B3 8008+  	dc.b	$08, nEb4, $04, nRst, $08, nEb4, $04, nD4, nRst, $08, nEb4, nG4
000B0FB6 0480 08B3 0680 2E          	dc.b	$04, nRst, $08, nD4, $06, nRst, $2E
000B0FBD F700 02FF CF               	smpsLoop            $00, $02, RRZ2_Loop0B
000B0FC2                            
000B0FC2                            RRZ2_Loop0C:
000B0FC2 F507                       	smpsPSGvoice        stone_1D
000B0FC4 B208 0480 08B2 0480 08B2+  	dc.b	nCs4, $08, $04, nRst, $08, nCs4, $04, nRst, $08, nCs4, $04, nRst
000B0FD0 08B2 04B1 30E7 60B0 0804+  	dc.b	$08, nCs4, $04, nC4, $30, smpsNoAttack, $60, nB3, $08, $04, nRst, $08
000B0FDC B004 8008 B004 8008 B004+  	dc.b	nB3, $04, nRst, $08, nB3, $04, nRst, $08, nB3, $04, nBb3, $30
000B0FE8 E760                       	dc.b	smpsNoAttack, $60
000B0FEA F700 02FF D4               	smpsLoop            $00, $02, RRZ2_Loop0C
000B0FEF 800D                       	dc.b	nRst, $0D
000B0FF1 EC02                       	smpsPSGAlterVol     $02
000B0FF3 8060 8030 B804 B1B8 BDB8+  	dc.b	nRst, $60, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000B0FFF B1B8 B10C 8030 B804 B1B8+  	dc.b	nC4, nG4, nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4
000B100B BDB8 B1B8 B10C 8060 8060+  	dc.b	nC5, nG4, nC4, nG4, nC4, $0C, nRst, $60, nRst, $60, nRst, $60
000B1017 8030 B804 B1B8 BDB8 BDB8+  	dc.b	nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4, nC4, nG4
000B1023 B10C 8030 B804 B1B8 BDB8+  	dc.b	nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000B102F B1B8 B10C 8060 B618 B3AF+  	dc.b	nC4, nG4, nC4, $0C, nRst, $60, nF4, $18, nD4, nBb3, nG3, nC3
000B103B 30AC A518 ACB4 BB0B        	dc.b	$30, nG3, nC3, $18, nG3, nEb4, nBb4, $0B
000B1043 ECFE                       	smpsPSGAlterVol     $FE
000B1045 F6FE 93                    	smpsJump            RRZ2_PSG2
000B1048                            
000B1048                            ; PSG3 Data
000B1048                            RRZ2_PSG3:
000B1048 F3E7                       	smpsPSGform         $E7
000B104A 8060 80                    	dc.b	nRst, $60, nRst
000B104D F800 00                    	smpsCall            RRZ2_Call00
000B1050 F800 00                    	smpsCall            RRZ2_Call00
000B1053 F800 00                    	smpsCall            RRZ2_Call01
000B1056                            
000B1056                            RRZ2_Jump03:
000B1056 F800 00                    	smpsCall            RRZ2_Call00
000B1059 F6FF FB                    	smpsJump            RRZ2_Jump03
000B105C                            
000B105C                            RRZ2_Call00:
000B105C F502                       	smpsPSGvoice        stone_0F
000B105E B104 8080 B180 B1          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nC4
000B1065 F700 10FF F3               	smpsLoop            $00, $10, RRZ2_Call00
000B106A E3                         	smpsReturn
000B106B                            
000B106B                            RRZ2_Call01:
000B106B F502                       	smpsPSGvoice        stone_0F
000B106D B104 8080 B180 B1          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nC4
000B1074 F502                       	smpsPSGvoice        stone_0F
000B1076 B104 8080 B180 B1          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nC4
000B107D F502                       	smpsPSGvoice        stone_0F
000B107F B104 8080 B180 80          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nRst
000B1086 F503                       	smpsPSGvoice        stone_04
000B1088 B10C                       	dc.b	nC4, $0C
000B108A F502                       	smpsPSGvoice        stone_0F
000B108C B104 8080                  	dc.b	nC4, $04, nRst, nRst
000B1090 E3                         	smpsReturn
000B1091                            
000B1091                            ; DAC Data
000B1091                            RRZ2_DAC:
000B1091 8160 8048 810C 8181 6080+  	dc.b	dKick, $60, nRst, $48, dKick, $0C, dKick, dKick, $60, nRst, $48, dHiTimpani
000B109D 0488 8A8B 8B8B 8160 8048+  	dc.b	$04, dHiTimpani, dLowTimpani, dFloorTimpani, dFloorTimpani, dFloorTimpani, dKick, $60, nRst, $48, dKick, $0C
000B10A9 8181 6080 0882 0480 8080+  	dc.b	dKick, dKick, $60, nRst, $08, dSnare, $04, nRst, nRst, nRst, dSnare, nRst
000B10B5 8080 8080 8280 8082 8080+  	dc.b	nRst, nRst, nRst, nRst, dSnare, nRst, nRst, dSnare, nRst, nRst, dFloorTimpani, $04
000B10C1 8B8B 8B8B 8B81 0480 8080+  	dc.b	dFloorTimpani, dFloorTimpani, dFloorTimpani, dFloorTimpani, dFloorTimpani, dKick, $04, nRst, nRst, nRst, nRst, nRst
000B10CD 8280 8080 8080 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, dKick, nRst, nRst
000B10D9 8280 8080 8080 8180 8080+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, nRst, nRst, dKick
000B10E5 8280 8080 8081 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst, dKick, nRst, nRst
000B10F1 8280 8080 8080 8180 8080+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, nRst, nRst, nRst
000B10FD 8280 8080 8080 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, dKick, nRst, nRst
000B1109 8280 8080 8080 8180 8080+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, nRst, nRst, nRst
000B1115 8280 8080 8081 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst, dKick, nRst, nRst
000B1121 8280 8082 8282             	dc.b	dSnare, nRst, nRst, dSnare, dSnare, dSnare
000B1127                            
000B1127                            RRZ2_Loop00:
000B1127 8104 8080 8080 8182 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B1133 8181 8080 8180 8082 8080+  	dc.b	dKick, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B113F 8081 8080 8080 8182 8080+  	dc.b	nRst, dKick, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B114B 8081 8080 8180 8082 8080+  	dc.b	nRst, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, nRst
000B1157 80                         	dc.b	nRst
000B1158 F700 07FF CB               	smpsLoop            $00, $07, RRZ2_Loop00
000B115D 8104 8080 8080 8182 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B1169 8181 8080 8180 8082 8080+  	dc.b	dKick, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B1175 8081 8080 8080 8182 8080+  	dc.b	nRst, dKick, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B1181 8081 8181 8180 8082 8080+  	dc.b	nRst, dKick, dKick, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, dSnare, dSnare
000B118D 82                         	dc.b	dSnare
000B118E                            
000B118E                            RRZ2_Loop01:
000B118E 8104 8080 8080 8182 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B119A 8181 8080 8180 8082 8080+  	dc.b	dKick, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B11A6 8081 8080 8080 8182 8080+  	dc.b	nRst, dKick, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B11B2 8081 8080 8180 8082 8080+  	dc.b	nRst, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, nRst
000B11BE 80                         	dc.b	nRst
000B11BF F700 02FF CB               	smpsLoop            $00, $02, RRZ2_Loop01
000B11C4 8104 8080 8180 8180 8082+  	dc.b	dKick, $04, nRst, nRst, dKick, nRst, dKick, nRst, nRst, dSnare, nRst, nRst
000B11D0 8181 3081 0480 8081 8081+  	dc.b	dKick, dKick, $30, dKick, $04, nRst, nRst, dKick, nRst, dKick, nRst, nRst
000B11DC 8180 8081 8118 8181 0480+  	dc.b	dKick, nRst, nRst, dKick, dKick, $18, dKick, dKick, $04, nRst, nRst, dKick
000B11E8 8081 8080 8280 8081 8180+  	dc.b	nRst, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, dKick, nRst, nRst, nRst
000B11F4 8081 8280 8080 8080 8180+  	dc.b	nRst, dKick, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, dSnare, nRst
000B1200 8080 8280 8080 8080 8180+  	dc.b	nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, dKick, dSnare
000B120C 8080 8180 8182 8080 8104+  	dc.b	nRst, nRst, dKick, nRst, dKick, dSnare, nRst, nRst, dKick, $04, nRst, nRst
000B1218 8080 8082 8080 8080 8081+  	dc.b	nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B1224 8180 8082 8080 8080 8081+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B1230 8080 8182 8080 8080 8181+  	dc.b	nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst
000B123C 8180 8082 8080 8080 8081+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B1248 8080 8082 8080 8080 8081+  	dc.b	nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B1254 8180 8082 8080 8080 8081+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B1260 8080 8082 8080 8080 8181+  	dc.b	nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst
000B126C 8180 8082 8080 8282 8281+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, dSnare, dSnare, dSnare, dKick, $04, nRst
000B1278 8080 8080 8280 8080 8081+  	dc.b	nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B1284 8181 8080 8280 8080 8080+  	dc.b	dKick, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, $04
000B1290 8080 8080 8082 8080 8080+  	dc.b	nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick, nRst
000B129C 8081 8180 8082 8080 8A8B+  	dc.b	nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, dLowTimpani, dFloorTimpani, dFloorTimpani, dKick
000B12A8 0480 8080 8080 8280 8080+  	dc.b	$04, nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick
000B12B4 8080 8181 8080 8280 8080+  	dc.b	nRst, nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst
000B12C0                            
000B12C0                            RRZ2_Loop02:
000B12C0 8104 8080 8080 8082 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B12CC 8180 8081 8180 8082 8080+  	dc.b	dKick, nRst, nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B12D8 80                         	dc.b	nRst
000B12D9 F700 07FF E3               	smpsLoop            $00, $07, RRZ2_Loop02
000B12DE 8104 8080 8080 8082 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B12EA 8180 8081 8180 8082 8080+  	dc.b	dKick, nRst, nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, nRst
000B12F6 8181 1818 8204 0404 0404+  	dc.b	dKick, dKick, $18, $18, dSnare, $04, $04, $04, $04, $04, $04, $04
000B1302 0404 0404 04               	dc.b	$04, $04, $04, $04, $04
000B1307 F6FD 88                    	smpsJump            RRZ2_DAC
000B130A                            
000B130A                            RRZ2_Voices:
000B130A                            ;	Voice $00
000B130A                            ;	$3A
000B130A                            ;	$3F, $73, $73, $31, 	$9F, $5F, $54, $17, 	$03, $14, $0A, $05
000B130A                            ;	$01, $05, $01, $01, 	$FF, $EF, $8F, $FF, 	$29, $39, $23, $00
000B130A                            	smpsVcAlgorithm     $02
000B130A                            	smpsVcFeedback      $07
000B130A                            	smpsVcUnusedBits    $00
000B130A                            	smpsVcDetune        $03, $07, $07, $03
000B130A                            	smpsVcCoarseFreq    $01, $03, $03, $0F
000B130A                            	smpsVcRateScale     $00, $01, $01, $02
000B130A                            	smpsVcAttackRate    $17, $14, $1F, $1F
000B130A                            	smpsVcAmpMod        $00, $00, $00, $00
000B130A                            	smpsVcDecayRate1    $05, $0A, $14, $03
000B130A                            	smpsVcDecayRate2    $01, $01, $05, $01
000B130A                            	smpsVcDecayLevel    $0F, $08, $0E, $0F
000B130A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1323                            
000B1323                            ;	Voice $01
000B1323                            ;	$3C
000B1323                            ;	$01, $00, $00, $00, 	$1F, $1F, $15, $1F, 	$11, $03, $12, $05
000B1323                            ;	$07, $04, $09, $02, 	$55, $3A, $25, $1A, 	$1A, $00, $07, $00
000B1323                            	smpsVcAlgorithm     $04
000B1323                            	smpsVcFeedback      $07
000B1323                            	smpsVcUnusedBits    $00
000B1323                            	smpsVcDetune        $00, $00, $00, $00
000B1323                            	smpsVcCoarseFreq    $00, $00, $00, $01
000B1323                            	smpsVcRateScale     $00, $00, $00, $00
000B1323                            	smpsVcAttackRate    $1F, $15, $1F, $1F
000B1323                            	smpsVcAmpMod        $00, $00, $00, $00
000B1323                            	smpsVcDecayRate1    $05, $12, $03, $11
000B1323                            	smpsVcDecayRate2    $02, $09, $04, $07
000B1323                            	smpsVcDecayLevel    $01, $02, $03, $05
000B1323                            	smpsVcReleaseRate   $0A, $05, $0A, $05
000B133C                            
000B133C                            ;	Voice $02
000B133C                            ;	$3A
000B133C                            ;	$73, $04, $11, $31, 	$9F, $DF, $9F, $9F, 	$05, $05, $03, $0A
000B133C                            ;	$03, $02, $03, $02, 	$6F, $6F, $5F, $7F, 	$1C, $20, $1E, $00
000B133C                            	smpsVcAlgorithm     $02
000B133C                            	smpsVcFeedback      $07
000B133C                            	smpsVcUnusedBits    $00
000B133C                            	smpsVcDetune        $03, $01, $00, $07
000B133C                            	smpsVcCoarseFreq    $01, $01, $04, $03
000B133C                            	smpsVcRateScale     $02, $02, $03, $02
000B133C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B133C                            	smpsVcAmpMod        $00, $00, $00, $00
000B133C                            	smpsVcDecayRate1    $0A, $03, $05, $05
000B133C                            	smpsVcDecayRate2    $02, $03, $02, $03
000B133C                            	smpsVcDecayLevel    $07, $05, $06, $06
000B133C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1355                            
000B1355                            ;	Voice $03
000B1355                            ;	$3E
000B1355                            ;	$07, $01, $02, $0A, 	$1F, $1F, $1F, $1F, 	$03, $06, $00, $00
000B1355                            ;	$08, $06, $07, $0C, 	$15, $0A, $0A, $0A, 	$20, $05, $06, $08
000B1355                            	smpsVcAlgorithm     $06
000B1355                            	smpsVcFeedback      $07
000B1355                            	smpsVcUnusedBits    $00
000B1355                            	smpsVcDetune        $00, $00, $00, $00
000B1355                            	smpsVcCoarseFreq    $0A, $02, $01, $07
000B1355                            	smpsVcRateScale     $00, $00, $00, $00
000B1355                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1355                            	smpsVcAmpMod        $00, $00, $00, $00
000B1355                            	smpsVcDecayRate1    $00, $00, $06, $03
000B1355                            	smpsVcDecayRate2    $0C, $07, $06, $08
000B1355                            	smpsVcDecayLevel    $00, $00, $00, $01
000B1355                            	smpsVcReleaseRate   $0A, $0A, $0A, $05
000B136E                            
000B136E                            ;	Voice $04
000B136E                            ;	$3C
000B136E                            ;	$71, $71, $11, $11, 	$17, $1E, $19, $1E, 	$04, $01, $07, $01
000B136E                            ;	$00, $00, $00, $00, 	$F7, $F8, $F7, $F8, 	$1E, $00, $14, $00
000B136E                            	smpsVcAlgorithm     $04
000B136E                            	smpsVcFeedback      $07
000B136E                            	smpsVcUnusedBits    $00
000B136E                            	smpsVcDetune        $01, $01, $07, $07
000B136E                            	smpsVcCoarseFreq    $01, $01, $01, $01
000B136E                            	smpsVcRateScale     $00, $00, $00, $00
000B136E                            	smpsVcAttackRate    $1E, $19, $1E, $17
000B136E                            	smpsVcAmpMod        $00, $00, $00, $00
000B136E                            	smpsVcDecayRate1    $01, $07, $01, $04
000B136E                            	smpsVcDecayRate2    $00, $00, $00, $00
000B136E                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B136E                            	smpsVcReleaseRate   $08, $07, $08, $07
000B1387                            
000B1387                            ;	Voice $05
000B1387                            ;	$16
000B1387                            ;	$7A, $74, $3C, $31, 	$1F, $1F, $1F, $1F, 	$0A, $08, $0C, $0A
000B1387                            ;	$07, $0A, $07, $05, 	$2F, $AF, $AF, $5F, 	$14, $05, $0A, $00
000B1387                            	smpsVcAlgorithm     $06
000B1387                            	smpsVcFeedback      $02
000B1387                            	smpsVcUnusedBits    $00
000B1387                            	smpsVcDetune        $03, $03, $07, $07
000B1387                            	smpsVcCoarseFreq    $01, $0C, $04, $0A
000B1387                            	smpsVcRateScale     $00, $00, $00, $00
000B1387                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1387                            	smpsVcAmpMod        $00, $00, $00, $00
000B1387                            	smpsVcDecayRate1    $0A, $0C, $08, $0A
000B1387                            	smpsVcDecayRate2    $05, $07, $0A, $07
000B1387                            	smpsVcDecayLevel    $05, $0A, $0A, $02
000B1387                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B13A0                            
000B13A0                            
000B13A0                            		even				
000B13A0                            Music9B:		incbin	"sound/music/Mus9B - TTZ BF US.bin"
000B1F82                            		even
000B1F82                            Music9C:		include	"sound/music/Mus9C - Tribute.asm"
000B1F82                            Tribute_Header:
000B1F82                            	smpsHeaderStartSong 3
000B1F84 0603                       	smpsHeaderChan      $06, $03
000B1F86 0106                       	smpsHeaderTempo     $01, $06
000B1F88                            
000B1F8C 0000 000D                  	smpsHeaderFM        Tribute_FM1,	$00, $0D
000B1F90 0000 0016                  	smpsHeaderFM        Tribute_FM2,	$00, $16
000B1F94 0000 0016                  	smpsHeaderFM        Tribute_FM3,	$00, $16
000B1F98 0000 0016                  	smpsHeaderFM        Tribute_FM4,	$00, $16
000B1F9C 0000 0C15                  	smpsHeaderFM        Tribute_FM5,	$0C, $15
000B1FA0                            ;	smpsHeaderFM        Tribute_FM6,	$0C, $17
000B1FB2                            
000B1FB2                            ; FM1 Data
000B1FB2                            Tribute_FM1:
000B1FB2 EF00                       	smpsSetvoice        $00
000B1FB4 F800 00                    	smpsCall            Tribute_Call05
000B1FB7 E712 9B06 8024 9B06 8080+  	dc.b	smpsNoAttack, $12, nD2, $06, nRst, $24, nD2, $06, nRst, nRst, nD2, nRst
000B1FC3 9BE7 069B 06A7 9BA7 9B80+  	dc.b	nD2, smpsNoAttack, $06, nD2, $06, nD3, nD2, nD3, nD2, nRst, nD2, $0C
000B1FCF 06A7 9B99 9A9B 9E          	dc.b	$06, nD3, nD2, nC2, nCs2, nD2, nF2
000B1FD6 F800 00                    	smpsCall            Tribute_Call05
000B1FD9 E712 9B06 8024 9B06 8080+  	dc.b	smpsNoAttack, $12, nD2, $06, nRst, $24, nD2, $06, nRst, nRst, nD2, nRst
000B1FE5 94                         	dc.b	nG1
000B1FE6 EA09                       	smpsSetTempoMod     $09
000B1FE8 E760 E748 8018             	dc.b	smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B1FEE                            
000B1FEE                            Tribute_Loop05:
000B1FEE 9918 0C0C 1206 80A5 8098+  	dc.b	nC2, $18, $0C, $0C, $12, $06, nRst, nC3, nRst, nB1, smpsNoAttack, $18
000B1FFA 0C0C 120C A006 940C 9618+  	dc.b	$0C, $0C, $12, $0C, nG2, $06, nG1, $0C, nA1, $18, $0C, $0C
000B2006 1206 80A2 8094 E70C 0C0C+  	dc.b	$12, $06, nRst, nA2, nRst, nG1, smpsNoAttack, $0C, $0C, $0C, $0C, $0C
000B2012 0C0C 999B 180C 0C12 0680+  	dc.b	$0C, $0C, nC2, nD2, $18, $0C, $0C, $12, $06, nRst, nD3, nRst
000B201E 97E7 0C0C 0C0C 1212 A306+  	dc.b	nBb1, smpsNoAttack, $0C, $0C, $0C, $0C, $12, $12, nBb2, $06, nRst, nA1
000B202A 180C 0C12 0680 A280 92E7+  	dc.b	$18, $0C, $0C, $12, $06, nRst, nA2, nRst, nF1, smpsNoAttack, $0C, $0C
000B2036 0C0C 910C 0C0C 9B          	dc.b	$0C, $0C, nE1, $0C, $0C, $0C, nD2
000B203D F700 02FF AD               	smpsLoop            $00, $02, Tribute_Loop05
000B2042 9624 9530 940C E724 9330+  	dc.b	nA1, $24, nAb1, $30, nG1, $0C, smpsNoAttack, $24, nFs1, $30, nF1, $0C
000B204E E74E 8006 940C E760        	dc.b	smpsNoAttack, $4E, nRst, $06, nG1, $0C, smpsNoAttack, $60
000B2056 F800 00                    	smpsCall            Tribute_Call00
000B2059 F2                         	smpsStop
000B205A                            
000B205A                            Tribute_Call05:
000B205A 9B12 0680 249B 0680 809B+  	dc.b	nD2, $12, $06, nRst, $24, nD2, $06, nRst, nRst, nD2, nRst, nD2
000B2066 E712 9B06 801E A706 9B80+  	dc.b	smpsNoAttack, $12, nD2, $06, nRst, $1E, nD3, $06, nD2, nRst, nRst, nD2
000B2072 809B                       	dc.b	nRst, nD2
000B2074 E3                         	smpsReturn
000B2075                            
000B2075                            Tribute_Call00:
000B2075 8006 999B A09E 9D94 99E7+  	dc.b	nRst, $06, nC2, nD2, nG2, nF2, nE2, nG1, nC2, smpsNoAttack, $06, nG2
000B2081 9EA5 A0A5 A7AC E706 9E9D+  	dc.b	nF2, nC3, nG2, nC3, nD3, nG3, smpsNoAttack, $06, nF2, nE2, nC2, nF1
000B208D 9496 99E7 06               	dc.b	nG1, nA1, nC2, smpsNoAttack, $06
000B2092 E3                         	smpsReturn
000B2093                            
000B2093                            ; FM2 Data
000B2093                            Tribute_FM2:
000B2093 EF01                       	smpsSetvoice        $01
000B2095 B512 B306                  	dc.b	nE4, $12, nD4, $06
000B2099 E60A                       	smpsFMAlterVol      $0A
000B209B 0680                       	dc.b	$06, nRst
000B209D E6F6                       	smpsFMAlterVol      $F6
000B209F B8                         	dc.b	nG4
000B20A0 E60A                       	smpsFMAlterVol      $0A
000B20A2 0680                       	dc.b	$06, nRst
000B20A4 E6F6                       	smpsFMAlterVol      $F6
000B20A6 B6B5                       	dc.b	nF4, nE4
000B20A8 E60A                       	smpsFMAlterVol      $0A
000B20AA 06                         	dc.b	$06
000B20AB E6F6                       	smpsFMAlterVol      $F6
000B20AD B1                         	dc.b	nC4
000B20AE E60A                       	smpsFMAlterVol      $0A
000B20B0 06                         	dc.b	$06
000B20B1 E6F6                       	smpsFMAlterVol      $F6
000B20B3 B3                         	dc.b	nD4
000B20B4 EF02                       	smpsSetvoice        $02
000B20B6 E918                       	smpsAlterPitch      $18
000B20B8 F800 00                    	smpsCall            Tribute_Call04
000B20BB EF01                       	smpsSetvoice        $01
000B20BD E9E8                       	smpsAlterPitch      $E8
000B20BF F800 00                    	smpsCall            Tribute_Call04
000B20C2 B406 E712 18B6 1818        	dc.b	nEb4, $06, smpsNoAttack, $12, $18, nF4, $18, $18
000B20CA E60A                       	smpsFMAlterVol      $0A
000B20CC 06                         	dc.b	$06
000B20CD E6F6                       	smpsFMAlterVol      $F6
000B20CF B512 B306                  	dc.b	nE4, $12, nD4, $06
000B20D3 E60A                       	smpsFMAlterVol      $0A
000B20D5 0680                       	dc.b	$06, nRst
000B20D7 E6F6                       	smpsFMAlterVol      $F6
000B20D9 B8                         	dc.b	nG4
000B20DA E60A                       	smpsFMAlterVol      $0A
000B20DC 0680                       	dc.b	$06, nRst
000B20DE E6F6                       	smpsFMAlterVol      $F6
000B20E0 B6B5                       	dc.b	nF4, nE4
000B20E2 E60A                       	smpsFMAlterVol      $0A
000B20E4 06                         	dc.b	$06
000B20E5 E6F6                       	smpsFMAlterVol      $F6
000B20E7 B1                         	dc.b	nC4
000B20E8 E60A                       	smpsFMAlterVol      $0A
000B20EA 06                         	dc.b	$06
000B20EB E6F6                       	smpsFMAlterVol      $F6
000B20ED B3                         	dc.b	nD4
000B20EE EF02                       	smpsSetvoice        $02
000B20F0 E918                       	smpsAlterPitch      $18
000B20F2 F800 00                    	smpsCall            Tribute_Call04
000B20F5 EF01                       	smpsSetvoice        $01
000B20F7 E9E8                       	smpsAlterPitch      $E8
000B20F9 F800 00                    	smpsCall            Tribute_Call04
000B20FC B106 E760 E748 8018        	dc.b	nC4, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B2104                            
000B2104                            Tribute_Loop04:
000B2104 8018 B512                  	dc.b	nRst, $18, nE4, $12
000B2108 E60A                       	smpsFMAlterVol      $0A
000B210A 06                         	dc.b	$06
000B210B E6F6                       	smpsFMAlterVol      $F6
000B210D B50C                       	dc.b	nE4, $0C
000B210F E60A                       	smpsFMAlterVol      $0A
000B2111 06                         	dc.b	$06
000B2112 E6F6                       	smpsFMAlterVol      $F6
000B2114 06                         	dc.b	$06
000B2115 E60A                       	smpsFMAlterVol      $0A
000B2117 06                         	dc.b	$06
000B2118 E6F6                       	smpsFMAlterVol      $F6
000B211A 06                         	dc.b	$06
000B211B E60A                       	smpsFMAlterVol      $0A
000B211D 06                         	dc.b	$06
000B211E E6F6                       	smpsFMAlterVol      $F6
000B2120 B3E7 60                    	dc.b	nD4, smpsNoAttack, $60
000B2123 F700 03FF DD               	smpsLoop            $00, $03, Tribute_Loop04
000B2128 8018 B512                  	dc.b	nRst, $18, nE4, $12
000B212C E60A                       	smpsFMAlterVol      $0A
000B212E 06                         	dc.b	$06
000B212F E6F6                       	smpsFMAlterVol      $F6
000B2131 B50C                       	dc.b	nE4, $0C
000B2133 E60A                       	smpsFMAlterVol      $0A
000B2135 06                         	dc.b	$06
000B2136 E6F6                       	smpsFMAlterVol      $F6
000B2138 06                         	dc.b	$06
000B2139 E60A                       	smpsFMAlterVol      $0A
000B213B 06                         	dc.b	$06
000B213C E6F6                       	smpsFMAlterVol      $F6
000B213E 06                         	dc.b	$06
000B213F E60A                       	smpsFMAlterVol      $0A
000B2141 06                         	dc.b	$06
000B2142 E6F6                       	smpsFMAlterVol      $F6
000B2144 B5E7 30B3 18B8             	dc.b	nE4, smpsNoAttack, $30, nD4, $18, nG4
000B214A F701 02FF B6               	smpsLoop            $01, $02, Tribute_Loop04
000B214F B51E                       	dc.b	nE4, $1E
000B2151 E60A                       	smpsFMAlterVol      $0A
000B2153 06                         	dc.b	$06
000B2154 E6F6                       	smpsFMAlterVol      $F6
000B2156 B62A                       	dc.b	nF4, $2A
000B2158 E60A                       	smpsFMAlterVol      $0A
000B215A 06                         	dc.b	$06
000B215B E6F6                       	smpsFMAlterVol      $F6
000B215D B52A                       	dc.b	nE4, $2A
000B215F E60A                       	smpsFMAlterVol      $0A
000B2161 06                         	dc.b	$06
000B2162 E6F6                       	smpsFMAlterVol      $F6
000B2164 B52A                       	dc.b	nE4, $2A
000B2166 E60A                       	smpsFMAlterVol      $0A
000B2168 06                         	dc.b	$06
000B2169 E6F6                       	smpsFMAlterVol      $F6
000B216B B50C E74E                  	dc.b	nE4, $0C, smpsNoAttack, $4E
000B216F E60A                       	smpsFMAlterVol      $0A
000B2171 06                         	dc.b	$06
000B2172 E6F6                       	smpsFMAlterVol      $F6
000B2174 B30C E760                  	dc.b	nD4, $0C, smpsNoAttack, $60
000B2178 F800 00                    	smpsCall            Tribute_Call03
000B217B F2                         	smpsStop
000B217C                            
000B217C                            Tribute_Call04:
000B217C B506 E712 B306             	dc.b	nE4, $06, smpsNoAttack, $12, nD4, $06
000B2182 E60A                       	smpsFMAlterVol      $0A
000B2184 0680                       	dc.b	$06, nRst
000B2186 E6F6                       	smpsFMAlterVol      $F6
000B2188 B8                         	dc.b	nG4
000B2189 E60A                       	smpsFMAlterVol      $0A
000B218B 0680                       	dc.b	$06, nRst
000B218D E6F6                       	smpsFMAlterVol      $F6
000B218F B6B5                       	dc.b	nF4, nE4
000B2191 E60A                       	smpsFMAlterVol      $0A
000B2193 06                         	dc.b	$06
000B2194 E6F6                       	smpsFMAlterVol      $F6
000B2196 B1                         	dc.b	nC4
000B2197 E60A                       	smpsFMAlterVol      $0A
000B2199 06                         	dc.b	$06
000B219A E6F6                       	smpsFMAlterVol      $F6
000B219C B3                         	dc.b	nD4
000B219D E3                         	smpsReturn
000B219E                            
000B219E                            Tribute_Call03:
000B219E E918                       	smpsAlterPitch      $18
000B21A0 8006 999B A09E 9D94 99     	dc.b	nRst, $06, nC2, nD2, nG2, nF2, nE2, nG1, nC2
000B21A9 E60A                       	smpsFMAlterVol      $0A
000B21AB 06                         	dc.b	$06
000B21AC E6F6                       	smpsFMAlterVol      $F6
000B21AE A09E A5A0 A5A7 AC          	dc.b	nG2, nF2, nC3, nG2, nC3, nD3, nG3
000B21B5 E60A                       	smpsFMAlterVol      $0A
000B21B7 06                         	dc.b	$06
000B21B8 E6F6                       	smpsFMAlterVol      $F6
000B21BA 9E9D 9992 9496 99          	dc.b	nF2, nE2, nC2, nF1, nG1, nA1, nC2
000B21C1 E60A                       	smpsFMAlterVol      $0A
000B21C3 06                         	dc.b	$06
000B21C4 E6F6                       	smpsFMAlterVol      $F6
000B21C6 E9E8                       	smpsAlterPitch      $E8
000B21C8 E3                         	smpsReturn
000B21C9                            
000B21C9                            ; FM3 Data
000B21C9                            Tribute_FM3:
000B21C9 EF01                       	smpsSetvoice        $01
000B21CB B112 B006                  	dc.b	nC4, $12, nB3, $06
000B21CF E60A                       	smpsFMAlterVol      $0A
000B21D1 0680                       	dc.b	$06, nRst
000B21D3 E6F6                       	smpsFMAlterVol      $F6
000B21D5 B3                         	dc.b	nD4
000B21D6 E60A                       	smpsFMAlterVol      $0A
000B21D8 0680                       	dc.b	$06, nRst
000B21DA E6F6                       	smpsFMAlterVol      $F6
000B21DC B1B1                       	dc.b	nC4, nC4
000B21DE E60A                       	smpsFMAlterVol      $0A
000B21E0 06                         	dc.b	$06
000B21E1 E6F6                       	smpsFMAlterVol      $F6
000B21E3 AE                         	dc.b	nA3
000B21E4 E60A                       	smpsFMAlterVol      $0A
000B21E6 06                         	dc.b	$06
000B21E7 E6F6                       	smpsFMAlterVol      $F6
000B21E9 B0                         	dc.b	nB3
000B21EA EF02                       	smpsSetvoice        $02
000B21EC E918                       	smpsAlterPitch      $18
000B21EE E080                       	smpsPan             panLeft, $00
000B21F0 F800 00                    	smpsCall            Tribute_Call02
000B21F3 EF01                       	smpsSetvoice        $01
000B21F5 E9E8                       	smpsAlterPitch      $E8
000B21F7 E0C0                       	smpsPan             panCenter, $00
000B21F9 F800 00                    	smpsCall            Tribute_Call02
000B21FC AF06 E712 18B1 1818        	dc.b	nBb3, $06, smpsNoAttack, $12, $18, nC4, $18, $18
000B2204 E60A                       	smpsFMAlterVol      $0A
000B2206 06                         	dc.b	$06
000B2207 E6F6                       	smpsFMAlterVol      $F6
000B2209 B112 B006                  	dc.b	nC4, $12, nB3, $06
000B220D E60A                       	smpsFMAlterVol      $0A
000B220F 0680                       	dc.b	$06, nRst
000B2211 E6F6                       	smpsFMAlterVol      $F6
000B2213 B3                         	dc.b	nD4
000B2214 E60A                       	smpsFMAlterVol      $0A
000B2216 0680                       	dc.b	$06, nRst
000B2218 E6F6                       	smpsFMAlterVol      $F6
000B221A B1B1                       	dc.b	nC4, nC4
000B221C E60A                       	smpsFMAlterVol      $0A
000B221E 06                         	dc.b	$06
000B221F E6F6                       	smpsFMAlterVol      $F6
000B2221 AE                         	dc.b	nA3
000B2222 E60A                       	smpsFMAlterVol      $0A
000B2224 06                         	dc.b	$06
000B2225 E6F6                       	smpsFMAlterVol      $F6
000B2227 B0                         	dc.b	nB3
000B2228 EF02                       	smpsSetvoice        $02
000B222A E918                       	smpsAlterPitch      $18
000B222C E080                       	smpsPan             panLeft, $00
000B222E F800 00                    	smpsCall            Tribute_Call02
000B2231 EF01                       	smpsSetvoice        $01
000B2233 E9E8                       	smpsAlterPitch      $E8
000B2235 E0C0                       	smpsPan             panCenter, $00
000B2237 F800 00                    	smpsCall            Tribute_Call02
000B223A AE06 E760 E748 8018        	dc.b	nA3, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B2242                            
000B2242                            Tribute_Loop03:
000B2242 8018 B112                  	dc.b	nRst, $18, nC4, $12
000B2246 E60A                       	smpsFMAlterVol      $0A
000B2248 06                         	dc.b	$06
000B2249 E6F6                       	smpsFMAlterVol      $F6
000B224B 0C                         	dc.b	$0C
000B224C E60A                       	smpsFMAlterVol      $0A
000B224E 06                         	dc.b	$06
000B224F E6F6                       	smpsFMAlterVol      $F6
000B2251 06                         	dc.b	$06
000B2252 E60A                       	smpsFMAlterVol      $0A
000B2254 06                         	dc.b	$06
000B2255 E6F6                       	smpsFMAlterVol      $F6
000B2257 06                         	dc.b	$06
000B2258 E60A                       	smpsFMAlterVol      $0A
000B225A 06                         	dc.b	$06
000B225B E6F6                       	smpsFMAlterVol      $F6
000B225D B0E7 60                    	dc.b	nB3, smpsNoAttack, $60
000B2260 F700 02FF DE               	smpsLoop            $00, $02, Tribute_Loop03
000B2265 8018 B112                  	dc.b	nRst, $18, nC4, $12
000B2269 E60A                       	smpsFMAlterVol      $0A
000B226B 06                         	dc.b	$06
000B226C E6F6                       	smpsFMAlterVol      $F6
000B226E 0C                         	dc.b	$0C
000B226F E60A                       	smpsFMAlterVol      $0A
000B2271 06                         	dc.b	$06
000B2272 E6F6                       	smpsFMAlterVol      $F6
000B2274 06                         	dc.b	$06
000B2275 E60A                       	smpsFMAlterVol      $0A
000B2277 06                         	dc.b	$06
000B2278 E6F6                       	smpsFMAlterVol      $F6
000B227A 06                         	dc.b	$06
000B227B E60A                       	smpsFMAlterVol      $0A
000B227D 06                         	dc.b	$06
000B227E E6F6                       	smpsFMAlterVol      $F6
000B2280 AFE7 6080 18B1 12          	dc.b	nBb3, smpsNoAttack, $60, nRst, $18, nC4, $12
000B2287 E60A                       	smpsFMAlterVol      $0A
000B2289 06                         	dc.b	$06
000B228A E6F6                       	smpsFMAlterVol      $F6
000B228C 0C                         	dc.b	$0C
000B228D E60A                       	smpsFMAlterVol      $0A
000B228F 06                         	dc.b	$06
000B2290 E6F6                       	smpsFMAlterVol      $F6
000B2292 06                         	dc.b	$06
000B2293 E60A                       	smpsFMAlterVol      $0A
000B2295 06                         	dc.b	$06
000B2296 E6F6                       	smpsFMAlterVol      $F6
000B2298 06                         	dc.b	$06
000B2299 E60A                       	smpsFMAlterVol      $0A
000B229B 06                         	dc.b	$06
000B229C E6F6                       	smpsFMAlterVol      $F6
000B229E B1E7 30B0 18B3             	dc.b	nC4, smpsNoAttack, $30, nB3, $18, nD4
000B22A4 F701 02FF 9A               	smpsLoop            $01, $02, Tribute_Loop03
000B22A9 B11E                       	dc.b	nC4, $1E
000B22AB E60A                       	smpsFMAlterVol      $0A
000B22AD 06                         	dc.b	$06
000B22AE E6F6                       	smpsFMAlterVol      $F6
000B22B0 B12A                       	dc.b	nC4, $2A
000B22B2 E60A                       	smpsFMAlterVol      $0A
000B22B4 06                         	dc.b	$06
000B22B5 E6F6                       	smpsFMAlterVol      $F6
000B22B7 B12A                       	dc.b	nC4, $2A
000B22B9 E60A                       	smpsFMAlterVol      $0A
000B22BB 06                         	dc.b	$06
000B22BC E6F6                       	smpsFMAlterVol      $F6
000B22BE B12A                       	dc.b	nC4, $2A
000B22C0 E60A                       	smpsFMAlterVol      $0A
000B22C2 06                         	dc.b	$06
000B22C3 E6F6                       	smpsFMAlterVol      $F6
000B22C5 B10C E74E                  	dc.b	nC4, $0C, smpsNoAttack, $4E
000B22C9 E60A                       	smpsFMAlterVol      $0A
000B22CB 06                         	dc.b	$06
000B22CC E6F6                       	smpsFMAlterVol      $F6
000B22CE B00C E760                  	dc.b	nB3, $0C, smpsNoAttack, $60
000B22D2 E9F4                       	smpsAlterPitch      $F4
000B22D4 F8FE C8                    	smpsCall            Tribute_Call03
000B22D7 E90C                       	smpsAlterPitch      $0C
000B22D9 F2                         	smpsStop
000B22DA                            
000B22DA                            Tribute_Call02:
000B22DA B106 E712 B006             	dc.b	nC4, $06, smpsNoAttack, $12, nB3, $06
000B22E0 E60A                       	smpsFMAlterVol      $0A
000B22E2 0680                       	dc.b	$06, nRst
000B22E4 E6F6                       	smpsFMAlterVol      $F6
000B22E6 B3                         	dc.b	nD4
000B22E7 E60A                       	smpsFMAlterVol      $0A
000B22E9 0680                       	dc.b	$06, nRst
000B22EB E6F6                       	smpsFMAlterVol      $F6
000B22ED B1B1                       	dc.b	nC4, nC4
000B22EF E60A                       	smpsFMAlterVol      $0A
000B22F1 06                         	dc.b	$06
000B22F2 E6F6                       	smpsFMAlterVol      $F6
000B22F4 AE                         	dc.b	nA3
000B22F5 E60A                       	smpsFMAlterVol      $0A
000B22F7 06                         	dc.b	$06
000B22F8 E6F6                       	smpsFMAlterVol      $F6
000B22FA B0                         	dc.b	nB3
000B22FB E3                         	smpsReturn
000B22FC                            
000B22FC                            ; FM4 Data
000B22FC                            Tribute_FM4:
000B22FC EF01                       	smpsSetvoice        $01
000B22FE AC12 06                    	dc.b	nG3, $12, $06
000B2301 E60A                       	smpsFMAlterVol      $0A
000B2303 0680                       	dc.b	$06, nRst
000B2305 E6F6                       	smpsFMAlterVol      $F6
000B2307 AF                         	dc.b	nBb3
000B2308 E60A                       	smpsFMAlterVol      $0A
000B230A 0680                       	dc.b	$06, nRst
000B230C E6F6                       	smpsFMAlterVol      $F6
000B230E ACAC                       	dc.b	nG3, nG3
000B2310 E60A                       	smpsFMAlterVol      $0A
000B2312 06                         	dc.b	$06
000B2313 E6F6                       	smpsFMAlterVol      $F6
000B2315 AA                         	dc.b	nF3
000B2316 E60A                       	smpsFMAlterVol      $0A
000B2318 06                         	dc.b	$06
000B2319 E6F6                       	smpsFMAlterVol      $F6
000B231B AC                         	dc.b	nG3
000B231C EF02                       	smpsSetvoice        $02
000B231E E918                       	smpsAlterPitch      $18
000B2320 E040                       	smpsPan             panRight, $00
000B2322 F800 00                    	smpsCall            Tribute_Call01
000B2325 EF01                       	smpsSetvoice        $01
000B2327 E9E8                       	smpsAlterPitch      $E8
000B2329 E0C0                       	smpsPan             panCenter, $00
000B232B F800 00                    	smpsCall            Tribute_Call01
000B232E AC06 E712 18AE 1818        	dc.b	nG3, $06, smpsNoAttack, $12, $18, nA3, $18, $18
000B2336 E60A                       	smpsFMAlterVol      $0A
000B2338 06                         	dc.b	$06
000B2339 E6F6                       	smpsFMAlterVol      $F6
000B233B AC12 06                    	dc.b	nG3, $12, $06
000B233E E60A                       	smpsFMAlterVol      $0A
000B2340 0680                       	dc.b	$06, nRst
000B2342 E6F6                       	smpsFMAlterVol      $F6
000B2344 AF                         	dc.b	nBb3
000B2345 E60A                       	smpsFMAlterVol      $0A
000B2347 0680                       	dc.b	$06, nRst
000B2349 E6F6                       	smpsFMAlterVol      $F6
000B234B ACAC                       	dc.b	nG3, nG3
000B234D E60A                       	smpsFMAlterVol      $0A
000B234F 06                         	dc.b	$06
000B2350 E6F6                       	smpsFMAlterVol      $F6
000B2352 AA                         	dc.b	nF3
000B2353 E60A                       	smpsFMAlterVol      $0A
000B2355 06                         	dc.b	$06
000B2356 E6F6                       	smpsFMAlterVol      $F6
000B2358 AC                         	dc.b	nG3
000B2359 EF02                       	smpsSetvoice        $02
000B235B E918                       	smpsAlterPitch      $18
000B235D E040                       	smpsPan             panRight, $00
000B235F F800 00                    	smpsCall            Tribute_Call01
000B2362 EF01                       	smpsSetvoice        $01
000B2364 E9E8                       	smpsAlterPitch      $E8
000B2366 E0C0                       	smpsPan             panCenter, $00
000B2368 F800 00                    	smpsCall            Tribute_Call01
000B236B AA06 E760 E748 8018        	dc.b	nF3, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B2373                            
000B2373                            Tribute_Loop02:
000B2373 8018 AC12                  	dc.b	nRst, $18, nG3, $12
000B2377 E60A                       	smpsFMAlterVol      $0A
000B2379 06                         	dc.b	$06
000B237A E6F6                       	smpsFMAlterVol      $F6
000B237C 0C                         	dc.b	$0C
000B237D E60A                       	smpsFMAlterVol      $0A
000B237F 06                         	dc.b	$06
000B2380 E6F6                       	smpsFMAlterVol      $F6
000B2382 06                         	dc.b	$06
000B2383 E60A                       	smpsFMAlterVol      $0A
000B2385 06                         	dc.b	$06
000B2386 E6F6                       	smpsFMAlterVol      $F6
000B2388 06                         	dc.b	$06
000B2389 E60A                       	smpsFMAlterVol      $0A
000B238B 06                         	dc.b	$06
000B238C E6F6                       	smpsFMAlterVol      $F6
000B238E ACE7 60                    	dc.b	nG3, smpsNoAttack, $60
000B2391 F700 02FF DE               	smpsLoop            $00, $02, Tribute_Loop02
000B2396 8018 AC12                  	dc.b	nRst, $18, nG3, $12
000B239A E60A                       	smpsFMAlterVol      $0A
000B239C 06                         	dc.b	$06
000B239D E6F6                       	smpsFMAlterVol      $F6
000B239F 0C                         	dc.b	$0C
000B23A0 E60A                       	smpsFMAlterVol      $0A
000B23A2 06                         	dc.b	$06
000B23A3 E6F6                       	smpsFMAlterVol      $F6
000B23A5 06                         	dc.b	$06
000B23A6 E60A                       	smpsFMAlterVol      $0A
000B23A8 06                         	dc.b	$06
000B23A9 E6F6                       	smpsFMAlterVol      $F6
000B23AB 06                         	dc.b	$06
000B23AC E60A                       	smpsFMAlterVol      $0A
000B23AE 06                         	dc.b	$06
000B23AF E6F6                       	smpsFMAlterVol      $F6
000B23B1 AAE7 6080 18AC 12          	dc.b	nF3, smpsNoAttack, $60, nRst, $18, nG3, $12
000B23B8 E60A                       	smpsFMAlterVol      $0A
000B23BA 06                         	dc.b	$06
000B23BB E6F6                       	smpsFMAlterVol      $F6
000B23BD 0C                         	dc.b	$0C
000B23BE E60A                       	smpsFMAlterVol      $0A
000B23C0 06                         	dc.b	$06
000B23C1 E6F6                       	smpsFMAlterVol      $F6
000B23C3 06                         	dc.b	$06
000B23C4 E60A                       	smpsFMAlterVol      $0A
000B23C6 06                         	dc.b	$06
000B23C7 E6F6                       	smpsFMAlterVol      $F6
000B23C9 06                         	dc.b	$06
000B23CA E60A                       	smpsFMAlterVol      $0A
000B23CC 06                         	dc.b	$06
000B23CD E6F6                       	smpsFMAlterVol      $F6
000B23CF AEE7 30AD 18B0             	dc.b	nA3, smpsNoAttack, $30, nAb3, $18, nB3
000B23D5 F701 02FF 9A               	smpsLoop            $01, $02, Tribute_Loop02
000B23DA AC1E                       	dc.b	nG3, $1E
000B23DC E60A                       	smpsFMAlterVol      $0A
000B23DE 06                         	dc.b	$06
000B23DF E6F6                       	smpsFMAlterVol      $F6
000B23E1 AD2A                       	dc.b	nAb3, $2A
000B23E3 E60A                       	smpsFMAlterVol      $0A
000B23E5 06                         	dc.b	$06
000B23E6 E6F6                       	smpsFMAlterVol      $F6
000B23E8 AC2A                       	dc.b	nG3, $2A
000B23EA E60A                       	smpsFMAlterVol      $0A
000B23EC 06                         	dc.b	$06
000B23ED E6F6                       	smpsFMAlterVol      $F6
000B23EF AE2A                       	dc.b	nA3, $2A
000B23F1 E60A                       	smpsFMAlterVol      $0A
000B23F3 06                         	dc.b	$06
000B23F4 E6F6                       	smpsFMAlterVol      $F6
000B23F6 AE0C E74E                  	dc.b	nA3, $0C, smpsNoAttack, $4E
000B23FA E60A                       	smpsFMAlterVol      $0A
000B23FC 06                         	dc.b	$06
000B23FD E6F6                       	smpsFMAlterVol      $F6
000B23FF AC0C E760 8060             	dc.b	nG3, $0C, smpsNoAttack, $60, nRst, $60
000B2405 F2                         	smpsStop
000B2406                            
000B2406                            Tribute_Call01:
000B2406 AC06 E712 AC06             	dc.b	nG3, $06, smpsNoAttack, $12, nG3, $06
000B240C E60A                       	smpsFMAlterVol      $0A
000B240E 0680                       	dc.b	$06, nRst
000B2410 E6F6                       	smpsFMAlterVol      $F6
000B2412 AF                         	dc.b	nBb3
000B2413 E60A                       	smpsFMAlterVol      $0A
000B2415 0680                       	dc.b	$06, nRst
000B2417 E6F6                       	smpsFMAlterVol      $F6
000B2419 ACAC                       	dc.b	nG3, nG3
000B241B E60A                       	smpsFMAlterVol      $0A
000B241D 06                         	dc.b	$06
000B241E E6F6                       	smpsFMAlterVol      $F6
000B2420 AA                         	dc.b	nF3
000B2421 E60A                       	smpsFMAlterVol      $0A
000B2423 06                         	dc.b	$06
000B2424 E6F6                       	smpsFMAlterVol      $F6
000B2426 AC                         	dc.b	nG3
000B2427 E3                         	smpsReturn
000B2428                            
000B2428                            ; FM5 Data
000B2428                            Tribute_FM5:
000B2428 EF02                       	smpsSetvoice        $02
000B242A                            
000B242A                            Tribute_Jump00:
000B242A 8060 8080 800C B406 B6B8+  	dc.b	nRst, $60, nRst, nRst, nRst, $0C, nEb4, $06, nF4, nG4, nD5, $12
000B2436 800C B606 B8BA C412 8060+  	dc.b	nRst, $0C, nF4, $06, nG4, nA4, nG5, $12, nRst, $60, nRst, $60
000B2442 805A D706 CECD C9C4 CECD+  	dc.b	nRst, $5A, nD7, $06, nF6, nE6, nC6, nG5, nF6, nE6, nC6, nG5
000B244E C2C1 BDB8 B6B5 B1AC AA48+  	dc.b	nF5, nE5, nC5, nG4, nF4, nE4, nC4, nG3, nF3, $48, nRst, $18
000B245A                            
000B245A                            Tribute_Loop01:
000B245A 8060 800C B106 B3B8 BDBF+  	dc.b	nRst, $60, nRst, $0C, nC4, $06, nD4, nG4, nC5, nD5, nG5, nC5
000B2466 BFC4 BFC4 C9C4 BF80 6080+  	dc.b	nD5, nG5, nD5, nG5, nC6, nG5, nD5, nRst, $60, nRst, $0C, nC5
000B2472 06C4 BDBF C4C6 BDB8 BDBF+  	dc.b	$06, nG5, nC5, nD5, nG5, nA5, nC5, nG4, nC5, nD5, nG5, nC5
000B247E BFC4 8060 800C B806 BABD+  	dc.b	nD5, nG5, nRst, $60, nRst, $0C, nG4, $06, nA4, nC5, nA4, nC5
000B248A BFC4 C2BD BFB8 B3BD BF80+  	dc.b	nD5, nG5, nF5, nC5, nD5, nG4, nD4, nC5, nD5, nRst, $60, nG5
000B2496 06C2 BDBA C4C2 BDBA C4C2+  	dc.b	$06, nF5, nC5, nA4, nG5, nF5, nC5, nA4, nG5, nF5, nD5, nB4
000B24A2 B9BA BCBF                  	dc.b	nAb4, nA4, nB4, nD5
000B24A6 F700 02FF B0               	smpsLoop            $00, $02, Tribute_Loop01
000B24AB 800C B806 BDBF C1C2 0C80+  	dc.b	nRst, $0C, nG4, $06, nC5, nD5, nE5, nF5, $0C, nRst, $30, nRst
000B24B7 0CB8 06BD BFC1 C60C 8030+  	dc.b	$0C, nG4, $06, nC5, nD5, nE5, nA5, $0C, nRst, $30, nRst, $0C
000B24C3 C6C4 C2C1 18BD 0CBF E70C+  	dc.b	nA5, nG5, nF5, nE5, $18, nC5, $0C, nD5, smpsNoAttack, $0C, nB4, nC5
000B24CF BFB3 06B8 BABF B8BA BFC4   	dc.b	nD5, nD4, $06, nG4, nA4, nD5, nG4, nA4, nD5, nG5
000B24D9 E918                       	smpsAlterPitch      $18
000B24DB F8FB 98                    	smpsCall            Tribute_Call00
000B24DE E9E8                       	smpsAlterPitch      $E8
000B24E0 F2                         	smpsStop
000B24E1                            
000B24E1                            ; FM6 Data
000B24E1                            Tribute_FM6:
000B24E1 EF02                       	smpsSetvoice        $02
000B24E3 E040                       	smpsPan             panRight, $00
000B24EA E104                       	smpsAlterNote       $04
000B24EC 8006                       	dc.b	nRst, $06
000B24EE F6FF 3A                    	smpsJump            Tribute_Jump00
000B24F1                            
000B24F1                            ; PSG1 Data
000B24F1                            Tribute_PSG1:
000B24F1 F505                       	smpsPSGvoice        sTone_09
000B24F8 A760 E760 E760 E760 A760+  	dc.b	nD3, $60, smpsNoAttack, $60, smpsNoAttack, $60, smpsNoAttack, $60, nD3, $60, smpsNoAttack, $60
000B2504 E75A AC06 E760 E748 8018   	dc.b	smpsNoAttack, $5A, nG3, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B2513 ECFD                       	smpsPSGAlterVol     $FD
000B2515                            
000B2515                            Tribute_Jump01:
000B2515 F505                       	smpsPSGvoice        sTone_09
000B2517 F800 00                    	smpsCall            Tribute_Call07
000B251A E706 AAAC AEB0 02B1 B0AC+  	dc.b	smpsNoAttack, $06, nF3, nG3, nA3, nB3, $02, nC4, nB3, nG3, $06, nA3
000B2526 B0B1 AEB0 B1B3 B5B6 BA     	dc.b	nB3, nC4, nA3, nB3, nC4, nD4, nE4, nF4, nA4
000B252F F800 00                    	smpsCall            Tribute_Call07
000B2532 E70C AEB0 B106 80B3 0CB5+  	dc.b	smpsNoAttack, $0C, nA3, nB3, nC4, $06, nRst, nD4, $0C, nE4, $06, nRst
000B253E B60C B306 80B8 1E80 06B9+  	dc.b	nF4, $0C, nD4, $06, nRst, nG4, $1E, nRst, $06, nAb4, $18, nG4
000B254A 0680 B680 B50C E70C B3B1+  	dc.b	$06, nRst, nF4, nRst, nE4, $0C, smpsNoAttack, $0C, nD4, nC4, $06, nRst
000B2556 B318 AE0C B006 80B1 0CE7+  	dc.b	nD4, $18, nA3, $0C, nB3, $06, nRst, nC4, $0C, smpsNoAttack, $3C, nB3
000B2562 0CB1 0680 B30C E73C B80C+  	dc.b	$0C, nC4, $06, nRst, nD4, $0C, smpsNoAttack, $3C, nG4, $0C, nD5, nG5
000B256E E918                       	smpsAlterPitch      $18
000B2570 F8FB 03                    	smpsCall            Tribute_Call00
000B2573 E9E8                       	smpsAlterPitch      $E8
000B2575 F2                         	smpsStop
000B2576                            
000B2576                            Tribute_Call07:
000B2576 B703 B833 8006 BC80 BDBF+  	dc.b	nFs4, $03, nG4, $33, nRst, $06, nB4, nRst, nC5, nD5, nRst, nFs4
000B2582 03B8 03E7 3680 06B5 80B3+  	dc.b	$03, nG4, $03, smpsNoAttack, $36, nRst, $06, nE4, nRst, nD4, nC4, nRst
000B258E B702 B804 E736 8006 BC80+  	dc.b	nFs4, $02, nG4, $04, smpsNoAttack, $36, nRst, $06, nB4, nRst, nC5, nD5
000B259A 80B8 E712 8006 B512 8006+  	dc.b	nRst, nG4, smpsNoAttack, $12, nRst, $06, nE4, $12, nRst, $06, nD4, $12
000B25A6 8006 B50C 8006 B1E7 3680+  	dc.b	nRst, $06, nE4, $0C, nRst, $06, nC4, smpsNoAttack, $36, nRst, $06, nC5
000B25B2 80BC BD80 B1E7 3680 06BD+  	dc.b	nRst, nB4, nC5, nRst, nC4, smpsNoAttack, $36, nRst, $06, nC5, nRst, nB4
000B25BE BD80 B1E7 3CB5 0CB3 B1     	dc.b	nC5, nRst, nC4, smpsNoAttack, $3C, nE4, $0C, nD4, nC4
000B25C7 E3                         	smpsReturn
000B25C8                            
000B25C8                            ; PSG2 Data
000B25C8                            Tribute_PSG2:
000B25C8 F505                       	smpsPSGvoice        sTone_09
000B25CF 9B60 E760 E760 E760 9B60+  	dc.b	nD2, $60, smpsNoAttack, $60, smpsNoAttack, $60, smpsNoAttack, $60, nD2, $60, smpsNoAttack, $60
000B25DB E75A A006 E760 E748 8018   	dc.b	smpsNoAttack, $5A, nG2, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B25E5 ECFF                       	smpsPSGAlterVol     $FF
000B25EC 8006                       	dc.b	nRst, $06
000B25EE F6FF 25                    	smpsJump            Tribute_Jump01
000B25F1                            
000B25F1                            ; PSG3 Data
000B25F1                            Tribute_PSG3:
000B25F1 F3E7                       	smpsPSGform         $E7
000B25F3 F502                       	smpsPSGvoice        sTone_02
000B25F5 AF18 1818 0606 06          	dc.b	(nMaxPSG2-$23)&$FF, $18, $18, $18, $06, $06, $06
000B25FC F501                       	smpsPSGvoice        sTone_05
000B25FE 0680 18                    	dc.b	$06, nRst, $18
000B2601 F502                       	smpsPSGvoice        sTone_02
000B2603 AF18 1806                  	dc.b	(nMaxPSG2-$23)&$FF, $18, $18, $06
000B2607 F501                       	smpsPSGvoice        sTone_05
000B2609 06                         	dc.b	$06
000B260A F502                       	smpsPSGvoice        sTone_02
000B260C 06                         	dc.b	$06
000B260D F501                       	smpsPSGvoice        sTone_05
000B260F 06                         	dc.b	$06
000B2610 F502                       	smpsPSGvoice        sTone_02
000B2612 8018 AF18 1806 0606        	dc.b	nRst, $18, (nMaxPSG2-$23)&$FF, $18, $18, $06, $06, $06
000B261A F501                       	smpsPSGvoice        sTone_05
000B261C 0680 12AF 06               	dc.b	$06, nRst, $12, (nMaxPSG2-$23)&$FF, $06
000B2621 F502                       	smpsPSGvoice        sTone_02
000B2623 06                         	dc.b	$06
000B2624 F501                       	smpsPSGvoice        sTone_05
000B2626 06                         	dc.b	$06
000B2627 F502                       	smpsPSGvoice        sTone_02
000B2629 06                         	dc.b	$06
000B262A F501                       	smpsPSGvoice        sTone_05
000B262C 06                         	dc.b	$06
000B262D F502                       	smpsPSGvoice        sTone_02
000B262F 800C AF06                  	dc.b	nRst, $0C, (nMaxPSG2-$23)&$FF, $06
000B2633 F501                       	smpsPSGvoice        sTone_05
000B2635 06                         	dc.b	$06
000B2636 F502                       	smpsPSGvoice        sTone_02
000B2638 06                         	dc.b	$06
000B2639 F501                       	smpsPSGvoice        sTone_05
000B263B 06                         	dc.b	$06
000B263C F502                       	smpsPSGvoice        sTone_02
000B263E 0C                         	dc.b	$0C
000B263F F502                       	smpsPSGvoice        sTone_02
000B2641 AF18 1818 0606 06          	dc.b	(nMaxPSG2-$23)&$FF, $18, $18, $18, $06, $06, $06
000B2648 F501                       	smpsPSGvoice        sTone_05
000B264A 06                         	dc.b	$06
000B264B F502                       	smpsPSGvoice        sTone_02
000B264D 8018 AF18 1806             	dc.b	nRst, $18, (nMaxPSG2-$23)&$FF, $18, $18, $06
000B2653 F501                       	smpsPSGvoice        sTone_05
000B2655 06                         	dc.b	$06
000B2656 F502                       	smpsPSGvoice        sTone_02
000B2658 06                         	dc.b	$06
000B2659 F501                       	smpsPSGvoice        sTone_05
000B265B 06                         	dc.b	$06
000B265C F502                       	smpsPSGvoice        sTone_02
000B265E 8018 AF18 1806 0606        	dc.b	nRst, $18, (nMaxPSG2-$23)&$FF, $18, $18, $06, $06, $06
000B2666 F501                       	smpsPSGvoice        sTone_05
000B2668 0680 6080                  	dc.b	$06, nRst, $60, nRst
000B266C                            
000B266C                            Tribute_Loop06:
000B266C F800 00                    	smpsCall            Tribute_Call06
000B266F 800C                       	dc.b	nRst, $0C
000B2671 F502                       	smpsPSGvoice        sTone_02
000B2673 AF0C 0C0C 0C0C 8018        	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, $0C, $0C, nRst, $18
000B267B F800 00                    	smpsCall            Tribute_Call06
000B267E 800C                       	dc.b	nRst, $0C
000B2680 F502                       	smpsPSGvoice        sTone_02
000B2682 AF0C 0C0C 8030             	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, nRst, $30
000B2688 F700 02FF E0               	smpsLoop            $00, $02, Tribute_Loop06
000B268D E718                       	dc.b	smpsNoAttack, $18
000B268F F502                       	smpsPSGvoice        sTone_02
000B2691 AF80 AF80 AF80 AF80 AF80+  	dc.b	(nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst
000B269D AF                         	dc.b	(nMaxPSG2-$23)&$FF
000B269E F2                         	smpsStop
000B269F                            
000B269F                            Tribute_Call06:
000B269F F502                       	smpsPSGvoice        sTone_02
000B26A1 0C0C 0C0C 0C06 0606        	dc.b	$0C, $0C, $0C, $0C, $0C, $06, $06, $06
000B26A9 F501                       	smpsPSGvoice        sTone_05
000B26AB 06                         	dc.b	$06
000B26AC F502                       	smpsPSGvoice        sTone_02
000B26AE 06                         	dc.b	$06
000B26AF F501                       	smpsPSGvoice        sTone_05
000B26B1 0680 0C                    	dc.b	$06, nRst, $0C
000B26B4 F502                       	smpsPSGvoice        sTone_02
000B26B6 AF0C 0C0C 0C0C 0C06 06     	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, $0C, $0C, $0C, $06, $06
000B26BF F502                       	smpsPSGvoice        sTone_02
000B26C1 0C0C 0C0C 0C06 0606        	dc.b	$0C, $0C, $0C, $0C, $0C, $06, $06, $06
000B26C9 F501                       	smpsPSGvoice        sTone_05
000B26CB 06                         	dc.b	$06
000B26CC F502                       	smpsPSGvoice        sTone_02
000B26CE 06                         	dc.b	$06
000B26CF F501                       	smpsPSGvoice        sTone_05
000B26D1 06                         	dc.b	$06
000B26D2 E3                         	smpsReturn
000B26D3                            
000B26D3                            ; DAC Data
000B26D3                            Tribute_DAC:
000B26D3 8148 8218 8148 8206 8906   	dc.b	dKick, $48, dSnare, $18, dKick, $48, dSnare, $06, dMidTimpani, $06
000B26DD E690                       	smpsFMAlterVol      $90
000B26DF 8A0C                       	dc.b	dLowTimpani, $0C
000B26E1 E670                       	smpsFMAlterVol      $70
000B26E3 8148 8218 8130 8206        	dc.b	dKick, $48, dSnare, $18, dKick, $30, dSnare, $06
000B26EB E6F9                       	smpsFMAlterVol      $F9
000B26ED 88                         	dc.b	dHiTimpani
000B26EE E607                       	smpsFMAlterVol      $07
000B26F0 8982                       	dc.b	dMidTimpani, dSnare
000B26F2 E690                       	smpsFMAlterVol      $90
000B26F4 8A                         	dc.b	dLowTimpani
000B26F5 E670                       	smpsFMAlterVol      $70
000B26F7 8282 8281 4882 1881 4882+  	dc.b	dSnare, dSnare, dSnare, dKick, $48, dSnare, $18, dKick, $48, dSnare, $06, dMidTimpani
000B2703 06                         	dc.b	$06
000B2704 E690                       	smpsFMAlterVol      $90
000B2706 8A0C                       	dc.b	dLowTimpani, $0C
000B2708 E670                       	smpsFMAlterVol      $70
000B270A 8148 8218 8160 8148 8218   	dc.b	dKick, $48, dSnare, $18, dKick, $60, dKick, $48, dSnare, $18
000B2714                            
000B2714                            Tribute_Loop00:
000B2714 8118 8281 8281 8281 8281+  	dc.b	dKick, $18, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick
000B2720 8281 8281 8206             	dc.b	dSnare, dKick, dSnare, dKick, dSnare, $06
000B2726 E6F9                       	smpsFMAlterVol      $F9
000B2728 88                         	dc.b	dHiTimpani
000B2729 E607                       	smpsFMAlterVol      $07
000B272B 8982 8118 8281 8281 8281+  	dc.b	dMidTimpani, dSnare, dKick, $18, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick
000B2737 8281 8281 8281 06          	dc.b	dSnare, dKick, dSnare, dKick, dSnare, dKick, $06
000B273E E607                       	smpsFMAlterVol      $07
000B2740 88                         	dc.b	dHiTimpani
000B2741 E6F9                       	smpsFMAlterVol      $F9
000B2743 8982 8182 8282             	dc.b	dMidTimpani, dSnare, dKick, dSnare, dSnare, dSnare
000B2749 F700 02FF C7               	smpsLoop            $00, $02, Tribute_Loop00
000B274E 813C 820C                  	dc.b	dKick, $3C, dSnare, $0C
000B2752 E6F9                       	smpsFMAlterVol      $F9
000B2754 8804                       	dc.b	dHiTimpani, $04
000B2756 E607                       	smpsFMAlterVol      $07
000B2758 89                         	dc.b	dMidTimpani
000B2759 E690                       	smpsFMAlterVol      $90
000B275B 8A                         	dc.b	dLowTimpani
000B275C E670                       	smpsFMAlterVol      $70
000B275E 810C 813C 8206 8282 8281+  	dc.b	dKick, $0C, dKick, $3C, dSnare, $06, dSnare, dSnare, dSnare, dKick, $0C, dKick
000B276A 6081 36                    	dc.b	$60, dKick, $36
000B276D E6F9                       	smpsFMAlterVol      $F9
000B276F 8806                       	dc.b	dHiTimpani, $06
000B2771 E607                       	smpsFMAlterVol      $07
000B2773 89                         	dc.b	dMidTimpani
000B2774 E690                       	smpsFMAlterVol      $90
000B2776 8A                         	dc.b	dLowTimpani
000B2777 E670                       	smpsFMAlterVol      $70
000B2779 8282 8282 8182 8282 8282+  	dc.b	dSnare, dSnare, dSnare, dSnare, dKick, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dKick
000B2785 8182                       	dc.b	dKick, dSnare
000B2787 E6F9                       	smpsFMAlterVol      $F9
000B2789 88                         	dc.b	dHiTimpani
000B278A E607                       	smpsFMAlterVol      $07
000B278C 8982                       	dc.b	dMidTimpani, dSnare
000B278E E690                       	smpsFMAlterVol      $90
000B2790 8A                         	dc.b	dLowTimpani
000B2791 E670                       	smpsFMAlterVol      $70
000B2793 8281 8182 8289 82          	dc.b	dSnare, dKick, dKick, dSnare, dSnare, dMidTimpani, dSnare
000B279A E690                       	smpsFMAlterVol      $90
000B279C 8A                         	dc.b	dLowTimpani
000B279D E670                       	smpsFMAlterVol      $70
000B279F 8281                       	dc.b	dSnare, dKick
000B27A1 F2                         	smpsStop
000B27A2                            
000B27A2                            Tribute_Voices:
000B27A2                            ;	Voice $00
000B27A2                            ;	$3B
000B27A2                            ;	$53, $31, $02, $03, 	$DF, $9F, $5F, $9F, 	$17, $08, $0E, $07
000B27A2                            ;	$0F, $0E, $0D, $02, 	$5F, $7F, $3F, $5F, 	$0C, $16, $1F, $80
000B27A2                            	smpsVcAlgorithm     $03
000B27A2                            	smpsVcFeedback      $07
000B27A2                            	smpsVcUnusedBits    $00
000B27A2                            	smpsVcDetune        $00, $00, $03, $05
000B27A2                            	smpsVcCoarseFreq    $03, $02, $01, $03
000B27A2                            	smpsVcRateScale     $02, $01, $02, $03
000B27A2                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B27A2                            	smpsVcAmpMod        $00, $00, $00, $00
000B27A2                            	smpsVcDecayRate1    $07, $0E, $08, $17
000B27A2                            	smpsVcDecayRate2    $02, $0D, $0E, $0F
000B27A2                            	smpsVcDecayLevel    $05, $03, $07, $05
000B27A2                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B27BB                            
000B27BB                            ;	Voice $01
000B27BB                            ;	$3D
000B27BB                            ;	$52, $02, $04, $01, 	$94, $19, $19, $19, 	$11, $0D, $0D, $0D
000B27BB                            ;	$07, $04, $04, $04, 	$35, $1A, $1A, $1A, 	$0D, $80, $80, $80
000B27BB                            	smpsVcAlgorithm     $05
000B27BB                            	smpsVcFeedback      $07
000B27BB                            	smpsVcUnusedBits    $00
000B27BB                            	smpsVcDetune        $00, $00, $00, $05
000B27BB                            	smpsVcCoarseFreq    $01, $04, $02, $02
000B27BB                            	smpsVcRateScale     $00, $00, $00, $02
000B27BB                            	smpsVcAttackRate    $19, $19, $19, $14
000B27BB                            	smpsVcAmpMod        $00, $00, $00, $00
000B27BB                            	smpsVcDecayRate1    $0D, $0D, $0D, $11
000B27BB                            	smpsVcDecayRate2    $04, $04, $04, $07
000B27BB                            	smpsVcDecayLevel    $01, $01, $01, $03
000B27BB                            	smpsVcReleaseRate   $0A, $0A, $0A, $05
000B27D4                            
000B27D4                            ;	Voice $02
000B27D4                            ;	$1F
000B27D4                            ;	$26, $32, $07, $11, 	$9F, $9F, $9F, $9F, 	$06, $07, $09, $07
000B27D4                            ;	$0D, $0F, $0D, $11, 	$9C, $9C, $9C, $9C, 	$80, $80, $80, $80
000B27D4                            	smpsVcAlgorithm     $07
000B27D4                            	smpsVcFeedback      $03
000B27D4                            	smpsVcUnusedBits    $00
000B27D4                            	smpsVcDetune        $01, $00, $03, $02
000B27D4                            	smpsVcCoarseFreq    $01, $07, $02, $06
000B27D4                            	smpsVcRateScale     $02, $02, $02, $02
000B27D4                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B27D4                            	smpsVcAmpMod        $00, $00, $00, $00
000B27D4                            	smpsVcDecayRate1    $07, $09, $07, $06
000B27D4                            	smpsVcDecayRate2    $11, $0D, $0F, $0D
000B27D4                            	smpsVcDecayLevel    $09, $09, $09, $09
000B27D4                            	smpsVcReleaseRate   $0C, $0C, $0C, $0C
000B27ED                            
000B27ED                            
000B27EE 00                         		even		
000B27EE                            ; ---------------------------------------------------------------------------
000B27EE                            ; Sound	effect pointers
000B27EE                            ; ---------------------------------------------------------------------------
000B27EE                            SoundIndex:
000B27EE 0000 0000                  ptr_sndA0:	dc.l SoundA0
000B27F2 0000 0000                  ptr_sndA1:	dc.l SoundA1
000B27F6 0000 0000                  ptr_sndA2:	dc.l SoundA2
000B27FA 0000 0000                  ptr_sndA3:	dc.l SoundA3
000B27FE 0000 0000                  ptr_sndA4:	dc.l SoundA4
000B2802 0000 0000                  ptr_sndA5:	dc.l SoundA5
000B2806 0000 0000                  ptr_sndA6:	dc.l SoundA6
000B280A 0000 0000                  ptr_sndA7:	dc.l SoundA7
000B280E 0000 0000                  ptr_sndA8:	dc.l SoundA8
000B2812 0000 0000                  ptr_sndA9:	dc.l SoundA9
000B2816 0000 0000                  ptr_sndAA:	dc.l SoundAA
000B281A 0000 0000                  ptr_FireShield:	dc.l SoundAB
000B281E 0000 0000                  ptr_sndAC:	dc.l SoundAC
000B2822 0000 0000                  ptr_sndAD:	dc.l SoundAD
000B2826 0000 0000                  ptr_sndAE:	dc.l SoundAE
000B282A 0000 0000                  ptr_sndAF:	dc.l SoundAF
000B282E 0000 0000                  ptr_sndB0:	dc.l SoundB0
000B2832 0000 0000                  ptr_sndB1:	dc.l SoundB1
000B2836 0000 0000                  ptr_sndB2:	dc.l SoundB2
000B283A 0000 0000                  ptr_sndB3:	dc.l SoundB3
000B283E 0000 0000                  ptr_sndB4:	dc.l SoundB4
000B2842 0000 0000                  ptr_sndB5:	dc.l SoundB5
000B2846 0000 0000                  ptr_sndB6:	dc.l SoundB6
000B284A 0000 0000                  ptr_sndB7:	dc.l SoundB7
000B284E 0000 0000                  ptr_sndB8:	dc.l SoundB8
000B2852 0000 0000                  ptr_sndB9:	dc.l SoundB9
000B2856 0000 0000                  ptr_sndBA:	dc.l SoundBA
000B285A 0000 0000                  ptr_sndBB:	dc.l SoundBB
000B285E 0000 0000                  ptr_sndBC:	dc.l SoundBC
000B2862 0000 0000                  ptr_sndBD:	dc.l SoundBD
000B2866 0000 0000                  ptr_sndBE:	dc.l SoundBE
000B286A 0000 0000                  ptr_sndBF:	dc.l SoundBF
000B286E 0000 0000                  ptr_sndC0:	dc.l SoundC0
000B2872 0000 0000                  ptr_sndC1:	dc.l SoundC1
000B2876 0000 0000                  ptr_sndC2:	dc.l SoundC2
000B287A 0000 0000                  ptr_sndC3:	dc.l SoundC3
000B287E 0000 0000                  ptr_sndC4:	dc.l SoundC4
000B2882 0000 0000                  ptr_sndC5:	dc.l SoundC5
000B2886 0000 0000                  ptr_sndC6:	dc.l SoundC6
000B288A 0000 0000                  ptr_sndC7:	dc.l SoundC7
000B288E 0000 0000                  ptr_sndC8:	dc.l SoundC8
000B2892 0000 0000                  ptr_sndC9:	dc.l SoundC9
000B2896 0000 0000                  ptr_sndCA:	dc.l SoundCA
000B289A 0000 0000                  ptr_sndCB:	dc.l SoundCB
000B289E 0000 0000                  ptr_sndCC:	dc.l SoundCC
000B28A2 0000 0000                  ptr_sndCD:	dc.l SoundCD
000B28A6 0000 0000                  ptr_sndCE:	dc.l SoundCE
000B28AA 0000 0000                  ptr_sndCF:	dc.l SoundCF
000B28AE                            ptr_sndend
000B28AE                            ; ---------------------------------------------------------------------------
000B28AE                            ; Special sound effect pointers
000B28AE                            ; ---------------------------------------------------------------------------
000B28AE                            SpecSoundIndex:
000B28AE 0000 0000                  ptr_sndD0:	dc.l SoundD0
000B28B2 0000 0000                  ptr_sndD1:	dc.l SoundD1
000B28B6 0000 0000                  ptr_sndD2:	dc.l SoundD2
000B28BA 0000 0000                  ptr_sndD3:	dc.l SoundD3
000B28BE 0000 0000                  ptr_sndD4:	dc.l SoundD4
000B28C2 0000 0000                  ptr_sndD5:	dc.l SoundD5
000B28C6 0000 0000                  ptr_sndD6:	dc.l SoundD6
000B28CA                            ptr_specend
000B28CA                            SoundA0:	include	"sound/sfx/Jump.asm"
000B28CA                            SndA0_Jump_Header:
000B28CA                            	smpsHeaderStartSong 1
000B28CC 01                         	smpsHeaderTempoSFX  $01
000B28CD 01                         	smpsHeaderChanSFX   $01
000B28CE                            
000B28D4                            
000B28D4                            ; PSG2 Data
000B28D4                            SndA0_Jump_PSG2:
000B28D4 F500                       	smpsPSGvoice        $00
000B28D6 9E05                       	dc.b	nF2, $05
000B28DD A315                       	dc.b	nBb2, $15
000B28DF F2                         	smpsStop
000B28E0                            
000B28E0                            ; Song seems to not use any FM voices
000B28E0                            SndA0_Jump_Voices:
000B28E0                            SndA0_Jump_Voices:
000B28E0                            		even
000B28E0                            SoundA1:	incbin	"sound/sfx/SndA1 - Lamppost.bin"
000B290A                            		even
000B290A                            SoundA2:	include	"sound/sfx/DrowningSound.asm"
000B290A                            SndDF_Header:
000B290A                            	smpsHeaderStartSong 3
000B290C 01                         	smpsHeaderTempoSFX  $01
000B290D 01                         	smpsHeaderChanSFX   $01
000B290E                            
000B2914                            
000B2914                            ; FM5 Data
000B2914                            SndDF_FM5:
000B2914 EF00                       	smpsSetvoice        $00
000B2916                            
000B2916                            SndDF_Loop00:
000B2916 F800 00                    	smpsCall            SndDF_Call00
000B2919 E905                       	smpsAlterPitch $05
000B291B E608                       	smpsFMAlterVol      $08
000B291D F701 03FF F5               	smpsLoop            $01, $03, SndDF_Loop00
000B2922 E9EC                       	smpsAlterPitch $EC
000B2924 E6E0                       	smpsFMAlterVol      $E0
000B2926 F2                         	smpsStop
000B2927                            
000B2927                            SndDF_Call00:
000B2927 9902                       	dc.b	nC2, $02
000B2929 E901                       	smpsAlterPitch $01
000B292B F700 0AFF F8               	smpsLoop            $00, $0A, SndDF_Call00
000B2930 E9F6                       	smpsAlterPitch $F6
000B2932 E3                         	smpsReturn
000B2933                            
000B2933                            SndDF_Voices:
000B2933                            ;	Voice $00
000B2933                            ;	$07
000B2933                            ;	$04, $04, $05, $04, 	$1F, $1F, $15, $15, 	$00, $00, $00, $00
000B2933                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$7F, $7F, $80, $80
000B2933                            	smpsVcAlgorithm     $07
000B2933                            	smpsVcFeedback      $00
000B2933                            	smpsVcUnusedBits    $00
000B2933                            	smpsVcDetune        $00, $00, $00, $00
000B2933                            	smpsVcCoarseFreq    $04, $05, $04, $04
000B2933                            	smpsVcRateScale     $00, $00, $00, $00
000B2933                            	smpsVcAttackRate    $15, $15, $1F, $1F
000B2933                            	smpsVcAmpMod        $00, $00, $00, $00
000B2933                            	smpsVcDecayRate1    $00, $00, $00, $00
000B2933                            	smpsVcDecayRate2    $00, $00, $00, $00
000B2933                            	smpsVcDecayLevel    $01, $01, $01, $01
000B2933                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B294C                            		even
000B294C                            SoundA3:	incbin	"sound/sfx/SndA3 - Death.bin"
000B297E                            		even
000B297E                            SoundA4:	incbin	"sound/sfx/SndA4 - Skid.bin"
000B29C2 00                         		even
000B29C2                            SoundA5:	include	"sound/sfx/LargeRingBox.asm"
000B29C2                            SndD2_Header:
000B29C2                            	smpsHeaderStartSong 3
000B29C4 01                         	smpsHeaderTempoSFX  $01
000B29C5 01                         	smpsHeaderChanSFX   $01
000B29C6                            
000B29CC                            
000B29CC                            ; FM4 Data
000B29CC                            SndD2_FM4:
000B29CC EF00                       	smpsSetvoice        $00
000B29D3 C645                       	dc.b	nA5, $45
000B29D5 F2                         	smpsStop
000B29D6                            
000B29D6                            SndD2_Voices:
000B29D6                            ;	Voice $00
000B29D6                            ;	$04
000B29D6                            ;	$27, $02, $07, $47, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
000B29D6                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$1F, $80, $23, $80
000B29D6                            	smpsVcAlgorithm     $04
000B29D6                            	smpsVcFeedback      $00
000B29D6                            	smpsVcUnusedBits    $00
000B29D6                            	smpsVcDetune        $04, $00, $00, $02
000B29D6                            	smpsVcCoarseFreq    $07, $07, $02, $07
000B29D6                            	smpsVcRateScale     $00, $00, $00, $00
000B29D6                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B29D6                            	smpsVcAmpMod        $00, $00, $00, $00
000B29D6                            	smpsVcDecayRate1    $0D, $07, $0A, $07
000B29D6                            	smpsVcDecayRate2    $0B, $00, $0B, $00
000B29D6                            	smpsVcDecayLevel    $00, $01, $00, $01
000B29D6                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B29F0 00                         		even
000B29F0                            SoundA6:	incbin	"sound/sfx/SndA6 - Hit Spikes.bin"
000B2A20                            		even
000B2A20                            SoundA7:	incbin	"sound/sfx/SndA7 - Push Block.bin"
000B2A50                            		even
000B2A50                            SoundA8:	incbin	"sound/sfx/SndA8 - SS Goal.bin"
000B2A84                            		even
000B2A84                            SoundA9:	incbin	"sound/sfx/SndA9 - SS Item.bin"
000B2A96                            		even
000B2A96                            SoundAA:	include	"sound/sfx/Splash.asm"
000B2A96                            SndA2_Header:
000B2A96                            	smpsHeaderStartSong 3
000B2A98 01                         	smpsHeaderTempoSFX  $01
000B2A99 02                         	smpsHeaderChanSFX   $02
000B2A9A                            
000B2AA6                            
000B2AA6                            ; FM3 Data
000B2AA6                            SndA2_FM3:
000B2AA6 EF00                       	smpsSetvoice        $00
000B2AAD 8106                       	dc.b	nC0, $06
000B2AAF                            
000B2AAF                            SndA2_Loop00:
000B2AAF 810E                       	dc.b	nC0, $0E
000B2AB1 E60E                       	smpsAlterVol      $0E
000B2AB3 F700 04FF F8               	smpsLoop            $00, $04, SndA2_Loop00
000B2AB8 F2                         	smpsStop
000B2AB9                            
000B2AB9                            ; FM4 Data
000B2AB9                            SndA2_FM4:
000B2AB9 EF01                       	smpsSetvoice        $01
000B2ABB A606 14                    	dc.b	nCs3, $06, $14
000B2ABE F2                         	smpsStop
000B2ABF                            
000B2ABF                            SndA2_Voices:
000B2ABF                            ;	Voice $00
000B2ABF                            ;	$F9
000B2ABF                            ;	$21, $30, $10, $32, 	$1C, $1F, $1F, $10, 	$05, $18, $09, $02
000B2ABF                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0C, $06, $04, $80
000B2ABF                            	smpsVcAlgorithm     $01
000B2ABF                            	smpsVcFeedback      $07
000B2ABF                            	smpsVcUnusedBits    $03
000B2ABF                            	smpsVcDetune        $03, $01, $03, $02
000B2ABF                            	smpsVcCoarseFreq    $02, $00, $00, $01
000B2ABF                            	smpsVcRateScale     $00, $00, $00, $00
000B2ABF                            	smpsVcAttackRate    $10, $1F, $1F, $1C
000B2ABF                            	smpsVcAmpMod        $00, $00, $00, $00
000B2ABF                            	smpsVcDecayRate1    $02, $09, $18, $05
000B2ABF                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B2ABF                            	smpsVcDecayLevel    $02, $04, $02, $01
000B2ABF                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2AD8                            
000B2AD8                            ;	Voice $01
000B2AD8                            ;	$00
000B2AD8                            ;	$00, $03, $02, $00, 	$D9, $DF, $1F, $1F, 	$12, $11, $14, $0F
000B2AD8                            ;	$0A, $00, $0A, $0D, 	$FF, $FF, $FF, $FF, 	$22, $07, $27, $80
000B2AD8                            	smpsVcAlgorithm     $00
000B2AD8                            	smpsVcFeedback      $00
000B2AD8                            	smpsVcUnusedBits    $00
000B2AD8                            	smpsVcDetune        $00, $00, $00, $00
000B2AD8                            	smpsVcCoarseFreq    $00, $02, $03, $00
000B2AD8                            	smpsVcRateScale     $00, $00, $03, $03
000B2AD8                            	smpsVcAttackRate    $1F, $1F, $1F, $19
000B2AD8                            	smpsVcAmpMod        $00, $00, $00, $00
000B2AD8                            	smpsVcDecayRate1    $0F, $14, $11, $12
000B2AD8                            	smpsVcDecayRate2    $0D, $0A, $00, $0A
000B2AD8                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B2AD8                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2AF2 00                         		even
000B2AF2                            SoundAB:	include	"sound/sfx/FireShield.asm"
000B2AF2                            Sound_3E_Header:
000B2AF2                            	smpsHeaderStartSong 3
000B2AF4 01                         	smpsHeaderTempoSFX  $01
000B2AF5 01                         	smpsHeaderChanSFX   $01
000B2AF6                            
000B2AFC                            
000B2AFC                            ; FM5 Data
000B2AFC                            Sound_3E_3F_40_41_FM5:
000B2AFC EF00                       	smpsSetvoice        $00
000B2AFE A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
000B2B03 F2                         	smpsStop
000B2B04                            
000B2B04                            Sound_3E_Voices:
000B2B04                            ;	Voice $00
000B2B04                            ;	$0C
000B2B04                            ;	$01, $21, $31, $31, 	$1E, $0C, $0E, $1C, 	$0A, $00, $04, $00
000B2B04                            ;	$08, $12, $08, $0C, 	$FF, $0F, $BF, $0F, 	$03, $80, $0D, $80
000B2B04                            	smpsVcAlgorithm     $04
000B2B04                            	smpsVcFeedback      $01
000B2B04                            	smpsVcUnusedBits    $00
000B2B04                            	smpsVcDetune        $03, $03, $02, $00
000B2B04                            	smpsVcCoarseFreq    $01, $01, $01, $01
000B2B04                            	smpsVcRateScale     $00, $00, $00, $00
000B2B04                            	smpsVcAttackRate    $1C, $0E, $0C, $1E
000B2B04                            	smpsVcAmpMod        $00, $00, $00, $00
000B2B04                            	smpsVcDecayRate1    $00, $04, $00, $0A
000B2B04                            	smpsVcDecayRate2    $0C, $08, $12, $08
000B2B04                            	smpsVcDecayLevel    $00, $0B, $00, $0F
000B2B04                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2B1D                            
000B2B1D                            
000B2B1E 00                         		even
000B2B1E                            SoundAC:	incbin	"sound/sfx/SndAC - Hit Boss.bin"
000B2B52                            		even
000B2B52                            SoundAD:	incbin	"sound/sfx/SndAD - Get Bubble.bin"
000B2B88                            		even
000B2B88                            SoundAE:	include	"sound/sfx/Fireball.asm"
000B2B88                            Sound_70_Header:
000B2B88                            	smpsHeaderStartSong 3
000B2B8A 01                         	smpsHeaderTempoSFX  $01
000B2B8B 02                         	smpsHeaderChanSFX   $02
000B2B8C                            
000B2B98                            
000B2B98                            ; FM5 Data
000B2B98                            Sound_70_FM5:
000B2B98 EF00                       	smpsSetvoice        $00
000B2B9A 8001                       	dc.b	nRst, $01
000B2BA1 8306 8502                  	dc.b	nD0, $06, nE0, $02
000B2BA5 F2                         	smpsStop
000B2BA6                            
000B2BA6                            ; PSG3 Data
000B2BA6                            Sound_70_PSG3:
000B2BA6 F500                       	smpsPSGvoice        sTone_0D
000B2BA8 800B                       	dc.b	nRst, $0B
000B2BAA F3E7                       	smpsPSGform         $E7
000B2BAC C501 E7                    	dc.b	(nMaxPSG1-$D)&$FF, $01, smpsNoAttack
000B2BAF                            
000B2BAF                            Sound_70_Loop00:
000B2BAF 02                         	dc.b	$02
000B2BB0 EC01                       	smpsPSGAlterVol     $01
000B2BB2 E7                         	dc.b	smpsNoAttack
000B2BB3 F700 10FF F8               	smpsLoop            $00, $10, Sound_70_Loop00
000B2BB8 F2                         	smpsStop
000B2BB9                            
000B2BB9                            Sound_70_Voices:
000B2BB9                            ;	Voice $00
000B2BB9                            ;	$FA
000B2BB9                            ;	$02, $03, $00, $05, 	$12, $11, $0F, $13, 	$05, $18, $09, $02
000B2BB9                            ;	$06, $0F, $06, $02, 	$1F, $2F, $4F, $2F, 	$2F, $1A, $0E, $80
000B2BB9                            	smpsVcAlgorithm     $02
000B2BB9                            	smpsVcFeedback      $07
000B2BB9                            	smpsVcUnusedBits    $03
000B2BB9                            	smpsVcDetune        $00, $00, $00, $00
000B2BB9                            	smpsVcCoarseFreq    $05, $00, $03, $02
000B2BB9                            	smpsVcRateScale     $00, $00, $00, $00
000B2BB9                            	smpsVcAttackRate    $13, $0F, $11, $12
000B2BB9                            	smpsVcAmpMod        $00, $00, $00, $00
000B2BB9                            	smpsVcDecayRate1    $02, $09, $18, $05
000B2BB9                            	smpsVcDecayRate2    $02, $06, $0F, $06
000B2BB9                            	smpsVcDecayLevel    $02, $04, $02, $01
000B2BB9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2BD2                            
000B2BD2                            
000B2BD2                            		even
000B2BD2                            SoundAF:	incbin	"sound/sfx/SndAF - Shield.bin"
000B2C00                            		even
000B2C00                            SoundB0:	incbin	"sound/sfx/SndB0 - Saw.bin"
000B2C32                            		even
000B2C32                            SoundB1:	incbin	"sound/sfx/SndB1 - Electric.bin"
000B2C5E                            		even
000B2C5E                            SoundB2:	incbin	"sound/sfx/SndB2 - Drown Death.bin"
000B2CAE                            		even
000B2CAE                            SoundB3:	incbin	"sound/sfx/SndB3 - Flamethrower.bin"
000B2CF8                            		even
000B2CF8                            SoundB4:	incbin	"sound/sfx/SndB4 - Bumper.bin"
000B2D54                            		even
000B2D54                            SoundB5:	incbin	"sound/sfx/SndB5 - Ring.bin"
000B2D82                            		even
000B2D82                            SoundB6:	include	"sound/sfx/Spikes.asm"
000B2D82                            SpikesSFX_Header:
000B2D82                            	smpsHeaderStartSong 3
000B2D84 01                         	smpsHeaderTempoSFX  $01
000B2D85 02                         	smpsHeaderChanSFX   $02
000B2D86                            
000B2D92                            
000B2D92                            ; FM6 Data
000B2D92                            SndB7_FM3:
000B2D92 EF01                       	smpsSetvoice        $01
000B2D99 B105                       	dc.b	nC4, $05
000B2D9B F1                         	smpsModOn
000B2D9C E10A                       	smpsAlterNote       $0A
000B2D9E E601                       	smpsAlterVol        $01
000B2DA0 F2                         	smpsStop
000B2DA1                            
000B2DA1                            ; FM5 Data
000B2DA1                            SndB7_FM5:
000B2DA1 8005                       	dc.b	nRst, $05			 
000B2DA3 EF00                       	smpsSetvoice        $00
000B2DA5 DB01 8001 DB11             	dc.b	nFs7, $01, nRst, $01, nFs7, $11
000B2DAB F2                         	smpsStop
000B2DAC                            
000B2DAC                            SndB7_Voices:
000B2DAC                            ;	Voice $00
000B2DAC                            ;	$34
000B2DAC                            ;	$09, $0F, $01, $D7, 	$1F, $1F, $1F, $1F, 	$0C, $11, $09, $0F
000B2DAC                            ;	$0A, $0E, $0D, $0E, 	$35, $1A, $55, $3A, 	$0C, $80, $0F, $80
000B2DAC                            	smpsVcAlgorithm     $04
000B2DAC                            	smpsVcFeedback      $06
000B2DAC                            	smpsVcUnusedBits    $00
000B2DAC                            	smpsVcDetune        $0D, $00, $00, $00
000B2DAC                            	smpsVcCoarseFreq    $07, $01, $0F, $09
000B2DAC                            	smpsVcRateScale     $00, $00, $00, $00
000B2DAC                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B2DAC                            	smpsVcAmpMod        $00, $00, $00, $00
000B2DAC                            	smpsVcDecayRate1    $0F, $09, $11, $0C
000B2DAC                            	smpsVcDecayRate2    $0E, $0D, $0E, $0A
000B2DAC                            	smpsVcDecayLevel    $03, $05, $01, $03
000B2DAC                            	smpsVcReleaseRate   $0A, $05, $0A, $05
000B2DC5                            
000B2DC5                            ;	Voice $01
000B2DC5                            ;	$FA
000B2DC5                            ;	$21, $3A, $19, $30, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
000B2DC5                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
000B2DC5                            	smpsVcAlgorithm     $02
000B2DC5                            	smpsVcFeedback      $07
000B2DC5                            	smpsVcUnusedBits    $03
000B2DC5                            	smpsVcDetune        $03, $01, $03, $02
000B2DC5                            	smpsVcCoarseFreq    $00, $09, $0A, $01
000B2DC5                            	smpsVcRateScale     $00, $00, $00, $00
000B2DC5                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B2DC5                            	smpsVcAmpMod        $00, $00, $00, $00
000B2DC5                            	smpsVcDecayRate1    $02, $09, $18, $05
000B2DC5                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B2DC5                            	smpsVcDecayLevel    $02, $04, $02, $01
000B2DC5                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2DDE                            		even
000B2DDE                            SoundB7:	incbin	"sound/sfx/SndB7 - Rumbling.bin"
000B2E1A                            		even
000B2E1A                            SoundB8:	include	"sound/sfx/ScoreTallying.asm"
000B2E1A                            SndBD_Header:
000B2E1A                            	smpsHeaderStartSong 3
000B2E1C 01                         	smpsHeaderTempoSFX  $01
000B2E1D 01                         	smpsHeaderChanSFX   $01
000B2E1E                            
000B2E24                            
000B2E24                            ; FM6 Data
000B2E24                            SndBD_FM3:
000B2E24 EF00                       	smpsSetvoice        $00
000B2E26                            
000B2E26                            SndBD_Loop00:
000B2E26 C009                       	dc.b	nEb5, $09
000B2E28 F700 08FF FA               	smpsLoop            $00, $08, SndBD_Loop00
000B2E2D F2                         	smpsStop
000B2E2E                            
000B2E2E                            SndBD_Voices:
000B2E2E                            ;	Voice $00
000B2E2E                            ;	$02
000B2E2E                            ;	$02, $51, $20, $01, 	$1E, $1E, $1E, $1E, 	$10, $0A, $14, $13
000B2E2E                            ;	$01, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$24, $0E, $1F, $80
000B2E2E                            	smpsVcAlgorithm     $02
000B2E2E                            	smpsVcFeedback      $00
000B2E2E                            	smpsVcUnusedBits    $00
000B2E2E                            	smpsVcDetune        $00, $02, $05, $00
000B2E2E                            	smpsVcCoarseFreq    $01, $00, $01, $02
000B2E2E                            	smpsVcRateScale     $00, $00, $00, $00
000B2E2E                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
000B2E2E                            	smpsVcAmpMod        $00, $00, $00, $00
000B2E2E                            	smpsVcDecayRate1    $13, $14, $0A, $10
000B2E2E                            	smpsVcDecayRate2    $00, $00, $00, $01
000B2E2E                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B2E2E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2E48 00                         		even
000B2E48                            SoundB9:	include	"sound/sfx/BreakFloor.asm"
000B2E48                            Sound_59_Header:
000B2E48                            	smpsHeaderStartSong 3
000B2E4A 01                         	smpsHeaderTempoSFX  $01
000B2E4B 04                         	smpsHeaderChanSFX   $04
000B2E4C                            
000B2E64                            
000B2E64                            ; FM3 Data
000B2E64                            Sound_59_FM3:
000B2E64 E040                       	smpsPan             panRight, $00
000B2E66 8002                       	dc.b	nRst, $02
000B2E68 F600 00                    	smpsJump            Sound_59_FM4
000B2E6B                            
000B2E6B                            ; FM5 Data
000B2E6B                            Sound_59_FM5:
000B2E6B E080                       	smpsPan             panLeft, $00
000B2E6D 8001                       	dc.b	nRst, $01
000B2E6F                            
000B2E6F                            ; FM4 Data
000B2E6F                            Sound_59_FM4:
000B2E6F EF00                       	smpsSetvoice        $00
000B2E76 8110                       	dc.b	nC0, $10
000B2E78 F2                         	smpsStop
000B2E79                            
000B2E79                            ; PSG3 Data
000B2E79                            Sound_59_PSG3:
000B2E7E F3E7                       	smpsPSGform         $E7
000B2E80                            
000B2E80                            Sound_59_Loop00:
000B2E80 B018 E7                    	dc.b	nB3, $18, smpsNoAttack
000B2E83 EC03                       	smpsPSGAlterVol     $03
000B2E85 F700 05FF F7               	smpsLoop            $00, $05, Sound_59_Loop00
000B2E8A F2                         	smpsStop
000B2E8B                            
000B2E8B                            Sound_59_Voices:
000B2E8B                            ;	Voice $00
000B2E8B                            ;	$F9
000B2E8B                            ;	$21, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
000B2E8B                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
000B2E8B                            	smpsVcAlgorithm     $01
000B2E8B                            	smpsVcFeedback      $07
000B2E8B                            	smpsVcUnusedBits    $03
000B2E8B                            	smpsVcDetune        $03, $01, $03, $02
000B2E8B                            	smpsVcCoarseFreq    $02, $00, $00, $01
000B2E8B                            	smpsVcRateScale     $00, $00, $00, $00
000B2E8B                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B2E8B                            	smpsVcAmpMod        $00, $00, $00, $00
000B2E8B                            	smpsVcDecayRate1    $02, $09, $18, $05
000B2E8B                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B2E8B                            	smpsVcDecayLevel    $02, $04, $02, $01
000B2E8B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2EA4                            
000B2EA4                            
000B2EA4                            		even
000B2EA4                            SoundBA:	incbin	"sound/sfx/SndBA - SS Glass.bin"
000B2ECC                            		even
000B2ECC                            SoundBB:	incbin	"sound/sfx/SndBB - Door.bin"
000B2EF8                            		even
000B2EF8                            SoundBC:	include	"sound/sfx/DashRelease.asm"
000B2EF8                            Sound_B6_Header:
000B2EF8                            	smpsHeaderStartSong 3
000B2EFA 01                         	smpsHeaderTempoSFX  $01
000B2EFB 02                         	smpsHeaderChanSFX   $02
000B2EFC                            
000B2F08                            
000B2F08                            ; FM5 Data
000B2F08                            Sound_B6_FM5:
000B2F08 EF00                       	smpsSetvoice        $00
000B2F0F CD0F                       	dc.b	nE6, $0F
000B2F11 F2                         	smpsStop
000B2F12                            
000B2F12                            ; PSG3 Data
000B2F12                            Sound_B6_PSG3:
000B2F12 F507                       	smpsPSGvoice        sTone_1D
000B2F14 8006                       	dc.b	nRst, $06
000B2F1B F3E7                       	smpsPSGform         $E7
000B2F1D CD4F                       	dc.b	nE6, $4F
000B2F1F F2                         	smpsStop
000B2F20                            
000B2F20                            Sound_B6_Voices:
000B2F20                            ;	Voice $00
000B2F20                            ;	$3D
000B2F20                            ;	$09, $03, $00, $00, 	$1F, $1F, $1F, $1F, 	$10, $0C, $0C, $0C
000B2F20                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$09, $84, $92, $8E
000B2F20                            	smpsVcAlgorithm     $05
000B2F20                            	smpsVcFeedback      $07
000B2F20                            	smpsVcUnusedBits    $00
000B2F20                            	smpsVcDetune        $00, $00, $00, $00
000B2F20                            	smpsVcCoarseFreq    $00, $00, $03, $09
000B2F20                            	smpsVcRateScale     $00, $00, $00, $00
000B2F20                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B2F20                            	smpsVcAmpMod        $00, $00, $00, $00
000B2F20                            	smpsVcDecayRate1    $0C, $0C, $0C, $10
000B2F20                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B2F20                            	smpsVcDecayLevel    $02, $04, $02, $01
000B2F20                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2F39                            
000B2F39                            
000B2F3A 00                         		even
000B2F3A                            SoundBD:	incbin	"sound/sfx/SndBD - ChainStomp.bin"
000B2F8E                            		even
000B2F8E                            SoundBE:	incbin	"sound/sfx/SndBE - Roll.bin"
000B2FC8                            		even
000B2FC8                            SoundBF:	incbin	"sound/sfx/SndBF - Get Continue.bin"
000B303A                            		even
000B303A                            SoundC0:	incbin	"sound/sfx/SndC0 - Basaran Flap.bin"
000B3068                            		even
000B3068                            SoundC1:	incbin	"sound/sfx/SndC1 - Break Item.bin"
000B30A2                            		even
000B30A2                            SoundC2:	include	"sound/sfx/DrowningWarning.asm"
000B30A2                            SndC1_Header:
000B30A2                            	smpsHeaderStartSong 3
000B30A4 01                         	smpsHeaderTempoSFX  $01
000B30A5 01                         	smpsHeaderChanSFX   $01
000B30A6                            
000B30AC                            
000B30AC                            ; FM4 Data
000B30AC                            SndC1_FM4:
000B30AC EF00                       	smpsSetvoice        $00
000B30AE D506 40                    	dc.b	nC7, $06, $40
000B30B1 F2                         	smpsStop
000B30B2                            
000B30B2                            SndC1_Voices:
000B30B2                            ;	Voice $00
000B30B2                            ;	$38
000B30B2                            ;	$01, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$09, $09, $09, $0B
000B30B2                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$5C, $22, $27, $80
000B30B2                            	smpsVcAlgorithm     $00
000B30B2                            	smpsVcFeedback      $07
000B30B2                            	smpsVcUnusedBits    $00
000B30B2                            	smpsVcDetune        $00, $00, $00, $00
000B30B2                            	smpsVcCoarseFreq    $00, $00, $00, $01
000B30B2                            	smpsVcRateScale     $00, $00, $00, $00
000B30B2                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B30B2                            	smpsVcAmpMod        $00, $00, $00, $00
000B30B2                            	smpsVcDecayRate1    $0B, $09, $09, $09
000B30B2                            	smpsVcDecayRate2    $00, $00, $00, $00
000B30B2                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B30B2                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B30CC 00                         		even
000B30CC                            SoundC3:	incbin	"sound/sfx/SndC3 - Giant Ring.bin"
000B3146                            		even
000B3146                            SoundC4:	incbin	"sound/sfx/SndC4 - Bomb.bin"
000B316E                            		even
000B316E                            SoundC5:	include	"sound/sfx/Cash Register.asm"
000B316E                            Sound_B0_Header:
000B316E                            	smpsHeaderStartSong 3
000B3170 01                         	smpsHeaderTempoSFX  $01
000B3171 03                         	smpsHeaderChanSFX   $03
000B3172                            
000B3184                            
000B3184                            ; FM5 Data
000B3184                            Sound_B0_FM5:
000B3184 EF00                       	smpsSetvoice        $00
000B3186 8A08 8002 8A08             	dc.b	nA0, $08, nRst, $02, nA0, $08
000B318C F2                         	smpsStop
000B318D                            
000B318D                            ; FM4 Data
000B318D                            Sound_B0_FM4:
000B318D EF01                       	smpsSetvoice        $01
000B318F 8012 C655                  	dc.b	nRst, $12, nA5, $55
000B3193 F2                         	smpsStop
000B3194                            
000B3194                            ; FM3 Data
000B3194                            Sound_B0_FM3:
000B3194 EF02                       	smpsSetvoice        $02
000B3196 8002 C205 0405 04          	dc.b	nRst, $02, nF5, $05, $04, $05, $04
000B319D F2                         	smpsStop
000B319E                            
000B319E                            Sound_B0_Voices:
000B319E                            ;	Voice $00
000B319E                            ;	$3B
000B319E                            ;	$03, $02, $03, $06, 	$18, $1A, $1A, $96, 	$17, $0E, $0A, $10
000B319E                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $28, $39, $80
000B319E                            	smpsVcAlgorithm     $03
000B319E                            	smpsVcFeedback      $07
000B319E                            	smpsVcUnusedBits    $00
000B319E                            	smpsVcDetune        $00, $00, $00, $00
000B319E                            	smpsVcCoarseFreq    $06, $03, $02, $03
000B319E                            	smpsVcRateScale     $02, $00, $00, $00
000B319E                            	smpsVcAttackRate    $16, $1A, $1A, $18
000B319E                            	smpsVcAmpMod        $00, $00, $00, $00
000B319E                            	smpsVcDecayRate1    $10, $0A, $0E, $17
000B319E                            	smpsVcDecayRate2    $00, $00, $00, $00
000B319E                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B319E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B31B7                            
000B31B7                            ;	Voice $01
000B31B7                            ;	$04
000B31B7                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
000B31B7                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $80, $23, $80
000B31B7                            	smpsVcAlgorithm     $04
000B31B7                            	smpsVcFeedback      $00
000B31B7                            	smpsVcUnusedBits    $00
000B31B7                            	smpsVcDetune        $04, $07, $07, $03
000B31B7                            	smpsVcCoarseFreq    $09, $07, $02, $07
000B31B7                            	smpsVcRateScale     $00, $00, $00, $00
000B31B7                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B31B7                            	smpsVcAmpMod        $00, $00, $00, $00
000B31B7                            	smpsVcDecayRate1    $0D, $07, $0A, $07
000B31B7                            	smpsVcDecayRate2    $0B, $00, $0B, $00
000B31B7                            	smpsVcDecayLevel    $00, $01, $00, $01
000B31B7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B31D0                            
000B31D0                            ;	Voice $02
000B31D0                            ;	$3C
000B31D0                            ;	$0F, $00, $00, $00, 	$1F, $1A, $18, $1C, 	$17, $11, $1A, $0E
000B31D0                            ;	$00, $0F, $14, $10, 	$1F, $9F, $9F, $2F, 	$07, $80, $26, $8C
000B31D0                            	smpsVcAlgorithm     $04
000B31D0                            	smpsVcFeedback      $07
000B31D0                            	smpsVcUnusedBits    $00
000B31D0                            	smpsVcDetune        $00, $00, $00, $00
000B31D0                            	smpsVcCoarseFreq    $00, $00, $00, $0F
000B31D0                            	smpsVcRateScale     $00, $00, $00, $00
000B31D0                            	smpsVcAttackRate    $1C, $18, $1A, $1F
000B31D0                            	smpsVcAmpMod        $00, $00, $00, $00
000B31D0                            	smpsVcDecayRate1    $0E, $1A, $11, $17
000B31D0                            	smpsVcDecayRate2    $10, $14, $0F, $00
000B31D0                            	smpsVcDecayLevel    $02, $09, $09, $01
000B31D0                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B31E9                            
000B31E9                            
000B31EA 00                         		even
000B31EA                            SoundC6:	incbin	"sound/sfx/SndC6 - Ring Loss.bin"
000B322C                            		even
000B322C                            SoundC7:	incbin	"sound/sfx/SndC7 - Chain Rising.bin"
000B325A                            		even
000B325A                            SoundC8:	incbin	"sound/sfx/SndC8 - Burning.bin"
000B326C                            		even
000B326C                            SoundC9:	incbin	"sound/sfx/SndC9 - Hidden Bonus.bin"
000B329A                            		even
000B329A                            SoundCA:	incbin	"sound/sfx/SndCA - Enter SS.bin"
000B32C8                            		even
000B32C8                            SoundCB:	incbin	"sound/sfx/SndCB - Wall Smash.bin"
000B3314                            		even
000B3314                            SoundCC:	include	"sound/sfx/Spring.asm"
000B3314                            Spring_Header:
000B3314                            	smpsHeaderStartSong 1
000B3316 01                         	smpsHeaderTempoSFX  $01
000B3317 01                         	smpsHeaderChanSFX   $01
000B3318                            
000B331E                            
000B331E                            ; FM6 Data
000B331E                            Spring_FM6:
000B331E EF00                       	smpsSetvoice        $00
000B3320 8001                       	dc.b	nRst, $01
000B3327 B006                       	dc.b	nB3, $06
000B3329 F4                         	smpsModOff
000B332A EF01                       	smpsSetvoice        $01
000B332C                            
000B332C                            Spring_Loop00:
000B332C BD02                       	dc.b	nC5, $02
000B332E E601                       	smpsAlterVol      $01
000B3330 E7                         	dc.b	smpsNoAttack
000B3331 F700 19FF F7               	smpsLoop            $00, $19, Spring_Loop00
000B3336 F2                         	smpsStop
000B3337                            
000B3337                            Spring_Voices:
000B3337                            ;	Voice $00
000B3337                            ;	$20
000B3337                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
000B3337                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$16, $30, $13, $80
000B3337                            	smpsVcAlgorithm     $00
000B3337                            	smpsVcFeedback      $04
000B3337                            	smpsVcUnusedBits    $00
000B3337                            	smpsVcDetune        $03, $03, $03, $03
000B3337                            	smpsVcCoarseFreq    $01, $00, $05, $06
000B3337                            	smpsVcRateScale     $02, $02, $03, $03
000B3337                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B3337                            	smpsVcAmpMod        $00, $00, $00, $00
000B3337                            	smpsVcDecayRate1    $06, $09, $06, $07
000B3337                            	smpsVcDecayRate2    $08, $06, $06, $07
000B3337                            	smpsVcDecayLevel    $0F, $01, $01, $02
000B3337                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B3350                            
000B3350                            ;	Voice $01
000B3350                            ;	$20
000B3350                            ;	$31, $33, $30, $31, 	$9F, $9F, $9F, $9F, 	$07, $06, $09, $06
000B3350                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $23, $11, $80
000B3350                            	smpsVcAlgorithm     $00
000B3350                            	smpsVcFeedback      $04
000B3350                            	smpsVcUnusedBits    $00
000B3350                            	smpsVcDetune        $03, $03, $03, $03
000B3350                            	smpsVcCoarseFreq    $01, $00, $03, $01
000B3350                            	smpsVcRateScale     $02, $02, $02, $02
000B3350                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B3350                            	smpsVcAmpMod        $00, $00, $00, $00
000B3350                            	smpsVcDecayRate1    $06, $09, $06, $07
000B3350                            	smpsVcDecayRate2    $08, $06, $06, $07
000B3350                            	smpsVcDecayLevel    $0F, $01, $01, $02
000B3350                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B336A 00                         		even
000B336A                            SoundCD:	include	"sound/sfx/Beep.asm"
000B336A                            Snd99_Header:
000B336A                            	smpsHeaderStartSong 3
000B336C 01                         	smpsHeaderTempoSFX  $01
000B336D 01                         	smpsHeaderChanSFX   $01
000B336E                            
000B3374                            
000B3374                            ; FM4 Data
000B3374                            Snd99_FM4:
000B3374 EF00                       	smpsSetvoice        $00
000B3376 B502                       	dc.b	nE4, $02
000B3378 F2                         	smpsStop
000B3379                            
000B3379                            Snd99_Voices:
000B3379                            ;	Voice $00
000B3379                            ;	$07
000B3379                            ;	$0A, $0A, $0A, $0A, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000B3379                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$88, $88, $88, $88
000B3379                            	smpsVcAlgorithm     $07
000B3379                            	smpsVcFeedback      $00
000B3379                            	smpsVcUnusedBits    $00
000B3379                            	smpsVcDetune        $00, $00, $00, $00
000B3379                            	smpsVcCoarseFreq    $0A, $0A, $0A, $0A
000B3379                            	smpsVcRateScale     $00, $00, $00, $00
000B3379                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B3379                            	smpsVcAmpMod        $00, $00, $00, $00
000B3379                            	smpsVcDecayRate1    $00, $00, $00, $00
000B3379                            	smpsVcDecayRate2    $00, $00, $00, $00
000B3379                            	smpsVcDecayLevel    $00, $00, $00, $00
000B3379                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B3392                            		even
000B3392                            SoundCE:	incbin	"sound/sfx/SndCE - Ring Left Speaker.bin"
000B33C0                            		even
000B33C0                            SoundCF:	include	"sound/sfx/Signpost.asm"
000B33C0                            SignpostCD_Header:
000B33C0                            	smpsHeaderStartSong 3
000B33C2 01                         	smpsHeaderTempoSFX  $01
000B33C3 02                         	smpsHeaderChanSFX   $02
000B33C4                            
000B33D0                            
000B33D0                            ; FM5 Data
000B33D0                            Snd9D_FM5:
000B33D0 8004                       	dc.b	nRst, $04
000B33D2                            
000B33D2                            ; FM4 Data
000B33D2                            Snd9D_FM4:
000B33D2 EF00                       	smpsSetvoice        $00
000B33D4                            
000B33D4                            Snd9D_Loop00:
000B33D4 B405                       	dc.b	nEb4, $05
000B33D6 E604                       	smpsFMAlterVol      $04
000B33D8 F700 08FF F8               	smpsLoop            $00, $08, Snd9D_Loop00
000B33DD F2                         	smpsStop
000B33DE                            
000B33DE                            Snd9D_Voices:
000B33DE                            ;	Voice $00
000B33DE                            ;	$F4
000B33DE                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
000B33DE                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$0C, $85, $00, $80
000B33DE                            	smpsVcAlgorithm     $04
000B33DE                            	smpsVcFeedback      $06
000B33DE                            	smpsVcUnusedBits    $03
000B33DE                            	smpsVcDetune        $00, $00, $00, $00
000B33DE                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
000B33DE                            	smpsVcRateScale     $00, $00, $00, $00
000B33DE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B33DE                            	smpsVcAmpMod        $00, $00, $00, $00
000B33DE                            	smpsVcDecayRate1    $0B, $0B, $00, $00
000B33DE                            	smpsVcDecayRate2    $08, $05, $00, $00
000B33DE                            	smpsVcDecayLevel    $0F, $0F, $00, $00
000B33DE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B33F8 00                         		even
000B33F8                            SoundD0:	incbin	"sound/sfx/SndD0 - Waterfall.bin"
000B3432                            		even
000B3432                            SoundD1:	include	"sound/sfx/Lightning Shield.asm"
000B3432                            Sound_41_Header:
000B3432                            	smpsHeaderStartSong 3
000B3434 01                         	smpsHeaderTempoSFX  $01
000B3435 01                         	smpsHeaderChanSFX   $01
000B3436                            
000B343C                            	
000B343C                            Sound41_FM5:
000B343C EF00                       	smpsSetvoice        $00
000B343E A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
000B3443 F2                         	smpsStop
000B3444                            
000B3444                            Sound_41_Voices:
000B3444                            ;	Voice $00
000B3444                            ;	$36
000B3444                            ;	$07, $10, $0E, $0C, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000B3444                            ;	$00, $0D, $0D, $0E, 	$0F, $0F, $0F, $0F, 	$17, $80, $80, $80
000B3444                            	smpsVcAlgorithm     $06
000B3444                            	smpsVcFeedback      $06
000B3444                            	smpsVcUnusedBits    $00
000B3444                            	smpsVcDetune        $00, $00, $01, $00
000B3444                            	smpsVcCoarseFreq    $0C, $0E, $00, $07
000B3444                            	smpsVcRateScale     $00, $00, $00, $00
000B3444                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B3444                            	smpsVcAmpMod        $00, $00, $00, $00
000B3444                            	smpsVcDecayRate1    $00, $00, $00, $00
000B3444                            	smpsVcDecayRate2    $0E, $0D, $0D, $00
000B3444                            	smpsVcDecayLevel    $00, $00, $00, $00
000B3444                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B345D                            
000B345D                            
000B345E 00                         		even
000B345E                            SoundD2:	include	"sound/sfx/CD_Charge.asm"
000B345E                            Snd9B_Header:
000B345E                            	smpsHeaderStartSong 3
000B3460 01                         	smpsHeaderTempoSFX  $01
000B3461 01                         	smpsHeaderChanSFX   $01
000B3462                            
000B3468                            
000B3468                            ; FM5 Data
000B3468                            Snd9B_FM5:
000B3468 EF00                       	smpsSetvoice        $00
000B346A 8001                       	dc.b	nRst, $01
000B3471 CA25                       	dc.b	nCs6, $25
000B3473 F4                         	smpsModOff
000B3474                            
000B3474                            Snd9B_Loop00:
000B3474 E7                         	dc.b	smpsNoAttack
000B3475 E601                       	smpsFMAlterVol      $01
000B3477 D102                       	dc.b	nAb6, $02
000B3479 F700 2AFF F7               	smpsLoop            $00, $2A, Snd9B_Loop00
000B347E F2                         	smpsStop
000B347F                            
000B347F                            Snd9B_Voices:
000B347F                            ;	Voice $00
000B347F                            ;	$3C
000B347F                            ;	$00, $44, $02, $02, 	$1F, $1F, $1F, $15, 	$00, $1F, $00, $00
000B347F                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$0D, $80, $28, $80
000B347F                            	smpsVcAlgorithm     $04
000B347F                            	smpsVcFeedback      $07
000B347F                            	smpsVcUnusedBits    $00
000B347F                            	smpsVcDetune        $00, $00, $04, $00
000B347F                            	smpsVcCoarseFreq    $02, $02, $04, $00
000B347F                            	smpsVcRateScale     $00, $00, $00, $00
000B347F                            	smpsVcAttackRate    $15, $1F, $1F, $1F
000B347F                            	smpsVcAmpMod        $00, $00, $00, $00
000B347F                            	smpsVcDecayRate1    $00, $00, $1F, $00
000B347F                            	smpsVcDecayRate2    $00, $00, $00, $00
000B347F                            	smpsVcDecayLevel    $00, $00, $00, $00
000B347F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B3498                            
000B3498                            
000B3498                            		even		
000B3498                            SoundD3:	incbin	"sound/sfx/Peelout_Release.bin"
000B3530                            		even
000B3530                            SoundD4:	incbin	"sound/sfx/Peelout_Stop.bin"
000B353C                            		even				
000B353C                            SoundD5:	incbin	"sound/sfx/Spindash.bin"
000B3578                            		even		
000B3578                            SoundD6:	include	"sound/sfx/Transform.asm"
000B3578                            Sound_9F_Header:
000B3578                            	smpsHeaderStartSong 3
000B357A 01                         	smpsHeaderTempoSFX  $01
000B357B 02                         	smpsHeaderChanSFX   $02
000B357C                            
000B3588                            
000B3588                            ; FM4 Data
000B3588                            Sound_9F_FM4:
000B3588 8003                       	dc.b	nRst, $03
000B358A                            
000B358A                            ; FM5 Data
000B358A                            Sound_9F_FM5:
000B358A EF00                       	smpsSetvoice        $00
000B3591 AE13                       	dc.b	nA3, $13
000B3593 E614                       	smpsFMAlterVol      $14
000B3595 F700 05FF F1               	smpsLoop            $00, $05, Sound_9F_FM5
000B359A F2                         	smpsStop
000B359B                            
000B359B                            Sound_9F_Voices:
000B359B                            ;	Voice $00
000B359B                            ;	$7A
000B359B                            ;	$1F, $1F, $04, $1F, 	$10, $1F, $18, $10, 	$10, $16, $0C, $00
000B359B                            ;	$02, $02, $02, $02, 	$2F, $2F, $FF, $3F, 	$42, $16, $11, $80
000B359B                            	smpsVcAlgorithm     $02
000B359B                            	smpsVcFeedback      $07
000B359B                            	smpsVcUnusedBits    $01
000B359B                            	smpsVcDetune        $01, $00, $01, $01
000B359B                            	smpsVcCoarseFreq    $0F, $04, $0F, $0F
000B359B                            	smpsVcRateScale     $00, $00, $00, $00
000B359B                            	smpsVcAttackRate    $10, $18, $1F, $10
000B359B                            	smpsVcAmpMod        $00, $00, $00, $00
000B359B                            	smpsVcDecayRate1    $00, $0C, $16, $10
000B359B                            	smpsVcDecayRate2    $02, $02, $02, $02
000B359B                            	smpsVcDecayLevel    $03, $0F, $02, $02
000B359B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B35B4                            
000B35B4                            
000B35B4                            		even			
000B35B4                            		; Don't let Sega sample cross $8000-byte boundary
000B35B4                            		; (DAC driver doesn't switch banks automatically)
000B8000                            SegaPCM:	incbin	"sound/dac/sega.pcm"
000BE978                            SegaPCM_End
000BE978                            		even
000BE978                            
000BE978                            
000BE978                            
000BE978                            
000BE978                            			include "_inc\Sonic 2 Options.asm"
000BE978                            ; ---------------------------------------------------------------------------
000BE978                            ; Common menu screen subroutine for transferring text to RAM
000BE978                            
000BE978                            ; ARGUMENTS:
000BE978                            ; d0 = starting art tile
000BE978                            ; a1 = data source
000BE978                            ; a2 = destination
000BE978                            ;
000BE978                            ; ---------------------------------------------------------------------------
000BE978                            MenuScreen:
000BE978 103C 0000                  		move.b	#bgm_Fade,d0
000BE97C 4EB8 12A0                  		jsr	PlaySound_Special ; fade out music
000BE980 4EB8 235A                  		jsr	PaletteFadeOut
000BE984 46FC 2700                  		move	#$2700,sr
000BE988 3038 F60C                  		move.w	($FFFFF60C).w,d0
000BE98C 0200 00BF                  		andi.b	#-$41,d0
000BE990 33C0 00C0 0004             		move.w	d0,($00C00004).l
000BE996 4EB8 11D0                  		jsr	ClearScreen
000BE99A 4DF9 00C0 0004             		lea		($00C00004).l,a6
000BE9A0 3CBC 8004                  		move.w	#$8004,(a6)
000BE9A4 3CBC 8230                  		move.w	#$8230,(a6)
000BE9A8 3CBC 8407                  		move.w	#$8407,(a6)
000BE9AC 3CBC 8230                  		move.w	#$8230,(a6)
000BE9B0 3CBC 8700                  		move.w	#$8700,(a6)
000BE9B4 3CBC 8C81                  		move.w	#$8C81,(a6)
000BE9B8 3CBC 9001                  		move.w	#$9001,(a6)
000BE9BC 43F8 AC00                  		lea	($FFFFAC00).w,a1
000BE9C0 7000                       		moveq	#0,d0
000BE9C2 323C 00FF                  		move.w	#$FF,d1
000BE9C6                            
000BE9C6                            MenuScreen_ClrObjRam:
000BE9C6 22C0                       		move.l	d0,(a1)+
000BE9C8 51C9 FFFC                  		dbf		d1,MenuScreen_ClrObjRam
000BE9CC                            
000BE9CC                            ; ===========================================================================
000BE9CC                            
000BE9CC 31FC C800 C8FC             		ResetDMAQueue
000BE9D2                            
000BE9DC 41F9 0000 0000             		lea		(Nem_MenuFont).l,a0
000BE9E2 4EB8 134E                  		jsr	NemDec
000BE9F0 41F9 0000 0000             		lea		(Nem_MenuBox).l,a0
000BE9F6 4EB8 134E                  		jsr	NemDec
000BE9FA 43F9 00FF 0000             		lea	($FF0000).l,a1
000BEA00 41F9 0000 0000             		lea	(Eni_MenuBg).l,a0 ; load SONIC/MILES mappings
000BEA06 303C 6000                  		move.w	#$6000,d0
000BEA0A 4EB8 18D8                  		jsr	EniDec
000BEA0E                            
000BEA0E 43F9 00FF 0000 203C 6000+  		copyTilemap	$FF0000,$E000,$27,$1B
000BEA22                            
000BEA22 6100 0000                  		bsr.w	MenuScreen_Options	; if yes, branch
000BEA26                            
000BEA26                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000BEA26                            
000BEA26                            ; sub_8FBE:
000BEA26                            MenuScreenTextToRAM:
000BEA26 7200                       		moveq	#0,d1
000BEA28 1219                       		move.b	(a1)+,d1
000BEA2A                            
000BEA2A                            MenuScreenTextToRAM_Cont:
000BEA2A 1019                       		move.b	(a1)+,d0
000BEA2C 34C0                       		move.w	d0,(a2)+
000BEA2E 51C9 FFFA                  		dbf	d1,MenuScreenTextToRAM_Cont
000BEA32 4E75                       		rts
000BEA34                            ; End of function MenuScreenTextToRAM
000BEA34                            
000BEA34                            ; ===========================================================================
000BEA34                            ; loc_8FCC:
000BEA34                            MenuScreen_Options:
000BEA34 43F9 00FF 0000             		lea	(v_256x256).l,a1
000BEA3A 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000BEA40 303C 0070                  		move.w	#$70,d0
000BEA44 4EB8 18D8                  		jsr	EniDec
000BEA48 43F9 00FF 0160             		lea	(v_256x256+$160).l,a1
000BEA4E 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000BEA54 303C 2070                  		move.w	#$2070,d0
000BEA58 4EB8 18D8                  		jsr	EniDec
000BEA5C 4238 FF8C                  		clr.b	(Options_menu_box).w
000BEA60 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000BEA64 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000BEA68 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000BEA6C 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000BEA70 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000BEA74 4238 FF8C                  		clr.b	(Options_menu_box).w
000BEA78 4238 F711                  		clr.b	($FFFFF711).w		
000BEA7C 4278 F7F0                  		clr.w	($FFFFF7F0).w					 
000BEA80                            ;-------------------------------------------------------------------------------
000BEA80 4278 F5B8                  		clr.w	($FFFFF5B8).w
000BEA84 45F9 0000 0000             		lea	(Sonic_Miles_Spr).l,a2 ; sonic/miles background load
000BEA8A 6100 0000                  		bsr.w	Dynamic_Menu
000BEA8E                            ;-------------------------------------------------------------------------------
000BEA8E 7013                       		moveq	#palid_Options,d0
000BEA90 4EB8 2604                  		jsr		PalLoad1
000BEA94 103C 0091                  		move.b	#$91,d0
000BEA98 4EB8 12A0                  		jsr	PlaySound_Special ; play options music
000BEA9C 42B8 F700                  		clr.l	(v_screenposx).w
000BEAA0 42B8 F704                  		clr.l	(v_screenposy).w
000BEAA4 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000BEAAA 4EB8 3C98                  		jsr	WaitForVBla
000BEAAE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000BEAB2 0000 0040                  		ori.b	#$40,d0
000BEAB6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000BEABC 4EB8 22B4                  		jsr	PaletteFadeIn
000BEAC0                            ; loc_9060:
000BEAC0                            OptionScreen_Main:
000BEAC0 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000BEAC6 4EB8 3C98                  		jsr	WaitForVBla				
000BEACA 46FC 2700                  		move	#$2700,sr
000BEACE 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000BEAD2 6100 0000                  		bsr.w	OptionScreen_Controls			
000BEAD6 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000BEADA 46FC 2300                  		move	#$2300,sr
000BEADE 45F9 0000 0000             		lea	(Sonic_Miles_Spr).l,a2 ; sonic/miles background load	
000BEAE4 6100 0000                  		bsr.w	Dynamic_Menu		
000BEAE8 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
000BEAEE                            
000BEAEE 6600                       		bne.s	OptionScreen_Select		; if yes, branch
000BEAF0 60CE                       		bra.s	OptionScreen_Main
000BEAF2                            ; ===========================================================================
000BEAF2                            ; loc_909A:
000BEAF2                            OptionScreen_Select:
000BEAF2 1038 FF8C                  		move.b	(Options_menu_box).w,d0
000BEAF6 6600                       		bne.s	OptionScreen_Select_Not1P
000BEAF8 7000                       		moveq	#0,d0
000BEAFA 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; => SegaScreen
000BEB00 4E75                       		rts
000BEB02                            ; ===========================================================================
000BEB02                            ; loc_90B6:
000BEB02                            OptionScreen_Select_Not1P:
000BEB02 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; => SegaScreen
000BEB08 4E75                       		rts
000BEB0A                            ; ===========================================================================
000BEB0A                            
000BEB0A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000BEB0A                            
000BEB0A                            ;sub_90E0:
000BEB0A                            OptionScreen_Controls:
000BEB0A 7400                       		moveq	#0,d2
000BEB0C 1438 FF8C                  		move.b	(Options_menu_box).w,d2			
000BEB10 1038 F605                  		move.b	(v_jpadpress1).w,d0		; Ctrl_1_Press
000BEB14 0800 0000                  		btst	#0,d0			; is up pressed?
000BEB18 6700                       		beq.s	Option_Controls_Down	; if not, branch
000BEB1A 5302                       		subq.b	#1,d2					; move up 1 selection
000BEB1C 6400                       		bcc.s	Option_Controls_Down
000BEB1E 143C 0001                  		move.b	#1,d2
000BEB22                            
000BEB22                            Option_Controls_Down:
000BEB22 0800 0001                  		btst	#1,d0			; is down pressed?
000BEB26 6700                       		beq.s	Option_Controls_Refresh	; if not, branch
000BEB28 5202                       		addq.b	#1,d2					; move down 1 selection
000BEB2A 0C02 0002                  		cmpi.b	#2,d2
000BEB2E 6500                       		blo.s	Option_Controls_Refresh
000BEB30 7400                       		moveq	#0,d2
000BEB32                            
000BEB32                            Option_Controls_Refresh:
000BEB32 11C2 FF8C                  		move.b	d2,(Options_menu_box).w
000BEB36 E54A                       		lsl.w	#2,d2
000BEB38 163B 2000                  		move.b	OptionScreen_Choices(pc,d2.w),d3 ; number of choices for the option
000BEB3C 227B 2000                  		movea.l	OptionScreen_Choices(pc,d2.w),a1 ; location where the choice is stored (in RAM)
000BEB40 3411                       		move.w	(a1),d2
000BEB42 0800 0002                  		btst	#2,d0				; is left pressed?
000BEB46 6700                       		beq.s	Option_Controls_Right		; if not, branch
000BEB48 5302                       		subq.b	#1,d2						; subtract 1 from sound test
000BEB4A 6400                       		bcc.s	Option_Controls_Right
000BEB4C 1403                       		move.b	d3,d2
000BEB4E                            
000BEB4E                            Option_Controls_Right:
000BEB4E 0800 0003                  		btst	#3,d0			; is right pressed?
000BEB52 6700                       		beq.s	Option_Controls_Button_A	; if not, branch
000BEB54 5202                       		addq.b	#1,d2						; add 1 to sound test
000BEB56 B403                       		cmp.b	d3,d2
000BEB58 6300                       		bls.s	Option_Controls_Button_A
000BEB5A 7400                       		moveq	#0,d2
000BEB5C                            
000BEB5C                            Option_Controls_Button_A:
000BEB5C 0800 0006                  		btst	#6,d0				; is button A pressed?
000BEB60 6700                       		beq.s	Option_Controls_Refresh2	; if not, branch
000BEB62 0602 0010                  		addi.b	#$10,d2						; add $10 to sound test
000BEB66 B403                       		cmp.b	d3,d2
000BEB68 6300                       		bls.s	Option_Controls_Refresh2
000BEB6A 7400                       		moveq	#0,d2
000BEB6C                            
000BEB6C                            Option_Controls_Refresh2:
000BEB6C 3282                       		move.w	d2,(a1)
000BEB6E                            
000BEB6E                            Option_Controls_NoMove:
000BEB6E 4E75                       		rts
000BEB70                            ; End of function OptionScreen_Controls
000BEB70                            
000BEB70                            ; ===========================================================================
000BEB70                            ; word_917A:
000BEB70                            OptionScreen_Choices:
000BEB70 0AFF FFBE                  		dc.l ($B-1)<<24|($FFFFBE&$FFFFFF)
000BEB74 01FF FF8A                  		dc.l (2-1)<<24|($FFFF8A&$FFFFFF)
000BEB78                            		even
000BEB78                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000BEB78                            
000BEB78                            
000BEB78                            OptionScreen_DrawSelected:
000BEB78 6100 0000                  		bsr.w	loc_9268
000BEB7C 7200                       		moveq	#0,d1
000BEB7E 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEB82 E749                       		lsl.w	#3,d1
000BEB84 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000BEB8A 47F3 1000                  		lea	(a3,d1.w),a3
000BEB8E 303C 6000                  		move.w	#$6000,d0
000BEB92 45F9 FFFF 0030             		lea	($FFFF0030).l,a2
000BEB98 225B                       		movea.l	(a3)+,a1
000BEB9A 6100 FE8A                  		bsr.w	MenuScreenTextToRAM
000BEB9E 45F9 FFFF 00B6             		lea	($FFFF00B6).l,a2
000BEBA4 7200                       		moveq	#0,d1
000BEBA6 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEBAA E549                       		lsl.w	#2,d1
000BEBAC 43FA FFC2                  		lea	OptionScreen_Choices(pc),a1
000BEBB0 2271 1000                  		movea.l	(a1,d1.w),a1
000BEBB4 3211                       		move.w	(a1),d1
000BEBB6 E549                       		lsl.w	#2,d1
000BEBB8                            
000BEBB8                            loc_9186:		
000BEBB8 2274 1000                  		movea.l	(a4,d1.w),a1
000BEBBC 6100 FE68                  		bsr.w	MenuScreenTextToRAM
000BEBC0                            		;cmpi.b	#2,(Options_menu_box).w
000BEBC0                            		;bne.s	loc2_9186
000BEBC0                            		;lea	($FFFF00C2).l,a2
000BEBC0                            		;bsr.w	loc_9296
000BEBC0                            
000BEBC0                            loc2_9186:		
000BEBC0 43F9 00FF 0000             		lea	(v_256x256).l,a1
000BEBC6 201B                       		move.l	(a3)+,d0
000BEBC8 7215                       		moveq	#$15,d1
000BEBCA 7407                       		moveq	#7,d2
000BEBCC 4EF8 1324                  		jmp	TilemapToVRAM
000BEBD0                            ; ===========================================================================
000BEBD0                            
000BEBD0                            OptionScreen_DrawUnselected:
000BEBD0 6100 0000                  		bsr.w	loc_9268
000BEBD4 7200                       		moveq	#0,d1
000BEBD6 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEBDA E749                       		lsl.w	#3,d1
000BEBDC 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000BEBE2 47F3 1000                  		lea	(a3,d1.w),a3
000BEBE6 7000                       		moveq	#0,d0
000BEBE8 45F9 FFFF 0190             		lea	($FFFF0190).l,a2
000BEBEE 225B                       		movea.l	(a3)+,a1
000BEBF0 6100 FE34                  		bsr.w	MenuScreenTextToRAM
000BEBF4 45F9 FFFF 0216             		lea	($FFFF0216).l,a2
000BEBFA 7200                       		moveq	#0,d1
000BEBFC                            		;cmpi.b	#2,(Options_menu_box).w
000BEBFC                            		;beq.s	loc2_91F8
000BEBFC 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEC00 E549                       		lsl.w	#2,d1
000BEC02 43FA FF6C                  		lea	OptionScreen_Choices(pc),a1
000BEC06 2271 1000                  		movea.l	(a1,d1.w),a1
000BEC0A 3211                       		move.w	(a1),d1
000BEC0C E549                       		lsl.w	#2,d1
000BEC0E                            
000BEC0E                            loc2_91F8		
000BEC0E 2274 1000                  		movea.l	(a4,d1.w),a1
000BEC12 6100 FE12                  		bsr.w	MenuScreenTextToRAM
000BEC16                            		;cmpi.b	#2,(Options_menu_box).w
000BEC16                            		;bne.s	loc3_91F8
000BEC16                            		;lea	($FFFF0222).l,a2
000BEC16                            		;bsr.w	loc_9296
000BEC16                            
000BEC16                            loc3_91F8		
000BEC16 43F9 FFFF 0160             		lea	($FFFF0160).l,a1
000BEC1C 201B                       		move.l	(a3)+,d0
000BEC1E 7215                       		moveq	#$15,d1
000BEC20 7407                       		moveq	#7,d2
000BEC22 4EF8 1324                  		jmp	TilemapToVRAM
000BEC26                            ; ===========================================================================
000BEC26                            
000BEC26                            loc_9268:
000BEC26 49F9 0000 0000             		lea	(off_92D2).l,a4
000BEC2C 4A38 FFF8                  		tst.b	(v_megadrive).w
000BEC30 6A00                       		bpl.s	loc2_9268
000BEC32 49F9 0000 0000             		lea	(off_92DE).l,a4
000BEC38                            
000BEC38                            loc2_9268:
000BEC38 4A38 FF8C                  		tst.b	(Options_menu_box).w
000BEC3C 6700                       		beq.s	loc4_9268
000BEC3E 49F9 0000 0000             		lea	(off_92EA).l,a4
000BEC44                            
000BEC44                            loc4_9268:
000BEC44 4E75                       		rts
000BEC46                            ; ===========================================================================
000BEC46                            
000BEC46                            loc_9296:
000BEC46 4E75                       		rts
000BEC48                            
000BEC48                            Dynamic_Menu:
000BEC48 5338 F5B9                                  subq.b  #$01, ($FFFFF5B9).w          ; remove 1 from frame count
000BEC4C 6A00                                       bpl.s   Exit_Dinamic_Menu            ; exit menu
000BEC4E 11FC 0007 F5B9                             move.b  #$07, ($FFFFF5B9).w          ; Set time for frame display
000BEC54 1038 F5B8                                  move.b  ($FFFFF5B8).w, D0            ; Current Frame D0
000BEC58 5238 F5B8                                  addq.b  #$01, ($FFFFF5B8).w          ; Advance frame $FFFFFFB8
000BEC5C 0240 001F                                  andi.w  #$001F, D0
000BEC60 103B 0000                                  move.b  Sonic_Miles_Frame_Select(PC, D0), D0  ; Id frame D0
000BEC64                                          ; muls.w  #$0140, D0                   ; as above
000BEC64 ED48                                       lsl.w   #$06, D0
000BEC66 4DF9 00C0 0000                             lea     ($00C00000), A6
000BEC6C 2D7C 4020 0000 0004                        move.l  #$40200000, $0004(A6)
000BEC74 43F9 0000 0000                             lea     (Sonic_Miles_Spr), A1
000BEC7A 43F1 0000                                  lea     $00(A1, D0), A1
000BEC7E 303C 0009                                  move.w  #$0009, D0                   ; load tiles
000BEC82                                            
000BEC82                            Menu_Loop_Load_Tiles:
000BEC82 2C99                                       move.l  (A1)+, (A6)
000BEC84 2C99                                       move.l  (A1)+, (A6)     
000BEC86 2C99                                       move.l  (A1)+, (A6)     
000BEC88 2C99                                       move.l  (A1)+, (A6)     
000BEC8A 2C99                                       move.l  (A1)+, (A6)     
000BEC8C 2C99                                       move.l  (A1)+, (A6)
000BEC8E 2C99                                       move.l  (A1)+, (A6)
000BEC90 2C99                                       move.l  (A1)+, (A6)
000BEC92 51C8 FFEE                                  dbra    D0, Menu_Loop_Load_Tiles
000BEC96                            Exit_Dinamic_Menu:                
000BEC96                                           
000BEC96 4E75                                       rts      
000BEC98                                                    
000BEC98                            Sonic_Miles_Frame_Select:     
000BEC98 0000 0000 0000 0000 0000+                  dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
000BECA6 050A                                       dc.b    $05, $0A
000BECA8 0F0F 0F0F 0F0F 0F0F 0F0F+                  dc.b    $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F
000BECB6 0A05                                       dc.b    $0A, $05   
000BECB8                            ; ===========================================================================
000BECB8                            ; off_92BA:
000BECB8                            OptScrBoxData:
000BECB8                            
000BECB8 0000 0000                  		dc.l TextOptScr_PlayerSelect
000BECBC 4192                       		dc.w $4192
000BECBE 0003                       		dc.w 3
000BECC0 0000 0000                  		dc.l TextOptScr_LivesSystem
000BECC4 4592                       		dc.w $4592
000BECC6 0003                       		dc.w 3
000BECC8                            
000BECC8                            off_92D2:
000BECC8 0000 0000                  		dc.l TextOptScr_Default
000BECCC 0000 0000                  		dc.l TextOptScr_Original
000BECD0 0000 0000                  		dc.l TextOptScr_Beta
000BECD4 0000 0000                  		dc.l TextOptScr_Midnight
000BECD8 0000 0000                  		dc.l TextOptScr_C2
000BECDC 0000 0000                  		dc.l TextOptScr_Clackers
000BECE0 0000 0000                  		dc.l TextOptScr_RHS
000BECE4 0000 0000                  		dc.l TextOptScr_Socket
000BECE8 0000 0000                  		dc.l TextOptScr_Cringe
000BECEC 0000 0000                  		dc.l TextOptScr_Dark	
000BECF0 0000 0000                  		dc.l TextOptScr_DeltaWooloo			
000BECF4                            off_92DE:
000BECF4 0000 0000                  		dc.l TextOptScr_Default
000BECF8 0000 0000                  		dc.l TextOptScr_Original
000BECFC 0000 0000                  		dc.l TextOptScr_Beta
000BED00 0000 0000                  		dc.l TextOptScr_Midnight
000BED04 0000 0000                  		dc.l TextOptScr_C2
000BED08 0000 0000                  		dc.l TextOptScr_Clackers
000BED0C 0000 0000                  		dc.l TextOptScr_RHS
000BED10 0000 0000                  		dc.l TextOptScr_Socket
000BED14 0000 0000                  		dc.l TextOptScr_Cringe
000BED18 0000 0000                  		dc.l TextOptScr_Dark
000BED1C 0000 0000                  		dc.l TextOptScr_DeltaWooloo		
000BED20                            off_92EA:
000BED20 0000 0000                  		dc.l TextOptScr_On
000BED24 0000 0000                  		dc.l TextOptScr_Off
000BED28                            ; ===========================================================================
000BED28                            
000BEE20                            ; ============================================================================
000BEE20                            		even
000BEE20                            Sonic_Miles_Spr:	incbin  "artunc/Sonic and Miles text.bin"
000BF320                            		even
000BF320                            Eni_MenuBg:    incbin    "tilemaps/menubgeni.bin"
000BF4D0                            		even
000BF4D0                            Nem_MenuFont:    incbin    "artnem/Standard font.bin"
000BFA3A                            		even
000BFA3A                            Nem_MenuBox:    incbin   "artnem/Menu Box.bin"
000BFABA                            		even
000BFABA                            Eni_MenuBox:    incbin    "tilemaps/menuboxeni.bin"
000BFAE6                            		even
000BFAE6                            		even
000BFAE6                            
000BFAE6                            SHC2022:    incbin "SHC22_Full_Sonic12.bin"
0013D36A                                        even
0013D36A                            
0013D36A                            Art_Dust:	incbin	artunc\spindust.bin
0013ECAA                            
0013ECAA                            ; ===============================================================
0013ECAA                            ; ==============================================================
0013ECAA                            ; --------------------------------------------------------------
0013ECAA                            ; Debugging modules
0013ECAA                            ; --------------------------------------------------------------
0013ECAA                            
0013ECAA                               include   "ErrorHandler.asm"
0013ECAA                            
0013ECAA                            ; ===============================================================
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            ; Error handling and debugging modules
0013ECAA                            ; 2016-2017, Vladikcomper
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            ; Error handler functions and calls
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            ; Error handler control flags
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            
0013ECAA                            ; Screen appearence flags
0013ECAA =00000001                  _eh_address_error	equ	$01		; use for address and bus errors only (tells error handler to display additional "Address" field)
0013ECAA =00000002                  _eh_show_sr_usp		equ	$02		; displays SR and USP registers content on error screen
0013ECAA =00000010                  _eh_disassemble		equ	$10		; disassembles the instruction where the error happened + vint and hint handlers
0013ECAA                            
0013ECAA                            ; Advanced execution flags
0013ECAA                            ; WARNING! For experts only, DO NOT USES them unless you know what you're doing
0013ECAA =00000020                  _eh_return		equ	$20
0013ECAA =00000040                  _eh_enter_console	equ	$40
0013ECAA =00000080                  _eh_align_offset	equ	$80
0013ECAA                            
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            ; Errors vector table
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            
0013ECAA                            ; Default screen configuration
0013ECAA =00000000                  _eh_default			equ	0 ;_eh_show_sr_usp
0013ECAA                            
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            
0013ECAA                            BusError:
0013ECAA 4EB9 0000 0000 4255 5320+  	__ErrorMessage "BUS ERROR", _eh_default|_eh_address_error|_eh_disassemble
0013ECBC                            
0013ECBC                            AddressError:
0013ECBC 4EB9 0000 0000 4144 4452+  	__ErrorMessage "ADDRESS ERROR", _eh_default|_eh_address_error|_eh_disassemble
0013ECD2                            
0013ECD2                            IllegalInstr:
0013ECD2 4EB9 0000 0000 494C 4C45+  	__ErrorMessage "ILLEGAL INSTRUCTION", _eh_default|_eh_disassemble
0013ECEE                            
0013ECEE                            ZeroDivide:
0013ECEE 4EB9 0000 0000 5A45 524F+  	__ErrorMessage "ZERO DIVIDE", _eh_default|_eh_disassemble
0013ED02                            
0013ED02                            ChkInstr:
0013ED02 4EB9 0000 0000 4348 4B20+  	__ErrorMessage "CHK INSTRUCTION", _eh_default|_eh_disassemble
0013ED1A                            
0013ED1A                            TrapvInstr:
0013ED1A 4EB9 0000 0000 5452 4150+  	__ErrorMessage "TRAPV INSTRUCTION", _eh_default|_eh_disassemble
0013ED34                            
0013ED34                            PrivilegeViol:
0013ED34 4EB9 0000 0000 5052 4956+  	__ErrorMessage "PRIVILEGE VIOLATION", _eh_default|_eh_disassemble
0013ED50                            
0013ED50                            Trace:
0013ED50 4EB9 0000 0000 5452 4143+  	__ErrorMessage "TRACE", _eh_default|_eh_disassemble
0013ED5E                            
0013ED5E                            Line1010Emu:
0013ED5E 4EB9 0000 0000 4C49 4E45+  	__ErrorMessage "LINE A EMULATOR", _eh_default|_eh_disassemble
0013ED76                            
0013ED76                            Line1111Emu:
0013ED76 4EB9 0000 0000 4C49 4E45+  	__ErrorMessage "LINE F EMULATOR", _eh_default|_eh_disassemble
0013ED8E                            
0013ED8E                            ErrorExcept:
0013ED8E 4EB9 0000 0000 4552 524F+  	__ErrorMessage "ERROR EXCEPTION", _eh_default|_eh_disassemble
0013EDA6                            
0013EDA6                            ; ---------------------------------------------------------------
0013EDA6                            ; Import error handler global functions
0013EDA6                            ; ---------------------------------------------------------------
0013EDA6                            
0013EDA6                            ErrorHandler.__global__error_initconsole equ ErrorHandler+$158
0013EDA6                            ErrorHandler.__global__errorhandler_setupvdp equ ErrorHandler+$25C
0013EDA6                            ErrorHandler.__global__console_loadpalette equ ErrorHandler+$AE2
0013EDA6                            ErrorHandler.__global__console_setposasxy_stack equ ErrorHandler+$B1E
0013EDA6                            ErrorHandler.__global__console_setposasxy equ ErrorHandler+$B24
0013EDA6                            ErrorHandler.__global__console_getposasxy equ ErrorHandler+$B50
0013EDA6                            ErrorHandler.__global__console_startnewline equ ErrorHandler+$B72
0013EDA6                            ErrorHandler.__global__console_setbasepattern equ ErrorHandler+$B9A
0013EDA6                            ErrorHandler.__global__console_setwidth equ ErrorHandler+$BAE
0013EDA6                            ErrorHandler.__global__console_writeline_withpattern equ ErrorHandler+$BC4
0013EDA6                            ErrorHandler.__global__console_writeline equ ErrorHandler+$BC6
0013EDA6                            ErrorHandler.__global__console_write equ ErrorHandler+$BCA
0013EDA6                            ErrorHandler.__global__console_writeline_formatted equ ErrorHandler+$C76
0013EDA6                            ErrorHandler.__global__console_write_formatted equ ErrorHandler+$C7A
0013EDA6                            ErrorHandler.__global__decode68k equ ErrorHandler+$CE6
0013EDA6                            
0013EDA6                            ; ---------------------------------------------------------------
0013EDA6                            ; Error handler external functions (compiled only when used)
0013EDA6                            ; ---------------------------------------------------------------
0013EDA6                            
0013EDA6                            
0013EDA6                            
0013EDA6                            
0013EDA6                            
0013EDA6                            ; ---------------------------------------------------------------
0013EDA6                            ; Include error handler binary module
0013EDA6                            ; ---------------------------------------------------------------
0013EDA6                            
0013EDA6                            ErrorHandler:
0013EDA6                            	incbin	ErrorHandler.bin
001407BA                            
001407BA                            ; ---------------------------------------------------------------
001407BA                            ; WARNING!
001407BA                            ;	DO NOT put any data from now on! DO NOT use ROM padding!
001407BA                            ;	Symbol data should be appended here after ROM is compiled
001407BA                            ;	by ConvSym utility, otherwise debugger modules won't be able
001407BA                            ;	to resolve symbol names.
001407BA                            ; ---------------------------------------------------------------
001407BA                            ; ---------------------------------------------------------------
001407BA                            
001407BA                            ; end of 'ROM'
001407BA                            		even
001407BA                            EndOfRom:
001407BA                            
001407BA                            
